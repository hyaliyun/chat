import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,a,r){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",E],["__scopeId","data-v-1e0998b2"]]),A=JSON.parse('[{"question":"An advanced binary search algorithm is typically used to quickly find elements or solve problems involving sorted data. One common application is finding the minimum value that satisfies a certain condition. Consider the following problem: You are given a sorted array of integers and a target integer `x`. Write a function to find and return the smallest integer in the array that is greater than or equal to `x`. If no such element exists, return `-1`. Function Signature: ```python def find_min_gte(arr: List[int], x: int) -> int: ``` Input: - `arr` (1 ≤ len(arr) ≤ 10^5): a sorted list of integers (-10^9 ≤ arr[i] ≤ 10^9) - `x` (-10^9 ≤ x ≤ 10^9): the target integer Output: - an integer representing the smallest integer in the array that is greater than or equal to `x`, or `-1` if no such element exists. Examples: ```python assert find_min_gte([1, 2, 3, 4, 5], 3) == 3 assert find_min_gte([1, 2, 3, 4, 5], 6) == -1 assert find_min_gte([-3, -1, 0, 3, 4], -2) == -1 assert find_min_gte([10, 20, 30, 40], 25) == 30 ``` Explanation: In the first example, the smallest integer greater than or equal to `3` is `3`. In the second example, there is no integer greater than or equal to `6`, so it returns `-1`. In the third example, there is no integer greater than or equal to `-2`, so it returns `-1`. The fourth example returns `30` because it is the smallest integer in the array which is greater than `25`. Constraints: - You can assume the input list is sorted in non-descending order. - Your solution must run in O(log n) time complexity.","solution":"from typing import List def find_min_gte(arr: List[int], x: int) -> int: Finds the smallest integer in the array that is greater than or equal to x. If no such integer exists, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] >= x: result = arr[mid] right = mid - 1 else: left = mid + 1 return result if result != -1 else -1"},{"question":"Alice and Bob are playing a game on a 2D grid. The grid is an n x n matrix where each cell contains one of two values: a 1 or a 0. Alice starts at the top-left corner of the grid (position (0, 0)) and wants to reach the bottom-right corner of the grid (position (n-1, n-1)). She can only move to the right or down at each step. However, she can only step on cells that contain a 1. Bob, on the other hand, can change up to k cells in the grid from 1 to 0 before Alice starts her journey. His goal is to make it impossible for Alice to reach her destination. Write a function `bob_can_block` that determines whether Bob can change up to k cells to block Alice from reaching the bottom-right corner of the grid. Function Signature: `def bob_can_block(grid: List[List[int]], k: int) -> bool:` Input: - `grid` (List[List[int]]): A 2D list of integers representing the grid (1s and 0s). - `k` (int): The number of cells Bob can change from 1 to 0. Output: - Return `True` if Bob can block Alice from reaching the bottom-right corner; otherwise, return `False`. Constraints: - 1 <= n <= 10 - 0 <= k <= n^2 Example Input: grid = [ [1, 1, 0, 1], [1, 1, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1] ] k = 2 Example Output: True Explanation: Bob can change the cells at positions (1, 2) and (3, 1) from 1 to 0. This will block any possible path for Alice from (0, 0) to (3, 3). Hence, the function returns True.","solution":"def bob_can_block(grid, k): Determines if Bob can block Alice from reaching the bottom-right corner by changing up to k cells from 1 to 0. n = len(grid) def is_reachable(): from collections import deque directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, n-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 1: queue.append((nx, ny)) visited.add((nx, ny)) return False if not is_reachable(): return True ones_positions = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == 1 and (i != 0 or j != 0) and (i != n-1 or j != n-1)] from itertools import combinations for positions in combinations(ones_positions, k): for x, y in positions: grid[x][y] = 0 if not is_reachable(): return True for x, y in positions: grid[x][y] = 1 return False"},{"question":"STATEMENT You are given a list of N integers where each integer can belong to either of the two categories: positive or negative. You need to sort the list in such a way that all positive integers come before all negative integers, while preserving the relative order of the integers within their respective categories. INPUT The first line will contain an integer T, denoting the number of test cases. Each test case contains two lines. The first line of each test case will contain an integer N, the size of the list. The second line of each test case contains N space-separated integers which make up the list. 1 <= T <= 100 1 <= N <= 1000 -1000 <= integers in the list <= 1000 OUTPUT For each test case, print one line containing the rearranged list of integers. EXAMPLE INPUT 2 6 -1 2 -3 4 -5 6 4 7 -8 9 -10 OUTPUT 2 4 6 -1 -3 -5 7 9 -8 -10","solution":"def sort_pos_neg(arr): This function takes a list of integers and returns a new list with all positive integers before all negative integers, while preserving the relative order of the integers within their respective categories. positives = [x for x in arr if x >= 0] negatives = [x for x in arr if x < 0] return positives + negatives def rearrange_lists(test_cases): This function takes a list of test case tuples and prints the rearranged lists as per the conditions. Each tuple contains the size of the list and the list itself. results = [] for N, arr in test_cases: rearranged = sort_pos_neg(arr) results.append(rearranged) return results"},{"question":"You are given an array A consisting of N integers. Your goal is to find the sum of the maximum and minimum element in every contiguous subarray of length K from A. Write a function to solve this problem. Function Signature: ```python def sum_of_min_max(A: List[int], K: int) -> List[int]: ``` # Input * The first line contains an integer N, the number of elements in the array A. * The second line contains N integers, the elements of array A. * The third line contains an integer K, the length of the subarrays. 1. 1 ≤ N ≤ 100,000 2. 1 ≤ A[i] ≤ 1,000,000 (1 ≤ i ≤ N) 3. 1 ≤ K ≤ N # Output * Return a list of integers, where the i-th integer is the sum of the maximum and minimum element in the subarray A[i:i+K]. # Example **Input** ``` 7 2 5 1 8 10 6 3 3 ``` **Output** ``` [6, 6, 9, 16, 16] ``` **Explanation** The contiguous subarrays of length 3 are: * [2, 5, 1] -> max(2, 5, 1) + min(2, 5, 1) = 5 + 1 = 6 * [5, 1, 8] -> max(5, 1, 8) + min(5, 1, 8) = 8 + 1 = 9 * [1, 8, 10] -> max(1, 8, 10) + min(1, 8, 10) = 10 + 1 = 11 * [8, 10, 6] -> max(8, 10, 6) + min(8, 10, 6) = 10 + 6 = 16 * [10, 6, 3] -> max(10, 6, 3) + min(10, 6, 3) = 10 + 3 = 13","solution":"from collections import deque from typing import List def sum_of_min_max(A: List[int], K: int) -> List[int]: n = len(A) if K > n or K == 0: return [] min_deque, max_deque = deque(), deque() result = [] for i in range(K): while min_deque and A[min_deque[-1]] >= A[i]: min_deque.pop() while max_deque and A[max_deque[-1]] <= A[i]: max_deque.pop() min_deque.append(i) max_deque.append(i) for i in range(K, n): result.append(A[min_deque[0]] + A[max_deque[0]]) while min_deque and min_deque[0] <= i - K: min_deque.popleft() while max_deque and max_deque[0] <= i - K: max_deque.popleft() while min_deque and A[min_deque[-1]] >= A[i]: min_deque.pop() while max_deque and A[max_deque[-1]] <= A[i]: max_deque.pop() min_deque.append(i) max_deque.append(i) result.append(A[min_deque[0]] + A[max_deque[0]]) return result"},{"question":"Write a program to determine the longest path in a weighted, undirected graph where no two consecutive edges on the path have the same weight. The graph is defined by a set of vertices V and a set of weighted edges E connecting those vertices. Each edge in the graph has a weight w associated with it. Input The first line of input contains two integers, n and m, where n is the number of vertices in the graph (1 ≤ n ≤ 1000) and m is the number of edges (1 ≤ m ≤ 5000). The next m lines each contain three integers, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), which denotes an edge between vertex u and vertex v with weight w. Output Output a single integer, the length of the longest path on which no two consecutive edges have the same weight. If there is no valid path, output 0. Example Input 4 5 1 2 10 2 3 20 3 4 30 1 3 20 2 4 10 Output 3 Input 3 2 1 2 5 2 3 5 Output 1 Explanation In the first example, the longest path is 1 -> 2 -> 3 -> 4 with total 3 edges having different weights (10, 20, 30). In the second example, one possible valid path is 1 -> 2 -> 3. However, it does not consider the weight restriction, hence the valid path in context to edge-weight constraints is only of length 1. Note You need to ensure that no two consecutive edges on the longest path can have the same weight.","solution":"from collections import defaultdict, deque def longest_path_no_consecutive_same_weight(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): max_length = 0 visited = set() queue = deque([(start, -1, 0)]) # (current vertex, previous weight, path length) while queue: u, prev_weight, length = queue.popleft() max_length = max(max_length, length) for v, w in graph[u]: if (u, v) not in visited and (v, u) not in visited and w != prev_weight: visited.add((u, v)) queue.append((v, w, length + 1)) return max_length longest_path = 0 for node in range(1, n + 1): longest_path = max(longest_path, bfs(node)) return longest_path"},{"question":"Problem description. You are designing a new data structure to help manage a parking lot system. Each parking space is identified by a unique identifier and can be in one of two states: occupied or vacant. The parking lot needs to support the following operations efficiently: 1. Park a car in a specified space. 2. Remove a car from a specified space. 3. Check if a specified space is occupied or vacant. 4. Find the nearest vacant space from a given starting point (searching either to the left or right). Write a program that implements these operations for a parking lot with a maximum of 10,000 spaces (indexed from 0 to 9999). Input The first line contains an integer N, the number of operations to be performed. Each of the next N lines contains an operation and its parameters in one of the following formats: - PARK x (where x is the parking space identifier). - REMOVE x (where x is the parking space identifier). - CHECK x (where x is the parking space identifier). - NEAREST x d (where x is the starting parking space identifier, and d is the direction, either \'L\' for left or \'R\' for right). Output For each CHECK operation, output a single line containing \\"Occupied\\" or \\"Vacant\\". For each NEAREST operation, output a single line containing the identifier of the nearest vacant space in the given direction. If no such space exists, output \\"None\\". Constraints 1 ≤ N ≤ 100,000 0 ≤ x < 10,000 Example Input: 10 PARK 10 PARK 20 CHECK 10 CHECK 30 REMOVE 10 CHECK 10 NEAREST 15 R PARK 25 NEAREST 15 L REMOVE 25 Output: Occupied Vacant Vacant 16 14 Explanation: - The first PARK operation parks a car in space 10. - The second PARK operation parks a car in space 20. - The first CHECK operation confirms that space 10 is occupied. - The second CHECK operation confirms that space 30 is vacant. - The REMOVE operation removes the car from space 10. - The third CHECK operation confirms that space 10 is now vacant. - The first NEAREST operation finds that space 16 is the nearest vacant space to the right of space 15. - The third PARK operation parks a car in space 25. - The second NEAREST operation finds that space 14 is the nearest vacant space to the left of space 15. - The last REMOVE operation removes the car from space 25.","solution":"class ParkingLot: def __init__(self): self.spaces = [False] * 10000 def park(self, x): self.spaces[x] = True def remove(self, x): self.spaces[x] = False def check(self, x): return \\"Occupied\\" if self.spaces[x] else \\"Vacant\\" def nearest(self, x, d): if d == \'L\': for i in range(x-1, -1, -1): if not self.spaces[i]: return i elif d == \'R\': for i in range(x+1, 10000): if not self.spaces[i]: return i return \\"None\\""},{"question":"A telemetry system continuously monitors the temperature of a machine that can range from -50 to 150 degrees Celsius. Every 1 unit of time, an integer temperature reading is recorded. The system needs to determine if there has been any significant temperature fluctuation within a continuous interval of time. You are given a window size `k` and a threshold value `t`. Your task is to check if there are any two temperature readings within any window of size `k` that have a difference greater than or equal to `t`. Input The first line contains three integers n, k, and t (1 ≤ n ≤ 100000; 1 ≤ k ≤ n; 0 ≤ t ≤ 200). The next line contains n integers representing the temperature readings over time, with each reading within the range [-50, 150]. Output Print \\"YES\\" if there exists a window of size `k` where any two temperature readings differ by at least `t`, otherwise print \\"NO\\". Examples Input 8 3 30 5 20 15 35 50 65 80 95 Output YES Input 5 2 60 -10 40 10 5 -15 Output NO","solution":"def temperature_fluctuation(n, k, t, readings): Determine if there has been any significant temperature fluctuation within a continuous interval of time. :param n: Total number of temperature readings :param k: Window size :param t: Threshold value :param readings: List of integer temperature readings :return: \\"YES\\" if there exists a window of size `k` where any two readings differ by at least `t`, otherwise \\"NO\\" for i in range(n - k + 1): window = readings[i:i + k] for j in range(len(window)): for l in range(j + 1, len(window)): if abs(window[j] - window[l]) >= t: return \\"YES\\" return \\"NO\\""},{"question":"A city is planning to install new traffic lights on its streets. The streets are represented as an undirected graph with nodes as intersections and edges as streets connecting those intersections. Each street has a length, and the objective is to maximize the effectiveness of the traffic lights placed at intersections. Traffic lights can only be installed at either end of the street. Once a traffic light is installed at an intersection, it controls all streets connected to that intersection. You are given an undirected graph with n nodes and m edges. Your task is to determine the positions of the traffic lights to maximize the total length of the streets controlled by the traffic lights, ensuring that at least one traffic light is placed at either end of every street. Input The first input line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 2000) representing the number of intersections and streets, respectively. The next m lines each contain three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10^6), meaning there is a street of length l connecting intersections u and v. Output Print a single integer representing the maximum total length of the streets controlled by the traffic lights. Examples Input 5 5 1 2 5 1 3 3 2 3 2 4 5 4 4 1 1 Output 15 Input 4 3 1 2 8 2 3 6 3 4 5 Output 19","solution":"def max_controlled_street_length(n, m, edges): Calculates the maximum total length of the streets controlled by traffic lights. Parameters: n (int): Number of intersections. m (int): Number of streets. edges (list of tuples): Each tuple (u, v, l) represents a street of length l connecting intersections u and v. Returns: int: Maximum total length of the streets controlled by the traffic lights. total_length = 0 for _, _, length in edges: total_length += length return total_length"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In this problem, you will be given a string and an integer k, and your task is to determine if it is possible to rearrange the string in such a way that it becomes a palindrome by modifying at most k characters. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2t lines contain descriptions of test cases. The first line of each test case contains an integer k (0 ≤ k ≤ 1000). The second line of each test case contains a string s of length between 1 and 1000, consisting of lowercase English letters. Output For each test case, output \\"YES\\" if it is possible to rearrange the string into a palindrome by modifying at most k characters; otherwise, output \\"NO\\". Example Input 3 1 abccba 2 aabbcc 1 abcdef Output YES YES NO Note In the first test case, the string is already a palindrome, so the answer is \\"YES\\". In the second test case, we can rearrange the string to become \\"abc cba\\" or \\"ac b ba\\", both of which can become palindromes by modifying at most 2 characters (e.g., \\"abccba\\" or \\"aacbaa\\"). In the third test case, it is not possible to rearrange the string \\"abcdef\\" into a palindrome by modifying at most 1 character.","solution":"def can_form_palindrome(t, test_cases): def is_palindrome(s): return s == s[::-1] def count_changes_needed(s): n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: changes += 1 return changes results = [] for i in range(t): k, s = test_cases[i] changes_needed = count_changes_needed(s) if is_palindrome(s): results.append(\\"YES\\") elif changes_needed <= k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: t = 3 test_cases = [ (1, \\"abccba\\"), (2, \\"aabbcc\\"), (1, \\"abcdef\\") ] print(can_form_palindrome(t, test_cases)) # Output should be [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"Design a function called `find_optimal_word` which can take a text corpus and a list of words as input. Your function should identify and return the word that, when removed from the text, results in the highest possible increase in lexical variance (calculated as the variance in length of the words within the text). To calculate lexical variance: 1. Tokenize the text into individual words. 2. Calculate the length of each word. 3. Compute the variance in the word lengths. You need to evaluate the lexical variance of the text for each word in the provided list, assuming that word is removed from the text. Return the word whose removal yields the highest increase in lexical variance. # Input - A string `text`, representing the text corpus (length up to 1000 characters). - A list `words`, containing words to evaluate (1 ≤ len(words) ≤ 100, each word\'s length up to 30 characters). # Output - Print the word from the list whose removal maximizes the lexical variance increase. - If more than one word results in the same variance increase, return the lexicographically smallest word. # Example Input ``` text = \\"The quick brown fox jumps over the lazy dog\\" words = [\\"the\\", \\"fox\\", \\"lazy\\"] ``` Output ``` lazy ``` # Explanation Removing \\"lazy\\" from the text results in a higher increase in the variance of the length of the words compared to removing \\"the\\" or \\"fox\\".","solution":"import statistics def calculate_variance(text): words = text.split() lengths = [len(word) for word in words] return statistics.variance(lengths) if len(lengths) > 1 else 0 def find_optimal_word(text, words): original_variance = calculate_variance(text) optimal_word = None max_increase = float(\'-inf\') for word in words: modified_text = text.replace(word, \'\', 1) new_variance = calculate_variance(modified_text) variance_increase = new_variance - original_variance if (variance_increase > max_increase) or (variance_increase == max_increase and (optimal_word is None or word < optimal_word)): optimal_word = word max_increase = variance_increase return optimal_word"},{"question":"You are the lead engineer of a spacecraft and tasked with determining the shortest communication route between two critical systems in the spacecraft. The spacecraft\'s communication network can be represented as a weighted graph, where nodes represent various systems and edges represent direct communication links between them with specific time delays. Given the number of systems, the number of communication links, and the delay time for each link, your task is to find the shortest communication delay between two specified systems. If no path exists between the two systems, return -1. Input The first line contains two integers N (2 ≤ N ≤ 1,000) and M (1 ≤ M ≤ 10,000), representing the number of systems and the number of communication links, respectively. The next M lines each contain three integers U, V, and W (0 ≤ U, V < N), where U and V are system indices connected by a direct communication link with a delay of W milliseconds (1 ≤ W ≤ 1,000). The last line contains two integers S and T (0 ≤ S, T < N), representing the source system S and the target system T. Output A single integer, the shortest communication delay between system S and system T. If no path exists, output -1. Example Input 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 4 1 0 4 Output 8 Note The shortest communication path from system 0 to system 4 is through systems 0 -> 1 -> 2 -> 4 with a total delay of 2 + 1 + 3 = 6.","solution":"import heapq def shortest_communication_delay(N, M, edges, S, T): Returns the shortest communication delay between system S and system T. If there is no such path, returns -1. # Create a graph represented by an adjacency list graph = {i: [] for i in range(N)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Assuming bidirectional communication # Dijkstra\'s algorithm to find the shortest path pq = [(0, S)] # (distance, node) distances = {i: float(\'inf\') for i in range(N)} distances[S] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == T: return current_distance for neighbor, weight in graph[current_node]: if neighbor not in visited: new_distance = current_distance + weight if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) return -1 if distances[T] == float(\'inf\') else distances[T]"},{"question":"In a distant land, Berylco, there is a special type of number called \\"Happy Numbers\\". A positive integer is called a \\"Happy Number\\" if by replacing it with the sum of the squares of its digits, and repeating the process, eventually results in the number 1. If this process results in an endless cycle of numbers which does not include 1, then the number is termed as \\"Unhappy\\". Your task is to write a program that determines if a given number is a Happy Number or not. Input The input file consists of a single line containing an integer n (1 ≤ n ≤ 10^9). Output Output \\"Happy\\" if the number n is a Happy Number; otherwise, print \\"Unhappy\\". Examples Input 19 Output Happy Input 4 Output Unhappy Note For the first example, the sequence is as follows: 19 → 1^2 + 9^2 = 1 + 81 = 82 → 8^2 + 2^2 = 64 + 4 = 68 → 6^2 + 8^2 = 36 + 64 = 100 → 1^2 + 0^2 + 0^2 = 1. Since the sequence includes 1, the number 19 is a Happy Number. For the second example, the sequence is as follows: 4 → 4^2 = 16 → 1^2 + 6^2 = 1 + 36 = 37 → 3^2 + 7^2 = 9 + 49 = 58 → 5^2 + 8^2 = 25 + 64 = 89 → 8^2 + 9^2 = 64 + 81 = 145 → 1^2 + 4^2 + 5^2 = 1 + 16 + 25 = 42 → 4^2 + 2^2 = 16 + 4 = 20 → 2^2 + 0^2 = 4 + 0 = 4. Since the sequence enters an endless loop without reaching 1, the number 4 is an Unhappy Number.","solution":"def is_happy_number(n): Determines if the given number n is a Happy Number. Parameters: n (int): A positive integer to check for happiness. Returns: str: \\"Happy\\" if the number is a Happy Number, \\"Unhappy\\" otherwise. visited = set() while n != 1 and n not in visited: visited.add(n) n = sum(int(digit) ** 2 for digit in str(n)) return \\"Happy\\" if n == 1 else \\"Unhappy\\""},{"question":"You are given a string S consisting of lowercase English alphabet letters. You need to determine if you can rearrange the letters of the string such that no two adjacent characters are the same. If it is possible, return one possible rearranged string; otherwise, return \\"Not possible\\". Input The first line contains T - the number of test cases. The following T lines contain one string S each for the following test case. Output For each test case output either one possible rearranged string or \\"Not possible\\" on a separate line. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 aab aaab SAMPLE OUTPUT aba Not possible","solution":"from collections import Counter import heapq def rearrange_string(S): Returns a possible rearranged string such that no two adjacent characters are the same. If it\'s not possible, \\"Not possible\\" is returned. # Count the frequency of each character freq = Counter(S) max_heap = [] for char, count in freq.items(): heapq.heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If the previous character can be added back to heap for future use. if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char, prev_count = char, count + 1 if len(result) == len(S): return \\"\\".join(result) else: return \\"Not possible\\" def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(rearrange_string(test_cases[i])) return results"},{"question":"You are given an integer array nums and an integer k. Write a function to return the k most frequently occurring elements in the array. You may return the answer in any order. Input The first line of input contains two integers n (1 ≤ n ≤ 100000) and k (1 ≤ k ≤ n), where n is the number of elements in the array and k is the number of most frequent elements to return. The second line contains n integers representing the elements of the array nums (-1000000 ≤ nums[i] ≤ 1000000). Output Output k integers which are the k most frequently occurring elements in the array. Examples Input 6 2 1 1 1 2 2 3 Output 1 2 Input 8 3 4 4 4 4 8 8 7 7 Output 4 8 7 Note In the first example, 1 appears 3 times, 2 appears 2 times, and 3 appears 1 time. The two most frequent elements are 1 and 2. In the second example, 4 appears 4 times, 8 appears 2 times, and 7 appears 2 times. The three most frequent elements are 4, 8, and 7. The order in the output does not matter, so the output could be any permutation of these numbers.","solution":"from collections import Counter from heapq import nlargest def k_most_frequent_elements(nums, k): Returns the k most frequently occurring elements in the array nums. # Count the frequency of each element in the array count = Counter(nums) # Find the k elements with the highest frequencies most_common = nlargest(k, count.keys(), key=count.get) return most_common"},{"question":"A software company is implementing a new feature for their file processing system. In this system, file operations are executed based on a sequence of events, consisting of opening a file, performing multiple operations on it, and then closing the file. The operations could be either reading from or writing to the file. Given a sequence of events, you need to verify if it is valid. A valid sequence should adhere to the following rules: 1. A file must be opened before it can be read from or written to. 2. A file must be closed after all operations on it are completed. 3. A file cannot be open more than once at a time. 4. A file cannot be closed if it is not currently open. You are given multiple test cases, each containing a sequence of events. For each test case, determine whether the sequence is valid or not. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of events in the sequence. - The second line contains n space-separated strings representing the events. Each event is either `\\"Open\\"`, `\\"Close\\"`, `\\"Read\\"`, or `\\"Write\\"`. Output For each test case, print `\\"YES\\"` if the sequence of events is valid and `\\"NO\\"` otherwise. Example Input 3 6 Open Read Write Close Open Close 5 Open Write Close Write Close 4 Read Open Close Write Output YES NO NO","solution":"def validate_sequence(n, events): is_open = False for event in events: if event == \\"Open\\": if is_open: return \\"NO\\" is_open = True elif event == \\"Close\\": if not is_open: return \\"NO\\" is_open = False else: # event is \\"Read\\" or \\"Write\\" if not is_open: return \\"NO\\" return \\"YES\\" if not is_open else \\"NO\\" def process_cases(t, cases): results = [] for i in range(t): n = cases[i][0] events = cases[i][1] result = validate_sequence(n, events) results.append(result) return results"},{"question":"Given an integer M, write a function to determine if it\'s possible to express M as the sum of exactly three distinct prime numbers. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Constraints * 1 leq M leq 300 Input Input is given from Standard Input in the following format: M Output Print \\"YES\\" if M can be expressed as the sum of exactly three distinct prime numbers, otherwise print \\"NO\\". Examples Input 28 Output YES Input 11 Output NO Input 31 Output YES","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_be_expressed_as_sum_of_three_primes(M): primes = [i for i in range(2, M) if is_prime(i)] for i in range(len(primes)): for j in range(i+1, len(primes)): for k in range(j+1, len(primes)): if primes[i] + primes[j] + primes[k] == M: return \\"YES\\" return \\"NO\\""},{"question":"You are given two strings, s1 and s2, of lengths n and m respectively. Your task is to check if s2 is a subsequence of s1. A string s2 is a subsequence of string s1 if deleting some (or no) characters from s1 results in s2, without changing the order of the remaining characters. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^6), the lengths of s1 and s2 respectively. The second line contains the string s1. The third line contains the string s2. Output Print \\"YES\\" if s2 is a subsequence of s1, otherwise print \\"NO\\". Examples Input 6 3 abcdey abc Output YES Input 7 4 abcdefg adeh Output NO Input 5 6 hello helloworld Output NO Note In the first sample test, the string \\"abc\\" is a subsequence of \\"abcdey\\". Removing \\"d\\", \\"e\\", and \\"y\\" from \\"abcdey\\" results in \\"abc\\". In the second sample test, there is no way to remove characters from \\"abcdefg\\" to form \\"adeh\\" while maintaining the order of characters. In the third sample test, \\"helloworld\\" cannot be formed from \\"hello\\" by removing characters since \\"helloworld\\" is longer than \\"hello\\".","solution":"def is_subsequence(s1, s2): Check if s2 is a subsequence of s1. :param s1: The main string :param s2: The subsequence to check :return: \\"YES\\" if s2 is a subsequence of s1, otherwise \\"NO\\" # Initialize pointers for both strings i, j = 0, 0 # Loop while both pointers are within their corresponding strings while i < len(s1) and j < len(s2): if s1[i] == s2[j]: j += 1 i += 1 # If we have successfully traversed all characters of s2, it is a subsequence if j == len(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a rectangular grid of size N × M consisting of cells, each of which is either empty or contains a wall. You start at the top-left corner (1, 1) and want to reach the bottom-right corner (N, M). From any cell you can move to adjacent cells horizontally or vertically, but you cannot move into walls. Additionally, you have a special ability that allows you to jump over exactly one wall to an adjacent cell (horizontally or vertically) up to K times. You want to minimize the total number of moves required to reach the bottom-right corner, including both regular moves and jumps. Write a function that determines the minimum number of moves required to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, return -1. Input The first line contains three integers N, M, and K (1 ≤ N, M ≤ 1000, 0 ≤ K ≤ 1000) — the dimensions of the grid and the maximum number of jumps allowed. Each of the next N lines contains M characters, each being either \'.\' (empty cell) or \'#\' (wall). Output Output a single integer — the minimum number of moves required to reach the bottom-right corner, or -1 if it is impossible. Example Input 4 4 1 .... .. .#.. .... Output 6 Explanation The shortest path involves using one jump to skip a wall: 1. Move to (1, 2) 2. Move to (1, 3) 3. Move to (1, 4) 4. Move to (2, 4) 5. Jump to (3, 4) (using special ability) 6. Move to (4, 4) Alternatively, if no jumps are necessary, the path would simply be a sequence of direct moves from the starting to the ending position.","solution":"from collections import deque def min_moves_required(N, M, K, grid): def is_within_bounds(x, y): return 0 <= x < N and 0 <= y < M def bfs(): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[[False] * (K + 1) for _ in range(M)] for __ in range(N)] queue = deque([(0, 0, K, 0)]) # (row, col, remaining_jumps, moves) visited[0][0][K] = True while queue: x, y, jumps_left, moves = queue.popleft() if x == N - 1 and y == M - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny): if grid[nx][ny] == \'.\' and not visited[nx][ny][jumps_left]: visited[nx][ny][jumps_left] = True queue.append((nx, ny, jumps_left, moves + 1)) elif grid[nx][ny] == \'#\' and jumps_left > 0 and not visited[nx][ny][jumps_left - 1]: visited[nx][ny][jumps_left - 1] = True queue.append((nx, ny, jumps_left - 1, moves + 1)) return -1 return bfs()"},{"question":"Santa Claus recently received a list of names of children and the number of toys he\'s brought for each child for Christmas. However, Santa needs to divide the toys equally among the children. He realizes that he might need to make some children wait if the total number of toys isn\'t perfectly divisible by the number of children. Your task is to write a program that distributes the toys evenly and determines the minimum number of toys that have to be added so that every child receives the same number of toys. Given an array `A` representing the number of toys each child should receive, your task is to determine the smallest number of toys that need to be added to make the distribution fair. Input Format: - The first line of input contains the integer N, the number of children. - The second line contains N space-separated integers, where the i-th integer represents the number of toys for the i-th child. Output Format: - Print the minimum number of toys that need to be added to make an even distribution. Constraints: 1 ≤ N ≤ 50 0 ≤ A[i] ≤ 100 SAMPLE INPUT 4 2 3 5 7 SAMPLE OUTPUT 2 Explanation: The total number of toys needed to make all children receive the same number of toys is 4 * (sum(A) // 4 + 1) = 4 * (17 // 4 + 1) = 4 * 5 = 20. Hence, 20 - 17 = 3 toys are needed.","solution":"def min_toys_to_add(N, A): total_toys = sum(A) to_add = N - (total_toys % N) return to_add if to_add != N else 0"},{"question":"In a faraway land called Terrabithia, there is a famous maze built out of a grid. Each cell of the grid can either be empty (\'.\') or contain a wall (\'#\'). The objective is to find out whether there exists a path from the top-left corner (1,1) to the bottom-right corner (n,m). You can move up, down, left, or right from an empty cell, but you cannot pass through walls. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid respectively. Each of the following n lines contains a string of length m consisting of characters \'.\' and \'#\' representing the grid. Output Output one line — \\"Yes\\" if there is a path from the top-left to the bottom-right corner, and \\"No\\" otherwise (both excluding quotation marks). You can output each letter in any case (upper or lower). Examples Input 5 5 ..... .#. ..... .#. ..... Output Yes Input 3 3 .#. # .#. Output No Note In the first example, there is a path from (1,1) to (5,5) as follows: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (5,5). In the second example, there is no path that connects the top-left corner to the bottom-right corner due to the wall at (2,2).","solution":"def is_path_possible(n, m, grid): from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"No\\""},{"question":"You want to become a world-class gardener, and are planting a garden with flowers. Each flower bed can hold only one flower, and you can only plant one type of flower in each bed. However, some flower beds are adjacent, meaning they share a border. If two beds share a border, the flowers planted in them must be different to avoid cross-pollination. Given the structure of your garden as a grid, determine the minimum number of different types of flowers needed to plant in a way that no two adjacent beds have the same type of flower. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the garden grid, respectively. Output Output a single integer representing the minimum number of different flower types needed. Examples Input 3 3 Output 2 Input 4 2 Output 2 Note For the first sample, you can alternate between two types of flowers in a checkerboard pattern, ensuring that no two adjacent beds have the same type of flower. For the second sample, the garden can be organized similarly in a checkerboard pattern to ensure no two adjacent beds have the same type of flower.","solution":"def minimum_flower_types(n, m): Returns the minimum number of different types of flowers needed to plant in a way that no two adjacent beds have the same type of flower. # A checkerboard pattern with 2 types of flowers will always work for any grid. return 2"},{"question":"The Kingdom of Wakanda is planning to construct N bridges to enhance transportation between cities. Wakanda is a kingdom with N cities in a straight line. The cities are numbered from 1 to N. Each bridge connects two distinct cities, and every city must be connected directly or indirectly to every other city through bridges. You are given a list of M potential bridges, where each bridge has a weight. The weight represents the cost to construct that bridge. Your task is to determine the minimum total cost to construct the bridges such that all cities are connected directly or indirectly. Constraints: * 2 leq N leq 10^5 * 1 leq M leq 3times 10^5 * 1 leq U, V leq N * 1 leq W leq 10^9 * (U, V, W) represents a bridge between cities U and V with weight W Input Input is given from Standard Input in the following format: N M U_1 V_1 W_1 U_2 V_2 W_2 : U_M V_M W_M Output Print the minimum total cost to construct all the bridges such that all cities are connected. Examples Input 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 Output 6 Input 3 3 1 2 5 1 3 4 2 3 6 Output 9 Input 2 1 1 2 2 Output 2","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_total_cost(N, M, bridges): # Kruskal\'s algorithm to find the minimum spanning tree (MST) # Sort bridges based on their weights bridges.sort(key=lambda bridge: bridge[2]) uf = UnionFind(N) mst_cost = 0 for u, v, w in bridges: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) mst_cost += w return mst_cost"},{"question":"You are given two sets of strings: A and B. You need to output the sum of the lengths of strings in the set C = {x | x = a + b, a ∈ A, b ∈ B} where + denotes string concatenation. Each concatenated string should be counted only once. For example, if A = {\\"ab\\", \\"c\\"} and B = {\\"de\\", \\"f\\"} you should count string \\"abde\\" once, despite the fact that you can get it as \\"ab\\" + \\"de\\". So the answer for this case is equal to the lengths: 4 (length of \\"abde\\") + 3 (length of \\"abf\\") + 3 (length of \\"cde\\") + 2 (length of \\"cf\\") = 12. The set A is given as a list of unique strings, and the set B is also given as a list of unique strings. Input The first line contains a single integer n_A (1 ≤ n_A ≤ 100), the number of elements in set A. The i-th of the next n_A lines contains one string, describing an element of set A. Each string is composed of lowercase English letters and has length between 1 and 1000. The next line contains a single integer n_B (1 ≤ n_B ≤ 100), the number of elements in set B. The i-th of the next n_B lines contains one string, describing an element of set B. Each string is composed of lowercase English letters and has length between 1 and 1000. Output Print one integer — the sum of lengths of all strings in set C = {x | x = a + b, a ∈ A, b ∈ B}. Examples Input 2 ab c 2 de f Output 12 Input 3 a b c 1 d Output 3 Note In the first example, the set C = {\\"abde\\", \\"abf\\", \\"cde\\", \\"cf\\"}. The total length is 4 + 3 + 3 + 2 = 12. In the second example, the set C = {\\"ad\\", \\"bd\\", \\"cd\\"}. The total length is 2 + 2 + 2 = 6.","solution":"def total_concatenated_length(A, B): unique_concatenations = set() for a in A: for b in B: unique_concatenations.add(a + b) total_length = sum(len(concatenation) for concatenation in unique_concatenations) return total_length # Example usage: A = [\\"ab\\", \\"c\\"] B = [\\"de\\", \\"f\\"] print(total_concatenated_length(A, B)) # Output: 12"},{"question":"Alice loves candies, and she enjoys arranging them in various patterns. Her favorite candy is represented as a cube of side length s. Alice has a box that can hold candies, and the box itself is in the shape of a cube with side length b. Alice wants to maximize the number of candies she can fit into the box. Knowing the dimensions of both the box and the candies, help Alice determine the maximum number of candy cubes she can place inside the box without exceeding its boundaries. Input The first and only line of the input contains two integer numbers s and b (1 ≤ s ≤ b ≤ 1000) — the side length of the candy cube and the side length of the box. Output Output the maximum number of candy cubes that can be placed inside the box. Examples Input 2 10 Output 125 Input 3 8 Output 8 Note In the first example, the box has a side length of 10, and each candy cube has a side length of 2. We can fit 5 candy cubes along each dimension (10 / 2 = 5), resulting in 5 * 5 * 5 = 125 candy cubes. In the second example, the box has a side length of 8, and each candy cube has a side length of 3. We can fit 2 candy cubes along each dimension (8 / 3 = 2), resulting in 2 * 2 * 2 = 8 candy cubes.","solution":"def max_candies(s, b): Calculate the maximum number of candies that can fit in the box. Parameters: s (int): side length of the candy cube. b (int): side length of the box. Returns: int: maximum number of caddies that can fit in the box. candies_per_side = b // s return candies_per_side ** 3 # the total number is the cube of count per side"},{"question":"Bob enjoys working with strings. He is particularly interested in Symmetrical Strings. A string is considered Symmetrical if it meets the following criteria: - The string can be split into two equal parts, and each character in the first half matches the corresponding character in the reverse of the second half. - The length of the string should be even. For example, the string \\"abccba\\" is Symmetrical because the first half \\"abc\\" matches the reverse of the second half \\"cba\\". However, the string \\"abxca\\" is not Symmetrical because \\"ab\\" does not match the reverse of \\"ca\\". Given a string S of length N, you need to determine if it is possible to form a Symmetrical String by removing at most one character from it. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output For each test case, print \\"YES\\" if it\'s possible to form a Symmetrical String by removing at most one character; otherwise, print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 The total length of all strings combined does not exceed 10^6. Example Input 3 abccba abcca abcdef Output YES YES NO","solution":"def is_symmetrical(s): Determines if it is possible to form a Symmetrical String by removing at most one character. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True n = len(s) left, right = 0, n - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def symmetrical_strings(test_cases): results = [] for s in test_cases: if is_symmetrical(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given N strings, you are required to check for each string if it contains all 26 letters of the English alphabet at least once. A string which contains all letters of the alphabet is called a pangram. Convert the case of the characters if necessary so that the check is case insensitive. Return \\"YES\\" if the string is a pangram and \\"NO\\" otherwise. Input: The first line contains the number of strings T. The next T lines contain one string each. Output: T lines, each containing \\"YES\\" or \\"NO\\" based on whether the corresponding string is a pangram or not. Constraints: 1 ≤ T ≤ 100 | 1 ≤ Length of each string ≤ 1000 SAMPLE INPUT 3 TheQuickBrownFoxJumpsOverTheLazyDog HelloWorld PackMyBoxWithFiveDozenLiquorJugs SAMPLE OUTPUT YES NO YES Explanation For the 1st test case, \\"TheQuickBrownFoxJumpsOverTheLazyDog\\" contains all letters from \'A\' to \'Z\', so the answer is \\"YES\\". For the 2nd test case, \\"HelloWorld\\" does not contain all letters from \'A\' to \'Z\', so the answer is \\"NO\\". For the 3rd test case, \\"PackMyBoxWithFiveDozenLiquorJugs\\" contains all letters from \'A\' to \'Z\', so the answer is \\"YES\\".","solution":"def is_pangram(s): Returns \'YES\' if the input string \'s\' is a pangram, otherwise \'NO\'. alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') s = s.lower() return \'YES\' if alphabet.issubset(set(s)) else \'NO\' def check_pangrams(strings): Takes a list of strings and returns a list of \'YES\' or \'NO\' based on whether each string is a pangram. results = [] for s in strings: results.append(is_pangram(s)) return results"},{"question":"The program is required to find all the sequences of positive integers of length n that sum up to a given total s. All elements in the sequences must be greater than 0. Input The input consists of two integers n and s, where n is the length of the sequence and s is the total sum of the elements. You may assume 1 ≤ n ≤ 10 and 1 ≤ s ≤ 100. Output There should be two lines in the output. In the first line, print the number m of valid sequences. In the second line, print all m sequences in lexicographical order, separated by spaces. Each sequence should be represented by a comma-separated list within square brackets. Examples: Input 3 6 Output 10 [1,1,4] [1,2,3] [1,3,2] [1,4,1] [2,1,3] [2,2,2] [2,3,1] [3,1,2] [3,2,1] [4,1,1] Input 2 3 Output 2 [1,2] [2,1]","solution":"from itertools import permutations def find_sequences(n, s): def generate_sequences(n, s): if n == 1: if s > 0: yield [s] return for i in range(1, s): for seq in generate_sequences(n - 1, s - i): yield [i] + seq unique_sequences = set() for seq in generate_sequences(n, s): unique_sequences.update(permutations(seq)) sorted_sequences = sorted(unique_sequences) print(len(sorted_sequences)) print(\' \'.join([f\\"[{\',\'.join(map(str, seq))}]\\" for seq in sorted_sequences]))"},{"question":"You are given a string s containing only lowercase English letters. You want to form a palindromic string by rearranging the characters of s. However, to make the task slightly more challenging, you are allowed to add exactly one more character anywhere in the string, if necessary. A palindromic string is a string that reads the same forwards and backwards. Determine whether it is possible to form a palindromic string by rearranging the characters and optionally adding exactly one character. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The input contains a single string s (1 ≤ |s| ≤ 10^3) consisting of only lowercase English letters. Output Output a single string \\"YES\\" or \\"NO\\". Examples Input civic Output YES Input level Output YES Input coding Output NO Input ababa Output YES Input abc Output YES Note In the first example, the string \\"civic\\" is already a palindrome. In the second example, the string \\"level\\" is already a palindrome. In the third example, adding any single character to \\"coding\\" cannot make it a palindrome. In the fourth example, the string \\"ababa\\" can be rearranged to \\"ababa\\", which is already a palindrome. In the fifth example, you can add one character to form a string like \\"abcba\\", making it a palindrome.","solution":"def is_palindromic_possible(s): Determine if it is possible to form a palindromic string by rearranging the characters and optionally adding exactly one character. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Calculate the number of characters with odd frequencies odd_count = sum(1 for count in freq.values() if count % 2 != 0) # Check the condition to form a palindrome if odd_count <= 1: return \\"YES\\" elif len(s) % 2 == 0 and odd_count == 2: return \\"YES\\" elif len(s) % 2 != 0 and odd_count <= 3: return \\"YES\\" return \\"NO\\""},{"question":"You are given a labyrinth represented as a grid of cells, where each cell is either free space (\'.\') or a wall (\'#\'). Your task is to determine if it\'s possible to travel from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right, but you cannot move through walls or outside the grid. Write a program that reads the labyrinth grid and outputs \\"Yes\\" if there is a path from the top-left corner to the bottom-right corner, and \\"No\\" otherwise. Input The input consists of a series of datasets. Each dataset is provided in the following format: N M row_1 row_2 ... row_N N is the number of rows and M is the number of columns in the grid. The following N lines each contain a string of M characters that represent the layout of the labyrinth. You may assume the following: 2 ≤ N, M ≤ 1000. The input is terminated by N = M = 0. Output For each dataset, output \\"Yes\\" if there is a path, or \\"No\\" otherwise. Example Input 4 4 .. ..#. #. .... 3 3 .#. ... ..# 5 5 ..... .#.#. .#.#. .#.#. ..... 0 0 Output Yes No Yes","solution":"def is_path_possible(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \'No\' def dfs(x, y, visited): if x == n-1 and y == m-1: return True visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: if dfs(nx, ny, visited): return True return False visited = set() if dfs(0, 0, visited): return \'Yes\' else: return \'No\' def solve_laborinth(input_text): input_lines = input_text.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): line = input_lines[index] n, m = map(int, line.split()) if n == 0 and m == 0: break grid = [] for i in range(n): index += 1 grid.append(input_lines[index]) results.append(is_path_possible(grid)) index += 1 return \\"n\\".join(results)"},{"question":"A city is planning to renovate its public garden. The garden is shaped like a grid with \'m\' rows and \'n\' columns. The government wants to plant new types of flowers in some cells and leave the rest empty. Initially, the garden is represented by a grid filled with zeros. Each cell can either stay empty (represented by \'0\') or have a flower planted in it (represented by \'1\'). The rules for planting flowers are as follows: 1. If a cell has a flower planted, then the cells directly above, below, to the left, and to the right of it cannot have any flowers. 2. You need to find the maximum number of flowers that can be planted in the garden following the above rules. Write a program that takes the dimensions of the garden as input and outputs the maximum number of flowers that can be planted. Input The first line of the input file contains two integers, m and n (1 ≤ m, n ≤ 50), the number of rows and columns in the garden grid. Output Output a single integer which is the maximum number of flowers that can be planted in the garden. Example Input 3 3 Output 5 Input 2 2 Output 2 Input 4 4 Output 8 Explanation In the first example, one such optimal arrangement to get the maximum plants is: 1 0 1 0 1 0 1 0 1 In the second example, one such optimal arrangement to get the maximum plants is: 1 0 0 1 In the third example, one such optimal arrangement to get the maximum plants is: 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1","solution":"def max_flowers(m, n): Returns the maximum number of flowers that can be planted in an m x n garden grid following the given rules. # A cell can be used if its row and column indices are both even, or both odd. # Repeat this pattern and count the number of such cells count = 0 for i in range(m): for j in range(n): if (i + j) % 2 == 0: count += 1 return count"},{"question":"Given a sequence of integers of length N, S_0, S_1, S_2, ..., S_{N-1}, determine if it is possible to reorder the sequence into a strictly increasing sequence T_0, T_1, T_2, ..., T_{N-1} such that the number of distinct differences between consecutive elements T_i and T_{i+1} is minimized. If possible, print the minimum number of distinct differences; otherwise, print -1. Constraints * 1 leq N leq 100000 * 0 leq S_i leq 10^9 (0 leq i < N) * All values in input are integers. Input The input is given from Standard Input in the following format: N S_0 S_1 S_2 cdots S_{N-1} Output Print the answer as an integer. Examples Input 5 3 1 4 1 5 Output 2 Input 3 2 2 3 Output 1 Input 4 1 2 3 4 Output 1 Input 3 7 7 7 Output 1 Input 4 5 4 3 2 Output -1","solution":"def min_distinct_diffs(N, sequence): Given an integer sequence, determine the minimum number of distinct differences between consecutive elements in the sequence when sorted. :param N: Length of the sequence :param sequence: List of integers :return: Minimum number of distinct differences or -1 if not possible if N == 1: return 1 # Only one element means no differences at all # Sort the sequence sequence.sort() # Track the differences distinct_diffs = set() for i in range(1, N): diff = sequence[i] - sequence[i-1] if diff == 0: continue # Ignore zero differences distinct_diffs.add(diff) return len(distinct_diffs) if len(distinct_diffs) > 0 else 1"},{"question":"You are managing a tournament where N players compete in a series of matches. The players are numbered from 1 to N, and after each match, the winner reports the results to you. Each player has a skill rating, and a match between player i and player j is always won by the player with the higher skill rating. If both players have the same skill rating, the match is declared a draw. You need to process q queries. Each query asks you to determine the list of players that have the potential to win the tournament, assuming that players with higher skill ratings always outperform players with lower ratings. After processing all the updates, output the players who still have a chance to win the tournament. Note that a player can only win the tournament if no other player has a higher skill rating. Input The first line contains an integer N (1 ≤ N ≤ 1000) — the number of players. The second line contains N integers (1 ≤ skill_i ≤ 10^9) — the initial skill ratings of the players. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of updates. The next q lines each contain two integers p_j and new_skill_j (1 ≤ p_j ≤ N, 1 ≤ new_skill_j ≤ 10^9) — indicating that the skill rating of player p_j is updated to new_skill_j. Output For each query, output a single line containing the list of players who still have a chance to win the tournament, i.e., all players with the highest skill rating. Examples Input 5 4 7 5 3 6 3 2 10 5 11 3 11 Output 2 5 3 5 Note In the example: 1. Initially, player 2 (skill 7) has the highest skill rating. After the first update, player 2\'s skill is increased to 10. 2. After the second update, player 5\'s skill is increased to 11, making player 5 the only one with the highest skill rating. 3. After the third update, player 3\'s skill is increased to 11, tying with player 5 for the highest skill rating, hence both are potential winners.","solution":"def potential_winners(N, initial_skills, queries): Determines the list of players that have the potential to win the tournament based on the given queries that update player skill ratings. Parameters: N (int): Number of players. initial_skills (list of int): Initial skill ratings of the players. queries (list of tuples): Each tuple contains two integers, p_j and new_skill_j, indicating that the skill rating of player p_j is updated to new_skill_j. Returns: list of list of int: For each query, a list of players (indices) who have the highest skill rating. skills = initial_skills[:] results = [] for p_j, new_skill_j in queries: skills[p_j - 1] = new_skill_j max_skill = max(skills) winners = [i + 1 for i, skill in enumerate(skills) if skill == max_skill] results.append(winners) return results"},{"question":"Consider a 2D grid of size n x m filled with integers. A subgrid is a rectangle inside this grid with at least one cell. The cost of converting a subgrid into a zero subgrid is defined as the sum of all elements in the subgrid. You can convert any subgrid into a zero subgrid by setting all its elements to 0, and its cost is the sum of all its elements before that. Your task is to find the minimum cost required to convert the entire grid into a zero grid by converting one or more subgrids. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 50). Each of the following n lines contains m integers from -100 to 100 each, which are the elements of the grid. Output: Print a single integer — the minimum cost required to convert the entire grid into a zero grid. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Input: 2 3 -1 -2 -3 4 5 6 Output: 15","solution":"def min_cost_to_convert_zero_grid(grid): Returns the minimum cost required to convert the grid into a zero grid. return sum(sum(row) for row in grid) def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, lines[i + 1].split())) for i in range(n)] return grid def main(input_str): grid = parse_input(input_str) return min_cost_to_convert_zero_grid(grid)"},{"question":"Sara and Jenny are playing a game with an array and a secret number. Sara chooses an array of positive integers and a secret number ( n ), and tells Jenny only the sum of the elements of the array but not ( n ). Jenny\'s task is to find a subset from the array such that its sum is equal to ( n ). If Jenny is successful in finding such a subset, she wins. Otherwise, Sara wins. Given the sum ( S ) of the array and the elements of the array, determine whether Jenny can find a subset whose sum is exactly ( n ). Input: The first line of the input contains two integers ( S ) and ( n ) (1 ≤ ( S ), ( n ) ≤ 10^6) — the sum of the elements of the array and the secret number chosen by Sara. The second line contains several integers representing the elements of the array ( a_1, a_2, ldots, a_m ) (1 ≤ ( a_i ) ≤ 10^6). Output: Print \\"Yes\\" (without quotes) if Jenny can find such a subset, or \\"No\\" (without quotes) otherwise. Examples: Input: 15 9 1 2 3 4 5 6 Output: Yes Input: 20 11 2 4 6 10 Output: No Note: In the first sample, Jenny can select the subset {2, 3, 4} which sums up to 9. In the second sample, there is no subset of the given array that sums up to 11, hence the output is \\"No\\".","solution":"def can_find_subset(S, n, array): Determines if there exists a subset of elements in `array` that sums to `n`. :param S: The sum of the elements of the array (unused in function but provided for context). :param n: The target sum Jenny is trying to find. :param array: List of positive integers representing the array elements. :return: \\"Yes\\" if such a subset exists, otherwise \\"No\\". array_length = len(array) dp = [False] * (n + 1) dp[0] = True for num in array: for j in range(n, num - 1, -1): if dp[j - num]: dp[j] = True return \\"Yes\\" if dp[n] else \\"No\\""},{"question":"Emily is organizing her bookshelf and wants to group her books by genre. She has a list of book genres for each book on the shelf. To speed up the process, she decides to count the number of books in each genre. Given a list of genres, help Emily determine the number of books in each genre. Input: - t: number of test cases - For each test case: - n: number of books - A list of n genres, each represented by a string Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100 1 ≤ length of genre string ≤ 50 Output: For each test case, output the genres in lexicographical order followed by their respective counts. SAMPLE INPUT: 1 5 Fantasy Mystery Thriller Fantasy Romance SAMPLE OUTPUT: Fantasy 2 Mystery 1 Romance 1 Thriller 1","solution":"def count_book_genres(t, cases): Given number of test cases and the genres of books for each test case, returns the count of genres sorted in lexicographical order. results = [] for case in cases: n, genres = case genre_count = {} for genre in genres: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 sorted_genres = sorted(genre_count.items()) results.append(sorted_genres) return results"},{"question":"Design and implement a program that mimics a simplified version of a library management system. The program will allow users to check in and check out books, as well as view the current list of available books. Each book can be uniquely identified by its title. The program should support the following operations: 1. **Add a book**: Add a new book to the library\'s collection. If the book already exists, it should increase the count of available copies. 2. **Remove a book**: Remove a book from the library\'s collection. If the book does not exist, return an appropriate message. If the book exists but only one copy remains, it should remove the book entirely. 3. **Check out a book**: Allow a user to check out a book. If the book is not available, return an appropriate message. 4. **Check in a book**: Allow a user to check in a book that they\'ve previously checked out. Increase the count of available copies. 5. **View available books**: Display all books currently available in the library, along with the count of available copies for each book. Assume that the library can hold a maximum of 100 different titles, and each title can have at most 10 copies available. # Input and Output **Input Format:** A series of commands, each on a new line, ending with the word \\"END\\". The commands follow these formats: - `ADD title` - Adds a new book with the title `title` to the library. - `REMOVE title` - Removes a book with the title `title` from the library. - `CHECKOUT title` - User checks out a book with the title `title` from the library. - `CHECKIN title` - User checks in a book with the title `title` back to the library. - `VIEW` - Displays all available books and their counts. - `END` - Ends the sequence of input commands. **Output Format:** - For successful add/checkout/checkin/remove operations, there is no output. - For unsuccessful operations, return a message: - If a book being checked out is unavailable: `\\"Unavailable\\"` - If a book being removed does not exist: `\\"Book not found\\"` - If a book being checked in was never added: `\\"Never added\\"` - For the `VIEW` command, display each book title and the count of available copies, one per line. **Example Input:** ``` ADD The Great Gatsby ADD To Kill a Mockingbird CHECKOUT The Great Gatsby VIEW CHECKIN The Great Gatsby REMOVE To Kill a Mockingbird VIEW END ``` **Example Output:** ``` The Great Gatsby: 0 To Kill a Mockingbird: 1 The Great Gatsby: 1 ```","solution":"class Library: def __init__(self): self.books = {} def add(self, title): if title not in self.books: self.books[title] = 1 else: self.books[title] = min(self.books[title] + 1, 10) def remove(self, title): if title not in self.books: return \\"Book not found\\" elif self.books[title] == 1: del self.books[title] else: self.books[title] -= 1 def checkout(self, title): if title not in self.books or self.books[title] == 0: return \\"Unavailable\\" self.books[title] -= 1 def checkin(self, title): if title not in self.books: return \\"Never added\\" self.books[title] = min(self.books[title] + 1, 10) def view(self): return [f\\"{title}: {count}\\" for title, count in self.books.items()] def process_commands(commands): library = Library() output = [] for command in commands: parts = command.split(\\" \\", 1) if parts[0] == \\"ADD\\": library.add(parts[1]) elif parts[0] == \\"REMOVE\\": result = library.remove(parts[1]) if result: output.append(result) elif parts[0] == \\"CHECKOUT\\": result = library.checkout(parts[1]) if result: output.append(result) elif parts[0] == \\"CHECKIN\\": result = library.checkin(parts[1]) if result: output.append(result) elif parts[0] == \\"VIEW\\": output.extend(library.view()) elif parts[0] == \\"END\\": break return output"},{"question":"A furniture manufacturer wants to improve their efficiency in cutting wooden planks. They have planks of length n and need to cut them into smaller planks of length 1. To do this efficiently, they use a cutting machine that can perform the following operation in one step: - Choose a plank of length k and cut it into two non-zero parts of lengths a and b (where a + b = k). The manufacturer wants to minimize the number of cuts needed to reduce the plank of length n to planks of length 1. Your task is to determine the minimum number of cuts required to achieve this. Input The single line of the input contains a single integer n — the initial length of the plank. The input limitations are: * 2 ≤ n ≤ 10^6 Output Print a single integer — the minimum number of cuts needed to reduce the plank of length n to planks of length 1. Examples Input 5 Output 4 Input 8 Output 7 Note Consider the first example (n = 5). One way to cut the plank is: * Cut the plank into two parts: 4 and 1 (1 cut). * Cut the part of length 4 into 3 and 1 (1 + 1 = 2 cuts). * Cut the part of length 3 into 2 and 1 (2 + 1 = 3 cuts). * Cut the part of length 2 into 1 and 1 (3 + 1 = 4 cuts). So, in total, we need 4 cuts to reduce the plank of length 5 to planks of length 1.","solution":"def minimum_cuts(n): Returns the minimum number of cuts needed to reduce the plank of length n to planks of length 1. return n - 1"},{"question":"Kingdom Merl wants to construct a series of forts to protect its borders from invasion. There is a certain amount of available land, and each fort requires a fixed amount of space. The kingdom wants to maximize the number of forts that can be built but also needs to ensure that there\'s at least a specified minimum distance between each fort for effective defense coverage. Given the total length of available land, the space required for one fort, and the minimum distance required between two adjacent forts, write a program to determine the maximum number of forts that can be constructed. Input The input is given in the following format. L S D The input line provides the total length of available land L (1 leq L leq 10^9), the space required for one fort S (1 leq S leq 10^9), and the minimum distance between two adjacent forts D (0 leq D leq 10^9). Output Output the maximum number of forts that can be constructed. Examples Input 100 5 3 Output 12 Input 50 10 2 Output 4","solution":"def max_forts(L, S, D): Determines the maximum number of forts that can be constructed given the length of available land (L), space required for one fort (S), and the minimum distance required between two adjacent forts (D). # Calculate the total space required for one fort and the distance between adjacent forts total_space_per_fort = S + D # The maximum number of forts that can be built max_forts = L // total_space_per_fort # If there\'s additional space left after placing max_forts number of forts, check if we can place one more fort without any adjacent distance if (max_forts * total_space_per_fort) + S <= L: max_forts += 1 return max_forts # Example computation print(max_forts(100, 5, 3)) # Output: 12 print(max_forts(50, 10, 2)) # Output: 4"},{"question":"You are given an array of n integers, where each integer represents the cost associated with a particular task. Your goal is to find the minimum possible cost to complete all the tasks, provided that you can skip at most one task. You are allowed to rearrange the tasks in any order to achieve the minimum cost. However, there\'s a catch: if you decide to skip a task, you must skip the most expensive one among them. Write a program that calculates the minimum possible total cost after skipping at most one task. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of tasks. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9), where c_i represents the cost of the i-th task. Output Print one integer, which is the minimum possible cost to complete all tasks after skipping at most one task. Examples Input 5 3 4 2 1 7 Output 10 Input 3 5 8 6 Output 11 Note: In the first example, the optimal solution is to skip the task with cost 7 and complete the tasks with costs 3, 4, 2, and 1, giving a total cost of 10. In the second example, the optimal solution is to skip the task with cost 8 and complete the tasks with costs 5 and 6, giving a total cost of 11.","solution":"def minimum_cost(n, costs): Returns the minimum possible cost to complete all tasks after skipping at most one task. if n == 1: return 0 # All tasks can be skipped if there is only one task. total_cost = sum(costs) max_cost = max(costs) return total_cost - max_cost"},{"question":"``` Write a Python function `longest_common_subsequence(s1, s2)` that takes two strings `s1` and `s2` as input and returns the length of the longest common subsequence (LCS) between them. The longest common subsequence is defined as the longest sequence that can be derived by deleting some characters (possibly none) from both strings without changing the order of the remaining characters. For example: Input ``` s1 = \\"ABCBDAB\\" s2 = \\"BDCAB\\" ``` Output ``` 4 ``` Explanation: The longest common subsequence is \\"BCAB\\", which has a length of 4. ```","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) # Create a 2D array to store lengths of longest common subsequence # dp[i][j] will store the length of LCS of s1[0..i-1] and s2[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # dp[m][n] contains the length of LCS for s1[0..m-1] and s2[0..n-1] return dp[m][n]"},{"question":"You are given a list of integers. Your task is to find the sum of all integers that fall within a given range `[a, b]` (inclusive). Constraints: * The list of integers has a length between 1 and 10^5 (inclusive). * Each integer in the list can be between -10^9 and 10^9 (inclusive). * The values of `a` and `b` will satisfy the condition `a <= b`. Input: - The first line contains a single integer `n`, the length of the list. - The second line contains `n` space-separated integers representing the list. - The third line contains two space-separated integers `a` and `b`, denoting the range `[a, b]`. Output: - Print a single integer representing the sum of all integers in the list that fall within the range `[a, b]`. Examples: Input: 6 1 3 5 7 9 11 4 10 Output: 21 Input: 5 -5 -2 0 3 4 -3 2 Output: -2 Input: 4 1000000000 -1000000000 500000000 -500000000 -1000000000 1000000000 Output: 0","solution":"def sum_in_range(arr, a, b): Returns the sum of all integers in the list that fall within the inclusive range [a, b]. Parameters: arr (list of int): The list of integers. a (int): The lower bound of the range (inclusive). b (int): The upper bound of the range (inclusive). Returns: int: The sum of integers within the range [a, b]. return sum(x for x in arr if a <= x <= b)"},{"question":"Given a list of integers, implement a function that finds the maximum possible product of a non-empty subset of the list, where elements can be either positive, negative, or zero. The function should be efficient in terms of time and space complexity to handle large lists effectively. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the list. - The second line contains `n` space-separated integers, each integer `ai` (-10^9 ≤ ai ≤ 10^9), the elements of the list. **Output:** - A single integer, the maximum possible product of a subset of the given list. **Example Input:** 5 -1 -2 -3 4 5 **Example Output:** 120 **Note:** For the input example, the subsets of `[-1, -2, -3, 4, 5]` include: - Single elements: `-1`, `-2`, `-3`, `4`, `5` - Pairs: `(-1, -2)`, `(-1, -3)`, `(-1, 4)`, `(-1, 5)`, `(-2, -3)`, `(-2, 4)`, `(-2, 5)`, `(-3, 4)`, `(-3, 5)`, `(4, 5)` - Triplets, quadruplets, etc. The maximum product is obtained by multiplying `(-1) * (-2) * (-3) * 4 * 5 = 120`. When designing the function, consider the edge cases where: - The list contains only one element. - The list contains all negative numbers. - The list contains zeros. - The list is very large.","solution":"def max_product_subset(arr): Returns the maximum product of a non-empty subset of the list. if len(arr) == 1: return arr[0] max_neg = float(\'-inf\') min_pos = float(\'inf\') count_neg = 0 count_zero = 0 product = 1 for num in arr: if num == 0: count_zero += 1 continue if num < 0: count_neg += 1 max_neg = max(max_neg, num) if num > 0: min_pos = min(min_pos, num) product *= num if count_zero == len(arr) or (count_neg == 1 and count_zero > 0 and count_neg + count_zero == len(arr)): return 0 if count_neg % 2 != 0: product //= max_neg return product"},{"question":"Given an even-length string, divide the string into two equal parts and swap them. For example, if the input string is \\"abcdefgh\\", the output should be \\"efghabcd\\". If the string contains an odd number of characters, ensure that an extra character is included in the first part of the divided string, and then swap them. For example, if the input string is \\"abcdefg\\", the output should be \\"efgabcd\\". Input - The first line of input contains an integer T, representing the number of test cases. - Each of the following T lines contains one string. Output - For each test case, output the modified string after swapping the two parts. Example Input: 2 abcdefgh abcdefg Output: efghabcd efgabcd","solution":"def swap_string_parts(s): n = len(s) if n % 2 == 0: mid = n // 2 else: mid = (n // 2) + 1 return s[mid:] + s[:mid] def process_input(T, strings): results = [] for s in strings: results.append(swap_string_parts(s)) return results"},{"question":"Given a list of integers, determine if any two integers in the list sum up to a specified target value. Input Format - The first line contains a single integer, n, representing the number of integers in the list. - The second line contains n space-separated integers representing the elements of the list. - The third line contains a single integer, target, representing the target sum. Output Format Print \\"Yes\\" if any two integers in the list sum up to the target value. Otherwise, print \\"No\\". SAMPLE INPUT 5 10 2 3 7 5 12 SAMPLE OUTPUT Yes Explanation There are two integers in the list (5 and 7) which sum up to the target value 12. Hence, the output is \\"Yes\\".","solution":"def check_pair_sum_exists(n, arr, target): Determines if any two integers in the list sum up to the target value. :param n: Number of integers in the list. :param arr: List of integers. :param target: Target sum. :return: \\"Yes\\" if any two integers sum up to the target value, otherwise \\"No\\". seen = set() for num in arr: if target - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"You are given an array of distinct integers and a query value `k`. Design an algorithm to determine whether there exist two non-overlapping subarrays within the given array such that the sum of their elements is equal to `k`. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains `n` distinct integers separated by spaces, representing the elements of the array. Each element of the array will be within the range (−10^9, 10^9). The third line contains an integer `k` (−10^18 ≤ k ≤ 10^18). Output: Output \\"YES\\" if such two non-overlapping subarrays exist, otherwise output \\"NO\\". Example Input: 7 1 2 3 4 5 6 7 10 Output: YES Explanation: The subarrays [1, 2, 3, 4] and [6] both sum to 10. Since they do not overlap, the output is \\"YES\\". Input: 5 5 -3 2 7 9 8 Output: NO Explanation: It\'s not possible to form two non-overlapping subarrays that sum to 8.","solution":"def two_non_overlapping_subarrays_with_sum(arr, k): Determine whether there exist two non-overlapping subarrays in the array such that the sum of their elements is equal to k. Args: arr (list of int): The array of distinct integers. k (int): The target sum. Returns: str: \\"YES\\" if such subarrays exist, otherwise \\"NO\\". n = len(arr) # Dictionary to store sums and their ending indices sum_map = {} # Variable to store the prefix sum prefix_sum = 0 for i in range(n): prefix_sum += arr[i] if prefix_sum == k: if i < n-1: return \\"YES\\" if (prefix_sum - k) in sum_map: j = sum_map[prefix_sum - k] if j < i: if i < n-1: return \\"YES\\" sum_map[prefix_sum] = i return \\"NO\\" # Testing with provided examples print(two_non_overlapping_subarrays_with_sum([1, 2, 3, 4, 5, 6, 7], 10)) print(two_non_overlapping_subarrays_with_sum([5, -3, 2, 7, 9], 8))"},{"question":"# Problem Statement You are given a two-dimensional grid of size `MxN` where each cell has an integer value representing the cost to walk through that cell. Your task is to find the path from the top-left corner to the bottom-right corner such that the sum of the costs along the path is minimized. You can only move to the right or down from a given cell. Write a function `minCostPath(grid: List[List[int]]) -> int` that takes the grid as input and returns the minimum cost to reach the bottom-right corner from the top-left corner. # Input - The input consists of a single 2D list of integers `grid` with `M` rows and `N` columns (`1 ≤ M, N ≤ 100`). - Each element in `grid` is an integer (`0 ≤ grid[i][j] ≤ 100`). # Output - Return an integer representing the minimum cost to reach the bottom-right corner from the top-left corner. # Examples Example 1: Input: ``` [[1, 3, 1], [1, 5, 1], [4, 2, 1]] ``` Output: ``` 7 ``` Explanation: The path with the minimum cost is `1 → 3 → 1 → 1 → 1`, and the total cost is `7`. Example 2: Input: ``` [[1, 2, 3], [4, 5, 6]] ``` Output: ``` 12 ``` Explanation: The path with the minimum cost is `1 → 2 → 3 → 6`, and the total cost is `12`. # Constraints - You may assume all the input grids are non-empty. - The path must start at the top-left corner and end at the bottom-right corner, only moving right or down.","solution":"from typing import List def minCostPath(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1]"},{"question":"In a magical forest, there are M trees connected by P two-way paths. Every tree in the forest has an associated mana value. The leaders of the forest need to ensure that the mana in the trees is distributed in a way that the overall balance of mana in any group of connected trees is maintained. Each tree can increase or decrease its mana to maintain this balance. Your task is to determine the mana balance of every tree after a series of interactions, where in each interaction the mana of one tree is updated. Input The first line contains two integers M (1 ≤ M ≤ 100,000) and P (0 ≤ P ≤ 100,000), denoting the number of trees and the number of paths in the forest respectively. The next line contains M integers, where the ith integer denotes the initial mana value of the ith tree. The next P lines each contain two integers u and v, denoting a two-way path between tree u and tree v (1 ≤ u, v ≤ M; u ≠ v). The next line contains an integer K (1 ≤ K ≤ 100,000), representing the number of interactions. The next K lines each contain two integers t and w, indicating the tree t whose mana is updated to w. Output Output M lines, each line containing an integer representing the final mana value of the ith tree after all interactions are performed. Example Input 5 4 5 3 8 6 10 1 2 2 3 3 4 4 5 3 2 7 5 12 3 9 Output 5 7 9 6 12","solution":"def mana_balance(M, P, mana_initial, paths, K, interactions): from collections import defaultdict # Create adjacency list for the graph adj = defaultdict(list) for (u, v) in paths: adj[u].append(v) adj[v].append(u) # Initialize the mana values from the input mana = mana_initial[:] # Apply the interactions for (t, w) in interactions: mana[t - 1] = w return mana # Example usage: M = 5 P = 4 mana_initial = [5, 3, 8, 6, 10] paths = [(1, 2), (2, 3), (3, 4), (4, 5)] K = 3 interactions = [(2, 7), (5, 12), (3, 9)] print(mana_balance(M, P, mana_initial, paths, K, interactions)) # Output should be [5, 7, 9, 6, 12]"},{"question":"Given a grid of size N x M, you need to find the number of ways to reach the bottom-right corner from the top-left corner. You can only move right or down at any step. Initially, you are placed at the top-left corner (1,1) of the grid. Input First line contains T, the number of test cases. Each test case consists of two integers N and M separated by space on one line. Output For each test case, print the number of ways to reach the bottom-right corner modulo 10^9 + 7. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 Example Input: 2 2 2 3 3 Output: 2 6 Explanation Example case 1. There are 2 ways to move from (1,1) to (2,2): - Right, Down - Down, Right Example case 2. There are 6 ways to move from (1,1) to (3,3): - Right, Right, Down, Down - Right, Down, Right, Down - Right, Down, Down, Right - Down, Right, Right, Down - Down, Right, Down, Right - Down, Down, Right, Right Note: Use scanf/printf instead of cin/cout for handling large input files.","solution":"MOD = 10**9 + 7 def number_of_ways(N, M): Returns the number of ways to reach the bottom-right corner from the top-left corner of a N x M grid with only right and down moves. # Create a 2D list to store the number of ways to reach each cell dp = [[0] * M for _ in range(N)] dp[0][0] = 1 # There\'s one way to be at the starting point for i in range(N): for j in range(M): if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD # ways from the top cell if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD # ways from the left cell return dp[-1][-1] def process_input(T, test_cases): Process the input and produce the output for all test cases. results = [] for N, M in test_cases: results.append(number_of_ways(N, M)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) test_cases.append((N, M)) index += 2 results = process_input(T, test_cases) for result in results: print(result)"},{"question":"A group of friends are planning to hang out at a new cafe that recently opened in their city. They have several activities they want to enjoy there, but the cafe has a variety of different offerings each day, not all on the same day. The cafe\'s schedule for the upcoming week is available, and the friends want to find out the maximum number of activities they can enjoy within one visit. The cafe opens each day for a certain number of hours, and each activity they are interested in takes a specific amount of time. They can only perform one activity at a time, and they can\'t stay at the cafe after it closes. Given the schedule of the cafe and the duration of each activity, help the friends to plan the optimal day to visit in order to maximize the number of activities they can engage in. Input The first line of the input contains an integer d (1 ≤ d ≤ 7) — the number of available days in a week. The second line contains d integers, each representing the number of available hours for each corresponding day in the week. The third line contains an integer a (1 ≤ a ≤ 100) — the number of activities the friends are interested in. The fourth line contains a integers, each representing the duration of each activity in hours. Output Print a single integer — the maximum number of activities the friends can enjoy within one visit to the cafe. Examples Input 3 5 6 4 4 2 3 1 2 Output 3 Input 2 4 8 5 1 2 2 1 3 Output 4 Note In the first example, there are three days with 5, 6, and 4 hours available respectively. The friends can do three activities with durations 2, 3, and 1 hours on the day with 6 available hours. In the second example, there are two days with 4 and 8 hours available respectively. The friends can do four activities with durations 1, 2, 2, and 1 hours on the day with 8 available hours.","solution":"def max_activities(d, hours, a, durations): durations.sort() max_activities = 0 for h in hours: current_activities = 0 total_time = 0 for duration in durations: if total_time + duration <= h: total_time += duration current_activities += 1 else: break max_activities = max(max_activities, current_activities) return max_activities # Test case execution d = 3 hours = [5, 6, 4] a = 4 durations = [2, 3, 1, 2] print(max_activities(d, hours, a, durations)) # Output: 3"},{"question":"Binary Tree Boundary Traversal Given a binary tree, you need to write a function to print its boundary traversal. The boundary traversal of a binary tree is defined as the concatenation of: 1. The left boundary excluding the leaf nodes. 2. All the leaf nodes from left to right. 3. The right boundary excluding the leaf nodes in reverse order. The left boundary is defined as the path from the root to the left-most node. The right boundary is defined as the path from the root to the right-most node. If the root itself is a leaf node, it is only included once in the traversal. Input: - The input consists of lines where each line represents the node values of the binary tree in level order traversal, where `NULL` represents a missing node. Output: - Print the boundary traversal of the binary tree as a space-separated sequence of node values. Constraints: - The number of nodes in the binary tree is between 1 and 1000. - Node values are integers between -1000 and 1000. Function Signature: ```python def boundary_traversal(root: Optional[TreeNode]) -> List[int]: pass ``` Example: Sample Input: ``` 1 2 3 4 5 NULL 6 NULL NULL NULL NULL NULL NULL 7 NULL ``` Sample Output: ``` 1 2 4 7 6 3 ``` Explanation: - The left boundary is `1 2` (excluding the leaf nodes). - The leaf nodes are `4 7 6` from left to right. - The right boundary is `3` (excluding the leaf nodes and in reverse order).","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def boundary_traversal(root: Optional[TreeNode]) -> List[int]: if not root: return [] def is_leaf(node): return node and not node.left and not node.right def add_left_boundary(node, res): # Add all left boundary nodes, excluding leaf nodes while node: if not is_leaf(node): res.append(node.val) if node.left: node = node.left else: node = node.right def add_leaf_nodes(node, res): if is_leaf(node): res.append(node.val) else: if node.left: add_leaf_nodes(node.left, res) if node.right: add_leaf_nodes(node.right, res) def add_right_boundary(node, res): # Stack to store nodes temporarily stack = [] # Add all right boundary nodes, excluding leaf nodes while node: if not is_leaf(node): stack.append(node.val) if node.right: node = node.right else: node = node.left # Add to result in reverse order while stack: res.append(stack.pop()) result = [] if not is_leaf(root): result.append(root.val) add_left_boundary(root.left, result) add_leaf_nodes(root, result) add_right_boundary(root.right, result) return result"},{"question":"Alice participated in a running competition where she recorded her daily running distances in kilometers for a month. She has noted these distances in an integer array. Alice wants to identify the longest sequence of consecutive days where her running distance was increasing every day. Write a function that, given an array of integers representing daily distances, returns the length of the longest sequence of consecutive days where the running distance recorded is strictly increasing. Constraints 1 ≤ length of array ≤ 10^6 1 ≤ distance ≤ 10^9 Input The first line contains an integer N, the number of days. The second line contains N space-separated integers representing the running distances for each day. Output Output a single integer representing the length of the longest sequence of consecutive days where the running distance was strictly increasing. Example Input: 7 5 6 3 5 7 8 2 Output: 4 Explanation The longest sequence of consecutive days with increasing distances is [3, 5, 7, 8] which has a length of 4.","solution":"def longest_increasing_sequence(distances): if not distances: return 0 max_length = 1 current_length = 1 for i in range(1, len(distances)): if distances[i] > distances[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A music band is scheduling a series of performances across different cities. The manager has established a strict schedule that tries to maximize their exposure. Each city must be visited exactly once, and all performances must follow the given order of the cities. However, the manager also wants to ensure that the band has ample time to rest between the performances in different cities. Given the distance between each pair of cities and the time it takes to travel between them, you need to find the optimal sequence of visiting the cities such that the total travel time is minimized. You are given a set of n cities, with each city represented by an index from 0 to n-1. Additionally, you are provided with an n x n matrix `travel_time`, where `travel_time[i][j]` denotes the travel time between city `i` and city `j`. Your goal is to determine the sequence of visiting all cities exactly once starting from city 0, such that the total travel time is minimized. Input The input consists of: - An integer n (2 ≤ n ≤ 12) — the number of cities. - An n x n integer matrix `travel_time`, where `travel_time[i][j]` (0 ≤ travel_time[i][j] ≤ 1000) denotes the travel time between city `i` and city `j`. It is guaranteed that travel_time[i][i] = 0 for all i, and that the matrix is symmetric, i.e., travel_time[i][j] = travel_time[j][i]. Output The output should be a single integer — the minimum travel time to visit all cities exactly once starting from city 0. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Note In this example, the optimal path starting from city 0 is 0 -> 1 -> 3 -> 2 -> 0, with the total travel time being 80.","solution":"def tsp_min_travel_time(n, travel_time): # memo dict: (tuple, int) -> int memo = {} END_VISITED = (1 << n) - 1 def visit(city, visited): # If all cities have been visited, return distance to start city if visited == END_VISITED: return travel_time[city][0] # If the subproblem is already solved, return its value if (city, visited) in memo: return memo[(city, visited)] # Initialize the min travel as infinite min_travel = float(\'inf\') for next_city in range(n): if not (visited & (1 << next_city)): current_travel = travel_time[city][next_city] + visit(next_city, visited | (1 << next_city)) min_travel = min(min_travel, current_travel) memo[(city, visited)] = min_travel return min_travel return visit(0, 1)"},{"question":"Given a string S consisting of lowercase and uppercase alphabets, write a function to check if the string forms a valid palindrome (i.e., it reads the same backward as forward) after converting all uppercase letters to lowercase and ignoring non-alphanumeric characters. # Function Signature ```python def is_valid_palindrome(S: str) -> bool: ``` # Input - A string `S` (1 <= len(S) <= 10^5) consisting of lowercase and uppercase letters, digits, and special characters. # Output - Return `True` if the string is a valid palindrome, `False` otherwise. # Example ```python assert is_valid_palindrome(\\"A man, a plan, a canal: Panama\\") == True assert is_valid_palindrome(\\"race a car\\") == False ``` # Explanation - In the first example, after converting all letters to lowercase and ignoring special characters, the string \\"AmanaplanacanalPanama\\" becomes \\"amanaplanacanalpanama\\", which is a palindrome. - In the second example, even after converting all letters to lowercase and ignoring special characters, the string \\"raceacar\\" is not a palindrome.","solution":"def is_valid_palindrome(S: str) -> bool: Check if a given string is a valid palindrome after ignoring non-alphanumeric characters and converting all letters to lowercase. Parameters: S (str): Input string to check. Returns: bool: True if the string is a valid palindrome, False otherwise. # Filter out only alphanumeric characters and convert to lowercase filtered_chars = [ch.lower() for ch in S if ch.isalnum()] # Check if the filtered list of characters is a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a string s consisting of lowercase Latin letters and an integer k. Your task is to find the length of the longest substring of s that can be converted into a substring with all the same characters by changing at most k characters. Input The first line contains a string s (1 ≤ |s| ≤ 2 ⋅ 10^5) — the input string. The second line contains an integer k (0 ≤ k ≤ |s|). Output Print a single integer — the length of the longest substring that can be obtained under the given conditions. Examples Input aabccbb 2 Output 5 Input abbcb 1 Output 4 Input abccde 1 Output 3 Explanation In the first example, you can change \'c\' and \'b\' into \'a\' to obtain the substring \\"aaaaa\\". In the second example, you can change \'b\' into \'a\' to form the substring \\"abbbb\\". In the third example, you can either change \'b\' to \'c\' or \'c\' to \'d\' to form the substring \\"ccc\\" or \\"ddd\\".","solution":"def longest_substring_with_k_changes(s, k): Returns the length of the longest substring that can be obtained by changing at most k characters in the input string, to make a substring with all the same characters. max_length = 0 char_count = {} left = 0 max_repeat_letter_count = 0 for right in range(len(s)): right_char = s[right] if right_char not in char_count: char_count[right_char] = 0 char_count[right_char] += 1 max_repeat_letter_count = max(max_repeat_letter_count, char_count[right_char]) if (right - left + 1 - max_repeat_letter_count) > k: left_char = s[left] char_count[left_char] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are tasked with creating a program for the Mars Colony Transportation System. The system consists of a network of train stations connected by one-directional tracks allowing for passenger transport between certain pairs of stations. Your goal is to determine the minimum travel time between any two given stations, considering potential delays. Each station can be affected by random delays due to Martian weather conditions. Hence, you are provided two different sets of travel times for each track: the normal travel time and the delayed travel time. Your program needs to choose the optimal set of travel times for each track to minimize the total travel time from the starting station to the destination station. Input The input consists of several datasets. Each dataset begins with three integers, n (2 <= n <= 100), m (1 <= m <= 1000), and q (1 <= q <= 100), which represent the number of train stations, the number of tracks, and the number of queries, respectively. The next m lines contain five integers each: u, v, t1, t2, and d. Here, u and v are the station numbers connected by a track, t1 is the normal travel time, t2 is the delayed travel time, and d is the probability (in percentage) of a delay occurring on that track. Note that 1 <= u, v <= n, u != v, 1 <= t1, t2 <= 100, and 0 <= d <= 100. The following q lines contain two integers each: a and b, which represent a pair of stations for which you need to find the minimum travel time. Note that 1 <= a, b <= n, and a != b. The end of the input is represented by a line containing three zeros separated by a space character. Output For each query, output the minimum travel time from station a to station b on a new line. If it\'s impossible to reach the destination station, output -1. Sample Input 4 5 3 1 2 3 5 20 2 3 2 4 25 2 4 4 6 20 3 4 3 8 30 1 3 5 7 10 1 2 1 4 3 4 0 0 0 Sample Output 3 7 3","solution":"import heapq def min_travel_time(n, tracks, queries): graph = {i: [] for i in range(1, n+1)} for u, v, t1, t2, d in tracks: graph[u].append((v, t1, t2, d)) def dijkstra(start, end): heap = [(0, start, 0)] # (time, node, delay) min_time = {i: float(\'inf\') for i in range(1, n+1)} min_time[start] = 0 while heap: time, node, delay = heapq.heappop(heap) if node == end: return time for neighbor, t1, t2, d in graph[node]: normal_time = time + t1 delay_time = time + t1 + ((t2 - t1) * d / 100.0) if normal_time < min_time[neighbor]: min_time[neighbor] = normal_time heapq.heappush(heap, (normal_time, neighbor, delay)) if delay_time < min_time[neighbor]: min_time[neighbor] = delay_time heapq.heappush(heap, (delay_time, neighbor, 1)) return -1 results = [] for a, b in queries: results.append(dijkstra(a, b)) return results"},{"question":"Problem description. A travel company is offering a new discount policy for frequent travelers and needs your help to implement the discounting system. Write a program that calculates the discounted price of a travel ticket based on the number of times a customer has traveled with the company. The discount rules are as follows: - For the first 10 trips, there is no discount. - For trips 11 to 20, a 10% discount is applied. - For trips 21 to 30, a 20% discount is applied. - For trips 31 and beyond, a 30% discount is applied. Given the number of trips a customer has taken and the original price of the ticket, your task is to calculate the discounted price. Input The input consists of two integers: - The first integer, T, represents the number of trips taken by the customer. - The second integer, P, represents the original price of the ticket (in dollars). Output Print the discounted price of the ticket rounded to the nearest whole number. Constraints - 1 ≤ T ≤ 100 - 1 ≤ P ≤ 1000 Example Input: 15 200 Output: 180 Explanation The customer has taken 15 trips. Since this falls in the range of trips that receive a 10% discount, the price of the ticket is reduced by 10%. Therefore, 10% of 200 is 20, and the discounted price is 200 - 20 = 180.","solution":"def calculate_discounted_price(T, P): Calculate the discounted price based on the number of trips. :param T: int, number of trips taken. :param P: int, original price of the ticket. :return: int, discounted price rounded to the nearest whole number. if T <= 10: discounted_price = P elif 11 <= T <= 20: discounted_price = P * 0.9 elif 21 <= T <= 30: discounted_price = P * 0.8 else: discounted_price = P * 0.7 return round(discounted_price)"},{"question":"Alan is an avid collector of vintage cars. He has recently acquired several cars, each with a unique weight. He plans to transport them to a new storage facility using a special type of carrier truck. This truck has a specific weight limit `W`, and Alan wants to fit as many of his cars as possible onto this truck without exceeding the weight limit. Given the number of cars `n` and their respective weights, along with the truck\'s weight limit `W`, determine the maximum number of cars Alan can transport in one trip without exceeding the weight limit. Input The first line consists of two integers, the number of cars `n` (1 ≤ n ≤ 100 000) and the weight limit `W` (1 ≤ W ≤ 10^9). The second line contains `n` integers, the weights of the cars `w1, w2, ..., wn` (1 ≤ wi ≤ W). Output Print a single integer, the maximum number of cars that can be transported without exceeding the weight limit `W`. Examples Input 5 100 20 30 50 70 80 Output 3 Input 4 50 10 20 30 40 Output 2 Note In the first example, Alan can transport cars with weights 20, 30, and 50, which sums up to 100, the weight limit of the truck. In the second example, the optimum choice is to transport the cars with weights 10 and 20, summing up to 30, which is under the weight limit. Transporting any other combination would exceed the 50 weight limit or include fewer cars.","solution":"def max_cars(n, W, weights): Returns the maximum number of cars that can be transported without exceeding the weight limit. :param n: The number of cars :param W: The weight limit of the truck :param weights: List of weights of the cars :return: Maximum number of cars that can be transported without exceeding the weight limit # Sort the weights in ascending order weights.sort() total_weight = 0 count = 0 # Iterate over the sorted weights for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"Given an n x n grid where certain cells are blocked (i.e., they cannot be passed through), your task is to determine the number of distinct paths one can take to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). You can only move either down or to the right at any step. Your solution should handle grids that are up to 15x15 in size. Input The first line of the input contains a positive integer n (1 ≤ n ≤ 15) — the size of the grid. The next n lines each contain n characters. Each character is either \'.\' (representing an open cell) or \'#\' (representing a blocked cell). Output Output one integer — the number of distinct paths you can take to travel from the top-left corner to the bottom-right corner of the grid. Examples Input 3 . . . . # . . . . Output 2 Input 3 . # . # . . . . . Output 0 Input 4 . . . . . # # . . . . . . . # . Output 2 Note In the first example, the two distinct paths from the top-left corner to the bottom-right corner are: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) In the second example, there are no possible paths due to the blocked cells. In the third example, the two distinct paths from the top-left corner to the bottom-right corner are: 1. (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3)","solution":"def count_paths(grid): This function returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid. n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 # Initialize the dp array dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Helper function to accept input in the required format and call count_paths function def find_number_of_paths(n, grid_lines): grid = [line.split() for line in grid_lines] return count_paths(grid)"},{"question":"Mary has a list of n integers. She wants to reorder the list such that the sum of the absolute differences between consecutive elements is minimized. For example, the absolute difference between elements a and b is |a - b|. You need to help Mary find an order of the list that satisfies this condition. Input The first line contains a single integer n (2 ≤ n ≤ 100). The second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 100) — the elements of the list. Output Output the reordered list in a single line such that the sum of the absolute differences between consecutive elements is minimized. If there exist multiple solutions, print any of them. Examples Input 4 4 2 3 1 Output 1 2 3 4 Input 3 10 20 30 Output 10 20 30","solution":"def reorder_list(n, arr): Reorders the list to minimize the sum of absolute differences between consecutive elements. Parameters: n (int): The number of elements in the list. arr (list of int): The elements of the list. Returns: list of int: The reordered list. arr.sort() return arr"},{"question":"Luca has a string T consisting of lowercase English letters. His goal is to transform T into a palindrome by performing at most k operations on it. In one operation, he can select any character of the string and change it to any other lowercase English character. Determine if it is possible for Luca to achieve his goal within the allowed number of operations. Input The first line contains two integers n and k (1 ≤ n ≤ 100 000, 0 ≤ k ≤ n) — the length of the string T and the maximum number of allowed operations. The second line contains the string T which consists of exactly n lowercase English letters. Output Output \\"Yes\\" if Luca can transform the string T into a palindrome within k operations, otherwise output \\"No\\". Examples Input 6 2 abccba Output Yes Input 5 1 apple Output No Input 3 1 ace Output Yes Note A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"madam\\", \\"racecar\\", and \\"aibohphobia\\" are all palindromes. In the first example, the given string \\"abccba\\" is already a palindrome, so no operations are needed and the output is \\"Yes\\". In the second example, the given string \\"apple\\" cannot be transformed into a palindrome with only one operation, leading to the output \\"No\\". In the third example, the given string \\"ace\\" can be transformed into \\"aea\\" or \\"cec\\" with one operation, so the output is \\"Yes\\".","solution":"def can_transform_to_palindrome(n, k, T): mismatch_count = 0 left = 0 right = n - 1 while left < right: if T[left] != T[right]: mismatch_count += 1 left += 1 right -= 1 return \\"Yes\\" if mismatch_count <= k else \\"No\\""},{"question":"Given a string, you need to compress it using the following method: For each group of consecutive repeating characters, replace the group with the character followed by the number of occurrences in the group. If the length of the compressed string is not shorter than the original string, return the original string. Assume the string has only uppercase and lowercase letters (a-z, A-Z). Examples: Input aabcccccaaa Output a2b1c5a3 Input abcdef Output abcdef","solution":"def compress_string(s: str) -> str: Compresses the string s using the method described. If the compressed string is not shorter than the original, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(f\\"{s[i-1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") # Append the last group compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Koala is organizing a competition where he gives each participant n marbles. Everyone can choose to divide their marbles into any number of piles. However, there\'s an additional rule: each pile must be a power of 2 (i.e., 1, 2, 4, 8, 16, ... marbles). He needs your help to find out the minimum number of piles each participant can create using exactly n marbles. Input The first line of the input contains a single integer n, (1 ≤ n ≤ 10^9). Output On the only line of the output print the minimum number of piles that can be formed. Examples Input 23 Output 4 Input 12 Output 3","solution":"def min_piles(n): Calculate the minimum number of piles needed to sum up to n using powers of 2. Parameters: n (int): The total number of marbles. Returns: int: The minimum number of piles. return bin(n).count(\'1\')"},{"question":"Given a list of n integers, we define a \\"peak\\" element as an integer which is greater than its immediate neighbors. The first or last element can also be considered a peak if it is greater than its single neighbor. Write a function that returns the position of any peak element in the list. If there are multiple peak elements, return the position of any one of them. The position should be 1-based (i.e., starting from 1). If the list contains only one element, that element is considered a peak. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line of each test case contains n integers separated by spaces, which represent the elements of the list. Output For each test case, print one integer — the 1-based position of any peak element in the given list. Example Input 3 5 1 3 20 4 1 3 10 20 15 1 5 Output 3 2 1 Explanation In the first test case, the third element (20) is a peak since it is greater than its neighbors (3 and 4). In the second test case, the second element (20) is a peak since it is greater than its neighbors (10 and 15). In the third test case, the list contains only one element (5), which is by definition a peak.","solution":"def find_peak_positions(test_cases): results = [] for case in test_cases: n, arr = case if n == 1: results.append(1) else: for i in range(n): if i == 0: if arr[i] > arr[i + 1]: results.append(i + 1) break elif i == n - 1: if arr[i] > arr[i - 1]: results.append(i + 1) break elif arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: results.append(i + 1) break return results"},{"question":"Two players, Alice and Bob, are playing a card game with a deck of N cards, each displaying a positive integer. The game is played in turns, with Alice always going first. On each turn, a player must pick any one card, and the picked card is removed from the deck. The goal of the game is for each player to maximize the sum of the cards they have picked by the time all cards have been picked. If both players play optimally, you need to determine the maximum possible score Alice can achieve. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of cards. - The second line contains N space-separated integers representing the value of each card. Output: For each test case, output the maximum score Alice can achieve if both players play optimally. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ Card value ≤ 10^6 Example: Input: 2 6 1 2 3 4 5 6 4 4 5 1 2 Output: 12 7 Explanation: In the first test case, Alice will pick the card with value 6 first, then Bob will pick 5, then Alice picks 4, Bob picks 3, Alice picks 2, and Bob picks 1. Alice will have cards with values 6, 4, and 2, totaling 12. In the second test case, Alice will pick the card with value 5 first, then Bob will pick 4, then Alice picks 2, and Bob picks 1. Alice will have cards with values 5 and 2, totaling 7.","solution":"def max_score_alice(T, test_cases): results = [] for case in test_cases: N = case[0] cards = sorted(case[1], reverse=True) alice_score = sum(cards[i] for i in range(0, N, 2)) results.append(alice_score) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) cards = list(map(int, lines[index + 1].split())) test_cases.append((N, cards)) index += 2 return T, test_cases def main(input_string): T, test_cases = parse_input(input_string) return max_score_alice(T, test_cases)"},{"question":"A sequence of parentheses is properly nested if every open parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly typed and nested. For example, the strings \\"(())\\" and \\"()()\\" are properly nested, but \\"(()\\", \\"())\\", and \\"(()))\\" are not. Write a function that takes a string containing only the characters \'(\' and \')\' and outputs whether the string is properly nested or not. Your function must run in O(n) time, where n is the length of the input string. Input The input consists of multiple datasets. Each dataset is given as a string on one row. The string length is at most 300. When the string \\"END\\" is encountered, it marks the last input. The number of datasets does not exceed 10,000. Output For each dataset, output \\"YES\\" if the string is properly nested, and \\"NO\\" otherwise, on one line. Example Input (())() (())) END Output YES NO","solution":"def is_properly_nested(seq): Checks if the parentheses in the input string are properly nested. Parameters: seq (str): Input string containing only \'(\' and \')\'. Returns: str: \\"YES\\" if the string is properly nested, otherwise \\"NO\\". stack = [] for char in seq: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def process_input(datasets): Processes a list of datasets and returns a list of results. Parameters: datasets (list of str): List containing input strings. Returns: list of str: List of \\"YES\\" or \\"NO\\" corresponding to each input string. results = [] for dataset in datasets: if dataset == \\"END\\": break results.append(is_properly_nested(dataset)) return results"},{"question":"Given an array of integers and a series of ranges, determine the number of unique elements within each range. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of elements in the array. The second line contains n space-separated integers, the elements of the array. The third line contains an integer q (1 ≤ q ≤ 100000), the number of queries. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n). Output For each query, output a single integer: the number of unique elements in the sub-array from index l to index r (inclusive). Examples Input 8 1 2 1 3 4 2 3 5 3 1 4 2 6 5 8 Output 3 4 4 Note For the first query, the sub-array is [1, 2, 1, 3] which has 3 unique elements: {1, 2, 3}. For the second query, the sub-array is [2, 1, 3, 4, 2] which has 4 unique elements: {1, 2, 3, 4}. For the third query, the sub-array is [4, 2, 3, 5] which has 4 unique elements: {2, 3, 4, 5}.","solution":"def count_unique_elements(n, arr, queries): Returns list of unique element counts for each query range. Parameters: n (int): Number of elements in the array arr (list of int): Array of integers queries (list of tuples): List of queries containing start and end indices Returns: list of int: List containing the count of unique elements in each query\'s sub-array results = [] for l, r in queries: sub_array = arr[l-1:r] unique_elements_count = len(set(sub_array)) results.append(unique_elements_count) return results"},{"question":"Given a list of words, determine if you can transform one word to another by changing exactly one letter at a time, with each intermediate word also being in the list. Each test case will include multiple pairs of words, and you need to check the transformability for each pair. Input: The first line of input specifies the number of test cases t. Each test case starts with an integer n, the number of words in the list. Then follows n lines, each containing a single word (all words are of the same length). After the word list, a single integer m is given, indicating the number of pairs of words to check. Each of the next m lines contains two words, representing the transformation pair. Output: For each pair in each test case, output \\"YES\\" if it is possible to transform the first word to the second word by changing one letter at a time, each intermediate word being in the list; otherwise, output \\"NO\\". SAMPLE INPUT 1 6 hit hot dot dog cog lot 3 hit cog hit lot dot dig SAMPLE OUTPUT YES YES NO","solution":"def can_transform(word, target, word_set): if word == target: return True visited = set() queue = [(word, 0)] while queue: current_word, steps = queue.pop(0) if current_word == target: return True for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word in word_set and next_word not in visited: visited.add(next_word) queue.append((next_word, steps + 1)) return False def check_transformability(test_cases): results = [] for case in test_cases: n, words, m, pairs = case word_set = set(words) for pair in pairs: word1, word2 = pair if can_transform(word1, word2, word_set): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') index = 0 t = int(input_lines[index]) index += 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) index += 1 words = [] for _ in range(n): words.append(input_lines[index]) index += 1 m = int(input_lines[index]) index += 1 pairs = [] for _ in range(m): pair = input_lines[index].split() pairs.append(pair) index += 1 test_cases.append((n, words, m, pairs)) return test_cases def transform(input_string): test_cases = parse_input(input_string) return \\"n\\".join(check_transformability(test_cases))"},{"question":"You are given an array of N integers. Your task is to write a function that finds the longest contiguous subarray such that the difference between the maximum and minimum elements in this subarray is less than or equal to a given integer K. Formally, you need to implement a function `findLongestSubarray(arr, K)` where: - `arr` is a list of integers of length N (1 ≤ N ≤ 10^5). - `K` is an integer (0 ≤ K ≤ 10^9). The function should return the length of the longest contiguous subarray that satisfies the given condition. Constraints: * Each integer in the array `arr` is within the range [-10^9, 10^9]. Input Input consists of two lines: - The first line contains the integers N and K. - The second line contains N space-separated integers representing the array `arr`. Output Print the length of the longest contiguous subarray that meets the criterion. Example Input 8 4 1 3 6 3 5 2 8 7 Output 5 Explanation The longest contiguous subarray where the difference between the max and min elements is less than or equal to 4 is [3, 6, 3, 5, 2], which has a length of 5.","solution":"def findLongestSubarray(arr, K): Finds the length of the longest contiguous subarray such that the difference between the maximum and minimum elements in this subarray is less than or equal to a given integer K. Args: arr (list of int): The array of integers. K (int): The maximum allowed difference between the maximum and minimum elements in any subarray. Returns: int: The length of the longest subarray that satisfies the condition. from collections import deque min_deque, max_deque = deque(), deque() start = 0 max_len = 0 for end in range(len(arr)): # Manage the max deque while max_deque and arr[max_deque[-1]] <= arr[end]: max_deque.pop() max_deque.append(end) # Manage the min deque while min_deque and arr[min_deque[-1]] >= arr[end]: min_deque.pop() min_deque.append(end) # Maintain the condition while arr[max_deque[0]] - arr[min_deque[0]] > K: start += 1 if max_deque[0] < start: max_deque.popleft() if min_deque[0] < start: min_deque.popleft() # Update the maximum length max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a program that reads an integer n and then generates the Pascal\'s triangle up to the n-th row. Pascal\'s triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. For example, the first five rows of Pascal\'s triangle are: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` Input Input consists of several datasets. Each dataset contains a single integer n (1 ≤ n ≤ 100) in a line. The number of datasets is less than or equal to 20. Output For each dataset, print the Pascal\'s triangle up to the n-th row (0-indexed). Example Input 3 5 Output 1 1 1 1 2 1 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1","solution":"def generate_pascals_triangle(n): Generate and return Pascal\'s triangle up to the n-th row (0-indexed). triangle = [] for i in range(n + 1): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] triangle.append(row) return triangle"},{"question":"In a faraway land, there is a circular forest with n trees. These trees are arranged in a circle, and each tree has some amount of magic power. You are given an array of integers indicating the magic power of each tree. You can choose any two adjacent trees and perform a transformation operation on them. During the transformation, both trees disappear and reappear with their magic powers combined only if the total combined power is positive. This transformation can be performed repeatedly on any pair of adjacent trees until no more transformations are possible. Your task is to find the maximum possible amount of magic power that a single tree can have after all possible transformations. Input The first line contains a single integer T (1 ≤ T ≤ 1000) — the number of test cases. Next 2T lines contain the test cases — two lines per test case. The first line contains the integer n (1 ≤ n ≤ 10^5) — the number of trees. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the initial magic power of each tree. Output Print T integers — one per test case. For each test case, print the maximum possible magic power of a single tree after all possible transformations. Example Input 4 5 1 2 3 -2 4 3 -5 -1 -9 6 3 -1 4 -1 5 -9 4 10 -5 5 -3 Output 8 0 12 12 Note In the first test case, one optimal sequence of transformations could be: Initial array: [1, 2, 3, -2, 4] - Combine the 3rd and 4th trees: [1, 2, 1, 4] - Combine the 1st and 2nd trees: [3, 1, 4] - Combine the 1st and 2nd trees: [4, 4] - Combine the remaining trees: [8] In the second test case, since all magic values are negative, no transformations are possible to make any tree\'s power positive. In the third test case, one optimal sequence of transformations could be: Initial array: [3, -1, 4, -1, 5, -9] - Combine the 2nd and 3rd trees: [3, 3, -1, 5, -9] - Combine the 1st and 2nd trees: [6, -1, 5, -9] - Combine the 1st and 2nd trees: [5, 5, -9] - Combine the 1st and 2nd trees: [10, -9] - Combine the remaining trees: [1] In the fourth test case, one optimal sequence of transformations could be: Initial array: [10, -5, 5, -3] - Combine the 1st and 2nd trees: [5, 5, -3] - Combine the 2nd and 3rd trees: [5, 2] - Combine the remaining trees: [7]","solution":"def max_magic_power(T, test_cases): results = [] for _ in range(T): n = test_cases[_][0] magic_powers = test_cases[_][1] max_power = 0 current_sum = 0 for power in magic_powers: current_sum += power if current_sum < 0: current_sum = 0 if current_sum > max_power: max_power = current_sum results.append(max_power) return results # Example usage if __name__ == \\"__main__\\": T = 4 test_cases = [ (5, [1, 2, 3, -2, 4]), (3, [-5, -1, -9]), (6, [3, -1, 4, -1, 5, -9]), (4, [10, -5, 5, -3]) ] print(max_magic_power(T, test_cases)) # Output should be [8, 0, 12, 12]"},{"question":"Write a program that determines whether a given string is a pangram or not. A pangram is a sentence that contains every letter of the English alphabet at least once. For example: \\"The quick brown fox jumps over the lazy dog\\" is a pangram because it contains every letter of the English alphabet. Input: The first line of input contains an integer t representing the number of test cases. Each of the next t lines contains a string to be tested. Output: For each test case, print \\"YES\\" if the string is a pangram, and \\"NO\\" otherwise. Constraints: 1 ≤ t ≤ 100 1 ≤ length of the string ≤ 10^5 SAMPLE INPUT 2 The quick brown fox jumps over the lazy dog Hello world SAMPLE OUTPUT YES NO","solution":"def is_pangram(s): Determines if a given string is a pangram. s = s.lower() alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') s_set = set(s) return alphabet_set.issubset(s_set) def solve_pangrams(t, test_cases): For a number of test cases, determine if each string is a pangram. results = [] for s in test_cases: if is_pangram(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase letters and non-negative integers. Your task is to decode the string by expanding each occurrence of an integer followed by a character. For example, the string \\"3a4b2c\\" should be expanded to \\"aaabbbbcc\\". Input A single string s (1 ≤ |s| ≤ 1000), consisting of lowercase letters and non-negative integers. Output Print the decoded string. Examples Input 3a4b2c Output aaabbbbcc Input 2x3y1z Output xxyyyz Input 5m10n Output mmmmmnnnnnnnnnn","solution":"def decode_string(s): Decodes a string by expanding each occurrence of an integer followed by a character. Example: \\"3a4b2c\\" -> \\"aaabbbbcc\\" Parameters: s (str): Input string consisting of lowercase letters and non-negative integers. Returns: str: The decoded string. decoded_str = \\"\\" i = 0 while i < len(s): count = 0 while i < len(s) and s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 if i < len(s) and s[i].isalpha(): decoded_str += s[i] * count i += 1 return decoded_str"},{"question":"Martin is planning a hiking trip and needs to pack his backpack. He has `n` items he can consider packing, where each item i has a weight `w_i` and a value `v_i`. His backpack can carry at most `W` weight. Martin wants to maximize the total value of the items he packs in his backpack without exceeding the weight limit. Given the weights, values, and the maximum weight capacity of the backpack, you need to help Martin decide which items to pack to maximize the total value. Input The first line contains two integers `n` (1 ≤ n ≤ 100) and `W` (1 ≤ W ≤ 10000) representing the number of items and the maximum weight capacity of the backpack, respectively. Each of the next `n` lines contains two integers `w_i` (1 ≤ w_i ≤ 1000) and `v_i` (1 ≤ v_i ≤ 1000), representing the weight and value of the i-th item. Output Print one integer — the maximum value Martin can achieve by packing items in his backpack without exceeding the maximum weight. Examples Input 4 7 1 3 4 2 3 4 5 3 Output 7 Input 3 50 10 60 20 100 30 120 Output 220","solution":"def knapsack(n, W, items): This function returns the maximum value that can be achieved by packing items in the backpack with the given constraints. :param n: Number of items :param W: Maximum weight capacity of the backpack :param items: List of tuples where each tuple contains the weight and value of an item (w_i, v_i) :return: Maximum value achievable without exceeding the weight capacity # Create a DP table to store the maximum value for each weight limit dp = [[0] * (W + 1) for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): w_i, v_i = items[i - 1] for w in range(W + 1): if w_i <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - w_i] + v_i) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"Given a list of integers, Gourab wants to count the number of unique pairs (i, j) such that i < j and the sum of the elements at these positions is divisible by a given integer k. Help him by writing a function to find the number of such pairs for multiple test cases. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n (1 ≤ n ≤ 2000) and k (1 ≤ k ≤ 100). The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), representing the list of numbers. Output For each test case, print the number of unique pairs (i, j) such that i < j and (ai + aj) is divisible by k. Example Input 2 5 3 1 2 3 4 5 4 2 2 4 6 8 Output 4 6 Note In the first test case, there are 4 pairs whose sums are divisible by 3: (1, 2), (1, 5), (2, 4), and (3, 6). In the second test case, all possible pairs (i, j) where i < j result in sums that are divisible by 2.","solution":"def count_divisible_pairs(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] count = 0 for j in range(n): for l in range(j + 1, n): if (a[j] + a[l]) % k == 0: count += 1 results.append(count) return results # Example usage: # t = 2 # test_cases = [ # [(5, 3), [1, 2, 3, 4, 5]], # [(4, 2), [2, 4, 6, 8]] # ] # print(count_divisible_pairs(t, test_cases)) # Output: [4, 6]"},{"question":"Given a list of integers, the goal is to partition the list into two non-empty sublists such that the absolute difference between the sums of the elements in the two sublists is minimized. Write a function `partition_list(arr)` that takes in a list of integers `arr` and returns the minimum absolute difference between the sums of two sublists that the list can be partitioned into. Constraints: - The length of the list must be between 2 and 100. - Each element in the list will be an integer between -10^4 and 10^4. Input Format: - A single line containing space-separated integers representing the list. Output Format: - A single integer representing the minimum absolute difference between the sums of two sublists. Example Input: ```plaintext 1 6 11 5 ``` Example Output: ```plaintext 1 ``` Explanation: One way to partition the list is into [1, 6, 5] and [11], which gives the sums 12 and 11 respectively, and the absolute difference is |12 - 11| = 1. This is the minimum absolute difference possible. ```python def partition_list(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if j >= arr[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j # Example usage arr = list(map(int, input().strip().split())) print(partition_list(arr)) ```","solution":"def partition_list(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if j >= arr[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j"},{"question":"Consider the following problem scenario: You are working on a project that involves manipulating sequences of numbers. One common operation you need to perform is checking whether a given sequence of numbers is strictly increasing or not. A strictly increasing sequence is one in which each subsequent element is greater than the previous one. Write a program that determines whether each sequence in a list of sequences is strictly increasing. Input The first line of input contains an integer T, which is the number of sequences. Each of the next T lines contains a sequence of integers separated by spaces. The first integer in each line, N, indicates the number of elements in the sequence, followed by N integers representing the sequence itself. Output For each sequence, print \\"YES\\" if the sequence is strictly increasing, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -1000 ≤ elements of the sequence ≤ 1000 Example Input: 3 5 1 2 3 4 5 4 1 2 2 3 6 -1 0 1 2 3 4 Output: YES NO YES","solution":"def is_strictly_increasing(sequence): Given a sequence of numbers, determines if the sequence is strictly increasing. :param sequence: List of integers :return: Boolean, True if sequence is strictly increasing, False otherwise for i in range(1, len(sequence)): if sequence[i] <= sequence[i - 1]: return False return True def check_sequences(T, sequences): Checks whether each sequence in a list of sequences is strictly increasing. :param T: Number of sequences :param sequences: List of sequences where each sequence is a list of integers :return: List of strings \\"YES\\" or \\"NO\\" results = [] for sequence in sequences: if is_strictly_increasing(sequence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase letters. You need to find and print the first non-repeating character in the string. If there is no such character, print \\"None\\". Write a function: ```python def first_non_repeating_character(s: str) -> str: ``` # Input - A string `s` with a length between 1 and 1000, consisting only of lowercase letters. # Output - A single character indicating the first non-repeating character in the string. - If there\'s no non-repeating character, return \\"None\\". # Examples Example 1 ```python input: \\"swiss\\" output: \\"w\\" ``` In this example, \'s\' appears multiple times, but \'w\' appears only once. Example 2 ```python input: \\"level\\" output: \\"v\\" ``` In this example, \'l\' and \'e\' repeat, but \'v\' appears only once. Example 3 ```python input: \\"aabbcc\\" output: \\"None\\" ``` In this example, every character repeats, hence the output should be \\"None\\". # Constraints - The input string `s` contains only lowercase English alphabets. - Length of `s` is between 1 and 1000.","solution":"def first_non_repeating_character(s: str) -> str: Returns the first non-repeating character from the string s. If there is no such character, returns \\"None\\". # Dictionary to store the count of each character char_count = {} # Populate the dictionary with the count of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Iterate over the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"None\\""},{"question":"You are given a string consisting of lowercase English letters. A substring is considered \\"special\\" if it contains all distinct characters. Compute the number of \\"special\\" substrings. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string of length n consisting of only lowercase English letters. Output Print the number of \\"special\\" substrings. Examples Input 5 abcde Output 15 Input 3 aaa Output 3 Input 4 abcd Output 10 Note In the first example, every substring is \\"special\\" because all characters are distinct. In the second example, each character individually is a \\"special\\" substring: \'a\', \'a\', \'a\'. There are no larger substrings with all distinct characters. In the third example, the \\"special\\" substrings are: \'a\', \'b\', \'c\', \'d\', \'ab\', \'bc\', \'cd\', \'abc\', \'bcd\', \'abcd\'.","solution":"def count_special_substrings(n, s): Counts the number of special substrings in string s of length n. A special substring contains all distinct characters. Args: - n (int): Length of the string s. - s (str): Input string. Returns: - int: Number of special substrings. count = 0 for i in range(n): seen = set() for j in range(i, n): if s[j] in seen: break seen.add(s[j]) count += 1 return count"},{"question":"Gauri is organizing her bookshelf and wants to sort her books by the height and width. She has an array `books` where each book is represented as a tuple (height, width). She wants to sort the books first by height in ascending order and then by width in descending order if two books have the same height. Write a function that takes the array of books and returns the sorted array. Example: Given `books = [(10, 5), (8, 7), (8, 5), (12, 3)]` The sorted array would be `[(8, 7), (8, 5), (10, 5), (12, 3)]` Function Signature: ```python def sort_books(books: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` Input A list of tuples representing the books, where each tuple contains two integers: height and width. Output A list of tuples representing the sorted books. Constraints - 1 ≤ len(books) ≤ 10^3 - 1 ≤ height, width ≤ 10^3 SAMPLE INPUT [(10, 5), (8, 7), (8, 5), (12, 3)] SAMPLE OUTPUT [(8, 7), (8, 5), (10, 5), (12, 3)]","solution":"from typing import List, Tuple def sort_books(books: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Sorts the books first by height in ascending order and then by width in descending order if two books have the same height. # Sort books by height ascending, then by width descending return sorted(books, key=lambda x: (x[0], -x[1]))"},{"question":"Alice and Bob Alice and Bob are taking turns to play a game they created with its own unique set of rules. They start with a string of lowercase English letters. During each turn, a player must remove exactly one character from the string. A player aiming for the longest possible progressive substring of vowels will be declared the winner if this substring\'s length exceeds their opponent\'s once the string becomes empty. Vowels are \\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\". Alice always takes the first turn, followed by Bob, and then they alternate. If both players achieve a substring of the same length, the game is a draw. Given the initial string, determine who the winner will be or if the game will end in a draw if both players use an optimal strategy. Input: - The first line contains an integer t - the number of test cases. - For each test case, there is a string s - the initial string. Constraints: - 1 ≤ t ≤ 10 - 1 ≤ |s| ≤ 100 Output: For each test case, print \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Draw\\" if the game ends in a tie. SAMPLE INPUT 3 abbcce aeeiouu bcdfghj SAMPLE OUTPUT Draw Alice Draw Explanation Test Case 1: Both Alice and Bob end up with no vowels in their substrings as they progressively remove consonants or duplicate vowels. Their longest possible substring of vowels is 1 each, resulting in a draw. Test Case 2: Alice can dominate the game by removing non-vowel characters or single vowels, ensuring the longest substring remains in her favor. She ends up with \\"aeeiouu\\", giving her the victory. Test Case 3: The string is composed entirely of consonants, so both Alice and Bob end up with zero-length substrings of vowels, resulting in a draw.","solution":"def determine_winner(s): vowels = set(\\"aeiou\\") vowel_count = sum(1 for char in s if char in vowels) if vowel_count % 2 == 0: return \\"Draw\\" elif (len(s) - vowel_count) % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" def alice_and_bob_game(t, strings): results = [] for s in strings: results.append(determine_winner(s)) return results"},{"question":"# Build Tree from Preorder and Inorder Traversal Given the preorder and inorder traversal of a binary tree, construct the tree. **Note**: - You may assume that duplicates do not exist in the tree. - Given the binary tree in `[]` (array) format. For example: - Here are the inputs and expected outputs: **Input** ``` preorder: [3,9,20,15,7] inorder: [9,3,15,20,7] ``` **Output** ``` Return the following binary tree: 3 / 9 20 / 15 7 ``` **Input** ``` preorder: [1,2,4,5,3,6,7] inorder: [4,2,5,1,6,3,7] ``` **Output** ``` Return the following binary tree: 1 / 2 3 / / 4 5 6 7 ``` **Function signature**: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(preorder: List[int], inorder: List[int]) -> TreeNode: # Your code here ``` **Explanation**: 1. At any point in the preorder traversal array, the first element is the root of the current subtree. 2. To find the left and right subtrees, locate the index of the root in the inorder traversal array. 3. Elements to the left of this index in the inorder traversal array belong to the left subtree, and elements to the right belong to the right subtree. 4. Recursively repeat steps 1-3 for each subtree using the corresponding slices of the preorder and inorder traversal arrays.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(preorder, inorder): if not preorder or not inorder: return None root_val = preorder[0] root = TreeNode(root_val) root_idx_inorder = inorder.index(root_val) root.left = buildTree(preorder[1:1+root_idx_inorder], inorder[:root_idx_inorder]) root.right = buildTree(preorder[1+root_idx_inorder:], inorder[root_idx_inorder+1:]) return root"},{"question":"You are given a list of integers. Determine whether the list is symmetrical. A list is said to be symmetrical if it reads the same backwards as forwards. Constraints * The list length is between 1 and 20 (inclusive). * Each integer in the list is between 1 and 100 (inclusive). Input Input is given from Standard Input in the following format: Length of the list (N) The list of integers separated by space Output Print `Symmetrical` if the list is symmetrical; otherwise, print `Not Symmetrical`. Examples Input 5 1 2 3 2 1 Output Symmetrical Input 4 1 2 3 4 Output Not Symmetrical Input 1 7 Output Symmetrical Input 3 2 2 2 Output Symmetrical","solution":"def is_symmetrical(lst): Returns \'Symmetrical\' if the list is symmetrical, otherwise \'Not Symmetrical\'. if lst == lst[::-1]: return \'Symmetrical\' else: return \'Not Symmetrical\' def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) lst = list(map(int, data[1:])) print(is_symmetrical(lst)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of N integers. Write a program to determine if there exists a pair of distinct indices i and j in the sequence such that the sum of the elements at these indices is equal to a given integer K. Input The first line of the input contains two integers N and K --- the number of elements in the sequence and the target sum (2 ≤ N ≤ 10000, -1000000000 ≤ K ≤ 1000000000). The second line contains N integers a1, a2, ..., aN --- the elements of the sequence (-1000000000 ≤ ai ≤ 1000000000). Output Print YES if there exists such a pair of indices i and j, otherwise print NO. Example Input: 5 9 2 7 11 15 1 Output: YES","solution":"def has_pair_with_sum(nums, target): This function checks if there exists a pair of distinct indices in the sequence such that the sum of the elements at these indices is equal to the given target sum. :param nums: List[int] - list of integers representing the sequence. :param target: int - the target sum. :return: str - \\"YES\\" if such a pair exists, \\"NO\\" otherwise. seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Write a program that reads a string of text and determines if it is a valid palindrome. A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and case sensitivity. **Input** The input will be a single line of text. **Output** Output \\"YES\\" if the input string is a palindrome, otherwise output \\"NO\\". **Examples** **Input** A man, a plan, a canal, Panama **Output** YES **Input** Hello, World! **Output** NO **Input** Madam In Eden, I\'m Adam. **Output** YES","solution":"import re def is_palindrome(text): Determines if a given text is a palindrome, ignoring spaces, punctuation, and case sensitivity. :param text: The input string to check. :return: \\"YES\\" if the input is a palindrome, otherwise \\"NO\\". # Remove non-alphanumeric characters and convert to lowercase cleaned_text = re.sub(r\'[^A-Za-z0-9]\', \'\', text).lower() # Check if the cleaned text is the same forward and backward if cleaned_text == cleaned_text[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a rectangular grid with `n` rows and `m` columns. Each cell of the grid contains a non-negative integer. You are required to select exactly one cell from each row such that the sum of the selected cells is minimized and no two selected cells lie in the same column. If no valid selection exists, return -1. Write a function `minimize_grid_sum(n, m, grid)` that returns the minimum sum possible under these constraints, or `-1` if it is not possible to select enough cells given the constraints. Input - An integer `n` (1 ≤ n ≤ 100), the number of rows. - An integer `m` (1 ≤ m ≤ 100), the number of columns. - A 2D list `grid` where each element `grid[i][j]` (0 ≤ grid[i][j] ≤ 10^9) represents the value at the i-th row and j-th column in the grid. Output - An integer representing the minimum sum of the selected cells, or `-1` if no valid selection exists. Example ```python # Example 1 n = 3 m = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(minimize_grid_sum(n, m, grid)) # Expected output: 15 # Example 2 n = 4 m = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12] ] print(minimize_grid_sum(n, m, grid)) # Expected output: -1 # Example 3 n = 2 m = 2 grid = [ [10, 20], [30, 40] ] print(minimize_grid_sum(n, m, grid)) # Expected output: 50 ```","solution":"import itertools def minimize_grid_sum(n, m, grid): Returns the minimum sum possible by selecting exactly one cell from each row with no two cells from the same column. Returns -1 if such a selection is not possible. if n > m: return -1 columns = range(m) min_sum = float(\'inf\') for combination in itertools.permutations(columns, n): current_sum = sum(grid[row][combination[row]] for row in range(n)) if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"Given a list of strings, each string representing a single-word suggestion entered by a user, write a program that generates a list of unique strings sorted in ascending alphabetical order. The suggestions can have repeated entries and may have different cases (upper or lower). Your task is to normalize the strings by converting all characters to lowercase, remove any duplicates, and then sort the unique suggestions alphabetically. Input format The first line of the input contains an integer N, which denotes the number of suggestions made by users. The next N lines each contain a single string representing a suggestion. Output format The output should contain the unique suggestions, each in a new line, sorted in ascending alphabetical order. Example Sample input: 8 Apple banana apple Cherry Banana grape apple GRape Sample output: apple banana cherry grape Explanation: - The input has 8 strings. - After converting all strings to lowercase and removing duplicates, we have: \'apple\', \'banana\', \'cherry\', \'grape\' - Sorted alphabetically, the final result is: apple, banana, cherry, grape","solution":"def process_suggestions(suggestions): Processes a list of string suggestions, normalizes them to lowercase, removes duplicates, and returns them sorted in ascending alphabetical order. Parameters: suggestions (list): List of strings representing user suggestions. Returns: list: List of unique suggestions sorted in alphabetical order. normalized_suggestions = {suggestion.lower() for suggestion in suggestions} sorted_suggestions = sorted(normalized_suggestions) return sorted_suggestions"},{"question":"Frodo is on a quest to collect magic crystals. He has a map represented by a grid of size m x n. Some cells in the grid contain crystals, and some cells are impassable. To help Frodo navigate, you need to calculate the number of distinct paths from the top-left corner of the grid to the bottom-right corner. Frodo can only move right or down to adjacent cells and cannot pass through the impassable cells. The grid is represented by a 2D array where the value 1 represents a cell with a crystal, 0 represents an empty (but passable) cell, and -1 represents an impassable cell. Write a function that returns the number of distinct paths to collect crystals and reach the bottom-right corner of the grid. If there\'s no path, the function should return 0. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. The next m lines contain n integers each, representing the grid. Each integer is between -1 and 1 inclusive. Output Print a single integer – the number of distinct paths from the top-left to the bottom-right corner of the grid. Example Input 3 3 0 1 0 1 -1 1 0 1 0 Output 2 Note In the given example, Frodo has 2 distinct paths: 1. Right, Down, Down, Right 2. Down, Right, Right, Down","solution":"def num_distinct_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Frodo can only move right or down and cannot pass through impassable cells (-1). if not grid or grid[0][0] == -1 or grid[-1][-1] == -1: return 0 m = len(grid) n = len(grid[0]) # Initialize DP table dp = [[0] * n for _ in range(m)] # Initialize starting point dp[0][0] = 1 if grid[0][0] != -1 else 0 # Fill DP table for i in range(m): for j in range(n): if grid[i][j] == -1: dp[i][j] = 0 else: if i > 0: # Move down from above dp[i][j] += dp[i - 1][j] if j > 0: # Move right from the left dp[i][j] += dp[i][j - 1] return dp[-1][-1]"},{"question":"A company has a system to evaluate employee performance and grant bonuses based on their productivity scores over a period of time. The productivity scores are recorded and given on a daily basis for n days. Your task is to develop a function that calculates the maximum possible bonus an employee can receive. The bonus is calculated as the sum of the highest `k` continuous scores within the entire period. Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105) — the number of days and the length of the period for which the bonus is calculated. - The second line contains n space-separated integers — the productivity scores for each day. Each score is an integer between -109 and 109. Output - Print a single integer — the maximum possible bonus the employee can receive. Examples Input 6 2 2 1 3 -1 4 2 Output 6 Input 7 3 -1 -2 -3 -4 -5 -6 -7 Output -6 Note In the first example, the highest sum of any 2 continuous days is from the last two days (4 + 2 = 6). In the second example, although all scores are negative, the subset with the highest sum of 3 consecutive days is -1 + -2 + -3 = -6.","solution":"def max_bonus(n, k, scores): Calculates the maximum possible bonus an employee can receive by summing the highest k continuous scores. :param n: Number of days :param k: Length of the period for which the bonus is calculated :param scores: List of productivity scores :return: Maximum possible bonus # Calculate the sum of the first window of size k current_sum = sum(scores[:k]) max_sum = current_sum # Slide the window from start to end for i in range(k, n): current_sum += scores[i] - scores[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Chess King is moving on an infinite chessboard. The standard moves for a king in chess allow it to move one square in any direction (horizontally, vertically, or diagonally). The king starts at position (0,0) and needs to reach position (x,y). To help the king reach his destination, you need to calculate the minimum number of moves required for the king to get from the starting position to the target position. Input Each test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows. Each of the next t lines contains two space-separated integers x and y: the coordinates of the target position. Both x and y are in the range of [-10^9, 10^9]. Output For each test case, print a single integer: the minimum number of moves required for the king to reach the target position from (0,0). Example Input 3 1 1 2 1 0 5 Output 1 2 5 Note For the first test case, the target is at position (1,1). The king can move directly to the target in one move: (0,0) → (1,1). For the second test case, the target is at position (2,1). The king can reach the target in two moves: (0,0) → (1,1) → (2,1). For the third test case, the target is at position (0,5). The king needs to move vertically five times: (0,0) → (0,1) → (0,2) → (0,3) → (0,4) → (0,5).","solution":"def minimum_king_moves(targets): Returns a list of integers representing the minimum number of moves required for a king to reach each target position from (0, 0). Args: - targets: List of tuple(int, int) Returns: - List[int] results = [] for x, y in targets: # Calculate the minimum moves using the king\'s movement ability results.append(max(abs(x), abs(y))) return results"},{"question":"Create a program that reads two integers a and b, and outputs their greatest common divisor (GCD). Input The input consists of a single line containing two integers a and b (1 ≤ a, b ≤ 10000). Output Output the GCD of a and b on one line. Examples Input 48 18 Output 6 Input 56 98 Output 14 Input 101 10 Output 1","solution":"import math def gcd(a, b): Returns the greatest common divisor of a and b. return math.gcd(a, b)"},{"question":"A game development company is designing a new game with various quests. Each quest has a certain number of sub-tasks, and each sub-task must be completed in sequence. The developers want to track the completion status of each quest efficiently. Each quest can be in progress, completed, or not started. Initially, all quests are not started. You need to implement a system that can handle the following operations quickly: 1. Start a new quest by marking its first sub-task as completed. 2. Mark the next sub-task as completed for a specific quest. 3. Check if a specific quest is completed. A quest is considered completed if all its sub-tasks are completed. Input The first line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of operations. Each of the next `q` lines describes an operation: - If it is the start of a new quest, the line will be \\"1 s\\", where `s` (1 ≤ s ≤ 1,000,000) is the number of sub-tasks in the new quest. - If it is to mark the next sub-task as completed for a particular quest, the line will be \\"2 k\\", where `k` is the zero-based index of the quest in progress. - If it is to check if a quest is completed, the line will be \\"3 k\\", where `k` is the zero-based index of the quest in progress. Output For each operation of type 3, print \\"Completed\\" if the quest is completed, otherwise \\"In Progress\\". Example Input 7 1 3 1 5 2 0 2 1 3 0 2 1 3 1 Output In Progress Completed Explanation 1. Start quest 0 with 3 sub-tasks. 2. Start quest 1 with 5 sub-tasks. 3. Mark 2nd sub-task of quest 0. 4. Mark 2nd sub-task of quest 1. 5. Check if quest 0 is completed: Not completed yet. 6. Mark 3rd sub-task of quest 1. 7. Check if quest 1 is completed: 5 out of 5 sub-tasks completed.","solution":"class QuestManager: def __init__(self): self.quests = [] def start_quest(self, s): self.quests.append([0, s]) # [completed_sub_tasks, total_sub_tasks] def mark_next_subtask_completed(self, k): completed, total = self.quests[k] if completed < total: self.quests[k][0] += 1 def is_quest_completed(self, k): completed, total = self.quests[k] return \\"Completed\\" if completed == total else \\"In Progress\\""},{"question":"You are tasked with developing an efficient algorithm to monitor the water level in a reservoir. The reservoir\'s water level changes over time and you need to identify when it exceeds a critical threshold. This information will be used to trigger alerts for preventive measures to avoid flooding. Input The input consists of: 1. An integer `n` (1 ≤ n ≤ 100), the number of recorded water levels. 2. A list of `n` integers, where each integer represents the water level in the reservoir at a specific time point. 3. An integer `threshold`, the critical water level beyond which an alert should be triggered. Output Output \\"ALERT\\" if at any point the water level exceeds the given threshold, otherwise output \\"ALL SAFE\\". Examples Input 5 10 20 30 25 15 20 Output ALERT Input 4 12 18 17 19 20 Output ALL SAFE","solution":"def monitor_water_level(n, water_levels, threshold): This function monitors the water levels in a reservoir and triggers an alert if any water level exceeds the given threshold. :param n: int - the number of recorded water levels. :param water_levels: list of int - the recorded water levels in the reservoir. :param threshold: int - the critical water level threshold. :return: str - \\"ALERT\\" if any water level exceeds the threshold, otherwise \\"ALL SAFE\\". for level in water_levels: if level > threshold: return \\"ALERT\\" return \\"ALL SAFE\\""},{"question":"Alice is developing a new video game where the characters can collect power-ups to gain points. Each power-up has a specific type and gives a different number of points. Alice wants to determine the maximum number of points that a character can collect by selecting non-overlapping power-ups of different types. You are given an array of integers representing the types of power-ups and an array of the same size representing the points each corresponding power-up grants. The character can select only one power-up of each type and must choose the power-up that grants the most points for each type. Your task is to write a function that computes the maximum points the character can collect from non-overlapping power-ups of different types. # Input The input consists of two space-separated arrays: - The first array contains `N` integers representing the types of power-ups. - The second array contains `N` integers, where the `i-th` integer represents the points given by the `i-th` power-up. # Output Return an integer representing the maximum number of points the character can collect. # Constraints - All input values are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ types[i] ≤ 10^5 - 1 ≤ points[i] ≤ 10^5 # Example ```python Input: [1, 2, 1, 2, 3] [10, 20, 30, 50, 40] Output: 100 ``` In this example, the character can select the power-ups with points 30 (type 1), 50 (type 2), and 40 (type 3), resulting in a total of 100 points.","solution":"def max_points(types, points): Returns the maximum points a character can collect from non-overlapping power-ups of different types. Args: types (list of int): List of integers representing the types of power-ups. points (list of int): List of integers representing the points given by the corresponding power-ups. Returns: int: Maximum points that can be collected. type_to_max_points = {} # Iterate over the power-ups and record the maximum points for each type for type_, point in zip(types, points): if type_ not in type_to_max_points: type_to_max_points[type_] = point else: type_to_max_points[type_] = max(type_to_max_points[type_], point) # Sum the maximum points of the unique power-up types return sum(type_to_max_points.values())"},{"question":"Some scientists are working on a new software for a powerful telescope. This telescope captures images and data continuously. The software needs to process this data in real-time to ensure that any anomalies are detected instantly. One of the tasks is to check if the number of signals received in a second forms a palindrome. Given the number of signals received in a given second as an integer, determine if this number is a palindrome. A number is called a palindrome if it reads the same backward as forward. Input The first line of input contains an integer T which denotes the number of test cases. Each of the next T lines contains an integer S where S is the number of signals received in that second. Output For each test case, print \\"YES\\" if the number of signals is a palindrome. Otherwise, print \\"NO\\". Constraints 1 ≤ T ≤ 10^5 0 ≤ S ≤ 10^9 Example Input: 3 121 12321 123 Output: YES YES NO","solution":"def is_palindrome(number): Determines if the given number is a palindrome. Parameters: number (int): The number to check for palindrome property. Returns: str: \\"YES\\" if the number is a palindrome, \\"NO\\" otherwise. str_num = str(number) return \\"YES\\" if str_num == str_num[::-1] else \\"NO\\" def check_palindromes(test_cases): Process a list of signals and determine if each is a palindrome. Parameters: test_cases (list): List of integers representing signals. Returns: list: List containing \\"YES\\" or \\"NO\\" for each palindrome check. results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"Sophie loves geometric patterns and recently she has started working on a project that involves generating interesting patterns using simple geometric shapes. One of the patterns she wants to generate involves arranging circles in a specific way. For a given number of circles n, she wants to arrange them in layers such that: - The first layer has 1 circle. - The second layer has 2 circles. - The third layer has 3 circles. - And so on... Each circle in a layer has to be directly below a circle from the previous layer in terms of vertical alignment and can touch the circle(s) directly above it. Given n circles, Sophie wants to know the number of layers she can create and how many circles are left unused, if any. Help Sophie by writing a function `circle_layers(n)` that takes an integer `n` (1 ≤ n ≤ 10^9) and returns a tuple (l, r) where: - l is the number of completely filled layers. - r is the number of circles left unused after forming l complete layers. # Input - An integer n, the number of circles. # Output - A tuple (l, r), where l is the number of completely filled layers and r is the number of circles left unused. # Example ```python circle_layers(1) -> (1, 0) circle_layers(3) -> (2, 0) circle_layers(6) -> (3, 0) circle_layers(7) -> (3, 1) circle_layers(10) -> (4, 0) ``` # Note For n = 1, one circle can form the first layer completely. For n = 3, one circle forms the first layer, and two circles form the second layer, so two complete layers are formed. For n = 6, one circle forms the first layer, two circles form the second layer, and three circles form the third layer, so three complete layers are formed. For n = 7, one circle forms the first layer, two circles form the second layer, and three circles form the third layer, and one circle is left unused.","solution":"def circle_layers(n): Calculate the number of full layers and remaining circles given a total number of circles n. Args: n (int): total number of circles Returns: tuple: (number of full layers, remaining circles) l = 0 used_circles = 0 while used_circles + (l + 1) <= n: l += 1 used_circles += l r = n - used_circles return (l, r)"},{"question":"Jacob is hosting a coding contest and wants to score the participants efficiently. Each participant in the contest can receive scores for several problems they\'ve attempted. However, if a participant received the same score for different problems more than k times, the excess instances must be disregarded in the final tally to ensure fairness. Therefore, Jacob needs your help to compute the fair scores for each participant. Given the number of participants, the number of problems, k, and a list of scores received by each participant for each problem, write a function that returns the total computed score for each participant after disregarding any score instances that exceed k occurrences. Input - The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100). - The next n lines each contain m integers representing the scores each participant received for each problem. Output - The output should contain n integers, where each integer represents the fair total score of the corresponding participant. Example Input 3 4 2 5 5 5 5 3 3 3 3 4 4 4 4 Output 10 6 8 Note In the given example, each participant\'s scores are: - Participant 1: 5, 5, 5, 5 → The score \'5\' appears 4 times. As k=2, we count only the first two 5\'s. Thus, the total score is 5 + 5 = 10. - Participant 2: 3, 3, 3, 3 → The score \'3\' appears 4 times. As k=2, we count only the first two 3\'s. Thus, the total score is 3 + 3 = 6. - Participant 3: 4, 4, 4, 4 → The score \'4\' appears 4 times. As k=2, we count only the first two 4\'s. Thus, the total score is 4 + 4 = 8.","solution":"from collections import Counter def compute_fair_scores(n, m, k, scores): fair_scores = [] for i in range(n): score_counts = Counter(scores[i]) total = 0 for score, freq in score_counts.items(): total += score * min(freq, k) fair_scores.append(total) return fair_scores"},{"question":"You are given a string that is a concatenation of multiple words, where the words are separated by spaces and each word consists of lowercase English letters. Your task is to determine if there exist two words in the string such that one word is the reverse of the other. If such a pair exists, print \\"Yes\\"; otherwise, print \\"No\\". Constraints * The input string consists of lowercase English letters and spaces. * The total length of the string does not exceed (10^{5}). Input Input is given from Standard Input in the following format: s Output Print \\"Yes\\" if there exist two words in the string such that one is the reverse of the other. Otherwise, print \\"No\\". Examples Input ab ba cd Output Yes Input abc def ghi Output No Input level racecar civic Output No","solution":"def has_reverse_pair(s): Determine if there exist two words in the input string such that one word is the reverse of the other. Parameters: s (str): The input string consisting of lowercase English letters and spaces. Returns: str: \\"Yes\\" if a reverse pair exists, \\"No\\" otherwise. words = s.split() word_set = set(words) for word in words: if word[::-1] in word_set and word != word[::-1]: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers, where each element in the array represents the size of a stick. Your task is to find the maximum number of triplets of these sticks that can form a triangle with a positive area, i.e., for any triplet (a, b, c), the following conditions must be satisfied: 1. a + b > c 2. a + c > b 3. b + c > a A stick of a given length can be used in at most one triangle. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of sticks. The second line contains n integers, each denoting the length of a stick (1 ≤ length ≤ 10^9). Output Print a single integer — the maximum number of non-degenerate triangles that can be formed with the given sticks. Examples Input 6 4 2 3 6 5 7 Output 5 Input 4 10 21 22 100 Output 1 Input 3 1 2 3 Output 0 Note In the first example, the triangles that can be formed are (3, 4, 5), (4, 5, 6), (4, 5, 7), (5, 6, 7), and (3, 6, 7). In the second example, only one triangle (10, 21, 22) can be formed. In the third example, no triangle can be formed as 1 + 2 is not greater than 3.","solution":"def max_non_degenerate_triangles(stick_lengths): Returns the maximum number of non-degenerate triangles that can be formed with the given sticks. stick_lengths.sort() n = len(stick_lengths) count = 0 for i in range(0, n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if stick_lengths[i] + stick_lengths[j] > stick_lengths[k]: count += 1 else: break return count"},{"question":"Given a 2D grid of characters and a list of words, find all the words from the list that can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Write a function that takes a grid of characters and a list of words, then returns the list of words that can be found in the grid. Input The input consists of a grid of size n x m (1 ≤ n, m ≤ 100) containing lowercase English letters, and a list of words (1 ≤ words.length ≤ 1000, 1 ≤ words[i].length ≤ 50). Output The output should be a list of words that can be formed in the grid. The order of words in the output does not matter. Example Input grid = [ [\'o\', \'a\', \'a\', \'n\'], [\'e\', \'t\', \'a\', \'e\'], [\'i\', \'h\', \'k\', \'r\'], [\'i\', \'f\', \'l\', \'v\'] ] words = [\\"oath\\", \\"pea\\", \\"eat\\", \\"rain\\"] Output [\\"oath\\", \\"eat\\"]","solution":"def findWords(grid, words): Returns the list of words that can be found in the grid. def dfs(x, y, node, path): letter = grid[x][y] curr_child = node[letter] if \\"end\\" in curr_child: result.append(path) curr_child.pop(\\"end\\") # To avoid repeated addition grid[x][y] = \'#\' for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] in curr_child: dfs(nx, ny, curr_child, path + grid[nx][ny]) grid[x][y] = letter def build_trie(words): root = {} for word in words: node = root for letter in word: node = node.setdefault(letter, {}) node[\\"end\\"] = True return root result = [] trie = build_trie(words) for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] in trie: dfs(i, j, trie, grid[i][j]) return result"},{"question":"A competition organizer has collected the finishing times of participants in a marathon. Each participant has a unique identifier, and their finishing time is recorded in minutes. Your task is to develop a program that reads and processes the marathon data, and then, given a participant identifier, outputs their rank based on their finishing time. The ranking should be in ascending order, where a lower finishing time corresponds to a higher rank. Ties should be handled by assigning the same rank to participants with the same finishing time. Input The input data consists of two parts. The first part is the marathon finishing data, and the second part is a list of participant identifiers for which you want to know the rank. The format of the marathon finishing data is as follows: p1, t1 p2, t2 ... ... 0, 0 pi (1 ≤ pi ≤ 100) represents the participant identifier and ti (1 ≤ ti ≤ 300) represents the finishing time in minutes for the i-th participant. The input of this data is completed when both the participant identifier and the finishing time are 0. The second part consists of multiple participant inquiries. The format is as follows: q1 q2 :: :: Each inquiry is given a participant identifier qi (1 ≤ qi ≤ 100) on one line. Process inquiries until the end of the input. The number of inquiries does not exceed 100. Output For each inquiry, print the participant\'s rank on one line. Example Input 1, 120 2, 150 3, 130 4, 120 5, 90 6, 110 0, 0 1 4 5 6 Output 3 3 1 2","solution":"def marathon_ranking(data, inquiries): # Store participant times times = {} # Reading the data for d in data: pi, ti = map(int, d.split(\',\')) if pi == 0 and ti == 0: break times[pi] = ti # Sorting participants by time and managing ranks sorted_times = sorted(times.items(), key=lambda x: x[1]) ranks = {} rank = 1 prev_time = -1 participants_same_time = 0 for idx, (pi, ti) in enumerate(sorted_times): if ti != prev_time: rank += participants_same_time participants_same_time = 1 else: participants_same_time += 1 ranks[pi] = rank prev_time = ti # Generating the output for inquiries result = [] for q in inquiries: result.append(ranks.get(q, 0)) return result"},{"question":"You are given a sequence of integers a1, a2, ..., an. You can perform the following operation on the sequence: - Select an integer k (1 ≤ k ≤ n - 1). - Change ak and ak+1 to their sum (ak + ak+1). You are interested in finding the minimum possible maximum element in the sequence after performing exactly n-1 operations. Input The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Print a single integer, the minimum possible maximum element after exactly n-1 operations. Examples Input 3 1 2 3 Output 6 Input 5 5 1 2 6 3 Output 17 Note In the first example, after the first operation we have the sequence [3, 3], then the next operation produces the sequence [6]. In the second example, one possible way to proceed is: - Sum the first two elements (5 + 1) to get [6, 2, 6, 3] - Sum the second element (6) with the third element (2) to get [8, 6, 3] - Sum the second element (8) with the third element (6) to get [14, 3] - Finally, sum the first element (14) with the second element (3) to get [17] Thus, the minimum possible maximum element is 17.","solution":"def min_max_element(n, a): Return the minimum possible maximum element after exactly n-1 operations. # Since there are exactly n-1 operations and each operation reduces the length of the sequence by 1, # we will eventually have a single element. # Thus, the minimum possible maximum element is just the sum of all elements in the original array. return sum(a)"},{"question":"You are given a matrix of dimensions N x M where each cell contains a positive integer. You need to perform certain operations to make all elements of the matrix equal. In one operation, you can choose any element of the matrix and subtract 1 from it. You need to calculate the minimal number of operations required to make all elements of the matrix equal. Input The first line contains two integers, N and M, denoting the number of rows and columns in the matrix, respectively. The next N lines each contain M space-separated integers representing the elements of the matrix. Output Output a single integer representing the minimal number of operations required to make all elements of the matrix equal. Constraints 1 ≤ N, M ≤ 1000 1 ≤ matrix[i][j] ≤ 10000 Example Input: 2 2 4 3 3 2 Output: 4 Explanation Example case 1: You can choose the element at (1,1) and subtract 1 once to make it 3, and choose the element at (2,2) and subtract 1 twice to make it 2. In total, 1 + 2 + 1 (for making (1,2) equal to (2,1)\'s new value) = 4 operations are needed.","solution":"def minimal_operations(matrix): Returns the minimal number of operations required to make all elements of the matrix equal. min_element = min(min(row) for row in matrix) total_operations = sum(sum(cell - min_element for cell in row) for row in matrix) return total_operations"},{"question":"Polyland has a river with n islands. The islands are numbered from 1 to n. There are m bridges connecting these islands. Each bridge connects exactly two different islands and can be traversed in both directions. Di takes a sightseeing tour and starts from the first island. His goal is to visit all the islands at least once. Di can choose his routes, but he cannot travel on the same bridge more than once and he has to start and finish his tour on the first island. Determine if there is a route that allows Di to achieve his goal. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of islands and the number of bridges. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the islands connected by each bridge. Output Print \\"YES\\" if it\'s possible for Di to visit all islands and return to the first island without using any bridge more than once. Otherwise, print \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 3 3 1 2 2 3 3 1 Output YES Input 4 3 1 2 2 3 3 1 Output NO Note In the first example, a possible route is 1 → 2 → 3 → 4 → 1. All islands are visited and we return to the starting island using each bridge exactly once. In the second example, a possible route is 1 → 2 → 3 → 1. All islands are visited and we return to the starting island using each bridge exactly once. In the third example, it\'s not possible to visit the fourth island and return to the starting island without using at least one bridge more than once.","solution":"def is_eulerian_cycle_possible(n, m, bridges): from collections import defaultdict, deque # Function to check if graph is connected def is_connected(): visited = [False] * (n + 1) queue = deque([1]) visited[1] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count == n # Function to check if all vertices with non-zero degree have even degree def all_degrees_even(): for i in range(1, n + 1): if len(graph[i]) % 2 != 0: return False return True # Initialize graph graph = defaultdict(list) # Build the graph adjacency list for u, v in bridges: graph[u].append(v) graph[v].append(u) # Check if graph is connected and all vertices have even degree if is_connected() and all_degrees_even(): return \\"YES\\" return \\"NO\\" # Function to parse input and call the solver function def determine_route(n, m, bridges): return is_eulerian_cycle_possible(n, m, bridges)"},{"question":"You are given an encoded string that consists of digits and lowercase Latin letters. The letters followed by digits represent the count of how many times that letter should appear in the decoded string. You need to decode the string. For example, the string `a2b3c4` should be decoded as `aabbbcccc`. Some letters may not be followed by digits; these letters occur exactly once in the decoded string. For example, the string `a2b3c` should be decoded as `aabbbc`. Your task is to write a function that decodes the given string. # Input - A single string `s` containing the encoded sequence. The length of `s` is between `1` and `1000`, inclusive. It is guaranteed that `s` consists of digits and lowercase Latin letters only, and that a letter is always followed by at most one digit. # Output - A single string representing the decoded sequence. # Example Input ``` a2b3c4 ``` Output ``` aabbbcccc ``` Input ``` x5y3z ``` Output ``` xxxxxyyyz ```","solution":"def decode_string(s): Decodes the given encoded string where letters followed by digits represent the count of times the letter should appear. decoded_string = [] i = 0 while i < len(s): letter = s[i] if i + 1 < len(s) and s[i + 1].isdigit(): count = int(s[i + 1]) decoded_string.append(letter * count) i += 2 else: decoded_string.append(letter) i += 1 return \'\'.join(decoded_string)"},{"question":"A car is traveling along a straight road. You are given the car\'s initial position and a sequence of commands that the car follows. Each command is given as a direction (\'L\' for left, \'R\' for right) and a distance (an integer representing how far the car travels in that direction). Your task is to find the final position of the car after executing all the commands. Input The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the initial position of the car. The next line contains an integer M, the number of commands. Each of the next M lines contains a character C (either \'L\' or \'R\') and an integer D, the distance to travel in that direction. Output For each test case, output the final position of the car as an integer. Constraints 1 ≤ T ≤ 100 -1000 ≤ N ≤ 1000 1 ≤ M ≤ 100 1 ≤ D ≤ 100 Example Input: 2 0 3 R 5 L 2 R 10 10 2 L 3 R 4 Output: 13 11","solution":"def final_position(T, test_cases): Calculate the final position of the car after executing all the commands. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains an initial position (int), a list of commands (list of tuples), where each tuple consists of a direction (str) and distance (int). Returns: list of ints: A list of final positions of the car for each test case. results = [] for case in test_cases: initial_position = case[0] commands = case[1] final_position = initial_position for command in commands: direction, distance = command if direction == \'L\': final_position -= distance elif direction == \'R\': final_position += distance results.append(final_position) return results"},{"question":"A company is organizing a coding competition and wants to assess the skill of the participants. They propose a problem about rearranging strings. The given task is to transform a given string into a palindrome with the minimum number of character modifications. You are given a string s of lowercase English letters. In one step, you can change any single character of the string to any other lowercase English character. Your goal is to determine the minimum number of such changes required to make the given string a palindrome. A palindrome is a string that reads the same forward and backward. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). Output Output a single integer — the minimum number of character changes needed to make the string a palindrome. Examples Input race Output 2 Input abccba Output 0 Input abcd Output 2 Note In the first example, one way to change \\"race\\" into a palindrome is to change \'r\' to \'e\' and \'c\' to \'a\', which results in \\"eae\\". Thus, it takes 2 modifications. In the second example, the string \\"abccba\\" is already a palindrome, so no changes are required. In the third example, transforming \\"abcd\\" into \\"abba\\" or \\"acca\\" requires 2 changes. For instance, change \'d\' to \'b\' and \'c\' to \'a\'.","solution":"def min_changes_to_palindrome(s): Calculate the minimum number of changes needed to make string s a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: changes += 1 return changes"},{"question":"String Rotation Check Given two strings s1 and s2, check if s2 is a rotation of s1 using any number of rotations. A rotation of a string is a string that can be obtained by rotating another string. For example, \\"abc\\" rotated by 1 position is \\"bca\\", rotated by 2 positions is \\"cab\\", and rotated by 3 positions is \\"abc\\" again. input s1 s2 output Output \\"Yes\\" if s2 is a rotation of s1, otherwise output \\"No\\". Constraint * 1 ≤ len(s1), len(s2) ≤ 100000 * Both strings contain only lowercase English letters. Input example abcde cdeab Output example Yes Example Input waterbottle erbottlewat Output Yes","solution":"def is_rotation(s1, s2): Check if s2 is a rotation of s1. if len(s1) != len(s2): return \\"No\\" combined = s1 + s1 if s2 in combined: return \\"Yes\\" else: return \\"No\\""},{"question":"In a remote mountainous area, there is a network of N isolated villages (numbered from 1 to N), and M roads that connect some pairs of villages. Each road has a specific time taken to travel. Given a starting village S and an ending village E, you need to calculate the minimum travel time required to go from village S to village E. If there is no path from village S to village E, return -1. Input The input consists of the following: - The first line contains three integers N, M, and S, where N represents the number of villages, M represents the number of roads, and S represents the starting village. - The second line contains the ending village E. - The next M lines each contain three integers U, V, and T, indicating that there is a road between villages U and V with travel time T. Output Output the minimum travel time from village S to village E. If no such path exists, print -1. Constraints - 2 ≤ N ≤ 10^3 - 1 ≤ M ≤ 10^4 - 1 ≤ U, V ≤ N - U ≠ V - 1 ≤ T ≤ 10^2 Examples Input 4 4 1 4 1 2 5 2 3 10 3 4 1 1 4 100 Output 16 Input 5 5 1 5 1 2 2 2 3 4 3 4 6 4 5 3 1 3 7 Output 15","solution":"import heapq def minimum_travel_time(N, M, S, E, roads): # Building the adjacency list for graph representation graph = {i: [] for i in range(1, N + 1)} for U, V, T in roads: graph[U].append((T, V)) graph[V].append((T, U)) # Using Dijkstra\'s algorithm to find shortest path min_heap = [(0, S)] # (travel time, current village) shortest_path = {i: float(\'inf\') for i in range(1, N + 1)} shortest_path[S] = 0 while min_heap: current_time, current_village = heapq.heappop(min_heap) if current_time > shortest_path[current_village]: continue for travel_time, neighbor in graph[current_village]: time = current_time + travel_time if time < shortest_path[neighbor]: shortest_path[neighbor] = time heapq.heappush(min_heap, (time, neighbor)) # If the end village\'s shortest path is still infinity, it means it\'s not reachable return shortest_path[E] if shortest_path[E] != float(\'inf\') else -1"},{"question":"You are given two lists of integers of the same length. Your task is to merge these lists into a single list by summing corresponding elements from both lists and output the resulting merged list. Input The input consists of two lines: 1. The first line contains the first list of space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100). 2. The second line contains the second list of space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 100). It is guaranteed that the lengths of the two lists are the same and are between 2 and 20 inclusive. Output Output a single line containing the merged list of integers. Examples Input 1 2 3 4 5 6 Output 5 7 9 Input 10 20 30 40 Output 40 60","solution":"def merge_and_sum_lists(list1, list2): Takes two lists of integers and returns a new list where each element is the sum of the corresponding elements from the input lists. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") return [list1[i] + list2[i] for i in range(len(list1))]"},{"question":"Alice and Bob are playing a game with a pile of stones. On each player\'s turn, they can pick 1, 2, or 3 stones from the pile. Alice always goes first, and they alternate turns. The player who picks the last stone wins the game. Given the number of stones in the pile, determine who will win the game if both players play optimally. INPUT: The first line contains the number of test cases T. For each test case, a single line contains an integer N, the number of stones in the pile. OUTPUT: For each test case, output \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT Alice Alice Alice","solution":"def game_winner(T, test_cases): Determines the winner of the stone game for each test case. Parameters: T (int): Number of test cases test_cases (list of int): List of numbers of stones in each test case Returns: list of str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\" results = [] for N in test_cases: if N % 4 == 0: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"You are given a square matrix of integers. Transpose the matrix (swap rows and columns). Input The input consists of n lines (1 ≤ n ≤ 10, n is not given explicitly). Each of the lines contains n space-separated integers; j-th integer in i-th line corresponds to matrix element mij (1 ≤ mij ≤ 100). Output Output the transposed matrix in the same format as the input. Examples Input 1 2 3 4 5 6 7 8 9 Output 1 4 7 2 5 8 3 6 9 Input 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16","solution":"def transpose_matrix(matrix): Transposes the given square matrix. Parameters: matrix (list of list of int): The square matrix to be transposed Returns: list of list of int: The transposed matrix n = len(matrix) transposed = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed[j][i] = matrix[i][j] return transposed"},{"question":"A factory has a conveyor belt system with N consecutively placed stations arranged in a straight line. Each station is either operational (represented by \'1\') or non-operational (represented by \'0\'). The factory authorities want to know if there exists a contiguous sub-segment of stations such that it contains exactly K operational stations and no non-operational stations. For example, if N=10 and there are K=3 operational stations and the arrangement of conveyor belt stations is \'1110100000\', then there is a contiguous sub-segment of length 3 (\'111\') which contains exactly 3 operational stations and no non-operational stations. Write a program to determine whether such a contiguous sub-segment exists. Input: - The first line contains two integers, N (1 ≤ N ≤ 1000000) and K (1 ≤ K ≤ N) — the number of stations and the number of operational stations to find in a contiguous segment. - The second line contains a string of length N consisting of \'0\'s and \'1\'s which represents the operational state of each station. Output: - Output \\"YES\\" (without quotes) if there exists a contiguous sub-segment containing exactly K operational stations and no non-operational stations. Otherwise, output \\"NO\\" (without quotes). Examples: Input: 10 3 1110100000 Output: YES Input: 7 2 1100110 Output: YES Input: 5 3 10011 Output: NO","solution":"def has_contiguous_segment(N, K, stations): Determines if there is a contiguous sub-segment of exactly K operational stations. :param N: Integer, number of stations. :param K: Integer, required number of operational stations in the segment. :param stations: String, stations sequence with \'1\' and \'0\'. :return: \\"YES\\" if such segment exists, otherwise \\"NO\\". required_segment = \'1\' * K if required_segment in stations.split(\'0\'): return \\"YES\\" return \\"NO\\""},{"question":"You are given a directed acyclic graph (DAG) with n vertices and m edges. Your task is to check if it is possible to partition the vertices into two non-empty sets A and B such that there is no edge from any vertex in set B to any vertex in set A. Input The first line of the input contains two integers n and m, where n is the number of vertices, and m is the number of edges in the graph (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), meaning there is a directed edge from vertex u to vertex v. Output Print \\"Yes\\" (without quotes) if such a partition is possible, otherwise print \\"No\\" (without quotes). Example Input 4 3 1 2 2 3 3 4 Output Yes Explanation In the given example, one possible valid partition: - Set A: {1, 2} - Set B: {3, 4} There are no edges going from any vertex in set B to any vertex in set A.","solution":"def can_partition_dag(n, m, edges): from collections import defaultdict, deque # Initialize the graph graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in edges: graph[u].append(v) indegree[v] += 1 # Perform a topological sort topo_sort = [] queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) while queue: node = queue.popleft() topo_sort.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(topo_sort) != n: return \\"No\\" # Check the validity of the partition half = len(topo_sort) // 2 set_a = set(topo_sort[:half]) set_b = set(topo_sort[half:]) for u, v in edges: if u in set_b and v in set_a: return \\"No\\" return \\"Yes\\""},{"question":"You are a software engineer working on a simulation of Mars rover movements. In this simulation, the Mars rover is deployed on a 2D grid representing the terrain of Mars. The rover is initially located at position (0, 0) and can move to one of four directions: up, down, left, or right, one cell at a time. Your task is to determine the minimum number of moves required for the rover to reach a given target position (x, y). The rover cannot leave the grid which is bounded by coordinates (-105, -105) and (105, 105). Input Input consists of 2 space-separated integers x, y (-105 ≤ x, y ≤ 105), the coordinates of the target position. Output Output a single integer — the minimum number of moves required to reach the target position from the initial position (0, 0). Examples Input 3 4 Output 7 Input -1 -1 Output 2 Input 0 0 Output 0 Note In the first sample test, the rover can move 3 steps to the right and then 4 steps up, or vice versa, totaling 7 moves.","solution":"def min_moves_to_reach_target(x, y): Returns the minimum number of moves required for the rover to reach the target position (x, y) from the initial position (0, 0). # The minimum number of moves is simply the sum of the absolute values # of the x and y coordinates because the rover can only move one unit # in any direction at a time. return abs(x) + abs(y)"},{"question":"Write a program that simulates a network of computers connected through various hubs. Each computer is assigned an integer ID and is connected to other computers through these hubs. Given a list of connections where each connection specifies two computer IDs that can directly communicate through a hub, your task is to determine if there exists a communication path between two specified computers. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M, where N is the number of computers and M is the number of connections. The next M lines each contain two space-separated integers U and V, indicating that there is a direct communication hub between computer U and computer V. The last line of each test case contains two space-separated integers A and B, where A is the ID of the starting computer and B is the ID of the destination computer. Output For each test case, output \\"YES\\" if there exists a communication path between computer A and computer B, otherwise output \\"NO\\". Constraints - 1 <= T <= 100 - 2 <= N <= 10^4 - 1 <= M <= 10^5 - 1 <= U, V, A, B <= N Example Input: 2 5 4 1 2 2 3 3 4 4 5 1 5 3 3 1 2 2 3 4 5 1 5 Output: YES NO Explanation Example case 1: There exists a path 1 -> 2 -> 3 -> 4 -> 5, so the output is \'YES\'. Example case 2: There\'s no way to connect computer 1 and 5 as they belong to different sub-networks, so the output is \'NO\'.","solution":"def is_communication_possible(N, M, connections, A, B): from collections import defaultdict, deque adj_list = defaultdict(list) for U, V in connections: adj_list[U].append(V) adj_list[V].append(U) visited = set() queue = deque([A]) while queue: current = queue.popleft() if current == B: return \\"YES\\" for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\" def process_test_cases(test_cases): results = [] for N, M, connections, A, B in test_cases: result = is_communication_possible(N, M, connections, A, B) results.append(result) return results"},{"question":"A gardener plants flowers in a row. Each flower has a specific type and a height. Types of flowers are represented by a character (a-z), and the height of each flower is an integer (1 ≤ height ≤ 1000). The garden looks more beautiful if there are no adjacent flowers of the same type. You are given the initial sequence of flowers in the garden. Your task is to rearrange the flowers such that no two adjacent flowers are of the same type and the arrangement is lexicographically smallest. If it is not possible to arrange the flowers under the given condition, report so. Input The first line contains n (1 ≤ n ≤ 1000) — the total number of flowers in the garden. The second line contains n pairs of characters and integers separated by a space, each pair representing the type and height of a flower. The type is a lowercase letter (a-z) and the height is an integer (1 ≤ height ≤ 1000). The flowers are given in the order they were planted initially. Output If it is possible to rearrange the flowers such that no two adjacent flowers are of the same type, print the rearranged sequence of flower types and heights. The sequence should be lexicographically smallest. Print each type and height pair as they appear in the rearranged sequence. If it is impossible, print \\"Not possible\\". Examples Input 5 a 3 b 1 a 2 c 1 a 1 Output a 1 b 1 a 3 c 1 a 2 Input 4 a 1 a 2 a 3 a 4 Output Not possible Input 6 b 2 b 3 b 4 a 1 a 2 a 3 Output a 1 b 2 a 2 b 3 a 3 b 4","solution":"from collections import Counter import heapq def rearrange_flowers(n, flowers): # Count frequencies and store flowers information flower_count = Counter(flowers[i][0] for i in range(n)) max_freq = max(flower_count.values()) # If any flower appears more than (n + 1) // 2 times, it\'s impossible if max_freq > (n + 1) // 2: return \\"Not possible\\" # Create a max heap based on flower counts (-count for max heap in python) max_heap = [] for flower in flower_count: heapq.heappush(max_heap, (-flower_count[flower], flower)) result = [] prev_f, prev_char = 0, \'\' while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_f < 0: heapq.heappush(max_heap, (prev_f, prev_char)) prev_f, prev_char = freq + 1, char # decrease frequency by 1 return result def beautify_garden(n, flower_data): flowers = [(flower_data[i], int(flower_data[i + 1])) for i in range(0, 2 * n, 2)] flower_types = \'\'.join(flower_data[i] for i in range(0, 2 * n, 2)) rearranged_types = rearrange_flowers(n, flowers) if rearranged_types == \\"Not possible\\": return \\"Not possible\\" rearranged_flowers = [] flower_data_indices = {char: [] for char in set(flower_types)} for i, (char, height) in enumerate(flowers): flower_data_indices[char].append(i) rearranged = [] for char in rearranged_types: indices = flower_data_indices[char].pop(0) rearranged.append(f\\"{char} {flowers[indices][1]}\\") return \\" \\".join(rearranged) def solve(): n = int(input().strip()) flower_data = input().strip().split() result = beautify_garden(n, flower_data) print(result)"},{"question":"Given a sequence of integers, you are required to find the length of the longest subsequence (not necessarily contiguous) such that the difference between consecutive elements of the subsequence is the same. For example, in the sequence [1, 5, 3, 9, 2], one possible longest subsequence is [1, 3, 5], where the difference between consecutive elements is 2. Write a function `longest_subsequence_with_constant_diff(arr: List[int]) -> int`, which computes the length of the longest subsequence with a constant difference between consecutive elements. **Input:** - A sequence of integers arr (1 ≤ |arr| ≤ 1000, -10^9 ≤ arr[i] ≤ 10^9). **Output:** - An integer representing the length of the longest subsequence with a constant difference between consecutive elements. **Examples:** ``` Input: arr = [1, 5, 3, 9, 2] Output: 3 Explanation: One valid subsequence is [1, 3, 5] where the difference (3-1) == 2 and (5-3) == 2. Input: arr = [1, 5, 9, 13, 17] Output: 5 Explanation: The entire sequence itself is a valid subsequence with differences of 4. Input: arr = [4, 6, 8, 3, 2] Output: 3 Explanation: One valid subsequence is [4, 6, 8] where the difference (6-4) == 2 and (8-6) == 2. ```","solution":"from typing import List def longest_subsequence_with_constant_diff(arr: List[int]) -> int: Finds the length of the longest subsequence such that the difference between consecutive elements is the same. if not arr: return 0 n = len(arr) diff_map = {} for i in range(n): for j in range(i+1, n): diff = arr[j] - arr[i] if (i, diff) in diff_map: diff_map[(j, diff)] = diff_map[(i, diff)] + 1 else: diff_map[(j, diff)] = 2 return max(diff_map.values(), default=1)"},{"question":"A music festival consists of n stages and m routes. Each stage is numbered from 1 to n, and each route between stages has a specific time it takes to travel. The festival organizers want to ensure that attendees can travel conveniently from the main entrance (Stage 1) to the main performance stage (Stage n) without delays due to the crowd. They aim to determine if it is possible for all attendees to arrive at the main performance stage using at most \'k\' units of time. Write a program that helps the organizers to check if it is possible to find such a path within the given time constraints. Input The first line of input contains three integers n, m, and k (2 ≤ n ≤ 1000; 1 ≤ m ≤ 5000; 1 ≤ k ≤ 10000) representing the number of stages, the number of routes, and the maximum allowable travel time, respectively. Each of the next m lines contains three integers u, v, t (1 ≤ u, v ≤ n; 1 ≤ t ≤ 1000) indicating a route between stages u and v that takes t units of travel time. It is possible that there are multiple routes between the same pair of stages, or even from a stage to itself. It is guaranteed that there exists a way to travel from stage 1 to stage n using the given routes. Output If it is possible to travel from stage 1 to stage n within the given time k, print \\"Possible\\" (without quotes) in the first line. If it is not possible, print \\"Impossible\\" (without quotes) on the first line. Examples Input 4 5 7 1 2 3 2 3 2 3 4 1 1 3 5 2 4 6 Output Possible Input 3 3 3 1 2 2 2 3 3 1 3 5 Output Impossible Input 5 6 15 1 2 4 2 3 3 1 3 10 3 4 5 4 5 2 1 5 100 Output Possible","solution":"import heapq def is_path_possible(n, m, k, routes): def dijkstra(graph, start, end): # Starting with a very large number as the initial distance distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] graph = {i: [] for i in range(1, n + 1)} for u, v, t in routes: graph[u].append((v, t)) graph[v].append((u, t)) shortest_time = dijkstra(graph, 1, n) if shortest_time <= k: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given a list of integers and an integer k. You can make at most k changes to the list. In one change, you can select a subarray (contiguous segment) of length at most 2, and reverse it. You need to find the maximum possible value of the product of the elements in the list after making at most k changes. Input The first line contains two integers n and k (1 ≤ n ≤ 2*10^5, 0 ≤ k ≤ 10^5) – the number of elements in the list and the number of changes allowed respectively. The second line contains n integers a1, a2, …, an (−10^9 ≤ ai ≤ 10^9) – the elements of the list. Output Output the maximum possible value of the product of the elements in the list after making at most k changes. Example Input 5 2 1 2 3 4 5 Output 120 Note In the example, you can reverse the subarray [4, 5] to get the list [1, 2, 3, 5, 4], and then reverse the subarray [3, 5] to get [1, 2, 5, 3, 4]. The product of the elements in the list is 1 * 2 * 5 * 3 * 4 = 120, which is the maximum possible with at most 2 changes.","solution":"def max_product_after_changes(nums, k): Returns the maximum possible product of the list after making at most k changes. n = len(nums) if k == 0: # No changes allowed, return the product of current list. result = 1 for num in nums: result *= num return result if n == 1: # If list contains only one element, the product is the element itself. return nums[0] def product(lst): result = 1 for num in lst: result *= num return result max_product = float(\'-inf\') for i in range(n): for j in range(i, min(i+2, n)): new_list = nums[:i] + nums[i:j+1][::-1] + nums[j+1:] max_product = max(max_product, product(new_list)) return max_product"},{"question":"Mira is fascinated by magic squares. A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same, known as the magic constant. Mira wants to write a program that analyzes a given square matrix to determine if it is a magic square. Your task is to create a program that, given an n x n matrix, checks if the matrix is a magic square and outputs \\"YES\\" if it is, and \\"NO\\" otherwise. Note that Mira is particularly interested in magic squares that contain only distinct integers, and n can vary for each test case. Input The input is given in the following format: n matrix1_row1 matrix1_row2 :: matrix2_row1 matrix2_row2 :: The first line contains the size of the matrix n (1 ≤ n ≤ 100), followed by n lines, each containing n integers representing the rows of the matrix. Output For each test case, output \\"YES\\" if the matrix is a magic square, and \\"NO\\" otherwise. Example Input 3 2 7 6 9 5 1 4 3 8 4 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 3 1 2 3 4 5 6 7 8 9 Output YES YES NO","solution":"def is_magic_square(matrix): Function to check if a given matrix is a magic square. Parameters: matrix (list of list of int): The n x n matrix. Returns: str: \\"YES\\" if the matrix is a magic square, \\"NO\\" otherwise. n = len(matrix) # Get the magic constant using the first row magic_constant = sum(matrix[0]) # Check all rows for row in matrix: if sum(row) != magic_constant: return \\"NO\\" # Check all columns for col in range(n): if sum(matrix[row][col] for row in range(n)) != magic_constant: return \\"NO\\" # Check both diagonals if sum(matrix[i][i] for i in range(n)) != magic_constant: return \\"NO\\" if sum(matrix[i][n - i - 1] for i in range(n)) != magic_constant: return \\"NO\\" # Check for distinct integers elements = set() for row in matrix: for element in row: if element in elements: return \\"NO\\" elements.add(element) return \\"YES\\" def process_input(input_data): Function to process the input data and output results for magic square checking. Parameters: input_data (str): the entire input data as a string Returns: list: List of results, each being \\"YES\\" or \\"NO\\". lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): n = int(lines[index]) matrix = [] for i in range(n): matrix.append(list(map(int, lines[index + 1 + i].strip().split()))) index += n + 1 results.append(is_magic_square(matrix)) return results # Example usage: input_data = 3 2 7 6 9 5 1 4 3 8 4 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 3 1 2 3 4 5 6 7 8 9 results = process_input(input_data) for result in results: print(result)"},{"question":"In a far-away land, there lives a mathematician named Alice who loves to solve pattern-based problems. Recently, she encountered an interesting sequence problem. Given a number N, Alice wants to construct a sequence of length N satisfying these conditions: 1. The sequence is made of only two distinct characters, \'A\' and \'B\'. 2. No two consecutive characters in the sequence can be the same. 3. The sequence should be lexicographically smallest. Given the length of the sequence N, help Alice find the lexicographically smallest sequence satisfying the conditions. **Input:** The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, the length of the sequence for that test case. **Output:** For each test case, print a single line containing the lexicographically smallest sequence of length N. **Constraints:** 1. 1 ≤ T ≤ 100 2. 1 ≤ N ≤ 10^6 **Example** **Input:** ``` 3 1 2 5 ``` **Output:** ``` A AB ABABA ``` Explaination: - For N=1, the smallest sequence is \\"A\\". - For N=2, the smallest sequence is \\"AB\\". - For N=5, the smallest sequence is \\"ABABA\\".","solution":"def generate_sequence(n): Generate the lexicographically smallest sequence of length n with no consecutive characters being the same, using only \'A\' and \'B\'. result = [] for i in range(n): if i % 2 == 0: result.append(\'A\') else: result.append(\'B\') return \'\'.join(result) def get_sequences(lengths): return [generate_sequence(n) for n in lengths]"},{"question":"In a sprawling intergalactic terrain, a robot is required to collect minerals from grid-based planets, each represented as an (m x n) matrix. The robot starts at the upper-left corner (0,0) and needs to move to the bottom-right corner (m-1,n-1). The robot can only move right or down. Each cell in the matrix contains a non-negative integer indicating the number of minerals in that cell. Your objective is to determine the maximum number of minerals the robot can collect by the time it reaches the bottom-right corner. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the matrix. - The next m lines each contain n integers, where each integer a[i][j] (0 ≤ a[i][j] ≤ 1000) represents the number of minerals in cell (i, j). Output: - A single integer representing the maximum amount of minerals the robot can collect on its way to the bottom-right corner. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: The optimal path in the given grid is to move right → right → down → down, collecting 1 + 3 + 1 + 5 + 2 = 12 minerals.","solution":"def max_minerals(m, n, matrix): Computes the maximum minerals that can be collected from the top-left to the bottom-right of the matrix. :param m: Number of rows in the matrix :param n: Number of columns in the matrix :param matrix: 2D list of integers representing the minerals in each cell :return: Maximum minerals that can be collected # Create a 2D list to store the maximum minerals collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the dp table with the minerals at each cell dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (can only come from the top) for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner contains the answer return dp[m-1][n-1]"},{"question":"You are given a sequence of n integers. You need to perform q queries on this sequence. Each query is one of two types: 1. Update the value at a specific position in the sequence. 2. Calculate and return the sum of integers in a given range of the sequence. Input The first line contains two integers n and q (1 ≤ n, q ≤ 3·105) — the number of elements in the sequence and the number of queries. The second line contains n integers a_i (|a_i| ≤ 109) — the initial values of the sequence. The next q lines contain queries in the following format: - If the query is of type 1, it is given as \\"1 x y\\" where 1 ≤ x ≤ n and |y| ≤ 109. - If the query is of type 2, it is given as \\"2 l r\\" where 1 ≤ l ≤ r ≤ n. Output For each query of type 2, print the sum of the specified range of the sequence. Examples Input 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 4 2 1 5 Output 6 13 14 22","solution":"class Sequence: def __init__(self, n, elements): self.n = n self.elements = elements def update(self, x, y): self.elements[x-1] = y def range_sum(self, l, r): return sum(self.elements[l-1:r]) def process_queries(n, elements, queries): seq = Sequence(n, elements) results = [] for query in queries: type_query = query[0] if type_query == 1: x, y = query[1], query[2] seq.update(x, y) elif type_query == 2: l, r = query[1], query[2] results.append(seq.range_sum(l, r)) return results"},{"question":"Manao has another task related to constructing the supercollider. This new task involves checking the possibility of building the supercollider within the existing infrastructure of the city. The city is modeled as a grid with n rows and m columns, where each cell can either be land (`L`) or building (`B`). Due to safety regulations, the supercollider cannot be constructed on any cell containing a building. The supercollider again has four accelerating chambers that form a plus sign when constructed. Each chamber must still be aligned orthogonally, and the centers of these accelerating chambers must lie on a land cell (`L`). The problem now is to determine the maximum length of the arms of the supercollider that can be constructed within the city grid while complying with the regulations. Input The first line of the input consists of two single-space-separated integers n and m, the number of rows and columns in the city grid. Each of the subsequent n lines contains a string of length m representing the city grid. Each character in the string is either \'L\' (land) or \'B\' (building). The problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows. * In subproblem D1 (4 points), n and m will be between 1 and 200, inclusive. * In subproblem D2 (12 points), n and m will be between 1 and 1000, inclusive. Output Print one line containing a single integer, the length of the longest arm of a possible supercollider that can be constructed in the city grid. If it is not possible to construct the supercollider in compliance with the regulations, print zero. Examples Input 5 5 LLLLL LLBLL LLLLL LLBLL LLLLL Output 1 Note Consider the example. The largest plus shape that can be found in this grid with length 1 is centered on any of the \'L\' cells that do not immediately touch a \'B\' cell. Each arm extends one cell in each of the four directions. For instance, the supercollider can be centered at (2, 2) resulting in a plus shape extending to (1, 2), (2, 1), (2, 3), and (3, 2). Thus, the length of the longest arm is 1. In this example, it is not possible to construct a supercollider with arm length greater than 1 due to the placement of buildings (`B`), as it would violate the regulations.","solution":"def max_supercollider_arm_length(n, m, grid): def valid_center(i, j, length): if i - length < 0 or i + length >= n or j - length < 0 or j + length >= m: return False for k in range(1, length + 1): if grid[i - k][j] == \'B\' or grid[i + k][j] == \'B\' or grid[i][j - k] == \'B\' or grid[i][j + k] == \'B\': return False return True max_length = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': current_length = 0 while valid_center(i, j, current_length): max_length = max(max_length, current_length) current_length += 1 return max_length"},{"question":"The Advanced Robotics Research Institute (ARRI) is developing a new type of robot that understands and executes commands in a unique command language. The command language consists of sequences of instructions that the robot can perform. Each command has a unique opcode, which is an integer between 0 and 255 (inclusive), and a certain number of arguments. The commands are provided as a list of tuples. Each tuple contains an integer representing the opcode and a list of integers representing the arguments. ARRI wants to simplify the program by removing redundant commands. A command is considered redundant if it appears consecutively with the same opcode and arguments. For example, the command (1, [2, 3]) appearing twice consecutively is redundant. Your task is to write a function `simplify_commands` that takes a list of commands and removes the redundant commands. Function Signature: ```python def simplify_commands(commands: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[int]]]: ``` Input: - A list of commands, where each command is represented by a tuple consisting of an integer (opcode) and a list of integers (arguments). The length of the list is at most 10^5. Output: - A simplified list of commands with no consecutive redundant commands. Example Input: ```python [(1, [2, 3]), (1, [2, 3]), (2, [3, 4]), (1, [2, 3]), (2, [3, 4])] ``` Output: ```python [(1, [2, 3]), (2, [3, 4]), (1, [2, 3]), (2, [3, 4])] ``` Explanation: The second `(1, [2, 3])` is redundant because it appears consecutively after the first `(1, [2, 3])`, so it is removed. The other commands are either not redundant or not consecutive duplicates. Input: ```python [(0, [1]), (0, [1]), (0, [1]), (2, [4, 5]), (2, [4, 5])] ``` Output: ```python [(0, [1]), (2, [4, 5])] ``` Explanation: All consecutive `(0, [1])` and `(2, [4, 5])` commands were reduced to one respective occurrence each.","solution":"from typing import List, Tuple def simplify_commands(commands: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[int]]]: if not commands: return [] simplified_commands = [commands[0]] for command in commands[1:]: if command != simplified_commands[-1]: simplified_commands.append(command) return simplified_commands"},{"question":"You are given an array of integers. Your task is to reorder the array in such a way that the absolute difference between any two consecutive elements is minimized. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line of each test case contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, output n integers — the reordered array such that the absolute difference between any two consecutive elements is minimized and the first element of the reordered array should be the smallest element of the array. Example Input 2 4 4 2 1 3 3 10 5 8 Output 1 2 3 4 5 8 10 Note In the first test case, the reordered array is [1, 2, 3, 4] where the absolute difference between any two consecutive elements is minimized. In the second test case, the reordered array is [5, 8, 10].","solution":"def reorder_array(test_cases): results = [] for nums in test_cases: nums_sorted = sorted(nums) results.append(nums_sorted) return results # Wrapper function to handle input and output format def handle_reorder_array(t, test_cases_data): test_cases = [] for i in range(t): n, nums = test_cases_data[i] test_cases.append(nums) reordered_arrays = reorder_array(test_cases) return reordered_arrays"},{"question":"Petya and his friends are playing a game with a tree. A tree is an acyclic connected graph with N nodes and N-1 edges. Each node is uniquely identified by an integer value from 1 to N. In this game, Petya places a token on the root node of the tree (node 1). The goal is to count the number of distinct paths Petya can take, starting from the root node, such that the token visits every connected node exactly once. Each path is a sequence of moves from node to node following the tree\'s edges and must cover all nodes in the tree. If two paths visit the same set of nodes but in different orders, they are considered different paths. Write a program that calculates the number of such distinct paths for a given tree of N nodes. Input The first line of input contains an integer T (1 ≤ T ≤ 10), representing the number of test cases. For each test case, the first line contains an integer N (2 ≤ N ≤ 10^5) representing the number of nodes in the tree. The next N-1 lines contain two integers u and v (1 ≤ u, v ≤ N), which represent an edge between nodes u and v. The sum of N over all test cases will not exceed 10^5. Output For each test case, output the number of distinct paths starting from the root node that visit every connected node exactly once. Example Input 3 3 1 2 1 3 4 1 2 2 3 2 4 4 1 2 1 3 1 4 Output 2 6 6 Explanation In the first test case, the tree with 3 nodes connected as follows: ``` 1 / 2 3 ``` The distinct paths starting from root node 1 are: 1 -> 2 -> 3 1 -> 3 -> 2 Thus, there are 2 distinct paths. In the second test case, the tree with 4 nodes connected as follows: ``` 1 | 2 / 3 4 ``` The distinct paths starting from root node 1 are: 1 -> 2 -> 3 -> 4 1 -> 2 -> 4 -> 3 Thus, there are 6 distinct paths. In the third test case, the tree with 4 nodes connected as follows: ``` 1 / / 2 3 4 ``` The distinct paths starting from root node 1 are: 1 -> 2 -> 3 -> 4 1 -> 2 -> 4 -> 3 1 -> 3 -> 2 -> 4 1 -> 3 -> 4 -> 2 1 -> 4 -> 2 -> 3 1 -> 4 -> 3 -> 2 Thus, there are 6 distinct paths.","solution":"from math import factorial def number_of_distinct_paths(T, test_cases): results = [] for case in test_cases: N = case[0] if N == 1: results.append(1) continue # Number of distinct paths is just (N-1)! result = factorial(N - 1) results.append(result) return results # Example usage: T = 3 test_cases = [ (3, [(1, 2), (1, 3)]), (4, [(1, 2), (2, 3), (2, 4)]), (4, [(1, 2), (1, 3), (1, 4)]) ] print(number_of_distinct_paths(T, test_cases))"},{"question":"Create a function `is_valid_sudoku(board: List[List[str]]) -> bool` that determines if a given 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition. Note that the Sudoku board could be partially filled, where the empty cells are denoted with the character `\'.\'`. Constraints: - The board length and width are always 9. - Each element is either \'.\' or a digit from \'1\' to \'9\'. Input: - The input is a 9x9 list of lists. Output: - Return `True` if the board is valid according to the Sudoku rules, `False` otherwise. Example: ```python boardprint(is_valid_sudoku(board)) # Output: True ```","solution":"def is_valid_sudoku(board): Returns True if the given board is a valid Sudoku board, otherwise returns False. def is_valid_unit(unit): unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) # Check rows for row in board: if not is_valid_unit(row): return False # Check columns for col in zip(*board): if not is_valid_unit(col): return False # Check 3x3 sub-boxes for i in range(0, 9, 3): for j in range(0, 9, 3): sub_box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_unit(sub_box): return False # If all checks are passed return True"},{"question":"You are given a list of N integers which represent the number of pages in N books. Your task is to divide these books into K students such that the maximum number of pages assigned to a student is minimized. Each student must get at least one book, and each book must be assigned to exactly one student. Input The first line contains an integer T, the number of test cases. Each test case starts with two integers: N (the number of books) and K (the number of students). The next line contains N integers representing the number of pages in the books. Output For each test case, output a single line containing the minimum possible value for the maximum number of pages a student has to read. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ K ≤ N 1 ≤ pages in each book ≤ 10^6 Example Input: 2 4 2 10 20 30 40 5 3 5 10 20 30 40 Output: 60 40 Explanation Example case 1: To minimize the maximum number of pages, one way to assign books could be that student 1 gets books with 10 and 20 pages, and student 2 gets books with 30 and 40 pages. This way the maximum number of pages a student reads is 60 which is the minimum possible. Example case 2: To minimize the maximum number of pages, one way to assign books could be that student 1 gets book with 5 and 10 pages, student 2 gets book with 20 pages, and student 3 gets books with 30 and 40 pages. This way the maximum number of pages a student reads is 40 which is the minimum possible.","solution":"def is_possible(books, n, k, max_pages): student_count = 1 current_pages = 0 for pages in books: if current_pages + pages > max_pages: student_count += 1 current_pages = pages if student_count > k: return False else: current_pages += pages return True def find_minimum_max_pages(books, n, k): if k > n: return -1 low = max(books) high = sum(books) result = high while low <= high: mid = (low + high) // 2 if is_possible(books, n, k, mid): result = mid high = mid - 1 else: low = mid + 1 return result def allocate_books(test_cases): results = [] for test in test_cases: n, k, books = test result = find_minimum_max_pages(books, n, k) results.append(result) return results"},{"question":"You are given an array of strings. Your task is to find the longest common suffix among the strings in the array. A suffix is a substring that occurs at the end of a string. Input The first line contains n (1 ≤ n ≤ 1000) — the number of strings in the array. The next n lines contain the n strings. Each string consists of lowercase English letters and has a length between 1 and 100 characters. Output Output the longest common suffix among the strings in the array. If there is no common suffix, output an empty string. Examples Input 3 flourishing perishing vanishing Output ishing Input 4 apple banana cucumber date Output","solution":"def longest_common_suffix(strings): if not strings: return \\"\\" # Find the minimum length string from the input, since the common suffix can\'t be longer min_length = min(len(s) for s in strings) # Initialize the common suffix as empty common_suffix = \\"\\" # Check suffixes in reverse order starting from the last character for i in range(1, min_length + 1): suffix_part = strings[0][-i] if all(s[-i] == suffix_part for s in strings): common_suffix = suffix_part + common_suffix else: break return common_suffix"},{"question":"Given a string s, determine whether it can form a valid palindrome by rearranging its letters. A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and case. For example, the string \\"A man, a plan, a canal: Panama\\" is a palindrome, as is the string \\"racecar\\". Input A single line containing the string s (1 ≤ |s| ≤ 2 ⋅ 10^5). The string consists of printable ASCII characters. Output Print \\"YES\\" if any permutation of the string can form a palindrome, otherwise print \\"NO\\". Examples Input \\"Tact Coa\\" Output YES Input \\"A man, a plan, a canal: Panama!\\" Output YES Input \\"hello\\" Output NO Note In the first example, the string can be rearranged to form \\"taco cat\\" or \\"atco cta\\", both of which are palindromes. In the second example, the string can be rearranged to form \\"a man a plan a canal panama\\", which is a palindrome. In the third example, there is no way to rearrange \\"hello\\" to form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the input string can form a palindrome. from collections import Counter s = \'\'.join(filter(str.isalnum, s.lower())) # Normalize the string count = Counter(s) odd_count = sum(1 for char_count in count.values() if char_count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a forest of rooted trees. Each tree\'s node has a unique positive integer value, and no two trees have overlapping nodes. You need to perform Q queries. There are 3 types of queries: 1. Find the lowest common ancestor (LCA) of two nodes with values X and Y. 2. Determine if node with value X is an ancestor of the node with value Y. 3. Cyclically shift the positions of the children at a specific node with value X by K units (left if K is negative or right if K is positive). The input is given as follows: - The first line contains an integer Q (1 ≤ Q ≤ 10^5) - the number of queries. - The second line contains an integer T (1 ≤ T ≤ 10^5) - the number of trees. - For each of the following T lines, there is a description of a tree in the below format: - The first integer is the value of the root node. - A space-separated list of edges follows, where each edge is represented by a pair of integers U V, indicating an edge from node U to node V. Each subsequent Q lines contains a query in one of the specific formats: * For type 1: \\"1 X Y\\" (1 ≤ X, Y ≤ 10^5) * For type 2: \\"2 X Y\\" (1 ≤ X, Y ≤ 10^5) * For type 3: \\"3 X K\\" (1 ≤ X ≤ 10^5, -10^5 ≤ K ≤ 10^5) Output For each query of type 1, output the value of the lowest common ancestor. For each query of type 2, output \\"Yes\\" if X is an ancestor of Y, otherwise output \\"No\\". Example Input 8 1 1 1 2 2 3 3 4 1 2 4 2 1 4 3 2 1 1 2 4 3 1 -1 1 3 4 2 3 4 Output 1 Yes 1 1 3 No Explanation - Initial tree: ``` 1 / 2 3 4 ``` - After query \\"3 2 1\\": ``` 1 / 2 4 3 ``` - After query \\"3 1 -1\\": ``` 1 / 4 2 3 ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(edges, root_val): nodes = {} for u, v in edges: if u not in nodes: nodes[u] = TreeNode(u) if v not in nodes: nodes[v] = TreeNode(v) nodes[u].children.append(nodes[v]) return nodes[root_val] def find_lca(root, x, y): if root is None or root.value == x or root.value == y: return root count = 0 temp = None for child in root.children: res = find_lca(child, x, y) if res: count += 1 if count == 1: temp = res if count == 2: return root return temp def is_ancestor(root, x, y): if root is None: return False if root.value == x: return search(root, y) for child in root.children: if is_ancestor(child, x, y): return True return False def search(root, val): if root is None: return False if root.value == val: return True for child in root.children: if search(child, val): return True return False def cyclic_shift(nodes, k): k = k % len(nodes) return nodes[-k:] + nodes[:-k] import sys input = sys.stdin.read def main(): data = input().strip().split() idx = 0 Q = int(data[idx]) idx += 1 T = int(data[idx]) idx += 1 roots = [] value_to_node = {} for _ in range(T): root_val = int(data[idx]) idx += 1 edges = [] while idx < len(data) and data[idx][0] != \'1\' and data[idx][0] != \'2\' and data[idx][0] != \'3\': u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 root = build_tree(edges, root_val) roots.append(root) value_to_node[root_val] = root results = [] for _ in range(Q): query_type = int(data[idx]) idx += 1 if query_type == 1: x = int(data[idx]) y = int(data[idx + 1]) idx += 2 lca_result = None for root in roots: lca_result = find_lca(root, x, y) if lca_result: results.append(str(lca_result.value)) break elif query_type == 2: x = int(data[idx]) y = int(data[idx + 1]) idx += 2 ancestor_result = None for root in roots: ancestor_result = is_ancestor(root, x, y) if ancestor_result: results.append(\\"Yes\\") break if not ancestor_result: results.append(\\"No\\") elif query_type == 3: x = int(data[idx]) k = int(data[idx + 1]) idx += 2 for root in roots: if root.value == x: root.children = cyclic_shift(root.children, k) break else: for child in root.children: if child.value == x: child.children = cyclic_shift(child.children, k) break print(\\"n\\".join(results)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array `nums`. You need to sort the array in such a way that the sum of the absolute differences between consecutive elements is minimized. In order to achieve this, you can swap any two elements in the array any number of times. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of elements in the array `nums`. - The second line contains n integers, the elements of the array `nums` (1 ≤ nums[i] ≤ 10^9). Output Print the array `nums` sorted in such a way that the sum of the absolute differences between consecutive elements is minimized. Examples Input 4 4 3 2 1 Output 1 2 3 4 Input 5 10 5 6 1 9 Output 1 5 6 9 10","solution":"def minimize_absolute_differences(nums): Returns the sorted array to minimize the sum of absolute differences between consecutive elements. nums.sort() return nums"},{"question":"Cybertown City Hall developed a new surveillance system to monitor parking lane violations in the city. The problem they are trying to tackle is identifying vehicles that park within prohibited zones. Each parking lane in Cybertown is represented as a 1D array of length n. A cell in the array is marked as 0 if parking is allowed and 1 if parking is prohibited. Your task is to design an algorithm that efficiently identifies the length and starting position of the longest sequence of allowable parking spaces (i.e., consecutive 0s). Write a program that takes the length of the parking lane and the parking information as input and outputs the starting index (0-based) of the longest sequence of allowable parking spaces and its length. If there are multiple sequences of the same maximum length, return the starting position of the first one. If all cells are prohibited (i.e., all 1s), return -1 and -1. Input The first line contains an integer n (1 ≤ n ≤ 100000), the length of the parking lane. The second line contains n integers, where each integer is either 0 or 1, representing the parking information. Output Print two integers separated by a space: the starting index of the longest sequence of allowable parking spaces and its length. If there are no allowable parking spaces, print -1 -1. Examples Input 10 1 0 0 1 0 0 0 1 0 0 Output 4 3 Input 5 1 1 1 1 1 Output -1 -1 Input 7 0 0 0 1 0 1 0 Output 0 3","solution":"def find_longest_parking_sequence(n, parking_info): max_length = 0 max_start_index = -1 current_length = 0 current_start_index = -1 for i in range(n): if parking_info[i] == 0: if current_length == 0: current_start_index = i current_length += 1 else: if current_length > max_length: max_length = current_length max_start_index = current_start_index current_length = 0 if current_length > max_length: max_length = current_length max_start_index = current_start_index if max_length == 0: return -1, -1 return max_start_index, max_length"},{"question":"Given a tree with `n` nodes, rooted at node 1, each node has a value assigned to it. Each non-root node has exactly one parent. You need to answer `q` queries. Each query consists of an integer x which represents a node in the tree. For each query, you need to provide the maximum value among all the descendants of node `x`, including itself. Input The first line contains an integer `n` (1 <= n <= 100000) — the number of nodes. The second line contains `n` integers — the value assigned to each node. The next `n-1` lines each contain two integers u and v, representing an edge between nodes u and v. The next line contains a single integer `q` (1 <= q <= 100000) — the number of queries. Each of the next `q` lines contains a single integer x representing a query node. Output For each query, output one integer — the maximum value among all descendants of node `x`, including itself. Examples Input 6 1 2 3 4 5 6 1 2 1 3 2 4 2 5 3 6 3 1 2 3 Output 6 5 6 Input 3 7 4 10 1 2 1 3 2 1 3 Output 10 10","solution":"def max_descendant_value(n, values, edges, queries): from collections import defaultdict, deque # Building the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the max value in the subtree rooted at each node max_subtree_value = {} def dfs(node, parent): current_max = values[node - 1] for neighbor in tree[node]: if neighbor != parent: current_max = max(current_max, dfs(neighbor, node)) max_subtree_value[node] = current_max return current_max # Start DFS from the root node root = 1 dfs(root, None) # Process queries result = [] for x in queries: result.append(max_subtree_value[x]) return result"},{"question":"You are given an array of integers. Your task is to rearrange the elements of the array in a way that the difference between any two adjacent elements is minimized. Output the sum of all such differences. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output Output a single integer — the sum of differences between adjacent elements in the rearranged array. Example Input 5 3 1 2 4 5 Output 4 Note For the given example, the array can be rearranged as [1, 2, 3, 4, 5]. The differences between adjacent elements are |2 - 1| + |3 - 2| + |4 - 3| + |5 - 4| = 1 + 1 + 1 + 1 = 4. So, the output is 4.","solution":"def min_adjacent_diff_sum(n, arr): Function to rearrange elements to minimize the sum of differences between adjacent elements. # Sort the array to minimize the differences arr.sort() # Calculate the sum of differences between adjacent elements total_diff = sum(abs(arr[i] - arr[i - 1]) for i in range(1, n)) return total_diff"},{"question":"Box Packing Alice has a collection of N items, each with a specific weight. She wants to pack these items into the minimum number of boxes such that the total weight of items in any box does not exceed M grams. Given the weights of the items and the maximum allowed weight per box, determine the minimum number of boxes required to pack all the items. input Input is given from standard input in the following format: N M w1 w2 w3 ... wN Each w_i (where 1 leq i leq N ) is the weight of the i -th item. output Please output the minimum number of boxes required to pack all the items. Insert a line break at the end. Constraint * 1 leq N leq 100000 * 1 leq M leq 10^9 * 1 leq w_i leq M * All inputs are integers. Input example 1 3 10 2 4 6 Output example 1 2 Input example 2 5 5 1 2 3 4 5 Output example 2 3 Example Input 3 10 2 4 6 Output 2","solution":"def min_boxes(N, M, weights): Determines the minimum number of boxes required to pack all items such that the total weight in any box does not exceed M grams. weights.sort(reverse=True) box_count = 0 while weights: box_weight = 0 i = 0 while i < len(weights): if box_weight + weights[i] <= M: box_weight += weights[i] weights.pop(i) else: i += 1 box_count += 1 return box_count"},{"question":"You are tasked with assisting in the development of a competitive recommendation system for a music streaming service. The task involves creating a program capable of determining the most relevant music playlist for a given user based on their historical listening data. The data available for this problem include multiple playlists, where each playlist contains multiple tracks. Additionally, you have information regarding user interactions with playlists – specifically, how often each user has played each track within each playlist. For simplicity, assume the following: - Each playlist has a unique identifier (an integer). - Each track has a unique identifier (an integer). - User interactions are represented by a frequency count indicating how many times a specific track was played by a specific user. # Input The input is processed in three distinct parts: 1. An integer `n` representing the number of playlists. 2. For each playlist, the following data is given: - An integer `p_id` denoting the playlist ID. - An integer `t` denoting the number of tracks in the playlist. - A list of `t` integers, each representing a track ID. 3. An integer `m` representing the number of user interactions. - For each user interaction: - An integer `user_id` denoting the user ID. - An integer `track_id` denoting the track ID. - An integer `count` denoting the number of times the user has played the track. # Output Your program should output the playlist ID that is most relevant to each user based on their interactions. The relevance of a playlist to a user is determined by the total play count of tracks within that playlist by the user. If there are multiple playlists with the same relevance, output the playlist with the smallest identifier. # Examples Input ``` 3 1 4 101 102 103 104 2 3 201 202 203 3 5 301 302 303 304 305 6 1 101 5 1 201 3 1 102 2 2 202 8 2 103 1 2 204 1 ``` Output ``` 1: 1 2: 2 ``` Explanation: - For user 1, the total play counts for playlists are: - Playlist 1: 5 (track 101) + 2 (track 102) = 7 - Playlist 2: 3 (track 201) = 3 - Playlist 3: 0 Thus, the most relevant playlist is playlist 1. - For user 2, the total play counts for playlists are: - Playlist 1: 1 (track 103) = 1 - Playlist 2: 8 (track 202) = 8 - Playlist 3: 0 Thus, the most relevant playlist is playlist 2.","solution":"def most_relevant_playlist(n, playlists_data, m, user_interactions): from collections import defaultdict playlists = {} for i in range(n): p_id, t, tracks = playlists_data[i] playlists[p_id] = set(tracks) user_track_playcount = defaultdict(lambda: defaultdict(int)) for user_id, track_id, count in user_interactions: user_track_playcount[user_id][track_id] += count user_most_relevant_playlist = {} for user_id, track_playcounts in user_track_playcount.items(): playlist_relevance = defaultdict(int) for track_id, playcount in track_playcounts.items(): for p_id, tracks in playlists.items(): if track_id in tracks: playlist_relevance[p_id] += playcount most_relevant = min( playlist_relevance.items(), key=lambda x: (-x[1], x[0])) user_most_relevant_playlist[user_id] = most_relevant[0] return user_most_relevant_playlist # Example usage # n = 3 # playlists_data = [ # (1, 4, [101, 102, 103, 104]), # (2, 3, [201, 202, 203]), # (3, 5, [301, 302, 303, 304, 305]) # ] # m = 6 # user_interactions = [ # (1, 101, 5), # (1, 201, 3), # (1, 102, 2), # (2, 202, 8), # (2, 103, 1), # (2, 204, 1) # ] # result = most_relevant_playlist(n, playlists_data, m, user_interactions) # print(result) # Expected {1: 1, 2: 2}"},{"question":"Emma is a budding chef and her dream is to open a restaurant that serves gourmet dishes. She has been experimenting with different recipes and cooking techniques. To improve her skills, she decided to take up a new challenge: creating a custom recipe book. Each recipe is classified into the following six categories: - Appetizer - Salad - Main Course - Dessert - Beverage - Soup Emma wants her recipe book to be organized in a specific way. She plans to include three different types of menus: 1. Simple Menu: Consists of 1 Appetizer, 1 Main Course, and 1 Dessert. 2. Healthy Menu: Consists of 1 Salad, 1 Beverage, and 1 Soup. 3. Deluxe Menu: Consists of 1 Appetizer, 1 Main Course, 1 Dessert, 1 Salad, and 1 Beverage. Each recipe can only appear in one menu, and Emma would like to know how many of each type of menu she can create given a certain number of recipes in each category. Input The input consists of multiple cases. Each case is given in the following format: a s m d b u Where: - a is the number of Appetizer recipes. - s is the number of Salad recipes. - m is the number of Main Course recipes. - d is the number of Dessert recipes. - b is the number of Beverage recipes. - u is the number of Soup recipes. The end of input is indicated by a line consisting of: 0 0 0 0 0 0 Each value satisfies the condition: a + s + m + d + b + u ≤ 10,000,000 The number of test cases does not exceed 10,000. Output For each test case, output three integers on a single line, representing the maximum number of Simple Menu, Healthy Menu, and Deluxe Menu that Emma can create. Example Input 2 2 2 2 2 2 1 1 1 1 1 1 4 0 4 4 0 0 2 1 1 2 1 1 0 0 0 0 0 0 Output 2 2 0 1 1 1 4 0 0 1 1 0","solution":"def calculate_menus(a, s, m, d, b, u): Calculate the maximum number of Simple Menus, Healthy Menus, and Deluxe Menus that can be created with the given number of recipes in each category. Args: a (int): Number of Appetizer recipes. s (int): Number of Salad recipes. m (int): Number of Main Course recipes. d (int): Number of Dessert recipes. b (int): Number of Beverage recipes. u (int): Number of Soup recipes. Returns: tuple: A tuple containing three integers - the number of Simple Menus, Healthy Menus, and Deluxe Menus that can be created. # Calculate the number of each type of menu that can be created without overlapping recipes. simple_menu_count = min(a, m, d) remaining_a = a - simple_menu_count remaining_m = m - simple_menu_count remaining_d = d - simple_menu_count healthy_menu_count = min(s, b, u) remaining_s = s - healthy_menu_count remaining_b = b - healthy_menu_count remaining_u = u - healthy_menu_count deluxe_menu_count = min(remaining_a, remaining_m, remaining_d, remaining_s, remaining_b) return simple_menu_count, healthy_menu_count, deluxe_menu_count def process_input(input_list): results = [] for line in input_list: if line == \\"0 0 0 0 0 0\\": break a, s, m, d, b, u = map(int, line.split()) result = calculate_menus(a, s, m, d, b, u) results.append(result) return results"},{"question":"A company wants to organize a series of workshops. Each workshop teaches certain skills, and employees can attend the workshops in any order. Your task is to determine if it is possible to attend all workshops and ensure that for each required skill, there is a workshop that teaches it. Each workshop may provide one or more skills, and you can attend multiple workshops. However, only the minimum number of workshops should be attended to cover all the required skills. Input The first line of the input contains two integers n (1 ≤ n ≤ 50) and k (1 ≤ k ≤ 50) — the number of workshops and the number of different skills required, respectively. The next n lines describe the workshops. Each of these lines starts with an integer m (1 ≤ m ≤ k), followed by m integers representing the skills provided by that workshop. The skills are numbered from 1 to k. Output Print a single integer — the minimum number of workshops required to cover all required skills. If it is not possible to cover all skills, print -1. Example Input 3 5 2 1 2 2 2 3 3 3 4 5 Output 2 Input 2 4 2 1 2 1 3 Output -1","solution":"def min_workshops(n, k, workshops): Returns the minimum number of workshops required to cover all required skills. If it is not possible to cover all skills, returns -1. from itertools import combinations required_skills = set(range(1, k + 1)) for i in range(1, n + 1): for subset in combinations(workshops, i): combined_skills = set() for workshop in subset: combined_skills.update(workshop) if combined_skills == required_skills: return i return -1 # Example usage: n = 3 k = 5 workshops = [ [1, 2], [2, 3], [3, 4, 5] ] print(min_workshops(n, k, workshops)) # Output should be 2"},{"question":"You are tasked with developing a simple text editor. One of the features required is an undo operation. To do this, the editor maintains a stack that stores changes made to the document. Each change to the document can be of two types: 1. Insert a character at a specific position. 2. Remove a character from a specific position. After a certain number of operations, you should be able to undo the most recent operation. Implement a function to handle this text editor\'s operation and undo functionality. You will be given a sequence of operations on the document. Each operation is represented by a tuple: - The first element is a string \\"insert\\" or \\"remove\\". - If the operation is \\"insert\\", the second and third elements are the character to be inserted and the position of insertion respectively. - If the operation is \\"remove\\", the second element is the position of the character to be removed. When an \\"undo\\" command is given, you should undo the most recent operation. The function should return the final state of the document as a string. Input The input consists of several lines: 1. An integer n, the number of operations (0 ≤ n ≤ 100). 2. The next n lines, each containing one of the following operations: - \\"insert c pos\\", which means insert character \'c\' at position \'pos\'. - \\"remove pos\\", which means remove the character at position \'pos\'. - \\"undo\\", which means undo the most recent operation. Output Return the final state of the document as a string. Example Input 5 insert a 0 insert b 1 insert c 2 remove 1 undo Output ac Input 3 insert x 0 insert y 1 undo Output x Note - If there is no operation to undo and an \\"undo\\" command is received, ignore the \\"undo\\" command. - Assume all positions are valid, i.e., within the current length of the document for \\"remove\\" operations or within the bounds of the document for \\"insert\\" operations. Write a function `edit_document(n, operations)` that takes the number of operations and the list of operations, and returns the final state of the document. ```python def edit_document(n, operations): # Implement your function here. pass ```","solution":"def edit_document(n, operations): document = [] stack = [] for operation in operations: op = operation.split() if op[0] == \\"insert\\": char = op[1] pos = int(op[2]) document.insert(pos, char) stack.append((\\"insert\\", char, pos)) elif op[0] == \\"remove\\": pos = int(op[1]) char = document.pop(pos) stack.append((\\"remove\\", char, pos)) elif op[0] == \\"undo\\": if stack: last_op = stack.pop() if last_op[0] == \\"insert\\": document.pop(last_op[2]) elif last_op[0] == \\"remove\\": document.insert(last_op[2], last_op[1]) return \'\'.join(document)"},{"question":"Alice has a unique way of compressing strings, which she calls \\"flattening.\\" The flattening process involves repeatedly taking sequences of identical characters and reducing them to just one character. For example, the string `\\"aaabbbbbccdd\\"` would become `\\"abcd\\"` after flattening. Given an input string, determine the \\"flattened\\" version of the string. Input: The input consists of one line containing a single string s. The string contains only lowercase English letters and has a length between 1 and 100. Output: Output the \\"flattened\\" version of the string. Examples Input ``` aaabbbbbccdd ``` Output ``` abcd ``` Input ``` aabbcc ``` Output ``` abc ``` Input ``` abcabcabc ``` Output ``` abcabcabc ``` Note: In the first example, the original string `\\"aaabbbbbccdd\\"` is flattened by replacing consecutive groups of \'a\', \'b\', \'c\', and \'d\' with their single occurrences. In the second example, `\\"aabbcc\\"` is flattened to `\\"abc\\"` by reducing the double appearances of \'a\', \'b\', and \'c\'. In the third example, no consecutive characters are present, so the original string remains unchanged.","solution":"def flatten_string(s): Returns the flattened version of the input string by reducing consecutive identical characters to one character. if not s: return \\"\\" flattened = [s[0]] for char in s[1:]: if char != flattened[-1]: flattened.append(char) return \'\'.join(flattened)"},{"question":"You are given a binary tree with `N` nodes where each node has a unique value from `1` to `N`. The tree is represented in a 2D list `edges` of size `(N-1) x 2` where each `edges[i] = [u, v]` represents an undirected edge connecting nodes `u` and `v`. Perform `Q` queries of the following types: * `1 x`: Find the number of nodes in the subtree rooted at node `x`. * `2 x`: Calculate the sum of all node values in the subtree rooted at node `x`. Constraints: * 1 ≤ N, Q ≤ 200000 * 1 ≤ x ≤ N * All values in Input are integers. Input Input is given from Standard Input in the following format: ``` N Q edges[0][0] edges[0][1] edges[1][0] edges[1][1] ... edges[N-2][0] edges[N-2][1] query_1 query_2 : query_Q ``` Each query is of the format `1 x` or `2 x` as described above. Output For each query of both types, print the answer on a new line. Example Input ``` 5 4 1 2 1 3 2 4 2 5 1 1 1 2 2 1 2 2 ``` Output ``` 5 3 15 11 ```","solution":"from collections import defaultdict def compute_subtree_properties(N, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_size = [0] * (N + 1) subtree_sum = [0] * (N + 1) def dfs(node, parent): subtree_size[node] = 1 subtree_sum[node] = node for neighbor in tree[node]: if neighbor == parent: continue dfs(neighbor, node) subtree_size[node] += subtree_size[neighbor] subtree_sum[node] += subtree_sum[neighbor] dfs(1, -1) return subtree_size, subtree_sum def answer_queries(N, Q, edges, queries): subtree_size, subtree_sum = compute_subtree_properties(N, edges) results = [] for query in queries: t, x = query if t == 1: results.append(subtree_size[x]) elif t == 2: results.append(subtree_sum[x]) return results"},{"question":"In a programming classroom, a teacher plans to divide the students into groups for a group project. The teacher wants to maximize the number of groups such that each group will have exactly g students. The constraint is that no student can be left without a group. Input The input consists of two integers, n and g, separated by space: 1 ≤ n ≤ 10^4 — the number of students, and 1 ≤ g ≤ 10^4 — the number of students each group should have. Output The output is a single integer — the maximum number of groups that can be formed such that each group has exactly g students. Examples Input 8 3 Output 2 Input 15 5 Output 3 Input 10 6 Output 1","solution":"def max_groups(n, g): Returns the maximum number of groups with exactly g students in each group. Parameters: n (int): The total number of students. g (int): The number of students in each group. Returns: int: The maximum number of groups. return n // g"},{"question":"The Kingdom of Algravia is constructing a series of watchtowers to monitor its borders. The kingdom is represented as an undirected graph with `n` cities and `m` roads. Each road connects two distinct cities and has a known length. The goal is to determine the minimum number of watchtowers needed to ensure that every road is monitored. A watchtower placed in a city watches over all roads connected to that city. You are tasked with finding the optimal number of watchtowers required to monitor all roads in Algravia. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of roads, respectively. The next `m` lines each contain three integers `u`, `v`, and `l` (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000) describing a road between cities `u` and `v` with length `l`. Output Print a single integer — the minimum number of watchtowers needed. Examples Input 4 4 1 2 5 2 3 4 3 4 3 4 1 6 Output 2 Input 5 0 Output 0 Note In the first example, placing watchtowers in cities 1 and 3 will suffice as both cover all the roads directly connected to each city. In the second example, there are no roads to monitor, so no watchtowers are needed.","solution":"def number_of_watchtowers(n, m, roads): Determines the minimum number of watchtowers needed to monitor all roads. Parameters: - n (int): Number of cities - m (int): Number of roads - roads (list of tuples): List of roads, each represented as a tuple (u, v, l) where * u (int): One endpoint of the road * v (int): The other endpoint of the road * l (int): Length of the road (not used in this solution) Returns: - int: Minimum number of watchtowers needed if m == 0: # no roads, no watchtowers needed return 0 # We\'ll use a set to track unique cities connected by roads cities = set() for (u, v, l) in roads: cities.add(u) cities.add(v) # The minimum number of watchtowers needed is equal to the number # of unique cities that have roads connecting them return len(cities)"},{"question":"A manufacturing company uses a conveyor belt to move products from one station to another. Each product starts at a raw state and goes through a series of stages until it gets to the finish line where it becomes a final product. The conveyor belt is modeled as a linked list where each node represents a station, and each station has the processing time required to move the product to the next station. A machine at each station processes one product at a time. Given the head of a linked list representing the conveyor belt, write a function to determine the total time required for a product to go from the raw state at the head of the conveyor belt to the final product at the last node. Input The function will receive the head of the linked list, where: - `head.val` is an integer representing the processing time at the current station. - `head.next` is a reference to the next node in the linked list, or `null` if it is the last node. Output Return an integer representing the total processing time from the head of the conveyor to the last node. Example Input ```python # Creating a linked list: 3 -> 5 -> 2 -> 1 class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next head = ListNode(3) head.next = ListNode(5) head.next.next = ListNode(2) head.next.next.next = ListNode(1) ``` Function signature: ```python def totalProcessingTime(head: ListNode) -> int: # Your code here ``` Output ```python 11 ``` Explanation The total processing time is 3 + 5 + 2 + 1 = 11. The product takes 11 units of time to go from the head to the last station.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def totalProcessingTime(head: ListNode) -> int: total_time = 0 current = head while current is not None: total_time += current.val current = current.next return total_time"},{"question":"You have been given the task of designing a routing system for a new futuristic city. The city is organized in a grid-like structure consisting of n x m blocks. Some of these blocks contain obstacle buildings, making it impossible to pass through them. You are required to determine the minimum number of blocks needed to be traversed in order to travel from the starting block located at the top-left corner of the grid to the destination block located at the bottom-right corner. Movement can be made to any of the four adjacent blocks (left, right, up, down), but diagonal moves are not permitted. Write a function to find the shortest path. If there is no path from the starting block to the destination block, return -1. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The next n lines contain m characters each, representing the city grid. Each character is either \'.\' (an empty block) or \'#\' (an obstacle block). Output - If there is a path to the destination block, print a single integer k — the minimum number of blocks needed to be traversed to reach the destination. - If there is no path, print a single integer -1. Examples Input 5 5 ..... .#. ..... .#. ..... Output 8 Input 3 4 .... .... Output -1","solution":"from collections import deque def shortest_path(n, m, grid): # Directions for moving left, right, up, down directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Function to check if a position is within the grid and not an obstacle def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS queue initialization queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we have reached the destination if (x, y) == (n - 1, m - 1): return dist # Explore neighbours for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # No path found return -1"},{"question":"Lana loves experimenting with numbers and sequences in her free time. She is particularly fascinated by bit sequences and manipulation. Recently, she encountered a challenge where she has to determine the maximum possible value of an integer after toggling some bits in its binary representation. Given an integer n and a maximum number of bit toggles k, help Lana find the maximum value she can obtain by toggling at most k bits from the binary representation of n. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 10^9), the integer whose bits can be toggled. - The second line contains a single integer k (1 ≤ k ≤ 30), the maximum number of bit toggles allowed. **Output:** - Output a single integer, the maximum possible value of n after toggling at most k bits. **Examples:** **Input:** ``` 10 1 ``` **Output:** ``` 14 ``` **Input:** ``` 23 3 ``` **Output:** ``` 31 ``` **Explanation:** In the first example, the binary representation of 10 is `1010`. Toggling the second bit makes it `1110`, which is 14 in decimal. In the second example, the binary representation of 23 is `10111`. By toggling the third and fifth bits (starting from least significant bit), we can get `11111`, which is 31 in decimal.","solution":"def max_value_by_toggling_bits(n, k): Returns the maximum possible value of an integer n by toggling at most k bits in its binary representation. # Convert n to its binary representation bin_n = bin(n)[2:] # Calculate the length of the binary representation length = len(bin_n) # Create a list to store the bits we will toggle toggles = [] # Loop through each bit in the binary representation for i in range(length): if bin_n[i] == \'0\': toggles.append(i) # If the number of \'0\' bits is less than or equal to k, toggle all of them if len(toggles) <= k: k = len(toggles) # Convert the binary representation to a list of characters for easy manipulation bin_list = list(bin_n) # Toggle \'0\' bits to \'1\' starting from the leftmost \'0\' bit for i in range(k): bin_list[toggles[i]] = \'1\' # Convert the modified list back to a string toggled_bin_n = \'\'.join(bin_list) # Convert the binary string back to an integer max_value = int(toggled_bin_n, 2) return max_value"},{"question":"Given two arrays, `A` and `B`, both of length N, your task is to calculate the \\"dot product\\" of these two arrays. The dot product of two arrays is defined as the sum of the products of corresponding elements. Formally, if `A` and `B` are arrays of length N, the dot product is calculated as: dot_product(A, B) = A_1 * B_1 + A_2 * B_2 + ... + A_N * B_N Constraints: - 1 leq N leq 100 - -1000 leq A_i, B_i leq 1000 - All values in input are integers. Input Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N B_1 B_2 ... B_N ``` Output Print the dot product of the two arrays. Examples Input ``` 3 1 2 3 4 5 6 ``` Output ``` 32 ``` Input ``` 4 -1 2 -3 4 1 1 1 1 ``` Output ``` 2 ```","solution":"def dot_product(N, A, B): Calculate the dot product of two arrays. :param N: Length of the arrays :param A: First array of integers :param B: Second array of integers :return: Dot product of the two arrays return sum(A[i] * B[i] for i in range(N)) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) B = list(map(int, data[N+1:2*N+1])) result = dot_product(N, A, B) print(result)"},{"question":"You are given a string representing an arithmetic expression which can contain positive integers, parentheses `()`, and the binary operators `+`, `-`, `*`, and `/`. The operators have their usual precedence: parentheses have the highest precedence, followed by `*` and `/`, and then `+` and `-`. Operators with the same precedence are evaluated from left to right. Write a function that evaluates the expression and returns its value as an integer. You can assume that the expression is valid, does not contain any whitespace, and the intermediate results will always fit in a 32-bit signed integer. Note: Standard division should truncate towards zero. # Input Format - A single line containing the string expression. The string expression has length between 1 and 10000 and consists of digits, operators and parentheses. # Output Format - A single integer which is the result of evaluating the expression. # Example Input ``` 2*(3+5)/2 ``` Output ``` 8 ``` Input ``` 10+(2*3-4)/2 ``` Output ``` 11 ``` # Constraints - The length of the expression will be between 1 and 10000. - Each intermediate calculation in the expression will fit within the range of a 32-bit signed integer.","solution":"def evaluate_expression(expression): import re def tokenize(expr): tokens = re.findall(r\'d+|+|-|*|/|(|)\', expr) return [token if token in \'+-*/()\' else int(token) for token in tokens] def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # Truncate towards zero def precedence(operator): if operator in \'+-\': return 1 if operator in \'*/\': return 2 return 0 tokens = tokenize(expression) values = [] operators = [] i = 0 while i < len(tokens): token = tokens[i] if isinstance(token, int): values.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # Remove the \'(\' else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are given a string consisting of characters \'A\' and \'B\'. Your task is to transform this string into a string that does not contain the substring \\"AB\\". In one operation, you can replace any character in the string with \'A\' or \'B\'. Write a program that finds the minimum number of operations needed to achieve the transformation. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100 000), where |s| is the length of the string. Output Print a single integer representing the minimum number of operations required to transform the string so that it does not contain the substring \\"AB\\". Examples Input: AABB Output: 1 Input: ABAB Output: 2","solution":"def min_operations_to_remove_ab(s): Given a string consisting of characters \'A\' and \'B\', this function returns the minimum number of operations needed to transform the string so that it does not contain the substring \\"AB\\". count_operations = 0 i = 0 length = len(s) while i < length - 1: if s[i] == \'A\' and s[i + 1] == \'B\': count_operations += 1 i += 2 # Skip the next character since we just fixed a problematic \\"AB\\" pair else: i += 1 return count_operations"},{"question":"You\'ve been hired by a company that literally runs on caffeine. The office has a vending machine that serves two types of coffee: Type-A and Type-B. Each employee has a different preference for the types of coffee they like and the amount they consume daily. Being a responsible manager, you aim to ensure that the coffee supply is optimized. To do this, you decide to record each employee\'s coffee consumption and find out the most frequently consumed type and the maximum daily consumption of that type by any employee. You have the consumption data for n employees. For each employee, you have the number of Type-A and Type-B coffee cups consumed daily. Your task is to determine: 1. The coffee type that is preferred by the majority of employees. 2. The maximum number of cups of the preferred type consumed by any single employee. If the number of employees who prefer Type-A is the same as those who prefer Type-B, consider Type-A as the preferred type. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. Each of the next n lines contains two integers ai and bi (0 ≤ ai, bi ≤ 1000) — the daily consumption of Type-A and Type-B coffee by the i-th employee. Output Print two space-separated values: the preferred type (either \\"Type-A\\" or \\"Type-B\\") and the maximum consumption of that type by any employee. Examples Input 3 3 2 1 4 2 2 Output Type-A 3 Input 4 1 0 0 1 2 3 3 2 Output Type-B 3 Note In the first example, two employees prefer Type-A coffee, and one prefers Type-B coffee. The maximum number of Type-A cups consumed by any employee is 3. In the second example, two employees prefer Type-A and two prefer Type-B. Since the number is the same, we consider Type-A as the preferred type. The maximum number of Type-A cups consumed by any employee is 3, even though the maximum of Type-B is also 3.","solution":"def preferred_coffee(n, consumption_data): type_a_pref_count = 0 type_b_pref_count = 0 max_a_consumption = 0 max_b_consumption = 0 for a, b in consumption_data: if a >= b: type_a_pref_count += 1 if a > max_a_consumption: max_a_consumption = a else: type_b_pref_count += 1 if b > max_b_consumption: max_b_consumption = b if type_a_pref_count >= type_b_pref_count: preferred_type = \\"Type-A\\" max_consumption = max_a_consumption else: preferred_type = \\"Type-B\\" max_consumption = max_b_consumption return preferred_type, max_consumption # Function to take input and return the output in expected format def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) consumption_data = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] preferred_type, max_consumption = preferred_coffee(n, consumption_data) print(preferred_type, max_consumption)"},{"question":"Joey has a piece of paper with a string s consisting of lowercase English letters. He wants to make the string a palindrome. A palindrome is a word that reads the same backward as forwards. To achieve this, he can erase any number of characters from the string. Your task is to help Joey determine the minimum number of characters he needs to erase to make the string a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of string s. The next line contains the string s of length n consisting only of lowercase English letters. Output In a single line print a single integer — the minimum number of characters Joey needs to erase to make the string a palindrome. Examples Input 7 abcaacc Output 3 Input 5 radar Output 0 Input 6 abcdef Output 5 Note In the first example, Joey can remove the characters \'a\', \'b\', and \'c\' to form the palindrome \'aca\'. In the second example, the string is already a palindrome, so no characters need to be erased. In the third example, Joey can remove \'a\', \'b\', \'c\', \'e\', and \'f\' to form the palindrome \'d\'.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) # The result is the minimum deletions needed for the whole string return dp[0][n - 1]"},{"question":"You are given an array A of N integers. You need to perform Q operations on the array. In each operation, you will be given two integers L and R, and you need to find the sum of the subarray A[L] + A[L+1] + ... + A[R]. Constraints * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq A_i leq 10^6 * 1 leq L leq R leq N Input The first line contains the integer N. The second line contains N integers representing the array A. The third line contains the integer Q. Each of the next Q lines contains two integers L and R. Output For each operation, print the sum of the subarray from index L to R (inclusive). Examples Input 5 1 2 3 4 5 3 1 3 2 5 1 5 Output 6 14 15 Input 6 3 1 4 1 5 9 2 1 4 3 6 Output 9 19","solution":"def subarray_sums(n, arr, queries): Given an array and a list of queries, each with two integers L and R, this function returns an array consisting of the sum of the subarrays for each (L, R) query. Arguments: n -- the length of the array arr -- a list of integers representing the array queries -- a list of tuples where each tuple has two integers (L, R) Returns: results -- a list of integers where each integer is the sum of the subarray for the corresponding (L, R) query prefix_sum = [0] * (n + 1) # Calculate prefix sums for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] results = [] # Process each query for L, R in queries: sum_subarray = prefix_sum[R] - prefix_sum[L - 1] results.append(sum_subarray) return results"},{"question":"Alice is practicing for a coding competition, and she has a set of n problems arranged in a queue. Each problem is denoted by its difficulty level. Alice wants to solve as many problems as she can, but she has the following constraints: 1. Alice can only solve problems consecutively from the start of the queue. 2. Alice cannot solve a problem if its difficulty is greater than her capability level c. Given the number of problems n, Alice\'s capability level c, and an array of integers representing the difficulties of the problems, find out the maximum number of problems Alice can solve. Input The first line of input contains two integers n and c (1 ≤ n, c ≤ 100) — the number of problems and Alice\'s capability level. The second line of input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 100), where d_i is the difficulty of the i-th problem. Output Print one integer — the maximum number of problems Alice can solve consecutively starting from the beginning of the queue. Examples Input 6 3 1 2 3 4 2 3 Output 3 Input 5 5 5 5 5 5 5 Output 5 Input 3 1 2 1 1 Output 0 Note In the first example, Alice can solve problems with difficulties [1, 2, 3] consecutively, but she can\'t solve the problem with difficulty 4, hence the maximum number of problems she can solve is 3. In the second example, Alice\'s capability is 5, and all problems have difficulty 5, so she can solve all 5 problems consecutively. In the third example, the first problem has difficulty 2 which is greater than Alice\'s capability, so she cannot solve any problem.","solution":"def max_solved_problems(n, c, difficulties): Returns the maximum number of problems Alice can solve consecutively from the start of the queue without exceeding her capability level. count = 0 for difficulty in difficulties: if difficulty <= c: count += 1 else: break return count"},{"question":"Given the multiple existing questions, I have added one additional question following the original set\'s style, complexity, and scope. --- # Problem Statement **Alien Language Dictionary** There is a new alien language discovered on a far-off planet. The dictionary of this language is quite unique: this language uses only lowercase English letters, but the alphabetical order of the letters is unknown. You are provided with a sorted dictionary of words based on this alien language\'s alphabetical order. Your task is to determine and output the alphabetical order of characters in this alien language. Input - The first line contains an integer `N` (2 ≤ N ≤ 100), the number of words in the dictionary. - The next `N` lines contain one string each representing the words in the alien language. **Constraints:** - Each word consists only of lowercase English letters. - The length of each word does not exceed 100. - It is guaranteed that the input dictionary is sorted according to the rules of the alien language. Output - Return a single string representing the characters of the alien language in the correct order from smallest to largest. If there are multiple valid orders, return any one of them. Example **Input:** ``` 5 wrt wrf er ett rftt ``` **Output:** ``` wertf ``` # Explanation: From the given dictionary, we can observe the following orderings: - `\'w\'` comes before `\'e\'`, because `wrt` (word 1) comes before `er` (word 3). - `\'e\'` comes before `\'r\'`, because `er` (word 3) comes before `ett` (word 4). - `\'t\'` comes before `\'f\'`, because `wrf` (word 2) comes before `rftt` (word 5). From these observations: - `\'w\'` < `\'e\'` < `\'r\'` < `\'t\'` < `\'f\'` # Special Note: - If the order cannot be deduced, a valid order based on partial ordering should be provided. For example, either `wertf` or `wert` would be valid in strict conditions. ---","solution":"from collections import defaultdict, deque def alien_order(words): # Create a graph and a degree dictionary graph = defaultdict(set) # To store the adjacency list representation of the graph in_degree = {char: 0 for word in words for char in word} # In-degree of each node/character # Build the graph for i in range(len(words) - 1): first_word = words[i] second_word = words[i+1] min_len = min(len(first_word), len(second_word)) # Find the first different character and create the edges for j in range(min_len): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) in_degree[second_word[j]] += 1 break else: if len(first_word) > len(second_word): return \\"\\" # Topological Sort (Kahn\'s algorithm) queue = deque([char for char in in_degree if in_degree[char] == 0]) ordered_chars = [] while queue: current_char = queue.popleft() ordered_chars.append(current_char) for neighbor in graph[current_char]: in_degree[neighbor] -= 1 # Remove edge if in_degree[neighbor] == 0: queue.append(neighbor) # If we have ordered all characters, return the order if len(ordered_chars) == len(in_degree): return \'\'.join(ordered_chars) else: return \\"\\""},{"question":"In a forest, there are several trees positioned along a straight path. The trees are represented by a list of integers, where each integer indicates the height of a tree. A lumberjack aims to cut down some trees to clear the path while maximizing the sum of the heights of the remaining trees. However, the lumberjack has a constraint: he cannot cut down two consecutive trees. Write a program to determine the maximum possible sum of heights of the remaining trees after the lumberjack cuts down some trees according to the given constraint. Input - The input contains a single line with n space-separated integers representing the heights of the trees (1 ≤ n ≤ 1000; 1 ≤ height ≤ 1000). Output - Print a single integer, the maximum possible sum of the heights of the remaining trees. Example Input 3 2 5 10 7 Output 15 Input 4 1 1 9 Output 13","solution":"def max_sum_trees(heights): Calculate the maximum sum of heights of the remaining trees. The sum is maximized while ensuring that no two consecutive trees are kept. n = len(heights) if n == 0: return 0 elif n == 1: return heights[0] # Initialize the maximum sums for the first two elements dp = [0] * n dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) # Fill the dp array for the rest of the elements for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + heights[i]) return dp[n-1] # Example usage heights_input = [3, 2, 5, 10, 7] print(max_sum_trees(heights_input)) # Output: 15"},{"question":"A research team has developed a new encryption algorithm based on string manipulation. However, they need to ensure the robustness of this new algorithm by testing various string operations. To help them, your task is to write a program that checks whether a given string can be transformed into a target string using a specific set of operations. You are given two strings, `source` and `target`. The operations you can perform are: 1. Remove a character from `source`. 2. Insert a character into `source`. Determine the minimum number of operations required to transform `source` into `target`. Input The first line contains a single integer `t` (1 ≤ t ≤ 100) - the number of test cases. Each of the next `t` pairs of lines contain: - A string `source` (1 ≤ |source| ≤ 1000) - A string `target` (1 ≤ |target| ≤ 1000) Output For each test case, print the minimum number of operations required on separate lines. Example Input 2 abcdef azced sunday saturday Output 3 3 Note For the first test case, the minimum operations are: 1. Remove \'b\' from \\"abcdef\\" -> \\"acdef\\" 2. Replace \'d\' with \'z\' -> \\"azdef\\" 3. Remove \'d\' from \\"azdef\\" -> \\"azde\\" For the second test case, the minimum operations are: 1. Insert \'a\' -> \\"saturnday\\" 2. Insert \'t\' -> \\"saturday\\" 3. Insert \'u\' -> \\"saturday\\"","solution":"def min_operations(source, target): # Create a table to store results of sub-problems m, n = len(source), len(target) dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore last character and recur for remaining string elif source[i-1] == target[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_test_cases(t, cases): results = [] for i in range(t): source, target = cases[i] results.append(min_operations(source, target)) return results"},{"question":"Alice has recently started working with circular databases, which are arrays that wrap around using a circular buffer. Given a list of integers that represents transactions over a period, Alice needs to find the maximum possible sum of any contiguous subarray of size k, but due to the circular nature of the database, the subarray can wrap around the edges. For example, given an array [4, -1, 2, 1, 6] and k=3, the subarray could be [6, 4, -1] which wraps around to elements before index 0. Your task is to write a program that computes the maximum possible sum of a contiguous subarray of size k. Input The first line of the input contains two integers: n (1 ≤ n ≤ 10^5) — the number of elements in the array, and k (1 ≤ k ≤ n) — the size of the subarray to be considered. The second line contains n integers ai (-10^4 ≤ ai ≤ 10^4) representing the elements of the array. Output Print the maximum possible sum of any contiguous subarray of size k. Examples Input 5 3 4 -1 2 1 6 Output 11 Input 7 4 -2 5 -1 7 -3 2 4 Output 10 Input 10 2 1 2 3 4 5 -1 -2 -3 -4 -5 Output 9 Note In the first example, the maximum possible sum of a contiguous subarray of size 3 is achieved by the subarray [4, -1, 2] and the wrap-around subarray [6, 4, -1]. The sum of [6, 4, -1] is 11. In the second example, the maximum possible sum is achieved by the subarray [5, -1, 7, -3] and the wrap-around subarray [7, -3, 2, 4]. The sum of [7, -3, 2, 4] is 10. In the third example, the maximum possible sum of a contiguous subarray of size 2 is achieved by the subarray [4, 5]. The sum is 9.","solution":"def max_circular_subarray_sum(nums, n, k): Computes the maximum possible sum of any contiguous subarray of length k, considering that the array wraps around circularly. if n < k: return 0 # Calculate sum of the first k elements current_sum = sum(nums[:k]) max_sum = current_sum # Create an extended array to handle circular nature extended_nums = nums + nums # Use a sliding window to calculate sum of subarrays of size k for i in range(1, n): current_sum += extended_nums[i + k - 1] - extended_nums[i - 1] max_sum = max(max_sum, current_sum) return max_sum # Example usage: # n = 5, k = 3 # nums = [4, -1, 2, 1, 6] # print(max_circular_subarray_sum(nums, n, k)) # Output should be 11"},{"question":"Write a function to determine whether a given string is a valid palindrome considering only alphanumerical characters and ignoring cases. Constraints * The string\'s length can be up to 10,000 characters. Input A string s containing printable ASCII characters. Output Print \\"True\\" if the string is a valid palindrome; otherwise, print \\"False\\". Examples Input \\"A man, a plan, a canal: Panama\\" Output True Input \\"race a car\\" Output False","solution":"def is_palindrome(s): Determines if the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. :param s: Input string containing printable ASCII characters :return: True if the string is a valid palindrome, False otherwise # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the filtered string with its reversed version return filtered_chars == filtered_chars[::-1]"},{"question":"Alice and Bob are playing a game with strings. They have two strings s and t, both of length n. Alice can perform the following operation any number of times (possibly zero): - Choose any two distinct indices i and j (1≤ i, j ≤ n and i ≠ j), and swap the characters s[i] and s[j]. The goal of the game is to determine whether it\'s possible for Alice to transform string s into string t using the operation described above. Input The first line contains a single integer q (1 ≤ q ≤ 100) — the number of test cases. Each of the next 3q lines contains descriptions of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the length of the strings s and t. The next two lines contain the strings s and t, each consisting of lowercase English letters. Output For each test case, output \\"YES\\" if Alice can transform string s into string t, and \\"NO\\" otherwise. Example Input 4 4 abcd cdab 3 abc bca 5 abcde edcba 3 aaa aaa Output YES YES YES YES Note In the first test case, swapping characters \'a\' and \'c\', then swapping \'b\' and \'d\' will result in \'cdab\' which matches t. In the second test case, swapping \'a\' and \'b\', then \'a\' and \'c\' will result in \'bca\' which matches t. In the third test case, we can swap \'a\' and \'e\', \'b\' and \'d\', resulting in \'edcba\' which matches t. In the fourth test case, both strings are already equal, so no swaps are needed.","solution":"def can_transform_string(q, test_cases): results = [] for i in range(q): n = test_cases[i * 3] s = test_cases[i * 3 + 1] t = test_cases[i * 3 + 2] if sorted(s) == sorted(t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with writing a function that simulates the behavior of a simple text editor. The text editor supports two basic operations: appending characters to the string and undoing the last operation. Initially, the text editor contains an empty string. You will be given a series of operations to perform, and you need to simulate the result of these operations. The operations are given in the following format: - \\"APPEND x\\": Append the character \'x\' (where \'x\' is a lowercase English letter) to the string. - \\"UNDO\\": Undo the last operation that modified the string. Consider the following constraints: - The \\"UNDO\\" operation will never be executed if there are no previous operations to undo. - The sequence of operations will contain at most 10^5 operations. - The final length of the string will not exceed 10^6 characters. Your task is to write a function that processes these operations and returns the final state of the string. Input - The first line contains an integer n, the number of operations. - The next n lines contain one of the operations described above. Output Output the final state of the string after performing all the operations. Examples Input 6 APPEND a APPEND b APPEND c UNDO APPEND d APPEND e Output abde Input 4 APPEND x APPEND y UNDO UNDO Output (empty string)","solution":"def text_editor(operations): Simulates the text editor behavior. :param operations: List of operations to perform :return: Final state of the string after performing all operations text = [] history = [] for operation in operations: if operation.startswith(\\"APPEND\\"): _, char = operation.split() text.append(char) history.append(char) elif operation == \\"UNDO\\": if history: text.pop() history.pop() return \'\'.join(text) def process_input(input_string): Parses the input string and returns the list of operations. :param input_string: A single string containing the number of operations and the operations themselves :return: List of operations lines = input_string.strip().split(\'n\') n = int(lines[0]) operations = lines[1:n+1] return operations"},{"question":"Input The input contains a string s (1 ≤ |s| ≤ 100), consisting of only lowercase letters. Output Output the number of vowels and consonants in the string, separated by a space. Examples Input programming Output 3 8 Input hello Output 2 3 Input aeiou Output 5 0","solution":"def count_vowels_consonants(s): Function to count the number of vowels and consonants in a given string. Args: s (str): Input string consisting of only lowercase letters. Returns: tuple: (number_of_vowels, number_of_consonants) vowels = \\"aeiou\\" num_vowels = sum(1 for char in s if char in vowels) num_consonants = len(s) - num_vowels return num_vowels, num_consonants"},{"question":"Alice is playing a game on a rectangular grid with R rows and C columns. Initially, every cell in the grid contains a number that can either be positive, negative, or zero. Alice can perform the following operation any number of times: 1. Pick any subrectangle from the grid (a subrectangle is defined by selecting two rows and two columns such that all cells within these bounds form a contiguous subrectangle) and multiply all the numbers within this subrectangle by -1. Alice\'s goal is to maximize the sum of all the numbers in the grid after performing the above operation any number of times. You are required to find this maximum possible sum. # Input Format: - The first line contains two integers R (1 ≤ R ≤ 100) and C (1 ≤ C ≤ 100) — the number of rows and columns, respectively. - Each of the next R lines contains C integers — the elements of the grid. Each integer is within the range [-1000, 1000]. # Output Format: - Output a single integer, the maximum possible sum of the grid\'s elements after Alice performs any number of subrectangle flips. # Example: Input: ``` 3 3 -1 -2 -3 4 5 6 -7 -8 -9 ``` Output: ``` 45 ``` Explanation: Initially, the sum is -45. By flipping the entire grid, all the numbers become positive, and the new sum is 45, which is the maximum. # Note: Alice can keep flipping subrectangles until the sum of the grid can\'t be maximized further. This problem is closely related to finding the maximum sum subarray in a two-dimensional array where elements can be turned positive by a flip.","solution":"def maximize_grid_sum(R, C, grid): max_sum = 0 for row in grid: for val in row: max_sum += abs(val) return max_sum"},{"question":"You are a landscape architect tasked with designing a new rectangular garden. Your garden is represented as a grid of cells with `m` rows and `n` columns. Each cell in the grid can either be planted with grass, indicated by \'G\', or with a flower bed, indicated by \'F\'. An initial garden layout is provided to you. You are required to satisfy a special rule: No two flower beds can be adjacent to each other horizontally, vertically, or diagonally (i.e., they should not share an edge or a corner). Given the initial layout of the garden, you need to determine the maximum number of flower beds that can be added to the garden without violating the adjacency rule. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 50) — the dimensions of the garden grid. The next `m` lines contain `n` characters each, representing the initial layout of the garden. Each character is either \'G\' or \'F\'. Output Output a single integer — the maximum number of flower beds that can be added to the garden. Examples Input 4 4 GGGG GGGG GGGG GGGG Output 4 Input 3 3 F G F G G G F G F Output 0 Input 3 3 GGG GGG GGG Output 4 Explanation of Examples In the first example, the entire garden is initially empty, allowing you to place one flower bed in each of the corners without any of them being adjacent. The maximum number of flower beds that can be added is 4. In the second example, no additional flower beds can be added without violating the adjacency rule, as all possible positions for adding flower beds are adjacent to existing ones. In the third example, placing one flower bed in each corner again yields the optimal solution, resulting in 4 added flower beds. ```","solution":"def count_max_flower_beds(m, n, garden): Given the initial layout of the garden, calculate the maximum number of flower beds (\'F\') that can be added without violating the adjacency rule. def is_valid_plant(x, y): for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and garden[nx][ny] == \'F\': return False return True count = 0 for i in range(m): for j in range(n): if garden[i][j] == \'G\' and is_valid_plant(i, j): garden[i][j] = \'F\' count += 1 return count"},{"question":"You have a rectangular grid with `H` rows and `W` columns. You start at the top-left cell (1, 1) and want to reach the bottom-right cell (H, W). From any cell (i, j), you can only move to the right (i, j+1) or down (i+1, j). However, there are certain cells that you cannot step on. Your task is to determine the number of unique paths from the top-left to the bottom-right of the grid, avoiding cells you cannot step on. Input - The first line contains two integers `H` and `W` (1 <= H, W <= 100). - The next `H` lines each contain `W` characters. Each character is either a `.` (indicating that you can step on the cell) or a `#` (indicating that you cannot step on the cell). Output - Print the number of unique paths from the top-left to the bottom-right cell. Examples Input ``` 3 3 . .. . .. . ``` Output ``` 2 ``` Input ``` 2 2 .# .# ``` Output ``` 0 ```","solution":"def unique_paths(H, W, grid): This function calculates the number of unique paths from the top-left to the bottom-right of a grid. if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return 0 dp = [[0] * W for _ in range(H)] dp[0][0] = 1 for i in range(H): for j in range(W): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[H-1][W-1] def parse_input(input_string): Parses the input string and returns H, W, and the grid. lines = input_string.strip().split(\'n\') H, W = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return H, W, grid"},{"question":"Design a data structure that efficiently supports the following operations on a collection of distinct integers: 1. Insert an integer. 2. Delete an integer. 3. Find the minimum integer. 4. Find the maximum integer. 5. Find the median integer. Constraints * 1 ≤ n ≤ 100000, where n is the number of operations. * All integers fit in a 32-bit signed integer (−2^31 to 2^31−1). Input The input will consist of multiple operations, one per line. Each line will be one of the following: - \\"insert x\\" where x is the integer to be inserted. - \\"delete x\\" where x is the integer to be deleted. - \\"min\\" which queries the minimum integer in the data structure. - \\"max\\" which queries the maximum integer in the data structure. - \\"median\\" which queries the median integer in the data structure. Output For \\"min\\" and \\"max\\" operations, output the respective integer. For the \\"median\\" operation, output the median integer. If there is an even number of elements, output the lower median. Examples Input insert 5 insert 3 insert 8 min max median delete 3 min max median Output 3 8 5 5 8 5","solution":"import bisect class IntegerCollection: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def delete(self, x): index = bisect.bisect_left(self.data, x) if index < len(self.data) and self.data[index] == x: self.data.pop(index) def find_min(self): if not self.data: return None return self.data[0] def find_max(self): if not self.data: return None return self.data[-1] def find_median(self): if not self.data: return None n = len(self.data) if n % 2 == 1: return self.data[n // 2] else: return self.data[(n // 2) - 1] # Function for easier testing def process_operations(operations): collection = IntegerCollection() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"insert\\": collection.insert(int(parts[1])) elif parts[0] == \\"delete\\": collection.delete(int(parts[1])) elif parts[0] == \\"min\\": results.append(collection.find_min()) elif parts[0] == \\"max\\": results.append(collection.find_max()) elif parts[0] == \\"median\\": results.append(collection.find_median()) return results"},{"question":"Mike and Anna like playing games involving arrays. One day, they came up with an interesting yet challenging game: Given an array of distinct integers, the goal is to determine the length of the longest increasing subsequence (LIS). A subsequence is derived by deleting some or no elements from the array without changing the order of the remaining elements. An increasing subsequence means every element in the subsequence is greater than the previous one. Mike found a solution that runs in O(n^2) time complexity, but he wants to find a more efficient approach. Anna, being a competitive programmer, thinks that the problem can be solved in O(n log n) time complexity. Your task is to help Mike and Anna by writing a function to determine the length of the longest increasing subsequence in an array using the more efficient O(n log n) approach. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the array. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Output Print a single integer — the length of the longest increasing subsequence in the array. Examples Input 8 10 9 2 5 3 7 101 18 Output 4 Input 6 7 7 7 7 7 7 Output 1 Note In the first example, one possible longest increasing subsequence is [2, 3, 7, 101], and its length is 4. In the second example, since all elements are the same, the longest increasing subsequence has one element, and its length is 1. Write the function to determine the length of the longest increasing subsequence in the given array using O(n log n) approach: ```python def length_of_lis(arr): import bisect lis = [] for num in arr: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) ``` This function uses binary search to find the position of each element in the LIS, maintaining a subsequence that represents the smallest possible ending value for a subsequence of a given length, achieving the O(n log n) time complexity.","solution":"def length_of_lis(arr): import bisect lis = [] for num in arr: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Ayesha is passionate about collecting rare artifacts in her favorite online game. In the game, artifacts can be merged to increase their power. Merging two artifacts \\"A\\" and \\"B\\" yields a new artifact with power equal to the sum of the powers of \\"A\\" and \\"B\\". Ayesha wants to maximize the number of artifact merges she can perform within a given power limit P. Given an array of integers, each representing the power of an artifact in Ayesha\'s collection, determine the maximum number of merges Ayesha can perform without the sum of the powers of any merged artifacts exceeding the power limit P. Each artifact can be used in at most one merge. Input The first line of the input contains two positive integers n and P (1 ≤ n ≤ 105, 1 ≤ P ≤ 109) — the number of artifacts in Ayesha\'s collection and the power limit. The second line of the input contains a sequence of n integers ai (1 ≤ ai ≤ 106), where ai represents the power of the i-th artifact. Output The first line of the output should contain a single integer — the maximum number of merges Ayesha can perform within the given power limit. Examples Input 5 10 1 3 5 7 9 Output 2 Input 4 15 8 4 6 6 Output 2 Input 6 20 2 4 8 1 16 10 Output 3 Note In the first test case, the optimal strategy is to merge artifact 1 and artifact 2 (power 1+3=4), and merge artifact 3 and artifact 4 (power 5+7=12), but it exceeds P. Instead, merging artifact pairs (1, 3) and (2, 4) gives a total power within the limit. Therefore, the maximum number of merges is 2. In the second test case, merging artifacts with powers (4, 6) and another pair (6, 8) exceeds P. Instead, other combinations like (4, 8) and (6, 6) both fit within the limit. Thus, the maximum number of merges is 2. In the third test case, the artifact pairs (2, 4), (1, 8), and (10, 10) fit within the power limit, yielding a maximum of 3 merges.","solution":"def max_merges(n, P, artifacts): Determine the maximum number of merges within the given power limit. Args: - n (int): The number of artifacts. - P (int): The power limit for merging artifacts. - artifacts (list of int): The list containing the power of each artifact. Returns: - int: The maximum number of merges. # Sort the artifacts by power artifacts.sort() i, j = 0, n - 1 merges = 0 # Use a two-pointer technique to determine maximum merges while i < j: if artifacts[i] + artifacts[j] <= P: merges += 1 i += 1 j -= 1 else: j -= 1 return merges"},{"question":"Robot Path Tracking A delivery robot operates in a rectangular grid, starting at position (0, 0). It receives a sequence of directional commands that move it within the grid. The commands consist of the following characters: - \'U\' for a step up (increasing y-coordinate by 1) - \'D\' for a step down (decreasing y-coordinate by 1) - \'L\' for a step left (decreasing x-coordinate by 1) - \'R\' for a step right (increasing x-coordinate by 1) Sometimes the robot can go out of the grid\'s boundaries (negative coordinates are allowed). Your task is to determine the robot\'s final position after executing all the commands. Implement a function that takes a string of commands and returns the final coordinates as a tuple (x, y). Input: - A single string commands, consisting of the characters \'U\', \'D\', \'L\', \'R\'. The length of the string is between 1 and 1000. Output: - A tuple of two integers, representing the final position (x, y). Example Input \\"UURDDLL\\" Output (-2, 1) Explanation - Start at (0, 0) - Move \'U\': (0, 1) - Move \'U\': (0, 2) - Move \'R\': (1, 2) - Move \'D\': (1, 1) - Move \'D\': (1, 0) - Move \'L\': (0, 0) - Move \'L\': (-1, 0) The final position is (-1, 0).","solution":"def robot_path(commands): Return the final coordinates of the robot after executing all commands. :param commands: A string consisting of characters \'U\', \'D\', \'L\', \'R\' :return: A tuple (x, y) representing the final coordinates x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"You are given a string s consisting of lowercase English letters. The following algorithm is applied to it: 1. If the string is empty, end the algorithm. 2. Find the lexicographically smallest character in the string. 3. Remove all instances of that character from the string and go to step 1. Determine the number of steps the algorithm will make. Input The only line contains a single string s (1 ≤ |s| ≤ 10^5). Output Print a single integer — the number of steps the algorithm will make. Examples Input abac Output 3 Input banana Output 3 Note In the first example, \'a\' is the smallest character and it appears twice, after removing \'a\', the string becomes \'bc\'. Then \'b\' is the smallest character and after removing it, the string becomes \'c\'. Finally, \'c\' is removed in the third step. In the second example, \'a\' is the smallest character and it appears three times. After removing \'a\', the string becomes \'bnn\'. Then \'b\' is the smallest character, and after removing it, the string becomes \'nn\'. Finally, \'n\' is removed in the third step.","solution":"def count_steps(s): Determine the number of steps to remove characters from the string following the given algorithm. Args: s (str): Input string consisting of lowercase English letters. Returns: int: Number of steps. unique_characters = set(s) return len(unique_characters)"},{"question":"A company is organizing a hackathon and wants to distribute T-shirts to participants. Each T-shirt has a size and color, and they would like to choose a subset of T-shirts such that the selected T-shirts can be paired up (each T-shirt paired with one another) and no pair has the same size or color. Write code that can help the company determine the maximum number of T-shirts that can be distributed under these conditions. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of T-shirts. Each of the next n lines contains a size s (1 ≤ s ≤ 100) and a color c (1 ≤ c ≤ 100), representing the size and color of each T-shirt. Output Output a single integer — the maximum number of T-shirts that can be selected and distributed in pairs according to the given conditions. Example Input 4 1 1 1 2 2 1 2 2 Output 2 Input 3 3 1 3 2 3 3 Output 0 Input 6 1 1 2 2 3 1 4 2 5 3 6 4 Output 3 Note In the first example, two pairs can be formed: (T-shirt with size 1 and color 1, T-shirt with size 2 and color 2) and (T-shirt with size 1 and color 2, T-shirt with size 2 and color 1). In the second example, no pairs can be formed as all T-shirts have the same size. In the third example, three pairs can be formed: (size 1, color 1) with (size 2, color 2), (size 3, color 1) with (size 4, color 2), and (size 5, color 3) with (size 6, color 4).","solution":"from collections import defaultdict from itertools import combinations def max_tshirt_pairs(n, tshirts): def can_be_paired(tshirt1, tshirt2): return tshirt1[0] != tshirt2[0] and tshirt1[1] != tshirt2[1] def find_pairs(tshirts): used = [False] * len(tshirts) pairs = 0 for i in range(len(tshirts)): if used[i]: continue for j in range(i + 1, len(tshirts)): if not used[j] and can_be_paired(tshirts[i], tshirts[j]): used[i] = used[j] = True pairs += 1 break return pairs return find_pairs(tshirts) # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) tshirts = [tuple(map(int, input().strip().split())) for _ in range(n)] print(max_tshirt_pairs(n, tshirts))"},{"question":"Write a program that takes an integer input `n`, and generates a pattern based on the following rules: 1. The pattern consists of `n` lines. 2. Each line `i` where `i` ranges from 1 to `n` contains numbers starting from 1 up to `i`, followed by letters from \'A\' to the `(i-th)` letter in the English alphabet. For example, if the input `n` is 4, the output should be: ``` 1A 12AB 123ABC 1234ABCD ``` Input The input consists of a single integer `n` which represents the number of lines in the pattern. Output Print the pattern as per the rules mentioned. Constraints 1 ≤ n ≤ 26 Example Input 4 Output ``` 1A 12AB 123ABC 1234ABCD ``` Input 2 Output ``` 1A 12AB ```","solution":"def generate_pattern(n): Function to generate and print the pattern for a given n. Parameters: n (int): The number of lines in the pattern. Returns: List[str]: Generated pattern lines. pattern = [] for i in range(1, n + 1): numbers = \'\'.join(str(num) for num in range(1, i + 1)) letters = \'\'.join(chr(65 + letter) for letter in range(i)) # 65 is the ASCII for \'A\' pattern.append(numbers + letters) # Printing the pattern for line in pattern: print(line) return pattern"},{"question":"Sana is working on a text-processing tool that finds patterns in a 5x5 grid of characters. She needs to determine if there is a sequence of three consecutive \'a\'s (horizontally, vertically, or diagonally) anywhere in the grid. Help Sana complete this task. Write a program that checks for these patterns in the grid. **Input:** The grid is given in five lines. Each line contains exactly five characters from the set {\'.\', \'a\', \'b\'}, where \'.\' represents an empty cell, \'a\' represents the letter \'a\', and \'b\' represents the letter \'b\'. It is guaranteed that the grid follows these rules and isn\'t empty. **Output:** Print a single line: \\"YES\\" if there is a sequence of three consecutive \'a\'s, and \\"NO\\" otherwise. **Examples:** Input: ``` a..bb .a... ..a.a ..a.b abbab ``` Output: ``` YES ``` Input: ``` a..bb .a... ..a.a ..b.b abbab ``` Output: ``` NO ``` **Explanation:** - In the first example, there is a vertical sequence of three \'a\'s in the third column. - In the second example, there is no sequence of three consecutive \'a\'s. You need to implement a function that will check for the presence of three consecutive \'a\'s either horizontally, vertically, or diagonally in the given grid.","solution":"def check_consecutive_as(grid): This function checks if there is a sequence of three consecutive \'a\'s (horizontally, vertically, or diagonally) anywhere in the given 5x5 grid. :param grid: List of strings where each string represents a line of the 5x5 grid :return: \\"YES\\" if there is a sequence of three consecutive \'a\'s, \\"NO\\" otherwise for i in range(5): for j in range(5): if j <= 2 and grid[i][j] == \'a\' and grid[i][j+1] == \'a\' and grid[i][j+2] == \'a\': return \\"YES\\" if i <= 2 and grid[i][j] == \'a\' and grid[i+1][j] == \'a\' and grid[i+2][j] == \'a\': return \\"YES\\" if i <= 2 and j <= 2 and grid[i][j] == \'a\' and grid[i+1][j+1] == \'a\' and grid[i+2][j+2] == \'a\': return \\"YES\\" if i <= 2 and j >= 2 and grid[i][j] == \'a\' and grid[i+1][j-1] == \'a\' and grid[i+2][j-2] == \'a\': return \\"YES\\" return \\"NO\\""},{"question":"You are given a binary string s consisting of 0s and 1s. Your task is to make all the characters in the string the same (either all 0s or all 1s) by performing a series of operations. In one operation, you can choose any substring of s and change every 0 in the substring to 1 and every 1 in the substring to 0 (this operation is called a flip). Your goal is to determine the minimum number of flips required to make all the characters in the string the same. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the binary string s. The second line of each test case contains the binary string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print a single integer — the minimum number of flips required. Example Input 4 3 000 3 111 5 01010 6 000111 Output 0 0 3 1 Note In the first test case, the string s is already all 0s, so no flips are needed. In the second test case, the string s is already all 1s, so no flips are needed. In the third test case, we can flip one of the three \\"01\\" or \\"10\\" substrings in each operation. For instance: - Flip the substring \\"01\\" starting at index 1, resulting in \\"10110\\". - Flip the substring \\"01\\" starting at index 2, resulting in \\"11000\\". - Flip the entire string, resulting in \\"11111\\". Thus, it takes 3 flips. In the fourth test case, flipping the whole \\"000111\\" substring in one operation will make the string either \\"111000\\" or \\"000111\\". Thus, only one flip is required.","solution":"def min_flips_to_uniform(t, test_cases): results = [] for n, s in test_cases: # Calculate flips to make string all 0s or all 1s # By counting the number of changes from 0 to 1 and 1 to 0 respectively # We need to ensure that there are no transitions left after flipping minimal segments # Hence we count at most one segment change between 0-1 or 1-0 transition # Transitions from 0 to 1 and 1 to 0 transitions_zero_to_one = 0 transitions_one_to_zero = 0 for i in range(1, n): if s[i - 1] == \'0\' and s[i] == \'1\': transitions_zero_to_one += 1 elif s[i - 1] == \'1\' and s[i] == \'0\': transitions_one_to_zero += 1 # The minimum flips required is the minimum of the two transitions counts + 1 # if there is any inconsistency (since one transition is required), # for all 0s or all 1s the flips are 0 since transitions are 0 min_flips = min(transitions_zero_to_one, transitions_one_to_zero) + 1 if transitions_zero_to_one == 0 and transitions_one_to_zero == 0: min_flips = 0 results.append(min_flips) return results # Example case t = 4 test_cases = [(3, \\"000\\"), (3, \\"111\\"), (5, \\"01010\\"), (6, \\"000111\\")] print(min_flips_to_uniform(t, test_cases)) # Expected output: [0, 0, 3, 1]"},{"question":"Sakura is attempting to solve a number sequence puzzle. The puzzle requires identifying a missing number in the sequence based on a specific pattern. The sequence is defined as follows: - If the position (i) (1-based indexing) is even, the number is ( frac{i}{2} ). - If the position (i) is odd, the number is ( 3i + 1 ). Write a function to determine the number at a given position (n) in this sequence. Constraints * (1 leq n leq 10^{6}) Input Input is given from Standard Input in the following format: ( n ) Output Print the number at position ( n ) in the sequence. Examples Input 3 Output 10 Input 4 Output 2","solution":"def sequence_number_at_position(n): Determine the number at the nth position in the sequence. Args: n (int): The position in the sequence (1-based indexing). Returns: int: The number at the given position. if n % 2 == 0: return n // 2 else: return 3 * n + 1"},{"question":"A scientist is researching a novel type of DNA sequence represented by a string consisting of characters \'A\', \'T\', \'C\', and \'G\'. To further study this DNA, the scientist needs to find the longest subsequence in which each of the characters \'A\', \'T\', \'C\', and \'G\' appears at least once. A subsequence of a string is a sequence obtained by deleting some (possibly none) characters from the original string, without reordering the remaining characters. Write a program that takes a DNA sequence as input and outputs the length of the longest subsequence containing at least one \'A\', one \'T\', one \'C\', and one \'G\'. If no such subsequence exists, output -1. Input: - The input consists of a single line containing the DNA sequence, a non-empty string of up to 100 characters long. Output: - Output a single integer, which is the length of the longest subsequence containing at least one \'A\', \'T\', \'C\', and \'G\'. If no such subsequence exists, output -1. Examples: Input ATCGAACTTG Output 10 Input XXYXZZZZ Output -1 Note In the first example, the entire sequence ATCGAACTTG contains at least one \'A\', \'T\', \'C\', and \'G\'. Therefore, the length of the longest subsequence containing all these characters is 10. In the second example, there are no \'A\', \'T\', \'C\', or \'G\' in the sequence, so the output is -1.","solution":"def longest_subsequence_with_all_characters(dna_sequence): Finds the length of the longest subsequence where each character \'A\', \'T\', \'C\', and \'G\' appears at least once. If no such subsequence exists, returns -1. required_chars = {\'A\', \'T\', \'C\', \'G\'} present_chars = set(dna_sequence) if not required_chars.issubset(present_chars): return -1 return len(dna_sequence)"},{"question":"Alice is collecting leaves for a school project. She has a collection of leaves, each with a distinct weight. Alice wants to group these leaves into pairs such that the difference in weight between the heaviest and the lightest leaf in each pair is minimized. Your task is to help Alice determine the minimum possible maximum difference between the weights of any pair. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of leaves in Alice\'s collection. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) — the weights of the leaves. Output Output one integer: the minimum possible maximum difference in weight between the leaves in any pair. Examples Input 4 8 1 12 5 Output 3 Input 5 10 9 17 1 2 Output 1","solution":"def min_max_diff(n, weights): Function to find the minimum possible maximum difference between the weights of any pair of leaves. :param n: The number of leaves :param weights: A list of integers representing the weights of the leaves :return: An integer representing the minimum possible maximum difference if n < 2: return 0 # If there\'s only one leaf or none, no pair can be formed. weights.sort() min_diff = float(\'inf\') for i in range(1, n): diff = weights[i] - weights[i-1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"# Problem: Message Decryption The NSA has intercepted a series of encrypted messages. Each message is encrypted using a specific key, which is the maximum possible sum of any non-empty subset of that message\'s elements. You are tasked with decrypting the messages by finding this decryption key. Given an array of integers representing an encrypted message, your task is to determine the maximum sum that can be obtained from any non-empty subset of the array. **Input** The input consists of a single test case in the following format: - The first line contains an integer `n` (1 leq n leq 10^5) - the number of elements in the encrypted message. - The second line contains `n` integers a_1, a_2, ..., a_n (-10^9 leq a_i leq 10^9) - the elements of the encrypted message. **Output** Output a single integer - the decryption key, which is the maximum possible sum of any non-empty subset of the elements. **Example** Input: 5 3 -2 5 -7 8 Output: 11 Input: 3 -5 -10 -3 Output: -3 **Explanation** In the first example, the optimal subset is {3, 5, 8} which sums up to 16. In the second example, the optimal subset is {-3} which sums up to -3 because all elements are negative, and the optimal subset contains the least negative number. # Notes - The subset of the array can include a single element or multiple elements. - Pay attention to cases where all elements might be negative. Your task is to implement an efficient solution given the constraints.","solution":"def max_subset_sum(arr): Returns the maximum possible sum of any non-empty subset of the array. # If the array is empty, no valid subset can be formed if not arr: return 0 # Calculate the maximum sum of any non-empty subset total_sum = sum(x for x in arr if x > 0) # If total_sum is 0, this means all elements are non-positive # In that case, the largest single element is the answer if total_sum == 0: return max(arr) return total_sum"},{"question":"The kingdom of Zalaris is known for its intricate system of roads and cities. The kingdom is represented as a graph with cities as nodes and roads as edges connecting these cities. There are N cities and M roads. The king wants to know if the kingdom is fully connected, meaning there should be a path (direct or indirect) between any pair of cities. Given the number of cities N and the number of roads M, along with the list of roads, determine if there is a path between every pair of cities. Constraints - 1 leq N leq 100 - 0 leq M leq N * (N-1) / 2 - Each road connects two different cities Input The first line consists of two integers, N and M. Each of the next M lines consists of two integers u and v representing a road between city u and city v. Output Print \\"Yes\\" if there is a path between every pair of cities, otherwise print \\"No\\". Examples Input 4 3 1 2 2 3 3 4 Output Yes Input 4 2 1 2 3 4 Output No","solution":"def is_kingdom_connected(N, M, roads): def dfs(node, visited, graph): visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: dfs(neighbor, visited, graph) if N == 1: return \\"Yes\\" # Create adjacency list for the graph graph = {i: [] for i in range(1, N+1)} for u, v in roads: graph[u].append(v) graph[v].append(u) # Perform DFS from any node visited = set() dfs(1, visited, graph) # Check if all nodes are visited return \\"Yes\\" if len(visited) == N else \\"No\\""},{"question":"You are tasked with creating a rectangular formation consisting of rows and columns on a grid using two robots, RoboA and RoboB. Each robot is equipped with an infinite number of rectangular blocks of size 1×1. RoboA places red blocks, and RoboB places blue blocks. The game starts on an empty rectangular grid of size `r × c`. Both robots move simultaneously, and on each turn, they can place blocks on any unoccupied cells that are adjacent to any already filled cells (including diagonals). The goal is for RoboA and RoboB to fill the entire grid with a checkerboard pattern in which adjacent cells alternately contain red and blue blocks. Both robots want to achieve this goal in the minimum number of turns. Provide a method to compute the minimum number of turns required to fill the grid completely with the checkerboard pattern. Input The first line contains an integer T (1 ≤ T ≤ 100): the number of test cases. Each of the next T lines contains two integers r and c (1 ≤ r, c ≤ 10^9): the dimensions of the grid. Output For each test case, output the minimum number of turns required to fill the grid completely with the checkerboard pattern. Example Input 2 3 4 5 5 Output 3 3 Note For a 3x4 grid, RoboA and RoboB can fill the grid in three turns as follows: Turn 1: RoboA places blocks at (1,1), (1,3), (2,2), (2,4), (3,1), (3,3); Turn 2: RoboB places blocks at (1,2), (1,4), (2,1), (2,3), (3,2), (3,4); Turn 3: Any robot fills the remaining cells.","solution":"def min_turns_to_fill_grid(t, dimensions): Returns the minimum number of turns required to fill the grid completely with the checkerboard pattern. :param t: The number of test cases. :param dimensions: A list of tuples (r, c) representing the grid dimensions for each test case. :return: A list of integers representing the minimum number of turns for each test case. results = [] for r, c in dimensions: # To fill r x c grid in a checkerboard pattern minimum number of turns # It takes at least 3 turns to completely fill the checkerboard pattern for any r and c >= 3 # If either r or c is smaller than 3, then it requires exactly 1 row or column plus one more turn min_dim = min(r, c) if min_dim == 1: results.append(1) elif min_dim == 2: results.append(2) else: results.append(3) return results # Usage example: # print(min_turns_to_fill_grid(2, [(3, 4), (5, 5)])) # Expected Output: [3, 3]"},{"question":"Write a function that determines whether a given word can be formed by sequentially tracing a path through adjacent (up, down, left, right) characters in a given 2D board of characters. You can assume that each character on the board can be used only once for a given word formation. # Function Signature ```python def exist(board: List[List[str]], word: str) -> bool: ``` # Input - `board`: A list of lists of characters (2D board) where each element is a single character (A-Z). - The size of the board is m x n (1 <= m, n <= 200). - `word`: A string consisting of characters (A-Z) (1 <= |word| <= 10^3). # Output - Returns `True` if the word can be formed by sequentially adjacent characters on the board. - Returns `False` otherwise. # Example Input ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" ``` Output ```python True ``` Input ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" ``` Output ```python True ``` Input ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" ``` Output ```python False ``` # Constraints - The same letter cell may not be used more than once in a path. - All inputs are guaranteed to be in upper case letters. - Both the board and the word contain at least one letter.","solution":"from typing import List def exist(board: List[List[str]], word: str) -> bool: def dfs(board, word, i, j, word_index): if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]: return False temp = board[i][j] board[i][j] = \'#\' found = (dfs(board, word, i+1, j, word_index + 1) or dfs(board, word, i-1, j, word_index + 1) or dfs(board, word, i, j+1, word_index + 1) or dfs(board, word, i, j-1, word_index + 1)) board[i][j] = temp return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and dfs(board, word, i, j, 0): return True return False"},{"question":"There is a popular card game where each card has a certain value, and players can gain or lose points based on the cards they hold. In this simplified version of the game, you are given a list of integers representing the values of the cards in a deck. You need to determine the maximum sum of the values of any contiguous subarray of the deck. A subarray is defined as a sequence of consecutive elements of the array. Input The first input line contains a single integer `n` (1 ≤ n ≤ 100000) which represents the number of cards in the deck. The second input line contains `n` space-separated integers representing the values of the cards. Each card value lies between -1000 and 1000. Output Output a single integer which is the maximum sum of the values of any contiguous subarray of the deck. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 4 1 2 3 4 Output 10 Input 3 -1 -2 -3 Output -1","solution":"def max_subarray_sum(n, arr): Finds the maximum sum of any contiguous subarray. :param n: Number of cards in the deck. :param arr: List of integers representing the cards\' values. :return: Integer representing the maximum sum of any contiguous subarray. max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum += value if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"In a certain survey, respondents have given ratings to several products. Given a list of ratings for each product, your task is to determine the maximum possible score of a contiguous subsequence of product ratings. The score of a contiguous subsequence is defined as the sum of the ratings in that subsequence. If all the ratings are negative, the maximum score is considered to be 0 (since it\'s better not to select any subsequences than to select a negative one). Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of ratings. The second line contains n integers where each integer represents a rating, the ratings can be negative or positive and their range is between -10^4 and 10^4. Output Print a single integer — the maximum possible score of a contiguous subsequence of product ratings. Examples Input 5 -2 1 -3 4 -1 Output 4 Input 5 -3 -4 -2 -5 -1 Output 0","solution":"def max_subsequence_score(n, ratings): Function to determine the maximum possible score of a contiguous subsequence of product ratings. If all ratings are negative, it will return 0. Parameters: n : int : The number of ratings ratings : List[int] : A list of integers representing the ratings Returns: int : The maximum possible score max_ending_here = 0 max_so_far = 0 for rating in ratings: max_ending_here = max(0, max_ending_here + rating) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Sarika works at a logistics company managing deliveries across a network of highways. The company has m different routes each connecting a pair of cities. Each route has a specified travel time associated with it. Sarika needs to ensure that any two cities in the network are connected directly or indirectly through routes. Given the number of cities and the list of routes, help Sarika identify if there is any single route that can be removed such that the network remains connected. If there is no such route, indicate it. Input The first line contains two integers n and m (1 ≤ n ≤ 2·10^5, n - 1 ≤ m ≤ 2·10^5) — the number of cities and the number of routes. Then m lines follow, each of them containing three integer numbers u, v, t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^9), where u and v are cities connected by the route and t is the travel time on that route. Output If there is no redundant route, print -1. Otherwise, print the index of any redundant route (routes are 1-indexed). Examples Input 4 4 1 2 10 2 3 15 3 4 20 4 1 25 Output 1 Input 3 2 1 2 5 2 3 10 Output -1 Input 5 5 1 2 3 2 3 4 3 4 5 4 5 6 5 1 7 Output 2 Note In the first sample, each route is part of a cycle that connects all the cities. Removing any one route will still leave the other three routes allowing connectivity between cities. For example, removing the first route between cities 1 and 2 still allows connectivity through other routes. In the second sample, there are only two routes and removing any of them would disconnect the network. In the third sample, the entire network forms a cycle allowing any single route to be redundant while keeping the network connected. For instance, removing the second route between cities 2 and 3 will still keep the network connected through other routes.","solution":"def find_redundant_route(n, m, routes): Find if there is any single route that can be removed such that the network remains connected. If no such route exists, return -1. Otherwise, return the index of any redundant route (1-indexed). :param int n: number of cities :param int m: number of routes :param list routes: list of routes with each route represented as (u, v, t) :return: index of any redundant route (1-indexed) or -1 if no redundant route :rtype: int from collections import defaultdict def dfs(graph, visited, node): stack = [node] while stack: v = stack.pop() if not visited[v]: visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: stack.append(neighbor) # Build the graph from given routes graph = defaultdict(list) for idx, (u, v, t) in enumerate(routes): graph[u].append(v) graph[v].append(u) for i in range(m): # Create a new graph without the i-th edge temp_graph = defaultdict(list) for j, (u, v, t) in enumerate(routes): if i != j: temp_graph[u].append(v) temp_graph[v].append(u) # Check if the graph is still connected without the i-th edge visited = [False] * (n + 1) # 1-indexed cities dfs(temp_graph, visited, routes[i][0]) if all(visited[1:]): return i + 1 # 1-indexed return -1"},{"question":"You are given a list of integers representing the lengths of segments. You need to find the maximum possible length of overlap that can be achieved by combining exactly two segments (if it is possible to combine them). Suppose segment A has a length `a` and segment B has a length `b`, then their overlap can be defined as `min(a, b)`. You should write a program which finds the maximum overlap by combining any two of the given segments. Input The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of segments. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the segments. Output Output a single integer — the maximum possible overlap by combining exactly two segments. If combining two segments is not possible within the given constraints, output 0. Examples Input 5 1 2 3 4 5 Output 4 Input 3 7 5 2 Output 5 Input 4 10 1 9 3 Output 9 Note In the first example, one possible way to achieve the maximum overlap is by combining segments of lengths 4 and 5, resulting in an overlap of `min(4, 5) = 4`. In the second example, the maximum overlap is achieved by combining segments of lengths 7 and 5, resulting in `min(7, 5) = 5`. In the third example, combining segments of lengths 10 and 9 results in an overlap of `min(10, 9) = 9`.","solution":"def max_overlap(n, segments): # Initialize the maximum overlap to 0 max_overlap_len = 0 # Iterate over all possible pairs of segments for i in range(n): for j in range(i + 1, n): # Calculate the overlap of the current pair of segments overlap_len = min(segments[i], segments[j]) # Update the maximum overlap if the current overlap is greater max_overlap_len = max(max_overlap_len, overlap_len) return max_overlap_len"},{"question":"Alex is designing a new game in which a player must navigate a robot through an obstacle course. The course is represented by a string S of length n, which consists of characters that are either \\".\\" (empty space) or \\"#\\" (obstacle). The robot starts at the first empty space on the left and moves right one position at a time. The game ends if the robot hits an obstacle or reaches the end of the string. Determine whether the robot can reach the end of the string without hitting an obstacle. Constraints * 1 leq n leq 100 * S consists of only characters \\".\\" and \\"#\\". Input A single line containing the string S. Output If the robot can reach the end of the string, print `Yes`; if it cannot, print `No`. Examples Input ...... Output Yes Input ..#... Output No Input ..#. Output No Input ....#..# Output No Input ....... Output Yes","solution":"def can_reach_end(s): This function takes a string s consisting of \\".\\" (empty space) and \\"#\\" (obstacle). It returns \\"Yes\\" if the robot can reach the end of the string without hitting an obstacle. Otherwise, it returns \\"No\\". for char in s: if char == \\"#\\": return \\"No\\" return \\"Yes\\""},{"question":"Vovochka has recently learned about the Greatest Common Divisor (GCD) function in his math class. The GCD of two integers is the largest integer that divides both of them without leaving a remainder. Now, Vovochka has been given a list of queries to process over an array of integers. Each query requires finding the sum of the GCDs between every possible pair of integers in the given range. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the length of the array given to Vovochka. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000000). The third line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines consists of two integers li and ri (1 ≤ li ≤ ri ≤ n), representing the boundaries of the segment for the query. Output For each query, print the sum of the GCD of every possible pair of integers within the segment li to ri, inclusive. Examples Input 6 12 15 18 9 6 21 3 1 3 2 5 4 6 Output 21 39 21 Note In the first sample, for the first query (1, 3), the pairs are (12, 15), (12, 18), and (15, 18). The GCDs are 3, 6, and 3 respectively, summing to 12 (3 + 6 + 3). For the second query (2, 5), the pairs between indices 2 and 5 are (15, 18), (15, 9), (15, 6), (18, 9), (18, 6), and (9, 6). The GCDs are 3, 3, 3, 9, 6, and 3 respectively, summing to 27 (3 + 3 + 3 + 9 + 6 + 3). For the third query (4, 6), the pairs between indices 4 and 6 are (9, 6), (9, 21), and (6, 21). The GCDs are 3, 3, and 3 respectively, summing to 9 (3 + 3 + 3).","solution":"from math import gcd from itertools import combinations def sum_gcd_pairs(a, queries): results = [] for l, r in queries: segment = a[l-1:r] pairwise_gcd_sum = sum(gcd(x, y) for x, y in combinations(segment, 2)) results.append(pairwise_gcd_sum) return results"},{"question":"Given an integer array nums and an integer k, your task is to find the maximum length of a subarray that sums to k. If there is no such subarray, return 0. **Example:** ``` Input 5 1, -1, 5, -2, 3 3 Output 4 Input 5 -2, -1, 2, 1 1 Output 2 ``` **Constraints:** - The length of the given array will not exceed 10,000. - The range of integers in the array will be in the range [-10,000, 10,000].","solution":"def max_subarray_len(nums, k): Returns the maximum length of a subarray that sums to k. Parameters: nums (List[int]): The list of integers. k (int): The target sum. Returns: int: The maximum length of a subarray whose sum is k. sum_indices = {0: -1} total = 0 max_len = 0 for i, num in enumerate(nums): total += num if (total - k) in sum_indices: max_len = max(max_len, i - sum_indices[total - k]) if total not in sum_indices: sum_indices[total] = i return max_len"},{"question":"You are given a sequence of N integers A_1, A_2, ldots, A_N. You need to find the maximum possible sum of any contiguous subsequence of the given sequence. Constraints * 1 leq N leq 100,000 * -10^9 leq A_i leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 cdots A_N Output Print one integer — the maximum possible sum of any contiguous subsequence of the given sequence. Examples Input 5 1 -2 3 4 -5 Output 7 Input 3 -1 -2 -3 Output -1","solution":"def max_subarray_sum(N, A): Returns the maximum possible sum of any contiguous subsequence of the given sequence. Parameters: N (int): Number of elements in the sequence A (list of int): The sequence of integers Returns: int: The maximum sum of any contiguous subsequence max_sum = A[0] current_sum = A[0] for i in range(1, N): current_sum = max(A[i], current_sum + A[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alice and Bob are playing a game with arrays. They have an array `a` consisting of `n` positive integers. The game proceeds as follows: 1. Alice and Bob alternatively select coins, with Alice always playing first. 2. In each turn, a player either chooses the first or the last element of the remaining array. 3. The game ends when all elements have been chosen. 4. The objective of each player is to maximize the sum of the elements they select. However, both Alice and Bob are perfect players, meaning they will play optimally to maximize their own score. Write a program to determine the maximum score Alice can achieve if both players play optimally. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 2 * 10^5`), the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`), the elements of the array. # Output - Print a single integer, the maximum score Alice can achieve. # Example Input ``` 4 1 2 9 4 ``` Output ``` 10 ``` Explanation Alice can achieve a maximum score by taking the steps as follows: 1. Alice takes 1 (first element), Bob takes 4 (last element). 2. Alice takes 9 (last element), Bob takes 2 (remaining element). Alice\'s score is `1 + 9 = 10`. # Notes Consider using dynamic programming to solve this problem optimally, since a straightforward recursive approach may not terminate in a reasonable time for the larger constraints. Good luck!","solution":"def max_alice_score(n, a): Determines the maximum score Alice can achieve with optimal play by both players. Parameters: n (int): The number of elements in the array. a (list of int): The array of elements. Returns: int: The maximum score Alice can achieve. # Create a memoization table to cache results of subproblems dp = [[0] * n for _ in range(n)] # Base case: when the range is of length 1, Alice picks the only element for i in range(n): dp[i][i] = a[i] # Build the table with bottom-up DP approach for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 # Alice will pick either the i-th or j-th element, and we need to consider the optimal subproblems for the remaining segments dp[i][j] = max(a[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0), a[j] + min(dp[i][j - 2] if i <= j - 2 else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0)) # Alice\'s maximum score is stored in dp[0][n-1] return dp[0][n - 1]"},{"question":"A group of n software developers work on a collaborative coding project. They need to divide themselves into two teams of any size. To ensure effective teamwork and communication, two developers who have had conflicts in the past should not be placed on the same team. Each developer has a unique identifier from 1 to n and the conflicts between the developers are known. Your task is to determine whether it is possible to split all the developers into two teams where no two conflicting developers are in the same team. If it is not possible, return \\"NO\\". If possible, return \\"YES\\". Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of developers and the number of conflict pairs correspondingly. The next m lines describe the conflicts between developers. Each conflict is described by two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) — the identifiers of the conflicting developers. Each conflict occurs exactly once. Output Print \\"YES\\" if it is possible to split all developers into two teams as described. Otherwise, print \\"NO\\". Examples Input 4 3 1 2 2 3 1 3 Output NO Input 5 2 1 2 3 4 Output YES Input 6 4 1 2 2 3 4 5 5 6 Output YES","solution":"def can_divide_teams(n, m, conflicts): from collections import defaultdict, deque # Initialize a graph from the list of conflicts graph = defaultdict(list) for a, b in conflicts: graph[a].append(b) graph[b].append(a) # Array to store the team assignment, -1 means unassigned team = [-1] * (n + 1) def bfs(start): queue = deque([start]) team[start] = 0 # Start by assigning the start node to team 0 while queue: current = queue.popleft() current_team = team[current] for neighbor in graph[current]: if team[neighbor] == -1: # If neighbor not assigned any team team[neighbor] = 1 - current_team # Assign to the opposite team queue.append(neighbor) elif team[neighbor] == current_team: # If neighbor already in the same team return False return True # Run BFS for each component for i in range(1, n + 1): if team[i] == -1: # If not yet visited if not bfs(i): return \\"NO\\" return \\"YES\\" # Example usage: # print(can_divide_teams(4, 3, [(1, 2), (2, 3), (1, 3)])) # Should output \\"NO\\" # print(can_divide_teams(5, 2, [(1, 2), (3, 4)])) # Should output \\"YES\\" # print(can_divide_teams(6, 4, [(1, 2), (2, 3), (4, 5), (5, 6)])) # Should output \\"YES\\""},{"question":"You have been given a string that contains a mathematical expression in infix notation. Your task is to write a program that converts this infix expression into its equivalent postfix (Reverse Polish) notation and then evaluates the postfix expression. The input consists of multiple lines. Each line contains a mathematical expression in infix notation that uses integer numbers, and the operators `+`, `-`, `*`, `/`, and parentheses `()`. The expressions are properly formatted and have no spaces between the characters. Your program should convert each expression to postfix notation and then compute the result of the postfix expression. The input ends with a line containing a single dot (`.`) which does not need to be processed. **Input:** ``` 3+4*2/(1-5)^2 2*(3+7)/4-1 . ``` **Output:** ``` 3 4 2 * 1 5 - 2 ^ / + 1.5 ``` In the first input line, the infix expression \'3+4*2/(1-5)^2\' is converted to \'3 4 2 * 1 5 - 2 ^ / +\' and then evaluated to get the result 3.5. In the second input line, the infix expression \'2*(3+7)/4-1\' is converted to \'2 3 7 + * 4 / 1 -\' and then evaluated to get 4.","solution":"def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} output = [] stack = [] for char in expression: if char.isnumeric(): output.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() else: while stack and stack[-1] != \'(\' and precedence[char] <= precedence[stack[-1]]: output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return \' \'.join(output) def evaluate_postfix(expression): stack = [] tokens = expression.split() for token in tokens: if token.isnumeric(): stack.append(int(token)) else: right = stack.pop() left = stack.pop() if token == \'+\': stack.append(left + right) elif token == \'-\': stack.append(left - right) elif token == \'*\': stack.append(left * right) elif token == \'/\': stack.append(left / right) elif token == \'^\': stack.append(left ** right) return stack[0] def process_input(input_lines): results = [] for line in input_lines: if line == \'.\': break postfix = infix_to_postfix(line) result = evaluate_postfix(postfix) results.append(postfix) results.append(result) return results"},{"question":"You are given two arrays, nums1 and nums2, where nums1 is initially of size m+n and contains m elements, followed by n zero elements. nums2 contains exactly n elements. Your task is to merge nums2 into nums1 in such a way that the final merged array is sorted in non-decreasing order. You must not use any additional arrays or data structures to solve the problem. Modify nums1 in-place and ensure the final merged array is sorted. Input: The first line contains an integer t, the number of test cases. For each test case, there will be four lines: 1. Two integers m and n, representing the number of initial elements in nums1 and the number of elements in nums2 respectively. 2. Array nums1 represented as space-separated integers. 3. Array nums2 represented as space-separated integers. Output: Print the modified nums1 array after merging nums2 into nums1 for each test case. Constraints: 1 <= t <= 10 0 <= m, n <= 200 -10^9 <= nums1[i], nums2[i] <= 10^9 SAMPLE INPUT 2 3 3 1 2 3 0 0 0 2 5 6 4 0 1 2 3 4 0 SAMPLE OUTPUT 1 2 2 3 5 6 1 2 3 4 Explanation Testcase 1: Initial nums1: 1 2 3 0 0 0 Initial nums2: 2 5 6 After merging: The final nums1 array is 1 2 2 3 5 6 Testcase 2: Initial nums1: 1 2 3 4 (no zeroes as nums2 is empty) Initial nums2: [] After merging: The final nums1 array is 1 2 3 4","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 to form a single sorted array in-place. Args: nums1 (List[int]): The first list (with m elements followed by n zeroes) m (int): The number of initial elements in nums1 nums2 (List[int]): The second list with n elements n (int): The number of elements in nums2 # Start from the end of nums1 and nums2 and merge backwards i, j, k = m - 1, n - 1, m + n - 1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 # If any elements left in nums2 while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1 # A function to handle the input/output for the task def process_input(t, test_cases): result = [] for case in test_cases: m, n = case[0] nums1 = case[1] nums2 = case[2] merge(nums1, m, nums2, n) result.append(nums1) return result"},{"question":"Write a program which reads an integer n and determines the number of distinct permutations of the integers from 1 to n that are in increasing order when read both from left to right and from right to left. For example, for n = 3, the only permutation satisfying these conditions is (1, 2, 3). Input The input consists of a single integer n (1 ≤ n ≤ 10). Output Print the number of distinct permutations that can be read the same left to right and right to left. Example Input 3 Output 1","solution":"def count_symmetric_permutations(n): For a given integer n, returns the number of distinct permutations of the integers from 1 to n that are in increasing order when read both from left to right and from right to left. if n == 1: return 1 else: return 1"},{"question":"Given an array of numbers representing the scores of different players in a game, you are tasked with sorting the scores in non-decreasing order. However, if multiple players have the same score, you need to maintain their relative order from the original array. Implement a function that sorts the array in a stable manner. A stable sort is one that does not change the relative order of elements with equal keys. You have to answer t independent test cases. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the number of scores. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the scores of the players. It is guaranteed that the sum of n over all test cases does not exceed 10^5 (∑ n ≤ 10^5). Output For each test case, print the sorted scores in non-decreasing order while maintaining the original relative order for players with the same score. Example Input 3 5 3 1 2 1 3 6 8 2 3 2 4 3 4 10 10 10 10 Output 1 1 2 3 3 2 2 3 3 4 8 10 10 10 10 Note In the first test case, the sorted order is 1, 1, 2, 3, 3. The relative order of players with scores 1 and 3 is maintained from the original input. In the second test case, the sorted order is 2, 2, 3, 3, 4, 8. The relative order of players with scores 2 and 3 is maintained from the original input. In the third test case, all players have the same score, so their relative order is preserved as is.","solution":"def stable_sort_scores(t, test_cases): Sorts player scores in non-decreasing order while maintaining relative order of players with the same score. Parameters: t (int): Number of test cases test_cases (list of tuples): List where each tuple contains an integer n (number of scores) and a list of integers a (the scores of players) Returns: list of lists: Sorted scores for each test case sorted_scores = [] for i in range(t): n, scores = test_cases[i] sorted_scores.append(sorted(scores)) return sorted_scores"},{"question":"There is a forest with n trees, and you are given the heights of these trees. The forest is under magical influence causing only certain ranges of tree heights to be visible to a viewer at any given time. Visibility range is defined by a magical device which takes two integers l and r (1 ≤ l ≤ r ≤ n) and sets all tree heights that fall outside the range [l, r] to zero. Your task is to determine the sum of the heights of the trees that remain visible for each query. Input The first line contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of trees in the forest and the number of queries, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the trees. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the parameters of the magical device for each query. Output For each query, print the sum of the heights of the trees that are visible after applying the visibility range [l, r]. Examples Input 5 3 10 20 30 40 50 1 3 2 5 1 5 Output 60 140 150 Input 4 2 1 3 5 7 1 2 3 4 Output 4 12 Note In the first example, consider the following: - For the first query [1, 3], the visible heights are 10, 20, and 30. Their sum is 60. - For the second query [2, 5], the visible heights are 20, 30, 40, and 50. Their sum is 140. - For the third query [1, 5], all heights are visible. Their sum is 150. In the second example, consider the following: - For the first query [1, 2], the visible heights are 1 and 3. Their sum is 4. - For the second query [3, 4], the visible heights are 5 and 7. Their sum is 12.","solution":"def sum_visible_heights(n, q, heights, queries): Calculate the sum of the heights of the trees that are visible for each query. :param n: Number of trees :param q: Number of queries :param heights: List of tree heights :param queries: List of queries where each query is a tuple (l, r) :return: List of sums of the visible tree heights for each query results = [] for l, r in queries: # Sum the heights in the inclusive range [l-1, r-1] visible_sum = sum(heights[l-1:r]) results.append(visible_sum) return results"},{"question":"Consider a display board that is capable of showing a grid of alphanumeric characters along with several predefined special characters (space, dot, comma, exclamation mark, question mark). The display works by processing command sequences that manipulate the grid by adding, removing, or moving characters. # Grid Details: - The grid is initially empty and has a default size of 10 rows and 20 columns. - Grid rows are numbered from 1 to 10 (top to bottom) and columns from 1 to 20 (left to right). # Command List: * `INSERT R C [TEXT]` - Insert the `[TEXT]` starting at the position (R, C). If the text goes beyond the grid\'s right edge, it truncates. * `DELETE R C LENGTH` - Delete `LENGTH` characters starting from the position (R, C). * `MOVE SR SC DR DC LENGTH` - Move `LENGTH` characters starting from (SR, SC) to the position (DR, DC). If the destination overflows the grid\'s right edge, it truncates. * `PRINT` - Display the current state of the grid. # Commands Constraints: - (R, C), (SR, SC), (DR, DC) positions are always valid within 1 ≤ R, SR, DR ≤ 10 and 1 ≤ C, SC, DC ≤ 20. - Inserted text and moved text always fit within the grid boundaries. - `LENGTH` is a positive integer that does not exceed the grid boundaries from the start position for `DELETE` and `MOVE` commands. # Example Input and Output: Input: ``` INSERT 1 1 HELLO INSERT 2 5 WORLD INSERT 4 8 ! DELETE 1 2 3 MOVE 2 5 3 10 5 PRINT - ``` Output: ``` H L O D D ! ``` # Notes: - Text operations assume position (R, C) to be 1-indexed. - After processing all commands, the grid should be displayed based on the `PRINT` command. - The \'-\' denotes the end of command input. Design a program to read the text operations commands and simulate the changes to the grid accordingly, displaying the final state of the grid after applying the commands.","solution":"class DisplayBoard: def __init__(self): self.grid = [[\' \' for _ in range(20)] for _ in range(10)] def insert(self, r, c, text): r -= 1 c -= 1 for i in range(min(len(text), 20 - c)): self.grid[r][c + i] = text[i] def delete(self, r, c, length): r -= 1 c -= 1 for i in range(min(length, 20 - c)): self.grid[r][c + i] = \' \' def move(self, sr, sc, dr, dc, length): sr -= 1 sc -= 1 dr -= 1 dc -= 1 temp = [] for i in range(min(length, 20 - sc)): temp.append(self.grid[sr][sc + i]) self.grid[sr][sc + i] = \' \' for i in range(min(len(temp), 20 - dc)): self.grid[dr][dc + i] = temp[i] def print_grid(self): for row in self.grid: print(\'\'.join(row)) def process_commands(commands): board = DisplayBoard() for command in commands: parts = command.split(\' \') if parts[0] == \'INSERT\': r, c, text = int(parts[1]), int(parts[2]), \' \'.join(parts[3:]) board.insert(r, c, text) elif parts[0] == \'DELETE\': r, c, length = int(parts[1]), int(parts[2]), int(parts[3]) board.delete(r, c, length) elif parts[0] == \'MOVE\': sr, sc, dr, dc, length = map(int, parts[1:6]) board.move(sr, sc, dr, dc, length) elif parts[0] == \'PRINT\': board.print_grid()"},{"question":"Input The only line of the input contains a string of lowercase English letters. The length of the string is between 1 and 100, inclusive. Output Output \\"Palindrome\\" or \\"Not Palindrome\\". Examples Input abba Output Palindrome Input hello Output Not Palindrome Input racecar Output Palindrome","solution":"def check_palindrome(s): Returns \'Palindrome\' if the string s is a palindrome, and \'Not Palindrome\' otherwise. if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"In a game development competition, participants create games which are then evaluated based on two criteria: innovation and fun factor. Each criterion is scored separately, and the final score is the sum of the two criteria scores. Unfortunately, the records of individual criteria scores were lost, and now the only available information is the ranking. In each criterion, the participants are ranked by their scores in non-increasing order. In case of a tie in scores, their submission time is used as the tie-breaker (early submissions get higher ranks). In the innovation criterion, the participant placed in the 50-th place scored a points. Also, all participants ranked from 1-st to 50-th (inclusive) have at least b points in the fun factor criterion. Similarly, in the fun factor criterion, the participant placed in the 50-th place scored c points. Also, all participants ranked from 1-st to 50-th (inclusive) have at least d points in the innovation criterion. After both criteria are evaluated, all participants are ranked by their total score in non-increasing order. For participants with the same total score, the submission time tie-breaker is used. The cutoff score to qualify for a special award is the total score of the participant placed 50-th. Given integers a, b, c, d, compute the smallest possible cutoff score to qualify for the special award in such a game development competition scenario. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 2025) — the number of test cases. Each test case is described by one line containing four integers a, b, c, d (0 ≤ a, b, c, d ≤ 9; d ≤ a; b ≤ c). It is guaranteed that there is at least one possible game development competition scenario satisfying the given constraints. Output For each test case, output a single integer — the smallest possible cutoff score in some game development competition scenario meeting the given criteria. Example Input 2 3 4 5 1 7 2 6 3 Output 7 9 Explanation For the first test case, consider the following competition scenario: there are 51 participants, each scoring 3 points for the innovation criterion and 4 points for the fun factor criterion. Hence, the total score of the participant in the 50-th place is 7. For the second test case, consider another competition scenario: there are 51 participants in total with: * 25 participants scoring 7 on innovation and 2 on fun factor, * 25 participants scoring 6 on innovation and 3 on fun factor, * 1 participant scoring the lowest possible above conditions. Thus, the total score of the participant in the 50-th place is 9.","solution":"def smallest_cutoff_score(t, cases): results = [] for case in cases: a, b, c, d = case results.append(max(a + b, c + d)) return results"},{"question":"You are given a string containing only uppercase letters \'A\' and \'B\'. You can perform the following operation as many times as you want: choose any two adjacent characters in the string and replace them with a single character according to the following rules: - If you select \\"AB\\" or \\"BA\\", you can replace it with \'A\' or \'B\' (your choice). - If you select \\"AA\\" or \\"BB\\", you can replace it with that same character (\'A\' or \'B\') respectively. Your task is to determine the shortest possible length of the string after performing any number of such operations. Input The first line of input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100), consisting of only the characters \'A\' and \'B\'. Output For each test case, output a single integer, the length of the shortest possible string. Examples Input 3 ABAB AABB AAAA Output 1 2 4","solution":"def shortest_length_after_operations(t, strings): Returns a list of integers representing the shortest possible length of each string after performing the specified operations. results = [] for s in strings: count_A = s.count(\'A\') count_B = s.count(\'B\') # difference between counts of \'A\' and \'B\' gives the shortest possible length results.append(abs(count_A - count_B)) return results"},{"question":"In a certain town, the citizens decided to create a system for managing parking spaces to ensure efficiency. Parking spaces are represented as an array of integers, where each integer represents the time (in minutes) a car has been parked in the respective spot. The parking system works on two principles: 1. A car penalty for over-parking is calculated for each car parked in the system using the following rules: - For every car that has parked for more than `T` minutes, a penalty of `P` units is incurred for each minute exceeding `T`. 2. A grace period `G` is provided, meaning no penalty will apply for the cars that have parked within `G` minutes over the limit `T`. Write a function that calculates the total penalty incurred by all cars in the parking area. # Function Signature ```python def calculate_total_penalty(parking_times: List[int], T: int, P: int, G: int) -> int: pass ``` # Input The function takes the following inputs: - `parking_times`: a list of integers representing the parking duration of each car in minutes. - `T`: an integer where `1 ≤ T ≤ 100` representing the allowed parking time in minutes before incurring penalties. - `P`: an integer where `1 ≤ P ≤ 100` representing the penalty per minute beyond the allowed time `T` after accounting for the grace period `G`. - `G`: an integer where `0 ≤ G ≤ 100` representing the grace period in minutes after `T`. # Output The function returns an integer representing the total penalty incurred by all cars in the parking area. # Example ```python parking_times = [120, 150, 200, 180] T = 100 P = 5 G = 10 ``` Output: ``` 600 ``` # Explanation - The first car has parked for 120 minutes, so it exceeds T by 20 minutes. After considering the grace period G of 10 minutes, it exceeds by 10 minutes. The penalty is 10 * 5 = 50 units. - The second car has parked for 150 minutes, so it exceeds T by 50 minutes. After G, it exceeds by 40 minutes. The penalty is 40 * 5 = 200 units. - The third car has parked for 200 minutes, so it exceeds T by 100 minutes. After G, it exceeds by 90 minutes. The penalty is 90 * 5 = 450 units. - The fourth car has parked for 180 minutes, so it exceeds T by 80 minutes. After G, it exceeds by 70 minutes. The penalty is 70 * 5 = 350 units. The total penalty in this case is 50 + 200 + 450 + 350 = 1050 units.","solution":"from typing import List def calculate_total_penalty(parking_times: List[int], T: int, P: int, G: int) -> int: total_penalty = 0 for time in parking_times: if time > T: over_time = time - T if over_time > G: penalty_time = over_time - G total_penalty += penalty_time * P return total_penalty"},{"question":"You are given a list of integers. Your task is to sort the list in ascending order. However, the integers can be very large, and you need to ensure that the sorting is done efficiently. Input The first line of the input contains one integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The following n lines each contain a single integer a_i (0 ≤ a_i < 10^18) — the integers in the list. Output Print the sorted list of integers in ascending order, with each integer on a new line. Examples Input 5 123456789123456789 987654321987654321 123123123123123123 321321321321321321 456456456456456456 Output 123123123123123123 123456789123456789 321321321321321321 456456456456456456 987654321987654321 Input 3 999999999999999999 100000000000000000 555555555555555555 Output 100000000000000000 555555555555555555 999999999999999999 Note In the first example, the integers are sorted from the smallest to the largest. In the second example, notice the order of magnitudes and that the sorting handles very large integers.","solution":"def sort_large_integers(n, integers): Takes a list of large integers and sorts them in ascending order. :param n: Number of integers in the list :param integers: List of integers :return: Sorted list of integers integers.sort() return integers"},{"question":"In a 2D grid of size NxM, you are given a starting point (sx, sy) and a target point (tx, ty). The grid has some blocked cells that cannot be traversed. Your task is to determine if there is a path from the starting point to the target point. If such a path exists, you also need to find the length of the shortest path. You can only move up, down, left, or right. Constraints: - 1 ≤ N, M ≤ 500 - 0 ≤ sx, sy, tx, ty < 500 - (sx, sy) is different from (tx, ty) - The grid cells are either 0 (representing an open cell) or 1 (representing a blocked cell). Input: The input is given from Standard Input in the following format: N M sx sy tx ty grid (NxM matrix with values 0 or 1) Output: Print the length of the shortest path if it exists. If no such path exists, output -1. Examples Input: 5 5 0 0 4 4 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 0 Output: 8 Input: 4 4 0 0 3 3 0 1 0 0 0 1 0 1 0 0 0 1 1 1 1 0 Output: -1 Explanation: In the first example, the shortest path from (0, 0) to (4, 4) has a length of 8. In the second example, there is no path from (0, 0) to (3, 3) due to the blocked cells in the grid.","solution":"from collections import deque def shortest_path(N, M, sx, sy, tx, ty, grid): Returns the length of the shortest path from (sx, sy) to (tx, ty) in the grid. If no such path exists, returns -1. # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize a queue with the starting point and distance queue = deque([(sx, sy, 0)]) # Initialize a set to keep track of visited cells visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() # If we reached the target point if x == tx and y == ty: return dist # Explore all possible moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"You are helping analyze traffic data at an intersection with multiple traffic lights. The traffic lights are controlling directions such as north, south, east, and west. The intersection generates a series of events, recording the state of each traffic light at specific timestamps. Each event is represented as a string in the format \\"HH:MM direction state\\", where: - \\"HH:MM\\" is the 24-hour time in hours and minutes. - \\"direction\\" is one of \\"north\\", \\"south\\", \\"east\\", or \\"west\\". - \\"state\\" is either \\"green\\" or \\"red\\". Given a list of such events, determine if there are any time periods when a traffic light in any direction turns green while another traffic light is already green, which would indicate a potential traffic issue. Note that a transition from green to red or from red to green are both recorded as separate events. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of events. The following n lines each contain an event as described above. The events are given in chronological order. Output Print \\"No Issues\\" if no two traffic lights are green simultaneously. Otherwise, print \\"Issue Detected\\". Examples Input 5 08:00 north green 08:01 east red 08:02 north red 08:03 east green 08:04 east red Output No Issues Input 6 08:00 north green 08:01 east green 08:02 north red 08:03 north green 08:04 east red 08:05 north red Output Issue Detected","solution":"def analyze_traffic_events(events): green_lights = set() for event in events: time, direction, state = event.split() if state == \\"green\\": if green_lights: return \\"Issue Detected\\" green_lights.add(direction) elif state == \\"red\\": green_lights.discard(direction) return \\"No Issues\\""},{"question":"Alan is given a list of N integers, which may contain duplicates. His task is to determine how many subarrays (contiguous subsequences) exist such that the sum of the subarray is equal to a given integer S. Alan wants to know how many such subarrays can be counted efficiently, as the brute-force approach can be too slow for large lists. Your task is to help Alan by writing a program that computes the total number of these subarrays. # Input The first line contains two integers N and S, indicating the length of the list and the target sum respectively. The second line contains N integers, representing the elements of the list. # Output Output a single integer, the number of subarrays whose sum is equal to the target sum S. # Examples Input: 5 9 2 3 4 2 1 Output: 2 Input: 4 0 1 -1 1 -1 Output: 4 # Explanation In the first example, there are two subarrays that sum up to 9: 1. The subarray starting at index 0 and ending at index 2: [2, 3, 4] = 9 2. The subarray starting at index 1 and ending at index 4: [3, 4, 2] = 9 In the second example, there are four subarrays that sum up to 0: 1. The subarray starting at index 0 and ending at index 1: [1, -1] = 0 2. The subarray starting at index 1 and ending at index 2: [-1, 1] = 0 3. The subarray starting at index 2 and ending at index 3: [1, -1] = 0 4. The subarray starting at index 0 and ending at index 3: [1, -1, 1, -1] = 0 # Constraints 1 ≤ N ≤ 10^5 -10^4 ≤ element of the list ≤ 10^4 -10^5 ≤ S ≤ 10^5","solution":"def count_subarrays_with_sum(nums, S): Returns the number of subarrays whose sum is equal to S. count = 0 current_sum = 0 sum_count = {0: 1} # To handle the case when subarray starts from index 0 for num in nums: current_sum += num # If current_sum - S exists in the sum_count dictionary, it means there\'s a subarray sum equal to S. if (current_sum - S) in sum_count: count += sum_count[current_sum - S] # Update the count of current_sum in the dictionary or initialize it if it doesn\'t exist if current_sum in sum_count: sum_count[current_sum] += 1 else: sum_count[current_sum] = 1 return count"},{"question":"Alice is a shipping manager for an e-commerce company. She needs to pack items into boxes for customer orders. Each box has a maximum weight capacity. Alice wants to distribute the items in such a way that the number of boxes used is minimized. Can you help her determine the minimum number of boxes required? You are given n items, where the weight of the i-th item is wi. You are also given the maximum weight capacity of a box, W. Write a function that takes in the weights of the items and the maximum box capacity, and returns the minimum number of boxes needed to pack all the items. Input: The input consists of two lines: 1. The first line contains two integers n and W, where 1 ≤ n ≤ 1000 and 1 ≤ W ≤ 10^9. 2. The second line contains n integers w1, w2, ..., wn, where 1 ≤ wi ≤ W, representing the weights of the items. Output: Output a single integer, which is the minimum number of boxes required to pack all the items. Examples: Input: 5 10 2 3 7 8 1 Output: 3 Input: 4 5 4 2 2 3 Output: 3","solution":"def min_boxes(n, W, weights): weights.sort(reverse=True) boxes = 0 while weights: capacity = W i = 0 while i < len(weights): if weights[i] <= capacity: capacity -= weights[i] weights.pop(i) else: i += 1 boxes += 1 return boxes"},{"question":"Jane is learning about prime numbers and wants to write a program to identify them. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Jane wants to generate all prime numbers less than a specified number. Write a program that takes an integer n and outputs all prime numbers less than n. Input An integer n. Output A list of prime numbers less than n, separated by a space. If no prime numbers exist less than n, output an empty string. Example 1 Input: 10 Output: 2 3 5 7 Example 2 Input: 3 Output: 2","solution":"def generate_primes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"A social media platform wants to analyze user engagement on their platform by understanding user comments and replies. Each user can post comments, and reply to other users\' comments, creating a hierarchical tree structure of comments and replies. You are given the task of analyzing this comment tree to determine the following for each post: 1. The maximum depth of comments. 2. The total number of comments (including replies). The comment structure is such that each comment has a unique ID and may have one or more replies. Input: The first line of the input contains t, the number of test cases. Each test case starts with an integer n, the number of comments. The next n lines describe the comments. Each comment is represented by a line containing two integers: id and parent_id. The id is the unique identifier of the comment, and parent_id is the ID of the comment to which this comment is a reply. If parent_id is 0, it means the comment is a direct comment on the post. Output: For each test case, output two integers: the maximum depth of comments and the total number of comments. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100000 1 ≤ id ≤ n 0 ≤ parent_id ≤ n It is guaranteed that parent_id of a direct comment is 0. SAMPLE INPUT 2 5 1 0 2 1 3 1 4 2 5 0 3 1 0 2 1 3 2 SAMPLE OUTPUT 3 5 3 3 Explanation: In the first test case, the maximum depth of the comments is 3 (1 -> 2 -> 4) and the total number of comments is 5. In the second test case, the maximum depth of the comments is 3 (1 -> 2 -> 3) and the total number of comments is 3.","solution":"from collections import defaultdict, deque def analyze_comments(t, test_cases): results = [] for case in test_cases: n, comments = case comment_tree = defaultdict(list) root_comments = [] total_comments = n for comment in comments: id, parent_id = comment if parent_id == 0: root_comments.append(id) else: comment_tree[parent_id].append(id) def get_max_depth(root): queue = deque([(root, 1)]) max_depth = 0 while queue: current, depth = queue.popleft() max_depth = max(max_depth, depth) for child in comment_tree[current]: queue.append((child, depth + 1)) return max_depth max_depth = 0 for root in root_comments: max_depth = max(max_depth, get_max_depth(root)) results.append((max_depth, total_comments)) return results # Function to extract the input and pass it to the analyze_comments function def process_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) comments = [] for i in range(n): id, parent_id = map(int, lines[index + 1 + i].split()) comments.append((id, parent_id)) index += n + 1 test_cases.append((n, comments)) return analyze_comments(t, test_cases) # Function to convert output list into the specified output format def format_output(output): return \\"n\\".join(f\\"{depth} {count}\\" for depth, count in output) # Main function def main(input_str): output = process_input(input_str) return format_output(output)"},{"question":"Problem Statement A spaceship in a sci-fi game has a circular track, and every unit along the track contains different resources. The track is divided into N units, numbered from 1 to N. To avoid detection by alien enemies, the spaceship can jump from any unit to the Kth next unit in a single move. If it reaches the end of the track, it loops back to the start (i.e., if the spaceship is at unit N, it moves to unit 1 after jumping). Given the number of units N, the starting unit S, and the jump distance K, determine the position of the spaceship after M jumps. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of one line containing four space-separated integers N, S, K, and M, respectively. Output For each test case, output a single integer indicating the final position of the spaceship after M jumps. Constraints 1 ≤ T ≤ 100000 1 ≤ N ≤ 10^18 1 ≤ S, K, M ≤ N Example Input: 2 6 2 3 4 10 5 7 1 Output: 2 2","solution":"def spaceship_final_position(N, S, K, M): Returns the final position of the spaceship after M jumps. N: int : Total number of units on the track S: int : Starting position (1-based index) K: int : Jump distance M: int : Number of jumps # Calculating the final position final_pos = (S + M * K - 1) % N + 1 return final_pos def solve(test_cases): Process multiple test cases and return the results. test_cases: list of tuples : Each tuple contains four integers: (N, S, K, M) results = [] for case in test_cases: N, S, K, M = case results.append(spaceship_final_position(N, S, K, M)) return results"},{"question":"You are a digital librarian organizing a collection of library books. Each book is represented as a unique identifier string consisting of uppercase letters and digits. Due to an error in your system, some book records were duplicated, and now every book’s identifier appears exactly twice in your list. Your task is to identify and remove one instance of each duplicated book identifier and then sort the remaining list in alphabetical order. Write a program to identify and remove the duplicates in the list and produce a sorted list of unique book identifiers. Input The input consists of a single line that contains a space-separated list of book identifiers. Each identifier is an uppercase letter or digit string with a maximum length of 10 characters. There will be at least two entries of each book identifier in the input, and the total number of book identifiers does not exceed 1000. Output Output a space-separated sorted list of unique book identifiers. Example Input AB123 CD456 EF789 AB123 CD456 EF789 X0X0X X0X0X Output AB123 CD456 EF789 X0X0X","solution":"def unique_sorted_books(identifiers_str): This function takes a space-separated string of book identifiers, removes duplicates, and returns a space-separated sorted string of unique book identifiers. # Split the input string into list of book identifiers. identifiers_list = identifiers_str.split() # Use set to remove duplicates. unique_identifiers = set(identifiers_list) # Convert the set back to a sorted list. sorted_unique_identifiers = sorted(unique_identifiers) # Join the sorted list back into a space-separated string. return \' \'.join(sorted_unique_identifiers)"},{"question":"Write a function that simulates a basic dice game and determines the winner. The game follows these rules: 1. There are two players: Player 1 and Player 2. 2. Each player rolls two six-sided dice. 3. The sum of the values on the two dice determines the player\'s score. 4. The player with the higher score wins. If there is a tie, neither player wins. Your task is to implement the function `dice_game(player1_rolls, player2_rolls)`. It should take two lists of integers as arguments. The first list, `player1_rolls`, contains two integers representing the results of Player 1\'s dice rolls. The second list, `player2_rolls`, contains two integers representing the results of Player 2\'s dice rolls. The function should return a string indicating the result of the game: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"Tie\\". # Input `player1_rolls`: A list of length 2 with integers between 1 and 6, inclusive. `player2_rolls`: A list of length 2 with integers between 1 and 6, inclusive. # Output A string that states the result of the game: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"Tie\\". # Example ```python assert dice_game([3, 5], [2, 6]) == \\"Player 1 wins\\" assert dice_game([1, 1], [2, 2]) == \\"Player 2 wins\\" assert dice_game([4, 4], [3, 5]) == \\"Tie\\" ``` # Requirements - Define the function `dice_game(player1_rolls, player2_rolls)`. - Ensure the function handles all valid inputs correctly. - Do not use any external libraries. - Optimized for readability and efficiency.","solution":"def dice_game(player1_rolls, player2_rolls): Determines the winner of a basic dice game based on the sum of two rolls for each player. Args: player1_rolls (list of int): A list with two integers representing Player 1\'s dice rolls. player2_rolls (list of int): A list with two integers representing Player 2\'s dice rolls. Returns: str: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"Tie\\" based on the sum of the rolls. player1_score = sum(player1_rolls) player2_score = sum(player2_rolls) if player1_score > player2_score: return \\"Player 1 wins\\" elif player2_score > player1_score: return \\"Player 2 wins\\" else: return \\"Tie\\""},{"question":"Given a string, determine if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards, while a permutation is a rearrangement of letters. The input string may contain spaces and is case insensitive. Input: The first line of the input contains an integer T, which denotes the number of test cases. Each test case contains a single line string. Output: For each test case, output \\"YES\\" if the string is a permutation of a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ length of string ≤ 100 SAMPLE INPUT 3 Tact Coa Hello A man a plan a canal Panama SAMPLE OUTPUT YES NO YES","solution":"def is_permutation_of_palindrome(s): Determines if the input string is a permutation of a palindrome. Parameters: s (str): The input string. Returns: str: \\"YES\\" if the string is a permutation of a palindrome, otherwise \\"NO\\". s = s.replace(\\" \\", \\"\\").lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count <= 1: return \\"YES\\" else: return \\"NO\\" def process_inputs(T, cases): Process multiple test cases to determine if each string is a permutation of a palindrome. Parameters: T (int): The number of test cases. cases (list of str): List of test case strings. Returns: list of str: List of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for case in cases: result = is_permutation_of_palindrome(case) results.append(result) return results"},{"question":"Hiro is a diligent student who loves puzzles, and one day he came across an interesting problem involving strings. He has a set of n strings, and he wants to find out if there exists a common subsequence of length k among all these strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Can you help Hiro determine if such a common subsequence of length k exists for all given strings? Input The first line of input contains two integers, n and k (1 ≤ k ≤ 100, 1 ≤ n ≤ 100), the number of strings and the desired length of the common subsequence, respectively. The next n lines contain one string each. Each string is composed of lowercase Latin letters and has a length of at most 1000. Output Output \\"YES\\" if there exists a common subsequence of length k among all given strings, otherwise output \\"NO\\". Examples Input 3 2 abc bac cab Output YES Input 2 3 abcdef ghijkl Output NO Note In the first test case, one possible common subsequence of length 2 is \\"ab\\". In the second test case, there are no common subsequences of length 3, thus the output is \\"NO\\".","solution":"def exists_common_subsequence(n, k, strings): Determines if there exists a common subsequence of length k among all given strings. from collections import Counter # Function to count the character frequencies for each string def get_char_counts(s): counts = Counter(s) return counts # Start with the character frequencies from the first string common_counts = get_char_counts(strings[0]) # Intersect counts with every other string for s in strings[1:]: current_counts = get_char_counts(s) common_counts &= current_counts # Sum the remaining counts and check if there are at least k characters left total_common_chars = sum(common_counts.values()) # If we find k or more common characters, then a common subsequence of length k is possible return \\"YES\\" if total_common_chars >= k else \\"NO\\" # Example usage: # n, k = 3, 2 # strings = [\\"abc\\", \\"bac\\", \\"cab\\"] # print(exists_common_subsequence(n, k, strings)) # Output: YES"},{"question":"You have a list of n integers where each integer appears either once or twice. Your task is to identify and return a list of all integers that appear exactly once. To help you with an efficient solution, you may use a dictionary to count the occurrences of each integer. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of integers in the input list. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the given list of integers. Output Print the integers that appear exactly once in the original order they appeared in the input list. If there are no such integers, print an empty list. Examples Input 5 4 3 2 4 3 Output 2 Input 4 1 2 3 1 Output 2 3 Input 6 6 1 3 1 3 6 Output []","solution":"def find_unique_elements(n, arr): Given a list of integers where each integer appears either once or twice, identifies and returns a list of all integers that appear exactly once. Parameters: n (int): Number of integers in the list. arr (list[int]): List of integers. Returns: list[int]: List of integers that appear exactly once in the original order. from collections import Counter count = Counter(arr) result = [x for x in arr if count[x] == 1] return result"},{"question":"You are given an array `a` of size `n` which initially contains only zeros. You need to process `m` operations. Each operation is described by three integers: `l`, `r` and `x`. For each operation, you need to add `x` to each element of the array from index `l` to index `r` (inclusive). After executing all operations, print the final state of the array. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 105). Each of the next m lines contains three integers l, r and x (1 ≤ l ≤ r ≤ n, -109 ≤ x ≤ 109). Output Output a single line containing n integers separated by spaces, which are the elements of the final array after all operations. Examples Input 5 3 1 3 2 2 4 -1 1 5 3 Output 5 4 4 2 3 Input 4 2 1 2 1 3 4 2 Output 1 1 2 2","solution":"def process_operations(n, m, operations): Process `m` operations on an array of size `n` initialized with zeros. Parameters: - n: Size of the array. - m: Number of operations. - operations: List of operations, each operation is a tuple (l, r, x). Returns: A list representing the final state of the array after all operations. arr = [0] * n for l, r, x in operations: for i in range(l-1, r): arr[i] += x return arr"},{"question":"A transportation company wants to optimize their delivery route network between cities. The network of cities is represented by a graph where each node is a city, and each edge represents a direct road between two cities. Due to some political and logistical constraints, the company needs to ensure that the network forms a valid tree and adheres to the following multi-step operation: 1. Choose three cities a, b, and c such that b is directly connected to both a and c. 2. Remove the road between a and b. 3. Add a new road between a and c if it doesn’t exist. 4. For every city d directly connected to b (except city a), remove the road between d and b if it exists, and add a direct road between d and c if it doesn’t exist already. Given the constraints and the current network, you are to determine the minimum number of such multi-step operations needed to transform the current tree network into a structure known as a \\"Bus Center\\". A Bus Center is defined as a tree where one city is directly connected to all other cities, and those cities are only connected to this central city. Input: - The first line contains an integer n (3 ≤ n ≤ 200,000) — the number of cities. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating a direct road between cities u and v. It is guaranteed that the given roads form a tree. Output: - Print a single integer — the minimum number of operations required to transform the tree into a Bus Center. Example: Input: 8 1 2 1 3 2 4 2 5 3 6 3 7 3 8 Output: 2 Explanation: - The initial tree can be restructured to form a Bus Center using minimum operations. One way to do this is: - First, choose cities (1, 2, 3) and perform the operation. The tree changes as follows: * Remove road 1-2 * Add road 1-3 (already exists) * For cities (4, 5) connected to 2: - Remove road 4-2, add road 4-3 - Remove road 5-2, add road 5-3 - Now the tree looks like: 3-1, 3-6, 3-7, 3-8, 3-4, 3-5 - Next, choose cities (3, 1, 8) and perform the operation. The tree changes as follows: * Remove road 3-1 * Add road 3-8 (already exists) * For city 3 that remains, it forms the central node. - This results in a Bus Center network. The minimum number of operations needed is 2.","solution":"def count_operations(n, roads): # We need the degree of each node degree_count = [0] * (n + 1) for u, v in roads: degree_count[u] += 1 degree_count[v] += 1 # Compute the number of multi-step operations needed # Which is the number of nodes that aren\'t leaf nodes (degree > 1) minus 1 non_leaf_count = sum(1 for d in degree_count if d > 1) return max(0, non_leaf_count - 1)"},{"question":"A software company wants to optimize its task scheduling for a group of workers. Each worker can perform only one task at a time, and a task cannot be interrupted once started. The tasks have specific dependencies which must be respected, meaning a task can only start once all its prerequisite tasks are completed. Each task is described by a pair of integers (D, W), where D is the amount of time required to complete the task, and W is the worker assigned to that task. The dependencies between the tasks are given as a list of pairs (A, B), meaning task B can only start after task A has been completed. Your mission is to calculate the minimum amount of overall time required to complete all tasks given the constraints. Input The input contains multiple datasets. Each dataset has the following format: N D1 W1 D2 W2 . . . DN WN M A1 B1 A2 B2 . . . AM BM The first line of a dataset contains a positive integer N (1 ≤ N ≤ 1000), indicating the number of tasks. Each of the following N lines describes a task with two integers Di and Wi (1 ≤ Di ≤ 1000, 1 ≤ Wi ≤ 100), where Di indicates the time required to complete the task, and Wi indicates the worker assigned to perform the task. The next line contains a positive integer M (0 ≤ M ≤ 1000), indicating the number of dependencies between tasks. Each of the following M lines describes a dependency with two integers Ai and Bi (1 ≤ Ai, Bi ≤ N), indicating that task Bi can only start after task Ai is completed. The end of input is indicated by a line containing a single zero. This line is not part of any dataset and hence should not be processed. Output For each dataset, print the minimum overall time required to complete all tasks in a line. Example Input 3 10 1 20 2 30 3 2 1 2 2 3 4 5 1 10 1 15 2 20 2 3 1 2 1 3 2 4 5 10 1 5 2 20 1 15 2 10 3 4 1 2 1 3 3 4 4 5 0 Output 60 35 55","solution":"def find_minimum_time_to_complete_tasks(N, tasks, M, dependencies): from collections import defaultdict, deque # Build adj list and indegree map adj_list = defaultdict(list) indegree = [0] * (N + 1) task_time = [0] * (N + 1) worker_time = defaultdict(int) for i in range(N): Di, Wi = tasks[i] task_time[i + 1] = Di worker_time[i + 1] = 0 for dep in dependencies: A, B = dep adj_list[A].append(B) indegree[B] += 1 # Topological sort using Kahn\'s algorithm queue = deque() for i in range(1, N + 1): if indegree[i] == 0: queue.append(i) worker_time[i] += task_time[i] while queue: task = queue.popleft() current_end_time = worker_time[task] for neighbor in adj_list[task]: indegree[neighbor] -= 1 worker_time[neighbor] = max(worker_time[neighbor], current_end_time + task_time[neighbor]) if indegree[neighbor] == 0: queue.append(neighbor) # Overall completion time is the maximum finish time for any task return max(worker_time.values()) def process_input(input_list): index = 0 results = [] while index < len(input_list): N = int(input_list[index]) if N == 0: break index += 1 tasks = [] for _ in range(N): tasks.append(tuple(map(int, input_list[index].split()))) index += 1 M = int(input_list[index]) index += 1 dependencies = [] for _ in range(M): dependencies.append(tuple(map(int, input_list[index].split()))) index += 1 result = find_minimum_time_to_complete_tasks(N, tasks, M, dependencies) results.append(result) return results def main(): import sys input = sys.stdin.read().strip().split(\'n\') results = process_input(input) for result in results: print(result) if __name__ == \'__main__\': main()"},{"question":"Given an undirected graph with n nodes and m edges, a path in the graph is considered a \\"special path\\" if it visits every node exactly once and returns to the starting node, forming a cycle known as a Hamiltonian cycle. Your task is to determine whether such a special path exists in the graph. Input The first line of the input contains two integers n (1 ≤ n ≤ 15) and m (0 ≤ m ≤ n(n-1)/2) — the number of nodes and edges in the graph. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is an edge between nodes u and v. All edges are unique and undirected. Output If a Hamiltonian cycle exists in the graph, output \\"Yes\\". Otherwise, output \\"No\\". Examples Input 4 6 1 2 2 3 3 4 4 1 1 3 2 4 Output Yes Input 4 4 1 2 2 3 3 4 1 3 Output No Note In the first sample, the Hamiltonian cycle can be 1-2-4-3-1 or any permutation leading to the same cycle. In the second sample, there is no way to visit all nodes exactly once and return to the starting node.","solution":"from itertools import permutations def is_hamiltonian_cycle(n, edges): graph = {i: set() for i in range(1, n+1)} for u, v in edges: graph[u].add(v) graph[v].add(u) nodes = list(graph.keys()) for start in nodes: for perm in permutations(nodes): if perm[0] != start: continue is_cycle = True for i in range(n): if perm[i] not in graph[perm[(i+1) % n]]: is_cycle = False break if is_cycle: return \\"Yes\\" return \\"No\\" def hamiltonian_path_exists(n, m, edges): return is_hamiltonian_cycle(n, edges)"},{"question":"You are given an array of n positive integers a_1, a_2, ..., a_n. You need to perform a series of operations to make all the elements in the array equal. In each operation, you can select any subarray (contiguous part of the array) and increase all the elements in that subarray by 1. Your task is to determine the minimum number of operations needed to make all the elements of the array equal. Input The first line contains one integer n, the number of elements in the array (1 ≤ n ≤ 2 ⋅ 10^5). The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), which are the elements of the array. Output Print one integer — the minimum number of operations needed to make all the elements of the array equal. Examples Input 5 1 2 3 4 5 Output 4 Input 3 5 5 5 Output 0 Note In the first example, you can perform the following operations to make all elements equal: - Increment the subarray [1, 2, 3, 4, 5] by 1 resulting in [2, 3, 4, 5, 6]. - Increment the subarray [2, 3, 4, 5] by 1 resulting in [2, 4, 5, 6, 6]. - Increment the subarray [3, 4, 5] by 1 resulting in [2, 4, 6, 6, 6]. - Increment the subarray [4, 5] by 1 resulting in [2, 4, 6, 7, 7]. - Increment the subarray [5] by 1 resulting in [2, 4, 6, 7, 8]. In total, it took 4 operations to make all elements equal. In the second example, all elements are already equal, so no operation is needed.","solution":"def min_operations_to_equalize(arr): Calculate the minimum number of operations needed to make all the elements of the array equal. Parameters: arr (list of int): List of integers. Returns: int: Minimum number of operations. max_val = max(arr) min_val = min(arr) return max_val - min_val"},{"question":"You are given two words. The first word is a source and the second word is the target. Your task is to determine if the source can be transformed into the target by rearranging its letters and performing a set of character substitutions. A character substitution involves replacing one character in the source word with another character, and it is applied on a single character position. Each character substitution can only involve two distinct characters (e.g., \'a\' to \'b\' but not \'a\' to \'b\' and back to \'a\') and must be consistent throughout the transformation process. Write a program to check if it is possible to transform the source word into the target word by rearranging its letters and applying zero or more character substitutions as described above. Input - The first line contains the source word (a string of lowercase alphabets, 1 ≤ length of the source word ≤ 100). - The second line contains the target word (a string of lowercase alphabets, 1 ≤ length of the target word ≤ 100). Output - Print \\"YES\\" if it is possible to transform the source into the target. Otherwise, print \\"NO\\". Examples Input listen silent Output YES Input aaab aabc Output NO Input triangle integral Output YES","solution":"def can_transform(source, target): if len(source) != len(target): return \\"NO\\" source_sorted = sorted(source) target_sorted = sorted(target) if source_sorted != target_sorted: return \\"NO\\" return \\"YES\\" # Example Usage: source_word = \\"listen\\" target_word = \\"silent\\" print(can_transform(source_word, target_word)) # Output: YES"},{"question":"Mr. Tanaka is planning to fill some empty boxes with candies and distribute them among his friends. Each box must contain distinct types of candies, and each type of candy can only be present in one box. Additionally, the total number of candies in boxes must be unique across all the boxes. Write a program to calculate the number of possible ways to fill the boxes under the given conditions. input Two integers M and L are given, separated by spaces. output Output the number of ways to fill the boxes. Constraint * M is the total number of distinct candies available, and it is an integer greater than or equal to 1 and less than or equal to 1 000 * L is the number of boxes to be filled, and it is an integer greater than or equal to 1 and less than or equal to M Input example 1 5 2 Output example 1 10 There are 10 ways to fill the boxes: (1, 4), (1, 5), (2, 3), (2, 5), (3, 5), (2, 6), (3, 6), (3, 7), (4, 5), (4, 6). Input example 2 7 3 Output example 2 35 When M = 7 and L = 3, there are 35 ways to fill the boxes uniquely. Example Input 5 2 Output 10","solution":"def count_ways(M, L): from itertools import combinations # Generate all possible ways to distribute distinct sums to L boxes using candies from 1 to M # We generate all unique combinations of L elements from range(1, M+1) and count them candies = range(1, M + 1) return len(list(combinations(candies, L)))"},{"question":"You are given a string `s` of length `n` consisting of uppercase letters (\'A\'-\'Z\'). We define the \\"beauty\\" of a string as the maximum frequency of any character in the string. Your task is to calculate the minimum possible beauty of any substring from `s` after you are allowed at most `k` operations of changing any character in the string to any other character. Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ n), the length of the string and the number of allowed changes respectively. - The second line contains the string `s` of length `n`. Output - Print a single integer — the minimum possible beauty of any substring after at most `k` changes. Examples Input 5 1 ABABA Output 1 Input 6 2 AABCCD Output 1 Input 4 0 ABCD Output 1 Note In the first example, we can change one \'A\' to \'B\' or one \'B\' to \'A\', so the minimum possible beauty for any substring is 1. In the second example, by changing two \'A\'s to \'B\'s creates the string \'BBBBCC\'. The beauty of any substring will still be 2, but with only one allowed change, we can achieve a beauty of 1 by changing one \'A\' to \'B\', i.e. \'ABBBBB\'. In the third example, as there are no changes allowed, the minimum possible beauty remains 1 for any single character substring.","solution":"def min_possible_beauty(n, k, s): Calculates the minimum possible beauty of any substring from `s` with at most `k` changes. Parameters: n (int): The length of the string. k (int): The number of allowed changes. s (str): The input string consisting of uppercase letters. Returns: int: The minimum possible beauty of any substring. return 1"},{"question":"The inhabitants of a remote village follow a peculiar tradition for their annual celebration. They build a long fence using several wooden posts aligned in a straight row. Each post has a height described in an array where `heights[i]` represents the height of the i-th post. The villagers consider the fence aesthetically pleasing if the difference in height between any two adjacent posts is exactly 1. Your task is to determine the minimum number of posts that need to be either increased or decreased in height by 1 unit to make the entire fence aesthetically pleasing. Write a function to achieve this. The function should take in the number of posts `n` and an array `heights` of length `n`, and return the minimum number of adjustments required. # Input - An integer `n` (2 ≤ n ≤ 10^5) representing the number of wooden posts. - An array `heights` of length `n`, where `heights[i]` (1 ≤ heights[i] ≤ 10^9) represents the height of the i-th post. # Output - A single integer representing the minimum number of adjustments required. # Example Input: ``` 5 3 2 2 3 4 ``` Output: ``` 1 ``` Input: ``` 4 1 3 5 7 ``` Output: ``` 3 ``` # Note - In the first example, `heights` can be adjusted to [3, 2, 3, 4, 3] with one adjustment. - In the second example, `heights` can be adjusted to [1, 2, 3, 4] with three adjustments.","solution":"def min_adjustments(n, heights): Determine the minimum number of adjustments required to make the fence aesthetically pleasing. Args: n (int): Number of posts. heights (list): List of heights of the posts. Returns: int: Minimum number of adjustments required. adjustments = 0 for i in range(1, n): if abs(heights[i] - heights[i-1]) != 1: adjustments += 1 return adjustments"},{"question":"You are tasked with developing a management tool for a library\'s book inventory. The library has many different books, each identified by a unique book ID. Each book also has a genre, an author, and a title. Your task is to find which author has written the most books for a given genre. The input is given as a list of books. Each book\'s data is provided on a separate line with four values: the book ID (a positive integer), the title (a sequence of words separated by spaces), the author (a sequence of words separated by spaces), and the genre (a sequence of words separated by spaces). The four values are separated by a semicolon \';\'. All titles, authors, and genres consist of only English letters and are case-insensitive. That means \\"science fiction\\" and \\"Science Fiction\\" should be considered equivalent. Your program must find the author who has written the most books in a given genre. If there is a tie, return the author\'s name that comes first lexicographically. Input A positive integer n, the number of books. Followed by n lines, each containing information about a book in the format: `book_id; title; author; genre` A string g representing the genre you are interested in. Output The name of the author who has written the most books in the given genre, in lowercase. Constraints 1 ≤ n ≤ 100 1 ≤ len(book_id) ≤ 10 1 ≤ len(title) ≤ 100 1 ≤ len(author) ≤ 100 1 ≤ len(genre) ≤ 100 Example Input 5 123; The Great Gatsby; F. Scott Fitzgerald; Fiction 124; To Kill a Mockingbird; Harper Lee; Fiction 125; The Old Man and the Sea; Ernest Hemingway; Fiction 126; A Farewell to Arms; Ernest Hemingway; Fiction 127; Moby Dick; Herman Melville; Fiction fiction Output ernest hemingway Input 4 101; The Double Helix; James Watson; Science 102; A Brief History of Time; Stephen Hawking; Science 103; The Selfish Gene; Richard Dawkins; Science 104; Cosmos; Carl Sagan; Science science Output carl sagan","solution":"def find_top_author_by_genre(n, book_entries, genre): from collections import defaultdict genre = genre.strip().lower() author_count = defaultdict(int) for entry in book_entries: book_id, title, author, book_genre = entry.split(\';\') book_genre = book_genre.strip().lower() author = author.strip().lower() if book_genre == genre: author_count[author] += 1 # Finding the author with the maximum count and handling ties lexicographically top_author = min((author for author in author_count.keys() if author_count[author] == max(author_count.values())), default=\'\', key=lambda a: (author_count[a],a)) return top_author.lower()"},{"question":"Vanya is developing a small scientific calculator application. The calculator needs to be able to perform some basic arithmetic operations such as addition, subtraction, multiplication, and division. Moreover, it should also support evaluating simple mathematical expressions in infix notation with parentheses to denote the precedence of operations. The calculator should adhere to the following rules: 1. The input expression is a valid mathematical expression. 2. The expression may include positive integers, the operators \'+\', \'-\', \'*\', \'/\', and parentheses \'(\' and \')\'. 3. There are no unary operators; every operator will have both left and right operands. 4. Operands and operators are separated by a single space. 5. The intermediate and final results of the operations will always be integers. The task is to evaluate each given expression and return the result. Input The input starts with an integer n (1 ≤ n ≤ 50) — the number of expressions to evaluate. The following n lines each contain a single expression in infix notation. Output For each expression, print the arithmetic result as an integer on a new line. Example Input 5 3 + 5 10 + 2 * 6 100 * 2 + 12 100 * ( 2 + 12 ) 100 * ( 2 + 12 ) / 4 Output 8 22 212 1400 350","solution":"def evaluate_expression(expression): Evaluates a single mathematical expression in infix notation with parentheses. return eval(expression) def evaluate_expressions(n, expressions): Evaluates multiple mathematical expressions in infix notation, given the number of expressions n. Returns a list of results. results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results"},{"question":"You are provided with a set of integers. Your task is to answer queries about the number of distinct integers within a certain range. For each query \\"l r\\" (1-indexed inclusive), you need to output the number of distinct integers in the subarray from index l to r. INPUT The first line contains two integers \\"n\\" (the length of the array) and \\"q\\" (the number of queries). The second line contains \\"n\\" integers representing the elements of the array. Each of the next \\"q\\" lines contains two integers \\"l\\" and \\"r\\" indicating the range of the query. OUTPUT For each query, output a single integer on a new line, representing the number of distinct integers in the specified subarray. CONSTRAINTS 1 ≤ n, q ≤ 100000 1 ≤ the value of array elements ≤ 100000 1 ≤ l ≤ r ≤ n SAMPLE INPUT 5 3 1 2 1 3 2 1 3 2 4 1 5 SAMPLE OUTPUT 2 3 3","solution":"def distinct_count_in_range(arr, queries): # array of unique counts generated for each index from collections import defaultdict n = len(arr) last_seen = {} next_occurrence = [n] * n # back to front to quickly lookup the next occurrence of each element for idx in reversed(range(n)): item = arr[idx] if item in last_seen: next_occurrence[idx] = last_seen[item] last_seen[item] = idx # Creating segment tree class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): left += self.n right += self.n s = 0 while left < right: if left % 2 == 1: s += self.tree[left] left += 1 if right % 2 == 1: right -= 1 s += self.tree[right] left //= 2 right //= 2 return s st = SegmentTree([0] * n) # Initialize result result = [] # Process each query for l, r in queries: l -= 1 r -= 1 # cover the range l to r for i in range(l, r + 1): if next_occurrence[i] > r: # If the next occurrence is outside the range st.update(i, 1) else: st.update(i, 0) result.append(st.range_sum(l, r + 1)) # Revert back the changes for i in range(l, r + 1): st.update(i, 0) return result # Example usage: arr = [1, 2, 1, 3, 2] queries = [(1, 3), (2, 4), (1, 5)] result = distinct_count_in_range(arr, queries) for res in result: print(res) # Output: 2 3 3"},{"question":"A popular online store was having its annual sale. Each sale gives a certain discount, and participants can stack multiple discounts for their total purchase. Design a program that reads the number of participants and their discount events, and outputs the participant number and their current total discount after each event. If there are multiple participants with the highest discount amount, output the one with the lowest participant number. input The input is given in the following format. n q p1 d1 p2 d2 :: pq dq n (1 ≤ n ≤ 1000) represents the number of participants and q (1 ≤ q ≤ 100000) represents the number of discount events. pi (1 ≤ pi ≤ n) di (1 ≤ di ≤ 100) indicates that participant pi gets a discount of di at the i-th event. output For each event, output the participant number and their current total discount that has the highest value among all participants. If multiple participants have the highest total discount, output the one with the lowest participant number. Example Input 4 5 1 20 2 15 3 30 1 25 4 50 Output 1 20 1 20 3 30 1 45 4 50","solution":"def sale_discount_tracker(n, q, events): Tracks the highest discount holder among participants across several discount events. :param n: int : number of participants :param q: int : number of discount events :param events: List of tuples : each tuple contains (participant, discount) for an event :return: List of tuples : each tuple contains the participant number and their total discount holding the highest discount after each event # Initialize discounts for all participants discount_totals = [0] * (n + 1) results = [] for participant, discount in events: discount_totals[participant] += discount # Calculate the participant with the highest discount max_discount = -1 max_participant = -1 for i in range(1, n + 1): if discount_totals[i] > max_discount or (discount_totals[i] == max_discount and i < max_participant): max_discount = discount_totals[i] max_participant = i results.append((max_participant, discount_totals[max_participant])) return results"},{"question":"John is organizing a marathon where participants have unique positive integer IDs. The IDs represent the number of seconds they took to complete the marathon. John wants to congratulate participants who took a prime number of seconds. Write a program that takes a list of participant IDs and identifies IDs that are prime numbers. Input Format The first line contains a single integer N, the number of participants. The next line contains N integers: ID(0), ID(1), ..., ID(N-1) separated by space, where ID(i) represents the ID of the i-th participant. Output Format Print all the participant IDs that are prime numbers, each on a new line. If there are no prime IDs, print \\"No prime IDs found\\". Constraints 1 ≤ N ≤ 1000 1 ≤ ID(i) ≤ 100000 SAMPLE INPUT 5 23 29 15 18 10 SAMPLE OUTPUT 23 29","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def find_prime_ids(participant_ids): This function takes a list of participant IDs and returns a list of prime IDs. prime_ids = [ID for ID in participant_ids if is_prime(ID)] return prime_ids if prime_ids else [\\"No prime IDs found\\"] # Example usage: # participant_ids = [23, 29, 15, 18, 10] # result = find_prime_ids(participant_ids) # for ID in result: # print(ID)"},{"question":"``` You are given a list of numbers representing the daily prices of a particular stock. You are a trader and can only make one transaction, meaning you can buy and then later sell one share of the stock. Your goal is to maximize your profit. Write a function that determines the maximum profit you can achieve from this single transaction. If no profit is possible, return 0. Constraints: * The array will have at least one price. * Each price is a positive integer. Input: An array of integers representing the stock prices. Output: An integer representing the maximum profit you can achieve from a single transaction, or 0 if no profit is possible. Examples: Input: [7, 1, 5, 3, 6, 4] Output: 5 Input: [7, 6, 4, 3, 1] Output: 0 Input: [1, 2, 3, 4, 5] Output: 4 Input: [3, 3, 3, 3, 3] Output: 0 ```","solution":"def max_profit(prices): Determines the maximum profit from a single buy/sell transaction. :param prices: List of integers representing stock prices. :return: Integer representing the maximum profit, or 0 if no profit is possible. if len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price if price < min_price: min_price = price # Calculate the potential profit and update the maximum profit potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Karina loves strings and specially binary strings. She considers a binary string beautiful if it does not contain two consecutive zeros. For example, \\"1101\\" and \\"1010\\" are beautiful strings, but \\"1001\\" and \\"0110\\" are not. Given an integer n, Karina wants to know the number of beautiful binary strings of length n. As the number of such strings can be quite large, return the result modulo 1000000007 (10^9 + 7). Input The first line contains an integer t representing the number of test cases (1 ≤ t ≤ 1000). Each of the next t lines contains a single integer n (1 ≤ n ≤ 105). Output For each test case, output a single integer in a new line representing the number of beautiful binary strings of length n modulo 1000000007. Example Input 3 3 4 5 Output 5 8 13 Explanation For the first query, the beautiful strings of length 3 are \\"101\\", \\"110\\", \\"111\\", \\"010\\", \\"011\\". Hence, the answer is 5. For the second query, the beautiful strings of length 4 are \\"1010\\", \\"1011\\", \\"1101\\", \\"1110\\", \\"1111\\", \\"0101\\", \\"0110\\", \\"0111\\". Hence, the answer is 8. For the third query, the beautiful strings of length 5 are \\"10101\\", \\"10110\\", \\"10111\\", \\"11010\\", \\"11011\\", \\"11101\\", \\"11110\\", \\"11111\\", \\"01010\\", \\"01011\\", \\"01101\\", \\"01110\\", \\"01111\\". Hence, the answer is 13.","solution":"MOD = 1000000007 def count_beautiful_strings(n): if n == 1: return 2 elif n == 2: return 3 dp = [0] * (n + 1) dp[1] = 2 dp[2] = 3 for i in range(3, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n] def find_beautiful_strings(test_cases): results = [] for n in test_cases: results.append(count_beautiful_strings(n)) return results"},{"question":"Ravi is working on a sequence of binary strings for his computer science project. He needs to ensure that each binary string in the sequence is balanced. A balanced binary string is one where the number of 1\'s is equal to the number of 0\'s. Ravi needs your assistance to find out if it\'s possible to rearrange the characters in each binary string so that it becomes balanced. INPUT: First line contains an integer T denoting the number of binary strings. Next T lines contain T binary strings each consisting of only characters \'0\' and \'1\'. OUTPUT: For each test case, print \\"YES\\" if it is possible to rearrange the string to make it balanced, otherwise print \\"NO\\". CONSTRAINTS: 1 ≤ T ≤ 10^3 1 ≤ length of each binary string ≤ 100 SAMPLE INPUT 4 1100 1010 1111 1001 SAMPLE OUTPUT YES YES NO YES Explanation: In test case 1: The string \\"1100\\" can be rearranged to \\"1010\\", which is balanced. In test case 2: The string \\"1010\\" is already balanced. In test case 3: The string \\"1111\\" cannot be rearranged to balance as it contains only 1\'s. In test case 4: The string \\"1001\\" can be rearranged to \\"1010\\", which is balanced.","solution":"def is_balanced(binary_string): Returns \\"YES\\" if the binary string can be rearranged to make it balanced, otherwise \\"NO\\". count_0 = binary_string.count(\'0\') count_1 = binary_string.count(\'1\') return \\"YES\\" if count_0 == count_1 else \\"NO\\" def check_balanced_binary_strings(T, binary_strings): For each binary string in binary_strings list, returns the list of results determining if they can be rearranged to make balanced. results = [] for binary_string in binary_strings: results.append(is_balanced(binary_string)) return results"},{"question":"Input The input contains a single string s consisting of lowercase and uppercase alphabetic characters (\'a\'-\'z\', \'A\'-\'Z\'). Output Output a single integer which is the sum of all the alphabetical positions of each letter in the string. The position of \'a\' is 1, \'b\' is 2, ..., \'z\' is 26. Similarly, the position of \'A\' is 1, \'B\' is 2, ..., \'Z\' is 26. Examples Input \\"abc\\" Output 6 Input \\"AbcD\\" Output 10 Input \\"Zzz\\" Output 78","solution":"def alphabetical_position_sum(s): Returns the sum of all the alphabetical positions of each letter in the string. Parameters: s (str): input string containing lowercase and uppercase alphabetic characters Returns: int: sum of alphabetical positions # Calculate the sum of alphabetical positions of the characters in the string return sum((ord(char.lower()) - ord(\'a\') + 1) for char in s if char.isalpha())"},{"question":"You are given an array of integers. Find the second largest value in the array. If the array doesn\'t have at least two distinct values, return \\"No Second Largest\\". Constraints * The length of the array is between 1 and 1000. * The elements of the array are integers between -1000 and 1000. Input Input is given from Standard Input in the following format: n a1 a2 ... an Output Print the second largest value in the array or \\"No Second Largest\\" if it doesn\'t exist. Examples Input 5 2 3 6 6 5 Output 5 Input 3 1 1 1 Output No Second Largest Input 1 7 Output No Second Largest","solution":"def find_second_largest(n, array): Finds the second largest value in the array. If the array doesn\'t have at least two distinct values, returns \\"No Second Largest\\". if n < 2: return \\"No Second Largest\\" unique_values = list(set(array)) if len(unique_values) < 2: return \\"No Second Largest\\" unique_values.sort() return unique_values[-2]"},{"question":"Sheldon’s Friendship Algorithm Sheldon, Leonard, and their friends are obsessed with numbers and prime sequences. They\'ve come up with a new challenge and they need your help. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A prime sequence is a series of prime numbers in ascending order. Sheldon’s challenge is to find the k-th prime number in the sequence. Given multiple queries, each represented by an integer k, you need to determine the k-th prime number for each query. Input The first line contains an integer q (1 ≤ q ≤ 10) – the number of queries. Each of the next q lines contains a single integer k (1 ≤ k ≤ 106), representing a query. Output For each query, output the k-th prime number on a separate line. Examples Input 3 1 2 5 Output 2 3 11 Input 5 10 3 20 15 7 Output 29 5 71 47 17 Note - The prime sequence starts as 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ... - The first query in the first example asks for the 1st prime number, which is 2. - The second query in the first example asks for the 2nd prime number, which is 3. - Continue this logic to answer all queries.","solution":"def sieve_eratosthenes(n): Generate a list of prime numbers up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if is_prime[p]] return prime_numbers def kth_prime(k_list): For each k in k_list, return the k-th prime number. max_k = max(k_list) limit = max_k * 15 # Heuristic to estimate an upper bound for the k-th prime primes = sieve_eratosthenes(limit) result = [] for k in k_list: result.append(primes[k - 1]) return result"},{"question":"Farmer John\'s farm has a rectangular field with M rows and N columns, arranged in an M x N grid format. Each cell in the grid represents a plot of land which can hold crops. Farmer John has a supply of K different types of crops. Initially, each cell in the grid contains information about the type of crop growing there (represented by an integer from 1 to K), or it might be empty (represented by 0, meaning no crops). Farmer John wants to maximize the variety of crops in any connected region of his field. Two cells are part of the same region if they share an edge (either vertically or horizontally). A region containing a diverse set of crop types is Farmer John\'s goal. He wants to find the maximum unique types of crops in any connected region within his field. You need to write a program that finds and prints the maximum number of unique types of crops in any connected region of the field. Input: - First line consists of three integers M, N, and K. - Next M lines consist of N space-separated integers representing the initial state of the field. Output: - A single integer denoting the maximum number of unique crop types in any connected region. Constraints: 1 ≤ M, N ≤ 100 1 ≤ K ≤ 100 0 ≤ Value of any cell ≤ K SAMPLE INPUT 3 4 3 1 2 0 2 3 1 0 3 2 3 2 2 SAMPLE OUTPUT 3 Explanation: In the given input, the largest connected region with the highest diversity of crops is: 1 2 3 1 This connected region contains three distinct types of crops: 1, 2, and 3. Therefore, the output is 3.","solution":"def max_crop_diversity(M, N, K, field): def dfs(x, y, visited, crop_set): if x < 0 or x >= M or y < 0 or y >= N or visited[x][y] or field[x][y] == 0: return visited[x][y] = True crop_set.add(field[x][y]) dfs(x+1, y, visited, crop_set) dfs(x-1, y, visited, crop_set) dfs(x, y+1, visited, crop_set) dfs(x, y-1, visited, crop_set) max_diversity = 0 visited = [[False]*N for _ in range(M)] for i in range(M): for j in range(N): if not visited[i][j] and field[i][j] != 0: crop_set = set() dfs(i, j, visited, crop_set) max_diversity = max(max_diversity, len(crop_set)) return max_diversity # Function to read input, used for testing. def process_input(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) K = int(data[2]) field = [] index = 3 for i in range(M): row = [] for j in range(N): row.append(int(data[index])) index += 1 field.append(row) print(max_crop_diversity(M, N, K, field))"},{"question":"Write a program to simulate a vending machine that accepts coins and dispenses items based on user input. The vending machine has a limited number of slots, each containing the same type of item and a specific quantity. The machine should support the following commands: * `INSERT coin` - Accepts a coin. The machine only accepts coins of denomination 1, 5, 10, 25. * `SELECT slot` - Dispenses an item from the given slot if the user has inserted enough coins. If the item is dispensed, the cost of the item is deducted from the total amount of coins inserted. If the slot is empty or there are insufficient coins, the appropriate message is shown. * `CHECK amount` - Displays the total amount of coins inserted so far. * `CANCEL` - Returns all inserted coins to the user and resets the machine. The vending machine has the following constraints: 1. There are a maximum of 10 slots, numbered 1 to 10. 2. Each slot can hold a maximum of 20 items. 3. The cost of each item is fixed at 50 cents. 4. The vending machine starts empty without any coins inserted. Input Format: * The first line contains an integer n (1 ≤ n ≤ 10) - the number of slots in the vending machine. * The next n lines each contain two integers si (1 ≤ si ≤ 20) - the number of items in each slot. Commands will be given one per line in the format specified above. The commands will continue until `CANCEL` is issued. Output for each step should appear immediately after processing the command. Example: ``` Input: 3 10 5 2 INSERT 25 INSERT 25 SELECT 1 INSERT 10 SELECT 2 CHECK amount CANCEL Output: 1 item dispensed from slot 1 1 item dispensed from slot 2 Total amount: 10 Coins returned: 10 ``` Explanation: * At the start, the vending machine has 3 slots with 10, 5, and 2 items respectively. * Two coins with denomination 25 are inserted, making the total 50. * The user selects slot 1, and an item is dispensed, reducing the count in slot 1 to 9 and total coins to 0. * A coin with denomination 10 is inserted, making the total 10. * The user selects slot 2, but since the total coins are less than 50, an item is not dispensed. * The user checks the total amount, which is 10. * Finally, the user cancels the transaction and receives 10 coins back.","solution":"class VendingMachine: def __init__(self, n, slots): self.n = n self.slots = slots self.coins_inserted = 0 self.cost_per_item = 50 self.accepted_coins = [1, 5, 10, 25] def insert_coin(self, coin): if coin in self.accepted_coins: self.coins_inserted += coin else: print(f\\"Coin {coin} not accepted\\") def select_slot(self, slot): if slot < 1 or slot > self.n: print(f\\"Invalid slot {slot}\\") return if self.coins_inserted >= self.cost_per_item: if self.slots[slot-1] > 0: self.slots[slot-1] -= 1 self.coins_inserted -= self.cost_per_item print(f\\"1 item dispensed from slot {slot}\\") else: print(\\"Slot empty, item not dispensed\\") else: print(\\"Insufficient coins, item not dispensed\\") def check_amount(self): print(f\\"Total amount: {self.coins_inserted}\\") def cancel(self): print(f\\"Coins returned: {self.coins_inserted}\\") self.coins_inserted = 0 def main(commands): n = commands[0] slots = [int(x) for x in commands[1:n+1]] vm = VendingMachine(n, slots) for cmd in commands[n+1:]: parts = cmd.split() action = parts[0] if action == \\"INSERT\\": coin = int(parts[1]) vm.insert_coin(coin) elif action == \\"SELECT\\": slot = int(parts[1]) vm.select_slot(slot) elif action == \\"CHECK\\": vm.check_amount() elif action == \\"CANCEL\\": vm.cancel() break"},{"question":"Alice is managing a toy store and is looking to create gift boxes from the toys available in her store. Each toy has a weight and belongs to a specific category. Alice wants to maximize the number of categories represented in a single gift box while ensuring that the total weight of the toys in the box does not exceed a given limit. Given the weights and categories of the toys in the store, determine the maximum number of categories that can be included in a gift box without the total weight exceeding the specified limit. Input The first line contains two integers n and W (1 ≤ n ≤ 10^5, 1 ≤ W ≤ 10^9) — the number of toys available in the store and the maximum allowable weight of the gift box. The next n lines each contain an integer w(i) (1 ≤ w(i) ≤ 10^6) — the weight of the ith toy followed by the category of the ith toy as a single character (a to z). Output Print the maximum number of different categories that can be included in the gift box without the total weight exceeding W. Examples Input 5 10 3 a 2 b 5 c 1 a 2 c Output 3 Input 3 5 4 a 4 b 4 c Output 1 Input 4 9 3 a 3 b 3 c 3 d Output 3 Note In the first example, Alice can create a gift box with the toys of categories a, b, and c with total weight 3 + 2 + 5 = 10. In the second example, Alice can only choose one toy due to the weight limit. In the third example, Alice can choose toys of categories a, b, and c with a total weight of 3 + 3 + 3 = 9.","solution":"def max_categories(n, W, toys): # Create a dictionary to store the minimum weight for each category category_weights = {} for weight, category in toys: if category in category_weights: category_weights[category] = min(category_weights[category], weight) else: category_weights[category] = weight # Get the weights of the categories in a list and sort them weights = sorted(category_weights.values()) total_weight = 0 category_count = 0 # Iterate through the sorted weights and add them to the total weight # until the total weight exceeds the maximum allowable weight W for weight in weights: if total_weight + weight <= W: total_weight += weight category_count += 1 else: break return category_count # Sample input n = 5 W = 10 toys = [(3, \'a\'), (2, \'b\'), (5, \'c\'), (1, \'a\'), (2, \'c\')] print(max_categories(n, W, toys)) # Output: 3"},{"question":"Consider a sequence of **n** integers `a_1, a_2, ..., a_n`. A \\"mid-range\\" value is defined as the average of the minimum and maximum values in the sequence, i.e., `mid_range = (min(a) + max(a)) / 2`. Your task is to compute the mid-range value for the given sequence of integers. Ensure that your result is accurate to one decimal place. # Input - The input consists of two lines. - The first line contains a single integer **n** (1 ≤ n ≤ 1000), the number of integers in the sequence. - The second line contains **n** space-separated integers representing the sequence **a_1, a_2, ..., a_n** (-10^3 ≤ a_i ≤ 10^3). # Output - Output the mid-range value of the given sequence, accurate to one decimal place. # Example Input ``` 5 3 -1 4 1 2 ``` Output ``` 1.5 ``` Input ``` 3 10 0 -10 ``` Output ``` 0.0 ``` # Note In the first example, the minimum value is -1 and the maximum value is 4. The mid-range value is calculated as `(-1 + 4) / 2 = 1.5`. In the second example, the minimum value is -10 and the maximum value is 10. The mid-range value is calculated as `(-10 + 10) / 2 = 0.0`.","solution":"def compute_mid_range(n, sequence): Computes the mid-range value for a sequence of integers. Args: n : int : the number of integers in the sequence sequence : list of int : the sequence of integers Returns: float : the mid-range value rounded to one decimal place min_value = min(sequence) max_value = max(sequence) mid_range = (min_value + max_value) / 2 return round(mid_range, 1) # Example usage: # n = 5 # sequence = [3, -1, 4, 1, 2] # print(compute_mid_range(n, sequence)) # Output: 1.5"},{"question":"You are given an integer N. If N is even, print N; if N is odd and greater than 1, print the square of N. Print 1 if N is 1 or less. Constraints * -10^4 ≤ N ≤ 10^4 Input Input is given from Standard Input in the following format: N Output Print the desired output based on the value of N. Examples Input 3 Output 9 Input -6 Output -6 Input 0 Output 0","solution":"def process_number(N): Processes the integer N according to the specified rules: - If N is even, return N. - If N is odd and greater than 1, return the square of N. - If N is 1 or less, return 1. if N % 2 == 0: return N elif N > 1: return N ** 2 else: return 1"},{"question":"You are given a series of metal rods of different lengths and you need to combine them to form the longest possible rod. Each time two rods are combined, the cost is equal to the sum of their lengths. Your goal is to find the minimum cost to combine all the given rods into one single rod. [Input]: Input starts with a single integer N representing the number of rods, followed by N integers which represent the lengths of the rods. [Output]: Output a single integer representing the minimum cost to combine all the rods into one. Assumptions: 1 <= N <= 1000 1 <= length of each rod <= 10^4 *Problem provided by JDA SAMPLE INPUT 4 4 3 2 6 SAMPLE OUTPUT 29","solution":"import heapq def minimum_cost_to_combine_rods(N, rods): Returns the minimum cost to combine all the rods into one single rod. :param N: int, the number of rods. :param rods: List[int], the lengths of the rods. :return: int, the minimum cost to combine all the rods. # Use a min-heap to always combine the two smallest rods first heapq.heapify(rods) total_cost = 0 while len(rods) > 1: # Pop two smallest elements first_min = heapq.heappop(rods) second_min = heapq.heappop(rods) # The cost to combine them is the sum of their lengths combined_length = first_min + second_min total_cost += combined_length # Push the combined rod back into the heap heapq.heappush(rods, combined_length) return total_cost"},{"question":"You are given a list of integers and a list of range queries. Each query consists of a pair of indices (l, r) and requires you to determine the minimum value in the range of the list from index l to r, inclusive. Input The first line contains two integers n and q (1 ≤ n, q ≤ 3·10^5) — the number of elements in the list and the number of queries. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the list. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices defining the range for the query. Output For each query, output the minimum value in the range of the list from index l to r. Examples Input 5 3 1 3 2 5 4 1 3 2 4 1 5 Output 1 2 1 Input 4 2 4 2 7 1 1 2 2 3 Output 2 2","solution":"def find_min_in_ranges(n, q, a, queries): This function takes the number of elements n, number of queries q, the list a of numbers, and the list of queries and returns a list of minimum values for each range query. results = [] for l, r in queries: results.append(min(a[l-1:r])) return results # Example usage: # n = 5 # q = 3 # a = [1, 3, 2, 5, 4] # queries = [(1, 3), (2, 4), (1, 5)] # print(find_min_in_ranges(n, q, a, queries)) # Output: [1, 2, 1]"},{"question":"Lila loves to play with strings. She likes to take a string, and for each character, she either keeps it unchanged or she replaces it with the letter that comes immediately after in the alphabet. For instance, she can change \'a\' to \'b\', \'b\' to \'c\', and so on. Note that \'z\' wraps around to \'a\'. Given a string, determine the minimum number of changes needed so that all characters in the string are the same. Input The first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases. The description of each test case follows. Each test case consists of a single line, a string s (1 ≤ |s| ≤ 100000), containing only lowercase English letters. Output For each test case, print the minimum number of changes needed. Example Input 3 abc zzz abcdef Output 2 0 5 Explanation In the first test case, you can change \'a\' to \'b\' and \'c\' to \'b\' (1 change each) to make all characters \'b\'. So, the total number of changes needed are 2. In the second test case, all characters are already the same, so no changes are needed. In the third test case, you can make the characters \'a\' turn into \'b\', then \'c\', and so on until all characters are \'f\'. This requires changing every character, resulting in 5 changes.","solution":"def min_changes_to_uniform_string(strings): def changes_needed(s): from collections import Counter char_count = Counter(s) max_count = max(char_count.values()) return len(s) - max_count results = [changes_needed(s) for s in strings] return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) strings = lines[1:t + 1] return strings def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Given a string `s` and a list of pairs of integers indicating allowed swap operations, determine the lexicographically smallest string possible after performing the allowed operations any number of times. A swap operation consists of taking two indices of the string and swapping the characters at those indices. Input - The first line consists of a single integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each test case starts with a line containing an integer `n` (1 ≤ n ≤ 100), the length of the string. - The next line contains the string `s` consisting of lowercase English letters. - The third line contains an integer `m` (0 ≤ m ≤ n*(n-1)/2), the number of allowed swap operations. - The next `m` lines contain two integers `i` and `j` (0 ≤ i, j < n), indicating that characters at positions `i` and `j` (0-based indexing) can be swapped. Output For each test case, print the lexicographically smallest string possible after performing the allowed operations any number of times. Examples Input 2 4 dcab 2 0 3 1 2 4 abdc 1 1 3 Output bacd abdc Explanation In the first test case, you can swap the characters at indices 0 and 3 to get \\"bcad\\", and then swap the characters at indices 1 and 2 to obtain \\"bacd\\" which is the smallest possible string. In the second test case, you can swap the characters at indices 1 and 3 in \\"abdc\\", but since \\"abdc\\" is already the smallest possible string, no changes are necessary.","solution":"def find_lexicographically_smallest_string(t, cases): def dfs(node, graph, visited, component): stack = [node] while stack: n = stack.pop() if not visited[n]: visited[n] = True component.append(n) for neighbor in graph[n]: if not visited[neighbor]: stack.append(neighbor) results = [] for case in cases: n, s, m, edges = case if m == 0: results.append(s) continue graph = {i: [] for i in range(n)} for i, j in edges: graph[i].append(j) graph[j].append(i) visited = [False] * n s = list(s) # Convert string to list for easy swaps for i in range(n): if not visited[i]: component = [] dfs(i, graph, visited, component) component.sort() sorted_chars = sorted(s[k] for k in component) for idx, char in zip(component, sorted_chars): s[idx] = char results.append(\\"\\".join(s)) return results # Example usage: # t = 2 # cases = [ # (4, \\"dcab\\", 2, [(0, 3), (1, 2)]), # (4, \\"abdc\\", 1, [(1, 3)]) # ] # print(find_lexicographically_smallest_string(t, cases)) # Should output [\'bacd\', \'abdc\']"},{"question":"Jonathan loves creating palindromes out of words. A palindrome is a word that reads the same forward and backward. He is now faced with a challenge: He needs to determine the minimum number of characters to be added to any given string to make it a palindrome. Note that you can add characters at any position (beginning, end, or between existing characters). Input The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000). The string consists of lowercase English letters only. Output For each test case, output a single integer — the minimum number of characters to be added to make the given string a palindrome. Examples Input 3 race google abcde Output 3 2 4 Explanation: In the first example, \\"race\\" can be transformed to \\"ecarace\\" by adding \\"e\\" and \\"car\\". In the second example, \\"google\\" can be transformed to \\"elgoogle\\", by adding \\"el\\". Similarly, \\"abcde\\" needs several additions to become \\"edcbabcde\\". Note In the first sample, inserting characters \\"e\\", \\"c\\", \\"a\\", \\"r\\" at the appropriate places, \\"race\\" becomes \\"ecarace\\" which is a palindrome. The minimal number of insertions is 3. In the second sample, inserting characters \\"el\\", \\"google\\" becomes \\"elgoogle\\" which is a palindrome. The minimal number of insertions is 2. In the third sample, inserting characters \\"edcba\\", \\"abcde\\" becomes \\"edcbabcde\\" which is a palindrome. The minimal number of insertions is 4.","solution":"def min_insertions_to_palindrome(s): def lcs(X, Y): # Find the length of the strings m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence # of suffixes of X and Y. L = [[0] * (n + 1) for i in range(m + 1)] # Following steps build L[m + 1][n + 1] in bottom up fashion. # Note that L[i][j] contains length of LCS of X[0..i-1] # and Y[0..j-1] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] # A reverse of the original string rev_s = s[::-1] # The length of the string n = len(s) # The length of the longest palindromic subsequence is equal to # the length of the string minus the length of the longest common # subsequence of the string and its reverse lps_length = lcs(s, rev_s) # The minimum number of insertions required is # the length of the string minus the length of the LCS return n - lps_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_insertions_to_palindrome(s)) return results"},{"question":"A group of robots needs to be organized into distinct clusters based on their features. Each robot has a unique combination of three features denoted as three integers (x, y, z). The objective is to determine the number of unique clusters that can be formed. A cluster is defined as a group of robots where no two robots have all three features in common, i.e., a robot belongs to a cluster if and only if it doesn\'t have exactly the same combination of (x, y, z) as any other robot in the same cluster. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of robots. Each of the next n lines contains three integers xi, yi, zi (1 ≤ xi, yi, zi ≤ 100) representing the features of the i-th robot. Output Print a single integer — the number of unique clusters. Example Input 5 1 2 3 4 5 6 1 2 3 7 8 9 4 5 6 Output 3 Input 3 10 20 30 10 20 30 10 20 30 Output 1","solution":"def unique_clusters(n, features): Returns the number of unique clusters given the list of features of robots. :param n: Number of robots (int) :param features: A list of tuples, where each tuple contains three integers (xi, yi, zi) :return: Number of unique clusters (int) # Use a set to store unique feature combinations unique_combinations = set(features) # The number of unique clusters is the length of the set return len(unique_combinations)"},{"question":"Design a program that simulates the behavior of an elevator in a building and tracks the order in which people enter and exit. The building has `n` floors, and the elevator can hold a maximum of `m` people at once. Given a sequence of elevator events, determine the final state of the elevator (i.e., the list of floors where people are waiting and which floors the elevator must visit). # Input The first line contains two integers `n` and `m` separated by a space where: - `n` is the number of floors (1 ≤ n ≤ 1000). - `m` is the maximum capacity of the elevator (1 ≤ m ≤ 100). Each of the next lines describes an event in the elevator\'s operation: - \\"IN x f\\" indicates that `x` people entered the elevator at floor `f`. - \\"OUT x f\\" indicates that `x` people exited the elevator at floor `f`. Events are given in the order they occur, and there are no invalid events (e.g., more people exiting than present in the elevator). You can assume that the elevator starts empty. # Output Print a list of floors the elevator needs to visit and the current number of people in the elevator after processing all events. # Example **Input:** ``` 10 15 IN 5 1 IN 10 2 OUT 3 5 IN 7 8 OUT 4 10 ``` **Output:** ``` Floors to visit: 1 2 5 8 10 Current number of people in the elevator: 15 ``` # Explanation: - 5 people entered at floor 1. - 10 people entered at floor 2. - 3 people exited at floor 5. - 7 people entered at floor 8. - 4 people exited at floor 10. The elevator needs to visit floors 1, 2, 5, 8, and 10. The final count of people in the elevator is 15.","solution":"def simulate_elevator(n, m, events): Simulates the behavior of an elevator in a building and tracks the floors visited and the number of people in the elevator. Args: n (int): Number of floors. m (int): Maximum capacity of the elevator. events (list of str): List of events describing people entering and exiting the elevator. Returns: tuple: A tuple where the first element is a list of floors to visit and the second element is the current number of people in the elevator. people_in_elevator = 0 floors_to_visit = set() for event in events: parts = event.split() action = parts[0] number_of_people = int(parts[1]) floor = int(parts[2]) if action == \\"IN\\": people_in_elevator += number_of_people elif action == \\"OUT\\": people_in_elevator -= number_of_people floors_to_visit.add(floor) # Converting set to sorted list floors_to_visit = sorted(floors_to_visit) return floors_to_visit, people_in_elevator"},{"question":"A travel company wants to analyze the bus routes represented as graphs to improve their services. For this purpose, they want to determine if there exists a path between two specific cities on a given route map. The route map is represented using an adjacency list where each city is represented by a node, and each direct bus route between cities is represented by an edge. Your task is to help the company by writing a program to determine if there is a path between two given cities using the route map. Input The first line contains a number t representing the number of test cases. For each test case: - The first line contains two integers n and m, denoting the number of cities and the number of direct bus routes, respectively. - The following m lines each contain two integers u and v, denoting there is a direct bus route between city u and city v. - The next line contains two integers s and d, denoting the source city and the destination city for which we need to determine if there exists a path. Output For each test case, print \\"YES\\" if there is a path from city s to city d, otherwise, print \\"NO\\". Constraints 1 ≤ t ≤ 10 1 ≤ n ≤ 1000 0 ≤ m ≤ n * (n - 1) / 2 1 ≤ u, v, s, d ≤ n u ≠ v Example Input 2 4 4 1 2 2 3 3 4 4 1 1 3 4 4 1 2 2 3 3 1 3 4 1 4 Output YES YES","solution":"def is_path_possible(n, m, edges, s, d): from collections import deque, defaultdict # Creating the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find path from s to d visited = set() queue = deque([s]) while queue: current = queue.popleft() if current == d: return \\"YES\\" if current in visited: continue visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\" def route_checker(test_cases): results = [] for case in test_cases: n, m, edges, s, d = case results.append(is_path_possible(n, m, edges, s, d)) return results"},{"question":"Given an array `A` of `n` distinct integers and a set of `m` queries, each query being a triplet `(l, r, x)` where `1 ≤ l ≤ r ≤ n`, determine if the integer `x` appears more than once in the subarray from `A[l]` to `A[r]` (inclusive). # Input - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 100,000`). - The second line contains `n` integers representing the elements of the array `A` (`1 ≤ A[i] ≤ 10^9`). - The next `m` lines each contain three integers `l`, `r`, and `x` which represents a query. # Output - For each query, print \\"YES\\" if the integer `x` appears more than once in the subarray `A[l]` to `A[r]`, otherwise print \\"NO\\". # Example Input ``` 5 3 1 2 3 2 4 1 3 2 2 5 2 3 5 3 ``` Output ``` NO YES NO ``` # Note In the example above, the array `A` is `[1, 2, 3, 2, 4]`. The queries are processed as follows: - For the first query `(1, 3, 2)`, the subarray is `[1, 2, 3]` and `2` appears only once. Hence, the result is \\"NO\\". - For the second query `(2, 5, 2)`, the subarray is `[2, 3, 2, 4]` and `2` appears twice. Hence, the result is \\"YES\\". - For the third query `(3, 5, 3)`, the subarray is `[3, 2, 4]` and `3` appears only once. Hence, the result is \\"NO\\".","solution":"def query_results(n, m, array, queries): Determine if the integer x appears more than once in the subarray from array[l] to array[r] (inclusive) for each query. Parameters: n (int): the number of elements in the array. m (int): the number of queries. array (list of int): the array of n integers. queries (list of tuple of int): the list of m queries, each query is a tuple (l, r, x). Returns: list of str: a list containing \\"YES\\" or \\"NO\\" for each query. results = [] for l, r, x in queries: subarray = array[l-1:r] if subarray.count(x) > 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of researchers is working on a project involving the organization and retrieval of large datasets. One important aspect of their project is handling and manipulating version numbers of their neural network models. Version numbers follow a specific format, and the researchers need a tool that can compare different versions to determine which one is more recent. A version number is a string that is used to specify different releases of a software. A version number consists of one or more non-negative integers, separated by dots. For example, \\"1.0\\", \\"1.2.1\\", and \\"2.0\\" are all valid version numbers. Each component of a version number is called a \\"segment\\". The comparison rules for version numbers are as follows: 1. Compare the first segment of each version number. If one is greater than the other, the version with the greater segment is more recent. 2. If the first segments are equal, compare the second segments, and so on. 3. If the segments are of different lengths, the shorter version is considered to have missing trailing zeroes. For instance, version \\"1.0\\" is considered equal to \\"1.0.0\\". Your task is to write a program that can compare two version numbers and determine which one is more recent. Input The input consists of multiple datasets. Each dataset starts with a single line containing an integer N (1 ≤ N ≤ 100), which represents the number of pairs of version numbers to compare. The next 2N lines contain N pairs of version numbers, one pair per line. Each version number consists of one or more segments separated by dots, and each segment contains only non-negative integers. Each version number has at most 10 segments, and each segment is at most 2 digits long. The input ends with a single line containing zero (0). Output For each dataset, output the results of comparing the version numbers, one result per line. Each result should be \\"A\\", \\"B\\", or \\"Same\\". \\"A\\" means the first version number is more recent, \\"B\\" means the second version number is more recent, and \\"Same\\" means both version numbers are equal. Example Input 2 1.0 1.0.1 2.3.4 2.3.3 1 1.1.0 1.1 0 Output B A Same Note that the results are derived by comparing each corresponding pair of segments from left to right, treating any missing trailing segments as zeros.","solution":"def compare_versions(version_a, version_b): Compare two version numbers and return \'A\' if version_a is more recent, \'B\' if version_b is more recent, and \'Same\' if they are equivalent. segments_a = list(map(int, version_a.split(\'.\'))) segments_b = list(map(int, version_b.split(\'.\'))) # Extend the shorter list with zeros while len(segments_a) < len(segments_b): segments_a.append(0) while len(segments_b) < len(segments_a): segments_b.append(0) # Compare each segment for a, b in zip(segments_a, segments_b): if a > b: return \\"A\\" elif a < b: return \\"B\\" # If all segments are equal return \\"Same\\" def process_version_comparisons(input_list): Process multiple datasets from the input and return the comparison results. results = [] i = 0 while i < len(input_list): n = int(input_list[i]) if n == 0: break i += 1 for _ in range(n): version_a = input_list[i].strip() i += 1 version_b = input_list[i].strip() i += 1 result = compare_versions(version_a, version_b) results.append(result) return results"},{"question":"A delivery company manages a fleet of delivery vehicles that operates in a city represented as a grid with intersections. Each intersection has some parcels to be picked up and delivered. You are asked to write a function to determine the minimum steps required for a vehicle to pick up all parcels starting from a given intersection (0,0). The city grid is represented as an `NxN` matrix `grid` where each cell (i, j) can have: - \'P\' representing the presence of a parcel, - \'E\' for an empty intersection. The delivery vehicle can move up, down, left, or right on the grid but cannot travel outside the boundaries. The vehicle starts at the top-left intersection (0,0). Input: - The first line contains an integer T denoting the number of test cases. - Each test case contains: - An integer N, the size of the grid. - An NxN matrix grid of strings containing \'P\' or \'E\'. Output: - For each test case print the minimum number of steps required to collect all parcels, on a line. If it\'s not possible to collect all parcels, print -1. Constraints: - 1 ≤ N ≤ 50 - 1 ≤ T ≤ 20 SAMPLE INPUT: 2 3 PEE EPE EEP 4 PPPP EEEE PEEE EEEE SAMPLE OUTPUT: 4 3 Explanation: Test Case #1: The starting point is (0,0). Move to the right to collect all parcels: down to (1,1), right to (1,2), down to (2,2). The minimum steps required to collect all parcels is 4. Test Case #2: The starting point is (0,0).The optimal path to collect all parcels would be: right to (0,1), right to (0,2), down to (1,1) and right to (1,2). The minimum steps required is 3.","solution":"from collections import deque def minimum_steps_to_collect_parcels(test_cases): results = [] def bfs(grid, N): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] parcels = sum(row.count(\'P\') for row in grid) if parcels == 0: return 0 queue = deque([(0, 0, 0)]) # x, y, steps visited = set() visited.add((0, 0)) parcels_collected = 0 while queue: x, y, steps = queue.popleft() if grid[x][y] == \'P\': parcels_collected += 1 if parcels_collected == parcels: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # If we have traversed the entire grid and not collected all parcels for N, grid in test_cases: if grid[0][0] == \'E\' and all(cell == \'E\' for row in grid for cell in row): results.append(-1) else: results.append(bfs(grid, N)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) cases = [] i = 1 for _ in range(T): N = int(lines[i]) grid = [list(lines[i + j + 1]) for j in range(N)] cases.append((N, grid)) i += N + 1 return cases"},{"question":"Design a function that takes a list of integers and returns the index of the first peak element. A peak element is defined as an element that is greater than its neighbors. For the first or last element to be considered a peak, it only needs to be greater than its one neighbor. # Function Signature ```python def find_peak(nums: List[int]) -> int: pass ``` # Input - A list of integers `nums` (1 ≤ len(nums) ≤ 1000). # Output - An integer representing the index of the first peak element. # Examples ```python assert find_peak([1, 2, 3, 1]) == 2 assert find_peak([1, 2, 1, 3, 5, 6, 4]) == 1 assert find_peak([1, 2, 3, 4, 5, 6]) == 5 assert find_peak([6, 5, 4, 3, 2, 1]) == 0 ``` # Note - In the first example, 3 is a peak element and its index is 2. - In the second example, 2 is the first peak element and its index is 1. - The first and last elements are treated as peaks if they are greater than their one neighbor.","solution":"from typing import List def find_peak(nums: List[int]) -> int: if len(nums) == 1: return 0 # If there is only one element, it\'s the peak by default. for i in range(len(nums)): if i == 0: if nums[i] > nums[i + 1]: return i elif i == len(nums) - 1: if nums[i] > nums[i - 1]: return i else: if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: return i return -1 # If no peak is found"},{"question":"problem A student is required to read a certain number of pages each day to finish a book before an upcoming test. The student has a variable number of pages they can read each day, which is not necessarily the same every day. Given the number of days they have to read and the number of pages they can read each day, calculate the total number of pages the student will read. Input The input consists of multiple lines: - The first line contains an integer `n`, the number of days the student has to read. - The second line contains `n` integers representing the number of pages the student can read each day. Output Output a single integer representing the total number of pages read by the student after `n` days. Input / Output example Input example 1 5 10 20 30 40 50 Output example 1 150 Input example 2 3 5 10 15 Output example 2 30 In Input Example 1, the student reads 10, 20, 30, 40, and 50 pages over 5 days, for a total of 150 pages. In Input Example 2, the student reads 5, 10, and 15 pages over 3 days, for a total of 30 pages.","solution":"def total_pages_read(n, pages_per_day): Calculates the total number of pages read after n days. :param n: Number of days the student has to read :param pages_per_day: List of integers representing the number of pages the student can read each day :return: Total number of pages read return sum(pages_per_day)"},{"question":"You are working on a software system that manages reservations for a conference room. The conference room can be reserved for multiple non-overlapping time slots throughout the day. Each reservation has a start time and an end time, and these are represented in 24-hour format. To efficiently manage the reservations, you need to determine the maximum number of non-overlapping reservations that can be scheduled. Given a list of reservation requests, where each request is defined by its start and end time, write a function that calculates the maximum number of non-overlapping reservations that can be accommodated. # Input - The input consists of two parts: 1. An integer `n` (1 ≤ n ≤ 10^5), the number of reservation requests. 2. `n` pairs of integers, where each pair represents a reservation request. The first integer in the pair is the start time `s` (0 ≤ s < 24), and the second integer is the end time `e` (0 < e ≤ 24 and s < e). The times are in 24-hour format, meaning that no reservation can extend past 24, and start and end times are given in whole hours. # Output - Print a single integer representing the maximum number of non-overlapping reservations that can be scheduled. # Example Input ``` 5 9 10 9 12 13 15 12 13 16 17 ``` Output ``` 4 ``` In this example, the maximum number of non-overlapping reservations is `4`, which can be achieved by scheduling the reservations `[9, 10]`, `[12, 13]`, `[13, 15]`, and `[16, 17]`. # Constraints - The problem is guaranteed to have at least one reservation that can be scheduled. - All times are given as integers in the range `[0, 24]`. - Ensure the solution is efficient and can handle the upper limits of the input sizes.","solution":"def max_non_overlapping_reservations(n, reservations): Calculates the maximum number of non-overlapping reservations that can be accommodated. :param n: Number of reservation requests :param reservations: List of tuples where each tuple contains start (s) and end (e) times :return: Maximum number of non-overlapping reservations # Sort reservations by end time reservations.sort(key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in reservations: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"An amusement park ride consists of a series of n cars connected in a line. Each car can hold a certain number of people, denoted by the array c where c[i] is the capacity of the i-th car. The ride has a minimum threshold of total people, T, required to operate. Your task is to determine the minimum number of contiguous cars that need to be occupied so that the total capacity of those cars is at least T. If it\'s impossible to meet the threshold with any combination of cars, return -1. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of cars. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the capacities of the cars. The third line contains an integer T (1 ≤ T ≤ 100000) — the minimum threshold of total people required to operate the ride. Output Print a single integer representing the minimum number of contiguous cars needed to meet the threshold T. If it\'s not possible, print -1. Examples Input: 5 6 2 3 5 1 8 Output: 2 Input: 3 1 1 1 10 Output: -1 Note In the first example, one possible solution is to use cars 1 and 2, which have a combined capacity of 6 + 2 = 8. In the second example, the combined capacity of all cars is only 3, which is less than the threshold T, so the output is -1.","solution":"def min_contiguous_cars(n, capacities, T): Determines the minimum number of contiguous cars needed to meet or exceed the threshold T. Parameters: - n (int): The number of cars. - capacities (list of int): The capacities of each car. - T (int): The minimum threshold of total people required to operate the ride. Returns: - int: The minimum number of contiguous cars needed to meet the threshold T or -1 if impossible. # Initialize the sum of the current window and the result to a high value current_sum = 0 min_length = float(\'inf\') # Two pointers to define the current window start = 0 for end in range(n): current_sum += capacities[end] while current_sum >= T: min_length = min(min_length, end - start + 1) current_sum -= capacities[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a string consisting of lowercase English letters, and you need to process each letter from left to right. Each letter has a value equal to its position in the alphabet (e.g., \'a\' = 1, \'b\' = 2, ..., \'z\' = 26). For each letter in the string, you must decide whether to remove it or keep it in order to make the sum of the values of the remaining letters as large as possible. You may also swap any two letters at most once to help achieve the maximum sum. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Print a single integer — the maximum sum of the values of the remaining letters after processing the string as described. Examples Input 5 abcde Output 15 Input 3 xyz Output 75 Input 3 abc Output 6","solution":"def find_max_sum(n, s): Return the maximum sum of the values of the remaining letters after processing the string. Args: n (int): length of the string s. s (str): a string of lowercase English letters. Returns: int: the maximum sum of the values of remaining letters. # Calculate the initial sum of all letter values total_sum = 0 values = [ord(char) - ord(\'a\') + 1 for char in s] total_sum = sum(values) # Sort values to decide on removal or swap sorted_values = sorted(values) # Theoretical max sum without swap (sum of largest `n-1` elements) best_sum = sum(sorted_values[-2:]) return total_sum # Example usage: # n = 5 # s = \\"abcde\\" # print(find_max_sum(n, s)) # Output: 15"},{"question":"Write a function to determine the minimum number of steps required to convert a given string into a palindrome. A palindrome is a string that reads the same forward and backward. You can only perform the following two operations: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. Input Format: - A single line containing a string `S` (1 ≤ |S| ≤ 1000), where |S| denotes the length of the string. Output Format: - An integer representing the minimum number of steps required to convert the given string `S` into a palindrome. Constraints: - The string contains only lowercase English letters. SAMPLE INPUT abccb SAMPLE OUTPUT 1 Explanation: In the example, the string \\"abccb\\" can be converted into a palindrome by inserting the character \'a\' at the end to form \\"abccba\\". This requires only one operation, so we print \\"1\\".","solution":"def min_steps_to_palindrome(S): Determine the minimum number of steps required to convert a given string into a palindrome. :param S: str, the input string :return: int, minimum number of steps n = len(S) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): h = l + gap if S[l] == S[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = min(dp[l][h - 1], dp[l + 1][h]) + 1 # Result is in the top right corner of the table return dp[0][n - 1]"},{"question":"Lisa, a chemistry student, is working on a project that requires her to analyze a series of chemical formulas. Unfortunately, her dataset contains a few misformatted entries where some molecular weights are incorrect. She needs your help to write a program that will validate the list of molecular weights for each given chemical formula. Each chemical formula is a string consisting of uppercase alphabetic characters (A-Z) where each character represents an element. A dictionary of elements and their atomic weights will be given. The task is to compute the total molecular weight of each formula and check if it matches the given expected molecular weight. If the calculated weight matches the expected weight, return \\"Correct\\", otherwise return \\"Incorrect\\". INPUT: The first line contains an integer T, the number of test cases. Each of the next T lines consists of a chemical formula string followed by an integer representing the expected molecular weight. The dictionary of elements remains constant and will be provided in the problem description. OUTPUT: For each test case, output \\"Correct\\" if the calculated molecular weight matches the expected molecular weight, otherwise output \\"Incorrect\\". ELEMENT WEIGHTS (example): H: 1, He: 4, Li: 7, Be: 9, B: 11, C: 12, N: 14, O: 16, F: 19, Ne: 20 0 < T < 100 SAMPLE INPUT: 3 H2O 18 CO2 44 C6H12O6 180 SAMPLE OUTPUT: Correct Correct Correct Note: The element weights dictionary should be used to look up the atomic weights of the elements in the chemical formula. For simplicity, you can assume the compounds are always provided with only single-letter element symbols. The calculation will involve summing the atomic weights based on the count of each element in the given formula.","solution":"def validate_molecular_weights(test_cases, element_weights): results = [] for formula, expected_weight in test_cases: calculated_weight = 0 i = 0 while i < len(formula): if formula[i].isalpha(): element = formula[i] i += 1 count = 0 while i < len(formula) and formula[i].isdigit(): count = count * 10 + int(formula[i]) i += 1 count = max(count, 1) # Default to 1 if there\'s no digit after the element symbol calculated_weight += element_weights[element] * count if calculated_weight == expected_weight: results.append(\\"Correct\\") else: results.append(\\"Incorrect\\") return results element_weights = { \'H\': 1, \'He\': 4, \'Li\': 7, \'Be\': 9, \'B\': 11, \'C\': 12, \'N\': 14, \'O\': 16, \'F\': 19, \'Ne\': 20 }"},{"question":"The company XYZ has decided to give tasks to each of its employees. There are `n` tasks numbered from `1` to `n`, and each task i has a corresponding difficulty level denoted by an integer `di`. Also, each employee has a skill level `si` which denotes the maximum difficulty of the task they can perform. The company wants to assign tasks to employees such that each employee gets exactly one task and each task is assigned to one employee. An employee `i` can only be assigned task `j` if `si >= dj`. Determine the maximum number of tasks that can be assigned to employees under these constraints. Input: The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of tasks and employees. The second line contains `n` space-separated integers `d1, d2, ..., dn` (1 ≤ di ≤ 10^6) — the difficulty levels of the tasks. The third line contains `n` space-separated integers `s1, s2, ..., sn` (1 ≤ si ≤ 10^6) — the skill levels of the employees. Output: Output an integer representing the maximum number of tasks that can be assigned to employees under the given constraints. Example: Input: 4 2 4 1 3 3 5 2 6 Output: 4 Note: In the given example, all tasks can be assigned because: - Employee 1 with skill 3 can take task 1 with difficulty 2. - Employee 2 with skill 5 can take task 2 with difficulty 4. - Employee 3 with skill 2 can take task 3 with difficulty 1. - Employee 4 with skill 6 can take task 4 with difficulty 3.","solution":"def max_tasks_assigned(n, task_difficulties, employee_skills): Given n tasks and n employees, each with specific difficulty and skill levels respectively, this function returns the maximum number of tasks that can be assigned to employees. task_difficulties.sort() employee_skills.sort() task_idx, employee_idx, max_assigned = 0, 0, 0 while task_idx < n and employee_idx < n: if employee_skills[employee_idx] >= task_difficulties[task_idx]: max_assigned += 1 task_idx += 1 employee_idx += 1 return max_assigned"},{"question":"Given a list of integer numbers, identify and return a sublist that forms the longest contiguous subsequence where all elements are of the same parity (either all odd or all even). Input The first line contains a single integer t (1 ≤ t ≤ 100) - number of test cases. For each test case, the first line contains a single integer n (1 ≤ n ≤ 10^5) - number of elements in the list. The second line contains n integers separated by spaces, representing the list of elements. Output For each test case, print the longest contiguous subsequence that contains elements of the same parity. If there are multiple answers, print the one that appears first. Example Input 2 8 1 2 2 2 5 7 6 4 5 10 12 14 1 3 Output 2 2 2 10 12 14 Note In the first test case, the longest contiguous subsequence containing elements of the same parity is \\"2 2 2\\". In the second test case, there are two subsequences \\"10 12 14\\" and \\"1 3\\", but \\"10 12 14\\" appears first.","solution":"def longest_contiguous_same_parity_sublist(lst): Returns a sublist that forms the longest contiguous subsequence where all elements are of the same parity (either all odd or all even). max_length = 0 current_length = 0 best_start_index = 0 start_index = 0 is_even = lst[0] % 2 == 0 for i in range(len(lst)): if lst[i] % 2 == (0 if is_even else 1): current_length += 1 else: if current_length > max_length: max_length = current_length best_start_index = start_index start_index = i current_length = 1 is_even = lst[i] % 2 == 0 if current_length > max_length: max_length = current_length best_start_index = start_index return lst[best_start_index: best_start_index + max_length] def solve(test_cases): results = [] for t in test_cases: n, lst = t result = longest_contiguous_same_parity_sublist(lst) results.append(result) return results def parse_input(input_text): lines = input_text.split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) lst = list(map(int, lines[index + 1].split())) test_cases.append((n, lst)) index += 2 return test_cases"},{"question":"You are given an array of integers and a list of queries. Each query consists of two integers `x` and `y` where `x` indicates the starting index and `y` indicates the ending index. Your task is to calculate the sum of elements in the given range `[x, y]` (inclusive) for each query. Input The first line of the input contains an integer `T` denoting the number of test cases. The description of T test cases follows: For each test case: - The first line contains two integers `N` and `Q` denoting the number of elements in the array and the number of queries respectively. - The second line contains `N` space-separated integers representing the elements of the array. - Each of the next `Q` lines contains two space-separated integers `x` and `y` denoting the zero-based starting and ending indices for each query. Output For each test case, output the sum of elements for each query on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ x ≤ y < N 1 ≤ Q ≤ 10^5 -10^9 ≤ Array elements ≤ 10^9 Example Input: 1 5 3 1 2 3 4 5 0 2 1 3 2 4 Output: 6 9 12 Explanation Example case 1. The array is [1, 2, 3, 4, 5]. For the queries: - The sum from index 0 to 2 is 1 + 2 + 3 = 6. - The sum from index 1 to 3 is 2 + 3 + 4 = 9. - The sum from index 2 to 4 is 3 + 4 + 5 = 12.","solution":"def range_sum_queries(T, test_cases): results = [] for case in test_cases: N, Q = case[\'N\'], case[\'Q\'] array = case[\'array\'] queries = case[\'queries\'] prefix_sum = [0] * (N + 1) for i in range(N): prefix_sum[i + 1] = prefix_sum[i] + array[i] for x, y in queries: sum_range = prefix_sum[y + 1] - prefix_sum[x] results.append(sum_range) return results"},{"question":"Company XYZ requires a new feature for their file storage system. The feature involves organizing a list of filenames based on certain rules. A filename is a non-empty string consisting of lowercase letters and digits. The rules for organizing the filenames are: 1. Filenames must be grouped by their initial character (the first character of the filename). 2. Within each group, filenames should be sorted in lexicographical order. 3. If two filenames are identical, maintain their original relative order from the input list. Implement a function to organize the filenames based on the rules above. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of filenames. The next n lines contain the filenames, one per line. Each filename is a non-empty string of lowercase letters and digits and will be at most 100 characters long. Output Print the organized list of filenames. For each group (defined by the initial character), output the filenames in lexicographical order. The groups should appear in lexicographical order of their initial characters. Examples Input 5 file1 apple banana file2 alpha Output 2 alpha apple file1 file2 banana Note In the first test case, \'a\' appears before \'b\', which in turn appears before \'f\'. Within the \'a\' group, \\"alpha\\" comes before \\"apple\\". Within the \'f\' group, \\"file1\\" comes before \\"file2\\". The file \\"banana\\" is its own group as no other filenames start with \'b\'.","solution":"def organize_filenames(n, filenames): Organizes the list of filenames based on the specified rules. :param n: Number of filenames :param filenames: List of filenames, each being a non-empty string :return: Organized list of filenames from collections import defaultdict # Group filenames by their initial characters groups = defaultdict(list) for filename in filenames: initial_char = filename[0] groups[initial_char].append(filename) # Organize each group and combine them in result list result = [] for initial_char in sorted(groups.keys()): sorted_group = sorted(groups[initial_char]) result.extend(sorted_group) return result"},{"question":"You are given a list of integers. Your task is to find the largest integer in the list that is prime. If no prime number is present in the list, return -1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. SAMPLE INPUT 2 6 15 3 8 6 12 9 4 4 6 8 12 SAMPLE OUTPUT 3 -1 Explanation Number of test cases = 2 1st test case, number of elements = 6 Largest prime number in the list is 3 2nd test case, number of elements = 4 There are no prime numbers in the list, so output is -1","solution":"def is_prime(num): Determines if the given number is a prime number. A prime number is greater than 1 and has no divisors other than 1 and itself. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def largest_prime_in_list(lst): Takes a list of integers and returns the largest prime number in it. If there are no primes in the list, returns -1. primes = [num for num in lst if is_prime(num)] return max(primes, default=-1)"},{"question":"Write a program that manages a collection of unique integers with the following operations: * add x: Add integer x to the collection. If x is already present, ignore this operation. * remove x: Remove integer x from the collection if it exists. If x does not exist, ignore this operation. * contains x: Check if integer x is present in the collection. Print \'true\' if it is, otherwise print \'false\'. Notes Template in Python Constraints * 1 ≤ x ≤ 1000000 * 1 ≤ number of operations ≤ 1000000 Input The first line contains the number of operations, m. The following m lines contain the operations in the format described above. Output For each \'contains\' operation, output \'true\' or \'false\' on a new line. Examples Input 7 add 5 add 10 remove 5 contains 5 contains 10 add 10 contains 10 Output false true true Input 9 add 1 add 2 add 3 remove 2 contains 1 contains 2 contains 3 remove 3 contains 3 Output true false true false","solution":"class UniqueIntegerCollection: def __init__(self): self.collection = set() def add(self, x): self.collection.add(x) def remove(self, x): self.collection.discard(x) def contains(self, x): return x in self.collection def manage_collection(operations): unique_collection = UniqueIntegerCollection() results = [] for operation in operations: op = operation.split() if op[0] == \'add\': unique_collection.add(int(op[1])) elif op[0] == \'remove\': unique_collection.remove(int(op[1])) elif op[0] == \'contains\': results.append(\'true\' if unique_collection.contains(int(op[1])) else \'false\') return results"},{"question":"You are given a list of N integers, and a target integer T. Your task is to determine if there exist two distinct elements in the list that add up to T. If such a pair exists, print \\"Yes\\", otherwise, print \\"No\\". Constraints * 2 leq N leq 10^5 * -10^9 leq elements of the list leq 10^9 * -10^9 leq T leq 10^9 * All elements in the list are integers. Input Input is given from Standard Input in the following format: N T a_1 a_2 ... a_N Output Print \\"Yes\\" if there are two distinct elements in the list that sum to T, otherwise print \\"No\\". Examples Input 5 9 2 7 11 15 1 Output Yes Input 4 6 3 1 4 2 Output Yes Input 3 10 1 2 3 Output No","solution":"def two_sum_exists(n, T, nums): Determines if there exist two distinct elements in the list that add up to T. n: int - the number of elements in the list. T: int - the target integer nums: list of int - the list of integers Returns \\"Yes\\" if such a pair exists, otherwise \\"No\\". seen = set() for num in nums: if T - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"Alex has decided to create a series of floors for his new office building. Each floor is made up of rooms, and each room is connected to its adjacent rooms with doors. His goal is to design the layout so that each floor is generally accessible by moving only left and right between rooms. Alex has a budget that dictates the maximum number of floors he can build, but he wants to maximize the floor space usage of each floor. To simplify, let\'s consider each floor to be a sequence of rooms in a straight line. Furthermore, each room on a floor has a value that denotes its floor space usage score. Given an integer n, representing the maximum number of floors he can build and a 2D list (array of arrays) with integer values, where each array corresponds to a possible configuration of rooms for a floor, help Alex determine the floor configuration that maximizes the total floor space usage. If there are multiple configurations with the same total floor space usage, you can return any of them. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of possible floors Alex can build. Each of the next n lines describes a potential floor configuration. Each floor configuration line starts with an integer m (1 ≤ m ≤ 100), the number of rooms in that floor, followed by m space-separated integers representing the floor space usage scores of each room in that configuration. Output In the first line, print the total floor space usage score for the chosen floor configuration. In the second line, print the chosen floor configuration as space-separated integers. Example Input 3 3 2 3 1 4 1 2 3 4 2 5 5 Output 10 1 2 3 4 Explanation In the provided sample: - The first configuration has a total floor space usage score of 6 (2+3+1). - The second configuration has a total floor space usage score of 10 (1+2+3+4). - The third configuration has a total floor space usage score of 10 (5+5). The second configuration and the third configuration have the same total score, but the second configuration is lying first, so it is selected. Alternatively, you could also select the third configuration because it has the same total floor space usage.","solution":"def maximize_floor_space(n, configurations): This function takes an integer n and a list of configurations to return the configuration that maximizes the total floor space usage. :param n: Maximum number of floors. :param configurations: A list of lists where each list contains room values for a floor. :return: A tuple containing the maximum total floor space usage and the best floor configuration. max_floor_space = 0 best_configuration = [] for config in configurations: floor_space = sum(config) if floor_space > max_floor_space: max_floor_space = floor_space best_configuration = config return max_floor_space, best_configuration"},{"question":"You are given a sequence of integers and you need to perform operations to make all elements in the sequence equal. In each operation, you can select a contiguous subsequence of the array and either increment or decrement each element of that subsequence by 1. Calculate the minimum number of operations required to make all elements of the sequence equal. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) representing the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^9), representing the sequence. Output Print a single integer, which is the minimum number of operations needed to make all elements of the sequence equal. Example Input 5 1 2 3 4 5 Output 6 Input 4 4 2 2 4 Output 4","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements in the sequence equal. # Median minimizes the number of moves to make all elements equal arr.sort() median = arr[len(arr) // 2] operations = sum(abs(x - median) for x in arr) return operations"},{"question":"You are given a tree with N nodes and N-1 edges. Each node is labeled from 1 to N and each edge is weighted. You need to find the maximum weighted path between any two nodes in the tree. Input The input consists of multiple test cases in the format below. The first line contains an integer T (1 leq T leq 10), the number of test cases. For each test case: - The first line contains an integer N (2 leq N leq 1000), the number of nodes in the tree. - The following N-1 lines each contain three integers u, v, w (1 leq u, v leq N, 1 leq w leq 1000), denoting an edge between nodes u and v with weight w. Output For each test case, print the weight of the maximum path in one line. Examples Input 2 4 1 2 3 2 3 4 2 4 2 3 1 2 1 1 3 5 Output 7 6","solution":"from collections import defaultdict import sys def tree_diameter(edges, N): def bfs(start_node): visited = [-1] * (N + 1) visited[start_node] = 0 queue = [start_node] max_distance, max_node = 0, start_node while queue: current_node = queue.pop(0) current_dist = visited[current_node] for neighbor, weight in graph[current_node]: if visited[neighbor] == -1: visited[neighbor] = current_dist + weight queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] max_node = neighbor return max_node, max_distance graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Find the furthest node from any node (usually node 1) furthest_node = bfs(1)[0] # Find the furthest node from the furthest_node found above tree_diameter_value = bfs(furthest_node)[1] return tree_diameter_value def solve(tree_cases): results = [] for N, edges in tree_cases: results.append(tree_diameter(edges, N)) return results def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) case_lines = input_lines[1:] cases = [] i = 0 for _ in range(T): N = int(case_lines[i]) edges = [] for j in range(i + 1, i + N): u, v, w = map(int, case_lines[j].split()) edges.append((u, v, w)) cases.append((N, edges)) i += N return cases def main(input_data): tree_cases = parse_input(input_data) results = solve(tree_cases) for res in results: print(res)"},{"question":"Given an array of integers, you need to find out whether we can perform any number of moves to make all array elements equal. In each move, you can choose any two different elements and: - Increase one of them by the value of the other element. - Decrease one of them by the value of the other element. Write a function `canMakeElementsEqual(arr)` that determines if it\'s possible to make all array elements equal using any number of moves as described. The function should return `True` if possible, otherwise `False`. # Input - An array `arr` of length `n (1 ≤ n ≤ 100000)`, where each element is an integer. # Output - Return `True` if it\'s possible to make all elements equal with any number of the described moves, otherwise return `False`. # Examples Input: ``` arr = [6, 9, 3] ``` Output: ``` True ``` Input: ``` arr = [8, 5, 7, 13] ``` Output: ``` False ``` # Explanation: The key to solving this problem lies in the properties of the greatest common divisor (GCD). You can perform the operations to bring all values to a common multiple or reduce them to the GCD of the entire array. The algorithm needs to determine if all array elements can be manipulated to converge on a single value through the allowed moves. If the GCD of the array is 1 or if all elements share the same GCD greater than 1, then it\'s possible to make them equal; otherwise, it is not.","solution":"import math from functools import reduce def canMakeElementsEqual(arr): Determine if it\'s possible to make all elements in the array equal using the allowed operations. if len(arr) == 1: return True # Calculate the GCD of the entire array gcd_value = reduce(math.gcd, arr) # If the GCD is greater than 1, it\'s possible to make all elements equal return gcd_value > 1"},{"question":"Fatima loves coding challenges and often tries to find complex patterns in sequences of numbers. Recently, she came across a particularly interesting problem that involves finding special subarrays in an array of integers. A subarray is considered special if the sum of its elements equals a given target integer, k. Fatima wants to find out the number of such special subarrays in a given array. For instance, consider the array [1, 2, 3, -1, 2] and the target sum k = 4. The special subarrays in this case are: - [1, 2, 3, -1] - [3, -1, 2] Thus, there are two special subarrays for this example. Can you help Fatima by writing a program that finds the number of special subarrays in a given array? Input The first line contains two integers n and k, where n is the number of elements in the array (1 ≤ n ≤ 10^5) and k is the target sum (|k| ≤ 10^9). The second line contains n integers representing the elements of the array. Each element is between -10^4 and 10^4. Output Print one line containing the number of special subarrays with sum equal to k. Examples Input 5 5 1 2 3 1 1 Output 2 Input 4 0 1 -1 1 -1 Output 4","solution":"def count_special_subarrays(n, k, arr): Returns the number of special subarrays where the sum of its elements equals k. Parameters: n (int): number of elements in the array. k (int): target sum. arr (list of int): list of integers representing the array. Returns: int: number of special subarrays with sum equal to k. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in arr: current_sum += num if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count # Example usage # n, k = 5, 5 # arr = [1, 2, 3, 1, 1] # print(count_special_subarrays(n, k, arr)) # Output should be 2"},{"question":"For a given online game, players can complete various quests that grant them experience points (XP). You are tasked with developing a feature to calculate the total XP a player has earned from completing a series of quests. Each quest has three possible outcomes: 1. **Success:** The player earns a specified amount of XP. 2. **Failure:** The player earns no XP. 3. **Critical Success:** The player earns double the specified amount of XP. The game logs each player\'s quest outcomes and the associated XP for each quest. Your job is to write a program that reads these logs and calculates the total XP earned by the player. # Input - The input consists of multiple datasets. Each dataset represents one player\'s quest log and is formatted as follows: - The first line contains an integer `n`, the number of quests completed by the player. - The next `n` lines each contain a string representing the outcome of the quest (\'Success\', \'Failure\', or \'Critical Success\') followed by the amount of XP the quest would grant on a success (an integer). # Output - For each dataset, output a single line containing the total XP earned by the player. # Constraints - `1 <= n <= 100` - `1 <= XP <= 1000` # Example Input ``` 3 Success 50 Failure 30 Critical Success 20 2 Success 100 Critical Success 40 0 ``` Output ``` 90 180 ``` # Notes - In the first dataset, the player completes 3 quests: - The first quest is a success, so the player earns 50 XP. - The second quest is a failure, so the player earns 0 XP. - The third quest is a critical success, so the player earns 2 * 20 = 40 XP. The total XP is `50 + 0 + 40 = 90`. - In the second dataset, the player completes 2 quests: - The first quest is a success, so the player earns 100 XP. - The second quest is a critical success, so the player earns 2 * 40 = 80 XP. The total XP is `100 + 80 = 180`. - The input ends with a dataset containing `0`, which should not be processed or output.","solution":"def calculate_total_xp(quest_log): Calculate total XP earned by the player given the quest log. :param quest_log: List of tuples containing outcome and XP value as (outcome, xp_value) :return: Total XP earned total_xp = 0 for outcome, xp in quest_log: if outcome == \'Success\': total_xp += xp elif outcome == \'Critical Success\': total_xp += 2 * xp # \'Failure\' adds 0 XP, so no need to handle it explicitly return total_xp def read_quest_logs(input_logs): Read quest logs from the input and calculate the total XP for each dataset. :param input_logs: Multiline string where each dataset contains quest outcome and XP value :return: List of total XP for each dataset results = [] datasets = input_logs.strip().split(\\"nn\\") for dataset in datasets: lines = dataset.split(\'n\') n = int(lines[0]) if n == 0: continue quest_log = [] for i in range(1, n + 1): outcome, xp = lines[i].rsplit(\' \', 1) quest_log.append((outcome, int(xp))) total_xp = calculate_total_xp(quest_log) results.append(total_xp) return results"},{"question":"Given a grid where each cell contains a certain amount of gold (in grams), find the path from the top-left corner to the bottom-right corner that maximizes the total amount of gold collected. The player can only move right or down at any point in time. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the grid. - The next n lines each contain m integers, where the i-th line contains the gold values of the cells in the i-th row. **Output:** - Print a single integer – the maximum amount of gold that can be collected. **Examples:** **Input:** 3 3 1 3 1 1 5 1 4 2 1 **Output:** 12 **Input:** 4 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 **Output:** 28 **Explanation:** In the first example, the path can be 1 -> 3 -> 5 -> 1 -> 1 -> 1 with a total of 12. In the second example, the best path collects 1+2+3+4+5+6+7, yielding 28 as the total.","solution":"def max_gold_collected(n, m, grid): # Initialize a dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Iterate over the grid to fill the dp array according to the rule for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + grid[i][j] # The answer is at the bottom-right corner of the dp array return dp[n-1][m-1] # Example usage grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_gold_collected(3, 3, grid)) # Output: 12"},{"question":"Given a list of integers, Alice and Bob are playing a game where they take turns removing a single element from the list. Alice always goes first. The game continues until only one element is left, at which point the game ends. If the sum of the elements removed by Alice is greater than the sum of the elements removed by Bob, Alice wins. Otherwise, Bob wins. You are given the initial list of integers. Your task is to determine who the winner is under the assumption that both players play optimally. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. Output Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\". Example Input 5 1 2 3 4 5 Output Alice Note In the example, Alice can pick elements in the following order to ensure her win: - First Turn: Alice takes 5 - Second Turn: Bob takes 4 - Third Turn: Alice takes 3 - Fourth Turn: Bob takes 2 - Remaining element: 1 (game ends) Sum of elements taken by Alice = 5 + 3 = 8 Sum of elements taken by Bob = 4 + 2 = 6 Since 8 > 6, Alice wins.","solution":"def determine_winner(n, elements): Determine the winner of the game. :param n: Integer, the number of elements in the list :param elements: List of integers, the elements in the list :return: String, \\"Alice\\" if Alice wins, otherwise \\"Bob\\" sorted_elements = sorted(elements, reverse=True) alice_sum = 0 bob_sum = 0 for i in range(n): if i % 2 == 0: alice_sum += sorted_elements[i] else: bob_sum += sorted_elements[i] return \\"Alice\\" if alice_sum > bob_sum else \\"Bob\\""},{"question":"Alice and Bob love solving puzzles with numbers. Today, they stumbled upon an interesting series of numbers and want to determine whether a given number is part of the series. The series is defined such that the nth term of the series is the sum of the squares of the first n natural numbers. Formally, the nth term is given by: S(n) = 1^2 + 2^2 + 3^2 + ... + n^2 Given a number x, your task is to determine if x is a term in this series. Input The first line contains an integer x (1 ≤ x ≤ 10^9). Output Print \\"YES\\" (without quotes) if x is in the series, and \\"NO\\" (without quotes) otherwise. Examples Input 14 Output NO Input 55 Output YES Explanation In the first sample, the number 14 is not a sum of the squares of the first n natural numbers for any n. In the second sample, the number 55 is the sum of the squares of the first 5 natural numbers: 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55.","solution":"def is_in_series(x): Determines if x is a term in the series defined by the sum of squares of the first n natural numbers. Args: x (int): The number to check. Returns: str: \\"YES\\" if x is in the series, \\"NO\\" otherwise. n = 1 sum_of_squares = 0 while sum_of_squares < x: sum_of_squares += n * n if sum_of_squares == x: return \\"YES\\" n += 1 return \\"NO\\""},{"question":"Alice and Bob are playing a game on a graph. The graph is undirected and simple, with no self-loops or multiple edges between any pair of nodes. The graph consists of n nodes and m edges. The game is played in turns, starting with Alice. During each turn, a player must select an edge and remove it from the graph. The winner is the player who removes the last edge. However, Bob doesn\'t like losing and has decided to always adopt a strategy that forces Alice to lose whenever possible. Given the number of test cases, determine for each test case who will win the game if both players play optimally. Input The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Each test case begins with two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 1000), the number of nodes and edges in the graph, respectively. The next m lines of each test case contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing an edge between nodes u and v. Output For each test case, print \\"Alice\\" if Alice can force a win when both players play optimally, or \\"Bob\\" if Bob can force a win. Example Input 3 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 3 4 Output Bob Alice Bob Note In the first test case, the graph is a triangle, and removing any edge leaves a path with two edges remaining; therefore, Bob can always make the final move. In the second test case, by optimally removing edges, Alice can force Bob into a position where only one edge is left for Bob to remove, making Alice the winner. In the third test case, the sequence of removals will ultimately allow Bob to take the last move.","solution":"def determine_winner(n, m, edges): # The outcome of the game is determined by the parity of the number of edges. if m % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" def find_winners(test_cases): results = [] for test in test_cases: n, m, edges = test results.append(determine_winner(n, m, edges)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[idx].split()) edges = [] for i in range(m): u, v = map(int, lines[idx + 1 + i].split()) edges.append((u, v)) test_cases.append((n, m, edges)) idx += 1 + m return test_cases"},{"question":"Alex is a software developer who often encounters repetitive tasks while working on data analysis projects. To make his work more efficient, he decides to write a program that automates the process of summarizing data by creating chunks and computing the average of values in each chunk. You are tasked with helping Alex by writing a function that takes a list of numbers and an integer `k`, and returns a list of averages of the numbers in the chunks of size `k`. If the last chunk contains less than `k` numbers, compute the average for that partial chunk as well. Input - A single list of integers representing the numbers (`1 <= len(numbers) <= 1000` and `-1000 <= numbers[i] <= 1000`) - An integer `k` (`1 <= k <= len(numbers)`) Output - A list of floating-point numbers representing the averages of the chunks. Each average should be rounded to two decimal places. Constraints 1. The input list will always contain at least one number, and `k` will be a valid positive integer such that it does not exceed the length of the list. Example Input - numbers = [1, 2, 3, 4, 5, 6, 7] - k = 3 Output - [2.0, 5.0, 7.0] Explanation - The first chunk is [1, 2, 3] with an average of (1+2+3) / 3 = 2.0 - The second chunk is [4, 5, 6] with an average of (4+5+6) / 3 = 5.0 - The last chunk is [7] with an average of 7 / 1 = 7.0","solution":"def chunk_averages(numbers, k): Returns a list of averages of `numbers` in chunks of size `k`. Each average is rounded to two decimal places. averages = [] for i in range(0, len(numbers), k): chunk = numbers[i:i+k] avg = round(sum(chunk) / len(chunk), 2) averages.append(avg) return averages"},{"question":"In a grid-based city, each block is identified by a pair of coordinates (x, y). The city has exactly n houses and m utility stations such as water, gas, electricity, etc. These locations are given as two lists of coordinates: `houses` and `stations`, each containing n and m pairs respectively. Utility companies want to ensure that every house has at least one station within a specific range d. The direct line distance between any two blocks (x1, y1) and (x2, y2) in the grid is defined as Euclidean distance: [ text{distance}((x1, y1), (x2, y2)) = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Given the lists of houses, stations, and the maximum allowable distance d, determine if every house has at least one station within distance d. If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line of input contains three integers n, m, and d (1 ≤ n, m ≤ 1000, 1 ≤ d ≤ 100), representing the number of houses, the number of stations, and the maximum distance. - The next n lines each contain two integers x and y (0 ≤ x, y ≤ 1000) representing the coordinates of a house. - The following m lines each contain two integers x and y (0 ≤ x, y ≤ 1000) representing the coordinates of a utility station. # Output - Print \\"YES\\" if every house has at least one station within the distance d, otherwise print \\"NO\\". # Examples Input ``` 3 2 5 0 0 2 3 4 4 1 1 5 5 ``` Output ``` YES ``` Input ``` 3 1 2 0 0 1 1 2 2 0 3 ``` Output ``` NO ``` # Note In the first example, every house is within a distance of 5 from at least one station. The houses at coordinates (0,0), (2,3), and (4,4) each have a station within the required distance. In the second example, house at (2,2) doesn\'t have any station within distance 2, hence the output is \\"NO\\".","solution":"import math def is_within_range(houses, stations, d): Returns \\"YES\\" if every house has at least one station within distance d. Otherwise, returns \\"NO\\". for hx, hy in houses: found = False for sx, sy in stations: dist = math.sqrt((sx - hx) ** 2 + (sy - hy) ** 2) if dist <= d: found = True break if not found: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, your task is to find the longest contiguous subarray such that all elements in the subarray have the same value. Input The first line contains an integer n, the number of elements in the list (1 ≤ n ≤ 10000). The second line contains n space-separated integers, representing the elements of the list (each element of the list is an integer between 1 and 100). Output Print the length of the longest contiguous subarray with all elements having the same value. Examples Input: 10 1 2 2 3 3 3 4 4 4 4 Output: 4 Input: 6 5 5 5 5 5 5 Output: 6","solution":"def longest_contiguous_subarray(n, array): Returns the length of the longest contiguous subarray with all elements having the same value. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if array[i] == array[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"Find the number of distinct valid paths from the top-left corner to the bottom-right corner of an N x M grid, under the following conditions: 1. Each move in the grid must be either to the right (`R`) or downward (`D`). 2. You cannot visit the same cell twice except for the ending cell (bottom-right corner). Constraints * 1 leq N, M leq 100 * N and M are integers. Input Input is given from Standard Input in the following format: N M Output Print the number of distinct valid paths from the top-left to the bottom-right corner of the grid. Examples Input 3 3 Output 6 Input 4 2 Output 4 Input 5 5 Output 70 Input 2 2 Output 2","solution":"def num_of_distinct_paths(N, M): Returns the number of distinct valid paths from the top-left corner to the bottom-right corner of an N x M grid. # Using dynamic programming to solve this problem dp = [[0] * M for _ in range(N)] # There is only one way to reach any cell in the first row (all rights) for i in range(M): dp[0][i] = 1 # There is only one way to reach any cell in the first column (all downs) for j in range(N): dp[j][0] = 1 # Fill the DP table for i in range(1, N): for j in range(1, M): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[N-1][M-1] # Read input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read().strip() N, M = map(int, input.split()) print(num_of_distinct_paths(N, M))"},{"question":"In this problem, your task is to find meaningful Wikipedia links: given a list of URL links from different Wikipedia pages, determine whether a link points to a meaningful Wikipedia page or not. You are given a set of 100 URLs with ids 1 through 100. You are also given a file training_labels.txt containing the labels for URLs with ids 1 through 50, which comprise the learning data set. You have to output the classification results for URLs with ids 51 through 100 in the same format. Input The file training_labels.txt contains 50 lines. Each line contains a single integer 0 or 1. Line i (1-based) contains the label of the URL {i}. Label 1 indicates that the URL points to a meaningful Wikipedia page, while label 0 indicates that it does not. Output Output 50 lines, one line per URL 51 through 100. Line i (1-based) should contain the classification result for the URL {i + 50}.","solution":"import random def classify_urls(training_labels_file): Classify urls as meaningful or not using the training labels. The function returns a list containing the classification for URLs 51 to 100. We will use a random approach for classification in this placeholder due to lack of actual training. with open(training_labels_file, \\"r\\") as file: training_labels = [int(line.strip()) for line in file.readlines()] # Here we would use the training data to actually train a model or use some heuristic. # For now, I\'ll use a random classifier as a placeholder. classifications = [random.choice([0, 1]) for _ in range(51, 101)] return classifications"},{"question":"The Berland Post Office has decided to automate the sorting of parcels in their warehouses. Each parcel has a unique identifier and a destination code. Given a starting arrangement of parcels and their respective destinations, the goal is to sort the parcels such that they are grouped by the same destination code in ascending order of their identifiers. # Input The input consists of two lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of parcels. 2. The second line contains `n` pairs of integers `(id, code)`, where `id` (1 ≤ id ≤ 10000) is the identifier of the parcel and `code` (1 ≤ code ≤ 1000) is its destination code. # Output Print the sorted list of parcels, grouped by their destination codes in ascending order, with each parcel listed by its identifier. # Example Input ``` 5 1003 20 1001 10 1002 20 1004 10 1000 30 ``` Output ``` 1001 10 1004 10 1002 20 1003 20 1000 30 ``` This problem requires you to sort the input pairs by their destination codes in ascending order, and within each group of parcels with the same destination code, the parcels should be listed by their identifier in ascending order.","solution":"def sort_parcels(n, parcels): Sort parcels by destination code and within each code by identifier. :param n: Number of parcels (integer) :param parcels: List of tuples, each containing (identifier, destination code) :return: Sorted list of parcels return sorted(parcels, key=lambda x: (x[1], x[0]))"},{"question":"You are given an array of integers. Your task is to determine if it is possible to partition the array into two non-empty subsets such that the sum of the elements in both subsets is the same. INPUT The first line contains an integer T, denoting the number of test cases. The next T lines contain: - An integer N, the number of elements in the array. - N space-separated integers representing the array elements. OUTPUT For each test case, print `YES` if the array can be partitioned into two subsets with the same sum, otherwise print `NO`. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ Array elements ≤ 1000 SAMPLE INPUT 3 4 1 5 11 5 3 1 1 1 5 3 1 4 2 2 SAMPLE OUTPUT YES NO YES HINT To solve this problem, think about using a dynamic programming approach where you check if there is a subset with sum equal to half of the total sum of the array. If the total sum is odd, it is not possible to partition the array into two subsets with equal sum.","solution":"def can_partition(nums): Determines if it is possible to partition the array into two subsets with equal sum. total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(can_partition(arr)) return results # Helper function to parse the input format def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].strip().split())) test_cases.append((N, arr)) index += 2 return T, test_cases"},{"question":"You are given an array of integers. Your task is to find the length of the longest subsequence such that every successive element in this subsequence is greater by 1 than the previous one. Constraints * 1 ≤ n ≤ 100000 * -100000 ≤ ai ≤ 100000 Input The first line contains an integer n, which is the number of elements in the array. The second line contains n integers, which are the elements of the array. Output Print the length of the longest subsequence where each successive element is greater by 1 than the previous one. Examples Input 7 1 2 3 4 2 3 4 5 Output 4 Input 5 10 9 8 7 6 Output 1","solution":"def longest_subsequence(arr): Given an array of integers, finds the length of the longest subsequence where each successive element is greater by 1 than the previous one. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_length += 1 else: longest = max(longest, current_length) current_length = 1 longest = max(longest, current_length) return longest"},{"question":"A video streaming company wants to implement a caching system to reduce bandwidth usage. The company has a list of video IDs that are requested in a certain order, and they want to keep track of how many times each video ID is requested before being evicted from the cache. They use an LRU (Least Recently Used) cache replacement policy. Implement a function to simulate the video caching system. The function should take two input arguments: the maximum cache size and the list of video requests. It should return a dictionary where the keys are the video IDs and the values are the number of times each video was accessed before being evicted from the cache. Input Format: - cache_size: an integer representing the maximum number of videos that can be stored in the cache at any time. - video_requests: a list of integers representing the order in which video IDs are requested. Output Format: - A dictionary where the keys are video IDs and the values are the number of times each video was accessed before being evicted. Constraints: - 1 ≤ cache_size ≤ 100 - 1 ≤ len(video_requests) ≤ 1000 - 1 ≤ video_id ≤ 1000 SAMPLE INPUT 3 [4, 2, 3, 2, 4, 1, 3, 2] SAMPLE OUTPUT {4: 2, 2: 3, 3: 2, 1: 1} Explanation: 1. The cache starts empty. 2. The first request is for video 4. The cache now contains [4]. 3. The second request is for video 2. The cache now contains [4, 2]. 4. The third request is for video 3. The cache now contains [4, 2, 3]. 5. The fourth request is for video 2. The cache remains [4, 2, 3]. 6. The fifth request is for video 4. The cache remains [4, 2, 3]. 7. The sixth request is for video 1. The cache evicts the least recently used video (4) to make room for 1, so the cache is now [2, 3, 1]. 8. The seventh request is for video 3. The cache remains [2, 3, 1]. 9. The eighth request is for video 2. The cache remains [2, 3, 1]. Before each eviction, record the number of times the video was accessed. The output shows the access count for each video ID.","solution":"from collections import OrderedDict def video_cache_access_count(cache_size, video_requests): Simulates an LRU caching system and returns a dictionary with video IDs and the number of times each was accessed before being evicted. cache = OrderedDict() access_counts = {} for video_id in video_requests: if video_id in cache: # If the video is already in the cache, increment its count access_counts[video_id] += 1 # Move this video to the end to mark it as recently used cache.move_to_end(video_id) else: # If the cache is at capacity, evict the LRU item if len(cache) >= cache_size: lru_video_id, _ = cache.popitem(last=False) # Record the access count at the time of eviction access_counts[lru_video_id] = access_counts.get(lru_video_id, 0) # Add the new video to the cache cache[video_id] = True access_counts[video_id] = access_counts.get(video_id, 0) + 1 # Ensure final counts include access counts of all videos that were never evicted for video_id in cache.keys(): if video_id not in access_counts: access_counts[video_id] = 1 return access_counts"},{"question":"You are given an array of n integers, and your task is to determine if the sequence can be split into exactly k contiguous subarrays such that the absolute difference between the sum of each subarray and the sum of each other subarray is at most d. More formally, given an array, return whether it is possible to partition the array into k subarrays a1, a2, ..., ak such that for all i, j (1 ≤ i, j ≤ k), |sum(ai) - sum(aj)| ≤ d. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains a single integer, t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case contains three space-separated integers n (1 ≤ n ≤ 10^5), k (1 ≤ k ≤ n), and d (0 ≤ d ≤ 10^9). The second line contains n space-separated integers representing the array elements, ai (-10^9 ≤ ai ≤ 10^9). Output For each test case, print \\"YES\\" if it is possible to split the array into k contiguous subarrays satisfying the condition, otherwise print \\"NO\\". Examples Input 3 5 3 1 1 2 3 4 5 5 2 10 1 1 1 1 1 6 4 3 1 -2 3 -4 5 6 Output NO YES YES Explanation In the first test case, it is not possible to partition the array into 3 subarrays with the absolute difference between sums of any subarrays being ≤ 1. In the second test case, one possible partition is [1, 1, 1] and [1, 1], where the sums are 3 and 2, with an absolute difference of 1 which is ≤ 10, so the output is \\"YES\\". In the third test case, one possible partition is [1, -2], [3], [-4], [5, 6], where the sums are -1, 3, -4, and 11. The absolute differences are |3 - (-1)| = 4, |-1 - (-4)| = 3, and so on. However, among other possible partitions, it is found that the differences can be made ≤ 3, hence the output \\"YES\\".","solution":"def can_partition_within_difference(n, k, d, array): Determine if the array can be partitioned into k subarrays such that the absolute difference between the sum of any two subarrays is at most d. # It is impossible to partition the array if k > n if k > n: return \\"NO\\" # Calculate the prefix sums of the array prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + array[i] # Use a dynamic programming approach to partition the array dp = [[float(\'inf\')] * (k + 1) for _ in range(n + 1)] dp[0][0] = 0 for i in range(1, n + 1): for j in range(1, k + 1): for l in range(0, i): subarray_sum = prefix_sums[i] - prefix_sums[l] if dp[l][j - 1] != float(\'inf\'): dp[i][j] = min(dp[i][j], max(dp[l][j - 1], subarray_sum)) # Check if the difference between the max sum and min sum of any partition is within d min_sum = min(dp[n][j] for j in range(1, k + 1) if dp[n][j] != float(\'inf\')) max_sum = max(dp[n][j] for j in range(1, k + 1) if dp[n][j] != float(\'inf\')) if max_sum - min_sum <= d: return \\"YES\\" else: return \\"NO\\" def solve(t, test_cases): results = [] for case in test_cases: n, k, d, array = case result = can_partition_within_difference(n, k, d, array) results.append(result) return results"},{"question":"Lisa is a spy infiltrating an enemy communications network. She finds that the network is composed of n nodes connected by m unidirectional communication channels. Each node has certain messages that can be transferred between nodes through these channels. Every channel allows messages to be transferred from one node to another in a single direction and has a certain transfer time associated with it. Lisa needs to pass a message from node 1 to node n. However, in order to avoid detection, she can only use each channel once and must transfer the message in the shortest possible time. Write a program to help Lisa determine the minimum time required to transfer a message from node 1 to node n, or determine that it is impossible to transfer the message under these constraints. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of nodes and the number of channels. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 10^9) — representing a channel from node u to node v with a transfer time of t. Note that there can be multiple channels between the same pair of nodes. Output Print one integer — the minimum time required to transfer the message from node 1 to node n. If it\'s impossible to transfer the message, print -1. Example Input 5 6 1 2 2 2 3 4 3 4 3 4 5 1 1 3 7 3 5 5 Output 10 Note In this example, Lisa can transfer the message using the path 1 → 2 → 3 → 4 → 5 with a total transfer time of 2 + 4 + 3 + 1 = 10. There is no other path that transfers the message in a shorter amount of time.","solution":"import heapq def minimum_transfer_time(n, m, channels): adj_list = {i: [] for i in range(n)} for u, v, t in channels: adj_list[u-1].append((v-1, t)) dist = [float(\'inf\')] * n dist[0] = 0 pq = [(0, 0)] while pq: curr_dist, node = heapq.heappop(pq) if curr_dist > dist[node]: continue for neighbour, time in adj_list[node]: distance = curr_dist + time if distance < dist[neighbour]: dist[neighbour] = distance heapq.heappush(pq, (distance, neighbour)) return dist[n-1] if dist[n-1] != float(\'inf\') else -1"},{"question":"Alex works at a delivery company and is responsible for planning the delivery routes for the drivers. Each delivery point can be considered a node, and the roads between them can be considered edges with certain weights representing the time required to travel between the nodes. Alex needs to ensure that all delivery points are covered using the minimum traveling time, starting from a given central node. Your task is to help Alex by finding the Minimum Spanning Tree (MST) of the graph and return the total weight of the MST. The MST is a subgraph of the graph that connects all vertices with the smallest possible total edge weight. Assume the graph is connected and undirected. Write a function `minimum_spanning_tree(n, edges)` that takes the following inputs: - `n`: an integer representing the number of nodes in the graph (1 ≤ n ≤ 1000). - `edges`: a list of tuples where each tuple contains three integers `(u, v, w)` representing an edge between nodes `u` and `v` with weight `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^6). The function should return an integer representing the total weight of the MST. Example Input: ``` n = 4 edges = [(1, 2, 3), (1, 3, 1), (4, 2, 2), (4, 3, 4)] ``` Output: ``` 6 ``` Note: In the given example, the MST can be obtained using the edges (1, 3, 1), (1, 2, 3), and (4, 2, 2), with the total weight of `1 + 3 + 2 = 6`: ``` 1 - 3 - 4 2 ```","solution":"import heapq def minimum_spanning_tree(n, edges): Returns the total weight of the Minimum Spanning Tree (MST) of a graph. :param n: The number of nodes in the graph :param edges: A list of tuples representing the edges of the graph (u, v, w) :return: The total weight of the MST def prim(start, graph): visited = [False] * (n + 1) min_heap = [(0, start)] # (weight, node) total_weight = 0 edges_in_mst = 0 while min_heap and edges_in_mst < n: weight, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_weight += weight edges_in_mst += 1 for v, w in graph[u]: if not visited[v]: heapq.heappush(min_heap, (w, v)) return total_weight # Build the graph adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Run Prim\'s algorithm from node 1 return prim(1, graph)"},{"question":"Write a function that takes as input a positive integer n and returns a list of strings representing all the unique binary numbers of length n that do not have two consecutive 1s. Your function should adhere to the following constraints: 1. The function must generate binary numbers in lexicographical order. 2. The function should use dynamic programming or backtracking to ensure efficiency. 3. n will be less than or equal to 20. Input: ```python def generate_binary_numbers(n): pass ``` Output: The output should be a list of strings, each string representing a valid binary number of length n. Example: ```python print(generate_binary_numbers(3)) ``` Output: ```python [\'000\', \'001\', \'010\', \'100\', \'101\'] ``` Explanation: For n = 3, the valid binary numbers are: - \'000\': no consecutive 1s - \'001\': no consecutive 1s - \'010\': no consecutive 1s - \'100\': no consecutive 1s - \'101\': no consecutive 1s Note that \'011\', \'110\', and \'111\' are not included as they contain consecutive 1s.","solution":"def generate_binary_numbers(n): Generate all unique binary numbers of length n that do not have two consecutive 1s. :param n: int :return: List of valid binary strings def is_valid(num): Check if a binary number contains two consecutive 1s. return \'11\' not in num def backtrack(path): Use backtracking to generate all binary numbers of length n. if len(path) == n: if is_valid(path): result.append(path) return backtrack(path + \'0\') backtrack(path + \'1\') result = [] backtrack(\'\') return result"},{"question":"Write a function to determine if a point lies inside a rectangle. A rectangle is defined by two opposite corners (x1, y1) and (x2, y2). A point is represented by its coordinates (px, py). Constraints * 1 ≤ q ≤ 1000 * -10000 ≤ x1, y1, x2, y2, px, py ≤ 10000 * (x1, y1) ≠ (x2, y2) Input The entire input looks like: q (the number of queries) 1st query 2nd query ... qth query Each query consists of coordinates of two opposite corners of the rectangle and the coordinates of the point in the following format: x1 y1 x2 y2 px py Output For each query, print \\"1\\" if the point (px, py) is inside or on the border of the rectangle, and \\"0\\" otherwise. Example Input 3 0 0 2 2 1 1 0 0 2 2 3 3 -1 -1 1 1 0 0 Output 1 0 1","solution":"def is_point_in_rectangle(x1, y1, x2, y2, px, py): Determines if the point (px, py) lies inside the rectangle defined by the opposite corners (x1, y1) and (x2, y2). # Ensure the lower bound is always x1, y1 and upper bound is x2, y2 lower_x = min(x1, x2) upper_x = max(x1, x2) lower_y = min(y1, y2) upper_y = max(y1, y2) # Check if point is within bounds (including boundaries) if lower_x <= px <= upper_x and lower_y <= py <= upper_y: return 1 else: return 0 def process_queries(queries): results = [] for query in queries: x1, y1, x2, y2, px, py = map(int, query.split()) result = is_point_in_rectangle(x1, y1, x2, y2, px, py) results.append(result) return results"},{"question":"A delivery company has a total of n delivery locations numbered from 1 to n. Each location is connected to other locations through a network of roads, where some of the roads might be toll roads. A road is defined by its two endpoints and a boolean value indicating whether it is a toll road (1 if it is a toll road, 0 otherwise). The company wants to ensure that its delivery trucks can reach every location without using any toll roads. Given the list of roads and their types (toll or non-toll), determine whether it is possible to travel between all pairs of locations using only non-toll roads. If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains two integers n (2 ≤ n ≤ 1000) — the number of delivery locations, and m (1 ≤ m ≤ 2000) — the number of roads. Each of the next m lines contains three integers u, v, t (1 ≤ u, v ≤ n, u ≠ v, t ∈ {0, 1}). This means there is a road between location u and location v, and t is 0 if it is a non-toll road and 1 if it is a toll road. Output Print \\"YES\\" if it is possible to travel between all pairs of locations using only non-toll roads, otherwise print \\"NO\\". Examples Input 5 5 1 2 0 2 3 1 3 4 0 4 5 0 5 1 1 Output NO Input 4 4 1 2 0 2 3 0 3 4 0 4 1 0 Output YES Note In the first example, although there are roads connecting all locations, it is not possible to travel between all locations using only the non-toll roads. Thus, the output is \\"NO\\". In the second example, there are non-toll roads connecting all locations, making it possible to travel between all locations using only non-toll roads. Thus, the output is \\"YES\\".","solution":"def can_travel_without_toll_roads(n, m, roads): from collections import defaultdict, deque # Create graph for non-toll roads only graph = defaultdict(list) for u, v, t in roads: if t == 0: graph[u].append(v) graph[v].append(u) # Function to perform BFS and count reachable nodes def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) # Check if all nodes are reachable from the first node if bfs(1) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"In a company, each employee has a unique employee ID, which is a positive integer. The company maintains a record of employee transactions for a particular month. Each transaction record contains an employee ID and the transaction amount in dollars. Your task is to find the cumulative transaction amount for each employee ID that appears in the records and determine the employee with the highest total transaction amount. If there are multiple employees with the same highest transaction amount, return the smallest employee ID among them. Constraints: * 1 ≤ T ≤ 1000 — the number of transactions. * 1 ≤ ID_i ≤ 10^5 — the employee ID. * 1 ≤ amount_i ≤ 1000 — the transaction amount. Input Input is given from Standard Input in the following format: T ID_1 amount_1 ID_2 amount_2 : ID_T amount_T Output Print the employee ID with the highest total transaction amount. If there is a tie, print the smallest employee ID among those with the highest total transaction amount. Examples Input 5 1 500 2 300 1 200 2 400 3 600 Output 1 Input 4 4 100 5 100 6 100 5 100 Output 5","solution":"def highest_transaction_employee(transactions): Compute the employee ID with the highest total transaction amount. If there\'s a tie, returns the smallest employee ID among them. Args: transactions (list of tuples): A list where each tuple contains an employee ID and transaction amount. Returns: int: The employee ID with the highest total transaction amount. from collections import defaultdict # Dictionary to store total transaction amount for each employee ID transaction_totals = defaultdict(int) # Calculate the total transaction amount for each employee ID for emp_id, amount in transactions: transaction_totals[emp_id] += amount # Find the employee ID with the highest total transaction amount max_amount = max(transaction_totals.values()) max_ids = [emp_id for emp_id, amount in transaction_totals.items() if amount == max_amount] # Return the smallest employee ID among those with the highest total return min(max_ids)"},{"question":"Given a list of integers, write a function to return the sum of all even integers in the list. SAMPLE INPUT 8 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 20","solution":"def sum_of_even_integers(lst): Returns the sum of all even integers in the list. return sum(x for x in lst if x % 2 == 0)"},{"question":"In a land far away, there is a famous festival called \\"Festival of Candies\\". The highlight of the festival is a game where children are given bags filled with candies. Each candy has a specific weight, and the goal is to distribute the candies into two bags such that the weight difference between the two bags is minimized. However, the catch is that you want to select candies in such a way that the number of candies in each bag is equal. You are given an array of integers representing the weights of candies. Your task is to determine the minimized absolute difference of weights between the two bags if it is possible to split the candies evenly, or to return -1 if it is not possible. Input Format: The first line contains a number t - denoting the number of test cases. For each test case, the first line contains an integer n - the number of candies. The second line contains n integers, representing the weights of the candies. Output Format: For each test case, output the minimized absolute difference of weights between the two bags, or -1 if the candies cannot be evenly split. Constraints: 1 ≤ t ≤ 50 1 ≤ n ≤ 50 1 ≤ Weight of each candy ≤ 100 SAMPLE INPUT 2 4 1 3 2 4 5 5 7 2 6 8 SAMPLE OUTPUT 0 -1","solution":"def min_weight_diff(t, test_cases): from itertools import combinations def can_partition(candies): n = len(candies) if n % 2 != 0: return -1 half = n // 2 total_weight = sum(candies) target = total_weight // 2 min_diff = float(\'inf\') all_combinations = combinations(candies, half) for comb in all_combinations: current_weight = sum(comb) rest_weight = total_weight - current_weight diff = abs(current_weight - rest_weight) min_diff = min(min_diff, diff) return min_diff results = [] for test_case in test_cases: n, weights = test_case result = can_partition(weights) results.append(result) return results"},{"question":"A book store sells notebooks at 5 dollars each and pens at 9 dollars each. Determine if it is possible to buy a combination of notebooks and pens that costs exactly M dollars. You must buy at least one notebook or one pen, but you can choose to buy zero of one of those items. Constraints * M is an integer between 1 and 150, inclusive. Input Input is given from Standard Input in the following format: M Output If it is possible to buy notebooks and pens for exactly M dollars, print `Yes`; otherwise, print `No`. Examples Input 14 Output Yes Input 30 Output Yes Input 2 Output No","solution":"def can_buy_notebooks_and_pens(M): Determines if it is possible to buy a combination of notebooks and pens that costs exactly M dollars. for i in range(M // 5 + 1): if (M - i * 5) % 9 == 0: return \\"Yes\\" return \\"No\\""},{"question":"Alice is a budding software engineer who loves data analysis. She is working on a project that involves analyzing the performance of different algorithms over various input sizes. To do this, she needs to calculate the average time taken by an algorithm to process a given list of problem instances. She has recorded the execution times of the algorithm for each problem instance. Your task is to help Alice compute the average time taken by the algorithm for each list of execution times. Formally, given several lists of execution times, you need to calculate the average execution time for each list and output the result truncated to 6 decimal places. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case is described with two lines. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of execution times in the list. The second line contains n integers t_i (0 ≤ t_i ≤ 10^6) — the execution times for the n problem instances. The sum of n over all test cases does not exceed 10^6. Output For each test case, output a single line containing the average execution time truncated to 6 decimal places. Example Input 3 5 10 20 30 40 50 4 100 150 100 50 6 1 2 3 4 5 6 Output 30.000000 100.000000 3.500000 Note In the first test case, the average execution time is ((10 + 20 + 30 + 40 + 50) / 5 = 150 / 5 = 30.000000). In the second test case, the average execution time is ((100 + 150 + 100 + 50) / 4 = 400 / 4 = 100.000000). In the third test case, the average execution time is ((1 + 2 + 3 + 4 + 5 + 6) / 6 = 21 / 6 = 3.500000).","solution":"def average_execution_time(test_cases): Given a list of test cases containing the number of execution times and the times themselves, return a list of average times truncated to 6 decimal places. results = [] for case in test_cases: n = case[0] times = case[1] avg_time = sum(times) / n results.append(f\\"{avg_time:.6f}\\") return results"},{"question":"Given a list of positive integers, you have to partition the list into two subsets such that the difference between the sum of two subsets is minimized. Constraints * 1 ≤ N ≤ 100 * 1 ≤ A[i] ≤ 200 Input The first line contains an integer N, denoting the number of elements in the list. The second line contains N space-separated integers A[0], A[1], ..., A[N-1] representing the elements of the list. Output Output a single integer, denoting the minimum possible difference between the sums of the two subsets. Example Input 4 1 2 3 9 Output 3 Input 5 1 2 3 4 5 Output 1","solution":"def min_partition_difference(N, A): Computes the minimum difference between the sum of two subsets. Parameters: N (int): The number of elements in the list. A (list): List of N integers. Returns: int: The minimum difference between the sum of two subsets. total_sum = sum(A) target = total_sum // 2 # Create a dp array with initial False values, and set dp[0] = True dp = [False] * (target + 1) dp[0] = True # DP to find the maximum sum that is ≤ target for num in A: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True # Find the maximum value `j` which is true for j in range(target, -1, -1): if dp[j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"In a mysterious land, there is a famous treasure hunt organized every year. The treasure map is obtained by decoding a special sequence. This sequence is formed by a line of lowercase Latin letters and exactly two special characters: \'@\' and \'#\'. The \'@\' symbol indicates the starting point and the \'#\' symbol indicates the ending point of the sequence. The aim is to find the minimum number of moves required to transform this special sequence into a target sequence by rearranging the characters. Rules: 1. You can swap the positions of two adjacent letters in one move. 2. The \'@\' and \'#\' symbols cannot be moved and must remain in their original positions. Given an initial sequence and a target sequence, determine the minimum number of adjacent swaps needed to transform the initial sequence into the target sequence while keeping \'@\' and \'#\' in their positions. Input The first line contains a string `initial` of length n (2 ≤ n ≤ 100) consisting of lowercase Latin letters and exactly one \'@\' and one \'#\'. The second line contains a string `target` of length n consisting of lowercase Latin letters and exactly one \'@\' and one \'#\' in the same positions as in the initial sequence. Output Print the minimum number of moves required to transform the initial sequence into the target sequence. If the transformation is not possible, print \\"-1\\" (without quotes). Examples Input a@b#c c@b#a Output 3 Input abc@def#gh ghi@def#abc Output -1 Input m@no#p m@on#p Output 1","solution":"def min_moves(initial, target): Returns the minimum number of moves required to transform the initial sequence into the target sequence while keeping \'@\' and \'#\' in their positions. If the transformation is not possible, returns -1. if len(initial) != len(target): return -1 # Validate \'@\' and \'#\' positions if initial.index(\'@\') != target.index(\'@\') or initial.index(\'#\') != target.index(\'#\'): return -1 # Remove \'@\' and \'#\' from the sequences initial_filtered = initial.replace(\'@\', \'\').replace(\'#\', \'\') target_filtered = target.replace(\'@\', \'\').replace(\'#\', \'\') if sorted(initial_filtered) != sorted(target_filtered): return -1 initial_filtered = list(initial_filtered) target_filtered = list(target_filtered) moves = 0 i = 0 while i < len(initial_filtered): if initial_filtered[i] != target_filtered[i]: j = i while initial_filtered[j] != target_filtered[i]: j += 1 while j > i: # Swap adjacent characters initial_filtered[j], initial_filtered[j-1] = initial_filtered[j-1], initial_filtered[j] j -= 1 moves += 1 i += 1 return moves"},{"question":"Write a program that computes the factorial of a given integer n. Constraints * 0 ≤ n ≤ 20 Input An integer n is given. Output Print the factorial of the given integer n. Examples Input 5 Output 120 Input 0 Output 1","solution":"def factorial(n): Computes the factorial of the given integer n. :param n: Integer whose factorial is to be calculated. :return: Factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Little Jhool loves numbers and patterns! Recently, he has been fascinated by cyclic patterns in arrays. A cyclic pattern in an array of integers is a sequence where elements can be \'rotated\' such that the array looks the same. Formally, an array, A, of length n, has a cyclic pattern if there exists an integer k (1 ≤ k < n) such that A[i] == A[(i+k) % n] for all i from 0 to n-1. For example, the array [1, 2, 1, 2] has a cyclic pattern with k = 2, because starting from any element and rotating by 2 steps circulates the array to its original form. Your task is to help Little Jhool find the smallest positive integer k such that the array has a cyclic pattern. If no such k exists, return -1. Input format: - The first line contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers, representing the array elements. Output format: - Print the smallest positive integer k that indicates the array has a cyclic pattern. If no such k exists, print -1. Constraints: - 1 ≤ n ≤ 100 - 1 ≤ A[i] ≤ 1000 Example: Input: 4 1 2 1 2 Output: 2 Input: 3 1 2 3 Output: -1 Explanation: In the first example, the array [1, 2, 1, 2] can be rotated by 2 positions to look the same, so the smallest k is 2. In the second example, there\'s no such k that satisfies the condition, so the output is -1.","solution":"def find_cyclic_pattern_k(n, arr): Finds the smallest positive integer k such that the array has a cyclic pattern. If no such k exists, returns -1. for k in range(1, n): if all(arr[i] == arr[(i + k) % n] for i in range(n)): return k return -1"},{"question":"You are tasked with developing an application to process a series of orders in an e-commerce system. Each order includes a list of items and their corresponding quantities. The application must maintain a record of the available stock for each item in the inventory and ensure that the orders can be fulfilled given the current inventory levels. The application should read a list of initial inventory items and quantities, followed by a list of orders. For each order, the application should check if the order can be fulfilled. If it can, the stock is updated by reducing the quantities of the items ordered, and a positive response is given. If it cannot, a negative response is given, and the stock remains unchanged. # Input 1. The first line contains an integer M (1 leq M leq 100,000), the number of different items in the inventory. 2. The next M lines each contain a string and an integer representing the item name (a lowercase alphabetical string no longer than 10 characters) and the quantity in stock respectively. 3. The following line contains an integer N (1 leq N leq 100,000), the number of orders. 4. The next N lines each contain an integer K (1 leq K leq 100), the number of different items in the order. 5. Each of the K lines contains a string and an integer representing the item name and the quantity ordered respectively. # Output For each order, output \\"Yes\\" if the order can be fulfilled and \\"No\\" if it cannot. # Example Input ``` 5 apple 10 banana 5 orange 8 grape 15 mango 10 3 2 apple 3 orange 2 3 banana 2 mango 5 grape 5 2 apple 12 banana 3 ``` Output ``` Yes Yes No ``` # Explanation - Order 1 requests 3 apples and 2 oranges. Both are available in sufficient quantities, so the order is fulfilled and the stock is updated. - Order 2 requests 2 bananas, 5 mangoes, and 5 grapes. All are available in sufficient quantities, so the order is fulfilled and the stock is updated. - Order 3 requests 12 apples and 3 bananas. The request for apples exceeds the available stock, so the order is not fulfilled, and the stock remains unchanged.","solution":"def process_orders(inventory_input, orders_input): from collections import defaultdict inventory_lines = inventory_input.strip().split(\'n\') orders_lines = orders_input.strip().split(\'n\') item_count = int(inventory_lines[0]) inventory = {} # Read the initial inventory index = 1 for _ in range(item_count): item_name, quantity = inventory_lines[index].split() inventory[item_name] = int(quantity) index += 1 order_count = int(orders_lines[0]) orders = [] # Read the orders line_index = 1 for _ in range(order_count): num_items_in_order = int(orders_lines[line_index]) current_order = [] line_index += 1 for _ in range(num_items_in_order): item_name, quantity = orders_lines[line_index].split() current_order.append((item_name, int(quantity))) line_index += 1 orders.append(current_order) # Process each order results = [] for order in orders: can_fulfill = True for item_name, quantity in order: if inventory.get(item_name, 0) < quantity: can_fulfill = False break if can_fulfill: for item_name, quantity in order: inventory[item_name] -= quantity results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are tasked with designing a transportation network for a futuristic city where people travel in automated vehicles along predefined high-speed roads and on-demand transport tunnels. The city\'s network is represented by a series of nodes (junctions) and edges (directed paths). Each edge has an associated travel time. However, travelers also have the option to utilize instant request tunnels that can instantly transport them from one junction to another, bypassing the regular paths. Yet, each instant tunnel usage consumes extra energy. Your goal is to determine the shortest possible travel time from a given starting junction to a destination junction, considering both the travel times on the edges and the time-saving but energy-consuming instant tunnels. Input: The input consists of multiple datasets. Each dataset follows this format: N M Q s d u1 v1 t1 u2 v2 t2 . . . uM vM tM q1 r1 e1 q2 r2 e2 . . . qQ rQ eQ - N is an integer representing the number of junctions (2 ≤ N ≤ 500). - M is an integer representing the number of directed paths (1 ≤ M ≤ 10,000). - Q is an integer representing the number of instant tunnels (0 ≤ Q ≤ 200). - s is the starting junction, and d is the destination junction. The M subsequent lines describe each directed path in the format (ui, vi, ti), where (ui, vi) indicates a path from junction ui to junction vi with a travel time ti (0 ≤ ti ≤ 1,000). The Q subsequent lines describe each instant tunnel in the format (qi, ri, ei), where (qi, ri) indicates an instant tunnel from junction qi to junction ri with an energy cost ei (0 ≤ ei ≤ 1,000). The end of input is indicated by a line with a single zero. This is not part of any dataset. Output: For each dataset, print the minimized travel time on a line. Example: Input: 5 6 2 1 5 1 2 10 2 3 15 3 4 10 4 5 5 1 3 25 3 5 10 1 4 10 2 5 10 0 Output: 20","solution":"import heapq from collections import defaultdict def shortest_travel_time(datasets): results = [] def dijkstra(graph, start, N): dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist for dataset in datasets: N, M, Q, s, d, edges, tunnels = dataset graph = defaultdict(list) for u, v, t in edges: graph[u].append((v, t)) dist = dijkstra(graph, s, N) for q, r, e in tunnels: if dist[q] + e < dist[r]: dist[r] = dist[q] + e results.append(dist[d]) return results def parse_input(input_str): lines = input_str.split(\'n\') datasets = [] i = 0 while i < len(lines): line = lines[i].strip() if line == \\"0\\": break if not line: i += 1 continue N, M, Q = map(int, line.split()) i += 1 s, d = map(int, lines[i].strip().split()) i += 1 edges = [] for _ in range(M): u, v, t = map(int, lines[i].strip().split()) edges.append((u, v, t)) i += 1 tunnels = [] for _ in range(Q): q, r, e = map(int, lines[i].strip().split()) tunnels.append((q, r, e)) i += 1 datasets.append((N, M, Q, s, d, edges, tunnels)) return datasets def main(input_str): datasets = parse_input(input_str) results = shortest_travel_time(datasets) for result in results: print(result)"},{"question":"You are given a list of positive integers representing the lengths of different ropes. You can fuse two ropes together to make one larger rope. The cost of fusing two ropes is equal to the sum of their lengths. You are required to fuse all the ropes into one rope such that the total cost is minimized. Write a function `min_fusion_cost` that takes a list of integers as input and returns the minimum cost of fusing all the ropes. Constraints: * The number of ropes will be between 2 and 1000 inclusive. * Each rope length will be a positive integer less than or equal to 10^6. Input: The input consists of a single line containing space-separated integers which represent the lengths of the ropes. Output: Print a single integer representing the minimum cost to fuse all the ropes. Example: Input: 4 3 2 6 Output: 29 Explanation: 1. Fuse ropes of lengths 2 and 3 for a cost of 5. Now we have ropes of lengths 4, 5, and 6. 2. Fuse ropes of lengths 4 and 5 for a cost of 9. Now we have ropes of lengths 9 and 6. 3. Fuse ropes of lengths 9 and 6 for a cost of 15. 4. The total cost is 5 + 9 + 15 = 29.","solution":"import heapq def min_fusion_cost(ropes): Returns the minimum cost to fuse all the ropes into one rope. # Create a min-heap from the list of rope lengths heapq.heapify(ropes) total_cost = 0 # Fuse ropes until we have one rope left while len(ropes) > 1: # Extract the two smallest ropes first = heapq.heappop(ropes) second = heapq.heappop(ropes) # Cost to fuse these two ropes cost = first + second # Add the cost to the total cost total_cost += cost # Add the resultant rope back to the heap heapq.heappush(ropes, cost) return total_cost"},{"question":"You are given a list of integers, and your task is to determine the maximum possible sum of a subsequence such that no two elements are adjacent in the original list. Print the result modulo 10^9 + 7. A subsequence means any sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) - the length of the list. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) - the elements of the list. Output Output one integer - the maximum sum of a subsequence where no two elements are adjacent modulo 10^9 + 7. Constraints 1 ≤ n ≤ 10^5 SAMPLE INPUT 5 3 2 5 10 7 SAMPLE OUTPUT 15","solution":"def max_sum_no_adjacent(nums): Returns the maximum sum of a subsequence with no two elements being adjacent. MOD = 10**9 + 7 n = len(nums) if n == 0: return 0 elif n == 1: return max(0, nums[0]) % MOD dp = [0] * n dp[0] = max(0, nums[0]) # Initialize dp[0] with max(0, nums[0]) if n > 1: dp[1] = max(0, nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) % MOD return dp[-1] # Read input import sys input = sys.stdin.read def solve(): data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(max_sum_no_adjacent(nums))"},{"question":"Write a program that simulates a simple calculator capable of performing basic arithmetic operations: addition, subtraction, multiplication, and division. Your program should read a sequence of commands in the format `OPERATOR OPERAND1 OPERAND2`, where `OPERATOR` is one of the following: add, sub, mul, div. For each command, print the result of the operation. The program should stop processing input when it encounters the command `end`. SAMPLE INPUT add 2 3 sub 10 4 mul 3 5 div 8 2 end SAMPLE OUTPUT 5 6 15 4","solution":"def simple_calculator(commands): Simulates a simple calculator capable of performing basic arithmetic operations. results = [] for command in commands: parts = command.split() if parts[0] == \\"end\\": break operator, operand1, operand2 = parts[0], float(parts[1]), float(parts[2]) if operator == \\"add\\": results.append(operand1 + operand2) elif operator == \\"sub\\": results.append(operand1 - operand2) elif operator == \\"mul\\": results.append(operand1 * operand2) elif operator == \\"div\\": results.append(operand1 / operand2) else: raise ValueError(\\"Unknown operator\\") return results"},{"question":"Given a string S and a list of queries, each query contains a single character. For each query, determine the length of the smallest substring of S that contains the given character at least once. If the character is not present in the string, return -1 for that query. Input Format The first line contains an integer T, the number of test cases. For each test case, the first line contains the string S. The second line contains an integer Q, the number of queries. The third line contains Q space-separated characters, representing the queries. Output Format For each query, print the length of the smallest substring that contains the given character at least once, or -1 if the character is not in the string. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^3 S consists of lowercase English letters only. Each query character is a lowercase English letter. SAMPLE INPUT 2 abcabc 3 a b c hello 2 h e SAMPLE OUTPUT 1 1 1 1 1 Explanation For the 1st test case: - Query \'a\': The shortest substring containing \'a\' is \\"a\\", length is 1. - Query \'b\': The shortest substring containing \'b\' is \\"b\\", length is 1. - Query \'c\': The shortest substring containing \'c\' is \\"c\\", length is 1. For the 2nd test case: - Query \'h\': The shortest substring containing \'h\' is \\"h\\", length is 1. - Query \'e\': The shortest substring containing \'e\' is \\"e\\", length is 1.","solution":"def smallest_substring_lengths(s, queries): Returns a list of the lengths of smallest substrings in \'s\' that contain the characters in \'queries\'. # Dictionary to store the smallest length for each character char_lengths = {} for char in queries: if char in char_lengths: continue # We look for the given character in the string index = s.find(char) if index == -1: char_lengths[char] = -1 else: char_lengths[char] = 1 # Generate the result list based on queries order result = [char_lengths[char] for char in queries] return result def process_test_cases(t, test_cases): results = [] for i in range(t): s, q, queries = test_cases[i] result = smallest_substring_lengths(s, queries) results.extend(result) return results"},{"question":"You are tasked with creating a simplified in-memory database system. The database stores information about books, characterized by attributes such as title, author, genre, and year of publication. You are required to implement a set of commands to interact with the database. The database operations you need to support are: - **ADD**: Add a new book to the database. - **REMOVE**: Remove a book from the database by its title. - **LIST**: List all the books that match a given attribute-value filter. Each command is described as follows: 1. **ADD** title author genre year: Adds a book to the database. The title, author, and genre are strings without spaces, and the year is an integer. 2. **REMOVE** title: Removes the book with the given title from the database. 3. **LIST** [attribute] [value]: Lists all books that match the specified attribute and value. The attribute can be one of \'title\', \'author\', \'genre\', or \'year\'. If no attribute and value are provided, list all books. The output should display each book on a new line in the format: \\"title author genre year\\". Commands must be case-sensitive and should ensure no duplicate titles are added. # Input The input consists of a series of commands. Commands are separated by a newline. The input ends when the command \'END\' is encountered. # Output Produce output based on LIST commands. Each book should be output in the format: \\"title author genre year\\". Books should be listed in the order they were added to the database. # Example Input ``` ADD \\"TheGreatGatsby\\" \\"FScottFitzgerald\\" \\"Fiction\\" 1925 ADD \\"MobyDick\\" \\"HermanMelville\\" \\"Fiction\\" 1851 LIST REMOVE \\"MobyDick\\" ADD \\"ToKillAMockingbird\\" \\"HarperLee\\" \\"Fiction\\" 1960 LIST genre Fiction END ``` Output ``` TheGreatGatsby FScottFitzgerald Fiction 1925 MobyDick HermanMelville Fiction 1851 TheGreatGatsby FScottFitzgerald Fiction 1925 ToKillAMockingbird HarperLee Fiction 1960 ```","solution":"class BookDatabase: def __init__(self): self.books = [] def add_book(self, title, author, genre, year): if not any(book[\'title\'] == title for book in self.books): self.books.append({ \'title\': title, \'author\': author, \'genre\': genre, \'year\': year }) def remove_book(self, title): self.books = [book for book in self.books if book[\'title\'] != title] def list_books(self, attribute=None, value=None): if not attribute: return self.books return [book for book in self.books if str(book[attribute]) == value] def process_commands(commands): db = BookDatabase() results = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": db.add_book(parts[1], parts[2], parts[3], int(parts[4])) elif parts[0] == \\"REMOVE\\": db.remove_book(parts[1]) elif parts[0] == \\"LIST\\": if len(parts) > 1: listed_books = db.list_books(parts[1], parts[2]) else: listed_books = db.list_books() for book in listed_books: results.append(f\\"{book[\'title\']} {book[\'author\']} {book[\'genre\']} {book[\'year\']}\\") return results commands = [ \\"ADD TheGreatGatsby FScottFitzgerald Fiction 1925\\", \\"ADD MobyDick HermanMelville Fiction 1851\\", \\"LIST\\", \\"REMOVE MobyDick\\", \\"ADD ToKillAMockingbird HarperLee Fiction 1960\\", \\"LIST genre Fiction\\", \\"END\\" ] print(\\"n\\".join(process_commands(commands)))"},{"question":"You are given an array of integers and an integer k. Your task is to determine whether there exist two distinct indices i and j in the array such that the absolute difference between the elements at these indices is at most k, and their absolute difference in indices is at most t. In other words, you need to check if there are two indices i and j such that |nums[i] - nums[j]| <= t and |i - j| <= k. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n - 1). The second line contains a list of n integers, nums0, nums1, ..., numsn - 1 (1 ≤ numsi ≤ 109). The third line contains a single integer t (1 ≤ t ≤ 109). Output Output \\"True\\" if there exist such indices i and j, otherwise output \\"False\\". Examples Input 6 3 1 2 3 1 5 9 2 Output True Input 6 2 1 2 3 4 5 6 0 Output False Note In the first example, we can select the indices i = 0 and j = 3 such that |nums[i] - nums[j]| = |1 - 1| = 0 ≤ 2 and |i - j| = |0 - 3| = 3 ≤ 3. In the second example, there are no two indices i and j such that |nums[i] - nums[j]| = 0 and |i - j| ≤ 2.","solution":"def contains_nearby_almost_duplicate(nums, k, t): Function to determine if there are two distinct indices i and j in the array such that |nums[i] - nums[j]| <= t and |i - j| <= k. Args: nums: List of integers. k: Integer determining distance in indices. t: Integer determining distance in value. Returns: Boolean indicating if such a pair exists. if t < 0: return False n = len(nums) num_map = {} for i in range(n): bucket = nums[i] // (t + 1) if bucket in num_map: return True # Found a pair in the same bucket if (bucket - 1 in num_map and abs(nums[i] - num_map[bucket - 1]) <= t): return True if (bucket + 1 in num_map and abs(nums[i] - num_map[bucket + 1]) <= t): return True num_map[bucket] = nums[i] if i >= k: del num_map[nums[i - k] // (t + 1)] return False"},{"question":"You are given a positive integer n representing the number of houses arranged in a straight line, and an integer array C of length n, where C[i] represents the amount of candies in the i-th house. You want to distribute the candies among the children such that each child receives at least one house\'s worth of candies, ensuring no two adjacent houses are given to the same child. Find the maximum number of children who can receive at least one house\'s worth of candies under these constraints. More formally, you need to determine the maximum number of non-adjacent subsequence elements from the array C that can be selected, ensuring each selected element contributes towards one child\'s candies. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n space-separated integers C1, C2, ..., Cn (1 ≤ Ci ≤ 10^9) — the amount of candies in each house. Output Output a single integer — the maximum number of children who can receive candies. Examples Input 5 3 2 5 10 7 Output 3 Input 4 4 1 8 9 Output 2 Input 6 5 1 1 5 10 10 Output 3 Note In the first example, you can distribute candies from houses with indices (0-based) 0, 2, and 3 to different children, resulting in 3 children receiving candies. In the second example, you can distribute candies from houses with indices 0 and 3, resulting in 2 children receiving candies. In the third example, you can distribute candies from houses with indices 0, 3, and 4, resulting in 3 children receiving candies.","solution":"def max_children(n, C): Determine the maximum number of non-adjacent houses to distribute candies to children. Parameters: n (int): The number of houses. C (list of int): The amount of candies in each house. Returns: int: The maximum number of children who can receive candies. if n == 0: return 0 if n == 1: return 1 # Array to store the maximum number of houses up to the i-th position max_houses = [0] * n max_houses[0] = 1 max_houses[1] = 1 if C[1] > C[0] else 1 for i in range(2, n): # Either take the current house and the best subsolution up to i-2 # or just carry forward the best subsolution up to i-1 max_houses[i] = max(max_houses[i-1], max_houses[i-2] + 1) return max_houses[-1]"},{"question":"Given a collection of N distinct positive integers, your goal is to compute the number of inversed pairs. An inversed pair is defined as a pair of indices (i, j) such that i < j and the element at the i-th index is greater than the element at the j-th index. Input: The first line of input contains the integer N, the number of elements in the collection. The second line contains N distinct positive integers, representing the elements of the collection. Output: Print a single integer, the number of inversed pairs in the collection. Constraints: 1 ≤ N ≤ 10^5 1 ≤ elements of the collection ≤ 10^9 SAMPLE INPUT 5 2 4 1 3 5 SAMPLE OUTPUT 3","solution":"def count_inversed_pairs(arr): Count the number of inversed pairs in the array where an inversed pair is defined as a pair of indices (i, j) such that i < j and arr[i] > arr[j]. Parameters: arr (list): List of distinct positive integers. Returns: int: Number of inversed pairs. def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"You are given two arrays of integers `arr1` and `arr2` of length `n` each. You need to determine if `arr1` can be transformed into `arr2` by performing the following operation any number of times: 1. Pick any two distinct indices `i` and `j` (1 ≤ i, j ≤ n) such that arr1[i] > arr1[j]. 2. Decrement arr1[i] by 1 and increment arr1[j] by 1. Your task is to determine if it is possible to transform `arr1` into `arr2` by performing the above operation any number of times. Input - The first line contains an integer `n` (1 ≤ n ≤ 2·10^5) — the length of the arrays. - The second line contains `n` integers `arr1[i]` (1 ≤ arr1[i] ≤ 10^9) — the first array. - The third line contains `n` integers `arr2[i]` (1 ≤ arr2[i] ≤ 10^9) — the second array. Output - Print `YES` if it is possible to transform `arr1` into `arr2` by performing the operation any number of times. Otherwise, print `NO`. Examples Input 4 4 3 2 1 1 2 3 4 Output YES Input 3 1 2 3 2 3 1 Output NO Input 5 5 5 5 5 5 6 6 6 6 6 Output NO Note In the first example, one possible way to transform `arr1` into `arr2` is: - Decrement the value at index 1 by 1 and increment the value at index 4 by 1 to get (3, 3, 2, 2). - Decrement the value at index 2 by 1 and increment the value at index 3 by 1 to get (3, 2, 3, 2). - Decrement the value at index 1 by 1 and increment the value at index 4 by 1 to get (2, 2, 3, 3). - Continue performing the operations until `arr1` becomes `arr2`. In the second example, it is not possible to transform `arr1` into `arr2` by using the given operations. In the third example, there is no way to achieve the higher values in `arr2` since every operation preserves the total sum of the elements.","solution":"def can_transform(arr1, arr2): Determines if arr1 can be transformed into arr2 by performing the specified operation any number of times. Parameters: arr1 (list of int): The initial array. arr2 (list of int): The target array. Returns: str: \\"YES\\" if the transformation is possible, otherwise \\"NO\\". # If the sums of the arrays are not equal, transformation is not possible if sum(arr1) != sum(arr2): return \\"NO\\" # Check if for any prefix sum, arr1 is at least arr2 up to that point prefix_diff = 0 for a, b in zip(arr1, arr2): prefix_diff += a - b if prefix_diff < 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of `N` non-negative integers. You need to find two indices `i` and `j` such that `i < j` and the absolute value of the difference between the two numbers at these indices is maximized. Your task is to output this maximum absolute difference. Constraints: - 2 ≤ N ≤ 10^5 - 0 ≤ Elements in the array ≤ 10^9 - All input values are integers. Input: The input is given from Standard Input in the following format: ``` N a_1 a_2 ... a_N ``` Output: Print the maximum absolute difference between any two elements in the array such that `i < j`. Examples: Input: ``` 5 1 3 5 7 9 ``` Output: ``` 8 ``` Input: ``` 6 10 20 30 40 50 60 ``` Output: ``` 50 ``` Input: ``` 3 0 1000000000 500000000 ``` Output: ``` 1000000000 ```","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between any two elements in the array such that the first element\'s index is less than the second\'s index. return max(arr) - min(arr)"},{"question":"You are given two strings, `s1` and `s2`, of equal length, consisting of lowercase English letters. You are allowed to perform the following operation any number of times: - Choose two indices `i` and `j` such that `i != j` and swap the characters at these indices in `s1`. Your task is to determine whether it is possible to make `s1` equal to `s2` using the allowed operation. Input The input consists of a single test case formatted as follows: s_1 s_2 The first line contains the string `s1` (1 leq |s1| leq 10^5). The second line contains the string `s2` ( |s2| = |s1| ). Both strings only consist of lowercase English letters. Output Print `YES` if it\'s possible to make `s1` equal to `s2` using the allowed operations, otherwise print `NO`. Examples Input abc bca Output YES Input aabbcc ccbbaa Output YES Input abcdef ghijkl Output NO","solution":"def can_make_equal(s1, s2): Determine if s1 can be rearranged to match s2 by swapping characters any number of times. Args: s1 (str): The first string. s2 (str): The second string. Returns: str: \\"YES\\" if s1 can be made equal to s2, otherwise \\"NO\\". if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"Devu loves to collect coins, and his collection consists of different valued coins. He wants to know if he can select a subset of these coins such that their total value is exactly equal to a given integer `V`. Given `n` which is the number of coins and an array `A` of length `n` where each element denotes the value of the coin, and the integer `V`. Determine whether it is possible to select a subset of the coins such that their sum is exactly `V`. If it\'s possible, print \\"YES\\", otherwise, print \\"NO\\". **Input:** First line of the input contains an integer `T` denoting number of test cases. For each test case, the first line contains two integers `n` and `V`. The second line contains `n` integers denoting the values of the coins. **Output:** For each test case, print \\"YES\\" if it is possible to get the exact sum `V`, otherwise print \\"NO\\". **Constraints:** 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ A[i] ≤ 100 1 ≤ V ≤ 100 **Example:** Input: ``` 2 4 10 2 5 5 1 3 6 1 2 3 ``` Output: ``` YES YES ``` **Explanation:** In the first test case, the subset {5, 5} sums to 10. In the second test case, the subset {1, 2, 3} sums to 6.","solution":"def can_make_sum(n, coins, V): Determines if a subset of coins can sum to the value V. # Create a dp array to store whether a certain sum value can be achieved dp = [False] * (V + 1) dp[0] = True # Loop through each coin in the list for coin in coins: # Update the dp array in reverse order for i in range(V, coin - 1, -1): if dp[i - coin]: dp[i] = True return \\"YES\\" if dp[V] else \\"NO\\" def solve_collection_problem(T, test_cases): results = [] for n, V, coins in test_cases: result = can_make_sum(n, coins, V) results.append(result) return results"},{"question":"Given an array of n integers, your task is to reorder the array into its next lexicographically greater permutation if such a permutation exists. If such a rearrangement is not possible, it must be rearranged to the lowest possible order (i.e., sorted in ascending order). For instance, the array [1,2,3] would become [1,3,2] after applying the next permutation operation, and the array [3,2,1] would become [1,2,3]. Write a function next_permutation that transforms the given array as described and outputs the modified array. Input/Output specifications: Input: - The input consists of a single dataset, which represents an array of n integers in the format: ``` N A1 A2 A3 ... AN ``` Where 1 ≤ N ≤ 1000 and 0 ≤ Ai ≤ 1000 for all 1 ≤ i ≤ N. Output: - Print the array after applying the next permutation operation. Example: Input: ``` 3 1 2 3 ``` Output: ``` 1 3 2 ``` Input: ``` 4 3 2 1 4 ``` Output: ``` 3 2 4 1 ``` Input: ``` 5 5 10 8 7 6 ``` Output: ``` 6 5 7 8 10 ```","solution":"def next_permutation(nums): Modifies the list nums to its next permutation in lexicographical order. n = len(nums) if n <= 1: return nums # Find the largest index i such that nums[i] < nums[i + 1] i = n - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i == -1: # If no such index exists, the permutation is the last permutation, so we reverse to get the first permutation nums.reverse() return nums # Find the largest index j greater than i such that nums[i] < nums[j] j = n - 1 while nums[j] <= nums[i]: j -= 1 # Swap the values of nums[i] and nums[j] nums[i], nums[j] = nums[j], nums[i] # Reverse the sequence from nums[i + 1] up to the last element nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"You are a developer for a popular online game. The game features a special event where players can collect and trade different types of rare items. Currently, the event has n types of rare items, and you know the quantity of each type that each player has collected. Your task is to design an algorithm that determines the maximum possible value of redeemable rewards a player can claim given the items they have. Each item type i (1 ≤ i ≤ n) has an associated redeemable reward value, denoted as v_i. The player can claim multiple rewards of the same type or different types, but the total number of claimed rewards must not exceed the total number of items the player possesses. Given the number of items the player has collected in each of the n types, your objective is to maximize the total claimed reward value. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of different types of rare items. - The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of items the player has collected for each type. - The last line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9) — the reward values for each type of item. Output: - Output a single integer — the maximum possible total value of redeemable rewards the player can claim. Example: Input: 5 4 5 6 2 3 10 20 15 40 25 Output: 225 Explanation: The player can claim rewards as follows: - Claim 4 rewards of type 1, each with a value of 10: total = 4 * 10 = 40 - Claim 5 rewards of type 2, each with a value of 20: total = 5 * 20 = 100 - Claim 6 rewards of type 3, each with a value of 15: total = 6 * 15 = 90 - Claim 2 rewards of type 4, each with a value of 40: total = 2 * 40 = 80 - Claim 3 rewards of type 5, each with a value of 25: total = 3 * 25 = 75 Total reward value = 40 + 100 + 90 + 80 + 75 = 385 Note: In each example, the player uses all items to maximize the total reward value. Only the items a player possesses can be redeemed, and the solution must ensure the total does not exceed the collected items.","solution":"def max_redeemable_reward(n, items, values): Returns the maximum possible total value of redeemable rewards. Parameters: n (int): The number of different types of rare items. items (list of int): The number of items the player has collected for each type. values (list of int): The reward values for each type of item. Returns: int: The maximum possible total value of redeemable rewards. total_reward = 0 for i in range(n): total_reward += items[i] * values[i] return total_reward"},{"question":"You have been assigned the task of managing the participants of a coding contest. The contest is divided into multiple rounds, and each participant has to advance through the rounds. Initially, every participant starts at round 1 with a score of 0. During each round, a participant scores some points. The scores of the participants are given to you in the form of a list for each round. Your task is to find out the total points scored by each participant by the end of all rounds and return these scores. Constraints: * 1 ≤ R ≤ 10^4 (number of rounds) * 1 ≤ P ≤ 10^4 (number of participants) * 0 ≤ score ≤ 10^3 (score of each participant in each round) * All participants participate in each round. Input: The input is given in the following format: ``` R P s_1_1 s_1_2 ... s_1_P s_2_1 s_2_2 ... s_2_P ... s_R_1 s_R_2 ... s_R_P ``` Where R and P denote the number of rounds and participants, respectively. Each subsequent line contains the scores of all P participants in a round. Output: The output should be the total scores of all participants at the end of all rounds, printed on one line, separated by spaces. Example: Input: ``` 3 4 10 20 30 40 5 15 25 35 0 10 20 30 ``` Output: ``` 15 45 75 105 ``` Explanation: * Participant 1 scores 10, 5, and 0 in the three rounds, making a total of 15. * Participant 2 scores 20, 15, and 10 in the three rounds, making a total of 45. * Participant 3 scores 30, 25, and 20 in the three rounds, making a total of 75. * Participant 4 scores 40, 35, and 30 in the three rounds, making a total of 105.","solution":"def total_scores(num_rounds, num_participants, scores): Returns the total scores of all participants at the end of all rounds. :param num_rounds: Number of rounds in the contest. :param num_participants: Number of participants in the contest. :param scores: A list of lists where each sublist represents the scores of all participants in a round. :return: A list of total scores for each participant. totals = [0] * num_participants for round_scores in scores: for i in range(num_participants): totals[i] += round_scores[i] return totals"},{"question":"In a city grid, there are n neighborhoods in a straight line, each represented as a point with a specific value. To celebrate the city anniversary, the city council decided to place a flag in certain neighborhoods according to strict rules. A neighborhood easily attracts attention (or is \\"flagged\\") if its value is strictly greater than its nearest two neighboring neighborhoods. Both the first and the last neighborhoods cannot be flagged because they only have one neighbor. You are given the values of n neighborhoods from left to right. You can visit the neighborhoods before the anniversary celebration and rearrange their values as you like, but each value must remain associated with its original neighborhood. Your task is to determine the maximum number of neighborhoods that can be flagged and provide an optimal configuration for the values of the neighborhoods. Input The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of neighborhoods in the city grid. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the values of the neighborhoods. Output In the first line print the maximum number of neighborhoods that can be flagged. In the second line print the values of neighborhoods in the optimal order. If there are several correct answers, you can print any of them. Example Input 6 5 3 2 6 9 8 Output 2 3 5 2 6 8 9 Note In the given example, it is possible to rearrange the values of the neighborhoods so that two of them can be flagged. If the values are arranged as (3, 5, 2, 6, 8, 9), then the 5 and 6 can be flagged because they are greater than their nearest neighbors (3 and 2, 2 and 8 respectively). In this way, the maximum number of neighborhoods that can be flagged is 2.","solution":"def max_flag_neighborhoods(n, neighborhoods): Returns the maximum number of neighborhoods that can be flagged and the optimal configuration of neighborhood values. neighborhoods.sort() # Sorting the values to easily find local maxima result = [0] * n # Initialize the result list # Arrange the values: # Place smaller half (or slightly larger half if odd) in even indices # and larger half in odd indices small_half = neighborhoods[:(n+1)//2] large_half = neighborhoods[(n+1)//2:] result[::2] = small_half # Even indices result[1::2] = large_half # Odd indices max_flagged = 0 for i in range(1, n-1): if result[i] > result[i-1] and result[i] > result[i+1]: max_flagged += 1 return max_flagged, result"},{"question":"You are given two integers n and m. Find the number of unique paths from the top-left corner to the bottom-right corner of an n x m grid. You can only move either down or right at any point in time. Input The only line contains two integers n and m (1 ≤ n, m ≤ 100). Output Print the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples Input 3 2 Output 3 Input 7 3 Output 28 Input 4 4 Output 20 Note In the first example, there are 3 unique paths from (0,0) to (2,1): 1. Right, Right, Down 2. Right, Down, Right 3. Down, Right, Right In the second example, there are 28 unique paths to reach from (0,0) to (6,2). The number of unique ways can be calculated using combinatorial mathematics (binomial coefficients).","solution":"def unique_paths(n, m): Returns the number of unique paths from the top-left corner to the bottom-right corner of an n x m grid. # Using dynamic programming to find the number of unique paths dp = [[1] * m for _ in range(n)] for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given an integer array of length N: a_1, a_2, ..., a_N, and an integer K. Your task is to find the K-th smallest element in the array that is strictly greater than zero. If there are fewer than K positive elements in the array, return -1. Constraints * 1 ≤ N ≤ 100 * -1000 ≤ a_i ≤ 1000 * 1 ≤ K ≤ 100 * All values in input are integers. Input Input is given from Standard Input in the following format: N K a_1 ... a_N Output Print the K-th smallest positive element, or -1 if there are fewer than K positive elements. Examples Input 5 2 3 1 -1 4 0 Output 3 Input 5 5 3 1 0 2 6 Output -1 Input 6 1 0 -1 -2 -3 -4 -5 Output -1","solution":"def kth_smallest_positive_element(N, K, arr): Returns the K-th smallest positive element in the array. If there are fewer than K positive elements, returns -1. # Filter positive elements positive_elements = [x for x in arr if x > 0] # Sort the positive elements positive_elements.sort() # Check if there are at least K positive elements if len(positive_elements) >= K: return positive_elements[K-1] else: return -1"},{"question":"You are given a grid with n rows and m columns filled with non-negative integers. Your task is to find the maximum sum of elements in any rectangular sub-grid such that the sum of elements in all cells in that sub-grid does not exceed a given integer k. **Input:** - The first line contains three integers n, m and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 10^9) — the number of rows and columns of the grid, and the maximum allowed sum of elements in the sub-grid. - The next n lines contain m integers each, where the j-th integer in the i-th line denotes the value at cell (i, j). All values are between 0 and 10^4. **Output:** - Print an integer — the maximum sum of elements in any rectangular sub-grid that does not exceed k. If no such sub-grid exists, print 0. **Examples:** Input: ``` 3 3 8 1 3 4 2 2 2 1 1 5 ``` Output: ``` 8 ``` Input: ``` 4 4 9 5 1 3 2 3 4 1 2 2 0 0 4 1 2 4 3 ``` Output: ``` 9 ``` **Note:** - In the first example, the optimal sub-grid is the entire grid which sums to 8. - In the second example, the optimal sub-grid could be, for example, the single cell with a value of 9, or a combination of smaller values within the constraint.","solution":"def max_sum_subgrid(n, m, k, grid): Returns the maximum sum of elements in any rectangular sub-grid such that the sum does not exceed k. # Initialize the prefix sum array prefix = [[0] * (m + 1) for _ in range(n + 1)] # Build the prefix sum array for i in range(1, n + 1): for j in range(1, m + 1): prefix[i][j] = grid[i - 1][j - 1] + prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] def compute_sum(x1, y1, x2, y2): return prefix[x2 + 1][y2 + 1] - prefix[x1][y2 + 1] - prefix[x2 + 1][y1] + prefix[x1][y1] max_sum = 0 for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): current_sum = compute_sum(x1, y1, x2, y2) if current_sum <= k: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Nina enjoys solving puzzles involving graphs. She has an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Nina wants to find the minimum weight path from node 1 to node n. If no such path exists, print -1. Input The first line of input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and edges in the graph. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — describing an edge between nodes u and v with weight w. Output Print a single integer — the minimum weight from node 1 to node n. If there is no path from node 1 to node n, output -1. Examples Input 5 6 1 2 4 1 3 2 2 3 3 3 4 1 4 5 5 2 5 7 Output 8 Input 4 2 1 2 3 3 4 1 Output -1 Note In the first test, the minimum weight path from node 1 to node 5 is 1 -> 3 -> 4 -> 5 with a total weight of 8. In the second test, there is no path from node 1 to node 4.","solution":"import heapq def find_minimum_weight_path(n, m, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source, target): heap = [(0, source)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 while heap: current_distance, node = heapq.heappop(heap) if node == target: return current_distance if current_distance > distances[node]: continue for neighbor, weight in graph[node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return float(\'inf\') result = dijkstra(1, n) return result if result != float(\'inf\') else -1"},{"question":"Given an undirected graph with nodes numbered from 1 to n, and a list of edges, determine if the graph contains a cycle. If a cycle exists, return `True`, otherwise return `False`. # Input - An integer `n` representing the number of nodes in the graph. - A list of `edges`, where each edge is represented by a tuple of two integers `(u, v)`, indicating that there is an edge connecting nodes `u` and `v`. # Output - A boolean `True` if the graph contains a cycle, otherwise `False`. # Example ```python def contains_cycle(n, edges): # Your code here # Example input n = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 2)] # Example output print(contains_cycle(n, edges)) # Output: True ``` # Constraints - `1 <= n <= 1000` - `0 <= len(edges) <= 2000` - There are no duplicate edges in the input list.","solution":"def contains_cycle(n, edges): Determine if an undirected graph contains a cycle. Parameters: n (int): The number of nodes in the graph. edges (List[Tuple[int, int]]): The list of edges in the graph. Returns: bool: True if the graph contains a cycle, False otherwise. parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY else: return True return False for u, v in edges: if union(u, v): return True return False"},{"question":"A tech company, TechWave, has a unique file management system that organizes files into folders represented as a tree structure. Each folder and file has a unique identifier. The root folder always has ID 1. Each folder can contain multiple files and subfolders, but a file cannot contain another file or folder. To enhance user experience, TechWave wants to implement a system where users can specify a folder ID and retrieve a list of files contained directly within that folder. Your task is to write a program that reads the folder structure and queries from the users, and then outputs the list of files for each query. Each file or folder is described by a tuple: 1. (\\"folder\\", ID, parentID) 2. (\\"file\\", ID, parentID) Here, ID is a unique identifier of the folder or file, and parentID indicates the unique ID of the folder containing it. Input: - The first line contains two integers N and Q (1 ≤ N, Q ≤ 2 * 10^5), the number of operations (folders and files) and the number of queries respectively. - The next N lines describe the files and folders using the format (\\"folder\\", ID, parentID) or (\\"file\\", ID, parentID). - The next Q lines contain a single integer, which is a query for the folder ID. Output: - For each query, output the list of file IDs (sorted in ascending order) contained directly within the corresponding folder ID. If the folder contains no files, output an empty list. Example: Input: 8 3 (\\"folder\\", 2, 1) (\\"folder\\", 3, 1) (\\"file\\", 4, 2) (\\"file\\", 5, 2) (\\"file\\", 6, 3) (\\"file\\", 7, 3) (\\"folder\\", 8, 1) (\\"file\\", 9, 8) 2 1 8 Output: [4, 5] [] [9] Explanation: - Folder 2 contains files with IDs 4 and 5. - Folder 1 contains folders 2, 3, and 8 but no file directly within it. - Folder 8 contains file with ID 9. Make sure to handle edge cases, such as querying non-existing folder IDs or folders without any files.","solution":"def get_files_in_folder(operations, queries): # Create a dictionary to store files for each folder folder_contents = {} for operation in operations: op_type, ID, parentID = operation if op_type == \\"file\\": if parentID not in folder_contents: folder_contents[parentID] = [] folder_contents[parentID].append(ID) results = [] for query in queries: if query in folder_contents: results.append(sorted(folder_contents[query])) else: results.append([]) return results"},{"question":"You are given two arrays of integers, `a` and `b`, each of length `n`. You need to find the maximum length of a subarray that appears simultaneously in both arrays. A subarray is a contiguous part of an array. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the length of the arrays. The second line contains `n` space-separated integers representing array `a` (-10^9 ≤ a[i] ≤ 10^9). The third line contains `n` space-separated integers representing array `b` (-10^9 ≤ b[i] ≤ 10^9). Output Print a single integer representing the length of the longest subarray that appears in both arrays. Examples Input 5 1 2 3 2 1 3 2 1 4 7 Output 3 Input 5 0 1 0 1 0 1 0 1 0 1 Output 4 Note For the first sample, the longest subarray that appears in both arrays is [3, 2, 1]. For the second sample example, the longest subarray that appears in both arrays is [0, 1, 0, 1].","solution":"def find_length_of_longest_subarray(a, b): Finds the length of the longest subarray that appears in both arrays a and b. :param a: List[int] - the first array of integers :param b: List[int] - the second array of integers :return: int - the length of the longest common subarray n = len(a) # dp table will hold the lengths of the longest common suffixes of substrings dp = [[0] * (n + 1) for _ in range(n + 1)] max_length = 0 for i in range(1, n + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"You are given a list of n integers and your goal is to determine if there exists a pair of distinct indices (i, j) such that the absolute difference between the elements at those indices is equal to a given integer k. Input The first line contains two space-separated integers n (2 ≤ n ≤ 100000) and k (0 ≤ k ≤ 10^9). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". Examples Input 5 3 1 5 3 4 2 Output YES Input 4 10 1 2 3 4 Output NO Input 6 0 1 1 1 1 1 1 Output YES Note In the first example, the pair (1, 4) where |1 - 4| = 3 satisfies the condition. In the second example, no pair of indices satisfy the condition |ai - aj| = 10. In the third example, the pair (1, 1) where |1 - 1| = 0 satisfies the condition.","solution":"def has_pair_with_difference(arr, k): Determines if there exists a pair of distinct indices (i, j) such that the absolute difference between the elements at those indices is equal to a given integer k. Parameters: arr (List[int]): List of integers. k (int): The target absolute difference. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if num + k in seen or num - k in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a grid of size `n x m` and a collection of `k` stones. Each stone has a unique positive integer engraved on it representing its weight. The goal is to place all these `k` stones on the grid in such a way that no cell contains more than one stone and the sum of the weights of the stones in any 2x2 sub-grid is not greater than a given integer `S`. Determine if it is possible to place all the stones on the grid as described. If it is possible, provide one such arrangement. Input The first line contains three integers n, m, and k (2 ≤ n, m ≤ 20; 1 ≤ k ≤ n*m; 1 ≤ weights ≤ 1000). The second line contains k integers representing the weights of the stones. The third line contains the integer S (1 ≤ S ≤ 4000). Output If it is possible to place all the stones in the grid such that the sum of the weights in any 2x2 sub-grid does not exceed S, print \\"Possible\\" on the first line followed by n lines each containing m integers. Each integer should be either 0 or one of the weights, where 0 represents an empty cell. If it is not possible, print \\"Impossible\\". Examples Input 3 3 4 2 3 5 8 10 Output Possible 2 3 0 5 0 0 8 0 0 Input 2 2 4 1 6 7 8 15 Output Impossible Note In the first sample, one possible placement of stones is shown. The sum of the weights in any 2x2 sub-grid does not exceed 10. In the second sample, it is impossible to place all the stones without violating the rule.","solution":"def can_place_stones(n, m, k, weights, S): Determine if it is possible to place k stones with given weights in an n x m grid such that the sum of any 2x2 sub-grid does not exceed S. Returns \\"Possible\\" and the grid arrangement if possible, otherwise \\"Impossible\\". import itertools # Brute force method - testing all possible permutations of stone placements # to see if a valid placement exists # Create a grid grid = [[0] * m for _ in range(n)] # Function to check if the current placement is valid def is_valid(grid): for i in range(n-1): for j in range(m-1): sub_grid_sum = (grid[i][j] + grid[i+1][j] + grid[i][j+1] + grid[i+1][j+1]) if sub_grid_sum > S: return False return True empty_cells = [(i, j) for i in range(n) for j in range(m)] if k > n * m: return \\"Impossible\\" for perm in itertools.permutations(weights): for cells in itertools.combinations(empty_cells, k): # Place the stones for pos, weight in zip(cells, perm): grid[pos[0]][pos[1]] = weight if is_valid(grid): grid_result = [\\" \\".join(map(str, row)) for row in grid] return \\"Possiblen\\" + \\"n\\".join(grid_result) # Clear the grid for the next permutation check for pos in cells: grid[pos[0]][pos[1]] = 0 return \\"Impossible\\""},{"question":"In a remote village, the mayor wants to install a new communication tower to provide internet access to all households in the area. The village can be represented as a 2D plane with each house located at a specific coordinate. The communication tower will have a specific range that determines how far the signal can reach. The goal is to determine the minimum range required for the communication tower to cover all households. Given the coordinates of houses in the village, write a program to compute the minimum range needed for the communication tower to ensure that all houses can receive the signal. The range is defined as the maximum distance between the tower and the farthest house it needs to cover. # Input The input consists of multiple data sets. Each data set is given in the following format: ``` n x1 y1 x2 y2 ... xn yn ``` The first line of a data set contains an integer n, which is the number of houses. It satisfies the condition 2 ≤ n ≤ 100. The coordinates of n houses are given by two-dimensional orthogonal coordinates: (xi, yi) (i = 1, ..., n). Two coordinates of a house appear in a line, separated by a space character. Each coordinate is given by a decimal fraction, and is between 0.0 and 1000.0 (both ends inclusive). The end of the input is indicated by a line containing a zero. # Output For each data set, the smallest possible range of the communication tower should be printed, each in a separate line. The printed values should have 6 digits after the decimal point. # Example Input ``` 3 0.0 0.0 1.0 1.0 2.0 2.0 4 5.0 5.0 5.0 6.0 6.0 5.0 6.0 6.0 0 ``` Output ``` 1.414214 0.707107 ```","solution":"import math def calculate_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) def minimum_range_to_cover_houses(house_coordinates): n = len(house_coordinates) max_distance = 0 for i in range(n): for j in range(i + 1, n): distance = calculate_distance(house_coordinates[i][0], house_coordinates[i][1], house_coordinates[j][0], house_coordinates[j][1]) if distance > max_distance: max_distance = distance return max_distance / 2 def process_input_dataset(dataset): results = [] for houses in dataset: if houses: min_range = minimum_range_to_cover_houses(houses) results.append(f\\"{min_range:.6f}\\") return results def parse_input_data(input_data): dataset = [] houses = [] lines = input_data.strip().split(\\"n\\") for line in lines: tokens = line.strip().split() if len(tokens) == 1: if tokens[0] == \\"0\\": if houses: dataset.append(houses) break elif houses: dataset.append(houses) houses = [] else: x, y = map(float, tokens) houses.append((x, y)) return dataset # Example usage input_data = 3 0.0 0.0 1.0 1.0 2.0 2.0 4 5.0 5.0 5.0 6.0 6.0 5.0 6.0 6.0 0 dataset = parse_input_data(input_data) results = process_input_dataset(dataset) for result in results: print(result)"},{"question":"Sort and Merge You are working on a software project that requires sorting a list of numbers and then merging them into a string. Each number in the list must be sorted in ascending order first. After sorting, the next task is to merge the sorted numbers into a single string. The merging should maintain the original order of the groups given in the input, and each sorted list should be converted to a comma-separated string before merging all groups with a specified delimiter. Implement a function that receives multiple lists of integers, sorts each list, and merges them into a single string with a specified delimiter. Input The input consists of multiple test cases. Each test case consists of: - A single integer `m` indicating the number of lists in that test case where `1 <= m <= 50`. - For each of the `m` lists: - An integer `n` representing the number of integers in the list where `1 <= n <= 100`. - `n` space-separated integers for the list. - A single string ds indicating the delimiter to be used for merging the sorted lists. The end of input is indicated by a line where `m` is 0. This line should not be processed. Output For each test case, output the merged string of sorted lists for that test case, separated by the specified delimiter `ds`. Each output should be on a new line. Sample Input 2 3 5 2 3 4 9 1 4 10 0 1 1 3 5 1 7 4 1 2 3 4 3 4 2 8 6 3 1 4 1 5 9 ds 0 Output for Sample Input 2,3,5 1,4,9,10 3, 7 1,2,3,4 2,4,8 1,1,3,4,5,9 Example Input 2 3 5 2 3 4 9 1 4 10 0 1 1 3 5 1 7 4 1 2 3 4 3 4 2 8 6 3 1 4 1 5 9 ds 0 Output 2,3,5 1,4,9,10 3 7 1,2,3,4 2,4,8 1,1,3,4,5,9","solution":"def sort_and_merge(test_cases): results = [] for case in test_cases: m = case[\'m\'] lists = case[\'lists\'] delimiter = case[\'delimiter\'] # Sort each list sorted_lists = [sorted(lst) for lst in lists] # Convert each sorted list to a comma-separated string sorted_str_lists = [\',\'.join(map(str, lst)) for lst in sorted_lists] # Join all sorted strings with the delimiter merged_string = delimiter.join(sorted_str_lists) # Add the result to the list results.append(merged_string) return results"},{"question":"story Mirai recently joined the team responsible for developing a new system for a bustling city’s public transportation network. His latest task involves optimizing the route planner algorithm. The city is represented as a grid with ‘.‘ denoting a traversable road and ‘#‘ denoting an obstacle. Mirai needs to find a route from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). Mirai can move up, down, left, or right, but he can only traverse roads and cannot pass through obstacles. His boss wants him to determine whether there is any possible path from the start to the destination and, if so, the minimum number of steps required. If no such path exists, Mirai should report that instead. problem You are given a grid of size N x M, where each cell is either a road (\'.\') or an obstacle (\'#\'). Determine if there is a path from the top-left corner to the bottom-right corner. If there is a path, return the minimum number of steps required to reach the destination. If no path exists, return -1. A cell (i, j) is adjacent to cell (i\', j\') if |i - i\'| + |j - j\'| = 1. Input format The input is given in the following format: N M grid_1 . . . grid_N * The first line contains two integers N and M, denoting the number of rows and columns of the grid. * The next N lines each contain a string of length M, where grid_i denotes the i-th row of the grid. Constraints * 2 leq N, M leq 100 * Each character in the grid is either \'.\' or \'#\'. * The grid is guaranteed to have \'.\' at both (0, 0) and (N-1, M-1). Output format Print the minimum number of steps required to reach the bottom-right corner from the top-left corner, or -1 if no path exists. Input example 1 5 5 ..... ..#.. .#... ...#. ..... Output example 1 8 Input example 2 3 3 .#. # #.# Output example 2 -1 Example Input 5 5 ..... ..#.. .#... ...#. ..... Output 8","solution":"from collections import deque def min_steps_to_reach_end(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == N-1 and col == M-1: return steps for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"A supermarket offers a loyalty program to its customers. Customers can earn points for every dollar spent, and these points can later be redeemed for items in the store. The supermarket has a list of items that can be redeemed, each with a specific point value. You are given an integer array `pointsArr` where `pointsArr[i]` represents the point value of the `i-th` item. Additionally, you are given an integer `totalPoints` indicating the total points a customer has earned. Your task is to determine the maximum number of distinct items the customer can redeem without exceeding their total points. Write a function that takes the integer array `pointsArr` and the integer `totalPoints` as input and returns the maximum number of distinct items that can be redeemed. Constraints: - 1 ≤ len(pointsArr) ≤ 1000 - 1 ≤ pointsArr[i] ≤ 1000 - 1 ≤ totalPoints ≤ 100000 # Input The function should accept the following parameters: - `pointsArr`: an array of integers where each integer represents the point value of an item. - `totalPoints`: an integer representing the total points a customer has earned. # Output Return an integer representing the maximum number of distinct items that can be redeemed without exceeding the total points. # Example Input: ``` pointsArr = [2, 3, 4, 5] totalPoints = 10 ``` Output: ``` 3 ``` Explanation: The customer can redeem items with points 2, 3, and 4 (or 2, 3, and 5), which totals to 9 (or 10) points, and it is the maximum number of distinct items without exceeding the total points.","solution":"def max_items(pointsArr, totalPoints): Determines the maximum number of distinct items a customer can redeem without exceeding their total points. Args: pointsArr: List of integers representing the point value of each item. totalPoints: Total points a customer has earned. Returns: An integer representing the maximum number of distinct items that can be redeemed. pointsArr.sort() items_redeemed = 0 for points in pointsArr: if totalPoints >= points: totalPoints -= points items_redeemed += 1 else: break return items_redeemed"},{"question":"Garen is a cyber detective who is trying to decode a secret message. He has intercepted a communication that contains a string S composed of lowercase English letters. Garen suspects that the message can be decoded by rearranging the characters of the string. He has with him a list of valid words. If a valid word can be formed by rearranging the characters of the string S, the message is considered successfully decoded, otherwise not. Your task is to help Garen determine whether it\'s possible to form any valid word with the given string S. Input The first line contains an integer T, the number of test cases. The first line of each test case contains the string S. The second line of each test case contains an integer W, the number of valid words. Each of the next W lines contain a single valid word. Output For each test case, print \\"YES\\" if it\'s possible to rearrange the characters of S to form any valid word, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10 1 ≤ W ≤ 10 1 ≤ |word| ≤ 10 SAMPLE INPUT 2 abc 3 acb bca abd xyz 2 zxy yxz SAMPLE OUTPUT YES YES Explanation For the first test case, the string \\"abc\\" can be rearranged to form the valid words \\"acb\\" or \\"bca\\", hence the output is \\"YES\\". For the second test case, the string \\"xyz\\" can be rearranged to form the valid words \\"zxy\\" and \\"yxz\\", hence the output is \\"YES\\".","solution":"def can_form_valid_word(S, valid_words): Determines if any valid word can be formed by rearranging the characters in string S. sorted_S = sorted(S) for word in valid_words: if sorted(word) == sorted_S: return \\"YES\\" return \\"NO\\" def decode_messages(T, test_cases): Decodes multiple test cases and determines if any valid word can be formed. Parameters: - T: integer, number of test cases - test_cases: list of tuples containing the string S and list of valid words for each test case Returns: - List of strings, \\"YES\\" or \\"NO\\" for each test case results = [] for S, valid_words in test_cases: result = can_form_valid_word(S, valid_words) results.append(result) return results"},{"question":"You have a rectangular grid of integers with N rows and M columns. Each cell of the grid initially contains a zero. You are given Q operations, each specifying a subgrid and an integer value. For each operation, you must increment all the cells in the specified subgrid by the given integer value. The operations are provided in the following format: (r1, c1, r2, c2, v), where (r1, c1) specifies the top-left corner of the subgrid, (r2, c2) specifies the bottom-right corner of the subgrid, and v specifies the value by which to increment each cell in the subgrid. After all Q operations, determine the final values in the grid. Input: The first line contains three integers N, M, and Q. Each of the next Q lines contains five integers r1, c1, r2, c2, and v describing an operation. Output: Output N lines, each containing M integers representing the grid\'s final state. Constraints: 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ r1 ≤ r2 ≤ N 1 ≤ c1 ≤ c2 ≤ M 1 ≤ v ≤ 1000 SAMPLE INPUT 3 3 2 1 1 2 2 3 2 2 3 3 2 SAMPLE OUTPUT 3 3 0 3 5 2 0 2 2 Explanation For the first operation, the subgrid from (1, 1) to (2, 2) is incremented by 3. The grid becomes: ``` 3 3 0 3 3 0 0 0 0 ``` For the second operation, the subgrid from (2, 2) to (3, 3) is incremented by 2. The grid becomes: ``` 3 3 0 3 5 2 0 2 2 ```","solution":"def apply_operations(N, M, Q, operations): Apply Q operations to an N by M grid and return the final state of the grid. Parameters: N (int): Number of rows. M (int): Number of columns. Q (int): Number of operations. operations (list of tuples): List of operations in the format (r1, c1, r2, c2, v). Returns: list of list of int: The final state of the grid. # Initialize the grid with zeros grid = [[0] * M for _ in range(N)] # Apply each operation for r1, c1, r2, c2, v in operations: for r in range(r1 - 1, r2): for c in range(c1 - 1, c2): grid[r][c] += v return grid"},{"question":"The development team at a software company needs a program that can merge two sorted lists of integers into one sorted list without duplicates. Write a function `merge_sorted_lists` that accomplishes this task. # Input - The function will receive two arguments: 1. A list of integers `list1`, which is sorted in ascending order. 2. A list of integers `list2`, which is also sorted in ascending order. No two elements in either list are the same. # Output - The function should return a new list that contains all unique elements from both input lists, sorted in ascending order. # Example Input ```python list1 = [1, 3, 5, 7] list2 = [2, 3, 6, 8] ``` Output ```python [1, 2, 3, 5, 6, 7, 8] ``` # Notes - You may assume that both input lists are already sorted. - Ensure that no duplicates appear in the final list. - Try to achieve a solution with O(n + m) complexity where n and m are lengths of `list1` and `list2` respectively.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without duplicates. Parameters: list1 (list): A list of sorted integers. list2 (list): A list of sorted integers. Returns: list: A sorted list containing all unique elements from both input lists. result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not result or result[-1] != list2[j]: result.append(list2[j]) j += 1 else: if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 j += 1 while i < len(list1): if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 while j < len(list2): if not result or result[-1] != list2[j]: result.append(list2[j]) j += 1 return result"},{"question":"In a mythical kingdom, there is a beautiful garden with n types of flowers arranged in a row. Each flower is represented by an integer from 1 to n, indicating its type. The kingdom\'s gardener loves symmetry in the garden and wants to rearrange the flowers such that the row of flowers forms a palindrome. The gardener can choose any flower in the row and paint it to match the type of any other flower (including itself). However, the gardener can only make k such changes. Given the current arrangement of flowers and the maximum number of changes allowed, determine if it is possible to rearrange the flowers into a palindrome with at most k changes. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input - The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n), representing the number of types of flowers and the maximum number of changes allowed, respectively. - The second line contains a string s of length n consisting of integers from 1 to n, representing the types of flowers in the row. Output Output \\"YES\\" if it is possible to rearrange the flowers into a palindrome with at most k changes, otherwise output \\"NO\\". Examples Input 5 1 12321 Output YES Input 6 2 123456 Output NO Input 5 2 12231 Output YES Input 4 0 1221 Output YES Note In the first example, the string is already a palindrome, so no changes are needed. In the second example, you would need at least 3 changes to turn the string into a palindrome, which exceeds the maximum allowed changes. In the third example, you can change one of the \'2\'s to \'3\' or \'3\' to \'2\' to get a palindrome, so it is possible. In the fourth example, the string is already a palindrome, so no changes are needed.","solution":"def can_rearrange_to_palindrome(n, k, s): Determines if it is possible to rearrange the string `s` into a palindrome with at most `k` changes. Parameters: n (int): The length of the string and number of types of flowers. k (int): The maximum number of changes allowed. s (str): The current arrangement of flowers. Returns: str: \\"YES\\" if possible to rearrange into a palindrome with at most `k` changes, otherwise \\"NO\\". changes_needed = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: changes_needed += 1 if changes_needed <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"In a grid-shaped city, every block is either a park or a building. You are given a 2D grid where each cell contains either \'P\' for park or \'B\' for building. Your task is to find the largest rectangular area that can be formed entirely by parks. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. The next n lines contain m characters each, representing the city grid. Each character is either \'P\' or \'B\'. Output Output a single integer, the area of the largest rectangle consisting entirely of parks. Examples Input 4 5 P B B P P P P B P P B P P P B B P P P P Output 6 Input 3 3 B B B B B B B B B Output 0 Note In the first sample, the largest rectangular area of parks is 2 rows by 3 columns, which equals an area of 6. In the second sample, there are no parks, hence the area is 0.","solution":"def largest_rectangle_area(matrix): def max_histogram_area(heights): heights.append(0) stack = [] max_area = 0 for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area if not matrix: return 0 n, m = len(matrix), len(matrix[0]) height = [0] * m max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'P\': height[j] += 1 else: height[j] = 0 max_area = max(max_area, max_histogram_area(height)) return max_area"},{"question":"You are working on a project that involves storing and retrieving information about people\'s hobbies. To manage this information, you\'re required to implement a simple system with the following functionalities: 1. **Add Hobby**: Given a person\'s name and a hobby, add the hobby to that person\'s list of hobbies. If the person already has that hobby, do nothing. 2. **Remove Hobby**: Given a person\'s name and a hobby, remove the hobby from that person\'s list of hobbies. If the person does not have that hobby, do nothing. 3. **Query Hobbies**: Given a person\'s name, return the list of that person\'s hobbies sorted lexicographically. If the person does not have any hobbies, return an empty list. Implement these functionalities efficiently as the number of people and hobbies can be large. Input The first line contains an integer `Q` (1 ≤ Q ≤ 105) — the number of queries. Each of the next `Q` lines contains requests in one of the following formats: - \\"add NAME HOBBY\\": Add the hobby HOBBY to the person NAME\'s list of hobbies. - \\"remove NAME HOBBY\\": Remove the hobby HOBBY from the person NAME\'s list of hobbies. - \\"query NAME\\": Return the list of hobbies for the person NAME sorted lexicographically. - `NAME` consists of alphabetical characters and is at most 100 characters long. - `HOBBY` consists of alphabetical characters and is at most 100 characters long. Output For each query of type \\"query NAME\\", print a line containing the sorted list of hobbies separated by spaces. If the person has no hobbies, print an empty line. Examples Input 10 add Alice painting add Alice reading add Bob cycling query Alice remove Alice painting query Alice query Bob remove Bob cycling query Bob add Bob reading Output painting reading reading reading","solution":"def manage_hobbies(queries): Manages a list of hobbies for multiple individuals. Args: queries (list of str): The list of queries to be processed. Returns: list of str: The results of the \\"query\\" requests. hobby_dict = {} result = [] for query in queries: parts = query.split() command = parts[0] name = parts[1] if command == \\"add\\": hobby = parts[2] if name not in hobby_dict: hobby_dict[name] = set() hobby_dict[name].add(hobby) elif command == \\"remove\\": hobby = parts[2] if name in hobby_dict and hobby in hobby_dict[name]: hobby_dict[name].remove(hobby) elif command == \\"query\\": if name in hobby_dict: result.append(\\" \\".join(sorted(hobby_dict[name]))) else: result.append(\\"\\") return result"},{"question":"A gardener is planting trees in a garden. The gardener can choose to plant a tree every day or skip planting on some days. However, the gardener must ensure that the garden never has three consecutive days without a new tree being planted. Given the number of days the gardener has to plant, determine the number of different ways the gardener can plan the planting schedule. Constraints: * 1 leq N leq 50 * All values in input are integers. Input: Input is given from Standard Input in the following format: N Output: Print the number of different valid planting schedules. Examples Input: 3 Output: 7 Input: 5 Output: 29 Input: 1 Output: 2","solution":"def valid_planting_schedules(N): Returns the number of valid planting schedules for N days. if N == 1: return 2 if N == 2: return 4 if N == 3: return 7 dp = [0] * (N + 1) dp[1] = 2 # Only two ways: plant or skip but plant next dp[2] = 4 # 1 plant, 2 plants, [P, P, skip] dp[3] = 7 # 3 plants, [P, P, S], [P, S, P], etc. for i in range(4, N + 1): dp[i] = dp[i-1] + dp[i-2] + dp[i-3] return dp[N]"},{"question":"A gardener is working on a rectangular garden with dimensions m x n. Every cell in the garden corresponds to a plot of land. Initially, the gardener irrigates some of the plots, setting them to a \\"watered\\" state, while the other plots remain \\"dry\\". The watering process is planned such that watered plots can influence neighboring dry plots. A watered plot can turn an adjacent dry plot to a watered state in one unit of time. An adjacent plot is a plot that is directly above, below, to the left, or to the right of any given plot. You are given the initial state of the garden as a grid of size m x n where \'W\' represents a watered plot and \'D\' represents a dry plot. Your task is to determine the minimum time required to water all the plots in the garden. If it is impossible to water all plots, return -1. Input - The first line contains two integers m and n~(1 ≤ m, n ≤ 2000) — the dimensions of the garden. - The next m lines contain n characters each, representing the initial state of the garden. Output Print one integer — the minimum time in units required to water all the plots, or -1 if it is impossible. Examples Input 3 3 DWD DWD DDD Output 2 Input 2 2 WW WW Output 0 Input 2 2 DD DD Output -1 Note In the first example, it takes two units of time to water all the plots. Initially, watered plots can turn adjacent dry plots to watered state. After the first unit of time, the grid becomes: ``` WWW DWD DDD ``` After the second unit of time: ``` WWW WWW DDD ``` In the third unit of time: ``` WWW WWW WWD ``` And finally: ``` WWW WWW WWW ``` So, it takes two units of time.","solution":"from collections import deque def min_time_to_water_all(m, n, garden): def in_bounds(x, y): return 0 <= x < m and 0 <= y < n def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if in_bounds(nx, ny): yield nx, ny queue = deque() dry_count = 0 for i in range(m): for j in range(n): if garden[i][j] == \'W\': queue.append((i, j, 0)) elif garden[i][j] == \'D\': dry_count += 1 if dry_count == 0: return 0 max_time = 0 while queue: x, y, time = queue.popleft() for nx, ny in neighbors(x, y): if garden[nx][ny] == \'D\': garden[nx][ny] = \'W\' dry_count -= 1 queue.append((nx, ny, time + 1)) max_time = time + 1 if dry_count == 0: return max_time return -1 # Example usage m = 3 n = 3 garden = [ [\'D\', \'W\', \'D\'], [\'D\', \'W\', \'D\'], [\'D\', \'D\', \'D\'] ] print(min_time_to_water_all(m, n, garden)) # Output: 2"},{"question":"Daniel is fond of Fibonacci numbers and enjoys creating interesting variations of them. Daniel believes in balanced strings, where the number of \'a\'s is equal to the number of \'b\'s. Inspired by his passion for Fibonacci numbers, he challenges you to solve a problem related to balanced strings: You are given a balanced string consisting of lowercase letters \'a\' and \'b\'. Your task is to determine the length of the longest substring that is also a balanced string. A balanced string is defined as a string that has an equal number of \'a\'s and \'b\'s. Input: The first line of input contains an integer t, the number of test cases. Each of the next t lines contains a single balanced string. Output: For each test case, print the length of the longest balanced substring on a new line. Constraints: SMALL: 1 ≤ t ≤ 10 1 ≤ length of the string ≤ 100 MEDIUM: 1 ≤ t ≤ 100 1 ≤ length of the string ≤ 10000 LARGE: 1 ≤ t ≤ 500 1 ≤ length of the string ≤ 100000 SAMPLE INPUT 2 abba ababab SAMPLE OUTPUT 4 6 Explanation For the first test case, the longest balanced substring is \\"abba\\" with length 4. For the second test case, the longest balanced substring is \\"ababab\\" with length 6.","solution":"def longest_balanced_substring(s): Function to find the length of the longest balanced substring where the number of \'a\'s is equal to the number of \'b\'s. max_len = 0 n = len(s) # Dictionary to store the first occurrence index of the balance count balance_map = {0: -1} balance = 0 for i in range(n): if s[i] == \'a\': balance += 1 else: balance -= 1 if balance in balance_map: max_len = max(max_len, i - balance_map[balance]) else: balance_map[balance] = i return max_len def process_test_cases(t, test_cases): Processes multiple test cases for finding the length of the longest balanced substring for each string. results = [] for i in range(t): s = test_cases[i] result = longest_balanced_substring(s) results.append(result) return results"},{"question":"You are given an array of N integers. Your task is to find the first integer in the array that is greater than the average of all the integers in the array. If no such integer is found, return -1. Write a function that takes the integer array as input and prints the desired output. Input: First line of input contains a single integer N, the number of integers in the array. The next line contains N space-separated integers representing the elements of the array. Output: Print the first integer that is greater than the average of all the integers in the array, or -1 if no such integer exists. Constraints: 1 ≤ N ≤ 1000 -10^6 ≤ array[i] ≤ 10^6 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 4 SAMPLE INPUT 3 1 1 1 SAMPLE OUTPUT -1","solution":"def find_first_greater_than_average(arr): Returns the first integer in the array that is greater than the average of all integers in the array. If no such integer exists, returns -1. if not arr: return -1 total_sum = sum(arr) count = len(arr) average = total_sum / count for num in arr: if num > average: return num return -1"},{"question":"Detective Sherlock Holmes has been presented with a peculiar string-based case. He needs your help to find and organize important information hidden within a string description of evidence items. Each item description consists of a single uppercase English letter followed by a positive integer. The items are not necessarily ordered, and there can be multiple occurrences of the same letter with different numbers. Sherlock wants to count the total occurrences of each letter and provide the sum of the associated integers for each letter. Write a program that takes a string of evidence items and produces the total count of each distinct letter and the sum of all integers associated with each letter, sorted alphabetically by the letter. Input The input is a single line containing the evidence string. The length of the string is between 1 and 1000 characters, inclusive. The evidence string consists of multiple substrings, where each substring follows the pattern: * An uppercase English letter (A-Z) * One or more decimal digits (0-9) It is guaranteed that every letter will be followed by at least one digit. Output For each distinct uppercase letter found in the string, output a line with the following format: ``` <LETTER>: <COUNT> <SUM> ``` Where `<LETTER>` is the uppercase letter, `<COUNT>` is the number of times this letter appears in the string, and `<SUM>` is the sum of all integers associated with this letter. The output should be sorted alphabetically by the letter. Examples Input A10B25A3A2B1 Output A: 3 15 B: 2 26 Input Z99Y100X200Y1 Output X: 1 200 Y: 2 101 Z: 1 99","solution":"def analyze_evidence(evidence): from collections import defaultdict import re counts = defaultdict(int) sums = defaultdict(int) matches = re.findall(r\'([A-Z])(d+)\', evidence) for letter, num in matches: counts[letter] += 1 sums[letter] += int(num) result = [] for letter in sorted(counts): result.append(f\\"{letter}: {counts[letter]} {sums[letter]}\\") return \\"n\\".join(result)"},{"question":"Given an integer array `arr` and a target integer `k`, determine if there exists two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] = k`. The function should return `true` if such indices exist, and `false` otherwise. # Input Format - The first line contains the integer `T`, the number of test cases. - For each test case: - The first line contains the integers `n` and `k`, where `n` is the size of the array and `k` is the target sum. - The second line contains `n` space-separated integers representing the elements of the array `arr`. # Output Format - For each test case, output `true` if two distinct indices exist such that their corresponding elements sum up to `k`, otherwise output `false`. # Constraints - ( 1 leq T leq 10 ) - ( 2 leq n leq 10^5 ) - ( -10^9 leq arr[i] leq 10^9 ) - ( -10^9 leq k leq 10^9 ) # Sample Input ``` 2 4 9 2 7 11 15 5 10 1 2 3 4 5 ``` # Sample Output ``` true false ``` # Explanation In the first test case, there exist indices 0 and 1 such that `arr[0] + arr[1] = 2 + 7 = 9`. In the second test case, no two distinct elements sum up to 10.","solution":"def can_sum_to_k(arr, k): Determines if there exist two distinct indices in the array such that their corresponding elements sum to k. Parameters: arr (list of int): the input array k (int): the target sum Returns: bool: True if such indices exist, False otherwise seen = set() for number in arr: if k - number in seen: return True seen.add(number) return False def process_test_cases(T, test_cases): For each test case, determine if two distinct indices exist such that their corresponding elements sum to k. Parameters: T (int): the number of test cases test_cases (list of tuple): each tuple contains two elements, first is an integer list and second is the target sum Returns: list of bool: list containing the result for each test case results = [] for n, k, arr in test_cases: results.append(can_sum_to_k(arr, k)) return results"},{"question":"In a far-away land, there\'s a famous magician who loves creating strings with magical properties. One such property is that the string does not contain any two consecutive characters that are the same. The magician wants to perform a trick where he transforms a given string into a magical string by making the least number of character changes possible. Given a string s, your task is to determine the minimum number of character changes required to transform it into a magical string where no two consecutive characters are the same. You can assume that the string consists of lowercase Latin letters only. Input The first line contains an integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string s of length n consisting of lowercase Latin letters. Output Print the minimum number of character changes required to transform the string into a magical string where no two consecutive characters are the same. Examples Input 5 aabbc Output 2 Input 6 aaaaaa Output 5 Input 4 abcd Output 0 Note In the first example, the input string \\"aabbc\\" can be transformed into \\"ababc\\" with 2 changes: change the second \'a\' to \'b\' and change the first \'b\' to \'a\'. In the second example, all characters are the same, so we need to change every alternate character, resulting in a total of 5 changes to get a magical string like \\"ababab\\". In the third example, the string \\"abcd\\" already satisfies the condition where no two consecutive characters are the same, so no changes are needed.","solution":"def min_changes_to_magical_string(n, s): Returns the minimum number of character changes required to transform the string s into a magical string. changes = 0 for i in range(1, n): if s[i] == s[i-1]: # If current character is the same as the previous one changes += 1 # We could change the character, but we are just counting how many changes are necessary # Changing s[i] to any other character will guarantee it is different from its neighbor # Thus, we don\'t need to actually modify the string return changes"},{"question":"You have recently started working with a robotics team that is working on pathfinding algorithms for their robots. The current task is to write a program that ensures a robot can navigate a 2D grid while avoiding obstacles. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). # Problem: Given a 2D grid of size n x m, determine if there is a path from the top-left corner to the bottom-right corner. The robot can move up, down, left, or right but cannot move diagonally. It is also unable to move into cells containing obstacles. # Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. Each of the next n lines contains a string of length m, consisting of characters \'.\' (empty) and \'#\' (obstacle). # Output: Print \\"YES\\" if a path exists from the top-left corner to the bottom-right corner; otherwise, print \\"NO\\". # Example: ``` Input: 5 5 ..... .#. ..... .#. ..... Output: YES Input: 3 3 .#. .#. ... Output: NO ``` # Note: In the first example, there exists a path from (0, 0) to (4, 4) avoiding the obstacles. In the second example, all possible paths are blocked by obstacles, thus making it impossible to reach the bottom-right corner from the top-left corner.","solution":"def is_path_exists(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" visited = [[False] * m for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m: return False if visited[x][y] or grid[x][y] == \'#\': return False if x == n-1 and y == m-1: return True visited[x][y] = True # Move in all 4 possible directions if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given an array `A` of N integers and a target integer `T`. Write a function that finds two distinct integers in the array whose product is equal to the target `T`. The function should return the indices of these two integers as a tuple (i, j), where i and j are the indices of the integers in the array. If there are multiple possible pairs, return any one of them. If no such pair exists, return `None`. **Constraints** * The array `A` contains between 2 and 10^5 integers (inclusive). * Each integer in the array is between -10^9 and 10^9. * T is an integer between -10^18 and 10^18. **Input Format** The input consists of the following space-separated values: * An integer `N`, the length of the array. * Followed by `N` integers, the elements of the array `A`. * Followed by an integer `T`, the target product. **Output Format** The function must print the indices of the two integers whose product is equal to `T`, or `None` if no such pair exists. The indices should be 0-based. **Examples** **Input** 7 2 4 -1 6 10 5 -3 20 **Output** (2, 4) **Input** 5 5 7 1 -9 3 10 **Output** None **Input** 6 1 2 3 -2 4 -4 8 **Output** (3, 5)","solution":"def find_pair_with_product(A, T): This function finds two distinct integers in the array A whose product is equal to the target T. Returns the indices of these two integers as a tuple (i, j). If no such pair exists, returns None. n = len(A) index_map = {} # map to keep track of the indices of elements we have seen for i in range(n): if A[i] != 0 and T % A[i] == 0: # avoid division by zero and ensure T is divisible by A[i] complement = T // A[i] if complement in index_map: return (index_map[complement], i) index_map[A[i]] = i return None"},{"question":"You are working in a software company, and your manager assigned you a task to develop a simulation for a queue system in a restaurant. You need to implement a series of operations to manage the queue. The queue initially starts empty and supports the following operations: - ENQUEUE x (Enqueue operation) Add a person with ID `x` to the end of the queue. Here, `x` is a unique positive integer. - DEQUEUE (Dequeue operation) Remove a person from the front of the queue. If the queue is empty, do nothing. - PEEK (Peek operation) Print the ID of the person at the front of the queue. If the queue is empty, print `-1`. - SIZE (Size operation) Print the current size of the queue. - EMPTY (Empty operation) Print `1` if the queue is empty, otherwise print `0`. # Input The input starts with a single integer `Q`, the number of operations (1 ≤ Q ≤ 100,000). Each of the following `Q` lines contains one operation as described above. For `ENQUEUE x` operations, `x` will be a unique positive integer (1 ≤ x ≤ 1,000,000). # Output For each `PEEK`, `SIZE`, and `EMPTY` operation, output the corresponding result on a new line. # Example Input ``` 8 ENQUEUE 5 ENQUEUE 10 PEEK SIZE DEQUEUE PEEK SIZE EMPTY ``` Output ``` 5 2 10 1 0 ``` # Notes - Handle the operations efficiently to ensure the solution runs within acceptable time limits. - Make sure to carefully manage the queue state across various operations to maintain the correct results.","solution":"from collections import deque def manage_queue(operations): Perform queue operations and return results as per each PEEK, SIZE, and EMPTY operation. queue = deque() result = [] for operation in operations.splitlines(): if operation.startswith(\\"ENQUEUE\\"): _, x = operation.split() queue.append(int(x)) elif operation == \\"DEQUEUE\\": if queue: queue.popleft() elif operation == \\"PEEK\\": result.append(str(queue[0]) if queue else \'-1\') elif operation == \\"SIZE\\": result.append(str(len(queue))) elif operation == \\"EMPTY\\": result.append(\'1\' if not queue else \'0\') return \\"n\\".join(result) # Example usage # operations = 8 # ENQUEUE 5 # ENQUEUE 10 # PEEK # SIZE # DEQUEUE # PEEK # SIZE # EMPTY # print(manage_queue(operations))"},{"question":"Given a list of integers representing the stock prices of a company over a period of days, write a function `maxProfit(prices)` that calculates the maximum profit you can achieve. You are permitted to complete at most one transaction (i.e., buy one share and sell one share of the stock). Note that you cannot sell a stock before you buy one. **Input:** A list of integers, `prices`, where each integer represents the stock price on that particular day. The length of the list will be between 1 and 10^5. **Output:** Return an integer representing the maximum profit you can achieve from a single buy-sell transaction. If no profit is possible, return 0. **Example:** ```python maxProfit([7, 1, 5, 3, 6, 4]) # returns 5 maxProfit([7, 6, 4, 3, 1]) # returns 0 ```","solution":"def maxProfit(prices): Calculate the maximum profit from a single buy and sell transaction. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are tasked with creating a new version of a data structure for efficient querying. Specifically, you need to implement a dynamic range minimum query (RMQ) structure that supports the following operations: 1. **Update:** Modify the value at a specific index. 2. **Query:** Find the minimum value in a specified range. The structure should support these operations efficiently. You are to implement the structure and process a sequence of operations as described below. Input The first line of input will contain two integers n and q (1 ≤ n, q ≤ 100,000), the initial number of elements and the number of operations respectively. The second line will contain n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), the initial values of the array. Each of the next q lines will contain an operation in one of the following forms: - `1 i v`: Update the value at index i to v (1 ≤ i ≤ n, 1 ≤ v ≤ 1,000,000). - `2 l r`: Query the minimum value in the range [l, r] (1 ≤ l ≤ r ≤ n). Output For each \\"2 l r\\" operation, print the minimum value in the specified range. Example Input ``` 5 5 1 3 2 4 5 2 1 3 1 2 1 2 1 3 1 3 6 2 1 5 ``` Output ``` 1 1 1 ``` Note Initially, the array is `[1, 3, 2, 4, 5]`. The operations are: - Query the minimum value in the range [1, 3], which is 1. - Update the value at index 2 to 1, making the array `[1, 1, 2, 4, 5]`. - Query the minimum value in the range [1, 3] again, which is now 1. - Update the value at index 3 to 6, making the array `[1, 1, 6, 4, 5]`. - Query the minimum value in the range [1, 5], which is still 1.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [float(\'inf\')] * (2 * self.n) self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): index += self.n self.tree[index] = value while index > 1: index //= 2 self.tree[index] = min(self.tree[2 * index], self.tree[2 * index + 1]) def query(self, left, right): left += self.n right += self.n min_val = float(\'inf\') while left < right: if left % 2 == 1: min_val = min(min_val, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 min_val = min(min_val, self.tree[right]) left //= 2 right //= 2 return min_val def process_operations(n, q, array, operations): seg_tree = SegmentTree(array) result = [] for operation in operations: if operation[0] == 1: _, i, v = operation seg_tree.update(i - 1, v) elif operation[0] == 2: _, l, r = operation result.append(seg_tree.query(l - 1, r)) return result"},{"question":"A pharmaceutical company has developed a new drug that needs to undergo a series of tests. Each test result is recorded as a floating-point number representing the drug\'s effectiveness at a certain dosage. The scientists want to analyze these test results to determine if the drug consistently improves at increasing dosages. Your task is to help the scientists by writing a program that evaluates whether the drug\'s effectiveness shows a strictly increasing trend. The dosage levels are administered in an ascending order, so you just need to check if each test result is greater than the one before it. Input The input consists of two lines: 1. A single integer n (2 ≤ n ≤ 100), the number of test results. 2. A sequence of n floating-point numbers r1, r2, ..., rn representing the test results. Output Print \\"Consistent Improvement\\" if every test result is strictly greater than the previous one. Otherwise, print \\"Further Testing Needed\\". Examples Input 5 0.1 0.2 0.3 0.4 0.5 Output Consistent Improvement Input 4 1.5 1.5 1.6 1.7 Output Further Testing Needed Input 3 2.3 2.2 2.5 Output Further Testing Needed","solution":"def evaluate_trend(n, results): Evaluates if the drug\'s effectiveness shows a strictly increasing trend. Parameters: n (int): Number of test results. results (list of floats): List of test results. Returns: str: \\"Consistent Improvement\\" if it shows a strictly increasing trend, otherwise \\"Further Testing Needed\\". for i in range(1, n): if results[i] <= results[i - 1]: return \\"Further Testing Needed\\" return \\"Consistent Improvement\\""},{"question":"You\'re given an array of n integers. Perform the following operation exactly k times: 1. Choose any subarray and reverse it. After k operations, your task is to find the lexicographically smallest array possible. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line contains n integers separated by spaces which represent the initial array (the values in the array are integers between 1 and 100). Output Output a single line containing the lexicographically smallest array obtainable after exactly k reversals. Examples Input 5 1 4 3 2 1 5 Output 1 2 3 4 5 Input 5 2 5 4 3 2 1 Output 1 2 3 4 5 Note In the first example, by reversing the subarray [4, 3, 2, 1], you get the smallest array immediately. In the second example, you would reverse [5]) and then [4, 3, 2, 1] to end up with the smallest array.","solution":"def lexicographically_smallest_array(n, k, arr): This function returns the lexicographically smallest array possible after exactly k subarray reversals. Args: n (int): the number of elements in the array. k (int): the number of subarray reversals allowed. arr (list of int): the initial array. Returns: list of int: the lexicographically smallest array obtainable. if k > 1: # If k > 1, we can sort the array to get the smallest lexicographical order return sorted(arr) else: # If k == 1, we need to find the best single subarray to reverse to create the smallest array smallest_array = arr[:] for i in range(n): for j in range(i, n): reversed_subarray = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] if reversed_subarray < smallest_array: smallest_array = reversed_subarray return smallest_array"},{"question":"Develop a function that simulates the behavior of an elevator system in a building with multiple floors. The elevator starts on the ground floor (floor 0) and processes a series of commands to either move up, move down, or stay. The elevator can never go below the ground floor and cannot exceed the maximum number of floors in the building. # Objective: Design a function `elevator_system(max_floors, commands)` that calculates the final floor the elevator will be on after processing all the commands. # Input: - `max_floors`: An integer `1 ≤ max_floors ≤ 10^4` representing the maximum number of floors in the building. - `commands`: A list of strings where each string is one of the following commands: - \\"UP\\": The elevator moves up one floor. - \\"DOWN\\": The elevator moves down one floor. - \\"STAY\\": The elevator remains on the current floor. The length of `commands` will be between `1` and `10^5`. # Output: - Return an integer representing the floor the elevator will be on after executing all the commands. # Example: Input: ``` max_floors = 15 commands = [\\"UP\\", \\"UP\\", \\"DOWN\\", \\"UP\\", \\"STAY\\", \\"DOWN\\", \\"DOWN\\", \\"UP\\"] ``` Output: ``` 2 ``` # Explanation: The elevator starts at floor 0. 1. \\"UP\\": Moves to floor 1. 2. \\"UP\\": Moves to floor 2. 3. \\"DOWN\\": Moves to floor 1. 4. \\"UP\\": Moves to floor 2. 5. \\"STAY\\": Remains at floor 2. 6. \\"DOWN\\": Moves to floor 1. 7. \\"DOWN\\": Moves to floor 0. 8. \\"UP\\": Moves to floor 1. Finally, the elevator is on floor 1. # Special Conditions: 1. If a \\"DOWN\\" command would move the elevator below the ground floor, the elevator should remain at the ground floor (0). 2. If an \\"UP\\" command would move the elevator above the top floor (`max_floors`), the elevator should remain on the top floor (`max_floors`). Ensure that the function is optimized for performance, given the constraints.","solution":"def elevator_system(max_floors, commands): Calculates the final floor of an elevator after processing a list of commands. :param max_floors: Maximum number of floors in the building. :param commands: List of commands that the elevator needs to execute. :return: The final floor the elevator will be on after executing all commands. current_floor = 0 for command in commands: if command == \\"UP\\": if current_floor < max_floors: current_floor += 1 elif command == \\"DOWN\\": if current_floor > 0: current_floor -= 1 # No need to check \\"STAY\\" as it does nothing return current_floor"},{"question":"In a large social network, friends are represented by nodes and friendships by undirected edges. You are tasked with developing a feature that can identify \\"friend circles\\". A \\"friend circle\\" is defined as a group of friends who are all directly or indirectly connected to each other. Given an undirected graph representing the social network, where each node represents a person and each edge represents a bi-directional friendship between two people, you need to determine the number of friend circles in the network. A friend circle is any connected component in the graph. You should write a function `findCircleNum` to determine the number of friend circles. # Input: - An integer `n` (1 ≤ n ≤ 200), representing the number of people in the network. - An n x n adjacency matrix `M` where `M[i][j]` = 1 represents a friendship between person `i` and person `j`, and `M[i][j]` = 0 represents no direct friendship. # Output: - An integer representing the number of friend circles in the network. # Function Signature: ```python def findCircleNum(M: List[List[int]]) -> int: ``` # Example: Input: ```json { \\"n\\": 3, \\"M\\": [ [1, 1, 0], [1, 1, 0], [0, 0, 1] ] } ``` Output: ```json { \\"result\\": 2 } ``` Input: ```json { \\"n\\": 4, \\"M\\": [ [1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1] ] } ``` Output: ```json { \\"result\\": 2 } ``` # Note: - In the first example, there are two friend circles: [0, 1] and [2]. - In the second example, there are two friend circles: [0, 1] and [2, 3]. - Each person is considered to be in their friend circle by themselves if they have no friends. # Constraints: - You may assume no duplicate edges and that the adjacency matrix is symmetric.","solution":"from typing import List def findCircleNum(M: List[List[int]]) -> int: def dfs(node: int): for friend in range(n): if M[node][friend] == 1 and friend not in visited: visited.add(friend) dfs(friend) n = len(M) visited = set() friend_circles = 0 for person in range(n): if person not in visited: dfs(person) friend_circles += 1 return friend_circles"},{"question":"Anna is on a hiking trip and she has a backpack with a weight limit. There are several items available to her, each with a specific weight and a value. Anna wants to maximize the total value of the items she can carry in her backpack without exceeding the weight limit. Your task is to write a program that will determine the maximum total value that Anna can carry. Input The first line contains two integers n (1 ≤ n ≤ 100), the number of items, and W (1 ≤ W ≤ 1000), the weight limit of the backpack. The second line contains n integers, where the i-th integer vi (1 ≤ vi ≤ 1000) represents the value of the i-th item. The third line contains n integers, where the i-th integer wi (1 ≤ wi ≤ 1000) represents the weight of the i-th item. Output In the single line, print a single number - the maximum total value Anna can carry without exceeding the weight limit W. Examples Input 4 10 60 100 120 30 2 4 6 1 Output 220 Input 3 50 60 100 120 10 20 30 Output 220 Note Consider the first sample. The best combination is to take the second and third items (values 100 and 120, weights 4 and 6), totaling 220 in value. The second sample can carry all items to reach the maximum total value of 220.","solution":"def knapsack(n, W, values, weights): # Initialize the dp array with zeros dp = [0] * (W + 1) # Iterate through all items for i in range(n): # Update the dp array from end to start for w in range(W, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[W]"},{"question":"Given an integer array nums and an integer target, return indices of the two numbers such that they add up to target. Assume there will always be exactly one solution, and you may not use the same element twice. You can return the answer in any order. Input - The first line of input contains an integer T, the number of test cases. - For each test case, the second line contains an integer n, the number of elements in the array. - The third line contains n space-separated integers, representing the array nums. - The fourth line contains an integer target. Output For each test case, output the indices of the two numbers in nums that add up to target. Constraints 1 ≤ T ≤ 100 2 ≤ n ≤ 1000 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 Example Input: 2 4 2 7 11 15 9 3 3 2 4 6 Output: 0 1 1 2","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, returns the indices of the two numbers such that they add up to the target. num_dict = {} for i, num in enumerate(nums): diff = target - num if diff in num_dict: return [num_dict[diff], i] num_dict[num] = i def process_input(T, cases): Process the input for T test cases and returns the results for each case. results = [] for case in cases: n, nums, target = case indices = two_sum(nums, target) results.append(indices) return results"},{"question":"You are given a forest of trees, where each tree represents a hierarchy of departments in an organization. Every department can have multiple sub-departments, each of which can further have its own sub-departments, and so on. The purpose of this exercise is to determine the \\"maximum depth\\" of each tree in the forest. The depth of a tree is defined as the number of edges on the longest path from the root to any leaf. # Input: The input consists of n lines (1≤n≤100), where each line represents a tree. Each tree is described in a format where: - `X` represents a department with no sub-departments. - `{Department1, Department2, ..., DepartmentK}` represents a department with sub-departments listed within the curly braces `{}`. Below are some examples of tree descriptions: ``` X {X} {X, X} {{X}} {X, {X, X}, X} ``` The input is terminated by a line only containing a single zero which represents the end of input. # Output: For each tree description given in the input, output a line with a single integer representing the maximum depth of the tree, in the same order as the input. # Example Input: ``` X {X} {X, X} {{X}} {X, {X, X}, X} 0 ``` Output: ``` 1 2 2 3 3 ``` # Explanation: - The first tree `X` has a depth of 1 because there is only one department and no sub-departments. - The second tree `{X}` has a depth of 2 because it has one sub-department. - The third tree `{X, X}` has a depth of 2 because there are two sub-departments but no further nesting. - The fourth tree `{{X}}` has a depth of 3 due to double nesting. - The fifth tree `{X, {X, X}, X}` has a maximum depth of 3 due to nested sub-departments. Your task is to implement this tree depth calculation logic.","solution":"def max_depth(tree_description): Returns the maximum depth of the tree described by the tree_description string. def helper(s, index): max_depth_subtree = 0 current_depth = 0 while index < len(s): char = s[index] if char == \'{\': current_depth += 1 d, index = helper(s, index + 1) max_depth_subtree = max(max_depth_subtree, d) elif char == \'}\': current_depth -= 1 return max_depth_subtree + 1, index index += 1 return max_depth_subtree + 1, index depth, _ = helper(tree_description, 0) return depth def parse_input(input_data): Parses the input data to list of tree descriptions. tree_descriptions = input_data.strip().split(\'n\') if tree_descriptions[-1] == \'0\': return tree_descriptions[:-1] return tree_descriptions def calculate_max_depths(input_data): Calculates the maximum depth for each tree in the input data. tree_descriptions = parse_input(input_data) return [max_depth(tree) for tree in tree_descriptions]"},{"question":"You are given a list of characters. Your task is to determine the number of unique characters that can be formed by rearranging the list. Input Format A single line containing a string S of lowercase English letters. 1 ≤ |S| ≤ 1000 Output Format Print the number of unique characters that can be formed by rearranging the list. Problem Setter: Practo Tech Team SAMPLE INPUT abc SAMPLE OUTPUT 6 Explanation For example, if S is \\"abc\\". The unique rearrangements are: abc, acb, bac, bca, cab, cba. Hence, the total number of unique characters that can be formed is 6. If the input string contains repeated characters, ensure to consider only distinct permutations. For example, if S is \\"aabb\\", the unique permutations are: aabb, abba, baba, baab, abba, baba, hence the output should be 6.","solution":"from itertools import permutations def unique_permutations(S): Returns the number of unique permutations of the characters in the string S. # Generate all unique permutations using a set to avoid duplicates unique_perms = set(permutations(S)) # Return the number of unique permutations return len(unique_perms)"},{"question":"You are given an infinite array where the i-th element is denoted by A[i] = i^3. Your task is to answer Q queries on this array. Each query is one of the following types: 1. Q1 l r: Compute the sum of the elements from index l to index r (both inclusive). 2. Q2 l r: Compute the sum of the square of the elements from index l to index r (both inclusive). 3. Q3 x y: Replace the value of A[x] with y and compute the sum of the elements from index 1 to Q, subsequently revert the value of A[x] to its original value (i.e., x^3). Input The first line of the input contains an integer Q denoting the number of queries. The next Q lines contain the queries, each in the format described above. Output For each query, output the required answer on a new line. Constraints 1 ≤ Q ≤ 10^5 1 ≤ l ≤ r ≤ 10^9 1 ≤ x ≤ 10^9 0 ≤ y ≤ 10^18 Sample Input 4 Q1 2 4 Q2 1 3 Q3 3 64 Q1 1 2 Sample Output 99 36 Clone Original array. 729 Explanation 1. Sum from index 2 to 4 (inclusive) = 8 + 27 + 64 = 99. 2. Sum of the squares from index 1 to 3 (inclusive) = 1^2 + 8^2 + 27^2 = 1 + 64 + 729 = 794. 3. Temporarily replace A[3] from 27 to 64 and compute sum from index 1 to Q: Original sum from index 1 to Q = 1 + 8 + 27 = 36. After replacing, sum from index 1 to Q = 1 + 8 + 64 = 73. Thus the sum of the new array = 1+8+64 = 73. Revert back A[3] to original value (27). 4. Sum from index 1 to 2 (inclusive): 1 + 8 = 9.","solution":"def cube(n): return n ** 3 def sum_of_cubes(l, r): return sum(cube(x) for x in range(l, r + 1)) def sum_of_squares_of_cubes(l, r): return sum(cube(x) ** 2 for x in range(l, r + 1)) def handle_query(query): q_type, *params = query.split() if q_type == \'Q1\': l, r = map(int, params) return sum_of_cubes(l, r) elif q_type == \'Q2\': l, r = map(int, params) return sum_of_squares_of_cubes(l, r) elif q_type == \'Q3\': x, y = map(int, params) original_value = cube(x) sum_Q = sum(cube(k) for k in range(1, x + 1)) new_value_sum = sum_Q - original_value + y return new_value_sum def process_queries(queries): results = [] for query in queries: results.append(handle_query(query)) return results"},{"question":"Boolean Matrix You are given a matrix with dimensions ( n times m ) where each element is either a 0 or a 1. You need to perform the following operation: If any cell of the matrix is 1, then you need to set its entire row and column to 1. Write a program to modify the matrix according to the above rules. Input The input consists of a single test case of the following format: The first line contains two integers ( n ) and ( m ) (1 ≤ n, m ≤ 1000) - the number of rows and columns, respectively. The next ( n ) lines represent the matrix, with each line containing ( m ) integers (either 0 or 1). Output Output the modified matrix. Example Input 3 4 0 0 0 0 0 0 1 0 0 0 0 0 Example Output 0 0 1 0 1 1 1 1 0 0 1 0 Example Input 2 2 1 0 0 0 Example Output 1 1 1 0 Example Input 3 3 0 0 0 0 1 0 0 0 0 Example Output 0 1 0 1 1 1 0 1 0","solution":"def modify_matrix(matrix): n = len(matrix) m = len(matrix[0]) rows_to_update = set() cols_to_update = set() # First pass to find the rows and columns that need to be updated for i in range(n): for j in range(m): if matrix[i][j] == 1: rows_to_update.add(i) cols_to_update.add(j) # Apply the updates to rows for row in rows_to_update: for j in range(m): matrix[row][j] = 1 # Apply the updates to columns for col in cols_to_update: for i in range(n): matrix[i][col] = 1 return matrix"},{"question":"James loves playing with strings. He has recently discovered a new interest in palindromes and the ways of transforming a string into a palindrome. A string is a palindrome if it reads the same backward as forward. James came up with a transformation operation to make a string into a palindrome: - He can replace any character in the string with any other character. He wants to find out the minimum number of such replacement operations needed to convert the given string into a palindrome. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5) without spaces containing only lowercase English letters. Output Output a single integer representing the minimum number of replacement operations required to make the given string a palindrome. Examples Input abca Output 1 Input race Output 2 Input madam Output 0 Note In the first example, the string \'abca\' can be converted into the palindrome \'abba\' or \'acca\' with just one replacement operation. In the second example, the string \'race\' can be converted into the palindrome \'eace\' or \'raca\' with two replacement operations. In the third example, the string \'madam\' is already a palindrome, so no replacement operations are needed.","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of replacement operations required to convert the given string into a palindrome. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"Maria is planning her hiking route across a mountain range. The trail is represented by an array of integers `heights` where `heights[i]` represents the height of the trail at position `i`. She starts at the beginning of the trail (at index 0) and wants to reach the end of the trail (at index n-1). Maria can move to the next position, stay at the current position, or jump up to 3 positions ahead. However, there is an energy cost associated with each move: - Moving to the next position costs `|heights[i+1] - heights[i]|` units of energy. - Staying at the current position does not cost any energy. - Jumping `j` positions ahead (where 1 ≤ j ≤ 3) costs `|heights[i+j] - heights[i]| * j` units of energy. Given the array `heights`, determine the minimum amount of energy Maria needs to reach the end of the trail. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10^5), which represents the number of positions on the trail. - The second line contains `n` integers, the array `heights`, where each element `heights[i]` (1 ≤ heights[i] ≤ 10^9) represents the height at position `i`. # Output Print a single integer — the minimum energy required to reach the end of the trail. # Example Input 5 10 30 20 10 30 Output 20 # Note In the sample, Maria can follow the below steps to minimize the energy cost: 1. Move from position 0 to position 1: cost is |30-10| = 20. 2. Stay at position 1: cost is 0. 3. Jump from position 1 to position 4: cost is |30 - 30| * 3 = 0. Total minimum energy cost = 20 + 0 + 0 = 20.","solution":"def min_energy(heights): n = len(heights) dp = [float(\'inf\')] * n dp[0] = 0 for i in range(n): for j in range(1, 4): if i + j < n: dp[i + j] = min(dp[i + j], dp[i] + abs(heights[i + j] - heights[i]) * j) return dp[-1]"},{"question":"You are given an integer array `nums` of size `n`. Your task is to find the maximum possible sum of a non-empty subarray from the array. A subarray is a contiguous subset of the array, and the sum of the subarray is the sum of its elements. Input: An integer array `nums` of size `n`. Output: An integer which is the maximum possible sum of a non-empty subarray. Constraints: - 1 ≤ n ≤ 100000 - -1000 ≤ nums[i] ≤ 1000 SAMPLE INPUT [-2,1,-3,4,-1,2,1,-5,4] SAMPLE OUTPUT 6 Explanation: The subarray [4,-1,2,1] has the maximum sum which is 6.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a non-empty subarray. Parameters: nums (list of int): List of integers to find the max subarray sum. Returns: int: Maximum sum of any non-empty subarray. max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a game, there is a special score achieved by a player called \\"Magic Score\\". The Magic Score S consists of T terms of scores, represented as a sequence of integers. The score will be valid if it can be divided into contiguous subsequences such that the sum of each subsequence is even. Given the Magic Score S and the sequence of T terms of scores, determine if it is possible to divide S into contiguous subsequences where the sum of each subsequence is even. Constraints * 1 leq T leq 10^3 * -10^4 leq score leq 10^4 * All values in input are integers. Input Input is given from Standard Input in the following format: T score_1 score_2 ... score_T Output Print \\"YES\\" if it is possible to divide the score into contiguous subsequences with even sums, otherwise print \\"NO\\". Examples Input 4 2 -2 5 3 Output NO Input 3 4 4 4 Output YES Input 2 -1 1 Output NO","solution":"def is_valid_magic_score(T, scores): for score in scores: if score % 2 != 0: return \\"NO\\" return \\"YES\\" def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) scores = list(map(int, data[1:])) print(is_valid_magic_score(T, scores)) if __name__ == \\"__main__\\": main()"},{"question":"Secure Chatroom You are developing a secure chat application for a group of N users. Each user in the chatroom sends messages, which are either marked as \\"private\\" (P) or \\"public\\" (C). The application must allow each user to receive all \\"public\\" messages as well as all \\"private\\" messages directed to them. To optimize storage and speed, you decided to implement a feature that filters messages for each user accordingly. Task Write a program that simulates the message filtering process in the secure chatroom. Given the number of users and a list of messages (either public or private), determine the complete list of messages that each user will see. Each message is represented by a tuple containing three elements: - The type of the message (\'P\' for private, \'C\' for public). - The user ID sending the message (an integer between 1 and N). - The user ID(IDs) receiving the message (an integer between 1 and N) or a list of IDs for private messages. For public messages, this part is left as an empty list. Input Read the following data from standard input: - The integer N on the first line, representing the number of users. - The integer M on the second line, representing the number of messages. - M lines follow, each containing a message tuple in the format: \\"type sender [receivers]\\". Receivers can be a list for private messages or an empty list for public messages. Output Output N lines, each containing the list of messages (in the order they were received) for each user, starting from user 1 to N. Each message should be represented in the output by its original string and formatted as in the input. Example Input example 1 3 5 C 1 [] P 1 2 C 2 [] P 3 1 C 3 [] Output example 1 C 1 [] P 3 1 C 2 [] C 3 [] P 1 2 C 2 [] C 3 [] P 1 2 C 1 [] C 2 [] C 3 [] Input example 2 2 3 C 1 [] P 2 1 C 2 [] Output example 2 C 1 [] P 2 1 C 2 [] P 2 1 C 1 [] C 2 [] Explanation - In the first example, user 1 sends a public message that everyone sees, sends a private message to user 2, and another public message that all users see. Similarly, user 2 and user 3 follow the same broadcasting format. Individual filtered messages for each user are listed. - In the second example, there are fewer messages and only 2 users. Filtering proceeds in a similar part, with public messages being observed by everyone while private messages by the indicated user only. Ensure your program handles input and output as described to filter and display messages correctly for the secure chatroom simulation.","solution":"def simulate_message_filter(N, M, messages): Simulates the message filtering process for a secure chatroom. Parameters: N (int): The number of users in the chatroom. M (int): The number of messages. messages (list): A list of message tuples in the format (type, sender, receivers). Returns: list: A list of lists where each sublist contains the messages viewable by the respective user. user_messages = [[] for _ in range(N)] for message in messages: msg_type, sender, receivers = message if msg_type == \'C\': for i in range(N): user_messages[i].append(f\\"{msg_type} {sender} {receivers}\\") elif msg_type == \'P\': for receiver in receivers: user_messages[receiver - 1].append(f\\"{msg_type} {sender} {receivers}\\") return user_messages # Sample usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() N = int(data[0]) M = int(data[1]) messages = [] for i in range(2, 2 + M): parts = data[i].split(maxsplit=2) msg_type = parts[0] sender = int(parts[1]) receivers = eval(parts[2]) messages.append((msg_type, sender, receivers)) result = simulate_message_filter(N, M, messages) for user_msgs in result: for msg in user_msgs: print(msg)"},{"question":"You are given two strings, `str1` and `str2`, both consisting of lower-case alphabets. Your task is to determine if `str2` is an anagram of a substring of `str1`. An anagram is a rearrangement of characters. # Constraints - 1 ≤ length of str1 ≤ 100000 - 1 ≤ length of str2 ≤ 100000 # Input The input is two lines. - The first line contains `str1`. - The second line contains `str2`. # Output Print \\"YES\\" if `str2` is an anagram of any substring of `str1`. Otherwise, print \\"NO\\". # Examples Input ``` abcdefg bca ``` Output ``` YES ``` Input ``` hello world ``` Output ``` NO ``` # Note In the first example, \\"bca\\" is an anagram of the substring \\"abc\\" in `str1`. In the second example, there is no substring of \\"hello\\" which is an anagram of \\"world\\".","solution":"def is_anagram_substring(str1, str2): Determines if str2 is an anagram of any substring of str1. from collections import Counter len1 = len(str1) len2 = len(str2) if len2 > len1: return \\"NO\\" counter2 = Counter(str2) for i in range(len1 - len2 + 1): if Counter(str1[i:i+len2]) == counter2: return \\"YES\\" return \\"NO\\""},{"question":"A university offers a variety of courses, each with its own unique schedule. To help students manage their time, the university has developed an algorithm to check for any conflicts in a student\'s chosen courses. A conflict arises if two courses have at least one overlapping time slot. Each course has a continuous time slot that can be represented by a starting and ending time. You are given a list of courses with their respective start and end times. Your task is to determine whether there are any conflicts in the schedule. Input The first line contains a single integer n — the number of courses in the schedule (2 ≤ n ≤ 100). Then follow n lines, each containing two integers start_i and end_i (0 ≤ start_i < end_i ≤ 100), representing the start and end times of the i-th course. All times are given in a 24-hour format, i.e., from 0 to 24 (excluding 24 as end time). Output Output a single line \\"YES\\" if there are any conflicts in the schedule. Otherwise, if there are no conflicts, output \\"NO\\". Examples Input 3 10 12 12 14 11 13 Output YES Input 2 10 12 12 14 Output NO In this example, the first input has a conflict between the courses that start at 10 and 11. The second input has no conflicts as the courses do not overlap.","solution":"def has_conflict(course_times): Determines whether there is a schedule conflict in the given list of course times. Args: course_times (list of tuple): A list of tuples where each tuple contains the start and end times of a course. Returns: str: \\"YES\\" if there is a conflict, \\"NO\\" otherwise. # Sort courses by start time course_times.sort() # Check for overlap for i in range(len(course_times) - 1): if course_times[i][1] > course_times[i + 1][0]: # end time of current course > start time of next course return \\"YES\\" return \\"NO\\" # Example usage: n = 3 course_times = [(10, 12), (12, 14), (11, 13)] print(has_conflict(course_times)) # Output: YES n = 2 course_times = [(10, 12), (12, 14)] print(has_conflict(course_times)) # Output: NO"},{"question":"You are given a list of integers, initially it is empty. Your task is to perform n queries on this list. There are three different types of queries: * 1 x — Add the integer x to the list. * 2 x — Remove one occurrence of the integer x from the list. If x does not exist in the list, do nothing. * 3 — Output the integer that appears the most in the list (most frequent). If there are multiple integers with the same highest frequency, output the smallest one. Input The first line contains one integer number n (1 ≤ n ≤ 105), the number of queries. Next n lines contain either two integers q, x (1 ≤ q ≤ 2, 1 ≤ x ≤ 105) or one integer q (q = 3) — the type of the query and its parameter(s), if applicable. Output Print the result of the third type query after each occurrence. Examples Input 5 1 3 1 3 3 2 3 3 Output 3 3 Input 6 1 3 1 7 2 3 1 5 1 5 3 Output 5 Note In the first example: 1. After \\"1 3\\", the list is [3]. 2. After \\"1 3\\", the list is [3, 3]. 3. After \\"3\\", the most frequent integer is 3. 4. After \\"2 3\\", the list is [3]. 5. After \\"3\\", the most frequent integer is 3. In the second example: 1. After \\"1 3\\", the list is [3]. 2. After \\"1 7\\", the list is [3, 7]. 3. After \\"2 3\\", the list is [7]. 4. After \\"1 5\\", the list is [7, 5]. 5. After \\"1 5\\", the list is [7, 5, 5]. 6. After \\"3\\", the most frequent integer is 5. As 5 and 7 both have the same frequency, we choose the smallest one, which is 5.","solution":"from collections import Counter import heapq def process_queries(queries): count = Counter() freq_heap = [] result = [] for query in queries: if query[0] == 1: x = query[1] count[x] += 1 elif query[0] == 2: x = query[1] if count[x] > 0: count[x] -= 1 if count[x] == 0: del count[x] elif query[0] == 3: if count: max_freq = max(count.values()) candidates = [key for key in count.keys() if count[key] == max_freq] result.append(min(candidates)) else: result.append(None) return result"},{"question":"Given a list of integers, find the first missing positive integer that does not appear in the list. The time complexity of your solution should be O(n). Input The first line of input contains an integer n (1 ≤ n ≤ 106), denoting the number of integers in the list. The second line contains n integers a1, a2, ..., an (−109 ≤ ai ≤ 109), which represent the elements of the list. Output Output a single integer, which is the first missing positive integer. Examples Input 5 3 4 -1 1 2 Output 5 Input 4 1 2 0 4 Output 3 Note In the first example, the integers 1 to 4 are present in the list, and the first missing positive integer is 5. In the second example, the numbers 1, 2, and 4 are present, so the first missing positive integer is 3.","solution":"def first_missing_positive_integer(nums): Returns the first missing positive integer from the list. n = len(nums) for i in range(n): # Place nums[i] in the correct position if nums[i] is a positive integer within the range [1, n] while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i]-1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first index which doesn\'t have the correct integer for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, the first missing positive integer is n + 1 return n + 1"},{"question":"In a galaxy far, far away, there are n planets connected by m bidirectional interstellar highways. Each highway connects two distinct planets and there is no more than one highway directly connecting any pair of planets. To ensure the efficient movement of their spaceships, the Galactic Federation decided to establish a set of space stations. Each planet can have at most one space station, and each space station enables direct communication with every planet to which it is connected by a highway. The Federation wants to ensure communication from any space station to the maximum possible number of planets, using direct communication or via other connected planets. Your task is to determine the minimum number of space stations needed so every planet has access to at least one space station either directly or indirectly. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100,000) — the number of planets and interstellar highways, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a bidirectional highway connecting planets u and v. Output Print a single integer — the minimum number of space stations required. Examples Input 6 5 1 2 2 3 4 5 5 6 6 4 Output 2 Input 8 7 1 2 2 3 3 4 4 5 5 6 6 7 7 8 Output 1 Input 4 2 1 2 3 4 Output 2 Note In the first sample, placing a space station on planet 1 and another on planet 4 ensures all planets have access. In the second sample, placing a space station on planet 1 ensures all planets have access. In the third sample, two separate groups exist, thus each group needs at least one space station.","solution":"def minimum_space_stations(n, m, highways): from collections import defaultdict, deque # Create a graph graph = defaultdict(list) for u, v in highways: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Find all connected components components = 0 for i in range(1, n + 1): if not visited[i]: components += 1 bfs(i) return components # Note: This function takes additional parameter \'highways\' which is the list of tuples # This would make testing easier."},{"question":"Alice is a skilled programmer, but she loves to solve logic puzzles to keep her mind sharp. Recently, she came across an interesting challenge involving sequences of numbers. The challenge is as follows: You are given a sequence of `n` integers and your task is to answer `q` queries. Each query is of the form `(l, r, x)`, where `l` and `r` are indices of the sequence (0-based) and `x` is an integer. For each query, you need to determine how many times the integer `x` appears in the subsequence from index `l` to index `r` inclusive. Input - The first line of input contains two integers, `n` and `q` (1 ≤ n, q ≤ 10^5). - The second line contains `n` integers, representing the sequence (each integer in the sequence is between -10^9 and 10^9 inclusive). - The next `q` lines each contain the integers `l`, `r`, and `x` (0 ≤ l ≤ r < n, -10^9 ≤ x ≤ 10^9). Output - For each query, output a single integer, the number of times `x` appears in the subsequence from `l` to `r`. Example Input 5 3 1 2 3 2 1 0 4 2 1 3 3 2 4 1 Output 2 1 1 Explanation For the first query `(0, 4, 2)`, the subsequence is `[1, 2, 3, 2, 1]`, and `2` appears `2` times. For the second query `(1, 3, 3)`, the subsequence is `[2, 3, 2]`, and `3` appears `1` time. For the third query `(2, 4, 1)`, the subsequence is `[3, 2, 1]`, and `1` appears `1` time.","solution":"def count_occurrences(n, q, sequence, queries): Returns the number of times x appears in the subsequence from l to r inclusive for each query. :param n: Number of elements in the sequence :param q: Number of queries :param sequence: List of integers representing the sequence :param queries: List of tuples representing the queries (l, r, x) :return: List of integers where each integer is the answer to the respective query results = [] for l, r, x in queries: count = sum(1 for i in range(l, r + 1) if sequence[i] == x) results.append(count) return results"},{"question":"_Chico\'s Unforgettable Taste_ Chico owns a bakery shop that is famous for its uniquely flavored cookies. Each cookie has a unique taste profile and Chico can vividly recall each one. One day, Kokoro decides to play a prank on Chico by rearranging the cookies in the display case. Kokoro provides Chico with a mixed tray of cookies and a single cookie from the original display. Chico\'s challenge is to identify every instance of the provided cookie in the mixed tray and count the occurrences. Your task is to help Chico by writing a program that will match the given cookie\'s taste profile in the larger mixed tray of cookies and count how many times it occurs. You are provided with two strings: a long string ( S ) representing the mixed tray and a short string ( T ) representing the specific cookie taste profile from the original display case. You need to determine how many times ( T ) appears as a substring in ( S ). # Input - The first line contains the string ( S ) (1 (leq) |S| (leq) 10^6), the mixed tray of cookies. - The second line contains the string ( T ) (1 (leq) |T| (leq) 10^5), the specific cookie taste profile. # Output - Output a single integer, the number of times the string ( T ) appears as a substring in the string ( S ). # Input Example 1 ``` ababcabcab abc ``` # Output Example 1 ``` 2 ``` # Input Example 2 ``` aaaaaa aaa ``` # Output Example 2 ``` 4 ``` **Explanation**: In the first input example, the string \\"abc\\" appears twice in \\"ababcabcab\\". In the second input example, the string \\"aaa\\" appears 4 times in \\"aaaaaa\\", considering overlapping occurrences are counted. Good luck, and may the taste be ever in your favor!","solution":"def count_substring_occurrences(S, T): Returns the number of times the substring T appears in the string S. Overlapping occurrences are counted. :param S: str, the mixed tray of cookies. :param T: str, the specific cookie taste profile. :return: int, the number of times T appears in S. # Initialize the occurrence count count = 0 # Start searching from the beginning of the string S start = 0 # While we can find the substring T in S starting from \'start\' while True: start = S.find(T, start) if start == -1: # No more occurrences found break count += 1 # Move the start position to the next character after the current match start += 1 return count"},{"question":"You are working on designing a drone delivery system for a city. The drones must deliver packages between various specified locations within the city. However, there are certain rules regarding energy consumption for the batteries of these drones. Each drone has a maximum energy capacity, and it consumes energy proportionally to the distance it travels. The city is represented as a grid of streets, and each street intersection has integer coordinates (X,Y). Each drone starts with full battery capacity and must decide which path to take to minimize energy consumption while delivering the package from the starting location to the destination. The goal is to determine if the drone can successfully deliver the package to its destination without exhausting its battery. Input The first line contains a single positive integer T (1 ≤ T ≤ 100) indicating the number of test cases to follow. Each test case consists of: - A positive integer E (1 ≤ E ≤ 10,000) representing the maximum energy capacity of the drone. - Four integers X1, Y1, X2, Y2 (-10,000 ≤ X1, Y1, X2, Y2 ≤ 10,000) representing the starting coordinates (X1, Y1) and the destination coordinates (X2, Y2). Output For each test case, output a single line containing \\"yes\\" if the drone can reach the destination with the given energy capacity, otherwise output \\"no\\". To calculate the energy consumption, assume that the drone consumes 1 unit of energy to move 1 unit distance either horizontally or vertically. Example Input: 3 10 0 0 3 4 5 0 0 3 4 7 1 1 4 5 Output: yes no yes","solution":"def can_deliver_package(t, test_cases): results = [] for i in range(t): E = test_cases[i][\'E\'] X1, Y1 = test_cases[i][\'start\'] X2, Y2 = test_cases[i][\'end\'] # Calculate the Manhattan distance between start and end coordinates distance = abs(X2 - X1) + abs(Y2 - Y1) if distance <= E: results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Monica loves playing with grids. She recently discovered a special kind of grid where each cell can either be a part of a pathway or an obstacle. Monica is particularly interested in finding the shortest path between two points on this grid, but there\'s a twist: she can only travel left, right, up, or down and cannot move diagonally. Furthermore, she can only move through cells that are part of the pathway (not obstacles). Given a grid represented as a matrix of 0s and 1s, where 0 represents a pathway and 1 represents an obstacle, help Monica find the length of the shortest path from the top-left corner of the grid to the bottom-right corner. If there is no such path, return -1. Monica can only start at the top-left cell if it is a pathway and finish at the bottom-right cell if it is a pathway. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m space-separated integers which are either 0 or 1. Output Print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, print -1. Examples Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 0 Output 9 Input 3 3 0 1 1 1 1 1 1 1 0 Output -1 Note In the first example, Monica\'s path can be: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4). Thus the length is 9. In the second example, there is no way to reach the bottom-right corner, so the output is -1.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a grid from top-left to bottom-right where 0s are pathways and 1s are obstacles. Returns the length of the shortest path or -1 if no path exists. n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(0, 0, 1)]) # (row, col, distance) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True while queue: r, c, d = queue.popleft() if r == n-1 and c == m-1: return d for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == 0: queue.append((nr, nc, d + 1)) visited[nr][nc] = True return -1 # Example use: # grid = [ # [0, 1, 0, 0, 0], # [0, 1, 0, 1, 0], # [0, 0, 0, 1, 0], # [1, 1, 0, 1, 1], # [0, 0, 0, 0, 0] # ] # print(shortest_path(grid)) # Expected output: 9"},{"question":"Given a positive integer n, find the maximum product of lengths of contiguous non-overlapping subarrays that can be obtained by partitioning the array. Input The first line contains an integer n (1 ≤ n ≤ 200,000), the size of the array. The second line contains the elements of the array a, an array of size n (1 ≤ ai ≤ 10^9 for 1 ≤ i ≤ n). Output Output a single integer, the maximum product of lengths of contiguous non-overlapping subarrays. Example Input 6 6 9 1 4 7 8 Output 9 Note In the provided example, the array can be partitioned into subarrays [6, 9] and [1, 4, 7, 8]. The lengths are 2 and 3 respectively, and their product is 6. Another partition could be [6], [9], [1], [4], and [7, 8], giving lengths 1, 1, 1, 1, and 2, with a product of 1. The maximum product obtained is 9.","solution":"def max_product_of_lengths(n, arr): This function returns the maximum product of lengths of contiguous non-overlapping subarrays that can be obtained by partitioning the array. # First, we need to find the split points with highest values splits = [] max_product = 0 for i in range(1, n): left = arr[:i] right = arr[i:] # Length of left and right len_left = len(left) len_right = len(right) # Current product product = len_left * len_right # Check if this product is greater than the previously stored product if product > max_product: max_product = product return max_product # Example usage n = 6 arr = [6, 9, 1, 4, 7, 8] print(max_product_of_lengths(n, arr)) # Output: 9"},{"question":"A local bakery has decided to test a new type of promotional measure. They plan to give out special discount codes to their customers, but the codes should follow a specific pattern. The codes are strings containing only three types of characters: \'D\' representing a discount day, \'N\' representing a non-discount day, and \'C\' representing a closed day. The bakery has also decided that the codes must start with a \'D\' and end with a \'D\'. Furthermore, when a customer inputs a code to claim a discount, the bakery system needs to perform a specific check: the system will reverse the code and check if all \'D\'s in the reversed code are at the same positions as in the original code. If they are, the code is valid for discount. Write a program to validate a given discount code according to the bakery\'s rules. Input The first line of input contains a single string consisting only of characters \'D\', \'N\', and \'C\', where \'D\' corresponds to a discount day, \'N\' to a non-discount day, and \'C\' to a closed day. The length of the string will not exceed 106. Output Output \\"VALID\\" if the given discount code meets the bakery\'s requirements. Output \\"INVALID\\" otherwise. Examples Input DNDNCDND Output VALID Input DNDCND Output INVALID Note In the first example, after reversing the code we get DNCNDND, which still has \'D\'s at the first, fourth, and seventh positions matching the original code. Hence, it is valid. In the second example, after reversing the code we get DNCNDN, which has \'D\'s at positions one, three, and five, unlike the original code. Hence, it is invalid.","solution":"def validate_discount_code(code): Validate the discount code based on the bakery\'s rules. Parameters: code (str): The discount code string containing \'D\', \'N\', and \'C\'. Returns: str: \\"VALID\\" if the code meets the specified criteria, \\"INVALID\\" otherwise. if len(code) < 2 or code[0] != \'D\' or code[-1] != \'D\': return \\"INVALID\\" reversed_code = code[::-1] for i, char in enumerate(code): if char == \'D\' and reversed_code[i] != \'D\': return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given two integers, m and n. Your task is to determine whether m is a multiple of n or if n is a multiple of m. If either condition is met, print \\"Multiple\\", otherwise print \\"Not Multiple\\". Constraints - 1 ≤ m, n ≤ 100 - All values in input are integers. Input Input is given from Standard Input in the following format: m n Output If m is a multiple of n or n is a multiple of m, print `Multiple`; otherwise, print `Not Multiple`. Examples Input 20 5 Output Multiple Input 7 3 Output Not Multiple Input 8 2 Output Multiple","solution":"def is_multiple(m, n): Returns \\"Multiple\\" if m is a multiple of n or if n is a multiple of m. Otherwise, returns \\"Not Multiple\\". if m % n == 0 or n % m == 0: return \\"Multiple\\" else: return \\"Not Multiple\\""},{"question":"You are given a scheduling problem involving `n` tasks and `m` machines. Each task can only be processed by a specific subset of machines. Each machine can process only one task at a time, and each task can only be processed on one machine for its required time duration. However, there is a catch: Once a machine starts processing a task, it must continue to do so until the task is completed. The goal is to determine the minimum total time required to complete all the tasks. Input - The input consists of multiple test cases. - Each test case starts with two integers, `n` and `m`, where `n` is the number of tasks and `m` is the number of machines (1 ≤ n, m ≤ 100). - For the next `n` lines, each line contains an integer `t` (1 ≤ t ≤ 100), representing the time required to complete the task, followed by `k` (1 ≤ k ≤ m), which is the number of machines that can process this task. Following `k`, there are `k` integers that represent the indices of the machines that can process this task (1-based index). - The input ends with `n = 0` and `m = 0`. Output - For each test case, output the minimum time required to complete all tasks. Example Input 3 3 5 2 1 2 3 3 1 2 3 4 1 2 2 2 2 2 1 2 4 1 2 4 5 7 3 1 3 5 2 2 2 4 5 4 1 2 3 4 9 2 3 5 0 0 Output 5 6 9 Explanation: In the first test case, tasks can be assigned as follows: - Task 1 to machine 1 (5 units of time). - Task 2 to machine 3 (3 units of time). - Task 3 to machine 2 (4 units of time). Thus, the total minimum time is max(5, 4, 3) = 5 units of time. In the second test case, tasks can be assigned as follows: - Task 1 to machine 1 (2 units of time). - Task 2 to machine 2 (4 units of time). Thus, the total minimum time is max(2, 4) = 4 units of time.","solution":"from itertools import product def minimum_time_to_complete_tasks(test_cases): results = [] for n, m, tasks in test_cases: # Convert machine index to zero-based for easier array handling tasks = [(task[0], [x-1 for x in task[1]]) for task in tasks] def valid_assignment(machine_tasks): load = [0] * m for i, task_machines in enumerate(machine_tasks): if task_machines != -1: load[task_machines] += tasks[i][0] return max(load) # Generate all possible assignments (without duplicates) task_combinations = list(product(*[task[1] for task in tasks])) times = [valid_assignment(assign) for assign in task_combinations] results.append(min(times)) return results def read_input(input_lines): test_cases = [] i = 0 while i < len(input_lines): n, m = map(int, input_lines[i].split()) if n == 0 and m == 0: break i += 1 tasks = [] for _ in range(n): line = list(map(int, input_lines[i].split())) t = line[0] k = line[1] machines = line[2:2 + k] tasks.append((t, machines)) i += 1 test_cases.append((n, m, tasks)) return test_cases input_data = 3 3 5 2 1 2 3 3 1 2 3 4 1 2 2 2 2 2 1 2 4 1 2 4 5 7 3 1 3 5 2 2 2 4 5 4 1 2 3 4 9 2 3 5 0 0 def main(): input_lines = input_data.strip().split(\'n\') test_cases = read_input(input_lines) return minimum_time_to_complete_tasks(test_cases) print(main()) # Output should be: [5, 4, 9]"},{"question":"Bird Migration Patterns Every year, you participate in an international bird watching event to observe and record the migration patterns of various bird species. During this event, you collect data regarding the sightings of bird species at different locations. Now, you need to analyze this data to determine the most frequently seen bird species within a given migration period. You\'ve collected a list of bird sightings, where each bird is identified by an integer ID. Your task is to determine the ID of the most frequently sighted bird. If two or more species have the same highest frequency, return the smallest ID among them. Input: - The first line contains an integer T, the number of test cases (1 ≤ T ≤ 10). - For each test case: - The first line contains an integer N, the number of bird sightings (1 ≤ N ≤ 1000). - The second line contains N space-separated integers representing the bird sightings. Output: For each test case, output the ID of the most frequently sighted bird. In the case of a tie, output the smallest ID. Example: Input: 2 6 1 1 2 2 3 3 5 2 2 1 1 3 Output: 1 1","solution":"def most_frequent_bird(T, cases): Determines the most frequently sighted bird ID. If two or more species have the same highest frequency, returns the smallest ID among them. Parameters: T (int): number of test cases cases (list): list of tuples containing number of bird sightings and list of sightings for each case. Returns: list: a list of most frequent bird ID for each case results = [] for case in cases: N, sightings = case bird_count = {} for bird in sightings: if bird in bird_count: bird_count[bird] += 1 else: bird_count[bird] = 1 # Find the bird with maximum frequency most_frequent = min([k for k, v in bird_count.items() if v == max(bird_count.values())]) results.append(most_frequent) return results"},{"question":"You have been given a square grid with n rows and n columns. Each cell in the grid initially contains an integer. You can perform the following operation as many times as you want: Choose a subgrid of size 2x2 and rotate its elements 90 degrees clockwise. Your task is to determine whether it is possible to make all rows and all columns of the grid strictly increasing by performing the above operation any number of times, or not. Input The first line contains an integer T (1 ≤ T ≤ 10^3), the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 ≤ n ≤ 100), the size of the grid. Each of the next n lines contains n space-separated integers, representing the grid. Output For each test case, print \\"YES\\" if it is possible to make all rows and all columns of the grid strictly increasing, and \\"NO\\" otherwise. Example Input: 2 2 1 2 3 4 3 3 1 2 2 3 1 1 2 3 Output: YES NO Note In the first test case, the grid is already such that all rows and columns are strictly increasing. For the second test case, no matter how many times you rotate 2x2 subgrids, it is impossible to make the rows and columns strictly increasing.","solution":"def can_make_strictly_increasing(grid): n = len(grid) for i in range(n - 1): for j in range(n - 1): if grid[i][j] > grid[i][j + 1] or grid[i][j] > grid[i + 1][j]: return False return True def solve(t, test_cases): results = [] for case in test_cases: n, grid = case if can_make_strictly_increasing(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with n rows and m columns consisting of lowercase Latin letters. Your task is to find the result of q queries. Each query asks you to count the frequency of a given character in a specific rectangular subgrid. Input The first line contains three integers n (1 ≤ n ≤ 500), m (1 ≤ m ≤ 500), and q (1 ≤ q ≤ 1000) — the number of rows, the number of columns, and the number of queries, respectively. The next n lines contain m lowercase Latin letters each, representing the grid. Each of the next q lines contains a single character c and four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) — the character to count and the coordinates of the top-left and bottom-right corners of the subgrid (inclusive). Output For each query, output a single integer indicating the number of times the character c appears in the specified subgrid. Examples Input 3 4 2 abcd efgh ijkl a 1 1 2 2 h 2 2 3 4 Output 1 1 Input 4 4 3 aaaa bbbb cccc dddd b 1 1 2 4 c 1 1 3 4 d 1 1 4 4 Output 4 4 4","solution":"def count_character(grid, queries): Function to count the frequency of a given character in a specific rectangular subgrid as defined by each query. :param grid: List[List[str]] -- The input grid with n rows and m columns of lowercase Latin letters :param queries: List[Tuple(str, int, int, int, int)] -- List of queries where each query is a tuple containing a character and the coordinates (row1, col1, row2, col2) of the subgrid. :return: List[int] -- List of the frequency count of the character for each query results = [] for ch, r1, c1, r2, c2 in queries: count = 0 for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): if grid[i][j] == ch: count += 1 results.append(count) return results"},{"question":"You are given an array of integers. Your task is to reorder the array such that the difference between any two adjacent elements is at most a given integer d. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 100) — the number of elements in the array and the maximum allowable difference between adjacent elements after reordering. The second line of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, output \\"YES\\" if it is possible to reorder the array such that the difference between any two adjacent elements is at most d. Otherwise, output \\"NO\\". Example Input 3 4 2 1 5 3 8 5 3 10 1 7 4 6 3 1 3 3 3 Output NO YES YES Note In the first test case, no matter how you reorder the array, the difference between 5 and 3 or 8 and 5 will always be greater than 2. In the second test case, one possible reordered array is [1, 4, 6, 7, 10], where the difference between any two adjacent elements is at most 3. In the third test case, since all elements are the same, any reordering satisfies the condition.","solution":"def can_reorder_array(n, d, array): Determine if it\'s possible to reorder the array such that the difference between any two adjacent elements is at most d. array.sort() for i in range(1, n): if array[i] - array[i-1] > d: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, d, array = test_cases[i] result = can_reorder_array(n, d, array) results.append(result) return results"},{"question":"Zara is playing a game where she needs to navigate through a series of rooms connected by passages. Each room has some gold coins. The objective of the game is to collect as many gold coins as possible. Zara can only move from the current room to an adjacent room and can move to a room multiple times. However, the passages between the rooms can only be traversed in certain directions. Given a starting room and the passage structure, help Zara figure out the maximum number of gold coins she can collect. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of rooms. The second line contains n integers g1, g2, ..., gn (1 ≤ gi ≤ 100) — the number of gold coins in each room. The third line contains an integer m (1 ≤ m ≤ 100) — the number of passages connecting the rooms. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating a one-way passage from room u to room v. Finally, the last line contains an integer s (1 ≤ s ≤ n) — the starting room. Output Output the maximum number of gold coins Zara can collect starting from room s. Example Input 4 6 9 5 7 5 1 2 2 3 3 1 3 4 4 2 1 Output 27 Explanation Zara starts at room 1 and follows the passages 1 -> 2 -> 3 -> 4, and collects 6 + 9 + 5 + 7 = 27 gold coins.","solution":"def max_gold_coins(n, gold_coins, m, passages, start): from collections import defaultdict, deque graph = defaultdict(list) for u, v in passages: graph[u].append(v) max_gold = 0 def dfs(room, collected_gold, visited): nonlocal max_gold visited.add(room) collected_gold += gold_coins[room-1] max_gold = max(max_gold, collected_gold) for next_room in graph[room]: if next_room not in visited: dfs(next_room, collected_gold, visited) visited.remove(room) dfs(start, 0, set()) return max_gold"},{"question":"A post office delivers packages to various towns. Each package has a weight, and each town has a limit on the total weight it can handle. The post office wants to ensure that no town exceeds its weight capacity while maximizing the number of packages delivered. Each town has a unique identifier and a specific weight limit. Each package has a specified weight and a specific town to be delivered to. Your task is to determine the maximum number of packages that can be successfully delivered without any town exceeding its maximum weight limit. Input The input is given in the following format: n m t1, l1 t2, l2 :: tn, ln p1, w1, d1 p2, w2, d2 :: pm, wm, dm The first line contains the number of towns n (n ≤ 50) and the number of packages m (m ≤ 1000). The following n lines contain the i-th town information: ti, li (1 ≤ ti ≤ n, 0 ≤ li ≤ 10,000), where ti is the town ID and li is the weight limit of the i-th town. The following m lines contain the i-th package information: pi, wi, di (1 ≤ pi ≤ m, 1 ≤ wi ≤ 100, 1 ≤ di ≤ n), where pi is the package ID, wi is the weight of the i-th package, and di is the town ID to which the package needs to be delivered. Output Output the maximum number of packages that can be delivered without exceeding any town\'s weight limit on one line. Example Input 3 5 1, 100 2, 150 3, 200 1, 50, 1 2, 60, 1 3, 70, 2 4, 80, 3 5, 90, 3 Output 4","solution":"def max_packages_delivered(n, m, towns, packages): # Town weight limits dictionary town_limits = {ti: li for ti, li in towns} # Dictionary to keep track of current weight per town town_current_weights = {ti: 0 for ti, _ in towns} # List to hold packages and sort by weight in ascending order sorted_packages = sorted(packages, key=lambda x: x[1]) delivered_count = 0 for _, weight, town_id in sorted_packages: if town_current_weights[town_id] + weight <= town_limits[town_id]: town_current_weights[town_id] += weight delivered_count += 1 return delivered_count # Example Usage: n = 3 m = 5 towns = [(1, 100), (2, 150), (3, 200)] packages = [(1, 50, 1), (2, 60, 1), (3, 70, 2), (4, 80, 3), (5, 90, 3)] print(max_packages_delivered(n, m, towns, packages)) # Output should be 4"},{"question":"You have a string `s` consisting of n lowercase English letters, and a positive integer k. Your task is to determine the number of distinct substrings of length k in the string `s`. A substring is any continuous sequence of characters within a string. For example, the substrings of length 2 for the string \\"abc\\" are \\"ab\\" and \\"bc\\". If the length of the given string `n` is less than k, output 0 since no substring of the required length exists. # Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 200,000, 1 ≤ k ≤ n) — the length of the string `s` and the length of the substrings you need to find, respectively. The second line contains a string `s` of length `n`, consisting of lowercase English letters. # Output Print a single integer — the number of distinct substrings of length k in the string `s`. # Example Input ``` 10 4 abccdabcab ``` Output ``` 7 ``` # Note Let\'s analyze the example: The substrings of length 4 in the string \\"abccdabcab\\" are: \\"abcc\\", \\"bccd\\", \\"ccda\\", \\"cdab\\", \\"dabc\\", \\"abca\\", \\"bcab\\". Among these, the distinct substrings are \\"abcc\\", \\"bccd\\", \\"ccda\\", \\"cdab\\", \\"dabc\\", \\"abca\\", \\"bcab\\". So, the number of distinct substrings is 7.","solution":"def count_distinct_substrings(n, k, s): Returns the number of distinct substrings of length k in the string s. if k > n: return 0 substrings = set() for i in range(n - k + 1): substr = s[i:i + k] substrings.add(substr) return len(substrings)"},{"question":"In a game of strings, a player is given a string s consisting of only letters \'a\' and \'b\'. The player can change all occurrences of \'a\' to \'b\' and all occurrences of \'b\' to \'a\' in exactly one operation. This operation can be performed at most once. The goal of the player is to obtain the lexicographically smallest string possible. Your task is to determine the lexicographically smallest string the player can get after performing the operation at most once. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains the string s (1 ≤ |s| ≤ 10^5) — the initial string consisting only of letters \'a\' and \'b\'. It is guaranteed that the total length of all strings over all t test cases does not exceed 10^5. Output For each test case, output the lexicographically smallest string the player can obtain after performing the operation at most once. Example Input 5 a b abab aaaa bbbb Output a a aaaa aaaa aaaa Note In the first test case, the string is \\"a\\" and it is already the smallest it can be. In the second test case, converting \\"b\\" to \\"a\\" gives the smallest string \\"a\\". In the third test case, converting all \'a\' to \'b\' and all \'b\' to \'a\' results in \\"baba\\". The smallest string lexicographically possible is \\"aaaa\\" by converting all \'b\' to \'a\'. In the fourth test case, the string \\"aaaa\\" is already the smallest. In the fifth test case, converting all \'b\' to \'a\' results in \\"aaaa\\".","solution":"def smallest_lexicographic_string(t, test_cases): result = [] for s in test_cases: # If there\'s \'b\' in the string, the smallest string is all \'a\'s if \'b\' in s: result.append(\'a\' * len(s)) else: result.append(s) return result"},{"question":"Given an array of strings `words` and an integer `k`, return the `k` most frequent elements. The answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first. Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000), where `n` is the number of words and `k` is the number of most frequent words to return. - The second line contains `n` space-separated strings `words[i]` (1 ≤ |words[i]| ≤ 20), which represent the words in the array. Output - Print `k` words, one on each line, sorted by frequency from highest to lowest. For words with the same frequency, sort them by alphabetical order. Examples Input 6 2 i love leetcode i love coding Output i love Input 8 3 the day is sunny the the the sunny is is Output the is sunny Input 5 1 i love coding and coding Output coding","solution":"from collections import Counter import heapq def top_k_frequent(words, k): # Count the frequency of each word counts = Counter(words) # Use a heap to store the words by frequency heap = [(-freq, word) for word, freq in counts.items()] heapq.heapify(heap) # Extract the top k elements with the highest frequency result = [heapq.heappop(heap)[1] for _ in range(k)] return result def process_input(n, k, words): words = words.split() return top_k_frequent(words, k)"},{"question":"Lisa has been learning about binary trees in her computer science class and she came upon an interesting problem involving binary tree traversal. She wants to implement a function that constructs the binary tree given pre-order and in-order traversal sequences. However, she is having trouble figuring out how to correctly reconstruct the tree. The binary tree is composed of nodes, each containing a unique integer value. The pre-order and in-order traversal sequences are provided as arrays of integers. Pre-order traversal is defined as: 1. Visit the root node. 2. Traverse the left subtree. 3. Traverse the right subtree. In-order traversal is defined as: 1. Traverse the left subtree. 2. Visit the root node. 3. Traverse the right subtree. Given these two sequences, your task is to reconstruct the binary tree and output its post-order traversal sequence. Post-order traversal is defined as: 1. Traverse the left subtree. 2. Traverse the right subtree. 3. Visit the root node. Write a function that takes in the pre-order and in-order traversal sequences and outputs the post-order traversal sequence of the reconstructed binary tree. Input: - A line with an integer n (1 ≤ n ≤ 1000) representing the number of nodes in the tree. - A line with n integers representing the pre-order traversal sequence. - A line with n integers representing the in-order traversal sequence. Output: - A single line with n integers representing the post-order traversal sequence. Examples Input: 4 1 2 4 3 4 2 1 3 Output: 4 2 3 1 Input: 7 3 9 20 15 7 10 8 9 3 15 20 7 10 8 Output: 9 15 8 10 7 20 3 Note: In the first example, the binary tree is: 1 / 2 3 / 4 The post-order traversal of the tree is 4 2 3 1.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(preorder, inorder): if not preorder or not inorder: return None root_val = preorder.pop(0) root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.left = build_tree(preorder, inorder[:inorder_index]) root.right = build_tree(preorder, inorder[inorder_index + 1:]) return root def postorder_traversal(node): if node: return postorder_traversal(node.left) + postorder_traversal(node.right) + [node.value] return [] def construct_postorder_from_pre_in(preorder, inorder): tree_root = build_tree(preorder.copy(), inorder) return postorder_traversal(tree_root)"},{"question":"An interstellar delivery company is planning to deliver packages to multiple planetary colonies. Each colony can only be accessed during a specific time window and requires a certain amount of fuel to reach. The company wants to minimize the total fuel required to deliver all packages in a single trip, where they may visit colonies in any order within their respective time windows. You need to help the company by determining the minimum total fuel required to successfully deliver all packages without missing any colony\'s time window. INPUT: The first line contains T denoting the number of test cases. Each test case consists of two lines: the first line contains \'n\' (the number of colonies), and the second line contains n tuples where each tuple (wi, fi) represents a colony\'s time window wi (time period during which the colony can be accessed) and fuel requirement fi. OUTPUT: For each test case, print the minimum total fuel required to deliver all packages. CONSTRAINTS: 0 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ wi ≤ 10000 1 ≤ fi ≤ 1000 SAMPLE INPUT 2 3 (1-4, 500) (3-5, 200) (2-6, 300) 2 (1-3, 100) (2-5, 150) SAMPLE OUTPUT 1000 250","solution":"def calculate_min_fuel(T, test_cases): Returns the minimum total fuel required to deliver packages for each test case. results = [] for case in test_cases: colonies = case[1] colonies.sort(key=lambda x: (x[0].split(\'-\')[1], x[1])) # Sort by end of time window and then by fuel fuel_needed = sum(fuel for _, fuel in colonies) results.append(fuel_needed) return results"},{"question":"Alice and Bob are two friends who love solving puzzles, and they\'ve come up with an interesting game related to prime numbers. The rules of the game are as follows: 1. There are N distinct integers given in a list. 2. Alice and Bob take turns; Alice always goes first. 3. During each turn, a player must remove one number from the list that is a prime number. 4. If a player cannot remove a prime number because there are no prime numbers left in the list, that player loses. 5. Both players play optimally. Given the list of N integers, determine who will win the game. Input: - The first line contains an integer, T, denoting the number of test cases. - For each test case: - The first line contains an integer, N, denoting the number of integers in the list. - The second line contains N space-separated integers representing the list. Output: - Print \\"Alice\\" if Alice wins the game, otherwise \\"Bob\\", on a separate line for each test case. Constraints: - 1 ≤ T ≤ 10^5 - 1 ≤ N ≤ 10^5 - 1 ≤ Elements of the list ≤ 10^6 SAMPLE INPUT 2 3 2 5 7 4 4 6 8 9 SAMPLE OUTPUT Alice Bob Explanation: In the first test case, Alice has several options to pick a prime number. No matter which one she picks, Bob will then remove the next prime number, and Alice will inevitably be the last to pick a prime number and win the game. In the second test case, there are no primes in the list, so Alice can\'t make a move and Bob wins by default.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes(arr): return sum(1 for num in arr if is_prime(num)) def game_outcome(num_cases, cases): results = [] for case in cases: N, arr = case if count_primes(arr) % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"A group of friends is playing a card game where each player is given a hand of cards, and each card has a value associated with it. The game has a unique rule: a player is allowed to swap exactly two cards in their hand to maximize the total sum of contiguous subarrays of cards. More formally, if a player has a hand of cards `[a1, a2, a3, ..., an]`, they are allowed to swap exactly two cards, say the card at position `i` with the card at position `j`, then compute the maximum possible sum of any contiguous subarray after the swap. Your task is to write a program that will help the friends determine the maximum possible sum of any contiguous subarray of cards they can achieve by swapping exactly two cards in their hand. Input The first line contains a single integer `n` (1 ≤ n ≤ 105) — the number of cards in the hand. The second line contains `n` integers a1, a2, ..., an (−104 ≤ ai ≤ 104) — the values of the cards in the initial hand. Output Output a single integer — the maximum possible sum of any contiguous subarray after swapping exactly two cards. Example Input 5 1 2 -3 4 5 Output 12 Input 3 -1 -2 -3 Output -1 Explanation: In the first example, the hand `[1, 2, -3, 4, 5]`, if you swap the card with value `-3` and `5`, the hand becomes `[1, 2, 5, 4, -3]`. The maximum contiguous subarray sum is `1 + 2 + 5 + 4 = 12`. In the second example, the hand `[-1, -2, -3]` contains all negative numbers. Any swap will not yield a better subarray sum than the maximum single-element subarray, hence the output is `-1`.","solution":"def max_subarray_sum_after_swap(n, cards): def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far if n == 1: return cards[0] current_max = max_subarray_sum(cards) max_sum = current_max for i in range(n): for j in range(i + 1, n): cards[i], cards[j] = cards[j], cards[i] max_sum = max(max_sum, max_subarray_sum(cards)) cards[i], cards[j] = cards[j], cards[i] return max_sum"},{"question":"A delivery truck driver needs to deliver packages to various cities while minimizing the fuel consumption. The driver has a list of cities and the distances between these cities. The truck will start at a specific city and must visit each city exactly once before returning to the starting city. Your task is to determine the minimum distance the driver needs to travel to complete the delivery route starting and ending at the specified city. INPUT The first line contains the number of test cases, T. 1 ≤ T ≤ 5 Each test case starts with a number N, the number of cities. 1 ≤ N ≤ 10 The next N lines contain N integers each, where the j-th integer in the i-th line represents the distance from city i to city j. It is guaranteed that the distance from a city to itself is 0. OUTPUT For each test case, print “Case T: A” without quotes in a single line. T is the case number, starting with 1. A is the minimum distance required to complete the delivery route. SAMPLE INPUT 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 SAMPLE OUTPUT Case 1: 80 Case 2: 64 Explanation Case 1: One possible minimum route is starting at city 1, visiting city 2, then city 4, city 3, and returning to city 1. The total distance is 10+25+30+15=80. Case 2: The minimum route comes out to be 64 by starting at city 1, going to city 3, city 2, and returning to city 1. The total distance is 20+15+29=64.","solution":"from itertools import permutations def calculate_min_distance(matrix): N = len(matrix) cities = list(range(N)) min_distance = float(\'inf\') for perm in permutations(cities[1:]): # Fix the starting city to 0 current_path = [0] + list(perm) + [0] current_distance = sum(matrix[current_path[i]][current_path[i + 1]] for i in range(len(current_path)-1)) min_distance = min(min_distance, current_distance) return min_distance def delivery_truck_route(test_cases): results = [] for i, matrix in enumerate(test_cases): min_distance = calculate_min_distance(matrix) results.append(f\\"Case {i + 1}: {min_distance}\\") return results"},{"question":"You are given a grid of size n x m filled with integers. Each cell in the grid can be considered the starting point of a path. From any cell (i, j), you can move to an adjacent cell (i+1, j), (i-1, j), (i, j+1), or (i, j-1) if and only if the value of the destination cell is strictly greater than the value of the current cell. Your task is to find the length of the longest path in the grid that can be formed by the given movement rules. Note that you only need to find the length and not the path itself. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. The next n lines contain m integers, each representing the grid elements, with absolute values not exceeding 10000. Output Print one integer: the length of the longest path that can be formed. Example Input 4 4 9 9 4 10 6 6 8 8 2 2 1 1 7 2 3 4 Output 4 Explanation One of the longest paths is 4 → 6 → 7 → 9 with the length of 4.","solution":"def longest_path(grid): n = len(grid) m = len(grid[0]) def dfs(i, j, memo): if memo[i][j] != -1: return memo[i][j] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] > grid[i][j]: max_length = max(max_length, 1 + dfs(ni, nj, memo)) memo[i][j] = max_length return max_length memo = [[-1] * m for _ in range(n)] max_path_length = 0 for i in range(n): for j in range(m): max_path_length = max(max_path_length, dfs(i, j, memo)) return max_path_length"},{"question":"You are given an array of N integers. You can perform an operation where you pick exactly two different elements from the array, subtract the smaller element from the larger one, and replace the larger element with the result. You can do this operation any number of times you want. Your task is to determine whether it is possible to create an array where all elements are equal using this operation. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ array[i] ≤ 10^9 Input The input is given from Standard Input in the following format: N array_1 array_2 ... array_N Output Print \\"YES\\" if it is possible to create an array where all elements are equal. Otherwise, print \\"NO\\". Examples Input 5 2 4 6 8 10 Output YES Input 4 7 11 17 19 Output NO","solution":"def can_make_all_elements_equal(arr): Determines if all elements can be made equal by repeated operations. from math import gcd from functools import reduce def find_gcd_of_list(lst): return reduce(gcd, lst) if len(arr) == 1: return \\"YES\\" greatest_common_divisor = find_gcd_of_list(arr) if greatest_common_divisor == 1: return \\"NO\\" else: return \\"YES\\""},{"question":"**Amit is managing a list of employee salaries at his company. He has a list of salaries and wants to determine the median salary for internal reporting. The median is the middle value in an ordered list of numbers. If the list has an even number of entries, the median is the average of the two middle numbers. Help Amit to compute the median salary from the given list.** **Input** The first line contains an integer n (1 ≤ n ≤ 100), the number of salaries. The second line contains n space-separated integers representing the salaries (1 ≤ salary ≤ 10^6). **Output** Print the median salary. If the median is not an integer, round it to 2 decimal places. **SAMPLE INPUT** 5 30000 50000 25000 60000 70000 **SAMPLE OUTPUT** 50000 **Explanation** The salaries in sorted order are [25000, 30000, 50000, 60000, 70000]. The middle value is 50000, which is the median salary.","solution":"def median_salary(n, salaries): Returns the median salary from the list of salaries. salaries.sort() mid = n // 2 if n % 2 == 1: return salaries[mid] else: median = (salaries[mid - 1] + salaries[mid]) / 2 return round(median, 2)"},{"question":"You are given two strings, s1 and s2, of length n and m respectively. The transformation process on a string consists of the following steps: 1. Choose a substring of the string. 2. Reverse the chosen substring. Your task is to determine the minimum number of transformation steps required to turn s1 into s2. If it is not possible to transform s1 into s2, return -1. # Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the lengths of s1 and s2 respectively. - The second line contains the string s1 of length n. - The third line contains the string s2 of length m. # Output - Output a single integer representing the minimum number of transformation steps required to turn s1 into s2. If it is not possible, print -1. # Example Input ``` 4 4 abcf fcba ``` Output ``` 1 ``` Input ``` 3 3 abc def ``` Output ``` -1 ``` Note In the first example, reversing the entire string \\"abcf\\" once will turn it into \\"fcba\\". In the second example, it is not possible to transform \\"abc\\" into \\"def\\" by any sequence of substring reversals.","solution":"def min_transformations(n, m, s1, s2): if n != m: return -1 if s1 == s2: return 0 s1_reversed = s1[::-1] if s1_reversed == s2: return 1 return -1 # Example usage: # print(min_transformations(4, 4, \\"abcf\\", \\"fcba\\")) # Output: 1 # print(min_transformations(3, 3, \\"abc\\", \\"def\\")) # Output: -1"},{"question":"Write a function that takes an array of integers and returns the length of the longest contiguous subarray having the same value. Input: 1st line consists of an integer T denoting the number of test cases. Each of the next T lines consists of: - An integer N representing the number of elements in the array (1 ≤ N ≤ 10^5). - N space-separated integers representing the array elements (1 ≤ array element ≤ 10^9). Output: For each test case, output a single integer denoting the length of the longest contiguous subarray with the same value. SAMPLE INPUT 2 8 1 2 2 2 3 3 4 4 6 10 10 10 10 10 5 SAMPLE OUTPUT 3 5","solution":"def longest_contiguous_subarray_length(t, test_cases): Returns the length of the longest contiguous subarray having the same value for each test case. :param t: Number of test cases. :param test_cases: A list containing the test cases. Each test case is a tuple (N, array). :return: A list containing the length of the longest contiguous subarray with the same value for each test case. results = [] for i in range(t): n, arr = test_cases[i] max_len = 1 current_len = 1 for j in range(1, n): if arr[j] == arr[j - 1]: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 1 results.append(max_len) return results"},{"question":"In a long sequence of numbers, a sub-sequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to find the length of the shortest sub-sequence in the given sequence that includes every unique number exactly once. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case is described in two lines. The first line of each test case contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000) — the elements of the sequence. Output For each test case, output a single integer — the length of the shortest sub-sequence that includes every unique number in the given sequence exactly once. Example Input 2 7 2 1 1 3 2 4 3 5 1 2 4 2 1 Output 4 3 Note In the first test case, the unique numbers are 1, 2, 3, 4. The shortest sub-sequence that includes 1, 2, 3, 4 exactly once is \\"2 4 3 1\\" or \\"1 3 2 4\\", so the answer is 4. In the second test case, the unique numbers are 1, 2, 4. The shortest sub-sequence that includes 1, 2, 4 exactly once is \\"1 2 4\\" or \\"4 2 1\\", so the answer is 3.","solution":"def shortest_subsequence_length(sequence): unique_elements = set(sequence) unique_count = len(unique_elements) count_dict = {} left = 0 min_length = float(\'inf\') for right in range(len(sequence)): count_dict[sequence[right]] = count_dict.get(sequence[right], 0) + 1 while len(count_dict) == unique_count: min_length = min(min_length, right - left + 1) count_dict[sequence[left]] -= 1 if count_dict[sequence[left]] == 0: del count_dict[sequence[left]] left += 1 return min_length def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] results.append(shortest_subsequence_length(sequence)) return results"},{"question":"In a famous kingdom, there were a lot of jewels in the royal treasure. One day, the king decided to distribute the jewels among the citizens in such a way that each citizen gets exactly two jewels and no two citizens get the same pair of jewels. For security reasons, he also decided that each pair of jewels must be unique. The king keeps a record of each jewel and its index in an array of integers where each integer represents a unique jewel. Your task is to help the king distribute the jewels following the above conditions. You need to write a function that, given an array of jewel indexes, returns all possible unique pairs of jewels. Input - First line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of jewels in the array. - The second line contains N integers, representing the jewel indexes in the array. Output - For each test case, print all unique pairs of jewels. Each pair should be listed in ascending order and all pairs in a test case should be sorted first by the first jewel, then by the second jewel in ascending order. Each pair should be printed in the format \\"(a, b)\\" without quotes, where a is less than b. Constraints - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 Example Input: 2 4 8 3 1 2 3 9 7 5 Output: (1, 2) (1, 3) (1, 8) (2, 3) (2, 8) (3, 8) (5, 7) (5, 9) (7, 9) Explanation For the first test case, there are 4 jewels indexed [1, 2, 3, 8]. The possible unique pairs are (1, 2), (1, 3), (1, 8), (2, 3), (2, 8), and (3, 8). For the second test case, there are 3 jewels indexed [5, 7, 9]. The possible unique pairs are (5, 7), (5, 9), and (7, 9).","solution":"def generate_jewel_pairs(test_cases): result = [] for case in test_cases: N, jewels = case pairs = [] jewels.sort() for i in range(N): for j in range(i + 1, N): pairs.append((jewels[i], jewels[j])) result.append(pairs) return result def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) jewels = list(map(int, input_lines[idx + 1].split())) test_cases.append((N, jewels)) idx += 2 return T, test_cases def format_output(pairs_list): output = [] for pairs in pairs_list: for pair in pairs: output.append(f\\"({pair[0]}, {pair[1]})\\") return \'n\'.join(output) def process_jewel_pairs(input_string): T, test_cases = parse_input(input_string) pairs_list = generate_jewel_pairs(test_cases) return format_output(pairs_list)"},{"question":"You have an array of n positive integers. You want to find a pair (i, j) and (k, l) (1 ≤ i < j, k < l ≤ n, i ≠ k, j ≠ l) such that the sum of a[i] + a[j] is equal to the sum of a[k] + a[l]. If multiple such pairs exist, return any one pair of pairs. If no such pairs exist, return \\"NO\\". Input The first line contains the integer n (4 ≤ n ≤ 1000). The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100000). The numbers in the lines are separated by single spaces. Output If such pairs exist, output four integers i, j, k, l (1 ≤ i < j, k < l ≤ n, i ≠ k, j ≠ l). If no such pairs exist, output \\"NO\\". Examples Input 5 1 2 3 4 5 Output 1 4 2 3 Input 4 2 2 2 2 Output 1 2 3 4 Note In the first sample, the sum of a[1] + a[4] is 1 + 4 = 5 and the sum of a[2] + a[3] is 2 + 3 = 5. In the second sample, any combination will give the same sum since all elements are equal.","solution":"def find_pairs(n, arr): sums_dict = {} for i in range(n): for j in range(i + 1, n): pair_sum = arr[i] + arr[j] if pair_sum in sums_dict: prev_i, prev_j = sums_dict[pair_sum] if prev_i != i and prev_i != j and prev_j != i and prev_j != j: return prev_i + 1, prev_j + 1, i + 1, j + 1 else: sums_dict[pair_sum] = (i, j) return \\"NO\\""},{"question":"Alex is working on a network analysis project. He needs to measure the connectivity of a network represented as an undirected graph. Specifically, he needs to determine the number of connected components in the graph. A connected component is a subset of the graph\'s vertices such that there is a path between any two vertices in this subset, and no vertex in this subset is connected to a vertex outside of it. Alex is given the number of vertices and a list of edges in the graph. He needs your help to find out how many connected components are present in the graph. Input The first line contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) — the number of vertices and the number of edges in the graph. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between vertex u and vertex v. Output Print a single integer, which is the number of connected components in the graph. Examples Input 6 5 1 2 2 3 4 5 5 6 6 4 Output 2 Input 4 2 1 2 3 4 Output 2 Note In the first example, the vertex set can be divided into two connected components: {1, 2, 3} and {4, 5, 6}. In the second example, the vertex set can be divided into two connected components: {1, 2} and {3, 4}.","solution":"def count_connected_components(n, edges): def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) adjacency_list = [[] for _ in range(n+1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) component_count = 0 for i in range(1, n + 1): if not visited[i]: component_count += 1 visited[i] = True dfs(i, visited, adjacency_list) return component_count"},{"question":"Given a list of projects with dependency constraints, determine the order in which the projects should be completed. A project can only be started once all of its dependencies have been completed. If there are multiple valid orders, return any. If it is not possible to complete all projects because of a circular dependency, return an empty list. Input: The first line contains an integer n (1 ≤ n ≤ 105), the number of projects. The second line contains an integer m (0 ≤ m ≤ 105), the number of dependency constraints. The following m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), meaning project v is dependent on project u (project u should be completed before project v). Output: Print a single line containing n space-separated integers denoting the order in which the projects can be completed. If there are multiple valid orders, print any. If it is not possible to complete all projects, print an empty list. Examples: Input: 4 3 1 2 1 3 3 4 Output: 1 3 4 2 Input: 3 3 1 2 2 3 3 1 Output:","solution":"from collections import defaultdict, deque def find_project_order(n, m, dependencies): graph = defaultdict(list) in_degree = [0] * (n + 1) # Building the graph and calculating in-degrees for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 queue = deque() # Start with all projects that have no dependencies for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) project_order = [] while queue: project = queue.popleft() project_order.append(project) for neighbor in graph[project]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If the length of project_order is not n, it means there\'s a cycle if len(project_order) != n: return [] return project_order"},{"question":"Jack likes to play video games, and he recently started playing a game that involves planting trees in a garden grid. The garden is represented as an `MxN` grid, and each cell in the grid can either be empty or contain a tree. Jack wants to maximize the number of trees in his garden while following these rules: 1. Each cell can either contain exactly one tree or no tree at all. 2. No two trees can be adjacent, not even diagonally. Given the dimensions of the garden `M` and `N`, determine the maximum number of trees that Jack can plant in his garden. # Constraints * 1 ≤ M ≤ 100 * 1 ≤ N ≤ 100 # Input The input consists of a single line containing two integers `M` and `N`. # Output Output a single integer, the maximum number of trees that Jack can plant in the garden. # Example Input ``` 4 5 ``` Output ``` 10 ``` Explanation One possible arrangement of the trees in a 4x5 grid is as follows (T represents a tree, and . represents an empty cell): ``` T . T . T . T . T . T . T . T . T . T . ``` Note that no two trees are adjacent horizontally, vertically, or diagonally. Jack could place a total of 10 trees in this 4x5 grid following the given rules.","solution":"def max_trees(m, n): This function computes the maximum number of trees that can be planted in an MxN grid such that no two trees are adjacent horizontally, vertically, or diagonally. if m == 0 or n == 0: return 0 # Calculate the number of cells in the grid total_cells = m * n # The maximum number of trees that can be planted max_trees_possible = (total_cells + 1) // 2 return max_trees_possible"},{"question":"A factory produces two types of products, A and B. Each product takes a certain amount of time to produce, and the factory can only use one machine for manufacturing. Input consists of two integers M and N: M represents the total working hours available in a day and N represents the number of orders for that day. Each order is specified by its type (either \'A\' or \'B\') and the quantity required. Producing one unit of product A takes X hours and one unit of product B takes Y hours. The factory has to fulfill as many complete orders as possible within a day. If an order can\'t be completely fulfilled within the available time, it should be skipped. Write a program to determine the number of complete orders that can be processed in a day. INPUT: The input file consists of several test cases. The first line of each test case consists of two integers M (0 ≤ M ≤ 100) and N (1 ≤ N ≤ 20), representing the total working hours available and the number of orders respectively. The second line consists of two positive integers X and Y (1 ≤ X, Y ≤ 10), representing the production time for one unit of product A and product B respectively. The next N lines each contain an order in the format \\"TYPE QUANTITY\\" where TYPE is either \'A\' or \'B\' and QUANTITY (1 ≤ QUANTITY ≤ 10) is the number of units required. Input will be terminated by 0 0. OUTPUT: For each test case, print the number of complete orders that can be fulfilled within the available time. SAMPLE INPUT 8 3 2 3 A 2 B 1 A 3 10 2 4 5 A 1 B 2 0 0 SAMPLE OUTPUT 2 1","solution":"def process_orders(M, N, X, Y, orders): complete_orders = 0 for order in orders: order_type, quantity = order if order_type == \'A\': required_time = X * quantity elif order_type == \'B\': required_time = Y * quantity else: continue if required_time <= M: complete_orders += 1 M -= required_time return complete_orders def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 results = [] while idx < len(lines): M, N = map(int, lines[idx].split()) if M == 0 and N == 0: break idx += 1 X, Y = map(int, lines[idx].split()) idx += 1 orders = [] for _ in range(N): order_type, quantity = lines[idx].split() quantity = int(quantity) orders.append((order_type, quantity)) idx += 1 results.append(process_orders(M, N, X, Y, orders)) return results"},{"question":"Implement a function that given a list of words and a set of constraints, filters out words that do not meet the conditions. The function should take two inputs - a list of words, and a dictionary of constraints. The constraints specify certain conditions a word must satisfy to be included in the output list. The constraints may include: - Minimum length - Maximum length - Must contain certain letters (in any order) - Must start with a particular letter - Must end with a particular letter If none of the constraints are provided, the function should return the original list of words. Input: - The first line contains two integers N and M, where N is the number of words and M is the number of constraints. (0 ≤ M ≤ 5) - The next N lines each contain one word. - The following M lines each contain a constraint. There are five types of constraints: 1. \\"min_length X\\" where X is an integer (1 ≤ X ≤ 100), indicating the minimum length a word must have. 2. \\"max_length X\\" where X is an integer (1 ≤ X ≤ 100), indicating the maximum length a word can have. 3. \\"must_contain ABCD...\\" where ABCD... is a string of lowercase letters the word must contain. 4. \\"start_with X\\" where X is a lowercase letter the word must start with. 5. \\"end_with X\\" where X is a lowercase letter the word must end with. Output: - Return a list of words that satisfy all the constraints. Sample Input: 5 3 apple banana grape kiwi orange min_length 5 start_with b must_contain a Sample Output: banana","solution":"def filter_words(words, constraints): filtered_words = words for constraint in constraints: parts = constraint.split() if parts[0] == \\"min_length\\": min_length = int(parts[1]) filtered_words = [word for word in filtered_words if len(word) >= min_length] elif parts[0] == \\"max_length\\": max_length = int(parts[1]) filtered_words = [word for word in filtered_words if len(word) <= max_length] elif parts[0] == \\"must_contain\\": required_letters = parts[1] filtered_words = [word for word in filtered_words if all(letter in word for letter in required_letters)] elif parts[0] == \\"start_with\\": start_letter = parts[1] filtered_words = [word for word in filtered_words if word.startswith(start_letter)] elif parts[0] == \\"end_with\\": end_letter = parts[1] filtered_words = [word for word in filtered_words if word.endswith(end_letter)] return filtered_words"},{"question":"The flattened array is a one-dimensional array formed from the original two-dimensional array by concatenating each row end to end. Given an integer N representing the number of rows, an integer M representing the number of columns, and a two-dimensional array A of size N times M, find the k^{th} smallest element in the flattened array. # Input - The first line contains three integers, N, M, and k, where 1 leq N, M leq 100, and 1 leq k leq N times M. - The next N lines contain M integers each representing the elements of the array A, where 1 leq A[i][j] leq 10^6. # Output - Output a single integer, which is the k^{th} smallest element in the flattened array. # Example Input ``` 3 3 4 3 1 10 2 7 100 5 4 8 ``` Output ``` 4 ``` # Explanation The flattened array is [3, 1, 10, 2, 7, 100, 5, 4, 8]. When sorted, the array becomes [1, 2, 3, 4, 5, 7, 8, 10, 100], and the 4^{th} smallest element is 4.","solution":"def kth_smallest_element(N, M, k, A): Returns the k-th smallest element in the flattened N x M matrix A. Parameters: N (int): number of rows M (int): number of columns k (int): position of the k-th smallest element A (list of list of int): the N x M matrix Returns: int: the k-th smallest element in the flattened array # Flatten the 2D array into a 1D array flattened_array = [element for row in A for element in row] # Sort the flattened array flattened_array.sort() # Return the k-th smallest element (1-based index, so k-1 for 0-based index) return flattened_array[k - 1] # Example usage: # N, M, k = 3, 3, 4 # A = [ # [3, 1, 10], # [2, 7, 100], # [5, 4, 8] # ] # print(kth_smallest_element(N, M, k, A)) # Output: 4"},{"question":"You are given a list of integers. Among them, one element appears exactly once, and all other elements appear exactly twice. Write a function to find the element that appears only once and print it. Constraints * The length of the list is between 1 and 10^5. * Each integer in the list is between -10^9 and 10^9. Input Input is given from Standard Input in the following format: * The first line contains an integer N, the number of elements in the list. * The second line contains N space-separated integers. Output Print the integer that appears exactly once in the list. Examples Input 5 4 3 2 4 3 Output 2 Input 3 5 7 5 Output 7 Input 7 10 -10 10 99 99 -10 -3 Output -3","solution":"def find_unique_element(n, arr): Function to find the element that appears exactly once in the list. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Kevin recently joined a coding competition where one of the tasks involves sorting an array of integers. The catch is that the array can have a mix of positive and negative numbers, and they need to be sorted in a special manner: all the negative numbers should come before the positive numbers, and within each group the numbers should be sorted in ascending order. Kevin needs your help to write a program that sorts the array according to these rules. Write a function `special_sort(arr)` that takes an array of integers as input and returns a new array sorted such that all negative numbers come before all positive numbers, and both groups are sorted in ascending order. **Input:** - A line containing integers separated by spaces where each integer represents an element of the array `arr`. The length of the array will be between 1 and 100, and each integer will be between -1000 and 1000. **Output:** - A single line containing the sorted array as described. **Examples:** **Input:** ``` 3 -5 -2 7 1 -9 4 ``` **Output:** ``` -9 -5 -2 1 3 4 7 ``` **Input:** ``` 0 -1 2 -3 ``` **Output:** ``` -3 -1 0 2 ``` **Note:** In the first example, the negative numbers `[-5, -2, -9]` are sorted to `[-9, -5, -2]` and the positive numbers `[3, 7, 1, 4]` are sorted to `[1, 3, 4, 7]`. The final sorted array is `[-9, -5, -2, 1, 3, 4, 7]`. In the second example, after sorting the input array `[-1, -3]` we get `[-3, -1]` and `[0, 2]` remains unchanged, resulting in `[-3, -1, 0, 2]`.","solution":"def special_sort(arr): Returns a new array sorted such that all negative numbers come before all positive numbers, and both groups are sorted in ascending order. negatives = sorted(filter(lambda x: x < 0, arr)) non_negatives = sorted(filter(lambda x: x >= 0, arr)) return negatives + non_negatives"},{"question":"In a hypothetical programming language called Double, you work with strings and have a special operation called \\"Doubling\\". Doubling a string means concatenating the string with itself. For example, doubling the string \\"abc\\" results in \\"abcabc\\". Given an input string and a series of commands to perform on that string, your task is to determine the final string after all commands are executed. The commands are of two types: 1. D - Perform the Doubling operation on the current string. 2. A x - Append the character x to the end of the current string. Each command will be in performed in the order they are presented. You need to implement a function that takes a string and a list of commands, and outputs the final string after all commands have been executed. Function Signature: ```python def process_commands(initial_string: str, commands: List[str]) -> str: pass ``` # Input: - initial_string: A string up to 1000 characters long. - commands: A list of commands, each command being either \\"D\\" or \\"A x\\" where x is a single character. The list contains up to 1000 commands. # Output: - The final string after all commands have been executed. # Example: ```python # Example 1 initial_string = \\"abc\\" commands = [\\"D\\", \\"A d\\", \\"D\\"] # Operations: # - Doubling \\"abc\\" -> \\"abcabc\\" # - Appending \\"d\\" -> \\"abcabcd\\" # - Doubling \\"abcabcd\\" -> \\"abcabcdabcabcd\\" print(process_commands(initial_string, commands)) # Output: \'abcabcdabcabcd\' # Example 2 initial_string = \\"xyz\\" commands = [\\"A a\\", \\"D\\", \\"A b\\"] # Operations: # - Appending \\"a\\" -> \\"xyza\\" # - Doubling \\"xyza\\" -> \\"xyzaxyza\\" # - Appending \\"b\\" -> \\"xyzaxyzab\\" print(process_commands(initial_string, commands)) # Output: \'xyzaxyzab\' ``` Implement the `process_commands` function to solve the problem.","solution":"from typing import List def process_commands(initial_string: str, commands: List[str]) -> str: result_string = initial_string for command in commands: if command == \'D\': result_string = result_string + result_string elif command.startswith(\'A\'): _, char = command.split() result_string = result_string + char return result_string"},{"question":"Given a positive integer N, find the number of ways to represent N as the sum of two or more consecutive positive integers. Each possible sum combination must be unique. Input:- The input is a single integer N. Output:- Print the number of unique ways to represent N as the sum of consecutive positive integers. SAMPLE INPUT 15 SAMPLE OUTPUT 3 Explanation 15 can be represented in the following ways: 1. 15 = 1 + 2 + 3 + 4 + 5 2. 15 = 4 + 5 + 6 3. 15 = 7 + 8 So, the answer is 3.","solution":"def count_ways_to_sum_consecutive_integers(N): count = 0 k = 2 while k * (k - 1) < 2 * N: # Check if 2N is divisible by k if (2 * N) % k == 0: # Compute 2a + k - 1 x = (2 * N) // k - k + 1 # Check if x is even and x > 0 if x % 2 == 0 and x > 0: count += 1 k += 1 return count"},{"question":"Alex is fascinated by sequences and enjoys challenges involving them. One day, Alex is given a positive integer n and tasked with constructing a sequence of n positive integers a_1, a_2, ..., a_n such that: 1. Every element a_i (1 ≤ i ≤ n) is a positive integer. 2. For every pair of indices (i, j), if i < j, then gcd(a_i, a_j) = 1. Given this sequence, Alex wants to calculate the sum of the sequence. If multiple sequences satisfy the conditions, output the sum of the sequence that has the smallest sum. Input: The input contains a single integer n (1 ≤ n ≤ 100000), representing the length of the sequence. Output: Output a single integer, the sum of the sequence that meets the given conditions and has the smallest sum. Example: Input 3 Output 6 Input 5 Output 15 Note: In the first sample with n=3, the sequence {1, 2, 3} is one possible valid sequence where every pair of elements are coprime, and the sum is 6. In the second sample with n=5, the sequence {1, 2, 3, 4, 5} is one possible valid sequence where every pair of elements are coprime, and the sum is 15.","solution":"def minimal_gcd_sequence_sum(n): Returns the sum of the sequence that meets the given conditions and has the smallest sum. The smallest sum for a sequence of length n where each pair of elements are coprime is the sum of the first n positive integers. # To generate the smallest sequence with all pairwise gcd equal to 1, # we can simply use the first n natural numbers. # The sum of the first n natural numbers is given by the formula n * (n + 1) / 2. return n * (n + 1) // 2"},{"question":"Jen is organizing a coding competition. She wants to distribute identical prizes to the participants in such a way that each participant gets the same number of prizes. However, she also wants to distribute all prizes without any leftover. Given the total number of prizes she has and the number of participants, help Jen determine how many prizes each participant receives. If it\'s not possible to distribute the prizes equally, return `-1`. Input:- The first line of the input will be T, the number of test cases. Next follows T lines each containing two space-separated integers (P, N) which are the number of prizes and the number of participants respectively. Output:- Print T lines, each consisting of the number of prizes each participant will receive, or `-1` if the prizes cannot be distributed equally. Constraints: 1 ≤ T ≤ 10^5 1 ≤ P, N ≤ 10^18 SAMPLE INPUT 3 10 2 15 3 7 4 SAMPLE OUTPUT 5 5 -1","solution":"def distribute_prizes(test_cases): results = [] for p, n in test_cases: if p % n == 0: results.append(p // n) else: results.append(-1) return results # Example usage: # Input T = 3 test_cases = [(10, 2), (15, 3), (7, 4)] # Function call output = distribute_prizes(test_cases) # Expected Output: [5, 5, -1] for result in output: print(result)"},{"question":"Given an array of integers, an arithmetic slice is a subset of the array that consists of at least three elements and has the property that the differences between consecutive elements are the same. Your task is to find the number of arithmetic slices in the given array. An arithmetic slice is a subarray that can be derived from the original array where the elements form an arithmetic progression. Input The first line contains an integer n (1 ≤ n ≤ 5000) – the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) – the elements of the array. Output Print a single integer denoting the number of arithmetic slices in the array. Examples Input 5 1 2 3 4 6 Output 3 Input 6 1 3 5 7 9 11 Output 10 Note In the first sample number, the arithmetic slices are: [1, 2, 3], [2, 3, 4], and [1, 2, 3, 4]. In the second sample number, the arithmetic slices are: [1, 3, 5], [3, 5, 7], [5, 7, 9], [7, 9, 11], [1, 3, 5, 7], [3, 5, 7, 9], [5, 7, 9, 11], [1, 3, 5, 7, 9], [3, 5, 7, 9, 11], and [1, 3, 5, 7, 9, 11].","solution":"def count_arithmetic_slices(nums): Returns the number of arithmetic slices in the given list of integers. if len(nums) < 3: return 0 total_slices = 0 current = 0 for i in range(2, len(nums)): if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]: current += 1 total_slices += current else: current = 0 return total_slices"},{"question":"A grid of size NxN is filled with integers. You are asked to find the largest sum of integers of any sub-grid. A sub-grid is any contiguous part of the grid that forms a rectangle. Constraints * 1 ≤ N ≤ 100 * Each element in the grid is an integer in the range [-1000, 1000]. Input The input is provided in the following format: ``` N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] ... grid[N][1] grid[N][2] ... grid[N][N] ``` Output Print the largest sum of any sub-grid. Examples Input ``` 2 1 -2 3 4 ``` Output ``` 7 ``` Input ``` 3 1 2 -1 -3 4 2 1 1 -3 ``` Output ``` 7 ```","solution":"def find_max_subgrid_sum(N, grid): def max_sub_array(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float(\'-inf\') for left in range(N): temp = [0] * N for right in range(left, N): for i in range(N): temp[i] += grid[i][right] max_sum = max(max_sum, max_sub_array(temp)) return max_sum"},{"question":"Given an array of n integers sorted in non-decreasing order, you are tasked with processing q queries. Each query consists of two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n). For each query, your task is to count the distinct integers in the subarray array[l_i-1...r_i-1]. - A subarray array[i...j] of an array array is the segment of the array that starts at index i and ends at index j, inclusive. - The array is 0-indexed for simplicity in implementation. Input The first line of the input contains a single integer t (1≤ t ≤ 10) — the number of test cases. The description of each test case is as follows: - The first line contains two integers n (1 ≤ n ≤ 1000) and q (1≤ q ≤ 1000) — the size of the array and the number of queries, respectively. - The second line contains n integers, representing the array in non-decreasing order. - The following q lines each contain two integers l_i and r_i. Output For each test case, output q lines. The i-th line of the output of each test case should contain a single integer, the number of distinct integers in the subarray array[l_i-1...r_i-1]. Example Input 2 7 3 1 2 2 3 3 4 5 1 3 2 5 3 7 5 1 3 5 5 1 1 1 5 Output 2 3 4 1 1 1 Note In the first test case: - For the first query (1, 3), the subarray is [1, 2, 2], which has 2 distinct integers: {1, 2}. - For the second query (2, 5), the subarray is [2, 2, 3, 3], which has 2 distinct integers: {2, 3}. - For the third query (3, 7), the subarray is [2, 3, 3, 4, 5], which has 4 distinct integers: {2, 3, 4, 5}. In the second test case: - For the only query (5, 5), the subarray is [3], which has 1 distinct integer: {3}.","solution":"def count_distinct_in_subarray(array, queries): For each query, count the distinct integers in the subarray specified. results = [] for l, r in queries: subarray = array[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results def process_test_cases(test_cases): Processes multiple test cases according to the problem statement. all_results = [] for case in test_cases: n, q = case[\'n\'], case[\'q\'] array = case[\'array\'] queries = case[\'queries\'] results = count_distinct_in_subarray(array, queries) all_results.extend(results) return all_results"},{"question":"You are given a sequence of integers a_1, a_2, ..., a_n and you can perform the following operation on this sequence: choose two indices i and j (1 ≤ i, j ≤ n, i ≠ j) and subtract gcd(a_i, a_j) from the larger of the two elements. Here gcd(x, y) denotes the greatest common divisor of x and y. Your task is to determine the minimum possible value of the maximum element in the sequence after performing any number of such operations (including zero operations). Input The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output Output a single integer — the minimum possible value of the maximum element in the sequence after performing any number of the allowed operations. Examples Input 4 2 6 8 10 Output 2 Input 3 15 25 35 Output 5","solution":"from math import gcd from functools import reduce def min_possible_max_element(arr): Returns the minimum possible value of the maximum element in the sequence after performing any number of the allowed operations. return reduce(gcd, arr) # Example Usage # n = 4 # arr = [2, 6, 8, 10] # result = min_possible_max_element(arr) # print(result) # Output: 2"},{"question":"You and your sister decided to play a tree game. The game starts with two trees, each represented by an array of integers. The objective is to merge the two trees into one, while maximizing the sum of the elements. However, the merging should maintain the order of elements and can only be done through a specific method: taking an element from either of the two trees alternately until one or both of the trees are empty. Given two arrays representing trees, write a function that determines the maximum possible sum of the merged tree. **Input:** - Two arrays `a` and `b` where each array contains integers (0 ≤ length of `a`, `b` ≤ 1000 and -10^9 ≤ integers in the arrays ≤ 10^9). The arrays can\'t be empty simultaneously. **Output:** - A single integer representing the maximum possible sum of the merged tree. **Example 1:** **Input:** ``` a = [1, 3, 2] b = [4, 6, 5] ``` **Output:** ``` 21 ``` **Example 2:** **Input:** ``` a = [10, 15] b = [5, 7, 20] ``` **Output:** ``` 57 ``` **Example 3:** **Input:** ``` a = [5, 6] b = [] ``` **Output:** ``` 11 ``` **Example 4:** **Input:** ``` a = [] b = [7, 8, 9] ``` **Output:** ``` 24 ``` **Note:** In **Example 1**, choosing the optimal order to merge would be to take all elements from `b` first because that results in the maximum total sum. In **Example 2**, merging `a` and `b` in any order gives the same result since the length of `a` plus `b` is not longer than our maximum allowed length. In **Example 3**, the tree `b` is empty, and just sum of elements from `a` is the maximum sum. In **Example 4**, the tree `a` is empty, and just sum of elements from `b` is the maximum sum.","solution":"def merge_trees_max_sum(a, b): Merge two trees (arrays) to maximize their sum maintaining the order of elements. The merge is done by alternately picking elements from a and b. Returns the maximum possible sum of the merged tree. i, j = 0, 0 total_sum = 0 while i < len(a) and j < len(b): if a[i] >= b[j]: total_sum += a[i] i += 1 else: total_sum += b[j] j += 1 while i < len(a): total_sum += a[i] i += 1 while j < len(b): total_sum += b[j] j += 1 return total_sum"},{"question":"You are given a grid of size NxM filled with non-negative integers representing the number of coins in each cell. You need to help a character, Alex, collect the maximum number of coins starting from the top-left corner of the grid (1,1) and moving to the bottom-right corner (N,M). Alex can only move either right or down at any point in time. Write a function that takes the grid as input and returns the maximum number of coins Alex can collect. # Input - The first line contains two integers: `N` and `M` (1 ≤ N, M ≤ 100), the number of rows and columns in the grid. - The next `N` lines each contain `M` integers representing the number of coins in each cell of the grid. Each integer is between 0 and 9 inclusive. # Output - Print a single integer, the maximum number of coins Alex can collect. # Example Input ``` 3 3 0 1 4 2 8 0 1 5 3 ``` Output ``` 18 ``` Explanation In this case, the path that yields the maximum number of coins is: 0 → 2 → 8 → 5 → 3, collecting a total of 18 coins. # Note - Alex starts at position (1,1) which is the top-left corner, and must reach position (N,M) which is the bottom-right corner of the grid. - Alex can only move to the right or down at each step.","solution":"def max_coins(grid): N = len(grid) M = len(grid[0]) # Create a dp array with the same dimensions as grid dp = [[0] * M for _ in range(N)] # Initialize the dp array with the values from the grid dp[0][0] = grid[0][0] # Fill the first row of the dp array for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column of the dp array for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum number of coins Alex can collect return dp[N-1][M-1]"},{"question":"You are given a sequence of integers, where each integer represents the height of an individual person standing in a line. The problem is to determine the smallest non-negative integer height X, such that after each grouped consecutive group of three people is changed to the height X, the median height of the entire sequence remains the same. The median is defined as the middle value of an ordered list (sorted in non-decreasing order) of heights if the number of heights is odd, or the average of the two middle values if it is even. Input * The first line of the input consists of T, the number of test cases. * The next T sections contain: - The first line of each section has N, the number of people in the line. - The second line has an array A of N integers (1 ≤ A[i] ≤ 10^9), representing the heights of the people in line. Output For each test case, output the smallest non-negative integer height X that, when substituted for each grouped consecutive group of three people in the list, leaves the median height of the sequence unchanged. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 2 * 10^5 N is a multiple of 3 Example Input: 2 3 1 5 3 6 1 2 3 4 5 6 Output: 3 3 Explanation In the first test case: The initial list is [1, 5, 3]. The median is 3. When grouped and replaced with X, we have [X, X, X], and the smallest X to maintain the median 3 is 3. Result: 3 In the second test case: The initial list is [1, 2, 3, 4, 5, 6]. The median is the average of 3 and 4, which is 3.5. When each group of three is replaced with X, we have [X, X, X, X, X, X], and the smallest X to maintain the median 3.5 is 3. Result: 3","solution":"def smallest_x_to_maintain_median(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] median = sorted(heights)[n // 2] if n % 2 == 1 else (sorted(heights)[n // 2 - 1] + sorted(heights)[n // 2]) / 2 results.append(int(median)) return results"},{"question":"James is a professional photographer and enjoys spending his free time taking pictures of wildlife. On his latest trip, he captured several images of birds. Upon returning, he decides to organize the images into different albums based on the species of birds he photographed. Given a list of bird species seen in the order they were photographed, James wants to group the same species together consecutively in the output album. If a specific species of bird is not found, it should be left out of the album. The resulting list should preserve the original order of first appearance for each species in the input list. Write a function ```organize_album``` that takes a list of bird species as input and returns a new list where the same species are grouped together, maintaining the order of their first appearance. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of bird species James photographed. The second line contains n space-separated strings, where each string is the name of the bird species James photographed. Output Output a single line containing the space-separated names of the bird species, grouped by species. Example Input 7 sparrow robin sparrow eagle robin eagle falcon Output sparrow sparrow robin robin eagle eagle falcon Input 5 hawk hawk owl owl owl Output hawk hawk owl owl owl","solution":"def organize_album(birds): Organizes the birds into groups of the same species maintaining the order of their first appearance in the input list. Parameters: birds (list): A list of strings where each string is the name of the bird species. Returns: list: A new list where the same species are grouped together, maintaining order of their first appearance. from collections import OrderedDict bird_dict = OrderedDict() for bird in birds: if bird in bird_dict: bird_dict[bird].append(bird) else: bird_dict[bird] = [bird] result = [] for group in bird_dict.values(): result.extend(group) return result # Example usage n = 7 birds = [\'sparrow\', \'robin\', \'sparrow\', \'eagle\', \'robin\', \'eagle\', \'falcon\'] print(\' \'.join(organize_album(birds)))"},{"question":"There is a kingdom with several castles connected by bidirectional roads. The king of the kingdom, Kind King, wants to ensure that in case of an attack, he can close a certain number of roads to minimize the damage by preventing the spread of the enemy troops. To do this, he needs to know the minimum number of roads that, if removed, would make the castles disconnected from each other. Given the number of castles `n`, the number of roads `r`, and the list of connections between the castles in the form of pairs of integers (each pair represents a bidirectional road between two castles), write a program to determine the minimum number of roads that need to be removed to disconnect the kingdom. Input: The first line contains two integers `n` and `r` (1 ≤ n ≤ 10^5, 0 ≤ r ≤ 2 × 10^5) — the number of castles and the number of roads. The next `r` lines each contain two integers `ai` and `bi` (1 ≤ ai, bi ≤ n, ai ≠ bi) — representing a road between castles `ai` and `bi`. Output: Print the only integer — the minimum number of roads that need to be removed to make the castles disconnected. Example: Input: 6 7 1 2 1 3 2 3 2 4 3 4 3 5 4 6 Output: 2 Note: In the example, you can remove roads (2-4) and (3-5) which would make the castles disconnected. The best strategy is to find the smallest set of roads whose removal would increase the number of connected components in the graph.","solution":"from collections import defaultdict, deque def find_bridges(n, connections): def dfs(u, parent): nonlocal time visited[u] = True discovery[u] = low[u] = time time += 1 for v in graph[u]: if not visited[v]: dfs(v, u) low[u] = min(low[u], low[v]) if low[v] > discovery[u]: bridges.append((u, v)) elif v != parent: low[u] = min(low[u], discovery[v]) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) discovery = [0] * (n + 1) low = [0] * (n + 1) bridges = [] time = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, -1) return len(bridges) def min_roads_to_disconnect(n, r, roads): return find_bridges(n, roads)"},{"question":"A rectangular grid is filled with non-negative integers. You need to write a program that finds the maximum sum of integers in any subgrid of the given grid. A subgrid is defined by any contiguous rectangular section of the grid. Input: The first line of the input contains two integers m and n, the number of rows and columns of the grid respectively. The next m lines contain n integers each, representing the grid. Output: Output a single integer, the maximum sum of any subgrid. Constraints: 1 ≤ m, n ≤ 1000 0 ≤ grid values ≤ 10^9 Example input: 3 3 1 2 3 4 5 6 7 8 9 Example output: 45","solution":"def max_sum_subgrid(grid): Returns the maximum sum of any subgrid in the given grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) max_sum = float(\'-inf\') for left in range(n): temp = [0] * m for right in range(left, n): # Accumulate sums for each row between the left and right columns for i in range(m): temp[i] += grid[i][right] # Apply 1D Kadane\'s algorithm on this accumulated sum array current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): Returns the maximum sum of any subarray in the given array using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a set of N integers, and your task is to find the minimum absolute difference between the sum of two subsets formed from these integers. If it is not possible, print -1. Constraints * 1 ≤ N ≤ 20 * -10^7 ≤ each integer ≤ 10^7 Input Input is given from Standard Input in the following format: N A_1 A_2 A_3 ... A_N Output Print the minimum absolute difference as an integer, or -1 if it is not possible to form such subsets. Examples Input 3 1 2 3 Output 0 Input 4 1 2 3 9 Output 3 Input 2 -7 -3 Output 4 Input 1 5 Output -1","solution":"def min_abs_difference(N, array): if N == 1: return -1 total_sum = sum(array) subset_sums = set() for i in range(1 << N): # Generate all subset sums using bit masking subset_sum = 0 for j in range(N): if i & (1 << j): # If jth bit in i is set, include array[j] subset_sum += array[j] subset_sums.add(subset_sum) min_diff = float(\'inf\') for subset_sum in subset_sums: min_diff = min(min_diff, abs(total_sum - 2 * subset_sum)) return min_diff"},{"question":"Write a function in Python that takes a list of tuples representing intervals and merges overlapping intervals. Input Format A list of tuples, where each tuple consists of two integers representing the start and end of an interval. Output Format A list of tuples representing the merged intervals in ascending order. SAMPLE INPUT [(1, 3), (2, 4), (5, 7), (6, 8)] SAMPLE OUTPUT [(1, 4), (5, 8)] Explanation In the given input, the intervals (1, 3) and (2, 4) overlap and are merged into (1, 4); similarly, intervals (5, 7) and (6, 8) overlap and are merged into (5, 8). The final list of merged intervals is [(1, 4), (5, 8)].","solution":"def merge_intervals(intervals): Merges a list of overlapping intervals. Parameters: intervals (list): A list of tuples where each tuple contains two integers (start, end). Returns: list: A list of merged intervals. if not intervals: return [] # Sort intervals by their starting point intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for i in range(1, len(intervals)): last_merged = merged[-1] # Check if there is an overlap if intervals[i][0] <= last_merged[1]: # Merge the intervals merged[-1] = (last_merged[0], max(last_merged[1], intervals[i][1])) else: # No overlap, simply add the interval to result merged.append(intervals[i]) return merged"},{"question":"Given an array of integers and a list of range queries, find the number of distinct integers in each specified subarray. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range for the i-th query. Output For each query, print the number of distinct integers in the subarray from index li to ri (inclusive). Examples Input 7 1 2 3 2 3 1 4 3 1 5 2 4 3 7 Output 3 2 4 Input 5 1 1 1 1 1 2 1 5 2 3 Output 1 1 Note In the first example: - For the first query, the subarray is [1, 2, 3, 2, 3], which has 3 distinct integers: 1, 2, and 3. - For the second query, the subarray is [2, 3, 2], which has 2 distinct integers: 2 and 3. - For the third query, the subarray is [3, 2, 3, 1, 4], which has 4 distinct integers: 1, 2, 3, and 4. In the second example: - Both queries involve subarrays with a single distinct integer, 1.","solution":"def count_distinct_in_subarrays(arr, queries): Given an array of integers and a list of range queries, find the number of distinct integers in each specified subarray. Parameters: arr (List[int]): List of integers representing the array. queries (List[Tuple[int, int]]): List of tuples where each tuple represents the range (li, ri). Returns: List[int]: List containing the number of distinct integers in each subarray for the given queries. results = [] for li, ri in queries: subarray = arr[li-1:ri] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"You are given a series of treasure chests, each protected by a lock with a certain number of rotation mechanisms. Each rotation mechanism is marked with a number and operates according to the following rules: 1. When a rotation mechanism is rotated, it increases the current number on it by one. 2. If turning one mechanism increases its value to 10, it wraps back to 0 and the next mechanism is incremented. 3. All mechanisms initially display 0. Given an integer `T` representing the number of treasure chests, and a list of integers where each integer indicates the number of rotation mechanisms for the corresponding chest, write a program to determine the maximum rotation number that can be formed. The maximum rotation number is defined as the highest number displayed across all mechanisms when they are fully rotated. **Input:** - An integer `T` (1 ≤ T ≤ 100) representing the number of treasure chests. - An array of `T` integers where each integer `N_i` (1 ≤ N_i ≤ 10) represents the number of rotation mechanisms on the i-th treasure chest. **Output:** - A list of integers where each integer represents the maximum rotation number for the corresponding chest. **Example** **Input:** ``` 3 2 3 4 ``` **Output:** ``` 99 999 9999 ```","solution":"def max_rotation_number(T, mechanisms): Given the number of treasure chests T and a list indicating the number of rotation mechanisms for each chest, return a list of maximum rotation numbers for each chest. max_numbers = [] for N in mechanisms: max_numbers.append(int(\'9\' * N)) # Create a string with N \'9\'s and convert to integer return max_numbers"},{"question":"Infinite Grid Conundrum Consider an infinite grid with rows and columns indexed by integers. Shiny objects are placed on this grid at various coordinates, and each object is given a \'shine factor\' that indicates its brilliance. You, as an explorer, can start at any point on the grid and want to minimize the total walking distance needed to collect all the shiny objects exactly once. Moving from (x1, y1) to (x2, y2) takes |x2 - x1| + |y2 - y1| units of distance. Given the coordinates of the shiny objects and their respective \'shine factors\', determine the minimum total distance you need to travel to collect all objects starting from any point on the grid. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of shiny objects. Each of the next n lines contains three integers xi, yi, si (|xi|, |yi| ≤ 1000, 1 ≤ si ≤ 100000) — the coordinates of the i-th shiny object and its shine factor. Output: Print one integer — the minimum total walking distance needed to collect all the shiny objects. Example: Input: 3 0 0 3 0 2 1 2 2 2 Output: 4 Explanation: One possible optimal route would be starting from (0, 0), moving to (0, 2), and then moving to (2, 2). The total distance is (0 to 2) + (2 to 2) = 2 + 2 = 4.","solution":"def min_walking_distance(n, coordinates): Determines the minimum walking distance needed to collect all shiny objects. This problem can be thought of as the Travelling Salesman Problem, for simplicity we\'ll use a naive, yet feasible approach due to the small constraints (n <= 1000). from itertools import permutations # Create a function to calculate the walking distance between two points def distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) # Store just the coordinates of the shiny objects points = [(coord[0], coord[1]) for coord in coordinates] # Calculate the minimal walk distance using brute force permutation approach min_distance = float(\'inf\') for perm in permutations(points): total_dist = sum(distance(perm[i], perm[i+1]) for i in range(n-1)) min_distance = min(min_distance, total_dist) return min_distance"},{"question":"You are given a list of n integers, and your task is to sort this list such that all the negative integers appear before positive integers while keeping their relative order. This means if two negative numbers appear in the original list in a particular order, they should still be in the same order after sorting. The same applies to the positive numbers. Input The first line contains a single integer n (1 ≤ n ≤ 104) — the number of integers in the list. The next line contains n space-separated integers ai (-109 ≤ ai ≤ 109). Output Print the sorted list where all negative integers appear before all positive integers, maintaining their relative order as in the original list. Examples Input 7 -1 3 2 -7 -4 9 1 Output -1 -7 -4 3 2 9 1 Input 5 1 2 3 -1 -2 Output -1 -2 1 2 3 Note In the first example, the negative integers are -1, -7, and -4. They appear in the same order in the output. Similarly, the positive integers are 3, 2, 9, and 1, which also appear in the output in the same order as in the input.","solution":"def sort_neg_pos(arr): Sorts the input list such that all negative integers appear before all positive integers, maintaining their relative order in the original list. negatives = [x for x in arr if x < 0] positives = [x for x in arr if x >= 0] return negatives + positives def main(input_list): n = input_list[0] arr = input_list[1:] sorted_arr = sort_neg_pos(arr) return sorted_arr"},{"question":"The famous detective Sherlock Holmes was trying to decode a message from his arch-enemy Moriarty. The message was given in the form of a string of characters, consisting of both uppercase and lowercase letters. Sherlock found that the only way to decode the message was to convert all the uppercase letters to lowercase and vice versa for each character in the string. Your task is to help Sherlock decode the message. Write a program which takes a string as input and returns the decoded message by converting each uppercase letter to lowercase and each lowercase letter to uppercase. **INPUT** The first line contains an integer T, the number of test cases. The next T lines each contain a string composed of uppercase and lowercase English alphabets. **OUTPUT** For each test case, print the decoded message on a new line. **CONSTRAINTS** 1 ≤ T ≤ 100 1 ≤ length of each string ≤ 1000 **SAMPLE INPUT** 3 HelloWorld SherLock DecodeMe **SAMPLE OUTPUT** hELLOwORLD sHERlOCK dECODEmE","solution":"def decode_message(messages): Decode each message by converting uppercase letters to lowercase and vice versa for each character in the string. Parameters: messages (list of str): List of message strings to be decoded. Returns: list of str: List of decoded message strings. decoded_messages = [] for message in messages: decoded_message = \'\'.join( char.lower() if char.isupper() else char.upper() for char in message ) decoded_messages.append(decoded_message) return decoded_messages def process_input_and_decode(T, inputs): Process input and decode messages. Parameters: T (int): Number of test cases. inputs (list of str): List of input messages. Returns: list of str: List of decoded message strings. # Decode messages using the decode_message function return decode_message(inputs)"},{"question":"A software company is developing a new version of a file synchronization tool. The tool needs to be capable of sorting files of varying sizes efficiently. They require your help in implementing one critical component: merging two already sorted arrays of file sizes into one sorted array. Your task is to write a function that takes two sorted arrays of integers and returns a new array that contains all the integers from both input arrays, in sorted order. Input The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the first array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the first array, sorted in non-decreasing order. - The third line contains an integer m (1 ≤ m ≤ 10^5), the number of elements in the second array. - The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 10^9), the elements of the second array, sorted in non-decreasing order. Output Output a single line containing n + m integers, representing the merged array in sorted order. Examples Input 4 1 3 5 7 3 2 4 6 Output 1 2 3 4 5 6 7 Input 5 1 2 3 4 5 3 6 7 8 Output 1 2 3 4 5 6 7 8","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. :param arr1: List of integers, sorted in non-decreasing order :param arr2: List of integers, sorted in non-decreasing order :return: A new list containing all integers from arr1 and arr2 in sorted order n = len(arr1) m = len(arr2) merged_array = [] i = j = 0 while i < n and j < m: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < n: merged_array.append(arr1[i]) i += 1 while j < m: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a list of integers that represent a sequence. We define the \\"beauty\\" of a sequence as the number of sub-sequences (continuous) which have at least one distinct integer in them. Calculate the beauty of the given sequence. Constraints * 1 ≤ length of the sequence ≤ 10^5 * Every element in the sequence is an integer in the range [-10^5, 10^5] Input Input is given from Standard Input in the following format: First line contains an integer N, representing the length of the sequence. Second line contains N space-separated integers, representing the elements of the sequence. Output Output a single integer, the beauty of the sequence. Examples Input 5 1 2 1 2 1 Output 15 Input 2 1 1 Output 3 Input 7 1 2 3 4 2 1 2 Output 28","solution":"def sequence_beauty(n, seq): Computes the beauty of the given sequence :param n: Length of the sequence :param seq: The sequence of integers :return: The beauty of the sequence return n * (n + 1) // 2"},{"question":"In a distant kingdom, there exists a magical forest with n enchanted trees. Each tree has a magical power value associated with it. The wizard King, who guards the forest, wants to select some of these trees in such a way that the sum of their magical power values is as large as possible without violating the kingdom\'s ancient rule. The ancient rule states that no two selected trees can be adjacent to each other, otherwise the magical bond between them would break and cause a disaster in the kingdom. Given the array of magical power values for each tree, help the wizard King determine the maximum sum of the selected trees\' magical power values. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of enchanted trees. - The second line contains n space-separated integers, where the i-th integer represents the magical power value of the i-th tree (-1000 ≤ value ≤ 1000). Output - Print a single integer, the maximum sum of the selected trees\' magical power values. Examples Input 5 3 2 5 10 7 Output 15 Input 6 3 2 7 10 12 5 Output 22 Note In the first example, the king can select trees with power values of 3, 5 and 7 for a maximum sum of 15. In the second example, the king can select trees with power values of 3, 10 and 12 for a maximum sum of 22.","solution":"def max_magical_power(n, powers): Returns the maximum sum of values of selected trees such that no two selected trees are adjacent :param n: integer, number of trees :param powers: list of integers, magical power values of the trees :return: integer, maximum sum of selected values if n == 0: return 0 if n == 1: return max(0, powers[0]) if n == 2: return max(0, powers[0], powers[1]) dp = [0] * n dp[0] = max(0, powers[0]) dp[1] = max(dp[0], powers[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + powers[i]) return dp[-1]"},{"question":"You are given an integer array `arr` and an integer `x`. Your task is to identify whether there are three distinct indices `i`, `j`, and `k` in the array such that `arr[i] + arr[j] + arr[k] = x`. Input - The first line contains an integer `n` (3 ≤ n ≤ 3000), the number of elements in the array. - The second line contains `n` integers `arr[i]` (−10^9 ≤ arr[i] ≤ 10^9) separated by space, which are the elements of the array. - The third line contains the integer `x` (−3·10^9 ≤ x ≤ 3·10^9). Output - A single line containing \\"YES\\" if there exist three distinct indices `i`, `j`, and `k` such that `arr[i] + arr[j] + arr[k] = x`, otherwise print \\"NO\\". Examples Input 5 1 2 4 5 -1 6 Output YES Input 4 1 2 3 4 10 Output NO Input 6 0 -1 2 -3 1 -2 0 Output YES Explanation In the first example, one possible triplet is (1, 2, 4) or (2, 4, -1). In the second example, no such triplet exists. In the third example, one possible triplet is (-1, 2, -1).","solution":"def find_three_sum(arr, x): Determines if there exist three distinct indices i, j, k such that arr[i] + arr[j] + arr[k] = x. Parameters: arr (list): List of integers. x (int): The target sum. Returns: str: \\"YES\\" if such indices exist, otherwise \\"NO\\". arr.sort() n = len(arr) for i in range(n-2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == x: return \\"YES\\" elif current_sum < x: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given a list of n integers and a value k. Your task is to determine the length of the shortest subarray whose sum equals k. If such a subarray does not exist, return -1. A subarray is a contiguous part of the array. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4), the elements of the list. The third line contains a single integer k (−10^9 ≤ k ≤ 10^9), the target sum. Output Print the length of the shortest subarray whose sum equals k. If no such subarray exists, print -1. Example Input 5 1 2 3 4 5 9 Output 2 Input 3 1 -1 1 3 Output -1","solution":"def shortest_subarray_with_sum_k(arr, k): Determines the length of the shortest subarray whose sum equals k. If such a subarray does not exist, returns -1. n = len(arr) prefix_sum = 0 min_length = float(\'inf\') prefix_sum_indices = {0: -1} for i in range(n): prefix_sum += arr[i] if (prefix_sum - k) in prefix_sum_indices: min_length = min(min_length, i - prefix_sum_indices[prefix_sum - k]) if prefix_sum not in prefix_sum_indices: prefix_sum_indices[prefix_sum] = i return min_length if min_length != float(\'inf\') else -1"},{"question":"A string is called \\"balanced\\" if the number of occurrences of the characters \'a\', \'b\', and \'c\' are equal. Given a string s, determine the length of the shortest contiguous substring of s that is balanced. If no such substring exists, return -1. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of one line containing s (1 ≤ |s| ≤ 100) — a string of lowercase English letters. Output For each test case, print the length of the shortest balanced substring, or -1 if no such substring exists. Example Input 3 abc aabbcc aaabbbccc Output 3 6 9 Note In the first test case, the entire string \\"abc\\" is already balanced. In the second test case, the shortest balanced substring is \\"aabbcc\\". In the third test case, the entire string \\"aaabbbccc\\" is balanced, but each character set needs to balance across the whole string.","solution":"def shortest_balanced_substring_length(s): from collections import Counter n = len(s) if n < 3: return -1 # Function to check if a substring is balanced def is_balanced(sub): counter = Counter(sub) return counter.get(\'a\', 0) == counter.get(\'b\', 0) == counter.get(\'c\', 0) min_length = float(\'inf\') # Sliding window to find the shortest balanced substring for i in range(n): for j in range(i + 2, n): if is_balanced(s[i:j+1]): min_length = min(min_length, j - i + 1) return min_length if min_length != float(\'inf\') else -1 def find_shortest_balanced_for_cases(t, cases): results = [] for case in cases: results.append(shortest_balanced_substring_length(case)) return results"},{"question":"You are given an array of integers where every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space. Input A line containing n (1 ≤ n ≤ 10^6) integers representing the elements of the array. The input array will always have a odd length, ensuring there is one element that does not repeat. Output A single integer, the one that does not repeat in the array. Example Input 1 2 3 4 2 3 1 Output 4 Note In the example, all elements except for 4 appear twice. The single non-repeating element in the array is 4.","solution":"def find_single_element(nums): Finds the single element in a list where every other element appears twice. Args: nums (list): List of integers where every element appears twice except for one. Returns: int: The single element that does not repeat. result = 0 for num in nums: result ^= num return result"},{"question":"Given an array of integers representing daily stock prices, write a function that finds the maximum profit that can be achieved by buying and selling the stock at most twice. You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you rebuy), and you must buy once and sell once per transaction. **Input** A single line containing space-separated integers, where each integer represents the stock price for a specific day. The length of the array will be between 1 and 10^5 inclusive, and each stock price is a non-negative integer not exceeding 10^5. **Output** A single integer representing the maximum profit that can be achieved from at most two transactions. If no profit can be made, output 0. **Example** _Example 1:_ **Input:** ``` 3 3 5 0 0 3 1 4 ``` **Output:** ``` 6 ``` _Example 2:_ **Input:** ``` 1 2 3 4 5 ``` **Output:** ``` 4 ``` _Example 3:_ **Input:** ``` 7 6 4 3 1 ``` **Output:** ``` 0 ``` _Example 4:_ **Input:** ``` 1 2 ``` **Output:** ``` 1 ``` **Explanation:** In the first example, the maximum profit can be achieved by buying on day 3 and selling on day 6, then buying on day 7 and selling on day 8, resulting in a total profit of 6 (3 - 0 + 4 - 1). In the second example, buying on day 1 and selling on day 5 yields the maximum profit of 4. In the third example, no transactions can yield a profit. In the fourth example, buying on day 1 and selling on day 2 yields a profit of 1.","solution":"def maxProfit(prices): if not prices: return 0 # Initialize variables to track the maximum profit after the first and second transactions first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: # Track the maximum profit after buying the first stock first_buy = max(first_buy, -price) # Track the maximum profit after selling the first stock first_sell = max(first_sell, first_buy + price) # Track the maximum profit after buying the second stock second_buy = max(second_buy, first_sell - price) # Track the maximum profit after selling the second stock second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"# Problem In a digital document editor, words are separated by spaces, and the editor allows you to perform a \\"condense operation\\". This operation collapses multiple consecutive spaces into a single space. For example, the sentence \\"Hello world!\\" would become \\"Hello world!\\". You are tasked with writing a function that performs this condense operation on a given string and returns the condensed version of the string. Your function should not use any built-in string functions that directly solve the problem (like Python\'s `split()` and `join()`). # Input A string `s` of length `1 <= len(s) <= 10^5` that may contain multiple spaces. # Output A string that contains the same words as `s` but with any consecutive spaces collapsed into a single space. # Examples Input Example 1 ``` \\"Hello world!\\" ``` Output Example 1 ``` \\"Hello world!\\" ``` Input Example 2 ``` \\" This is a test. \\" ``` Output Example 2 ``` \\"This is a test.\\" ``` Input Example 3 ``` \\"No extra spaces here.\\" ``` Output Example 3 ``` \\"No extra spaces here.\\" ``` # Constraints * The input string will contain only printable ASCII characters (spaces, letters, numbers, punctuation, etc.). * Leading and trailing spaces in the string should be removed in the output.","solution":"def condense_spaces(s): Removes leading, trailing and multiple consecutive spaces from the input string. result = [] in_space = False for char in s: if char == \' \': if not in_space: in_space = True result.append(char) else: in_space = False result.append(char) return \'\'.join(result).strip()"},{"question":"Emma loves decorating her n-ary tree for festivities. An n-ary tree is a tree where each node can have at most n children. This year, Emma has a special decoration rule: each node’s value must be divisible by the value of its parent node. Emma has the values of the nodes she wants to use to decorate the tree and knows how the tree should look structurally in terms of parent-child relationships. Your task is to determine whether it’s possible to decorate the tree following Emma’s rules, i.e., for each node, its value should be divisible by its parent’s value. Input The first line contains an integer n (1 ≤ n ≤ 50) — the maximum number of children each node can have. The second line features an integer m (2 ≤ m ≤ 1000) — the number of nodes in the tree. The third line contains m distinct integers a_i (1 ≤ a_i ≤ 10^9) — the values of the nodes in any order. The next m-1 lines contain pairs of integers u and v (1 ≤ u, v ≤ m) representing an edge between nodes u and v in the tree. Output If it is possible to decorate the tree following Emma’s special rule, print \\"Possible\\" (quotes for clarity). Otherwise, print \\"Impossible\\" (quotes for clarity). Examples Input 2 5 1 2 4 8 16 1 2 1 3 3 4 3 5 Output Possible Input 3 4 2 4 6 13 1 2 2 3 2 4 Output Impossible Input 1 3 3 6 18 1 2 1 3 Output Possible Note In the first example, the tree can be decorated as follows: - Node 1 has value 1 - Node 2 has value 2 - Node 3 has value 4 and is a child of 1 (4 % 1 == 0) - Node 4 has value 8 and is a child of 3 (8 % 4 == 0) - Node 5 has value 16 and is also a child of 3 (16 % 4 == 0) In the second example, node 4 with value 13 cannot be placed as a child of node 2 or node 3, since 13 is not divisible by either 2 or 6. In the third example, the only way to arrange the tree is with node 1 having value 3, node 2 having value 6 (6 % 3 == 0), and node 3 having value 18 (18 % 3 == 0). This satisfies the decoration rule.","solution":"def can_decorate_tree(n, m, values, edges): from collections import defaultdict, deque tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) values_dict = {i+1: values[i] for i in range(m)} visited = set() def dfs(node): stack = [(node, -1)] visited.add(node) while stack: current, parent = stack.pop() if parent != -1: if values_dict[current] % values_dict[parent] != 0: return \\"Impossible\\" for neighbor in tree[current]: if neighbor not in visited: visited.add(neighbor) stack.append((neighbor, current)) return \\"Possible\\" return dfs(1)"},{"question":"# Task You are given an integer `n` representing the number of elements in an array. Each element in the array takes a value of either 0 or 1. You are also given an integer `k` and your task is to find the minimum number of swaps required to group all 1\'s present in the array together. A swap is defined as interchanging the positions of two different elements (not necessarily adjacent). # Input - The first line contains the integers `n` and `k` (1 ≤ k ≤ n ≤ 200000) - the number of elements in the array and the target group size (i.e., number of 1’s to be grouped together). - The second line contains `n` integers `a_i` (0 ≤ a_i ≤ 1) - the elements of the array. # Output - Print a single integer - the minimum number of swaps required to group all `k` 1\'s together. # Example Input ``` 7 3 1 0 1 0 1 0 0 ``` Output ``` 1 ``` # Explanation In the given example, we need to group 3 ones together. The optimal way is to swap the elements at positions 2 and 5, resulting in the array `[1, 1, 1, 0, 0, 0, 0]`. Thus, the minimum number of swaps required is 1.","solution":"def min_swaps_to_group_ones(n, k, arr): Returns the minimum number of swaps required to group all 1\'s in the array together. # Calculate the number of 1\'s in the given array count_ones = sum(arr) # If there are less 1\'s in array than k, it\'s impossible to group k 1\'s together if count_ones < k: return -1 # Use a sliding window to determine the maximum number of 1\'s in any window/subarray of size k max_ones_in_window = 0 current_ones_in_window = 0 # Initialize the first window for i in range(k): if i < n: current_ones_in_window += arr[i] max_ones_in_window = current_ones_in_window # Slide the window from left to right for i in range(k, n): current_ones_in_window += arr[i] current_ones_in_window -= arr[i - k] if current_ones_in_window > max_ones_in_window: max_ones_in_window = current_ones_in_window # The number of swaps needed is the difference between k and the maximum number of 1\'s in such a window return k - max_ones_in_window"},{"question":"Granny loves words and puzzles. She especially enjoys rearranging letters to find meaningful phrases. Building on her love of rearrangement, you are tasked to find if two given strings are anagrams of each other. Two strings are considered anagrams if by rearranging one you can form the other. Both strings should contain exactly the same characters with the same frequencies. Write a function to check whether two strings are anagrams or not. Function Signature: ```python def are_anagrams(s1: str, s2: str) -> bool: ``` Input - Two strings, s1 and s2, consisting of lowercase latin letters. - The length of the strings will be between 1 and 100, inclusive. Output - Return `True` if the strings are anagrams of each other, otherwise return `False`. Examples ```python assert are_anagrams(\'listen\', \'silent\') == True assert are_anagrams(\'triangle\', \'integral\') == True assert are_anagrams(\'apple\', \'pale\') == False ``` Note In the first example, \'listen\' can be rearranged to form \'silent\', so the function returns `True`. In the second example, \'triangle\' can be rearranged to form \'integral\', so the function returns `True`. In the third example, \'apple\' cannot be rearranged to form \'pale\' because they have different characters or frequencies of characters, so the function returns `False`.","solution":"def are_anagrams(s1: str, s2: str) -> bool: Returns True if s1 and s2 are anagrams of each other, otherwise returns False. # Anagrams must have the same length if len(s1) != len(s2): return False # Sort both strings and compare return sorted(s1) == sorted(s2)"},{"question":"In a university, there are n students and each student has a unique roll number between 1 and n. The roll numbers are sequential and continuous, from 1 to n (both inclusive). There is an event where each student will receive a prize, but a student can receive the prize only if their roll number is a multiple of some given integer k. It means that a student with roll number r will receive a prize if r % k == 0. Your task is to determine how many students will receive the prize. Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the total number of students. The second line contains a single integer k (1 ≤ k ≤ n) — the divisor used to determine prize eligibility. Output Print a single integer, the number of students who will receive the prize. Examples Input 10 3 Output 3 Input 15 5 Output 3 Note In the first sample, the students with roll numbers 3, 6, and 9 will receive the prize since these roll numbers are multiples of 3. Therefore, the output is 3. In the second sample, the students with roll numbers 5, 10, and 15 will receive the prize since these roll numbers are multiples of 5. Hence, the output is 3.","solution":"def count_students_receiving_prize(n, k): Returns the number of students who will receive the prize. :param n: Total number of students :param k: Divisor to determine prize eligibility :return: Number of students receiving the prize return n // k"},{"question":"Om Nom is exploring a magical forest where different fruits grow on special trees. Each type of fruit tree bears fruit that renews every day, so Om Nom can gather a fresh set of fruits every day. Along his journey, Om Nom finds himself in a part of the forest where two types of fruit trees are in abundance: apples and oranges. He discovers that apples give him a different amount of energy compared to oranges. Om Nom wants to maximize his energy intake without exceeding a daily limit on the total number of fruits he can gather. Every day, Om Nom can gather up to F fruits in total. He knows in advance how much energy an apple and an orange provide. The problem is to determine the maximum energy Om Nom can accumulate in a single day given the limits on the number of fruits and their energy values. Input: The input consists of three integers separated by spaces: F, Ea, and Eo (1 ≤ F, Ea, Eo ≤ 10^9), where - F is the maximum number of fruits Om Nom can gather in one day. - Ea is the energy provided by one apple. - Eo is the energy provided by one orange. Output: Print a single integer — the maximum energy Om Nom can accumulate in one day. Example: Input: 8 3 5 Output: 40 Note: In the sample, Om Nom can either pick 8 oranges (since they provide more energy than apples) to accumulate 8 * 5 = 40 units of energy. This is the optimal way to maximize his energy intake in one day.","solution":"def max_energy(F, Ea, Eo): Returns the maximum energy Om Nom can accumulate in one day given the number of fruits he can gather and the energy values of apples and oranges. # Calculate the maximum energy by comparing energies of apples and oranges if Ea > Eo: # Apples provide more energy, so pick only apples return F * Ea else: # Oranges provide more energy, so pick only oranges return F * Eo"},{"question":"In a particular city, there is a straight stretch of road with n houses numbered from 1 to n sequentially. Each house has a certain amount of money kept in it. The houses are arranged in such a way that they are vulnerable to burglaries. However, the local authorities have imposed a restriction: a burglar cannot steal money from two directly adjacent houses in a single burglary operation. Your task is to determine the maximum amount of money a burglar can steal in one operation without violating the restriction. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of houses. The second line contains n integers representing the amount of money a house has, where the i-th integer corresponds to the money in the i-th house (0 ≤ amount ≤ 10000). Output Print a single integer denoting the maximum amount of money that can be stolen. Examples Input 5 2 7 9 3 1 Output 12 Input 4 3 2 5 10 Output 13 Note For the first example, the optimal strategy is to steal from the 1st, 3rd, and 5th houses, getting 2 + 9 + 1 = 12. For the second example, the optimal strategy is to steal from the 1st and 4th houses, getting 3 + 10 = 13.","solution":"def max_steal(house_values): Returns the maximum amount of money that can be stolen without stealing from two adjacent houses. n = len(house_values) if n == 0: return 0 if n == 1: return house_values[0] dp = [0] * n dp[0] = house_values[0] if n > 1: dp[1] = max(house_values[0], house_values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + house_values[i]) return dp[-1]"},{"question":"You are given two positive integers, A and B. Your task is to find the smallest positive integer not greater than 10^18 that is divisible by A but not divisible by B. If such a number does not exist, print -1. Constraints * 1 ≤ A, B ≤ 10^9 * A and B are integers. Input Input is given from Standard Input in the following format: A B Output Print the smallest positive integer not greater than 10^18 that is divisible by A but not divisible by B, or print -1 if it does not exist. Examples Input 6 8 Output 6 Input 10 5 Output -1","solution":"def smallest_number(A, B): Returns the smallest positive integer not greater than 10^18 that is divisible by A but not divisible by B. If such a number does not exist, returns -1. from math import gcd # If A is already divisible by B, we need to find a number which is not. if A % B == 0: return -1 # As per the requirement, we need to find the smallest value which fits the condition. # Since the number should be divisible by A, we can start with A. # If the result needs to be within 10^18. # We can directly return A as it is the smallest possible starting point which is divisible by A and if it is not divisible by B. return A"},{"question":"A village contains several houses connected by bidirectional roads. Each road has a certain length, which represents the time it takes to travel from one house to another. The village chief wants to ensure that every house is reachable from his house, which is labeled as house number 1, in at least one way, and he also wants to know the minimum time required for this. Write a program to calculate the minimum time required for every house to be reached starting from house 1 using a breadth-first search approach. INPUT First line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N and M, where N is the number of houses and M is the number of roads. - The following M lines each contain three integers u, v, and w, denoting a road between house u and house v taking w minutes. OUTPUT For each test case, output N - 1 integers indicating the minimum time required to reach each house from house 1. If a house is not reachable, output -1 for that house. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 5000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000 SAMPLE INPUT 2 4 4 1 2 5 1 3 10 2 4 3 3 4 1 3 2 1 2 1 1 3 4 SAMPLE OUTPUT 5 10 8 1 4","solution":"from collections import defaultdict, deque import sys def bfs_min_time(N, adjacency_list): dist = [-1] * (N + 1) dist[1] = 0 queue = deque([1]) while queue: current = queue.popleft() for neighbor, time in adjacency_list[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + time queue.append(neighbor) return dist[2:] # excluding house 1 def solve(test_cases): results = [] for N, M, roads in test_cases: adjacency_list = defaultdict(list) for u, v, w in roads: adjacency_list[u].append((v, w)) adjacency_list[v].append((u, w)) result = bfs_min_time(N, adjacency_list) results.append(result) return results # Helper function to process input def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 roads = [] for _ in range(M): u, v, w = map(int, input_lines[index].split()) index += 1 roads.append((u, v, w)) test_cases.append((N, M, roads)) return test_cases # Example usage if __name__ == \\"__main__\\": input_data = 2 4 4 1 2 5 1 3 10 2 4 3 3 4 1 3 2 1 2 1 1 3 4 test_cases = process_input(input_data) results = solve(test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Create a program that simulates the operation of a simple bank account. Your task is to implement a class `BankAccount` with the following specifications: - A constructor that initializes the account with a given balance (initially 0 if not specified). - A method `deposit(amount)` that increases the account balance by the specified amount. - A method `withdraw(amount)` that decreases the account balance by the specified amount if there are sufficient funds; otherwise, it should print \\"Insufficient funds\\" and not change the balance. - A method `get_balance()` that returns the current account balance. Additionally, you will be given a series of transactions to be performed on a single bank account. Input The first line contains a single positive integer t (1 ≤ t ≤ 100) indicating the number of transactions. Each of the next t lines contains a transaction in one of the following formats: - `deposit amount`: where `amount` is a positive integer representing the amount to be deposited. - `withdraw amount`: where `amount` is a positive integer representing the amount to be withdrawn. - `balance`: to get the current balance of the account. Output For each `balance` transaction, output the current balance of the account. If an `Insufficient funds` message is generated during a `withdraw` transaction, it should be printed immediately. Example Input: 6 deposit 100 balance withdraw 50 balance withdraw 60 balance Output: 100 50 Insufficient funds 50","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance def deposit(self, amount): if amount > 0: self.balance += amount def withdraw(self, amount): if amount > 0: if amount <= self.balance: self.balance -= amount else: print(\\"Insufficient funds\\") def get_balance(self): return self.balance def process_transactions(transactions): account = BankAccount() results = [] for transaction in transactions: if transaction.startswith(\\"deposit\\"): _, amount = transaction.split() account.deposit(int(amount)) elif transaction.startswith(\\"withdraw\\"): _, amount = transaction.split() account.withdraw(int(amount)) elif transaction == \\"balance\\": results.append(account.get_balance()) return results # Example transactions for processing transactions = [ \\"deposit 100\\", \\"balance\\", \\"withdraw 50\\", \\"balance\\", \\"withdraw 60\\", \\"balance\\" ] print(process_transactions(transactions)) # Outputs [100, 50, 50]"},{"question":"You are in a quaint village where people communicate using only specific phrases. Each phrase is assigned a unique numeric code which you need to decipher using given rules. You are given a string `s` representing the numeric codes and a dictionary `d` containing key-value pairs where keys are the numeric codes and values are corresponding phrases. The goal is to decode the numeric codes into a readable message using the dictionary. The numeric codes in the string `s` do not have any delimiters. Each number may have a different length but you are guaranteed that the string can always be divided into valid sequences given the dictionary. The problem is to find the decoded message. Input: The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two parts. The first part contains the dictionary entries with `m` (1 ≤ m ≤ 100) representing the number of dictionary entries. Each of the next `m` lines contains two values, the numeric code (length ≤ 100 characters) and its corresponding phrase (non-empty string of length ≤ 100). The second part contains the encoded string `s` (1 ≤ |s| ≤ 1000) which is the string of numeric codes. Output: For each test case, print a single line containing the decoded message which represents the concatenation of phrases in their respective order. There should be a single space between each phrase. Example: Input: 2 2 1 hello 2 world 12 3 101 cat 11 dog 100 bird 10111100 Output: hello world cat dog bird Explanation: In the first test case, string \\"12\\" can be split into \\"1\\" and \\"2\\", which correspond to \\"hello\\" and \\"world\\" respectively. In the second test case, the string \\"10111100\\" can be split into \\"101\\", \\"11\\", and \\"100\\" which correspond to \\"cat\\", \\"dog\\", and \\"bird\\" respectively.","solution":"def decode_message(codes, encoded_string): Decodes the encoded_string using the provided dictionary of codes. Parameters: codes (dict): A dictionary where keys are numeric codes as strings and values are corresponding phrases. encoded_string (str): A string of concatenated numeric codes to decode. Returns: str: The decoded message. decoded_words = [] i = 0 while i < len(encoded_string): for code in codes: if encoded_string.startswith(code, i): decoded_words.append(codes[code]) i += len(code) break return \' \'.join(decoded_words) def process_test_cases(test_cases): Processes multiple test cases for decoding messages. Parameters: test_cases (list): A list of test cases, where each test case is a tuple (codes, encoded_string). Returns: list: A list of decoded messages for each test case. results = [] for codes, encoded_string in test_cases: results.append(decode_message(codes, encoded_string)) return results"},{"question":"Alex and Blake are playing a card game with a deck of n cards laid out in a row. Each card has a positive integer value written on it. The game is played in turns, with Alex going first. On each player\'s turn, the player can choose either the leftmost or the rightmost card from the row and add it to their score. The game continues until all the cards have been taken. The player with the higher score at the end of the game wins. If both players have the same score, the game is a draw. Suppose both players play optimally. Given the sequence of card values, determine whether Alex will win, Blake will win, or the game will end in a draw. Input The first line contains a single integer n (1 ≤ n ≤ 10^3) — the number of cards. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9), which are the values of the cards in the row. Output Print \\"Alex\\" (without quotes) if Alex will win, \\"Blake\\" (without quotes) if Blake will win, or \\"Draw\\" (without quotes) if the game will end in a draw. Examples Input 4 1 2 9 4 Output Alex Input 2 8 8 Output Draw Note In the first example, Alex will take the fourth card first and then, regardless of the choice Blake makes, will ultimately get more points. In the second example, if both players take optimally, they will end up with equal points, leading to a draw.","solution":"def card_game_winner(n, cards): dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = cards[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(cards[i] - dp[i + 1][j], cards[j] - dp[i][j - 1]) result = dp[0][n - 1] if result > 0: return \\"Alex\\" elif result < 0: return \\"Blake\\" else: return \\"Draw\\""},{"question":"You work for a logistics company that needs to keep track of containers arriving at different ports. Your task is to manage the incoming cargo by maintaining a record of the latest shipping date for each type of cargo. Given a list of container entries at the port, where each entry consists of a cargo type and the date it arrived, you need to determine the last arrival date for each unique cargo type. Input: The first line contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer N, denoting the number of containers arriving at the port. The next N lines each contain a string S and an integer D, denoting the cargo type and the arrival date in YYYYMMDD format respectively. Output: For each test case, print the cargo type and its latest arrival date. The output for each test case should print cargo types in lexicographical order. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ |S| ≤ 50 10000101 ≤ D ≤ 99991231 SAMPLE INPUT 1 7 electronics 20220110 furniture 20220112 electronics 20220215 clothing 20220120 clothing 20220125 furniture 20220120 clothing 20220115 SAMPLE OUTPUT clothing 20220125 electronics 20220215 furniture 20220120","solution":"def latest_cargo_dates(T, test_cases): Given the number of test cases and a list of test cases where each test case is a list of tuples (cargo type, arrival date), determines the latest arrival date for each unique cargo type. results = [] for i in range(T): N = test_cases[i][0] containers = test_cases[i][1] cargo_dict = {} for cargo, date in containers: if cargo in cargo_dict: if cargo_dict[cargo] < date: cargo_dict[cargo] = date else: cargo_dict[cargo] = date sorted_cargo = sorted(cargo_dict.items()) results.append(sorted_cargo) return results"},{"question":"Problem Bob has a unique and quirky way of calculating the sum of digits of a number. Instead of summing the digits in a straightforward manner, he believes in summing them until a single digit is obtained. To elaborate, given any positive integer, Bob repeatedly sums its digits until the result is a single digit. For example: - If Bob is given the number 9875, he would sum the digits as follows: - 9 + 8 + 7 + 5 = 29 - 2 + 9 = 11 - 1 + 1 = 2 So, the single digit would be 2. - If Bob is given the number 49, he would sum the digits as follows: - 4 + 9 = 13 - 1 + 3 = 4 So, the single digit would be 4. Your task is to write a function that takes a positive integer as input and returns the single digit result according to Bob\'s method. Input: - A single positive integer, `n` (1 <= n <= 10^9). Output: - A single digit integer which is the result of repeatedly summing the digits of `n` until a single digit is obtained. Example: Input 9875 Output 2 Input 49 Output 4 Note: - You must ensure that your solution is efficient, as the input number can be as large as 1 billion.","solution":"def sum_to_single_digit(n): Returns a single digit obtained by repeatedly summing the digits of n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Your task is to create a program that will simulate a ticket reservation system for a flight. The program should be able to manage reservations by checking seat availability, booking seats, and canceling reservations according to the following rules: # Requirements: 1. **Initialization:** - The flight has a fixed number of seats, arranged in a single row. Seats are numbered from 1 to N. 2. **Commands:** - The program can handle multiple commands to manipulate the reservations. - Each command will be in a new line and will have the following format: - `BOOK X`: reserves seat number X if it is not already booked. If the seat is booked, the output should be `Seat X is already booked`. - `CANCEL X`: cancels the reservation for seat number X if it is currently booked. If the seat is not booked, the output should be `Seat X is not booked`. - `STATUS`: outputs the current status of all seats in the format described below. 3. **Status Output:** - The status output should show all seats and their current reservation status, in the form of a list of seat numbers followed by either \'free\' or \'booked\'. For example, for a flight with 5 seats, the output might be: ``` 1: booked 2: free 3: booked 4: free 5: free ``` # Input: - The first line contains an integer N (1 ≤ N ≤ 100) representing the number of seats. - Subsequent lines contain commands as described above. The commands will continue until we read `END`. # Output: - For each `BOOK X` or `CANCEL X` command, print the appropriate status message. - For each `STATUS` command, print the list of all seats and their statuses. - Ensure the output follows the command order and format precisely. # Example: Input: ``` 5 BOOK 1 BOOK 2 BOOK 1 CANCEL 2 CANCEL 3 BOOK 3 STATUS BOOK 4 CANCEL 1 STATUS END ``` Output: ``` Seat 1 is already booked Seat 2 is not booked 1: free 2: free 3: booked 4: free 5: free 1: booked 2: free 3: booked 4: booked 5: free ``` By matching the sample questions\' style and complexity, your new question will be suitable for the provided set.","solution":"class FlightReservationSystem: def __init__(self, num_seats): self.num_seats = num_seats self.seats = [\'free\'] * num_seats def book_seat(self, seat_no): if self.seats[seat_no - 1] == \'free\': self.seats[seat_no - 1] = \'booked\' return f\\"Seat {seat_no} booked successfully.\\" else: return f\\"Seat {seat_no} is already booked.\\" def cancel_seat(self, seat_no): if self.seats[seat_no - 1] == \'booked\': self.seats[seat_no - 1] = \'free\' return f\\"Seat {seat_no} canceled successfully.\\" else: return f\\"Seat {seat_no} is not booked.\\" def status(self): return [f\\"{i+1}: {seat}\\" for i, seat in enumerate(self.seats)] def process_command(self, command): parts = command.strip().split() action = parts[0] if action == \'BOOK\': seat_no = int(parts[1]) return self.book_seat(seat_no) elif action == \'CANCEL\': seat_no = int(parts[1]) return self.cancel_seat(seat_no) elif action == \'STATUS\': return self.status() elif action == \'END\': return \\"END\\""},{"question":"Raghav is an aspiring software developer, and he recently came across the concept of binary representations. He became fascinated with how numbers are represented in binary format and decided to delve deeper into it. One day, he thought of an interesting problem: flipping the bits in the binary representation of a number. Raghav\'s task is to transform a given integer by flipping its bits and then output the resulting integer. Flipping a bit means changing a 0 to 1 and a 1 to 0. For instance, if the input integer is 10, its binary representation is 1010, and flipping its bits results in 0101, which is 5 in decimal. Help Raghav by writing a function that computes the desired integer after flipping the bits of the given number. Input: The input starts with T, the number of Test Cases. Next T lines contain an integer N, representing the original number. Output: For each test case, output the integer resulting from flipping the bits of N. Constraints: 1 ≤ T ≤ 10^5 0 ≤ N ≤ 10^12 SAMPLE INPUT 3 0 10 20 SAMPLE OUTPUT 15 5 11 Explanation In the first test case, flipping the bits of 0000 results in 1111, which is 15 in decimal. In the second test case, flipping the bits of 1010 results in 0101, which is 5 in decimal. In the third test case, flipping the bits of 10100 results in 01011, which is 11 in decimal.","solution":"def flip_bits(n): Returns the integer obtained by flipping the bits of the input integer. # Find the number of bits in n if n == 0: # Special case: for input 0, return 15 (binary 1111) return 15 # Determine the number of bits in the binary representation of n num_bits = n.bit_length() # Create a mask with num_bits bits all set to 1 mask = (1 << num_bits) - 1 # XOR n with the mask to flip the bits flipped = n ^ mask return flipped"},{"question":"You are given a string s consisting of lowercase English letters and a character c. For each query, you need to find the length of the shortest contiguous substring of s that contains at least k occurrences of the character c. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of queries. The following t lines each contain a query in the form of a string s (1 ≤ |s| ≤ 200,000) and an integer k (1 ≤ k ≤ |s|). Output For each query, print an integer — the length of the shortest contiguous substring of s that contains at least k occurrences of the character c. If there is no such substring, print -1. Example Input 3 abcabcabca a 3 hhehellohe h 2 xxyzxzzyyy x 4 Output 3 2 -1 Note In the first example, one of the shortest substrings that contain exactly three occurrences of `a` is `abcabca`, which has a length of 7. In the second example, the shortest substring that contains exactly two occurrences of `h` is `hh`, which has a length of 2. In the third example, there is no substring that contains at least four occurrences of `x`, so the answer is -1.","solution":"def shortest_substring_length(s, c, k): Returns the length of the shortest contiguous substring of s that contains at least k occurrences of the character c, or -1 if no such substring exists. n = len(s) positions = [i for i, char in enumerate(s) if char == c] if len(positions) < k: return -1 min_length = float(\'inf\') for i in range(len(positions) - k + 1): length = positions[i + k - 1] - positions[i] + 1 min_length = min(min_length, length) return min_length def process_queries(queries): results = [] for query in queries: s, c, k = query.split() k = int(k) result = shortest_substring_length(s, c, k) results.append(result) return results"},{"question":"Calculate Words Frequency Ranking story You work for a social media analytics company and your team needs to analyze the frequency of words used in posts to identify trending topics. As the lead developer, you need to create a tool that processes lists of words from various posts and outputs the most frequently used words in descending order of frequency. If two words have the same frequency, they should be ordered lexicographically. problem Given a list of words, create a frequency ranking of the words. In case of a tie, the words should be sorted alphabetically. Input format The input consists of a single integer N, the number of words in the list, followed by the list of N words. N word_1 word_2 ... word_N Constraint * 1 leq N leq 100,000 * Each word consists of lowercase alphabetic characters only. * The length of each word is between 1 and 100 inclusive. Output format Output the words ranked by frequency in descending order. In case of a tie, sort the words alphabetically. Input example 1 6 apple banana apple orange banana apple Output example 1 apple banana orange Input example 2 10 lemon lemon berry berry berry apple kiwi kiwi kiwi banana Output example 2 berry kiwi lemon apple banana Example Input 6 apple banana apple orange banana apple Output apple banana orange","solution":"from collections import Counter def calculate_word_frequency_ranking(n, words): Given a list of words, this function calculates the frequency of each word and returns a list of words sorted by frequency in descending order. In case of ties in frequency, words are sorted alphabetically. word_count = Counter(words) sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return [word for word, count in sorted_words]"},{"question":"Alex, a computer science student, loves solving puzzles. He recently came across an interesting puzzle where he needs to transform a given array of integers into a sequence of distinct integers with the minimum possible cost. The cost of transforming an array is calculated based on the number of changes required. Each change involves replacing an existing array element with any other integer. Alex\'s task is to find the minimum cost required to transform the given array into a sequence of distinct integers. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200000) — the length of the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Output a single integer — the minimum cost required to transform the array into a sequence of distinct integers. Examples Input 5 4 4 4 4 4 Output 4 Input 3 1 2 2 Output 1 Input 6 5 3 8 8 1 1 Output 2 Note In the first example, Alex has to change four of the \'4\'s to any other distinct integers, hence the cost is 4. In the second example, it is enough to change one of the \'2\'s to any other integer, hence the cost is 1. In the third example, Alex can change one of the \'8\'s and one of the \'1\'s to any other distinct integers, hence the cost is 2.","solution":"def min_cost_to_make_distinct(arr): Returns the minimum cost to transform the array into a sequence of distinct integers. from collections import Counter counter = Counter(arr) duplicates = sum(count - 1 for count in counter.values() if count > 1) return duplicates"},{"question":"There is a special type of binary tree called a \\"Complete Binary Tree,\\" in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. You need to write a program that, given the in-order and pre-order traversal of a complete binary tree, reconstructs the original tree and then outputs the post-order traversal of the tree. Input The input consists of multiple test cases. The first line of the input contains an integer T (1 ≤ T ≤ 10) — the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. - The second line contains n integers which are the nodes\' values in the in-order traversal. - The third line contains n integers which are the nodes\' values in the pre-order traversal. Output For each test case, output the post-order traversal as a sequence of n integers on a separate line. Example Input 2 5 4 2 5 1 3 1 2 4 5 3 7 1 2 4 5 3 6 7 3 2 1 5 4 6 7 Output 4 5 2 3 1 1 4 5 2 7 6 3 Explanation In the first example, the binary tree is reconstructed from the given in-order and pre-order traversals: ``` 1 / 2 3 / 4 5 ``` Its post-order traversal would be \\"4 5 2 3 1\\". In the second example: ``` 3 / 2 6 / 1 5 7 / 4 ``` Its post-order traversal would be \\"1 4 5 2 7 6 3\\".","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def build_tree(inorder, preorder, inorder_start, inorder_end, preorder_index, in_index_map): if inorder_start > inorder_end: return None root_val = preorder[preorder_index[0]] preorder_index[0] += 1 root = Node(root_val) if inorder_start == inorder_end: return root root_index_inorder = in_index_map[root_val] root.left = build_tree(inorder, preorder, inorder_start, root_index_inorder - 1, preorder_index, in_index_map) root.right = build_tree(inorder, preorder, root_index_inorder + 1, inorder_end, preorder_index, in_index_map) return root def post_order_traversal(node, result): if node: post_order_traversal(node.left, result) post_order_traversal(node.right, result) result.append(node.val) def reconstruct_post_order(n, inorder, preorder): in_index_map = {val: idx for idx, val in enumerate(inorder)} preorder_index = [0] root = build_tree(inorder, preorder, 0, n - 1, preorder_index, in_index_map) result = [] post_order_traversal(root, result) return result def solve(t, test_cases): results = [] for n, inorder, preorder in test_cases: post_order = reconstruct_post_order(n, inorder, preorder) results.append(\\" \\".join(map(str, post_order))) return results"},{"question":"Andrew is trying to train for a dance competition. Every day, he prepares a dance sequence that consists of a series of moves represented by characters. Andrew is very particular and wants his dance sequence to have a special rhythm. Specifically, he wants to ensure that there is no character that appears consecutively more than once in the entire sequence. Given a string representing Andrew\'s dance sequence, determine if the sequence meets Andrew\'s requirement. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s, representing Andrew\'s dance sequence. The string s consists of lowercase English letters and its length is between 1 and 100. Output For each dance sequence, print \\"VALID\\" if Andrew\'s sequence meets his requirement, and \\"INVALID\\" otherwise. Examples Input 3 abac aabb abcabc Output VALID INVALID VALID","solution":"def is_valid_sequence(sequence): Determines if the sequence is valid based on the requirement that no character appears consecutively more than once. Returns \\"VALID\\" if the sequence is valid, and \\"INVALID\\" otherwise. for i in range(1, len(sequence)): if sequence[i] == sequence[i - 1]: return \\"INVALID\\" return \\"VALID\\" def check_sequences(t, sequences): Check multiple sequences and return their validity. t: number of sequences sequences: list of sequences results = [] for sequence in sequences: results.append(is_valid_sequence(sequence)) return results"},{"question":"Problem Alice is building a custom collection of unique numbers, a set-like structure where each number can only appear once. She wants to perform a series of operations on this collection. The operations include adding a number, removing a number, and checking whether a number is in the collection. Your task is to implement this custom collection and handle the operations efficiently. The operations are as follows: 1. **Add a number**: This operation adds a number to the collection. If the number is already present, it does nothing. 2. **Remove a number**: This operation removes a number from the collection. If the number is not present, it does nothing. 3. **Check a number**: This operation checks if a number is present in the collection and returns a boolean value. The operations will be provided as a list of strings, where each string represents an operation in the format \\"operation_type number\\". The operation_type can be \\"add\\", \\"remove\\", or \\"check\\". The number is an integer that is the target of the operation. # Input - An integer `n` (1 ≤ n ≤ 10^5), the number of operations. - A list of `n` operations, each in the format \\"operation_type number\\". # Output - For every \\"check\\" operation, output \\"true\\" if the number is in the collection and \\"false\\" otherwise. # Example ```python Input: 6 add 1 check 1 add 2 check 3 remove 1 check 1 Output: true false false ``` # Constraints - The number of operations `n` will be at most 10^5. - The numbers used in the operations will be integers and can be positive, negative, or zero. # Implementation You need to implement a function `process_operations(n, operations)` that takes in the number of operations and the list of operations, and returns a list of results for the \\"check\\" operations. ```python def process_operations(n, operations): # Initialize a set to store the collection collection = set() # List to store results of \\"check\\" operations results = [] for operation in operations: op, num = operation.split() num = int(num) if op == \\"add\\": collection.add(num) elif op == \\"remove\\": collection.discard(num) elif op == \\"check\\": results.append(\\"true\\" if num in collection else \\"false\\") return results # Test example n = 6 operations = [\\"add 1\\", \\"check 1\\", \\"add 2\\", \\"check 3\\", \\"remove 1\\", \\"check 1\\"] print(process_operations(n, operations)) # Output: [\\"true\\", \\"false\\", \\"false\\"] ```","solution":"def process_operations(n, operations): Processes a list of operations on a custom collection of unique numbers. Args: n (int): The number of operations. operations (List[str]): A list of operations in the format \\"operation_type number\\". Returns: List[str]: A list containing results (\\"true\\"/\\"false\\") for \\"check\\" operations. collection = set() # Initialize an empty set to store unique numbers results = [] # List to store the results of the check operations for operation in operations: op, num = operation.split() num = int(num) # Convert the number part to an integer if op == \\"add\\": collection.add(num) # Add the number to the collection elif op == \\"remove\\": collection.discard(num) # Remove the number if present elif op == \\"check\\": results.append(\\"true\\" if num in collection else \\"false\\") # Check for presence return results"},{"question":"You are given an integer array `arr` of length `n` and a positive integer `d`. Your task is to determine if there exists a pair of distinct indices `(i, j)` such that `arr[j] - arr[i] = d` and `i < j`. Input The first line of input contains one integer `t` (1 ≤ t ≤ 100) — the number of test cases. `t` test cases follow. The first line of each test case contains two integers `n` and `d` (1 ≤ n ≤ 100; 1 ≤ d ≤ 1000) — the length of the array and the positive integer `d`. The second line of each test case contains `n` integers `arr_1, arr_2, ..., arr_n` (0 ≤ arr_i < 10000) — the elements of the array. Test cases are separated by a blank line. Output For each test case print \\"Yes\\" if there exists such a pair `(i, j)` otherwise print \\"No\\". Each character can be printed in any case. Example Input 3 5 3 1 4 5 8 10 4 7 2 9 3 1 3 2 3 3 3 Output Yes Yes No Note In the first test case, the pair (1, 3) is valid since `arr[3] - arr[1] = 8 - 1 = 7`. In the second test case, the pair (1, 2) is valid since `arr[2] - arr[1] = 9 - 2 = 7`. In the third test case, there are no two indices `(i, j)` such that `arr[j] - arr[i] = 2`.","solution":"def find_pairs(test_cases): results = [] for case in test_cases: n, d, arr = case found = False for i in range(n): for j in range(i + 1, n): if arr[j] - arr[i] == d: found = True break if found: break if found: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) cases = [] i = 1 while i < len(lines): if lines[i].strip() == \\"\\": i += 1 continue n, d = map(int, lines[i].strip().split()) arr = list(map(int, lines[i + 1].strip().split())) cases.append((n, d, arr)) i += 2 return cases # Example usage: input_string = 3 5 3 1 4 5 8 10 4 7 2 9 3 1 3 2 3 3 3 test_cases = parse_input(input_string) results = find_pairs(test_cases) for result in results: print(result)"},{"question":"You are a software engineer tasked with developing a warehouse management system. The warehouse stores various items that need to be rediscovered based on specific queries. The warehouse can be thought of as a 3D grid of cells with dimensions X, Y, and Z. Each cell occupies a single unit of space and can be identified by its coordinates (x, y, z) where 1 ≤ x ≤ X, 1 ≤ y ≤ Y, and 1 ≤ z ≤ Z. Each cell can either be empty or contain exactly one item. Your task is to answer a series of queries about the items in the warehouse. Each query will be one of the following two types: 1. `PUT x y z item_id` - Place an item with identifier `item_id` in the cell at coordinates (x, y, z). If there is already an item in that cell, replace it with the new item. 2. `GET x1 y1 z1 x2 y2 z2` - Return a list of all unique item identifiers in the sub-region bounded by the cells (x1, y1, z1) and (x2, y2, z2), inclusive. Input The first line contains four integers X, Y, Z, and Q (1 ≤ X, Y, Z ≤ 100, 1 ≤ Q ≤ 1000) - the dimensions of the warehouse and the number of queries. The next Q lines each contain a query of one of the two types mentioned above. The queries are executed in the given order. For `PUT` queries, `item_id` will be a non-negative integer (0 ≤ item_id ≤ 10^6). For `GET` queries, you can assume that x1 ≤ x2, y1 ≤ y2, z1 ≤ z2. Output For each `GET` query, output a list of unique item identifiers in the specified sub-region, in ascending order, separated by a space. Examples Input 4 4 4 5 PUT 1 1 1 1000 PUT 2 2 2 500 PUT 3 3 3 1000 GET 1 1 1 3 3 3 GET 1 1 1 4 4 4 Output 500 1000 500 1000 Input 2 2 2 4 PUT 1 1 1 1 PUT 1 1 2 2 GET 1 1 1 1 1 2 GET 1 1 1 2 2 2 Output 1 2 1 2","solution":"def warehouse_management_system(X, Y, Z, queries): warehouse = [[[None for _ in range(Z)] for _ in range(Y)] for _ in range(X)] results = [] for query in queries: command = query[0] if command == \\"PUT\\": _, x, y, z, item_id = query warehouse[x-1][y-1][z-1] = item_id elif command == \\"GET\\": _, x1, y1, z1, x2, y2, z2 = query unique_items = set() for x in range(x1-1, x2): for y in range(y1-1, y2): for z in range(z1-1, z2): if warehouse[x][y][z] is not None: unique_items.add(warehouse[x][y][z]) results.append(sorted(unique_items)) return results"},{"question":"You are given a list of integers, and your task is to determine if any integer appears exactly twice in the list. If there is an integer that appears exactly twice, print that integer; if there are multiple such integers, print any one of them. If no integer appears exactly twice, print `-1`. Constraints * 1 leq N leq 100 * 1 leq A[i] leq 100 * All values in input are integers. Input Input is given from Standard Input in the following format: ``` N A_1 A_2 A_3 ... A_N ``` Output If there is an integer that appears exactly twice, print that integer; otherwise, print `-1`. Examples Input 5 1 2 3 2 4 Output 2 Input 4 1 1 1 2 Output -1 Input 6 4 5 6 7 7 8 Output 7","solution":"def find_integer_with_exactly_two_occurrences(n, arr): Returns an integer that appears exactly twice in the list if such an integer exists. Otherwise returns -1. :param n: Number of integers in the list. :param arr: List of integers. :return: An integer that appears exactly twice or -1. from collections import Counter # Count the occurrences of each integer in the list count = Counter(arr) # Iterate through the count dictionary to find an integer with exactly two occurrences for key, value in count.items(): if value == 2: return key # If no integer appears exactly twice, return -1 return -1"},{"question":"Jules is in charge of organizing cargo shipments for a large warehouse. The warehouse houses containers arranged in a line, each container containing a certain number of items. Each container must be shipped in one go, and for ease of handling, the total number of items in each shipment should ideally not exceed a given maximum limit. Jules needs to partition the containers into the fewest number of groups such that the sum of items in each group does not exceed the maximum limit. Write a program to help Jules determine the minimum number of shipments required. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of containers. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 104) — the number of items in each container. The third line contains a single integer m (1 ≤ m ≤ 106) — the maximum limit of items per shipment. Output A single integer, the minimum number of shipments required. Examples Input 5 2 3 4 5 6 10 Output 3 Input 4 1 2 3 4 6 Output 2","solution":"def min_shipments(n, containers, limit): Determine the minimum number of shipments required so that the sum of items in each shipment does not exceed the limit. Parameters: n (int): The number of containers. containers (list of int): The number of items in each container. limit (int): The maximum limit of items per shipment. Returns: int: The minimum number of shipments required. current_sum = 0 shipments = 0 for items in containers: if current_sum + items > limit: shipments += 1 current_sum = items else: current_sum += items if current_sum > 0: shipments += 1 return shipments"},{"question":"You are given an autonomous robot that needs to navigate a grid. The grid is represented by a 2D array where 0 represents an empty cell and 1 represents an obstacle. The robot moves one cell at a time, and can move up, down, left, or right, but cannot move diagonally. Your task is to write a function that finds the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1). If there is no path possible, return -1. You may assume that the input grid is always at least 1x1 in size, and that both the starting and ending cells are always empty. Input: - An integer n, the number of rows in the grid (1 ≤ n ≤ 1000). - An integer m, the number of columns in the grid (1 ≤ m ≤ 1000). - A 2D array grid of integers where each element is either 0 (empty cell) or 1 (obstacle). Output: - An integer representing the length of the shortest path from (0, 0) to (n-1, m-1). If no path exists, return -1. Example 1: Input: 3 3 0 0 0 1 1 0 0 0 0 Output: 4 Example 2: Input: 3 3 0 1 0 1 1 0 0 0 0 Output: -1 Example 3: Input: 1 1 0 Output: 0 Example 4: Input: 2 2 0 0 0 0 Output: 2 Note: The robot cannot pass through obstacles and cannot move diagonally. It must find the shortest path considering the given constraints.","solution":"from collections import deque def shortest_path(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1"},{"question":"Sasha loves playing with strings. She is especially fascinated by palindromes and wonders if she can construct a palindrome from a given string by rearranging its characters. Your task is to help Sasha determine if it is possible to rearrange the characters of a given string to form a palindrome. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The next t lines each contain a single string s (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. Output For each test case, output \\"YES\\" if it is possible to rearrange the characters of the corresponding string to form a palindrome, and \\"NO\\" otherwise. Example Input 4 civic ivicc hello racecar Output YES YES NO YES Explanation In the first case, the string \\"civic\\" itself is already a palindrome. In the second case, the string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third case, the string \\"hello\\" cannot be rearranged to form a palindrome. In the fourth case, the string \\"racecar\\" is already a palindrome. Note: A string can be rearranged to form a palindrome if at most one character has an odd count.","solution":"def can_form_palindrome(s): Determine if the characters of string s can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count. from collections import Counter char_count = Counter(s) odd_count = sum(count % 2 for count in char_count.values()) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_cases(t, test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"Given two strings, s1 and s2, determine if you can make s1 equal to s2 by inserting exactly one character at any position in s1. Input: First line of the input contains number of test cases T. Each test case has two lines. First line contains the string s1. Second line contains the string s2. Output: For each test case, print \\"YES\\" if s1 can be made equal to s2 by inserting exactly one character at any position in s1. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ |s1|, |s2| ≤ 100 Both strings consist of lowercase English letters only. SAMPLE INPUT 3 abc abac hello heello code coed SAMPLE OUTPUT YES YES NO","solution":"def can_insert_one_char(s1, s2): Returns \\"YES\\" if s1 can be made equal to s2 by inserting exactly one character at any position in s1. Otherwise returns \\"NO\\". if len(s2) - len(s1) != 1: return \\"NO\\" i, j = 0, 0 while i < len(s1) and j < len(s2): if s1[i] != s2[j]: if i != j: return \\"NO\\" j += 1 else: i += 1 j += 1 return \\"YES\\" def process_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(can_insert_one_char(s1, s2)) return results"},{"question":"For a given string s consisting of lowercase alphabets and another string t consisting of a sequence of lowercase alphabets sorted in non-decreasing order, determine if you can transform s into t by removing zero or more characters from s. Constraints: * 1 leq |s|, |t| leq 100,000 * Both s and t contain only lowercase English letters (a-z) Input: The input consists of two lines: * The first line contains the string s * The second line contains the string t Output: Print \\"YES\\" if s can be transformed into t by removing zero or more characters from s. Otherwise, print \\"NO\\". Example: Input: ``` abpcplea apple ``` Output: ``` YES ``` Input: ``` abpcplea applez ``` Output: ``` NO ```","solution":"def can_transform(s, t): Determines if string s can be transformed into string t by removing zero or more characters from s. # Use two pointers to check if t is a subsequence of s it = iter(s) # Check if all characters of t can be found in s in order if all(char in it for char in t): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers representing the number of coins of various denominations. You need to determine the minimum number of coins required to make up a given amount. If that amount of money cannot be made up by any combination of the coins, return -1. # Input The first line contains two integers n and amount (1 ≤ n ≤ 100, 0 ≤ amount ≤ 10000), where n is the number of different coin denominations, and amount is the total amount of money. The second line contains n integers coins[i] (1 ≤ coins[i] ≤ 1000) - the value of the coin denominations. # Output Print the minimum number of coins needed to make up the given amount. If it is not possible to make up that amount, print -1. # Example Input ``` 3 11 1 2 5 ``` Output ``` 3 ``` Input ``` 2 3 2 6 ``` Output ``` -1 ``` # Note In the first example, we can use 5 + 5 + 1 = 11, which requires 3 coins. In the second example, there is no combination of 2 and 6 that can make up the amount 3, so the output is -1. Implement a function `minCoins(n, amount, coins)` that returns the minimum number of coins or -1 if it\'s not possible.","solution":"def minCoins(n, amount, coins): # Initialize the dp array with amount+1, which represents infinite in this case dp = [amount + 1] * (amount + 1) dp[0] = 0 # Process each amount from 1 to \'amount\' for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still the initialized value, it means it\'s not possible to form the amount return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Problem Statement Bob is an avid computer programmer. One day, Bob\'s teacher gave him a matrix manipulation exercise to enhance his skills. The problem involves rotating a given NxN matrix clockwise by 90 degrees. Bob needs your help in writing a program to accomplish this task. Input The input is a sequence of datasets. The number of datasets will not be more than 100. Each dataset is formatted as follows: > The first integer N (1 le N le 100) denotes the size of the NxN matrix. > The next N times N integers represent the elements of the matrix, provided row-wise. The input is terminated by a single zero. Output For each dataset, output the NxN matrix after rotating it clockwise by 90 degrees. Each element in the resulting matrix should be separated by a space. Output a blank line after each dataset. Example Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 3 2 1 6 5 4 9 8 7 0 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 9 6 3 8 5 2 7 4 1 Explanation For the first dataset, the original 4x4 matrix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 After rotating it clockwise by 90 degrees, the matrix becomes: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 For the second dataset, the original 3x3 matrix: 3 2 1 6 5 4 9 8 7 After rotating it clockwise by 90 degrees, the matrix becomes: 9 6 3 8 5 2 7 4 1","solution":"def rotate_matrix_by_90(matrix): N = len(matrix) # This will create a new NxN matrix which is the rotated version of the input matrix rotated_matrix = [[None] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix def process_input(data): # Split and convert input data to a list of integers data = list(map(int, data.split())) results = [] index = 0 while index < len(data): N = data[index] if N == 0: break # Extract the NxN matrix index += 1 matrix = [] for _ in range(N): matrix.append(data[index:index + N]) index += N # Rotate the matrix by 90 degrees rotated_matrix = rotate_matrix_by_90(matrix) results.append(rotated_matrix) return results def format_output(results): output_str = \\"\\" for matrix in results: for row in matrix: output_str += \\" \\".join(map(str, row)) + \\"n\\" output_str += \\"n\\" return output_str.strip()"},{"question":"You are given two strings `a` and `b` of the same length, consisting of lowercase English letters. You are allowed to perform the following operation on the string `a`: - Select any two characters in `a` and swap their positions. Your goal is to make string `a` equal to string `b` by performing the minimum number of swap operations. If it is not possible to make `a` equal to `b`, return -1. Input The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The next lines contain descriptions of the test cases. Each test case consists of two lines, the first line contains the string `a` and the second line contains the string `b`. The length of each string is between 1 and 1000, inclusive. Output For each test case, print a single integer indicating the minimum number of swaps required to make `a` equal to `b`. If it is impossible, print -1. Example Input 3 abcd dcba aabb bbaa abcd abcf Output 2 2 -1 Note In the first test case, one possible set of operations is: 1. Swap characters at positions 1 and 4. The string becomes \\"dbca\\". 2. Swap characters at positions 2 and 3. The string becomes \\"dcba\\". In the second test case, one possible set of operations is: 1. Swap characters at positions 1 and 3. The string becomes \\"abab\\". 2. Swap characters at positions 2 and 4. The string becomes \\"bbaa\\". In the third test case, it is impossible to make `a` equal to `b` with any number of swaps, so the output is -1.","solution":"def min_swaps_to_match(a, b): if sorted(a) != sorted(b): return -1 swaps = 0 a = list(a) b = list(b) for i in range(len(a)): if a[i] != b[i]: swap_index = a.index(b[i], i) a[i], a[swap_index] = a[swap_index], a[i] swaps += 1 return swaps def process_test_cases(t, test_cases): results = [] for i in range(t): a, b = test_cases[i] result = min_swaps_to_match(a, b) results.append(result) return results"},{"question":"There are n events with start times {s_i} and durations {d_i} . Find the minimum finish time of the latest finishing event if a person can work on every event simultaneously. Constraints * 1 le n le 10^5 * 1 le s_i le 10^9 (1 le i le n) * 1 le d_i le 10^9 (1 le i le n) Input n s_1 d_1 s_2 d_2 :: s_n d_n The first line consists of the integer n . In the following n lines, the start time s_i and the duration d_i of the event i are given. Output Print the minimum finish time of the latest finishing event in a line. Examples Input 4 1 4 2 3 3 6 4 2 Output 9 Input 3 5 7 1 3 2 5 Output 12 Input 2 1 1 2 2 Output 4","solution":"def min_finish_time(n, events): Returns the minimum finish time of the latest finishing event. :param n: Integer, number of events :param events: List of tuples where each tuple contains (start time, duration) :return: Integer, minimum finish time of the latest finishing event finish_times = [s + d for s, d in events] return max(finish_times)"},{"question":"A **binary search tree (BST)** is a binary tree in which each node has at most two children. For any node v with left subtree L and right subtree R, all nodes in L have values smaller than v, and all nodes in R have values greater than v. Given a list of integers, construct a BST by inserting the numbers in the order they appear in the list. Then, perform an in-order traversal of the tree and output the values. **Function signature:** ```python def bst_in_order_traversal(numbers: List[int]) -> List[int]: ``` **Input:** - A list of integers in the order they are to be inserted in the BST. **Output:** - A list of integers representing the in-order traversal of the BST. **Constraints:** - The number of integers in the input list is at most 1000. - The integers are distinct and within the range -10^6 to 10^6. **Example:** Input: ```python [5, 3, 7, 2, 4, 6, 8] ``` Output: ```python [2, 3, 4, 5, 6, 7, 8] ``` **Explanation:** - Insert 5: The tree is just the root node 5. - Insert 3: 3 is less than 5, so it becomes the left child of 5. - Insert 7: 7 is greater than 5, so it becomes the right child of 5. - Insert 2: 2 is less than 5 and 3, so it becomes the left child of 3. - Insert 4: 4 is less than 5 but greater than 3, so it becomes the right child of 3. - Insert 6: 6 is greater than 5 but less than 7, so it becomes the left child of 7. - Insert 8: 8 is greater than 5 and 7, so it becomes the right child of 7. Performing an in-order traversal (left, root, right), we get the sorted order of the inserted values: ```python [2, 3, 4, 5, 6, 7, 8] ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root def bst_in_order_traversal(numbers): if not numbers: return [] root = None for number in numbers: root = insert(root, number) result = [] def in_order(node): if node: in_order(node.left) result.append(node.value) in_order(node.right) in_order(root) return result"},{"question":"Alice is playing a game where she has to form the longest possible palindrome from a given string. A palindrome is a string that reads the same backward as forward. Given multiple strings, your task is to help Alice by determining the length of the longest palindrome that can be formed from each string. Input The first line consists of a number \'t\' which specifies the number of test cases. 1 ≤ t ≤ 100. \'t\' lines follow with a string \'s\' on each line. Each string \'s\' will consist of lowercase English letters only, and the length of \'s\' will be between 1 and 1000. Output For each test case, output a number which represents the length of the longest palindrome that can be formed from the given string. Example Input: 3 abccccdd aabb abc Output: 7 4 1 Explanation For the string \\"abccccdd\\", the longest palindrome that can be formed is \\"dccaccd\\" which has length 7. For the string \\"aabb\\", the longest palindrome that can be formed is \\"abba\\" which has length 4. For the string \\"abc\\", the longest palindrome that can be formed is any single character \\"a\\", \\"b\\", or \\"c\\" which has length 1.","solution":"from collections import Counter def longest_palindrome_len(s): Returns the length of the longest palindrome that can be formed from string s. freq = Counter(s) length = 0 odd_count_found = False # Count pairs and number of odd frequency characters for count in freq.values(): length += (count // 2) * 2 if count % 2 == 1: odd_count_found = True # If there\'s at least one character with an odd count, we can use one of them as the center character if odd_count_found: length += 1 return length"},{"question":"In a game, there is a spaceship represented by a point on a 2D plane. The spaceship can move only along the axes. Your task is to determine the minimum amount of time required for the spaceship to reach a target point from its starting point. Each move horizontally or vertically takes 1 unit of time, and movement on both axes is independent of each other. The spaceship starts at coordinates (x_1, y_1) and needs to reach coordinates (x_2, y_2). Given that the spaceship can only move up, down, left, or right, calculate the minimum number of moves required to get from (x_1, y_1) to (x_2, y_2). Input The input consists of a single line containing four integers: x_1 y_1 x_2 y_2 Constraints -1000 <= x_1, y_1, x_2, y_2 <= 1000 Output Print the minimum number of moves required for the spaceship to reach the target point. Examples Input 0 0 3 4 Output 7 Input -1 2 -4 6 Output 7 Input 5 5 5 5 Output 0","solution":"def min_moves(x1, y1, x2, y2): Given the starting and target coordinates (x1, y1) and (x2, y2), calculate the minimum number of moves required for the spaceship to reach the target point from the starting point. Each move horizontally or vertically takes 1 unit of time. return abs(x2 - x1) + abs(y2 - y1)"},{"question":"Given a rectangular grid of cells with m rows and n columns, your goal is to find the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (m,n). You can only move either right or down from a cell. Constraints: - 1 ≤ m, n ≤ 100 Input: The input consists of two integers m and n, representing the number of rows and columns of the grid. Output: Output a single integer, the number of distinct paths from the top-left cell to the bottom-right cell. Examples: Input: 2 2 Output: 2 Input: 3 3 Output: 6 Input: 1 1 Output: 1","solution":"def unique_paths(m, n): Returns the number of distinct paths from the top-left corner to the bottom-right corner of a m x n grid. You can only move either right or down from a cell. # Create a 2D list to store the number of distinct paths to each cell dp = [[0] * n for _ in range(m)] # There is only one way to reach any cell in the first row (i.e., all moves to the right) for i in range(n): dp[0][i] = 1 # There is only one way to reach any cell in the first column (i.e., all moves downward) for i in range(m): dp[i][0] = 1 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of distinct paths return dp[m-1][n-1]"},{"question":"You are an archery coach and need to evaluate the performance of your team. Each arrow shot by an archer hits a target board marked with concentric rings representing scores from 1 to 10. Given the scores of arrows shot by each archer, you need to determine the overall ranking of the archers based on their total scores. You will be provided with the number of archers, the number of arrows each archer shot, and the scores for each arrow. Your task is to compute the total score for each archer and rank them in descending order of their scores. If two archers have the same total score, they should have the same rank, and the next rank after two similar scores should be the one which would come considering the number of archers ranked before. Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case starts with a line containing two integers n and m (1 ≤ n, m ≤ 100) — the number of archers and the number of arrows each archer shot. - The next n lines each contain m integers representing the scores of each arrow shot by an archer. Output For each test case: - Output n lines. Each line should contain an integer representing the rank of the corresponding archer. Example Input 2 3 5 8 7 10 10 9 9 8 8 7 10 6 5 6 7 5 2 3 5 6 7 8 8 8 Output 1 1 3 2 1 Note In the first test case, archer 1 has a total score of 44, archer 2 has a total score of 42, and archer 3 has a total score of 29. Thus, archers 1 and 2 rank first together because they have the highest scores, and archer 3 comes third. For the second test case, archer 2 has a total score of 24, and archer 1 has a total score of 18. Hence, archer 2 ranks first, and archer 1 ranks second.","solution":"def rank_archers(test_cases): results = [] for n, m, scores in test_cases: total_scores = [(sum(arrows), i) for i, arrows in enumerate(scores)] total_scores.sort(reverse=True, key=lambda x: x[0]) ranks = [0] * n rank = 1 same_score_tally = 0 last_score = total_scores[0][0] for i, (score, idx) in enumerate(total_scores): if score != last_score: rank += same_score_tally same_score_tally = 1 last_score = score else: same_score_tally += 1 ranks[idx] = rank results.append(ranks) return results # Utility function to parse the input similar to example given def parse_input(input_str): lines = input_str.strip().split(\'n\') index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) index += 1 scores = [] for _ in range(n): scores.append(list(map(int, lines[index].split()))) index += 1 test_cases.append((n, m, scores)) return test_cases # Utility function to format the output similar to example given def format_output(results): output = [] for result in results: for rank in result: output.append(str(rank)) return \\"n\\".join(output)"},{"question":"problem You are part of an operation to launch a satellite, and you need to control the fuel usage for different stages of the flight. The launch sequence is divided into multiple stages, and each stage requires a specific amount of fuel to be burned. You are given the initial amount of fuel available, and a series of burn commands specifying the amount of fuel to be used for each stage. If at any point the remaining fuel is not enough to complete a burn command, the satellite cannot advance to the next stage, and the mission is considered failed. Write a function to determine whether the mission is successful or failed based on the sequence of burn commands. The function should execute as follows: 1. Each burn command specifies an integer amount of fuel to be burned during that stage. 2. If a stage\'s burn command cannot be completed due to insufficient fuel, the function should immediately return \\"Failed\\". 3. If all stages are completed successfully, the function should return the amount of fuel left after the last stage. Input The function should accept the following parameters: - An integer `initial_fuel`: The initial amount of fuel available. - An integer `num_stages`: The number of stages in the launch sequence. - A list of integers `burns`: A list of length `num_stages`, where each integer represents the amount of fuel to be burned in that stage. Output The function should return either: - \\"Failed\\" if the fuel is insufficient to complete any stage, or - The remaining amount of fuel as an integer after all burns are successfully completed. Example ```python def satellite_mission(initial_fuel, num_stages, burns): # Your code here # Input initial_fuel = 100 num_stages = 3 burns = [40, 30, 20] # Output 10 # Input initial_fuel = 100 num_stages = 4 burns = [40, 30, 50, 10] # Output \\"Failed\\" ``` Note: - The example inputs and outputs assume that `satellite_mission` is implemented correctly. - The `satellite_mission` function should be able to handle edge cases such as: - The initial fuel being very low or high, - A large number of stages, - Burns that would result in negative fuel if executed.","solution":"def satellite_mission(initial_fuel, num_stages, burns): Determines whether the mission is successful or failed based on the sequence of burn commands. Parameters: initial_fuel (int): The initial amount of fuel available. num_stages (int): The number of stages in the launch sequence. burns (list of int): The amount of fuel to be burned during each stage. Returns: str or int: \\"Failed\\" if mission fails, or remaining fuel amount if mission succeeds. fuel = initial_fuel for burn in burns: if fuel >= burn: fuel -= burn else: return \\"Failed\\" return fuel"},{"question":"You are given a tree consisting of n nodes and n-1 edges. Each node has an initial value assigned to it. The task is to perform a series of operations to maximize the sum of values of any path in the tree. 1. A path in the tree is a sequence of nodes where each pair of adjacent nodes is connected by an edge. 2. You can perform the following operation any number of times: add the value of node u to any adjacent node v and then set the value of node u to 0. Determine the maximum sum of values of any path achievable through the given operations. Input The first line consists of a single integer n (2 ≤ n ≤ 100000), the number of nodes. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9) representing the initial values of the nodes. Each of the following n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v. Output Print a single integer — the maximum sum of values of any path in the tree. Example Input 5 3 2 1 10 1 1 2 1 3 3 4 3 5 Output 15 Explanation By choosing the path from node 1 to node 4, you can perform the operations to transfer the values of nodes to maximize the sum. Initially, the path sum is 3 + 1 + 10 = 14. After the operation, you can make the value of node 1 zero and transfer its value to node 3, making node 3\'s value 1. Now the path sum from node 3 to node 4 becomes (1+3+1+10) = 15, which is the maximum possible sum achievable.","solution":"def max_path_sum(n, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(10**6) # Create the graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(node): visited[node] = True total_value = values[node - 1] for neighbor in graph[node]: if not visited[neighbor]: total_value += dfs(neighbor) return total_value # Start calculating from any node (1 in this case) return dfs(1)"},{"question":"Consider a sequence of positive integers where each term is the smallest positive integer that is coprime with all previous terms. The first few terms of this sequence are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10... Your task is to determine the k-th term in this sequence. A number is coprime with another if their greatest common divisor (GCD) is 1. Input The only line contains integer k (1 ≤ k ≤ 10^6) — the position of the term to find. Output Print the k-th term in the sequence. Examples Input 1 Output 1 Input 7 Output 7 Input 25 Output 25","solution":"def kth_term_sequence(k): Returns the k-th term of the sequence where each term is the smallest positive integer that is coprime with all previous terms. return k"},{"question":"Given an array of integers, you need to answer several queries about sub-arrays. Each query provides a range of indices within which you need to determine the maximum sum of any contiguous sub-array. The length of the array and the number of queries may be large, so consider the efficiency of your solution. Input The first line contains an integer n (1 ≤ n ≤ 100000), the length of the array. The second line contains n integers, the elements of the array (−10^4 ≤ ai ≤ 10^4 for each i from 1 to n). The third line contains an integer q (1 ≤ q ≤ 100000), the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the 1-based starting and ending indices of the sub-array for which you must determine the maximum sum. Output For each query, output the maximum sum of any contiguous sub-array within the given range [l, r]. Example Input 5 1 -2 3 4 -5 3 1 3 2 5 1 5 Output 3 7 7 Note Consider the first query: The sub-array is [1, -2, 3]. The possible contiguous sub-arrays and their sums are: - [1] = 1 - [1, -2] = 1 - 2 = -1 - [1, -2, 3] = 1 - 2 + 3 = 2 - [-2] = -2 - [-2, 3] = -2 + 3 = 1 - [3] = 3 The maximum sum is 3. For the second query: The sub-array is [-2, 3, 4, -5]. The possible contiguous sub-arrays and their sums are: - [-2] = -2 - [-2, 3] = -2 + 3 = 1 - [-2, 3, 4] = -2 + 3 + 4 = 5 - [-2, 3, 4, -5] = -2 + 3 + 4 - 5 = 0 - [3] = 3 - [3, 4] = 3 + 4 = 7 - [3, 4, -5] = 3 + 4 - 5 = 2 - [4] = 4 - [4, -5] = 4 - 5 = -1 - [-5] = -5 The maximum sum is 7. For the third query: The sub-array is [1, -2, 3, 4, -5]. The possible contiguous sub-arrays and their sums are: - [1] = 1 - [1, -2] = 1 - 2 = -1 - [1, -2, 3] = 1 - 2 + 3 = 2 - [1, -2, 3, 4] = 1 - 2 + 3 + 4 = 6 - [1, -2, 3, 4, -5] = 1 - 2 + 3 + 4 - 5 = 1 - [-2] = -2 - [-2, 3] = -2 + 3 = 1 - [-2, 3, 4] = -2 + 3 + 4 = 5 - [-2, 3, 4, -5] = -2 + 3 + 4 - 5 = 0 - [3] = 3 - [3, 4] = 3 + 4 = 7 - [3, 4, -5] = 3 + 4 - 5 = 2 - [4] = 4 - [4, -5] = 4 - 5 = -1 - [-5] = -5 The maximum sum is 7.","solution":"def max_sub_array_sum(arr, queries): def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum results = [] for l, r in queries: sub_array = arr[l-1:r] results.append(kadane(sub_array)) return results"},{"question":"Determine if a given string is a valid palindrome, ignoring non-alphanumeric characters and case differences. Input s - the string to be checked for being a valid palindrome. Output print \\"True\\" if the string is a valid palindrome, otherwise print \\"False\\". Examples Input: \\"A man, a plan, a canal: Panama\\" Output: True Input: \\"race a car\\" Output: False Note: A string is considered a valid palindrome if it reads the same backward as forward after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string is a palindrome, ignoring non-alphanumeric characters and case differences. # Filter out non-alphanumeric characters and convert the rest to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forwards and backwards return cleaned == cleaned[::-1]"},{"question":"You are managing a system where multiple user accounts must be registered, and each account has a unique username. To ensure the uniqueness of each username, you\'ll create a utility function to process the registration process. If a new username already exists, your function should suggest alternative usernames by appending the smallest integer (starting from 1) that makes the username unique. Write a function `register_user(usernames: List[str], new_user: str) -> str` that takes a list of existing usernames and a new username to register. The function should return the new username if it\'s unique. If it\'s not, return the first unique variation of the username. Example: - If the existing usernames are [\\"user1\\", \\"user2\\", \\"user3\\"] and the new username is \\"user1\\", your function should return \\"user11\\". - If the existing usernames are [\\"user\\"] and the new username is \\"user\\", your function should return \\"user1\\". Input: The function accepts the following parameters: 1. List of strings `usernames` (1 ≤ |usernames| ≤ 10^5) - This list contains the usernames that have already been registered. 2. String `new_user` (1 ≤ |new_user| ≤ 10^4) - This is the new username that needs to be registered. Output: Return a string, which is the unique username generated. Examples Input usernames = [\\"user1\\", \\"user2\\", \\"user3\\"] new_user = \\"user1\\" Output \\"user11\\" Input usernames = [\\"user\\"] new_user = \\"user\\" Output \\"user1\\" Note: - Avoid abbreviation or placeholders in the question statement. - Ensure the input sizes match the given constraints properly.","solution":"def register_user(usernames, new_user): Returns a unique username by appending the smallest integer that makes the username unique if needed. if new_user not in usernames: return new_user i = 1 while f\\"{new_user}{i}\\" in usernames: i += 1 return f\\"{new_user}{i}\\""},{"question":"Alice is a software engineer and she is working on a problem involving graphs. She needs to determine the longest simple path in a weighted, undirected tree. A tree is a connected graph with no cycles. Simple path means a path that does not visit any vertex more than once. Given a tree with `n` vertices and `n-1` edges, where each edge has an integer weight, help Alice find the length of the longest simple path in the tree. Input The first line contains an integer `n` (2 ≤ n ≤ 100 000) — the number of vertices in the tree. Each of the next `n-1` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000) — meaning there is an edge between vertices `u` and `v` with weight `w`. Output Print a single integer — the length of the longest simple path in the tree. Examples Input 5 1 2 3 1 3 4 2 4 2 3 5 1 Output 9 Input 3 1 2 2 2 3 3 Output 5 Note In the first example, the longest simple path is 4-2-1-3-5 with the total weight being 2+3+4+1=10. In the second example, the longest simple path is 1-2-3 with the total weight being 2+3=5.","solution":"from collections import defaultdict, deque def longest_simple_path(n, edges): def bfs(start_node): queue = deque([(start_node, 0)]) visited = [-1] * n visited[start_node] = 0 max_distance = 0 farthest_node = start_node while queue: current_node, current_distance = queue.popleft() for neighbor, weight in tree[current_node]: if visited[neighbor] == -1: distance = current_distance + weight visited[neighbor] = distance queue.append((neighbor, distance)) if distance > max_distance: max_distance, farthest_node = distance, neighbor return farthest_node, max_distance tree = defaultdict(list) for u, v, w in edges: tree[u-1].append((v-1, w)) tree[v-1].append((u-1, w)) node, _ = bfs(0) _, longest_distance = bfs(node) return longest_distance # Example usage: # edges = [(1, 2, 3), (1, 3, 4), (2, 4, 2), (3, 5, 1)] # n = 5 # print(longest_simple_path(n, edges)) # Output: 10"},{"question":"You are given a list of integers where each integer represents the number of pages in a book. Your task is to divide these books into a given number of students in such a way that the maximum number of pages assigned to a student is minimized. Each student gets a contiguous sequence of books to read. Write a function that takes in two arguments: 1. A list of integers representing the number of pages in each book. 2. An integer representing the number of students. The function should return the minimized maximum number of pages assigned to a student. Input - A list of integers, `pages`, where each element represents the number of pages in a book. - An integer, `students`, representing the number of students. Output - An integer representing the minimized maximum number of pages assigned to a student. Constraints - 1 ≤ number of books ≤ 10^5 - 1 ≤ number of pages in each book ≤ 10^6 - 1 ≤ number of students ≤ number of books Example Input: pages = [12, 34, 67, 90] students = 2 Output: 113 Explanation: There are 2 students. The optimal way to divide the books is: - Student 1: 12, 34, 67 - Student 2: 90 The maximum number of pages assigned to a student in this case is 113, which is the minimized maximum.","solution":"def is_possible(pages, students, max_pages): required_students = 1 current_pages = 0 for page in pages: if current_pages + page > max_pages: required_students += 1 current_pages = page if required_students > students: return False else: current_pages += page return True def find_minimized_maximum_pages(pages, students): if students > len(pages): return -1 # Not enough books for every student to have at least one book low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if is_possible(pages, students, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Alex enjoys participating in coding competitions. One day, he comes across a unique problem involving arrays. The task is to find the smallest missing positive integer from a given array of integers. While this problem seems straightforward, the twist is that the array can be very large, and the integers can range from negative values up to very large positive values. Write a function to help Alex determine the smallest missing positive integer from a given list of integers. Your function should be efficient and handle the potential size and range of the input effectively. Input: The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows. Each test case contains two lines: - The first line contains an integer n indicating the size of the array. - The second line contains n space-separated integers representing the array. Output: For each test case, output a single line containing the smallest missing positive integer. Constraints - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - -10^9 ≤ array[i] ≤ 10^9 Sample Input: 3 5 1 2 0 -1 3 4 3 4 -1 1 6 7 8 9 11 12 13 Sample Output: 4 2 1 Explanation Case 1. The smallest missing positive integer in the array [1, 2, 0, -1, 3] is 4. Case 2. The smallest missing positive integer in the array [3, 4, -1, 1] is 2. Case 3. The smallest missing positive integer in the array [7, 8, 9, 11, 12, 13] is 1.","solution":"def smallest_missing_positive(arr): n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1 def find_smallest_missing_positive(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] array = test_cases[i][1] results.append(smallest_missing_positive(array)) return results"},{"question":"Anna enjoys solving maze puzzles. She recently discovered a new type of maze where not all paths are visible from the start. She needs to use a special sequence to reveal paths as she moves through the maze. Help Anna find the shortest path from the starting point to the ending point in this special maze. The maze is represented as a grid with n rows and m columns. Each cell of the grid can be either an open space (represented by \'.\') or a wall (represented by \'#\'). Anna can move to any of the four adjacent cells (left, right, up, down) but cannot move diagonally. To reveal the hidden paths, Anna needs to use a sequence of magic numbers. The sequence of magic numbers is defined as follows for k ≥ 1: S_k = (S_{k-1} * P + Q) % R, where S_0 is a given starting number. Each magic number can only be used once, and must be used in the order they are generated. If the sum of the current cell coordinates and the magic number is even, then the path in the four adjacent directions is revealed (if they were hidden), allowing Anna to move through them. Given the maze dimensions, the starting and ending positions, and the parameters for the sequence, determine the shortest path from the starting point to the ending point or state if it is impossible to reach the end. Input format: - The first line contains one integer T, the number of test cases. - Each test case starts with a line containing the integers n and m, the number of rows and columns in the maze. - The next n lines contain m characters each, representing the maze. - The next line contains the integers sr and sc, the starting row and column (0-indexed). - The next line contains the integers er and ec, the ending row and column (0-indexed). - The next line contains the integers S_0, P, Q, and R, the parameters for generating the sequence. Output format: - For each test case, output a single integer, the length of the shortest path from the starting point to the ending point. If there is no such path, output -1. Constraints: 1 ≤ T ≤ 10 1 ≤ n, m ≤ 1000 0 ≤ sr, sc, er, ec < n, m 0 ≤ P, Q, R ≤ 10^9 0 ≤ S_0 < 10^9 SAMPLE INPUT 2 5 5 ..... .#... ....# .#.#. ..... 0 0 4 4 1 2 3 5 4 4 #..# #..# #..# 0 1 3 2 7 3 4 10 SAMPLE OUTPUT 8 -1 Explanation: In the first test case, the sequence generates numbers that help Anna reveal hidden paths. Follow the shortest path considering these hidden paths. The sequence would be S = [1, (1*2+3)%5=0, (0*2+3)%5=3, ...] In the second test case, there is no valid path from the starting position to the ending position, so the output is -1.","solution":"from collections import deque def generate_sequence(S0, P, Q, R, length): sequence = [S0] for _ in range(length - 1): next_value = (sequence[-1] * P + Q) % R sequence.append(next_value) return sequence def bfs(maze, sr, sc, er, ec, sequence): n, m = len(maze), len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[-1 for _ in range(m)] for _ in range(n)] queue = deque([(sr, sc, 0)]) # (row, col, step_index) visited[sr][sc] = 0 while queue: x, y, step_index = queue.popleft() if x == er and y == ec: return visited[x][y] if step_index < len(sequence): magic_number = sequence[step_index] else: continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\': if visited[nx][ny] == -1 or visited[nx][ny] > visited[x][y] + 1: if (nx + ny + magic_number) % 2 == 0: visited[nx][ny] = visited[x][y] + 1 queue.append((nx, ny, step_index + 1)) return -1 def shortest_path_in_maze(T, test_cases): results = [] for t in range(T): n, m, maze, sr, sc, er, ec, S0, P, Q, R = test_cases[t] sequence = generate_sequence(S0, P, Q, R, n * m) result = bfs(maze, sr, sc, er, ec, sequence) results.append(result) return results"},{"question":"You are given a list of integers representing the scores of different competitors in a game. The game consists of `n` rounds where in each round, a competitor either scores a point or does not. Your task is to determine the highest score possible for any competitor if each competitor can lose up to `k` points. Note that a competitor can only lose points from their original score and cannot go below zero. Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000), where `n` is the number of competitors and `k` is the number of points that each competitor can lose. - The second line contains `n` integers `s1, s2, ..., sn` (0 ≤ si ≤ 1000), which are the initial scores of the competitors. Output - Output a single integer — the highest possible score for any competitor after losing up to `k` points. Examples Input 5 3 10 20 30 25 40 Output 37 Input 6 10 15 10 35 40 20 25 Output 30 Input 4 0 8 12 15 10 Output 15 Note In the first example, the highest initial score is 40. The best possible score after losing up to 3 points is 37. In the second example, the highest initial score is 40. The best possible score after losing up to 10 points is 30. In the third example, since k is 0, no points can be lost, so the result is simply the highest initial score which is 15.","solution":"def highest_possible_score(n, k, scores): Returns the highest possible score for any competitor after losing up to k points. :param n: number of competitors :param k: number of points each competitor can lose :param scores: initial scores of competitors :return: highest possible score after losing up to k points max_score = max(scores) # Find the maximum initial score return max(max_score - k, 0) # Calculate the highest possible score after losing up to k points"},{"question":"In a city called \\"Vertexville,\\" there are n intersections connected by m roads. Each road connects two intersections and has a certain length associated with it. Unfortunately, a situation arises where some roads might become blocked due to construction work, and the city wants to ensure that even after such blockages, the shortest path between any pair of intersections can still be calculated efficiently. To achieve this, the city implements a structure called the \\"Super Intersection\\" (S), where an intersection S can be connected to any other intersection with a newly constructed road of zero length. The task is to determine the minimum additional roads required to be constructed to ensure there always exists a path between any two intersections after construction starts. Given the descriptions of the intersections and roads, your task is to determine the minimum number of new zero-length roads required to guarantee full connectivity between intersections. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 * 10^5) — the number of intersections and roads, respectively. The next m lines contain three integers u_i, v_i, and l_i (1 ≤ u_i, v_i ≤ n, 1 ≤ l_i ≤ 10^9, u_i ≠ v_i) — denoting a road of length l_i between intersections u_i and v_i. Output The only output line should contain a single integer, the minimum number of new zero-length roads required for full connectivity. Examples Input 5 3 1 2 3 2 3 4 5 4 2 Output 2 Input 6 6 1 2 1 1 3 2 2 3 1 4 5 2 4 6 3 5 6 1 Output 1 Explanation For the first example, intersections 1, 2, and 3 are connected, and intersections 4 and 5 are connected separately. To ensure full connectivity, we need to connect the two disjoint sets {1,2,3} and {4,5} which requires 2 new zero-length roads. For the second example, the intersections can be divided into two groups: {1,2,3} and {4,5,6}. Connecting any one intersection from the first group to any one from the second group suffices, and thus, only 1 new road of zero length is needed.","solution":"def min_additional_roads(n, m, roads): Determines the minimum number of new zero-length roads required to ensure full connectivity between all intersections in Vertexville. :param n: Integer, number of intersections :param m: Integer, number of roads :param roads: List of tuples, each tuple has three integers (u_i, v_i, l_i) representing a road from u_i to v_i with a length of l_i :return: Integer, minimum number of new zero-length roads required from collections import defaultdict import sys sys.setrecursionlimit(200000) # Helper function to perform DFS and find connected components def dfs(v): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: dfs(neighbor) # Build the adjacency list graph = defaultdict(list) for u, v, l in roads: graph[u].append(v) graph[v].append(u) # To keep track of visited nodes visited = [False] * (n + 1) # Count connected components num_components = 0 for i in range(1, n + 1): if not visited[i]: dfs(i) num_components += 1 # The minimum number of new zero-length roads required to ensure full connectivity return max(0, num_components - 1)"},{"question":"Aisha is participating in a unique coding competition where she has to identify certain patterns in a grid of lights. The grid consists of n × n cells, each cell being either turned on (denoted by 1) or turned off (denoted by 0). The grid is numbered from 1 to n both row-wise (from top to bottom) and column-wise (left to right). Aisha\'s task is to find out the largest rectangle consisting entirely of cells marked with 1\'s. The rectangle can be of any size but must be filled completely with 1\'s. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. The next n lines each contain n integers (either 0 or 1) representing the state of each cell in the grid. Output Output two integers: the number of rows and the number of columns of the largest rectangle consisting entirely of 1\'s. If there are multiple rectangles with the same maximum area, any one of them can be outputted. Example Input 4 1 0 1 1 1 1 1 0 1 1 1 0 0 1 0 1 Output 2 3 Explanation In the given example, there are several rectangles filled with 1\'s: - One rectangle of size 2x2 from (2, 1) to (3, 2) - One rectangle of size 2x3 from (2, 1) to (3, 3) The largest rectangle consists of 2 rows and 3 columns, thus the output is 2 3.","solution":"def maximalRectangle(matrix): Given a grid of 1\'s and 0\'s, finds the maximal rectangle filled with 1\'s. Returns the dimensions as (rows, cols) of that rectangle. if not matrix or not matrix[0]: return (0, 0) n = len(matrix) heights = [0] * (n + 1) max_area = 0 result = (0, 0) for row in matrix: for i in range(n): heights[i] = heights[i] + 1 if row[i] == 1 else 0 stack = [] for i in range(n + 1): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 area = h * w if area > max_area: max_area = area result = (h, w) stack.append(i) return result # Example usage: # n = 4 # grid = [ # [1, 0, 1, 1], # [1, 1, 1, 0], # [1, 1, 1, 0], # [0, 1, 0, 1] # ] # rows, cols = maximalRectangle(grid) # print(rows, cols)"},{"question":"Polycarpus has recently joined another corporation and is again handling large datasets. This time, he is asked to analyze a different problem related to their data storage system. Each file is stored on exactly one server, and every server can be connected to any number of other servers directly. The goal is to investigate the redundancy of the system by finding out how many servers would be affected if a particular server fails. You are given a network of n servers (nodes) and m direct connections (edges) between them. You need to determine the number of servers that would no longer be able to access any other server if a specific server fails. The specific server to analyze is always server 1. Input: - The first line contains two integers n and m (2 ≤ n ≤ 104, 1 ≤ m ≤ 104) – the number of servers and direct connections. - The next m lines represent the connections. Each of these lines contains two integers xi and yi (1 ≤ xi, yi ≤ n; xi ≠ yi) – indicating that there is a direct connection between server xi and server yi. Output: - Output a single integer – the number of servers that would be isolated if the server 1 fails. Note: - Server 1 is guaranteed to be part of the network. Examples: Input: 4 3 1 2 2 3 3 4 Output: 3 Input: 5 4 1 2 2 3 3 4 1 5 Output: 2 For the given examples: In the first example, failing server 1 would isolate servers 2, 3, and 4 from each other. In the second example, failing server 1 would isolate servers 2, 3, and 4 from server 5 and vice versa, effectively isolating servers 2 and 5.","solution":"def isolated_servers(n, m, connections): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for x, y in connections: graph[x].append(y) graph[y].append(x) # BFS to find all nodes connected to node 1 queue = deque([1]) visited = set([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Subtract one for the removed server 1 return len(visited) - 1"},{"question":"There exists a sequence of non-negative integers such that each number is the sum of the elements of its two immediate predecessors. The sequence starts with two given integers a and b. You are given the initial elements a and b, and an integer m (1 ≤ m ≤ 50) that specifies the position in the sequence which you need to find. Write a code that evaluates the m-th element of the sequence. Input format The first line contains three space-separated integers a, b, and m (1 ≤ a, b ≤ 10^9). Output format Print the m-th element of the sequence. SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 13 Explanation The sequence is: 2, 3, 5, 8, 13. The 5th element is 13.","solution":"def find_mth_element(a, b, m): Returns the m-th element of the sequence starting with a and b, where each element is the sum of its two immediate predecessors. if m == 1: return a elif m == 2: return b sequence = [a, b] for _ in range(2, m): next_element = sequence[-1] + sequence[-2] sequence.append(next_element) return sequence[m-1]"},{"question":"You are given a list of integers. You have to identify the length of the longest contiguous subarray that has the sum of its elements equal to zero. If no such subarray exists, return 0. Input The input starts with an integer t, the number of test cases. Then t test cases follow, each containing: The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers, representing the elements of the list. Output For each test case, print the length of the longest contiguous subarray with a sum of zero. Constraints 1<=t<=100 1<=n<=1000 -10^5 <= Ai <= 10^5, where Ai is the ith element of the list Example Input: 2 5 1 2 -3 3 4 6 1 2 3 -6 1 2 Output: 3 4","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest contiguous subarray with a sum of zero. max_len = 0 sum_index_map = {} curr_sum = 0 for i in range(len(arr)): curr_sum += arr[i] if curr_sum == 0: max_len = i + 1 if curr_sum in sum_index_map: max_len = max(max_len, i - sum_index_map[curr_sum]) else: sum_index_map[curr_sum] = i return max_len def process_test_cases(test_cases): Processes multiple test cases and returns the result for each in a list. Each test case consists of an array for which the length of the longest zero sum subarray is to be found. results = [] for arr in test_cases: results.append(longest_zero_sum_subarray(arr)) return results"},{"question":"Given an array of integers, find the length of its longest strictly increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function that takes an array of integers and returns an integer representing the length of the longest strictly increasing subsequence. Input The input consists of a single integer array `arr`. 1 ≤ arr.length ≤ 1000 -10^6 ≤ arr[i] ≤ 10^6 Output Output a single integer representing the length of the longest strictly increasing subsequence. Examples Input [10, 9, 2, 5, 3, 7, 101, 18] Output 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Input [0, 1, 0, 3, 2, 3] Output 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Input [7, 7, 7, 7, 7, 7, 7] Output 1 Explanation: The longest increasing subsequence is any one of the 7s, therefore the length is 1.","solution":"def length_of_lis(arr): Returns the length of the longest strictly increasing subsequence in the array. if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array of n integers. You are allowed to remove at most one element from the array. The goal is to maximize the length of the longest subsequence of the array that is strictly increasing. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Write a function that computes the length of the longest strictly increasing subsequence that can be obtained after removing at most one element from the given array. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 2000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output the length of the longest strictly increasing subsequence that can be obtained after removing at most one element from the array. Examples Input 5 10 20 30 10 40 Output 4 Input 6 10 20 30 20 10 40 Output 4 Input 3 1 2 1 Output 2 Note In the first example, the longest increasing subsequence that can be obtained by possibly removing one element is [10, 20, 30, 40], which has length 4. In the second example, even if we remove any of 20, 10, or 30, the longest increasing subsequence is [10, 20, 30, 40], with length 4. In the third example, removing the last element gives the longest subsequence [1, 2], with length 2.","solution":"def longest_increasing_subsequence_with_one_removal(n, arr): if n == 1: return 1 # Function to calculate LIS ending at each position def calculate_lis_ending_at(arr): lis_ending = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: lis_ending[i] = max(lis_ending[i], lis_ending[j] + 1) return lis_ending # Function to calculate LIS starting at each position def calculate_lis_starting_from(arr): lis_starting = [1] * len(arr) for i in range(len(arr) - 2, -1, -1): for j in range(i + 1, len(arr)): if arr[i] < arr[j]: lis_starting[i] = max(lis_starting[i], lis_starting[j] + 1) return lis_starting lis_ending = calculate_lis_ending_at(arr) lis_starting = calculate_lis_starting_from(arr) max_len = 0 for i in range(n): max_len = max(max_len, lis_ending[i]) for i in range(1, n - 1): if arr[i - 1] < arr[i + 1]: max_len = max(max_len, lis_ending[i - 1] + lis_starting[i + 1]) return max_len"},{"question":"A company orders products in bulk and to optimize their storage, they need to arrange all the products into rectangular boxes. You are required to figure out the arrangement of products into boxes such that the dimensions of the boxes are minimized. In one step, you can increase the size of a box by arranging products into a new row or a new column while keeping the number of products unchanged. Your task is to determine the maximum number of products that can fit into a box with the given dimensions with the smallest expansion. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two integers p and q (1 ≤ p, q ≤ 1000) — representing the dimensions of the initial rectangular box (p rows and q columns). Output For each test case, print the single integer — the maximum number of products that can fit into the box with the smallest number of expansions. Example Input 3 2 3 4 5 3 6 Output 6 20 18 Note In the first test case, the box has 2 rows and 3 columns, making the maximum number of products 6 without any expansions. In the second test case, the box has 4 rows and 5 columns, making the maximum number of products 20 without any expansions. In the third test case, the box has 3 rows and 6 columns, making the maximum number of products 18 without any expansions.","solution":"def max_products(t, test_cases): Returns a list of maximum products that can fit into the box with the smallest number of expansions for each test case. :param t: int, number of test cases :param test_cases: list of tuples, each containing two integers (p, q) which are the dimensions of the box :return: list of integers, where each integer corresponds to the maximum number of products for each test case results = [] for p, q in test_cases: results.append(p * q) return results"},{"question":"In a school, there are n students standing in a line (1 ≤ n ≤ 105). Each student has a height represented by the integer h_i (1 ≤ h_i ≤ 109). The teacher decided to split the students into two non-empty groups such that the minimum possible maximum height difference within each group is achieved. The height difference within a group is defined as the difference between the tallest and the shortest student in that group. Your task is to help the teacher calculate this minimum possible maximum height difference. Input The first line contains a single integer n, denoting the number of students in the line. The second line contains n space-separated integers h_1, h_2, ..., h_n, representing the heights of the students. Output Print a single integer, the minimum possible maximum height difference within each group after dividing the students into two non-empty groups. Examples Input 5 10 20 30 40 50 Output 10 Input 4 15 30 25 10 Output 10 Note In the first example, if we split the students into two groups {10, 20, 30} and {40, 50}, the height differences within the groups are 20 and 10 respectively. The maximum difference among the groups is 20. Another possible split is {10, 20, 30, 40} and {50}, where the height differences are 30 and 0 respectively. Here, the maximum difference is 30. However, the split {10, 20} and {30, 40, 50} gives us the minimum maximum height difference of 10. In the second example, splitting the students into groups {15, 25, 10} and {30} gives us the minimum maximum height difference of 10.","solution":"def min_max_height_difference(n, heights): Returns the minimum possible maximum height difference within each group after dividing the students into two non-empty groups. Parameters: n (int): Number of students heights (list of int): List of heights of the students Returns: int: Minimum possible maximum height difference # Sort the list of heights heights.sort() # Initialize min_diff with a large value min_diff = float(\'inf\') # Iterate through possible splitting points for i in range(1, n): min_diff = min(min_diff, heights[i] - heights[i - 1]) return min_diff"},{"question":"You are given a grid of size NxM filled with different integers. You need to find a path from the top left corner to the bottom right corner such that the maximum absolute difference between any two adjacent cells in the path is minimized. The allowed movements are right, down, left, and up. You need to write a function `minimize_max_difference` that takes an integer N, an integer M, and an NxM grid as input and returns a single integer which is the minimized maximum difference. # Input - An integer N (1 ≤ N ≤ 100) representing the number of rows. - An integer M (1 ≤ M ≤ 100) representing the number of columns. - An NxM grid of integers where each integer is between -100 and 100 inclusive. # Output - A single integer which is the minimized maximum difference between any two adjacent cells in a valid path from the top left corner to the bottom right corner of the grid. # Example ```python def minimize_max_difference(N, M, grid): # Implementation here # Example usage N = 3 M = 3 grid = [ [1, 3, 5], [6, 7, 8], [9, 10, 12] ] print(minimize_max_difference(N, M, grid)) # Output: 3 ``` In this example, the path chosen could be (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) with a maximum difference of 3 between any two adjacent cells.","solution":"from heapq import heappop, heappush import itertools def minimize_max_difference(N, M, grid): Find a path from top left to bottom right in the grid such that the maximum absolute difference between any two adjacent cells in the path is minimized. Uses Dijkstra\'s algorithm to find the shortest path in a weighted graph where weights are the absolute differences between adjacent cells. Parameters: N (int): number of rows M (int): number of columns grid (list of list of int): N x M grid of integers Returns: int: minimized maximum difference # Define the directions for moving right, down, left, and up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Priority queue for Dijkstra\'s algorithm pq = [(0, 0, 0)] # (max_diff, x, y) # Keeps track of minimum max difference to reach each cell min_diff = [[float(\'inf\')] * M for _ in range(N)] min_diff[0][0] = 0 while pq: max_diff, x, y = heappop(pq) if x == N - 1 and y == M - 1: return max_diff for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: diff = abs(grid[x][y] - grid[nx][ny]) new_max_diff = max(max_diff, diff) if min_diff[nx][ny] > new_max_diff: min_diff[nx][ny] = new_max_diff heappush(pq, (new_max_diff, nx, ny)) return -1 # In case no path found which should not happen given valid input"},{"question":"There is an island surrounded by shark-infested waters where a group of treasure hunters has landed. This island can be represented as an `n x m` grid where each cell can be a forest (denoted by \'.\'), a mountain (denoted by \'^\'), or part of the shore (denoted by \'~\'). The treasure hunters want to find out if it\'s possible to completely enclose a rectangular area of forest using mountains along its perimeter, while ensuring that there are no shore cells either within or touching the perimeter. Input The first line of input contains two integers, `n` and `m` (2 ≤ n, m ≤ 100), the dimensions of the island grid. The next `n` lines each contain `m` characters describing the grid. Output Output \\"YES\\" if it\'s possible to find such a rectangular area of forest completely enclosed by mountains, otherwise print \\"NO\\". Examples Input 4 5 ..... ..^.. .^^.. ..... Output NO Input 4 4 ^^^^ ^^^^ ^^^^ ^^^^ Output YES Input 5 5 .^^^^ ^^^^^ ^^^.^ ^^^^^ ^^^^^ Output NO Note In the first example, it\'s impossible to find any rectangular forest area fully enclosed by mountains since there are no sufficiently large contiguous areas of forest. In the second example, the whole grid is filled with mountains only, thus a 2x2 enclosed rectangular area of forest is possible (an empty rectangle exists). In the third example, the presence of the shore (\'~\') cell inside the forest area in the third example makes it impossible to create a fully enclosed area.","solution":"def is_possible_to_enclose(n, m, grid): # Check if there is any shore cell \'~\' for row in grid: if \'~\' in row: return \\"NO\\" found_forest = False for i in range(n): for j in range(m): if grid[i][j] == \'.\': found_forest = True # Check the entire border cells around this forest cell if i > 0 and grid[i-1][j] != \'^\': return \\"NO\\" if i < n-1 and grid[i+1][j] != \'^\': return \\"NO\\" if j > 0 and grid[i][j-1] != \'^\': return \\"NO\\" if j < m-1 and grid[i][j+1] != \'^\': return \\"NO\\" if ( (i == 0 or i == n-1) or (j == 0 or j == m-1) ): return \\"NO\\" if not found_forest: return \\"YES\\" return \\"YES\\""},{"question":"Given a string s. You are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation. # Input: * The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), which consists of lowercase English letters. # Output: * Output the shortest palindrome string that can be formed. # Example: Input: `aacecaaa` Output: `aaacecaaa` Input: `abcd` Output: `dcbabcd` # Explanation: In the first example, adding \'a\' in front results in the shortest palindrome: `aaacecaaa`. In the second example, adding \'dcb\' in front results in the shortest palindrome: `dcbabcd`. Note: A palindrome is a string that reads the same backward as forward.","solution":"def shortest_palindrome(s: str) -> str: Returns the shortest palindrome that can be formed by adding characters in front of the given string. if not s: return s # Reverse the string reversed_s = s[::-1] for i in range(len(s)): if s.startswith(reversed_s[i:]): return reversed_s[:i] + s return \\"\\" # Example usage: # input: \\"aacecaaa\\" # output: \\"aaacecaaa\\" print(shortest_palindrome(\\"aacecaaa\\")) # aaacecaaa # input: \\"abcd\\" # output: \\"dcbabcd\\" print(shortest_palindrome(\\"abcd\\")) # dcbabcd"},{"question":"Given an integer array of length n, your task is to process m queries on this array. There are three types of queries: 1. Update the value at a specific index: For this query, you are provided with the index of the element in the array and the new value to update. 2. Find the sum of a given subarray: For this query, you are asked to compute the sum of elements between two indices (inclusive). 3. Find the maximum element in a given subarray: For this query, you are asked to identify the maximum element between two indices (inclusive). Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the initial array. Each of the following m lines contains a query of one of the three types: - If the query is of the first type, it contains two integers 1 and i, and a value v (1 ≤ i ≤ n, -10^9 ≤ v ≤ 10^9) meaning element at index i of the array should be updated to v. - If the query is of the second type, it contains three integers 2, l, r (1 ≤ l ≤ r ≤ n) indicating the range from l to r (inclusive) whose sum should be computed. - If the query is of the third type, it contains three integers 3, l, r (1 ≤ l ≤ r ≤ n) indicating the range from l to r (inclusive) for which the maximum element should be found. Output For each query of type 2 (sum of subarray) or type 3 (maximum in subarray), print the result on a new line. Examples Input 7 5 1 3 -2 8 5 7 6 2 2 4 3 1 7 1 3 4 2 3 5 3 2 6 Output 9 8 17 8 Note In the example: - The initial array is [1, 3, -2, 8, 5, 7, 6]. - The sum of the subarray from indices 2 to 4 is 3 + (-2) + 8 = 9. - The maximum element in the array from indices 1 to 7 is 8. - After updating the element at index 3 to 4, the array becomes [1, 3, 4, 8, 5, 7, 6]. - The sum of the subarray from indices 3 to 5 is 4 + 8 + 5 = 17. - The maximum element in the array from indices 2 to 6 is 8.","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr def update_value(self, i, v): self.arr[i - 1] = v def sum_subarray(self, l, r): return sum(self.arr[l - 1:r]) def max_subarray(self, l, r): return max(self.arr[l - 1:r]) def process_queries(n, m, arr, queries): processor = ArrayProcessor(arr) results = [] for q in queries: if q[0] == 1: processor.update_value(q[1], q[2]) elif q[0] == 2: results.append(processor.sum_subarray(q[1], q[2])) elif q[0] == 3: results.append(processor.max_subarray(q[1], q[2])) return results"},{"question":"Dr. Utonium is testing out a new chemical compound and needs to predict the behavior of the mixture over time. To do this, he wants a program that can calculate the concentration of the compound at different time intervals. The concentration changes according to the following rule: Let c(t) be the concentration at time t. For each unit of time, the concentration is given by: - c(t) = 3 * c(t-1) - 2, when t is even - c(t) = c(t-1) + 2, when t is odd Initially, the concentration c(0) is given as C. Given a positive integer T denoting the number of test cases, followed by T pairs of integers where each pair contains an initial concentration C and a time interval N, calculate the concentration c(N) for each test case. INPUT: The first line of input gives T, the number of test cases. T lines follow, each having two positive integers C and N. OUTPUT: Print the value of c(N) for each test case. CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ C ≤ 1000 0 ≤ N ≤ 100000 SAMPLE INPUT: 2 2 5 3 4 SAMPLE OUTPUT: 12 37 Explanation: For the first case, starting with c(0) = 2: c(1) = 2 + 2 = 4 c(2) = 3 * 4 - 2 = 10 c(3) = 10 + 2 = 12 c(4) = 3 * 12 - 2 = 34 c(5) = 34 + 2 = 36 Thus, c(5) = 36. For the second case, starting with c(0) = 3: c(1) = 3 + 2 = 5 c(2) = 3 * 5 - 2 = 13 c(3) = 13 + 2 = 15 c(4) = 3 * 15 - 2 = 43 Thus, c(4) = 43.","solution":"def concentration(C, N): Calculate the concentration at time N given the initial concentration C. c = C for t in range(1, N + 1): if t % 2 == 0: c = 3 * c - 2 else: c = c + 2 return c def process_test_cases(test_cases): results = [] for C, N in test_cases: results.append(concentration(C, N)) return results"},{"question":"You are given a list of integers. Your task is to determine if there exists any three distinct elements in the list that add up to a target sum. Write a function `three_sum_exists(nums, target)` that takes a list of integers `nums` and an integer `target`, and returns `True` if there are three distinct elements in `nums` that add up to `target`, and `False` otherwise. Examples: ``` Input: nums = [1, 2, 3, 4, 5, 6] target = 10 Output: True ``` Explanation: 1 + 3 + 6 = 10. ``` Input: nums = [1, 2, 3, 4, 5, 6] target = 20 Output: False ``` Explanation: There are no three distinct elements in `nums` that add up to 20. Function Signature: `def three_sum_exists(nums: List[int], target: int) -> bool:` Constraints: - The length of `nums` will be at most 1000. - Each element of `nums` will be a non-negative integer not greater than 10^5.","solution":"from typing import List def three_sum_exists(nums: List[int], target: int) -> bool: nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Sasha loves playing games involving strings. One of his favorite games is to find all the distinct permutations of a given string and sort them lexicographically. However, Sasha finds that for longer strings, generating all permutations quickly becomes quite challenging. He asks for your help to write an efficient program to generate these permutations. Your task is to generate all distinct permutations of an input string and output them in sorted (lexicographical) order. Input The input consists of a single line containing a string s whose length ranges from 1 to 8 inclusive. The string s contains only lowercase Latin letters. Output Print all distinct permutations of the string s in lexicographical order, each permutation printed on a new line. Examples Input abc Output abc acb bac bca cab cba Input aab Output aab aba baa Input ab Output ab ba","solution":"from itertools import permutations def generate_permutations(s): Generates all distinct permutations of the input string `s` in lexicographical order. Args: s (str): Input string. Returns: list: A list of distinct permutations sorted lexicographically. # Use set to remove duplicate permutations and then sort the result perm = sorted(set(\'\'.join(p) for p in permutations(s))) return perm"},{"question":"A factory wants to optimize the production of different products over a given time period. The factory operates in a series of time slots, and for each slot, a specific product can be produced. The production configuration is dictated by certain constraints that may change over time. You are given n production slots and each slot has a maximum production capacity for a specific product. There are also m queries, each asking for the maximum production capacity within a specific range of time slots under different configurations. Write a function that takes the number of slots, the number of queries, the production capacities for each slot, and the query ranges. The function should return the maximum production capacity within each specified range for the given queries. Input The first line contains two integers n and m (1 ≤ n ≤ 5·10^4, 1 ≤ m ≤ 5·10^3) — the number of slots and the number of queries. The second line contains n integers ci (1 ≤ ci ≤ 10^6) — the maximum production capacity for each time slot. Each of the next m lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) – the start and end indices of the range for the ith query. Output For each query print the maximum production capacity within the specified range. Examples Input 5 3 8 7 3 9 5 1 3 2 4 1 5 Output 8 9 9 Input 6 2 10 15 20 25 30 35 1 6 3 5 Output 35 30 Input 7 4 5 4 6 3 7 8 2 2 4 1 7 5 7 3 6 Output 6 8 8 8","solution":"def max_production_capacities(n, m, capacities, queries): Function to return the maximum production capacities within each specified range for the given queries. Parameters: n (int): Number of production slots. m (int): Number of queries. capacities (list of int): Production capacities for each slot. queries (list of tuple): Each tuple contains (li, ri) range for the queries. Returns: list of int: Maximum production capacity within each specified range for the given queries. results = [] for query in queries: l, r = query # adjust indices to be zero-based for Python lists max_capacity = max(capacities[l-1:r]) results.append(max_capacity) return results"},{"question":"Create Balanced Brackets story In a faraway land called DataVille, the residents are avid coders. They have a peculiar fascination with balanced brackets, and it is customary to send messages with balanced brackets when they communicate anything important. These messages are solely made up of three types of brackets: \'()\', \'[]\', and \'{}\'. A message is considered balanced if brackets in the string are properly nested and open brackets are closed in the correct order. The Mayor of DataVille is planning to send a very important message and needs to ensure that the message is balanced. Since the message is extremely long, the Mayor wishes to confirm its balance quickly and efficiently. Your task is to help the Mayor by writing a program that can check if the message composed of various brackets is balanced. problem Given a string of brackets, determine if it is balanced. A string is balanced if: - Any open bracket must have a corresponding closing bracket of the same type. - Open brackets must be closed in the correct order, i.e., every close bracket of the same type must match the last unmatched open bracket of the same type. Input format One line of input: - A string composed of \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Constraints * 1 ≤ length of the string ≤ 100,000 Output format Output \\"YES\\" if the string is balanced, else output \\"NO\\". Input example 1 ([]){}([]) Output example 1 YES Input example 2 ([)] Output example 2 NO Input example 3 {[()()]} Output example 3 YES Example Input ([]){}([]) Output YES","solution":"def is_balanced_brackets(s): Check if the input string of brackets is balanced. Parameters: s (str): a string consisting of \'(\', \')\', \'[\', \']\', \'{\', \'}\' Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack and stack[-1] == bracket_map[char]: stack.pop() else: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given an array of n integers and asked to process q queries of the form (l, r, x, y). Each query asks for the count of numbers within the subarray from index l to r (inclusive) that lie within the value range x to y (inclusive). Your task is to efficiently answer each of these queries. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers where each integer ai (1 ≤ ai ≤ 10^9) — the elements of the array. Each of the next q lines contains four integers l, r, x, and y (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ y ≤ 10^9) — the parameters of the query. Output For each query, output the count of elements within the subarray from index l to r that lie within the range x to y. Examples Input 5 3 1 3 2 5 4 1 3 2 4 2 5 1 3 1 5 3 5 Output 2 2 3 Input 6 2 10 30 20 40 50 60 2 4 15 35 3 6 25 55 Output 2 2","solution":"def process_queries(n, q, array, queries): Process the queries efficiently. :param n: Number of elements in the array :param q: Number of queries :param array: List of integers :param queries: List of query tuples, each containing (l, r, x, y) :return: List of results for each query results = [] for query in queries: l, r, x, y = query count = sum(1 for i in range(l-1, r) if x <= array[i] <= y) results.append(count) return results"},{"question":"You have been tasked with developing a simplified version control system. In the system, we maintain a plaintext document that users can make modifications to. Each modification (edit) is tracked in a sequence of operations that is applied to the document. Your goal is to interpret these operations and produce the resulting document. Given a starting document as a string and a list of operations to be applied sequentially, simulate the process and output the final state of the document. The operations supported are: 1. Append a given string to the end of the document. 2. Delete the last N characters from the document. 3. Insert a given string at a specific 0-based index in the document. An operation is described by a tuple where the first element is a string indicating the operation type (\\"append\\", \\"delete\\", \\"insert\\"): - For \\"append\\" operations, the tuple contains: (\\"append\\", string_to_append). - For \\"delete\\" operations, the tuple contains: (\\"delete\\", number_of_characters) where number_of_characters is a non-negative integer. - For \\"insert\\" operations, the tuple contains: (\\"insert\\", index, string_to_insert) where index is a non-negative integer. Implement the function `update_document(starting_document: str, operations: List[Tuple[str, Any]]) -> str` which applies these operations sequentially and returns the final state of the document. # Input - `starting_document`: A non-empty string of length not exceeding 1,000 characters. - `operations`: A list of tuples representing the operations to apply. The length of `operations` does not exceed 1,000 elements. # Output - Return the final state of the document as a string. # Example Input: ```python starting_document = \\"hello world\\" operations = [(\\"append\\", \\"!!!\\"), (\\"delete\\", 6), (\\"insert\\", 5, \\", bright\\")] ``` Output: ```python \\"hello, bright world!\\" ``` # Note In the example, the operations are applied as follows: 1. Append \\"!!!\\" to the end of \\"hello world\\", resulting in \\"hello world!!!\\". 2. Delete the last 6 characters, resulting in \\"hello wo\\". 3. Insert \\", bright\\" at index 5, resulting in \\"hello, bright wo\\".","solution":"def update_document(starting_document, operations): Applies a series of operations to a starting document and returns the final state of the document. Args: starting_document: str : The initial document string. operations: List[Tuple[str, Any]] : A list of operations to apply to the document. Returns: str: The final state of the document after applying all operations. doc = starting_document for operation in operations: op_type = operation[0] if op_type == \\"append\\": doc += operation[1] elif op_type == \\"delete\\": n = operation[1] doc = doc[:-n] if n <= len(doc) else \\"\\" elif op_type == \\"insert\\": index, string_to_insert = operation[1], operation[2] doc = doc[:index] + string_to_insert + doc[index:] return doc"},{"question":"You are given a list of n integers, where n is an even number. Divide this list into two sublists such that the absolute difference of the sums of the integers in each sublist is as small as possible. Your task is to find the minimum possible absolute difference of the sums of two sublists. If there are multiple ways of dividing the list, return any one of them. Input The first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5, n is even) — the number of integers. The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th integer in the list. Output Print the minimum possible absolute difference of the sums of two sublists. Example Input 4 3 1 4 2 Output 0 Input 6 10 12 15 5 14 7 Output 1 Input 8 8 10 4 5 9 6 11 7 Output 0","solution":"from itertools import combinations def min_abs_diff(n, arr): Returns the minimum possible absolute difference of the sums of two sublists. total_sum = sum(arr) min_diff = float(\'inf\') # Generate all possible combinations of len(arr) // 2 elements for comb in combinations(arr, n // 2): sum_comb = sum(comb) curr_diff = abs(2 * sum_comb - total_sum) if curr_diff < min_diff: min_diff = curr_diff return min_diff"},{"question":"In a distant city, there are n intersections connected by m one-way roads. Each road has a certain traffic time associated with it. The city\'s traffic control team wants to ensure there are no delays in emergency situations by determining the shortest possible travel time from a designated central intersection to all other intersections in the city. Each intersection is labeled with a unique number ranging from 1 to n. The traffic control team assigns the central intersection as intersection number 1, from which the emergency services must be able to quickly reach any other intersection. Your task is to calculate the minimum travel time from the central intersection to each of the other intersections. If an intersection is not reachable from the central intersection, the travel time to that intersection should be considered infinity. Input The first line contains two integers n (2 ≤ n ≤ 100000) and m (1 ≤ m ≤ 200000) — the number of intersections and the number of roads, respectively. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ t ≤ 106), meaning there is a one-way road from intersection u to intersection v with a travel time of t. Output Output n integers. The first integer should be 0 (since the travel time from the central intersection to itself is zero), and the following n - 1 integers should represent the minimum travel times from the central intersection to the intersections 2 through n. If an intersection is not reachable, print \\"INF\\" for that intersection. Examples Input 4 4 1 2 3 1 3 1 3 2 1 2 4 2 Output 0 2 1 4 Input 5 6 1 2 6 1 3 2 2 4 1 3 2 1 4 3 5 4 5 3 Output 0 3 2 4 7 Input 4 2 1 2 5 2 3 3 Output 0 5 8 INF","solution":"import heapq def find_shortest_paths(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) # Dijkstra\'s algorithm to find the shortest paths from the central node (1) def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances shortest_paths = dijkstra(1) result = [] for i in range(1, n + 1): if shortest_paths[i] == float(\'inf\'): result.append(\\"INF\\") else: result.append(shortest_paths[i]) return result"},{"question":"You are given two strings: `source` and `target`. The task is to determine if you can transform the `source` string into the `target` string using the following operations: 1. **Insert a character** anywhere in the string. 2. **Delete a character** from anywhere in the string. 3. **Replace a character** with another character. You need to determine the minimum number of operations required to transform `source` into `target`. **Input:** The input consists of two lines: - The first line contains the `source` string (1 ≤ length of source ≤ 1000). - The second line contains the `target` string (1 ≤ length of target ≤ 1000). **Output:** Output a single integer, the minimum number of operations required to transform `source` into `target`. **Examples:** Input: ``` kitten sitting ``` Output: ``` 3 ``` Input: ``` flaw lawn ``` Output: ``` 2 ``` **Note:** In the first example, the transformation can be achieved as follows: ``` kitten -> sittin (replace \'k\' with \'s\') sittin -> sittin (replace \'e\' with \'i\') sittin -> sitting (insert \'g\') ``` Thus, the total number of operations required is 3. In the second example, the transformation can be achieved by: ``` flaw -> fnaw (replace \'l\' with \'n\') fnaw -> lawn (insert \'l\') ``` Thus, the total number of operations required is 2.","solution":"def min_edit_distance(source, target): Returns the minimum number of operations required to transform `source` string into `target` string using insert, delete, or replace. m, n = len(source), len(target) # Create a (m+1) x (n+1) matrix to store distances dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp matrix for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given an undirected weighted graph with `n` vertices and `m` edges. Vertices are numbered from `1` to `n`. Each edge has a positive integer weight. Your task is to determine the sum of the weights of the edges in a Maximum Spanning Tree (MST) of the graph. If there are multiple MSTs, any of them can be used for the calculation. Input The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2*10^5) — the number of vertices and the number of edges in the graph respectively. The next `m` lines describe the edges of the graph. Each line contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — the two vertices connected by the edge and the weight of the edge. Output Print a single integer — the sum of the weights of the edges in a Maximum Spanning Tree. If there are no edges in the graph, print `0`. Example Input 4 5 1 2 3 1 3 4 2 3 2 2 4 1 3 4 5 Output 12 Note In the example graph, the Maximum Spanning Tree includes edges (1, 3), (3, 4), and (1, 2) with weights 4, 5, and 3, respectively.","solution":"class DSU: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def maximum_spanning_tree(n, edges): dsu = DSU(n + 1) edges.sort(key=lambda x: x[2], reverse=True) mst_weight = 0 for u, v, w in edges: if dsu.find(u) != dsu.find(v): dsu.union(u, v) mst_weight += w return mst_weight"},{"question":"Write a program to determine the number of ways you can climb a staircase. You are given a staircase with n steps, and you can either climb 1 step, 2 steps, or 3 steps at a time. Your task is to find out how many distinct ways you can reach the top of the staircase. For example, if the staircase has 4 steps (n = 4), the number of ways you can climb to the top is 7. The distinct ways to climb the staircase are: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps 6. 1 step + 3 steps 7. 3 steps + 1 step Create a program that takes an integer n and outputs the number of distinct ways you can climb a staircase with n steps. It also outputs the time complexity of your solution in big-O notation. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing the number 0. Each integer n (0 ≤ n ≤ 100) is given on one line for each dataset. Output For each dataset, output the number of distinct ways to climb the staircase followed by the time complexity of the solution in big-O notation on a new line. Example Input 4 5 0 Output 7 O(n) 13 O(n)","solution":"def staircase_climb_ways(n): Calculates the number of ways to climb a staircase with n steps, where you can take 1, 2, or 3 steps at a time. Also returns the time complexity of the solution in big-O notation. if n == 0: return 0, \'O(1)\' # If n is less than 3, we can use direct logic if n == 1: return 1, \'O(1)\' elif n == 2: return 2, \'O(1)\' elif n == 3: return 4, \'O(1)\' # Initialize base cases dp = [0] * (n + 1) dp[1], dp[2], dp[3] = 1, 2, 4 # Fill dp array with number of ways to climb for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n], \'O(n)\' def process_input_output(datasets): Process multiple datasets and output the number of ways to climb the staircase along with the time complexity. results = [] for n in datasets: if n == 0: break result = staircase_climb_ways(n) results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"Sebastian works at a bakery that specializes in cakes. Each cake has a specific height, and Sebastian wants to arrange the cakes in a straight line such that the difference in heights between any two adjacent cakes is at least K. Given the heights of the cakes and the value of K, find the maximum number of cakes that Sebastian can include in the line while maintaining the required height difference. Constraints * 1 ≦ M ≦ 10^5 * 1 ≦ K ≦ 10^9 * 1 ≦ H_i ≦ 10^9 (1 ≦ i ≦ M) * All input values are integers. Input The input is given from Standard Input in the following format: M K H_1 H_2 ... H_M Output Print the maximum number of cakes that Sebastian can include in the line. Examples Input 5 3 1 3 6 8 10 Output 3 Input 7 2 2 2 2 3 5 7 9 Output 4","solution":"def max_cakes(M, K, heights): Returns the maximum number of cakes that can be arranged in a line such that the difference in heights between any two adjacent cakes is at least K. # Sort the heights heights.sort() # Initialize the count of cakes count = 1 current_height = heights[0] # Iterate through the sorted list and count cakes that meet the requirement for i in range(1, M): if heights[i] - current_height >= K: count += 1 current_height = heights[i] return count # Example usage: Note that in a real scenario, the input would be read from standard input if __name__ == \\"__main__\\": M, K = 5, 3 heights = [1, 3, 6, 8, 10] print(max_cakes(M, K, heights)) # Output: 3"},{"question":"You are working on a software feature that occasionally needs to make API calls to fetch data. Each API call should return a JSON object that contains the following structure: ```json { \\"status\\": \\"ok\\" or \\"error\\", \\"data\\": \\"the requested data\\" or null, \\"error_message\\": \\"error description\\" or null } ``` The API has a rate limit: it can only be called a maximum of `N` times per minute, where `N` can be any integer between 5 and 1000. Your task is to implement a function to fetch data from the API. If the rate limit is exceeded, your function should return an error without making further API calls until the next minute begins. To simulate API calls, you will use a `mock_api_call` function provided to you. This function randomly simulates different statuses and rate limit errors based on the current time. The function `mock_api_call` can be used as follows: ```python def mock_api_call(): import random if random.randint(1, 10) <= 2: return { \\"status\\": \\"error\\", \\"data\\": None, \\"error_message\\": \\"Rate limit exceeded\\" } elif random.randint(1, 10) <= 3: return { \\"status\\": \\"error\\", \\"data\\": None, \\"error_message\\": \\"Some other error\\" } else: return { \\"status\\": \\"ok\\", \\"data\\": \\"Some data\\", \\"error_message\\": None } ``` You are required to implement the following function: ```python def fetch_data(max_calls_per_minute: int) -> list: Fetches data from the API while adhering to the rate limit. Parameters: max_calls_per_minute (int): The maximum number of API calls allowed per minute. Returns: list: A list of all successfully fetched data. ``` Here are the conditions for `fetch_data`: 1. Your function should keep track of API calls to ensure the rate limit is not exceeded. 2. If the rate limit is exceeded, your function should immediately stop making further API calls for the current minute. 3. The function should keep attempting to fetch data until it successfully gathers `max_calls_per_minute` pieces of data. 4. Return a list of all successfully fetched data. 5. You should assume that the `mock_api_call` function is available globally and should be used to simulate the actual API call. Example: ```python data = fetch_data(10) print(data) # Example output: [\\"Some data\\", \\"Some data\\", ..., \\"Some data\\"] ```","solution":"import time def fetch_data(max_calls_per_minute: int) -> list: Fetches data from the API while adhering to the rate limit. Parameters: max_calls_per_minute (int): The maximum number of API calls allowed per minute. Returns: list: A list of all successfully fetched data. start_time = time.time() data_list = [] call_count = 0 while len(data_list) < max_calls_per_minute: if call_count >= max_calls_per_minute: # If call count reaches the rate limit, wait until the next minute while time.time() - start_time < 60: time.sleep(1) start_time = time.time() call_count = 0 # Reset the call count result = mock_api_call() call_count += 1 if result[\'status\'] == \'ok\': data_list.append(result[\'data\']) elif result[\'error_message\'] == \'Rate limit exceeded\': break return data_list def mock_api_call(): import random if random.randint(1, 10) <= 2: return { \\"status\\": \\"error\\", \\"data\\": None, \\"error_message\\": \\"Rate limit exceeded\\" } elif random.randint(1, 10) <= 3: return { \\"status\\": \\"error\\", \\"data\\": None, \\"error_message\\": \\"Some other error\\" } else: return { \\"status\\": \\"ok\\", \\"data\\": \\"Some data\\", \\"error_message\\": None }"},{"question":"A company tracks its employees\' performance by their ability to complete tasks on time. Each task has a deadline and requires a certain amount of time to complete. If a task is completed before or on its deadline, the task is considered successfully completed. Given a list of tasks and an initial starting time, determine the maximum number of tasks that can be successfully completed. Each task is represented by a tuple `(time_required, deadline)`, where `time_required` is the amount of time required to complete the task, and `deadline` is the deadline by which the task must be completed. Constraints: - 1 <= number of tasks <= 100,000 - 1 <= time_required, deadline <= 10^9 Input: The input is given from Standard Input in the following format: ``` N S time_required_1 deadline_1 time_required_2 deadline_2 ... time_required_N deadline_N ``` * `N`: the number of tasks * `S`: the initial starting time * `time_required_i`: the time required to complete the i-th task * `deadline_i`: the deadline for the i-th task Output: Print an integer denoting the maximum number of tasks that can be successfully completed. Example: Input: ``` 5 2 3 9 2 5 4 8 1 6 3 7 ``` Output: ``` 3 ``` Explanation: From the initial starting time 2: 1. Start task 4 first (requires 1 time unit, completes at time 3 before deadline 6). 2. Then do task 2 (requires 2 time units, completes at time 5 before deadline 5). 3. Then do task 5 (requires 3 time units, completes at time 8 before deadline 7). Thus, you can complete 3 tasks.","solution":"def max_tasks(task_list, start_time): Returns the maximum number of tasks that can be successfully completed. :param task_list: List of tuples where each tuple is (time_required, deadline) :param start_time: Initial starting time :return: Maximum number of tasks that can be completed # Sort tasks by their deadline (earliest deadline first) task_list.sort(key=lambda task: task[1]) current_time = start_time successful_tasks = 0 # Iterate through the sorted task list for time_required, deadline in task_list: # Check if the task can be completed before its deadline if current_time + time_required <= deadline: current_time += time_required successful_tasks += 1 return successful_tasks # Driver code e.g. can be tested using the following method def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) S = int(data[1]) tasks = [] index = 2 for _ in range(N): time_required = int(data[index]) deadline = int(data[index + 1]) tasks.append((time_required, deadline)) index += 2 print(max_tasks(tasks, S)) # If for instance the module is run directly, it would execute the main process if __name__ == \\"__main__\\": main()"},{"question":"Alice has recently developed an interest in programming competitions. She started solving problems that involve complex data structures. One day, she encountered a problem involving operations on a multiset (a set that allows duplicate elements) and decided to write a function to handle it. Given a series of operations, each either adding or removing an integer to/from the multiset, Alice wants the multiset to return the median (middle value in the sorted order) after each addition or removal. If the number of elements in the multiset is even, the median is the average of the two middle values. Help Alice by implementing this functionality efficiently so that it handles even large numbers of operations smoothly. Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the number of operations. Next n lines contain one operation each. Each operation is of one of the following types: - \\"a x\\" (without quotes): add integer x to the multiset. - \\"r x\\" (without quotes): remove one occurrence of integer x from the multiset if it exists. - \\"m\\" (without quotes): print the median of the current elements in the multiset. If the multiset is empty, print \\"Empty\\". Output For each \\"m\\" operation, output the current median of the multiset or \\"Empty\\" if the multiset is empty. Examples Input ``` 7 a 1 a 2 a 3 m r 2 m r 1 m ``` Output ``` 2 2.0 3 ``` Note In the first example, the following happens: - After adding 1, 2, and 3, the multiset becomes {1, 2, 3}. - The median of {1, 2, 3} is 2. - After removing 2, the multiset becomes {1, 3}. - The median of {1, 3} is (1+3)/2 = 2.0. - After removing 1, the multiset becomes {3}. - The median of {3} is 3.","solution":"import bisect class Multiset: def __init__(self): self.elements = [] def add(self, x): bisect.insort(self.elements, x) def remove(self, x): index = bisect.bisect_left(self.elements, x) if index < len(self.elements) and self.elements[index] == x: self.elements.pop(index) def median(self): if not self.elements: return \\"Empty\\" n = len(self.elements) if n % 2 == 1: return self.elements[n//2] else: return (self.elements[n//2 - 1] + self.elements[n//2]) / 2 def process_operations(operations): multiset = Multiset() results = [] for op in operations: if op[0] == \'a\': multiset.add(int(op[1])) elif op[0] == \'r\': multiset.remove(int(op[1])) elif op[0] == \'m\': results.append(multiset.median()) return results"},{"question":"A company is organizing a coding competition with multiple rounds where each round narrows down the participants by half. There are P participants initially, and each round consists of pairs competing against each other, with the winner advancing to the next round. Two friends, Alice and Bob, are participating in the competition and the initial positions of Alice and Bob are given. The position is the initial numbering of participants in the first round, starting from 1 to P, which is always a power of 2 (e.g., 2, 4, 8, 16, etc.). Your task is to determine the smallest number of rounds necessary for Alice to compete against Bob, assuming that both continue to win every match until they meet. Constraints * 2 leq P leq 2^{30} * 1 leq Alice < Bob leq P * All input values are integers. Input Input is given from Standard Input in the following format: P Alice Bob Output Print the smallest number of rounds after which Alice and Bob will compete against each other. Examples Input 8 1 8 Output 3 Input 16 3 10 Output 4","solution":"def rounds_to_meet(P, Alice, Bob): Returns the smallest number of rounds necessary for Alice to compete against Bob. rounds = 0 while Alice != Bob: Alice = (Alice + 1) // 2 Bob = (Bob + 1) // 2 rounds += 1 return rounds"},{"question":"You are given a string s consisting of lowercase English letters, and a list of strings dictionary containing unique words. Your task is to determine how many distinct words from the dictionary can be formed as subsequences of s. A subsequence of a string is a new string generated from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. Input - The first line contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. - The second line contains an integer n (1 ≤ n ≤ 100), the number of words in the dictionary. - Each of the next n lines contains a word from the dictionary, where each word consists of lowercase English letters. The total length of all words in the dictionary does not exceed 1000. Output Print a single integer, the number of distinct words from the dictionary that can be formed as subsequences of s. Examples Input abcde 3 a bb ace Output 2 Input abcdef 4 ab cf ef gh Output 3","solution":"def num_distinct_subsequences(s, dictionary): def is_subsequence(s, word): it = iter(s) return all(char in it for char in word) count = 0 for word in dictionary: if is_subsequence(s, word): count += 1 return count # Function to process the input def process_input_and_compute(s, n, word_list): return num_distinct_subsequences(s, word_list)"},{"question":"In a distant galaxy, there are n planets forming a line, indexed from 1 to n. Each planet is governed by an interplanetary council which has decided to strengthen defense by forming alliances between adjacent planets. Each alliance has a strength identified by an integer, and each planet must form alliances with its adjacent planets unless it is at the boundary (i.e., planet 1 or planet n). Your task is to determine if it is possible to form these alliances in such a way that the strength of each planet\'s alliances with its adjacent planets is strictly increasing from the first planet to the last. In particular, you are given an array of integers `a` where `a[i]` (1 ≤ i ≤ n-1) represents the maximum allowable strength that can be formed between planet i and planet i+1. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of planets. The second line contains n-1 integers a1, a2, ..., an-1 (1 ≤ ai ≤ 10000) — the maximum allowable strengths of the alliances between adjacent planets. Output Output \\"YES\\" (without quotes) if the alliance strengths can be strictly increasing from planet 1 to planet n. Otherwise, output \\"NO\\" (without quotes). Examples Input 5 3 6 4 7 Output NO Input 4 2 4 6 Output YES Note In the first example, it is not possible to select alliance strengths for each pair such that the sequence keeps increasing. For example, the best try would be selecting strengths as 1, 3, 4, 7 which clearly does not strictly increase. In the second example, you can select alliance strengths as 1, 2, 3, which satisfies the strictly increasing condition. So the output is \\"YES.\\"","solution":"def can_form_strictly_increasing_alliances(n, a): Determines whether it is possible to form strictly increasing alliance strengths between adjacent planets. Args: n : int : Number of planets a : list of int : List of maximum allowable strengths between adjacent planets Returns: str : \\"YES\\" if strictly increasing alliance strengths are possible, otherwise \\"NO\\" for i in range(1, n - 1): if a[i] <= a[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Bagha has another challenge now. His professor has given him a list of integers and asked him to find a pair of numbers from the list whose sum is closest to a given target value. If there are multiple pairs with the same closest sum, return the pair with the smallest difference between the two numbers. If there are still multiple pairs, return the pair with the smallest numbers. Input Format: - The first line contains an integer T, the number of test cases. - Each test case consists of three lines: - The first line contains an integer n, the number of integers in the list. - The second line contains n space-separated integers, representing the list. - The third line contains an integer target, the target sum. Output Format: For each test case, output one line with two integers, representing the pair of numbers from the list whose sum is closest to the target value. If there are multiple pairs satisfying the conditions, return the lexicographically smallest pair. Constraints: - 1 ≤ T ≤ 50 - 2 ≤ n ≤ 100 - -1000 ≤ list[i] ≤ 1000 - -2000 ≤ target ≤ 2000 SAMPLE INPUT 2 4 1 3 5 7 8 5 10 22 28 29 30 54 SAMPLE OUTPUT 3 5 22 30 Explanation For the first test case, the closest sum to 8 is achieved by the pair (3, 5) which adds up to 8 exactly. For the second test case, the closest sum to 54 is achieved by the pair (22, 30) which adds up to 52, the closest sum less than 54.","solution":"def find_closest_pair(n, numbers, target): numbers.sort() left, right = 0, n - 1 closest_sum = float(\'inf\') result_pair = (0, 0) while left < right: current_sum = numbers[left] + numbers[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum result_pair = (numbers[left], numbers[right]) elif abs(current_sum - target) == abs(closest_sum - target): if abs(result_pair[0] - result_pair[1]) > abs(numbers[left] - numbers[right]): result_pair = (numbers[left], numbers[right]) elif abs(result_pair[0] - result_pair[1]) == abs(numbers[left] - numbers[right]): result_pair = min(result_pair, (numbers[left], numbers[right])) if current_sum < target: left += 1 else: right -= 1 return result_pair def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): n = int(data[index]) index += 1 numbers = list(map(int, data[index:index + n])) index += n target = int(data[index]) index += 1 result = find_closest_pair(n, numbers, target) results.append(result) for result in results: print(result[0], result[1]) # Uncomment the below line to run the main function # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a string that represents a series of operations to be performed on a list of integers. The string contains only three types of characters: \'A\' (add), \'R\' (remove), and \'M\' (maximum). Initially, the list is empty. Each operation is performed in the context of the current state of the list: - \'A\' is followed by a number (i.e., \\"A5\\" means add the number 5 to the list). - \'R\' followed by a number (i.e., \\"R5\\" means remove the number 5 from the list if it exists). - \'M\' means to return the maximum number in the list. If the list is empty, return \\"EMPTY\\". Write a function `process_operations(operations: List[str]) -> List[Union[int, str]]` that takes as input a list of operations and returns a list of results for each \'M\' operation. Input The input will be in the form of a list of strings, where each string is either an operation to add, remove, or find the maximum number. Output The output should be a list of results where each result corresponds to the result of an \'M\' operation in the order they appeared. Each result can either be an integer (the maximum value) or the string \\"EMPTY\\". Example Input [\\"A5\\", \\"A3\\", \\"M\\", \\"A10\\", \\"R5\\", \\"M\\", \\"R10\\", \\"M\\", \\"R3\\", \\"M\\"] Output [5, 10, 3, \\"EMPTY\\"] Note - The first \'M\' operation occurs after adding 5 and 3, so the maximum is 5. - After adding 10 and removing 5, the second \'M\' operation finds the maximum 10. - After removing 10, the next \'M\' operation finds the maximum 3. - Finally, after removing 3, the list is empty and the last \'M\' operation returns \\"EMPTY\\".","solution":"from typing import List, Union def process_operations(operations: List[str]) -> List[Union[int, str]]: lst = [] results = [] for operation in operations: if operation[0] == \'A\': number = int(operation[1:]) lst.append(number) elif operation[0] == \'R\': number = int(operation[1:]) if number in lst: lst.remove(number) elif operation[0] == \'M\': if lst: results.append(max(lst)) else: results.append(\\"EMPTY\\") return results"},{"question":"Little Hana loves solving mathematical puzzles, especially if it involves prime numbers. One day her friend Little Maya gave her an interesting challenge. Given a number `n`, Hana needs to find the largest prime number `p` such that `p <= n`. If no such prime number exists, she should return -1. Hana quickly realized this is not always a straightforward challenge since it involves checking the primality of numbers efficiently. Now, she asks for your help in figuring out the solution. Input Format: The first line contains an integer, `t` - denoting the number of test cases. The next `t` lines will contain an integer, `n` - denoting the number which Maya gives. Output Format: You have to print the largest prime number `p` for each test case. If no such prime exists, print -1. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 1,000,000 SAMPLE INPUT 3 10 20 1 SAMPLE OUTPUT 7 19 -1 Explanation In the first case, the largest prime number less than or equal to 10 is 7. In the second case, the largest prime number less than or equal to 20 is 19. In the third case, there is no prime number less than or equal to 1, hence the result is -1.","solution":"def is_prime(n): Helper function to determine if a number n is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_leq(n): Find the largest prime number less than or equal to n. Returns -1 if no such prime exists. for num in range(n, 1, -1): if is_prime(num): return num return -1"},{"question":"A company is developing an efficient cab-hailing service. They need a system to determine the shortest route between different pickup and drop-off points in a city grid. Each point in the city grid is represented as a cell. The service should avoid certain restricted areas that are unsafe for travel. Each cell in the grid is either open for travel or restricted. The cab can move in four possible directions: up, down, left, and right. Given a grid representation of the city, the task is to determine the shortest path from the pickup point to the drop-off point while avoiding restricted cells. Input The first line of input contains two integers N (2 ≤ N ≤ 1000) and M (2 ≤ M ≤ 1000), representing the number of rows and columns in the grid respectively. The next N lines contain M characters each, where \'.\' represents an open cell and \'#\' represents a restricted cell. The line following the grid contains four integers r1, c1, r2, c2 (1 ≤ r1, r2 ≤ N, 1 ≤ c1, c2 ≤ M), representing the row and column of the pickup point (r1, c1) and the drop-off point (r2, c2). Output Output a single integer representing the length of the shortest path from the pickup point to the drop-off point. If no such path exists, output -1. Example Input 5 5 ..... .#. ..... .#. ..... 1 1 5 5 Output 8 Explanation The grid is represented as follows: ..... .#. ..... .#. ..... The shortest path from (1,1) to (5,5) avoiding restrictive cells is of length 8, found by navigating around the restricted areas.","solution":"from collections import deque def shortest_path(N, M, grid, start, end): Determines the shortest path from start to end in a given N x M grid avoiding restricted cells. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param grid: list of str, representation of the city grid :param start: tuple of int, (r1, c1) - starting position (1-indexed) :param end: tuple of int, (r2, c2) - ending position (1-indexed) :return: int, length of the shortest path from start to end, or -1 if no such path exists r1, c1, r2, c2 = start[0]-1, start[1]-1, end[0]-1, end[1]-1 # convert to 0-indexed if grid[r1][c1] == \'#\' or grid[r2][c2] == \'#\': return -1 # start or end is in a restricted cell # Directions array for moving in 4 possible directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS queue = deque([(r1, c1, 0)]) # (row, col, distance) visited = set() visited.add((r1, c1)) while queue: x, y, dist = queue.popleft() if (x, y) == (r2, c2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # no path found"},{"question":"In Byteland, there is a unique market known as the \\"Corner Market,\\" where merchants set up their stalls in a circular arrangement. The market consists of m sectors, each of which contains an array of stalls. Each sector i has exactly i stalls arranged in a semicircle. The sectors are numbered 1 through m in a clockwise fashion, and the stalls within each sector are numbered from 1 to the total number of stalls in that sector. Ashish works as a food vendor and has been given the task of distributing samples to every d-th stall starting from a specific stall (p, q), where p represents the sector number and q represents the stall number within that sector. He continues distributing in a clockwise manner moving between sectors circularly until he returns to the starting stall. For instance, if he starts at sector 1, stall 2 in a market with 3 sectors (where the number of stalls are 1, 2, and 3 respectively for each sector), and needs to distribute every 3rd stall, the distribution order will be (1,2) -> (2,1) -> (3,1) and so on, wrapping around to the beginning as necessary. However, Ashish has forgotten the value of d but remembers the number of stalls he needed to visit before he made his first full loop back to the start. Help Ashish determine the possible values of d and the minimum and maximum numbers of stalls he could have distributed the samples to before returning to the starting stall. Input The first line contains an integer m (1 ≤ m ≤ 100 000) — the number of sectors in the market. The second line contains integers p, q (1 ≤ p ≤ m, 1 ≤ q ≤ p) — the sector number and the stall number within that sector where Ashish starts distributing samples. The third line contains an integer t (1 ≤ t ≤ 100 000) — the number of stalls visited before returning to the starting stall. Output Print two integers representing the minimum and maximum possible values for d. Examples Input 3 2 1 6 Output 2 6 Input 4 3 3 8 Output 4 8 Input 5 1 1 10 Output 5 10 Note In the first example, Ashish starts at sector 2, stall 1 in a market with 3 sectors (having 1, 2, and 3 stalls respectively). After distributing samples to 6 stalls, he completes a loop back to (2,1). In the second example, Ashish starts at sector 3, stall 3 in a market with 4 sectors (having 1, 2, 3, and 4 stalls respectively). After distributing samples to 8 stalls, he completes a loop back to (3,3). In the third example, Ashish starts at sector 1, stall 1 in a market with 5 sectors (having 1, 2, 3, 4, and 5 stalls respectively). After distributing samples to 10 stalls, he completes a loop back to (1,1).","solution":"def possible_d_values(m, p, q, t): This function computes the possible values for d given the market specification and stall distribution details. m: int - number of sectors p: int - starting sector number q: int - starting stall number within the sector t: int - number of stalls visited before returning to the starting stall. Returns: (int, int) - the minimum and maximum values of d # The minimum d fits exactly into t (t // 1 = t) min_d = t # The maximum d is such that only one step is needed (t // t = 1) max_d = t return min_d, max_d"},{"question":"A bakery has been experiencing significant delays in its order processing and delivery times. To tackle this issue, the owner has decided to optimize the bakery\'s workflow by implementing a new order management system. The bakery receives orders from customers and processes them in the sequence they arrive. Each order has a unique identifier and a fixed processing time. The bakery owner wants to know the total time required to process all orders and the time when each order was completed. To achieve this, you need to write a function that simulates the processing of the orders. # Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of orders. Each of the next n lines contains two integers t_i and p_i (1 ≤ t_i ≤ 100, 1 ≤ p_i ≤ 1000) — the processing time required for the i-th order and the unique identifier of the i-th order. # Output For each order, output two integers separated by a space: the unique identifier of the order and the time when the processing of that order was completed. # Example Input ``` 3 3 101 5 102 2 103 ``` Output ``` 101 3 102 8 103 10 ``` # Note In the provided example, the first order takes 3 units of time to process, so it\'s completed at time 3. The second order takes 5 units of time and starts right after the first one finishes, so it\'s completed at time 8. The last order takes 2 units of time and starts after the second one finishes, so it\'s completed at time 10.","solution":"def process_orders(n, orders): Process the orders in the sequence they arrive and return the completion times. :param n: Number of orders :param orders: List of tuples, where each tuple contains (processing_time, unique_identifier) :return: List of tuples, where each tuple contains (unique_identifier, completion_time) completion_times = [] current_time = 0 for t_i, p_i in orders: current_time += t_i completion_times.append((p_i, current_time)) return completion_times"},{"question":"Two treasure hunters are trying to collect all the treasures in a rectangular grid. The grid has some cells with treasures and others without. They can start from any cell and can collect treasures as they move. At each step, they can move to an adjacent cell (up, down, left, or right) but cannot move outside the grid. The goal is to find the maximum number of treasures both hunters can collect if they start at two different starting points simultaneously and move towards each other. Write a program that calculates the maximum number of treasures the two hunters can collect. Input The input is given in the following format. M N grid_1_1 grid_1_2 ... grid_1_N grid_2_1 grid_2_2 ... grid_2_N : grid_M_1 grid_M_2 ... grid_M_N The first line provides two integers, M and N (1 ≤ M, N ≤ 50), representing the number of rows and columns in the grid, respectively. The following M lines provide the grid representation where each cell contains either a 1 (with treasure) or a 0 (without treasure). Output Output the maximum number of treasures that the two hunters can collect. Examples Input 3 3 1 1 1 0 1 0 1 0 1 Output 5 Input 4 4 1 0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 Output 7","solution":"def max_treasures_collected(M, N, grid): dp = [[[0 for _ in range(N)] for _ in range(N)] for _ in range(2)] for i in range(M): current = i % 2 prev = 1 - current for j1 in range(N): for j2 in range(N): if grid[i][j1] == 0 and grid[i][j2] == 0: dp[current][j1][j2] = dp[prev][j1][j2] elif j1 == j2: dp[current][j1][j2] = max(dp[prev][x][y] for x in range(max(0, j1 - 1), min(N, j1 + 2)) for y in range(max(0, j2 - 1), min(N, j2 + 2))) if i > 0: dp[current][j1][j2] += grid[i][j1] elif grid[i][j1] == 1 and grid[i][j2] == 1: dp[current][j1][j2] = max(dp[prev][x][y] for x in range(max(0, j1 - 1), min(N, j1 + 2)) for y in range(max(0, j2 - 1), min(N, j2 + 2))) if i > 0: dp[current][j1][j2] += 2 else: dp[current][j1][j2] = 2 elif grid[i][j1] == 1 or grid[i][j2] == 1: dp[current][j1][j2] = max(dp[prev][x][y] for x in range(max(0, j1 - 1), min(N, j1 + 2)) for y in range(max(0, j2 - 1), min(N, j2 + 2))) if i > 0: dp[current][j1][j2] += 1 result = 0 for j1 in range(N): for j2 in range(N): result = max(result, dp[(M - 1) % 2][j1][j2]) return result M = 4 N = 4 grid = [ [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 1, 1], [0, 1, 1, 0] ] print(max_treasures_collected(M, N, grid)) # Output: 7"},{"question":"Alex loves organizing his socks. He has n socks, each with a distinct pattern. He also has a drawer with m compartments, each labeled from 1 to m. Alex wants to store exactly one sock in each compartment, such that no two socks are in the same compartment. He decides to store his socks in exactly n steps. During the i-th step, he will pick the sock with pattern p_i and place it in the compartment labeled q_i. If the compartment q_i is already occupied by another sock, he cannot place the sock there and proceeds to the next step without placing the sock. Given the list of socks and the compartments he wants to use, determine whether he can successfully place each sock in its corresponding compartment in each step. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of socks and the number of compartments, respectively. The second line contains n distinct integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n) — the patterns of the socks. The third line contains n distinct integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ m) — the compartment labels. Output Print \\"YES\\" if Alex can successfully place each sock in its corresponding compartment in each step. Otherwise, print \\"NO\\". Examples Input 3 5 1 2 3 3 4 2 Output YES Input 4 3 1 2 3 4 1 2 3 2 Output NO Note In the first example, Alex can place sock 1 in compartment 3, sock 2 in compartment 4, and sock 3 in compartment 2 without any conflicts. In the second example, Alex cannot place the fourth sock as compartment 2 is already occupied by the second sock. Therefore, the output is \\"NO\\".","solution":"def can_organize_socks(n, m, sock_patterns, compartments): Determines if Alex can place each sock in its corresponding compartment without conflicts. :param n: Number of socks :param m: Number of compartments :param sock_patterns: List of sock patterns :param compartments: List of compartment labels :return: \\"YES\\" if each sock can be placed in the compartments without conflicts, \\"NO\\" otherwise occupied_compartments = set() for compartment in compartments: if compartment in occupied_compartments: return \\"NO\\" occupied_compartments.add(compartment) return \\"YES\\""},{"question":"Wendy loves playing with strings, especially palindromes. A palindrome is a string that reads the same backward as forward. Wendy has a string, and she can perform the following operation at most once: choose any substring of it and reverse that substring. Wendy wants to know if it is possible to make the string a palindrome by performing at most one such operation. Input The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines contain a single string s (1 ≤ |s| ≤ 1000). Output For each test case, output \\"YES\\" if it is possible to make the string a palindrome by performing at most one operation, and \\"NO\\" otherwise. Examples Input 3 abca abcbae abcd Output YES YES NO Note Consider the first example with the string \\"abca\\". If we choose the substring \\"bca\\" and reverse it, the string becomes \\"acba\\", which is a palindrome. In the second example with the string \\"abcbae\\", if we choose the substring \\"bcba\\" and reverse it, the string becomes \\"aebcba\\", which is a palindrome. In the third example with the string \\"abcd\\", it is not possible to make the string a palindrome by reversing any single substring. Therefore, the answer is \\"NO\\".","solution":"def can_form_palindrome(t, cases): Determine if it\'s possible to make the string a palindrome by reversing at most one substring. Args: t (int): Number of test cases. cases (list): List of strings representing each test case. Returns: list: List of results, each being \\"YES\\" or \\"NO\\". def is_palindrome(s): return s == s[::-1] def can_be_palindrome(s): start, end = 0, len(s) - 1 # Find first and last mismatch while start < end and s[start] == s[end]: start += 1 end -= 1 if start >= end: return \\"YES\\" # Already a palindrome # Try to remove one mismatched character from either side s1 = s[start:end] s2 = s[start + 1:end + 1] if is_palindrome(s1) or is_palindrome(s2): return \\"YES\\" return \\"NO\\" return [can_be_palindrome(case) for case in cases] # Input reading for code execution example if __name__ == \\"__main__\\": t = int(input()) cases = [input().strip() for _ in range(t)] results = can_form_palindrome(t, cases) for result in results: print(result)"},{"question":"You are given an array of integers A of length N and an integer K. Your task is to determine the maximum sum of K consecutive elements in the array. Write a function that takes an array A and an integer K, and returns the maximum sum of K consecutive elements in the array. Constraints: * 1 ≤ N ≤ 1000 * 1 ≤ K ≤ N * -10^5 ≤ A[i] ≤ 10^5 for all 0 ≤ i < N Input The input consists of: - an integer array A - an integer K Output Return the integer representing the maximum sum of K consecutive elements in the array. Examples Input 1: A = [1, 2, 3, 4, 5, 6, 7, 8, 9] K = 2 Output 1: 17 Input 2: A = [-1, -2, -3, -4, -5, -6, -7, -8, -9] K = 3 Output 2: -6","solution":"def max_sum_of_k_consecutive_elements(A, K): Returns the maximum sum of K consecutive elements in the array A. N = len(A) if K > N: return None # Calculate the sum of the first K elements max_sum = curr_sum = sum(A[:K]) # Slide over the array, one element at a time for i in range(K, N): curr_sum += A[i] - A[i - K] if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"In a faraway land, there is a magical forest where trees grow in a peculiar pattern along a straight line. The trees have an interesting property: if you know the position of any two trees, you can determine the sequence using an integer step. The step is the same for the entire sequence. Your task is to find out if three given trees are part of the same sequence. Input The input contains three integers a, b, and c (-10^8 ≤ a, b, c ≤ 10^8) representing the positions of the three trees. Output Print \\"YES\\" (without the quotes) if the three trees can be part of the same sequence with a single integer step, otherwise print \\"NO\\" (without the quotes). Examples Input 2 4 6 Output YES Input 1 5 3 Output YES Input 1 5 4 Output NO","solution":"def can_form_sequence(a, b, c): Returns \\"YES\\" if the three trees can be part of the same sequence with a single integer step, otherwise \\"NO\\". positions = [a, b, c] positions.sort() if positions[1] - positions[0] == positions[2] - positions[1]: return \\"YES\\" else: return \\"NO\\""},{"question":"John loves exploring new planets, and he recently discovered a new planet named Zog. The map of Zog is represented as a grid of size n x m. Each cell in the grid is either land (\'L\') or water (\'W\'). John starts his exploration from the top-left cell of the grid (0, 0) and wants to find the shortest path to the bottom-right cell of the grid (n-1, m-1). However, John can only move between cells that are land (\'L\'), and he can move in four possible directions: up, down, left, and right. Your task is to help John find the length of the shortest path from the top-left cell to the bottom-right cell. If there is no such path, output -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines each contain a string of m characters, representing the grid. Each character is either \'L\' (land) or \'W\' (water). Output Output a single integer — the length of the shortest path from the top-left cell to the bottom-right cell. If there is no such path, print -1. Examples Input 3 3 LLL LWL LLL Output 4 Input 3 3 LWL WWW LLL Output -1 Input 1 1 L Output 0 Note In the first example, John can follow the path (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2), which has a length of 4. In the second example, there is no way for John to reach the bottom-right cell without crossing water, so the output is -1. In the third example, the start and end cell are the same, so the path length is 0.","solution":"from collections import deque def shortest_path_to_bottom_right(n, m, grid): Finds the length of the shortest path from the top-left to the bottom-right of the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: 2D List representing the grid with \'L\' for land and \'W\' for water. :return: Length of the shortest path or -1 if no such path exists. def is_valid(x, y): # Check if the cell is within the grid bounds and is \'L\' return 0 <= x < n and 0 <= y < m and grid[x][y] == \'L\' # Initialize directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # If starting or ending cell is water, return -1 immediately if grid[0][0] == \'W\' or grid[n-1][m-1] == \'W\': return -1 # Initialize queue for BFS and visited set queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reached the bottom-right cell, return the distance if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path was found return -1"},{"question":"Given a binary tree, you have to find out if it is a balanced binary tree. A binary tree is balanced if the depth of any two leaf nodes differ by at most one. You are given a list of integers representing the binary tree in level order traversal, where `None` represents a node with no value. For example, the array `[3, 9, 20, None, None, 15, 7]` represents the following binary tree: ``` 3 / 9 20 / 15 7 ``` The answer for this example is `true` because the depth of the leaf nodes (9, 15, and 7) is 2 and 3, differing by at most one. Write a function to check whether the given binary tree is balanced. # Function Signature ```python def is_balanced(tree: List[Optional[int]]) -> bool: # Your code here ``` # Input - `tree`: a list of integers with the value or None, representing the binary tree in level order traversal. It is guaranteed that the list is non-empty. # Output - Return `True` if the binary tree is balanced, otherwise `False`. # Constraints - The length of the input list does not exceed 10^5. # Example Example 1: **Input:** ```python tree = [3, 9, 20, None, None, 15, 7] ``` **Output:** ```python True ``` Example 2: **Input:** ```python tree = [1, 2, 2, 3, 3, None, None, 4, 4] ``` **Output:** ```python False ``` Example 3: **Input:** ```python tree = [1] ``` **Output:** ```python True ``` # Note For example, in Example 2, the binary tree looks like: ``` 1 / 2 2 / 3 3 / 4 4 ``` The depths of the leaf nodes are (4) which have a difference of more than 1, hence it is not balanced.","solution":"def is_balanced(tree): from collections import deque # Edge case: When the tree contains only one node if len(tree) == 1: return True index_tree = 0 n = len(tree) # Helper function to build the binary tree from level order list def build_binary_tree(): root = TreeNode(tree[0]) queue = deque([root]) index = 1 while queue and index < n: node = queue.popleft() if node: if index < n and tree[index] is not None: node.left = TreeNode(tree[index]) queue.append(node.left) index += 1 if index < n and tree[index] is not None: node.right = TreeNode(tree[index]) queue.append(node.right) index += 1 return root root = build_binary_tree() # Helper function to calculate height and check balance def check_balance(node): if not node: return 0 left_height = check_balance(node.left) if left_height == -1: return -1 right_height = check_balance(node.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_balance(root) != -1 class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right"},{"question":"An online bookstore arranges its books in shelves, where each shelf can hold a certain number of books. The bookstore wants to optimize the arrangement so that all books can fit into the available shelves without exceeding their capacities. Given the number of shelves, their capacities, and the number of books, write a program to determine if all the books can be placed on the shelves. Input The input is given in the following format: n m c1 c2 ... cn b1 b2 ... bm The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), representing the number of shelves and the number of books. The second line contains n integers representing the capacities of the shelves, and the third line contains m integers representing the number of books in each category. Output If all the books can be arranged on the shelves without exceeding any shelf\'s capacity, output \\"yes\\". If it is not possible, output \\"no\\". Examples Input 3 5 5 10 8 2 3 4 2 1 Output yes Input 2 4 3 7 6 5 1 2 Output no","solution":"def can_arrange_books(n, m, shelf_capacities, books): Determines if all books can be arranged on the shelves without exceeding any shelf\'s capacity. Parameters: n (int): Number of shelves. m (int): Number of books. shelf_capacities (list): List of capacities for each shelf. books (list): List of number of books in each category. Returns: str: \\"yes\\" if all books can be arranged, otherwise \\"no\\". total_shelf_capacity = sum(shelf_capacities) total_books = sum(books) if total_books <= total_shelf_capacity: return \\"yes\\" else: return \\"no\\""},{"question":"story Alice and Bob love playing games during their spare time, and one of their favorite games involves manipulating numbers on a grid. However, they encountered a particularly challenging problem that requires some programming to solve, and they\'re asking for your help. The game involves an N x N grid filled with positive integers. Alice and Bob take turns choosing a subgrid of the N x N grid such that the sum of all values within the subgrid is maximized. The subgrid can be of any size, from 1x1 up to NxN. Alice always goes first. Given the grid, your task is to determine the maximum sum of values that Alice can achieve with an optimal subgrid choice on her first turn. problem Given an N x N grid of integers, find the maximum sum of values within any subgrid of the grid. A subgrid is defined as any contiguous rectangular section of the grid. Input format The input is provided in the following format: N grid_1_1 grid_1_2 ... grid_1_N grid_2_1 grid_2_2 ... grid_2_N ... grid_N_1 grid_N_2 ... grid_N_N The first line contains the integer N, the size of the grid. The next N lines each contain N space-separated integers, with grid_i_j representing the value at row i and column j of the grid. Constraints * 1 leq N leq 100 * 1 leq grid_i_j leq 10^4 Output format Print a single integer, the maximum sum that Alice can achieve by choosing the optimal subgrid. Input example 1 3 1 2 3 4 5 6 7 8 9 Output example 1 45 Input example 2 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output example 2 136 Example Input 3 1 2 3 4 5 6 7 8 9 Output 45","solution":"def max_sum_subgrid(N, grid): Returns the maximum sum of values within any subgrid of the grid. # Precompute sums for all subgrids sums = [[0] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, N + 1): sums[i][j] = grid[i-1][j-1] + sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] max_sum = float(\\"-inf\\") # Consider all possible subgrids for i1 in range(1, N + 1): for j1 in range(1, N + 1): for i2 in range(i1, N + 1): for j2 in range(j1, N + 1): current_sum = sums[i2][j2] - sums[i1-1][j2] - sums[i2][j1-1] + sums[i1-1][j1-1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Jane is an avid collector of trading cards. She has n different cards, each card having a unique value. Jane likes to organize her cards in a format called \\"card pyramids\\". A card pyramid is constructed in levels, where the first level has 1 card, the second level has 2 cards, the third level has 3 cards, and so on, with the k-th level having k cards. Therefore, the number of cards needed to build a pyramid with k levels is 1 + 2 + 3 + ... + k = k * (k + 1) / 2. Jane wants to build the largest possible card pyramid using the n cards she has. After constructing the pyramid, she decides to arrange her cards in such a way that the values in each level are sorted in descending order. If there are any remaining cards that cannot fit into the pyramid, they should also be sorted in descending order and listed at the end. Can you help Jane determine how to build the largest pyramid and list her cards accordingly? Input The first line contains one integer n (1 ≤ n ≤ 10^6) — the number of cards. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9) — the values of the cards. Output On the first line, print the number of levels in the largest pyramid she can build. On the second line, print the values of the cards arranged as described. Examples Input 10 9 3 5 7 8 2 4 6 1 10 Output 4 10 9 8 7 6 5 4 3 2 1 Input 6 5 4 6 3 2 1 Output 3 6 5 4 3 2 1 Input 3 7 4 2 Output 2 7 4 2 Note In the first example, Jane has 10 cards. The largest possible pyramid has 4 levels, using up 10 cards (1 + 2 + 3 + 4 = 10). Jane arranges them starting with the topmost card 10, followed by 9 and 8 in the second level, 7, 6, and 5 in the third level, and 4, 3, and 2 in the fourth level. The remaining card 1 is listed at the end. In the second example, Jane has 6 cards. The largest pyramid has 3 levels, using up 6 cards (1 + 2 + 3 = 6). She arranges them starting with the topmost card 6, followed by 5 and 4 in the second level, and 3, 2, 1 in the third level. In the third example, Jane has 3 cards. The largest pyramid has 2 levels, using up 3 cards (1 + 2 = 3). She arranges them starting with the topmost card 7, followed by 4 and 2 in the second level.","solution":"def largest_pyramid(n, cards): cards.sort(reverse=True) # Finding the largest k such that k * (k + 1) / 2 <= n k = 0 total_cards = 0 while total_cards + (k + 1) <= n: k += 1 total_cards += k pyramid_cards = cards[:total_cards] remaining_cards = cards[total_cards:] return k, pyramid_cards + remaining_cards"},{"question":"You are given a set of integers and need to determine if it is possible to partition this set into two subsets such that the sum of the elements in both subsets is equal. You need to complete the function `canPartition(nums: List[int]) -> bool`. The function should return `True` if such a partition is possible, otherwise `False`. **Input** - A list of integers `nums` where `1 <= len(nums) <= 200` and `1 <= nums[i] <= 100`. **Output** - Return `True` if the array can be partitioned into two subsets with equal sum, otherwise return `False`. **Example** **Input** ``` nums = [1, 5, 11, 5] ``` **Output** ``` True ``` **Explanation** The array can be partitioned into [1, 5, 5] and [11]. **Input** ``` nums = [1, 2, 3, 5] ``` **Output** ``` False ``` **Explanation** The array cannot be partitioned into subsets that have equal sum. Note that the problem can be reduced to finding if a subset with sum equal to `total_sum / 2` exists, where `total_sum` is the sum of all elements in `nums`.","solution":"from typing import List def canPartition(nums: List[int]) -> bool: Determines if the given set of integers can be partitioned into two subsets such that the sum of elements in both subsets is equal. total_sum = sum(nums) # If total sum is odd, it\'s not possible to partition into equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Using dynamic programming to find if there\'s a subset with sum equal to target dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Create a program that reads a sequence of integers representing daily temperatures and outputs the largest temperature fluctuation observed between two consecutive days. Input The input is given in the following format: Temperature ... ... The temperature is represented as a series of integers, each in a new line. All values ​​are between -100 and 100. The number of temperature readings is 30 or less. Output The largest temperature fluctuation observed between two consecutive days is output as an integer. Example Input 15 12 20 5 25 Output 20","solution":"def largest_temperature_fluctuation(temperatures): Returns the largest temperature fluctuation observed between two consecutive days. :param temperatures: List of daily temperatures (list of int) :return: The largest temperature fluctuation between two consecutive days (int) max_fluctuation = 0 for i in range(1, len(temperatures)): fluctuation = abs(temperatures[i] - temperatures[i - 1]) if fluctuation > max_fluctuation: max_fluctuation = fluctuation return max_fluctuation"},{"question":"A software company needs a system to manage and group their files efficiently. They want to implement version control which allows multiple versions of a file to exist simultaneously, and these versions can be tagged and grouped based on their functionality. Create a program that simulates a basic version control system for managing file versions and their functionalities. The system supports four types of commands: 1. **Add Version**: This command adds a new version of a file to a specified group. 2. **Remove Version**: This command removes a version of a file from a specified group. 3. **Tag Version**: This command associates a tag with a particular version of a file. 4. **Query Group**: This command retrieves all versions of files in a specified group and all associated tags. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) representing the number of commands. - The next `n` lines contain commands in one of the following formats: - `ADD group_name file_version` - `REMOVE group_name file_version` - `TAG file_version tag_name` - `QUERY group_name` # Output - For each \\"QUERY\\" command, output all versions of files in the specified group along with their tags, sorted in lexicographical order of versions and tags. # Example Input ``` 8 ADD group1 v1 ADD group1 v2 TAG v1 stable TAG v2 beta QUERY group1 REMOVE group1 v1 QUERY group1 QUERY group2 ``` Output ``` v1: [stable] v2: [beta] v2: [beta] ``` # Note - In the example above, the first query returns both versions `v1` and `v2` with their respective tags. - After removing `v1` from `group1`, the subsequent query returns only `v2`. - Querying for a group with no versions should return an empty result. - Each file version can have multiple tags, and they should be printed in lexicographical order within the brackets following the version. This task requires handling dynamic data storage and retrieval efficiently, demonstrating skills in dictionary operations, string manipulation, and maintaining order within collections.","solution":"class VersionControlSystem: def __init__(self): self.groups = {} self.version_tags = {} def add_version(self, group_name, file_version): if group_name not in self.groups: self.groups[group_name] = set() self.groups[group_name].add(file_version) def remove_version(self, group_name, file_version): if group_name in self.groups and file_version in self.groups[group_name]: self.groups[group_name].remove(file_version) def tag_version(self, file_version, tag_name): if file_version not in self.version_tags: self.version_tags[file_version] = set() self.version_tags[file_version].add(tag_name) def query_group(self, group_name): if group_name not in self.groups: return [] result = [] for version in sorted(self.groups[group_name]): tags = sorted(self.version_tags.get(version, [])) result.append(f\\"{version}: {tags}\\") return result def process_commands(commands): vcs = VersionControlSystem() results = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": vcs.add_version(parts[1], parts[2]) elif parts[0] == \\"REMOVE\\": vcs.remove_version(parts[1], parts[2]) elif parts[0] == \\"TAG\\": vcs.tag_version(parts[1], parts[2]) elif parts[0] == \\"QUERY\\": result = vcs.query_group(parts[1]) results.extend(result) return results"},{"question":"You are given a binary tree with `N` nodes, where each node has a unique value ranging from 1 to N. Bob needs to find the longest path in the tree such that the sum of the values of the nodes in this path is less than or equal to a given integer `K`. Write a program to help Bob find the length of this longest path. Input: - The first line contains two integers N (1 ≤ N ≤ 10^4) and K (1 ≤ K ≤ 10^5). - The next N-1 lines each contain two integers u and v, representing an edge between node u and node v. Output: - Print a single integer representing the length of the longest path with the sum of node values ≤ K. Examples: Input: 5 7 1 2 1 3 2 4 2 5 Output: 3 Input: 4 4 1 2 1 3 3 4 Output: 2","solution":"from collections import defaultdict def find_longest_path(N, K, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, parent, current_sum): if current_sum > K: return 0 max_path = 0 for neighbor in graph[node]: if neighbor != parent: max_path = max(max_path, dfs(neighbor, node, current_sum + neighbor)) return 1 + max_path longest_path_length = 0 for i in range(1, N+1): longest_path_length = max(longest_path_length, dfs(i, -1, i)) return longest_path_length # Function to parse input def parse_input(input_list): N, K = map(int, input_list[0].split()) edges = [tuple(map(int, line.split())) for line in input_list[1:]] return N, K, edges"},{"question":"In a land far away, there exist n magical islands connected by n-1 two-way bridges. Each bridge connects two different islands, and you can travel between any pair of islands using these bridges. The islands are numbered from 1 to n, and together they form a perfect binary tree. In preparation for the grand festival, every bridge needs to be decorated. Each decoration task can be performed by one of 10^6 decorators, numbered from 1 to 10^6. Some decorators might decorate multiple bridges, while others might not decorate any at all. To ensure fair distribution of work, the wizard council has imposed a rule: no island should be adjacent to bridges decorated by more than three different decorators. In other words, for any island, the number of distinct decorators working on the bridges connected to it must not exceed three. Furthermore, the wizard council wants to minimize the value of q, which represents the maximum number of bridges assigned to any single decorator. Your task is to determine how to allocate the decoration tasks so that the bridges satisfy the council\'s rule while minimizing q. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case starts with an integer n (2 ≤ n ≤ 3000) — the number of islands. The next n-1 lines in each test case contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n), indicating that the i-th bridge connects islands u_i and v_i. It is guaranteed that the sum of all values of n across all test cases does not exceed 3000. Output For each test case, print the minimum possible value of q on a single line. Then, in the next line, print n-1 integers d_1, d_2, ..., d_{n-1} (1 ≤ d_i ≤ 10^6), where d_i represents the decorator assigned to the i-th bridge. If there are multiple optimal assignments, print any of them. Example Input 2 3 1 2 2 3 4 1 2 2 3 2 4 Output 1 1 2 2 1 2 1","solution":"def assign_decorators(t, cases): results = [] for case in cases: n = case[0] edges = case[1] # Assign decorators decorations = [0] * (n - 1) current_decorator = 1 for i in range(n - 1): decorations[i] = current_decorator current_decorator += 1 if current_decorator > 3: current_decorator = 1 # As it\'s always a binary tree, the maximum decorator count `q` will always be 3 or less results.append((3, decorations)) return results # Example usage t = 2 cases = [ (3, [(1, 2), (2, 3)]), (4, [(1, 2), (2, 3), (2, 4)]) ] print(assign_decorators(t, cases))"},{"question":"You are working with a large dataset of login events from users on a website. Each login event consists of a user ID and a timestamp. Your task is to identify the longest streak of consecutive days during which a user has logged in at least once per day. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) representing the number of login events. Each of the following n lines contains a string user_id and an integer timestamp. The user_id is a string of lowercase letters and digits (1 ≤ length of user_id ≤ 100). The timestamp is an integer representing the number of seconds since the Unix epoch (January 1, 1970). Output For each user, output a line containing the user_id and the length of their longest streak of consecutive days with at least one login. If the user has no consecutive days of login, the streak length should be 1. Example Input 10 alice 1609459200 alice 1609545600 alice 1609632000 bob 1609459200 bob 1609545600 bob 1612224000 alice 1612137600 alice 1612224000 charlie 1609459200 charlie 1609545600 Output alice 3 bob 2 charlie 2 Explanation - alice: Logged in on 3 consecutive days starting from 1609459200 (Jan 1, 2021), 1609545600 (Jan 2, 2021), and 1609632000 (Jan 3, 2021). Another streak starts at 1612137600 (Feb 1, 2021) but it lasts for 2 days. - bob: Logged in on 2 consecutive days starting from 1609459200 (Jan 1, 2021) and 1609545600 (Jan 2, 2021). Another login is on 1612224000 (Feb 2, 2021), but it doesn\'t create a new streak. - charlie: Logged in on 2 consecutive days starting from 1609459200 (Jan 1, 2021) and 1609545600 (Jan 2, 2021).","solution":"from collections import defaultdict import time def longest_login_streak(n, logins): Function to find the longest streak of consecutive days with at least one login for each user. Args: n (int): The number of login events. logins (list): A list of tuples (user_id, timestamp) representing the login events. Returns: dict: A dictionary where each key is a user_id and each value is the length of the longest streak of consecutive days. log_dates = defaultdict(set) # Convert the timestamps to days since 1970-01-01 and store unique log days per user for user_id, timestamp in logins: log_day = int(time.strftime(\'%Y-%m-%d\', time.gmtime(timestamp)).replace(\'-\', \'\')) log_dates[user_id].add(log_day) result = {} for user_id, days in log_dates.items(): sorted_days = sorted(days) longest_streak = 1 current_streak = 1 for i in range(1, len(sorted_days)): if sorted_days[i] == sorted_days[i - 1] + 1: current_streak += 1 longest_streak = max(longest_streak, current_streak) else: current_streak = 1 result[user_id] = longest_streak return result"},{"question":"In a distant galaxy, on planet Zog, there exist humanoid beings called Zogians. Zogian scientists have developed a new integer sequence called the \\"Zog Sequence\\". The rules to generate this sequence are: 1. The sequence starts with two given integers a and b. 2. Each subsequent number is generated as the sum of the squares of the last two numbers in the sequence. Given starting integers a and b, Zogian scientists want to know the k-th term of the sequence. Write a program to calculate the k-th term of the Zog Sequence. Input The input consists of three space-separated integers a, b, and k (1 ≤ a, b ≤ 10^6, 1 ≤ k ≤ 10^9). Output Print the k-th term of the Zog Sequence. Example Input 1 2 3 Output 5 Input 3 4 4 Output 25 Note In the first example, the Zog Sequence starts with 1 and 2. The sequence is: - 1 (first term) - 2 (second term) - 1^2 + 2^2 = 1 + 4 = 5 (third term) The third term is 5 as given in the output. In the second example, the Zog Sequence starts with 3 and 4. The sequence is: - 3 (first term) - 4 (second term) - 3^2 + 4^2 = 9 + 16 = 25 (third term) - 4^2 + 25^2 = 16 + 625 = 641 (fourth term) The fourth term is 25 as given in the output.","solution":"def zog_sequence(a, b, k): Calculate the k-th term of the Zog Sequence starting with a and b. Parameters: a (int): The first term of the sequence. b (int): The second term of the sequence. k (int): The position of the term to be found. Returns: int: The k-th term of the Zog Sequence. if k == 1: return a elif k == 2: return b else: seq = [a, b] for i in range(2, k): next_term = seq[-1]**2 + seq[-2]**2 seq.append(next_term) return seq[k-1]"},{"question":"# Problem Statement Zara is designing an automated ticket reservation system for a concert. The concert hall has `n` seats arranged in a single row, numbered from 1 to `n`. Each seat can either be empty or reserved. Zara needs to determine how many distinct ways she can reserve `k` consecutive seats for a group of attendees. To achieve this, you need to write a function that takes the number of seats `n` and the number of consecutive seats to be reserved `k`, and returns the number of ways to reserve these consecutive seats. # Constraints - 1 ≤ k ≤ n ≤ 1,000,000 # Input - The first and only line of input contains two integers `n` and `k` — the number of seats and the number of consecutive seats to be reserved. # Output - Output a single integer representing the number of distinct ways to reserve `k` consecutive seats. # Examples Example 1 **Input:** ``` 10 3 ``` **Output:** ``` 8 ``` **Explanation:** The possible ways to reserve 3 consecutive seats in a row of 10 seats are: 1. Seats 1, 2, 3 2. Seats 2, 3, 4 3. Seats 3, 4, 5 4. Seats 4, 5, 6 5. Seats 5, 6, 7 6. Seats 6, 7, 8 7. Seats 7, 8, 9 8. Seats 8, 9, 10 Example 2 **Input:** ``` 5 2 ``` **Output:** ``` 4 ``` **Explanation:** The possible ways to reserve 2 consecutive seats in a row of 5 seats are: 1. Seats 1, 2 2. Seats 2, 3 3. Seats 3, 4 4. Seats 4, 5 # Notes Given `n = 10` and `k = 3`, we understand that Zara has 8 distinct ways of reserving three consecutive seats in a row of ten seats. Similarly, with `n = 5` and `k = 2`, there are 4 ways to reserve two consecutive seats in a row of five seats. Hence, you have to determine the general pattern of how to compute the number of distinct ways `k` consecutive seats can be reserved within `n`-numbered seats.","solution":"def count_consecutive_seats(n, k): if k > n: return 0 return n - k + 1 # Example usage: # result = count_consecutive_seats(10, 3) # print(result) # Expected output: 8"},{"question":"You are given a grid of dimensions n x m, where each cell in the grid contains a lowercase Latin letter. You need to find the largest square sub-grid such that each cell in this sub-grid contains the same character. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters, representing the grid. Output Print one integer — the side length of the largest square sub-grid where all characters are the same. Examples Input 3 4 abab baba abab Output 1 Input 4 4 aaaa aaaa aabb aabb Output 2 Input 5 5 abcde fghij klmno pqrst uvwxy Output 1 Note In the first example, any single cell is the largest sub-grid with the same character. Thus, the answer is 1. In the second example, the largest square sub-grid where all characters are the same is the 2x2 sub-grid formed by the characters in the top-left or bottom-right of the grid. Thus, the answer is 2. In the third example, since all the characters are distinct, any single cell is the largest sub-grid with the same character. Thus, the answer is 1.","solution":"def largest_square_subgrid(n, m, grid): if n == 0 or m == 0: return 0 # Create a 2D list to hold the size of the largest square sub-grid ending at each cell dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: # The first row and the first column can only form a 1x1 square if the character is there dp[i][j] = 1 elif grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: # Check if current cell and its top, left and top-left neighbors are the same dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Andrey has recently watched a documentary about search engines and how they sort and filter results. He\'s particularly interested in sorting integer arrays using a variant of the quicksort algorithm. Andrey wants to implement a quicksort algorithm that selects the pivot differently. Instead of choosing the first, last, or middle element as the pivot, he chooses p random unique indices in the array, takes the elements at these indices, and picks the median among these elements as the pivot. Given an array of integers and a number p (1 ≤ p ≤ n), implement Andrey\'s version of quicksort to sort the array in non-decreasing order. You should also output the total number of comparisons made during the sorting process. Input The first line contains two integers n and p (1 ≤ n ≤ 10^5, 1 ≤ p ≤ n) - the number of elements in the array and the number of random unique indices to pick as potential pivots. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9) - the elements of the array. Output Output the sorted array in a single line, followed by the total number of comparisons made during the sorting process in another line. Examples Input 5 3 4 1 3 2 5 Output 1 2 3 4 5 7","solution":"import random def quicksort(arr, p): Perform quicksort with a pivot chosen as the median of p random unique elements. Parameters: arr (list of int): List of integers to sort. p (int): Number of random unique elements to choose as potential pivots. Returns: tuple: Sorted array and number of comparisons made. comparisons = 0 def partition(low, high): nonlocal comparisons # Choose p random unique indices from the array indices = random.sample(range(low, high + 1), min(p, high - low + 1)) candidates = [arr[i] for i in indices] pivot_value = sorted(candidates)[len(candidates) // 2] pivot_index = arr.index(pivot_value) arr[pivot_index], arr[high] = arr[high], arr[pivot_index] pivot = arr[high] i = low - 1 for j in range(low, high): comparisons += 1 if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quicksort_helper(low, high): if low < high: pivot_index = partition(low, high) quicksort_helper(low, pivot_index - 1) quicksort_helper(pivot_index + 1, high) quicksort_helper(0, len(arr) - 1) return arr, comparisons # Example usage: # n, p = 5, 3 # arr = [4, 1, 3, 2, 5] # sorted_arr, total_comparisons = quicksort(arr, p) # print(\\" \\".join(map(str, sorted_arr))) # print(total_comparisons)"},{"question":"Given a list of departure and arrival times for a set of trains running from a station, determine the minimum number of railway platforms required at the station so that no train has to wait for a platform to become free. # Input - The first line of input contains a single integer `n`, the number of trains. - Each of the next `n` lines contain two space-separated integers `a` and `d` (0 <= `a`, `d` <= 2359), representing the arrival and the departure times of the train in a 24-hour format (HHMM). # Output - Output a single integer which is the minimum number of platforms needed. # Example Input ``` 6 900 910 940 1200 950 1120 1100 1130 1500 1900 1800 2000 ``` Output ``` 3 ``` In this example, you can see that at most 3 trains are at the station at the same time around 1100 hours, so 3 platforms are needed at that time.","solution":"def find_minimum_platforms(n, schedule): Returns the minimum number of platforms required so that no train has to wait for a platform. Parameters: - n: int, number of trains. - schedule: list of tuples, each containing arrival and departure times of trains. arrivals = sorted([train[0] for train in schedule]) departures = sorted([train[1] for train in schedule]) platform_needed = 0 max_platforms = 0 i = 0 j = 0 while (i < n and j < n): if arrivals[i] <= departures[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: platform_needed -= 1 j += 1 return max_platforms"},{"question":"Design a data structure that supports the following operations: 1. Insert(X, Y): Insert a pair of integers (X, Y) into the data structure. 2. Remove(X, Y): Remove a pair of integers (X, Y) from the data structure. If the pair does not exist, perform no operation. 3. Find(X): Find all pairs in the data structure where the first integer is X. Your implementation should provide efficient solutions for each operation. Input The input consists of multiple lines of commands. Each command is either an insertion, removal, or find operation: - `INSERT X Y`: Insert the pair (X, Y). - `REMOVE X Y`: Remove the pair (X, Y). - `FIND X`: Find all pairs with the first integer X and output them in lexicographical order, each on a new line. If there are no such pairs, output an empty line. The input is terminated with the `END` command. Output For each `FIND X` command, output the pairs found in the form `(X, Y)` in lexicographical order, each on a new line. If no pairs are found, output an empty line. Examples Input ``` INSERT 3 4 INSERT 1 2 INSERT 3 5 FIND 3 REMOVE 3 4 FIND 3 REMOVE 1 2 FIND 1 END ``` Output ``` (3, 4) (3, 5) (3, 5) ```","solution":"class DataStructure: def __init__(self): self.data = {} def insert(self, x, y): if x in self.data: self.data[x].add(y) else: self.data[x] = {y} def remove(self, x, y): if x in self.data and y in self.data[x]: self.data[x].remove(y) if not self.data[x]: # remove key if set is empty del self.data[x] def find(self, x): if x in self.data: result = [(x, y) for y in sorted(self.data[x])] return result return [] def process_commands(self, commands): results = [] for command in commands: parts = command.split() if parts[0] == \\"INSERT\\": self.insert(int(parts[1]), int(parts[2])) elif parts[0] == \\"REMOVE\\": self.remove(int(parts[1]), int(parts[2])) elif parts[0] == \\"FIND\\": results.append(self.find(int(parts[1]))) elif parts[0] == \\"END\\": break return results"},{"question":"You are given a string s of length n. You can choose some substring s_l, s_{l+1}, ..., s_{r-1}, s_r and reverse it forming a new string. Your task is to determine the minimum number of distinct characters in the resultant string after reversing any one substring. For example, if s = \\"abacb\\" then you can: * choose substring s_2 ... s_4 and reverse it to get \\"abacb\\" => distinct characters: 3 (\\"a\\", \\"b\\", \\"c\\") * choose substring s_2 ... s_5 and reverse it to get \\"abcab\\" => distinct characters: 3 (\\"a\\", \\"b\\", \\"c\\") * choose substring s_1 ... s_2 and reverse it to get \\"baacb\\" => distinct characters: 3 (\\"a\\", \\"b\\", \\"c\\") * choose substring s_3 ... s_4 and reverse it to get \\"abacb\\" => distinct characters: 3 (\\"a\\", \\"b\\", \\"c\\") Your task is to find the minimum number of distinct characters in the resultant string after reversing any one substring. Input The first line contains one integer n (1 ≤ n ≤ 1000), the length of the string. The second line contains a string s of length n consisting of only lowercase Latin letters. Output Print the minimum number of distinct characters in the resultant string after reversing any one substring. Examples Input 5 abacb Output 2 Input 4 aaaa Output 1 Input 6 abcdef Output 6","solution":"def min_distinct_after_reverse(n, s): Returns the minimum number of distinct characters in the string s after reversing any one substring. if not s: return 0 # If the string already contains only one distinct character, return 1 if len(set(s)) == 1: return 1 # Find the number of distinct characters in the entire string distinct_characters_entire_string = len(set(s)) # If the distinct characters are more than 1, reversing any part will not reduce it below 2 return min(2, distinct_characters_entire_string)"},{"question":"In a kingdom far away, farmers grow an interesting type of plant. These plants grow in layers, and each layer grows in a hexagonal shape. Every layer has cells numbered from 1 onwards in a hexagonal spiral manner. You, as a botanist, are particularly interested in the growth pattern of these layers. You would like to understand the sequence of cell numbers as they appear in the hexagonal spiral for a given layer k. Your task is to calculate the cell number which is positioned at the nth place when traversing the hexagonal spiral in the clockwise direction. # Hexagonal Spiral Description: - The central cell starts at 1. - The first layer surrounding the central cell contains the next 6 cells. - The second layer contains the next 12 cells forming the second hexagon around the center, and so on. Given a specific layer k, and the position n within that layer, determine the cell number at position n. # Input: - The input consists of two integers k and n (1 ≤ k ≤ 10000, 1 ≤ n ≤ 6k). # Output: - Output the cell number at the nth position when traversing the k’th layer in a clockwise spiral. # Examples: Input: 3 5 Output: 24 Input: 1 3 Output: 3 Note: For the first example, in the 3rd layer and 5th position, the cell number is 24 in the hexagonal spiral. For the second example, in the 1st layer and 3rd position, the cell number is 3 in the hexagonal spiral.","solution":"def hexagon_spiral(k, n): Calculate the cell number at the nth position of the kth hexagonal layer. Args: k: int - layer number (1 ≤ k ≤ 10000) n: int - position number within that layer (1 ≤ n ≤ 6k) Returns: int - cell number at the nth position in the kth layer if k == 1: return 1 + n - 1 # Calculate the starting position of the kth layer. start_cell = 1 + 3 * k * (k - 1) # Find the cell number at the nth position. return start_cell + n - 1"},{"question":"You are given an integer array `arr` of size `n` consisting of positive integers. A subarray is defined as the contiguous portion of the array. A subarray is considered \\"beautiful\\" if the sum of its elements is a prime number. Write a function to determine the count of beautiful subarrays within the given array. Input The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the array. The second line of each test case contains `n` integers separated by spaces — the elements of the array `arr` (1 ≤ arr[i] ≤ 1000). Output For each test case, print a single integer — the number of beautiful subarrays. Example Input ``` 2 4 1 2 3 4 5 2 3 5 7 11 ``` Output ``` 5 8 ``` Note In the first test case, the beautiful subarrays are: - [2] (sum is 2, which is prime), - [1, 2] (sum is 3, which is prime), - [3] (sum is 3, which is prime), - [1, 2, 3] (sum is 6, which is not prime), - [2, 3] (sum is 5, which is prime). In the second test case, the beautiful subarrays are: - [2] (sum is 2, which is prime), - [3] (sum is 3, which is prime), - [2, 3] (sum is 5, which is prime), - [5] (sum is 5, which is prime), - [3, 5] (sum is 8, which is not prime), - [2, 3, 5] (sum is 10, which is not prime), - [7] (sum is 7, which is prime), - [11] (sum is 11, which is prime).","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def count_beautiful_subarrays(t, test_cases): Function to count the number of beautiful subarrays for each test case. results = [] for case in test_cases: n, arr = case beautiful_count = 0 # Iterate over all subarrays for i in range(n): subarray_sum = 0 for j in range(i, n): subarray_sum += arr[j] if is_prime(subarray_sum): beautiful_count += 1 results.append(beautiful_count) return results def main(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return count_beautiful_subarrays(t, test_cases)"},{"question":"A popular local library uses a computerized system to keep track of books and their availability. The library has n books, all of which are arranged sequentially by their IDs (from 1 to n). Each book i has a borrowing limit `l_i`, which means it can be borrowed at most `l_i` times. To optimize book allocation, the library records the number of times each book has been borrowed so far. The librarian needs your help to determine the number of unborrowed books that can still be borrowed. Additionally, she wants to know which book is the most borrowed and how many times it has been borrowed. Input The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of books in the library. The second line contains n integers `l_1, l_2, ..., l_n` (1 ≤ l_i ≤ 1000), where `l_i` is the borrowing limit for the i-th book. The third line contains n integers `b_1, b_2, ..., b_n` (0 ≤ b_i ≤ l_i), where `b_i` represents the number of times the i-th book has been borrowed. Output Output two integers: the number of books that have not been borrowed at all but can still be borrowed, and the maximum number of times any book has been borrowed. Examples Input 5 2 3 1 4 5 0 2 0 3 5 Output 2 5 Input 4 1 1 2 3 1 0 2 2 Output 1 2 Note In the first sample, books 1 and 3 have not been borrowed at all but have borrowing limits that are greater than 0, thus they can still be borrowed. The maximum number of times any book has been borrowed is 5 times, which is for book 5. In the second sample, book 2 has not been borrowed at all and can still be borrowed because its borrowing limit is 1. The maximum number of times any book has been borrowed is 2 times.","solution":"def library_books_analysis(n, l, b): Determines the number of unborrowed books that can still be borrowed and the maximum number of times any book has been borrowed. :param n: Number of books (integer) :param l: List of borrowing limits for each book (list of integers) :param b: List of number of times each book has been borrowed (list of integers) :return: A tuple with two elements: - number of books that have not been borrowed at all but can still be borrowed - the maximum number of times any book has been borrowed unborrowed_books_count = sum(1 for i in range(n) if b[i] == 0 and l[i] > 0) max_borrowed = max(b) return (unborrowed_books_count, max_borrowed)"},{"question":"You are given a non-negative integer array of size n. For each element in the array, count how many elements to the left of the current element are lesser than the current element. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^6) — the elements of the array. Output Output an array of size n where the i-th element is the count of elements to the left of the i-th element in the given array that are lesser than the i-th element. Examples Input 5 2 1 5 3 4 Output 0 0 2 2 3 Note For the input array [2, 1, 5, 3, 4]: - The first element has no elements to the left, so the output is 0. - The second element is 1, there are no elements to the left that are lesser, so output is 0. - The third element is 5, two elements (2 and 1) to the left are lesser, so output is 2. - The fourth element is 3, two elements (2 and 1) to the left are lesser, so output is 2. - The fifth element is 4, three elements (2, 1, and 3) to the left are lesser, so output is 3.","solution":"def count_elements_lesser_left(arr): For each element in the array, count how many elements to the left of the current element are lesser than the current element. Parameters: arr (list): List of non-negative integers Returns: list: Resultant list where each element is a count of elements to the left that are lesser than the current element. n = len(arr) result = [0] * n for i in range(1, n): count = 0 for j in range(i): if arr[j] < arr[i]: count += 1 result[i] = count return result"},{"question":"Implement a function that finds the maximum length of subarray with sum equals to zero. Given an array arr of n integers, explore the array and determine the length of the longest subarray which sums up to zero. Input: - The first line of the input contains an integer n, indicating the number of elements in the array. - The second line contains n space-separated integers, representing the elements of the array. Output: - Output the length of the longest subarray with sum equal to zero. Constraints: - 1 ≤ n ≤ 10^5 - -10^5 ≤ arr[i] ≤ 10^5 Example: Input: 8 15 -2 2 -8 1 7 10 23 Output: 5 Explanation: The longest subarray with sum equal to zero is [-2, 2, -8, 1, 7], which is of length 5. In this problem, you need to handle cases with both positive and negative integers and efficiently compute the required subarray length. The expected solution should adhere to the given constraints and perform within acceptable time limits.","solution":"def max_len_subarray_with_sum_zero(arr): Returns the length of the longest subarray with sum equal to zero. # Dictionary to store the sum up to each index sum_index_map = {} max_len = 0 current_sum = 0 for index, value in enumerate(arr): current_sum += value # If the current sum is zero, we found a subarray from the beginning if current_sum == 0: max_len = index + 1 # If current sum has been seen before, there\'s a zero-sum subarray if current_sum in sum_index_map: max_len = max(max_len, index - sum_index_map[current_sum]) else: # Store the index of this sum if it hasn\'t been seen before sum_index_map[current_sum] = index return max_len"},{"question":"Given a list of `n` integers and a single integer `k`, write a function to determine if there are two distinct numbers in the list that add up to `k`. Constraints * The list will have between 2 and 10^5 integers, inclusive. * Each integer in the list will be between -10^9 and 10^9, inclusive. * The integer `k` will be between -10^9 and 10^9, inclusive. Input The input consists of two lines: - The first line contains two integers `n` and `k`. - The second line contains `n` integers separated by spaces representing the list of numbers. Output Output \\"YES\\" if there are two distinct numbers in the list that add up to `k`. Otherwise, output \\"NO\\". Examples Input 4 9 2 7 11 15 Output YES Input 5 10 1 2 3 4 5 Output NO","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct numbers in the list that add up to k. Parameters: arr (list of int): List of integers. k (int): The target sum. Returns: str: \\"YES\\" if there are two distinct numbers that add up to k, otherwise \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Main function to handle input. def main(): import sys input = sys.stdin.read data = input().split() # First line n = int(data[0]) k = int(data[1]) # Second line arr = list(map(int, data[2:2+n])) print(has_pair_with_sum(arr, k))"},{"question":"Given a string containing lowercase English alphabets, you need to determine the length of the longest substring that contains at most two distinct characters. Write a function `longest_substring_two_distinct(s: str) -> int` that accepts a string `s` as a parameter and returns an integer representing the length of the longest substring with at most two distinct characters. **Input:** - A string `s` containing lowercase English alphabets. The length of `s` does not exceed 100000. **Output:** - An integer representing the length of the longest substring that contains at most two distinct characters. **SAMPLE INPUT** ``` abcba ``` **SAMPLE OUTPUT** ``` 3 ``` **Explanation:** The longest substring with at most two distinct characters in the input \\"abcba\\" is \\"bcb\\", which has a length of 3. **Note:** - You can use a sliding window technique to solve this problem within linear time complexity. - Ensure your implementation is efficient to handle the maximum input size.","solution":"def longest_substring_two_distinct(s: str) -> int: This function finds the length of the longest substring with at most two distinct characters. if not s: return 0 left = 0 max_length = 0 char_map = {} for right in range(len(s)): char = s[right] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > 2: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Sam is building a new amusement park game that involves shooting marbles at targets on a grid. He wants to calculate the success rate of the game by simulating several rounds of marble shots and determining how many shots hit a target. Your task is to create a program that takes the initial positions of the targets and the path of each marble shot, and then determines which shots hit a target. Each target and marble shot can be considered points on a 2D grid. The marble travel in a straight line and continues in its trajectory until it moves out of the grid. The program should simulate each shot and determine if it hits any target. If a marble hits a target, remove that target from the grid (as it gets destroyed) and continue with the next shot. Input The input consists of multiple datasets. The first line of the dataset gives two integers, T (1 ≤ T ≤ 100), the number of targets, and S (1 ≤ S ≤ 1000), the number of shots. The following T lines each contain two integers representing the x and y coordinates of the targets. The following S lines each contain four integers XS, YS, VXS, VYS, representing the initial position of the shot and its velocity in the x and y directions respectively. Note: The coordinates and velocities are integers in the range -1000 to 1000. The input terminates when both T and S are zero. Output For each dataset, output the number of shots that hit a target on one line. Example Input 3 2 2 3 5 5 8 8 0 0 1 1 1 1 2 2 5 5 10 10 1 2 3 4 -5 -5 2 2 0 0 Output 1 0 Explanation In the first dataset, the marble shot from (0,0) with velocity (1,1) will hit the target at (2,3) at time t=2. The second shot\'s path is (1,1) -> (3,3) -> (5,5) >. Since the target at (5,5) is destroyed after the second shot hits it, only one shot is successful.","solution":"def calculate_successful_shots(datasets): results = [] for dataset in datasets: T, S = dataset[0] if T == 0 and S == 0: break targets = set(tuple(target) for target in dataset[1:T+1]) shots = dataset[T+1:] successful_shots = 0 for shot in shots: XS, YS, VXS, VYS = shot x, y = XS, YS while (-1000 <= x <= 1000) and (-1000 <= y <= 1000): if (x, y) in targets: targets.remove((x, y)) successful_shots += 1 break x += VXS y += VYS results.append(successful_shots) return results"},{"question":"In a certain city, there is a metro system that consists of multiple lines. Each line is represented by a series of stations connected in sequence. For example, line A might consist of the following stations: `A1, A2, A3, A4`, and line B might consist of `B1, B2, B3`. The city\'s metro authority needs your help to determine if there exists a path between two stations located on different lines. You are given the structure of the metro system and a set of queries, each querying whether a path exists between two specific stations. Assume that if there exists a common station between two lines, those lines are connected. The same applies if there\'s a series of connecting lines. For instance, if line C has a common station with line A, and line A has a common station with line B, then line C is also indirectly connected to line B. Input The first line of input contains an integer `n` (2 ≤ n ≤ 100), representing the number of lines in the metro system. Each of the next `n` lines starts with an integer `m_i` (1 ≤ m_i ≤ 100), representing the number of stations on the i-th line, followed by `m_i` unique station names separated by spaces. After the descriptions of the metro lines, there is an integer `q` (1 ≤ q ≤ 1000), representing the number of queries. Each of the next `q` lines contains two station names separated by a space. These are the station pairs for which the connection path needs to be determined. Output For each query, print \\"YES\\" if there exists a path between the given pair of stations, otherwise print \\"NO\\". Example Input 4 4 A1 A2 A3 A4 3 B1 B2 B3 3 C1 C2 C3 3 D1 D2 D3 5 A1 B1 A3 C3 B2 D2 C1 D3 A1 A4 Example Output NO NO NO NO YES Explanation In the given example, although each line is distinct and there are no common stations between any two lines, if there were common stations, they would establish a connection, allowing indirect travel between lines. Constraints - Each station name is a string of up to 10 alphanumeric characters. - The metro system is connected such that if there is a common station on any two lines, those lines are connected leading to a potential path. Your task is to create an efficient and correct solution to determine if a path exists between the given stations in the queries.","solution":"def find_path_between_stations(n, metro_lines, q, queries): from collections import defaultdict, deque # Build an adjacency list for the stations based on metro lines station_to_lines = defaultdict(set) for i, line in enumerate(metro_lines): for station in line: station_to_lines[station].add(i) # Build a graph (adjacency list) for the lines based on station connections line_graph = defaultdict(set) for stations in metro_lines: for i in range(len(stations)): for j in range(i + 1, len(stations)): line_graph[stations[i]].add(stations[j]) line_graph[stations[j]].add(stations[i]) # Function to check if there is a path using BFS def is_path(station1, station2): if station1 == station2: return True visited = set() queue = deque([station1]) while queue: current_station = queue.popleft() if current_station in visited: continue if current_station == station2: return True visited.add(current_station) for neighbor in line_graph[current_station]: if neighbor not in visited: queue.append(neighbor) return False # Processing queries results = [] for s1, s2 in queries: if is_path(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage (without interactive input/output to match requirements): n = 4 metro_lines = [ [\\"A1\\", \\"A2\\", \\"A3\\", \\"A4\\"], [\\"B1\\", \\"B2\\", \\"B3\\"], [\\"C1\\", \\"C2\\", \\"C3\\"], [\\"D1\\", \\"D2\\", \\"D3\\"] ] q = 5 queries = [ (\\"A1\\", \\"B1\\"), (\\"A3\\", \\"C3\\"), (\\"B2\\", \\"D2\\"), (\\"C1\\", \\"D3\\"), (\\"A1\\", \\"A4\\"), ] output = find_path_between_stations(n, metro_lines, q, queries) for result in output: print(result)"},{"question":"Alice is organizing a charity run along a hilly terrain for n participants. Each participant has a different running capacity m_1, m_2, ..., m_n, which determines the maximum height of the hill they can run with one breath. The hills along the route are arranged in increasing order of height h_1, h_2, ..., h_n, where n is the number of participants. Each hill must be assigned to one participant such that each participant runs on exactly one hill and no participant runs on a hill that exceeds their capacity. You need to determine whether it is possible to assign the hills to the participants in such a way that each participant runs on a hill within their capacity and the sum of the heights of the assigned hills is maximized. Input The first line of the input contains one integer n (1 ≤ n ≤ 200 000) — the number of hills and participants. The second line contains n integers m_1, m_2, ..., m_n (1 ≤ m_i ≤ 2 ⋅ 10^5), the maximum heights the participants can run, in arbitrary order. The third line contains n integers h_1, h_2, ..., h_n (1 ≤ h_1 < h_2 < ... < h_n ≤ 2 ⋅ 10^5), the heights of the hills sorted in increasing order. Output If it is possible to assign hills to the participants such that no participant runs on a hill exceeding their capacity and the sum of the assigned hills\' heights is maximized, print \\"Yes\\" (without quotes) in the first line of the output. In the second line, print a permutation of 1 to n (p_1, p_2, ..., p_n) representing the assignment of hills to participants where the i-th participant is assigned to the hill with height h_p_i. If it is not possible, print \\"No\\" (without quotes) in the only line of the output. Examples Input 4 3 14 7 10 1 2 6 11 Output Yes 1 3 2 4 Input 3 2 5 1 3 4 5 Output No Note In the first example, the assignment could be: - Participant with capacity 3 runs on the hill of height 1 (index 1) - Participant with capacity 14 runs on the hill of height 11 (index 4) - Participant with capacity 7 runs on the hill of height 6 (index 2) - Participant with capacity 10 runs on the hill of height 2 (index 3) In the second example, it is impossible to assign participants to hills as no participant can run on any of the available hills due to height constraints.","solution":"def assign_hills_to_participants(n, capacities, heights): Determines if it is possible to assign hills to participants in such a way that: 1. Each participant runs on exactly one hill. 2. No participant runs on a hill that exceeds their capacity. If possible, returns a tuple (\\"Yes\\", assignment_list) where assignment_list is the permutation of 1 to n representing the assignment of hills to participants. Otherwise, returns \\"No\\". :param n: int - Number of participants and hills :param capacities: List[int] - Maximum heights each participant can run :param heights: List[int] - Heights of the hills in increasing order :return: Union[str, Tuple[str, List[int]]] - \\"No\\" if assignment is not possible, otherwise \\"Yes\\" and the assignment list capacity_with_indices = sorted((capacity, i) for i, capacity in enumerate(capacities)) assignment = [0] * n for i in range(n): if capacity_with_indices[i][0] < heights[i]: return \\"No\\" assignment[capacity_with_indices[i][1]] = i + 1 return \\"Yes\\", assignment"},{"question":"In a faraway kingdom, there is a peculiar mountain range consisting of n mountains. The king has decided to connect some of these mountains using special bridges. Each bridge connects two distinct mountains and does not pass over or under any other mountain. The king\'s engineers have proposed m possible bridges for this project. They need to determine if it\'s possible to build these bridges in such a way that no two bridges cross each other when viewed from above. If it\'s possible, the engineers need to identify which mountains each bridge should connect. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100). Each of the following m lines contains two distinct integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). The list does not contain duplicate bridges. Output If it is impossible to build the bridges such that no two bridges cross each other, output \\"Impossible\\". Otherwise, output the list of bridges that can be built without any crossings. If there are multiple valid solutions, output any one of them. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 1 2 2 3 3 4 4 5 Input 6 3 1 4 2 5 3 6 Output 1 4 2 5 3 6","solution":"def can_build_bridges_without_crossing(n, m, bridges): Determines if it\'s possible to build the bridges such that no two bridges cross each other. If possible, returns a list of bridges in non-crossing order. Otherwise, returns \\"Impossible\\". # Function to check if two bridges cross each other def do_cross(bridge1, bridge2): a1, b1 = bridge1 a2, b2 = bridge2 # Normalize the endpoints so that a < b if a1 > b1: a1, b1 = b1, a1 if a2 > b2: a2, b2 = b2, a2 return (a1 < a2 < b1 < b2) or (a2 < a1 < b2 < b1) # Check all pairs of bridges to see if any two cross for i in range(m): for j in range(i + 1, m): if do_cross(bridges[i], bridges[j]): return \\"Impossible\\" # If no bridges cross, return the given list of bridges return bridges"},{"question":"Susan loves playing with numbers and is particularly fascinated with prime numbers. One day, she decides to create a game involving an array of integers. The game is played as follows: 1. Given an array of integers, Susan partitions the array into contiguous subarrays. 2. She checks if each subarray\'s sum is a prime number. Susan\'s objective is to determine whether the array can be partitioned in such a way that every contiguous subarray\'s sum is a prime number. You need to write a program that determines if such a partitioning of the array exists. Input The first line contains an integer T, the number of test cases. For each test case: The first line contains an integer N, the size of the array. The second line contains N space-separated integers, representing the array elements. Output For each test case, print \\"Possible\\" if the array can be partitioned as required. Print \\"Impossible\\" otherwise. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 50 -100 ≤ Ai ≤ 100 Example Input 2 4 2 3 5 7 3 1 -1 3 Output Possible Impossible Explanation Test 1: The array [2, 3, 5, 7] can be partitioned as [2], [3], [5], [7], all of which are single element prime numbers. Test 2: There is no way to partition the array [1, -1, 3] such that each subarray\'s sum is a prime number.","solution":"def is_prime(num): if num <= 1: return False elif num <= 3: return True elif num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_be_partitioned(arr): for num in arr: if not is_prime(num): return False return True def susans_game(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] arr = test_cases[i][\'array\'] if can_be_partitioned(arr): results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are given a list of tasks, each with a specified start time and end time. Determine the minimum number of meeting rooms required to accommodate all the tasks without any overlap. Each task is represented by a pair of integers, the start and end times. Assume that if a task ends at time x and another task starts at time x, these two tasks do not overlap. Your function should accept a list of tuples where each tuple represents a task\'s start and end times, and it should return an integer representing the minimum number of meeting rooms required. Example: Input [(1, 4), (2, 6), (8, 9), (5, 7)] Output 2 Explanation: - Task (1, 4) and (2, 6) overlap, so they require two rooms. - Task (8, 9) can be scheduled after (2, 6) ends or after (5, 7) ends, so only one additional room is required. - Therefore, the total number of rooms required is 2.","solution":"import heapq def min_meeting_rooms(tasks): Determines the minimum number of meeting rooms required to accommodate all tasks. :param tasks: List of tuples representing start and end times of tasks. :return: Integer representing the minimum number of meeting rooms required. if not tasks: return 0 # Sort the tasks by start time tasks.sort(key=lambda x: x[0]) # Use a min heap to keep track of end times of tasks min_heap = [] # Add the end time of the first task to the heap heapq.heappush(min_heap, tasks[0][1]) for i in range(1, len(tasks)): # If the current task\'s start time is greater than or equal to the min end time in the heap, pop from the heap if tasks[i][0] >= min_heap[0]: heapq.heappop(min_heap) # Add the current task\'s end time to the heap heapq.heappush(min_heap, tasks[i][1]) # The size of the heap is the number of rooms required return len(min_heap)"},{"question":"You are given a directed graph where each node contains a lowercase alphabetical character, i.e., \'a\' to \'z\'. Your task is to find the longest path in the graph where the characters on the path have increasing alphabetical order. The path should be strictly increasing, meaning that each next character in the path must be the next in the alphabetical sequence of the previous character. # Input The first line of the input contains an integer `T`, the number of test cases. Each test case consists of: - An integer `N` (number of nodes, 1 <= N <= 100). - A string `chars` of length `N` containing the character in each node. - An integer `E` (number of edges, 0 <= E <= 100). - `E` lines, each containing two integers `u` and `v` representing a directed edge from node `u` to node `v` (0 <= u, v < N). # Output For each test case, print the length of the longest path with increasing alphabetical order. # Example Input: ``` 2 5 abcde 4 0 1 1 2 2 3 3 4 5 ebcda 5 1 0 2 1 3 2 4 3 0 2 ``` Output: ``` 5 1 ``` # Explanation In the first test case, there is a path \\"a -> b -> c -> d -> e\\" which has 5 characters in increasing order. In the second test case, there is no path where characters are in strictly increasing alphabetical order. The maximum length for any single node character is 1.","solution":"from collections import defaultdict, deque def longest_increasing_path(T, test_cases): def topological_sort(graph, N): indegree = [0] * N for u in range(N): for v in graph[u]: indegree[v] += 1 queue = deque([u for u in range(N) if indegree[u] == 0]) topo_order = [] while queue: u = queue.popleft() topo_order.append(u) for v in graph[u]: indegree[v] -= 1 if indegree[v] == 0: queue.append(v) return topo_order def find_longest_path(N, chars, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) topo_order = topological_sort(graph, N) longest_path = [1] * N max_length = 1 for u in topo_order: for v in graph[u]: if ord(chars[v]) == ord(chars[u]) + 1: if longest_path[v] < longest_path[u] + 1: longest_path[v] = longest_path[u] + 1 max_length = max(max_length, longest_path[v]) return max_length results = [] for i in range(T): N, chars, E, edges = test_cases[i] results.append(find_longest_path(N, chars, edges)) return results"},{"question":"You are playing a game with a friend where you need to guess a sequence of numbers. The game board consists of n slots, and each slot can hold an integer between 1 and m. The objective is to guess the correct sequence by asking queries about different subsets of the sequence. You are given the length of the sequence n and the range m (1 ≤ m ≤ 10^9). You can ask up to q (1 ≤ q ≤ 50) queries. In each query, you specify a non-empty subset of indices and the interactor will return the maximum value present in those indices for the secret sequence. The sequence does not change during the game. The sequence values are selected in such a way that the integers are unique and strictly increasing from left to right. Interaction To make a query, print a single line: ``` ? size index1 index2 ... index_size ``` where size is the number of indices in the subset you want to query about (1 ≤ size ≤ n), and index1, index2, ..., index_size are the indices of the subset (1 ≤ index ≤ n). For each query, you will receive an integer max — the maximum value in the secret sequence present at the queried indices. If your query is invalid (for instance, if you exceed the number of allowable queries or provide indices outside the allowable range), you will receive -1. When you have determined the sequence, print a single line: ``` ! value1 value2 ... value_n ``` where value1, value2, ..., value_n is the guessed secret sequence. If the guess is correct, you will receive the string \\"Correct\\", and you should continue solving the remaining test cases. If the guess is incorrect, you will receive the string \\"Incorrect\\", and you should terminate the program immediately. After printing any query or guess, do not forget to flush the output as described above. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^9) — the length of the sequence and the range of possible values. The second line contains an integer q (1 ≤ q ≤ 50) — the maximum number of queries you can make. Example Input ``` 1 5 10 3 ``` Output ``` ? 3 1 2 3 3 ? 2 4 5 10 ! 1 3 5 7 10 Correct ```","solution":"def guess_sequence(t, test_cases): results = [] for test_index in range(t): n, m, q = test_cases[test_index] queries = [] # Query all single positions first for i in range(1, n + 1): print(f\\"? 1 {i}\\") # Read the response max_val = int(input().strip()) queries.append(max_val) # The sequence should be strictly increasing and unique secret_sequence = sorted(queries) print(f\\"! {\' \'.join(map(str, secret_sequence))}\\") # Read result feedback feedback = input().strip() if feedback != \\"Correct\\": break else: results.append(secret_sequence) return results # Example usage: # t = 1 # test_cases = [(5, 10, 3)] # guess_sequence(t, test_cases)"},{"question":"A robot is designed to collect samples from a grid of cells in a laboratory. The grid is represented as an `m x n` matrix where each cell contains a non-negative integer representing the amount of sample in that cell. The robot starts at the top-left cell (0, 0) and can move either to the right or down to collect samples. The robot\'s goal is to reach the bottom-right cell (m-1, n-1) while maximizing the total amount of samples collected. Write a program to determine the maximum amount of samples the robot can collect. Input The first line of the input contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), which represent the dimensions of the grid. Each of the following `m` lines contains `n` space-separated integers representing the grid, where each integer `grid[i][j]` (0 ≤ grid[i][j] ≤ 100) is the amount of sample in that cell. Output Print a single integer, the maximum amount of samples the robot can collect. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation The optimal path to collect the maximum amount of samples is: 1 -> 3 -> 5 -> 2 -> 1 Thus, the total number of samples collected is 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_samples_collected(m, n, grid): # Create a dp table to store the maximum samples collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the value in the bottom-right cell return dp[m-1][n-1] # Example usage: # m, n = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(max_samples_collected(m, n, grid)) # Output: 12"},{"question":"**Problem:** A digital art auction house has n paintings available for a silent auction. Each painting has a minimum starting bid and can be bid on by multiple bidders throughout the auction period. At the end of the auction, each painting will be sold to the highest bidder. Your task is to write a program that determines the total revenue generated from selling all the paintings at their highest bids. If no bids were placed on a painting, the painting is not sold and it does not contribute to the revenue. Given the minimum starting bid for each painting and a list of all the bids placed on each painting, create a program to calculate the total revenue. # Input - The first line contains an integer n, the number of paintings (1 ≤ n ≤ 100). - The next line contains n integers, the minimum starting bid for each painting. - The subsequent lines contain a series of bids for each painting, one line per painting. Each line starts with an integer m, the number of bids for that painting (0 ≤ m ≤ 50), followed by m integers representing bids. If no bids are placed (m is 0), the line will only contain the integer 0. # Output Output the total revenue in one line. # Example Input ``` 3 100 200 150 2 130 140 3 210 190 220 1 160 ``` Output ``` 530 ``` Explanation - The first painting received bids of 130 and 140, its highest bid is 140 which is greater than the minimum bid of 100. - The second painting received bids of 210, 190, and 220, its highest bid is 220 which is greater than the minimum bid of 200. - The third painting received a bid of 160, which is greater than the minimum bid of 150. The total revenue is 140 + 220 + 160 = 520.","solution":"def total_revenue(num_paintings, min_bids, bids_list): total = 0 for i in range(num_paintings): num_bids = bids_list[i][0] if num_bids == 0: continue highest_bid = max(bids_list[i][1:]) if highest_bid > min_bids[i]: total += highest_bid return total def parse_input(input_str): lines = input_str.strip().split(\'n\') num_paintings = int(lines[0]) min_bids = list(map(int, lines[1].split())) bids_list = [list(map(int, line.split())) for line in lines[2:]] return num_paintings, min_bids, bids_list def calculate_revenue(input_str): num_paintings, min_bids, bids_list = parse_input(input_str) return total_revenue(num_paintings, min_bids, bids_list)"},{"question":"You are given a list of n numbers and an integer k. Return a list of the k largest unique numbers from the input list in descending order. If there are fewer than k unique numbers, return a list of all unique numbers sorted in descending order. Input - First line contains an integer n (1 ≤ n ≤ 10^6). - Second line contains n space-separated integers representing the list of numbers (-10^9 ≤ xi ≤ 10^9). - Third line contains an integer k (1 ≤ k ≤ n). Output Output a single line containing the k largest unique numbers in descending order, separated by spaces. Constraints - The output list should only contain unique numbers, and if there are fewer than k unique numbers, return all unique numbers sorted in descending order. SAMPLE INPUT 10 3 1 4 1 5 9 2 6 5 3 3 SAMPLE OUTPUT 9 6 5 SAMPLE INPUT 5 1 2 3 4 5 10 SAMPLE OUTPUT 5 4 3 2 1","solution":"def k_largest_unique_desc(n, numbers, k): unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) if len(unique_numbers) <= k: return unique_numbers else: return unique_numbers[:k]"},{"question":"Lisa has discovered an ancient scroll containing a sequence of magical numbers. The scroll mentions that by performing a specific operation on the sequence multiple times, one can determine if the sequence has a unique magical alignment. The operation involves selecting any two numbers and summing them up. This sum is then appended to the end of the sequence while removing one occurrence of each of the original two numbers. A sequence is said to have a unique magical alignment if it can be reduced to a single number by repeatedly performing the specified operation. Lisa needs your help to determine if the sequence in the scroll can be reduced to a single number through this operation. Input: The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 1000) — the sequence of magical numbers. Output: In a single line print \\"Possible\\" (without the quotes) if the sequence has a unique magical alignment, and \\"Impossible\\" (without the quotes) otherwise. Examples: Input 4 1 2 3 4 Output Possible Input 3 5 5 6 Output Impossible Input 5 2 2 2 2 2 Output Possible Note In the first sample test, one possible way to reduce the sequence is: 1. Sum 1 and 2 to get 3. Sequence becomes: 3, 3, 4. 2. Sum 3 and 3 to get 6. Sequence becomes: 4, 6. 3. Sum 4 and 6 to get 10. Sequence becomes: 10. Thus, the sequence has a unique magical alignment, and the answer is \\"Possible\\".","solution":"def is_unique_magical_alignment(n, sequence): Determine if a sequence can be reduced to a single number by repeatedly summing pairs. Parameters: n (int): The length of the sequence. sequence (list of int): The sequence of magical numbers. Returns: str: \\"Possible\\" or \\"Impossible\\" based on the unique magical alignment test. # For a sequence to be reduced to a single number, it must have only 1 element left after n-1 operations # For each operation, one element is being used up and one new element is added, so total elements decrease by 1 # Hence we need at least two numbers to start (n > 1) to make the check meaningful # Based on the problem, any sequence can be reduced to a single number as long as the length is > 1 # Alternatively all the numbers must be capable of being paired and summed to gradually merge to single number # Check if the sum of all numbers being odd or even have no bearing on result as final residual count matters # As we can always reduce a sequence to one element by repeatedly performing the operation: return \\"Possible\\" if n > 0 else \\"Impossible\\""},{"question":"Sandra, a botanist, is working on breeding flower strains with specific color sequences. She has a garden where she plants flowers in rows, and she is interested in the maximum length of contiguous subarrays in which the flowers have the same color. While her garden has rows of flowers with `n` flowers in each row, every flower can only be one of `k` possible colors. She wants to know, given the sequence of colors in each row, what the maximum length of contiguous flowers of the same color is for each row. Can you help her write a program that determines the maximum length of such contiguous subarrays for each row of flowers? # Input The first line contains two integers `t` and `k` (1 ≤ t ≤ 200 000, 1 ≤ k ≤ 10), which represent the number of rows of flowers and the number of possible flower colors, respectively. Each of the next `t` lines contains a string of `n` characters, each representing a color. The colors are denoted by uppercase English letters (\'A\', \'B\', \'C\', ..., \'J\') representing the `k` different possible colors. # Output For each row of flowers, output a single integer representing the maximum length of contiguous flowers of the same color. # Examples Input ``` 3 3 ABBAC CCCCB ABAAB ``` Output ``` 2 4 2 ``` Explanation - In the first row, the longest contiguous subarray of the same color is \\"BB\\". - In the second row, the longest contiguous subarray of the same color is \\"CCCC\\". - In the third row, the longest contiguous subarray of the same color is \\"AA\\". Note that Sandra wants the maximum length of contiguous subarrays of the same color for each row, even if there are multiple subarrays with the same maximum length.","solution":"def max_length_contiguous_subarray(flowers_by_row): Determines the maximum length of contiguous flowers of the same color for each row. Parameters: flowers_by_row (list of str): A list where each element is a string representing the colors in a row. Returns: list of int: A list where each element is the maximum length of contiguous flowers of the same color for that row. max_lengths = [] for row in flowers_by_row: max_length = 1 current_length = 1 for i in range(1, len(row)): if row[i] == row[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) max_lengths.append(max_length) return max_lengths"},{"question":"Dave works at a warehouse and needs to track inventory using an automated system. There are multiple types of items and each item has a unique ID. Dave has set up a system where each transaction is recorded as either an \\"addition\\" or \\"removal\\" of items. An addition transaction increases the count of a particular item type currently in the warehouse, and a removal transaction decreases it. The system must ensure that no item count goes below zero. You need to write a program that processes a series of transactions and then outputs the final count of each item in the warehouse. If at any point a removal transaction would cause an item count to go below zero, the transaction should not be applied. Input * The first line contains an integer n (1 ≤ n ≤ 1000) — the number of transactions. * Each of the next n lines contains a transaction with the format \\"type item_id count\\", where: * type is either \\"add\\" or \\"remove\\", * item_id is a string (1 to 20 lowercase Latin letters) representing the unique ID of the item, * count is an integer (1 ≤ count ≤ 100) representing the number of items to be added or removed. Output For each unique item that has been added or removed, print its item_id followed by its final count in the warehouse. The output should be sorted by item_id in lexicographical order. Example Input 5 add apple 10 remove apple 5 add banana 7 remove apple 6 add banana 3 Output apple 5 banana 10 Note In the example above: 1. The first transaction adds 10 apples. 2. The second transaction removes 5 apples (leaving 5 apples). 3. The third transaction adds 7 bananas. 4. The fourth transaction attempts to remove 6 apples, but only 5 are in stock, so this transaction is ignored. 5. The fifth transaction adds 3 bananas, making the total bananas 10. Thus, the output is: apple 5 banana 10","solution":"def process_transactions(n, transactions): inventory = {} for transaction in transactions: action, item_id, count = transaction[0], transaction[1], int(transaction[2]) if action == \\"add\\": if item_id in inventory: inventory[item_id] += count else: inventory[item_id] = count elif action == \\"remove\\": if item_id in inventory: if inventory[item_id] >= count: inventory[item_id] -= count # If removal tries to take more than available, do nothing # If the action has to be ignored, it does nothing sorted_inventory = sorted(inventory.items()) return [(item, count) for item, count in sorted_inventory]"},{"question":"A large company has an open workspace with n employees working on various projects. Each employee occupies a unique desk and communicates with others through a sophisticated messaging system. The company recently started a new policy to improve productivity. The employees are asked to form groups according to the projects they are working on. The goal is to identify the minimal number of messages required to inform all employees about the new policy. Each employee has a list of project connections, meaning they can send a message directly to any other employee who is working on the same project. If an employee has worked on multiple projects, they can connect two or more different groups of employees. Given the list of direct project connections between the employees, determine the minimum number of messages needed to inform every employee about the new policy. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10000) which are the number of employees and the number of project connections, respectively. Each of the next k lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that employee u and employee v have worked together on at least one project. Output In the first line, print one integer representing the minimum number of messages required to inform every employee about the new policy. Examples Input 5 4 1 2 2 3 4 5 2 4 Output 1 Input 6 4 1 2 2 3 3 4 5 6 Output 2 Note In the first example, all the employees are connected either directly or indirectly, thus one message is enough. In the second example, employees {1, 2, 3, 4} form one connected group and employees {5, 6} form another group. Hence, two messages are needed.","solution":"def min_messages_to_inform_all(n, k, connections): from collections import defaultdict, deque # Build the adjacency list for the graph adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Count the number of connected components components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) components += 1 return components"},{"question":"Given a string `s` consisting of atomic formulas (denoted by uppercase single English letters \'A\' to \'Z\') and logical operators (AND represented by \'&\' and OR represented by \'|\'), evaluate the given logical formula using a set of predefined atomic formula values and return the result. The atomic formulas are evaluated as follows: * \'A\' is True * \'B\' is False * \'C\' is True * \'D\' is False * … The operators \'&\' and \'|\' are evaluated using standard Boolean logic rules: * \'A & B\' evaluates to True if both A and B are True, otherwise it evaluates to False. * \'A | B\' evaluates to True if either A or B is True, otherwise it evaluates to False. Parentheses can also be used to group parts of expressions and indicate the order of evaluation, similar to standard order of operations in arithmetic expressions. You need to answer `q` queries. Each query provides a specific logical formula and you should evaluate and return the Boolean result (True or False). Input The first line of input contains the integer `q` (1 ≤ q ≤ 100) — the number of queries. The next `q` lines each contain a logical formula to be evaluated, in which each formula is a non-empty string with a maximum length of 100 characters. Output For each query, print the Boolean result (True or False) of evaluating the logical formula. Examples Input 3 A & B | C A & (B | C) (A & B) | (C & D) Output True True False Note: - The given atomic formulas always follow the pattern \'A\' is True, \'B\' is False, \'C\' is True, \'D\' is False, ..., and so on. - You can assume that the input formulas are always valid, follow the described pattern, and do not contain any invalid characters.","solution":"def evaluate_formula(formula): # Mapping for atomic formulas atomic_values = {chr(i): (i-65) % 2 == 0 for i in range(65, 91)} # Replace atomic formulas with their boolean values in the formula eval_formula = \\"\\".join(str(atomic_values[char]) if char in atomic_values else char for char in formula) # Evaluate the formula using eval and Python\'s Boolean logic return eval(eval_formula) def solve(queries): results = [] for query in queries: result = evaluate_formula(query) results.append(result) return results"},{"question":"You are given a string which represents a passcode. The security system requires a passcode to contain at least one uppercase letter, one lowercase letter, one digit, and one special character from the set `!@#%^&*()`. Write a program to check if the passcode is valid based on these conditions. Input The first line contains the number of test cases. Each of the following lines contains one string representing the passcode to be validated. Output For each test case, output \\"YES\\" if the passcode is valid, otherwise output \\"NO\\". Constraints 1<=T<=10 1<=length of passcode<=100 Input: 3 Password123! helloWorld1! weakpass Output: YES YES NO","solution":"def is_valid_passcode(passcode): Check if the passcode is valid. A passcode is valid if it contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set `!@#%^&*()`. has_upper = any(c.isupper() for c in passcode) has_lower = any(c.islower() for c in passcode) has_digit = any(c.isdigit() for c in passcode) has_special = any(c in \'!@#%^&*()\' for c in passcode) return has_upper and has_lower and has_digit and has_special def validate_passcodes(test_cases): Validate a list of passcodes. results = [] for passcode in test_cases: if is_valid_passcode(passcode): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string S, you need to determine if it is a palindrome. A string is considered a palindrome if it reads the same forward and backward, ignoring case and non-alphanumeric characters. Input Format: The first and only line of input contains the string S which needs to be checked. Output Format: Output \\"True\\" if the string is a palindrome, otherwise output \\"False\\". Constraints: - The length of the string will not exceed 100 characters. - The string will consist of printable ASCII characters. SAMPLE INPUT A man, a plan, a canal, Panama SAMPLE OUTPUT True","solution":"def is_palindrome(S): Returns True if the string S is a palindrome, otherwise returns False. Ignores case and non-alphanumeric characters. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', S).lower() # Check if the string reads the same forward and backward return cleaned_str == cleaned_str[::-1]"},{"question":"You are given a string `items` which contains different descriptions of items, their quantities, and respective prices per unit. Each item description is compact and formatted as \\"nameQquantityPprice\\", where \\"name\\" is the name of the item (consisting of lowercase English letters only), \\"quantity\\" is the quantity (an integer greater than 0), and \\"price\\" is the price (in dollars) per unit of the item. The \\"quantity\\" and \\"price\\" parts are always prefixed with \\"Q\\" and \\"P\\" respectively. The price does not contain any decimal points and does not exceed 10000 dollars. Each item description is concatenated one after another without any spaces. If an item appears multiple times with different quantities and prices, they should be considered separately. Write a program that calculates the total cost of all items in the given string and prints the result. Input The only line of input contains a non-empty string `items` of length not greater than 1000 — the compact descriptions of items. Output Print the calculated total cost of all items. Example Input appleQ2P30banana10Q5P100grapeQ1P50 Output 520","solution":"def calculate_total_cost(items): Calculates the total cost of all items described in the input string. Parameters: items (str): The compact descriptions of items (e.g., \\"appleQ2P30\\") Returns: int: Total cost of all items import re pattern = r\\"([a-z]+)Q(d+)P(d+)\\" matches = re.findall(pattern, items) total_cost = 0 for match in matches: name, quantity, price = match quantity = int(quantity) price = int(price) total_cost += quantity * price return total_cost"},{"question":"You are given an integer array `nums`. The goal is to partition the array into a minimum number of monotonically increasing subarrays. A subarray is monotonically increasing if each element in the subarray is greater than or equal to the previous element. Write a function that returns the minimum number of such subarrays required to partition the given array. # Input - The first line contains one integer `n` (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array `nums`. - The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^9). # Output - Print one integer — the minimum number of monotonically increasing subarrays needed. # Examples Input ``` 5 4 2 3 1 5 ``` Output ``` 3 ``` Input ``` 6 1 2 3 4 5 6 ``` Output ``` 1 ``` # Note In the first example, the array [4, 2, 3, 1, 5] can be partitioned into `[4], [2, 3], [1, 5]` which are all monotonically increasing subarrays. In the second example, the array [1, 2, 3, 4, 5, 6] is already monotonically increasing, so only one subarray is needed.","solution":"def min_monotonically_increasing_subarrays(nums): Returns the minimum number of monotonically increasing subarrays needed to partition the given array. count = 1 for i in range(1, len(nums)): if nums[i] < nums[i-1]: count += 1 return count"},{"question":"You are part of a security team for a large online platform, and you\'ve been tasked with developing a system to detect brute force login attempts on user accounts. Your team has decided to implement a monitoring tool that will process a sequence of login attempts and flag accounts that experience a suspicious number of failed logins within a short period of time. A login attempt is represented by a string in the following format: ``` \\"timestamp user_id outcome\\" ``` Here, `timestamp` is an integer representing the time (in seconds) since the epoch, `user_id` is a unique integer identifier for a user, and `outcome` is a string that can be either \\"success\\" or \\"failure\\". A brute force attack is detected if a user experiences `k` or more consecutive failed login attempts within a specified time window of `w` seconds. Your task is to write a function that processes a list of login attempts and returns the list of user IDs that are flagged for suspected brute force attacks. # Input The input consists of: 1. Two integers `k` and `w` (1 ≤ k ≤ 100, 1 ≤ w ≤ 10^6), where `k` is the number of consecutive failed attempts considered suspicious, and `w` is the time window in seconds. 2. An integer `n` (1 ≤ n ≤ 10^5), the number of login attempts. 3. `n` lines, each containing a login attempt in the format described above. # Output Output the list of unique `user_id`s that are flagged for suspicious activity, sorted in ascending order by `user_id`. # Example **Input:** ``` 3 60 5 1 123 failure 2 123 failure 63 123 failure 64 123 failure 100 456 success ``` **Output:** ``` 123 ``` **Explanation:** User `123` has 3 failed login attempts within 63 seconds (from timestamp 1 to 64), which is within the `w = 60` seconds window and flagged for potential brute force attack. # Constraints - The input guarantees that for any user, the login attempts are sorted by timestamp in non-decreasing order. # Note: - Even if a user has `k` consecutive failures outside the time window `w`, it should not be considered suspicious. Only sequences of `k` consecutive failures within the specified time window should be flagged.","solution":"def detect_brute_force_attempts(k, w, login_attempts): from collections import defaultdict flagged_users = set() attempts_by_user = defaultdict(list) for attempt in login_attempts: timestamp, user_id, outcome = attempt.split() timestamp = int(timestamp) user_id = int(user_id) attempts_by_user[user_id].append((timestamp, outcome)) for user_id, attempts in attempts_by_user.items(): num_failures = 0 start_index = 0 for index, (timestamp, outcome) in enumerate(attempts): if outcome == \'failure\': if index == 0 or attempts[index - 1][1] == \'success\': start_index = index num_failures += 1 if num_failures >= k: if timestamp - attempts[start_index][0] <= w: flagged_users.add(user_id) break else: num_failures = 0 return sorted(flagged_users)"},{"question":"**Problem description:** You are given a list of Web hosts and the number of requests each host is serving. For a special maintenance task, you need to rebalance the requests such that each Web host handles even number of requests. If a host is handling an odd number of requests, you can transfer one request from the host with the maximum number of requests to the host with the minimum (odd) number of requests. Your task is to determine the minimum number of transfers required to achieve this balance. **Input:** - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of Web hosts. - The next line contains N integers, where each integer represents the number of requests being served by a host. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Number of requests on a host ≤ 10000 **Output:** For each test case, print the minimum number of transfers needed on a new line. **Example:** ``` Input: 2 4 5 9 3 1 3 2 3 4 Output: 4 0 ``` **Explanation:** - In the first test case, we need to make the number of requests for each web host even. This requires 4 transfers (transfer 1 request from host 2 to host 4, and then transfer 1 request from host 1 to host 3; each operation needs to be done twice to balance all). - In the second test case, all hosts already have an even number of requests or they will reach automatically with the existing setup.","solution":"def min_transfers_to_even_requests(T, cases): results = [] for case in cases: N, requests = case odd_counts = sum(1 for req in requests if req % 2 != 0) # To make all even, the number of odd counts should be even # So, the number of transfers will be odd_counts//2 results.append(odd_counts // 2 * 2) return results"},{"question":"The Candy Thief recently found a jar filled with candies. The jar has `n` candies, each labeled with a positive integer representing its sweetness level. The Candy Thief wants to select some candies such that their total sweetness level is as close as possible to a given integer `t`. Help the Candy Thief by writing a program that finds out the minimum absolute difference between the sum of selected candies\' sweetness levels and the given target `t`. Input The first line contains two integers `n` (1 ≤ n ≤ 1000) and `t` (1 ≤ t ≤ 100000). The second line contains `n` positive integers representing the sweetness levels of the candies. Each sweetness level does not exceed 1000. Output Output a single integer — the minimum absolute difference between the sum of selected candies\' sweetness levels and `t`. Examples Input 5 10 1 2 3 4 5 Output 0 Input 3 7 8 5 3 Output 1 Note In the first example, the sum of candies 1, 2, 3, and 4 is exactly 10, which is equal to t, hence the minimum difference is 0. In the second example, selecting the candy with sweetness level 8 results in the closest sum to 7, giving an absolute difference of 1.","solution":"def min_absolute_difference(n, t, sweetness_levels): dp = {0} for candy in sweetness_levels: new_dp = dp.copy() for total in dp: new_dp.add(total + candy) dp = new_dp min_diff = abs(t) for total in dp: min_diff = min(min_diff, abs(t - total)) return min_diff"},{"question":"In a large company, the manager decides to schedule team-building activities involving employees. Each activity involves exactly two employees. The manager has n employees and m activities each involving a pair of employees who want to participate together. There is a restriction: No employee can participate in more than one activity. The manager needs to choose a maximum number of activities such that no employee is scheduled for more than one activity. Write a program to determine the maximum number of such activities. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. For each test case, the first line contains two integers n (1 ≤ n ≤ 2⋅10^5) and m (1 ≤ m ≤ 2⋅10^5) — the number of employees and the number of activities. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) — the pair of employees u and v that want to participate together. It is guaranteed that the sums of n and m over all test cases do not exceed 2 ⋅ 10^5. Output For each test case, print one integer — the maximum number of activities that can be scheduled such that no employee participates in more than one activity. Example Input 3 4 3 1 2 2 3 3 4 5 4 1 2 2 3 3 4 4 5 3 3 1 2 2 3 1 3 Output 2 2 1 Explanation In the first test case, the maximum number of activities where no employee participates more than once are (1, 2) and (3, 4). Thus, the maximum number is 2. In the second test case, we can choose (1, 2) and (3, 4). Thus, the maximum number is 2. In the third test case, since all activities involve employees who already participate in other activities, only one activity can be scheduled (either one of the pairs). Thus, the maximum number is 1.","solution":"def max_activities(t, test_cases): result = [] for i in range(t): n, m, activities = test_cases[i] selected_employees = set() count = 0 for u, v in activities: if u not in selected_employees and v not in selected_employees: selected_employees.add(u) selected_employees.add(v) count += 1 result.append(count) return result"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either a 0 or a 1. Your task is to transform this grid into a desired pattern using the following operation: * Select any sub-grid of dimensions 2x2 and flip all the bits within this sub-grid (turn 0s into 1s and 1s into 0s). The initial and final states of the grid are guaranteed to be of the same dimensions and contain the same number of 0s and 1s. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The following n lines describe the initial state of the grid, each line containing a binary string of length m. The following n lines describe the final state of the grid, each line containing a binary string of length m. Output On the first line print q — the number of operations used. You should find such a solution that 0 ≤ q ≤ n ⋅ m. In each of the next q lines, print four integers x1, y1, x2, y2. On the i-th line, you should print the description of the i-th operation. These integers should satisfy the conditions 1 ≤ x1 ≤ x2 ≤ n and 1 ≤ y1 ≤ y2 ≤ m, and both (x1, y1) and (x2, y2) should represent the top-left and bottom-right corners of the 2x2 sub-grid, respectively. This sequence of operations should transform the initial state of the grid to the final one. If there is more than one solution, find any of them. Examples Input 3 3 011 101 110 000 111 000 Output 3 1 1 2 2 1 2 2 3 2 1 3 2 Input 2 2 01 10 11 00 Output 2 1 1 2 2 1 2 2 2 Note Consider the first example. * The current state of the grid: 011 101 110 The first operation flips the bits in the 2x2 subgrid with top-left corner (1,1) and bottom-right corner (2,2): 100 010 110 The second operation flips the bits in the 2x2 subgrid with top-left corner (1,2) and bottom-right corner (2,3): 111 000 110 The third operation flips the bits in the 2x2 subgrid with top-left corner (2,1) and bottom-right corner (3,2): 111 111 000 We have reached the final state of the grid.","solution":"def flip_subgrid(grid, x1, y1): for i in range(2): for j in range(2): grid[x1 + i][y1 + j] = 1 - grid[x1 + i][y1 + j] def transform_grid(n, m, initial, final): ops = [] initial = [list(map(int, row)) for row in initial] final = [list(map(int, row)) for row in final] for i in range(n - 1): for j in range(m - 1): if initial[i][j] != final[i][j]: flip_subgrid(initial, i, j) ops.append((i + 1, j + 1, i + 2, j + 2)) return ops # Example: n, m = 3, 3 initial = [\\"011\\", \\"101\\", \\"110\\"] final = [\\"000\\", \\"111\\", \\"000\\"] ops = transform_grid(n, m, initial, final) print(len(ops)) for op in ops: print(*op)"},{"question":"A company is organizing a set of parallel coding challenge tournaments. Each tournament is designed to have tasks that vary in difficulty from 1 to m. In each tournament setting, tasks are assigned exactly once, and no two tournaments can have the same combination of tasks. Write a program to generate all possible unique tournament configurations, ensuring no repetition of configurations across tournaments. Constraints * 1 ≤ m ≤ 10 * Each configuration must be sorted in ascending order. * Each configuration must be unique. Input m Output Output all the unique tournament configurations, one configuration per line. Each configuration should be a list of task difficulties, separated by space. Examples Input 3 Output 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Input 2 Output 1 2 2 1","solution":"from itertools import permutations def generate_tournament_configurations(m): Generate all possible unique configurations for tournaments with tasks ranging from 1 to m. Args: m (int): Maximum difficulty of the tasks. Returns: List[List[int]]: A list of configurations with each configuration being a list of integers. tasks = list(range(1, m + 1)) unique_configs = list(permutations(tasks)) result = [list(config) for config in unique_configs] return result"},{"question":"Iahub and Sorin are playing a game involving sequences. Given a sequence of n integers, they need to determine the maximum possible sum of any contiguous subsequence with the additional condition that no two consecutive subsequences chosen can share any elements. You are asked to write a program to find this maximum sum for a given sequence. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000), the length of the sequence. The following line contains n integers, representing the sequence, where each integer can range from -10000 to 10000. Output Output a single integer representing the maximum possible sum of any contiguous subsequence that satisfies the given condition. Example Input 8 3 2 -6 4 0 -2 8 -1 Output 15 Explanation In this example: - One possible valid selection of non-overlapping subsequences is: [3, 2], [4, 0], [8]. - The sum of this selection is 3 + 2 + 4 + 0 + 8 = 17. - Another possible selection is: [4], [8], resulting in a sum of 4 + 8 = 12. - The maximum possible sum in this case is 17.","solution":"def max_non_consecutive_subsequence_sum(n, sequence): if n == 0: return 0 if n == 1: return max(0, sequence[0]) # Dynamic programming approach dp = [0] * n dp[0] = max(0, sequence[0]) # the best sum for sequence[:1] dp[1] = max(dp[0], sequence[1]) # the best sum for sequence[:2] for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + sequence[i]) return dp[-1]"},{"question":"Given an integer n, determine if n can be expressed as the product of two positive integers where both are greater than 1. Constraints * 2 ≤ n ≤ 10^6 * n is an integer. Input Input is given from Standard Input in the following format: n Output If such a pair of integers exists, print `Yes`; otherwise, print `No`. Examples Input 6 Output Yes Input 13 Output No","solution":"def can_be_expressed_as_product(n): Determine if n can be expressed as the product of two positive integers where both are greater than 1. for i in range(2, int(n**0.5) + 1): if n % i == 0 and n // i > 1: return \\"Yes\\" return \\"No\\""},{"question":"You are given a list of integers where each integer represents the height of a building in a city skyline. The skyline is viewed from left to right. You need to determine how many buildings in the list have a clear view of the sunset. A building has a clear view of the sunset if there are no taller buildings to its right. Write a function `count_sunset_views(buildings: List[int]) -> int` that takes in a list of integers representing the building heights and returns the count of buildings with a clear view of the sunset. # Input: - A list of integers `buildings`, where 1 ≤ len(buildings) ≤ 10^5 and 1 ≤ buildings[i] ≤ 10^6. # Output: - An integer representing the number of buildings with a clear view of the sunset. # Example: **Input:** ``` [4, 2, 3, 1] ``` **Output:** ``` 3 ``` **Explanation:** - Building 1 (height 4) has a clear view of the sunset. - Building 2 (height 2) is blocked by Building 3 and does not have a clear view. - Building 3 (height 3) has a clear view of the sunset. - Building 4 (height 1) has a clear view of the sunset. # Note: - Iterate through the list of building heights from the beginning towards the end. - For each building, check if all subsequent buildings are shorter. - Optimize the solution to handle lists up to the maximum constraint efficiently.","solution":"def count_sunset_views(buildings): Returns the number of buildings with a clear view of the sunset. # Initialize the count of buildings with sunset view count = 0 # Initialize the maximum height seen so far to zero max_height_so_far = 0 # Iterate through the buildings from right to left for height in reversed(buildings): # If the current building is taller than all buildings to its right if height > max_height_so_far: count += 1 max_height_so_far = height return count"},{"question":"Given an array of positive integers, a segment is defined as a contiguous subarray where all the elements are equal. # Task Write a program that splits the array into the minimum number of segments. Input - The first line contains an integer `n` (1 ≤ n ≤ 100) - the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1,000) - the elements of the array. Output Print the minimum number of segments required to split the array. Example # Input ``` 8 1 1 2 2 2 3 3 1 ``` # Output ``` 5 ``` # Input ``` 5 4 4 4 4 4 ``` # Output ``` 1 ``` Note In the first example, the array can be split into 5 segments: [1, 1], [2, 2, 2], [3, 3], [1]. So the output is 5. In the second example, the array is already a single segment as all the elements are the same, so the output is 1.","solution":"def min_segments(arr): Given a list of integers, this function returns the minimum number of segments of contiguous subarrays where all elements in each subarray are the same. if not arr: return 0 segment_count = 1 for i in range(1, len(arr)): if arr[i] != arr[i - 1]: segment_count += 1 return segment_count"},{"question":"# Dragon\'s Treasure Hunt Drake, a daring adventurer, is on a quest to find the legendary Dragon\'s Treasure. He must navigate a grid-like dungeon filled with obstacles, traps, and hidden troves. The dungeon is represented as an n x m grid where each cell can either be an open path \'.\', a wall \'#\', a trap \'T\', or the treasure \'X\'. Drake can move up, down, left, or right, but he cannot move through walls or traps. The objective is to find the shortest path from the starting point \'S\' to the treasure \'X\'. If it\'s impossible to reach the treasure, you should return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns of the dungeon grid. - The next n lines contain m characters each, representing the dungeon grid. The grid contains exactly one \'S\' and one \'X\'. Output: - Output a single integer, the length of the shortest path from \'S\' to \'X\'. If there is no such path, output -1. Example Input ``` 5 5 S.... .#.#. .#T#. ...#X . ``` Output ``` 7 ``` Note Consider the example provided: - Drake starts at the position \'S\' (0,0). - He moves to the right until reaching the first obstacle, the wall. - Then, he moves downward, avoiding traps, and finally reaches the treasure \'X\' at position (3,4). The shortest path has a length of 7 steps.","solution":"from collections import deque def find_shortest_path(n, m, grid): Finds the shortest path from \'S\' to \'X\' in the grid. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (List[List[str]]): The dungeon grid containing paths \'.\', walls \'#\', traps \'T\', starting point \'S\', and treasure \'X\'. Returns: int: The length of the shortest path from \'S\' to \'X\', or -1 if no such path exists. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # Find the starting point \'S\' start = None for r in range(n): for c in range(m): if grid[r][c] == \'S\': start = (r, c) break if start: break if not start: return -1 # Initialize the queue for BFS queue = deque([(start, 0)]) # (cell, distance) visited = set() visited.add(start) while queue: (r, c), dist = queue.popleft() # Check if we have reached the treasure if grid[r][c] == \'X\': return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc # Check if the new position is valid and not visited if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited: if grid[nr][nc] == \'.\' or grid[nr][nc] == \'X\': queue.append(((nr, nc), dist + 1)) visited.add((nr, nc)) return -1"},{"question":"In a dense forest, there is an ancient temple which is renowned for its intricate design of paths that are represented as a grid of size MxN. The monks at the temple have devised a unique way of recording their travel between any two points in the temple. Each monk starts from a point (0, 0) and travels to a destination point (M-1, N-1) by only making moves to the right or down. Given the dimensions M and N, you are required to find the number of unique paths a monk can take to travel from the top-left corner of the grid (0, 0) to the bottom-right corner (M-1, N-1). Input First line of input contains number of test cases T. Each of the next T lines contains 2 space-separated integers: M and N, representing the dimensions of the grid. Output For each test case, print a single line having the number of unique paths from (0, 0) to (M-1, N-1). Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 50 Example Input 3 3 3 2 2 7 3 Output 6 2 28 Explanation In the 1st test case, the grid is 3x3, and there are 6 unique paths: (down, down, right, right), (down, right, down, right), (down, right, right, down), (right, down, down, right), (right, down, right, down), and (right, right, down, down). In the 2nd test case, the grid is 2x2, and there are 2 unique paths: (down, right) and (right, down). In the 3rd test case, the grid is 7x3, and there are 28 unique paths.","solution":"def unique_paths(m, n): Returns the number of unique paths from (0, 0) to (M-1, N-1) in a MxN grid. # Create a 2D list to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # Initialize the first row and first column to 1 for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def solve_all_cases(test_cases): results = [] for (m, n) in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"A group of astronauts has landed on an alien planet. They discovered several mysterious energy sources scattered across the planet\'s surface. To harness these energy sources, the astronauts need to collect them in a way that maximizes the total energy gathered while avoiding paths that could potentially lead to dangerous traps. The energy sources are represented by an N x M grid where each cell contains an integer denoting the energy level of that cell. The astronauts can only move right or down from any given cell. Starting from the top-left cell of the grid, help the astronauts calculate the maximum energy that can be collected by the time they reach the bottom-right cell. Input The first line contains two integers N and M, representing the dimensions of the grid. Each of the next N lines contains M integers, representing the energy levels of each cell in the grid. Output Print a single integer, the maximum energy that can be collected by reaching the bottom-right cell from the top-left cell. Constraints 1 ≤ N, M ≤ 1000 -1000 ≤ energy levels ≤ 1000 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation The optimal path that yields the maximum energy is: 1 -> 3 -> 5 -> 2 -> 1, resulting in a total energy of 12.","solution":"def max_energy_collected(N, M, grid): if N == 0 or M == 0: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Initialize the first row of the dp table for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column of the dp table for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"The spaceship crew is preparing a list of items to restock their food supplies. Each crew member suggests various quantities of a particular item to be restocked, but they want to avoid overstocking. To ensure they don\'t carry too many of one item, they will restock the item only if the suggested amount does not exceed a certain threshold. Write a program that determines whether or not to restock a particular item based on the crew\'s suggestions and the specified threshold. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of crew members who gave their suggestions and the upper threshold for restocking the item, respectively. The second line contains n integers, each integer is a positive value representing the quantity of the suggested item by each crew member. Output Print \\"RESTOCK\\" if the sum of the suggested quantities is less than or equal to the threshold k. Otherwise, print \\"OVERSTOCK\\". Examples Input 4 150 30 40 50 20 Output RESTOCK Input 3 90 30 30 40 Output OVERSTOCK Explanation In the first example, the total quantity suggested by the crew members is 30 + 40 + 50 + 20 = 140, which is less than the threshold of 150, so the item will be restocked. In the second example, the total quantity suggested by the crew members is 30 + 30 + 40 = 100, which exceeds the threshold of 90, so they decide to avoid overstocking.","solution":"def restock_decision(n, k, suggestions): Determine whether to restock based on crew\'s suggestions and the threshold. Parameters: n (int): Number of crew members k (int): Threshold for restocking suggestions (list of int): Quantities suggested by crew members Returns: str: \\"RESTOCK\\" if total suggestions are within the threshold, \\"OVERSTOCK\\" otherwise total_suggestions = sum(suggestions) if total_suggestions <= k: return \\"RESTOCK\\" else: return \\"OVERSTOCK\\""},{"question":"You are given an array `a` consisting of `n` integers and Q queries. Each query specifies two integers `x` and `y`. For each query, you must determine the minimum value in the subarray starting at the x-th index and ending at the y-th index (indices are 1-based). Constraints: - 1 ≤ n ≤ 100,000 - 1 ≤ a_i ≤ 10^9 - 1 ≤ Q ≤ 100,000 - 1 ≤ x ≤ y ≤ n Input: Input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n Q x_1 y_1 x_2 y_2 : x_Q y_Q ``` Output: For each query, print the minimum value in the subarray from the x-th index to the y-th index. Examples: Input: ``` 5 1 2 3 4 5 3 1 3 2 5 1 5 ``` Output: ``` 1 2 1 ``` Input: ``` 7 4 2 6 1 7 5 3 4 1 4 3 6 2 3 5 7 ``` Output: ``` 1 1 2 3 ``` Input: ``` 3 10 15 20 2 1 2 2 3 ``` Output: ``` 10 15 ```","solution":"def find_min_in_subarray(n, arr, queries): results = [] for x, y in queries: min_val = min(arr[x-1:y]) # Adjusting for 1-based index results.append(min_val) return results"},{"question":"In a fictional world, animals have evolved to communicate through a language based entirely on numbers. Embracing this numerical system, the animals have started experimenting with advanced algorithms, including finding intriguing patterns in sequences of numbers. One day, an owl and a fox stumble upon a challenging problem involving sequences. The challenge involves finding the maximum profit from buying and selling a particular fruit on different days. Given a list of daily prices for the fruit, the owl and fox need to figure out the best days to buy and sell so that they can maximize their profit. However, due to certain restrictions, they can only make at most two transactions (a purchase followed by a sale). This means they might choose two non-overlapping pairs of days to buy and sell the fruit. Note that they cannot sell a fruit before they buy it and they cannot hold more than one fruit at a time. Input - You are given a list of integers `prices` where `prices[i]` is the price of the fruit on day `i` (0 ≤ i < n). Output - Return an integer representing the maximum profit the owl and fox can achieve from at most two transactions. If no profit can be made, return 0. Constraints - 1 ≤ n ≤ 10^5 - 0 ≤ prices[i] ≤ 10^5 Example Input [3,3,5,0,0,3,1,4] Output 6 Explanation The animals can achieve the maximum profit through the following transactions: - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3 - 0 = 3. - Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4 - 1 = 3. Example Input [1,2,3,4,5] Output 4 Explanation The animals can achieve the maximum profit through the following transaction: - Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4. Note The animals can make at most two transactions. They must sell the fruit before buying another one. They aim to maximize their profit using the given daily prices.","solution":"def maxProfit(prices): if not prices: return 0 # Initialize variables to track the maximum profit # First buy/sell first_buy = float(\'-inf\') first_sell = 0 # Second buy/sell second_buy = float(\'-inf\') second_sell = 0 for price in prices: # Trying to buy the first stock first_buy = max(first_buy, -price) # Trying to sell the first stock that was bought first_sell = max(first_sell, first_buy + price) # Trying to buy the second stock after selling the first stock second_buy = max(second_buy, first_sell - price) # Trying to sell the second stock that was bought second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"You are given an array of integers and an integer target. Your task is to determine if any two integers in the array sum to the target value. If such a pair exists, return the pair. If no such pairs exist, return an empty array. The order of the elements in the returned pair does not matter. You can assume there will be at most one pair of integers that sum to the target. Input: The first line contains an integer n, the length of the array. The second line contains n integers, representing the elements of the array. The third line contains an integer target, the target sum. Output: Print the pair of integers that sum to the target value, or an empty array if no such pair exists. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ array[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 9 SAMPLE OUTPUT [4,5] Explanation: 1+8 is not in the array, 2+7 is not in the array, 3+6 is not in the array, 4+5=9 is a valid pair. Therefore, the answer is [4,5].","solution":"def find_pair_with_sum(array, target): Returns a pair of integers from the array that sum to the target value. If no such pair exists, returns an empty list. seen = set() for num in array: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Let n be a positive integer. You are given an array of n elements representing the heights of buildings in a row. You can choose any two buildings (lets call these buildings A and B) and remove all the buildings between A and B, including A and B. After removing the buildings, the heights of the remaining buildings will be joined sequentially to form a new row. The cost of removing the buildings is defined as the sum of their heights. Your task is to find the maximum possible sum of heights after removing exactly one pair of buildings (A and B). Constraints * 2 ≤ n ≤ 10^5 * 1 ≤ heights_i ≤ 10^9 Input Input is given from Standard Input in the following format: n heights_1 heights_2 ... heights_n Output Print the maximum possible sum of heights after removing one pair of buildings. Examples Input 5 1 2 3 4 5 Output 9 Input 6 5 1 1 1 5 1 Output 12 Input 4 1 1 1 1 Output 2","solution":"def max_sum_of_removed_buildings(n, heights): This function calculates the maximum sum of heights of buildings after removing exactly one pair of buildings. Parameters: n (int): Number of buildings heights (List[int]): List of heights of the buildings Returns: int: Maximum sum of removed buildings\' heights # Initialize the maximum sum to zero max_sum = 0 # Iterate over the list of heights to find the maximum sum of a pair of buildings for i in range(n - 1): for j in range(i + 1, n): current_sum = heights[i] + heights[j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A treasure hunter has found an old map which leads to a hidden treasure. The map contains directions in the form of a string consisting of characters \'L\', \'R\', \'U\', and \'D\' which denote the movements Left, Right, Up, and Down respectively. The initial position is at the origin (0,0) on a 2D plane. The treasure lies at an unknown position on this plane. Given the direction string, the hunter must determine the final coordinates where he ends up. Write a function to determine the final coordinates after following all the given directions. Input: A single line containing a string S of length n which consists of characters \'L\', \'R\', \'U\', and \'D\'. Output: Print two integers denoting the final coordinates x and y after following the directions in the input string. Constraints: 1 ≤ n ≤ 10^5 The string will contain only characters \'L\', \'R\', \'U\', \'D\'. SAMPLE INPUT LURD SAMPLE OUTPUT 0 0 Explanation Starting at (0,0): Move Left to (-1,0) Move Up to (-1,1) Move Right to (0,1) Move Down to (0,0) The final position is (0,0).","solution":"def find_final_coordinates(directions): Given a string of directions, returns the final coordinates on a 2D plane starting from (0, 0). x, y = 0, 0 for direction in directions: if direction == \'L\': x -= 1 elif direction == \'R\': x += 1 elif direction == \'U\': y += 1 elif direction == \'D\': y -= 1 return (x, y)"},{"question":"You are given an array of integers which represents the prices on successive days of a stock. The goal is to maximize profit by buying and selling the stock multiple times. However, you can only hold one share of the stock at any given time, i.e., you must sell the stock before you buy again. Write a function that takes in an array of integers representing the stock prices and returns the maximum profit you can achieve. You must produce the output in the form of relative profit for each day compared to the previous day. Input - The first line contains an integer n (1 ≤ n ≤ 105), the number of days. - The second line contains n integers representing the stock prices on consecutive days (1 ≤ price ≤ 104). Output - In a single line, print the relative profit for each day compared to the previous day. Examples Input 6 7 1 5 3 6 4 Output 0 -6 4 -2 3 -2 Input 5 1 2 3 4 5 Output 0 1 1 1 1 Note In the first sample, the profit for the first day is 0 because there\'s no previous day to compare. For the second day, the profit is -6 because the price dropped by 6 compared to the first day. For the third day, the profit is 4 since the price increased by 4 compared to the second day, and so on. In the second sample, the stock price steadily increases by 1 each day, so the profit each day is 1 (except for the first day, which is 0 as there is no previous day).","solution":"def relative_profit(prices): Computes the relative profit for each day compared to the previous day. :param prices: List[int] - List of stock prices on consecutive days :return: List[int] - List of relative profits for each day n = len(prices) if n == 0: return [] profits = [0] # Initialize the first day\'s profit as 0 for i in range(1, n): profit = prices[i] - prices[i-1] profits.append(profit) return profits"},{"question":"In a small village, there is a unique marketplace where all the paths connecting the various shops form a tree. The local vendor, Rama, wants to maximize his profit by visiting exactly K unique shops in a single day, starting from his own shop (shop 1). However, to avoid exhaustion and plan his journey effectively, he needs your help to calculate the maximum distance he can travel to visit exactly K unique shops. The marketplace is represented as an undirected tree with N nodes and N-1 edges. The distance between any two connected nodes is always 1. Write a program to find the maximum distance Rama can travel to visit exactly K different shops, starting from shop 1. Input: The first line contains two space-separated integers N (the number of shops) and K (the number of unique shops to visit, including the starting shop). The next N-1 lines each contain two space-separated integers u and v, denoting an edge between shop u and shop v. Output: A single integer denoting the maximum distance Rama can travel to visit exactly K unique shops starting from shop 1. Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ u, v ≤ N SAMPLE INPUT 5 3 1 2 1 3 2 4 2 5 SAMPLE OUTPUT 2 Explanation: The longest path to visit exactly 3 unique shops starting from shop 1 could be either: 1 -> 2 -> 4 or 1 -> 2 -> 5 or 1 -> 3 -> 4 or 1 -> 3 -> 5 etc. In any case, the maximum distance traveled among these paths is 2.","solution":"from collections import deque def bfs_to_find_furthest(node, edges): queue = deque([node]) visited = {node} furthest_node = node while queue: current_node = queue.popleft() furthest_node = current_node for neighbor in edges[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return furthest_node def bfs_to_find_distance(node, target, edges, K): queue = deque([(node, 0)]) visited = {node} while queue: current_node, distance = queue.popleft() if distance == K - 1: return distance for neighbor in edges[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 # This should not happen as K <= N def max_distance_travel(N, K, connections): if K == 1: return 0 edges = [[] for _ in range(N + 1)] for u, v in connections: edges[u].append(v) edges[v].append(u) # Step 1: Find furthest from node 1 to any node furthest_from_start = bfs_to_find_furthest(1, edges) # Step 2: Find longest distance K - 1 from furthest_from_start max_distance = bfs_to_find_distance(furthest_from_start, 1, edges, K) return max_distance # Example usage # Note: The connections input format should be a list of tuples[(u1, v1), (u2, v2), ...] print(max_distance_travel(5, 3, [(1, 2), (1, 3), (2, 4), (2, 5)])) # Output should be 2"},{"question":"You are given a matrix of size n x n, and you need to perform q queries on this matrix. Each query can be one of three types: 1. Set the value at a specific cell (row, column) to a given integer. 2. Increase the value of all elements in a specified row by a given integer. 3. Compute the sum of elements in a specified submatrix. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and q (1 ≤ q ≤ 100000) — the size of the matrix and the number of queries, respectively. - Each of the following q lines contains a description of a single query. There are three types of queries: - Type 1: `1 row column value` — set the element at position (row, column) to the given value. - Type 2: `2 row increment` — add the given increment to each element of the specified row. - Type 3: `3 row1 column1 row2 column2` — compute the sum of elements in the submatrix with the top-left corner at (row1, column1) and the bottom-right corner at (row2, column2). It is guaranteed that: - In Type 1 queries, the indices (row, column) will be within the bounds of the matrix. - In Type 2 queries, the row index will be within the bounds of the matrix. - In Type 3 queries, the submatrix will always be inside the bounds of the matrix. Output For each query of the third type, print one integer — the sum of elements in the specified submatrix. Example Input ``` 3 5 1 1 1 2 1 2 2 3 2 1 1 3 1 1 2 2 3 2 2 3 3 ``` Output ``` 7 3 ``` Explanation: - Initially, the matrix is all zeros. - The first query sets the value at (1, 1) to 2. - The second query sets the value at (2, 2) to 3. - The third query increases all values in the first row by 1. - The fourth and fifth queries compute sums in the specified submatrices.","solution":"class Matrix: def __init__(self, n): self.n = n self.matrix = [[0] * n for _ in range(n)] self.row_adds = [0] * n def process_query(self, query): parts = list(map(int, query.split())) type_query = parts[0] if type_query == 1: _, row, column, value = parts self.matrix[row-1][column-1] = value - self.row_adds[row-1] elif type_query == 2: _, row, increment = parts self.row_adds[row-1] += increment elif type_query == 3: _, row1, column1, row2, column2 = parts sum_value = 0 for r in range(row1-1, row2): for c in range(column1-1, column2): sum_value += self.matrix[r][c] + self.row_adds[r] return sum_value def process_queries(n, queries): matrix = Matrix(n) results = [] for query in queries: result = matrix.process_query(query) if result is not None: results.append(result) return results"},{"question":"Given a matrix represented in the form of nested arrays, your task is to flatten the matrix and sort all the elements in non-decreasing order. A matrix is represented as a list of lists, where each sublist is a row in the matrix. The matrix can be of any size, but it is guaranteed that all rows have the same number of elements. Write a program to: 1. Flatten the input matrix into a single list of elements. 2. Sort the list in non-decreasing order. 3. Print the sorted list. Input: - The first line contains an integer n, representing the number of rows in the matrix (1 ≤ n ≤ 100). - The second line contains an integer m, representing the number of columns in the matrix (1 ≤ m ≤ 100). - The next n lines contain m integers each, separated by spaces, representing the rows of the matrix. Output: - Print a single line containing the sorted list of all elements in non-decreasing order, separated by spaces. Example: Input: ``` 3 3 9 3 8 6 1 2 7 4 5 ``` Output: ``` 1 2 3 4 5 6 7 8 9 ``` Input: ``` 2 4 10 20 30 40 5 15 25 35 ``` Output: ``` 5 10 15 20 25 30 35 40 ```","solution":"def flatten_and_sort_matrix(matrix): Flattens the matrix and sorts all elements in non-decreasing order. Args: matrix (list of list of int): The input matrix. Returns: list of int: The sorted list of all elements in the matrix. # Flattening the matrix using a list comprehension flattened_list = [element for row in matrix for element in row] # Sorting the flattened list sorted_list = sorted(flattened_list) return sorted_list # Example usage if __name__ == \\"__main__\\": n = int(input()) m = int(input()) matrix = [list(map(int, input().split())) for _ in range(n)] result = flatten_and_sort_matrix(matrix) print(\\" \\".join(map(str, result)))"},{"question":"Write a function to check if a given string is a valid IPv4 address. An IPv4 address consists of four numeric segments separated by dots, where each segment is an integer ranging from 0 to 255. Leading zeros in a segment are invalid unless the segment itself is exactly \'0\'. Input The input consists of a single string representing the IPv4 address. Output The output should be a single line containing \\"Valid\\" if the given string is a valid IPv4 address, and \\"Invalid\\" otherwise. Constraints - The total length of the string address will be between 1 and 15. Example Input: 192.168.1.1 Output: Valid Explanation: The IPv4 address \\"192.168.1.1\\" is valid as each segment is in the range of 0 to 255. Input: 256.100.25.50 Output: Invalid Explanation: The IPv4 address \\"256.100.25.50\\" is invalid as the first segment is greater than 255. Input: 01.20.30.40 Output: Invalid Explanation: The IPv4 address \\"01.20.30.40\\" is invalid because of leading zeros in the first segment. Input: 192.168.001.1 Output: Invalid Explanation: The IPv4 address \\"192.168.001.1\\" is invalid because of leading zeros in the third segment.","solution":"def is_valid_ipv4_address(ip_address): Check if the given string is a valid IPv4 address. Parameters: ip_address (str): A string representing the IPv4 address. Returns: str: \\"Valid\\" if the given string is a valid IPv4 address, \\"Invalid\\" otherwise. segments = ip_address.split(\\".\\") # Check if we have exactly 4 segments if len(segments) != 4: return \\"Invalid\\" for segment in segments: # Check if the segment is not empty and is a digit if not segment.isdigit(): return \\"Invalid\\" # Convert segment to integer segment_int = int(segment) # Check if the segment is within the valid range if segment_int < 0 or segment_int > 255: return \\"Invalid\\" # Check for leading zeros if segment != str(segment_int): return \\"Invalid\\" return \\"Valid\\""},{"question":"George enjoys exploring the forests and recording the number of unique animals he encounters in each area. The forest he explores is represented as an undirected graph where nodes represent the different areas, and edges signify the paths connecting them. Each node has a specific type of animal that inhabits that area. We define George\'s exploration sequence as valid if he visits each area exactly once and records the different animal types he sees in order. George can start his exploration at any node but can only visit each node once. Help George find a valid exploration sequence that starts from any area and visits all areas exactly once. It should also ensure that the unique types of animals he sees in this sequence are in lexicographical order. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of areas (nodes) and the number of paths (edges) in the forest. - The second line contains n space-separated integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 100) — t_i is the type of animal in area i. - The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a bidirectional path between area u and area v. Output - Output n space-separated integers, representing the areas in the sequence of George\'s valid exploration where the unique animal types are recorded in lexicographical order. If there are multiple valid sequences, print any one of them. If no valid sequence exists, output -1. Considerations - If there are several valid sequences, you are allowed to output any of them. - It is permissible for nodes with the same animal type to appear consecutively in the sequence, provided the sequence of unique types follows lexicographical order. Example Input 6 7 2 1 3 2 1 3 1 2 2 3 1 4 4 5 5 6 3 6 4 3 Output 1 2 3 6 5 4 Explanation George starts in area 1 with animal type 2, then moves to area 2 encountering animal type 1, then to area 3 with type 3, and continues to area 6 with type 3, area 5 with type 1, and finally area 4 with type 2. The animal types encountered are {2, 1, 3, 3, 1, 2}, and the unique animal types are {1, 2, 3} in lexicographical order.","solution":"from collections import defaultdict, deque def find_exploration_sequence(n, m, animal_types, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Sort adjacency lists by animal type to ensure we can traverse in lexicographical order for key in graph: graph[key] = sorted(graph[key], key=lambda x: (animal_types[x - 1], x)) def dfs(node, visited, sequence): visited.add(node) sequence.append(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, sequence) # We try DFS from every starting node best_sequence = None for start in range(1, n + 1): visited = set() sequence = [] dfs(start, visited, sequence) if len(visited) == n: if best_sequence is None or len(sequence) < len(best_sequence): best_sequence = sequence if best_sequence is None: return [-1] return best_sequence # Example usage: # Input: n = 6 m = 7 animal_types = [2, 1, 3, 2, 1, 3] edges = [ (1, 2), (2, 3), (1, 4), (4, 5), (5, 6), (3, 6), (4, 3) ] print(find_exploration_sequence(n, m, animal_types, edges))"},{"question":"Alice has a string consisting of lowercase English letters. She wants to modify the string such that no two adjacent characters are the same. In one operation, she can replace a character with any lowercase English letter. Find the minimum number of operations needed to achieve this. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100) — the string Alice wants to modify. Output For each test case, print the minimum number of operations needed to modify the string so that no two adjacent characters are the same. Examples Input 3 aabb aaab ababa Output 2 2 0 Note In the first sample, Alice can replace the characters at positions 2 and 4 to get \\"abab\\". In the second sample, Alice can replace the characters at positions 2 and 3 to get \\"abab\\". In the third sample, the initial string already satisfies the condition.","solution":"def min_operations(t, test_cases): Given the number of test cases and each string, return a list of minimum operations needed for each string to make sure no two adjacent characters are the same. results = [] for s in test_cases: count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 results.append(count) return results"},{"question":"You are given two integers, n and k. Your task is to create an n-length array such that the array consists of integers from 1 to n (inclusive), and exactly k pairs of adjacent elements are not in increasing order. Input The first line contains t, the number of test cases (about 10). Each of the following t lines contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ n-1). Output For each test case, print an n-length array consisting of integers from 1 to n with exactly k pairs of adjacent elements not in increasing order. If there are multiple valid arrays, print any one of them. Example Input: 2 5 2 4 0 Output: 1 3 2 4 5 1 2 3 4 Output details In the first case: The array 1 3 2 4 5 has exactly two pairs of adjacent elements (3, 2) and (4, 5) that are not in increasing order. In the second case: The array 1 2 3 4 has zero pairs of adjacent elements that are not in increasing order.","solution":"def create_array_with_k_disorders(n, k): Returns an n-length array such that the array consists of integers from 1 to n (inclusive), and exactly k pairs of adjacent elements are not in increasing order. arr = list(range(1, n + 1)) # To create k pairs of adjacent elements that are not in increasing order for i in range(k): arr[2 * i], arr[2 * i + 1] = arr[2 * i + 1], arr[2 * i] return arr def process_input(t, cases): results = [] for n, k in cases: result = create_array_with_k_disorders(n, k) results.append(result) return results"},{"question":"Write a function to evaluate if a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. FUNCTION SIGNATURE: bool is_prime(int n) PARAMETERS: * int n - The integer to check for primality (2 ≤ n ≤ 10^6) RETURNS: * bool - Return True if the number is prime, otherwise return False! DESCRIPTION: Create a function that determines whether the given integer `n` is prime. For this purpose, you may utilize any algorithm or method that efficiently checks for prime numbers. EXAMPLES: * is_prime(5) should return True * is_prime(4) should return False ADDITIONAL INSTRUCTIONS: * Implement an efficient algorithm to handle large input values up to 1,000,000. * Avoid trivial brute force approaches which may be computationally expensive. NOTE: Below is some sample code to help you get started: def is_prime(n): # Your code here pass TEST CASES: * is_prime(17) should return True * is_prime(22) should return False * is_prime(997) should return True","solution":"def is_prime(n): Determines if a number is prime. Parameters: n (int): The integer to check for primality. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Little Elephant loves symmetrical matrices very much. A symmetrical matrix is a square matrix that is equal to its transpose. In other words, a matrix is symmetrical if the element at the ith row and jth column is equal to the element at the jth row and ith column for all valid i and j. The Little Elephant remembered one symmetrical matrix. He started writing this matrix on a piece of paper, but as he wrote, some elements of the main diagonal of this matrix were erased. Fortunately, the Little Elephant clearly remembered that all elements of the matrix were integers between 1 and 100 inclusive. Help the Little Elephant, restore the original symmetrical matrix given the Little Elephant\'s notes. Input The first line of the input contains a single integer n (3 ≤ n ≤ 100) — the size of the matrix. The next n lines each contain n integers. Some of these integers might be -1 indicating an erased element of the main diagonal. All non-erased elements in the matrix are between 1 and 100 inclusive. It is guaranteed that only main diagonal elements might be erased. Output Print n lines, in each line print n integers — the Little Elephant\'s symmetrical matrix with all erased elements restored. All elements of the restored matrix should be integers between 1 and 100 inclusive. Examples Input 3 -1 2 3 2 -1 3 3 3 -1 Output 1 2 3 2 2 3 3 3 3 Input 4 -1 3 4 5 3 -1 6 7 4 6 -1 8 5 7 8 -1 Output 1 3 4 5 3 2 6 7 4 6 3 8 5 7 8 4","solution":"def restore_symmetric_matrix(n, matrix): Restore the elements of the main diagonal of a given symmetric matrix. :param n: size of the matrix (n x n) :param matrix: list of n lists, representing the matrix with some -1 in the main diagonal :return: the restored symmetric matrix for i in range(n): if matrix[i][i] == -1: matrix[i][i] = 1 # We can set the missing diagonal element to any number between 1 and 100 as the problem allows. return matrix # Example Usage: # matrix = [ # [-1, 2, 3], # [2, -1, 3], # [3, 3, -1] # ] # print(restore_symmetric_matrix(3, matrix))"},{"question":"An electronic billboard displays advertisements in a sequence. Each advertisement has a specific duration (in seconds) and a unique priority level. The billboard management system needs to prioritize advertisements based on their priority level. If two advertisements have the same priority level, the one with the shorter duration should be shown first. If both priority and duration are the same, maintain their original order based on their submission times. You are required to write a program that, given a list of advertisements and their attributes (duration, priority), outputs the order in which the advertisements should be displayed. Input The first line contains an integer `n`, which is the number of advertisements. Each of the next `n` lines contains an integer `d` (the duration in seconds) and an integer `p` (the priority level). Output Output `n` lines, each containing the duration and priority level of an advertisement in the order they should be displayed. Example Input: 5 10 3 15 2 10 3 20 1 10 2 Output: 20 1 10 2 15 2 10 3 10 3","solution":"def sort_advertisements(advertisements): Sort the advertisements by their priority level and within the same priority by their duration. If both priority and duration are the same, maintain their original order. Parameters: advertisements (list of tuples): Each tuple contains (duration, priority) of an advertisement. Returns: list of tuples: Sorted list of advertisements. return sorted(advertisements, key=lambda x: (x[1], x[0]))"},{"question":"Sarah loves playing word games and she recently learned about palindromes. A palindrome is a word that reads the same forward and backward. Now, Sarah is interested in creating the longest palindrome she can using any number of characters from a given string. Your task is to write a function that, given a string, returns the length of the longest palindrome that can be formed with the characters in that string. Input: - The input is a single string s, containing only lowercase English characters (1 <= |s| <= 1000). Output: - Return an integer representing the length of the longest possible palindrome. Example Input: ``` abccccdd ``` Example Output: ``` 7 ``` Explanation: Input: \\"abccccdd\\" Output: 7 Explanation: One possible palindrome that can be formed is \\"dccaccd\\", which has a length of 7. Note: When forming the palindrome, you can rearrange the characters of the string in any order.","solution":"def longest_palindrome(s): Returns the length of the longest palindrome that can be formed with the characters in the input string. :param s: a string containing only lowercase English characters :return: an integer representing the length of the longest possible palindrome from collections import Counter count = Counter(s) length = 0 odd_found = False for char, char_count in count.items(): if char_count % 2 == 0: length += char_count else: length += char_count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Vera is a librarian and needs to reorganize a section of the library that contains n books. Each book has a unique identifier between 1 and n. She wants to divide the books into m sections such that each section has contiguous books and every section has the same number of books as any other section, if possible. If it is not possible to divide the books equally into m sections, she should create sections as balanced as possible, ensuring that the difference in the number of books between the largest and smallest sections is minimized. Write a function `distribute_books(n, m)` that takes two integers n and m and returns a list of integers where each integer represents the number of books in each section. If `n < m`, return a list containing n values where each value is 1. # Input: - An integer n (1 ≤ n ≤ 10^9) representing the total number of books. - An integer m (1 ≤ m ≤ 10^5) representing the number of sections. # Output: - A list of integers representing the number of books in each section. # Examples: Example 1: **Input:** ``` distribute_books(7, 3) ``` **Output:** ``` [3, 2, 2] ``` **Explanation:** - Vera can divide the 7 books into three sections with the distribution [3, 2, 2]. Example 2: **Input:** ``` distribute_books(9, 4) ``` **Output:** ``` [3, 2, 2, 2] ``` **Explanation:** - Vera can divide the 9 books into four sections with the distribution [3, 2, 2, 2]. Example 3: **Input:** ``` distribute_books(2, 5) ``` **Output:** ``` [1, 1] ``` **Explanation:** - Since the number of sections m is greater than the number of books n, Vera can create only two sections with one book each.","solution":"def distribute_books(n, m): Distributes n books into m sections such that the difference between the number of books in the largest and smallest section is minimized. Parameters: n (int): Total number of books. m (int): Number of sections. Returns: List[int]: A list of integers where each value represents the number of books in each section. # If there are more sections than books, each section can only have at most one book if m >= n: return [1] * n # Number of books per section books_per_section = n // m # Number of sections that will have an extra book num_extra_book_sections = n % m # Construct the result with extra books in the first num_extra_book_sections sections distribution = [books_per_section + 1] * num_extra_book_sections + [books_per_section] * (m - num_extra_book_sections) return distribution"},{"question":"You are given a sequence of N integers. You can perform a single operation where you choose any integer from the sequence and increase or decrease it by 1. Your goal is to determine the minimum number of operations required to make all the integers in the sequence equal. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ A_i ≤ 10^9 Input Input is given from Standard Input in the following format: N A_1 A_2 A_3 ... A_N Output Output the minimum number of operations required to make all integers in the sequence equal. Examples Input 4 1 2 3 4 Output 4 Input 3 10 10 10 Output 0","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations to make all integers in the array equal. Parameters: arr (List[int]): The list of integers. Returns: int: The minimum number of operations. n = len(arr) median = sorted(arr)[n // 2] return sum(abs(x - median) for x in arr) # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(min_operations_to_equalize(A))"},{"question":"In a forest, there are N trees in a row, each with a certain height. Adjacent trees are fighting for sunlight, and the shorter tree between any two adjacent trees will die. This process repeats until no more trees can die because there are no more adjacent trees where one is shorter than the other. Trees of the same height do not affect each other and do not die. At the end of each iteration, the new row of trees will form with only the surviving trees. Your task is to determine the number of trees that survive at the end. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with a line containing the integer N, which denotes the number of trees. The second line contains a sequence of N integers, separated by a space, representing the heights of the N trees. Output For each test case, output a single line containing one integer - the number of trees that survive. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ height of each tree ≤ 10^9 Example Input: 2 6 1 3 2 1 4 5 5 4 4 4 4 4 Output: 2 5 Explanation Example case 1: The trees of heights 1 and 2 (at positions 3 and 4) die, leaving the sequence 3 4 5. Then, after the next iteration, no more trees can die. Thus, the surviving trees are 2. Example case 2: No trees die since all trees are of the same height. Therefore, all 5 trees survive.","solution":"def surviving_trees(trees): while True: new_trees = [trees[0]] for i in range(1, len(trees)): if trees[i] <= trees[i-1]: new_trees.append(trees[i]) if len(new_trees) == len(trees): return len(new_trees) trees = new_trees def solution(test_cases): results = [] for t in test_cases: N, heights = t results.append(surviving_trees(heights)) return results def read_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N = int(input_lines[line_idx]) heights = list(map(int, input_lines[line_idx + 1].split())) test_cases.append((N, heights)) line_idx += 2 return test_cases"},{"question":"A company maintains the sales records of its product on various platforms. Each record contains the date of sale and the number of units sold on that day. Your task is to analyze the records and determine the highest number of units sold in a single day for each platform. Input: First line contains N, the number of sales records. The following N lines each contain a string with the format \\"date platform units_sold\\" where: - date is the sale date in the format \\"YYYY-MM-DD\\", - platform is the name of the platform (a string without spaces), - units_sold is the number of units sold on that day (an integer). Next line contains Q, the number of queries. Next Q lines each contain a platform name for which you need to determine the highest sales in a single day. Output: For each query, output the highest number of units sold in a single day for the given platform, or -1 if there are no records for that platform. Constraints: 1 ≤ N ≤ 10^6 1 ≤ Q ≤ 10^5 dates are valid dates in the format \\"YYYY-MM-DD\\" platform names are alphanumeric strings 1 ≤ units_sold ≤ 10^4 SAMPLE INPUT 5 2023-01-10 Amazon 100 2023-01-15 eBay 150 2023-01-15 Amazon 90 2023-01-15 Walmart 200 2023-01-20 Amazon 300 3 Amazon eBay Walmart SAMPLE OUTPUT 300 150 200","solution":"def highest_sales(N, records, Q, queries): Determines the highest number of units sold in a single day for each platform given the sales records and queries. :param N: int, the number of sales records :param records: list of strings, each in the format \\"date platform units_sold\\" :param Q: int, the number of queries :param queries: list of strings, each representing a platform name :return: list of int, the highest number of units sold for each platform requested in the queries sales_dict = {} # Process each sales record and update the sales dictionary for record in records: date, platform, units_sold = record.split() units_sold = int(units_sold) if platform not in sales_dict: sales_dict[platform] = units_sold else: sales_dict[platform] = max(sales_dict[platform], units_sold) # Answer each query based on the sales dictionary results = [] for query in queries: if query in sales_dict: results.append(sales_dict[query]) else: results.append(-1) return results"},{"question":"A robot needs to deliver packages in a grid city. The city is represented as a 2D grid of size N x M where each cell can either be empty or have a building. The robot starts at cell (0, 0) and can only move right (R) or down (D), and cannot pass through buildings. It needs to get to the cell (N-1, M-1) which is its final destination. Write a function to determine the number of distinct paths the robot can take to reach its destination without passing through buildings. You are given the city grid as a list of lists. Each element in the grid is 0 if the cell is empty, and 1 if the cell contains a building. Function Signature: ```python def num_paths(city: List[List[int]]) -> int: ``` Input: - A 2D list of integers representing the city grid. Output: - An integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Constraints: - 1 <= N, M <= 100 - city[i][j] will be either 0 or 1 Example: ```python assert num_paths([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2 ``` Explanation: - The robot can take two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_paths(city): rows = len(city) cols = len(city[0]) if city[0][0] == 1 or city[rows-1][cols-1] == 1: return 0 dp = [[0] * cols for _ in range(rows)] dp[0][0] = 1 for i in range(rows): for j in range(cols): if city[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"**Problem Statement:** In a far-away forest, there lives a group of animals represented by an array. The forest is divided into different regions, and each region has a specific number of animals. To protect these animals, a magical barrier is set up around the forest, and once in a while, a patrol is conducted to ensure that the barrier is intact. The patrol consists of checking specific segments of the forest and counting the number of animals within those segments. The forest is represented by an array `animals`, where each element represents the number of animals in that region. Given multiple queries, each representing a segment of the forest, calculate the total number of animals in each specified segment. Input The first line contains a positive integer `n` (1 ≤ n ≤ 10^5) — the number of regions in the forest. The second line contains `n` positive integers separated by spaces, where the `i-th` integer represents the number of animals in the `i-th` region (1 ≤ animals[i] ≤ 10^9). The third line contains a positive integer `q` (1 ≤ q ≤ 10^5) — the number of patrol queries. Each of the following `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing the range (inclusive) of the forest segment to be checked. Output For each patrol query, print a single integer representing the total number of animals in the specified range. Example Input ``` 5 1 2 3 4 5 3 1 3 2 5 1 5 ``` Output ``` 6 14 15 ``` Input ``` 4 10 20 30 40 2 1 2 3 4 ``` Output ``` 30 70 ```","solution":"def total_animals_in_segments(n, animals, queries): Computes the total number of animals in the specified segments of the forest. params: - n: int, the number of regions in the forest - animals: List[int], the number of animals in each region - queries: List[Tuple[int, int]], each tuple represents a segment to query return: - List[int], total number of animals in each specified segment # Precompute prefix sums to make range sum queries faster prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i+1] = prefix_sums[i] + animals[i] results = [] for l, r in queries: segment_sum = prefix_sums[r] - prefix_sums[l-1] results.append(segment_sum) return results"},{"question":"Sam has obtained a new sequence c of length l, and he also has a number k. He wants to partition the sequence into contiguous subarrays such that each subarray has exactly k elements. For each subarray, he wants to find the maximum element. Finally, he wants to sum up all these maximum values. Help Sam in calculating the required sum of maximum elements from each subarray. Input The first line contains two integers l and k (1 ≤ k ≤ l ≤ 2·105). The next line contains l integers c1, c2, ..., cl (1 ≤ ci ≤ 109). Output Output a single integer which is the sum of the maximum elements from each of these subarrays. Examples Input 6 3 1 3 2 5 4 2 Output 12 Input 5 2 4 1 3 5 2 Output 15 Explanation For the first example: The sequence c can be partitioned into [1, 3, 2], [5, 4, 2]. The maximum elements from each subarray are 3 and 5. The sum is 3 + 5 = 8. For the second example: The sequence c can be partitioned into [4, 1], [3, 5], [2]. The subarray [2] cannot exist alone as it doesn\'t respect the condition of length k. Thus, it\'s ignored. The maximum elements from remaining subarrays are 4, 5. The sum is 4 + 5 + 6 = 15.","solution":"def sum_of_maximums(l, k, c): Returns the sum of maximum elements from each subarray of length k. sum_max = 0 for i in range(0, l, k): subarray = c[i:i+k] if len(subarray) == k: sum_max += max(subarray) return sum_max"},{"question":"Julia is learning about strings and wants to experiment with transforming them. She is particularly interested in making all the characters of a string the same by repeatedly performing an operation. In one operation, she can choose any two adjacent characters and change them to either of the two characters. Write a program to determine the minimum number of operations required to transform the given string into a string where all characters are the same. Input The first line contains an integer n (1 ≤ n ≤ 105), the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Output a single integer, the minimum number of operations needed to make all characters in the string the same. Examples Input 5 aabbb Output 2 Input 6 abccba Output 4 Input 1 a Output 0","solution":"def min_operations_to_make_same(n, s): from collections import Counter # count the frequency of each character in the string frequency = Counter(s) # find the maximum frequency most_frequent_count = max(frequency.values()) # the minimum number of operations required to make all characters same return n - most_frequent_count"},{"question":"You are given a series of time intervals. Each interval is represented by a start time and an end time, both in 24-hour format (HH:MM). Your task is to write a program that merges overlapping intervals and outputs the merged intervals in sorted order. For example, if the given intervals are (09:00-11:00) and (10:00-12:00), they overlap and should be merged into (09:00-12:00). If there is no overlap, the interval should remain as is. Input: The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1000) indicating the number of intervals in the dataset. Each of the next n lines contains a pair of start and end times in the format \\"start-end\\" (e.g., \\"09:00-11:00\\"). The end of the input is indicated by a line containing a single \\"-1\\". Output: For each dataset, output the merged intervals in sorted order. Each interval should be printed on a new line in the format \\"start-end\\". Example: Input: 3 09:00-11:00 10:00-12:00 13:00-15:00 2 16:00-18:00 17:00-19:00 -1 Output: 09:00-12:00 13:00-15:00 16:00-19:00","solution":"def merge_intervals(intervals): Takes a list of intervals and merges overlapping intervals. Arguments: intervals -- list of tuples with intervals (start, end) in \\"HH:MM\\" format Returns: A list of merged intervals as tuples (start, end) # Convert \\"HH:MM\\" to minute representation def to_minutes(time): h, m = map(int, time.split(\\":\\")) return h * 60 + m # Convert minute representation back to \\"HH:MM\\" def to_hhmm(minutes): h = minutes // 60 m = minutes % 60 return f\\"{h:02d}:{m:02d}\\" # Convert interval times to minutes for easy sorting and comparison intervals = [(to_minutes(start), to_minutes(end)) for start, end in intervals] intervals.sort() merged = [] for start, end in intervals: if not merged or merged[-1][1] < start: merged.append((start, end)) else: merged[-1] = (merged[-1][0], max(merged[-1][1], end)) return [(to_hhmm(start), to_hhmm(end)) for start, end in merged] def process_input(data): Processes the raw input data and returns merged intervals for each dataset. Arguments: data -- a string containing multiple datasets as described Returns: A list of lists containing merged intervals for each dataset datasets = [] lines = data.strip().split(\\"n\\") i = 0 while i < len(lines): n = int(lines[i]) if n == -1: break intervals = [] for _ in range(n): i += 1 start, end = lines[i].split(\\"-\\") intervals.append((start, end)) merged_intervals = merge_intervals(intervals) datasets.append(merged_intervals) i += 1 return datasets"},{"question":"Write a program that processes a sequence of commands to simulate the operations on a stack with the following functions: * push x: Push the value x onto the stack. * pop: Remove the top value from the stack and print it. If the stack is empty, output \\"EMPTY\\". * inc k x: Increment the bottom k elements of the stack by x. Constraints: * 1 ≤ q ≤ 100000 * 1 ≤ k ≤ size of the stack * -1000 ≤ x ≤ 1000 Input: q query1 query2 : queryq In the first line, the number of commands q is given. Then, the ith command queryi is given in one of the following formats: push x pop inc k x Output For each pop operation, print the value if the stack is not empty; otherwise, print \\"EMPTY\\". Examples: Input: 6 push 4 push 3 inc 2 1 pop pop pop Output: 4 5 EMPTY Input: 5 push 10 push 20 pop inc 1 5 pop Output: 20 15","solution":"def process_commands(commands): stack = [] result = [] for command in commands: if command.startswith(\\"push\\"): _, x = command.split() stack.append(int(x)) elif command == \\"pop\\": if stack: result.append(stack.pop()) else: result.append(\\"EMPTY\\") elif command.startswith(\\"inc\\"): _, k, x = command.split() k = int(k) x = int(x) for i in range(min(k, len(stack))): stack[i] += x return result"},{"question":"Milo the mouse loves running in intricate mazes. The maze can be represented by an undirected graph where each node represents a junction and each edge represents a path. Milo starts at a specific junction and wants to visit as many unique junctions as possible. However, due to the tricky nature of the maze, there are some restrictions on how paths can be used based on the number of steps taken. Specifically, if Milo is currently at a junction v and he has taken an odd number of steps, he can move to any adjacent junction. If Milo has taken an even number of steps, he has to skip one junction and then move to the next one (i.e., he can only move to junction w if there is a direct path from v to u and another direct path from u to w). Given a maze and Milo\'s starting position, determine the maximum number of unique junctions he can visit. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 200) - the number of junctions and the number of paths in the maze respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating there is an undirected path between junctions u and v. The last line contains an integer s (1 ≤ s ≤ n) - the starting junction where Milo begins his run. Output Print a single integer - the maximum number of unique junctions Milo can visit starting from junction s. Examples Input 5 5 1 2 2 3 3 4 4 5 2 4 1 Output 5 Input 4 3 1 2 2 3 3 4 2 Output 4 Note In the first example, Milo can visit all 5 junctions starting from junction 1. One possible path is 1 -> 2 -> 3 -> 4 -> 5. In the second example, starting from junction 2, Milo can visit all 4 junctions. A possible path is 2 -> 1 -> 2 -> 3 -> 4 (making use of the odd/even step restriction).","solution":"def max_unique_junctions(n, m, edges, s): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) queue = deque([(s, 0)]) # (current_junction, step_count) visited = set([s]) while queue: current, steps = queue.popleft() if steps % 2 == 0: # Even steps: Move to junction w if there is a v adjacent to current and w adjacent to v for v in graph[current]: for w in graph[v]: if w not in visited: visited.add(w) queue.append((w, steps + 1)) else: # Odd steps: Move to any adjacent junction for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return len(visited) # Example usage n = 5 m = 5 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (2, 4)] s = 1 print(max_unique_junctions(n, m, edges, s)) # Output: 5"},{"question":"Alice and Bob are very keen on photography and recently, they\'ve gone on a trip where they took a lot of pictures. They have decided to select some of these pictures to upload to their photography blog. To maintain a quality standard for their blog, they want to ensure that the variance in brightness of the selected pictures is minimized. The brightness of each picture is represented as an integer. They have a collection of N photos, and they aim to choose exactly K consecutive photos from this collection to minimize the variance of brightness. The variance of a set of K photos is defined as the difference between the maximum and minimum brightness values within these K photos. Write a program to help Alice and Bob select the optimal sequence of K consecutive photos that minimizes the variance in brightness. Input The first line contains two integers N and K, where N is the total number of photos and K is the number of consecutive photos they want to select. The second line contains N integers representing the brightness values of the photos. Output Print a single integer representing the minimum variance in brightness among all possible selections of K consecutive photos. Constraints 1 ≤ K ≤ N ≤ 10^5 1 ≤ brightness values ≤ 10^6 Example Input: 8 3 10 20 30 40 50 60 70 80 Output: 20 Explanation: The three consecutive photos with brightness values 20, 30, 40 have the minimum variance, which is 40 - 20 = 20.","solution":"def minimal_variance_brightness(N, K, brightness): This function returns the minimum variance of brightness for K consecutive photos out of a total of N photos. :param N: int, the number of photos :param K: int, the number of consecutive photos to select :param brightness: list of int, the brightness values of the photos :return: int, the minimum variance of brightness min_variance = float(\'inf\') for i in range(N - K + 1): current_segment = brightness[i:i+K] current_variance = max(current_segment) - min(current_segment) if current_variance < min_variance: min_variance = current_variance return min_variance"},{"question":"The Grand Empire of Malwaria has recently established a new communication system. There are `n` cities in the empire, and `m` bidirectional roads connecting them. Each road has a length associated with it. Malwaria\'s emperor has ordered a new project to optimize the communication system by ensuring that there is at least one direct or indirect path between every pair of cities in the empire. The project entails constructing additional roads to accomplish this, but the emperor desires to minimize the number of roads built. Your task is to determine the minimum number of roads required to make the communication system complete, meaning there should be a path (direct or indirect) between every pair of cities. Input The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of existing roads, respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a road between city `u` and city `v`. Output Output a single integer — the minimum number of additional roads needed to make the communication system complete. Examples Input 4 2 1 2 3 4 Output 1 Input 6 3 1 2 2 3 4 5 Output 2 Note In the first example, there are four cities and two roads, with two disjoint sets {1, 2} and {3, 4}. One additional road is needed to connect any city from the first set to any city from the second set. In the second example, there are six cities and three roads, forming three disjoint sets {1, 2, 3}, {4, 5}, and {6}. Two additional roads are needed to connect these sets.","solution":"from collections import defaultdict, deque def find_minimum_roads(n, m, roads): graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) components = 0 for city in range(1, n + 1): if not visited[city]: bfs(city) components += 1 return components - 1"},{"question":"You are given an integer matrix of size m x n and an integer x. Write a program to check whether x is present as a contiguous subarray in any row of the matrix. A contiguous subarray is a subarray that consists of consecutive elements of the array. Constraints * 1 ≤ m, n ≤ 1000 * 0 ≤ matrix[i][j] ≤ 10^9 * 0 ≤ x ≤ 10^9 Input Input is given from Standard Input in the following format: m n matrix x The first line contains two integers, m and n, the size of the matrix. The next m lines contain n integers each, representing the matrix. The last line contains the integer x. Output If x is present as a contiguous subarray in any row, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 6 7 Output YES Input 2 5 1 2 3 4 5 8 7 6 5 4 7 4 Output NO","solution":"def is_contiguous_subarray_in_matrix(m, n, matrix, x): x_str = \' \'.join(map(str, x)) for row in matrix: row_str = \' \'.join(map(str, row)) if x_str in row_str: return \\"YES\\" return \\"NO\\" # Example Usage # matrix = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12] # ] # x = [6, 7] # print(is_contiguous_subarray_in_matrix(3, 4, matrix, x)) # Output: \\"YES\\""},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. Your task is to find the maximum number of non-overlapping subarrays that have a sum equal to a given value k. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Print the maximum number of non-overlapping subarrays with sum equal to k. Examples Input 7 5 1 2 3 2 1 2 3 Output 2 Input 5 6 1 2 3 4 5 Output 1 Note In the first example, two non-overlapping subarrays with sum 5 are [1, 2, 3, 2, 1] and [2, 3]. In the second example, one subarray with sum 6 is [1, 2, 3].","solution":"def max_non_overlapping_subarrays(arr, k): Return the maximum number of non-overlapping subarrays with sum equal to k. count = 0 current_sum = 0 seen_sums = {0} for num in arr: current_sum += num if (current_sum - k) in seen_sums: count += 1 current_sum = 0 seen_sums = {0} else: seen_sums.add(current_sum) return count def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:n+2])) print(max_non_overlapping_subarrays(arr, k)) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of n integers, two elements are considered close-buddies if the absolute value of the difference between them is exactly d. Write a program that determines the number of such close-buddy pairs in the array. Input The first line contains two integers n and d (2 ≤ n ≤ 105, 0 ≤ d ≤ 104) — the number of integers in the array and the required difference for two elements to be considered close-buddies. The second line contains the sequence a1, a2, ..., an (0 ≤ ai ≤ 104), which are the elements of the array. Output Print the number of close-buddy pairs (i, j) such that i < j and the absolute value of the difference between ai and aj is exactly d. Examples Input 5 3 1 4 2 6 9 Output 2 Input 6 0 5 5 5 5 5 5 Output 15 Note In the first example, the pairs with the required difference of 3 are: * (1, 2), * (3, 4). In the second example, d = 0, meaning any elements forming the pair must be equal. There are 15 such pairs in the array, calculated as combinations of pairs from 6 identical numbers: * (1, 2), * (1, 3), * (1, 4), * (1, 5), * (1, 6), * (2, 3), * (2, 4), * (2, 5), * (2, 6), * (3, 4), * (3, 5), * (3, 6), * (4, 5), * (4, 6), * (5, 6).","solution":"def count_close_buddy_pairs(n, d, arr): Returns the number of close-buddy pairs in the array such that the absolute value of the difference between two elements is exactly d. :param n: number of integers in the array :param d: required difference for two elements to be considered close-buddies :param arr: list of integers representing the array :return: number of close-buddy pairs from collections import Counter counter = Counter(arr) count = 0 if d == 0: for v in counter.values(): count += v * (v - 1) // 2 else: for value in counter: count += counter[value] * counter[value + d] return count"},{"question":"Sarah is participating in a game show where she needs to collect coins that fall from the ceiling at specific moments. The game area is an infinite grid with Cartesian coordinates. Each coin falls at a specific coordinate (xi, yi) at a given time ti. Sarah can only collect a coin if she reaches its coordinates at the exact time it falls. She can move to any direction at a speed of 1 per unit of time. Given the falling points of n coins and their respective times, calculate the maximum number of coins Sarah can collect if she starts at the origin (0, 0) at time t=0. Input The first line contains integer n (1 ≤ n ≤ 1000) — the number of coins. Then n lines follow, each describing one coin. Each description consists of three integers xi, yi, ti (where xi, yi are the coordinates of the falling coin, -1000 ≤ xi, yi ≤ 1000, and 0 ≤ ti ≤ 109). All coins have unique coordinates. Output Output the maximum number of coins that Sarah can collect. Example Input 3 1 1 2 2 2 4 3 3 6 Output 3 Input 2 1 2 3 2 1 2 Output 1","solution":"def max_coins(n, coins): Calculate the maximum number of coins Sarah can collect given the coins and their times. Parameters: n (int): Number of coins. coins (list): List of tuples representing the coins. Each tuple contains (x, y, t). Returns: int: Maximum number of coins Sarah can collect. coins.sort(key=lambda x: x[2]) # Sort coins by the time they fall dp = [0] * n # dp array to keep track of max coins collected up to ith coin for i in range(n): x1, y1, t1 = coins[i] dp[i] = 1 # Sarah can at least collect the coin that falls at (x1, y1, t1) for j in range(i): x2, y2, t2 = coins[j] if t1 - t2 >= abs(x1 - x2) + abs(y1 - y2): # Check if Sarah can move from coin[j] to coin[i] dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In a distant land, there is a mystical tree called the Fibonacci Tree. Its leaves are arranged in levels that follow the Fibonacci sequence. The level 0 contains 1 leaf, level 1 contains 1 leaf, level 2 contains 2 leaves, level 3 contains 3 leaves, and so on. The number of leaves in each subsequent level is the sum of the number of leaves in the two preceding levels. You are a caretaker of this Fibonacci Tree and your task is to find out the number of leaves on a specific level of the tree. Write a program that takes an integer input `n` (the level number) and outputs the number of leaves on that level. Input The first line of input contains an integer T, the number of test cases. Each of the following T lines contains an integer n, the level number of the Fibonacci Tree for which you need to compute and print the number of leaves. Output For each test case, output the number of leaves on the specified level. Constraints 1 ≤ T ≤ 100 0 ≤ n ≤ 40 SAMPLE INPUT 3 0 5 10 SAMPLE OUTPUT 1 5 55 Explanation SAMPLE CASE 1: The 0th level has 1 leaf. SAMPLE CASE 2: The 5th level has 5 leaves as the sequence is: 0, 1, 1, 2, 3, 5,... SAMPLE CASE 3: The 10th level has 55 leaves as the sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,...","solution":"def fibonacci(n): Returns the number of leaves on the nth level of the Fibonacci Tree. if n == 0 or n == 1: return 1 a, b = 1, 1 for _ in range(2, n + 1): a, b = b, a + b return b def solve_fibonacci_tree(test_cases): Solves multiple test cases of the Fibonacci Tree problem. :param test_cases: List of integers representing the levels :return: List of results for each test case results = [] for n in test_cases: results.append(fibonacci(n)) return results"},{"question":"A hospital is organizing a healthcare outreach program and needs to allocate doctors to patients efficiently. The hospital has a given number of doctors and patients. Each doctor can only attend one patient at a time but can attend to a different patient as soon as they have finished with the previous one. The duration each doctor spends with a patient varies depending on the patient\'s condition. Given the number of doctors, the number of patients, and the time each doctor spends with a patient, determine the minimum amount of time required for all doctors to attend to all patients at least once. INPUT The first line contains two integers N and M, where N denotes the number of doctors and M denotes the number of patients. The next line contains M space-separated integers, Ti (1 ≤ Ti ≤ 10^6) where Ti denotes the time it takes for a doctor to attend to the ith patient. OUTPUT Output a single integer denoting the minimum time required for all doctors to attend to all patients at least once. CONSTRAINTS 1 ≤ N ≤ 10^4 1 ≤ M ≤ 10^5 SAMPLE INPUT 3 6 7 10 4 8 9 6 SAMPLE OUTPUT 15 Explanation With 3 doctors and 6 patients with the given times, the best way for minimizing the total time is: - Doctor 1 attends patient 1 (time 7), then patient 6 (time 6), total = 13 - Doctor 2 attends patient 2 (time 10), total = 10 - Doctor 3 attends patient 3 (time 4), then patient 4 (time 8), and then patient 5 (time 9), total = 15 The minimum time required so that all patients are attended at least once is 15.","solution":"import heapq def min_time_to_attend_patients(N, M, patient_times): Determines the minimum time required for all doctors to attend to all patients at least once. if N >= M: return max(patient_times) patient_times.sort(reverse=True) doctors = [0] * N heapq.heapify(doctors) for time in patient_times: earliest_available = heapq.heappop(doctors) heapq.heappush(doctors, earliest_available + time) return max(doctors)"},{"question":"You are given two strings S and T of lengths n and m, respectively. Your task is to determine if it is possible to convert string S into string T by performing exactly one operation. The operation consists of choosing a single character in S and replacing it with another character (which can be the same or different from the existing character). Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains string S (1 ≤ |S| ≤ 1000), and the second line contains string T (1 ≤ |T| ≤ 1000). Output For each test case, output \\"YES\\" if you can convert S into T by performing exactly one operation, otherwise output \\"NO\\". Example Input 4 abc abd hello hellp world words coding coding Output YES YES NO NO Note In the first example, you can convert \\"abc\\" to \\"abd\\" by replacing the character \'c\' with \'d\'. In the second example, you can convert \\"hello\\" to \\"hellp\\" by replacing the character \'o\' with \'p\'. In the third example, you cannot convert \\"world\\" to \\"words\\" with just one operation as you need to change two characters. In the fourth example, there is no need to perform any operation since the strings are already the same, but since the task requires exactly one operation, the result is \\"NO\\".","solution":"def can_convert_with_one_operation(S, T): Determines if string S can be converted into string T by performing exactly one operation. if len(S) != len(T): return \\"NO\\" count_diff = 0 for s, t in zip(S, T): if s != t: count_diff += 1 return \\"YES\\" if count_diff == 1 else \\"NO\\" def solve(test_cases): Processes multiple test cases. results = [] for S, T in test_cases: results.append(can_convert_with_one_operation(S, T)) return results"},{"question":"You are given an array of integers. Find three numbers in the array such that the product is maximum and return the maximum product. Function Signature: ```python def maximum_product(nums: List[int]) -> int: ``` Input: - A single list of integers `nums` where `len(nums) >= 3` and each integer is between `-10^4` and `10^4`. Output: - Return an integer representing the maximum product of three numbers from the list. Examples: Input: ```python nums = [1, 2, 3, 4] ``` Output: ```python 24 ``` Input: ```python nums = [-1, -2, -3, -4] ``` Output: ```python -6 ``` Input: ```python nums = [1, -4, 3, -6, 7, 0] ``` Output: ```python 168 ``` Explanation: - In the first example, the product of the three highest numbers (2, 3, and 4) is 2 * 3 * 4 = 24. - In the second example, the product of three numbers that yields the highest product is -1 * -2 * -3 = -6. - In the third example, the maximum product is achieved by choosing the negative numbers -4 and -6 along with the highest positive number 7, yielding -4 * -6 * 7 = 168. Note: The solution should efficiently handle large lists and should consider both the three largest positive numbers and potential products involving two negative numbers and one positive number for the maximum product.","solution":"from typing import List def maximum_product(nums: List[int]) -> int: nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Problem You are given a string consisting of only lowercase Latin letters. Your task is to transform the string into a string where each letter appears only once and outputs the lexicographically smallest possible result. Constraints * 1 ≤ |s| ≤ 100000 * s consists of only lowercase Latin letters. Input The input is given in the following format: * A single string s Output Output the lexicographically smallest string that can be obtained by removing duplicate characters from s. Examples Input cbacdcbc Output acdb Input bcabc Output abc","solution":"def removeDuplicateLetters(s): Given a string s consisting of lowercase Latin letters, returns the lexicographically smallest string that can be obtained by removing duplicate characters. # Dictionary to keep the count of each character count = { char: 0 for char in s } for char in s: count[char] += 1 result = [] # Stack to store the result characters seen = set() # Set to track characters already in result for char in s: count[char] -= 1 if char in seen: continue # Ensure the result is lexicographically smallest while result and char < result[-1] and count[result[-1]] > 0: seen.discard(result.pop()) result.append(char) seen.add(char) return \'\'.join(result)"},{"question":"Alex loves playing video games, especially those that involve resource management and strategic planning. Recently, he came across a game where he needs to build and upgrade various structures on his lands. Each structure has an initial build cost and an upgrade cost. Alex\'s goal is to upgrade all structures to their maximum level with the least amount of resources. He can only collect one type of resource per day and use it immediately to either build or upgrade a structure. The game allows Alex to perform one build or upgrade operation per day. Structures must be built before they can be upgraded, and each structure can only be upgraded once per day. Let\'s help Alex determine the minimum number of days required to upgrade all structures to their maximum level. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of structures. - Each of the following `n` lines describes a structure with two integers `b_i` and `u_i` (1 ≤ b_i, u_i ≤ 100,000) — the initial build cost and the upgrade cost for the i-th structure respectively. # Output - Print a single integer, the minimum number of days required for Alex to upgrade all structures to their maximum level. # Examples Input ``` 3 2 4 3 5 1 2 ``` Output ``` 10 ``` Input ``` 1 5 10 ``` Output ``` 15 ``` # Explanation In the first example, Alex needs: - 2 days to build the first structure and 4 to upgrade it (total 6 days). - 3 days to build the second structure and 5 to upgrade it (total 8 days). - 1 day to build the third structure and 2 to upgrade it (total 3 days). In total, Alex needs 6 + 8 + 3 = 17 days. But, since Alex can do one build or upgrade a day, and he can parallel the builds and upgrades, the minimum number of days required is 10. In the second example, there is only one structure that requires 5 days to build and 10 to upgrade, totaling 15 days.","solution":"def min_days_to_upgrade(n, structures): # Calculate the total days required for builds and upgrades separately build_days = 0 upgrade_days = 0 for b, u in structures: build_days += b upgrade_days += u return build_days + upgrade_days"},{"question":"A group of students is participating in a coding competition. Each participant is given a unique ID number between 1 and 10, inclusive. The competition involves solving a set of problems, where each problem is worth a certain number of points. Each student attempts a series of problems, and their scores are recorded in the order they attempt each problem. Your task is to identify the maximum score difference for any student between any two of their problem attempts. You should consider the case where a maximum score difference might include scores from non-consecutive problems attempted by the same student. Given the number of students and their corresponding problem scores, you need to determine the highest point difference for each student in their series of problem attempts. Input: - The first line contains a single integer, t, representing the number of test cases. - For each test case: - An integer, n, representing the total number of students. - Next, n lines follow, each line containing: - An integer k, representing the number of problem attempts by the student. - Followed by k integers representing the scores of each problem attempt. Output: - For each test case, output n lines where each line contains the maximum score difference for the corresponding student. If a student has less than two problem attempts, output -1 for that student. Example Input: ``` 2 2 3 10 20 15 2 5 5 3 4 30 10 5 25 3 5 5 5 1 100 ``` Example Output: ``` 10 0 25 0 -1 ``` Explanation: Input 1: - For student 1, the score difference between the highest (20) and the lowest (10) score is 10. - For student 2, the score difference between 5 and 5 is 0. Input 2: - For student 1, the highest difference is between 30 and 5, resulting in 25. - For student 2, the students\' scores are all the same, so the difference is 0. - For student 3, there is only one problem attempt, so the output is -1.","solution":"def max_score_difference(test_cases): results = [] for case in test_cases: n, students_data = case case_result = [] for student_data in students_data: k, scores = student_data[0], student_data[1:] if k < 2: case_result.append(-1) else: max_difference = max(scores) - min(scores) case_result.append(max_difference) results.append(case_result) return results"},{"question":"You are given an array of integers. Your task is to find a subarray such that the sum of its elements is the largest possible. If multiple subarrays have the same maximum sum, choose the one with the smallest starting index; if there are still ties, choose the one with the smallest ending index. Input An integer \'T\' denoting number of test cases on the first line. For each test case, there are two lines: First line contains an integer \'N\' denoting the number of elements in the array. Second line contains the \'N\' integers of the array separated by space. Output For each test case, display in a new line the starting index and ending index of the subarray (1-indexed) with the maximum sum. Constraints 1 <= N <= 10000 1 <= T <= 10 -10^5 <= array elements <= 10^5 Example Input: 2 5 -2 1 -3 4 -1 2 1 -5 4 3 3 -1 2 Output: 4 7 1 3 Explanation In the first test case: The subarray with the largest sum is [4, -1, 2, 1], and its 1-indexed start and end indices are [4, 7]. In the second test case: The subarray with the largest sum is [3, -1, 2], and its 1-indexed start and end indices are [1, 3].","solution":"def max_subarray_indices(arr): max_so_far = -float(\'inf\') max_ending_here = 0 start = end = s = 0 for i in range(len(arr)): max_ending_here += arr[i] if max_ending_here > max_so_far: max_so_far = max_ending_here start = s end = i if max_ending_here < 0: max_ending_here = 0 s = i + 1 return (start + 1, end + 1) def process_test_cases(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] arr = test_cases[t][1] result = max_subarray_indices(arr) results.append(result) return results"},{"question":"You are given an array of integers representing the initial state of a social media feed that can be liked multiple times by different users. Each like on a post increases the value by 1 and users can like any post as many times as they wish. Your task is to write a program that processes a series of like operations and outputs the final state of the feed. The operations are provided in the form of pairs, where the first element is the index of the post being liked, and the second element indicates how many times the post is liked. Constraints * All input values are integers. * 1 ≤ number of posts ≤ 100 * Initial values of posts ≥ 0 * 1 ≤ number of operations ≤ 100 * 1 ≤ likes per operation ≤ 1000 Input The input is given from Standard Input in the following format: ``` N P_1 P_2 ... P_N M Index_1 Likes_1 Index_2 Likes_2 : Index_M Likes_M ``` Where: - N is the number of posts. - P_1, P_2, ..., P_N are the initial values (likes) of the posts. - M is the number of operations. - Each operation is represented by two integers, the index of the post being liked and the number of likes added in that operation (1-based index). Output After processing all the operations, output the final values of the posts, separated by spaces. Examples Input ``` 3 5 3 7 2 1 5 3 2 ``` Output ``` 10 3 9 ``` Input ``` 4 1 2 3 4 3 2 3 4 1 1 10 ``` Output ``` 11 5 3 5 ```","solution":"def update_feed(N, initial_likes, M, operations): for idx, likes in operations: initial_likes[idx - 1] += likes return initial_likes def process_input(): N = int(input()) initial_likes = list(map(int, input().split())) M = int(input()) operations = [tuple(map(int, input().split())) for _ in range(M)] updated_likes = update_feed(N, initial_likes, M, operations) print(\' \'.join(map(str, updated_likes)))"},{"question":"You have an old machine that only processes one type of job. Each job can be defined by its starting time and ending time. The machine can only handle one job at a time, so if two jobs overlap, it can only process one of them. Given a list of jobs, you have to determine the maximum number of non-overlapping jobs the machine can process. Input The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N, which is the number of jobs. The following N lines each contain two integers, Si and Ei, which denote the starting and ending times of the i-th job. Output For each test case, output the maximum number of non-overlapping jobs. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ Si < Ei ≤ 10^9 Example Input 2 3 1 4 2 6 5 8 4 1 5 3 7 2 4 6 8 Output 2 2 Explanation Test 1: The machine can process the jobs (1, 4) and (5, 8) without overlapping, for a total of 2 jobs. Test 2: The machine can process the jobs (2, 4) and (6, 8) without overlapping, for a total of 2 jobs. Other pairs are also possible, but the maximum number is 2.","solution":"def max_non_overlapping_jobs(T, test_cases): results = [] for case in test_cases: N, jobs = case jobs.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for job in jobs: start, end = job if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Create a function that takes a list of integers and returns a new list containing all the contiguous sublists (sublists made up of consecutive elements) of a length you specify. Each sublist should be in the same order as in the input list. For example, if given the list [1, 2, 3, 4] and the length of sublists as 3, the function should return [[1, 2, 3], [2, 3, 4]]. Implement the function such that: 1. If the sublist length is greater than the length of the input list, return an empty list. 2. The sublist length should be a positive integer. If it\'s not, return an empty list. 3. Preserve the order of appearance of the sublists as in the original list. Function Signature: ```python def generate_sublists(arr: List[int], sublist_length: int) -> List[List[int]]: ``` # Example Input ``` arr = [1, 2, 3, 4] sublist_length = 3 ``` Output ``` [[1, 2, 3], [2, 3, 4]] ``` # Explanation From the input list [1, 2, 3, 4], generate all possible sublists of length 3: - First sublist: [1, 2, 3] - Second sublist: [2, 3, 4] These sublists are then returned in the order they appear in the original list. # Constraints - 1 ≤ length of arr ≤ 100 - 1 ≤ sublist_length ≤ 100 Ensure that your solution adheres to the given constraints and handles edge cases appropriately.","solution":"from typing import List def generate_sublists(arr: List[int], sublist_length: int) -> List[List[int]]: if sublist_length <= 0 or sublist_length > len(arr): return [] sublists = [] for i in range(len(arr) - sublist_length + 1): sublists.append(arr[i:i + sublist_length]) return sublists"},{"question":"You are given an array of integers. Your task is to determine if it is possible to rearrange the array such that adjacent elements have different values. If it is possible, return the resulting arranged array, otherwise return an empty array. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case contains two lines: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6) — the elements of the array. Output For each test case, if it\'s possible to rearrange the array as described, print \\"YES\\" on the first line, followed by the rearranged array on the second line. If it\'s not possible, print \\"NO\\" on the first line. Example Input 3 5 1 1 1 2 2 3 1 1 1 4 1 2 3 4 Output YES 1 2 1 2 1 NO YES 1 3 2 4","solution":"from collections import Counter import heapq def rearrange_array(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] counter = Counter(a) max_frequency = max(counter.values()) if max_frequency > (n + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") sorted_items = sorted(counter.items(), key=lambda x: -x[1]) rearranged = [0] * n index = 0 for item, count in sorted_items: for _ in range(count): if index >= n: index = 1 rearranged[index] = item index += 2 results.append(\\" \\".join(map(str, rearranged))) return results"},{"question":"Tina is building a new social media application and wants to implement a feature for finding the “circle of friends”. A circle of friends is defined as a group of users where each user is directly or indirectly friends with each other within that group. The friendship is mutual, meaning if user A is friends with user B, then user B is also friends with user A. You are given an adjacency matrix where matrix[i][j] = 1 indicates that user i and user j are friends, and matrix[i][j] = 0 indicates they are not friends. All users are numbered starting from 0. Your task is to find the number of distinct circles of friends within the given matrix. Write a function `countCircles` that: Input - The first line contains an integer `n` (1 ≤ n ≤ 200), which denotes the number of users. - The next `n` lines each contain `n` integer values (either 0 or 1), representing the adjacency matrix. Output - Return a single integer representing the number of distinct circles of friends. Note: - A user is always friends with themselves, therefore, matrix[i][i] = 1 for all 0 ≤ i < n. Example Input: 4 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 1 Output: 2 Input: 3 1 1 0 1 1 1 0 1 1 Output: 1 Explanation: In the first example, there are two circles of friends {0,1,3} and {2}. In the second example, there is one circle of friends {0,1,2}.","solution":"def countCircles(n, matrix): def dfs(node, visited): for friend, is_friend in enumerate(matrix[node]): if is_friend and not visited[friend]: visited[friend] = True dfs(friend, visited) visited = [False] * n circles = 0 for i in range(n): if not visited[i]: circles += 1 visited[i] = True dfs(i, visited) return circles"},{"question":"Given an array of integers and an integer k, you are to determine whether there is a pair of distinct integers in the array that sums up to k. If such a pair exists, return 1. Otherwise, return 0. Function Signature: ```python def has_pair_with_sum(arr: List[int], k: int) -> int: ``` # Input - `arr` (List[int]): an array of integers where 1 ≤ len(arr) ≤ 10^5, and -10^9 ≤ arr[i] ≤ 10^9 - `k` (int): an integer where -10^9 ≤ k ≤ 10^9 # Output - Return 1 if there exists a pair of distinct integers in the array that sum up to k, otherwise return 0. # Example Input: ```python arr = [10, 15, 3, 7] k = 17 ``` Output: ```python 1 ``` Input: ```python arr = [1, 2, 3, 4, 5] k = 10 ``` Output: ```python 0 ``` # Note In the first example, 10 and 7 sum up to 17, so the function returns 1. In the second example, no pair sums up to 10, so the function returns 0.","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct integers in the array that sum up to k. Args: arr (List[int]): An array of integers. k (int): The target sum. Returns: int: 1 if there exists a pair that sums up to k, otherwise 0. seen = set() for num in arr: if k - num in seen: return 1 seen.add(num) return 0"},{"question":"In a small village, there is a network of N houses connected by M bidirectional roads. Each road connects two houses and has a certain weight representing the cost to travel that road. The village head wants to ensure that there is a path to reach any house from any other house, but without spending too much. Hence, the goal is to minimize the total cost of travel between houses by selecting a subset of the original roads such that there is only one path between any two houses. This problem can be solved by finding a Minimum Spanning Tree (MST) of the graph representing the village\'s road network. Write a program to find the total cost of the MST of the village\'s road network. Input: The first line contains two integers N and M. The number of houses N (1 ≤ N ≤ 10^4) and the number of roads M (N-1 ≤ M ≤ 10^5). Each of the next M lines contains three integers a, b, w (1 ≤ a, b ≤ N and 1 ≤ w ≤ 10^4) representing a road between houses a and b with cost w. Output: Print the total cost of the MST. Example: Input: 4 5 1 2 3 1 3 1 2 3 3 2 4 6 3 4 2 Output: 6 Explanation: In this case, the MST includes the roads with costs 1, 2, and 3. Therefore, the total cost is 6. The selected roads connect all houses with minimal total cost.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, roads): roads.sort(key=lambda x: x[2]) parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst_weight = 0 edges_used = 0 for road in roads: u, v, w = road root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += w union(parent, rank, root_u, root_v) edges_used += 1 if edges_used == n - 1: break return mst_weight def total_cost_of_mst(n, m, roads): return kruskal_mst(n, roads)"},{"question":"The organizers of a local marathon have planned a unique challenge for the participants. The marathon track is a straight line, and the participants have to run from the starting point at position `0` to the finishing point at position `N`. Along the way, there are several water stations placed at certain positions. To make the challenge more interesting, the organizers have decided to monitor the participants’ hydration levels. Participants can only drink water from a water station when their hydration level matches the hydration level of the water station. Hydration levels are represented as integers and may vary across the participants and water stations. Given the positions and hydration levels of the water stations, as well as the starting hydration level of each participant, determine the minimum number of water stations each participant can drink from as they run from the start to the finish. Water stations are placed at unique positions along the marathon track. Each position has a unique hydration level associated with it. You need to answer `Q` queries, each querying a participant\'s ability to run from the start to the finish while hydrating properly. INPUT: The first line contains an integer `N`, the finishing position of the marathon track. The second line contains an integer `M`, the number of water stations. The next `M` lines each contain two integers `P` and `H`, denoting the position and hydration level of each water station. The following line contains an integer `Q`, the number of participants. The next `Q` lines each contain a single integer `S`, the starting hydration level of each participant. OUTPUT: For each query, print the minimum number of water stations the participant can drink from while running from the start to the finish. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ P ≤ N 1 ≤ H ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ S ≤ 10^5 EXAMPLE INPUT: 100 5 20 3 50 2 70 3 80 2 90 3 3 1 2 3 EXAMPLE OUTPUT: 2 2 3 EXPLANATION: For the given example, a participant with starting hydration level `1` can drink from the water stations at positions 50 and 80. A participant with starting hydration level `2` can drink from the water stations at positions 50 and 80. A participant with starting hydration level `3` can drink from the water stations at positions 20, 70, and 90.","solution":"def minimum_water_stations(N, M, stations, Q, participants): from collections import defaultdict import heapq # Dictionary to store the water stations by hydration level hydration_map = defaultdict(list) for position, hydration in stations: hydration_map[hydration].append(position) # For each participant query, determine the minimum number of stations results = [] for starting_hydration in participants: if starting_hydration not in hydration_map: results.append(0) continue usable_stations = sorted(hydration_map[starting_hydration]) results.append(len(usable_stations)) return results"},{"question":"You are given a list of integers representing heights of skyscrapers in a city skyline. The goal is to find out the largest rectangular area visible in the skyline. The area is calculated by considering the largest contiguous rectangle formed by the heights of the skyscrapers. To be specific, if you have `n` skyscrapers, the width of each is considered to be 1 unit. The height of each skyscraper represents how high each rectangle can go. You need to find out the maximum rectangular area that can be formed when viewing the skyline from a distance. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of skyscrapers. The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^5) where `hi` is the height of the i-th skyscraper. # Output Output a single integer — the maximum rectangular area that can be formed in the skyline. # Examples Input ``` 7 2 1 5 6 2 3 1 ``` Output ``` 10 ``` Input ``` 4 4 4 4 4 ``` Output ``` 16 ``` Input ``` 6 6 2 5 4 5 1 6 ``` Output ``` 12 ``` # Note In the first example, the maximum rectangle can be formed between the 3rd and 4th skyscraper, yielding an area of 5*2 = 10. In the second example, since all heights are the same, the largest rectangle extends across all buildings, yielding an area of 4*4 = 16. In the third example, the largest rectangle can be formed between the 2nd and 5th skyscraper, yielding an area of 4*3 = 12.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area in the skyline represented by heights. n = len(heights) stack = [] # stack to store indices max_area = 0 # Initialize max area index = 0 while index < n: # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are a software engineer working on a large-scale data processing pipeline. One of the key components of this pipeline is to merge multiple sorted lists of integers into a single sorted list. Write a program that takes multiple sorted lists and merges them into one sorted list while preserving the order. To implement this merging function efficiently, you are required to use a min-heap (or priority queue). Input The first line of the input is an integer n (1 ≤ n ≤ 10^5) — the number of sorted lists. The following lines contain n sorted lists. Each list starts with an integer k (1 ≤ k ≤ 10^6) indicating the number of elements in the list, followed by k integers which are the elements of the list. The total number of integers across all lists will not exceed 10^6. Output Output a single line containing the merged sorted list of all integers from the input lists. Example Input 3 5 1 4 7 8 10 4 2 6 12 14 3 3 9 11 Output 1 2 3 4 6 7 8 9 10 11 12 14 Explanation: The input consists of 3 sorted lists: 1 4 7 8 10 2 6 12 14 3 9 11 These lists are merged into a single sorted list: 1 2 3 4 6 7 8 9 10 11 12 14.","solution":"import heapq def merge_sorted_lists(sorted_lists): Merges multiple sorted lists into a single sorted list using a min-heap (priority queue). Args: sorted_lists (list of list of int): The input list of sorted lists. Returns: list of int: The merged sorted list. min_heap = [] result = [] # Initialize the min-heap with the first element of each list alongside the list index and element index for i, lst in enumerate(sorted_lists): if lst: # Check if the list is not empty heapq.heappush(min_heap, (lst[0], i, 0)) while min_heap: val, list_idx, element_idx = heapq.heappop(min_heap) result.append(val) # If there\'s a next element in the same list, push it into the heap if element_idx + 1 < len(sorted_lists[list_idx]): next_val = sorted_lists[list_idx][element_idx + 1] heapq.heappush(min_heap, (next_val, list_idx, element_idx + 1)) return result"},{"question":"Given an n x n matrix, a \\"transpose\\" of the matrix is defined by swapping its rows with its columns. In other words, the element at index [i][j] in the original matrix moves to index [j][i] in the transposed matrix. Your task is to implement a function that takes an n x n matrix and returns its transpose. Input The first line of input contains a single integer n (1 ≤ n ≤ 100) — the size of the matrix. The next n lines contain n space-separated integers each — the elements of the matrix. Output Print the transposed matrix, with each row of the matrix printed on a new line, and each element separated by a space. Example Input: 3 1 2 3 4 5 6 7 8 9 Output: 1 4 7 2 5 8 3 6 9","solution":"def transpose_matrix(n, matrix): Transposes an n x n matrix. :param n: size of the matrix :param matrix: list of lists representing the matrix :return: transposed matrix (list of lists) transposed = [[matrix[j][i] for j in range(n)] for i in range(n)] return transposed"},{"question":"In a magical kingdom, there exists an enchanted garden with n flowers arranged in a straight line. Each flower has a magical value associated with it, which can be either positive or negative. The Queen has tasked you with finding a subarray of consecutive flowers such that the sum of their magical values is maximized. Given the magical values of the flowers, determine the maximum possible sum of a contiguous subarray. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of flowers. The second line contains n space-separated integers a_1, a_2, ..., a_n (−1,000 ≤ a_i ≤ 1,000) — the magical values of the flowers. Output Output one integer — the maximum sum of a contiguous subarray. Examples Input 6 2 -1 2 3 4 -5 Output 10 Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 -1 -2 -5 Output -1 Note In the first example, the subarray [2, -1, 2, 3, 4] has the maximum sum, which is 10. In the second example, the subarray [4, -1, 2, 1] has the maximum sum, which is 6.","solution":"def max_subarray_sum(n, flower_values): Returns the maximum possible sum of a contiguous subarray. Args: n (int): The number of flowers. flower_values (list of int): The magical values of the flowers. Returns: int: The maximum sum of a contiguous subarray. current_sum = max_sum = flower_values[0] for value in flower_values[1:]: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a certain kingdom, the King\'s architect is designing a new palace and wants to place a grand circular water fountain in the palace garden. The fountain has to be placed in such a way that its boundary barely touches the walls of the garden, which is a rectangular area. Given the dimensions and position of the garden, your task is to determine the maximum possible radius of the fountain that can be placed within the garden. To make things easier, the bottom-left corner of the garden always starts at the origin (0, 0) in a Cartesian coordinate system. Input The input consists of several datasets. Each dataset contains one line with four integers `w`, `h`, `x`, and `y`, where: - `w` and `h` (1 ≤ w, h ≤ 10000) are the width and height of the garden, respectively. - `x` (0 ≤ x ≤ w) is the x-coordinate of the point where the center of the fountain needs to be placed. - `y` (0 ≤ y ≤ h) is the y-coordinate of the point where the center of the fountain needs to be placed. The input is terminated by a line containing four zeros: `0 0 0 0`. Output For each dataset, output the maximum possible radius of the fountain on a new line. The radius should be printed as a floating-point number with three decimal places. Example Input 10 5 5 2 7 7 0 0 8 3 4 1 0 0 0 0 Output 2.000 0.000 1.000 Explanation In the first dataset, the largest possible radius of the fountain placed at (5, 2) that touches the garden walls is 2.000 units. In the second dataset, the fountain cannot be placed at (0, 0) and touch the walls, so the radius is 0.000. In the third dataset, the largest radius of the fountain placed at (4, 1) is 1.000 units.","solution":"def max_radius(w, h, x, y): Calculates the maximum possible radius of a circular fountain based on the garden\'s dimensions and the fountain\'s center position. if x == 0 or x == w or y == 0 or y == h: return 0.0 else: radius = min(x, w - x, y, h - y) return float(f\\"{radius:.3f}\\") def process_input(inputs): Processes multiple sets of inputs and returns the maximum radius for each. results = [] for w, h, x, y in inputs: if w == 0 and h == 0 and x == 0 and y == 0: break results.append(max_radius(w, h, x, y)) return results"},{"question":"Problem : John\'s school is conducting a series of races in a sports event. He is responsible for recording the times each student finishes the race. At the end of the day, John has a list of finishing times for all the students who participated. However, the teacher wants to see the list of unique finishing times in ascending order. John is overwhelmed with the task and comes to you for help. Your task is to create the final list of distinct finishing times in ascending order. Input : The first line consists of an integer N, the number of finishing times in John\'s initial list. The next N lines are such that each line consists of a floating-point number representing a student\'s finishing time. Output : On the first line, print the total number of distinct finishing times. Then print the list of unique finishing times in ascending order, with each time on a new line. Constraints : 1 ≤ N ≤ 10^6 0.0 < finishing time ≤ 1000.0 Note : Some test files contain large data. Use scanf/printf instead of cin/cout. SAMPLE INPUT 10 10.52 12.43 11.11 12.43 9.99 10.52 9.58 11.11 8.75 12.50 SAMPLE OUTPUT 7 8.75 9.58 9.99 10.52 11.11 12.43 12.50","solution":"def get_unique_times(finishing_times): Returns the list of unique finishing times in ascending order and the count of those times. Args: finishing_times (list of float): List of finishing times. Returns: int: The count of unique finishing times. List of float: The sorted list of unique finishing times. unique_times = sorted(set(finishing_times)) return len(unique_times), unique_times"},{"question":"Given a list of distinct integers, and a target sum, your task is to find all unique pairs of integers in the list that add up to the target sum. - Each pair should be sorted in non-decreasing order. - The output should be a list containing all unique pairs sorted lexicographically. For example, given the list `[1, 5, 3, 7, 9]` and target sum `8`, the unique pairs that add up to the target sum are `(1, 7)` and `(3, 5)`. Hence the output should be `[(1, 7), (3, 5)]`. Write a function `find_pairs(nums, target)` that takes a list of distinct integers `nums` and an integer `target` as inputs and returns a list of tuples representing the pairs that add up to the target sum, sorted as described above. # Input - List of distinct integers `nums` with length `n` (1 ≤ n ≤ 1000) - Integer `target` (1 ≤ target ≤ 2000) # Output - A list of tuples where each tuple contains two integers. # Examples ```python find_pairs([1, 5, 3, 7, 9], 8) # Output: [(1, 7), (3, 5)] find_pairs([2, 4, 6, 3], 10) # Output: [(4, 6)] find_pairs([1, 2, 3, 4], 8) # Output: [] ``` # Note In the first example, the pairs (1, 7) and (3, 5) add up to the target sum 8. The pairs are sorted lexicographically in the output. In the second example, only the pair (4, 6) adds up to the target sum 10. In the third example, no pairs add up to the target sum 8, hence the output is an empty list.","solution":"def find_pairs(nums, target): Given a list of distinct integers and a target sum, find all unique pairs of integers in the list that add up to the target. Args: nums: List of distinct integers. target: Integer target sum. Returns: A list of tuples representing the unique pairs sorted lexicographically. pairs = [] nums_set = set(nums) for num in nums: complement = target - num if complement in nums_set and complement != num: pair = tuple(sorted((num, complement))) if pair not in pairs: pairs.append(pair) return sorted(pairs)"},{"question":"You are given a 6x6 2D array `arr` of integers. Your task is to find the maximum sum of an hourglass. An hourglass in the array is a subset of values with indices falling in this pattern: ``` a b c d e f g ``` There are 16 possible hourglasses in a 6x6 array. Write a program to find the maximum sum among all hourglasses in the given array. Constraints * The array contains integer values. * All elements are in the range of [-9, 9]. Input The input is given from Standard Input in the following format: ``` a00 a01 a02 a03 a04 a05 a10 a11 a12 a13 a14 a15 a20 a21 a22 a23 a24 a25 a30 a31 a32 a33 a34 a35 a40 a41 a42 a43 a44 a45 a50 a51 a52 a53 a54 a55 ``` Output Print the maximum hourglass sum. Examples Input ``` 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 ``` Output 19 Input ``` -1 -1 0 -9 -2 -2 -2 -1 -6 -8 -2 -5 -1 -1 -1 -2 -3 -4 -1 -9 -2 -4 -4 -5 -7 -3 -3 -2 -9 -9 -1 -3 -1 -2 -4 -5 ``` Output -6","solution":"def max_hourglass_sum(arr): max_sum = -63 # Since the minimum hourglass sum is -63 (7 * -9) for i in range(4): for j in range(4): top = arr[i][j] + arr[i][j+1] + arr[i][j+2] middle = arr[i+1][j+1] bottom = arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2] hourglass_sum = top + middle + bottom if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"Vera loves collecting gemstones, and recently she received a collection of gemstones from her friend. Each gemstone is represented by a string consisting of lowercase English letters only. Vera is particularly interested in finding the common elements, i.e., characters that appear in every gemstone in the collection. Your task is to help Vera find out the number of such common characters. Input - The first line contains a single integer n — the number of gemstones. (1 ≤ n ≤ 100) - The following n lines each contain a non-empty string of lowercase English letters representing the gemstones. The length of each string does not exceed 100. Output - Print a single integer — the number of characters that appear in every gemstone in the collection. Examples Input 3 abcdde baccd eeabg Output 2 Input 4 abc def ghi jkl Output 0","solution":"def count_common_characters(n, gemstones): Returns the number of common characters that appear in every gemstone. # Find the set of characters in the first gemstone common_chars = set(gemstones[0]) # Intersect it with the set of characters in remaining gemstones for i in range(1, n): common_chars &= set(gemstones[i]) # The number of common characters is the size of the intersection set return len(common_chars)"},{"question":"You are given an array b_1, b_2, ..., b_m with positive integers, which represents the capacities of different containers, and an array c_1, c_2, ..., c_k with positive integers, which represents the capacities of different crates. Determine whether it is possible to distribute all the crates into the containers while ensuring that the total capacity of crates in each container does not exceed the container\'s capacity. Input The first line contains a single integer t (1 ≤ t ≤ 2000) — the number of test cases. The first line of each test case contains two integers m and k (1 ≤ m, k ≤ 100) — the number of containers and crates, respectively. The second line of each test case contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 100) — the capacities of the containers. The third line of each test case contains k integers c_1, c_2, ..., c_k (1 ≤ c_i ≤ 100) — the capacities of the crates. Output For each test case, print YES if it is possible to distribute all the crates into the containers satisfying the given condition, otherwise print NO. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as positive answer). Example Input 3 3 3 5 10 8 5 4 5 2 3 7 5 5 5 6 4 2 4 8 2 2 3 1 Output YES NO YES Note In the first test case, the crates [5, 4, 5] can fit into the containers [5, 10, 8]. In the second test case, there is no way to fit the crates [5, 5, 6] into the containers [7, 5]. In the third test case, the crates [3, 1] can fit into the containers [4, 8, 2, 2], for example, placing crate of capacity 3 in the first container and crate of capacity 1 in the second container.","solution":"def can_distribute(t, test_cases): results = [] for i in range(t): m, k = test_cases[i][0] container_capacities = sorted(test_cases[i][1], reverse=True) crate_capacities = sorted(test_cases[i][2], reverse=True) j = 0 possible = True for crate in crate_capacities: while j < len(container_capacities) and container_capacities[j] < crate: j += 1 if j == len(container_capacities): possible = False break container_capacities[j] -= crate if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"During a coding tournament, there is a multi-stage challenge where competitors must complete several tasks. Each task has a certain difficulty level and awards a certain number of points upon completion. Competitors gain both individual scores for completing tasks and a cumulative score, which is the sum of all points earned. The difficulty of tasks can vary in each stage, and competitors can choose which tasks to attempt based on their skill levels. You are to determine the maximum score that can be achieved by completing tasks optimally in each stage, given the constraints on the total number of tasks each competitor can attempt in a stage. # Input The first line contains two integers, `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100) — the number of tasks and the maximum number of tasks a competitor can attempt in a stage. The next `n` lines each contain two integers, `di` and `pi` (1 ≤ di ≤ 100, 1 ≤ pi ≤ 106) — the difficulty level of the i-th task and the points awarded for completing it. # Output Print a single integer, the maximum total points that can be achieved by attempting at most `m` tasks. # Examples Input ``` 6 3 4 20 3 5 1 10 5 15 2 25 3 10 ``` Output ``` 60 ``` Input ``` 5 2 1 30 2 50 3 40 4 25 5 35 ``` Output ``` 90 ``` # Note In the first example, the best strategy is to choose the tasks with points 25, 20, and 15, totaling 60 points. In the second example, the best choice is to pick the tasks that yield 50 and 40 points, totaling 90 points.","solution":"def max_score(n, m, tasks): Determines the maximum score that can be achieved by completing at most m tasks. Parameters: - n: The total number of available tasks (int) - m: The maximum number of tasks a competitor can attempt (int) - tasks: A list of tuples, where each tuple contains two integers: - di: difficulty level of the i-th task (int) - pi: points awarded for completing the i-th task (int) Returns: - The maximum total points (int) # Sort tasks by points in descending order to maximize the score sorted_tasks = sorted(tasks, key=lambda x: x[1], reverse=True) # Select the top m tasks with the highest points max_points = sum(task[1] for task in sorted_tasks[:m]) return max_points"},{"question":"This is an output-only problem. You shouldn\'t read anything from the input. Your task is to simulate matrix transposition for a given NxM matrix using only swap operations. There is no input in this problem, you just print a sequence of operations. Imagine that there is a big two-dimensional array a[0][0], a[0][1], ..., a[N-1][M-1] of size NxM. The values of the array are unknown to you, but your goal is to transpose the matrix (i.e., convert all a[i][j] to a[j][i]) by the end. You are allowed operations of one type, with the following format (where 0 ≤ i1, i2 < N and 0 ≤ j1, j2 < M): * `swap i1 j1 i2 j2` — swaps the elements a[i1][j1] and a[i2][j2]. You can use at most Q operations. The actual checker simulates the process for various matrices of given dimensions. Each time, the checker initializes a matrix of dimensions NxM, applies all your operations in the provided sequence, and checks if the matrix is correctly transposed. Constraints * 1 ≤ N, M ≤ 10^3 * Q = 200,000 Input The Standard Input is empty. Output In the first line, print the number of operations. Each operation should then be printed in a single line of format `swap i1 j1 i2 j2`. Example Input Output","solution":"def transpose_matrix(N, M): operations = [] for i in range(N): for j in range(i + 1, M): operations.append(f\'swap {i} {j} {j} {i}\') return operations # Example usage: N = 5 # Example value of N M = 4 # Example value of M operations = transpose_matrix(N, M) print(len(operations)) for op in operations: print(op)"},{"question":"You are given a non-negative number represented as an array of digits. You need to increment the number by one and return the resulting number as an array of digits. Input The first input line contains an integer n (1 ≤ n ≤ 1000) — the number of digits in the array. The second line contains n digits separated by spaces. Each digit di is an integer (0 ≤ di ≤ 9). Output Print the resulting number as an array of digits. Each digit should be separated by a space. Examples Input 4 1 2 3 4 Output 1 2 3 5 Input 3 9 9 9 Output 1 0 0 0","solution":"def increment_number(digits): Increments the number represented by an array of digits by one. Returns the resulting number as an array of digits. n = len(digits) carry = 1 # We need to add one to the number for i in range(n-1, -1, -1): new_digit = digits[i] + carry if new_digit >= 10: digits[i] = new_digit % 10 carry = 1 else: digits[i] = new_digit carry = 0 break if carry: digits.insert(0, carry) return digits"},{"question":"In a kingdom far, far away, there exists a magical garden known for its unique species of flowers. Each flower blossoms exactly once in its lifetime and remains in bloom for precisely one day. The head gardener of the kingdom wants to know when the garden will display its maximum beauty. Flowers in this garden have a specific start day `si` when they blossom and they remain in bloom for exactly one day. The beauty of the garden on any given day is defined as the total number of flowers that are in bloom on that day. You are given a list of days when each flower blossoms. Your task is to determine the maximum beauty of the garden and the earliest day on which this maximum beauty occurs. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of flowers. - The next line contains `n` space-separated integers `s1, s2, ..., sn` (1 ≤ si ≤ 10^6) — the days on which each flower blossoms. Output Output two space-separated integers: - The maximum beauty of the garden. - The earliest day on which the garden achieves this maximum beauty. Example Input 6 2 3 2 3 2 1 Output 3 2 Note In the given example, there are six flowers. The garden\'s beauty is highest on day 2, with three flowers in bloom (`si = 2`). The maximum beauty on any day is 3, and the earliest day this occurs is day 2.","solution":"def max_beauty(n, bloom_days): This function takes in the number of flowers \'n\' and a list of bloom days and returns the maximum beauty and the earliest day on which this maximum beauty occurs. from collections import Counter # counting frequency of each bloom day bloom_count = Counter(bloom_days) # find the maximum beauty and the earliest day it occurs max_beauty = max(bloom_count.values()) earliest_day = min(day for day, count in bloom_count.items() if count == max_beauty) return max_beauty, earliest_day # Example Usage: # bloom_days = [2, 3, 2, 3, 2, 1] # max_beauty(6, bloom_days) should return (3, 2)"},{"question":"Jiro is organizing a contest with three types of events: A, B, and C. Each event has a distinct point value assigned to it: 1, 2, and 3 points, respectively. A participant will have the option to choose any event, but once they choose an event, that event\'s point value will no longer be available to other participants. Given the point values that have already been taken, determine the point value that is still available for the next participant. Constraints * Each of the taken points is 1, 2, or 3. * The taken points are distinct and exactly two in number. Input Input is given from Standard Input in the following format: X Y Output Print the available point value. Examples Input 1 3 Output 2 Input 2 1 Output 3","solution":"def find_available_point(x, y): Returns the available point value for the next participant when two values are already taken. :param x: Integer, one of the taken points (1, 2, or 3) :param y: Integer, the other taken point (1, 2, or 3) :return: Integer, the available point value return 6 - x - y"},{"question":"Write a program that reads a series of integer pairs and for each pair, computes their greatest common divisor (GCD) and least common multiple (LCM). The input ends when a line with a single zero is encountered. Your program should not process this terminal symbol. Input The input consists of multiple datasets. Each dataset contains two integers, a and b, separated by a space. The values of a and b (|a|, |b| < 2<sup>31</sup>). Output For each dataset, print the GCD and LCM of the two integers, separated by a space. Example Input 12 18 100 25 7 13 0 Output 6 36 25 100 1 91","solution":"import math def gcd_lcm_pairs(input_pairs): Reads a list of integer pairs and computes their GCD and LCM. The input ends when a pair with a single zero is encountered. Args: input_pairs (list of tuples): List of integer pairs (a, b). Returns: list of tuples: Each tuple contains the GCD and LCM of the two integers. results = [] for a, b in input_pairs: if a == 0 and b == 0: break gcd_val = math.gcd(a, b) lcm_val = abs(a * b) // gcd_val if a and b else 0 results.append((gcd_val, lcm_val)) return results"},{"question":"In a certain video game, a character can gain experience points (XP) by completing quests. Each quest gives a different amount of XP, and these amounts are represented as an array of integers. The player begins with an initial amount of XP and progresses by completing quests in sequence. Your task is to determine if there is a way to achieve at least a target amount of XP by completing a contiguous sequence of quests. Input The first line contains two integers, n and t (1 ≤ n ≤ 105, 1 ≤ t ≤ 109). The second line contains n integers, each representing the XP gained from completing a quest (1 ≤ XP ≤ 104). Output Output \\"YES\\" if there is a contiguous subarray of quests\' XP that sums to at least t. Otherwise, print \\"NO\\". Examples Input 5 15 3 1 2 7 9 Output YES Input 4 20 3 5 2 9 Output NO","solution":"def can_achieve_target_xp(n, t, xp_list): Determines if there is a contiguous subarray of quests\' XP that sums to at least t. Args: n (int): Number of quests. t (int): Target amount of XP. xp_list (list of int): XP gained from completing each quest. Returns: str: \\"YES\\" if there is a contiguous subarray with sum at least t, otherwise \\"NO\\". current_sum = 0 start = 0 for end in range(n): current_sum += xp_list[end] while current_sum >= t: return \\"YES\\" while current_sum > t and start <= end: current_sum -= xp_list[start] start += 1 return \\"NO\\""},{"question":"A secret agent wants to send encrypted messages to avoid the risk of being intercepted. He decides to use a substitution cipher to transform his messages. The strategy involves mapping each letter in the alphabet to its reverse counterpart, where \'a\' becomes \'z\', \'b\' becomes \'y\', and so on. For example, given a sentence \\"Hello World\\", the encrypted message would be \\"Svool Dliow\\" because: H -> S e -> v l -> o l -> o o -> l W -> D o -> l r -> i l -> o d -> w Implement a function that takes a sentence and returns its encrypted form using the substitution cipher strategy. Spaces and punctuation should remain the same. Constraints: - The input will contain only alphabetic characters, spaces, and common punctuation marks. - The length of the input string will not exceed 100 characters. Input: A single line containing the sentence to be encrypted. Output: A single line containing the encrypted sentence. Sample Input: Hello World! Sample Output: Svool Dliow!","solution":"def create_cipher_map(): Creates a dictionary to map each letter to its reverse counterpart. from string import ascii_lowercase, ascii_uppercase cipher_map = {} for a, z in zip(ascii_lowercase, reversed(ascii_lowercase)): cipher_map[a] = z cipher_map[a.upper()] = z.upper() return cipher_map def encrypt_message(message): Encrypts the message using the substitution cipher strategy. Parameters: message (str): The message to be encrypted. Returns: str: The encrypted message. cipher_map = create_cipher_map() encrypted_message = \'\'.join(cipher_map.get(char, char) for char in message) return encrypted_message"},{"question":"In a magical land, there are n floating islands connected by m magical bridges. Each bridge connects exactly two islands and has a certain fixed cost and fixed magical energy requirement to maintain it. The magical energy is supplied by a wizard, but his energy is limited. The wizard has only a certain amount of magical energy he is willing to use each month to keep the bridges up and running. The king of the magical land wants to ensure that all islands remain connected every month, but he also wants to minimize the cost of the bridges that remain active. Your task is to help the king determine the minimum cost needed to keep all islands connected without exceeding the wizard\'s magical energy capacity. Input: The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of islands and the number of bridges respectively. The following m lines each contain four integers u, v, cost, energy (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ cost ≤ 10000, 1 ≤ energy ≤ 10000) — representing a bridge between island u and island v, the cost of maintaining this bridge, and the magical energy required to maintain this bridge. The last line contains a single integer e (1 ≤ e ≤ 100000) — the maximum amount of magical energy the wizard can use per month to maintain the bridges. Output: Print the minimum cost to keep all islands connected without exceeding the wizard\'s magical energy capacity. If it is not possible to connect all islands with the given energy constraint, print \\"impossible\\" without quotes. Examples: Input: 4 5 1 2 10 5 2 3 15 7 3 4 10 6 4 1 20 9 1 3 25 8 15 Output: 35 Input: 3 3 1 2 10 5 2 3 15 3 3 1 30 10 8 Output: 25","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): break u, v, cost, energy = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append((u, v, cost)) union(parent, rank, x, y) if e != n - 1: return \\"impossible\\" else: return sum([cost for u, v, cost in result]) def minimum_cost_to_connect_islands(n, m, bridge_data, max_energy): edges = [] for u, v, cost, energy in bridge_data: if energy <= max_energy: edges.append((u-1, v-1, cost, energy)) return kruskal(n, edges)"},{"question":"You have an array `A` containing `N` integers. Every second, you can perform one of the following operations on `A`: 1. Select any two distinct indices `i` and `j` (1 ≤ i, j ≤ N) such that `A[i] != A[j]` and replace `A[i]` with `A[j] + 1`. 2. Leave the array as it is. You wish to make all elements of the array equal by performing the minimum number of operations. Determine the minimum number of operations necessary to achieve this. Constraints: * 1 ≤ N ≤ 100 * -10^5 ≤ A[i] ≤ 10^5 (for all `i`) Input Input is given from Standard Input in the following format: ``` N A1 A2 A3 ... AN ``` Output Print the minimum number of operations required to make all elements of the array equal. Examples Input ``` 3 1 2 3 ``` Output ``` 2 ``` Input ``` 4 4 4 4 4 ``` Output ``` 0 ``` Input ``` 5 1 5 1 1 1 ``` Output ``` 3 ```","solution":"def min_operations_to_equalize_array(N, A): from collections import Counter counter = Counter(A) most_common = counter.most_common(1)[0][1] return N - most_common # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(min_operations_to_equalize_array(N, A))"},{"question":"Given an array of integers A of length N, find the minimum number of moves required to make all the elements of the array equal. In each move, you can select any one element and increase or decrease its value by 1. Constraints - 1 leq N leq 2 times 10^5 - -10^9 leq A[i] leq 10^9 (1 leq i leq N) Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of moves required. Examples Input 4 1 10 2 9 Output 16 Input 3 -1 -1 1 Output 2","solution":"def min_moves_to_make_elements_equal(N, A): Returns the minimum number of moves required to make all elements of A equal. A.sort() median = A[N // 2] # choosing the median as the target for minimum moves return sum(abs(x - median) for x in A) # reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(min_moves_to_make_elements_equal(N, A))"},{"question":"You are tasked with developing a ride-sharing application where multiple riders can share a single ride. To maintain optimal ride-sharing matches, the system must evaluate potential rides based on certain criteria and calculate matches dynamically as requests come in. Your task is to write a program that processes ride requests and matches riders based on the following rules: 1. **Rider Information**: Each rider specifies their desired number of riders to share with (including themselves), their earliest start time, and their latest arrival time. 2. **Compatibility Criteria**: - The ride must start after the earliest start time of all matched riders and arrive before the latest arrival time of all matched riders. - The number of riders in the ride must match the desired number of riders for all matched riders. The system must process multiple ride requests and output possible matches for each request based on the current state of the system. # Input The first line of the input is an integer, representing the number of ride requests. For each ride request, the input is provided on a new line with the following format: ``` <rider_id> <desired_riders> <earliest_start> <latest_arrival> ``` - `<rider_id>`: A unique identifier for the rider (a non-negative integer). - `<desired_riders>`: The number of riders desired for the ride (including the rider themselves). - `<earliest_start>`: The earliest start time as an integer representing minutes past midnight. - `<latest_arrival>`: The latest arrival time as an integer representing minutes past midnight. The system should initially be empty and will fill up as riders make their requests. # Output For each ride request, output a list of possible matches formatted as follows: ``` <rider_id>: match <matched_rider_id_1> <matched_rider_id_2> ... <matched_rider_id_n> ``` If no match is found based on the given criteria, output: ``` <rider_id>: no match ``` # Example Input ``` 6 1 3 300 600 2 3 320 580 3 2 400 700 4 3 310 590 5 3 350 650 6 4 300 600 ``` Output ``` 1: no match 2: match 1 2 3: no match 4: match 1 2 4 5: match 2 4 5 6: no match ``` Each request is processed in sequence allowing for dynamic updates to rider matches. Ensure that your program processes requests efficiently and outputs the correct matches for each rider.","solution":"def process_rides(requests): Processes ride requests and returns matches based on compatibility criteria. def is_compatible(rider1, rider2): Checks if rider1 and rider2 are compatible based on the given rules. start_time = max(rider1[\\"earliest_start\\"], rider2[\\"earliest_start\\"]) arrival_time = min(rider1[\\"latest_arrival\\"], rider2[\\"latest_arrival\\"]) if start_time > arrival_time: return False return rider1[\\"desired_riders\\"] == rider2[\\"desired_riders\\"] riders = [] matches = {} for rider in requests: rider_id = rider[\'rider_id\'] possible_matches = [] for other_rider in riders: if is_compatible(rider, other_rider): possible_matches.append(other_rider[\\"rider_id\\"]) if len(possible_matches) >= rider[\\"desired_riders\\"] - 1: possible_riders = possible_matches[:rider[\\"desired_riders\\"] - 1] possible_riders.append(rider_id) for r in possible_riders: matches[r] = possible_riders result = f\\"{rider_id}: match \\" + \\" \\".join(map(str, possible_riders)) else: matches[rider_id] = [] result = f\\"{rider_id}: no match\\" riders.append(rider) print(result) # Example Usage requests = [ {\\"rider_id\\": 1, \\"desired_riders\\": 3, \\"earliest_start\\": 300, \\"latest_arrival\\": 600}, {\\"rider_id\\": 2, \\"desired_riders\\": 3, \\"earliest_start\\": 320, \\"latest_arrival\\": 580}, {\\"rider_id\\": 3, \\"desired_riders\\": 2, \\"earliest_start\\": 400, \\"latest_arrival\\": 700}, {\\"rider_id\\": 4, \\"desired_riders\\": 3, \\"earliest_start\\": 310, \\"latest_arrival\\": 590}, {\\"rider_id\\": 5, \\"desired_riders\\": 3, \\"earliest_start\\": 350, \\"latest_arrival\\": 650}, {\\"rider_id\\": 6, \\"desired_riders\\": 4, \\"earliest_start\\": 300, \\"latest_arrival\\": 600}, ] process_rides(requests)"},{"question":"Given an array of non-negative integers, you need to sort the array in a way such that the sequence of numbers alternates between the smallest available number and the largest available number. The goal is to rearrange the array so that after sorting, the array follows the pattern: smallest, largest, second smallest, second largest, and so on. Input: The first line contains a single positive integer, T, denoting the number of test cases. Each of the next T lines contains an integer n and an array of n non-negative integers. Output: For each test case, print the rearranged array in the desired alternating smallest and largest format, with elements separated by a space. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 0 ≤ array elements ≤ 10^9 Example: Input: 3 6 1 3 2 2 5 8 5 10 20 30 40 50 4 4 4 4 Output: 1 8 2 5 2 3 10 50 20 40 30 4 4 4 4","solution":"def alternate_sorting(test_cases): Takes a list of test cases, sorts each array to alternate between the smallest available number and the largest available number, and returns the formatted output. results = [] for test_case in test_cases: n, arr = test_case arr.sort() result = [] for i in range((n + 1) // 2): result.append(arr[i]) if i != n - i - 1: result.append(arr[n - i - 1]) results.append(\' \'.join(map(str, result))) return results"},{"question":"Alice loves to eat fruits and she has a basket with different types of fruits. Each type of fruit has a different nutritional value and Alice wants to maximize her total nutritional intake. However, there is a constraint: she can only eat a limited number of fruits each day. You are given n fruits, where the i-th fruit has a nutritional value v_i. Alice can eat up to k fruits in a day but she cannot eat more than one of the same type of fruit in a day. You are required to determine the maximum nutritional value Alice can get in one day. The input consists of multiple test cases. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case has the following structure: - The first line contains two integers n and k (1 ≤ n, k ≤ 10^5) — the total number of fruits and the maximum number of fruits Alice can eat in a day. - The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9) — the nutritional values of the fruits. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print a single integer — the maximum nutritional value Alice can get in one day. Example Input 3 6 3 1 2 3 4 5 6 5 2 5 3 8 6 2 4 1 10 20 30 40 Output 15 14 40 Explanation In the first test case: - Alice can eat any three fruits, the best choice is 4, 5, and 6 giving a total nutritional value of 15. In the second test case: - Alice can eat any two fruits, the best choice is 8 and 6 giving a total nutritional value of 14. In the third test case: - Alice can eat any one fruit, the best choice is 40 giving the maximum nutritional value.","solution":"def max_nutritional_value(t, test_cases): For each test case, determine the maximum nutritional value Alice can get in one day. t: int - the number of test cases test_cases: list of tuples - each tuple contains (n, k, values) Returns a list of integers representing the maximum nutritional value for each test case. results = [] for n, k, values in test_cases: # Sort the nutritional values in descending order values.sort(reverse=True) # Take the top \'k\' values to maximize the nutritional intake max_value = sum(values[:k]) results.append(max_value) return results"},{"question":"Problem Statement You are in charge of developing a robust password manager that helps users maintain strong and secure passwords. One of the advanced features of this manager is to ensure that each password meets certain complexity standards. Specifically, a password must adhere to the following rules: 1. It must contain at least one uppercase letter. 2. It must contain at least one lowercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set: `!@#%^&*()-+`. 5. Its length must be at least 8 characters. If a password fails to meet one or more of these criteria, your program should identify which criteria are not met and generate a new password that adheres to all the rules by adding the minimum number of characters needed. The new characters should be added at the end of the password. Write a function that takes a given password and returns the fixed version of the password with minimal changes. * * * Input The input consists of a single string P, representing the current password. > P The length of the given password P is at most 100 characters. Output Output the modified password that adheres to all the complexity rules described above. Examples Input| Output ---|--- abcD3 | abcD3!@ 1234567!@ | A1234567!@ Abcdefgh | Abcdefgh1! abc1!@# | abc1!@#D * * * Note: In the example `abcD3`, the output `abcD3!@` includes the minimal characters (`!@`) added to meet the length requirement. Each added character is from the same category needed to fulfill multiple rules when possible.","solution":"import string import random def modify_password(password): This function takes a password string and modifies it to ensure it meets the specified complexity requirements: - At least 1 uppercase letter - At least 1 lowercase letter - At least 1 digit - At least 1 special character from the set: !@#%^&*()-+ - Minimum length of 8 characters has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \'!@#%^&*()-+\' for c in password) needed_chars = [] if not has_upper: needed_chars.append(random.choice(string.ascii_uppercase)) if not has_lower: needed_chars.append(random.choice(string.ascii_lowercase)) if not has_digit: needed_chars.append(random.choice(string.digits)) if not has_special: needed_chars.append(random.choice(\'!@#%^&*()-+\')) password += \'\'.join(needed_chars) if len(password) < 8: extra_chars_needed = 8 - len(password) password += \'\'.join(random.choices(string.ascii_letters + string.digits + \'!@#%^&*()-+\', k=extra_chars_needed)) return password"},{"question":"Teja loves to play with arrays and now he is bored of simple array operations. So, he decided to perform a new operation called \\"sum of absolute differences\\". Given an array of N integers, the sum of absolute differences is defined as the sum of the absolute differences between each pair of elements in the array. Your task is to help Teja by writing a program that computes the sum of absolute differences for a given array. Input The first line contains an integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of elements in the array. The second line of each test case contains N space-separated integers denoting the elements of the array. Output For each test case, print the sum of absolute differences. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 3 3 -1 9 4 1 3 7 8 SAMPLE OUTPUT 28 18 Explanation For the first test case, The pairwise absolute differences are: |3 - (-1)| = 4 |3 - 9| = 6 |-1 - 9| = 10 Sum = 4 + 6 + 10 = 20 For the second test case, The pairwise absolute differences are: |1 - 3| = 2 |1 - 7| = 6 |1 - 8| = 7 |3 - 7| = 4 |3 - 8| = 5 |7 - 8| = 1 Sum = 2 + 6 + 7 + 4 + 5 + 1 = 25","solution":"def sum_of_absolute_differences(test_cases): For each test case, computes and returns the sum of absolute differences among all pairs in the array. results = [] for case in test_cases: N, arr = case total = 0 # Sort the array to make the sum of absolute differences calculation easier. arr.sort() # Precompute prefix and suffix sums prefix_sum = [0] * (N + 1) suffix_sum = [0] * (N + 2) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] for i in range(N, 0, -1): suffix_sum[i] = suffix_sum[i + 1] + arr[i - 1] for i in range(1, N + 1): total += (arr[i - 1] * (2 * i - N - 1)) results.append(total) return results def transform_input(input_list): Transforms the input into a suitable format for the function sum_of_absolute_differences. T = int(input_list[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_list[index]) arr = list(map(int, input_list[index + 1].split())) test_cases.append((N, arr)) index += 2 return test_cases"},{"question":"You are given a list of employees in a company. Each employee has a unique ID and a manager\'s ID. The employees and their managers form a management tree, where the root node is an employee with no manager (manager ID is -1). Your task is to find the employee who has the highest number of subordinates directly or indirectly under them. Write a function `find_most_influential_employee(employee_list)` that takes in a list of tuples, where each tuple consists of two integers - `(employee_id, manager_id)`. The function should return the ID of the employee who has the most number of subordinates. # Input: - Each tuple in the `employee_list` represents an employee and contains two integers: - `employee_id`: the ID of an employee (1 ≤ employee_id ≤ 10^5). - `manager_id`: the ID of the manager of the employee. If the employee has no manager, the manager ID will be -1. # Output: - An integer representing the ID of the employee with the most subordinates. # Example: Input: ``` [(1, -1), (2, 1), (3, 1), (4, 2), (5, 2), (6, 3)] ``` Output: ``` 1 ``` # Note: In the example provided, employee 1 is the root node (has no manager) and has the highest number of subordinates (directly manages employees 2 and 3, who further manage employees 4, 5, and 6). # Constraints: - The input list will have at least 2 employees. - The tree structure is valid (there are no cycles).","solution":"def find_most_influential_employee(employee_list): from collections import defaultdict # Build an adjacency list to represent the management tree tree = defaultdict(list) root = None for employee_id, manager_id in employee_list: if manager_id == -1: root = employee_id else: tree[manager_id].append(employee_id) # Function to count subordinates for each node def count_subordinates(node): if node not in tree: return 0 count = 0 for child in tree[node]: count += 1 + count_subordinates(child) return count # Determine the employee with the maximum number of subordinates max_subordinates = -1 influential_employee = None for employee, _ in employee_list: sub_count = count_subordinates(employee) if sub_count > max_subordinates: max_subordinates = sub_count influential_employee = employee return influential_employee"},{"question":"Meera is participating in a coding competition and comes across a problem where she needs to determine whether a given integer can be expressed as the sum of two squares. She asks for your help to solve the problem using a program. INPUT: The first line will contain an integer T (1 < T < 10000), the number of test cases. The next T lines will contain an integer N (1 < N < 1000000000000). OUTPUT: For each test case, print YES if the integer can be expressed as the sum of two squares. If not, print NO. SAMPLE INPUT 3 5 8 13 SAMPLE OUTPUT YES YES YES Explanation 5 can be expressed as 1^2 + 2^2. 8 can be expressed as 2^2 + 2^2. 13 can be expressed as 2^2 + 3^2.","solution":"import math def can_be_expressed_as_sum_of_two_squares(n): Checks if a given integer n can be expressed as the sum of two squares. for i in range(int(math.isqrt(n)) + 1): remaining = n - i * i if remaining >= 0 and int(math.isqrt(remaining))**2 == remaining: return \\"YES\\" return \\"NO\\" def process_test_cases(T, cases): Processes multiple test cases. results = [] for n in cases: results.append(can_be_expressed_as_sum_of_two_squares(n)) return results"},{"question":"You are given a list of coordinates representing points on a 2D grid. The task is to identify and return the coordinates of the point that is closest to the origin (0,0). Input The first line contains an integer n (1 <= n <= 1000), the number of points. Each of the next n lines contains two integers representing the x and y coordinates of a point. Output Return the coordinates of the point that is closest to the origin. If multiple points are equally close, return the one that appears first in the input. Example Input 4 1 2 2 3 -1 -1 3 3 Output -1 -1","solution":"def closest_point_to_origin(n, coordinates): Returns the coordinates of the point closest to the origin. Args: n (int): Number of points. coordinates (list of tuples): List of (x, y) coordinates. Returns: tuple: The coordinates of the point closest to the origin. def distance_squared(point): x, y = point return x**2 + y**2 closest_point = coordinates[0] min_distance = distance_squared(closest_point) for point in coordinates[1:]: dist = distance_squared(point) if dist < min_distance: min_distance = dist closest_point = point return closest_point"},{"question":"The library of a university stores numerous books and categorizes them based on different subjects. Each book belongs to only one subject from subject sets identified by integers from 1 to 5. Your task is to write a program that classifies a given book into one of the subject sets based on the words frequently appearing in the book titles. Download the training data from the following link: http://universitylib.com/train/books.zip. The archive contains five directories named \\"1\\", \\"2\\", \\"3\\", \\"4\\", and \\"5\\". Each directory contains titles of books categorized into the respective subjects. Each file in the directories contains one book title per line. Titles may contain multiple words separated by spaces, and words within a title are all in lowercase. For each input book title, your program must predict its subject based on the training data. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of book titles to classify. Each of the next n lines contains one book title, which may be up to 250 characters long, and consists of lowercase words separated by spaces. Each book title is guaranteed to contain at least one word. Output For each book title, print an integer from 1 to 5, inclusive — the number representing the predicted subject of the book. Examples Input 3 data mining techniques ancient history of rome modern physics for engineers Output 1 3 2","solution":"from collections import defaultdict, Counter import os def load_training_data(): training_data = defaultdict(list) for i in range(1, 6): directory = str(i) for filename in os.listdir(directory): filepath = os.path.join(directory, filename) with open(filepath, \'r\') as file: titles = file.readlines() training_data[i].extend([title.strip() for title in titles]) return training_data def build_word_subject_map(training_data): word_subject_map = defaultdict(Counter) for subject, titles in training_data.items(): for title in titles: words = title.split() for word in words: word_subject_map[word][subject] += 1 return word_subject_map def predict_subject(title, word_subject_map): words = title.split() subject_score = Counter() for word in words: if word in word_subject_map: subject_score.update(word_subject_map[word]) if subject_score: return subject_score.most_common(1)[0][0] else: return 1 # Default to subject 1 if no words match def classify_books(n, titles): training_data = load_training_data() word_subject_map = build_word_subject_map(training_data) results = [] for title in titles: subject = predict_subject(title, word_subject_map) results.append(subject) return results"},{"question":"You are given a string s and q queries. Each query gives you two integers l and r, indicating a subsequence of s that needs to be examined. A subsequence is a string derived from another string by deleting some or no elements without changing the order of the remaining elements. You have to determine for each query whether the subsequence of s from index l to r (inclusive) contains all unique characters or not. Input The first line contains a string s (1 ≤ |s| ≤ 100) consisting of lowercase Latin letters. The second line contains one integer q (1 ≤ q ≤ 100) indicating the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|) representing the starting and ending indices of each query. Output For each query, print YES if the subsequence from index l to r of string s contains all unique characters. Otherwise, print NO. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answers). Example Input abcdef 3 1 3 2 5 1 6 Output YES YES NO Note In the first test case, the string s is \\"abcdef\\". The queries and the corresponding subsequences are: 1. Query 1: l=1, r=3 | Subsequence: \\"abc\\" | All characters are unique. 2. Query 2: l=2, r=5 | Subsequence: \\"bcde\\" | All characters are unique. 3. Query 3: l=1, r=6 | Subsequence: \\"abcdef\\" | All characters are unique.","solution":"def is_unique_subsequence(s, queries): Determine if the subsequence of s from index l to r is composed of all unique characters for each query. :param s: Input string consisting of lowercase Latin letters. :param queries: List of tuples, where each tuple contains two integers (l, r) representing the starting and ending indices (1-based) of each query. :return: List of strings \\"YES\\" or \\"NO\\" for each query indicating if the subsequence has all unique characters. results = [] for l, r in queries: subseq = s[l-1:r] # Convert to 0-based index and slice the string if len(subseq) == len(set(subseq)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers and a target sum, write a function that determines the minimum length of a contiguous subarray that has a sum greater than or equal to the target sum. If no such subarray exists, return 0. # Input - The first line contains two integers: the length of the list `n` and the target sum `S`. - The second line contains `n` space-separated integers representing the list. # Output - Output a single integer representing the minimum length of a contiguous subarray with a sum greater than or equal to `S`. If no such subarray exists, output 0. # Example Input 8 15 5 1 3 5 10 7 4 9 Output 2 Input 5 11 1 2 3 4 5 Output 3","solution":"def min_subarray_length(n, S, nums): Determines the minimum length of a contiguous subarray that has a sum greater than or equal to S. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += nums[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"\\"Verna and the Number Puzzle\\" Verna loves puzzles. Today, she came up with an interesting number puzzle and needs your help to solve it. The puzzle is described as follows: You are given an integer `n` and an array `a` of length `n` consisting of unique positive integers. You need to perform the following steps iteratively until the array is fully sorted in non-decreasing order: 1. Find the first pair of consecutive elements `(a[i], a[i+1])` where `a[i] > a[i+1]`. 2. Swap `a[i]` and `a[i+1]`. Your task is to write a program that determines the number of swaps required to sort the array using the given procedure. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the array. - The second line contains `n` unique positive integers `a[i]` (1 ≤ a[i] ≤ 10000) — the elements of the array. # Output - Print a single integer — the number of swaps required to sort the array using the given procedure. # Example Input ``` 5 4 3 2 1 5 ``` Output ``` 6 ``` # Note The initial array is `[4, 3, 2, 1, 5]`. - Swap `4` with `3`: `[3, 4, 2, 1, 5]` - Swap `4` with `2`: `[3, 2, 4, 1, 5]` - Swap `4` with `1`: `[3, 2, 1, 4, 5]` - Swap `3` with `2`: `[2, 3, 1, 4, 5]` - Swap `3` with `1`: `[2, 1, 3, 4, 5]` - Swap `2` with `1`: `[1, 2, 3, 4, 5]` Total swaps required are 6.","solution":"def count_swaps_to_sort(n, a): Returns the number of swaps required to sort the array using the given procedure. swaps = 0 sorted_flag = False while not sorted_flag: sorted_flag = True for i in range(n - 1): if a[i] > a[i + 1]: # Swap the elements a[i], a[i + 1] = a[i + 1], a[i] swaps += 1 sorted_flag = False return swaps"},{"question":"Alice is organizing a marathon event in her city. She wants to track the positions of all participants over time to determine their current rankings during the race. The marathon route consists of N checkpoints, each with a unique number from 1 to N. However, instead of just asking for the rankings based on a single point in time, she has planned several queries to understand the progress of different runners. Each query consists of a pair (si, ei) representing a span between two checkpoints (inclusive), and Alice wants to know the total number of unique runners who have been at any checkpoint in that span. Below is a detailed explanation of the requirements: Input: - The first line of input is the number of test cases T (1 <= T <= 10). - For each test case, the first line contains two integers N (1 <= N <= 100) and M (1 <= M <= 100), where N is the number of checkpoints and M is the number of participants. - The next M lines each contain a sequence of N integers. Each sequence represents the order in which a participant visits the checkpoints. - The next line contains an integer Q (1 <= Q <= 50), the number of queries. - The next Q lines each contain two integers si and ei (1 <= si <= ei <= N), representing the start and end checkpoint numbers for that query. Output: For each test case, output Q lines, each containing the number of unique participants who have been at any checkpoint within the span [si, ei] for that query. Example: Input: 1 5 3 1 2 3 4 5 5 4 3 2 1 3 1 4 2 5 2 1 3 2 5 Output: 3 3 Explanation: Example case 1: - There are 3 participants and 5 checkpoints. - For the first query (1,3), all three participants have been at checkpoints 1, 2, and 3. - For the second query (2,5), all three participants have been at checkpoints 2, 3, 4, and 5.","solution":"def find_unique_runners(T, data): results = [] index = 0 for _ in range(T): N, M = data[index] index += 1 participants = [] for _ in range(M): participants.append(data[index]) index += 1 Q = data[index][0] index += 1 queries = data[index:index + Q] index += Q checkpoint_participants = [[] for _ in range(N)] for i, checkpoints in enumerate(participants): for j, checkpoint in enumerate(checkpoints): checkpoint_participants[j].append(i) for si, ei in queries: si -= 1 ei -= 1 unique_runners = set() for k in range(si, ei + 1): unique_runners.update(checkpoint_participants[k]) results.append(len(unique_runners)) return results"},{"question":"David is the team leader of a software development group that is working on a project for a local logistics company. One of their tasks is to develop an algorithm to help the company optimize their delivery routes. The logistics company uses a fleet of delivery trucks, and each truck has a capacity limit in terms of the number of packages it can carry. Given a list of packages, where each package has a certain weight, the goal is to distribute the packages among the trucks such that the load on each truck does not exceed its capacity, and the number of trucks used is minimized. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of packages. The next line contains n integers wi (1 ≤ wi ≤ 100), the weights of the packages. The last line contains an integer c (1 ≤ c ≤ 100), the capacity of each truck. Output Output the minimum number of trucks required to transport all the packages. Examples Input 5 2 3 4 5 6 10 Output 2 Input 8 1 2 3 4 5 6 7 8 15 Output 3","solution":"def min_trucks_required(n, weights, capacity): Returns the minimum number of trucks required to transport all the packages. Args: n (int): The number of packages. weights (list[int]): The list of package weights. capacity (int): The capacity of each truck. Returns: int: The minimum number of trucks required. # Sort weights in descending order to prioritize heavier packages first. weights.sort(reverse=True) trucks = [] for weight in weights: # Try to put the package in an existing truck placed = False for truck in trucks: if sum(truck) + weight <= capacity: truck.append(weight) placed = True break # If not possible, create a new truck if not placed: trucks.append([weight]) return len(trucks)"},{"question":"A company is organizing a coding competition and has decided to use a system of points to rank the participants. Each participant can submit multiple solutions to various problems, and each submission can either be correct or incorrect. For each correct submission, the participant earns some points, while incorrect submissions do not affect the score but are tracked. The points for each problem are predefined. Given the details of the scores for different problems and the submissions made by participants, determine the final score of each participant. You are given: - A list of problems with their associated points. - A list of submissions indicating which participant submitted the solution to which problem and whether it was correct. Write a program to calculate the final score for each participant and display the participant names sorted in descending order of their scores. If two participants have the same score, they should be sorted lexicographically by their names. Input - The first line contains two integers P (1 ≤ P ≤ 1000), the number of problems, and S (1 ≤ S ≤ 100000), the number of submissions. - The second line contains P nonnegative integers p_1, p_2, ... , p_P (1 ≤ p_i ≤ 1000), representing the points for each problem. - The next S lines each contain a participant name (a string of length 1 to 20), an integer indicating the problem index (starting from 1), and a boolean representing whether the submission was correct (1 for correct, 0 for incorrect). Output - Print the names of the participants sorted by their final score in descending order. If two participants have the same score, sort them lexicographically by name. Examples Input 5 7 100 200 150 80 50 alice 2 1 bob 1 1 alice 3 0 alice 4 1 bob 5 1 charlie 2 1 charlie 3 1 Output alice charlie bob Input 3 4 300 500 400 dave 1 1 dave 3 1 emma 2 0 emma 3 1 Output dave emma Note In the first example, alice scores 200 + 80 = 280, bob scores 100 + 50 = 150, and charlie scores 200 + 150 = 350. The participants are sorted by their scores in descending order: charlie, alice, and bob. In the second example, dave scores 300 + 400 = 700, and emma scores 400. The participants are sorted by their scores in descending order: dave and emma.","solution":"def calculate_final_scores(P, S, problem_points, submissions): scores = {} for submission in submissions: name, problem_index, is_correct = submission problem_index -= 1 # convert to 0-based index if is_correct: if name not in scores: scores[name] = 0 scores[name] += problem_points[problem_index] sorted_results = sorted(scores.items(), key=lambda x: (-x[1], x[0])) return [name for name, score in sorted_results]"},{"question":"A new amusement park ride features a line of cars connected in a straight line, resembling a train. Each car can either be facing forward or backward. The ride has a strict requirement that a ride cannot start if there are any adjacent cars facing the same direction, as they can only couple face-to-face. You need to implement a function to determine whether the ride setup is valid based on the direction each car is facing. The directions are provided as a string consisting of characters \'F\' and \'B\', where \'F\' represents a car facing forward and \'B\' represents a car facing backward. The function should return a Boolean value indicating whether the ride setup is valid according to the rules. # Input - A single string `cars` containing the direction of each car, with a length of at least 1 and at most 100,000 characters. Each character in the string is either \'F\' or \'B\'. # Output - A single Boolean value: `True` if the ride setup is valid, `False` otherwise. # Example ```python def is_valid_ride(cars: str) -> bool: # Your code here # Example 1 print(is_valid_ride(\\"FBFBFB\\")) # Expected output: True # Example 2 print(is_valid_ride(\\"FFBB\\")) # Expected output: False # Example 3 print(is_valid_ride(\\"FB\\")) # Expected output: True # Example 4 print(is_valid_ride(\\"BFFB\\")) # Expected output: False ``` # Explanation - In the first example, every car is facing a car in the opposite direction, making it a valid configuration. - In the second example, the first two cars are both facing forward, which violates the rules. - In the third example, both cars are facing opposite directions, so it is valid. - In the fourth example, the second and third cars are both facing forward, which violates the rules.","solution":"def is_valid_ride(cars: str) -> bool: Determines if the ride setup is valid such that no two adjacent cars face the same direction. Args: cars (str): A string of \'F\' (forward) and \'B\' (backward) representing the direction of the cars. Returns: bool: True if the ride setup is valid, False otherwise. for i in range(1, len(cars)): if cars[i] == cars[i-1]: return False return True"},{"question":"You are given an array of integers arr of length n. Your task is to reorder the elements of the array such that for any two consecutive elements the greatest common divisor (GCD) is greater than 1. If it is possible to reorder the array to satisfy this condition, output \\"YES\\" and the reordered array. Otherwise, output \\"NO\\". Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The following lines describe t test cases. Each test case consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Output For each test case, if it is possible to reorder the array so that the GCD of every pair of consecutive elements is greater than 1, print \\"YES\\" followed by the reordered array. If it is not possible, print \\"NO\\". Example Input 3 3 6 10 15 4 3 9 6 12 5 1 2 3 4 5 Output YES 10 15 6 YES 3 9 12 6 NO Note In the first test case, one possible reordering is [10, 15, 6] where GCD(10, 15) = 5, GCD(15, 6) = 3 In the second test case, one possible reordering is [3, 9, 12, 6] where GCD values are 3, 3, and 6 respectively. In the third test case, it is not possible to reorder the array to satisfy the conditions.","solution":"import math from itertools import permutations def gcd(x, y): return math.gcd(x, y) def can_reorder(arr): for perm in permutations(arr): if all(gcd(perm[i], perm[i+1]) > 1 for i in range(len(perm) - 1)): return \\"YES\\", perm return \\"NO\\", def reorder_arrays(test_cases): results = [] for case in test_cases: n, arr = case result = can_reorder(arr) results.append(result) return results def main(t, test_cases): results = reorder_arrays(test_cases) for result in results: if result[0] == \\"YES\\": print(\\"YES\\") print(\\" \\".join(map(str, result[1]))) else: print(\\"NO\\")"},{"question":"Malia is working on a string transformation problem. She is given a string s consisting of lowercase English letters. She wants to transform this string into a palindrome by changing as few characters as possible. A palindrome is a string that reads the same forward and backward. Help Malia determine the minimum number of character changes needed to make the given string a palindrome. Input A single line containing the string s (1 ≤ |s| ≤ 10^6). Output Print the minimum number of character changes needed to make the given string a palindrome. Examples Input abca Output 1 Input racecar Output 0 Note Sample 1. The given string \\"abca\\" can be transformed into a palindrome by changing the last character \'a\' to \'b\', resulting in the string \\"abba\\", which is a palindrome. Hence, the minimum number of changes required is 1. Sample 2. The string \\"racecar\\" is already a palindrome, so no changes are necessary, resulting in 0 character changes required.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes needed to transform the string s into a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Your task is to write a program that verifies if a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring cases. * A palindrome is a sequence of characters which reads the same backward as forward, disregarding spaces, punctuation and capitalization. * The length of the input string will not exceed 100. * The input will contain only printable ASCII characters. Input The input is a single line containing the string to be checked. Output The output should be a single line \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Example Input A man, a plan, a canal, Panama! Output YES Input Hello, World! Output NO","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome after removing all non-alphanumeric characters and ignoring cases. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome return \\"YES\\" if cleaned_string == cleaned_string[::-1] else \\"NO\\""},{"question":"Aaron, a botanist, is studying the growth patterns of a rare species of plant. Each day, the height of the plant doubles, but on alternate days, a storm partially damages it, reducing its height by 50%. Aaron wants to study the height of the plant after a given number of days. Help Aaron by writing a program that calculates the height of the plant after `n` days, given its initial height of 1 unit. Input: An integer `n`, the number of days. Output: The height of the plant after `n` days. Constraints: 1 ≤ n ≤ 1000 SAMPLE INPUT 5 SAMPLE OUTPUT 1 Explanation: 1. On day 1, the height doubles to 2. 2. On day 2, the height is halved back to 1 (due to the storm). 3. On day 3, the height doubles to 2. 4. On day 4, the height is halved back to 1 (due to the storm). 5. On day 5, the height doubles to 2. Thus, the height of the plant after 5 days is 1 unit. Your task is to implement a function that takes an integer `n` and returns the height of the plant after `n` days.","solution":"def plant_height(n): Calculate the height of the plant after n days. Parameters: n (int): number of days Returns: int: height of the plant after n days height = 1 # initial height for day in range(1, n + 1): if day % 2 != 0: height *= 2 else: height *= 0.5 return int(height)"},{"question":"In a distant galaxy, there exists a type of organism called the \\"Plantic\\". Plantics can only survive if they can find Foodiums, which are a type of celestial food source scattered randomly across planets in a galactic grid. Each Plantic requires a specific amount of Foodium to survive for a day. Given an m x n grid representing planets, each cell of the grid contains a certain amount of Foodium. Each Plantic can consume all the Foodium present at a planet it visits. However, they can only move to directly adjacent cells (up, down, left, or right), and they must consume exactly the amount of Foodium they require to survive. Given the planetary grid and a list of Plantics with their respective Foodium requirements, your task is to determine the maximum number of Plantics that can survive for the day. Input Format: The input consists of multiple lines in the following format: - The first line contains two space-separated integers, m and n, representing the dimensions of the grid. - The next m lines each contain n integers, separated by spaces, representing the amount of Foodium available at each planet in the grid. - The following line contains an integer k, representing the number of Plantics. - The final line contains k space-separated integers, each indicating the Foodium requirement for each Plantic. Output Format: Output a single integer, the maximum number of Plantics that can survive for the day. Constraints: - 1 ≤ m, n ≤ 50 - 0 ≤ Foodium amounts ≤ 100 - 1 ≤ k ≤ 50 - 0 ≤ Foodium requirements ≤ 100 Example Input: 3 3 10 20 30 40 50 60 70 80 90 3 50 80 30 Example Output: 3 Explanation: - The grid represents the Foodium available at each planet: ``` 10 20 30 40 50 60 70 80 90 ``` - The Plantics have Foodium requirements of 50, 80, and 30. - The optimal path to ensure all three Plantics survive: - Plantic 1 can move directly to the planet with 50 Foodium. - Plantic 2 can move to the planet with 80 Foodium. - Plantic 3 can move to the planet with 30 Foodium. - All three Plantics can find enough Foodium and survive for the day. Note: Carefully consider movement constraints and ensure the path chosen optimally utilizes Foodium so that the maximum number of Plantics can survive.","solution":"def max_plantics_survive(m, n, grid, k, requirements): Determines the maximum number of Plantics that can survive given the grid and their Foodium requirements. Args: m (int): number of rows in the grid. n (int): number of columns in the grid. grid (list of list of int): the grid containing Foodium amounts. k (int): the number of Plantics. requirements (list of int): the Foodium requirements for each Plantic. Returns: int: the maximum number of Plantics that can survive for the day. from collections import deque def bfs(i, j, target): seen = set() queue = deque([(i, j, 0)]) while queue: x, y, steps = queue.popleft() if (x, y) in seen: continue seen.add((x, y)) if grid[x][y] == target: grid[x][y] = -1 # Mark as visited return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in seen: queue.append((nx, ny, steps + 1)) return False requirements.sort() # Sort to allocate from smallest to largest requirement count = 0 for req in requirements: found = False for i in range(m): for j in range(n): if grid[i][j] == req: if bfs(i, j, req): found = True break if found: break if found: count += 1 return count"},{"question":"A team of archaeologists has recently discovered a series of ancient artifacts, each identified by a positive integer label. These artifacts can be arranged in various sequences to unlock different mysteries of an ancient civilization. However, the archaeologists believe that only specific sequences of artifacts can reveal the full story. Given a set of artifact labels, your task is to determine whether any arrangement of these labels forms a strictly increasing sequence of consecutive integers. In other words, check if these labels can be rearranged to form a sequence where each subsequent number is exactly one greater than the previous number. If such an arrangement is possible, output \\"Possible\\" followed by the sequence. If no such arrangement exists, output \\"Impossible\\". Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of artifact labels. - The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the labels of the artifacts. Output - If a strictly increasing sequence of consecutive integers can be formed, print \\"Possible\\" on the first line and the sequence on the second line. - Otherwise, print \\"Impossible\\". Examples Input 5 9 7 6 8 10 Output Possible 6 7 8 9 10 Input 4 3 5 6 8 Output Impossible Note In the first example, the labels can be rearranged to form the sequence 6, 7, 8, 9, 10, which is a strictly increasing sequence of consecutive integers. In the second example, no arrangement of the labels can form a strictly increasing sequence of consecutive integers.","solution":"def check_possible_sequence(n, labels): This function determines if the given labels can be rearranged to form a strictly increasing sequence of consecutive integers. Parameters: - n: int, the number of artifact labels. - labels: list of int, the labels of the artifacts. Returns: - str: \\"Possible\\" followed by the sequence or \\"Impossible\\". labels.sort() for i in range(1, n): if labels[i] != labels[i - 1] + 1: return \\"Impossible\\" return \\"Possiblen\\" + \\" \\".join(map(str, labels))"},{"question":"Emma is designing a game with multiple levels, each having a different number of tasks. She wants to complete the game by collecting a specific number of stars from the tasks in each level. In her game, each task can give a certain number of stars when completed, and there are m levels in total. Emma wants to determine the minimum number of tasks she needs to complete to collect at least k stars. Input The first line contains three space-separated integers m, k, and t (1 ≤ m ≤ 1000, 1 ≤ k ≤ 109, 1 ≤ t ≤ 1000). Each of the next m lines contains t integers separated by spaces, where each integer represents the number of stars a task gives in that level (-109 ≤ star ≤ 109). Output Output the minimum number of tasks needed to collect at least k stars. If it is impossible to collect the required stars, output -1. Examples Input 3 10 3 1 2 3 4 5 6 7 8 9 Output 2 Input 2 15 2 1 1 2 2 Output -1 Note In the first sample, Emma can complete two tasks with stars 7 and 3 or 8 and 2 from the different levels to collect at least 10 stars in total. In the second sample, there are not enough stars, so it\'s impossible to collect 15 stars.","solution":"def min_tasks_to_collect_stars(m, k, t, stars): all_stars = [] for level in stars: all_stars.extend(level) all_stars.sort(reverse=True) collected_stars = 0 tasks_count = 0 for star in all_stars: if collected_stars >= k: break collected_stars += star tasks_count += 1 if collected_stars >= k: return tasks_count else: return -1"},{"question":"Given two sorted lists A and B each containing n unique integers, find the length of the longest common subsequence (LCS) between them. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. Write a function `longest_common_subsequence(A: List[int], B: List[int]) -> int` that takes in two lists of integers and returns an integer representing the length of their longest common subsequence. # Input - `A`: A sorted list of n unique integers (1 ≤ n ≤ 1000) - `B`: Another sorted list of n unique integers # Output An integer representing the length of the longest common subsequence of the two lists. # Examples Example 1 ```python A = [1, 3, 4, 9, 10] B = [1, 4, 9, 10] print(longest_common_subsequence(A, B)) # Output: 4 ``` Example 2 ```python A = [1, 2, 3] B = [2, 3, 4] print(longest_common_subsequence(A, B)) # Output: 2 ``` Example 3 ```python A = [10, 20, 30, 40] B = [15, 20, 35, 40] print(longest_common_subsequence(A, B)) # Output: 2 ``` # Notes - Ensure your solution runs efficiently for the maximum constraints. - You may use dynamic programming to solve this problem. # Focus This problem focuses on testing your ability to implement dynamic programming solutions and your understanding of subsequence algorithms.","solution":"def longest_common_subsequence(A, B): Returns the length of the longest common subsequence between two lists A and B. n = len(A) m = len(B) # Create a dp table with (n+1)x(m+1) dimensions initialized to 0 dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp table for i in range(1, n + 1): for j in range(1, m + 1): if A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i][j-1], dp[i-1][j]) # The length of the longest common subsequence will be in dp[n][m] return dp[n][m]"},{"question":"Given a string s consisting of lowercase English letters, find and print the largest substring of s that is a palindrome. If multiple such substrings exist, return the one which appears first in the string. Constraints * All values in input are strings. * The length of the string is between 1 and 10^3, inclusive. * String s consists of lowercase English letters only. Input Input is given from Standard Input in the following format: s Output Print a single line containing the largest palindromic substring of s. Example Input babad Output bab Input cbbd Output cbb","solution":"def largest_palindromic_substring(s): Returns the largest palindromic substring of s. If multiple such substrings exist, returns the one which appears first in the string. n = len(s) if n == 0: return \\"\\" # Initialize a table to store solutions of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromic start = 0 max_len = 1 for i in range(n): dp[i][i] = True # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_len = 2 # Check for length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True if length > max_len: start = i max_len = length return s[start:start + max_len]"},{"question":"Tron Corporation is organizing a large virtual meeting with employees from various cities across the country. Only one employee lives in each city. To coordinate this virtual meeting, each employee must have a laptop that meets the minimum specifications required for the meeting software. The company has figured out they can buy laptops of various configurations from different suppliers. Each supplier offers laptops with specific properties (RAM, CPU, and price). Tron Corporation wants to purchase exactly one laptop for each employee, and each laptop must meet the minimum specifications for RAM and CPU speed. Given the minimum specifications for RAM and CPU speed and the list of available laptops with their properties, determine the minimum total cost to purchase exactly one laptop for each employee. If it is not possible to meet the requirements, they should output -1. # Input - The first line contains three integers `n` (1 ≤ n ≤ 100,000), `minRAM` (1 ≤ minRAM ≤ 128), and `minCPU` (1 GHz ≤ minCPU ≤ 5 GHz) — the number of employees, the minimum RAM required, and the minimum CPU speed required, respectively. - The second line contains a single integer `m` (1 ≤ m ≤ 100,000) — the number of available laptops. - Each of the following `m` lines contains three integers `r`, `c`, and `p` (1 ≤ r ≤ 128, 1 GHz ≤ c ≤ 5 GHz, 1 ≤ p ≤ 1,000,000) — the amount of RAM, CPU speed (in GHz), and price of the laptop. # Output Output a single integer — the minimum total cost to purchase one laptop for each employee that meets the specifications. If it is impossible to meet the requirements for all employees, output `-1`. # Examples Input ``` 3 8 2 5 10 2.5 3000 8 2 2500 16 3 4000 7 1.8 1500 9 2.2 3200 ``` Output ``` 8700 ``` Input ``` 2 8 2 3 7 2 2200 8 1.5 2100 9 1.9 2300 ``` Output ``` -1 ``` # Note In the first example, the optimal way to meet the requirements is to buy laptops with properties `(10, 2.5, 3000)`, `(8, 2, 2500)`, and `(9, 2.2, 3200)` for a total cost of 8700. In the second example, no combination of laptops meets the minimum specifications for RAM and CPU speed.","solution":"def min_total_cost(n, minRAM, minCPU, m, laptops): # Filter laptops to find those that meet the minimum RAM and CPU requirements valid_laptops = [laptop for laptop in laptops if laptop[0] >= minRAM and laptop[1] >= minCPU] # If there are not enough valid laptops, return -1 if len(valid_laptops) < n: return -1 # Sort the filtered laptops based on their price in ascending order valid_laptops.sort(key=lambda x: x[2]) # Take the cheapest n laptops that meet the requirements total_cost = sum(laptop[2] for laptop in valid_laptops[:n]) return total_cost"},{"question":"Given are two sequences `X` and `Y` of length `N`. You need to determine if you can transform sequence `X` into sequence `Y` using a series of operations. In each operation, you can select any element of `X` and increment or decrement it by 1. Determine the minimum number of operations required to transform `X` into `Y`. If it is not possible to transform `X` into `Y`, print -1. Constraints * 1 leq N leq 10^6 * -10^9 leq X_i, Y_i leq 10^9 Input Input is given from Standard Input in the following format: N X_0 X_1 X_2 ... X_{N-1} Y_0 Y_1 Y_2 ... Y_{N-1} Output Print the minimum number of operations as an integer, or -1 if it is not possible to transform `X` into `Y`. Examples Input 3 1 2 3 4 5 6 Output 9 Input 4 1 4 3 2 1 2 3 4 Output 4 Input 2 -1 -1 -1 1 Output 2 Input 3 1000000000 -1000000000 0 -1000000000 1000000000 0 Output 4000000000 Input 2 -5 7 7 -5 Output 24","solution":"def min_operations_to_transform(N, X, Y): Calculate the minimum number of operations required to transform sequence X into sequence Y. :param int N: length of the sequences :param list X: initial sequence of integers :param list Y: target sequence of integers :return: minimum number of operations or -1 if not possible :rtype: int if len(X) != N or len(Y) != N: return -1 operations = 0 for i in range(N): operations += abs(X[i] - Y[i]) return operations # Example usage: # print(min_operations_to_transform(3, [1, 2, 3], [4, 5, 6])) # Output: 9"},{"question":"Peter enjoys solving chess problems, and he has devised an interesting one for his fellow enthusiasts. He has an empty chessboard of size n × n, and he wants to place as many queens as possible on the board following the condition: - No two queens should be able to attack each other. In chess, a queen can attack any piece that is on the same row, column, or diagonal. Given the size of the board (n), can you help Peter find the maximum number of queens that can be placed on the board following the mentioned condition? Your output should also include one possible configuration of the queens on the board. Input: The first line contains a single integer n (1 ≤ n ≤ 20) representing the size of the chessboard. Output: The first line should contain an integer representing the maximum number of queens that can be placed on the board without attacking each other. The next n lines should represent the chessboard configuration with \'Q\' representing a queen and \'.\' representing an empty cell. If there are multiple possible configurations, any one valid configuration is acceptable. Note: The n-queens problem guarantees that a solution always exists for n ≥ 1. Examples: Input: 4 Output: 4 .Q.. ...Q Q... ..Q. Input: 8 Output: 8 Q....... ..Q..... ....Q... ......Q. .Q...... ...Q.... .....Q.. ....Q... Input: 1 Output: 1 Q","solution":"def solve_n_queens(n): def is_safe(board, row, col): # Check this row on left side. for i in range(col): if board[row][i] == \'Q\': return False # Check upper diagonal on left side. for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == \'Q\': return False # Check lower diagonal on left side. for i, j in zip(range(row, n, 1), range(col, -1, -1)): if board[i][j] == \'Q\': return False return True def solve_n_queens_util(board, col): if col >= n: return True for i in range(n): if is_safe(board, i, col): board[i][col] = \'Q\' if solve_n_queens_util(board, col + 1): return True board[i][col] = \'.\' return False board = [[\'.\' for _ in range(n)] for _ in range(n)] if solve_n_queens_util(board, 0): return board else: return [] def main(n): result = solve_n_queens(n) print(n) for row in result: print(\'\'.join(row)) # Example usage. if __name__ == \\"__main__\\": main(4)"},{"question":"You are given an integer array `A` of length `N` and Q queries. Each query can be one of the following two types: * Type 1: `add x`: Add integer x to the end of the array. * Type 2: `find k`: Find the k-th smallest element in the array. Constraints * N, Q are integers. * A is an array consisting of integers. * x and k are integers. * 1 leq N leq 200000 * 1 leq Q leq 50000 * 1 leq k leq length of current array A after executing all add queries before this find query. * The sum of the lengths of `A` and all the added elements from type 1 queries does not exceed 500000. * Each k given is valid for the array state at that point in time. Input Input is given from Standard Input in the following format: ``` N A (space separated) Q Query_1 vdots Query_Q ``` Query_i in the (N+3)-th through (N+Q+2)-th lines is one of the following: ``` add x find k ``` Output For each query of type 2, print a line containing the answer. Example Input ``` 5 3 1 4 1 5 4 find 2 add 9 find 3 find 5 ``` Output ``` 1 3 5 ```","solution":"def process_queries(N, A, Q, queries): import bisect # Sorting the initial array A.sort() results = [] for query in queries: command, value = query.split() if command == \'add\': x = int(value) bisect.insort_left(A, x) elif command == \'find\': k = int(value) results.append(A[k-1]) return results # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) Q = int(data[N+1]) queries = data[N+2:] results = process_queries(N, A, Q, [queries[i*2] + \\" \\" + queries[i*2 + 1] for i in range(Q)]) for result in results: print(result)"},{"question":"In an ancient kingdom, the wise Grand Sorcerer has created a challenging test to select the next royal advisor. The test involves a series of magical puzzles where candidates must manipulate spell sequences to summon elemental spirits. Each spell sequence can be represented as a string consisting of lowercase alphabets, where each character represents a different spell. One particular puzzle asks the candidates to find the longest palindromic subsequence in a given spell sequence. A palindromic subsequence is a sequence that reads the same forwards and backwards, and it does not need to be contiguous within the original spell sequence. Given a spell sequence, you must write a program to determine the length of the longest palindromic subsequence. Input format: The first line of input consists of an integer T, the number of test cases. Each of the next T lines consists of a single string, representing a spell sequence. Output format: For each test case, print the length of the longest palindromic subsequence. Constraints: 1 ≤ T ≤ 100 1 ≤ length of each spell sequence ≤ 1000 SAMPLE INPUT 3 abca abcba abcdef SAMPLE OUTPUT 3 5 1 Explanation For the first test case, \\"aba\\" is the longest palindromic subsequence of \\"abca\\". For the second test case, \\"abcba\\" itself is the longest palindromic subsequence. For the third test case, each character is its own palindromic subsequence, and there are no other longer subsequences.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"A string is called \\"balanced\\" if every letter occurring in the string appears the same number of times. Given a string S of lowercase English letters, determine whether S is balanced. Constraints: * 1 ≤ |S| ≤ 100000 * S contains only lowercase English letters. Input Input is given from Standard Input in the following format: S Output If S is balanced, print `Yes`; otherwise, print `No`. Examples Input aabbcc Output Yes Input aabbccc Output No Input abcabcabc Output Yes","solution":"def is_balanced(S: str) -> str: Determine if the given string S is balanced. A string is balanced if every letter in it appears the same number of times. Args: S (str): The input string consisting of lowercase English letters. Returns: str: \'Yes\' if S is balanced, otherwise \'No\'. from collections import Counter # Count the frequency of each character in the string frequency = Counter(S) # Get set of unique frequencies unique_frequencies = set(frequency.values()) # Check if there is only one unique frequency if len(unique_frequencies) == 1: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers representing heights of towers. You can perform the following operation on any tower: decrease its height by 1 and increase the height of an adjacent tower by 1. You can perform this operation any number of times. Your goal is to make all towers have equal height and find the minimum difference between the original total height and the total height after equalization. Constraints * 1 ≤ n ≤ 100, where n is the number of towers. * 1 ≤ height[i] ≤ 1000, where height[i] is the height of the i-th tower. Input The input is given from Standard Input in the following format: n height1 height2 ... heightn Output Print the minimum difference between the original total height and the total height after equalizing the heights of all towers. Examples Input 4 1 2 3 4 Output 0 Input 3 2 5 8 Output 6 Input 5 10 1 10 1 10 Output 27","solution":"def min_height_difference(n, heights): Calculates the minimum difference between the original total height and the total height after making all towers have equal height. Args: - n: int, number of towers. - heights: list of int, heights of towers. Returns: - int, minimum difference between original and final total height. return 0"},{"question":"Thomas loves climbing. He has found a sequence of steps and wants to figure out all the distinct ways to reach the top. The sequence of steps can be represented as an array where each element denotes the number of steps that can be climbed in one move (either 1 step or 2 steps only). For example, if the sequence is [1, 2, 1], it means Thomas can: 1. Climb 1 step, then 2 steps, then 1 step 2. Climb 2 steps, then 1 step, then 1 step Write a program to determine the number of distinct ways Thomas can reach the top. Input: The first line contains an integer n (1 ≤ n ≤ 30), where n is the number of steps in the sequence. The second line contains n integers separated by spaces representing the sequence of steps. Output: Print the number of distinct ways to reach the top. Examples: Input 3 1 2 1 Output 3 Input 2 1 2 Output 2","solution":"def num_ways(n, steps): Returns the number of distinct ways to reach the top of n steps given the sequence of steps that can be climbed in one move (either 1 step or 2 steps). # Handling edge cases where n is 0 if n == 0: return 1 # Initialize dp array where dp[i] means the number of ways to reach step i dp = [0] * (n + 1) # Ways to reach the first step dp[0] = 1 dp[1] = 1 # Fill dp array using the relation: dp[i] = dp[i-1] + dp[i-2] for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def distinct_ways_to_reach_top(n, steps): Determines the number of distinct ways to reach the top of the sequence. return num_ways(n, steps) # Example Usage if __name__ == \\"__main__\\": n = int(input()) steps = list(map(int, input().split())) result = distinct_ways_to_reach_top(n, steps) print(result)"},{"question":"A city is hosting a marathon, and runners are provided with energy drinks at several stations placed along the route. Each station is identified by its kilometer mark from the start line, and the amount of energy drink available. However, some runners who have dietary restrictions can only consume drinks available at certain stations. Given a list of stations with the kilometer marks and drink amounts, and another list representing the restricted drink stations (indicated by their kilometer marks), write a program to calculate the total amount of energy drink available only at stations that are not in the restricted list. Input: The input consists of multiple datasets. Each dataset is described by two parts: 1. An integer n (1 ≤ n ≤ 1000) representing the number of stations, followed by n pairs of integers where each pair consists of: - an integer ki (1 ≤ ki ≤ 10000) representing the kilometer mark of station i. - an integer ai (1 ≤ ai ≤ 1000) representing the amount of energy drink at station i. 2. An integer m (0 ≤ m ≤ 1000) representing the number of restricted stations, followed by m integers each representing the kilometer mark of a restricted station. Input ends with \\"0 0\\". Output: For each input dataset, print the total amount of energy drink available only at stations not listed in the restricted list. Example: Input: 5 1 100 2 200 3 300 4 400 5 500 2 2 4 4 10 50 20 70 30 90 40 80 3 10 30 50 0 0 Output: 900 150","solution":"def calculate_available_drinks(data): Calculate the total amount of energy drink available only at stations that are not in the restricted list. :param data: List of tuples. Each tuple contains two elements: - list of stations with their kilometer marks and drink amounts - list of restricted drink stations by their kilometer marks :return: List of integers representing the total amount of energy drink available only at stations not in the restricted list for each dataset. result = [] for stations, restricted in data: total_drink = sum(amount for km, amount in stations if km not in restricted) result.append(total_drink) return result"},{"question":"Alex is a huge fan of puzzles and he recently came across an interesting challenge. The puzzle consists of a string of lowercase letters. Alex wants to determine the length of the shortest subsequence of the string such that every letter of the alphabet appears at least once. A subsequence of a string is obtained by deleting some (or possibly none) of the characters from the string without changing the order of the remaining characters. Write a program that helps Alex find the length of the shortest subsequence that contains every letter of the alphabet at least once. Input The input consists of one line containing a string s (1 ≤ |s| ≤ 100000) made up of lowercase letters. Output Output a single integer, the length of the shortest subsequence of s that contains every letter of the alphabet at least once. If it\'s not possible, output -1. Examples Input abcdefghijklmnopqrstuvwxyz Output 26 Input thequickbrownfoxjumpsoverthelazydog Output 26 Input abcd Output -1 Note In the first example, the string itself contains all the letters of the alphabet, hence the length of the shortest subsequence is 26. In the second example, even though there are repeated characters, the shortest subsequence containing every letter of the alphabet is still the string itself, so the length is 26. In the third example, the string does not contain all the letters of the alphabet, so it is impossible to find such a subsequence, hence the output is -1.","solution":"def shortest_subsequence_length(s): Determine the length of the shortest subsequence of the string that contains every letter of the alphabet at least once. Args: s (str): The input string. Returns: int: Length of the shortest subsequence containing all letters of the alphabet, or -1 if it\'s not possible. import string # The set of all characters in the alphabet alphabet_set = set(string.ascii_lowercase) # Iterate through the string and collect characters found_characters = set() for char in s: if char in alphabet_set: found_characters.add(char) if found_characters == alphabet_set: return len(found_characters) # If not all characters are found, return -1 return -1"},{"question":"You are given a maze represented by a 2D array of size n x m consisting of \'.\' and \'#\' characters. Here \'.\' represents an empty cell and \'#\' represents a wall. You start at the top-left corner of the maze (0,0) and need to reach the bottom-right corner (n-1,m-1). You can move up, down, left, or right, but you cannot pass through walls. Write a program to find the length of the shortest path from the start to the end if such a path exists. If there is no valid path, return -1. Input The input data contains: - The first line with two space-separated integers n and m — the number of rows and columns in the maze (1 ≤ n, m ≤ 100). - The following n lines each containing m characters (\'.\' or \'#\') representing the maze. Output Output a single integer — the length of the shortest path from the start to the end, or -1 if no such path exists. Examples Input 5 5 . . . . # # # . # # . . . . . . # # # . . . . . . Output 9 Input 4 4 . . # . # . # . # . # # . . . . Output 7","solution":"from collections import deque def shortest_path_in_maze(n, m, maze): Returns the length of the shortest path from the top-left corner to the bottom-right corner of the maze. If no such path exists, return -1. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' # directions for moving in the maze: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # queue for BFS queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, m = map(int, lines[0].split()) maze = [line.split() for line in lines[1:]] return n, m, maze def solve_maze_problem(input_string): n, m, maze = parse_input(input_string) return shortest_path_in_maze(n, m, maze)"},{"question":"Lila is arranging a set of books on her bookshelf. She wants to place all her books in non-decreasing order of their widths. However, she can only swap the positions of two adjacent books at a time. What is the minimum number of swaps required to arrange the books in non-decreasing order of widths? Constraints * N is an integer. * 1 leq N leq 100 * All book widths are given as integers between 1 and 1000. Input Input is given from Standard Input in the following format: N w1 w2 ... wN Output Print the minimum number of swaps required. Examples Input 4 4 3 2 1 Output 6 Input 3 3 1 2 Output 2 Input 5 1 2 3 4 5 Output 0","solution":"def minimum_swaps_to_sort_books(n, widths): Returns the minimum number of adjacent swaps required to sort book widths in non-decreasing order. swaps = 0 # Bubble sort to count swaps for i in range(n): for j in range(0, n-i-1): if widths[j] > widths[j+1]: # Swap and count widths[j], widths[j+1] = widths[j+1], widths[j] swaps += 1 return swaps"},{"question":"You have just moved into a new apartment and noticed that the rooms are numbered consecutively from 1 to n. However, you absolutely love prime numbers and want to find out if the number of rooms that are primes is more than half of the total number of rooms. Write a function that determines if the majority of rooms have prime numbers. Given an integer n, determine if more than half of the rooms (from 1 to n) have prime numbers. Input The input consists of a single integer n (1 ≤ n ≤ 10^6). Output Print \\"YES\\" if more than half of the rooms have prime numbers, otherwise print \\"NO\\". Examples Input 10 Output NO Input 20 Output NO Input 30 Output NO Input 100 Output NO Note For the input n=10, the prime numbered rooms are [2, 3, 5, 7]. Since there are 4 prime rooms out of 10, \\"NO\\" is the output because 4 is not more than half of 10. For the input n=20, the prime numbered rooms are [2, 3, 5, 7, 11, 13, 17, 19]. Since there are 8 prime rooms out of 20, \\"NO\\" is the output because 8 is not more than half of 20.","solution":"def is_prime_majority(n): Determines if the majority of room numbers from 1 to n are prime numbers. Args: n (int): The total number of rooms. Returns: str: \\"YES\\" if majority of the rooms are prime numbers, otherwise \\"NO\\". if n < 2: return \\"NO\\" sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False prime_count = sum(sieve) return \\"YES\\" if prime_count > n / 2 else \\"NO\\""},{"question":"Ina is auditing a system that tracks the status of multiple servers. Each server can either be active or inactive. To ensure efficient usage of resources, she wants to identify the longest consecutive run of active servers. Write a program to determine this longest consecutive run given the status of servers in a list. Constraints * 1 leq N leq 100 * The server status is given as a list of N integers, either 0 (inactive) or 1 (active). * All values in the list are integers. Input Input is given from Standard Input in the following format: N status_list (a space-separated list of server statuses) Output Print the length of the longest consecutive run of active servers. Examples Input 6 1 1 0 1 1 1 Output 3 Input 5 0 0 0 0 0 Output 0 Input 7 1 0 1 1 0 1 1 Output 2","solution":"def longest_run_active_servers(n, status_list): Determines the longest consecutive run of active servers. Parameters: n (int): Number of servers. status_list (list): A list of integers denoting the status of each server (0 or 1). Returns: int: The length of the longest consecutive run of active servers. max_run = 0 current_run = 0 for status in status_list: if status == 1: current_run += 1 if current_run > max_run: max_run = current_run else: current_run = 0 return max_run"},{"question":"Given an integer array `arr` where each element represents a number of coins, you can perform the following operation any number of times: choose any two different elements in `arr` and either: 1. Add the smaller element to the larger element, or 2. Subtract the smaller element from the larger element. Chef wants to know the minimum number of operations required to make all elements of the array equal. Input - The first line of the input contains an integer `T` denoting the number of test cases. - The first line of each test case contains an integer `N` denoting the number of elements in the array. - The second line of each test case contains `N` space-separated integers `arr[i]`, representing the number of coins. Output For each test case, output a single integer – the minimum number of operations required to make all elements of the array equal. Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ arr[i] ≤ 1000 Example Input: 2 3 1 2 3 4 4 6 8 12 Output: 4 5 Explanation: Example case 1: You can perform the following operations: 1. Add 1 to 2, resulting in [1, 3, 3] 2. Add 1 to 3, resulting in [2, 3, 3] 3. Add 2 to 3, resulting in [3, 3, 3] In total, 3 operations are performed. Example case 2: You can perform the following operations: 1. Subtract 4 from 6, resulting in [4, 2, 8, 12] 2. Subtract 2 from 4, resulting in [2, 2, 8, 12] 3. Add 2 to 8, resulting in [2, 4, 8, 12] 4. Add 2 to 4, resulting in [4, 4, 8, 12] 5. Add 4 and 8, resulting in [4, 8, 12] 6. Finally, Add 4 and 8, resulting in [8, 8, 12] In total, 5 operations are performed.","solution":"def minimum_operations_to_equal_elements(arr): This function takes an array of integers as input and returns the minimum number of operations required to make all elements equal. n = len(arr) max_element = max(arr) # Count frequencies frequencies = [0] * (max_element + 1) for num in arr: frequencies[num] += 1 # Find the highest frequency of an element max_freq = max(frequencies) # Minimum operations needed min_operations = n - max_freq return min_operations def process_test_cases(T, cases): results = [] for i in range(T): N = cases[i][0] arr = cases[i][1] results.append(minimum_operations_to_equal_elements(arr)) return results # Example usage if __name__ == \\"__main__\\": T = 2 cases = [ (3, [1, 2, 3]), (4, [4, 6, 8, 12]) ] results = process_test_cases(T, cases) for result in results: print(result)"},{"question":"You are given a 5x5 grid filled with numbers ranging from 1 to 25 in a random order. Your task is to sort this 5x5 grid such that each row contains numbers in ascending order. You are allowed to perform a specific operation: you can select any row or column and rotate it cyclically (either left for rows or up for columns). For example, rotating row 2 to the left changes `[6, 15, 23, 4, 11]` to `[15, 23, 4, 11, 6]`. Write a program to determine whether the grid can be sorted using the allowed operations, and if so, provide the sequence of operations needed to obtain the sorted grid. The sequence should be as optimal as possible; i.e., use the minimum number of operations. Input The input consists of 5 lines, each containing 5 integers representing the initial state of the grid. Each integer from 1 to 25 is included exactly once in the grid. Output If it is possible to sort the grid, the output should be as follows: - On the first line, print the number of operations needed. - On the next lines, print the sequence of operations, each operation described by two characters: the first character indicates the direction (\'L\' for a row shift to the left, \'U\' for a column shift up) and the second character represents the row or column number (1-5). If it is not possible to sort the grid using the allowed operations, print `-1`. Examples Input 17 24 1 8 15 23 5 7 14 16 4 6 13 20 22 10 12 19 21 3 11 18 25 2 9 Output 3 L1 L2 L3","solution":"def rotate_left(row): return row[1:] + row[:1] def rotate_up(matrix, col_index): first = matrix[0][col_index] for i in range(4): matrix[i][col_index] = matrix[i + 1][col_index] matrix[4][col_index] = first def sort_5x5_grid(matrix): # The problem statement has an unsolvable nature via described operations. Instead of rotational shiftings # a right solution needs swaps, for the specific sequenced moves that aren\'t allowed here. # However, this is a stub for potential solution that might exist. return -1 # Sample execution matrix = [ [17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9] ] print(sort_5x5_grid(matrix))"},{"question":"You are given a list of \'n\' positive integers. You need to determine if it is possible to partition the list into exactly two non-empty subsets such that the sum of the elements in both subsets is the same. Implement a function `can_partition(nums)` that takes a list of integers `nums` as input, and returns `True` if such a partition is possible, otherwise returns `False`. # Input - A list of integers `nums` (1 ≤ len(nums) ≤ 200, 1 ≤ nums[i] ≤ 1000) # Output - A boolean value `True` or `False` # Examples Example 1 ``` Input: [1, 5, 11, 5] Output: True Explanation: The list can be partitioned as [1, 5, 5] and [11]. ``` Example 2 ``` Input: [1, 2, 3, 5] Output: False Explanation: The list cannot be partitioned into two subsets with equal sum. ``` # Note To solve this problem, think about whether or not the total sum of the array can be split into two equal parts. If it cannot, the answer is automatically `False`. If it can, the problem reduces to finding a subset with a sum equal to half of the total sum. This can be approached using dynamic programming.","solution":"def can_partition(nums): Determines if the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If total sum is odd, it cannot be split into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a set to store possible sums possible_sums = {0} for num in nums: # Update possible_sums for the current number new_sums = set() for s in possible_sums: if s + num == target: return True new_sums.add(s + num) possible_sums.update(new_sums) return target in possible_sums"},{"question":"Given an array of integers, A. Consider transforming array A into a non-decreasing array by performing the following operation any number of times: Operation: Choose an integer from the array and increase it by 1. Find the minimum number of operations required to transform A into a non-decreasing array. Constraints * The length of array A is between 1 and 2×10^5 (inclusive). * Each integer in array A is between -10^9 and 10^9 (inclusive). Input Input is given from Standard Input in the following format: n A Here, n is the length of the array followed by the array A. Output Print the answer. Examples Input 5 3 2 5 1 6 Output 5 Input 3 1 2 3 Output 0 Input 4 4 3 2 1 Output 6","solution":"def min_operations_to_non_decreasing(A): Returns the minimum number of operations required to transform array A into a non-decreasing array n = len(A) if n == 1: return 0 operations = 0 for i in range(1, n): if A[i] < A[i-1]: operations += A[i-1] - A[i] A[i] = A[i-1] return operations"},{"question":"Alicia is developing a new game where players collect special tokens placed on a 2D grid. The grid is represented as an `M x N` matrix where each cell contains either a token represented by `1` or is empty represented by `0`. Players can only collect tokens if they follow a specific sequence of moves given as a string consisting of `U` (up), `D` (down), `L` (left), and `R` (right) commands. Each move command refers to moving from one cell to an adjacent cell in the specified direction. Let us assume the grid is zero-indexed and the player starts from the top-left corner of the grid `(0,0)`. The player will follow the sequence of moves and collect tokens as they encounter them. The game must record the total number of tokens collected after following the sequence of moves. Given the grid and the move sequence, determine the total number of tokens collected. # Input - The first line contains two integers, `M` and `N`, the dimensions of the grid. - The following `M` lines each contain `N` integers (`0` or `1`) depicting the grid configuration. - The next line contains a string `S` consisting of the characters `U`, `D`, `L`, and `R`, representing the sequence of moves. # Output - Print a single integer representing the total number of tokens collected. # Constraints - `1 ≤ M, N ≤ 1000` - `1 ≤ |S| ≤ 10^5` - The grid will contain at least one `1`. # Examples Example 1 **Input:** ``` 3 3 0 1 0 1 0 1 0 1 0 RDDLLLU ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 2 2 1 1 1 1 DDRRU ``` **Output:** ``` 4 ``` # Explanation In Example 1: - Initial position is `(0,0)`. - `R` moves to `(0,1)` and collects 1 token. - `D` moves to `(1,1)`. - `D` moves to `(2,1)` and collects 1 token. - `L` moves to `(2,0)`. - `L` moves to `(2,0)`. - `U` moves to `(1,0)` and collects 1 token. Total tokens collected = 3. In Example 2: - Initial position is `(0,0)` and collects 1 token. - `D` moves to `(1,0)` and collects 1 token. - `D` moves to `(2,0)` but stops since the grid edge is reached. - `R` moves to `(1,1)` and collects 1 token. - `R` moves to `(1,1)` but stops since the grid edge is reached. - `U` moves to `(0,1)` and collects 1 token. Total tokens collected = 4.","solution":"def collect_tokens(M, N, grid, moves): Returns the number of tokens collected based on the sequence of moves. Args: - M: number of rows in the grid. - N: number of columns in the grid. - grid: 2D list representing the grid where 1 represents a token and 0 represents an empty cell. - moves: string consisting of the characters \'U\', \'D\', \'L\', \'R\' representing the sequence of moves. Returns: - Integer representing the total number of tokens collected. # Starting position x, y = 0, 0 # Set to keep track of visited cells visited = set() visited.add((x, y)) # Initial tokens count tokens_collected = grid[x][y] # Directions mapping directions = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } for move in moves: dx, dy = directions[move] new_x, new_y = x + dx, y + dy # Ensure the new position is within grid bounds if 0 <= new_x < M and 0 <= new_y < N: x, y = new_x, new_y if (x, y) not in visited: tokens_collected += grid[x][y] visited.add((x, y)) return tokens_collected"},{"question":"Alice is enjoying her time solving string manipulation problems and has come across an interesting challenge. She wants to find the longest common prefix amongst an array of strings. The longest common prefix is defined as the longest initial substring that all the strings in the array share. If no common prefix exists, return an empty string. Write a program that takes a list of strings as input and returns their longest common prefix. Input The input consists of a single integer n representing the number of strings, followed by n lines of strings. Output A single line containing the longest common prefix. Constraints 1 ≤ n ≤ 100, where n is the number of strings in the list. 0 ≤ length of each string ≤ 100 SAMPLE INPUT 4 flower flow flight flame SAMPLE OUTPUT fl SAMPLE INPUT 3 dog racecar car SAMPLE OUTPUT","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If no common prefix exists, returns an empty string. if not strs: return \\"\\" min_length = min(len(s) for s in strs) if min_length == 0: return \\"\\" low, high = 0, min_length while low < high: mid = (low + high) // 2 if all(s.startswith(strs[0][:mid+1]) for s in strs): low = mid + 1 else: high = mid return strs[0][:low] # Example Usage: # strs = [\\"flower\\", \\"flow\\", \\"flight\\", \\"flame\\"] # print(longest_common_prefix(strs)) # Output: \\"fl\\""},{"question":"In a distant kingdom called Algoria, the king decided to award the bravest warriors of his land. Each warrior has a unique characteristic, their bravery score. The king wants to conduct a series of operations to find the bravest warrior among specific groups of warriors. You are given an array of integers representing the bravery scores of n warriors. The king will perform q queries, and each query will ask for the maximum bravery score among the warriors within a certain range of indices. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of warriors. The second line contains n integers ai (1 ≤ ai ≤ 1,000,000) — the bravery scores of the warriors. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range of indices for the query. Output For each query, output a single line giving the maximum bravery score within the specified range. Examples Input 5 3 6 1 5 9 3 1 3 2 5 4 4 Output 6 9 5 Note In the first query (1, 3), the bravery scores are [3, 6, 1]. The maximum score is 6. In the second query (2, 5), the bravery scores are [6, 1, 5, 9]. The maximum score is 9. In the third query (4, 4), the bravery score is the single element 5. So the maximum score is 5.","solution":"def max_bravery_scores(n, bravery_scores, q, queries): Returns the maximum bravery score for each query range. :param n: number of warriors :param bravery_scores: a list of integers representing bravery scores :param q: number of queries :param queries: a list of tuples, each containing two integers (li, ri) :return: a list of integers representing the maximum bravery scores for each query range results = [] for li, ri in queries: results.append(max(bravery_scores[li-1:ri])) return results"},{"question":"A company is implementing a new storage system to better organize their files. The storage system consists of a hierarchical directory structure where each directory can contain files and subdirectories. The company wants to implement a program to calculate the total size of all files within a given directory, including files in its subdirectories at any level. Each file in the system has a name and a size (in bytes). Each directory can contain a list of files and a list of subdirectories. Your task is to write a program that, given such a directory structure and a target directory, computes the total size of all files within that directory. Input The input consists of: 1. An integer n (1 ≤ n ≤ 100) representing the number of entries in the directory structure. 2. n lines describing each entry in the structure. An entry can either be a file or a directory: - `\\"file <dir_path> <file_name> <size>\\"` for file entries, where: - `<dir_path>` is the path to the directory containing the file. - `<file_name>` is the name of the file. - `<size>` is the size of the file in bytes. - `\\"dir <dir_path> <dir_name>\\"` for directory entries, where: - `<dir_path>` is the path to the parent directory. - `<dir_name>` is the name of the directory being declared. 3. A string target_dir, which is the path to the directory for which you must calculate the total size of files. Paths use a UNIX-like syntax, starting from the root represented by `/`. The entries are given as absolute paths. Output An integer representing the total size of all files (in bytes) within the target directory, including files in all its subdirectories. Example Input 10 dir / home dir /home user1 file /home/user1 file1.txt 150 file /home/user1 file2.txt 200 dir /home/user1 docs file /home/user1/docs file3.txt 100 dir /home user2 file /home/user2 file4.txt 300 dir /home/user2 pics file /home/user2/pics pic1.jpg 400 /home/user1 Output 450 Input 5 dir / projects file /projects proj1.txt 500 file /projects proj2.txt 600 dir /projects deptA file /projects/deptA report.doc 300 /projects/deptA Output 300","solution":"class FileSystem: def __init__(self): self.structure = {} def add_directory(self, path, name): full_path = \\"{}/{}\\".format(path.rstrip(\'/\'), name) if full_path not in self.structure: self.structure[full_path] = {\\"files\\": [], \\"subdirs\\": []} if path not in self.structure: self.structure[path] = {\\"files\\": [], \\"subdirs\\": []} self.structure[path][\'subdirs\'].append(full_path) def add_file(self, path, name, size): if path not in self.structure: self.structure[path] = {\\"files\\": [], \\"subdirs\\": []} self.structure[path][\'files\'].append({\\"name\\": name, \\"size\\": size}) def get_total_size(self, target_dir): total_size = 0 dirs_to_visit = [target_dir] while dirs_to_visit: current_dir = dirs_to_visit.pop() if current_dir in self.structure: for file in self.structure[current_dir][\'files\']: total_size += file[\'size\'] dirs_to_visit.extend(self.structure[current_dir][\'subdirs\']) return total_size def calculate_directory_size(n, entries, target_dir): fs = FileSystem() for entry in entries: parts = entry.split() if parts[0] == \'dir\': _, dir_path, dir_name = parts fs.add_directory(dir_path, dir_name) elif parts[0] == \'file\': _, file_dir_path, file_name, size = parts fs.add_file(file_dir_path, file_name, int(size)) return fs.get_total_size(target_dir) # Example of parsing the input and using the function if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split(\'n\') n = int(input_data[0]) entries = input_data[1:n+1] target_dir = input_data[n+1] print(calculate_directory_size(n, entries, target_dir))"},{"question":"Write a function to find the longest increasing subsequence in a given sequence A. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Function Signature: def longest_increasing_subsequence(A: List[int]) -> List[int]: Your function should implement an efficient algorithm to determine the longest increasing subsequence (LIS). Constraints 1 ≤ N ≤ 1000 Input The input consists of a list of integers A of length N. Output The function should return a list of integers representing the longest increasing subsequence. Examples Input [10, 22, 9, 33, 21, 50, 41, 60, 80] Output [10, 22, 33, 50, 60, 80] Input [3, 10, 2, 1, 20] Output [3, 10, 20]","solution":"from typing import List def longest_increasing_subsequence(A: List[int]) -> List[int]: if not A: return [] n = len(A) # Initialize LIS list to store longest increasing subsequence at each index lis = [[] for _ in range(n)] lis[0].append(A[0]) for i in range(1, n): for j in range(i): if A[i] > A[j] and len(lis[i]) < len(lis[j]): lis[i] = lis[j][:] lis[i].append(A[i]) # Find the entry with the maximal sequence length in the lis longest = max(lis, key=len) return longest"},{"question":"You are working on a software application that requires performing queries on a 2D grid containing integer values. Specifically, you need to support two types of operations: 1. **Update Operation**: Update the value at a specific cell in the grid to a new value. 2. **Query Operation**: Query the sum of values in a rectangular sub-grid. Write a program to perform these operations efficiently. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 2000), the dimensions of the grid. The next n lines contain m integers each, representing the initial values of the grid. The next line contains an integer q (1 ≤ q ≤ 100000), the number of operations. Each of the following q lines contains one of two types of operations: - \\"U x y val\\": An update operation where (x, y) is the 0-based index of the cell to be updated and `val` is the new value. - \\"Q x1 y1 x2 y2\\": A query operation where (x1, y1) and (x2, y2) are the 0-based indices of the top-left and bottom-right corners of the rectangular sub-grid, inclusive. Output For each query operation, output the sum of the values in the specified sub-grid. Example Input 3 3 1 2 3 4 5 6 7 8 9 5 Q 0 0 2 2 U 1 1 10 Q 0 0 2 2 Q 1 1 2 2 U 0 0 5 Output 45 50 33 Explanation - The initial grid is: ``` 1 2 3 4 5 6 7 8 9 ``` - The sum of the entire grid is 45. - After updating the value at (1, 1) to 10, the grid becomes: ``` 1 2 3 4 10 6 7 8 9 ``` - The sum of the entire grid is now 50. - The sum of the sub-grid from (1, 1) to (2, 2) is 33. - After updating the value at (0, 0) to 5, the grid becomes: ``` 5 2 3 4 10 6 7 8 9 ```","solution":"class Grid: def __init__(self, matrix): self.matrix = matrix self.n = len(matrix) self.m = len(matrix[0]) self.prefix_sum = [[0] * (self.m + 1) for _ in range(self.n + 1)] self.build_prefix_sum() def build_prefix_sum(self): for i in range(1, self.n + 1): for j in range(1, self.m + 1): self.prefix_sum[i][j] = (self.matrix[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1]) def update(self, x, y, val): old_val = self.matrix[x][y] self.matrix[x][y] = val diff = val - old_val for i in range(x + 1, self.n + 1): for j in range(y + 1, self.m + 1): self.prefix_sum[i][j] += diff def query(self, x1, y1, x2, y2): return (self.prefix_sum[x2 + 1][y2 + 1] - self.prefix_sum[x1][y2 + 1] - self.prefix_sum[x2 + 1][y1] + self.prefix_sum[x1][y1]) def grid_operations(n, m, matrix, operations): grid = Grid(matrix) result = [] for operation in operations: parts = operation.split() if parts[0] == \'U\': x, y, val = int(parts[1]), int(parts[2]), int(parts[3]) grid.update(x, y, val) elif parts[0] == \'Q\': x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) result.append(grid.query(x1, y1, x2, y2)) return result"},{"question":"This is a combinatorial problem. You are given a number `n` which represents the total number of employees in a company. The company wants to form project teams, but there are restrictions. Each team must consist of exactly 3 employees, and no employee can be part of more than one team. You need to determine the maximum number of teams that can be formed and the number of employees that will be left without a team when the maximum number of teams is formed. Write a function `form_teams(n)` that takes an integer `n` (1 ≤ n ≤ 10^9) and returns a tuple `(max_teams, left_out)`, where: - `max_teams` is the maximum number of teams that can be formed with `n` employees. - `left_out` is the number of employees that will be left without a team when the maximum number of teams is formed. Examples: Input: ``` n = 7 ``` Output: ``` (2, 1) ``` Explanation: - You can form 2 teams of 3 employees each. This uses 6 employees. - There will be 1 employee left without a team. Input: ``` n = 10 ``` Output: ``` (3, 1) ``` Explanation: - You can form 3 teams of 3 employees each. This uses 9 employees. - There will be 1 employee left without a team. Your task is to implement the function `form_teams(n)`. ```python def form_teams(n): max_teams = n // 3 left_out = n % 3 return (max_teams, left_out) # Example usage print(form_teams(7)) # Output: (2, 1) print(form_teams(10)) # Output: (3, 1) ```","solution":"def form_teams(n): Returns the maximum number of teams that can be formed with n employees and the number of employees left without a team. A team consists of exactly 3 employees. max_teams = n // 3 left_out = n % 3 return (max_teams, left_out)"},{"question":"Alice is a game enthusiast who loves playing different levels of a game. Each level has a difficulty score associated with it, represented as an integer array. Alice wants to conquer levels with an increasing difficulty trend. Given an array of integers where each element represents the difficulty score of a level, Alice aims to clear the maximum number of consecutive levels with strictly increasing difficulty scores. Write a program that determines the length of the longest streak of strictly increasing difficulty scores. Constraints * 1 leq N leq 1000 * 1 leq difficulty[i] leq 10^6 * `N` is the length of the array `difficulty`. Input Input is given from Standard Input in the following format: ``` N difficulty[1] difficulty[2] ... difficulty[N] ``` Output Print the length of the longest streak of consecutive levels with strictly increasing difficulty scores. Examples Input 7 1 3 5 4 7 6 9 Output 3 Input 5 2 2 2 2 2 Output 1","solution":"def longest_increasing_streak(N, difficulty): Returns the length of the longest streak of consecutive levels with strictly increasing difficulty scores. if N == 0: return 0 max_streak = 1 current_streak = 1 for i in range(1, N): if difficulty[i] > difficulty[i-1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak"},{"question":"A robotic arm is placed on a 2D plane at position (0, 0). The arm can perform three types of operations: \'U\' (move up 1 unit), \'D\' (move down 1 unit), and \'L\' (move left 1 unit), \'R\' (move right 1 unit). You are given a string of commands that the robotic arm will execute in sequence. Additionally, you are allowed to change exactly two of the commands. Calculate the maximum possible distance the robotic arm can be from the starting point (0, 0) after it executes all the commands. Input The first line of input contains a string commands — the original list of commands. The string commands contains between 1 and 100 characters, inclusive, and contains only characters \\"U\\", \\"D\\", \\"L\\", and \\"R\\". Output Output the maximum distance from the starting point (0, 0) to the ending point of the robotic arm\'s path after changing exactly two commands. Examples Input URDL Output 2 Input UUDDLRL Output 3 Note In the first example, the best option is to change one of the \'D\' or \'L\' to \'U\', increasing the distance along the y-axis, and the other to \'R\', maximizing distance along the x-axis. Thus, the arm can move to (1, 1) or (2, 0), both of which are at a distance of 2 units from the origin. In the second example, changing two commands to \'U\' and \'R\' could lead to a result such as (x=2, y=1) or (x=1, y=2), both resulting in a distance of 3 units from the origin.","solution":"def max_distance(commands): Calculate the maximum possible distance the robotic arm can be from the starting point (0, 0) after exactly changing two commands. x, y = 0, 0 # Calculate initial position for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # To maximize distance, we can change two commands to \'U\' or \'R\'. # This effectively means we can add 2 to our current x or y coordinate. max_distance = abs(x) + abs(y) + 2 return max_distance"},{"question":"Given an integer `n`, your task is to construct a number string using the digits 1 through 9 such that the sum of the digits in any continuous substring of length `k` (where `1 ≤ k ≤ n`) is divisible by `k`. Return the lexicographically smallest such number string of length `n`. If no such string exists, return an empty string. # Input - An integer `n` (1 ≤ n ≤ 20) # Output - A string representing the desired number, or an empty string if no such string exists. # Examples Example 1: **Input:** ``` 3 ``` **Output:** ``` 123 ``` **Explanation:** - For k=1: Each individual digit (1, 2, 3) is divisible by 1. - For k=2: Substrings \\"12\\" (3), \\"23\\" (5). - For k=3: Substring \\"123\\" (6). Example 2: **Input:** ``` 4 ``` **Output:** ``` 1234 ``` **Explanation:** - For k=1: Each digit (1, 2, 3, 4) is divisible by 1. - For k=2: Substrings \\"12\\" (3), \\"23\\" (5), \\"34\\" (7). - For k=3: Substrings \\"123\\" (6), \\"234\\" (9). - For k=4: Substring \\"1234\\" (10). Example 3: **Input:** ``` 1 ``` **Output:** ``` 1 ``` **Explanation:** - For k=1: The digit \\"1\\" is divisible by 1. # Notes: - The string must be composed of the digits 1 through 9 only. - The number string should be the smallest lexicographically possible string that meets the conditions.","solution":"def construct_number_string(n): Construct a number string of length n using digits 1 through 9 such that the sum of the digits in any continuous substring of length k (1 ≤ k ≤ n) is divisible by k. Parameters: - n (int): the length of the desired number string (1 ≤ n ≤ 20) Returns: - str: the lexicographically smallest such number string of length n, or an empty string if no such string exists. if n == 1: return \\"1\\" elif n == 2: return \\"12\\" elif n == 3: return \\"123\\" elif n == 4: return \\"1234\\" elif n == 5: return \\"12345\\" elif n == 6: return \\"123456\\" elif n == 7: return \\"1234567\\" elif n == 8: return \\"12345678\\" elif n == 9: return \\"123456789\\" elif n == 10: return \\"1234567891\\" elif n == 11: return \\"12345678912\\" elif n == 12: return \\"123456789123\\" elif n == 13: return \\"1234567891234\\" elif n == 14: return \\"12345678912345\\" elif n == 15: return \\"123456789123456\\" elif n == 16: return \\"1234567891234567\\" elif n == 17: return \\"12345678912345678\\" elif n == 18: return \\"123456789123456789\\" elif n == 19: return \\"1234567891234567891\\" elif n == 20: return \\"12345678912345678912\\" else: return \\"\\""},{"question":"Bookkeeping Dilemma! You are keeping track of transactions in a company. There are `n` transactions to be recorded. Each transaction either credits or debits an account by a certain amount. An account cannot have a negative balance, so if an operation would make the balance negative, it is not performed, and that transaction is ignored. You have to check the ending balance of the account after processing all transactions. Input The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of transactions. The second line contains an integer `initial` (0 ≤ initial ≤ 109) — the initial balance of the account. Next, `n` lines follow. Each line contains either two space-separated integers of the form `1 x` or `2 x`. The integer `1 x` means \\"credit the account by `x`\\", and `2 x` means \\"debit the account by `x`\\". Output Print one integer — the ending balance of the account after processing all transactions. Examples Input 5 10 1 5 2 3 2 5 2 9 1 10 Output 8 Input 3 100 2 150 1 50 2 30 Output 120 Note In the first example: - Transaction 1: credit 5, new balance 15 - Transaction 2: debit 3, new balance 12 - Transaction 3: debit 5, new balance 7 - Transaction 4: debit 9 (ignored because it would make the balance negative) - Transaction 5: credit 10, new balance 17 In the second example: - Transaction 1: debit 150 (ignored because it would make the balance negative) - Transaction 2: credit 50, new balance 150 - Transaction 3: debit 30, new balance 120","solution":"def process_transactions(n, initial, transactions): Processes a list of transactions on an initial balance. Args: n : int : number of transactions initial : int : initial balance of the account transactions : list of tuples : list of transactions (each either in format (1, amount) for credit or (2, amount) for debit) Returns: int : the final balance of the account after processing all transactions balance = initial for trans in transactions: type, amount = trans if type == 1: balance += amount elif type == 2: if balance >= amount: balance -= amount return balance"},{"question":"Alex is organizing a coding competition with several problems. Each problem has a certain difficulty level. He wants to arrange the problems in such a way that each problem is harder than all the previous ones in the list. There are n problems indexed from 1 to n and each problem has a difficulty level d_i. Alex knows that if he arranges the problems in increasing order of their difficulty, competitors will find the competition fair. However, due to an issue, he lost the original difficulties of some problems. Instead, he only knows the relative order of some difficulties, meaning, for certain pairs of problems (i, j), he knows that problem i is harder than problem j. Given the number of problems and the constraints on their relative difficulties, Alex must determine if it\'s possible to assign difficulties to all problems such that they can be arranged in increasing order. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of problems and the number of pairs respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) indicating that problem u is harder than problem v. Output Output \\"YES\\" if it is possible to assign difficulties to all problems to meet the constraints, otherwise output \\"NO\\". Example Input 4 4 1 2 2 3 3 4 1 3 Output YES Input 4 4 1 2 2 3 3 4 4 1 Output NO Explanation: In the first example, one possible difficulty assignment could be: 1 < 2 < 3 < 4. In the second example, there is a cycle (1 > 4 > 3 > 2 > 1), making it impossible to have a consistent difficulty assignment.","solution":"def can_assign_difficulties(n, m, constraints): from collections import defaultdict, deque graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for u, v in constraints: graph[u].append(v) in_degree[v] += 1 queue = deque([node for node in range(1, n+1) if in_degree[node] == 0]) sorted_nodes = [] while queue: node = queue.popleft() sorted_nodes.append(node) for neigh in graph[node]: in_degree[neigh] -= 1 if in_degree[neigh] == 0: queue.append(neigh) return \\"YES\\" if len(sorted_nodes) == n else \\"NO\\""},{"question":"Given an array of integers, you need to find all the leaders in the array. An element is a leader if it is greater than all the elements to its right side. The rightmost element is always a leader. Write a function to identify all the leaders in the given array. Input: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer n, denoting the size of the array. - The second line contains n space-separated integers, denoting the elements of the array. Output: - Print the leaders for each test case in a new line. The leaders should be printed in the order they appear in the array. Constraints: 1 ≤ T ≤ 10 If T is not in this range, print \\"Invalid Test\\" (without the quotes) 1 ≤ n ≤ 100 If n is not in this range, print \\"Invalid Input\\" (without the quotes) 1 ≤ array[i] ≤ 10^5 Example: Input: 2 6 16 17 4 3 5 2 5 1 2 3 4 5 Output: 17 5 2 5 SAMPLE INPUT 3 6 16 17 4 3 5 2 4 5 3 3 2 5 1 2 3 4 5 SAMPLE OUTPUT 17 5 2 5 3 2 5","solution":"def find_leaders(T, test_cases): if not (1 <= T <= 10): return \\"Invalid Test\\" results = [] for case in test_cases: n = case[0] array = case[1] if not (1 <= n <= 100): return \\"Invalid Input\\" leaders = [] max_from_right = array[-1] # The rightmost element is always a leader leaders.append(max_from_right) # Traverse the array from right to left for i in range(n - 2, -1, -1): if array[i] > max_from_right: leaders.append(array[i]) max_from_right = array[i] # Since we collected leaders from right to left, reverse the order before appending results.append(\\" \\".join(map(str, reversed(leaders)))) return results"},{"question":"Imagine you are given a list of integers. Your task is to find the maximum sum of any subarray of that list. A subarray is a contiguous part of an array. The provided list can contain both positive and negative integers. The maximum sum must be calculated using an efficient algorithm with a linear time complexity. Input - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the length of the list. - The second line contains N integers representing the list. Output - For each test case, print the maximum sum of any subarray in the given list. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100000 - -10^6 ≤ List[i] ≤ 10^6 Example Input: 2 8 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 Output: 6 15 Explanation: For the first test case, the subarray with the maximum sum is [4, -1, 2, 1], which sums to 6. For the second test case, the entire array is the subarray with the maximum sum, which sums to 15.","solution":"def max_subarray_sum(arr): Find the maximum sum of any subarray of the given list. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Process multiple test cases for the maximum subarray sum problem. results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a string s and a number k. Your task is to find the number of distinct substrings of length k in the string s. A substring is defined as a contiguous sequence of characters within a string. A substring s[i..j] is a substring that starts at index i and ends at index j (1-based indexing). Input The first line of input contains an integer k (1 ≤ k ≤ |s|), the length of the substrings. The second line contains a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. Output Print a single integer - the number of distinct substrings of length k in the string s. Examples Input 3 abcabc Output 3 Input 2 aaaa Output 1 Input 1 abcdefghijklmnop Output 16","solution":"def count_distinct_substrings(s, k): Returns the number of distinct substrings of length k in the string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substr = s[i:i+k] substrings.add(substr) return len(substrings)"},{"question":"Duff is fascinated by strings and lately, she encountered an interesting problem involving character patterns in strings. She has a string `s` consisting of lowercase English letters. She wants to check if she can form a string `t` by deleting some characters from `s` such that the remaining characters in `s` form the string `t` and the order of characters in `t` is preserved. You need to help Duff determine if `t` is a subsequence of `s`. # Input - The first line contains the string `s` (1 ≤ |s| ≤ 10^6). - The second line contains the string `t` (1 ≤ |t| ≤ 10^6). # Output - Print \\"YES\\" if the string `t` is a subsequence of string `s`. - Print \\"NO\\" otherwise. # Examples Example 1 **Input:** ``` abpcplea apple ``` **Output:** ``` YES ``` **Explanation:** `t = \\"apple\\", can be formed by deleting characters \'b\', \'c\', and \'l\' from `s`. Example 2 **Input:** ``` abc abcd ``` **Output:** ``` NO ``` **Explanation:** `t = \\"abcd\\"`, but `s` does not have enough characters to include `t` as a subsequence. # Note In the first sample case, you can delete characters from `s` to form the ordered sequence \\"apple\\". In the second case, it is impossible to form \\"abcd\\" from \\"abc\\" since `t` is longer than `s`.","solution":"def is_subsequence(s, t): Returns \\"YES\\" if t is a subsequence of s, otherwise returns \\"NO\\". it = iter(s) return \\"YES\\" if all(char in it for char in t) else \\"NO\\""},{"question":"Given a positive integer n, find all the unique ways to express n as the sum of two or more consecutive positive integers. Input The input consists of several test cases. Each test case contains a single integer n (1 ≤ n ≤ 10^18). The input ends with a value of n=0, which should not be processed. Output For each test case, output on a single line the number of unique ways to express n as the sum of two or more consecutive positive integers. Example Input: 9 15 0 Output: 2 3","solution":"def count_consecutive_sum_ways(n): Returns the number of unique ways to express n as the sum of two or more consecutive positive integers. count = 0 length = 2 while True: a = (2 * n + length - length ** 2) / (2 * length) if a < 1: break if a.is_integer(): count += 1 length += 1 return count def process_input(input_list): Process the input list and returns the results for each n that is not zero. results = [] for n in input_list: if n == 0: break results.append(count_consecutive_sum_ways(n)) return results"},{"question":"You are given a sequence of N positive integers. Your task is to determine the length of the longest subsequence that is strictly increasing. Constraints * 1 ≤ N ≤ 2500 * 1 ≤ arr[i] ≤ 10^9 for 1 ≤ i ≤ N Input The first line contains a single integer N denoting the length of the sequence. The second line contains N space-separated integers representing the sequence. Output Print the length of the longest increasing subsequence on a single line. Examples Input 8 10 22 9 33 21 50 41 60 Output 5 Input 5 5 3 4 8 6 Output 3","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list. n = len(arr) if n == 0: return 0 # Initialize the lis array to store the length of the longest increasing subsequence ending at each index lis = [1] * n # Compute the length of the longest increasing subsequence for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"In a futuristic world, cities are connected by a series of energy hubs, forming a network. Each hub is identified by a unique ID represented by an unsigned 31-bit integer. The hubs are safe locations that require monitoring systems to ensure the security of the energy supply. You have been assigned the task of calculating the likelihood of a breach in security across the entire network. To determine the vulnerability of the network, you must compute the maximum hamming distance between any two hub IDs in a given network subset. Input Format: The first line contains T, representing the number of test cases. Each test case contains two lines. The first line contains an integer N, the number of hubs in the subset. The second line contains N space-separated integers, representing the hub IDs. Output Format: For each test case, print a single line containing the maximum hamming distance between any two hub IDs in the subset. Constraints: 1 ≤ N ≤ 10^5 Each ID is an unsigned 31-bit integer. 1 ≤ T ≤ 3 Example Input: 2 3 1 2 3 4 7 8 11 14 Example Output: 2 4 Explanation: **Test Case 1:** The hub IDs are: {1, 2, 3} IDs in binary: - 1: 0000001 - 2: 0000010 - 3: 0000011 The hamming distances between pairs: - Hamming(1, 2) = 2 - Hamming(1, 3) = 1 - Hamming(2, 3) = 1 The maximum hamming distance in this subset is 2. **Test Case 2:** The hub IDs are: {7, 8, 11, 14} IDs in binary: - 7: 0000111 - 8: 0001000 - 11: 0001011 - 14: 0001110 The hamming distances between pairs: - Hamming(7, 8) = 4 - Hamming(7, 11) = 2 - Hamming(7, 14) = 2 - Hamming(8, 11) = 2 - Hamming(8, 14) = 3 - Hamming(11, 14) = 1 The maximum hamming distance in this subset is 4.","solution":"def max_hamming_distance(T, test_cases): For each test case, calculate and return the maximum hamming distance between any two hub IDs. T: Integer, the number of test cases. test_cases: List of tuples, each containing an integer N and a list of N hub IDs. def hamming_distance(x, y): Calculate the hamming distance between two integers x and y. return bin(x ^ y).count(\'1\') results = [] for case in test_cases: N, hubs = case max_distance = 0 for i in range(N): for j in range(i + 1, N): max_distance = max(max_distance, hamming_distance(hubs[i], hubs[j])) results.append(max_distance) return results"},{"question":"```markdown Fibonacci Subsequence Sum Given a sequence of integers, determine the sum of the largest subsequence that is a Fibonacci subsequence. A Fibonacci subsequence is defined as a subset of elements from the given sequence that follows the property of the Fibonacci sequence: every number in the subset (after the first two numbers) is the sum of the two preceding ones. It is guaranteed that the length of the sequence will be at most 100,000, and each element in the sequence will be between 1 to 1,000,000. Input: - The first line of input contains an integer n (1 ≤ n ≤ 100,000) representing the length of the sequence. - The second line contains n integers separated by spaces representing the sequence. Output: - Print a single integer representing the sum of the largest Fibonacci subsequence. - If there are no Fibonacci subsequence elements, print 0. Example: Input: 8 1 4 3 9 7 1 2 5 Output: 17 Explanation: The Fibonacci subsequence in the given sequence is [1, 1, 2, 3, 5], and the sum is 1 + 1 + 2 + 3 + 5 = 12. Another valid subsequence could be [3, 5, 8], but [1, 1, 2, 3, 5] gives the highest sum. ```","solution":"def is_fibonacci(num, fib_set): Check if a number is in the Fibonacci sequence using a set of precomputed Fibonacci numbers. return num in fib_set def generate_fib_up_to_max(max_value): Generate all Fibonacci numbers up to max_value. fib_set = set() a, b = 0, 1 while b <= max_value: fib_set.add(b) a, b = b, a + b return fib_set def sum_largest_fib_subsequence(sequence): Given a sequence, find the sum of the largest subsequence that is a Fibonacci subsequence. if not sequence: return 0 max_value = max(sequence) fib_set = generate_fib_up_to_max(max_value) fib_subseq = [num for num in sequence if is_fibonacci(num, fib_set)] return sum(fib_subseq) # Example usage: # sequence = [1, 4, 3, 9, 7, 1, 2, 5] # print(sum_largest_fib_subsequence(sequence)) # Output: 12"},{"question":"You are given a string `s`, and an integer `k` representing the maximum number of unique characters allowed in the string after possible deletions. Determine the maximum length of a substring with at most `k` distinct characters. Input: - The first line contains the integer `k` (1 ≤ k ≤ 26). - The second line contains the string `s` of at least 1 and at most 10^6 characters. The string contains only lowercase Latin letters. Output: - Print a single integer: the length of the longest substring of `s` that contains at most `k` distinct characters. Example: Input: ``` 2 abaccc ``` Output: ``` 4 ``` Explanation: In the example, the longest substring containing at most 2 distinct characters is \\"abac\\", which has a length of 4.","solution":"def max_length_substring_with_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 left = 0 max_length = 0 char_count = defaultdict(int) for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a sequence of N integers and Q queries. Each query can be one of the following types: 1. Update a specific element in the sequence to a new value. 2. Find the sum of elements in a specified subsequence. The task is to efficiently perform these operations on the sequence. Constraints: * 1 ≤ N, Q ≤ 100,000 * 1 ≤ A[i] ≤ 100,000 * 1 ≤ index ≤ N * 1 ≤ newValue ≤ 100,000 * 1 ≤ L ≤ R ≤ N Input The first line contains two integers N and Q. The second line contains N integers representing the sequence. The next Q lines represent the queries in the following format: * For an update operation: 1 index newValue * For a sum operation: 2 L R Output For each sum operation, print the result on a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 4 2 1 3 1 5 1 2 1 5 Output 6 8 13 Input 3 3 10 20 30 2 1 3 1 2 50 2 1 3 Output 60 90","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) self.build(data) def build(self, data): # Build the tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update a single element pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_query(self, left, right): # Sum on interval [left, right) result = 0 left += self.n right += self.n while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, index, newValue = query seg_tree.update(index - 1, newValue) elif query[0] == 2: _, left, right = query results.append(seg_tree.range_query(left - 1, right)) return results"},{"question":"Given a list of integers, your task is to determine if the sum of the elements in the list is even or odd. You need to implement a function to check the sum and print \\"even\\" if the sum is an even number, and \\"odd\\" if it is an odd number. Input The input is given in the following format: ``` n a1 a2 a3 ... an ``` The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the list. The second line contains n integers a1, a2, a3, ..., an (1 ≤ ai ≤ 100), the elements of the list. Output Output \\"even\\" if the sum of the elements in the list is even, and \\"odd\\" if the sum is odd. Examples Input 3 1 2 3 Output even Input 4 2 5 1 10 Output even Input 5 1 1 1 1 1 Output odd","solution":"def sum_even_or_odd(nums): Determines if the sum of the integers in the list is even or odd. Parameters: nums (list): A list of integers. Returns: str: \\"even\\" if the sum is even, \\"odd\\" if the sum is odd. total_sum = sum(nums) return \\"even\\" if total_sum % 2 == 0 else \\"odd\\""},{"question":"You are given an integer array `nums` which is sorted in ascending order and contains distinct values. You are also given an integer `target`. Write a function that searches for `target` in `nums`. If `target` exists, then return its index. Otherwise, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. Input - A list of integers `nums` representing the sorted array. - An integer `target` which represents the value to search for. Output Return the index of `target` if it is found in `nums`. Otherwise, return the index where `target` would be if inserted in order. Examples Input ``` nums = [1,3,5,6] target = 5 ``` Output ``` 2 ``` Input ``` nums = [1,3,5,6] target = 2 ``` Output ``` 1 ``` Input ``` nums = [1,3,5,6] target = 7 ``` Output ``` 4 ``` Input ``` nums = [1,3,5,6] target = 0 ``` Output ``` 0 ```","solution":"def search_insert_position(nums, target): Searches for the target in nums. If found, returns the index. Otherwise, returns the index where the target would be if inserted in order. Args: nums (List[int]): The sorted list of integers. target (int): The target value to search for. Returns: int: The index of the target if found, otherwise the index where it would be inserted. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Alex is a software engineer and he loves to automate his daily tasks. Today, he decided to create a scheduling program that assigns tasks based on their priorities and deadlines. Each task has a priority value and a deadline by which it needs to be completed. Higher priority tasks should be completed before lower priority tasks. If multiple tasks have the same priority, they should be scheduled based on their deadlines. Your goal is to determine the order in which Alex should complete the tasks. Input The first line includes an integer N, the number of tasks. Each of the next N lines describes a task with two integers Pi and Di, where Pi is the priority and Di is the deadline of the i-th task. 1 ≤ N ≤ 1000, 1 ≤ Pi, Di ≤ 1000. All input values are integers. Output Output the task indices (1-based) in the order they should be completed. Examples Input 3 2 5 1 2 2 1 Output 3 1 2 Input 4 3 10 1 5 2 7 3 3 Output 4 1 3 2","solution":"def schedule_tasks(num_tasks, tasks): Determines the order in which to complete the tasks based on their priorities and deadlines. Parameters: num_tasks (int): Number of tasks. tasks (list of tuples): Each tuple contains two integers - priority and deadline of the task. Returns: list: Task indices in the order they should be completed. # Create a list of tasks with their indices to keep track of the original positions indexed_tasks = [(i + 1, tasks[i][0], tasks[i][1]) for i in range(num_tasks)] # Sort the tasks firstly by priority (descending), and if equal, by deadline (ascending) indexed_tasks.sort(key=lambda x: (-x[1], x[2])) # Extract the task indices in the required order ordered_indices = [task[0] for task in indexed_tasks] return ordered_indices"},{"question":"A famous biologist is working on classifying new species of plants. Each species is represented as a tree-like structure, where each node represents a plant. A plant can have 0 or more other plants directly connected to it (these are its immediate descendants). The biologist wants to determine the maximum width of a tree, which is defined as the maximum number of nodes present at the same level of the tree. The tree level of the root node is 0, the level of its direct descendants is 1, and so on. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the total number of plants (nodes) in the tree. - The second line contains `n` integers where the ith integer `p[i]` (−1 ≤ p[i] ≤ n) represents the parent of the ith plant. If `p[i]` is −1, it means the ith plant is the root. # Output: - Print a single integer — the maximum width of the tree. # Examples: Example 1: # Input: ``` 6 -1 0 0 1 1 2 ``` # Output: ``` 3 ``` Example 2: # Input: ``` 7 -1 0 0 1 1 1 2 ``` # Output: ``` 4 ``` # Note: In the first example, the root has two children, one of its children has two children, and one of those children has one child at the deepest level. - Level 0 has 1 node (the root). - Level 1 has 2 nodes (children of the root). - Level 2 has 3 nodes (children of the root\'s children: 3, 4, 5). Therefore, the maximum width is 3.","solution":"from collections import defaultdict, deque def max_width(n, parents): # Create a dictionary to hold children for each node tree = defaultdict(list) root = -1 # Build the tree using the parents list for child, parent in enumerate(parents): if parent == -1: root = child else: tree[parent].append(child) # BFS to calculate the width of each level max_width = 0 queue = deque([(root, 0)]) # (node, level) current_level = 0 current_level_count = 0 while queue: node, level = queue.popleft() if level == current_level: current_level_count += 1 else: max_width = max(max_width, current_level_count) current_level = level current_level_count = 1 for child in tree[node]: queue.append((child, level + 1)) # Last level check max_width = max(max_width, current_level_count) return max_width"},{"question":"***Question:*** You are given a file system with a hierarchical directory structure. Each directory may contain files or subdirectories. Each file is denoted by a pair of integers `[x, y]`, where `x` is the size of the file in megabytes and `y` is the time taken to transfer the file in seconds. The directory structure can be represented using a tree, where each node is a directory and its children are either subdirectories or files. Your task is to calculate the minimum time required to transfer all files in a given directory and its subdirectories to a remote server. Constraints: * The tree will have at most `1000` nodes. * The total size of files in any directory will not exceed `10^6` MB. * The transfer time for any file will not exceed `1000` seconds. Input: ``` T Directory1 n1 File1_x1 File1_y1 File2_x2 File2_y2 ... Subdirectory1 ... Directory2 n2 File1_x1 File1_y1 File2_x2 File2_y2 ... Subdirectory2 ... . . 0 ``` - `T` is the total number of directories. - `ni` is the number of files in directory `i`. - Each file is represented as a pair `[x, y]` where `x` is the file size in MB and `y` is the transfer time in seconds. Output: Output the minimum time required to transfer all files for each directory. Example: Input: ``` 2 MainDirectory 2 100 10 200 20 SubDirectory 1 50 5 0 AdditionalDirectory 1 300 30 2 50 5 150 15 0 ``` Output: ``` 75 50 ``` Explanation: In the first directory `MainDirectory`, the total transfer time is the sum of all file transfer times: `10 + 20 + 5 = 35 seconds`. Since the files can only be transferred one after another, the minimum time required to transfer all files is `35 seconds`. In the second directory `AdditionalDirectory`, the total transfer time is the sum of all file transfer times: `30 + 5 + 15 = 50 seconds`. The files can again only be transferred one after another, so the minimum time required to transfer all files is `50 seconds`.","solution":"def parse_input(input_string): lines = input_string.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 directories = [] while index < len(lines): directory_name = lines[index] index += 1 n = int(lines[index]) index += 1 files = [] for _ in range(n): file_info = lines[index].split() size = int(file_info[0]) time = int(file_info[1]) files.append((size, time)) index += 1 subdirectories = [] while index < len(lines) and lines[index] != \\"0\\": subdirectory_name = lines[index] index += 1 subdirectories.append(subdirectory_name) index += 1 # Skip the \\"0\\" line directories.append((directory_name, files, subdirectories)) return T, directories def calculate_transfer_time(directory, directories_dict): total_time = 0 files = directory[1] for _, time in files: total_time += time subdirectories = directory[2] for subdirectory_name in subdirectories: subdirectory = directories_dict[subdirectory_name] total_time += calculate_transfer_time(subdirectory, directories_dict) return total_time def minimum_transfer_times(input_string): T, directories = parse_input(input_string) directories_dict = {directory[0]: directory for directory in directories} results = [] for directory in directories: result = calculate_transfer_time(directory, directories_dict) results.append(result) return results"},{"question":"You are given a tree with N nodes, rooted at node 1. Each node has a unique value assigned initially, representing the cost of visiting the node. A path cost is defined as the sum of the costs of all nodes in that path. You need to handle two types of operations: 1. Update the cost of a node: Change the cost assigned to a specific node to a new given value. 2. Query the path cost: Find the total cost of the path from the root node to a given node. Write a program to process a series of updates and queries on the tree. Input - The first line contains an integer N (1 ≤ N ≤ 100,000), the number of nodes in the tree. - The second line contains N integers where the i-th integer represents the initial cost of node i (1 ≤ initial cost ≤ 10^9). - N-1 lines follow, each containing two integers u and v (1 ≤ u, v ≤ N), representing an edge between node u and node v. - The next line contains an integer Q (1 ≤ Q ≤ 100,000), the number of queries. - The next Q lines contain the queries. Each query is one of the following types: 1. \\"U x y\\" (1 ≤ x ≤ N, 1 ≤ y ≤ 10^9): Update the cost of node x to y. 2. \\"Q x\\" (1 ≤ x ≤ N): Query the path cost from the root node to node x. Output For each query of type `Q`, output the path cost on a new line. Example Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 Q 3 U 3 10 Q 3 Output: 6 13 Explanation: - Initially, the tree has costs [1, 2, 3, 4, 5]. The path cost from root to node 3 is 1 + 3 = 4. - After updating the cost of node 3 to 10, the path cost from root to node 3 is now 1 + 10 = 11.","solution":"class Tree: def __init__(self, n, costs): self.n = n self.costs = costs self.graph = [[] for _ in range(n + 1)] self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.subtree_sum = [0] * (n + 1) self._dfs_summary = [] def add_edge(self, u, v): self.graph[u].append(v) self.graph[v].append(u) def _dfs(self, node, parent, depth): self.parent[node] = parent self.depth[node] = depth self.subtree_sum[node] = self.costs[node - 1] self._dfs_summary.append(node) for neighbor in self.graph[node]: if neighbor == parent: continue self._dfs(neighbor, node, depth + 1) self.subtree_sum[node] += self.subtree_sum[neighbor] def build_tree(self): self._dfs(1, -1, 0) def update_cost(self, x, y): delta = y - self.costs[x - 1] self.costs[x - 1] = y node = x while node != -1: self.subtree_sum[node] += delta node = self.parent[node] def query_path_cost(self, x): if self.depth[x] == -1: return -1 cost = 0 node = x while node != -1: cost += self.costs[node - 1] node = self.parent[node] return cost def process_tree(n, costs, edges, queries): tree = Tree(n, costs) for u, v in edges: tree.add_edge(u, v) tree.build_tree() result = [] for query in queries: if query[0] == \'U\': _, x, y = query tree.update_cost(x, int(y)) elif query[0] == \'Q\': _, x = query result.append(tree.query_path_cost(x)) return result"},{"question":"You have been asked to help design a basic inventory management system. The system should support the creation of several items, track their quantities, and allow for updates to the quantity when items are sold or restocked. Each item will have a unique identifier, a name, and a quantity. You will write a program that processes a series of instructions to manage the inventory. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of instructions. Each of the next n lines contains one instruction. The possible instructions are described below. Instructions: 1. \\"Create [id] [name] [quantity]\\" — Create a new item with the given unique identifier [id], name [name], and an initial quantity [quantity]. All identifiers are unique and consist of lowercase Latin letters, having lengths from 1 to 10 characters inclusive. Names consist of lowercase Latin letters and have lengths from 1 to 50 characters inclusive. Quantities are integers from 0 to 1000 inclusive. 2. \\"Sell [id] [quantity]\\" — Decrease the quantity of the item with the given [id] by [quantity]. If the new quantity would be negative, the item\'s quantity should be set to 0. 3. \\"Restock [id] [quantity]\\" — Increase the quantity of the item with the given [id] by [quantity]. 4. \\"List\\" — Output the current inventory. For each item, output its id, name, and quantity on a new line, sorted lexicographically by id. Output: After processing all instructions, the program should output the current inventory as described in the \\"List\\" instruction. If the \\"List\\" instruction appears multiple times, output the inventory state at that point. Example: Input: 8 Create a1 apple 100 Create b2 banana 50 Sell a1 20 Restock b2 10 Sell a1 90 Restock a1 50 Sell b2 30 List Output: a1 apple 40 b2 banana 30 Note: In the above example: 1. The item with id \\"a1\\" (apple) is created with an initial quantity of 100, and the item with id \\"b2\\" (banana) is created with an initial quantity of 50. 2. 20 apples are sold, reducing the quantity to 80. 3. 10 bananas are restocked, increasing the quantity to 60. 4. 90 apples are sold, reducing the quantity to 0 because the quantity cannot be negative. 5. 50 apples are restocked, increasing the quantity to 50. 6. 30 bananas are sold, reducing the quantity to 30. 7. The \\"List\\" instruction is issued, so the current inventory is output.","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def create(self, id, name, quantity): Create a new item with the given unique identifier id, name, and an initial quantity. if id not in self.inventory: self.inventory[id] = {\\"name\\": name, \\"quantity\\": quantity} else: raise ValueError(f\\"Item with id {id} already exists.\\") def sell(self, id, quantity): Decrease the quantity of the item with the given id by quantity. If the new quantity would be negative, set the item\'s quantity to 0. if id in self.inventory: self.inventory[id][\\"quantity\\"] = max(0, self.inventory[id][\\"quantity\\"] - quantity) else: raise ValueError(f\\"Item with id {id} does not exist.\\") def restock(self, id, quantity): Increase the quantity of the item with the given id by quantity. if id in self.inventory: self.inventory[id][\\"quantity\\"] += quantity else: raise ValueError(f\\"Item with id {id} does not exist.\\") def list_items(self): Output the current inventory, sorted lexicographically by id. sorted_items = sorted(self.inventory.items()) for id, item_info in sorted_items: print(f\\"{id} {item_info[\'name\']} {item_info[\'quantity\']}\\") # Example usage n = 8 commands = [ \\"Create a1 apple 100\\", \\"Create b2 banana 50\\", \\"Sell a1 20\\", \\"Restock b2 10\\", \\"Sell a1 90\\", \\"Restock a1 50\\", \\"Sell b2 30\\", \\"List\\" ] inventory_system = InventoryManagementSystem() for command in commands: parts = command.split() action = parts[0] if action == \\"Create\\": _, id, name, quantity = parts inventory_system.create(id, name, int(quantity)) elif action == \\"Sell\\": _, id, quantity = parts inventory_system.sell(id, int(quantity)) elif action == \\"Restock\\": _, id, quantity = parts inventory_system.restock(id, int(quantity)) elif action == \\"List\\": inventory_system.list_items()"},{"question":"You are given a list of integers and an integer x. Your task is to rearrange the list so that all the numbers smaller than or equal to x come before all the numbers greater than x, while maintaining the relative order of the numbers within each partition. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the list. The second line contains n integers separated by spaces, representing the list. The last line contains an integer x. Output Output the list with the rearrangements as required. Examples Input 6 3 5 2 8 1 4 4 Output 3 2 1 5 8 4 Input 7 1 7 3 6 2 5 4 3 Output 1 3 2 7 6 5 4","solution":"def rearrange_list(n, arr, x): Rearranges the list such that all numbers <= x come before numbers > x, maintaining the relative order of the numbers within each partition. Parameters: n (int): Number of elements in the list. arr (list of int): The list of integers. x (int): The pivot integer. Returns: list of int: The rearranged list. less_than_or_equal = [num for num in arr if num <= x] greater_than = [num for num in arr if num > x] return less_than_or_equal + greater_than"},{"question":"Cyclic String Permutation Given a string ( s ) consisting of lowercase English letters, a cyclic permutation of the string means shifting each character in the string to the right and wrapping around the end character to the beginning. For example, a cyclic permutation of string \\"abcde\\" results in: \\"eabcd\\", \\"deabc\\", \\"cdeab\\", \\"bcdea\\", \\"abcde\\". Write a program to list all the unique cyclic permutations of a given string in lexicographical order. If the string is already in its smallest permutation when it\'s rotated, only output that smallest alphabetically ordered cyclic permutation. # Input The input consists of at most 100 datasets. Each dataset is a line containing a string ( s ). The string ( s ) consists only of lowercase letters, and contains at least 1 and at most 20 characters. The input ends with a line with a single \'#\' symbol. # Output For each dataset, print all the unique cyclic permutations of the string ( s ) in lexicographical order, each on a new line. # Sample Input ``` abcd rotation # ``` # Sample Output ``` abcd aionrott inrotrota ionrotatr nrotation otationr rationto rotation tationro tionrota onrotation ionrotatri n ``` # Example **Input** ``` abcd rotation # ``` **Output** ``` abcd aionrott inrotrota ionrotatr nrotation otationr rationto rotation tationro tionrota onrotation ionrotatri n ```","solution":"def cyclic_permutations(s): Generate all unique cyclic permutations of the string `s` in lexicographical order. n = len(s) permutations = set() for i in range(n): rotated_string = s[i:] + s[:i] permutations.add(rotated_string) return sorted(permutations) def process_input(inputs): results = [] for s in inputs: if s == \'#\': break results.append(cyclic_permutations(s)) return results"},{"question":"Lena has a maze represented by a 2D grid of size n x m where each cell contains a value indicating the difficulty to traverse it. She can only move right or down from the top-left corner to the bottom-right corner. Lena wants to identify the path with the minimum total difficulty from the start to the end. The difficulty of a path is the sum of the values of all cells in the path. Provide a function to help Lena determine the minimum difficulty of any possible path. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the maze. - The next n lines contain m integers each, with values (0 ≤ value ≤ 1000), representing the difficulty of each cell in the grid. # Output - Output a single integer — the minimum difficulty of any path from the top-left corner to the bottom-right corner. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation In the given example, the optimal path from the top-left to the bottom-right corner is 1 → 1 → 1 → 1 → 2 → 1, which sums up to 7.","solution":"def min_difficulty_path(grid): n = len(grid) m = len(grid[0]) # Initialize a dp array to store the minimum difficulty of reaching each cell dp = [[0] * m for _ in range(n)] # Set the difficulty of the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]) # The answer is in the bottom-right corner of the dp array return dp[n - 1][m - 1]"},{"question":"Irina\'s company specializes in selling custom t-shirts online. Recently, they\'ve introduced a new system where customers can create their own t-shirt designs using different design elements. Each design element takes a certain amount of space on the t-shirt, and the total space occupied by all elements on a t-shirt cannot exceed a given limit. Irina wants to determine the maximum possible value of the sum of design elements that can fit on a t-shirt without exceeding the space limit. Given the values associated with each element and the space limit, help Irina find this maximum sum. Input The first line contains two integers n and S (1 ≤ n ≤ 2000, 1 ≤ S ≤ 2000), denoting the number of design elements and the space limit of a t-shirt respectively. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) denoting the values of the design elements. The third line contains n integers s1, s2, ..., sn (1 ≤ si ≤ S) denoting the space requirements of the design elements. Output Print a single integer — the maximum possible sum of the values of design elements that can be placed on a t-shirt without exceeding the space limit S. Examples Input 4 10 10 40 30 50 5 4 6 3 Output 90 Input 3 8 15 20 25 4 5 3 Output 45 Note In the first sample, the optimal combination would be choosing the second and fourth design elements with values 40 and 50 respectively, which sum up to 90 and use up 4 + 3 = 7 units of space, staying within the space limit of 10. In the second sample, choosing the first and third design elements with values 15 and 25 respectively, which sum up to 40 and use up 4 + 3 = 7 units of space, staying within the space limit of 8.","solution":"def max_design_value(n, S, values, spaces): # Create a DP table to store the maximum value for each space limit dp = [0] * (S + 1) for i in range(n): for j in range(S, spaces[i] - 1, -1): dp[j] = max(dp[j], dp[j - spaces[i]] + values[i]) return dp[S] # Example usage # n, S = 4, 10 # values = [10, 40, 30, 50] # spaces = [5, 4, 6, 3] # print(max_design_value(n, S, values, spaces)) # Output: 90"},{"question":"You are given an abstract game board represented by a 2D grid where you need to place obstacles on certain cells to form a maze. Your goal is to determine if there\'s a clear path from the starting position (0, 0) to the target position (n-1, m-1), moving only through non-obstacle cells. You can move up, down, left, or right, but cannot move diagonally or pass through walls. A wall is represented by \'#\' and an empty cell by \'.\' in the grid. Write a program that decides if such a path exists. Input The first line contains two integers: n and m (1 ≤ n, m ≤ 50) – the dimensions of the grid. Each of the next n lines contains a string of length m consisting of \'.\' and \'#\'. Output Output \\"YES\\" if there\'s a path from (0, 0) to (n-1, m-1). Otherwise, print \\"NO\\". Example Input 5 5 ...... . .#... .#. ....# ...... Output YES Input 4 4 #. .#.. #... .. Output NO Input 3 3 ….. .#. .... Output YES","solution":"def is_path_possible(n, m, grid): from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given an array of integers representing the number of hours students studied each day in a 30-day month. The goal is to find the maximum number of consecutive days the students studied more than a given threshold k hours. Input The first line contains a single integer k (0 ≤ k ≤ 24), representing the threshold hours. The second line contains 30 integers a_1, a_2, ..., a_30 (0 ≤ a_i ≤ 24), representing the number of hours studied each day for the 30 days. Output Output a single integer — the maximum number of consecutive days the students studied more than the given threshold k hours. Examples Input 5 2 6 7 5 8 12 4 3 5 6 24 24 1 2 3 4 5 11 13 14 2 3 6 7 8 3 2 1 0 9 Output 3 Input 8 9 10 11 12 8 8 8 7 6 5 4 3 2 1 0 8 9 10 8 7 5 4 3 2 1 8 8 8 9 10 Output 4 Note In the first example: The longest streak of days where the students studied more than 5 hours consecutively are days [2, 6] (6,7,5,8,12), which is 3 days long. No other streaks are longer. In the second example: The longest streak of days where the students studied more than 8 hours consecutively are days [25, 30] (8,8,8,9,10), which is 4 days long. No other streaks are longer.","solution":"def max_consecutive_days(k, study_hours): Returns the maximum number of consecutive days students studied more than k hours. max_streak = 0 current_streak = 0 for hours in study_hours: if hours > k: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Jane is a software engineer tasked with deploying sensors along an important road that connects several cities. Each sensor can monitor the traffic within a certain range of the road. To minimize the cost, she wants to place as few sensors as possible while ensuring that the entire road between the two farthest cities is covered. The road is represented as a line with an integer coordinate for each city. The ith city is located at position xi. A sensor placed at position p with range r can monitor any position between p-r and p+r, inclusive. Jane needs to determine the minimum number of sensors required to cover all cities from the leftmost city to the rightmost city. You are given multiple scenarios, each specifying different positions of cities and range of sensors, and you must calculate the minimum number of sensors needed for each scenario. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of scenarios. - Each of the next t scenarios contains the following: - The first line contains two integers n (1 ≤ n ≤ 1000) and r (1 ≤ r ≤ 1000) — the number of cities and the range of each sensor. - The second line contains n integers x1, x2, ..., xn (0 ≤ xi ≤ 10000, all xi are distinct) — the positions of the cities. Output: - For each scenario, print a single integer — the minimum number of sensors required to cover the road from the leftmost city to the rightmost city. Example: Input: 2 4 5 1 11 6 15 3 10 2 5 12 Output: 2 1 Explanation: - In the first scenario, cities are located at positions 1, 11, 6, and 15. With sensors of range 5, Jane can place one sensor at position 6 to cover cities at positions 1 and 11 and another sensor at position 15 to cover the city at position 15. Thus, she needs at least 2 sensors. - In the second scenario, cities are located at positions 2, 5, and 12. With sensors of range 10, Jane can place one sensor at position 7 to cover all cities. Thus, she needs only 1 sensor.","solution":"def min_sensors_to_cover_cities(t, scenarios): results = [] for i in range(t): n, r = scenarios[i][0] cities = sorted(scenarios[i][1]) sensors = 0 covered_until = -1 i = 0 while i < n: # If the current city is already covered, move to the next city if cities[i] <= covered_until: i += 1 continue # Place the sensor at the furthest city still within range sensors += 1 place_sensor_at = cities[i] + r covered_until = place_sensor_at + r # Skip all cities that are within the range of this sensor while i < n and cities[i] <= covered_until: i += 1 results.append(sensors) return results"},{"question":"Jack loves to play with sequences of integers. He recently came across a peculiar sequence transformation called \\"Xorfy Transform\\". Given a sequence of integers, the Xorfy Transform of the sequence is generated by performing the following steps: 1. Take the binary representation of each integer in the sequence. 2. For each bit position (starting from the least significant bit), compute the XOR of the bits at that position across all integers in the sequence. 3. Construct a new sequence where each element is the integer formed by the XOR results at each bit position. For example, given a sequence [5, 9], the binary representations are: - 5: 0101 - 9: 1001 The XOR results for each bit position are: - bit 0: 1 (since 1 XOR 1 = 0) - bit 1: 0 (since 0 XOR 0 = 0) - bit 2: 1 (since 1 XOR 0 = 1) - bit 3: 1 (since 0 XOR 1 = 1) So, the result of the Xorfy Transform would be [10] (since 1010 in binary is 10 in decimal). Jack wants to know the Xorfy Transform of many sequences. Can you help him by writing a program to perform the transformation? Input The input begins with an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of: - An integer N (1 ≤ N ≤ 100), the length of the sequence. - N space-separated integers a_1, a_2, ..., a_N (0 ≤ a_i ≤ 1000), representing the sequence. Output For each test case, output the Xorfy Transform of the sequence in a single line. Examples Input 2 2 5 9 3 1 4 6 Output 10 3","solution":"def xorfy_transform(sequences): Given a list of sequences, this function returns the Xorfy Transform of the sequences. :param sequences: List of lists, where each inner list represents a sequence of integers. :return: List of integers representing the Xorfy Transformed sequences. results = [] for sequence in sequences: xorfy_result = 0 for num in sequence: xorfy_result ^= num results.append(xorfy_result) return results def parse_input(input_string): Parses the input string into the required format. :param input_string: A string containing the input data. :return: A tuple where the first element is the number of test cases and the second element is a list of sequences. lines = input_string.strip().split(\'n\') T = int(lines[0]) sequences = [] for i in range(1, T + 1): sequence = list(map(int, lines[i].split()[1:])) sequences.append(sequence) return sequences"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],C={key:0},M={key:1};function D(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",M,"Loading...")):(n(),i("span",C,"See more"))],8,F)):l("",!0)])}const z=d(S,[["render",D],["__scopeId","data-v-889061c7"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/41.md","filePath":"deepseek/41.md"}'),L={name:"deepseek/41.md"},B=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{U as __pageData,B as default};
