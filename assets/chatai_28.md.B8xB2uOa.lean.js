import{_ as c,o as n,c as a,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function C(i,e,l,p,r,s){return n(),a("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const R=c(k,[["render",C],["__scopeId","data-v-b2c6f996"]]),S=JSON.parse('[{"question":"Write a function that accepts a list of dictionaries, each representing a transaction. Each dictionary has keys: \\"id\\" (a unique integer), \\"amount\\" (a float), and \\"type\\" (either \\"debit\\" or \\"credit\\"). The function should return a new dictionary summarizing the transactions, with keys: \\"total_debit\\" (sum of all debit transactions), \\"total_credit\\" (sum of all credit transactions), \\"balance\\" (total credit minus total debit). You should write a self-contained function starting with: ```python def summarize_transactions(transactions): ```","solution":"def summarize_transactions(transactions): This function accepts a list of dictionaries representing transactions and returns a summary dictionary with the total debit, total credit, and balance. total_debit = 0.0 total_credit = 0.0 for transaction in transactions: if transaction[\\"type\\"] == \\"debit\\": total_debit += transaction[\\"amount\\"] elif transaction[\\"type\\"] == \\"credit\\": total_credit += transaction[\\"amount\\"] balance = total_credit - total_debit return { \\"total_debit\\": total_debit, \\"total_credit\\": total_credit, \\"balance\\": balance }"},{"question":"You are tasked with writing a function called `highest_scorer()` that determines the student with the highest score from a dictionary of student names and their corresponding scores. This exercise will help you understand basic dictionary operations and comparison techniques in Python. Your function should: 1. Take a dictionary `students_scores` as input, where: - The keys are student names (strings). - The values are their corresponding scores (integers). 2. Identify the student with the highest score. 3. Return the name of the student with the highest score. If there are multiple students with the highest score, return any one of them. Example input: ```python students_scores = { \\"Alice\\": 88, \\"Bob\\": 95, \\"Charlie\\": 90, \\"David\\": 88, \\"Eve\\": 95 } ``` In the example above, the function could return either \\"Bob\\" or \\"Eve\\" since both have the highest score of 95. The function definition should be as follows: ```python def highest_scorer(students_scores): ... ```","solution":"def highest_scorer(students_scores): Returns the name of the student with the highest score. If there are multiple students with the highest score, return any one of them. if not students_scores: return None max_score = max(students_scores.values()) for student, score in students_scores.items(): if score == max_score: return student"},{"question":"Create a function named `is_anagram(s1, s2)` that takes two string arguments `s1` and `s2` and returns `True` if the strings are anagrams of each other, and `False` otherwise. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams. Your function should: 1. Ensure that the inputs `s1` and `s2` are of type `str`. If either input is not a string, raise a `RuntimeError` with the message \\"Both arguments must be strings\\". 2. Ignore the case when comparing the characters. 3. Return `False` if the lengths of the strings are not equal. Example: ```python print(is_anagram(\\"listen\\", \\"silent\\")) # True print(is_anagram(\\"Triangle\\", \\"Integral\\")) # True print(is_anagram(\\"Apple\\", \\"Pabble\\")) # False ``` Use the following template for your solution: ```python def is_anagram(s1, s2): # Your implementation here ```","solution":"def is_anagram(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. Parameters: s1 (str): The first string s2 (str): The second string Raises: RuntimeError: If either s1 or s2 is not a string. if not isinstance(s1, str) or not isinstance(s2, str): raise RuntimeError(\\"Both arguments must be strings\\") # Normalize the strings to lower case and remove white spaces for comparison s1_normalized = sorted(s1.replace(\\" \\", \\"\\").lower()) s2_normalized = sorted(s2.replace(\\" \\", \\"\\").lower()) return s1_normalized == s2_normalized"},{"question":"The task requires you to write a function named `find_largest_island` that identifies the largest contiguous group of `1`s in a given 2D grid of `0`s and `1`s. The function should return the size of the largest island, where an island is defined as a group of horizontally or vertically connected `1`s. Diagonal connections are not considered. # Function Signature ```python def find_largest_island(grid: List[List[int]]) -> int: pass ``` # Requirements 1. Implement a search mechanism (either DFS or BFS) to explore islands in the grid. 2. Track the size of each island encountered during the search. 3. Ensure that visited cells are marked to avoid recounting. 4. Return the size of the largest island found. # Assumptions - The grid is a list of lists containing `0`s and `1`s. - The grid may not be rectangular, i.e., rows may have different lengths. - If there are no `1`s in the grid, the function should return `0`. # Example When `find_largest_island([[0, 1, 0], [1, 1, 0], [0, 0, 1]])` is called, it should return `3`, as the largest island is formed by three connected `1`s in the middle of the grid. # Constraints - The function should handle grids up to `100x100` efficiently.","solution":"from typing import List def find_largest_island(grid: List[List[int]]) -> int: if not grid: return 0 rows = len(grid) cols = len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 0 grid[r][c] = 0 size = 1 size += dfs(r + 1, c) size += dfs(r - 1, c) size += dfs(r, c + 1) size += dfs(r, c - 1) return size max_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: max_size = max(max_size, dfs(r, c)) return max_size"},{"question":"In this exercise, you will create a function that calculates the Conway\'s Game of Life\'s next generation of cells based on the current generation. The function will update a 2D grid, where each cell can either be alive (1) or dead (0). You are required to write the function `next_generation(grid)`. The parameter is: - `grid`: A list of lists representing the current generation of cells. Each cell is either 1 (alive) or 0 (dead). # Functional Requirements 1. The function should calculate the next generation by applying the following rules to each cell: - Any live cell with fewer than two live neighbors dies, as if by underpopulation. - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies, as if by overpopulation. - Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. 2. Return the resulting grid representing the next generation of cells. # Example Here\'s how you might call the function: ```python initial_grid = [ [0, 1, 0], [0, 1, 0], [0, 1, 0] ] next_grid = next_generation(initial_grid) ``` The `next_grid` should be: ```python [ [0, 0, 0], [1, 1, 1], [0, 0, 0] ] ``` # Your Task - Implement the function `next_generation(grid)`. # Assumptions - The grid will always be a non-empty rectangular grid (i.e., all rows have the same number of columns). - The function does not need to handle edge wrapping; consider cells outside the grid to be dead. # Hint - You may want to create a helper function to count the live neighbors of a given cell. - Iterate through the grid while avoiding modifying it in place until the entire next generation is calculated.","solution":"def next_generation(grid): def count_live_neighbors(x, y): live_neighbors = 0 for i in range(x-1, x+2): for j in range(y-1, y+2): if (i == x and j == y) or i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]): continue live_neighbors += grid[i][j] return live_neighbors next_gen = [] for i in range(len(grid)): next_row = [] for j in range(len(grid[0])): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_row.append(0) else: next_row.append(1) else: if live_neighbors == 3: next_row.append(1) else: next_row.append(0) next_gen.append(next_row) return next_gen"},{"question":"Given a DataFrame containing details of various products, implement a function that first scales the numerical features, then performs Principal Component Analysis (PCA) to reduce the dimensions of the data, and finally returns the transformed DataFrame. The function should output: pd.DataFrame: A DataFrame containing the principal components. You should write self-contained code starting with: ``` import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.decomposition import PCA def task_func(df: pd.DataFrame, n_components: int = 2): ``` Your implementation should follow these steps: 1. Select only the numerical columns from the input DataFrame. 2. Scale the numerical columns using StandardScaler. 3. Apply PCA to the scaled data to reduce it to the specified number of components. 4. Construct a DataFrame from the PCA-transformed data, ensuring the columns are named as \'PC1\', \'PC2\', etc., up to the number of components. 5. Return the new DataFrame containing the principal components.","solution":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.decomposition import PCA def task_func(df: pd.DataFrame, n_components: int = 2): This function scales the numerical features of the provided DataFrame, performs PCA to reduce the dimensions, and returns the transformed DataFrame. Params: df (pd.DataFrame): Input DataFrame containing product details. n_components (int): Number of principal components to keep in the PCA. Default is 2. Returns: pd.DataFrame: DataFrame containing the principal components. # Select only the numerical columns from the input DataFrame numerical_df = df.select_dtypes(include=[\'number\']) # Scale the numerical columns scaler = StandardScaler() scaled_data = scaler.fit_transform(numerical_df) # Apply PCA to the scaled data pca = PCA(n_components=n_components) pca_data = pca.fit_transform(scaled_data) # Construct a DataFrame from the PCA-transformed data pc_columns = [f\'PC{i+1}\' for i in range(n_components)] pca_df = pd.DataFrame(data=pca_data, columns=pc_columns) return pca_df"},{"question":"You are required to write a function `balanceBrackets` that takes a string comprised of round brackets \'(\' and \')\' and returns a balanced version of the string along with the minimum number of insertions and deletions required to achieve this. In a balanced string: 1. Every opening bracket \'(\' has a corresponding closing bracket \')\'. 2. The string does not contain unmatched opening or closing brackets. # Function Details **Function Name:** `balanceBrackets` **Parameters:** - `brackets` (str): A string consisting of the characters \'(\' and \')\'. **Returns:** - (tuple): A tuple containing the balanced version of the input string and the number of insertions and deletions required to balance it. # Requirements - Use appropriate data structures to efficiently track the insertion and deletion operations needed to balance the brackets. - Ensure that the balanced version of the string maintains the relative order of the input brackets. Example ```python input_str = \\"())(\\" balanced_str, operations = balanceBrackets(input_str) print(f\\"Balanced String: {balanced_str}, Operations: {operations}\\") # Balanced String: (()), Operations: 2 ``` # Additional Constraints - The input string will have a length between 1 and 10^4. - Focus on crafting an algorithm with a time complexity of O(n), where n is the length of the input string. ```python def balanceBrackets(brackets): # Your Code Here pass # Example Usage input_str = \\"())(\\" balanced_str, operations = balanceBrackets(input_str) print(f\\"Balanced String: {balanced_str}, Operations: {operations}\\") ```","solution":"def balanceBrackets(brackets): Balances the given string of brackets and calculates the number of actions needed. Arguments: brackets -- the input string of round brackets Returns: A tuple with the balanced bracket string and the number of insertions and deletions required left_stack = 0 unmatched_right = 0 for char in brackets: if char == \'(\': left_stack += 1 elif char == \')\': if left_stack > 0: left_stack -= 1 else: unmatched_right += 1 balanced_string = \'(\' * unmatched_right + brackets + \')\' * left_stack operations = unmatched_right + left_stack return balanced_string, operations"},{"question":"You are tasked with creating a function for detecting and removing duplicate elements from a sorted list while maintaining the original order of first occurrences of each element. This exercise is meant to improve your understanding of list manipulations and handling sorted data structures. The objective is to write a function named `remove_duplicates(sorted_list)` which accepts: 1. `sorted_list`: A list of integers that is sorted in non-decreasing order. You should perform the following steps inside the function: 1. Iterate through the list and identify duplicate elements. 2. Remove duplicate elements while preserving the original order of the first occurrence of each element. 3. Return the updated list with duplicates removed. Function signature: ```python def remove_duplicates(sorted_list): ``` Constraints: - The input list will only contain integers. - The list will be sorted in non-decreasing order. - The list can be of arbitrary length, from being empty to containing a large number of elements. Here\'s a sample input you can use to test your implementation: ```python sorted_list = [1, 1, 2, 3, 3, 4, 4, 4, 5] ``` For the above input, the expected output would be: ```python [1, 2, 3, 4, 5] ``` Your task is to implement the `remove_duplicates` function that returns a list with all duplicate values removed.","solution":"def remove_duplicates(sorted_list): Removes duplicate elements from a sorted list while maintaining the original order of first occurrences of each element. Parameters: sorted_list (list of int): a list of integers that is sorted in non-decreasing order. Returns: list of int: a list with duplicates removed. if not sorted_list: return sorted_list result = [sorted_list[0]] for num in sorted_list[1:]: if num != result[-1]: result.append(num) return result"},{"question":"**: Given a series of weather data logs, design a function to compute the average temperature for each city over a specified period of time. The logs are structured as a list of dictionaries, where each dictionary contains information about the city, date, and temperature recorded on that date. Your task is to write a function `compute_avg_temperature(logs: List[Dict[str, Any]], start_date: str, end_date: str) -> Dict[str, float]` that processes this data and calculates the average temperature for each city within the date range [start_date, end_date] inclusive. The log format and an example of the function\'s output are illustrated below. # Parameters: - `logs: List[Dict[str, Any]]`: A list of dictionaries, where each dictionary has the following keys: - `\'city\'`: The name of the city (string). - `\'date\'`: The date of the record in the format \'YYYY-MM-DD\' (string). - `\'temperature\'`: The recorded temperature (float). - `start_date: str`: The start date in the format \'YYYY-MM-DD\'. - `end_date: str`: The end date in the format \'YYYY-MM-DD\'. # Returns: - `Dict[str, float]`: A dictionary where each key is a city name, and each value is the average temperature of that city within the specified date range. If a city has no records within the date range, it should not appear in the result. # Example: ```python logs = [ {\'city\': \'New York\', \'date\': \'2022-01-01\', \'temperature\': 5.0}, {\'city\': \'New York\', \'date\': \'2022-01-02\', \'temperature\': 3.0}, {\'city\': \'Los Angeles\', \'date\': \'2022-01-01\', \'temperature\': 15.0}, {\'city\': \'Los Angeles\', \'date\': \'2022-01-03\', \'temperature\': 17.0}, {\'city\': \'Chicago\', \'date\': \'2022-01-02\', \'temperature\': -5.0}, {\'city\': \'Chicago\', \'date\': \'2022-01-04\', \'temperature\': -3.0} ] start_date = \'2022-01-01\' end_date = \'2022-01-03\' # Function Call result = compute_avg_temperature(logs, start_date, end_date) # Expected Output: # { # \'New York\': 4.0, # \'Los Angeles\': 16.0, # \'Chicago\': -5.0 # } print(result) ``` **Notes:** - Consider the use of the `datetime` module to handle date comparisons. - Ensure that your function handles different cities and varying number of records per city appropriately. - Assume that the `logs` are comprehensive and cover the required cities and dates for the given range.","solution":"from datetime import datetime from typing import List, Dict, Any def compute_avg_temperature(logs: List[Dict[str, Any]], start_date: str, end_date: str) -> Dict[str, float]: Calculates the average temperature for each city over a specified period of time. Parameters: logs (List[Dict[str, Any]]): A list of dictionaries with keys \'city\', \'date\', and \'temperature\'. start_date (str): The start date in the format \'YYYY-MM-DD\'. end_date (str): The end date in the format \'YYYY-MM-DD\'. Returns: Dict[str, float]: A dictionary where each key is a city name, and each value is the average temperature of that city within the specified date range. start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') city_temperatures = {} for log in logs: city = log[\'city\'] date = datetime.strptime(log[\'date\'], \'%Y-%m-%d\') temp = log[\'temperature\'] if start_date <= date <= end_date: if city not in city_temperatures: city_temperatures[city] = [] city_temperatures[city].append(temp) avg_temperatures = {} for city, temps in city_temperatures.items(): avg_temperatures[city] = sum(temps) / len(temps) return avg_temperatures"},{"question":"Implement a function that scans a given directory for all files with a specific file extension, compresses those files into a single ZIP archive, and then deletes the original files. This function should utilize the `os` module to list and delete files, and the `zipfile` module to create the ZIP archive. The function should return the path of the created ZIP file. The function must start with: ``` import os import zipfile def compress_files(directory, file_extension, zip_name): ``` Outputs: - string: The path to the created ZIP file.","solution":"import os import zipfile def compress_files(directory, file_extension, zip_name): Compresses files with the given extension in the specified directory into a ZIP archive, and removes the original files. Args: directory (str): The directory to scan for files. file_extension (str): The extension of the files to compress. zip_name (str): The name of the resulting ZIP archive. Returns: str: The path to the created ZIP file. files_to_compress = [f for f in os.listdir(directory) if f.endswith(file_extension)] zip_path = os.path.join(directory, zip_name) with zipfile.ZipFile(zip_path, \'w\') as zipf: for file in files_to_compress: file_path = os.path.join(directory, file) zipf.write(file_path, arcname=file) os.remove(file_path) return zip_path"},{"question":"You are tasked with creating an **anagram checking function**. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \\"cinema\\" formed from \\"iceman\\". Your goal is to implement the function `are_anagrams(string1, string2)` that determines if the two provided input strings are anagrams of each other: - The function should return `True` if `string1` and `string2` are anagrams, and `False` otherwise. - The function should be case insensitive; both \\"Cinema\\" and \\"iceman\\" should be considered anagrams. - The function should ignore all non-alphabetic characters; punctuation, whitespace, and numbers should not affect whether the strings are anagrams. Implement the function `are_anagrams(string1, string2)`. ```python def are_anagrams(string1, string2): cleaned_string1 = \'\'.join(filter(str.isalpha, string1.lower())) cleaned_string2 = \'\'.join(filter(str.isalpha, string2.lower())) return sorted(cleaned_string1) == sorted(cleaned_string2) ```","solution":"def are_anagrams(string1, string2): Determines if the two provided input strings are anagrams of each other. The function is case insensitive and ignores non-alphabetic characters. Args: string1 (str): The first input string. string2 (str): The second input string. Returns: bool: True if string1 and string2 are anagrams, False otherwise. # Normalize strings: remove non-alphabetic characters and convert to lowercase cleaned_string1 = \'\'.join(filter(str.isalpha, string1.lower())) cleaned_string2 = \'\'.join(filter(str.isalpha, string2.lower())) # Check if sorted characters of both cleaned strings are the same return sorted(cleaned_string1) == sorted(cleaned_string2)"},{"question":"Your task is to write a Python function called `save_and_display_username()` that interacts with a JSON file to store and retrieve a user\'s username. The function should attempt to read the username from a file named \'username.json\'. If the file does not exist or is empty, the function should prompt the user to input their username, save it to the file, and print a message saying \\"Welcome, [username]! I\'ll remember you when you come back.\\" If the file exists and contains a username, it should read the username from the file and print a message saying \\"Welcome back, [username]!\\" To manage the storing and retrieving of the username, you are needed to use `json.load` and `json.dump` from the `json` library. Here\'s a structured outline for your function: 1. Try to open and read the \'username.json\' file. 2. If the file is found and contains a username, load the username from the file using `json.load` and print the welcome message. 3. If the file is not found or empty, prompt the user to input their username, save it to \'username.json\' using `json.dump`, and notify the user with a welcome message.","solution":"import json import os def save_and_display_username(): filename = \'username.json\' # Check if the file exists and is not empty if os.path.exists(filename) and os.path.getsize(filename) > 0: try: with open(filename, \'r\') as file: username = json.load(file) print(f\\"Welcome back, {username}!\\") except (json.JSONDecodeError, IOError): print(\\"Error reading the file. Please delete the file and try again.\\") else: username = input(\\"Enter your username: \\") with open(filename, \'w\') as file: json.dump(username, file) print(f\\"Welcome, {username}! I\'ll remember you when you come back.\\")"},{"question":"You are required to design a Python function to animate the movement of a turtle object using the `turtle` library. The turtle should move along a series of predefined points and change its heading direction at each point to face the next one. # Function Signature ```python def animate_turtle_movement(turtle, points, speed): # Your code here ``` # Parameters - `turtle`: An instance of the Turtle class provided by the `turtle` library. - `points`: A list of tuples, where each tuple contains the x and y coordinates for the turtle to visit, in sequence. - `speed`: An integer representing the speed of the turtle\'s movement (value between 1 and 10). # Instructions 1. Set the turtle\'s speed using the `turtle.speed` method. 2. For each coordinate in the `points` list: - Calculate the heading direction towards the next point using the `turtle.setheading` method. - Move the turtle to the calculated point using the `turtle.goto` method. # Constraints - Make sure the turtle faces the correct direction towards the next point before moving. - Ensure that the turtle moves smoothly and continuously along the path defined by the points. # Example ```python import turtle import math def main(): screen = turtle.Screen() screen.bgcolor(\\"white\\") star = turtle.Turtle() points = [(30, 100), (150, 200), (200, 50), (50, 20)] speed = 5 # Define the function to animate turtle movement def animate_turtle_movement(turtle, points, speed): turtle.speed(speed) for i in range(len(points) - 1): start_x, start_y = points[i] end_x, end_y = points[i + 1] angle = math.degrees(math.atan2(end_y - start_y, end_x - start_x)) turtle.setheading(angle) turtle.goto(end_x, end_y) animate_turtle_movement(star, points, speed) screen.mainloop() if __name__ == \\"__main__\\": main() ``` The above code will animate the turtle object with the specified speed along the path defined by the points in the list. At each point, the turtle will change its heading direction to face the next point before moving.","solution":"import math import turtle def animate_turtle_movement(turtle, points, speed): Animates the movement of a turtle object along a list of points with a given speed. Parameters: turtle (Turtle): An instance of the Turtle class. points (list of tuples): A list of x, y coordinates for the turtle to visit. speed (int): Speed of the turtle\'s movement (1 to 10). turtle.speed(speed) for i in range(len(points)): if i < len(points) - 1: start_x, start_y = points[i] end_x, end_y = points[i + 1] angle = math.degrees(math.atan2(end_y - start_y, end_x - start_x)) turtle.setheading(angle) turtle.goto(points[i][0], points[i][1])"},{"question":"Write a Python function named `count_unique_words` that takes a single string argument and returns the count of unique words in the string. For the purpose of this function, words are considered as sequences of alphabetic characters separated by spaces or punctuation. The function should ignore case when counting words. - Consider using the `re` module for regular expressions to handle punctuation and spaces. - The function should convert all characters to lowercase before counting to ensure duplicates are not counted due to case differences. # Example ```python input_string = \\"Hello, world! Hello, Python programmers.\\" unique_word_count = count_unique_words(input_string) print(\\"Count of Unique Words:\\", unique_word_count) ``` # Constraints - The input string will only contain alphabetic characters, spaces, and punctuation. - The function should handle an empty string and return 0 for it. # Hints: - Use regular expressions to split the string by non-alphabetic characters. - Convert each word to lowercase to ensure case-insensitive counting.","solution":"import re def count_unique_words(input_string): Returns the count of unique words in the input string. Words are sequences of alphabetic characters separated by spaces or punctuation. The counting is case-insensitive. # Using regular expression to split the string by non-alphabet characters words = re.findall(r\'[a-zA-Z]+\', input_string.lower()) unique_words = set(words) return len(unique_words)"},{"question":"Create a function called `flatten_dict` that accepts a nested dictionary and returns a new dictionary with the nested elements flattened. The keys of the new dictionary should be the path to the original keys in the nested dictionary, with each level separated by a dot (`.`). If the key at any level contains a dot (`.`), it is replaced with an underscore (`_`). Requirements: 1. Create a function `flatten_dict` that flattens a nested dictionary. 2. Replace any dots in keys with underscores. 3. The keys in the new dictionary indicate the path to corresponding values in the nested dictionary, separated by dots. Function Signature: ```python def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: # your code here ``` Example Usage: You should be able to use the function as shown below: ```python nested_dict = { \'a\': { \'b\': 1, \'c\': { \'d.e\': 3 } }, \'f\': 4 } flattened = flatten_dict(nested_dict) print(flattened) # Output: {\'a.b\': 1, \'a.c.d_e\': 3, \'f\': 4} ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Keys in the new dictionary indicate the path to the corresponding values in the nested dictionary, separated by dots. Any dots in the keys are replaced with underscores. items = {} for k, v in d.items(): new_key = (parent_key + sep if parent_key else \'\') + k.replace(\'.\', \'_\') if isinstance(v, dict): items.update(flatten_dict(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"You are required to write a function `plot_kmeans_clusters(X, centroids, labels, filename)` that visualizes the results of the k-means clustering algorithm. The function should generate a plot with the following features: 1. **Cluster Scatter Plot**: Display the data points color-coded by their assigned cluster. Each cluster should be represented by a different color. 2. **Centroids**: Mark the centroids of the clusters with a distinctive shape (e.g., an \'X\' or a large dot) on the same plot. The function should: - Use `matplotlib.pyplot.scatter` to generate the scatter plot for the data points and another scatter plot for the centroids. - Save the resulting plot to a file as specified by the `filename` parameter. **Parameters:** - `X`: A NumPy array of shape `(nb_samples, n)` containing the data points. - `centroids`: A NumPy array of shape `(k, n)` containing the coordinates of the centroids. - `labels`: A NumPy array of shape `(nb_samples,)` containing the cluster labels for each data point. - `filename`: A string representing the name of the file to save the plot. Follow these steps to create the plot: 1. Use `plt.scatter` to plot the data points, differentiating clusters with unique colors. 2. Use `plt.scatter` again to plot the centroids with a distinctive marker and color. 3. Save the figure to the specified filename using `plt.savefig`. Ensure the plot clearly depicts the different clusters and centroids, thus providing a clear visualization of the k-means clustering results.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_kmeans_clusters(X, centroids, labels, filename): Visualize the k-means clustering results. Parameters: - X: NumPy array of shape (nb_samples, n) containing the data points. - centroids: NumPy array of shape (k, n) containing the coordinates of the centroids. - labels: NumPy array of shape (nb_samples,) containing the cluster labels for each data point. - filename: String representing the name of the file to save the plot. unique_labels = np.unique(labels) colors = plt.cm.get_cmap(\'viridis\', len(unique_labels)) # Plot each cluster with a different color for i, label in enumerate(unique_labels): cluster_points = X[labels == label] plt.scatter(cluster_points[:, 0], cluster_points[:, 1], color=colors(i), label=f\'Cluster {label}\') # Plot centroids with a distinctive marker plt.scatter(centroids[:, 0], centroids[:, 1], color=\'red\', marker=\'X\', s=100, label=\'Centroids\') # Add plot legend and labels plt.legend(loc=\'best\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.title(\'K-Means Clustering Results\') # Save the plot to a file plt.savefig(filename) plt.close()"},{"question":"You are given an `n` x `n` grid of integers where each integer represents the height of that position in a terrain. Write a function `find_highest_peak(grid)` that finds the highest peak in the grid. The peak is defined as a position `grid[i][j]` that is higher than or equal to all its 8-connected neighboring cells (adjacent horizontally, vertically, or diagonally). Your goal is to find the coordinates of the highest peak. If there are multiple peaks with the same height, return the one that appears first in row-major order (i.e., top-to-bottom, left-to-right). # Function Signature ```python def find_highest_peak(grid): # your code here ``` # Parameters: - `grid`: a list of lists of integers representing the `n` x `n` grid. # Return: - A tuple `(i, j)` representing the coordinates of the highest peak. # Example: ```python grid = [ [1, 2, 1], [3, 4, 5], [6, 7, 8] ] highest_peak = find_highest_peak(grid) print(highest_peak) # Output: (2, 2) ``` # Constraints: 1. `1 <= n <= 100`. 2. The heights are given as integers in the range `[-1000, 1000]`.","solution":"def find_highest_peak(grid): This function finds the highest peak in an n x n grid of integers. A peak is defined as a position that is higher than or equal to all its 8-connected neighbors. Parameters: grid: list of lists of integers representing the n x n grid. Returns: A tuple (i, j) representing the coordinates of the highest peak. n = len(grid) highest_peak = (-1, -1) highest_height = float(\'-inf\') directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] # All 8 directions for i in range(n): for j in range(n): is_peak = True for direction in directions: ni, nj = i + direction[0], j + direction[1] if 0 <= ni < n and 0 <= nj < n and grid[i][j] < grid[ni][nj]: is_peak = False break if is_peak and grid[i][j] > highest_height: highest_height = grid[i][j] highest_peak = (i, j) return highest_peak"},{"question":"You are writing a function `flatten_nested_list(nested_list)` that flattens a highly nested list of integers. The input list can contain multiple levels of nested lists with integers inside them. The output should be a single list with all the integers in the same order as they appeared in the original nested structure but without any nested lists. Your function `flatten_nested_list` should accept one parameter: - `nested_list` (list): A list that can contain integers or other lists. The function should return a new list with all the integers from `nested_list` flattened into a single level. Here are the steps your function should follow: 1. Traverse through the input list, checking each element. 2. If an element is an integer, add it to the result list. 3. If an element is a list, recursively flatten it and extend the result list with the flattened integers. Example usage: ```python result = flatten_nested_list([1, [2, [3, 4], 5], [6, 7]]) # The expected output is: [1, 2, 3, 4, 5, 6, 7] print(result) ``` Ensure your implementation handles different levels of nesting and flattens all nested lists regardless of their depth. This problem will help you understand how to work with recursion and list operations in Python.","solution":"def flatten_nested_list(nested_list): Flattens a highly nested list of integers. Args: nested_list (list): A list that can contain integers or other lists. Returns: list: A single level list with all integers from nested_list. def flatten(current_list, result): for element in current_list: if isinstance(element, list): flatten(element, result) else: result.append(element) flattened_result = [] flatten(nested_list, flattened_result) return flattened_result"},{"question":"Create a function that takes a list of integers and returns a dictionary with the integers as keys and the number of their occurrences in the list as values. The function should ignore any non-integer values in the list. Additionally, the function should have a second argument which is a callable function that can process (e.g., filter or transform) each integer before counting. If no callable function is provided, the original integers should be counted as-is. The function should start with: ``` def count_integers(data, processor=None): ``` And a sample input/output example: ``` count_integers([1, 2, 2, \'a\', 3, 1, 2], lambda x: x * 2) # Output: {2: 2, 4: 4, 6: 1} ```","solution":"def count_integers(data, processor=None): Returns a dictionary with the integers as keys and the number of their occurrences in the list as values. If a processor function is provided, apply this function to each integer before counting. Non-integer values in the list are ignored. Parameters: data (list): List of elements where integers are counted. processor (function, optional): A function to process each integer before counting. Defaults to None. Returns: dict: Dictionary with integer keys and their counts as values. counts = {} for item in data: if isinstance(item, int): if processor: processed = processor(item) else: processed = item counts[processed] = counts.get(processed, 0) + 1 return counts"},{"question":"** Write a function called `temperature_trend_plot` that plots the trend of average monthly temperatures for a given city over a period of years. The temperatures are recorded in a DataFrame where each row represents a month, and each column represents a year. To achieve this, use the `pandas` library for data manipulation and `matplotlib` for plotting. The plot should display the trend line for each year, allowing easy comparison of temperature changes across different years. The function should properly handle missing data by interpolation, ensuring that no breaks appear in the trend line due to NaN values. Additionally, label each trend line with the corresponding year for clarity. Here are the steps you need to follow: 1. **Input**: - `city`: String representing the city for which temperature trends are to be plotted. - `temperatures`: A pandas DataFrame where each row represents a month (from 1 to 12) and each column represents different years (with column names corresponding to the years). 2. **Core Requirements**: - Interpolate missing values in the DataFrame to ensure continuity of data. - Plot the trend line for each year on the same graph. - Label each line with the corresponding year to distinguish between trends. 3. **Expected Function**: ```python def temperature_trend_plot(city, temperatures): for a given city, the function will plot the trend of average monthly temperatures over a specified period Parameters: city (str): The city for which the temperature trends are to be plotted. temperatures (pandas.DataFrame): The DataFrame containing temperature data for different months and years. Returns: None pass ``` You are required to implement the `temperature_trend_plot` function by following the indicated steps, utilizing the `pandas` library for data handling and `matplotlib` for plotting. The trend lines must be clear, properly labeled, and effectively represent temperature changes over the specified years.","solution":"import pandas as pd import matplotlib.pyplot as plt def temperature_trend_plot(city, temperatures): For a given city, the function will plot the trend of average monthly temperatures over a specified period. Parameters: city (str): The city for which the temperature trends are to be plotted. temperatures (pandas.DataFrame): The DataFrame containing temperature data for different months and years. Returns: None # Interpolate missing values temperatures = temperatures.interpolate(method=\'linear\', axis=0) # Plot the trend lines plt.figure(figsize=(10, 6)) for year in temperatures.columns: plt.plot(temperatures.index, temperatures[year], marker=\'o\', label=str(year)) plt.title(f\'Monthly Temperature Trend for {city}\') plt.xlabel(\'Month\') plt.ylabel(\'Temperature (°C)\') plt.legend(title=\\"Year\\") plt.grid(True) plt.xticks(range(1, 13)) plt.show()"},{"question":"You are tasked with analyzing a timeseries dataset and providing forecasts for future values. Specifically, you are required to develop a model that consists of an exponential moving average to smooth the data and then use linear regression to predict future values based on the smoothed data. **Task:** Write a function `predict_timeseries(data, alpha, num_forecasts)` that first smooths the given timeseries data using an exponential moving average (EMA) with the provided smoothing factor `alpha` and then predicts the next `num_forecasts` values using a linear regression model based on the smoothed data. Use the following Python libraries: - `numpy.cumsum` for calculating the cumulative sum of array elements. - `numpy.arange` for generating arrays ranging from the start to the stop value. **Parameters:** - `data (numpy.ndarray)`: A 1D array containing the timeseries data. - `alpha (float)`: The smoothing factor for the exponential moving average (between 0 and 1). - `num_forecasts (int)`: The number of future values to forecast. **Returns:** - `smoothed_data (numpy.ndarray)`: A 1D array containing the smoothed timeseries data using EMA. - `forecasts (numpy.ndarray)`: A 1D array containing the forecasted values. **Example:** ```python import numpy as np # Sample data data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) alpha = 0.5 num_forecasts = 3 # Call the function smoothed_data, forecasts = predict_timeseries(data, alpha, num_forecasts) print(\\"Smoothed Data:\\") print(smoothed_data) print(\\"Forecasts:\\") print(forecasts) ``` **Notes:** - The exponential moving average is calculated as `EMA[t] = alpha * data[t] + (1 - alpha) * EMA[t-1]`, with `EMA[0]` initialized to `data[0]`. - Perform linear regression using the smoothed data to predict future values by formulating the problem as finding the best-fit line that can be used for extrapolation. - Ensure your implementation handles edge cases, such as when `num_forecasts` exceeds a reasonable range or when `alpha` is outside the valid range.","solution":"import numpy as np from sklearn.linear_model import LinearRegression def predict_timeseries(data, alpha, num_forecasts): Smooths the given timeseries data using an exponential moving average (EMA) and then predicts the next `num_forecasts` values using linear regression. Parameters: data (numpy.ndarray): A 1D array containing the timeseries data. alpha (float): The smoothing factor for the EMA (between 0 and 1). num_forecasts (int): The number of future values to forecast. Returns: smoothed_data (numpy.ndarray): A 1D array containing the smoothed timeseries data using EMA. forecasts (numpy.ndarray): A 1D array containing the forecasted values. if not (0 < alpha < 1): raise ValueError(\\"Alpha should be between 0 and 1\\") if num_forecasts <= 0: raise ValueError(\\"Number of forecasts should be a positive integer\\") # Calculate the Exponential Moving Average (EMA) smoothed_data = np.zeros(data.shape) smoothed_data[0] = data[0] for t in range(1, len(data)): smoothed_data[t] = alpha * data[t] + (1 - alpha) * smoothed_data[t-1] # Prepare the indices for the linear regression X = np.arange(len(smoothed_data)).reshape(-1, 1) y = smoothed_data # Train the linear regression model model = LinearRegression() model.fit(X, y) # Prepare the indices for future forecasts future_X = np.arange(len(smoothed_data), len(smoothed_data) + num_forecasts).reshape(-1, 1) # Make the forecasts forecasts = model.predict(future_X) return smoothed_data, forecasts"},{"question":"Write a Python function `increment_nested_dictionary_values` that takes a nested dictionary and an integer increment value as inputs, and returns a new dictionary with all integer values in the nested dictionary incremented by the given increment value. The function will help you learn how to navigate and manipulate nested dictionaries in Python. The function `increment_nested_dictionary_values` should take two parameters: - `nested_dict`: A nested dictionary where values can be either integers or other dictionaries. - `increment_value`: An integer by which all integer values in the nested dictionary should be increased. The function should recursively traverse the nested dictionary, find all integer values, and increment them by the given increment value. Make sure that: - The original nested dictionary `nested_dict` remains unchanged. - The function returns a new dictionary with updated values. Create the function `increment_nested_dictionary_values(nested_dict: Dict, increment_value: int) -> Dict` to achieve this. **Example**: ```python nested_dict = { \\"level1\\": { \\"level2\\": { \\"value1\\": 1, \\"value2\\": 2 }, \\"level2_value1\\": 3 }, \\"level1_value\\": 4 } increment_value = 10 print(increment_nested_dictionary_values(nested_dict, increment_value)) ``` The output should be: ```python { \\"level1\\": { \\"level2\\": { \\"value1\\": 11, \\"value2\\": 12 }, \\"level2_value1\\": 13 }, \\"level1_value\\": 14 } ``` In this example, all integer values in the nested dictionary are incremented by 10.","solution":"def increment_nested_dictionary_values(nested_dict, increment_value): Recursively increments all integer values in a nested dictionary by the given increment value. :param nested_dict: A dictionary which may contain nested dictionaries with integer values :param increment_value: The integer value to increment each integer in the dictionary by :return: A new dictionary with all integer values incremented by increment_value new_dict = {} for key, value in nested_dict.items(): if isinstance(value, dict): new_dict[key] = increment_nested_dictionary_values(value, increment_value) elif isinstance(value, int): new_dict[key] = value + increment_value else: new_dict[key] = value return new_dict"},{"question":"You are working with a university database that stores information about courses and enrollment. The database is structured such that each row contains `student_id`, `course_id`, and `grade`. Your task is to create a Python function named `calculate_student_averages(filename)` that reads data from a CSV file, calculates the average grade for each student, and outputs the results to another CSV file named `student_averages.csv`. Each entry in the output CSV file should list the `student_id` and their average grade, with the average grade rounded to two decimal places. The output CSV file should include a header row: `[\'student_id\', \'average_grade\']`. The input file will have a similar structure to: ``` student_id,course_id,grade 1,CS101,85 2,CS102,90 1,CS103,78 3,CS101,65 2,CS101,100 ... ``` Important details: - Assume the first row is a header and should be ignored during processing. - Handle cases where a student might be enrolled in multiple courses. - Ensure your function calculates the correct average for each student and rounds the result to two decimal places.","solution":"import csv from collections import defaultdict def calculate_student_averages(filename): student_grades = defaultdict(list) # Read the input file and collect grades per student with open(filename, \'r\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: student_id = row[\'student_id\'] grade = float(row[\'grade\']) student_grades[student_id].append(grade) # Calculate and write the average grades to the output file with open(\'student_averages.csv\', \'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) writer.writerow([\'student_id\', \'average_grade\']) for student_id, grades in student_grades.items(): average_grade = round(sum(grades) / len(grades), 2) writer.writerow([student_id, average_grade])"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. The solution should ensure optimized prime checking for better performance on larger lists of integers. The function should output: list: A list containing only the prime numbers from the input list. You should write self-contained code starting with: ``` def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_numbers(integers): ```","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_numbers(integers): Returns a list of prime numbers from the input list `integers`. primes = [num for num in integers if is_prime(num)] return primes"},{"question":"You are given a list of strings where each string represents a sentence. The sentences contain a mix of uppercase and lowercase letters, and some punctuation. Your task is to implement a function called `capitalize_sentences` that performs the following tasks: 1. Accepts a list of strings as input. 2. Capitalizes the first letter of each sentence in every string. 3. Ensures that no other letters in the string are affected by the capitalization change. 4. Returns a new list of strings with the sentences correctly capitalized. **Function Signature:** ```python def capitalize_sentences(sentences: list) -> list: ``` **Parameters:** - `sentences (list)`: A list of strings where each string is a sentence or a collection of sentences. **Returns:** - `list`: A new list of strings with each sentence correctly capitalized. **Example:** Consider the following input list: ```python input_list = [\\"hello world! it\'s a great day.\\", \\"the quick brown fox jumps over the lazy dog. time to code!\\"] ``` Calling `capitalize_sentences(input_list)` should return: ```python [\\"Hello world! It\'s a great day.\\", \\"The quick brown fox jumps over the lazy dog. Time to code!\\"] ``` **Clarifications:** - Assume that each sentence ends with a period (.), exclamation mark (!), or question mark (?). - A sentence is defined as starting after an end punctuation mark followed by a space, or at the start of the string. - Ensure that no other letters are affected or changed to uppercase.","solution":"def capitalize_sentences(sentences: list) -> list: def capitalize_sentence(sentence: str) -> str: new_sentence = [] capitalize_next = True for char in sentence: if capitalize_next and char.isalpha(): new_sentence.append(char.upper()) capitalize_next = False else: new_sentence.append(char) if char in \'.!?\': capitalize_next = True return \'\'.join(new_sentence) return [capitalize_sentence(sentence) for sentence in sentences]"},{"question":"Write a Python function that accepts a list of integers and returns a new list where each element is the product of all elements in the original list except the one at the same index. The function should not use division and should be achieved with a time complexity of O(n). For example, for the input `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`. Your function should be named `product_except_self`, and it should take one parameter: - `nums`: A list of integers. Here\'s the function signature for reference: ```python def product_except_self(nums): # Your code here ``` Ensure that your implementation: 1. Handles empty input list by returning an empty list. 2. Handles input list of length 1 by returning a list containing the single element 1. 3. Efficiently computes the product of all elements except the one at the current index without using division. # Example Usage ```python print(product_except_self([1, 2, 3, 4])) # Output: [24, 12, 8, 6] print(product_except_self([2, 3])) # Output: [3, 2] print(product_except_self([1, 0])) # Output: [0, 1] print(product_except_self([])) # Output: [] print(product_except_self([10])) # Output: [1] ```","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in the original list except the one at the same index. length = len(nums) if length == 0: return [] elif length == 1: return [1] # Initialize prefix and postfix products prefix_products = [1] * length postfix_products = [1] * length result = [1] * length # Calculate prefix products for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate postfix products for i in range(length - 2, -1, -1): postfix_products[i] = postfix_products[i + 1] * nums[i + 1] # Calculate result as product of prefix and postfix products for i in range(length): result[i] = prefix_products[i] * postfix_products[i] return result"},{"question":"In this problem, you are required to write a function `is_valid_password(password: str) -> bool` that determines whether a given string is a valid password based on specific criteria. The function should evaluate the password and return `True` if it meets all the criteria and `False` otherwise. Here are the detailed specifications for the password validation: 1. **Function Name and Inputs:** - The function is named `is_valid_password`. - It takes a single argument, `password`, which is a string representing the password to be validated. 2. **Validation Requirements:** - The password must be at least 8 characters long. - The password must contain at least one uppercase letter. - The password must contain at least one lowercase letter. - The password must contain at least one digit. - The password must contain at least one special character from the set: `!@#%^&*()-_=+` 3. **Implementation Details:** - Use Python’s string methods to check for the presence of uppercase and lowercase letters. - Use Python’s string method `.isdigit()` to check for digits. - Use Python’s membership operators to check for special characters. Here’s the signature you need to implement: ```python def is_valid_password(password: str) -> bool: # Your code here ``` **Example:** ```python password = \\"Password123!\\" print(is_valid_password(password)) # It should print: True password = \\"password123\\" print(is_valid_password(password)) # It should print: False because there is no uppercase letter and no special character. ``` **Note:** Your implementation should handle edge cases such as empty strings and passwords that meet some but not all of the criteria.","solution":"def is_valid_password(password: str) -> bool: Checks if the given password is valid based on the specified criteria. A password is considered valid if it meets all the following conditions: - At least 8 characters long - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one digit - Contains at least one special character from the set: !@#%^&*()-_=+ :param password: The password string to check. :return: True if the password is valid, False otherwise. if len(password) < 8: return False has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) special_characters = set(\\"!@#%^&*()-_=+\\") has_special = any(c in special_characters for c in password) return has_upper and has_lower and has_digit and has_special"},{"question":"In this problem, you are required to deepen your understanding of string manipulation and pattern formation. Implement a function that generates a hourglass pattern using the asterisk character (\'*\'). The hourglass pattern should be symmetrical and centered. Write a function `generate_hourglass(n)` that takes an integer `n` as an input and prints the hourglass pattern with the maximum width of `n` asterisks. Note that `n` will always be an odd number. The output should be symmetric around both the horizontal and vertical axes. Here are the specifics of what your function should do: 1. The function `generate_hourglass(n)` should create an hourglass pattern. 2. The maximum width of the pattern at the center should be `n` asterisks. 3. Each subsequent row above and below the center should reduce by 2 asterisks until there is only 1 asterisk. 4. Ensure the pattern is centered, with appropriate leading spaces on each line for alignment. For example, for `n = 5`, the output should be: ``` ***** *** * *** ***** ``` And for `n = 7`, the output should be: ``` ******* ***** *** * *** ***** ******* ``` Here is an outline of the function\'s logic: ```python def generate_hourglass(n): Generate a symmetric hourglass pattern with maximum width `n` asterisks. # Your code here ```","solution":"def generate_hourglass(n): Generate a symmetric hourglass pattern with maximum width `n` asterisks. # Loop through the upper half including the center row for i in range(n//2 + 1): spaces = \' \' * i stars = \'*\' * (n - 2 * i) print(spaces + stars) # Loop through the lower half, excluding the center row for i in range(n//2 - 1, -1, -1): spaces = \' \' * i stars = \'*\' * (n - 2 * i) print(spaces + stars)"},{"question":"You are given a grid of size `m x n` with some obstacles. Your task is to write a function `shortest_path_with_obstacles(matrix: List[List[int]]) -> int` that calculates the length of the shortest path from the top-left corner to the bottom-right corner, where you can move up, down, left, or right. You cannot move through obstacles, represented by `1`, and you can only move through paths, represented by `0`. To solve this problem, you can use Breadth-First Search (BFS) for finding the shortest path in an unweighted grid. Here is a detailed description of the function requirements: **Function Name**: `shortest_path_with_obstacles` **Parameters**: - `matrix`: A 2D list of integers where `0` represents an empty cell and `1` represents an obstacle. The grid size is `m x n`. **Returns**: - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return `-1`. **Instructions**: 1. Initialize a queue for BFS with the starting point (0, 0). 2. Use a set to track visited cells. 3. Perform BFS to explore the shortest path to the target cell (m-1, n-1). 4. Track the distance for each cell during the BFS process. 5. If the queue is exhausted without reaching the target, return `-1`. Here is a template of the expected function: ```python from typing import List from collections import deque def shortest_path_with_obstacles(matrix: List[List[int]]) -> int: m, n = len(matrix), len(matrix[0]) if matrix[0][0] == 1 or matrix[m-1][n-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (m-1, n-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 ```","solution":"from typing import List from collections import deque def shortest_path_with_obstacles(matrix: List[List[int]]) -> int: m, n = len(matrix), len(matrix[0]) if matrix[0][0] == 1 or matrix[m-1][n-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (m-1, n-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"In this problem, you will be working with a basic version control system designed to track changes to a single text file. Your task is to implement a class that mimics the behavior of simple commit operations, storing versions of the file content and allowing rollback to previous versions. Here is what you need to do: - Implement a `VersionControl` class that supports the following methods: `commit`, `get_version`, and `rollback`. - `commit(content)`: Stores the provided content as a new version. - `get_version(version_number)`: Returns the content of the specified version. - `rollback(version_number)`: Reverts the current content to the specified version. Below is a brief description of the methods: - `commit(content)`: This method saves the current text content as a new version and assigns it a unique version number. - `get_version(version_number)`: Returns the content corresponding to the specified version number. If the version number is invalid, raise a `ValueError` with an appropriate message. - `rollback(version_number)`: Sets the current content to the content of the specified version. If the version number is invalid, raise a `ValueError` with an appropriate message. You are required to handle the version numbers such that the first commit starts at version number 1 and increments by 1 for each subsequent commit. Here is a skeleton of the `VersionControl` class for you to complete: ```python class VersionControl: def __init__(self): self.versions = [] self.current_version = 0 def commit(self, content): self.versions.append(content) self.current_version += 1 def get_version(self, version_number): if 1 <= version_number <= len(self.versions): return self.versions[version_number - 1] else: raise ValueError(\\"Invalid version number\\") def rollback(self, version_number): if 1 <= version_number <= len(self.versions): self.current_version = version_number else: raise ValueError(\\"Invalid version number\\") # Usage example vc = VersionControl() vc.commit(\\"First version\\") vc.commit(\\"Second version\\") wc.commit(\\"Third version\\") print(vc.get_version(2)) # Output: \\"Second version\\" vc.rollback(1) print(vc.get_version(vc.current_version)) # Output: \\"First version\\" ``` Your task is to complete the `VersionControl` class methods according to the above specifications.","solution":"class VersionControl: def __init__(self): self.versions = [] self.current_version = 0 def commit(self, content): self.versions.append(content) self.current_version = len(self.versions) def get_version(self, version_number): if 1 <= version_number <= len(self.versions): return self.versions[version_number - 1] else: raise ValueError(\\"Invalid version number\\") def rollback(self, version_number): if 1 <= version_number <= len(self.versions): self.current_version = version_number else: raise ValueError(\\"Invalid version number\\")"},{"question":"You are tasked with developing a function that evaluates the performance of searching for random integers in a pre-sorted list using binary search. The problem is broken down into the following parts: 1. **Generating a Sorted List**: - Create a list of 1,000,000 unique random integers in the range from -1,000,000 to 1,000,000. - Sort the list in ascending order. 2. **Binary Search Implementation**: - Implement a binary search algorithm that takes a sorted list and an integer to search for as input, and returns the index of the integer if found, or `-1` if not found. 3. **Function `benchmark_binary_search`**: - This function will: - Create and sort the list as described. - Conduct 100,000 binary searches for random integers within the list\'s range. - Use the `random.randint(a, b)` method to generate the integers for searching. - Use `time.time()` to measure and return the total time taken for performing all the searches. 4. **Library Requirements**: - Use the `random.randint(a, b)` method to generate random integers. - Use the `time.time()` function to measure the time performance accurately. **Function Signature:** ```python def benchmark_binary_search() -> float: # Function body... ``` **Example Usage:** ```python time_taken = benchmark_binary_search() print(f\\"Time taken for search: {time_taken} seconds\\") ``` Implementing the above function will enable you to measure the time efficiency of binary search on a large, pre-sorted dataset.","solution":"import random import time def generate_sorted_list(n, lower_bound, upper_bound): Generates a sorted list of unique random integers between lower_bound and upper_bound. random_set = set() while len(random_set) < n: random_set.add(random.randint(lower_bound, upper_bound)) sorted_list = sorted(random_set) return sorted_list def binary_search(sorted_list, target): Implements the binary search algorithm. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 mid_val = sorted_list[mid] if mid_val == target: return mid elif mid_val < target: left = mid + 1 else: right = mid - 1 return -1 def benchmark_binary_search(): Generates a sorted list of 1,000,000 unique random integers, performs 100,000 binary searches for random integers in the list\'s range, and measures the total time taken for performing all the searches. sorted_list = generate_sorted_list(1000000, -1000000, 1000000) start_time = time.time() for _ in range(100000): random_target = random.randint(-1000000, 1000000) binary_search(sorted_list, random_target) end_time = time.time() elapsed_time = end_time - start_time return elapsed_time"},{"question":"You are required to write a function that calculates the Greatest Common Divisor (GCD) of a list of positive integers. The function should be able to handle lists of variable length, including empty lists (for which it will return `None`). # Function Signature ```python def gcd_of_list(numbers: list) -> int: ... ``` # Parameters - `numbers`: A list of positive integers (`list[int]`) for which the GCD needs to be calculated. # Return Value - The function should return the GCD of the numbers in the list. If the list is empty, it should return `None`. # Requirements 1. Use the `math.gcd` function from the `math` module, or implement the Euclidean algorithm to find the GCD of two numbers. 2. Ensure the function efficiently handles lists of varying lengths and large numbers. 3. Include at least one example demonstrating how the function should be called and what the expected output would be. # Example If the list of numbers is as follows: ```python numbers = [48, 64, 80] ``` Calling `gcd_of_list(numbers)` should return: ```python 16 ``` If the list of numbers is as follows: ```python numbers = [3, 5, 9] ``` Calling `gcd_of_list(numbers)` should return: ```python 1 ``` If the list is empty: ```python numbers = [] ``` Calling `gcd_of_list(numbers)` should return: ```python None ```","solution":"import math from functools import reduce def gcd_of_list(numbers: list) -> int: Returns the greatest common divisor (GCD) of a list of positive integers. If the list is empty, return None. if not numbers: return None return reduce(math.gcd, numbers)"},{"question":"You are tasked with implementing a function named `nearest_neighbors` in Python that identifies the k nearest neighbors of a given point from a list of points in 2D space. The function should take the following parameters: 1. `points`: A list of tuples, where each tuple contains the coordinates of a point `(x, y)`. 2. `target`: A tuple `(x, y)` representing the coordinates of the target point. 3. `k`: An integer representing the number of nearest neighbors to find. The function should return a list of the k nearest neighbors\' coordinates, ordered by their distance to the target point in ascending order. If two points are at the same distance, maintain their order as provided in the `points` list. # Specific Instructions: 1. Use Euclidean distance to calculate the distance between points. 2. Use Python’s built-in `sorted` method with a suitable key to sort the points based on their distance to the target point. # Example Usage: ```python points = [(1, 2), (3, 4), (1, -1), (2, 2)] target = (1, 1) k = 2 nearest = nearest_neighbors(points, target) print(nearest) # [(1, 2), (2, 2)] ``` # Implementation Details: - Define a helper function to compute the Euclidean distance between two points. - Use the helper function inside the `nearest_neighbors` function to calculate the distances. - Sort the list of points based on their calculated distances. - Ensure the function returns exactly k points closest to the target. You are only required to implement the `nearest_neighbors` function.","solution":"import math def euclidean_distance(point1, point2): Calculates the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def nearest_neighbors(points, target, k): Identifies the k nearest neighbors of a target point from a list of points in 2D space. Parameters: points (list of tuples): List of coordinates (x, y). target (tuple): Coordinates (x, y) of the target point. k (int): Number of nearest neighbors to find. Returns: list of tuples: List of k nearest neighbors sorted by their distance to the target point. sorted_points = sorted(points, key=lambda point: euclidean_distance(point, target)) return sorted_points[:k]"},{"question":"Implement a function `generate_maze` that creates a maze of size `n x n` where `n` is an odd integer greater than or equal to 5. The maze should have exactly one solution from the top-left corner to the bottom-right corner. The maze can be generated using the depth-first search algorithm (DFS) and backtracking. Walls of the maze should be represented by a `\'#\'` character and open paths by a `\'.\'` character. Your `generate_maze` function should accept the following parameters: - `n`: The size of the maze. The function should return a 2D list representing the maze, where each element is either `\'#\'` or `\'.\'`. The function signature should look like this: ```python def generate_maze(n): ``` # Example For an input of `n=5`, an example of the generated maze might be: ```python [ [\'.\', \'#\', \'#\', \'#\', \'#\'], [\'.\', \'.\', \'.\', \'#\', \'#\'], [\'#\', \'#\', \'.\', \'#\', \'#\'], [\'#\', \'.\', \'.\', \'.\', \'.\'], [\'#\', \'#\', \'#\', \'#\', \'.\'] ] ```","solution":"import random def generate_maze(n): Generates an n x n maze using Depth First Search (DFS) and backtracking. n is an odd integer greater than or equal to 5. maze = [[\'#\'] * n for _ in range(n)] directions = [(-2, 0), (2, 0), (0, -2), (0, 2)] def is_valid(cell): x, y = cell return 0 <= x < n and 0 <= y < n def carve_passage_from(x, y): maze[x][y] = \'.\' random.shuffle(directions) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid((nx, ny)) and maze[nx][ny] == \'#\': mx, my = (x + nx) // 2, (y + ny) // 2 maze[mx][my] = \'.\' carve_passage_from(nx, ny) # Start maze generation at the top-left corner carve_passage_from(0, 0) # Ensure start and end points are open maze[0][0] = \'.\' maze[n-1][n-1] = \'.\' return maze"},{"question":"You are tasked with writing a function to evaluate the root mean squared error (RMSE) of a predictive model given the true values and the predicted values. RMSE is a standard way to measure the error of a model in predicting quantitative data. It essentially gives the square root of the average of the squares of the prediction errors. Specifically, you will implement the `rmse_func(y_true, y_pred)` function where: - `y_true` is a 1D numpy array of shape (n_samples,). It represents the vector of actual target values. - `y_pred` is a 1D numpy array of shape (n_samples,). It represents the vector of predicted target values by the model. Your function should: 1. Compute the RMSE using the formula: [ text{RMSE} = sqrt{frac{1}{n} sum_{i=1}^{n} (y_{true_i} - y_{pred_i})^2} ] where ( n ) is the number of samples, ( y_{true_i} ) is the actual value, and ( y_{pred_i} ) is the predicted value. 2. Use the `numpy` library, specifically the `numpy.sqrt` and `numpy.mean` functions to compute the RMSE. **Function Signature:** ```python def rmse_func(y_true, y_pred): pass ``` **Requirements:** 1. You must use `numpy.sqrt` to compute the square root. 2. You should use `numpy.mean` to compute the mean of the squared errors. 3. Your implementation should return the RMSE as a float.","solution":"import numpy as np def rmse_func(y_true, y_pred): Calculate the Root Mean Squared Error (RMSE) between true and predicted values. :param y_true: numpy array of shape (n_samples,), actual values. :param y_pred: numpy array of shape (n_samples,), predicted values. :return: float, RMSE value. # Calculate the squared differences squared_diffs = (y_true - y_pred) ** 2 # Calculate the mean of the squared differences mean_squared_error = np.mean(squared_diffs) # Calculate the RMSE rmse = np.sqrt(mean_squared_error) return rmse"},{"question":"You are tasked with creating a function `summarize_sales_data(file_path)` that reads a CSV file containing monthly sales data and computes summary statistics using the `pandas` library. The function should perform the following steps: 1. **Read the CSV file**: Read the contents of the file into a pandas DataFrame. 2. **Calculate Summary Statistics**: Compute the total sales, average sales per month, highest sales month, and lowest sales month. 3. **Return a Dictionary**: The function should return a dictionary containing these summary statistics. Assume the CSV file `file_path` has the following structure: - A column named \'month\' that contains the names of the months. - A column named \'sales\' that contains sales figures for each month. You need to make use of the following pandas functions/methods: - `pandas.read_csv` - `pandas.DataFrame.sum` - `pandas.DataFrame.mean` - `pandas.DataFrame.idxmax` - `pandas.DataFrame.idxmin` Here is how the function signature looks: ```python def summarize_sales_data(file_path): ```","solution":"import pandas as pd def summarize_sales_data(file_path): Reads a CSV file containing monthly sales data and computes summary statistics. Parameters: file_path (str): The path to the CSV file. Returns: dict: A dictionary with summary statistics including total sales, average sales per month, highest sales month, and lowest sales month. df = pd.read_csv(file_path) total_sales = df[\'sales\'].sum() average_sales = df[\'sales\'].mean() highest_sales_month = df.loc[df[\'sales\'].idxmax()][\'month\'] lowest_sales_month = df.loc[df[\'sales\'].idxmin()][\'month\'] return { \'total_sales\': total_sales, \'average_sales\': average_sales, \'highest_sales_month\': highest_sales_month, \'lowest_sales_month\': lowest_sales_month }"},{"question":"Implement a function that normalizes the numerical columns of a given DataFrame using Min-Max scaling. The function should exclude any non-numeric columns from the normalization process and retain them in the output DataFrame as they are. The function should raise an exception for: ValueError: If the input DataFrame does not contain any numeric columns. The function should output: pd.DataFrame: A DataFrame with normalized numerical columns and unchanged non-numeric columns. You should write self-contained code starting with: ``` import pandas as pd from sklearn.preprocessing import MinMaxScaler def normalize_dataframe(df): ```","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler def normalize_dataframe(df): Normalizes the numerical columns of a given DataFrame using Min-Max scaling. Parameters: df (pd.DataFrame): Input DataFrame containing numerical and non-numerical columns. Returns: pd.DataFrame: DataFrame with normalized numerical columns and unchanged non-numeric columns. Raises: ValueError: If the input DataFrame does not contain any numeric columns. numeric_cols = df.select_dtypes(include=[\'number\']).columns if len(numeric_cols) == 0: raise ValueError(\\"The input DataFrame does not contain any numeric columns.\\") scaler = MinMaxScaler() df[numeric_cols] = scaler.fit_transform(df[numeric_cols]) return df"},{"question":"You are required to implement a function that calculates the factorial of a given non-negative integer both iteratively and recursively. The function should be named `calculate_factorial` and it will return a tuple where the first element is the iteration result and the second element is the recursion result. Function Signature ```python def calculate_factorial(n: int) -> (int, int): ... ``` Parameters: - `n` (int): The non-negative integer for which the factorial is to be calculated. Requirements: 1. Implement the factorial calculation using a loop (iteratively). 2. Implement the factorial calculation using a recursive function. 3. Return a tuple containing both results (iterative result, recursive result). # Example For example, calling `calculate_factorial(5)` should return `(120, 120)` because `5! = 120`. # Hints - Remember that `0!` is `1` for both the iterative and recursive cases. - Factorial for any `n` > 0 is `n * (n-1)!`. - Carefully handle the base case in the recursive implementation to prevent infinite recursion.","solution":"def calculate_factorial(n: int) -> (int, int): Returns the factorial of a number calculated both iteratively and recursively. :param n: Non-negative integer to calculate the factorial. :return: A tuple containing the iterative result and the recursive result. def iterative_factorial(n): if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def recursive_factorial(n): if n == 0: return 1 else: return n * recursive_factorial(n - 1) iter_result = iterative_factorial(n) recur_result = recursive_factorial(n) return (iter_result, recur_result) # Example usage: # print(calculate_factorial(5)) # Output should be (120, 120)"},{"question":"--- You are tasked with simulating the behavior of an elevator system in a building with multiple floors. You will write a function `simulate_elevator_system(num_floors, num_operations, max_passengers)` that simulates the operations of the elevator over a series of events. The function will take in the following parameters: - `num_floors` (int): The number of floors in the building. - `num_operations` (int): The number of operations to simulate. - `max_passengers` (int): The maximum capacity of the elevator in terms of the number of passengers it can carry at any given time. The function should: 1. Initialize an elevator starting at floor 1 with no passengers. 2. Simulate a series of operations and keep track of the state of the elevator. The valid operations are: - `BOARD`: A random number of passengers (between 1 and 5) board the elevator. - `EXIT`: A random number of passengers (between 1 and the current number of passengers in the elevator) exit the elevator. - `MOVE_UP`: The elevator moves up one floor (if it is not already at the top floor). - `MOVE_DOWN`: The elevator moves down one floor (if it is not already at the ground floor). - `STATUS`: Print the current status of the elevator, including the current floor and the number of passengers. Ensure that the elevator does not exceed its maximum passenger capacity and does not move beyond the building\'s floors. ```python def simulate_elevator_system(num_floors, num_operations, max_passengers): # Your implementation here pass ``` **Example:** ```python input: num_floors = 10 num_operations = 15 max_passengers = 8 Example output (your actual output will vary due to randomness): [ \\"BOARD 3\\", \\"MOVE_UP\\", \\"MOVE_UP\\", \\"EXIT 2\\", \\"STATUS\\", ... ] ``` Your task is to generate various outputs based on random operations as described.","solution":"import random def simulate_elevator_system(num_floors, num_operations, max_passengers): Simulates the behavior of an elevator in a building with multiple floors. Parameters: num_floors (int): The number of floors in the building. num_operations (int): The number of operations to simulate. max_passengers (int): The maximum capacity of the elevator. Returns: List of strings representing the series of operations performed. current_floor = 1 current_passengers = 0 operations = [] for _ in range(num_operations): operation = random.choice([\\"BOARD\\", \\"EXIT\\", \\"MOVE_UP\\", \\"MOVE_DOWN\\", \\"STATUS\\"]) if operation == \\"BOARD\\": new_passengers = random.randint(1, 5) if current_passengers + new_passengers <= max_passengers: current_passengers += new_passengers operations.append(f\\"BOARD {new_passengers}\\") else: operations.append(\\"BOARD 0\\") elif operation == \\"EXIT\\": if current_passengers > 0: exiting_passengers = random.randint(1, current_passengers) current_passengers -= exiting_passengers operations.append(f\\"EXIT {exiting_passengers}\\") else: operations.append(\\"EXIT 0\\") elif operation == \\"MOVE_UP\\": if current_floor < num_floors: current_floor += 1 operations.append(\\"MOVE_UP\\") elif operation == \\"MOVE_DOWN\\": if current_floor > 1: current_floor -= 1 operations.append(\\"MOVE_DOWN\\") elif operation == \\"STATUS\\": operations.append(f\\"STATUS Floor:{current_floor} Passengers:{current_passengers}\\") return operations"},{"question":"**Problem Statement:** Your task is to create a function `merge_and_sort_lists` which takes two lists of integers and returns a merged list that is sorted in ascending order. The function should ensure that the resulting list contains only unique integers. **Input:** - `list1`: A list of integers. - `list2`: Another list of integers. **Output:** - A sorted list of unique integers obtained by merging the input lists. **Function Signature:** ```python def merge_and_sort_lists(list1, list2): pass ``` **Example:** ```python list1 = [1, 3, 5, 7] list2 = [2, 3, 5, 6] result = merge_and_sort_lists(list1, list2) print(result) ``` **Expected Output:** ```python [1, 2, 3, 5, 6, 7] ``` --- **Constraints:** 1. The length of `list1` and `list2` will be in the range `[0, 1000]`. 2. Each list element will be an integer in the range `[-10^6, 10^6]`. **Instructions:** 1. The function should first merge the two input lists into one list. 2. Use a set to remove duplicate elements. 3. Convert the set back to a list. 4. Sort the list in ascending order. 5. Return the sorted list. --- In this task, your goal is to demonstrate your ability to handle list manipulations, including merging, removing duplicates, and sorting. Make sure the solution is efficient and concise.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists, removes duplicates, and returns a sorted list. Args: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: list of int: A sorted list with unique integers. # Merge the lists merged_list = list1 + list2 # Remove duplicates by converting to a set unique_elements = set(merged_list) # Convert back to a list and sort sorted_list = sorted(unique_elements) return sorted_list"},{"question":"You need to implement a Python function that reads a dataset containing information about various books. The dataset includes columns such as \'title\', \'author\', \'rating\', and \'genre\'. Your function, named `top_rated_books_by_genre`, should take three parameters: the file path to the CSV file (`file_path`), the genre of interest (`genre`), and the number of top-rated books to return (`top_n`). The function should read the dataset into a pandas DataFrame, filter the data to include only the books of the specified genre, then return a DataFrame containing the top `top_n` books sorted by rating in descending order. If the genre is not present in the dataset or if there are fewer books than `top_n`, return all available books of that genre. Make sure your function performs the following steps: 1. **Read the dataset**: Use `pandas.read_csv` to load the dataset from the provided file path. 2. **Filter by genre**: Select only the rows where the \'genre\' matches the specified genre. 3. **Sort by rating**: Sort the filtered DataFrame by \'rating\' in descending order. 4. **Select top N**: Return the top `top_n` books from the sorted DataFrame. Here\'s the function signature: ```python import pandas as pd def top_rated_books_by_genre(file_path, genre, top_n): # Your implementation here pass # Example usage: # top_books = top_rated_books_by_genre(\'books.csv\', \'Fantasy\', 5) # print(top_books) ``` In this example, you should make sure that the function reads the book data correctly, applies the filters, sorts the data as specified, and handles edge cases where the genre isn\'t found or there are fewer books than `top_n`.","solution":"import pandas as pd def top_rated_books_by_genre(file_path, genre, top_n): Reads a dataset of books and returns the top N rated books for a specified genre. Parameters: - file_path (str): The path to the CSV file containing the book dataset. - genre (str): The genre of interest. - top_n (int): The number of top-rated books to return. Returns: - pd.DataFrame: A DataFrame containing the top N rated books of the specified genre. # Read the dataset df = pd.read_csv(file_path) # Filter by the specified genre genre_df = df[df[\'genre\'] == genre] # Sort by rating in descending order sorted_df = genre_df.sort_values(by=\'rating\', ascending=False) # Return the top N rated books return sorted_df.head(top_n)"},{"question":"You are tasked with creating a function to validate and process user registration data for a web application. Specifically, the objective is to ensure that the user has provided all mandatory fields and that these fields meet certain validation criteria. Once validated, the data should be stored in a dictionary. Your function, named `register_user`, should take the following parameters: - `username`: A string representing the username of the user. - `email`: A string representing the email address of the user. - `password`: A string representing the password of the user. - `age`: An integer representing the age of the user. Ensure the function includes the following validation rules: 1. `username` should be at least 5 characters long. 2. `email` should be a valid email format. 3. `password` should be at least 8 characters long and contain at least one number and one special character (e.g., @, #, , etc.). 4. `age` should be at least 18 years old. If any of these validations fail, the function should raise an appropriate exception with a descriptive error message. Otherwise, the function should store the sanitized and validated user data in a dictionary and return this dictionary. Below is a revised version of the code snippet with the appropriate validation methods and error handling: ```python import re def validate_email(email): email_regex = r\'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\' return re.match(email_regex, email) is not None def validate_password(password): password_regex = r\'^(?=.*[0-9])(?=.*[@#%^&+=]).{8,}\' return re.match(password_regex, password) is not None def register_user(username, email, password, age): if len(username) < 5: raise ValueError(\\"Username must be at least 5 characters long.\\") if not validate_email(email): raise ValueError(\\"Invalid email format.\\") if not validate_password(password): raise ValueError(\\"Password must be at least 8 characters long and contain at least one number and one special character.\\") if age < 18: raise ValueError(\\"Age must be at least 18.\\") user_data = { \\"username\\": username, \\"email\\": email, \\"password\\": password, \\"age\\": age } return user_data # Example usage: try: user = register_user(\\"testuser\\", \\"user@example.com\\", \\"Password@123\\", 25) print(\\"Registration successful:\\", user) except ValueError as ve: print(\\"Registration failed:\\", ve) ```","solution":"import re def validate_email(email): email_regex = r\'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\' return re.match(email_regex, email) is not None def validate_password(password): password_regex = r\'^(?=.*[0-9])(?=.*[@#%^&+=]).{8,}\' return re.match(password_regex, password) is not None def register_user(username, email, password, age): if len(username) < 5: raise ValueError(\\"Username must be at least 5 characters long.\\") if not validate_email(email): raise ValueError(\\"Invalid email format.\\") if not validate_password(password): raise ValueError(\\"Password must be at least 8 characters long and contain at least one number and one special character.\\") if age < 18: raise ValueError(\\"Age must be at least 18.\\") user_data = { \\"username\\": username, \\"email\\": email, \\"password\\": password, \\"age\\": age } return user_data"},{"question":"You are tasked with implementing a function to compute all possible permutations of a given string. This is useful in scenarios such as generating anagrams or exploring possible combinations of characters. **Function Name:** `generate_permutations` **Function Signature:** ```python def generate_permutations(s): Compute all possible permutations of a given string. Parameters: - s: str Input string. Returns: - permutations: list List of all possible permutations of the input string. ``` **Instructions:** 1. Use the `itertools.permutations` method to generate all possible permutations of the string `s`. 2. Convert each permutation tuple into a string and collect all strings into a list named `permutations`. 3. Ensure the `permutations` list contains unique permutations and is sorted in lexicographical order. 4. Return the `permutations` list. You will need to use the following `itertools` function: - `itertools.permutations` # Example: Assume we have the following string: ```python s = \\"abc\\" ``` Calling the function should look like: ```python generate_permutations(s) ``` And the output should be: ```python [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` # Notes: - Ensure that your function handles input strings of various lengths, including edge cases such as an empty string. - The function should return a sorted list of permutations, where each permutation is represented as a string.","solution":"import itertools def generate_permutations(s): Compute all possible permutations of a given string. Parameters: - s: str Input string. Returns: - permutations: list List of all possible permutations of the input string. # Generate all possible permutations using itertools.permutations perm_tuples = itertools.permutations(s) # Convert permutation tuples to strings and collect them in a list permutations = [\'\'.join(p) for p in perm_tuples] # Remove duplicates by converting the list to a set and back to a list # Sort the list lexicographically and return return sorted(set(permutations))"},{"question":"You are required to implement a Python function that calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm. The function should be able to take two integers as input and return their GCD. # Function Specification **Function Name:** `gcd` **Parameters:** - `a: int` — The first integer. - `b: int` — The second integer. **Returns:** - `int` — The greatest common divisor of the integers `a` and `b`. # Example Usage: ```python result = gcd(48, 18) print(result) # Output: 6 ``` # Explanation: The Euclidean algorithm for finding the GCD of `a` and `b` is based on the principle that the GCD of two numbers also divides their difference: 1. GCD(a, 0) = a 2. GCD(a, b) = GCD(b, a % b) # Requirements: - Implement the Euclidean algorithm in the `gcd` function. - Ensure that the function handles both positive and negative integers correctly. - If either `a` or `b` is zero, the GCD is the absolute value of the non-zero integer. Make sure to thoroughly test your function with a variety of inputs to verify its correctness.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"You are tasked with developing a monitoring system for an online store\'s sales performance. The store needs to keep track of its daily sales, calculate weekly sales totals, and identify the best-selling day of each week. Write a function named `weekly_sales_report` that meets the following requirements: 1. It takes two arguments: - `daily_sales`: A list of integers where each integer represents the sales for one day. The list length is always a multiple of 7 (e.g., 7, 14, 21, etc.). - `num_weeks`: An integer indicating the number of weeks for which the sales report should be generated. 2. The function should return a list of dictionaries where each dictionary represents one week. Each dictionary must contain: - `\'Week\'`: The week number (starting from 1). - `\'Total Sales\'`: The sum of the sales for that week. - `\'Best-Selling Day\'`: The day of the week with the highest sales for that week (e.g., \'Monday\', \'Tuesday\', etc.). You can assume that for any week, there will not be a tie for the best-selling day. Please implement the function as follows: ```python def weekly_sales_report(daily_sales, num_weeks): # Your implementation here ``` For example, if `daily_sales` is `[100, 200, 150, 300, 400, 250, 500, 600, 700, 800, 300, 200, 150, 100]` and `num_weeks` is 2, the function should return: ```python [ {\'Week\': 1, \'Total Sales\': 1900, \'Best-Selling Day\': \'Sunday\'}, {\'Week\': 2, \'Total Sales\': 2850, \'Best-Selling Day\': \'Wednesday\'} ] ```","solution":"def weekly_sales_report(daily_sales, num_weeks): days_of_week = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'] weeks = [] for i in range(num_weeks): week_sales = daily_sales[i * 7:(i + 1) * 7] total_sales = sum(week_sales) best_selling_day_index = week_sales.index(max(week_sales)) weeks.append({ \'Week\': i + 1, \'Total Sales\': total_sales, \'Best-Selling Day\': days_of_week[best_selling_day_index] }) return weeks"},{"question":"You are required to implement a function in Python using the NumPy library that computes the dot product of two vectors and then applies a Rectified Linear Unit (ReLU) activation function on the result. The ReLU function is represented as `f(x) = max(0, x)`, which means any negative input is set to zero, and any positive input is left unchanged. Consider the given example code that performs a similar computation with a Sigmoid activation function: ```python def sigmoid(x): return 1 / (1 + np.exp(-x)) def dot_product_with_sigmoid(vector1, vector2): dot_product = np.dot(vector1, vector2) return sigmoid(dot_product) ``` Similarly, you will define a `dot_product_with_relu(vector1, vector2)` function that calculates the dot product and then applies the ReLU function on this dot product. The vector inputs will be of the same length. - **Input:** Two 1-dimensional numpy arrays `vector1` and `vector2` of the same length. - **Output:** - The result after applying the ReLU activation on the dot product of `vector1` and `vector2`. **Your task:** - Implement the `dot_product_with_relu` function. - Use `numpy.dot` to compute the dot product. - Use the ReLU function to process the dot product result. **Example:** ```python import numpy as np def dot_product_with_relu(vector1, vector2): # Your implementation here pass # Example usage: v1 = np.array([-1, 2, 3]) v2 = np.array([4, 0, -2]) result = dot_product_with_relu(v1, v2) print(result) # Expected Output: 0 (since the dot product is -10, and ReLU of -10 is 0) ``` Implement the `dot_product_with_relu` function as described.","solution":"import numpy as np def relu(x): return max(0, x) def dot_product_with_relu(vector1, vector2): Computes the dot product of vector1 and vector2 and then applies the ReLU function. Args: vector1 (numpy array): A 1-dimensional numpy array. vector2 (numpy array): A 1-dimensional numpy array of the same length as vector1. Returns: float: The result after applying the ReLU function on the dot product of vector1 and vector2. dot_product = np.dot(vector1, vector2) return relu(dot_product)"},{"question":"You are asked to create a function called `analyze_weather_data` that reads weather data from a specified URL, processes this data, and generates a summary report. The weather data is in CSV format with columns: \'Date\', \'Temperature\', \'Humidity\', \'WindSpeed\', \'Precipitation\' and is separated by commas. Your function should: 1. Fetch the weather data from the provided URL. 2. Process the data to calculate and display the following metrics: - Average Temperature - Maximum Temperature - Minimum Temperature - Average Humidity - Total Precipitation 3. Implement basic error handling to manage potential issues such as missing columns or malformed data. 4. Return the summary report as a dictionary with the above metrics. Function signature: ```python def analyze_weather_data(weather_data_url: str) -> dict: # Your implementation here ``` Example: ```python weather_data_url = \'http://example.com/weather_data.csv\' summary_report = analyze_weather_data(weather_data_url) print(summary_report) ``` Expected output example: ```python { \'Average Temperature\': 23.5, \'Maximum Temperature\': 35.2, \'Minimum Temperature\': 15.6, \'Average Humidity\': 67.4, \'Total Precipitation\': 120.0 } ```","solution":"import requests import pandas as pd from io import StringIO def analyze_weather_data(weather_data_url: str) -> dict: try: # Fetch the weather data from the provided URL response = requests.get(weather_data_url) response.raise_for_status() # Raise an error on bad HTTP status # Convert the CSV data into a DataFrame csv_data = StringIO(response.text) df = pd.read_csv(csv_data) # Verify that the required columns are present required_columns = [\'Date\', \'Temperature\', \'Humidity\', \'WindSpeed\', \'Precipitation\'] if not all(column in df.columns for column in required_columns): raise ValueError(\'Missing one or more required columns.\') # Calculate the metrics average_temperature = df[\'Temperature\'].mean(skipna=True) max_temperature = df[\'Temperature\'].max(skipna=True) min_temperature = df[\'Temperature\'].min(skipna=True) average_humidity = df[\'Humidity\'].mean(skipna=True) total_precipitation = df[\'Precipitation\'].sum(skipna=True) # Create the summary report dictionary summary_report = { \'Average Temperature\': average_temperature, \'Maximum Temperature\': max_temperature, \'Minimum Temperature\': min_temperature, \'Average Humidity\': average_humidity, \'Total Precipitation\': total_precipitation } return summary_report except requests.RequestException as e: raise RuntimeError(f\\"Error fetching data from URL: {e}\\") except pd.errors.EmptyDataError: raise ValueError(\'The CSV data is empty or incorrectly formatted\') except ValueError as ve: raise ve"},{"question":"You are tasked with creating a function that determines whether a word\'s characters can be rearranged to form a palindrome. # Function Definition Create a function `canFormPalindrome(s)` that takes in one parameter: - `s`: A string containing only lowercase alphabetical characters. The function should return `True` if the characters of the string can be rearranged to form a palindrome, and `False` otherwise. # Requirements To solve this problem, you must: - Count the occurrence of each character in the string. - Determine if the characters can be rearranged to form a palindrome. # Constraints - You may use the `collections` module, specifically the `Counter` class, to count the characters. - Do not use any other external libraries. - The string will contain only lowercase alphabetic characters. - The function should handle strings of varying lengths, including an empty string. # Example ```python >>> canFormPalindrome(\\"civic\\") True >>> canFormPalindrome(\\"ivicc\\") True >>> canFormPalindrome(\\"hello\\") False >>> canFormPalindrome(\\"\\") True ``` # Explanation of Examples 1. \\"civic\\" is already a palindrome. 2. \\"ivicc\\" can be rearranged to \\"civic,\\" which is a palindrome. 3. \\"hello\\" cannot be rearranged to form a palindrome. 4. An empty string is trivially a palindrome.","solution":"from collections import Counter def canFormPalindrome(s): Determines if the characters of the string can be rearranged to form a palindrome. char_count = Counter(s) odd_count = sum(count % 2 == 1 for count in char_count.values()) return odd_count <= 1"},{"question":"You are to develop a simple command-line application to manage a to-do list. This problem will help you understand basic data structures, user input processing, and control flow in Python. Write a function named `todo_list_manager()` that will perform the following steps: 1. Print a welcome message introducing the to-do list manager. 2. Initialize an empty list to store the to-do items. 3. Present a menu of actions to the user: - Add a new item - Remove an item by its number - View all items - Exit the application 4. Prompt the user to choose an action from the menu. Handle invalid inputs gracefully. 5. Implement each menu action: - For adding an item: Ask the user for the item description and add it to the list. - For removing an item: Display the numbered list of current items, ask the user for the item number to remove, and delete the corresponding item from the list. - For viewing all items: Display the numbered list of current items. - For exiting the application: Print a goodbye message and end the function. 6. Ensure the menu is displayed again after an action is completed, allowing the user to perform multiple actions until they choose to exit. # Example Here\'s an example of how the application might work: ``` Welcome to the To-Do List Manager! Menu: 1. Add a new item 2. Remove an item 3. View all items 4. Exit Please choose an action (1-4): (User inputs 1) Enter the description of the new item: (User inputs \'Buy groceries\') Item added. Menu: 1. Add a new item 2. Remove an item 3. View all items 4. Exit Please choose an action (1-4): (User inputs 3) Your To-Do List: 1. Buy groceries Menu: 1. Add a new item 2. Remove an item 3. View all items 4. Exit Please choose an action (1-4): (User inputs 4) Goodbye! ``` # Instructions: - You need to define only one function: `todo_list_manager()`. - No global variables should be used. - Use basic input/output functions and list operations to implement the functionality.","solution":"def todo_list_manager(): A simple command-line to-do list manager. print(\\"Welcome to the To-Do List Manager!\\") todo_list = [] while True: print(\\"nMenu:\\") print(\\"1. Add a new item\\") print(\\"2. Remove an item\\") print(\\"3. View all items\\") print(\\"4. Exit\\") try: action = int(input(\\"nPlease choose an action (1-4): \\")) if action == 1: item = input(\\"Enter the description of the new item: \\") todo_list.append(item) print(f\\"Item \'{item}\' added.\\") elif action == 2: if not todo_list: print(\\"No items to remove.\\") continue print(\\"Your To-Do List:\\") for idx, item in enumerate(todo_list): print(f\\"{idx + 1}. {item}\\") try: item_number = int(input(\\"Enter the number of the item to remove: \\")) - 1 if 0 <= item_number < len(todo_list): removed_item = todo_list.pop(item_number) print(f\\"Item \'{removed_item}\' removed.\\") else: print(\\"Invalid item number.\\") except ValueError: print(\\"Invalid input. Please enter a number.\\") elif action == 3: if todo_list: print(\\"Your To-Do List:\\") for idx, item in enumerate(todo_list): print(f\\"{idx + 1}. {item}\\") else: print(\\"Your To-Do List is empty.\\") elif action == 4: print(\\"Goodbye!\\") break else: print(\\"Invalid action. Please choose a number from 1 to 4.\\") except ValueError: print(\\"Invalid input. Please enter a number from 1 to 4.\\")"},{"question":"You\'re given a list of dictionaries representing multiple employees. Each dictionary contains the employee\'s unique `id`, their `name`, the `department` they work in, and their `salary`. Your task is to write a function named `find_top_earner` that identifies the employee with the highest salary in each department. The function should return a dictionary where the keys are the unique department names and the values are dictionaries containing the employee details (i.e., `id`, `name`, `salary`) of the top earner in that department. # Summary of what your function should do: 1. **Function Name**: `find_top_earner` 2. **Parameter**: - `employees: List[Dict[str, Union[str, int]]]` – A list of dictionaries where each dictionary represents an employee with keys `id`, `name`, `department`, and `salary`. 3. **Output**: - A dictionary where keys are department names and values are dictionaries with details of the top earner in that department. # Example Assume you have the following list of employees: ```python employees = [ {\'id\': 1, \'name\': \'Alice\', \'department\': \'Engineering\', \'salary\': 120000}, {\'id\': 2, \'name\': \'Bob\', \'department\': \'HR\', \'salary\': 80000}, {\'id\': 3, \'name\': \'Charlie\', \'department\': \'Engineering\', \'salary\': 130000}, {\'id\': 4, \'name\': \'David\', \'department\': \'Marketing\', \'salary\': 90000}, {\'id\': 5, \'name\': \'Eve\', \'department\': \'Marketing\', \'salary\': 95000}, {\'id\': 6, \'name\': \'Frank\', \'department\': \'HR\', \'salary\': 85000} ] ``` Calling `find_top_earner(employees)` should return: ```python { \'Engineering\': {\'id\': 3, \'name\': \'Charlie\', \'salary\': 130000}, \'HR\': {\'id\': 6, \'name\': \'Frank\', \'salary\': 85000}, \'Marketing\': {\'id\': 5, \'name\': \'Eve\', \'salary\': 95000} } ``` # Instructions - Implement the `find_top_earner` function. - Iterate through the list of employees to determine the highest earner in each department. - Ensure that the returned dictionary is structured as described, with department names as keys and employee details as values. # Note - If there are multiple employees with the same highest salary within a department, you can return any one of them. - You can assume that the `salary` values are numerical and that every employee has a valid `department` entry.","solution":"from typing import List, Dict, Union def find_top_earner(employees: List[Dict[str, Union[str, int]]]) -> Dict[str, Dict[str, Union[str, int]]]: Finds the employee with the highest salary in each department. Parameters: employees (list): A list of dictionaries where each dictionary represents an employee with keys `id`, `name`, `department`, and `salary`. Returns: dict: A dictionary where keys are department names and values are dictionaries with details of the top earner in that department. top_earners = {} for emp in employees: dept = emp[\'department\'] if dept not in top_earners or emp[\'salary\'] > top_earners[dept][\'salary\']: top_earners[dept] = { \'id\': emp[\'id\'], \'name\': emp[\'name\'], \'salary\': emp[\'salary\'] } return top_earners"},{"question":"In this problem, you need to write a Python function named `common_words` that identifies the most common words appearing in a set of text documents. You are provided with a directory named `documents` which contains multiple text files. Each file contains plain text. Your task is to find the k most common words across all the documents. **Function Signature:** ```python def common_words(k: int) -> List[str]: ``` **Input:** - `k` (int): The number of most common words to return. **Output:** - Returns a list of strings containing the `k` most common words in descending order of frequency. If there are ties in frequency, words should be sorted alphabetically. **Details:** 1. Read all the text files from the `documents` folder. 2. Use appropriate libraries to read the content of the text files. 3. Tokenize the text into words and convert them to lowercase. 4. Ignore punctuation and numbers. 5. Count the frequency of each word across all documents. 6. Return the `k` most common words sorted first by frequency (highest first), then alphabetically if frequencies are the same. **Example:** If the contents of the text files are: ``` document1.txt: \\"Hello world! This is a sample document.\\" document2.txt: \\"Document processing is essential. Hello again, world.\\" ``` And the input `k` is `3`, the function should return a list like: ``` [\\"hello\\", \\"document\\", \\"is\\"] ```","solution":"import os import re from collections import Counter from typing import List def common_words(k: int) -> List[str]: Identifies the k most common words appearing in the text documents in the \'documents\' directory. :param k: The number of most common words to return. :return: A list of the k most common words in descending order of frequency. documents_dir = \'documents\' word_counter = Counter() for filename in os.listdir(documents_dir): if filename.endswith(\'.txt\'): with open(os.path.join(documents_dir, filename), \'r\', encoding=\'utf-8\') as file: text = file.read().lower() words = re.findall(r\'b[a-z]+b\', text) word_counter.update(words) most_common_words = word_counter.most_common() most_common_words.sort(key=lambda x: (-x[1], x[0])) return [word for word, _ in most_common_words[:k]]"},{"question":"Create a function that reads a CSV file and returns the average value for a specified column. The CSV file will contain numeric values in each cell. The function should handle any potential errors gracefully, such as incorrect column names or non-numeric data in the specified column. The function should also be able to handle large files efficiently. The function should output: float: The average value of the specified column. You should write self-contained code starting with: ``` import csv def calculate_column_average(csv_file_path, column_name): ```","solution":"import csv def calculate_column_average(csv_file_path, column_name): try: total = 0 count = 0 with open(csv_file_path, mode=\'r\') as file: reader = csv.DictReader(file) if column_name not in reader.fieldnames: raise ValueError(f\\"Column name \'{column_name}\' does not exist in the CSV file.\\") for row in reader: try: value = float(row[column_name]) total += value count += 1 except ValueError: print(f\\"Non-numeric data found in column \'{column_name}\' and will be ignored.\\") if count == 0: raise ValueError(f\\"No numeric data found in column \'{column_name}\' to calculate average.\\") return total / count except FileNotFoundError: raise FileNotFoundError(f\\"CSV file at path \'{csv_file_path}\' does not exist.\\")"},{"question":"Develop a function named `find_longest_substring_with_k_distinct_chars` that finds the length of the longest substring with at most `k` distinct characters. Use the sliding window technique to efficiently solve the problem. The function should accept a string and an integer `k`, and return an integer representing the length of the longest substring that meets the criteria. To implement this, follow these steps: 1. Initialize pointers for the sliding window\'s start and end, and a dictionary to keep track of the character frequencies within the window. 2. Expand the window by moving the end pointer and updating the character frequencies. 3. If the number of distinct characters exceeds `k`, contract the window by moving the start pointer until the number of distinct characters is `k` or less. 4. Track and update the maximum length of valid substrings during the window adjustments. Ensure to use Python’s built-in data structures and functions to manage the sliding window and character frequencies efficiently. You must adhere to the following function signature: ```python def find_longest_substring_with_k_distinct_chars(s: str, k: int) -> int: pass ``` **Example:** Given: ```python s = \\"araaci\\" k = 2 ``` Output: ```python 4 # Longest substring with at most 2 distinct characters is \\"araa\\" which has length 4. ``` Given: ```python s = \\"cbbebi\\" k = 3 ``` Output: ```python 5 # Longest substrings with at most 3 distinct characters are \\"cbbeb\\" and \\"bbebi\\" which have length 5. ```","solution":"def find_longest_substring_with_k_distinct_chars(s: str, k: int) -> int: Finds the length of the longest substring with at most k distinct characters. if k == 0: return 0 start, max_length = 0, 0 char_frequency = {} for end in range(len(s)): char = s[end] if char not in char_frequency: char_frequency[char] = 0 char_frequency[char] += 1 while len(char_frequency) > k: start_char = s[start] char_frequency[start_char] -= 1 if char_frequency[start_char] == 0: del char_frequency[start_char] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a string consisting of lowercase alphabets and a dictionary where each key is a substring and the value is a list of words, write a function to find out if the string can be segmented into a space-separated sequence of one or more dictionary words. If the string can be segmented, return one possible way to segment it. If there are multiple ways, returning any one of them is fine. If it cannot be segmented, return an empty string. Assume that the dictionary contains all the required words and substrings needed for segmentation. The function should output: str: A string representing one way to segment the input string using the dictionary words, or an empty string if no segmentation is possible. You should write self-contained code starting with: ``` def word_break(s, word_dict): ```","solution":"def word_break(s, word_dict): Function to determine if the string can be segmented into a space-separated sequence of one or more dictionary words. Parameters: s (str): The input string. word_dict (dict): The dictionary where key is a substring and value is a list of words. Returns: str: One way to segment the input string using dictionary words, or an empty string if no segmentation is possible. def backtrack(index, path): # If we have consumed the entire string if index == len(s): return \\" \\".join(path) for end in range(index + 1, len(s) + 1): substring = s[index:end] if substring in word_dict: for word in word_dict[substring]: result = backtrack(end, path + [word]) if result: # If successful segmentation found return result return \\"\\" return backtrack(0, [])"},{"question":"Develop a function to evaluate the performance of a binary classification model using a variety of metrics. Your objective is to create a comprehensive function that calculates and prints out several evaluation metrics in a clear and organized manner. # Requirements: 1. Write a function named `evaluate_model` that takes the following parameters: - `true_labels`: A list of integers (0s and 1s) representing the actual class labels. - `predicted_labels`: A list of integers (0s and 1s) representing the predicted class labels generated by the model. 2. Within this function: - Calculate and print the confusion matrix using `sklearn.metrics.confusion_matrix`. - Calculate and print the accuracy using `sklearn.metrics.accuracy_score`. - Calculate and print the precision using `sklearn.metrics.precision_score`. - Calculate and print the recall using `sklearn.metrics.recall_score`. - Calculate and print the F1 score using `sklearn.metrics.f1_score`. 3. Additionally, plot a Receiver Operating Characteristic (ROC) curve: - Calculate the false positive rate and true positive rate using `sklearn.metrics.roc_curve`. - Plot the ROC curve using `matplotlib`. - Display the Area Under the Curve (AUC) on the plot using `sklearn.metrics.roc_auc_score`. 4. Ensure that the printed metrics and the ROC plot have appropriate titles and labels for clarity. Here is an example call to your function: ```python evaluate_model([1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]) ``` Consider using the following libraries: - `sklearn.metrics` - `matplotlib.pyplot`","solution":"from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_curve, roc_auc_score import matplotlib.pyplot as plt def evaluate_model(true_labels, predicted_labels): Evaluates the performance of a binary classification model using several metrics and plots the ROC curve. Parameters: - true_labels: List[int], actual class labels (0 and 1). - predicted_labels: List[int], predicted class labels (0 and 1). # Confusion Matrix cm = confusion_matrix(true_labels, predicted_labels) print(\\"Confusion Matrix:\\") print(cm) # Accuracy accuracy = accuracy_score(true_labels, predicted_labels) print(f\\"nAccuracy: {accuracy:.2f}\\") # Precision precision = precision_score(true_labels, predicted_labels) print(f\\"Precision: {precision:.2f}\\") # Recall recall = recall_score(true_labels, predicted_labels) print(f\\"Recall: {recall:.2f}\\") # F1 Score f1 = f1_score(true_labels, predicted_labels) print(f\\"F1 Score: {f1:.2f}\\") # ROC Curve and AUC fpr, tpr, _ = roc_curve(true_labels, predicted_labels) auc = roc_auc_score(true_labels, predicted_labels) plt.figure() plt.plot(fpr, tpr, color=\'blue\', lw=2, label=f\'ROC curve (area = {auc:.2f})\') plt.plot([0, 1], [0, 1], color=\'gray\', lw=2, linestyle=\'--\') plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(\'False Positive Rate\') plt.ylabel(\'True Positive Rate\') plt.title(\'Receiver Operating Characteristic (ROC) Curve\') plt.legend(loc=\\"lower right\\") plt.show()"},{"question":"In this exercise, you are required to implement a simple cache mechanism using a decorator. This is a common optimization technique that helps to speed up the execution of functions by storing the results of expensive function calls and reusing those results when the same inputs occur again. Your task is to write a function named `cached_func`, which uses a decorator to cache the return value of a function based on its arguments. If the function is called again with the same arguments, the cached value should be returned instead of executing the function again. The decorator should be defined within `cached_func`, and you should use this decorator on a sample function named `expensive_computation` which takes a single argument `n` and returns the sum of squares of all numbers from 1 to `n`. **Requirements:** - Use a dictionary to store cached results based on function arguments. - Ensure that function arguments can be used as dictionary keys (assume they are hashable). - Implement a cache eviction policy by limiting the cache size to a maximum of 5 entries. If a new entry is added when the cache is full, remove the oldest entry. Here is a template to get you started: ```python def cached_func(func): # Define the caching decorator here # Decorate the following example function @cached def expensive_computation(n): return sum(i * i for i in range(1, n + 1)) return expensive_computation # Usage expensive_computation(10) expensive_computation(20) expensive_computation(10) # This should return the cached result ``` Hints: - Consider using an OrderedDict from the `collections` module to maintain the order of insertions in the cache. - Ensure that the decorator works as intended regardless of the function it is applied to.","solution":"from collections import OrderedDict def cached_func(func): cache = OrderedDict() max_cache_size = 5 def wrapper(*args): if args in cache: # Move the used item to the end to maintain order cache.move_to_end(args) return cache[args] result = func(*args) cache[args] = result # Check cache size and evict the oldest entry if necessary if len(cache) > max_cache_size: cache.popitem(last=False) return result return wrapper @cached_func def expensive_computation(n): return sum(i * i for i in range(1, n + 1))"},{"question":"You are required to write a Python function `find_unique_numbers(arr)` that identifies and returns a list of unique numbers from a given list of integers. A number is considered unique if it appears only once in the list. 1. The input `arr` is a list of integers provided by the user. 2. The function should return the list of numbers that are unique in the same order they first appear in the input list. 3. If there are no unique numbers, the function should return an empty list. # Function Signature ```python def find_unique_numbers(arr): pass ``` Example Usage ```python print(find_unique_numbers([4, 5, 6, 5, 4, 8, 9])) # Output: [6, 8, 9] print(find_unique_numbers([2, 2, 3, 3, 4, 4])) # Output: [] print(find_unique_numbers([10, 20, 30, 40])) # Output: [10, 20, 30, 40] ``` # Constraints - Do not use any external libraries for this function except the standard library. - The algorithm should have a time complexity of O(n), where n is the length of the input list. - Consider efficiently handling cases where the input list is very large.","solution":"def find_unique_numbers(arr): Returns a list of unique numbers from the input list \'arr\'. A number is considered unique if it appears only once in the list. from collections import Counter # Count the frequency of each number in the input list frequency = Counter(arr) # Filter out the numbers that appear only once and return them in the same order they first appear unique_numbers = [num for num in arr if frequency[num] == 1] return unique_numbers"},{"question":"In this problem, you are required to create a function called `generate_classification_report` that takes a fitted binary classification model (using sklearn), a test dataset, and its true labels. The function should output a classification report, including precision, recall, f1-score, and support for each class. For this, use the following libraries: - `sklearn.metrics.classification_report` **Function Specification** ```python def generate_classification_report(model, X_test, y_test): Takes a fitted sklearn binary classification model, a test dataset, and true labels, and returns the classification report including precision, recall, f1-score, and support. Parameters ----------- model: sklearn binary classification model fit X_test: dataframe of test predictor values y_test: one-dimensional array or dataframe with true labels Returns -------- A printed classification report for model evaluation. ``` **Input:** - `model`: A binary classification model that has been trained using sklearn. - `X_test`: A dataframe containing the test predictor (input) values. - `y_test`: A one-dimensional array or dataframe containing the true test labels. **Output:** - The function should print a classification report showing the precision, recall, f1-score, and support for each class. # Libraries to be Used: 1. **sklearn.metrics.classification_report**: Use this function to generate the classification report. # Example Usage: ```python from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split from sklearn.datasets import load_breast_cancer import pandas as pd # Load dataset data = load_breast_cancer() X = pd.DataFrame(data.data, columns=data.feature_names) y = pd.Series(data.target) # Split dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train model model = LogisticRegression(max_iter=10000) model.fit(X_train, y_train) # Generate classification report generate_classification_report(model, X_test, y_test) ```","solution":"from sklearn.metrics import classification_report def generate_classification_report(model, X_test, y_test): Takes a fitted sklearn binary classification model, a test dataset, and true labels, and returns the classification report including precision, recall, f1-score, and support. Parameters ----------- model: sklearn binary classification model fit X_test: dataframe of test predictor values y_test: one-dimensional array or dataframe with true labels Returns -------- A printed classification report for model evaluation. y_pred = model.predict(X_test) report = classification_report(y_test, y_pred) print(report) return report"},{"question":"Write a function to determine the longest substring of consecutive characters in a given string that contains at most `k` distinct characters. You may assume that the input string contains only lowercase alphabetical characters. The function should return the length of the longest such substring. The function signature should be: ``` def longest_substring_with_k_distinct_characters(s: str, k: int) -> int: ```","solution":"def longest_substring_with_k_distinct_characters(s: str, k: int) -> int: if k == 0 or not s: return 0 start = 0 max_length = 0 char_count = {} for end in range(len(s)): if s[end] in char_count: char_count[s[end]] += 1 else: char_count[s[end]] = 1 while len(char_count) > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"--- Implement a Python function that takes a list of integers and returns the sum of the largest contiguous subarray within the given list. This problem is often referred to as the \\"Maximum Subarray Problem\\" and can be solved using Kadane\'s Algorithm for an optimal solution. The function, named `max_contiguous_subarray_sum`, should be defined as follows: ```python def max_contiguous_subarray_sum(nums: list) -> int: # Your implementation here ``` # Function Details: - **Input:** A list `nums` containing ( n ) integers where ( 1 leq n leq 10^5 ) and each integer is in the range ([-10^5, 10^5]). - **Output:** An integer representing the sum of the largest contiguous subarray within the input list. # Requirements: 1. Implement an efficient solution that works in linear time, ( O(n) ), using Kadane\'s Algorithm. 2. Handle cases where all numbers in the list may be negative. # Algorithm Outline: 1. Initialize two variables: `current_sum` and `max_sum`. Set both to the value of the first element in the list. 2. Iterate through the list starting from the second element. 3. At each step, update `current_sum` to be the maximum of the current element and the sum of `current_sum` and the current element. 4. Update `max_sum` to be the maximum of `max_sum` and `current_sum`. 5. At the end of the iteration, `max_sum` will hold the sum of the largest contiguous subarray. # Example Usage: ```python nums = [-2,1,-3,4,-1,2,1,-5,4] result = max_contiguous_subarray_sum(nums) print(result) # Outputs 6 which is the sum of the subarray [4, -1, 2, 1] ``` # Hints: - Pay attention to handling edge cases, such as when the list has only one element. - Consider the case when all elements are negative and ensure your implementation correctly identifies the largest subarray in such scenarios.","solution":"def max_contiguous_subarray_sum(nums: list) -> int: Finds the maximum sum of a contiguous subarray using Kadane\'s Algorithm. Parameters: nums (list): A list of integers. Returns: int: The sum of the largest contiguous subarray. if not nums: return 0 # Case when the input list is empty, though problem constraints promise at least one item current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that finds the shortest path in a directed graph with positive weights using Dijkstra\'s algorithm. Your function should take an adjacency matrix of the graph and two vertices as input, and return the shortest path as a list of vertices from the start vertex to the end vertex. The function signature should be: ``` def shortest_path_dijkstra(adjacency_matrix, start_vertex, end_vertex): ```","solution":"import heapq def shortest_path_dijkstra(adjacency_matrix, start_vertex, end_vertex): Finds the shortest path in a directed graph with positive weights using Dijkstra\'s algorithm. Parameters: - adjacency_matrix (list of lists): The graph\'s adjacency matrix where adjacency_matrix[i][j] represents the edge weight from vertex i to vertex j. A value of float(\'inf\') indicates no edge. - start_vertex (int): The starting vertex. - end_vertex (int): The ending vertex. Returns: - list: The shortest path from start_vertex to end_vertex as a list of vertices. n = len(adjacency_matrix) distances = [float(\'inf\')] * n distances[start_vertex] = 0 priority_queue = [(0, start_vertex)] previous_vertices = [-1] * n while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in enumerate(adjacency_matrix[current_vertex]): if weight != float(\'inf\'): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_vertices[neighbor] = current_vertex heapq.heappush(priority_queue, (distance, neighbor)) path = [] current_vertex = end_vertex while current_vertex != -1: path.append(current_vertex) current_vertex = previous_vertices[current_vertex] path.reverse() if path[0] == start_vertex: return path return []"},{"question":"You are required to implement a function named `parse_nested_lists` that takes a string representation of a nested list and converts it into a corresponding Python list of integers. The input string will be a valid nested list and may contain integers, lists of integers, or nested lists of integers (e.g., `\\"[1, [2, [3]], 4]\\"`). # Function Signature ```python def parse_nested_lists(input_str: str) -> list: pass ``` # Detailed Requirements 1. The input string will contain only integers, commas, spaces, square brackets `[ ]`, and no other characters. 2. The output should be a Python list of integers, where the nested structure of lists is preserved. 3. You cannot use the `eval` function or the `ast.literal_eval` function for this task. 4. Handle any level of nesting. # Example Usage ```python # Example 1 input_str = \\"[1, 2, [3, 4, [5, 6]], 7]\\" result = parse_nested_lists(input_str) # result should be [1, 2, [3, 4, [5, 6]], 7] # Example 2 input_str = \\"[[1, 2], [3, 4, [5]], 6]\\" result = parse_nested_lists(input_str) # result should be [[1, 2], [3, 4, [5]], 6] # Example 3 input_str = \\"[]\\" result = parse_nested_lists(input_str) # result should be [] ``` # Important Notes - Ensure your function can handle nested lists to any depth. - Avoid using built-in Python functions that directly interpret string representations of Python objects. Instead, manually parse the string to construct the nested lists. - Leading and trailing spaces in the input string should be ignored.","solution":"def parse_nested_lists(input_str: str) -> list: def parse_helper(s, index): result = [] num = \'\' while index < len(s): char = s[index] index += 1 if char.isdigit() or (char == \'-\' and num == \'\'): num += char elif char == \',\': if num: result.append(int(num)) num = \'\' elif char == \'[\': nested_list, index = parse_helper(s, index) result.append(nested_list) elif char == \']\': if num: result.append(int(num)) num = \'\' return result, index if num: result.append(int(num)) return result, index input_str = input_str.strip() if input_str == \\"[]\\": return [] parsed_list, _ = parse_helper(input_str, 1) return parsed_list"},{"question":"You are required to write a Python function, `compute_station_stats(df, filters)`, that calculates and prints statistics on the start and end stations from a given dataset. This function is designed to help users understand patterns in the usage of stations in a dataset filtered by specific criteria such as user type and gender. Your function should: 1. Print out the filters applied to the dataset. 2. Compute and print: - The most commonly used start station. - The most commonly used end station. - The most frequent combination of start station and end station trip. 3. Measure and print the time taken to compute these statistics using the `time.time()` function. You will need to use the Pandas library to handle the DataFrame (`df`) and the `time` library to measure the performance of your computations. Function Requirements: - The function must be named `compute_station_stats`. - Parameters: - `df`: A Pandas DataFrame containing city trip data filtered by specific criteria. - `filters`: A string containing the filters applied to the DataFrame. - The function should not return any value; instead, it should print the solutions directly to the console. Here is an example call to your function: ```python import pandas as pd import time # Example usage: data = { \'Start Station\': [\'Station A\', \'Station B\', \'Station A\', \'Station C\', \'Station A\', \'Station B\'], \'End Station\': [\'Station D\', \'Station A\', \'Station A\', \'Station B\', \'Station D\', \'Station C\'] } df = pd.DataFrame(data) filters = \'User Type: Subscriber, Gender: Male\' compute_station_stats(df, filters) ```","solution":"import pandas as pd import time def compute_station_stats(df, filters): Calculate and print statistics on the most popular stations in a DataFrame filtered by specific criteria. Parameters: - df : pandas.DataFrame : DataFrame containing city trip data - filters : str : string representation of the filters applied print(f\\"nCalculating The Most Popular Stations & Trip...n\\" f\\"Filters applied: {filters}n\\") start_time = time.time() # Most commonly used start station most_common_start_station = df[\'Start Station\'].mode()[0] print(f\\"Most commonly used start station: {most_common_start_station}\\") # Most commonly used end station most_common_end_station = df[\'End Station\'].mode()[0] print(f\\"Most commonly used end station: {most_common_end_station}\\") # Most frequent combination of start station and end station trip df[\'Start-End Combination\'] = df[\'Start Station\'] + \\" -> \\" + df[\'End Station\'] most_common_trip = df[\'Start-End Combination\'].mode()[0] print(f\\"Most frequent combination of start station and end station trip: {most_common_trip}\\") end_time = time.time() print(f\\"nThis took {end_time - start_time:.4f} seconds.\\")"},{"question":"You are given a binary tree with `n` nodes, where each node contains an integer value. Your task is to write a function `find_max_sum_path(root)` that finds the path from the root to a leaf node such that the sum of the values of the nodes along the path is maximized. A binary tree node is represented by the following class definition: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` The function signature: ```python def find_max_sum_path(root: TreeNode) -> int: # Your code here ``` # Input: - `root`: The root node of the binary tree. # Output: - Return the maximum sum of values from the root to a leaf node. # Example: ```python # Construct the binary tree # 10 # / # 5 15 # / / # 2 8 12 20 root = TreeNode(10) root.left = TreeNode(5) root.right = TreeNode(15) root.left.left = TreeNode(2) root.left.right = TreeNode(8) root.right.left = TreeNode(12) root.right.right = TreeNode(20) find_max_sum_path(root) ``` # Explanation: In the given example, the path with the maximum sum is 10 -> 15 -> 20, which gives a total sum of 45. Thus, the function should return 45. Make sure to traverse all possible paths from the root to the leaf nodes and compute the sum for each path, returning the maximum sum found.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_sum_path(root: TreeNode) -> int: def helper(node): if not node: return 0 left_sum = helper(node.left) right_sum = helper(node.right) return node.value + max(left_sum, right_sum) return helper(root)"},{"question":"Create a Python script that reads a CSV file containing sales data with columns `Date`, `Sales`, and `Region`. The script should calculate the total sales for each region and plot this information using Matplotlib. The function should return a dictionary with regions as keys and their respective total sales as values, along with the Matplotlib axis object showing the pie chart distribution of sales by region. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(csv_file): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(csv_file): # Read the CSV file into a DataFrame sales_data = pd.read_csv(csv_file) # Calculate the total sales for each region total_sales_by_region = sales_data.groupby(\'Region\')[\'Sales\'].sum().to_dict() # Plot the pie chart fig, ax = plt.subplots() ax.pie(total_sales_by_region.values(), labels=total_sales_by_region.keys(), autopct=\'%1.1f%%\') ax.set_title(\'Total Sales by Region\') # Show the plot plt.show() return total_sales_by_region, ax"},{"question":"You need to implement a function named `longest_word_in_sentence` that accepts a string representing a sentence and returns the longest word in that sentence. If there are multiple words of the same maximum length, return the one that appears first in the sentence. A word is defined as a sequence of non-space characters. You can assume that the input sentence will contain only alphabetic characters and spaces, with no punctuation. **Requirements:** 1. The function should correctly identify and return the longest word in the given sentence. 2. If there are multiple words with the same length, return the first one. 3. If the input sentence is an empty string, return an empty string. **Function Signature:** ```python def longest_word_in_sentence(sentence: str) -> str: pass ``` **Example:** ```python # Example call to the function result = longest_word_in_sentence(\\"I love programming in Python\\") print(result) # Should print \\"programming\\" ```","solution":"def longest_word_in_sentence(sentence: str) -> str: Returns the longest word in the given sentence. If there are multiple words with the same length, return the first one. If the input sentence is an empty string, return an empty string. if not sentence: return \\"\\" words = sentence.split() longest_word = max(words, key=len) return longest_word"},{"question":"Suppose you are developing a software application that processes text to perform various operations. One task you need to automate is to find the most common word in a given paragraph, ignoring case and punctuation. * Create a function `most_common_word(paragraph)` that: 1. Takes a string `paragraph` as input. 2. Splits the string into words, normalizing case (all characters should be lower-case). 3. Removes any punctuation attached to words (e.g., \\"hello!\\" should be considered as \\"hello\\"). 4. Finds and returns the word that appears most frequently. In case of a tie, return any one of the most frequent words. * You may assume that the input paragraph will have at least one word. Example: ```python print(most_common_word(\\"Hello, hello! How are you? You are you hello.\\")) # Output: \'hello\' print(most_common_word(\\"This is a test. This test is easy, and this is also a test!\\")) # Output: \'this\' or \'test\' or \'is\' ``` Educational objectives: 1. Learn to manipulate strings in Python. 2. Gain experience with string methods such as `split`, `lower`, and `strip`. 3. Understand how to use the `collections` module, particularly the `Counter` class, to count word frequencies. 4. Practice implementing basic text processing and cleaning techniques. Function to be implemented: ```python def most_common_word(paragraph): # Implementation details pass ```","solution":"import re from collections import Counter def most_common_word(paragraph): Finds the most common word in the given paragraph, ignoring case and punctuation. :param paragraph: str :return: str # Remove punctuation and convert to lower case words = re.findall(r\'w+\', paragraph.lower()) # Count the frequency of each word word_counter = Counter(words) # Find the most common word most_common = word_counter.most_common(1)[0][0] return most_common"},{"question":"You are tasked with writing a Python function that parses a given mathematical expression string and evaluates it. The input will be a string containing a valid mathematical expression using addition (+), subtraction (-), multiplication (*), division (/), and parentheses for grouping. The goal is to implement a function named `evaluate_expression` that returns the result of the expression. Requirements: 1. Your implementation should correctly handle operator precedence and parentheses. 2. The `evaluate_expression` function should handle any valid mathematical expression passed as a string. 3. You can assume that the input will always be a valid expression. The following example usage provides the expected behavior: ```python def evaluate_expression(expression): # Your implementation here # Example usage print(evaluate_expression(\\"2 + 3 * (2 - 1)\\")) # Output: 5 print(evaluate_expression(\\"10 / 2 + 3 * 2\\")) # Output: 11 print(evaluate_expression(\\"(2 + 2) * 2\\")) # Output: 8 print(evaluate_expression(\\"3 + 4 / 2\\")) # Output: 5.0 print(evaluate_expression(\\"10 - (3 * 2)\\")) # Output: 4 ``` Implement the `evaluate_expression` function so it correctly parses and evaluates the given mathematical expression string.","solution":"def evaluate_expression(expression): Parses and evaluates the given mathematical expression string. Args: expression (str): The mathematical expression to evaluate. Returns: float: The result of evaluating the expression. def parse_expression(expr): import re from operator import add, sub, mul, truediv expression = re.sub(r\'s+\', \'\', expr) # Remove whitespace tokens = re.findall(r\'d+.?d*|[+-*/()]\', expression) op_precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} ops = [] vals = [] def apply_ops(): op = ops.pop() right = vals.pop() left = vals.pop() if op == \'+\': vals.append(add(left, right)) elif op == \'-\': vals.append(sub(left, right)) elif op == \'*\': vals.append(mul(left, right)) elif op == \'/\': vals.append(truediv(left, right)) for token in tokens: if token.isdigit() or \'.\' in token: vals.append(float(token)) elif token == \'(\': ops.append(token) elif token == \')\': while ops[-1] != \'(\': apply_ops() ops.pop() else: # Operator while (ops and ops[-1] in op_precedence and op_precedence[ops[-1]] >= op_precedence[token]): apply_ops() ops.append(token) while ops: apply_ops() return vals[0] return parse_expression(expression)"},{"question":"You are tasked with writing a function that takes a list of integers and returns the second-largest distinct integer from the list. If there is no second largest distinct integer (because there aren\'t enough unique values), the function should return `None`. The function to implement is `second_largest(numbers)`, which takes one argument: - `numbers`: A list of integers which may contain duplicates. Steps to implement the function: 1. Handle the edge case where the list is empty or contains less than two distinct integers, returning `None` in these scenarios. 2. Use a set to filter out duplicate values. 3. Convert the set back to a list and sort it in descending order. 4. Return the second item from this sorted list as the second largest distinct integer. Function prototype: ```python def second_largest(numbers): pass ``` **Example:** ```python print(second_largest([4, 1, 3, 2, 5, 3, 5])) # Output: 4 print(second_largest([10, 20, 20])) # Output: 10 print(second_largest([3])) # Output: None print(second_largest([])) # Output: None ``` The first example has distinct numbers [1, 2, 3, 4, 5] and the second-largest is 4. The second example has distinct numbers [10, 20] and the second-largest is 10.","solution":"def second_largest(numbers): Returns the second largest distinct integer from the list. If the list has fewer than two distinct integers, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that simulates a simplified version of a stock trading platform. The function should: 1. Maintain a list of available shares for different companies, each with an associated price. 2. Process buy and sell orders from users. 3. Ensure a user has sufficient funds to complete a buy order and sufficient shares to complete a sell order. 4. Update the user\'s current portfolio and available funds after each transaction. The function should output: 1. The updated list of available shares. 2. A summary of the user\'s portfolio, including the number of shares owned for each company. 3. The user\'s remaining balance in funds. The function should start with: ```python def stock_trading(initial_funds, shares_available): ```","solution":"def stock_trading(initial_funds, shares_available): Simulates a simplified stock trading platform. :param initial_funds: Initial amount of funds the user has. :param shares_available: Dictionary with company names as keys and a tuple of (available shares, price per share) as values. :return: A function that processes user transactions. user_portfolio = {} user_funds = initial_funds def process_transaction(transaction_type, company, quantity): nonlocal user_funds, shares_available, user_portfolio if company not in shares_available: return \\"Company not found.\\" available_shares, price_per_share = shares_available[company] if transaction_type == \\"buy\\": total_cost = quantity * price_per_share if total_cost > user_funds: return \\"Insufficient funds to buy.\\" if quantity > available_shares: return \\"Insufficient shares available to buy.\\" # Update funds and shares user_funds -= total_cost shares_available[company] = (available_shares - quantity, price_per_share) if company in user_portfolio: user_portfolio[company] += quantity else: user_portfolio[company] = quantity elif transaction_type == \\"sell\\": if company not in user_portfolio or user_portfolio[company] < quantity: return \\"Insufficient shares to sell.\\" total_revenue = quantity * price_per_share # Update funds and shares user_funds += total_revenue shares_available[company] = (available_shares + quantity, price_per_share) user_portfolio[company] -= quantity if user_portfolio[company] == 0: del user_portfolio[company] else: return \\"Invalid transaction type.\\" return { \\"available_shares\\": shares_available, \\"user_portfolio\\": user_portfolio, \\"user_funds\\": user_funds } return process_transaction"},{"question":"You are working on a project that requires analyzing the distribution of categories within a dataset. Your goal is to implement a function named `category_distribution` that computes the percentage of each category in a given list of categories. The function should return a dictionary where the keys are the unique categories, and the values are their respective percentages in the list. **Function Signature:** ```python def category_distribution(categories): Compute the percentage of each category in the given list. Parameters: - categories: list A list of categories (strings). Returns: - distribution_dict: dict A dictionary with unique categories as keys and their corresponding percentages as values. pass ``` **Example Usage:** ```python # Example list of categories categories = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] # Compute the category distribution distribution = category_distribution(categories) # Display the result print(distribution) # Output: {\'apple\': 50.0, \'banana\': 33.33, \'orange\': 16.67} ```","solution":"def category_distribution(categories): Compute the percentage of each category in the given list. Parameters: - categories: list A list of categories (strings). Returns: - distribution_dict: dict A dictionary with unique categories as keys and their corresponding percentages as values. from collections import Counter total_count = len(categories) category_counts = Counter(categories) distribution_dict = {k: round((v / total_count) * 100, 2) for k, v in category_counts.items()} return distribution_dict"},{"question":"A warehouse employs an automated robot to manage and organize items on shelves. Every item has a unique ID and is placed on a specific shelf. The robot uses a list of instructions to either move to a new shelf or pick up an item. You are tasked with implementing a function, `update_robot_position`, that simulates the movement of the robot based on a list of instructions. The robot keeps track of its current shelf, and each instruction in the list either tells it to move to a specific shelf or to pick up an item from its current shelf. The instructions are represented as a list of tuples where each tuple has two elements: a string (the type of instruction: \\"move\\" or \\"pick\\") and an integer for the shelf ID or item ID. The function should output a dictionary with the final shelf ID and a list of picked item IDs. # Function Signature ```python def update_robot_position(instructions: list) -> dict: pass ``` # Parameters - `instructions` (list): A list of tuples where each tuple contains: - A string (\\"move\\" or \\"pick\\"): Describes the type of instruction. - An integer: If the instruction is \\"move\\", this integer represents the new shelf ID. If the instruction is \\"pick\\", this integer represents the item ID to be picked. # Returns - `dict`: A dictionary with two keys: - \\"current_shelf\\" (int): The ID of the shelf where the robot ends up. - \\"picked_items\\" (list): A list of item IDs that were picked by the robot. # Example ```python instructions = [(\\"move\\", 3), (\\"pick\\", 101), (\\"move\\", 5), (\\"pick\\", 102)] print(update_robot_position(instructions)) # Output: {\\"current_shelf\\": 5, \\"picked_items\\": [101, 102]} instructions = [(\\"move\\", 1), (\\"move\\", 2), (\\"pick\\", 201), (\\"move\\", 3)] print(update_robot_position(instructions)) # Output: {\\"current_shelf\\": 3, \\"picked_items\\": [201]} ``` Your task is to ensure that the robot\'s position is accurately updated based on the \\"move\\" and \\"pick\\" instructions and that the function produces the expected output dictionary.","solution":"def update_robot_position(instructions): Simulates the robot\'s movement and picking of items based on provided instructions. current_shelf = None picked_items = [] for instruction, value in instructions: if instruction == \\"move\\": current_shelf = value elif instruction == \\"pick\\": picked_items.append(value) return { \\"current_shelf\\": current_shelf, \\"picked_items\\": picked_items }"},{"question":"You are given a grid with 2D coordinates and a collection of points. The task is to write a function `find_nearest_point(grid_width: int, grid_height: int, points: List[Tuple[int, int]], reference_point: Tuple[int, int]) -> Tuple[int, int]` that will find the point nearest to a given reference point on the grid. The function should handle the following: 1. If `points` is empty, return `None`. 2. Always return the nearest point, even if multiple points are equidistant. In such cases, prefer the one appearing first in the `points` list. 3. The grid has dimensions defined by `grid_width` and `grid_height`, and both the points and the reference point will always lie within these bounds. The distance between two points ((x_1, y_1)) and ((x_2, y_2)) should be calculated using the Euclidean distance formula: [ text{distance} = sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} ] **Example:** Given: - `grid_width` = 10 - `grid_height` = 10 - `points` = [(1, 2), (3, 4), (5, 6)] - `reference_point` = (4, 4) Calling `find_nearest_point(10, 10, [(1, 2), (3, 4), (5, 6)], (4, 4))` should return `(3, 4)` since it is the closest point to the reference point (4, 4). **Requirements:** - Use the `math.sqrt` function from the math library to compute the square root. - Use the list and tuple data structures to handle the points and coordinate pairs.","solution":"from typing import List, Tuple, Optional import math def find_nearest_point(grid_width: int, grid_height: int, points: List[Tuple[int, int]], reference_point: Tuple[int, int]) -> Optional[Tuple[int, int]]: Finds the point nearest to the reference point on a grid. :param grid_width: Width of the grid :param grid_height: Height of the grid :param points: List of points as (x, y) tuples :param reference_point: Reference point as an (x, y) tuple :return: The nearest point to the reference point as a (x, y) tuple, or None if points is empty if not points: return None nearest_point = None min_distance = float(\'inf\') ref_x, ref_y = reference_point for point in points: x, y = point distance = math.sqrt((x - ref_x) ** 2 + (y - ref_y) ** 2) if distance < min_distance: min_distance = distance nearest_point = point return nearest_point"},{"question":"# Convert Word Frequencies to List of Tuples In text processing, it is often useful to represent the frequency of words occurring in a document. This problem requires you to determine the frequency of each word in a given list of words and return the result as a list of tuples, where each tuple contains a word and its respective frequency, sorted in descending order by their frequency. In case of ties in frequency, the words should be sorted alphabetically. # Task Write a function `word_frequencies(words)` that takes a list of words and returns a sorted list of tuples. The function should follow these specifications: - Name: `word_frequencies` - Input: - A list of strings `words` - Output: - A list of tuples, each containing a word and its frequency, sorted first by frequency in descending order, and then alphabetically for ties. # Example ```python >>> word_frequencies([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"]) [(\\"apple\\", 3), (\\"banana\\", 2), (\\"orange\\", 1)] >>> word_frequencies([\\"cat\\", \\"dog\\", \\"cat\\", \\"mouse\\", \\"dog\\", \\"dog\\"]) [(\\"dog\\", 3), (\\"cat\\", 2), (\\"mouse\\", 1)] >>> word_frequencies([\\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\"]) [(\\"b\\", 3), (\\"a\\", 2), (\\"c\\", 2)] ``` # Requirements Use the `Counter` class from the `collections` module to efficiently count the word frequencies. # Constraints - The input list `words` will always contain at least one word. - All words are assumed to be in lowercase and contain only alphabetical characters.","solution":"from collections import Counter def word_frequencies(words): Returns a list of tuples, each containing a word and its frequency, sorted first by frequency in descending order, and then alphabetically for ties. counter = Counter(words) return sorted(counter.items(), key=lambda x: (-x[1], x[0]))"},{"question":"Write a function to generate a Pascal\'s Triangle of a given number of rows. The function should output a 2D list representing the triangle. Each element in the 2D list represents one row in Pascal\'s Triangle. You should write self-contained code starting with: ``` def generate_pascals_triangle(num_rows): ```","solution":"def generate_pascals_triangle(num_rows): Generate Pascal\'s Triangle up to the given number of rows. Args: num_rows (int): The number of rows in Pascal\'s Triangle. Returns: List[List[int]]: A list of lists where each list represents a row in Pascal\'s Triangle. if num_rows <= 0: return [] triangle = [[1]] # Starting with the first row [1] for i in range(1, num_rows): row = [1] # Each row starts with a 1 for j in range(1, i): # Each element except the first and last in each row is the sum of the elements above it row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) # Each row ends with a 1 triangle.append(row) return triangle"},{"question":"You are tasked with implementing a **rotation** function, which takes a list `arr` of integers and an integer `k`, and rotates the list to the right by `k` positions. The function should be named `rotate_list`. **Steps for Rotation:** 1. Determine the length of the list `arr`. 2. Calculate the effective rotation by taking `k` modulo the length of the list. This accounts for cases where `k` is larger than the list length. 3. Slice the list at the appropriate position to achieve the rotation. - The new beginning of the list is the last `k` elements. - The remaining elements form the end of the rotated list. 4. Concatenate these two segments to form the rotated list. **Important:** - Handle edge cases like an empty list or when `k` is zero. - Ensure the function works efficiently even for large lists. You need to implement the function `rotate_list(arr: list, k: int) -> list`. Here\'s the function signature in Python: ```python def rotate_list(arr: list, k: int) -> list: pass ``` **Example:** ```python arr = [1, 2, 3, 4, 5, 6, 7] k = 3 print(rotate_list(arr, k)) # Output: [5, 6, 7, 1, 2, 3, 4] ``` ```python arr = [1, 2, 3, 4, 5] k = 10 print(rotate_list(arr, k)) # Output: [1, 2, 3, 4, 5] ```","solution":"def rotate_list(arr, k): Rotates the list `arr` to the right by `k` positions. if not arr: return arr k = k % len(arr) # Calculate effective rotation return arr[-k:] + arr[:-k]"},{"question":"You need to create a function to generate the Fibonacci sequence up to the nth number using recursion. In this task, you will implement a function `fibonacci_recursive` that takes an integer `n` and returns the nth Fibonacci number. # Function Signature: ```python def fibonacci_recursive(n: int) -> int: ``` # Requirements: 1. The Fibonacci sequence starts with 0 and 1 (i.e., `F(0) = 0`, `F(1) = 1`). 2. For `n > 1`, the Fibonacci sequence is defined as `F(n) = F(n-1) + F(n-2)`. 3. Use recursion to implement the function. 4. Ensure that the function handles base cases correctly (i.e., `n == 0` and `n == 1`). # Example: Input: `n = 5` Output: `5` Explanation: - The Fibonacci sequence for the first 6 numbers is 0, 1, 1, 2, 3, 5. Therefore, `F(5) = 5`. Input: `n = 7` Output: `13` Explanation: - The Fibonacci sequence for the first 8 numbers is 0, 1, 1, 2, 3, 5, 8, 13. Therefore, `F(7) = 13`. # Hints: - A recursive function is a function that calls itself. - Ensure you include a base case to stop the recursion and return a value directly. Write the `fibonacci_recursive` function in Python.","solution":"def fibonacci_recursive(n: int) -> int: Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)"},{"question":"You are given a directory containing multiple text files and your goal is to extract and combine all unique words from these text files into a single set. Each word should be normalized to lowercase and punctuation should be removed. Your task is to write a function named `extract_unique_words` that takes a directory path as input, reads all text files within that directory, and returns a set containing all unique words found across the files. The function should utilize `os.listdir` to locate the text files within the directory and `re` module to handle the punctuation removal. Here\'s a summary of what your function should do: 1. **Function Name**: `extract_unique_words` 2. **Parameter**: - `directory : str` – A string representing the path to the directory containing the text files. 3. **Output**: - A set of strings, where each string is a unique word extracted from the text files in the given directory. # Example Assume you have the following text files in the directory `\'./documents/\'`: **`file1.txt`**: ``` Hello World! This is a test. ``` **`file2.txt`**: ``` This test is for extracting unique words. ``` Calling `extract_unique_words(\'./documents/\')` should return a set equivalent to: ```python {\'hello\', \'world\', \'this\', \'is\', \'a\', \'test\', \'for\', \'extracting\', \'unique\', \'words\'} ``` # Instructions - Implement the `extract_unique_words` function. - Utilize `os.listdir` to list files in the directory and ensure you read only `.txt` files. - Use the `re` module to remove punctuation and normalize the words to lowercase. - Combine words from all files into a single set to ensure uniqueness. # Note - You can assume that the directory will only contain text files and you do not need to handle any other file types in this context. - Handle the case where the directory may contain no text files by returning an empty set.","solution":"import os import re def extract_unique_words(directory): Extracts and combines all unique words from text files in the given directory. Args: directory (str): The path to the directory containing text files. Returns: set: A set of unique words found across the text files. unique_words = set() word_pattern = re.compile(r\'bw+b\') for filename in os.listdir(directory): if filename.endswith(\'.txt\'): with open(os.path.join(directory, filename), \'r\') as f: content = f.read().lower() words = word_pattern.findall(content) unique_words.update(words) return unique_words"},{"question":"You are given a task to implement a function that calculates the pairwise Euclidean distance between points in two different sets using the NumPy library in Python. This task will help you understand how to use broadcasting and array operations to compute distances efficiently. Write a function called `calculate_pairwise_distance` that takes two parameters: 1. `points1` (array_like): An array of shape (M, 2) representing M points in a 2D space. 2. `points2` (array_like): An array of shape (N, 2) representing N points in a 2D space. The function should compute the pairwise Euclidean distance between each point in `points1` and each point in `points2` and return the result as an (M, N) ndarray, where each element [i, j] represents the distance between `points1[i]` and `points2[j]`. # Example For example, given the inputs: ```python points1 = np.array([[1, 2], [3, 4]]) points2 = np.array([[5, 6], [7, 8]]) ``` The output should be: ```python array([[ 5.65685425, 8.48528137], [ 2.82842712, 5.65685425]]) ``` # Requirements 1. You must use vectorized operations with NumPy to compute the distances. 2. Ensure that your function handles any valid input shapes as defined. # Function Signature ```python def calculate_pairwise_distance(points1: array_like, points2: array_like) -> np.ndarray: pass ```","solution":"import numpy as np def calculate_pairwise_distance(points1, points2): Calculate the pairwise Euclidean distances between points in two sets. Parameters: points1 (array_like): An array of shape (M, 2) representing M points in 2D space. points2 (array_like): An array of shape (N, 2) representing N points in 2D space. Returns: np.ndarray: An (M, N) ndarray where each element [i, j] represents the Euclidean distance between points1[i] and points2[j]. points1 = np.asarray(points1) points2 = np.asarray(points2) diff = points1[:, np.newaxis, :] - points2[np.newaxis, :, :] dist = np.sqrt(np.sum(diff**2, axis=2)) return dist"},{"question":"In a social network, users are connected by friendships, and we represent this network with an undirected graph. Your task is to find out the number of distinct connected components within the network. A connected component is a set of nodes where there is a path between any pair of nodes within this set, and which is connected to no additional nodes outside this set. Write a function `count_connected_components(n, edges)` that takes an integer `n` representing the number of nodes in the graph (numbered 0 to n-1), and a list of `edges` where each edge is a pair of nodes [u, v] indicating a connection between nodes u and v. The function should return the number of distinct connected components in the graph. # Function Signature ```python def count_connected_components(n: int, edges: List[List[int]]) -> int: ``` # Parameters - `n` (int): An integer representing the number of nodes in the graph. - `edges` (List[List[int]]): A list of pairs representing the edges in the graph. # Returns - `int`: The number of connected components in the graph. # Example ```python n = 5 edges = [[0, 1], [1, 2], [3, 4]] print(count_connected_components(n, edges)) # Output: 2 ``` # Requirements - Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the graph and count the number of connected components. - Ensure the function handles both edge cases (like no edges) and typical cases efficiently.","solution":"from typing import List def count_connected_components(n: int, edges: List[List[int]]) -> int: # Helper function to perform DFS def dfs(node): stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True for neighbor in adjacency_list[current]: if not visited[neighbor]: stack.append(neighbor) # Initialize adjacency list adjacency_list = [[] for _ in range(n)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * n component_count = 0 # Perform DFS for each node for i in range(n): if not visited[i]: dfs(i) component_count += 1 return component_count"},{"question":"You are required to design a function named `calculate_project_timeline` that efficiently manages the timeline of a project based on various tasks and their dependencies. The tasks will have different durations and dependencies on other tasks which must be completed before they can start. The goal is to compute the completion date of the entire project considering all provided constraints. Here is a detailed breakdown of the requirements: - **Function Name**: `calculate_project_timeline` - **Parameters**: - `tasks` (dict): A dictionary where the keys are task names (strings) and the values are integers representing the number of days required to complete the task. - `dependencies` (dict): A dictionary where the keys are task names (strings) and the values are lists of strings representing the names of tasks that must be completed before starting the key task. - `start_date` (string): The start date of the project in the format \'YYYY-MM-DD\'. - **Output**: - Return a dictionary where the keys are task names (strings) and the values are strings representing the end date of each task in the format \'YYYY-MM-DD\'. - Include the overall project end date as a key named `\'Project End Date\'`. - **Constraints**: - Ensure that tasks are scheduled based on their dependencies. - Handle circular dependencies by raising an exception with the message \\"Circular dependency detected\\". - Consider edge cases such as no dependencies, or all tasks being dependent on one initial task. Implement this function to enable smooth project management and visualization of task completion dates within a given project timeline. Ensure the correctness of date calculations using the `datetime` module to accurately project task schedules.","solution":"from datetime import datetime, timedelta def calculate_project_timeline(tasks, dependencies, start_date): task_end_dates = {} visited = set() stack = set() def get_end_date(task): if task in visited: return task_end_dates[task] if task in stack: raise Exception(\\"Circular dependency detected\\") stack.add(task) if task not in dependencies or not dependencies[task]: end_date = datetime.strptime(start_date, \'%Y-%m-%d\') + timedelta(days=tasks[task]) else: max_dep_end_date = max([get_end_date(dep) for dep in dependencies[task]]) end_date = max_dep_end_date + timedelta(days=tasks[task]) task_end_dates[task] = end_date visited.add(task) stack.remove(task) return end_date for task in tasks: get_end_date(task) formatted_task_end_dates = {task: date.strftime(\'%Y-%m-%d\') for task, date in task_end_dates.items()} project_end_date = max(task_end_dates.values()).strftime(\'%Y-%m-%d\') formatted_task_end_dates[\'Project End Date\'] = project_end_date return formatted_task_end_dates"},{"question":"Given a list of integers, you are to write a function named `FindSecondLargest` that finds and returns the second largest integer in the list. If there isn\'t a second distinct largest integer, the function should return `None`. Assume the list will have at least two elements. **Function Signature:** ```python def FindSecondLargest(nums: list) -> int: # your code here ``` **Parameters:** - `nums`: A list of integers. **Returns:** - An integer representing the second largest integer in the list or `None` if there is no second distinct largest integer. **Example:** ```python nums = [10, 5, 20, 20, 8] print(FindSecondLargest(nums)) # Output should be 10 nums = [5, 5, 5] print(FindSecondLargest(nums)) # Output should be None nums = [3, 3, 5, 6, 6] print(FindSecondLargest(nums)) # Output should be 5 ```","solution":"def FindSecondLargest(nums: list) -> int: Finds and returns the second largest integer in a list. If there isn\'t a second distinct largest integer, returns None. # Convert to set to eliminate duplicates and then back to a sorted list unique_nums = sorted(set(nums), reverse=True) # Check if there are at least two distinct elements if len(unique_nums) < 2: return None # The second largest element is the second element in the sorted unique list return unique_nums[1]"},{"question":"In this problem, you will write a function to compute the predictions and mean squared error (MSE) for a polynomial regression model of degree `d`. Polynomial regression is an extension of linear regression that models the relationship between the independent variable `x` and the dependent variable `y` as an nth degree polynomial. The function aims to fit the model to the input data `x` and predict the output `y` using polynomial features and parameters `coefficients`. Your task is to complete the function `polynomial_regression_error` which should compute the predictions for the polynomial regression model and the mean squared error between the predicted and actual values. Here is the detailed breakdown of the function requirements: Function signature: `def polynomial_regression_error(x, y, coefficients, d):` Parameters: - `x` (np.ndarray): A vector of shape `(m,)` where `m` is the number of data points. This represents the independent variable. - `y` (np.ndarray): A vector of shape `(m,)` containing the true labels/outputs for each data point. - `coefficients` (np.ndarray): A vector of shape `(d+1,)` containing the polynomial regression coefficients. - `d` (int): The degree of the polynomial regression model. Returns: - `predictions` (np.ndarray): A vector of shape `(m,)` containing the predicted values of `y` for each input `x`. - `mse` (float): The mean squared error between the predicted values and the actual values. You should utilize the `numpy.polyval` function to evaluate the polynomial using the given coefficients for ease of implementation. An example usage of the function is as follows: ```python import numpy as np x = np.array([1, 2, 3, 4]) y = np.array([1, 4, 9, 16]) coefficients = np.array([0, 0, 1]) d = 2 predictions, mse = polynomial_regression_error(x, y, coefficients, d) ```","solution":"import numpy as np def polynomial_regression_error(x, y, coefficients, d): Computes the predictions and mean squared error for a polynomial regression model. Parameters: - x (np.ndarray): A vector of shape `(m,)` where `m` is the number of data points. - y (np.ndarray): A vector of shape `(m,)` containing the true labels/outputs for each data point. - coefficients (np.ndarray): A vector of shape `(d+1,)` containing the polynomial regression coefficients. - d (int): The degree of the polynomial regression model. Returns: - predictions (np.ndarray): A vector of shape `(m,)` containing the predicted values of `y` for each input `x`. - mse (float): The mean squared error between the predicted values and the actual values. # Compute predictions using numpy.polyval predictions = np.polyval(coefficients[::-1], x) # Calculate the Mean Squared Error (MSE) mse = np.mean((y - predictions) ** 2) return predictions, mse"},{"question":"You are tasked with creating a function to analyze and format transaction data using the pandas library. This function will categorize transactions into different bins based on the transaction amount and calculate summary statistics for each category. The input will be a pandas DataFrame `transactions` with the following columns: - `transaction_id`: a unique identifier for each transaction. - `amount`: a numerical value representing the amount of the transaction. - `timestamp`: a string representing the date and time of the transaction. Your task is to implement the function `transaction_summary(transactions)`, which should: 1. Categorize the transactions into the following bins based on the `amount`: - \\"Small\\" for amounts < 100 - \\"Medium\\" for amounts between 100 and 500 (inclusive) - \\"Large\\" for amounts > 500 2. Compute the count, total, and average amount of transactions for each category. **Requirements:** - Use `pandas.cut` or conditional statements to bin the `amount` values. - Use grouping methods (`groupby`) in pandas to compute summary statistics. - Make sure to handle any missing or malformed data appropriately. The function should return a dictionary where the keys are the categories (\\"Small\\", \\"Medium\\", \\"Large\\") and the values are dictionaries containing the count, total, and average amount for each category. **Example Usage:** ```python summary = transaction_summary(transactions) # Expected Output Format # { # \\"Small\\": {\\"count\\": 25, \\"total\\": 1234.56, \\"avg\\": 49.38}, # \\"Medium\\": {\\"count\\": 10, \\"total\\": 2500.00, \\"avg\\": 250.00}, # \\"Large\\": {\\"count\\": 5, \\"total\\": 3500.00, \\"avg\\": 700.00} # } ```","solution":"import pandas as pd def transaction_summary(transactions): # Categorize amounts into bins bins = [float(\'-inf\'), 100, 500, float(\'inf\')] labels = [\\"Small\\", \\"Medium\\", \\"Large\\"] # Create a new column for transaction category transactions[\'Category\'] = pd.cut(transactions[\'amount\'], bins=bins, labels=labels, right=False) # Group by category and compute summary statistics summary = transactions.groupby(\'Category\')[\'amount\'].agg([\'count\', \'sum\', \'mean\']).reset_index() # Prepare the result dictionary result = {} for _, row in summary.iterrows(): category = row[\'Category\'] result[category] = { \\"count\\": int(row[\'count\']), \\"total\\": float(row[\'sum\']), \\"avg\\": float(row[\'mean\']) } return result"},{"question":"In this problem, you are required to implement a function named `invert_diagonal_matrix` using the `numpy` library. This function should take a square, diagonal matrix as input and return its inverse. A diagonal matrix is defined as a matrix in which the elements outside the main diagonal are all zero. The inverse of a diagonal matrix is another diagonal matrix where each diagonal element is the reciprocal (1 divided by the original element) of the corresponding diagonal element in the input matrix. If any diagonal element is zero, the matrix is not invertible and the function should return `None`. # Function Signature ```python def invert_diagonal_matrix(matrix: np.ndarray) -> np.ndarray: ``` # Parameters - `matrix (np.ndarray)`: A 2-dimensional numpy array representing a square, diagonal matrix of shape (n, n). # Returns - `np.ndarray`: A 2-dimensional numpy array representing the inverse of the input diagonal matrix, or `None` if the matrix is non-invertible (contains a zero in the diagonal). # Example ```python import numpy as np matrix = np.array([[2, 0, 0], [0, 3, 0], [0, 0, 4]], dtype=float) inverse_matrix = invert_diagonal_matrix(matrix) print(inverse_matrix) invalid_matrix = np.array([[2, 0, 0], [0, 0, 0], [0, 0, 4]], dtype=float) inverse_matrix_invalid = invert_diagonal_matrix(invalid_matrix) print(inverse_matrix_invalid) ``` # Expected Output ```python array([[0.5 , 0. , 0. ], [0. , 0.33333333, 0. ], [0. , 0. , 0.25 ]]) None ``` # Requirements 1. You **must** use the `numpy` library. 2. Assume the input matrix is always square. 3. Check for zero elements in the diagonal, and return `None` if the matrix is non-invertible. 4. Do not use any other external libraries or pre-built matrix inversion functions.","solution":"import numpy as np def invert_diagonal_matrix(matrix: np.ndarray) -> np.ndarray: Returns the inverse of a given square, diagonal matrix or None if the matrix is non-invertible. # Check if the matrix is a diagonal matrix if not np.all((matrix == np.diag(np.diagonal(matrix)))): return None # Check if there are any zero elements in the diagonal diagonal_elements = np.diagonal(matrix) if any(diagonal_elements == 0): return None # Create the inverse diagonal matrix inverse_diagonal = 1 / diagonal_elements inverse_matrix = np.diag(inverse_diagonal) return inverse_matrix"},{"question":"Design a function `simulate_monty_hall` that simulates the Monty Hall problem and calculates the probability of winning if the player switches their choice versus if the player stays with their initial choice. The Monty Hall problem is a probability puzzle based on a game show scenario. The steps of the game are as follows: 1. The player is presented with three doors: Behind one door is a car (winning prize), and behind the other two doors are goats (losing prizes). 2. The player selects one of the three doors. 3. The host, who knows what is behind each door, opens one of the two doors that the player did not choose. The opened door reveals a goat. 4. The player is then given the choice to either stick with their initial choice or switch to the other remaining unopened door. 5. The player wins the car if the final chosen door has the car behind it. The function `simulate_monty_hall` should take the following parameter: - `num_simulations` (int): The number of times the game is to be simulated. The function should: 1. Simulate the game for the given number of times. 2. Calculate the proportion of wins for switching vs. staying with the initial choice. 3. Print the probabilities of winning when switching and when staying with the initial choice. # Required Function Signature: ```python def simulate_monty_hall(num_simulations): # Your implementation here ``` # Example Usage: ```python simulate_monty_hall(10000) ``` # Example Output: ``` Probability of winning by switching: 0.67 Probability of winning by staying: 0.33 ```","solution":"import random def simulate_monty_hall(num_simulations): Simulates the Monty Hall problem and calculates the probabilities of winning if the player switches their choice versus if the player stays with their initial choice. Parameters: num_simulations (int): The number of times the game is to be simulated. Returns: dict: A dictionary with probabilities of winning by switching and by staying. switch_wins = 0 stay_wins = 0 for _ in range(num_simulations): # Randomly place the car behind one of the three doors (0, 1, 2) doors = [0, 1, 2] car_position = random.choice(doors) # Player makes an initial choice player_choice = random.choice(doors) # Host opens one of the other two doors revealing a goat remaining_doors = [door for door in doors if door != player_choice and door != car_position] host_opens = random.choice(remaining_doors) # The other remaining door switch_choice = [door for door in doors if door != player_choice and door != host_opens][0] # Player chooses to stay or switch if player_choice == car_position: stay_wins += 1 if switch_choice == car_position: switch_wins += 1 prob_switch = switch_wins / num_simulations prob_stay = stay_wins / num_simulations print(f\\"Probability of winning by switching: {prob_switch}\\") print(f\\"Probability of winning by staying: {prob_stay}\\") return { \\"prob_switch\\": prob_switch, \\"prob_stay\\": prob_stay }"},{"question":"Create a function `calculate_median_absolute_deviation(data)` that takes the following argument: 1. `data`: a list or array of numerical values. The function should: 1. Calculate the median of the provided `data`. 2. Compute the absolute deviations of each element from the median. 3. Calculate the median of these absolute deviations, known as the Median Absolute Deviation (MAD). Return the MAD value. Here is an example usage of the function: ```python data = [1, 2, 3, 4, 5, 6, 7] mad = calculate_median_absolute_deviation(data) print(mad) # Output should be 2 ```","solution":"def calculate_median_absolute_deviation(data): Calculate the Median Absolute Deviation (MAD) of given data. :param data: list or array of numerical values :return: Median Absolute Deviation (MAD) if not data: raise ValueError(\\"Data must not be empty.\\") data_sorted = sorted(data) n = len(data_sorted) # Calculate median if n % 2 == 1: median = data_sorted[n // 2] else: median = (data_sorted[n // 2 - 1] + data_sorted[n // 2]) / 2 # Calculating absolute deviations from the median abs_deviation = [abs(x - median) for x in data_sorted] # Sorting the absolute deviations abs_deviation_sorted = sorted(abs_deviation) # Calculate median of the absolute deviations if n % 2 == 1: mad = abs_deviation_sorted[n // 2] else: mad = (abs_deviation_sorted[n // 2 - 1] + abs_deviation_sorted[n // 2]) / 2 return mad"},{"question":"You are asked to implement a simple scheduling function that assigns tasks to available time slots in a day. The function should ensure that tasks do not overlap and are scheduled within the working hours from 9:00AM to 5:00PM. # Function Description Write a function named `schedule_tasks(task_list)` that accepts a list of tasks and their durations in minutes and schedules them within the available time slots of a typical 9:00AM to 5:00PM workday. The tasks should be scheduled sequentially in the order they appear in the list. # Constraints: - Each time slot is 30 minutes. - Tasks should be scheduled starting from 9:00AM onwards. - If a task cannot be scheduled within the remaining time slots, it should be skipped. - The function should return a dictionary where keys are time slots in \\"HH:MM\\" format and values are the tasks assigned to those slots. - If no tasks are assigned to a slot, it should not appear in the dictionary. # Arguments - `task_list`: A list of tuples where each tuple contains two elements: - A string representing the task name. - An integer representing the task duration in minutes. # Example Here is a sample call to the function: ```python tasks = [(\\"Task1\\", 45), (\\"Task2\\", 90), (\\"Task3\\", 120), (\\"Task4\\", 30), (\\"Task5\\", 60)] print(schedule_tasks(tasks)) ``` Sample output (the exact times may vary, but they must adhere to the constraints): ```python { \'09:00\': \'Task1\', \'09:30\': \'Task1\', \'10:00\': \'Task2\', \'10:30\': \'Task2\', \'11:00\': \'Task2\', \'11:30\': \'Task3\', \'12:00\': \'Task3\', \'12:30\': \'Task3\', \'01:00\': \'Task3\', \'01:30\': \'Task4\', \'02:00\': \'Task5\', \'02:30\': \'Task5\' } ``` Assume the following working hours (in 24-hour format): - Start Time: 09:00 (AM) - End Time: 17:00 (5:00 PM) # Requirements Please implement the function as described, ensuring that: - Tasks do not overlap. - Tasks are only assigned to valid time slots within the working hours. - The function returns the correct dictionary output as specified.","solution":"def schedule_tasks(task_list): Schedule tasks within the 9:00 AM to 5:00 PM working hours in non-overlapping 30-minute slots. :param task_list: List of tuples where each tuple contains a task name and its duration in minutes. :return: Dictionary with time slots as keys in \\"HH:MM\\" format and task names as values. schedule = {} start_hour = 9 end_hour = 17 current_time = start_hour * 60 # Current time in minutes from 00:00 for task_name, duration in task_list: while duration > 0: if current_time >= end_hour * 60: # Out of working hours, stop scheduling further tasks return schedule hours = current_time // 60 minutes = current_time % 60 time_slot = f\'{hours:02}:{minutes:02}\' # Assign the task to the current time slot schedule[time_slot] = task_name # Move to next 30-minute slot current_time += 30 duration -= 30 return schedule"},{"question":"You are building a simple recommendation system for a streaming service. The system suggests movies to users based on their genre preferences and the ratings of the movies. Your task is to write a function named `recommend_movies` that takes the following parameters: - `user_preferences`: A dictionary where the keys are genre names (strings) and the values are integers representing the user\'s preference for that genre (higher is better). - `movies`: A list of dictionaries, where each dictionary represents a movie with keys \'title\', \'genre\', and \'rating\'. \'title\' is the movie\'s title (string), \'genre\' is the movie\'s genre (string), and \'rating\' is the movie\'s rating (float, between 0 and 5). The function should: 1. Filter out movies that have a rating of less than 3. 2. Score each movie by multiplying its rating by the user\'s preference for its genre. 3. Sort the movies by their score in descending order. 4. Return a list of movie titles, sorted by their scores. **Example Input:** ```python user_preferences = { \'Action\': 5, \'Comedy\': 3, \'Drama\': 1 } movies = [ {\'title\': \'Action Movie 1\', \'genre\': \'Action\', \'rating\': 4.5}, {\'title\': \'Drama Movie 1\', \'genre\': \'Drama\', \'rating\': 4.0}, {\'title\': \'Comedy Movie 1\', \'genre\': \'Comedy\', \'rating\': 3.5}, {\'title\': \'Action Movie 2\', \'genre\': \'Action\', \'rating\': 2.5}, {\'title\': \'Comedy Movie 2\', \'genre\': \'Comedy\', \'rating\': 2.0}, {\'title\': \'Drama Movie 2\', \'genre\': \'Drama\', \'rating\': 5.0} ] ``` **Example Function Call:** ```python recommend_movies(user_preferences, movies) ``` **Expected Output:** ```python [\'Action Movie 1\', \'Comedy Movie 1\', \'Drama Movie 1\'] ``` #","solution":"def recommend_movies(user_preferences, movies): Recommends movies based on user preferences and movie ratings. Parameters: - user_preferences (dict): User\'s genre preferences with genre as keys and preference as values. - movies (list of dicts): List of movies with each having \'title\', \'genre\', and \'rating\'. Returns: - list of str: Titles of the recommended movies sorted by their calculated scores. # Filter movies with a rating of less than 3 filtered_movies = [movie for movie in movies if movie[\'rating\'] >= 3] # Score each movie by multiplying its rating by the user\'s preference for its genre scored_movies = [] for movie in filtered_movies: genre = movie[\'genre\'] if genre in user_preferences: score = movie[\'rating\'] * user_preferences[genre] scored_movies.append((movie[\'title\'], score)) # Sort movies by their score in descending order scored_movies.sort(key=lambda x: x[1], reverse=True) # Extract and return the movie titles recommended_titles = [title for title, score in scored_movies] return recommended_titles"},{"question":"You are tasked with creating a function that takes a string as input and returns a new string with each word reversed but still in its original position. The function should preserve the original spacing and punctuation. The function you are to implement should be named `reverse_words_in_string`. It should take the following parameter: 1. `input_str` (str): The input string containing words separated by spaces. The function should split the input string into words, reverse each word individually while keeping the original order of the words, and then join them back into a single string. Remember: - Words should be identified using spaces as delimiters. - Punctuation within each word should be reversed as part of that word. - The function must return a single string with the words reversed but maintaining their positions and spacing from the original string. Here\'s the structure of the function to implement (place this code in your script): ```python def reverse_words_in_string(input_str): # Implement this function pass ``` **Example:** Input: ``` \\"Hello, world! This is an example.\\" ``` Output: ``` \\",olleH !dlrow sihT si na .elpmaxe\\" ```","solution":"def reverse_words_in_string(input_str): Takes a string as input and returns a new string with each word reversed but still in its original position. words = input_str.split(\' \') reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"You are required to implement a function named `merge_and_count` to merge two sorted lists of integers and count the number of inversions needed to merge them. An inversion counts when two elements are swapped to maintain sorted order during the merge. Below is the specification of the function you need to write: # Function Specification: - **Function Name**: `merge_and_count` - **Parameters**: - `list1` (List[int]): A sorted list of integers. - `list2` (List[int]): Another sorted list of integers. - **Return Type**: Tuple[List[int], int] - **Behavior**: The function will: 1. Merge the two sorted lists into a single sorted list. 2. Count and return the number of inversions needed to maintain sorted order during the merging process. # Constraints: - The input lists `list1` and `list2` are both non-empty and already sorted in ascending order. - Your function should have efficient performance and handle lists up to a length of 10^5. # Example: If `list1` and `list2` contain: - `list1 = [1, 3, 5]` - `list2 = [2, 4, 6]` After running `merge_and_count`, the function should return: - `([1, 2, 3, 4, 5, 6], 3)` In this example, the number of inversions is 3 because the following swaps occur to maintain sorted order: - 3 swapped with 2 - 5 swapped with 4 - 5 swapped with 4 and 6 # Required Library API: You are expected to use Python\'s built-in list operations and may not use external sorting libraries.","solution":"def merge_and_count(list1, list2): Merges two sorted lists and counts the number of inversions needed to maintain sorted order. Parameters: list1 (List[int]): A sorted list of integers. list2 (List[int]): Another sorted list of integers. Returns: Tuple[List[int], int]: A tuple containing the merged sorted list and the count of inversions. merged_list = [] i = j = 0 inversions = 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 inversions += len(list1) - i # Add remaining elements of list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Add remaining elements of list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list, inversions"},{"question":"This function takes a list of integers representing book page numbers and returns the maximum number of pages that can be obtained by reading contiguous books in a single session without exceeding a given page limit. The function should use a sliding window approach to calculate the sum of the maximum number of pages read continuously. This technique efficiently adjusts the window of considered pages by expanding or contracting it based on the total sum\'s comparison to the limit. Note that: The maximum page limit is predefined in the function for this example. The function should return 0 if all books exceed the limit individually. The function is designed to help understand sliding window techniques in algorithm optimization. It will raise exceptions for invalid input types or values. The function should have the signature: ``` def max_continuous_pages(books: List[int], page_limit: int) -> int: ```","solution":"from typing import List def max_continuous_pages(books: List[int], page_limit: int) -> int: Returns the maximum number of pages that can be read continuously without exceeding a given page limit. Uses the sliding window technique. if not all(isinstance(book, int) and book >= 0 for book in books): raise ValueError(\\"All book page numbers must be non-negative integers.\\") if not isinstance(page_limit, int) or page_limit < 0: raise ValueError(\\"Page limit must be a non-negative integer.\\") max_pages = 0 current_pages = 0 start = 0 for end in range(len(books)): current_pages += books[end] while current_pages > page_limit and start <= end: current_pages -= books[start] start += 1 max_pages = max(max_pages, current_pages) return max_pages"},{"question":"You are tasked with implementing a function to generate and print all valid combinations of well-formed round brackets for a given number of pairs of brackets. Each combination should contain exactly `n` pairs of round brackets, and the function should generate all possible valid sequences (a valid sequence means that the brackets must close in the correct order). Function Specification: - **Function Name**: `print_valid_brackets_combinations` - **Parameters**: - `n` - An integer representing the number of pairs of round brackets. # Task: Complete the function `print_valid_brackets_combinations` that generates all valid combinations of well-formed round brackets for `n` pairs and prints the results. # Example Usage: Given the following input: - **Number of Pairs** (`n`): `3` Upon calling the function: ```python print_valid_brackets_combinations(3) ``` The expected print output should be: ``` The valid combinations for 3 pairs of brackets are: ((())) (()()) (())() ()(()) ()()() ==================== ``` # Constraints: - The function should print the opening statement as shown in the example followed by each combination on a new line. - The function should print a line of equal signs (`=`) at the end. - The order of the combinations can vary as long as all valid combinations are printed. - You may assume the input `n` is always a non-negative integer. If `n` is zero, the function should just print the line of equal signs followed by a line break.","solution":"def print_valid_brackets_combinations(n): Generates and prints all valid combinations of n pairs of round brackets. Parameters: n - An integer representing the number of pairs of round brackets. def backtrack(current, open_count, close_count): if len(current) == 2 * n: combinations.append(current) return if open_count < n: backtrack(current + \'(\', open_count + 1, close_count) if close_count < open_count: backtrack(current + \')\', open_count, close_count + 1) combinations = [] if n > 0: backtrack(\'\', 0, 0) print(f\\"The valid combinations for {n} pairs of brackets are:\\") for combo in combinations: print(combo) print(\\"=\\" * 20) # Example usage print_valid_brackets_combinations(3)"},{"question":"You are tasked with writing a function named `generate_acronyms` that generates acronyms from a given list of phrases. Each acronym should be created by taking the first letter of each word in the phrase and converting it to uppercase. # Requirements: 1. **Acronym Generation**: For each phrase, generate an acronym by taking the first letter of each word and converting it to uppercase. 2. **Handling Phrases**: If a phrase contains only one word, the acronym should be the uppercase version of that word. # Constraints: - The function should be named `generate_acronyms`. - The function should accept one argument: - `phrases_list`: A list of strings where each string is a phrase. - The function should return: - A list of strings where each string is the generated acronym for the corresponding phrase. # Example: ```python phrases = [\\"Natural Language Processing\\", \\"Machine Learning\\", \\"artificial intelligence\\", \\"Data Science\\"] output = generate_acronyms(phrases) print(output) # Should print [\'NLP\', \'ML\', \'AI\', \'DS\'] ``` # Important: 1. Ensure the output acronyms are in uppercase. 2. Maintain the order of acronyms as per the input list. # Additional Notes: - You may assume that each phrase contains only alphabetic characters and spaces. - You do not need to handle empty phrases or numerical inputs.","solution":"def generate_acronyms(phrases_list): Generates acronyms from a list of phrases by taking the first letter of each word and converting it to uppercase. Args: phrases_list (list of str): A list of phrases. Returns: list of str: A list of acronyms corresponding to each phrase. acronyms = [] for phrase in phrases_list: words = phrase.split() acronym = \'\'.join(word[0].upper() for word in words) acronyms.append(acronym) return acronyms"},{"question":"Simulate the heights of a group of individuals within a specific age range, calculate the average height for different age brackets, and plot the distribution using a histogram in matplotlib. The function should output: tuple: pd.DataFrame: Dataframe containing the ages and heights of the individuals. Axes: The histogram plot object for further manipulation or saving. You should write self-contained code starting with: ``` import numpy as np import pandas as pd import matplotlib.pyplot as plt def analyze_heights(num_individuals=500, min_age=18, max_age=60, random_seed=42): ```","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def analyze_heights(num_individuals=500, min_age=18, max_age=60, random_seed=42): np.random.seed(random_seed) # Generate random ages within the specified range ages = np.random.randint(min_age, max_age + 1, num_individuals) # Generate random heights based on normally distributed groups for each age means = np.linspace(160, 180, max_age - min_age + 1) std_devs = np.linspace(5, 10, max_age - min_age + 1) heights = np.array([np.random.normal(means[age - min_age], std_devs[age - min_age]) for age in ages]) # Create DataFrame df = pd.DataFrame({\'Age\': ages, \'Height\': heights}) # Calculate average height for different age brackets age_brackets = pd.cut(df[\'Age\'], bins=[18, 30, 40, 50, 60]) avg_height_per_bracket = df.groupby(age_brackets)[\'Height\'].mean() # Plot histogram fig, ax = plt.subplots() df[\'Height\'].hist(bins=30, ax=ax, edgecolor=\'black\') ax.set_title(\\"Height Distribution of Individuals\\") ax.set_xlabel(\\"Height (cm)\\") ax.set_ylabel(\\"Frequency\\") return df, avg_height_per_bracket, ax"},{"question":"Write a function named `find_repeated_items` that identifies the repeated items in a given list and returns them, in the order of their first appearance, in an output list. If no item is repeated, the function should return an empty list. **Function Signature:** ```python def find_repeated_items(items: list) -> list: ``` **Parameters:** - `items`: A list of elements where each element can be of any hashable data type. **Returns:** - A list of elements that are repeated in the input list, in the order of their first appearance. **Example:** ```python # Example 1 input_list = [1, 2, 3, 1, 2, 4] result = find_repeated_items(input_list) print(result) # Expected output: [1, 2] # Example 2 input_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"] result = find_repeated_items(input_list) print(result) # Expected output: [\\"apple\\", \\"banana\\"] # Example 3 input_list = [7, 5, 3, 7, 1] result = find_repeated_items(input_list) print(result) # Expected output: [7] # Example 4 input_list = [1, 2, 3, 4, 5] result = find_repeated_items(input_list) print(result) # Expected output: [] ``` Create the `find_repeated_items` function that adheres to the above specifications.","solution":"def find_repeated_items(items): Identifies the repeated items in a given list and returns them, in the order of their first appearance, in an output list. :param items: List of elements where each element can be of any hashable data type. :return: List of elements that are repeated in the input list, in the order of their first appearance. seen = set() repeated = set() result = [] for item in items: if item in seen: if item not in repeated: result.append(item) repeated.add(item) else: seen.add(item) return result"},{"question":"--- Write a function named `reverse_strings` that reverses each string in a list and prints the results. Here\'s what you need to do: 1. Define a list of strings named `string_list` containing at least 5 different strings. For example, `[\'hello\', \'world\', \'python\', \'programming\', \'reverse\']`. 2. Write a function `reverse_strings` that: - Takes a list of strings as an argument. - Iterates through each string in the list. - Reverses the order of each string. - Prints each original string along with its reversed version in the format `original_string -> reversed_string`. 3. The function should not return any values, but simply print the results. For instance, for the input `string_list = [\'hello\', \'world\', \'python\', \'programming\', \'reverse\']`, the output should be: ``` hello -> olleh world -> dlrow python -> nohtyp programming -> gnimmargorp reverse -> esrever ``` Write the definition of the function `reverse_strings` and demonstrate its usage with the predefined list of strings `string_list`.","solution":"def reverse_strings(string_list): Takes a list of strings and prints each string with its reversed version. for string in string_list: reversed_string = string[::-1] print(f\\"{string} -> {reversed_string}\\") # Example usage string_list = [\'hello\', \'world\', \'python\', \'programming\', \'reverse\'] reverse_strings(string_list)"},{"question":"Write a function named `hasPalindromePermutation`, which determines if any permutation of the characters in a given string can form a palindrome. A palindrome is a string that reads the same backward as forward, such as \\"level\\" or \\"racecar\\". Your function should take a string `s` as input and return `True` if a palindrome permutation is possible, and `False` otherwise. To accomplish this task, you need to verify that the characters in the string can be rearranged to form a palindrome. For a string to be rearranged into a palindrome, at most one character can have an odd count if the length of the string is odd, and all characters must have even counts if the length is even. **Function Signature:** ```python def hasPalindromePermutation(s: str) -> bool: ``` **Example:** ```python assert hasPalindromePermutation(\\"civic\\") == True # \\"civic\\" is already a palindrome assert hasPalindromePermutation(\\"ivicc\\") == True # \\"civic\\" is a permutation of \\"ivicc\\" assert hasPalindromePermutation(\\"hello\\") == False # no permutation of \\"hello\\" can form a palindrome assert hasPalindromePermutation(\\"aab\\") == True # \\"aba\\" is a permutation of \\"aab\\" and is a palindrome ``` **Constraints:** - The input string `s` will contain only lowercase alphabetical characters and be between 1 and 1000 characters in length. - You may use Python\'s standard library collections module or any other method for counting character frequencies.","solution":"def hasPalindromePermutation(s: str) -> bool: Determines if any permutation of the characters in the input string can form a palindrome. :param s: input string to check for palindrome permutation :return: True if a palindrome permutation is possible, False otherwise from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a palindrome permutation, at most one character can have an odd frequency return odd_count <= 1"},{"question":"** You are required to write a function that filters and returns prime numbers from a given list of integers and then sorts them in descending order. Details: 1. Write a function named `find_primes`. 2. This function should take one parameter, `numbers`, which is a list of integers. 3. Define another helper function named `is_prime` inside `find_primes` to check if a number is prime. - A number is prime if it is greater than 1 and has no divisors other than 1 and itself. 4. Use the `is_prime` function to filter the prime numbers from the `numbers` list. 5. Sort the filtered prime numbers in descending order. 6. Return the sorted list of prime numbers. Function signature: ```python def find_primes(numbers: List[int]) -> List[int]: # your code here ``` Example: ```python input: [11, 2, 4, 6, 13, 5, 8] output: [13, 11, 5, 2] ```","solution":"from typing import List def find_primes(numbers: List[int]) -> List[int]: def is_prime(n: int) -> bool: if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): # optimization to check up to the sqrt of n if n % i == 0: return False return True primes = [num for num in numbers if is_prime(num)] primes.sort(reverse=True) return primes"},{"question":"In this problem, you are required to process and manipulate a list of strings based on specific criteria. Your goal is to implement a function named `filter_and_transform_strings(strings)` that performs the following operations: 1. **Filter**: Remove all strings from the list that contain the substring \\"abc\\". 2. **Transform**: Reverse each of the remaining strings. 3. **Sort**: Sort the resulting list of reversed strings in ascending order. 4. **Return**: Return the final processed list of strings. **Function:** ```python def filter_and_transform_strings(strings): # TODO: Implement this function to filter, transform, and sort the strings pass ``` **Requirements:** - Utilize list comprehensions and string methods to achieve the filtering and transformation. - Make sure the final list is sorted in ascending order. **Example:** ```python # Example input strings = [\\"hello\\", \\"world\\", \\"abcxyz\\", \\"python\\", \\"example\\", \\"string\\"] # Expected output # Step 1 - Filter: Remove \\"abcxyz\\" (contains \\"abc\\") # Remaining strings: [\\"hello\\", \\"world\\", \\"python\\", \\"example\\", \\"string\\"] # Step 2 - Transform: Reverse each string: [\\"olleh\\", \\"dlrow\\", \\"nohtyp\\", \\"elpmaxe\\", \\"gnirts\\"] # Step 3 - Sort: [\\"dlrow\\", \\"elpmaxe\\", \\"gnirts\\", \\"nohtyp\\", \\"olleh\\"] # Final output: [\'dlrow\', \'elpmaxe\', \'gnirts\', \'nohtyp\', \'olleh\'] print(filter_and_transform_strings(strings)) ```","solution":"def filter_and_transform_strings(strings): Processes the input list of strings by filtering out strings that contain \\"abc\\", reversing the remaining strings, and then sorting them in ascending order. :param strings: List of strings :return: List of processed strings # Filter out strings containing \\"abc\\" filtered_strings = [string for string in strings if \\"abc\\" not in string] # Reverse the filtered strings transformed_strings = [string[::-1] for string in filtered_strings] # Sort the reversed strings sorted_strings = sorted(transformed_strings) return sorted_strings"},{"question":"You are given a list of strings representing a collection of books. Each string is in the format \\"Title - Author\\". Your task is to write a function `organize_books(books)` that takes this list of book strings and organizes them into a nested dictionary. The primary keys of the dictionary should be the authors, and the values should be lists of their corresponding book titles sorted alphabetically. Constraints: 1. Each string in the list `books` will have a title and author separated by a hyphen (\\" - \\"). 2. No two books will have the same title. 3. You can use the `collections.defaultdict` class to help you organize the dictionary. Function Signature: ```python def organize_books(books: List[str]) -> Dict[str, List[str]]: pass ``` Example: ```python books = [ \\"The Great Gatsby - F. Scott Fitzgerald\\", \\"1984 - George Orwell\\", \\"To Kill a Mockingbird - Harper Lee\\", \\"Animal Farm - George Orwell\\", \\"Tender Is the Night - F. Scott Fitzgerald\\" ] print(organize_books(books)) # Expected output: # { # \\"F. Scott Fitzgerald\\": [\\"Tender Is the Night\\", \\"The Great Gatsby\\"], # \\"George Orwell\\": [\\"1984\\", \\"Animal Farm\\"], # \\"Harper Lee\\": [\\"To Kill a Mockingbird\\"] # } ``` Hint: Use the `sorted()` function to sort the lists of books for each author.","solution":"from typing import List, Dict from collections import defaultdict def organize_books(books: List[str]) -> Dict[str, List[str]]: author_books = defaultdict(list) for book in books: title, author = book.split(\\" - \\") author_books[author].append(title) for author in author_books: author_books[author].sort() return dict(author_books)"},{"question":"Simulate a game where two players take turns to pick either 1 or 2 stones from a pile. The player who takes the last stone wins. The function should determine the winner given the number of stones in the initial pile. Assume both players play optimally. Return \\"Player 1\\" or \\"Player 2\\" depending on who would win. The function should output: str: \\"Player 1\\" if the first player wins, or \\"Player 2\\" if the second player wins. You should write self-contained code starting with: ``` def determine_winner(stones): ```","solution":"def determine_winner(stones): Determines the winner of the stone game given the initial number of stones. Player 1 starts first, and both players play optimally. :param stones: int, the number of stones in the initial pile :return: str, \\"Player 1\\" if the first player wins, \\"Player 2\\" if the second player wins # If the number of stones in the initial pile is a multiple of 3, Player 2 will win. # Otherwise, Player 1 will win. if stones % 3 == 0: return \\"Player 2\\" else: return \\"Player 1\\""},{"question":"Create a function to process employee data and visualize the average salary per department using a bar chart. - The DataFrame should have columns \'Employee\', \'Department\', and \'Salary\'. - The bar chart should have a title \'Average Salary by Department\' and labels for the x-axis \'Department\' and the y-axis \'Average Salary\'. The function should output with: tuple: A tuple containing: DataFrame: A pandas DataFrame with employee details and their salaries. Axes: The Axes object of the bar chart visualizing the average salary per department. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(employee_data): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(employee_data): Processes employee data and visualizes the average salary per department using a bar chart. Parameters: employee_data (dict): A dictionary containing employee data with keys \'Employee\', \'Department\', and \'Salary\'. Returns: tuple: A tuple containing: DataFrame: A pandas DataFrame with employee details and their salaries. Axes: The Axes object of the bar chart visualizing the average salary per department. # Convert input data to a pandas DataFrame df = pd.DataFrame(employee_data) # Compute the average salary per department avg_salary_per_dept = df.groupby(\'Department\')[\'Salary\'].mean().reset_index() # Plot the bar chart fig, ax = plt.subplots() ax.bar(avg_salary_per_dept[\'Department\'], avg_salary_per_dept[\'Salary\']) ax.set_title(\'Average Salary by Department\') ax.set_xlabel(\'Department\') ax.set_ylabel(\'Average Salary\') # Return the DataFrame and the Axes object return df, ax"},{"question":"You are given a collection of text documents stored in a directory named \'documents\'. Each document is a plain text file that contains several lines of text. Your task is to create a function that reads all the documents, computes the word frequency across the entire corpus of documents, and identifies the top N most frequent words. Your function should: 1. Read all files from the \'documents\' directory. 2. Tokenize the text into words. You can assume words are separated by spaces and punctuations are removed. 3. Count the frequency of each word across all documents. 4. Return the top N most frequent words sorted by their frequency in descending order. Feel free to use the `os` library to read files from the directory and the `collections.Counter` for counting word frequencies. # Function Signature ```python def top_n_words(directory, n): pass ``` # Parameters - `directory` (str): The path to the directory containing the text documents. - `n` (int): The number of top frequent words to return. # Returns - `List[Tuple[str, int]]`: A list of tuples, with each tuple containing a word and its frequency, sorted in descending order of frequency. If multiple words have the same frequency, they should appear in alphabetical order. # Example Usage ```python # Assuming the directory \'documents\' contains files with sufficient text data. top_words = top_n_words(\'documents\', 5) ``` # Example Output ```python [(\'the\', 125), (\'and\', 100), (\'to\', 90), (\'of\', 85), (\'a\', 80)] ``` # Notes - You can assume that all documents are properly formatted text files. - Ignore case when counting words (e.g., \'Word\', \'word\', and \'WORD\' should be counted as the same word). - Punctuations should be removed from the words (e.g., \'hello!\' should be counted as \'hello\'). - Ensure the function handles a large number of documents efficiently.","solution":"import os import re from collections import Counter def top_n_words(directory, n): word_counter = Counter() # Compile a regex pattern for matching words word_pattern = re.compile(r\'bw+b\') for filename in os.listdir(directory): if filename.endswith(\\".txt\\"): with open(os.path.join(directory, filename), \'r\', encoding=\'utf-8\') as file: for line in file: words = word_pattern.findall(line.lower()) word_counter.update(words) # Get the top N words top_words = word_counter.most_common() # Sort words of the same frequency alphabetically top_words.sort(key=lambda x: (-x[1], x[0])) return top_words[:n]"},{"question":"You are required to implement a function named `merge_sorted_arrays` that takes two sorted lists of numbers and returns a single sorted list by merging the two input lists. To achieve merging, you must consider non-decreasing order and handle the case of one or both lists being empty. The function should iterate through both lists and efficiently combine them without using the built-in sorting functions. Function signature: ```python def merge_sorted_arrays(list1: list[int], list2: list[int]) -> list[int]: ``` Input: - `list1` (list of ints): A list of integers sorted in non-decreasing order. (0 <= len(list1) <= 1000) - `list2` (list of ints): A list of integers sorted in non-decreasing order. (0 <= len(list2) <= 1000) Output: - Returns a list of integers sorted in non-decreasing order, containing all elements from both input lists. **Example:** ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) ``` Output: ``` [1, 2, 3, 4, 5, 6] ``` **Example:** ```python merge_sorted_arrays([0, 2, 2, 3], [1, 2, 2]) ``` Output: ``` [0, 1, 2, 2, 2, 2, 3] ``` Constraints: 1. The function must handle the merging of two lists without relying on built-in sorting methods. 2. The function must handle inputs correctly when one or both lists are empty. 3. The function should strive for an efficient solution with linear time complexity, O(n + m), where n is the length of the first list and m is the length of the second list.","solution":"def merge_sorted_arrays(list1: list[int], list2: list[int]) -> list[int]: Merges two sorted lists into a single sorted list. Parameters: - list1: A list of integers sorted in non-decreasing order. - list2: A list of integers sorted in non-decreasing order. Returns: A list of integers sorted in non-decreasing order, containing all elements from both input lists. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add remaining elements from list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Add remaining elements from list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You need to write a function `validate_and_format_phone_number(phone_number: str) -> dict` that validates and formats a given phone number according to international standards. The function must verify that the phone number meets the E.164 standard, which means it should start with a `+` followed by the country code and the subscriber number, ensuring there are no spaces, dashes, or other characters. Your task is to: 1. Validate that the phone number starts with a `+` and contains only digits thereafter. 2. Verify that the phone number, excluding the `+`, is between 10 to 15 digits long, inclusive. 3. Properly format the phone number into the E.164 format if it meets the criteria. 4. If the phone number does not meet the criteria, return an appropriate error message. You will use the following Python libraries: - `re` for regular expressions to validate the pattern of the phone number. Here is a sample phone number you will work with: ``` \\"+14155552671\\" ``` The phone number must be checked for: 1. Presence of a `+` at the beginning. 2. Correct length of digits (10 to 15). 3. Validity as per E.164 standard. Your function should return a dictionary containing: - An entry `isValid`: a boolean indicating whether the phone number is valid. - An entry `formattedNumber`: the phone number formatted correctly or `None` if invalid. - An entry `error`: `None` if valid, otherwise an error message indicating the issue. Example outputs: 1. For input `\\"+14155552671\\"`: ```python { \\"isValid\\": True, \\"formattedNumber\\": \\"+14155552671\\", \\"error\\": None } ``` 2. For input `\\"+1-415-555-2671\\"`: ```python { \\"isValid\\": False, \\"formattedNumber\\": None, \\"error\\": \\"Phone number should only contain digits after the \'+\' sign.\\" } ``` 3. For input `\\"+123\\"`: ```python { \\"isValid\\": False, \\"formattedNumber\\": None, \\"error\\": \\"Phone number should be between 10 and 15 digits long.\\" } ```","solution":"import re def validate_and_format_phone_number(phone_number: str) -> dict: # Ensure the phone number starts with a \'+\' and contains only digits afterward if not phone_number.startswith(\'+\') or not re.match(r\'^+d+\', phone_number): return { \\"isValid\\": False, \\"formattedNumber\\": None, \\"error\\": \\"Phone number should start with \'+\' and contain only digits after the \'+\' sign.\\" } # Exclude the \'+\' and verify the length of the remaining digits digit_length = len(phone_number[1:]) if digit_length < 10 or digit_length > 15: return { \\"isValid\\": False, \\"formattedNumber\\": None, \\"error\\": \\"Phone number should be between 10 and 15 digits long.\\" } # If valid, return the phone number in the correct format return { \\"isValid\\": True, \\"formattedNumber\\": phone_number, \\"error\\": None }"},{"question":"**Given an m x n integer grid `grid`, write a function `find_islands(grid)` that counts and returns the number of distinct islands. An island is defined as a group of `1`s (land) connected 4-directionally (horizontal or vertical), and surrounded by `0`s (water). You may assume that all four edges of the grid are surrounded by water. The input `grid` is a list of lists where each sublist represents a row, and each element in the sublist is either `0` or `1`. The function should: 1. Traverse the grid to identify and count all distinct islands. 2. Use a depth-first search (DFS) or breadth-first search (BFS) algorithm to explore connected components of `1`s. # Example Consider the grid: ``` [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0] ] ``` Calling `find_islands(grid)` on this input should return `3`, because there are three distinct islands as outlined below: 1. The first island is in the top-left corner, 2. The second island is located near the top-right corner, 3. The third island is in the bottom-left corner. # Implementation ```python def find_islands(grid): # Your implementation here ``` Your function should return the correct count of distinct islands based on the provided input grid.","solution":"def find_islands(grid): def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited # Explore all four directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if not grid or not grid[0]: return 0 island_count = 0 for row in range(len(grid)): for col in range(len(grid[0])): if grid[row][col] == 1: island_count += 1 dfs(row, col) return island_count"},{"question":"In this problem, you will create a function to dynamically generate a report based on employee performance data stored in a JSON file fetched from the internet. The data consists of employee names, departments, and monthly sales figures. The goal is to filter the data by department and calculate the average monthly sales for the specified department. Write a function called `department_sales_report` that adheres to the following specifications: # Specifications 1. **Function Signature**: ```python def department_sales_report(url: str, department: str) -> Dict[str, Union[float, List[Dict[str, Union[str, float]]]]]: ``` 2. **Parameters**: - `url` (str): A string representing the URL of the JSON file. - `department` (str): A string representing the department for which the report is to be generated. 3. **Returns**: - A dictionary with the following structure: ```json { \\"average_sales\\": float, \\"employees\\": [ { \\"name\\": str, \\"average_sales\\": float }, ... ] } ``` # Description 1. **Download the File**: - Fetch the JSON file from the provided URL using the `requests.get` method from the `requests` library. 2. **Parse the File**: - Use the `json.loads` method from the `json` module to parse the fetched JSON content. 3. **Filtering and Calculations**: - The JSON file contains a list of employee records. Each record is a dictionary with `name`, `department`, and `sales` keys. `sales` is a list of integers representing monthly sales figures. - Filter the records to only include employees who belong to the specified `department`. - For each employee in the department, calculate their average monthly sales. - Also calculate the overall average monthly sales for the department. # Example ```python url = \'https://example.com/employees.json\' department = \'Sales\' result = department_sales_report(url, department) # Example result could look like: # { # \\"average_sales\\": 5000.0, # \\"employees\\": [ # {\\"name\\": \\"Alice\\", \\"average_sales\\": 5500.0}, # {\\"name\\": \\"Bob\\", \\"average_sales\\": 4500.0} # ] # } ``` # Libraries to be used - `requests.get` from the `requests` library. - `json.loads` from the `json` module. Your implementation should strictly use these libraries where specified.","solution":"import requests import json from typing import Dict, Union, List def department_sales_report(url: str, department: str) -> Dict[str, Union[float, List[Dict[str, Union[str, float]]]]]: response = requests.get(url) employee_data = json.loads(response.text) department_employees = [employee for employee in employee_data if employee[\'department\'] == department] if not department_employees: return { \\"average_sales\\": 0.0, \\"employees\\": [] } total_department_sales = 0 employees_report = [] for employee in department_employees: average_sales = sum(employee[\'sales\']) / len(employee[\'sales\']) employees_report.append({ \\"name\\": employee[\'name\'], \\"average_sales\\": average_sales }) total_department_sales += average_sales department_average_sales = total_department_sales / len(department_employees) return { \\"average_sales\\": department_average_sales, \\"employees\\": employees_report }"},{"question":"Write a function to simulate the roll of a six-sided die 1000 times and plot a histogram showing the frequency of each outcome. The histogram should have appropriate labels and a title. The function should return the most frequently rolled number. The function should output: int: The most frequently rolled number. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import random def roll_die_and_plot(output_file=\'dice_rolls.png\'): ```","solution":"import matplotlib.pyplot as plt import random from collections import Counter def roll_die_and_plot(output_file=\'dice_rolls.png\'): Simulate the roll of a six-sided die 1000 times and plot a histogram showing the frequency of each outcome. The histogram will be saved to the provided output_file path. Returns: int: The most frequently rolled number. # Simulate rolling a die 1000 times rolls = [random.randint(1, 6) for _ in range(1000)] # Count the frequency of each roll roll_counts = Counter(rolls) # Plot the histogram plt.figure(figsize=(10, 6)) plt.hist(rolls, bins=range(1, 8), edgecolor=\'black\', align=\'left\', rwidth=0.8) plt.xticks(range(1, 7)) plt.xlabel(\'Die Number\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of 1000 Die Rolls\') plt.grid(True) # Save the plot to a file plt.savefig(output_file) # Find and return the most frequently rolled number most_frequent_roll = roll_counts.most_common(1)[0][0] return most_frequent_roll"},{"question":"You are tasked with creating a function that simulates a simplified version of a stock market transaction. The function should determine the potential profit from buying and selling a stock based on daily price changes recorded over a week, given as a list of integers. It should find the pair of days that will yield the highest profit and return both the maximum profit and the day pair. **Function Signature:** ```python def max_profit(prices: list[int]) -> tuple[int, tuple[int, int]]: ``` **Parameters:** - `prices` (list[int]): A list of integers representing the stock price at the end of each day for a week (7 elements). **Returns:** - `tuple[int, tuple[int, int]]`: A tuple where the first element is the maximum profit that can be achieved and the second element is a tuple containing the day indices (0-based) indicating the best days to buy and sell. **Instructions:** 1. Use the provided template to define the function `max_profit`. 2. Ensure the function iterates through the given prices to identify the best days to buy and sell for maximum profit. 3. If there is no profit possible, return a profit of 0 and (-1, -1) for the day pair. **Example Call:** ```python result = max_profit([100, 180, 260, 310, 40, 535, 695]) print(result) ``` The output should be `(655, (4, 6))`, indicating the maximum profit is 655 and the best days to buy and sell are day 4 and day 6.","solution":"def max_profit(prices: list[int]) -> tuple[int, tuple[int, int]]: Returns the maximum profit and the pair of days to achieve the maximum profit. If no profit is possible, returns 0 and (-1, -1). n = len(prices) if n < 2: return 0, (-1, -1) max_profit_val = 0 buy_sell_days = (-1, -1) min_price = prices[0] min_day = 0 for i in range(1, n): potential_profit = prices[i] - min_price if potential_profit > max_profit_val: max_profit_val = potential_profit buy_sell_days = (min_day, i) if prices[i] < min_price: min_price = prices[i] min_day = i return max_profit_val, buy_sell_days"},{"question":"You are tasked with implementing a function named `memoize_with_ttl` to cache the results of a given function using a time-to-live (TTL) caching strategy. This function should allow configuration for the maximum age of a cached result, after which the result is considered stale and should be recomputed when the function is called. To implement this, the functionality must be encapsulated in a decorator, and you are required to use the `functools.wraps` decorator from the `functools` library to properly handle function metadata. # Specifications - **Function Name**: `memoize_with_ttl` - **Parameters**: - `ttl`: The time-to-live (TTL) duration in seconds for which a cached result is considered valid. # Requirements 1. **Use the `functools.wraps`** decorator to preserve the wrapped function\'s metadata. 2. Implement the caching mechanism with the specified TTL strategy. 3. Ensure the implementation is thread-safe. 4. Make sure the implementation handles edge cases, such as non-callable objects being passed. # Example Usage ```python import time @memoize_with_ttl(ttl=5) def expensive_computation(x): print(f\\"Computing {x}\\") return x * x # The first call will compute and cache the result print(expensive_computation(2)) # Output: Computing 2 n 4 # The second call within TTL will fetch the result from cache time.sleep(3) print(expensive_computation(2)) # Output: 4 # After TTL expires, the result will be recomputed time.sleep(3) print(expensive_computation(2)) # Output: Computing 2 n 4 ``` # Constraints - The solution should be implemented in Python 3.6 or above. - Use standard library features without adding third-party dependencies. - Ensure the caching logic does not retain objects longer than necessary, preventing potential memory leaks.","solution":"import time import functools import threading def memoize_with_ttl(ttl): Decorator to cache function results for a given TTL (time to live). :param ttl: Time-to-live for the cache in seconds. def decorator(fn): cache = {} cache_expiry = {} lock = threading.Lock() @functools.wraps(fn) def wrapped(*args, **kwargs): with lock: current_time = time.time() key = (args, tuple(kwargs.items())) if key in cache and current_time < cache_expiry[key]: return cache[key] result = fn(*args, **kwargs) cache[key] = result cache_expiry[key] = current_time + ttl return result return wrapped return decorator"},{"question":"In this problem, you are required to write a function named `is_palindrome` that takes a single argument, a string, and returns `True` if the string is a palindrome, and `False` otherwise. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The test function, `test_is_palindrome`, will validate the correctness of your `is_palindrome` function. It achieves this by testing multiple scenarios including typical palindromes, non-palindromes, and edge cases. Your task is to implement the `is_palindrome` function. The function should ignore spaces, punctuation, and capitalization to determine if the input string is a palindrome. Here is the skeleton code for you to follow: ```python def is_palindrome(input_string): import re # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(\'[^A-Za-z0-9]+\', \'\', input_string).lower() # Check if the string reads the same forward and backward return cleaned_string == cleaned_string[::-1] def test_is_palindrome(): assert is_palindrome(\\"Able , was I saw eLba\\") == True, \\"Test case 1 failed\\" assert is_palindrome(\\"racecar\\") == True, \\"Test case 2 failed\\" assert is_palindrome(\\"hello\\") == False, \\"Test case 3 failed\\" assert is_palindrome(\\"\\") == True, \\"Test case 4 failed\\" assert is_palindrome(\\"A man, a plan, a canal, Panama!\\") == True, \\"Test case 5 failed\\" assert is_palindrome(\\"No \'x\' in Nixon\\") == True, \\"Test case 6 failed\\" # You can call the test function to test your solution. test_is_palindrome() ``` Ensure that: - Your implementation of `is_palindrome` correctly handles different cases as specified. - The function uses appropriate methods to clean and reverse the string for the palindrome check.","solution":"def is_palindrome(input_string): import re # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(\'[^A-Za-z0-9]+\', \'\', input_string).lower() # Check if the string reads the same forward and backward return cleaned_string == cleaned_string[::-1]"},{"question":"You are given a string that contains a simple mathematical expression consisting of integers and the operators `+` (addition) and `-` (subtraction) with no parentheses. Your task is to evaluate this expression and return the result. **Requirements**: You need to process the expression strictly according to the left-to-right sequence of operations, and not according to the usual precedence rules of arithmetic (which would prioritize `+` and `-` equally but independently). **Function Signature**: ```python def evaluate_expression(expression: str) -> int: pass ``` **Function Details**: - **Input**: - `expression`: A string containing the mathematical expression, e.g., `\\"3+2-1\\"`. - **Output**: - An integer that represents the evaluated result of the expression. **Example Usage**: ```python print(evaluate_expression(\\"3+2-1\\")) ``` The output should be: ``` 4 ``` **Additional Constraints**: - You can assume that the input expression contains only valid characters and format (i.e., digits and the `+`/`-` operators) with no spaces. - There will be no leading or trailing operators and no consecutive operators.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a simple mathematical expression consisting of integers and the operators + and - without considering the usual precedence rules of arithmetic. total = 0 current_number = 0 current_operator = \'+\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if current_operator == \'+\': total += current_number elif current_operator == \'-\': total -= current_number current_operator = char current_number = 0 # Last operation if current_operator == \'+\': total += current_number elif current_operator == \'-\': total -= current_number return total"},{"question":"Write a function that processes a text file containing details of students\' grades and organizes the data into a dictionary. Each line in the text file follows the format \\"student_name:subject:grade\\". The function reads the file, extracts the data, and returns a dictionary where each student name is a key and the value is another dictionary containing subjects as keys and grades as values. The function should raise the exception for: FileNotFoundError: Raised if the specified file_path does not lead to a valid file. ValueError: Raised if any line in the text file does not conform to the format \\"student_name:subject:grade\\". The function should output with: dict: A dictionary where keys are student names and values are dictionaries with subjects as keys and grades as values. You should write self-contained code starting with: ``` import os def parse_grades(file_path=\'grades.txt\'): ```","solution":"import os def parse_grades(file_path=\'grades.txt\'): Reads a text file with student grades and returns a dictionary with student names as keys and another dictionary of subjects and grades as values. Parameters: file_path (str): The path to the file containing grade information. Returns: dict: Dictionary with student names as keys and another dictionary of subjects and grades as values. Raises: FileNotFoundError: If the specified file_path does not lead to a valid file. ValueError: If any line in the text file does not conform to the format \\"student_name:subject:grade\\". if not os.path.isfile(file_path): raise FileNotFoundError(f\\"The file at {file_path} does not exist.\\") grades_dict = {} with open(file_path, \'r\') as file: for line in file: line = line.strip() parts = line.split(\':\') if len(parts) != 3: raise ValueError(f\\"Line does not conform to format \'student_name:subject:grade\': {line}\\") student_name, subject, grade = parts if student_name not in grades_dict: grades_dict[student_name] = {} grades_dict[student_name][subject] = grade return grades_dict"},{"question":"**Task**: Create a function named `get_top_n_purchases(filename, customer_id, n)` that processes a CSV file using **pandas**. The CSV file contains sales data with columns such as `CustomerID`, `PurchaseDate`, `ProductName`, and `Amount`. The function should: 1. Read the entire CSV file. 2. Filter data for a specific customer identified by `customer_id`. 3. Sort the purchases in descending order based on the `Amount` column. 4. Select the top `n` purchases for that customer. 5. Return a DataFrame with the top `n` purchases, containing `PurchaseDate`, `ProductName`, and `Amount`. **Function Signature**: ```python def get_top_n_purchases(filename: str, customer_id: str, n: int) -> pd.DataFrame: # code here ``` **Requirements**: - Use `pandas.read_csv` to read the CSV file. - Use `pandas.DataFrame` for data manipulation. **Sample Data (`sales.csv`)**: ```csv CustomerID,PurchaseDate,ProductName,Amount C001,2021-01-10,Product A,120.50 C002,2021-01-13,Product B,80.00 C001,2021-02-15,Product C,150.75 C003,2021-03-05,Product A,200.00 C002,2021-03-07,Product D,220.50 C001,2021-04-22,Product E,99.99 C001,2021-05-25,Product F,300.00 C002,2021-06-13,Product G,175.25 C003,2021-07-19,Product H,110.00 ``` **Expected Output**: ```python # Assuming you have the data file in the current directory top_purchases = get_top_n_purchases(\'sales.csv\', \'C001\', 3) print(top_purchases) ``` Output: ``` PurchaseDate ProductName Amount 4 2021-05-25 Product F 300.00 2 2021-02-15 Product C 150.75 0 2021-01-10 Product A 120.50 ```","solution":"import pandas as pd def get_top_n_purchases(filename: str, customer_id: str, n: int) -> pd.DataFrame: Reads a CSV file and returns the top n purchases for a given customer sorted by amount in descending order. Parameters: filename (str): Path to the CSV file containing sales data. customer_id (str): The ID of the customer whose top purchases we want to retrieve. n (int): The number of top purchases to retrieve. Returns: pd.DataFrame: DataFrame containing the top n purchases for the specified customer. # Read the entire CSV file df = pd.read_csv(filename) # Filter data for the specified customer customer_df = df[df[\'CustomerID\'] == customer_id] # Sort the purchases in descending order based on the Amount column sorted_df = customer_df.sort_values(by=\'Amount\', ascending=False) # Select the top n purchases for that customer top_n_purchases = sorted_df.head(n) # Return a DataFrame with PurchaseDate, ProductName, and Amount columns result_df = top_n_purchases[[\'PurchaseDate\', \'ProductName\', \'Amount\']] return result_df"},{"question":"Write a function that takes a string as input and returns a dictionary where the keys are characters and the values are their corresponding frequencies in the string. Ignore spaces and consider the characters case-insensitively. The function should output with: dict: A dictionary with character frequencies. You should write self-contained code starting with: ``` def task_func(input_string): ```","solution":"def task_func(input_string): Takes a string as input and returns a dictionary where the keys are characters and the values are their corresponding frequencies in the string. Ignore spaces and consider the characters case-insensitively. input_string = input_string.replace(\\" \\", \\"\\").lower() frequency_dict = {} for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"You are required to write a function named `aggregate_product_price` that takes a list of dictionaries where each dictionary represents a product with `price` and `quantity` keys. The function should return the total price, which is the sum of the price of all the products multiplied by their respective quantities. Your function should: 1. Accept a list of dictionaries where each dictionary contains two keys: `price` (a floating-point number representing the price of a single unit of the product) and `quantity` (an integer representing the number of units purchased). 2. Calculate the total price by summing up the product of `price` and `quantity` for each dictionary in the list. 3. Return the calculated total price as a floating-point number. Function signature: ```python def aggregate_product_price(products: List[Dict[str, Union[float, int]]]) -> float: pass ``` Example Usage: ```python products = [ {\\"price\\": 10.0, \\"quantity\\": 2}, {\\"price\\": 5.5, \\"quantity\\": 3}, {\\"price\\": 20.0, \\"quantity\\": 1} ] result = aggregate_product_price(products) print(result) # Expected Output: 36.5 ``` Ensure to handle any potential edge cases such as empty lists. The solution should rely on basic list and dictionary operations.","solution":"from typing import List, Dict, Union def aggregate_product_price(products: List[Dict[str, Union[float, int]]]) -> float: Calculates the total price of all products, where each product\'s total price is determined by multiplying its price by its quantity. Args: - products (List[Dict[str, Union[float, int]]]): A list of dictionaries, each containing \'price\' (float) and \'quantity\' (int) keys Returns: - float: The total aggregated price total_price = 0.0 for product in products: total_price += product[\'price\'] * product[\'quantity\'] return total_price"},{"question":"You are given a string composed of uppercase English letters. Your task is to implement a function that finds the length of the longest substring such that each character in this substring appears an even number of times. # Function Specification Name: `longest_even_substring` Parameters: - `s` (str): The input string composed of uppercase English letters. Returns: - `int`: The length of the longest substring where each character appears an even number of times. # Description The function should efficiently identify the longest substring within the given string `s` (which can be of length up to 10,000), where each character appears an even number of times. Consider optimizing the function using bitwise operations or dynamic programming to handle potentially large input. # Example Usage ```python def longest_even_substring(s): # Your implementation here pass # Example cases print(longest_even_substring(\\"ABAB\\")) # Output: 4 print(longest_even_substring(\\"AABBCC\\")) # Output: 6 print(longest_even_substring(\\"AABCDE\\")) # Output: 2 print(longest_even_substring(\\"AABBACCBE\\")) # Output: 6 ``` # Hints 1. Consider using bitwise operations to track character parity (even or odd count). 2. Use a hashmap to store the earliest occurrence of each parity state to optimize the solution. 3. Pay attention to edge cases where the longest even substring might be at the beginning or the end of the string, or the entire string itself.","solution":"def longest_even_substring(s): Returns the length of the longest substring where each character appears an even number of times. # Dictionary to store the first occurrence of each state state_map = {0: -1} state = 0 max_length = 0 for i, char in enumerate(s): # Compute bitwise state for the current character state ^= 1 << (ord(char) - ord(\'A\')) # If this state has been seen before, update the maximum length if state in state_map: max_length = max(max_length, i - state_map[state]) else: state_map[state] = i return max_length"},{"question":"You are tasked with writing a function named `analyze_temperature_data()` that will read temperature data from a file named `temperature_data.txt` and calculate some statistics based on this data. Each line in the file represents a daily temperature reading in Celsius. The function should calculate and return a dictionary with the following keys and corresponding values: - `\'AVERAGE_TEMPERATURE\'`: The average temperature rounded to 2 decimal places. - `\'MAX_TEMPERATURE\'`: The highest temperature recorded. - `\'MIN_TEMPERATURE\'`: The lowest temperature recorded. If the file does not exist, the function should return the following dictionary: - `\'AVERAGE_TEMPERATURE\'`: `None` - `\'MAX_TEMPERATURE\'`: `None` - `\'MIN_TEMPERATURE\'`: `None` Furthermore, if the file contains no valid temperature data, the function should print a message: \\"No temperature data available\\" and return the same dictionary as when the file does not exist. Here is a template to get you started: ```python def analyze_temperature_data(): # Your implementation here ``` You can assume that each line in the file is properly formatted and contains only valid numerical values for temperatures.","solution":"def analyze_temperature_data(): try: with open(\'temperature_data.txt\', \'r\') as file: temperatures = [] for line in file: try: temperatures.append(float(line.strip())) except ValueError: continue if not temperatures: print(\\"No temperature data available\\") return { \'AVERAGE_TEMPERATURE\': None, \'MAX_TEMPERATURE\': None, \'MIN_TEMPERATURE\': None } avg_temp = round(sum(temperatures) / len(temperatures), 2) max_temp = max(temperatures) min_temp = min(temperatures) return { \'AVERAGE_TEMPERATURE\': avg_temp, \'MAX_TEMPERATURE\': max_temp, \'MIN_TEMPERATURE\': min_temp } except FileNotFoundError: return { \'AVERAGE_TEMPERATURE\': None, \'MAX_TEMPERATURE\': None, \'MIN_TEMPERATURE\': None }"},{"question":"You are given a text file containing a list of student records, each containing a student\'s ID, name, and a series of test scores. Each record is on a new line and the fields are separated by a comma. Your task is to write a function `process_student_records(file_name)` that processes this file and returns a summary of the students\' performance. The function should calculate the average score for each student and determine their grade based on the following criteria: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 Your solution should utilize the built-in `open`, `read`, and `split` functions appropriately. **Input:** - `file_name` (str): The name of the text file containing the student records. Assume the text file has fields `ID`, `Name`, `Scores` (a series of space-separated integers). **Output:** - A dictionary where the keys are student IDs and each value is a tuple containing the student\'s name, average score (float), and grade (str). ```python def process_student_records(file_name): # Implement your solution here pass # Example Used # Text File \'students.txt\': # 1, John Doe, 85 78 92 # 2, Jane Smith, 90 93 88 # 3, Bob Brown, 72 67 70 # 4, Alice Johnson, 56 62 59 # Example Function Call process_student_records(\'students.txt\') # Expected Output # { # \'1\': (\'John Doe\', 85.0, \'B\'), # \'2\': (\'Jane Smith\', 90.33, \'A\'), # \'3\': (\'Bob Brown\', 69.67, \'D\'), # \'4\': (\'Alice Johnson\', 59.0, \'F\') # } ```","solution":"def process_student_records(file_name): def calculate_grade(average): if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' result = {} with open(file_name, \'r\') as file: for line in file: id, name, scores = line.strip().split(\', \', 2) scores = list(map(int, scores.split())) average = round(sum(scores) / len(scores), 2) grade = calculate_grade(average) result[id] = (name, average, grade) return result"},{"question":"You are tasked with writing a Python function named `count_word_occurrences_in_file` that reads a specified text file and counts the occurrences of each word in the file. The function should return the word occurrence data as a dictionary, where the keys are words and the values are their respective counts. Implement text processing in a case-insensitive manner and consider only alphanumeric characters as part of words. Here is a detailed breakdown of the requirements: 1. The function `count_word_occurrences_in_file` should accept one parameter, `file_path`, which is the path to the text file to be read. 2. Open and read the content of the file specified by `file_path`. 3. Convert all characters in the file content to lowercase to ensure case-insensitive counting. 4. Consider only alphanumeric characters to be part of words. Use regular expressions to remove any non-alphanumeric characters before counting. 5. Use a dictionary to store the word counts, where the keys are words and the values are the number of times each word occurs in the file. 6. Return the dictionary containing the word occurrence data. **Function Signature:** ```python def count_word_occurrences_in_file(file_path: str) -> dict: Counts the occurrences of each word in the specified text file. Parameters: file_path (str): The path to the text file to read from. Returns: dict: A dictionary where keys are words and values are the counts of each word. pass ``` Example Usage: ```python import tempfile # Create a temporary file and write some example text for demonstration temp_file = tempfile.NamedTemporaryFile(delete=False) try: with open(temp_file.name, \'w\') as file: file.write(\\"Hello world! Hello Python. Test, test, test code.\\") # Call the function word_counts = count_word_occurrences_in_file(temp_file.name) # Expected Output: {\'hello\': 2, \'world\': 1, \'python\': 1, \'test\': 3, \'code\': 1} print(word_counts) finally: # Clean up the temporary file os.remove(temp_file.name) ```","solution":"import re from collections import defaultdict def count_word_occurrences_in_file(file_path: str) -> dict: Counts the occurrences of each word in the specified text file. Parameters: file_path (str): The path to the text file to read from. Returns: dict: A dictionary where keys are words and values are the counts of each word. word_counts = defaultdict(int) with open(file_path, \'r\') as file: content = file.read().lower() # Remove non-alphanumeric characters using regular expressions words = re.findall(r\'bw+b\', content) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"You are required to create a function that performs clustering on a provided dataset and visualizes the results. The task involves the application of `sklearn.cluster.KMeans` and `sklearn.metrics.silhouette_score` to demonstrate how different cluster configurations can impact the grouping of data points and the quality of the clustering. Here are the detailed steps for the task: 1. **Load Dataset**: Use `sklearn.datasets.load_digits()` to load a sample dataset. 2. **Preprocess Data**: You may need to normalize the data using `sklearn.preprocessing.StandardScaler`. 3. **Apply KMeans Clustering**: Apply `KMeans` clustering with different numbers of clusters (e.g., 3, 5, 7, 9). 4. **Evaluate Clustering**: Evaluate the clustering performance using the silhouette score for each configuration. 5. **Visualize Clusters**: Visualize the clusters with PCA (Principal Component Analysis) for 2D projection and cluster assignment. You should familiarize yourself with `sklearn.cluster.KMeans` and `sklearn.decomposition.PCA` using the provided API documentation. Your function, `cluster_and_visualize`, should follow this signature: ```python def cluster_and_visualize(): pass ``` **Function Requirements**: - Load the dataset. - Normalize the data. - Apply KMeans clustering with the specified configurations. - Compute and print the silhouette score for each number of clusters. - Use PCA to reduce the dataset to 2D for visualization. - Plot the reduced 2D data points color-coded by their cluster assignments, along with the silhouette scores. Make sure to install required libraries, such as matplotlib for plotting purposes.","solution":"import matplotlib.pyplot as plt from sklearn.datasets import load_digits from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score from sklearn.decomposition import PCA def cluster_and_visualize(): # Load the dataset digits = load_digits() data = digits.data # Normalize the data scaler = StandardScaler() normalized_data = scaler.fit_transform(data) # Number of clusters to evaluate cluster_configurations = [3, 5, 7, 9] silhouette_scores = [] for n_clusters in cluster_configurations: # Apply KMeans clustering kmeans = KMeans(n_clusters=n_clusters, random_state=42) cluster_labels = kmeans.fit_predict(normalized_data) # Evaluate clustering performance using silhouette score score = silhouette_score(normalized_data, cluster_labels) silhouette_scores.append(score) print(f\\"Silhouette score for {n_clusters} clusters: {score:.4f}\\") # Reduce the dataset to 2D using PCA pca = PCA(n_components=2) reduced_data = pca.fit_transform(normalized_data) # Plot the reduced 2D data points plt.figure() plt.scatter(reduced_data[:, 0], reduced_data[:, 1], c=cluster_labels, cmap=\'viridis\', s=50, alpha=0.7) plt.title(f\'KMeans Clustering with {n_clusters} Clusters (Silhouette: {score:.4f})\') plt.xlabel(\'PCA Component 1\') plt.ylabel(\'PCA Component 2\') plt.colorbar() plt.show()"},{"question":"You are required to write a function that simulates a basic online bookstore inventory system. The function you need to create is named `bookstore_inventory`. This function will process an inventory list and support adding new books, removing existing ones, and fetching details of a book by its ISBN. # Requirements - Implement a function named `bookstore_inventory`. - The function should maintain an inventory of books, where each book is represented as a dictionary with the keys: \'title\', \'author\', \'price\', and \'quantity\'. - Provide methods to: - Add a book to the inventory. If the book already exists (identified by ISBN), update the quantity. - Remove a book from the inventory by ISBN. - Fetch the details of a book by ISBN. # Function Signature ```python def bookstore_inventory(): pass ``` # Methods within the Function 1. **add_book(isbn: str, title: str, author: str, price: float, quantity: int = 1)**: - Adds a book to the inventory or updates the quantity if it already exists. 2. **remove_book(isbn: str)**: - Removes a book from the inventory by its ISBN. 3. **get_book_details(isbn: str) -> dict**: - Returns the book details if the book exists, otherwise, returns an empty dictionary. # Example Usage ```python # Create the inventory inventory = bookstore_inventory() # Add books inventory.add_book(\\"978-3-16-148410-0\\", \\"Book Title 1\\", \\"Author A\\", 29.99, 3) inventory.add_book(\\"978-1-23-456789-7\\", \\"Book Title 2\\", \\"Author B\\", 15.99, 2) # Remove a book inventory.remove_book(\\"978-1-23-456789-7\\") # Get book details details = inventory.get_book_details(\\"978-3-16-148410-0\\") print(details) # Output: {\'title\': \'Book Title 1\', \'author\': \'Author A\', \'price\': 29.99, \'quantity\': 3} ``` **Notes**: 1. You can use an internal dictionary to maintain the inventory, with the ISBN as the key. 2. Ensure to handle edge cases, such as trying to remove a book that does not exist. # Example Class Implementation ```python class BookstoreInventory: def __init__(self): self.inventory = {} def add_book(self, isbn, title, author, price, quantity=1): if isbn in self.inventory: self.inventory[isbn][\'quantity\'] += quantity else: self.inventory[isbn] = { \'title\': title, \'author\': author, \'price\': price, \'quantity\': quantity } def remove_book(self, isbn): if isbn in self.inventory: del self.inventory[isbn] def get_book_details(self, isbn): return self.inventory.get(isbn, {}) # Function to return an instance of BookstoreInventory def bookstore_inventory(): return BookstoreInventory() ```","solution":"class BookstoreInventory: def __init__(self): self.inventory = {} def add_book(self, isbn, title, author, price, quantity=1): if isbn in self.inventory: self.inventory[isbn][\'quantity\'] += quantity else: self.inventory[isbn] = { \'title\': title, \'author\': author, \'price\': price, \'quantity\': quantity } def remove_book(self, isbn): if isbn in self.inventory: del self.inventory[isbn] def get_book_details(self, isbn): return self.inventory.get(isbn, {}) def bookstore_inventory(): return BookstoreInventory()"},{"question":"Generates a line plot to visualize the cumulative sum of a given list of numbers. The function should handle exceptions for non-numeric values in the list by replacing them with zero before calculating the cumulative sum. The function should also return a summary of the adjustments made due to the exceptions. The function should output: tuple: A tuple containing the list of cumulative sums and the matplotlib.axes.Axes object of the plotted line chart. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import numpy as np def cumulative_sum_plot(numbers): ```","solution":"import matplotlib.pyplot as plt import numpy as np def cumulative_sum_plot(numbers): Generate a line plot to visualize the cumulative sum of a given list of numbers. Handle exceptions for non-numeric values in the list by replacing them with zero. :param numbers: List of numbers (may include non-numeric values) :return: Tuple containing the list of cumulative sums and the matplotlib.axes.Axes object of the plotted line chart adjustments = 0 clean_numbers = [] for num in numbers: if isinstance(num, (int, float)): clean_numbers.append(num) else: clean_numbers.append(0) adjustments += 1 cumulative_sums = np.cumsum(clean_numbers).tolist() fig, ax = plt.subplots() ax.plot(cumulative_sums) ax.set_title(\'Cumulative Sum Plot\') ax.set_xlabel(\'Index\') ax.set_ylabel(\'Cumulative Sum\') return (cumulative_sums, ax, adjustments)"},{"question":"You are tasked with implementing a function `reverse_level_order` that takes the root of a binary tree and returns a list of its nodes\' values in reversed level order traversal (i.e., starting from the last level and moving upwards, with nodes on the same level ordered from left to right). Here\'s what you need to do: 1. Define a binary tree node class `TreeNode` with the following attributes: - `val`: an integer value stored in the node. - `left`: a reference to the left child node. - `right`: a reference to the right child node. 2. Implement the `reverse_level_order()` function that: - Takes the root node of a binary tree as input. - Traverses the tree in reverse level order. - Returns a list of node values in the exact reverse level order. Use the following constraints in your implementation: - The tree node values will always be non-negative integers. - The input tree may be empty (i.e., the root can be `None`). Function Signature: ```python def reverse_level_order(root: TreeNode) -> List[int]: ... ``` Example: Given the input tree: ``` 1 / 2 3 / 4 5 6 ``` The output should be: ``` [4, 5, 6, 2, 3, 1] ```","solution":"from typing import List, Optional class TreeNode: def __init__(self, val: int, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.val = val self.left = left self.right = right def reverse_level_order(root: TreeNode) -> List[int]: if not root: return [] from collections import deque queue = deque([root]) result = deque() while queue: node = queue.popleft() result.appendleft(node.val) if node.right: queue.append(node.right) if node.left: queue.append(node.left) return list(result)"},{"question":"Analyze a list of tuples, each containing a \'Category\' and a \'Quantity\'. Calculate the total quantity for each category and create a pie chart to visualize the distribution of quantities among categories. Ensure that each slice of the pie chart is labeled with the category name and percentage value. Note that: This function uses \\"Category Distribution\\" as the title for the pie chart. The autopct parameter is set to show the percentage value in two decimal places. The function should raise the exception for: The function will raise ValueError if the input is not a list of tuples, or if each tuple does not contain exactly two elements, with the first being a string and the second being a numeric value. The function should output with: tuple: A tuple containing a dictionary with total quantities for each category and the matplotlib figure of the pie chart. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def task_func(data): ```","solution":"import matplotlib.pyplot as plt from collections import defaultdict def task_func(data): Analyzes a list of tuples containing \'Category\' and \'Quantity\'. Calculates the total quantity for each category and creates a pie chart to visualize the distribution of quantities among categories. Args: data (list of tuples): List of tuples where each tuple contains (Category, Quantity) Returns: tuple: A tuple containing a dictionary with total quantities for each category and the matplotlib figure of the pie chart. Raises: ValueError: If input is not a list of tuples or tuples do not contain exactly two elements, with the first being a string and the second a numeric value. if not isinstance(data, list) or not all(isinstance(item, tuple) and len(item) == 2 and isinstance(item[0], str) and (isinstance(item[1], int) or isinstance(item[1], float)) for item in data): raise ValueError(\\"Input must be a list of tuples, where each tuple contains a string (category) and a numeric value (quantity).\\") category_totals = defaultdict(float) for category, quantity in data: category_totals[category] += quantity labels = list(category_totals.keys()) sizes = list(category_totals.values()) fig, ax = plt.subplots() ax.pie(sizes, labels=labels, autopct=\'%1.2f%%\', startangle=90) ax.axis(\'equal\') plt.title(\\"Category Distribution\\") return category_totals, fig"},{"question":"You are given a text document containing multiple paragraphs, and your task is to identify the top-n most frequently used words within each paragraph. You need to create a function named `find_top_n_words` that: 1. Reads the text document from a given file. 2. Splits the document into paragraphs. 3. Processes each paragraph to remove punctuation and convert all words to lowercase. 4. Counts the frequency of each word in each paragraph. 5. Identifies the top-n most frequently used words in each paragraph. 6. Prints the top-n words along with their frequencies for each paragraph. Your function should use the following parameters: - `TEXT_FILE`: A string representing the path to the file containing the text document. - `N`: An integer indicating the number of top words to return for each paragraph. Function signature: ```python def find_top_n_words(TEXT_FILE: str, N: int) -> None: ... ``` **Example File Structure**: - `TEXT_FILE` contains multiple paragraphs separated by blank lines. For instance: ``` Paragraph one text... Paragraph two text... Paragraph three text... ``` **You can assume the following basic structure for your code:** ```python import re from collections import Counter def find_top_n_words(TEXT_FILE: str, N: int) -> None: # Your implementation here pass ```","solution":"import re from collections import Counter def find_top_n_words(TEXT_FILE: str, N: int) -> None: with open(TEXT_FILE, \'r\') as file: text = file.read() paragraphs = text.strip().split(\'nn\') for i, paragraph in enumerate(paragraphs): words = re.findall(r\'bw+b\', paragraph.lower()) word_count = Counter(words) top_n_words = word_count.most_common(N) print(f\\"Paragraph {i+1}:\\") for word, freq in top_n_words: print(f\\"{word}: {freq}\\") print() # Just for better readability between paragraphs"},{"question":"In this problem, you are required to write a function `trim_and_concat_strings(data)` that trims leading and trailing white spaces from all string entries in two specific columns (\'first_name\' and \'last_name\') of a given DataFrame and concatenates them with a space character in between to form a new column \'full_name\'. The DataFrame `data` contains at least the following columns: 1. `first_name`: representing the first names. 2. `last_name`: representing the last names. Your function should utilize the `str.strip()` method from the pandas library to trim the strings. Function Signature: ```python def trim_and_concat_strings(data: pd.DataFrame) -> pd.DataFrame: ``` Example: ```python import pandas as pd data = pd.DataFrame({ \'first_name\': [\' John\', \'Jane \', \' Bob \', \'Alice\', \' Michael \'], \'last_name\': [\' Doe\', \'Smith \', \' Brown \', \'White\', \' Johnson \'] }) processed_data = trim_and_concat_strings(data) print(processed_data) ``` Expected Output: ``` first_name last_name full_name 0 John Doe John Doe 1 Jane Smith Jane Smith 2 Bob Brown Bob Brown 3 Alice White Alice White 4 Michael Johnson Michael Johnson ``` Notes: - Ensure that the original \'first_name\' and \'last_name\' columns are left unchanged. - The \'full_name\' column should be created by concatenating trimmed \'first_name\' and \'last_name\' columns with a single space character in between. - Do not use other libraries for string operations other than pandas.","solution":"import pandas as pd def trim_and_concat_strings(data: pd.DataFrame) -> pd.DataFrame: Trims leading and trailing white spaces from all string entries in \'first_name\' and \'last_name\' columns and concatenates them with a space character in between to form a new column \'full_name\'. Parameters: data (pd.DataFrame): DataFrame containing \'first_name\' and \'last_name\' columns. Returns: pd.DataFrame: DataFrame with an additional \'full_name\' column. data[\'full_name\'] = data[\'first_name\'].str.strip() + \' \' + data[\'last_name\'].str.strip() return data"},{"question":"Write a function that processes a log file to count the number of occurrences of each unique IP address. The log file contains multiple lines, each representing an HTTP request in the format: `IP_ADDRESS - - [DATE] \\"REQUEST_METHOD REQUEST_PATH PROTOCOL\\" STATUS_CODE RESPONSE_SIZE`. The function reads the log file and writes the results to a new text file where each line contains an IP address and its corresponding count, sorted by count in descending order, and for ties sorted by the IP address in ascending order. The function should output: None: The function doesn\'t return anything. You should write self-contained code starting with: ``` def count_ip_occurrences(log_file, output_file): ```","solution":"def count_ip_occurrences(log_file, output_file): Reads a log file and counts the occurrences of each unique IP address. Writes the counts to an output file sorted by count in descending order and by IP in ascending order for ties. ip_counts = {} # Read the log file and count IP occurrences with open(log_file, \'r\') as file: for line in file: parts = line.split() ip_address = parts[0] if ip_address in ip_counts: ip_counts[ip_address] += 1 else: ip_counts[ip_address] = 1 # Sort the IP addresses first by count in descending order, then by IP address in ascending order sorted_ip_counts = sorted(ip_counts.items(), key=lambda x: (-x[1], x[0])) # Write the sorted counts to the output file with open(output_file, \'w\') as file: for ip, count in sorted_ip_counts: file.write(f\\"{ip} {count}n\\")"},{"question":"Develop a function that predicts the class of an iris flower given its features using a pre-trained KNN model. The function should first split the provided dataset into training and testing sets, train a KNN classifier with the training data, and evaluate the accuracy on the testing set. It should then use the trained model to predict the class of a new iris flower based on provided sepal length, sepal width, petal length, and petal width. If the input values are not within a realistic range for iris measurements, the function should raise a ValueError. The function should output: - str: The predicted class of the new iris flower. - float: The accuracy of the KNN model on the test dataset. You should write self-contained code starting with: ``` from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier import numpy as np def predict_iris_class(sepal_length, sepal_width, petal_length, petal_width): ```","solution":"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier import numpy as np def predict_iris_class(sepal_length, sepal_width, petal_length, petal_width): # Load iris dataset iris = load_iris() X = iris.data y = iris.target # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train KNN classifier model = KNeighborsClassifier(n_neighbors=3) model.fit(X_train, y_train) # Evaluate the accuracy on the test set accuracy = model.score(X_test, y_test) # Check if input values are realistic if not (4.0 <= sepal_length <= 8.0 and 2.0 <= sepal_width <= 4.5 and 1.0 <= petal_length <= 7.0 and 0.1 <= petal_width <= 2.5): raise ValueError(\\"Input values are not within a realistic range for iris measurements.\\") # Predict the class of the new iris flower new_sample = np.array([[sepal_length, sepal_width, petal_length, petal_width]]) predicted_class = model.predict(new_sample) return iris.target_names[predicted_class][0], accuracy"},{"question":"The task is to implement a simplified version of a credit card fraud detection system. Given a set of historical transaction data, the goal is to predict whether a new transaction is fraudulent or not based on the similarity with past transactions. The function you need to implement is `predict_fraud(transactions, test_transaction)`. Here are the steps to be followed: 1. **Cosine Similarity Calculation**: Compute the cosine similarity between the feature vector of the `test_transaction` and each transaction in `transactions`. 2. **Fraud Prediction**: If there are any transactions in `transactions` that have a cosine similarity above a specified threshold and are marked as fraudulent, predict that `test_transaction` is fraudulent. Otherwise, predict it is not fraudulent. 3. **Threshold**: Use a threshold of 0.85 for cosine similarity to consider transactions as similar. **Parameters:** - `transactions`: A DataFrame containing historical transactions. - `test_transaction`: A dictionary containing the features of the transaction that needs to be tested. **Libraries required**: `numpy`, `pandas` **Implement the following function:** ```python def predict_fraud(transactions, test_transaction): pass ``` **Usage of NumPy API:** - `numpy.sum`: To sum array elements over axes. - `numpy.array`: To create a numpy array from a list. - `numpy.dot`: To perform dot product of two arrays. - `numpy.linalg.norm`: To compute the norm of an array. **Data Structure:** - `transactions`: Should have at least the columns `transactionId`, `features` (where `features` is a list of feature vectors for each transaction), and `fraudulent` (boolean indicating if the transaction is fraudulent). - `test_transaction`: Should be a dictionary with the key `features` containing the feature vector of the transaction to be tested.","solution":"import numpy as np import pandas as pd def cosine_similarity(vec1, vec2): dot_product = np.dot(vec1, vec2) norm_vec1 = np.linalg.norm(vec1) norm_vec2 = np.linalg.norm(vec2) return dot_product / (norm_vec1 * norm_vec2) def predict_fraud(transactions, test_transaction, threshold=0.85): test_features = np.array(test_transaction[\'features\']) for index, row in transactions.iterrows(): transaction_features = np.array(row[\'features\']) similarity = cosine_similarity(test_features, transaction_features) if similarity > threshold and row[\'fraudulent\']: return True return False"},{"question":"You have been assigned the task of developing a function that processes a list of sentences and returns a dictionary where the keys are the words in the sentences and the values are their respective frequencies across all sentences. Your program should be case insensitive and should consider a word to end at any of the following punctuation marks: comma (,), period (.), exclamation (!), or question mark (?). Write the function `word_frequencies` that takes a single argument: 1. `sentences`: A list of strings, where each string is a sentence. The function should: - Convert all words to lowercase. - Split the sentences into words and keep track of the frequency of each word. - Remove trailing punctuation marks (comma, period, exclamation, question mark). - Return a dictionary with words as keys and their frequencies as values. **Function Signature:** ```python def word_frequencies(sentences: List[str]) -> Dict[str, int]: ... ``` **Example:** ```python sentences = [ \\"Hello, world! It\'s a beautiful day.\\", \\"Hello there! How are you today?\\", \\"It\'s a sunny day. Don\'t you think so?\\" ] # Call the function and print the result print(word_frequencies(sentences)) ``` **Expected Output:** ```python { \'hello\': 2, \'world\': 1, \'it\'s\': 2, \'a\': 2, \'beautiful\': 1, \'day\': 2, \'there\': 1, \'how\': 1, \'are\': 1, \'you\': 2, \'today\': 1, \'sunny\': 1, \'don\'t\': 1, \'think\': 1, \'so\': 1 } ```","solution":"from typing import List, Dict import string def word_frequencies(sentences: List[str]) -> Dict[str, int]: Returns a dictionary where the keys are words in the list of sentences and the values are their respective frequencies. word_freq = {} punctuation = \\",.!?\\" for sentence in sentences: # Convert sentence to lowercase sentence = sentence.lower() # Remove trailing punctuation words = [word.strip(punctuation) for word in sentence.split()] for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"Create a function named `filter_and_count_words` for analyzing the word usage in a given text. This function should take a text string as input and return a dictionary where the keys are words and the values are the number of times each word appears in the text. The function should also filter out any common stop words and perform a case-insensitive count of the words. Function Specification: Function Name: ```python filter_and_count_words(text: str, stop_words: List[str]) -> Dict[str, int] ``` **Parameters:** - `text` (str): A string containing the input text to analyze. - `stop_words` (List[str]): A list of common stop words to be filtered out. **Returns:** - A dictionary where the keys are the words from the input text (excluding stop words and case-insensitive) and the values are the counts of each word\'s occurrences. **Additional Requirements:** 1. Convert all words to lowercase to ensure the count is case-insensitive. 2. Use regular expressions to split the text into words, considering words to be sequences of alphabetic characters. 3. Filter out words present in the `stop_words` list. **Example:** Given the input: ```python text = \\"The quick brown fox jumps over the lazy dog. The quick brown fox is quick.\\" stop_words = [\\"the\\", \\"is\\", \\"over\\"] ``` When calling: ```python filter_and_count_words(text, stop_words) ``` The function should return: ```python { \'quick\': 3, \'brown\': 2, \'fox\': 2, \'jumps\': 1, \'lazy\': 1, \'dog\': 1 } ```","solution":"import re from typing import List, Dict def filter_and_count_words(text: str, stop_words: List[str]) -> Dict[str, int]: Analyzes the word usage in a given text. - Converts all words to lowercase to ensure case-insensitive count. - Filters out any common stop words. - Performs a count of all other words. Args: text (str): A string containing the input text to analyze. stop_words (List[str]): A list of common stop words to be filtered out. Returns: Dict[str, int]: A dictionary where keys are words from the input text (excluding stop words and case-insensitive) and values are the counts of each word\'s occurrences. # Convert text to lowercase text = text.lower() # Use regular expression to split the text into words words = re.findall(r\'b[a-z]+b\', text) # Filter out the stop words and count occurrences word_count = {} for word in words: if word not in stop_words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"# Common Divisors Count You are tasked with creating a function that counts the number of common divisors between two given integers. The goal is to determine how many numbers between 1 and the minimum of the two integers are divisors of both. # Input Parameters - `num1` (int): The first integer. - `num2` (int): The second integer. # Function Name `count_common_divisors` # Function Description This function should perform the following tasks: 1. Print out the given integers. 2. Identify the smallest of the two integers. 3. Iterate through all numbers from 1 to the smallest integer and count how many of those numbers are divisors of both integers. 4. Return the count of common divisors. **Important:** Ensure to correctly handle cases where one or both input values are not positive integers. # Output The function should return the count of common divisors. Example ```python count_common_divisors(12, 18) ``` # Expected Output ``` Common divisors count: 4 ``` # Explanation The common divisors of 12 and 18 are: 1, 2, 3, 6. Thus, the function should return 4. Constraints - Both input integers will be positive (greater than zero).","solution":"def count_common_divisors(num1, num2): Returns the count of common divisors between two given integers. Parameters: num1 (int): The first integer. num2 (int): The second integer. Returns: int: The count of common divisors between num1 and num2. # Ensure the integers are positive if num1 <= 0 or num2 <= 0: raise ValueError(\\"Both integers must be positive.\\") # Find the minimum of the two integers min_num = min(num1, num2) # Count the common divisors count = 0 for i in range(1, min_num + 1): if num1 % i == 0 and num2 % i == 0: count += 1 return count"},{"question":"# Task: You are to implement a function `rotate_image_90_degrees` that rotates a given matrix (image) by 90 degrees clockwise. This function will leverage numpy\'s array manipulation capabilities. # Input: 1. **image** (np.ndarray): A 2D matrix representing an image of shape `(M, N)`, where `M` is the number of rows (height) and `N` is the number of columns (width). # Output: - **rotated_image** (np.ndarray): A new 2D matrix representing the image rotated 90 degrees clockwise, with the shape `(N, M)`. # Examples: ```python import numpy as np # Example input image = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) # Example usage rotated_image = rotate_image_90_degrees(image) print(rotated_image) # Expected output: # [[7, 4, 1], # [8, 5, 2], # [9, 6, 3]] ``` # Function Signature: ```python def rotate_image_90_degrees(image: np.ndarray) -> np.ndarray: ``` # Requirements: - You **must** use numpy\'s array manipulation functions such as `np.transpose` and `np.flip` in your implementation to achieve the rotation. - Ensure the output maintains the integrity of the image elements in their rotated positions.","solution":"import numpy as np def rotate_image_90_degrees(image: np.ndarray) -> np.ndarray: Rotates the given 2D numpy array (image) by 90 degrees clockwise. Parameters: image (np.ndarray): 2D matrix representing the image. Returns: np.ndarray: 2D matrix representing the rotated image. # Transpose the image matrix transposed_image = np.transpose(image) # Flip the transposed matrix vertically to get the 90 degrees clockwise rotated image rotated_image = np.flip(transposed_image, axis=1) return rotated_image"},{"question":"Create a function to simulate a basic inventory management system. Implement a class `Inventory` that can add items, remove items, and display the current inventory. Each item in the inventory should have a unique identifier (ID), a name, and a quantity. The inventory should be implemented using a dictionary where keys are item IDs and values are another dictionary containing item name and quantity. Additionally, implement a method `most_stocked_item` that returns the item with the highest quantity in the inventory. The class should have the following methods: - `add_item(item_id: str, name: str, quantity: int)`: Adds an item to the inventory. If the item already exists, it should update the quantity. - `remove_item(item_id: str)`: Removes an item from the inventory by its ID. - `display_inventory()`: Prints the current state of the inventory. - `most_stocked_item()`: Returns a tuple containing the name and quantity of the item with the highest stock. You should write self-contained code starting with: ``` class Inventory: def __init__(self): self.items = {} def add_item(self, item_id, name, quantity): # Your code here def remove_item(self, item_id): # Your code here def display_inventory(self): # Your code here def most_stocked_item(self): # Your code here ```","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_id, name, quantity): if item_id in self.items: self.items[item_id][\'quantity\'] += quantity else: self.items[item_id] = {\'name\': name, \'quantity\': quantity} def remove_item(self, item_id): if item_id in self.items: del self.items[item_id] def display_inventory(self): for item_id, item_info in self.items.items(): print(f\\"ID: {item_id}, Name: {item_info[\'name\']}, Quantity: {item_info[\'quantity\']}\\") def most_stocked_item(self): if not self.items: return None max_item_id = max(self.items, key=lambda item_id: self.items[item_id][\'quantity\']) max_item = self.items[max_item_id] return (max_item[\'name\'], max_item[\'quantity\'])"},{"question":"In this exercise, you will implement a function to generate a Fibonacci spiral using the `matplotlib` and `numpy` libraries in Python. The purpose of this task is to practice using loops and plotting functions to create complex patterns. The function you will implement is called `fibonacci_spiral`. Function Signature ```python def fibonacci_spiral(n): ``` Parameters - `n` (int): The number of terms in the Fibonacci sequence to use for generating the spiral. Requirements 1. Calculate the Fibonacci sequence up to the `n`th term. 2. Use the `matplotlib` and `numpy` libraries to generate and plot arcs that form the Fibonacci spiral. 3. Each arc should correspond to consecutive Fibonacci numbers in length. 4. The arcs should be oriented such that they follow the pattern of the Fibonacci spiral, making quarter circles in succession. Example Usage ```python import matplotlib.pyplot as plt import numpy as np def fibonacci_spiral(n): # Your code here to generate and plot the Fibonacci spiral pass fibonacci_spiral(10) plt.show() ``` Expected Outcome The function will produce a plot displaying a Fibonacci spiral consisting of `n` quarter circle arcs, where each arc length corresponds to the respective Fibonacci number in the sequence. For example, calling `fibonacci_spiral(10)` will generate a spiral using the first 10 Fibonacci numbers.","solution":"import matplotlib.pyplot as plt import numpy as np def fibonacci_spiral(n): Generate and plot a Fibonacci spiral up to the `n`th term. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") # Generating Fibonacci sequence fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Define initial parameters x, y = 0, 0 angle = 0 # Current angle in degrees plt.figure(figsize=(10, 10)) ax = plt.gca() ax.set_aspect(\'equal\') for i in range(1, n): r = fib_sequence[i] theta = np.linspace(np.radians(angle), np.radians(angle + 90), 100) x_arc = x + r * np.cos(theta) y_arc = y + r * np.sin(theta) plt.plot(x_arc, y_arc, \'b\') # Calculate the next starting point for the arc x = x_arc[-1] y = y_arc[-1] # Update the angle angle += 90 plt.title(f\'Fibonacci Spiral with {n} Terms\') plt.show()"},{"question":"In this task, you need to implement a function for simulating a simplified version of the classic game \\"Snake\\". The snake moves on a grid, growing in size as it \\"eats\\" food that appears on the grid. The game ends if the snake collides with itself or the grid boundaries. Your simulation will track the snake\'s length as it moves. Your **function** will be named `play_snake_game`. This function will take three parameters: - `grid_size`: An integer representing the size of the grid (i.e., the grid will be `grid_size` x `grid_size`). - `moves`: A list of strings representing the sequence of moves. Each move can be \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). - `food`: A list of tuples representing the positions where food will appear sequentially. Each tuple contains two integers representing the row and column indices of the food position. The snake starts at the top-left corner of the grid (position `(0, 0)`) and occupies one cell initially. The snake will move according to the directions provided in the `moves` list. Each move advances the snake\'s head in the given direction, potentially increasing its length if it consumes food. The snake grows only when it reaches a food position. The function should return the length of the snake after all moves have been processed or the game ends prematurely. Your function should achieve the following: 1. Initialize the snake\'s starting position and track its body segments. 2. Process each move in the `moves` list, moving the snake according to the direction. 3. If the snake encounters food, increase its length. 4. If the snake collides with itself or the boundaries, terminate the simulation. 5. Return the snake\'s final length. **Function Signature:** ```python def play_snake_game(grid_size: int, moves: List[str], food: List[Tuple[int, int]]) -> int: pass ``` # Example: ```python # Example usage print(play_snake_game(5, [\'R\', \'R\', \'D\', \'D\', \'L\', \'U\'], [(0, 1), (2, 2)])) # Returns 3, as the snake eats two pieces of food and reaches a length of 3 before encountering a boundary. ``` # Requirements: - Ensure the snake\'s movement and collision logic is implemented correctly. - Handle the edge cases where the snake reaches the boundary or collides with itself.","solution":"from typing import List, Tuple def play_snake_game(grid_size: int, moves: List[str], food: List[Tuple[int, int]]) -> int: # Initial snake position and body snake = [(0, 0)] food_index = 0 # Direction movements: U, D, L, R direction_map = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } for move in moves: head = snake[-1] move_delta = direction_map[move] new_head = (head[0] + move_delta[0], head[1] + move_delta[1]) # Check if the new head position is out of bounds if not (0 <= new_head[0] < grid_size and 0 <= new_head[1] < grid_size): break # Check if the new head position collides with the snake body (excluding the tail because it\'s moving) if new_head in snake[:-1]: break # Move the snake by adding the new head to the end of the body snake.append(new_head) # Check if the new head is on food if food_index < len(food) and new_head == food[food_index]: food_index += 1 else: # If not eating food, remove the tail snake.pop(0) return len(snake)"},{"question":"Create a Python function named `shortest_unique_substring` that takes a string `s` and returns the shortest substring of `s` that contains all unique characters from `s`. If the string contains all unique characters already, return the entire string. The function should follow these steps: 1. Identify all unique characters in the input string. 2. Use a sliding window approach to find the shortest substring that contains all these unique characters. 3. Return the shortest such substring found. Your function should handle cases where the input string is empty by returning an empty string. **Example Usage:** ```python result = shortest_unique_substring(\\"abcabcbb\\") print(result) # Output: \\"abc\\" result = shortest_unique_substring(\\"bbbbb\\") print(result) # Output: \\"b\\" result = shortest_unique_substring(\\"\\") print(result) # Output: \\"\\" ```","solution":"def shortest_unique_substring(s): Returns the shortest substring of `s` that contains all unique characters from `s`. if not s: return \\"\\" unique_chars = set(s) unique_count = len(unique_chars) left = 0 char_count = {} min_length = float(\'inf\') min_substring = \\"\\" for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) == unique_count: current_length = right - left + 1 if current_length < min_length: min_length = current_length min_substring = s[left:right+1] if char_count[s[left]] == 1: del char_count[s[left]] else: char_count[s[left]] -= 1 left += 1 return min_substring"},{"question":"You are asked to create a function that takes a list of integers and returns a new list containing only the unique elements, maintaining their original order of appearance. Write a function named `unique_elements` that performs the following steps: 1. Receive a list `input_list` containing integers. 2. Iterate through the elements in `input_list` and add elements to a new list `unique_list` only if they are not already present in `unique_list`. 3. Return the `unique_list` which contains only the unique elements from `input_list` with their first appearance order preserved. The function signature should be: ```python def unique_elements(input_list: list) -> list: ``` # Example: ```python unique_elements([1, 2, 2, 3, 4, 4, 5]) # should return [1, 2, 3, 4, 5] unique_elements([7, 8, 8, 9, 7, 6]) # should return [7, 8, 9, 6] unique_elements([2, 2, 2]) # should return [2] unique_elements([]) # should return [] ```","solution":"def unique_elements(input_list: list) -> list: Returns a new list containing only the unique elements from the input list, maintaining their original order of appearance. unique_list = [] for elem in input_list: if elem not in unique_list: unique_list.append(elem) return unique_list"},{"question":"Create a function called `simulate_population_growth` that models the growth of a population over time according to the logistic growth equation. The function should return a 1D NumPy array representing the population size at each time step, starting from the initial population up to the end time. The logistic growth equation is given by: [ P(t + 1) = P(t) + r cdot P(t) cdot left(1 - frac{P(t)}{K}right) ] Where: - ( P(t) ) is the population at the current time step. - ( r ) is the intrinsic growth rate. - ( K ) is the carrying capacity of the environment. # Function Signature: ```python def simulate_population_growth(P0: float, r: float, K: float, t_steps: int) -> np.ndarray: ``` # Parameters: - `P0` (float): Initial population size. - `r` (float): Intrinsic growth rate. - `K` (float): Carrying capacity. - `t_steps` (int): Number of time steps to simulate. # Requirements: 1. Use `numpy.zeros` to initialize a NumPy array for storing the population size at each time step. 2. Implement the logistic growth equation to compute the population size at each time step. 3. Start from the initial population and simulate until the specified number of time steps is reached. # Returns: - A 1D NumPy array of length `t_steps + 1`, where each element represents the population size at each time step. # Example: ```python simulate_population_growth(50, 0.1, 100, 10) ``` This should return an array with values similar to: ``` array([ 50. , 54.5 , 59.2025 , 64.12236125, 69.27515798, 74.6766358 , 80.34283924, 86.29014455, 92.53538579, 99.09590736, 105.98961263]) ```","solution":"import numpy as np def simulate_population_growth(P0: float, r: float, K: float, t_steps: int) -> np.ndarray: Simulate population growth using the logistic growth equation. Parameters: - P0 (float): Initial population size. - r (float): Intrinsic growth rate. - K (float): Carrying capacity. - t_steps (int): Number of time steps to simulate. Returns: - np.ndarray: 1D array representing the population size at each time step. population = np.zeros(t_steps + 1) population[0] = P0 for t in range(t_steps): population[t + 1] = population[t] + r * population[t] * (1 - population[t] / K) return population"},{"question":"In this problem, you will create a function `merge_and_sort_dicts(dict1, dict2)` that takes two dictionaries as inputs, merges them into one dictionary, and returns a sorted list of the values. The keys in the dictionaries will be unique, and the values will always be integers. Your task is to implement the `merge_and_sort_dicts` function that: 1. Takes two dictionaries, `dict1` and `dict2`, as inputs. 2. Merges the dictionaries into a single dictionary. If both dictionaries have the same keys, the value from `dict2` should overwrite the value from `dict1`. 3. Extracts all the values from the merged dictionary. 4. Sorts the extracted values in ascending order. 5. Returns the sorted list of values. **Example:** ```python dict1 = {\'a\': 5, \'b\': 3, \'c\': 9} dict2 = {\'b\': 6, \'d\': 2, \'e\': 7} # Merged dictionary: {\'a\': 5, \'b\': 6, \'c\': 9, \'d\': 2, \'e\': 7} # Sorted values: [2, 5, 6, 7, 9] assert merge_and_sort_dicts(dict1, dict2) == [2, 5, 6, 7, 9] dict1 = {\'x\': 15, \'y\': 10} dict2 = {\'y\': 12, \'z\': 8} # Merged dictionary: {\'x\': 15, \'y\': 12, \'z\': 8} # Sorted values: [8, 12, 15] assert merge_and_sort_dicts(dict1, dict2) == [8, 12, 15] ```","solution":"def merge_and_sort_dicts(dict1, dict2): Merges two dictionaries and returns a sorted list of their values. # Merging the dictionaries merged_dict = dict1.copy() merged_dict.update(dict2) # Extracting the values and sorting them sorted_values = sorted(merged_dict.values()) return sorted_values"},{"question":"In this task, you are required to create a function called `generate_confusion_matrix` that takes as input the true labels and predicted labels of a classification task and generates a confusion matrix plot using the `matplotlib` library. The function should provide options to include a normalized confusion matrix and customize the plot with a title and class names. The function should have the following parameters: - `true_labels` (list or array-like): The true labels from the dataset. - `predicted_labels` (list or array-like): The predicted labels from the classification model. - `normalize` (bool, optional): Whether to normalize the confusion matrix. Default is False. - `title` (str, optional): Title for the confusion matrix plot. Default is \'Confusion Matrix\'. - `class_names` (list, optional): List of class names to display on the axes. Default is None. You are provided with the structure of the function below. You need to implement this function: ```python import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import confusion_matrix def generate_confusion_matrix(true_labels, predicted_labels, normalize=False, title=\'Confusion Matrix\', class_names=None): # Your code to generate confusion matrix here pass ``` # Example In an example usage scenario, given the true labels `y_true` and the predicted labels `y_pred`, the function call would look like this: ```python generate_confusion_matrix(y_true, y_pred, normalize=True, title=\'Normalized Confusion Matrix\', class_names=[\'Class 0\', \'Class 1\']) ``` This would create a normalized confusion matrix plot with the title \'Normalized Confusion Matrix\', and axis labels \'Class 0\' and \'Class 1\'. # Requirements: 1. Use the `confusion_matrix` function from `sklearn.metrics` to compute the confusion matrix. 2. If `normalize` is True, normalize the confusion matrix by the number of true instances per class. 3. Plot the confusion matrix using `matplotlib`\'s `imshow` function. 4. Customize the plot with axis labels (if `class_names` are provided), a color bar, and the specified title. 5. Ensure the plot ticks are labeled with class names if provided. If not, default to numerical labels. Your task is to implement the function and ensure it correctly generates the confusion matrix plots as specified.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import confusion_matrix def generate_confusion_matrix(true_labels, predicted_labels, normalize=False, title=\'Confusion Matrix\', class_names=None): cm = confusion_matrix(true_labels, predicted_labels) if normalize: cm = cm.astype(\'float\') / cm.sum(axis=1)[:, np.newaxis] plt.figure(figsize=(8, 8)) plt.imshow(cm, interpolation=\'nearest\', cmap=plt.cm.Blues) plt.title(title) plt.colorbar() if class_names is not None: tick_marks = np.arange(len(class_names)) plt.xticks(tick_marks, class_names, rotation=45) plt.yticks(tick_marks, class_names) else: tick_marks = np.arange(len(np.unique(true_labels))) plt.xticks(tick_marks) plt.yticks(tick_marks) fmt = \'.2f\' if normalize else \'d\' thresh = cm.max() / 2. for i, j in np.ndindex(cm.shape): plt.text(j, i, format(cm[i, j], fmt), horizontalalignment=\\"center\\", color=\\"white\\" if cm[i, j] > thresh else \\"black\\") plt.ylabel(\'True label\') plt.xlabel(\'Predicted label\') plt.tight_layout() plt.show()"},{"question":"Create a function that generates a random list of integers and plots a histogram of their distribution. The function should take two parameters: `n` (number of integers) and `bins` (number of bins in the histogram). Use `numpy` to generate the random integers within the range of 1 to 100. Label the x-axis as \\"Value\\" and y-axis as \\"Frequency\\", and provide a title \\"Histogram of Random Integers\\". The function should output: matplotlib.figure.Figure: The Figure object containing the histogram. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(n, bins): ```","solution":"import numpy as np import matplotlib.pyplot as plt def task_func(n, bins): Generates a random list of integers and plots a histogram of their distribution. Parameters: n (int): Number of integers to generate. bins (int): Number of bins in the histogram. Returns: matplotlib.figure.Figure: The Figure object containing the histogram. # Generate n random integers between 1 and 100 random_integers = np.random.randint(1, 101, size=n) # Create the histogram fig, ax = plt.subplots() ax.hist(random_integers, bins=bins) # Set the labels and title ax.set_xlabel(\'Value\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Histogram of Random Integers\') # Return the Figure object return fig"},{"question":"Given a list of integers representing daily temperatures, write a function that returns a list of integers where each element represents the number of days you have to wait for a warmer temperature. If there is no future day with a warmer temperature, store a `0` for that day. For example, given the input list `[73, 74, 75, 71, 69, 72, 76, 73]`, the function should return `[1, 1, 4, 2, 1, 1, 0, 0]`. Your task is to write a function `daily_temperatures(temperatures)` that takes in a list of integers `temperatures` and returns a list of integers. You should aim for an efficient solution, preferably with a time complexity less than O(n^2). **Function Signature:** ```python def daily_temperatures(temperatures: List[int]) -> List[int]: ``` **Example:** ```python assert daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0] ```","solution":"def daily_temperatures(temperatures): Returns a list where each element represents the number of days you have to wait for a warmer temperature. If there is no future day with a warmer temperature, returns 0 for that day. :param temperatures: List[int] :return: List[int] n = len(temperatures) answer = [0] * n stack = [] # a stack to keep indexes of the temperatures list for i in range(n): # while stack is not empty and the current temperature is greater than the temperature # at the index of the top element of the stack while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() answer[prev_index] = i - prev_index stack.append(i) return answer"},{"question":"Create a function that standardizes a given 2D numpy array using Z-score normalization and fills any missing values (NaNs) with the mean of the respective column before standardization. The function should take as input a 2D numpy array and return the standardized array. If there are no missing values, perform only the Z-score normalization. The function should output: numpy.ndarray: A standardized 2D numpy array with missing values filled and Z-score normalization applied. You should write self-contained code starting with: ``` import numpy as np def standardize_and_fill_missing(X): ```","solution":"import numpy as np def standardize_and_fill_missing(X): Standardizes a given 2D numpy array using Z-score normalization and fills any missing values (NaNs) with the mean of the respective column before standardization. Parameters: X (numpy.ndarray): 2D numpy array. Returns: numpy.ndarray: A standardized 2D numpy array with missing values filled and Z-score normalization applied. # Fill missing values (NaNs) with column means col_means = np.nanmean(X, axis=0) indices = np.where(np.isnan(X)) X[indices] = np.take(col_means, indices[1]) # Standardize using Z-score normalization means = np.mean(X, axis=0) std_devs = np.std(X, axis=0) standardized_X = (X - means) / std_devs return standardized_X"},{"question":"You are required to write a Python function `plot_cosine_vs_exponential`, which uses the `matplotlib.pyplot.show` function from the Matplotlib library to display a plot comparing the values of cosine and exponential functions over a range of input values. Here are the details: 1. The function `plot_cosine_vs_exponential` should take two parameters: - `start`: The starting value of the input range. - `end`: The ending value of the input range. 2. It should generate a range of input values from `start` to `end` (inclusive) with a step size of 0.1. 3. It should compute the cosine values and exponential values for each input in the range using the following formulas: - Cosine function: ( cos(x) ) - Exponential function: ( e^x ) 4. Plot the results using Matplotlib: - The y-values of the cosine function should be displayed as a green line. - The y-values of the exponential function should be displayed as an orange line on the same plot. 5. Ensure that the plot function calls `matplotlib.pyplot.show()` to display the plot. Example Context: - `start = 0` - `end = 5` Use the following function signatures to implement the `plot_cosine_vs_exponential` function. Here\'s a simple cosine and exponential calculation which you can assume is already defined: ```python import math def cosine(x): return math.cos(x) def exponential(x): return math.exp(x) ``` Implement the `plot_cosine_vs_exponential` function according to the above specifications.","solution":"import math import matplotlib.pyplot as plt import numpy as np def plot_cosine_vs_exponential(start, end): Plots the cosine and exponential functions over a range from start to end with a step size of 0.1. Arguments: start -- the starting value of the range end -- the ending value of the range # Generate input values x_values = np.arange(start, end + 0.1, 0.1) # Compute cosine and exponential values y_cosine = [math.cos(x) for x in x_values] y_exponential = [math.exp(x) for x in x_values] # Plot the results plt.plot(x_values, y_cosine, label=\\"Cosine\\", color=\'green\') plt.plot(x_values, y_exponential, label=\\"Exponential\\", color=\'orange\') # Add title and legend plt.title(\\"Cosine vs Exponential\\") plt.legend() # Show the plot plt.show()"},{"question":"You are tasked with developing a function for analyzing temperature patterns in a given city dataset containing hourly measurements. Your goal is to write a function `detect_heatwave` that identifies periods of consecutive days where the average daily temperature exceeds a specified threshold. To achieve this, you will utilize the numpy library to manipulate the data efficiently. Functional Requirements 1. The function `detect_heatwave` should: - Take in a 1D numpy array representing hourly temperature measurements and a threshold temperature. - Identify consecutive days where the average daily temperature exceeds the given threshold. - Return a list containing tuples of the start and end indices of each heatwave period found. 2. Use the following approach for implementation: - Divide the hourly data into daily segments. - Calculate the average temperature for each day. - Use the average daily temperature to identify heatwave periods. Inputs - `temperature_data` (np.ndarray): A 1D array of floats representing hourly temperatures. - `threshold` (float): The threshold temperature to determine heatwave conditions. Output - A list of tuples, where each tuple contains the start and end indices (inclusive) of the heatwave periods identified in the original hourly data array. Example Usage ```python import numpy as np # Example hourly temperature data (168 hours representing 7 days) temperature_data = np.array([30]*24 + [31]*24 + [29]*24 + [32]*24 + [33]*24 + [28]*24 + [34]*24) threshold = 30.5 heatwaves = detect_heatwave(temperature_data, threshold) print(heatwaves) # Expected: [(24, 47), (72, 95), (96, 119), (144, 167)] ``` Implementation Details 1. Divide the `temperature_data` array into daily segments. 2. Calculate the average temperature for each 24-hour period. 3. Iterate through the averages to mark the start and end of heatwave periods. 4. Return the list of tuples indicating the start and end indices of these periods in the `temperature_data` array. Note: A day is considered a \\"heatwave\\" if its average temperature exceeds the threshold. Ensure that all periods returned in the output list correspond to times (indices) in the input `temperature_data` array.","solution":"import numpy as np def detect_heatwave(temperature_data, threshold): Identifies periods of consecutive days where the average daily temperature exceeds a specified threshold. Parameters: temperature_data (np.ndarray): A 1D array of floats representing hourly temperatures. threshold (float): The threshold temperature to determine heatwave conditions. Returns: List[Tuple[int, int]]: A list of tuples containing the start and end indices of each heatwave period. num_hours_in_day = 24 num_days = len(temperature_data) // num_hours_in_day daily_avg_temperatures = np.array([np.mean(temperature_data[i*num_hours_in_day:(i+1)*num_hours_in_day]) for i in range(num_days)]) heatwave_periods = [] start_idx = None for i in range(num_days): if daily_avg_temperatures[i] > threshold: if start_idx is None: start_idx = i * num_hours_in_day else: if start_idx is not None: end_idx = (i * num_hours_in_day) - 1 heatwave_periods.append((start_idx, end_idx)) start_idx = None if start_idx is not None: heatwave_periods.append((start_idx, len(temperature_data) - 1)) return heatwave_periods"},{"question":"You are required to develop a function that simulates the lifecycle of cells in a grid based on the rules of Conway\'s Game of Life. Given an initial state, the function should compute the next state of the grid after a single evolution according to these rules: 1. Any live cell with two or three live neighbours survives. 2. Any dead cell with exactly three live neighbours becomes a live cell. 3. All other live cells die in the next generation. Similarly, all other dead cells stay dead. **Function Name:** `game_of_life` **Function Parameters:** - `grid`: A 2D list of integers representing the initial state of the grid (where a `1` signifies a live cell and a `0` signifies a dead cell). **Function Output:** - A 2D list representing the grid state after one evolution according to the rules of the Game of Life. **Rules and Constraints:** 1. The game is played on a 2D grid of size `m x n`, where `m` is the number of rows and `n` is the number of columns. 2. The cells beyond the edges of the grid are considered to be dead. 3. The function should determine the number of live neighbours for each cell by examining all eight possible directions. **Example:** Given the following `grid`: ```python grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] ``` Your function should return: ```python [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` Ensure your function efficiently determines the next state of the grid using the rules specified.","solution":"def game_of_life(grid): # Helper function to count live neighbours of a cell def count_live_neighbours(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 1: count += 1 return count m, n = len(grid), len(grid[0]) next_grid = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): live_neighbours = count_live_neighbours(i, j) if grid[i][j] == 1: if live_neighbours in [2, 3]: next_grid[i][j] = 1 else: next_grid[i][j] = 0 else: if live_neighbours == 3: next_grid[i][j] = 1 else: next_grid[i][j] = 0 return next_grid"},{"question":"Write a function that reads a JSON file containing information about various products and their prices. The JSON file consists of a list of dictionaries, each with the keys \\"productName\\", \\"price\\", and optionally \\"discount\\". Your task is to return a new JSON file wherein the prices are adjusted based on the discount, if available. If no discount is specified for a product, its price remains unchanged. Raise a ValueError if any product has a negative price or invalid discount value. The function should output: str: Path to the newly created JSON file with the updated prices. You should write self-contained code starting with: ```python import json import os def adjust_prices(json_input_path: str, json_output_path: str) -> str: ```","solution":"import json import os def adjust_prices(json_input_path: str, json_output_path: str) -> str: # Load the input JSON file with open(json_input_path, \'r\') as f: products = json.load(f) # Process each product, adjusting its price based on the discount for product in products: price = product.get(\'price\') discount = product.get(\'discount\', 0) # Validate the price and discount if price < 0 or not (0 <= discount <= 100): raise ValueError(\\"Invalid price or discount value in product: {}\\".format(product)) # Apply the discount if available if discount: product[\'price\'] = round(price * (1 - discount / 100), 2) # Write the adjusted products list to the output JSON file with open(json_output_path, \'w\') as f: json.dump(products, f, indent=4) return json_output_path"},{"question":"# Advanced String Manipulation: Pattern Expansion In this exercise, we aim to implement a function that expands shorthand notations in a string to their full form. The notations to be expanded are denoted by a dash (\'-\') between two alphanumeric characters, representing a range of characters. For instance: - The string \\"a-c\\" represents the sequence \\"abc\\". - The string \\"1-3\\" represents the sequence \\"123\\". Your task is to write a function named `expand_pattern`. This function will: 1. Accept a string with shorthand notations and expand each notation to its full form. 2. Return the expanded string. Here are some rules to follow: - The shorthand notations will be properly formatted with a single hyphen between two alphanumeric characters. - Only lowercase letters (a-z) and digits (0-9) will be used in the notations. - The input string may contain multiple shorthand notations and other characters which should be retained as they are. - If the ending character of the range comes before the starting character in ASCII order, you should treat it as an invalid range and return the original string without expanding. **Function Signature:** ```python def expand_pattern(s: str) -> str: ``` **Example:** ``` Input: \\"Expand a-c and 5-7 in this string.\\" Output: \\"Expand abc and 567 in this string.\\" Input: \\"Example: x-z 1-2, m-a.\\" Output: \\"Example: xyz 12, m-a.\\" ``` **Note:** Your solution should handle multiple ranges in a single input string and leave non-range parts unchanged.","solution":"def expand_pattern(s: str) -> str: def expand_range(start, end): return \'\'.join(chr(i) for i in range(ord(start), ord(end) + 1)) i = 0 result = [] while i < len(s): if i + 2 < len(s) and s[i + 1] == \'-\' and s[i].isalnum() and s[i + 2].isalnum(): start, end = s[i], s[i + 2] if ord(start) <= ord(end): result.append(expand_range(start, end)) i += 3 else: result.append(s[i:i+3]) i += 3 else: result.append(s[i]) i += 1 return \'\'.join(result)"},{"question":"# AVL Tree Insertion AVL Tree is a self-balancing binary search tree where the difference between heights of left and right subtrees cannot be more than one for all nodes. Your task is to write a function that inserts a given key into an AVL tree and ensures the tree remains balanced. # Function Specification Create a class `AVLTree` with the following methods: - **Methods**: - `insert(key)`: Inserts a new key into the AVL tree and returns the root of the updated tree. Ensure the tree remains balanced after the insertion. - `pre_order_traversal()`: Returns a list of values representing the pre-order traversal of the AVL tree. # Requirements - Implement rotations (left rotation, right rotation) to maintain the balance of the AVL tree. - Calculate the height of the nodes during insertions to update and check balance factors. # Example Assume we initialize an empty AVL tree and perform the following insertions: 1. `insert(30)` 2. `insert(20)` 3. `insert(40)` 4. `insert(10)` After inserting the nodes, the pre-order traversal of the AVL tree should be: ``` [30, 20, 10, 40] ``` Here is the class template for the AVL tree: ```python class AVLTreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AVLTree: def __init__(self): self.root = None def insert(self, key): self.root = self._insert(self.root, key) return self.root def _insert(self, node, key): # Implement the insertion logic here # Ensure to balance the tree and update heights def pre_order_traversal(self): result = [] self._pre_order_traversal(self.root, result) return result def _pre_order_traversal(self, node, result): if not node: return result.append(node.key) self._pre_order_traversal(node.left, result) self._pre_order_traversal(node.right, result) # Additional helper methods such as rotations, height calculations, balance checks etc. ``` Your task is to complete the implementation of the `AVLTree` class by adding the necessary logic in the `_insert` method and any other helper methods required to maintain the balance of the AVL tree.","solution":"class AVLTreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AVLTree: def __init__(self): self.root = None def insert(self, key): self.root = self._insert(self.root, key) return self.root def _insert(self, node, key): if not node: return AVLTreeNode(key) elif key < node.key: node.left = self._insert(node.left, key) else: node.right = self._insert(node.right, key) node.height = 1 + max(self._height(node.left), self._height(node.right)) balance = self._get_balance(node) if balance > 1 and key < node.left.key: return self._right_rotate(node) if balance < -1 and key > node.right.key: return self._left_rotate(node) if balance > 1 and key > node.left.key: node.left = self._left_rotate(node.left) return self._right_rotate(node) if balance < -1 and key < node.right.key: node.right = self._right_rotate(node.right) return self._left_rotate(node) return node def _height(self, node): if not node: return 0 return node.height def _get_balance(self, node): if not node: return 0 return self._height(node.left) - self._height(node.right) def _left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._height(z.left), self._height(z.right)) y.height = 1 + max(self._height(y.left), self._height(y.right)) return y def _right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._height(z.left), self._height(z.right)) y.height = 1 + max(self._height(y.left), self._height(y.right)) return y def pre_order_traversal(self): result = [] self._pre_order_traversal(self.root, result) return result def _pre_order_traversal(self, node, result): if not node: return result.append(node.key) self._pre_order_traversal(node.left, result) self._pre_order_traversal(node.right, result)"},{"question":"You are tasked with analyzing data involving the annual rainfall (in millimeters) and the corresponding crop yield (in metric tons) for a specific region. You need to create a function named `plotRainfallYieldScatter` that visualizes this relationship with a scatter plot and a polynomial regression curve. The function should take the following parameters: - `rainfall`: A list of annual rainfall values. - `yieldList`: A list of crop yield values corresponding to the annual rainfall. - `degree`: The degree of the polynomial regression curve. The function should perform the following tasks: 1. Convert `rainfall` and `yieldList` to numpy arrays using `numpy.array`. 2. Plot the data points using matplotlib\'s `pyplot.scatter` function, with data points represented as green diamonds (`\'gd\'`). 3. Fit a polynomial regression model to the data using `numpy.polyfit` with the specified degree and calculate the estimated yield values. 4. Plot the polynomial regression curve using `matplotlib.pyplot.plot` with the curve colored purple (`\'m\'`). 5. Label the x-axis as \\"Annual Rainfall (mm)\\" and the y-axis as \\"Crop Yield (metric tons)\\" using `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` respectively. 6. Display the plot using `matplotlib.pyplot.show`. # Requirements: - Use `numpy.array` to convert lists to arrays. - Use `numpy.polyfit` to fit the polynomial regression model. - Use `matplotlib.pyplot.xlabel` to set the x-axis label. Here is the exact function signature that should be implemented: ```python def plotRainfallYieldScatter(rainfall, yieldList, degree): ```","solution":"import numpy as np import matplotlib.pyplot as plt def plotRainfallYieldScatter(rainfall, yieldList, degree): Plots a scatter plot of annual rainfall against crop yield and fits a polynomial regression curve. Parameters: rainfall (list of float): Annual rainfall values. yieldList (list of float): Corresponding crop yield values. degree (int): Degree of the polynomial regression curve. # Convert lists to numpy arrays rainfall = np.array(rainfall) yieldList = np.array(yieldList) # Scatter plot of the data points plt.scatter(rainfall, yieldList, color=\'green\', marker=\'d\') # Fit a polynomial regression model coeffs = np.polyfit(rainfall, yieldList, degree) # Create a polynomial function with the obtained coefficients poly_func = np.poly1d(coeffs) # Generate x values for plotting the polynomial curve x_values = np.linspace(min(rainfall), max(rainfall), 100) y_values = poly_func(x_values) # Plot the polynomial regression curve plt.plot(x_values, y_values, color=\'purple\') # Label the axes plt.xlabel(\\"Annual Rainfall (mm)\\") plt.ylabel(\\"Crop Yield (metric tons)\\") # Display the plot plt.show()"},{"question":"You are tasked with writing a function `replace_integers(input_string)`. This function will take one argument: - `input_string`: A string containing a mix of alphanumeric characters and integers. Your function should identify all integers within the string and replace each with its square. The resulting string should then be returned. Only standalone integers (those not part of alphanumeric sequences) should be replaced. **Task Requirements:** 1. You should use regular expressions from the Python `re` library to identify integers. 2. Ensure that only standalone integers are identified and squared. 3. The rest of the string should remain unchanged. **Function Signature:** ```python def replace_integers(input_string: str) -> str: pass ``` # Example Usage: ```python print(replace_integers(\\"abc 123 def 45gh\\")) # Should return \\"abc 15129 def 45gh\\" print(replace_integers(\\"I have 2 apples and 10 bananas\\")) # Should return \\"I have 4 apples and 100 bananas\\" ``` # Constraints: 1. The input string can contain any combination of alphanumeric characters and spaces. 2. Integers will be non-negative. 3. The function should handle strings without any integers gracefully, returning the original string. 4. Do not use Python\'s `eval` function for arithmetic operations.","solution":"import re def replace_integers(input_string: str) -> str: Replaces standalone integers within the input_string with their squares. def square_replacer(match): number = int(match.group()) return str(number ** 2) # Use regex to find standalone integers result = re.sub(r\'bd+b\', square_replacer, input_string) return result"},{"question":"You are given a Python list `numbers` which contains an unordered collection of integers. Your task is to implement a function called `find_k_largest_elements` that takes two parameters: `numbers` (a list of integers) and `k` (an integer), and returns a list of the `k` largest elements from the `numbers` list in descending order. The function `find_k_largest_elements` should perform the following steps: 1. Verify that `k` is a positive integer less than or equal to the length of the `numbers` list. 2. Use an efficient algorithm to identify the `k` largest elements. 3. Sort these `k` largest elements in descending order and return them as a list. If the input `k` is not valid (for instance, if it is greater than the length of the list or less than 1), the function should return an empty list. **Function Signature**: ```python def find_k_largest_elements(numbers: List[int], k: int) -> List[int]: pass ``` **Libraries to Use**: - None (You should implement the functionality without relying on additional libraries such as `heapq`) **Example**: ```python # Example 1 numbers = [3, 1, 5, 12, 2, 11] k = 3 print(find_k_largest_elements(numbers, k)) # Output: [12, 11, 5] # Example 2 numbers = [7, -2, 3, 4, 1, -5, 6] k = 4 print(find_k_largest_elements(numbers, k)) # Output: [7, 6, 4, 3] # Example 3 numbers = [10, 9, 8, 7, 6] k = 0 print(find_k_largest_elements(numbers, k)) # Output: [] ```","solution":"def find_k_largest_elements(numbers, k): Returns a list of the k largest elements in the numbers list in descending order, if k is valid (positive and less than or equal to the length of the list). if not isinstance(k, int) or k < 1 or k > len(numbers): return [] # Sort the list in descending order and take the first k elements sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[:k]"},{"question":"**Problem Statement:** You are given a 2-dimensional numpy array `arr` of shape `(n, n)` where `n` is an odd integer. Your task is to create a function `border_sum(arr)` that performs the following operations: 1. Compute the sum of the elements on the outer border of the array. 2. Compute the sum of the elements on the main diagonals of the array. 3. Remove the diagonal elements from the border sum to avoid double-counting. After computing the sums, print the following formatted string: ``` Border Sum: {border_sum} Diagonal Sum: {diagonal_sum} ``` Where `border_sum` is the sum of the outer border elements excluding diagonal elements, and `diagonal_sum` is the sum of the main diagonal elements. **Function Specification:** - **Function Name**: `border_sum` - **Input**: - `arr`: numpy array of shape `(n, n)` with integer elements. - **Output**: - This function should print the computed sums in the described format. You might assume that `arr` always has the shape `(n, n)` where `n` is an odd number. **Example Usage:** ```python arr = np.array([ [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25] ]) border_sum(arr) ``` **Libraries to Use:** - `numpy`","solution":"import numpy as np def border_sum(arr): Compute the sum of the elements on the outer border of the array excluding diagonal elements, and the sum of the elements on the main diagonals of the array. Parameters: arr (numpy.ndarray): 2D numpy array of shape (n, n) where n is an odd integer. Outputs: Prints the computed sums in the format: \\"Border Sum: {border_sum} Diagonal Sum: {diagonal_sum}\\" n = arr.shape[0] # Sum of border excluding corners which are part of diagonals top_border = np.sum(arr[0, 1:n-1]) bottom_border = np.sum(arr[n-1, 1:n-1]) left_border = np.sum(arr[1:n-1, 0]) right_border = np.sum(arr[1:n-1, n-1]) # We need to sum the corners which are part of the diagonals only once top_left_corner = arr[0, 0] top_right_corner = arr[0, n-1] bottom_left_corner = arr[n-1, 0] bottom_right_corner = arr[n-1, n-1] border_sum = top_border + bottom_border + left_border + right_border + top_left_corner + top_right_corner + bottom_left_corner + bottom_right_corner # Removing diagonals from border sum for i in range(n): border_sum -= arr[i, i] border_sum -= arr[i, n-1-i] # Sum of main diagonals main_diagonal_sum = np.sum(np.diag(arr)) anti_diagonal_sum = np.sum(np.diag(np.fliplr(arr))) # Both diagonals would have the central element common if n > 1 if n > 1: center_element = arr[n//2, n//2] diagonal_sum = main_diagonal_sum + anti_diagonal_sum - center_element else: diagonal_sum = main_diagonal_sum # Should be the same in case of a single element print(f\\"Border Sum: {border_sum}\\") print(f\\"Diagonal Sum: {diagonal_sum}\\")"},{"question":"You are developing a basic inventory management system and need to implement a function that helps in calculating the remaining stock of items sold. Given the current stock levels and a list of items that have been sold, your function should update the stock levels accordingly. You need to write a function named **`update_stock`** that: 1. Accepts a dictionary representing the current stock levels where keys are item names, and values are the quantities available. 2. Accepts another dictionary representing the items sold, where keys are item names, and values are the quantities sold. 3. Updates the stock levels in the first dictionary by subtracting the quantities sold from the quantities available. 4. Logs and returns a dictionary of updated stock levels. The function should adhere to the following format: ```python def update_stock(current_stock, items_sold): # your code here ``` # Example: If the current stock is `{\'apple\': 10, \'banana\': 8, \'orange\': 15}` and the items sold are `{\'apple\': 3, \'banana\': 5}`, the function should return: ```python {\'apple\': 7, \'banana\': 3, \'orange\': 15} ``` # Requirements: - Only subtract the quantities sold if the item exists in the current stock. - If an item in `items_sold` does not exist in `current_stock`, it should be ignored. - If the sold quantity for an item exceeds the current stock quantity, set the stock quantity to zero for that item. # Restrictions: - Only use Python\'s standard data structures and functions. - Avoid using any external libraries or packages.","solution":"def update_stock(current_stock, items_sold): Updates the stock levels based on the quantities sold. Parameters: current_stock (dict): A dictionary representing current stock levels where keys are item names and values are quantities available. items_sold (dict): A dictionary representing items sold where keys are item names and values are quantities sold. Returns: dict: A dictionary of updated stock levels. for item, quantity_sold in items_sold.items(): if item in current_stock: current_stock[item] = max(0, current_stock[item] - quantity_sold) return current_stock"},{"question":"You are tasked with writing a Python function named `filter_even_numbers` which demonstrates the use of list comprehensions and filter function. This function should: 1. Accept a list of integers as input. 2. Filter out the even numbers from the input list using a list comprehension. 3. Return a list of the filtered even numbers. 4. Print the number of even numbers in the filtered list using the `len` function. Requirements: 1. **Function Name:** `filter_even_numbers` 2. **Functionality:** Use a list comprehension to filter even numbers and return the list of even numbers. Print the length of this list.","solution":"def filter_even_numbers(numbers): Filters even numbers from the input list and returns the list of even numbers. Also prints the number of even numbers filtered out. :param numbers: List of integers. :return: List of filtered even numbers. even_numbers = [num for num in numbers if num % 2 == 0] print(len(even_numbers)) return even_numbers"},{"question":"You are given a list of integer intervals, `intervals`, where each interval is represented as a list `[start, end]` and a target interval `target_interval` also represented as a list `[start, end]`. The goal is to determine if the `target_interval` intersects with any of the intervals in the `intervals` list. An interval `[a, b]` is said to intersect with `[c, d]` if there exists an integer `x` such that `a <= x <= b` and `c <= x <= d`. Create the function `does_intersect(intervals, target_interval)` that works as follows: 1. The function should return `True` if there is any intersection between `target_interval` and any interval in `intervals`. Otherwise, return `False`. **Constraints:** - The elements of `intervals` are sorted based on the start value of the intervals. - Each interval is represented as a list of two integers `[start, end]` where `start <= end`. - The `intervals` list and `target_interval` will have at least one interval. - The intervals might overlap each other. - The intervals are guaranteed to have non-negative integer values. **Function Signature:** ```python def does_intersect(intervals: List[List[int]], target_interval: List[int]) -> bool: pass ``` **Example Usage:** ```python # Example data intervals = [[1, 5], [8, 12], [15, 20]] target_interval = [10, 15] result = does_intersect(intervals, target_interval) print(result) # Output: True ``` Another example: ```python # Example data intervals = [[1, 5], [6, 9], [10, 12]] target_interval = [13, 17] result = does_intersect(intervals, target_interval) print(result) # Output: False ```","solution":"def does_intersect(intervals, target_interval): Determines if there is any intersection between target_interval and any interval in intervals. :param intervals: List of intervals [start, end] :param target_interval: Target interval [start, end] :return: True if an intersection is found, False otherwise t_start, t_end = target_interval for start, end in intervals: if max(start, t_start) <= min(end, t_end): return True return False"},{"question":"Your task is to write a function named `evaluate_polynomial` that evaluates a given polynomial at a specific value of x. The polynomial will be represented as a list of coefficients, where the i-th element of the list is the coefficient for the x^i term. The function should perform the following steps: 1. **Read the coefficients**: This will be a list of integers or floating-point numbers. 2. **Evaluate the polynomial**: Use the given value of x to evaluate the polynomial. 3. **Return the result**: The function should return the evaluated result as a floating-point number. The function signature should be: ```python def evaluate_polynomial(coefficients, x): # Your implementation here pass ``` **Example**: ```python coefficients = [2, -4, 3] # Represents 2 - 4x + 3x^2 x = 2 result = evaluate_polynomial(coefficients, x) print(result) # Output should be 6 (2 - 4*2 + 3*2^2) ``` **Hint**: - You can utilize the `enumerate` function to get both the index and the coefficient in each iteration. - Be mindful of the order of coefficients and the corresponding powers of x.","solution":"def evaluate_polynomial(coefficients, x): Evaluates a polynomial at a given value x. Parameters: coefficients (list of int/float): List of polynomial coefficients, where the i-th element is the coefficient of x^i. x (int/float): The value at which to evaluate the polynomial. Returns: float: The evaluated result of the polynomial at x. result = 0 for power, coeff in enumerate(coefficients): result += coeff * (x ** power) return float(result)"},{"question":"Write a Python function named `shift_string` that takes a string and an integer as input and returns a new string where each character in the original string is shifted by the given integer in the alphabet. The function should wrap around as necessary (i.e., `z` shifted by 1 becomes `a`). The function should maintain the case of the characters, non-alphabetic characters should be unchanged. Function signature: ```python def shift_string(s: str, n: int) -> str: pass ``` **Constraints:** 1. The `s` string can contain any printable characters. 2. The `n` integer can be any positive or negative integer. **Example:** ```python shift_string(\'abc\', 1) ``` Should output: ```python \'bcd\' ``` ```python shift_string(\'xyz\', 3) ``` Should output: ```python \'abc\' ``` ```python shift_string(\'Hello, World!\', 5) ``` Should output: ```python \'Mjqqt, Btwqi!\' ```","solution":"def shift_string(s: str, n: int) -> str: def shift_char(c, n): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + n) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + n) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, n) for c in s)"},{"question":"You are tasked with creating a function to calculate the running median of a stream of integers. This problem will help you practice manipulating data in real-time and understanding how to efficiently compute medians on the go. # Task Write a function named `running_median` that: 1. Takes the following input: - `nums`: A list of integers representing the stream of numbers. 2. Returns a list of floating-point numbers representing the median after each new element from `nums` is added to the stream. 3. Efficiently maintains the sorted order of the elements as new integers are pulled from the stream. # Example For `nums = [2, 1, 5, 7, 2, 0, 5]`, your function should return `[2.0, 1.5, 2.0, 3.5, 2.0, 2.0, 2.0]`. - After adding `2`, the numbers are `[2]`, and the median is `2.0`. - After adding `1`, the numbers are `[1, 2]`, and the median is `1.5`. - After adding `5`, the numbers are `[1, 2, 5]`, and the median is `2.0`. - After adding `7`, the numbers are `[1, 2, 5, 7]`, and the median is `3.5`. - After adding `2`, the numbers are `[1, 2, 2, 5, 7]`, and the median is `2.0`. - After adding `0`, the numbers are `[0, 1, 2, 2, 5, 7]`, and the median is `2.0`. - After adding `5`, the numbers are `[0, 1, 2, 2, 5, 5, 7]`, and the median is `2.0`. # Required Libraries - N/A (only standard libraries are allowed). Feel free to use example libraries for demonstration, but your function should work independently of any non-builtin libraries.","solution":"import heapq def running_median(nums): Returns a list of medians each time a new element from nums is added to the stream. min_heap = [] # Right half max_heap = [] # Left half medians = [] for num in nums: if len(max_heap) == 0 or num <= -max_heap[0]: heapq.heappush(max_heap, -num) else: heapq.heappush(min_heap, num) # Balance the heaps if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Calculate median if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) / 2.0 else: median = float(-max_heap[0]) medians.append(median) return medians"},{"question":"You are asked to implement a function named `simulate_game_scoreboard` that generates and updates a game scoreboard with random scores for a given number of players. Here are the detailed requirements: 1. The function should take two parameters: the number of players `n` (an integer) and `rounds` (an integer) representing the total number of scoring rounds to be simulated. 2. Each player\'s initial score should be set to 0. 3. In each round, a random player is selected, and their score is incremented by a random value between 1 and 100 (inclusive). 4. After all rounds are completed, sort the players by their final scores in descending order. 5. Print the sorted scoreboard as follows: each player should be printed on a new line in the format \\"Player X: Y\\", where X is the player number (starting from 1) and Y is the final score. To complete this task, you **must** utilize the `random.choice` and `random.randint` functions from the `random` module. Below is the relevant Python documentation for these methods: ```python random.choice(seq) Choose a random element from a non-empty sequence. random.randint(a, b) Return a random integer N such that a <= N <= b. Alias for randrange(a, b+1). ``` Write the function `simulate_game_scoreboard` that accomplishes the above requirements.","solution":"import random def simulate_game_scoreboard(n, rounds): Simulates a game scoreboard with given number of players and rounds. Args: n (int): Number of players. rounds (int): Number of rounds to simulate. Returns: list of tuple: List of player scores sorted by score in descending order. Each tuple contains player number and their score. # Initialize player scores scores = {i: 0 for i in range(1, n+1)} # Randomly increment player scores over the given number of rounds for _ in range(rounds): player = random.choice(list(scores.keys())) increment = random.randint(1, 100) scores[player] += increment # Convert the scores dictionary to a list of tuples and sort sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True) # Print the sorted scoreboard for player, score in sorted_scores: print(f\\"Player {player}: {score}\\") return sorted_scores"},{"question":"**You are to implement a function that computes the shortest paths in a directed graph using Dijkstra\'s algorithm. Your function will take a graph represented as an adjacency matrix and a source vertex, and it will output the shortest path lengths from the source vertex to all other vertices, as well as the predecessor of each vertex in the path. You need to implement a function `dijkstra` as per the signature below: **Function Signature:** ```python def dijkstra(graph, source): ``` **Parameters:** - `graph`: 2D numpy array where `graph[i][j]` represents the edge weight from vertex `i` to vertex `j`. If there is no edge between `i` and `j`, then `graph[i][j]` is set to a large number (e.g., `numpy.inf`). - `source`: int, the index of the source vertex. **Returns:** - `distances`: 1D numpy array of shortest path lengths from the source vertex to all other vertices. - `predecessors`: 1D numpy array where each element at index `i` denotes the predecessor of vertex `i` in the shortest path from the source. The source vertex’s predecessor can be set to `-1`. **Instructions:** 1. Initialize `distances` with `numpy.inf`, set the distance to the source vertex as 0. 2. Initialize `predecessors` with `-1`. 3. Use a priority queue to explore the graph efficiently. **Example Usage:** ```python import numpy as np graph = np.array([[0, 6, np.inf, 1], [6, 0, 5, 2], [np.inf, 5, 0, 2], [1, 2, 2, 0]]) source = 0 distances, predecessors = dijkstra(graph, source) ``` **Implementation Details:** 1. Maintain a set of visited vertices. 2. Use a priority queue to extract the vertex with the smallest distance. 3. For the current vertex, update the distances of its neighbors. 4. Keep track of predecessors to reconstruct paths later. Complete the implementation to provide the correct shortest paths and predecessors for the graph.**","solution":"import numpy as np import heapq def dijkstra(graph, source): n = graph.shape[0] distances = np.full(n, np.inf) distances[source] = 0 predecessors = np.full(n, -1) priority_queue = [(0, source)] visited = set() while priority_queue: current_distance, u = heapq.heappop(priority_queue) if u in visited: continue visited.add(u) for v in range(n): if graph[u][v] < np.inf and v not in visited: new_distance = current_distance + graph[u][v] if new_distance < distances[v]: distances[v] = new_distance predecessors[v] = u heapq.heappush(priority_queue, (new_distance, v)) return distances, predecessors"},{"question":"# Maximum Subarray Sum You are tasked with writing a function that takes an array of integers and returns the maximum sum of any contiguous subarray of the given array. A subarray is any contiguous part of an array, and the sum of an empty subarray is considered to be 0. Your function should be named `maxSubArraySum` and must adhere to the following signature: ```python def maxSubArraySum(nums: List[int]) -> int: ``` Here is the behavior of the function: - The function should return the maximum sum of any contiguous subarray within the given list of integers. - If the array is empty, the function should return 0. To accomplish this, you should implement **Kadane\'s Algorithm** which efficiently finds the maximum sum of a contiguous subarray. **Requirements:** - You must use a loop to iterate through the elements of the array and calculate the maximum subarray sum based on the running maximum subarray sum ending at each position. - You should consider edge cases such as the array being empty, where the function should return 0. Full Example: ```python print(maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4])) # Should print 6 print(maxSubArraySum([1])) # Should print 1 print(maxSubArraySum([-1, -2, -3, -4])) # Should print -1 print(maxSubArraySum([])) # Should print 0 ``` # Constraints: - The length of the input array `nums` can range from 0 to 10^4. - Each element in `nums` will be an integer within the range of -10^5 to 10^5. You can assume that the `List` type from the `typing` module is already imported in your working environment.","solution":"from typing import List def maxSubArraySum(nums: List[int]) -> int: if not nums: return 0 current_subarray = max_subarray = nums[0] for num in nums[1:]: current_subarray = max(num, current_subarray + num) max_subarray = max(max_subarray, current_subarray) return max_subarray"},{"question":"You are building a system for managing a library\'s book inventory. Each book has a unique identification number, title, author, publication year, and a status indicating whether it is currently available or checked out. Your task is to create a set of classes and methods to represent and manipulate this data. 1. Define a class `Book` with the following properties: - `book_id` (int): Unique identification number for the book. - `title` (str): Title of the book. - `author` (str): Author of the book. - `publication_year` (int): Year the book was published. - `status` (str): Current status of the book, either \'available\' or \'checked out\'. 2. Define a class `Library` with the following methods: - `add_book(book)` - Adds a new book to the library. - `remove_book(book_id)` - Removes a book from the library by its identification number. - `check_out_book(book_id)` - Changes the status of a book to \'checked out\'. - `return_book(book_id)` - Changes the status of a book to \'available\'. - `search_books_by_title(title)` - Returns a list of books that match the given title. - `search_books_by_author(author)` - Returns a list of books that match the given author. The class signatures are as follows: ```python class Book: def __init__(self, book_id, title, author, publication_year, status=\'available\'): self.book_id = book_id self.title = title self.author = author self.publication_year = publication_year self.status = status class Library: def __init__(self): self.books = [] def add_book(self, book): Adds a new book to the library. Parameters: book (Book): The book to add. pass def remove_book(self, book_id): Removes a book from the library by its identification number. Parameters: book_id (int): The identification number of the book to remove. pass def check_out_book(self, book_id): Changes the status of a book to \'checked out\'. Parameters: book_id (int): The identification number of the book to check out. pass def return_book(self, book_id): Changes the status of a book to \'available\'. Parameters: book_id (int): The identification number of the book to return. pass def search_books_by_title(self, title): Returns a list of books that match the given title. Parameters: title (str): The title to search for. Returns: list: A list of books with the matching title. pass def search_books_by_author(self, author): Returns a list of books that match the given author. Parameters: author (str): The author to search for. Returns: list: A list of books with the matching author. pass ``` # Example: ```python # Creating a book book1 = Book(1, \\"The Hobbit\\", \\"J.R.R. Tolkien\\", 1937) # Creating a library library = Library() # Adding the book to the library library.add_book(book1) # Searching for a book by title print(library.search_books_by_title(\\"The Hobbit\\")) # Checking out the book library.check_out_book(1) # Returning the book library.return_book(1) ```","solution":"class Book: def __init__(self, book_id, title, author, publication_year, status=\'available\'): self.book_id = book_id self.title = title self.author = author self.publication_year = publication_year self.status = status class Library: def __init__(self): self.books = [] def add_book(self, book): Adds a new book to the library. Parameters: book (Book): The book to add. self.books.append(book) def remove_book(self, book_id): Removes a book from the library by its identification number. Parameters: book_id (int): The identification number of the book to remove. self.books = [book for book in self.books if book.book_id != book_id] def check_out_book(self, book_id): Changes the status of a book to \'checked out\'. Parameters: book_id (int): The identification number of the book to check out. for book in self.books: if book.book_id == book_id: book.status = \'checked out\' break def return_book(self, book_id): Changes the status of a book to \'available\'. Parameters: book_id (int): The identification number of the book to return. for book in self.books: if book.book_id == book_id: book.status = \'available\' break def search_books_by_title(self, title): Returns a list of books that match the given title. Parameters: title (str): The title to search for. Returns: list: A list of books with the matching title. return [book for book in self.books if book.title == title] def search_books_by_author(self, author): Returns a list of books that match the given author. Parameters: author (str): The author to search for. Returns: list: A list of books with the matching author. return [book for book in self.books if book.author == author]"},{"question":"You are tasked with developing a function to analyze a dataset containing information on various books. The goal is to filter and sort this data based on specific criteria such as genre, author, and publication year. Your task is to write a function named `filter_and_sort_books` that processes the data according to these filters and sorts the resulting data based on a specified column. The dataset is stored in a CSV file with a predefined structure, which includes the following columns: `Title`, `Author`, `Genre`, `Publication Year`. Your function should have the following signature: ```python def filter_and_sort_books(file_path: str, genre: str, author: str, sort_by: str) -> pd.DataFrame: ``` # Arguments - `file_path`: A string representing the path to the CSV file containing the book dataset. - `genre`: A string representing the genre to filter by (e.g., \'Fiction\'). If the value is \'all\', do not apply any genre filter. - `author`: A string representing the author to filter by (e.g., \'J.K. Rowling\'). If the value is \'all\', do not apply any author filter. - `sort_by`: A string indicating the column name to sort the resulting data by (e.g., \'Title\', \'Publication Year\'). # Returns - A pandas DataFrame containing the filtered and sorted book data as per the specified genre, author, and sorted by the specified column. # Constraints Ensure to handle cases where the genre, author, or sort_by criteria are not provided correctly. The function should handle such errors gracefully and output a meaningful error message. Below is an example of how the function can be called: ```python file_path = \'books.csv\' df = filter_and_sort_books(file_path, \'Fiction\', \'all\', \'Publication Year\') ``` This call should return a DataFrame containing books filtered by Fiction genre, all authors, and sorted by the publication year. # Requirements - Use the `pandas` library to load, filter, and sort the CSV data. - Handle cases where input arguments are \'all\' to apply flexible filters. - Apply robust error handling to ensure the function performs gracefully under incorrect input conditions.","solution":"import pandas as pd def filter_and_sort_books(file_path: str, genre: str = \'all\', author: str = \'all\', sort_by: str = \'Title\') -> pd.DataFrame: Filters and sorts book data based on specified genre, author, and sort column. :param file_path: Path to the CSV file containing the book dataset. :param genre: Genre to filter by. Use \'all\' to include all genres. :param author: Author to filter by. Use \'all\' to include all authors. :param sort_by: Column name to sort the resulting data by. :return: Filtered and sorted DataFrame. try: # Load the dataset df = pd.read_csv(file_path) # Validate if sort_by column exists in the DataFrame if sort_by not in df.columns: raise ValueError(f\\"Column \'{sort_by}\' does not exist in the dataset.\\") # Apply genre filter if genre != \'all\': df = df[df[\'Genre\'] == genre] # Apply author filter if author != \'all\': df = df[df[\'Author\'] == author] # Sort the DataFrame by the specified column df_sorted = df.sort_values(by=sort_by) return df_sorted except FileNotFoundError: raise FileNotFoundError(f\\"The file at path \'{file_path}\' does not exist.\\") except pd.errors.EmptyDataError: raise ValueError(f\\"The file at path \'{file_path}\' is empty.\\") except Exception as e: raise ValueError(f\\"An error occurred: {str(e)}\\")"},{"question":"Write a function named `longest_subarray_with_sum_k` that finds the longest subarray with a given sum `k` in an array of integers. The function should return the length of this subarray. If no subarray with sum `k` exists, return 0. Parameters: - `arr`: A list of integers. - `k`: An integer representing the desired sum of the subarray. The function should have the following structure: ```python def longest_subarray_with_sum_k(arr, k): Finds the length of the longest subarray with sum equal to k. Parameters: arr (list): List of integers. k (int): Desired sum of the subarray. Returns: int: Length of the longest subarray with sum k, or 0 if no such subarray exists. # Your Code Here ``` Example: ```python arr = [10, 5, 2, 7, 1, 9] k = 15 print(longest_subarray_with_sum_k(arr, k)) # Output: 4 (The subarray is [5, 2, 7, 1]) arr = [-5, 8, -14, 2, 4, 12] k = -5 print(longest_subarray_with_sum_k(arr, k)) # Output: 5 (The subarray is [-5, 8, -14, 2, 4]) ``` Hints: - Use a dictionary to store the prefix sums and their indices. - Iterate through the array while keeping track of the current prefix sum. - For each element, check if there is a prefix sum that, when subtracted from the current prefix sum, equals `k`. If so, calculate the length of the subarray and update the maximum length found.","solution":"def longest_subarray_with_sum_k(arr, k): Finds the length of the longest subarray with sum equal to k. Parameters: arr (list): List of integers. k (int): Desired sum of the subarray. Returns: int: Length of the longest subarray with sum k, or 0 if no such subarray exists. prefix_sum = 0 max_length = 0 prefix_sum_indices = {} for i, num in enumerate(arr): prefix_sum += num if prefix_sum == k: max_length = i + 1 if (prefix_sum - k) in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum - k]) if prefix_sum not in prefix_sum_indices: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"You are tasked with writing a function named `flatten_dict` that takes a nested dictionary as input and returns a flat dictionary. The keys in the flat dictionary should represent the path to the corresponding value in the original nested dictionary, using dots (`.`) to separate the keys at each level. Function Signature ```python def flatten_dict(d: dict) -> dict: pass ``` Parameters - `d` (dict): A dictionary, where each key can either map to a value or another dictionary. Returns - A flat dictionary where the keys represent the path to the value in the original nested dictionary, using dots to separate keys at each level. Examples ```python assert flatten_dict({\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3, \'f\': 4}}, \'g\': 5}) == {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4, \'g\': 5} assert flatten_dict({\'x\': {\'y\': {\'z\': 10}}, \'w\': 20}) == {\'x.y.z\': 10, \'w\': 20} ```","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Returns a flat dictionary where the keys represent the path to the value in the original nested dictionary, using dots to separate keys at each level. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_dict(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"You are tasked with creating an inventory management system for a store that keeps track of products and their quantities. The inventory system needs to be able to process a series of commands to update and query the inventory. Write a function `manage_inventory(commands)` that takes a single argument: - `commands`: A list of strings, where each string represents a command. There are three types of commands: 1. `\\"ADD <product> <quantity>\\"` – Adds the specified quantity of the product to the inventory. If the product does not already exist, it should be added to the inventory. 2. `\\"REMOVE <product> <quantity>\\"` – Removes the specified quantity of the product from the inventory. If the product\'s quantity drops to zero or below, it should be removed from the inventory. 3. `\\"QUERY <product>\\"` – Returns the current quantity of the specified product. If the product does not exist, it should return `\\"Product not found\\"`. The function should return a list of results corresponding to each `\\"QUERY\\"` command in the order they were received. **Function Signature:** ```python def manage_inventory(commands: List[str]) -> List[str]: ``` **Example:** ```python commands = [ \\"ADD apples 10\\", \\"ADD bananas 5\\", \\"REMOVE apples 3\\", \\"QUERY apples\\", \\"QUERY bananas\\", \\"REMOVE bananas 5\\", \\"QUERY bananas\\" ] ``` **Output:** ```python [\\"7\\", \\"5\\", \\"Product not found\\"] ```","solution":"def manage_inventory(commands): inventory = {} results = [] for command in commands: parts = command.split() action = parts[0] product = parts[1] if action == \\"ADD\\": quantity = int(parts[2]) if product in inventory: inventory[product] += quantity else: inventory[product] = quantity elif action == \\"REMOVE\\": quantity = int(parts[2]) if product in inventory: inventory[product] -= quantity if inventory[product] <= 0: del inventory[product] elif action == \\"QUERY\\": if product in inventory: results.append(str(inventory[product])) else: results.append(\\"Product not found\\") return results"},{"question":"You are tasked with implementing a function that approximates the roots of a given equation using the Bisection method. The function should also visualize the convergence process using a plot. To achieve this, you will use the `matplotlib` library for visualization. Function to Implement **Function Name:** `bisection_method` **Parameters:** - `func`: The function for which we seek the root. This function `func` takes a single argument and returns a float. - `a`: The lower bound of the interval that contains the root. - `b`: The upper bound of the interval that contains the root. - `tol`: The tolerance level for the root approximation. - `max_iter`: The maximum number of iterations to perform. **Returns:** - A float representing the approximated root of the function. **Details:** 1. **Check the initial interval:** Ensure the function values at `a` and `b` have opposite signs (i.e., one is positive and the other is negative), which indicates that a root exists in the interval. 2. **Iterative Process:** - Repeat until the interval width is less than `tol` or the number of iterations reaches `max_iter`. - Calculate the midpoint `c` of the interval `[a, b]`. - Evaluate the function at `c`. - Depending on the sign of `func(c)`, update the interval to `[a, c]` or `[c, b]`. 3. **Return the midpoint as the approximate root.** **Visualization Requirements:** - Plot the function over the initial interval `[a, b]`. - Overlay points showing the midpoints of the interval on each iteration to visualize the convergence process. - Display the plot to visualize the convergence towards the root. **Libraries to Use:** - `matplotlib.pyplot` for plotting the function and convergence points. **Example Usage:** ```python def f(x): return x**2 - 4 estimated_root = bisection_method(f, 0, 3, 1e-5, 100) print(estimated_root) ```","solution":"import matplotlib.pyplot as plt def bisection_method(func, a, b, tol, max_iter): Finds a root of the function `func` within the interval [a, b] using the Bisection method. Args: func (function): The function for which we seek the root. a (float): The lower bound of the interval. b (float): The upper bound of the interval. tol (float): The tolerance level for the root approximation. max_iter (int): The maximum number of iterations to perform. Returns: float: The approximated root. if func(a) * func(b) >= 0: raise ValueError(\\"The function should have opposite signs at a and b.\\") iter_count = 0 midpoints = [] while (b - a) / 2 > tol and iter_count < max_iter: c = (a + b) / 2 midpoints.append(c) if func(c) == 0: break elif func(c) * func(a) < 0: b = c else: a = c iter_count += 1 # Visualization x = [a + i * (b - a) / 1000 for i in range(1001)] y = [func(xi) for xi in x] plt.plot(x, y, label=\'Function\') plt.axhline(0, color=\'grey\', lw=0.5) plt.scatter(midpoints, [func(m) for m in midpoints], color=\'red\', label=\'Midpoints\') for m in midpoints: plt.plot([m, m], [0, func(m)], \'r--\') plt.title(\'Bisection Method Convergence\') plt.xlabel(\'x\') plt.ylabel(\'f(x)\') plt.legend() plt.show() return c"},{"question":"You are required to write a function `wordpress_post_summary` that utilizes the `requests` Python library to fetch a summary of the latest post from a WordPress blog. The function should: 1. Accept a single parameter: - `blog_url`: a string representing the URL of the WordPress blog. 2. Fetch the JSON feed of the latest posts from the WordPress REST API at the provided `blog_url`. 3. Extract the title, publication date, and excerpt of the most recent post: - If the blog has posts, return a dictionary with the title, date, and excerpt of the latest post. - If the blog has no available posts, return a dictionary with `None` values for title, date, and excerpt. Hints: - The WordPress REST API endpoint for recent posts is usually `blog_url/wp-json/wp/v2/posts`. - You may need to handle and parse the requests response appropriately. - Consider handling potential exceptions such as network issues using `requests` exceptions. Example: ```python summary = wordpress_post_summary(\\"https://example.wordpress.com\\") print(summary) ``` This should print a dictionary with the title, date, and excerpt of the latest post or `None` values if no posts are available.","solution":"import requests def wordpress_post_summary(blog_url): Fetches a summary of the latest post from a WordPress blog. Parameters: blog_url (str): The URL of the WordPress blog. Returns: dict: A dictionary containing the title, date, and excerpt of the latest post or None values if no posts are available. api_url = f\'{blog_url}/wp-json/wp/v2/posts\' try: response = requests.get(api_url) response.raise_for_status() posts = response.json() if posts: latest_post = posts[0] summary = { \\"title\\": latest_post.get(\\"title\\", {}).get(\\"rendered\\", None), \\"date\\": latest_post.get(\\"date\\", None), \\"excerpt\\": latest_post.get(\\"excerpt\\", {}).get(\\"rendered\\", None) } else: summary = { \\"title\\": None, \\"date\\": None, \\"excerpt\\": None } except requests.RequestException: summary = { \\"title\\": None, \\"date\\": None, \\"excerpt\\": None } return summary"},{"question":"You are asked to create a function that generates a sorted list of unique words from a given string. The function should ignore case and remove any punctuation during processing. The function must adhere to the following specifications: 1. **Function Name:** `process_text` 2. **Parameters:** - `text`: A string containing words separated by spaces and possibly punctuated. 3. **Implementation Requirements:** - Convert all characters in the string to lowercase. - Remove all punctuation (`.`, `,`, `!`, `?`, `;`, `:`). - Split the string into individual words. - Remove any duplicate words to ensure all words in the output list are unique. - Sort the unique words in alphabetical order. 4. **Return Value:** - A list of unique words sorted alphabetically. **Example Usage:** Given the following input string: ```python text = \\"Hello, world! This is a test. Hello again, world?\\" ``` Calling the function as follows: ```python unique_words = process_text(text) print(unique_words) ``` Should produce the following output list: ```python [\'a\', \'again\', \'hello\', \'is\', \'test\', \'this\', \'world\'] ``` This problem helps users learn how to manipulate strings, remove punctuation, and work with sets and lists in Python to obtain a sorted list of unique words.","solution":"import string def process_text(text): Processes the input text to return a sorted list of unique words. The function converts the text to lowercase, removes punctuation, splits it into individual words, removes duplicates, and sorts the words alphabetically. # Convert text to lowercase text = text.lower() # Remove punctuation by translating each character to None text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into individual words words = text.split() # Remove duplicate words by converting to a set unique_words = set(words) # Sort the unique words alphabetically and return as a list sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"# Context You are developing a warehouse management system that tracks the inventory of products. Each product is represented by a record in a binary file named `inventory.bin`. Each record consists of a product object that includes the product ID (`prod_id`), name, quantity in stock, and other relevant details. To update the inventory after a shipment of new products arrives, you need to read and update the records in the binary file. # Task Your task is to implement a function named `update_inventory` that performs the following steps: 1. Read the product ID from the user input. 2. Open the `inventory.bin` file in binary read mode and another temporary file `temp.bin` in binary write mode. 3. Traverse all records in the `inventory.bin` file. 4. Identify the record that matches the input product ID. - If found, update the quantity of the product based on the new shipment received and set a flag `isfound` to `True`. - Write this updated product object to the `temp.bin` file. - If not found, write the original product object to the `temp.bin` file. 5. After processing all records, if the product ID was not found, print \\"Product Not Found\\". 6. Close both files. 7. Rename `temp.bin` to `inventory.bin` to update the original file with the modified data. # Requirements - Use the `os.rename()` function from the `os` library to rename `temp.bin` to `inventory.bin`. # Function Signature ```python def update_inventory(): pass ``` # Constraints - Assume that the product objects and file operations are simulated for this problem and the method for updating product quantity is abstracted. - The user-provided product ID is guaranteed to be an integer and the new quantity is typically a positive integer representing the number of units received.","solution":"import os import pickle class Product: def __init__(self, prod_id, name, quantity): self.prod_id = prod_id self.name = name self.quantity = quantity def update_quantity(self, qty): self.quantity += qty def update_inventory(): prod_id = int(input(\\"Enter the product ID to update: \\")) new_quantity = int(input(\\"Enter the new shipment quantity: \\")) isfound = False with open(\'inventory.bin\', \'rb\') as infile, open(\'temp.bin\', \'wb\') as outfile: try: while True: product = pickle.load(infile) if product.prod_id == prod_id: product.update_quantity(new_quantity) isfound = True pickle.dump(product, outfile) except EOFError: pass if not isfound: print(\\"Product Not Found\\") os.rename(\'temp.bin\', \'inventory.bin\')"},{"question":"In this problem, you are required to create a function `analyze_sales_data` that processes and analyzes sales data. The sales data will be provided as a list of dictionaries, where each dictionary represents a sales record with the following keys: `region`, `product`, `sales`, and `date`. Your task is to generate various analytical metrics based on the input data. # Inputs: 1. `sales_data`: A list of dictionaries, where each dictionary contains the sales information with the structure: ```python { \'region\': \'string\', # Region of the sale (e.g., \'North\', \'South\') \'product\': \'string\', # Product name (e.g., \'Product A\') \'sales\': float, # Sales amount (e.g., 123.45) \'date\': \'string\' # Date of sale in \'YYYY-MM-DD\' format (e.g., \'2023-01-01\') } ``` # Functionality Requirements: 1. Your function should calculate and return the following metrics: - Total sales amount for each region. - Total sales amount for each product. - Average monthly sales for each product (assume each month has equal weight). - The highest sales date for each region and product. 2. The returned result should be a dictionary with the following structure: ```python { \'total_sales_per_region\': { \'region1\': total_sales_amount, ... }, \'total_sales_per_product\': { \'product1\': total_sales_amount, ... }, \'average_monthly_sales_per_product\': { \'product1\': average_monthly_sales, ... }, \'highest_sales_date\': { \'region1\': { \'product1\': \'YYYY-MM-DD\', ... }, ... } } ``` # Function Signature: ```python def analyze_sales_data(sales_data): pass ``` **Example Input:** ```python sales_data = [ {\'region\': \'North\', \'product\': \'Product A\', \'sales\': 100.0, \'date\': \'2023-01-15\'}, {\'region\': \'North\', \'product\': \'Product B\', \'sales\': 200.0, \'date\': \'2023-02-10\'}, {\'region\': \'South\', \'product\': \'Product A\', \'sales\': 150.0, \'date\': \'2023-01-20\'}, {\'region\': \'South\', \'product\': \'Product B\', \'sales\': 300.0, \'date\': \'2023-03-15\'}, {\'region\': \'North\', \'product\': \'Product A\', \'sales\': 250.0, \'date\': \'2023-03-25\'}, {\'region\': \'South\', \'product\': \'Product A\', \'sales\': 50.0, \'date\': \'2023-02-10\'} ] ``` **Expected Function Behavior for Example Input:** - The function should compute the metrics as described, returning a dictionary with the aggregated and analyzed sales data. # Note: - Use standard library functions and methods to process and analyze the data. - Ensure that the function handles edge cases, such as sales data containing missing fields or sales amounts being zero.","solution":"from collections import defaultdict from datetime import datetime def analyze_sales_data(sales_data): total_sales_per_region = defaultdict(float) total_sales_per_product = defaultdict(float) monthly_sales_per_product = defaultdict(lambda: defaultdict(float)) highest_sales_date = defaultdict(lambda: defaultdict(lambda: {\'sales\': 0, \'date\': \'\'})) for record in sales_data: region = record[\'region\'] product = record[\'product\'] sales = record[\'sales\'] date = record[\'date\'] # Update total sales per region total_sales_per_region[region] += sales # Update total sales per product total_sales_per_product[product] += sales # Parse date and calculate monthly key date_obj = datetime.strptime(date, \'%Y-%m-%d\') month_key = date_obj.strftime(\'%Y-%m\') # Update monthly sales per product monthly_sales_per_product[product][month_key] += sales # Update highest sales date if sales > highest_sales_date[region][product][\'sales\']: highest_sales_date[region][product][\'sales\'] = sales highest_sales_date[region][product][\'date\'] = date # Calculate average monthly sales per product average_monthly_sales_per_product = {} for product, monthly_sales in monthly_sales_per_product.items(): total_months = len(monthly_sales) total_sales = sum(monthly_sales.values()) average_monthly_sales_per_product[product] = total_sales / total_months if total_months > 0 else 0 # Formatting final result highest_sales_date_formatted = { region: {product: data[\'date\'] for product, data in products.items()} for region, products in highest_sales_date.items() } return { \'total_sales_per_region\': dict(total_sales_per_region), \'total_sales_per_product\': dict(total_sales_per_product), \'average_monthly_sales_per_product\': average_monthly_sales_per_product, \'highest_sales_date\': highest_sales_date_formatted }"},{"question":"Your task is to implement a function `merge_and_sort_lists` that merges multiple sorted lists into a single sorted list. The function should handle lists of integers and ensure that the resulting list remains sorted. Here is a detailed description of what the function should do: 1. The function should take the following parameters: - `lists` (list of list of int): A list containing multiple lists of integers. Each inner list is already sorted. 2. The function should merge all the provided lists into a single sorted list. 3. The function should handle edge cases such as: - Empty lists within the list of lists. - The outer list itself being empty. 4. The function should not use any in-built sorting functions after merging. Instead, it should maintain the sorted order during the merge process. Here is the function signature: ```python def merge_and_sort_lists(lists): pass ``` Example usage: ```python lists = [[1, 4, 5], [1, 3, 4], [2, 6]] merged_sorted_list = merge_and_sort_lists(lists) print(merged_sorted_list) # Output: [1, 1, 2, 3, 4, 4, 5, 6] ```","solution":"def merge_and_sort_lists(lists): Merges multiple sorted lists into a single sorted list. :param lists: List of lists of integers, where each inner list is already sorted. :return: A single sorted list containing all integers from the provided lists. from heapq import heappop, heappush, heapreplace min_heap = [] result = [] # Initialize the heap for i, lst in enumerate(lists): if lst: heappush(min_heap, (lst[0], i, 0)) while min_heap: value, list_idx, element_idx = heappop(min_heap) result.append(value) if element_idx + 1 < len(lists[list_idx]): next_value = lists[list_idx][element_idx + 1] heappush(min_heap, (next_value, list_idx, element_idx + 1)) return result"},{"question":"Given a list of dictionaries representing student records, create a function `average_scores_by_class` that returns a dictionary with the average score for each class. 1. The input list contains dictionaries with the following keys: - \'name\': A string representing the student\'s name. - \'class\': A string representing the class the student is in. - \'score\': An integer representing the student\'s score. 2. The output should be a dictionary where each key is a class name and the corresponding value is the average score for that class rounded to 2 decimal places. # Example: ```python students = [ {\\"name\\": \\"John\\", \\"class\\": \\"Math\\", \\"score\\": 75}, {\\"name\\": \\"Jane\\", \\"class\\": \\"Math\\", \\"score\\": 85}, {\\"name\\": \\"Emily\\", \\"class\\": \\"Science\\", \\"score\\": 90}, {\\"name\\": \\"Michael\\", \\"class\\": \\"Math\\", \\"score\\": 92}, {\\"name\\": \\"Sarah\\", \\"class\\": \\"Science\\", \\"score\\": 78} ] average_scores_by_class(students) ``` # Output: ```python { \\"Math\\": 84.0, \\"Science\\": 84.0 } ``` # Function Definition: ```python def average_scores_by_class(students): pass ```","solution":"def average_scores_by_class(students): Compute the average score for each class from the list of student records. Arguments: students: A list of dictionaries where each dictionary represents a student record. Returns: A dictionary with class names as keys and average scores as values. from collections import defaultdict class_scores = defaultdict(list) for student in students: class_scores[student[\'class\']].append(student[\'score\']) return {cls: round(sum(scores) / len(scores), 2) for cls, scores in class_scores.items()}"},{"question":"You are tasked with developing a function that will determine the longest continuous subarray in which all the elements have the same difference between consecutive elements. This problem involves identifying sequences in which the difference between each pair of consecutive elements is constant. The function to compute this is called `longest_arithmetic_subarray`. This function will take one parameter: - `arr`: A list of integers representing the sequence of numbers. The goal is to find the length of the longest subarray where the difference between consecutive elements is constant. The function signature should be: ```python def longest_arithmetic_subarray(arr): ``` To achieve this, you can implement a sliding window approach or use simple iteration to maintain the longest subarray identified so far that meets the condition. **Additional Details**: - If the `arr` has fewer than 2 elements, the longest subarray length is the length of the array (either 0 or 1). - Continuous subarray means the elements must be contiguous in the index. **Your task**: 1. Implement the `longest_arithmetic_subarray` function to return the length of the longest subarray with a constant difference between consecutive elements. # Example: ```python # Example Input: arr = [3, 6, 9, 12, 15, 7, 2, 5, 8, 11] # Example Output: 5 ``` Explanation: The longest subarray `[3, 6, 9, 12, 15]` has a common difference of `3`.","solution":"def longest_arithmetic_subarray(arr): if len(arr) < 2: return len(arr) max_length = 1 current_length = 1 current_diff = None for i in range(1, len(arr)): diff = arr[i] - arr[i-1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 # Since a new difference starts a new subarray of at least two elements max_length = max(max_length, current_length) return max_length"},{"question":"Create a function named `generate_confusion_matrix` that takes as input a list of true labels and a list of predicted labels and generates a confusion matrix. The function should perform the following tasks: 1. Ensure both the true labels and the predicted labels are non-empty and of equal length. If not, print an appropriate error message and exit the function. 2. Create a confusion matrix using the `confusion_matrix` function from the `sklearn.metrics` library. 3. Plot the confusion matrix using `matplotlib` with a color map of your choice. 4. Add appropriate labels, a title, and a color bar to the plot. 5. Save the resulting plot as \'confusion_matrix.png\' using the `savefig` function from the `matplotlib.pyplot` library. Use the following `matplotlib.pyplot` functions to accomplish this: `imshow`, `xlabel`, `ylabel`, `title`, `colorbar`, and `savefig`. Function Signature: `def generate_confusion_matrix(true_labels, predicted_labels):` **Example:** Suppose we have the following labels: ```python true_labels = [1, 0, 1, 1, 0, 1, 0, 0, 1, 0] predicted_labels = [1, 0, 0, 1, 0, 1, 1, 0, 1, 0] ``` Calling `generate_confusion_matrix(true_labels, predicted_labels)` should generate and save a figure named \'confusion_matrix.png\' depicting the confusion matrix based on the provided labels.","solution":"import matplotlib.pyplot as plt from sklearn.metrics import confusion_matrix import numpy as np def generate_confusion_matrix(true_labels, predicted_labels): Generates and saves a confusion matrix plot based on true and predicted labels. Parameters: true_labels (list): List of true labels. predicted_labels (list): List of predicted labels. # Check if true_labels and predicted_labels are non-empty and of equal length if not true_labels or not predicted_labels: print(\\"Error: The label lists are empty.\\") return if len(true_labels) != len(predicted_labels): print(\\"Error: The label lists are not of equal length.\\") return # Compute the confusion matrix cm = confusion_matrix(true_labels, predicted_labels) # Plot the confusion matrix plt.figure(figsize=(8, 6)) plt.imshow(cm, interpolation=\'nearest\', cmap=\'viridis\') plt.title(\'Confusion Matrix\') plt.colorbar() tick_marks = np.arange(len(set(true_labels))) plt.xticks(tick_marks, tick_marks) plt.yticks(tick_marks, tick_marks) # Add labels to axes plt.xlabel(\'Predicted Label\') plt.ylabel(\'True Label\') # Save the plot as \'confusion_matrix.png\' plt.savefig(\'confusion_matrix.png\') # Display the plot for verification (optional) plt.show()"},{"question":"In this problem, you are to implement a function named `reverse_alternate_levels` that takes a binary tree and reverses the nodes at every alternate level of the tree. The reversal should be done in-place, meaning you should modify the existing tree directly. # Problem Description: A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Levels of a tree are numbered starting from 0 for the root. Your task is to reverse the nodes at level 1, then keep level 2 as is, reverse level 3, and so on. # Function Signature: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def reverse_alternate_levels(root: TreeNode) -> None: pass ``` # Parameters: - `root` (TreeNode): The root of the binary tree. # Example: Consider the binary tree given below: ``` 1 / 2 3 / / 4 5 6 7 /| | /| | 8 9 10 11 12 13 14 15 ``` After reversing the nodes at alternate levels, the tree should be: ``` 1 / 3 2 / / 4 5 6 7 /| | /| | 15 14 13 12 11 10 9 8 ``` # Hints: 1. Perform a level-order traversal to access each level. 2. Use a queue to keep track of nodes at each level as you traverse the tree. 3. Reverse the values of nodes at alternate levels. # Constraints: - The number of nodes in the tree will be in the range [1, 10^4]. - The values of the nodes are in the range [0, 10^5]. # Example Usage: ```python # Creating a binary tree root = TreeNode( 1, left=TreeNode(2, TreeNode(4, TreeNode(8), TreeNode(9)), TreeNode(5, TreeNode(10), TreeNode(11))), right=TreeNode(3, TreeNode(6, TreeNode(12), TreeNode(13)), TreeNode(7, TreeNode(14), TreeNode(15))) ) # Executing the function reverse_alternate_levels(root) ``` The function `reverse_alternate_levels` should be implemented following the provided structure, and upon execution, it should modify the tree in the described manner.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def reverse_alternate_levels(root: TreeNode) -> None: if not root: return from collections import deque queue = deque([(root, 0)]) levels = {} # Collect nodes at each level while queue: node, level = queue.popleft() if level not in levels: levels[level] = [] levels[level].append(node) if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) # Reverse nodes at alternate levels for level in range(len(levels)): if level % 2 == 1: values = [node.value for node in levels[level]] values.reverse() for i, node in enumerate(levels[level]): node.value = values[i]"},{"question":"You are tasked with analyzing a set of transactions and calculating the total balance for each user. Each transaction either credits or debits a user account, and the balance needs to be updated accordingly. The function you need to implement, `calculate_user_balances`, will take one input: - `transactions`: A list of dictionaries, where each dictionary represents a transaction. Each transaction has the following structure: ```python { \\"user_id\\": <User ID>, \\"amount\\": <Transaction amount - positive for credit, negative for debit> } ``` The function should return a dictionary where the keys are user IDs and the values are the respective balances after all transactions have been processed. Function Signature: ```python def calculate_user_balances(transactions: list) -> dict: pass ``` # Examples Assume `transactions` is: ```python transactions = [ {\\"user_id\\": 1, \\"amount\\": 100.0}, {\\"user_id\\": 2, \\"amount\\": -50.0}, {\\"user_id\\": 1, \\"amount\\": 200.0}, {\\"user_id\\": 3, \\"amount\\": -10.0}, {\\"user_id\\": 2, \\"amount\\": 300.0} ] ``` Then, calling `calculate_user_balances(transactions)` should return: ```python { 1: 300.0, 2: 250.0, 3: -10.0 } ```","solution":"def calculate_user_balances(transactions): Calculate the total balance for each user based on their transactions. Parameters: transactions (list): A list of transaction dictionaries containing \'user_id\' and \'amount\'. Returns: dict: A dictionary with user IDs as keys and their respective balances as values. balances = {} for transaction in transactions: user_id = transaction[\\"user_id\\"] amount = transaction[\\"amount\\"] if user_id not in balances: balances[user_id] = 0.0 balances[user_id] += amount return balances"},{"question":"You are given an integer array `arr` containing `n` distinct integers and an integer `k`. Your task is to write a function `find_kth_largest(arr: List[int], k: int) -> int` that finds the `k`-th largest element in the array. # Constraints: - `1 <= n <= 10^4` - `1 <= k <= n` - `-10^4 <= arr[i] <= 10^4` # Example: ```python arr = [3, 2, 1, 5, 6, 4] k = 2 # Output: 5 # Explanation: The 2nd largest element in the array is 5. arr = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 # Output: 4 # Explanation: The 4th largest element in the array is 4. ``` # Additional Notes: You are expected to solve this problem using an efficient approach, such as a heap or the Quickselect algorithm, to ensure that your solution can handle the upper limits of the constraints.","solution":"from typing import List import heapq def find_kth_largest(arr: List[int], k: int) -> int: Finds the k-th largest element in the array. return heapq.nlargest(k, arr)[-1]"},{"question":"``` Write a function that processes a dataset from a CSV file containing columns \'Date\', \'Sales\', and \'Region\'. The task is to calculate the moving average of \'Sales\' over a window of 7 days for each \'Region\'. Finally, plot this moving average over time for each region using matplotlib. The function should output: tuple: A tuple containing: DataFrame: A pandas DataFrame with the original data along with the calculated moving average for each date and region. Axes: A matplotlib plot showing the moving average of sales over time for each region. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(file_path): Processes the CSV dataset to calculate the moving average of \'Sales\' over a 7-day window for each \'Region\' and plots the moving average over time for each region. Parameters: file_path (str): Path to the CSV file. Returns: tuple: A tuple containing: DataFrame: A pandas DataFrame with the original data along with the calculated moving average for each date and region. Axes: A matplotlib plot showing the moving average of sales over time for each region. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Ensure \'Date\' column is in datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Calculate the moving average for each region df[\'Moving_Avg\'] = df.groupby(\'Region\')[\'Sales\'].transform(lambda x: x.rolling(window=7, min_periods=1).mean()) # Plotting the moving average fig, ax = plt.subplots(figsize=(10, 6)) for region in df[\'Region\'].unique(): region_df = df[df[\'Region\'] == region] ax.plot(region_df[\'Date\'], region_df[\'Moving_Avg\'], label=region) ax.set_xlabel(\'Date\') ax.set_ylabel(\'7-Day Moving Average of Sales\') ax.set_title(\'7-Day Moving Average of Sales by Region\') ax.legend() plt.xticks(rotation=45) plt.tight_layout() return df, ax"},{"question":"In this problem, you will use the Pandas and Matplotlib libraries to create a function that processes data from a CSV file and generates a specific type of plot. The goal is to read data from a CSV file, compute some summary statistics, and visualize the data in a line plot with specific customizations. You need to write a function named `plot_temperature_trends` that accomplishes the following tasks: 1. Load the CSV file named `\'temperature_data.csv\'` into a Pandas DataFrame. The CSV file contains two columns: `\'date\'` and `\'temperature\'`. 2. Convert the `\'date\'` column to a datetime object using `pd.to_datetime`. 3. Set the `\'date\'` column as the DataFrame\'s index. 4. Resample the data to calculate the monthly average temperatures. 5. Create a line plot of the monthly average temperatures using Matplotlib. 6. Customize the plot by setting the title to `\'Monthly Average Temperature\'`, the x-axis label to `\'Date\'`, and the y-axis label to `\'Temperature (°C)\'`. 7. Save the plot as a PNG file named `\'average_temperature_trend.png\'`. # Function Signature: ```python def plot_temperature_trends(): pass ``` **Requirements:** - You must use the Pandas library to read the CSV file and process the data. - You must use the Matplotlib library to create and customize the plot. - The plot should show the monthly average temperatures calculated from the data. # Example CSV File (`temperature_data.csv`): ``` date,temperature 2023-01-01,5.2 2023-01-02,4.8 2023-01-03,5.0 ... 2023-12-30,3.2 2023-12-31,3.0 ``` # Example Usage: ```python plot_temperature_trends() ``` # Notes: - Use comments within your function to explain each step of the implementation. - Ensure the function runs without error and handles the file reading, data processing, and plotting correctly. - Assume `\'temperature_data.csv\'` exists in the same directory as your script.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_temperature_trends(): Load temperature data, process it to compute monthly averages, and plot these as a line graph with custom titles and labels. Save the figure as \'average_temperature_trend.png\'. # Load the CSV file into a DataFrame df = pd.read_csv(\'temperature_data.csv\') # Convert the \'date\' column to datetime object df[\'date\'] = pd.to_datetime(df[\'date\']) # Set the \'date\' column as the DataFrame\'s index df.set_index(\'date\', inplace=True) # Resample the data to calculate the monthly average temperatures monthly_avg = df.resample(\'M\').mean() # Create a line plot of the monthly average temperatures plt.figure(figsize=(10, 6)) plt.plot(monthly_avg.index, monthly_avg[\'temperature\'], marker=\'o\') # Customize the plot plt.title(\'Monthly Average Temperature\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (°C)\') # Save the plot as a PNG file plt.savefig(\'average_temperature_trend.png\') plt.close()"},{"question":"Problem: You are required to implement a function that processes a list of log entries and returns a summary of unique IP addresses and their respective access counts. Each log entry contains an IP address and a Unix timestamp, separated by a space. The function will output the IP addresses and their corresponding access counts sorted in descending order by the number of accesses. The `process_logs` function should have the following signature: ```python def process_logs(logs: List[str]) -> List[Tuple[str, int]]: ``` - `logs`: A list of strings, where each string represents a log entry containing an IP address and a Unix timestamp separated by a space. # Procedure: 1. **Parse the Logs**: - Iterate through each log entry in the provided list. - Extract the IP address from each log entry. 2. **Count Accesses**: - Use a dictionary to count the number of accesses for each IP address. 3. **Generate Summary**: - Create a summary list of tuples, where each tuple contains an IP address and its access count. - Sort the summary list in descending order by the access count. If two IP addresses have the same access count, sort them by the IP address in lexicographical order. # Requirements: - Use the `sorted` function to sort the summary list. - Ensure the function handles a large number of log entries efficiently. # Example: Given the following log entries: ``` [\\"192.168.1.1 1625391712\\", \\"192.168.1.2 1625391713\\", \\"192.168.1.1 1625391714\\", \\"192.168.1.3 1625391715\\", \\"192.168.1.2 1625391716\\", \\"192.168.1.2 1625391717\\"] ``` The function call `process_logs([\\"192.168.1.1 1625391712\\", \\"192.168.1.2 1625391713\\", \\"192.168.1.1 1625391714\\", \\"192.168.1.3 1625391715\\", \\"192.168.1.2 1625391716\\", \\"192.168.1.2 1625391717\\"])` should return: ``` [(\\"192.168.1.2\\", 3), (\\"192.168.1.1\\", 2), (\\"192.168.1.3\\", 1)] ``` # Constraints: - You may assume that the IP addresses are valid and formatted correctly (e.g., \\"192.168.1.1\\"). - The list `logs` can contain up to `10^6` log entries.","solution":"from typing import List, Tuple from collections import defaultdict def process_logs(logs: List[str]) -> List[Tuple[str, int]]: Processes a list of log entries and returns a summary of unique IP addresses and their respective access counts. Args: logs: A list of strings, where each string represents a log entry containing an IP address and a Unix timestamp separated by a space. Returns: A list of tuples with IP addresses and their access counts sorted in descending order by the number of accesses. ip_counts = defaultdict(int) for log in logs: ip, _ = log.split(\' \') ip_counts[ip] += 1 sorted_summary = sorted(ip_counts.items(), key=lambda x: (-x[1], x[0])) return sorted_summary"},{"question":"In this problem, you are tasked with implementing a function to find the shortest path in a graph using Dijkstra\'s algorithm with a priority queue. The goal is to determine the minimum distance from a source node to all other nodes in a weighted, directed graph. The function should return a dictionary where the keys are the node IDs and the values are the minimum distance from the source node. Implementation Details: 1. **Function Name**: `dijkstra` 2. **Input Parameters**: - `graph` (dict): A dictionary where the keys are node IDs (integers) and the values are lists of tuples `(neighbor, weight)` indicating the neighbors of the node and the weight of the edge to that neighbor. - `start` (int): The starting node ID. 3. **Output**: - `distances` (dict): A dictionary where the keys are node IDs and the values are the minimum distance from the start node to that node. Constraints: - Use the `heapq` module for the priority queue implementation. - Assume that all edge weights are non-negative. Your task is to write the complete function `dijkstra` that adheres to the above specifications.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest path in a graph. Parameters: graph (dict): A dictionary where keys are node IDs (integers) and values are lists of tuples (neighbor, weight). start (int): The starting node ID. Returns: dict: A dictionary where keys are node IDs and values are the minimum distance from the start node to that node. # Initialize the dictionary to store minimum distances from the start node distances = {node: float(\'inf\') for node in graph} distances[start] = 0 # Priority queue to hold (cost, node) tuples priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we have already found a better path, continue if current_distance > distances[current_node]: continue # Check all the neighbors of the current node for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"You need to create a function that processes a list of transactions and outputs the total transaction amount for each unique user ID. Each transaction is represented as a list containing multiple attributes, with the user ID located at the 1st position (index 0) and the transaction amount at the 3rd position (index 2). **Function Name**: `calculate_user_total` **Parameters**: - `transactions`: A list of lists, where each inner list represents a transaction with the user ID at index 0 and the transaction amount at index 2. The function should: 1. Aggregate the total transaction amount for each unique user ID. 2. Print each user ID followed by their total transaction amount. **Example**: ```python transactions = [ [\\"U1\\", \\"Purchase\\", 100], [\\"U2\\", \\"Purchase\\", 200], [\\"U1\\", \\"Refund\\", -50], [\\"U3\\", \\"Purchase\\", 300], [\\"U2\\", \\"Purchase\\", 150] ] calculate_user_total(transactions) ``` **Expected Output**: ``` U1 50 U2 350 U3 300 ```","solution":"def calculate_user_total(transactions): Aggregates the total transaction amount for each unique user ID. Parameters: transactions (list of lists): Each inner list contains user ID at index 0 and transaction amount at index 2. Returns: dict: Dictionary containing user IDs as keys and their total transaction amounts as values. user_totals = {} for transaction in transactions: user_id = transaction[0] transaction_amount = transaction[2] if user_id in user_totals: user_totals[user_id] += transaction_amount else: user_totals[user_id] = transaction_amount return user_totals"},{"question":"You are tasked with writing a function `interval_intersection(A, B)` that takes two lists `A` and `B` of closed intervals, and returns the intersection of these intervals. Each list consists of pairwise disjoint intervals sorted by their start times. An interval `[a, b]` (for an interval in list `A`) intersects with an interval `[c, d]` (for an interval in list `B`) if `max(a, c) <= min(b, d)`. The intersection would be the interval `[max(a, c), min(b, d)]`. If there is no intersection, you do not include an interval in the result. # Function Signature ```python def interval_intersection(A, B): pass ``` # Example ```python A = [[0, 2], [5, 10], [13, 23], [24, 25]] B = [[1, 5], [8, 12], [15, 24], [25, 26]] result = interval_intersection(A, B) print(result) # Output should be [[1, 2], [5, 5], [8, 10], [15, 23], [24, 24], [25, 25]] ``` # Constraints - The start of each interval in lists `A` and `B` are guaranteed to be non-negative integers. - The intervals are guaranteed to be pairwise disjoint and sorted in ascending order. - The length of the lists `A` and `B` will not exceed `1000`. - The start and end of each interval will be within the range `[0, 1000000]`. Your goal is to write an efficient function to find all the intersections of intervals in `A` and `B`.","solution":"def interval_intersection(A, B): i, j = 0, 0 result = [] while i < len(A) and j < len(B): # Find the start and end of intersection interval start = max(A[i][0], B[j][0]) end = min(A[i][1], B[j][1]) if start <= end: result.append([start, end]) # Move to the next interval if A[i][1] < B[j][1]: i += 1 else: j += 1 return result"},{"question":"**Objective**: The goal of this problem is to deepen your understanding of string manipulation and basic list operations in Python. You are required to write a function named `summarize_paragraph` that performs the following steps: 1. Takes a paragraph as input, which is a string containing multiple sentences. 2. Splits this paragraph into individual sentences. 3. Counts the number of words in each sentence. 4. Returns a list of tuples, each containing a sentence and the corresponding word count. **Requirements**: - You must use built-in Python string methods to split the paragraph into sentences and words. - The resulting list should maintain the order of the sentences as in the original paragraph. - Each tuple in the list should include a sentence and its word count. # Example of Expected Output ```python paragraph = \\"This is the first sentence. Here is another one. Yet another sentence here.\\" summary = summarize_paragraph(paragraph) print(summary) ``` ```plaintext [ (\\"This is the first sentence.\\", 5), (\\"Here is another one.\\", 4), (\\"Yet another sentence here.\\", 4) ] ``` # Function Signature ```python def summarize_paragraph(paragraph: str) -> list: pass ``` # Notes - Ensure sentences are split correctly using punctuation marks (e.g., `.`, `!`, `?`). - Consider edge cases such as multiple spaces between words or sentences with trailing spaces. - A sentence is defined as a string of words ending with a punctuation mark. # Constraints - The function should efficiently handle paragraphs with up to 100 sentences. - Each sentence will contain at most 20 words.","solution":"import re def summarize_paragraph(paragraph: str) -> list: Summarizes a paragraph by returning a list of tuples, each containing a sentence and the word count for that sentence. :param paragraph: Input paragraph as a string. :return: List of tuples, each containing a sentence and its word count. # Split the paragraph into sentences using regex to include sentences ending with . ? or ! sentences = re.split(r\'(?<=[.!?]) +\', paragraph.strip()) # Iterate through each sentence and count the words summary = [(sentence, len(sentence.split())) for sentence in sentences if sentence] return summary"},{"question":"Create a Python function named `analyze_time_series` that accepts the following parameters: - `data`: a pandas DataFrame containing a time series indexed by datetime. - `metric`: a string representing the column name of the series to be analyzed. - `window_sizes`: a list of integers corresponding to different rolling window sizes for computing moving averages. - `anomaly_threshold`: a float that sets the standard deviation level above which data points are considered anomalies. The function should carry out the following operations: 1. Compute rolling means of the time series using the specified window sizes and add these to the DataFrame as new columns. 2. Compute rolling standard deviation for the time series using a window size specified by the first element in `window_sizes`. 3. Identify anomalies based on the rolling standard deviation exceeding the `anomaly_threshold` times the standard deviation. 4. Plot the time series along with its rolling means on the same plot for comparison. Highlight anomaly points in a different color or marker. 5. Return the DataFrame with additional columns for rolling means and an anomaly flag. Ensure the time series plot is clear and includes legends for clarity. Use the following import statements for your solution: ```python import matplotlib.pyplot as plt import pandas as pd ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_time_series(data, metric, window_sizes, anomaly_threshold): Analyze time series data by computing rolling means and identifying anomalies. Parameters: - data (pd.DataFrame): DataFrame containing the time series indexed by datetime. - metric (str): Column name of the series to be analyzed. - window_sizes (list of int): List of integers for rolling window sizes. - anomaly_threshold (float): Standard deviation level above which data points are considered anomalies. Returns: - pd.DataFrame: DataFrame with additional columns for rolling means and an anomaly flag. # Compute rolling means and standard deviations for window in window_sizes: data[f\'rolling_mean_{window}\'] = data[metric].rolling(window=window).mean() first_window = window_sizes[0] data[\'rolling_std\'] = data[metric].rolling(window=first_window).std() # Identify anomalies data[\'anomaly_flag\'] = (data[metric] > data[f\'rolling_mean_{first_window}\'] + anomaly_threshold * data[\'rolling_std\']) | (data[metric] < data[f\'rolling_mean_{first_window}\'] - anomaly_threshold * data[\'rolling_std\']) # Plot the time series with rolling means and anomalies plt.figure(figsize=(14, 7)) plt.plot(data.index, data[metric], label=\'Original Series\') for window in window_sizes: plt.plot(data.index, data[f\'rolling_mean_{window}\'], label=f\'Rolling Mean {window}\') plt.scatter(data.index[data[\'anomaly_flag\']], data[metric][data[\'anomaly_flag\']], color=\'red\', label=\'Anomalies\', marker=\'x\') plt.xlabel(\'Date\') plt.ylabel(metric) plt.legend() plt.title(f\'Time Series Analysis for {metric}\') plt.show() return data"},{"question":"A fundamental task in computer vision and image processing is identifying and tracking objects within a scene. In this problem, you are required to implement a function `connected_components` that labels connected components in a binary image and assigns a unique label to each component. Function Signature ```python def connected_components(binary_image: np.ndarray) -> np.ndarray: ``` Parameters - `binary_image`: (np.ndarray) A 2D binary image, where 0s represent the background and 1s represent the foreground objects. Returns - Returns a 2D array `labeled_image` with the same shape as `binary_image`, where each connected component in the binary image is assigned a unique integer label starting from 1. Background pixels remain as 0. Task 1. Implement the `connected_components` function. 2. Use depth-first search (DFS) to traverse and label all connected components. 3. Treat connected pixels as those that share edges (4-connectivity). 4. Ensure that each connected component receives a unique label and that the algorithm handles arbitrary binary image sizes. Example ```python import numpy as np binary_image = np.array([ [1, 0, 0, 1, 1], [1, 1, 0, 0, 0], [0, 1, 1, 0, 1], [0, 0, 1, 0, 1], ]) labeled_image = connected_components(binary_image) # Output should be similar to (example result may vary in actual labels): # array([ # [1, 0, 0, 2, 2], # [1, 1, 0, 0, 0], # [0, 1, 1, 0, 3], # [0, 0, 1, 0, 3], # ]) ``` Hints - You may find a stack-based approach useful for the DFS traversal. - Use a helper function to recursively label connected pixels. - Consider maintaining a set or list to manage the stack during traversal. **Your task is to complete the `connected_components` function in a way that accurately labels all connected components in the input binary image while adhering to the mentioned constraints and guidelines.**","solution":"import numpy as np def connected_components(binary_image: np.ndarray) -> np.ndarray: def dfs(x, y, label): stack = [(x, y)] while stack: cx, cy = stack.pop() if cx < 0 or cx >= binary_image.shape[0] or cy < 0 or cy >= binary_image.shape[1]: continue if labeled_image[cx, cy] != 0 or binary_image[cx, cy] == 0: continue labeled_image[cx, cy] = label stack.append((cx+1, cy)) stack.append((cx-1, cy)) stack.append((cx, cy+1)) stack.append((cx, cy-1)) labeled_image = np.zeros_like(binary_image, dtype=int) label = 1 for i in range(binary_image.shape[0]): for j in range(binary_image.shape[1]): if binary_image[i, j] == 1 and labeled_image[i, j] == 0: dfs(i, j, label) label += 1 return labeled_image"},{"question":"You are developing a function `find_subarray_with_max_sum(arr)` that identifies the subarray within a given array of integers `arr` which has the largest sum of its elements. The function should return two values: 1. The maximum sum of the subarray. 2. The start and end indices (inclusive) of the subarray which results in the maximum sum. # Requirements: 1. Implement the function using Kadane\'s Algorithm. 2. Address edge cases where the array might contain all negative numbers or be entirely positive. 3. Ensure the function has a time complexity of O(n) where n is the length of the array. # Inputs: - `arr`: A list of integers (both positive, negative, and zero values). # Outputs: - A tuple containing: - An integer representing the maximum sum of the subarray. - A tuple of two integers representing the start and end indices of the subarray. # Example: ```python arr = [-2, -3, 4, -1, -2, 1, 5, -3] # Output: (7, (2, 6)) # Explanation: The subarray with the maximum sum is [4, -1, -2, 1, 5], which has a sum of 7 and starts at index 2 and ends at index 6. ``` Function Signature: ```python def find_subarray_with_max_sum(arr): # Your code here ```","solution":"def find_subarray_with_max_sum(arr): Returns the maximum sum of a subarray within arr, and the start and end indices of that subarray. Parameters: arr (list of int): The input array of integers. Returns: tuple: A tuple containing the maximum sum and a tuple of start and end indices of the subarray. # Initialize variables max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return (max_sum, (start, end))"},{"question":"In this task, you are required to write a function named `find_unique_number` that takes a single list of integers as input and finds the one integer that appears an odd number of times, while all others appear an even number of times. The function should utilize bitwise operations to achieve this efficiently, without using extra space. Specifically, your `find_unique_number` function should: - Only have one parameter, `numbers`, which is a list of integers. - Return the integer that appears an odd number of times in the list. - Use bitwise XOR operation to solve the problem. Here is a step-by-step guide of what your function should do: 1. Initialize a variable `result` to 0. 2. Iterate through each number in the list. 3. Use the XOR operation (`^`) between `result` and the current number. 4. After the iteration is complete, `result` will hold the unique number that appears an odd number of times. 5. Return the `result`. Your implementation must demonstrate the correct use of bitwise XOR operation to solve the problem efficiently. ```python def find_unique_number(numbers): # Your implementation goes here ```","solution":"def find_unique_number(numbers): Returns the unique number in the list that appears an odd number of times. Args: numbers (list of int): The list of integers where one integer appears an odd number of times. Returns: int: The integer that appears an odd number of times. result = 0 for number in numbers: result ^= number return result"},{"question":"In project scheduling, finding the earliest and latest start times of tasks is crucial for efficient project management. Given a list of tasks, each associated with a unique identifier, a duration, and dependencies, it\'s essential to calculate these times for better resource allocation and risk management. Implement a function `schedule_tasks(tasks: List[Dict[str, Any]]) -> Tuple[Dict[str, int], Dict[str, int]]` that calculates the earliest and latest start times for each task. Each task dictionary will contain: - `id`: A unique identifier for the task (string). - `duration`: The duration of the task in days (int). - `dependencies`: A list of task IDs that must be completed before this task can start (List[string]). The function should return two dictionaries: 1. `earliest_start`: A dictionary mapping each task ID to its earliest possible start time (int). 2. `latest_start`: A dictionary mapping each task ID to its latest possible start time (int) without delaying the project. Use the following two-pass algorithm to determine the start times: 1. **Forward pass**: Calculate the earliest start time for each task, starting from tasks with no dependencies. 2. **Backward pass**: Calculate the latest start time for each task, starting from tasks with no dependent tasks (i.e., tasks that are not prerequisites for any other task). You may assume: - There are no cyclical dependencies in the task list. - The project completes when the latest ending task finishes. # Example Input ```python tasks = [ {\\"id\\": \\"A\\", \\"duration\\": 4, \\"dependencies\\": []}, {\\"id\\": \\"B\\", \\"duration\\": 3, \\"dependencies\\": [\\"A\\"]}, {\\"id\\": \\"C\\", \\"duration\\": 2, \\"dependencies\\": [\\"A\\"]}, {\\"id\\": \\"D\\", \\"duration\\": 1, \\"dependencies\\": [\\"B\\", \\"C\\"]} ] ``` # Example Output ```python ( {\\"A\\": 0, \\"B\\": 4, \\"C\\": 4, \\"D\\": 7}, {\\"A\\": 0, \\"B\\": 4, \\"C\\": 5, \\"D\\": 7} ) ```","solution":"from typing import List, Dict, Any, Tuple def schedule_tasks(tasks: List[Dict[str, Any]]) -> Tuple[Dict[str, int], Dict[str, int]]: earliest_start = {} latest_start = {} task_duration = {} dependencies = {} reverse_dependencies = {} for task in tasks: task_id = task[\'id\'] duration = task[\'duration\'] deps = task[\'dependencies\'] earliest_start[task_id] = 0 latest_start[task_id] = float(\'inf\') task_duration[task_id] = duration dependencies[task_id] = deps for dep in deps: if dep not in reverse_dependencies: reverse_dependencies[dep] = [] reverse_dependencies[dep].append(task_id) # Forward pass def calculate_earliest(task_id): if earliest_start[task_id] == 0 and dependencies[task_id]: earliest_start[task_id] = max(calculate_earliest(dep) + task_duration[dep] for dep in dependencies[task_id]) return earliest_start[task_id] for task_id in earliest_start.keys(): calculate_earliest(task_id) project_finish_time = max(earliest_start[task_id] + task_duration[task_id] for task_id in earliest_start.keys()) # Backward pass def calculate_latest(task_id): if reverse_dependencies.get(task_id) is None: latest_start[task_id] = project_finish_time - task_duration[task_id] else: latest_start[task_id] = min(calculate_latest(dep) - task_duration[task_id] for dep in reverse_dependencies[task_id]) return latest_start[task_id] for task_id in earliest_start.keys(): calculate_latest(task_id) return earliest_start, latest_start"},{"question":"You need to implement a function named `largest_divisible_subset` that finds the largest subset of an array where every pair of elements is divisible by the other. The function should follow the specifications below: 1. **Function Signature:** ```python def largest_divisible_subset(nums: list) -> list: ``` 2. **Parameters:** - `nums` (list): A list of positive integers. 3. **Constraints:** - The length of `nums` will be between 1 and 1000. - All elements in `nums` will be unique and between 1 and 2^31 - 1. 4. **Output:** - Returns a list representing the largest divisible subset. - If there are multiple results, return any one of them. 5. **Example:** ```python assert largest_divisible_subset([1, 2, 3]) == [1, 2] or largest_divisible_subset([1, 2, 3]) == [1, 3] assert largest_divisible_subset([1, 2, 4, 8]) == [1, 2, 4, 8] ``` 6. **Implementation Details:** - Utilize a dynamic programming approach to build up solutions to larger problems from solved subproblems. - Sort the input list `nums` to ensure easier management of divisible pairs. - Track the largest subset using an array where each index represents the length of the largest subset ending with that element. - Backtrack from the maximum value to retrieve the sequence.","solution":"def largest_divisible_subset(nums): if not nums: return [] nums.sort() n = len(nums) dp = [[num] for num in nums] for i in range(n): for j in range(i): if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1: dp[i] = dp[j] + [nums[i]] return max(dp, key=len)"},{"question":"Write a function named `find_duplicate_emails` that takes a list of email addresses and identifies any duplicates. The function should return a list of duplicate email addresses. If there are no duplicates, return an empty list. The email list should be passed to the function as a parameter, where each email is a string. The function should be case-insensitive when checking for duplicates, meaning \\"Email@example.com\\" and \\"email@example.com\\" should be considered the same. Function Requirements: - Name the function `find_duplicate_emails`. - Ensure that email comparison is case-insensitive. - Return a list of duplicate emails (in lowercase) in the order they first appear in the input list. - If no duplicates are found, return an empty list. Example: ```python emails = [\\"User@example.com\\", \\"user@example.com\\", \\"admin@example.org\\", \\"Admin@example.org\\", \\"test@example.net\\"] print(find_duplicate_emails(emails)) ``` Expected Output: ``` [\\"user@example.com\\", \\"admin@example.org\\"] ```","solution":"def find_duplicate_emails(emails): Identifies duplicate email addresses from the provided list. Args: emails (list): List of email addresses as strings. Returns: list: List of duplicate email addresses in lowercase. lowercase_emails = [email.lower() for email in emails] seen = set() duplicates = set() for email in lowercase_emails: if email in seen: duplicates.add(email) else: seen.add(email) return sorted(duplicates, key=lambda x: lowercase_emails.index(x))"},{"question":"You are tasked with writing a function that will determine the highest scoring word in a given string of words, where the score of each word is calculated based on the alphabetical position of each letter in the word (a = 1, b = 2, c = 3, ..., z = 26). The function should be named `high_scoring_word`. **Function Signature:** ```python def high_scoring_word(sentence: str) -> str: Parameters: - sentence (str): A string containing multiple words separated by spaces. Returns: - (str): The word with the highest score based on its letters\' positions in the alphabet. ``` # Description: Your function should determine which word in the input string has the highest score. The score of each word is determined by summing the positions of its letters in the alphabet. 1. **sentence**: A string containing multiple words separated by spaces. # Specifics: - Consider only lowercase letters in the word scoring. - If two words have the same score, return the word that appears first in the input string. - The input string will consist only of lowercase letters and spaces. # Requirements: - Calculate the score of each word based on the positions of its constituent letters (\'a\' = 1, \'b\' = 2, ..., \'z\' = 26). - Return the word with the highest score; if there is a tie, return the first occurring word. # Example: ```python high_scoring_word(\\"man i need a taxi up to ubud\\") # Returns \\"taxi\\" high_scoring_word(\\"what time are we climbing up the volcano\\") # Returns \\"volcano\\" high_scoring_word(\\"take me to semynak\\") # Returns \\"semynak\\" ```","solution":"def high_scoring_word(sentence: str) -> str: Returns the word with the highest score based on its letters\' positions in the alphabet. def word_score(word): return sum(ord(char) - ord(\'a\') + 1 for char in word) words = sentence.split() highest_score = 0 highest_scoring_word = \\"\\" for word in words: score = word_score(word) if score > highest_score: highest_score = score highest_scoring_word = word return highest_scoring_word"},{"question":"You are to implement a numerical solver for the heat diffusion equation using the finite difference method. The heat diffusion equation is given by: [ frac{partial u}{partial t} = alpha frac{partial^2 u}{partial x^2} ] where ( alpha ) is the thermal diffusivity, which we will set to 0.3 for this exercise. Given the following parameters: - Time domain: 30 timesteps with ( dt = 0.01 ) - Spatial domain: ( x ) in the interval ([0, 1]) - Initial Condition (IC): Gaussian distribution centered at ( x=0.5 ) with standard deviation ( sigma = 0.1 ) You are required to write a function `heat_diffusion(nx)` that: 1. Initializes the spatial grid with `nx` internal grid points. 2. Implements the numerical solution using an explicit finite difference scheme. 3. Plots the initial and final states of the solution using Matplotlib. Specifically, the function will: - Generate the initial condition for the Gaussian distribution over the spatial domain. - Implement the finite difference time-stepping algorithm. - Use numpy to handle array operations and matplotlib to visualize the results. Use the following APIs from the required libraries: - `numpy.exp`: To create the initial Gaussian distribution. - `numpy.zeros`: To initialize the array for storing the solution. - `matplotlib.pyplot.figure` and `matplotlib.pyplot.show`: To handle plotting. Here\'s an outline and constraints to help you: - Ensure the thermal diffusivity ( alpha ) is constant and set to 0.3. - Use a fixed time step ( dt = 0.01 ) and run the simulation for 30 time steps. - The spatial grid should range from ([0, 1]). Function Signature: `def heat_diffusion(nx: int) -> None:` Example: ```python heat_diffusion(51) ``` The function should initialize a grid with 51 internal points and plot the initial and final states of the solution.","solution":"import numpy as np import matplotlib.pyplot as plt def heat_diffusion(nx: int) -> None: alpha = 0.3 # thermal diffusivity dt = 0.01 # time step size t_steps = 30 # number of time steps x_start, x_end = 0, 1 dx = (x_end - x_start) / (nx - 1) x = np.linspace(x_start, x_end, nx) # Initial condition: Gaussian distribution sigma = 0.1 u_initial = np.exp(-((x - 0.5) ** 2) / (2 * sigma ** 2)) # Initialize u with initial condition u = u_initial.copy() # Time-stepping using explicit finite difference method for _ in range(t_steps): u_new = u.copy() for i in range(1, nx - 1): u_new[i] = u[i] + alpha * dt / dx**2 * (u[i + 1] - 2 * u[i] + u[i - 1]) u = u_new # Plot initial and final states plt.figure(figsize=(10, 5)) plt.plot(x, u_initial, label=\'Initial Condition\') plt.plot(x, u, label=\'Final State after 30 timesteps\') plt.xlabel(\'x\') plt.ylabel(\'u\') plt.legend() plt.title(\'Heat Diffusion Equation\') plt.show()"},{"question":"You are provided with a function `draw_circle` from the `turtle` library in Python, which is used for drawing a circle with a specific radius. The `turtle` library offers graphical capabilities and allows you to define the circle\'s radius using the `Circle` function. In this exercise, you are required to create a function `draw_centered_circle` that draws a circle centered at the current position of the turtle with a given radius. The turtle should not move its position after the circle is drawn. **Requirements:** - Use the `turtle.circle` method to draw the circle around the turtle\'s current position. - Ensure the drawn circle is centered at the turtle\'s current position. - Use the `turtle.penup` and `turtle.pendown` methods to avoid drawing lines when repositioning the turtle. Write a function named `draw_centered_circle` with a parameter `radius`, which accomplishes this task. # Example: ```python # Before calling draw_centered_circle(50): # Assume turtle is at position (0, 0) draw_centered_circle(50) # After calling draw_centered_circle(50): # A circle with radius 50 centered at the turtle\'s current position (0, 0) should be drawn. ``` Function signature: ```python def draw_centered_circle(radius): # Your code here ```","solution":"import turtle def draw_centered_circle(radius): Draw a circle centered at the turtle\'s current position with the given radius. Parameters: radius (float): The radius of the circle to be drawn. # Save the current position current_position = turtle.position() # Lift the pen to avoid drawing lines turtle.penup() # Move the turtle to the starting position turtle.setx(current_position[0] - radius) # Lower the pen to start drawing the circle turtle.pendown() # Draw the circle turtle.circle(radius) # Lift the pen to avoid drawing lines while returning to original position turtle.penup() # Return to the original position turtle.setposition(current_position) # Lower the pen back to its original state turtle.pendown()"},{"question":"You\'re tasked with developing a utility function that processes a list of transactions to generate a summary of balances for each account. Each transaction affects an account balance, either increasing or decreasing it based on the transaction type. Transactions are provided in a list of tuples, where each tuple contains an account ID, transaction type (either \'credit\' or \'debit\'), and an amount. The function should return a dictionary with account IDs as keys and their final balances as values. Here\'s what the function should accomplish: - Process a list of transactions. - Initialize all account balances to 0 by default. - For each transaction, update the corresponding account balance. - If the transaction type is \'credit\', add the amount to the account balance. - If the transaction type is \'debit\', subtract the amount from the account balance. - Return a dictionary of account balances. Your task is to implement a function named `calculate_balances` with the following specification: ```python def calculate_balances(transactions: list) -> dict: Process a list of transactions and return the final balance for each account. Args: transactions (list): A list of tuples where each tuple contains: (account_id (str), transaction_type (str), amount (float)) Returns: dict: A dictionary with account IDs as keys and their final balances as values. ``` # Specific Requirements: 1. Each transaction is represented as a tuple: `(account_id, transaction_type, amount)`. 2. The transaction type is a string that can either be \'credit\' or \'debit\'. 3. If a transaction type is \'credit\', add the amount to the account balance. 4. If a transaction type is \'debit\', subtract the amount from the account balance. 5. Account balances should start at 0 if not previously encountered in the transactions. # Example: Assume you have the following transactions: ```python transactions = [ (\\"A123\\", \\"credit\\", 100.0), (\\"B456\\", \\"debit\\", 50.0), (\\"A123\\", \\"debit\\", 30.0), (\\"C789\\", \\"credit\\", 250.0), (\\"B456\\", \\"credit\\", 120.0), ] ``` The function should process these transactions and return the following account balances: ```python { \\"A123\\": 70.0, # 100.0 (credit) - 30.0 (debit) \\"B456\\": 70.0, # -50.0 (debit) + 120.0 (credit) \\"C789\\": 250.0 # 250.0 (credit) } ```","solution":"def calculate_balances(transactions: list) -> dict: Process a list of transactions and return the final balance for each account. Args: transactions (list): A list of tuples where each tuple contains: (account_id (str), transaction_type (str), amount (float)) Returns: dict: A dictionary with account IDs as keys and their final balances as values. balances = {} for account_id, transaction_type, amount in transactions: if account_id not in balances: balances[account_id] = 0.0 if transaction_type == \\"credit\\": balances[account_id] += amount elif transaction_type == \\"debit\\": balances[account_id] -= amount return balances"},{"question":"You are tasked with creating a function to simulate a simplified version of a shopping cart system in an online store using Python. In this function, the user will be able to add items to their cart, remove items from their cart, and view the current contents of the cart along with the total cost. The function should include the following features: 1. Display a menu with three options: - [1] Add Item - prompts the user to enter an item name and its price, then adds the item to the cart. - [2] Remove Item - prompts the user to enter the name of an item to remove from the cart. If the item is not found, inform the user. - [3] View Cart - displays all items in the cart with their prices and the total cost. 2. Ensure that the cart is maintained as a dictionary with item names as keys and prices as values. 3. Allow users to perform multiple actions by continuously presenting the menu until they choose to quit. 4. Implement the function using a loop that will make sure actions are taken based on user input. You are to write a function named `shopping_cart` that takes no arguments and performs these actions. ```python def shopping_cart(): # Function body ```","solution":"def shopping_cart(): cart = {} while True: print(\\"nMenu:\\") print(\\"[1] Add Item\\") print(\\"[2] Remove Item\\") print(\\"[3] View Cart\\") print(\\"[4] Quit\\") choice = input(\\"Please choose an option: \\") if choice == \'1\': item_name = input(\\"Enter the item name: \\").strip() item_price = float(input(\\"Enter the item price: \\").strip()) cart[item_name] = item_price print(f\\"Added {item_name} at {item_price:.2f} to the cart.\\") elif choice == \'2\': item_name = input(\\"Enter the item name to remove: \\").strip() if item_name in cart: del cart[item_name] print(f\\"Removed {item_name} from the cart.\\") else: print(f\\"{item_name} not found in the cart.\\") elif choice == \'3\': if not cart: print(\\"Your cart is empty.\\") else: total_cost = 0.0 for item_name, item_price in cart.items(): print(f\\"{item_name}: {item_price:.2f}\\") total_cost += item_price print(f\\"Total cost: {total_cost:.2f}\\") elif choice == \'4\': print(\\"Quitting the shopping cart.\\") break else: print(\\"Invalid choice. Please try again.\\")"},{"question":"Given a CSV file named `\'finance_data.csv\'` that contains monthly financial data of a company over several years, you are required to: 1. Read the data from the CSV file into a pandas DataFrame. 2. Calculate the monthly return for each month and add this as a new column in the DataFrame. The return for a month is calculated as `(Current Month\'s Price - Previous Month\'s Price) / Previous Month\'s Price`. 3. Identify the month and year with the highest return. 4. Create a line plot displaying the monthly returns over time. 5. Highlight the month with the highest return on the plot. 6. Add appropriate labels, title, and a legend to your plot. 7. Save the plot as `\'monthly_returns_plot.png\'`. The CSV file `\'finance_data.csv\'` has at least the following columns: - `\'Date\'`: The date of the record in the format `\'YYYY-MM\'`. - `\'Price\'`: The closing price of the company’s stock for the corresponding month. Define a function called `create_monthly_returns_plot`, which will perform all the above operations. Here\'s the function signature: ```python def create_monthly_returns_plot(): # Your code here ``` Libraries to use: - `pandas.read_csv` - `pandas.to_datetime` - `matplotlib.pyplot` Note: Ensure to handle imports within the function. This function does not take any input arguments and does not return any values. Instead, it should save the plot as `\'monthly_returns_plot.png\'`.","solution":"import pandas as pd import matplotlib.pyplot as plt def create_monthly_returns_plot(): # Read the CSV file into a pandas DataFrame df = pd.read_csv(\'finance_data.csv\') # Convert the \'Date\' column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\'], format=\'%Y-%m\') # Sort the DataFrame by date df = df.sort_values(by=\'Date\') # Calculate the monthly return and add it as a new column df[\'Monthly Return\'] = df[\'Price\'].pct_change() # Identify the month and year with the highest return highest_return_row = df.loc[df[\'Monthly Return\'].idxmax()] highest_return_date = highest_return_row[\'Date\'] highest_return_value = highest_return_row[\'Monthly Return\'] # Plot the monthly returns over time plt.figure(figsize=(10, 5)) plt.plot(df[\'Date\'], df[\'Monthly Return\'], label=\'Monthly Return\', color=\'blue\') # Highlight the month with the highest return on the plot plt.axvline(x=highest_return_date, color=\'red\', linestyle=\'--\', label=f\'Highest Return ({highest_return_date.strftime(\\"%Y-%m\\")})\') # Add labels, title, and legend to the plot plt.xlabel(\'Date\') plt.ylabel(\'Monthly Return\') plt.title(\'Monthly Returns Over Time\') plt.legend() # Save the plot as \'monthly_returns_plot.png\' plt.savefig(\'monthly_returns_plot.png\') # Optional: Show the plot # plt.show()"},{"question":"# Objective: Develop a function named `duplicate_characters` that receives a string and returns a dictionary with each character that appears more than once in the string and the number of times it appears. The function should be case-insensitive. # Input: A single string `s` which can contain alphabets (both uppercase and lowercase), digits, and punctuation marks. # Output: A dictionary where the keys are the characters (in lowercase) that appear more than once in the string, and the values are the frequencies of those characters. # Function Signature: ```python def duplicate_characters(s: str) -> dict: # Your code here ``` # Requirements: - The function should be case-insensitive (i.e., \'A\' and \'a\' should be considered the same character). - Only include characters in the dictionary that appear more than once in the string. # Example: Input: ```python s = \\"Programming is fun, isn\'t it?\\" ``` Output: ```python { \'r\': 2, \'g\': 2, \'m\': 2, \'i\': 4, \'n\': 3, \' \': 4, \'s\': 2, \'t\': 2 } ```","solution":"def duplicate_characters(s: str) -> dict: Returns a dictionary where keys are the characters (in lowercase) that appear more than once in the string, and values are their frequencies. s = s.lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Filter out the characters that appear more than once duplicate_chars = {char: count for char, count in char_count.items() if count > 1} return duplicate_chars"},{"question":"You are tasked with implementing a function `track_sales` that processes sales information from multiple stores. This function will illustrate the use of dictionary operations, list iteration, and sorting in Python. # Your Tasks: 1. **Record Sales:** The function should take a list of dictionaries where each dictionary contains sales information from a store. Each dictionary in the list will have the following keys: - \\"store_id\\": A unique identifier for the store. - \\"sales\\": A list of tuples, where each tuple contains two elements: the product name (string) and the number of units sold (integer). 2. **Compute Total Sales:** The function should compute the total units sold for each product across all stores. 3. **Sort Products by Sales:** The function should return a list of all products sorted in descending order based on the total units sold. If two products have the same number of units sold, sort them alphabetically by product name. # Function Definition: ```python def track_sales(sales_data: list) -> list: Processes sales information from multiple stores and returns a sorted list of products based on total units sold. :param sales_data: A list of dictionaries where each dictionary contains sales information from a store. :return: A list of product names sorted by total units sold in descending order. ``` # Example Input: ```python sales_data = [ {\\"store_id\\": 1, \\"sales\\": [(\\"apple\\", 30), (\\"banana\\", 15)]}, {\\"store_id\\": 2, \\"sales\\": [(\\"apple\\", 20), (\\"orange\\", 10)]}, {\\"store_id\\": 3, \\"sales\\": [(\\"banana\\", 5), (\\"orange\\", 25)]} ] ``` # Example Output: ```python [\\"apple\\", \\"orange\\", \\"banana\\"] ``` # Constraints: - Assume that the input list will always have valid sales data. - The function should be efficient in processing the sales information to handle a large number of stores and sales entries. - Make sure to use dictionary operations to keep track of product sales counts efficiently and use sorting functions to order the results correctly.","solution":"def track_sales(sales_data: list) -> list: Processes sales information from multiple stores and returns a sorted list of products based on total units sold. :param sales_data: A list of dictionaries where each dictionary contains sales information from a store. :return: A list of product names sorted by total units sold in descending order. total_sales = {} for store in sales_data: for product, units in store[\'sales\']: if product in total_sales: total_sales[product] += units else: total_sales[product] = units sorted_products = sorted(total_sales.items(), key=lambda x: (-x[1], x[0])) return [product for product, units in sorted_products]"},{"question":"In this problem, you are required to create a function called `find_intersection` that finds the intersection point(s) of two given sets of rectangles. Each rectangle is defined by its bottom-left and top-right coordinates. The function should have the following signature: ```python def find_intersection(rectangles1, rectangles2): ``` **Parameters:** - `rectangles1`: A list of tuples, where each tuple contains four integers representing the bottom-left `(x1, y1)` and top-right `(x2, y2)` coordinates of a rectangle in the first set. - `rectangles2`: A list of tuples, where each tuple contains four integers representing the bottom-left `(x1, y1)` and top-right `(x2, y2)` coordinates of a rectangle in the second set. **Function Requirements:** 1. Identify all rectangles that intersect between the two sets. 2. For each intersecting pair of rectangles (one from each set), find the intersecting rectangle. 3. Return a list of intersecting rectangles, each represented by a tuple with the bottom-left and top-right coordinates. **Example:** ```python rectangles1 = [(1, 1, 3, 3), (5, 5, 7, 7)] rectangles2 = [(2, 2, 4, 4), (6, 6, 8, 8), (0, 0, 2, 2)] find_intersection(rectangles1, rectangles2) ``` **Expected Output:** ```python [(2, 2, 3, 3), (6, 6, 7, 7)] ``` Generate and return the list of intersecting rectangles fulfilling the specified conditions.","solution":"def find_intersection(rectangles1, rectangles2): Finds the intersection rectangle(s) between two sets of rectangles. Each rectangle is defined by its bottom-left and top-right coordinates. Parameters: rectangles1: List of tuples representing rectangles in the first set. rectangles2: List of tuples representing rectangles in the second set. Returns: A list of tuples representing intersecting rectangles. # Helper function to find the intersection of two rectangles def intersection(rect1, rect2): x_left = max(rect1[0], rect2[0]) y_bottom = max(rect1[1], rect2[1]) x_right = min(rect1[2], rect2[2]) y_top = min(rect1[3], rect2[3]) if x_left < x_right and y_bottom < y_top: return (x_left, y_bottom, x_right, y_top) else: return None intersecting_rectangles = [] for r1 in rectangles1: for r2 in rectangles2: intersect_rect = intersection(r1, r2) if intersect_rect: intersecting_rectangles.append(intersect_rect) return intersecting_rectangles"},{"question":"You are given an implementation of a priority queue using a binary heap. Your task is to implement a function called `merge_priority_queues` that merges two given priority queues into one. The function should follow this signature: ```python def merge_priority_queues(pq1: list, pq2: list) -> list: Merges two priority queues into one priority queue using binary heap properties. Parameters: pq1 (list): The first input priority queue represented as a binary heap (min-heap). pq2 (list): The second input priority queue represented as a binary heap (min-heap). Returns: list: A merged priority queue represented as a binary heap (min-heap). ``` You are required to use the following libraries and their respective functions: - `heapq.heapify` from heapq: This function will be used to transform a list into a heap in-place. - `heapq.heappop` from heapq: This function will be used to pop the smallest element from the heap. - `heapq.heappush` from heapq: This function will be used to push an element into the heap while maintaining heap properties. First, merge both priority queues into a single list. Then, convert this list into a valid binary heap ensuring the min-heap property is maintained. Here\'s a small hint: - After merging the two lists, you can use `heapq.heapify` to transform the merged list into a min-heap. # Example: ```python pq1 = [1, 3, 5] pq2 = [2, 4, 6] merged_pq = merge_priority_queues(pq1, pq2) print(merged_pq) # Output: [1, 2, 3, 4, 5, 6] ```","solution":"import heapq def merge_priority_queues(pq1: list, pq2: list) -> list: Merges two priority queues into one priority queue using binary heap properties. Parameters: pq1 (list): The first input priority queue represented as a binary heap (min-heap). pq2 (list): The second input priority queue represented as a binary heap (min-heap). Returns: list: A merged priority queue represented as a binary heap (min-heap). merged_list = pq1 + pq2 heapq.heapify(merged_list) return merged_list"},{"question":"You are tasked with implementing a function that calculates the Fibonacci sequence up to a given number of terms using an iterative approach. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The definition is as follows: [ text{Fib}(0) = 0, text{Fib}(1) = 1 ] [ text{Fib}(n) = text{Fib}(n-1) + text{Fib}(n-2) text{ for } n geq 2 ] Your function should generate a list containing the first `n` terms of the Fibonacci sequence. Function Signature: ```python def fibonacci_sequence(n): # implementation here ``` Parameters: - `n` (int): The number of terms to generate in the Fibonacci sequence. Must be a non-negative integer. Returns: - `list`: A list of the first `n` terms in the Fibonacci sequence. Example: ```python fib_5 = fibonacci_sequence(5) print(fib_5) ``` Output: ```python [0, 1, 1, 2, 3] ``` In this example, the function generates the first 5 terms of the Fibonacci sequence. If `n` is 0, the function should return an empty list. If `n` is 1, the function should return a list containing only `[0]`.","solution":"def fibonacci_sequence(n): Generate the first n terms of the Fibonacci sequence. :param n: Number of terms to generate, must be a non-negative integer :type n: int :return: List of the first n terms of the Fibonacci sequence :rtype: list if n <= 0: return [] elif n == 1: return [0] fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"You are required to create a function named `process_sales_data` that takes a list of sales records as its parameter. Each sales record is a tuple consisting of the following fields: `order_id`, `product_id`, `quantity_sold`, and `sale_amount`. The function should perform the following operations: 1. Calculate and return the total sale amount across all records. 2. Return a dictionary where each key is a `product_id` and the value is the total `quantity_sold` for that product. 3. Return a list of `order_id`s for which the `sale_amount` is greater than the average `sale_amount` of all records. **Requirements**: - Use basic list, dictionary operations, and basic arithmetic to solve the problem. - Do not use any external libraries such as `pandas`. **Function Signature**: ```python from typing import List, Tuple, Dict def process_sales_data(sales_records: List[Tuple[int, int, int, float]]) -> Tuple[float, Dict[int, int], List[int]]: pass ```","solution":"from typing import List, Tuple, Dict def process_sales_data(sales_records: List[Tuple[int, int, int, float]]) -> Tuple[float, Dict[int, int], List[int]]: total_sale_amount = 0.0 product_quantity_sold = {} sale_amounts = [] # Calculating total sale amount and product_quantity_sold for order_id, product_id, quantity_sold, sale_amount in sales_records: total_sale_amount += sale_amount if product_id in product_quantity_sold: product_quantity_sold[product_id] += quantity_sold else: product_quantity_sold[product_id] = quantity_sold sale_amounts.append((order_id, sale_amount)) # Calculating average sale amount average_sale_amount = total_sale_amount / len(sales_records) if sales_records else 0.0 # Getting order_ids with sale_amount greater than average_sale_amount above_average_order_ids = [order_id for order_id, sale_amount in sale_amounts if sale_amount > average_sale_amount] return total_sale_amount, product_quantity_sold, above_average_order_ids"},{"question":"You are required to write a Python function named `parse_and_combine_csv(data_list)` that processes a list of URLs pointing to CSV files and combines them into a single DataFrame while performing specific data processing tasks. Here\'s what your function should accomplish: 1. **Download and Read CSV Files**: - The function takes a list of URLs pointing to CSV files. - Use `requests` to download each CSV file. - Read each CSV file into a pandas DataFrame. 2. **Data Processing**: - Ensure that all DataFrames have identical columns. - Concatenate the DataFrames into a single DataFrame. 3. **Save Combined DataFrame**: - Save the resulting DataFrame as `combined_data.csv` in the current working directory. - Print \\"Data Combined and Saved\\". Below is the function signature for reference: ```python import pandas as pd import requests import io def parse_and_combine_csv(data_list): pass ```","solution":"import pandas as pd import requests import io def parse_and_combine_csv(data_list): Downloads, combines and processes CSV files from given URLs. The final combined DataFrame is saved to \'combined_data.csv\'. Parameters: data_list (list): List of URLs pointing to CSV files. dataframes = [] for url in data_list: response = requests.get(url) response.raise_for_status() # Raise an error for bad status codes csv_bytes = io.BytesIO(response.content) df = pd.read_csv(csv_bytes) dataframes.append(df) combined_df = pd.concat(dataframes, ignore_index=True) combined_df.to_csv(\'combined_data.csv\', index=False) print(\\"Data Combined and Saved\\")"},{"question":"Implement a function that, given a list of words, identifies all the words that can be typed using letters of only one row of a standard QWERTY keyboard. The keyboard rows are as follows: - Row 1: \\"qwertyuiop\\" - Row 2: \\"asdfghjkl\\" - Row 3: \\"zxcvbnm\\" The function signature is `find_words_in_one_row(words)`, where `words` is a list of strings, each representing a word. The function should return a list containing all the words that can be typed using letters of only one row. # Example If `words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"]`, then calling `find_words_in_one_row(words)` should return `[\\"Alaska\\", \\"Dad\\"]`. # Constraints: - Each word in the input list `words` will consist of alphabetic characters only. - The function should be case-insensitive, meaning that it should treat \'a\' and \'A\' as the same character. # Requirements: - Ensure the function is case-insensitive. - Optimize the function for efficiency in both time and space complexities. Here is a skeleton to help you get started: ```python def find_words_in_one_row(words): row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") def can_be_typed_with_one_row(word): w_set = set(word.lower()) return w_set <= row1 or w_set <= row2 or w_set <= row3 return [word for word in words if can_be_typed_with_one_row(word)] # Example usage: # words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] # print(find_words_in_one_row(words)) # Output should be: [\\"Alaska\\", \\"Dad\\"] ```","solution":"def find_words_in_one_row(words): Identifies words that can be typed using only one row of a standard QWERTY keyboard. :param words: list of words to check :return: list of words that can be typed using only one row row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") def can_be_typed_with_one_row(word): w_set = set(word.lower()) return w_set <= row1 or w_set <= row2 or w_set <= row3 return [word for word in words if can_be_typed_with_one_row(word)] # Example usage: # words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] # print(find_words_in_one_row(words)) # Output should be: [\\"Alaska\\", \\"Dad\\"]"},{"question":"Write a function to perform k-means clustering using the Euclidean distance metric. K-means clustering is a method of vector quantization that is popular for cluster analysis in data mining. The objective of k-means clustering is to partition `n` observations into `k` clusters in which each observation belongs to the cluster with the nearest mean (centroid), serving as a prototype of the cluster. Your task is to implement a function `k_means_cluster(points, k, num_iterations)` that performs k-means clustering on a given set of points. # Function Signature ```python def k_means_cluster(points, k, num_iterations): pass ``` # Parameters - `points` (numpy.ndarray): A 2D numpy array of shape (n, m) representing `n` points in an `m`-dimensional space. - `k` (int): The number of clusters. - `num_iterations` (int): The number of iterations to run the k-means algorithm. # Returns - `numpy.ndarray`: A 1D numpy array of size `n`, where the `i`-th element is the cluster index (0 to `k-1`) of the `i`-th point. # Constraints - `n` will be at most 500. - `m` will be at most 50. - Use the Euclidean distance metric. # Example ```python import numpy as np points = np.array([ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0] ]) k = 2 num_iterations = 10 result = k_means_cluster(points, k, num_iterations) print(result) # Expected output might be: array([0, 0, 1, 1, 0, 1]) ``` # Additional Notes - Initialize the centroids by randomly selecting `k` points from the given `points`. - Recompute the centroids as the mean of all points assigned to each cluster in every iteration. - The output clusters may vary slightly as they depend on the initial random selection of centroids.","solution":"import numpy as np def k_means_cluster(points, k, num_iterations): Perform k-means clustering using the Euclidean distance metric. Parameters: points (numpy.ndarray): A 2D numpy array of shape (n, m) representing n points in an m-dimensional space. k (int): The number of clusters. num_iterations (int): The number of iterations to run the k-means algorithm. Returns: numpy.ndarray: A 1D numpy array of size n, where the i-th element is the cluster index (0 to k-1) of the i-th point. n, m = points.shape # Randomly initialize centroids by selecting k random points from the dataset centroids = points[np.random.choice(n, k, replace=False)] cluster_assignments = np.zeros(n, dtype=int) for _ in range(num_iterations): # Assign points to nearest centroid for i in range(n): distances = np.linalg.norm(points[i] - centroids, axis=1) cluster_assignments[i] = np.argmin(distances) # Update centroids for j in range(k): cluster_points = points[cluster_assignments == j] if len(cluster_points) > 0: centroids[j] = np.mean(cluster_points, axis=0) return cluster_assignments"},{"question":"**Background**: You work for a company that organizes virtual events. Each event has multiple sessions, and each session is represented by a start and end time. The goal is to ensure no sessions overlap so that attendees can participate in all sessions without any conflicts. **Goal**: Write a function named `find_non_overlapping_sessions` that takes a list of session tuples. Each tuple contains two string elements: the start time and the end time of a session, in \\"HH:MM\\" 24-hour format. The function should return a list of non-overlapping sessions, maximizing the number of sessions attended. If multiple solutions exist, any one is acceptable. **Function Signature**: ```python def find_non_overlapping_sessions(sessions: List[Tuple[str, str]]) -> List[Tuple[str, str]]: ``` **Instructions**: 1. Convert the start and end times to integers representing minutes since the start of the day. 2. Sort the sessions by their end times to use a greedy algorithm efficiently. 3. Iterate through the sorted list and keep track of the end time of the last attended session. 4. Select a session if its start time is not overlapping with the end time of the last attended session. 5. Return the list of selected sessions. **Example Usage**: ```python sessions = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"10:00\\", \\"11:30\\"), (\\"13:00\\", \\"14:00\\"), (\\"12:30\\", \\"13:30\\")] result = find_non_overlapping_sessions(sessions) print(result) ``` This should print a list of non-overlapping sessions, sorted by their end times. **Example Output**: ```python [(\'09:00\', \'10:30\'), (\'11:00\', \'12:00\'), (\'13:00\', \'14:00\')] ``` Each session tuple contains the starting and ending times of the selected non-overlapping sessions.","solution":"from typing import List, Tuple def find_non_overlapping_sessions(sessions: List[Tuple[str, str]]) -> List[Tuple[str, str]]: def to_minutes(time_str: str) -> int: Converts a HH:MM time string to the number of minutes since the start of the day. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes # Convert sessions to a list of tuples with start and end times in minutes. sessions_in_minutes = [(to_minutes(start), to_minutes(end)) for start, end in sessions] # Sort sessions by their end times. sessions_in_minutes.sort(key=lambda x: x[1]) # List to hold the selected non-overlapping sessions. selected_sessions = [] last_end_time = -1 for start, end in sessions_in_minutes: if start >= last_end_time: # Convert back to HH:MM format before adding to selected_sessions. start_str = f\\"{start//60:02}:{start%60:02}\\" end_str = f\\"{end//60:02}:{end%60:02}\\" selected_sessions.append((start_str, end_str)) last_end_time = end return selected_sessions"},{"question":"# Problem Context: Given a list of strings, you are tasked with determining the string that, when transformed by reversing the characters, appears the highest number of times in the original list. If there is a tie, return the string that appears first in the list. # Task: Write a function `most_frequent_reversed_string(strings)` that: 1. Accepts a list of strings `strings`. 2. Transforms each string in the list by reversing its characters. 3. Determines which reversed string appears most frequently in the original list. 4. Returns the most frequently appearing reversed string. If there is a tie, return the string that appears first in the original list. # Function Signature: ```python def most_frequent_reversed_string(strings): ``` # Input: - `strings` (List[str]): A list of strings. # Output: - The most frequently appearing reversed string (str). # Examples: ```python strings1 = [\\"abc\\", \\"cba\\", \\"bac\\", \\"cab\\", \\"abc\\", \\"cba\\"] # \\"abc\\" reversed is \\"cba\\" which appears 2 times # \\"cba\\" reversed is \\"abc\\" which appears 2 times # \\"bac\\" reversed is \\"cab\\" which appears 1 time # Most frequent reversed strings are \\"abc\\" and \\"cba\\", \\"abc\\" appears first in the list # so the function should return \\"abc\\" print(most_frequent_reversed_string(strings1)) # Output: \\"abc\\" strings2 = [\\"hello\\", \\"world\\", \\"olleh\\", \\"dlrow\\", \\"hello\\"] # \\"hello\\" reversed is \\"olleh\\" which appears 1 time # \\"olleh\\" reversed is \\"hello\\" which appears 2 times # Most frequent reversed string is \\"hello\\" print(most_frequent_reversed_string(strings2)) # Output: \\"hello\\" strings3 = [\\"test\\", \\"sett\\", \\"tset\\", \\"etts\\", \\"test\\", \\"sett\\"] # \\"test\\" reversed is \\"tset\\" which appears 1 time # \\"tset\\" reversed is \\"test\\" which appears 2 times # \\"sett\\" reversed is \\"ttse\\" which does not appear # \\"etts\\" reversed is \\"stte\\" which does not appear # Most frequent reversed strings are \\"test\\" and \\"tset\\", \\"test\\" appears first in the list # so the function should return \\"test\\" print(most_frequent_reversed_string(strings3)) # Output: \\"test\\" ``` Ensure your function is efficient and easy to understand. Provide proper comments explaining each step inside your function.","solution":"def most_frequent_reversed_string(strings): Determines the string that, when reversed, appears most frequently in the original list. If there\'s a tie, the string that appears first in the list is returned. Args: strings (List[str]): A list of strings. Returns: str: The string whose reverse appears most frequently in the list. reversed_count = {} max_count = 0 max_string = None for s in strings: reversed_s = s[::-1] if reversed_s in reversed_count: reversed_count[reversed_s] += 1 else: reversed_count[reversed_s] = 1 if (reversed_count[reversed_s] > max_count or (reversed_count[reversed_s] == max_count and max_string is None)): max_count = reversed_count[reversed_s] max_string = reversed_s for s in strings: if s[::-1] == max_string: return s # return None explicitly if unable to determine, it shouldn\'t normally hit here since `strings` is not empty return None"},{"question":"In this problem, you are tasked with creating a function `generate_multiplication_table` that generates a multiplication table for a given number and prints it in a formatted manner. The function should display the multiplication table from 1 to 10. # Function Signature ```python def generate_multiplication_table(number: int): pass ``` # Requirements 1. **number (int):** The base number for which the multiplication table is to be generated. # Example Usage ```python generate_multiplication_table(5) ``` The above usage should display the multiplication table for 5 as follows: ``` 5 x 1 = 5 5 x 2 = 10 5 x 3 = 15 5 x 4 = 20 5 x 5 = 25 5 x 6 = 30 5 x 7 = 35 5 x 8 = 40 5 x 9 = 45 5 x 10 = 50 ``` # Additional Notes - Ensure that the output is neatly formatted, with each line showing the multiplication operation and result. - Handle cases where the input number is zero or negative as per typical behavior of multiplication tables.","solution":"def generate_multiplication_table(number: int): Prints the multiplication table for the given number from 1 to 10. for i in range(1, 11): print(f\\"{number} x {i} = {number * i}\\")"},{"question":"You are required to write a function named `calculate_median_temperature` that takes a list of dictionaries as input and calculates the median temperature from the data. Each dictionary in the list represents a temperature reading at a specific time. - Each dictionary contains two keys: `time` and `temperature`. - `time` is a datetime string. - `temperature` is a floating-point number representing the temperature reading at that time. The structure of the list of dictionaries is as follows: ```python readings = [ {\\"time\\": \\"2023-01-01T00:00:00Z\\", \\"temperature\\": 25.3}, {\\"time\\": \\"2023-01-02T00:00:00Z\\", \\"temperature\\": 26.7}, ... ] ``` Your function should: 1. Extract the `temperature` values from the list of dictionaries. 2. Calculate the median temperature using the `statistics.median` function. # Function Signature: ```python def calculate_median_temperature(readings: List[Dict[str, Any]]) -> float: ``` # Example: ```python readings = [ {\\"time\\": \\"2023-01-01T00:00:00Z\\", \\"temperature\\": 25.3}, {\\"time\\": \\"2023-01-02T00:00:00Z\\", \\"temperature\\": 26.7}, {\\"time\\": \\"2023-01-03T00:00:00Z\\", \\"temperature\\": 24.9} ] median_temp = calculate_median_temperature(readings) print(median_temp) ``` Expected Output: ``` 25.3 ``` You must use the `statistics.median` function from the `statistics` library to ensure proper calculation of the median. # Requirements: - You need to import the necessary library, `statistics`, to calculate the median. - The `statistics.median` function must be used for calculating the median temperature.","solution":"from typing import List, Dict, Any import statistics def calculate_median_temperature(readings: List[Dict[str, Any]]) -> float: Calculate the median temperature from a list of temperature readings. :param readings: List of dictionaries with keys \'time\' and \'temperature\'. :return: The median temperature as a float. temperatures = [reading[\'temperature\'] for reading in readings] median_temperature = statistics.median(temperatures) return median_temperature"},{"question":"In this problem, you are to implement a basic task management system to help users track their daily tasks. Your task is to write a class named `TaskManager` that provides functionalities to add, remove, and list tasks. Each task in the system has a unique identifier, a description, and a status indicating whether it is completed or not. # Class Definition: The `TaskManager` class should include the following methods: 1. **`add_task(description: str) -> int`**: Adds a new task to the system with the given description. The status of the task should be initially set to not completed. Returns the unique identifier of the added task. 2. **`remove_task(task_id: int) -> bool`**: Removes the task with the given identifier from the system. Returns `True` if the task was successfully removed, or `False` if no task was found with the given identifier. 3. **`complete_task(task_id: int) -> bool`**: Marks the task with the given identifier as completed. Returns `True` if the task was successfully marked as completed, or `False` if no task was found with the given identifier. 4. **`list_tasks() -> list`**: Returns a list of all tasks in the system, where each task is represented as a tuple `(task_id, description, status)`. The `status` should be a boolean value indicating whether the task is completed. The `task_id` should be an auto-incremented integer starting from 1. # Example Usage: ```python task_manager = TaskManager() task_id1 = task_manager.add_task(\\"Fix the bug in the code\\") task_id2 = task_manager.add_task(\\"Write unit tests\\") task_manager.complete_task(task_id1) tasks = task_manager.list_tasks() # tasks should contain [(1, \\"Fix the bug in the code\\", True), (2, \\"Write unit tests\\", False)] print(tasks) # Output: [(1, \\"Fix the bug in the code\\", True), (2, \\"Write unit tests\\", False)] task_manager.remove_task(task_id2) tasks = task_manager.list_tasks() # tasks should contain [(1, \\"Fix the bug in the code\\", True)] print(tasks) # Output: [(1, \\"Fix the bug in the code\\", True)] ``` # Notes: - Ensure that task identifiers are unique and auto-incremented. - A detailed implementation is not required; focus on conceptual clarity. ```python class TaskManager: def __init__(self): self.tasks = {} self.next_id = 1 def add_task(self, description: str) -> int: task_id = self.next_id self.tasks[task_id] = {\\"description\\": description, \\"completed\\": False} self.next_id += 1 return task_id def remove_task(self, task_id: int) -> bool: if task_id in self.tasks: del self.tasks[task_id] return True return False def complete_task(self, task_id: int) -> bool: if task_id in self.tasks: self.tasks[task_id][\\"completed\\"] = True return True return False def list_tasks(self) -> list: return [(task_id, info[\\"description\\"], info[\\"completed\\"]) for task_id, info in self.tasks.items()] ```","solution":"class TaskManager: def __init__(self): self.tasks = {} self.next_id = 1 def add_task(self, description: str) -> int: task_id = self.next_id self.tasks[task_id] = {\\"description\\": description, \\"completed\\": False} self.next_id += 1 return task_id def remove_task(self, task_id: int) -> bool: if task_id in self.tasks: del self.tasks[task_id] return True return False def complete_task(self, task_id: int) -> bool: if task_id in self.tasks: self.tasks[task_id][\\"completed\\"] = True return True return False def list_tasks(self) -> list: return [(task_id, info[\\"description\\"], info[\\"completed\\"]) for task_id, info in self.tasks.items()]"},{"question":"You are designing a basic command-line utility using Python that interacts with a file system. The objective of this exercise is to practice reading and writing files and handling basic file operations in Python. Your task is to implement a function named `write_and_read_file` that performs the following steps: 1. Writes a given string to a specified file. 2. Reads the content of the same file back into memory. 3. Returns the content read from the file. More specifically: - The function `write_and_read_file` should take two arguments: `filename` (a string representing the name of the file) and `content` (a string to be written to the file). - It should open the file in write mode, write the `content` to the file, and then close the file. - It should then open the same file in read mode, read the entire content, and return this content as a string. Below is an example of how your function is expected to be structured: ```python def write_and_read_file(filename, content): Write the given content to the specified file and read it back :param filename: Name of the file to write and read :param content: String content to write to the file :return: Content read from the file # Your code goes here ``` You can assume the file operations succeed without the need for advanced error handling. The primary goal of this exercise is to practice file read and write operations in Python.","solution":"def write_and_read_file(filename, content): Write the given content to the specified file and read it back :param filename: Name of the file to write and read :param content: String content to write to the file :return: Content read from the file with open(filename, \'w\') as f: f.write(content) with open(filename, \'r\') as f: read_content = f.read() return read_content"},{"question":"Sort a list of words based on their frequency in the text. You need to write a function that counts the frequency of each word in a given string and then returns a list of words sorted by their frequency in descending order. In case of a tie, words should appear in alphabetical order. The function should return: ``` list: A list of words sorted by their frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. You should write self-contained code starting with: ``` from collections import Counter def sort_words_by_frequency(text): ```","solution":"from collections import Counter def sort_words_by_frequency(text): Counts the frequency of each word in the given text and returns a list of words sorted by their frequency in descending order. In case of a tie, words are sorted alphabetically. :param text: A string of words :return: A list of words sorted by frequency and then alphabetically. words = text.split() word_count = Counter(words) sorted_words = sorted(word_count, key=lambda word: (-word_count[word], word)) return sorted_words"},{"question":"Implement a function named `generateParenthesis` that takes an integer `n` and returns all possible combinations of well-formed parentheses that consist of `n` pairs. A well-formed parentheses string is defined as follows: - An empty string `\\"\\"` is well-formed. - If `A` and `B` are well-formed, then `AB` (concatenation of `A` and `B`) is well-formed. - If `A` is well-formed, then `(A)` is well-formed. The function should generate only combinations where the parentheses are balanced and properly nested. **Constraints**: - The input integer `n` is in the range `1` to `12`. **Example**: ```python n = 3 expected_output = [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] n = 1 expected_output = [ \\"()\\" ] ``` **Function Signature**: ```python def generateParenthesis(n: int) -> List[str]: ``` You can test your solution with: ```python print(generateParenthesis(3)) # Should print: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] print(generateParenthesis(1)) # Should print: [\\"()\\"] ```","solution":"from typing import List def generateParenthesis(n: int) -> List[str]: Generates all combinations of well-formed parentheses consisting of `n` pairs. def backtrack(current: str, open_count: int, close_count: int): if len(current) == n * 2: result.append(current) return if open_count < n: backtrack(current + \\"(\\", open_count + 1, close_count) if close_count < open_count: backtrack(current + \\")\\", open_count, close_count + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"You are tasked with implementing a function that checks if a linked list has a cycle. A linked list is said to have a cycle if there is some node in the list that can be reached again by continuously following the next pointer. Implement a function that determines if the linked list has a cycle in it. Function Name: `has_cycle` Parameters: - `head` (ListNode): The head node of the linked list. Description: 1. Implement the function using Floyd’s Cycle-Finding Algorithm, also known as the Tortoise and Hare algorithm. 2. Traverse the linked list using two pointers, one moving faster (the hare) and one moving slower (the tortoise). 3. If the fast pointer encounters the slow pointer at any point, a cycle exists. 4. If the fast pointer reaches the end of the list without encountering the slow pointer, no cycle exists. Return: - `True` if the linked list has a cycle. - `False` if the linked list does not have a cycle. The ListNode class is defined as follows: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` The function should efficiently detect cycles in the linked list by leveraging the fast and slow pointer technique.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Function to detect a cycle in a linked list using Floyd\'s Cycle-Finding Algorithm. Parameters: head (ListNode): The head node of the linked list. Returns: bool: True if the linked list has a cycle, False otherwise. if not head or not head.next: return False slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"**Maximal Rectangle in Binary Matrix** Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area. The rectangle must be aligned with the matrix axes, meaning it should be formed by contiguous rows and columns. Write a function `maximal_rectangle` that takes a binary matrix as its parameter and computes the area of the largest rectangular sub-matrix that contains all 1’s. To solve this problem, consider implementing a dynamic programming solution or leveraging the concept of largest rectangle in histograms for each row in the matrix. **Function Signature:** ```python def maximal_rectangle(matrix: List[List[int]]) -> int: ``` **Example:** ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] print(maximal_rectangle(matrix)) # Outputs: 6 ``` **Explanation:** The largest rectangle containing all 1\'s is from (2,1) to (2,4), with area 6.","solution":"from typing import List def maximal_rectangle(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 def largest_histogram_area(heights: List[int]) -> int: stack = [] max_area = 0 for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] >= h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area max_rectangle = 0 heights = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 max_rectangle = max(max_rectangle, largest_histogram_area(heights)) return max_rectangle"},{"question":"You are asked to implement a function named `closestPair` that finds the closest pair of points in a 2D Cartesian coordinate system from a given list of points. The function should be defined as follows: ```python def closestPair(points): ... ``` - **Parameters**: - `points` (List[Tuple[float, float]]): a list of tuples, where each tuple represents the x and y coordinates of a point in the 2D plane. - **Returns**: - A tuple containing: - The pair of points (Tuple[float, float], Tuple[float, float]) that are the closest to each other. - The distance (float) between these two points. To facilitate this functionality, you can use the following Python Math Library function: - `math.sqrt`: Return the square root of a number. You can assume that the list will contain at least two points and that all points are distinct. # Input - `points = [(2.0, 3.0), (4.0, 4.0), (1.0, 2.0), (7.0, 8.0)]` # Output - `((2.0, 3.0), (1.0, 2.0), 1.4142135623730951)` This corresponds to the closest pair of points being `(2.0, 3.0)` and `(1.0, 2.0)`, with the distance between them being approximately `1.414`. # Example Test Cases 1. `closestPair([(1.0, 1.0), (2.0, 2.0), (5.0, 5.0)])` should return `((1.0, 1.0), (2.0, 2.0), 1.4142135623730951)`. 2. `closestPair([(1.0, 2.0), (1.0, 3.0), (4.0, 4.0), (5.0, 5.0)])` should return `((1.0, 2.0), (1.0, 3.0), 1.0)`. Your implementation should correctly compute the closest pair of points and their distance for any given list of points.","solution":"import math from itertools import combinations def closestPair(points): def euclidean_distance(point1, point2): return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) min_distance = float(\'inf\') closest_points = None for point1, point2 in combinations(points, 2): distance = euclidean_distance(point1, point2) if distance < min_distance: min_distance = distance closest_points = (point1, point2) return closest_points + (min_distance,)"},{"question":"Write a function that generates n random points from a Gaussian (normal) distribution using NumPy, calculates the kernel density estimation (KDE) using Scipy, and plots both the KDE and a histogram of the generated data points using Matplotlib. The function should output: np.array: The array of generated data points from the Gaussian distribution. Axes: A matplotlib Axes object showing the KDE plot overlaid with the generated data points\' histogram. The histogram is plotted with density set to True, alpha set to 0.5, and bins set to \'auto\' for automatic bin selection. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from scipy.stats import gaussian_kde def task_func(n, mean=0, stddev=1): ```","solution":"import numpy as np import matplotlib.pyplot as plt from scipy.stats import gaussian_kde def task_func(n, mean=0, stddev=1): Generates n random points from a Gaussian distribution with specified mean and standard deviation, calculates the Gaussian KDE, and plots both the KDE and histogram. Parameters: n (int): Number of points to generate mean (float): Mean of the Gaussian distribution stddev (float): Standard deviation of the Gaussian distribution Returns: np.array: Array of generated data points matplotlib.axes.Axes: Matplotlib Axes object containing the KDE plot overlaid with the histogram # Generate n random points from Gaussian distribution data_points = np.random.normal(loc=mean, scale=stddev, size=n) # Calculate KDE kde = gaussian_kde(data_points) # Create a range of values for plotting the KDE x_values = np.linspace(min(data_points), max(data_points), 1000) kde_values = kde(x_values) # Create the plot fig, ax = plt.subplots() ax.hist(data_points, density=True, alpha=0.5, bins=\'auto\') ax.plot(x_values, kde_values, color=\'blue\') return data_points, ax"},{"question":"You are tasked with writing a Python function named `two_sum()` that finds two distinct numbers in a list that add up to a specified target sum. The function should return the indices of the two numbers in a tuple. If there are multiple pairs, return the pair with the smallest indices. If no such pair exists, return `None`. Requirements for your function: 1. The function should take in a list of integers and an integer target sum. 2. The function should return a tuple containing the indices of the two numbers that sum up to the target, with the lesser index first. 3. If no such pair exists, return `None`. **Function Signature:** ```python def two_sum(nums: list[int], target: int) -> tuple[int, int] or None: pass ``` **Example:** ```python print(two_sum([2, 7, 11, 15], 9)) # (0, 1) print(two_sum([3, 2, 4], 6)) # (1, 2) print(two_sum([3, 3], 6)) # (0, 1) print(two_sum([1, 2, 3], 7)) # None ``` Use the provided examples to verify your function. Make sure your implementation correctly identifies the indices of the two numbers that sum up to the target.","solution":"def two_sum(nums: list[int], target: int) -> tuple[int, int] or None: seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"You are tasked with creating a utility function for a virtual event management system. The function `get_attendee_summary` processes a list of dictionaries, each containing details of an attendee, and returns two lists: one containing the names of attendees who are adults (18 years and older), and another containing the names of minors (under 18). The function signature is as follows: ```python def get_attendee_summary(attendees): ``` # Parameters: - `attendees` (list): A list of dictionaries, where each dictionary has the following structure: ```python { \'name\': <string>, # Name of the attendee \'age\': <int> # Age of the attendee } ``` # Requirements: - You must use list comprehensions to extract and categorize attendees based on their age. - Ensure the function is efficient and concise. # Objective: Implement the function `get_attendee_summary` that returns two lists: 1. `adults`: List of names of attendees who are 18 years old or older. 2. `minors`: List of names of attendees who are younger than 18 years old. # Example: Assume the function call is as follows: ```python attendees = [ {\'name\': \'Alice\', \'age\': 25}, {\'name\': \'Bob\', \'age\': 17}, {\'name\': \'Charlie\', \'age\': 19}, {\'name\': \'David\', \'age\': 15} ] ``` Calling `get_attendee_summary(attendees)` should return: ```python ([\'Alice\', \'Charlie\'], [\'Bob\', \'David\']) ``` In this example, `Alice` and `Charlie` are adults, while `Bob` and `David` are minors.","solution":"def get_attendee_summary(attendees): Returns two lists of names: one for attendees who are adults (18 and older) and another for minors (under 18). Parameters: attendees (list): List of dictionaries, where each dictionary contains \'name\' (string) and \'age\' (int) of an attendee. Returns: tuple: A tuple containing two lists - adults and minors. adults = [attendee[\'name\'] for attendee in attendees if attendee[\'age\'] >= 18] minors = [attendee[\'name\'] for attendee in attendees if attendee[\'age\'] < 18] return (adults, minors)"},{"question":"Design and implement a function that simulates a basic ATM withdrawal process. The function will determine the number of each denomination (bills) to dispense for a given withdrawal amount while ensuring the total is minimized. Assume the ATM only has 100, 50, 20, 10, 5, and 1 bills. Function Signature: ```python def atm_withdrawal(amount): ``` Parameters: - `amount` (int): The withdrawal amount in dollars. Returns: - `dict`: A dictionary where the keys are the bill denominations and the values are the count of each denomination required to meet the withdrawal amount. Instructions: - Your function should minimize the number of bills dispensed. - The function should handle edge cases where the amount is zero or negative by raising an appropriate exception. Example: ```python print(atm_withdrawal(286)) # Output should be: # {100: 2, 50: 1, 20: 1, 10: 1, 5: 1, 1: 1} print(atm_withdrawal(123)) # Output should be: # {100: 1, 20: 1, 1: 3 } print(atm_withdrawal(0)) # Output should be: # ValueError: Withdrawal amount must be positive ``` In this problem, you need to iterate through the denominations in descending order, determining the number of each bill needed by using integer division, and update the amount remaining accordingly.","solution":"def atm_withdrawal(amount): Calculate the number of each bill denomination to dispense for a given withdrawal amount. Parameters: - amount (int): The withdrawal amount in dollars. Returns: - dict: A dictionary where the keys are the bill denominations and the values are the count of each denomination required to meet the withdrawal amount. Raises: - ValueError: If the amount is zero or negative. if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") denominations = [100, 50, 20, 10, 5, 1] result = {} for bill in denominations: count = amount // bill if count > 0: result[bill] = count amount %= bill return result"},{"question":"You are required to create a function `draw_hexagon()`, which utilizes the `turtle` library to draw a regular hexagon. A regular hexagon is a geometric figure with six equal sides and internal angles of 120 degrees. **Requirements:** - The function should initialize a turtle, and then use it to draw a hexagon. - The turtle should move forward by 100 units for each side of the hexagon. - The turtle should turn left by 60 degrees after drawing each side. You **must** use the `turtle.forward` and `turtle.left` functions from the `turtle` library within your implementation to move the turtle and create the desired figure. **Instructions to Write the Function:** 1. Import the `turtle` module. 2. Create a new turtle object. 3. Use a loop to draw the six sides of the hexagon. 4. Use the `turtle.forward` function to move the turtle forward by 100 units. 5. Use the `turtle.left` function to turn the turtle by 60 degrees to form the angles of the hexagon. 6. Ensure the turtle window stays open until it is closed by the user. **Example Usage:** ```python draw_hexagon() ``` Upon calling this function, a window should appear displaying a regular hexagon.","solution":"import turtle def draw_hexagon(): Draws a regular hexagon using the turtle graphics module. Each side of the hexagon is 100 units long. hexagon_turtle = turtle.Turtle() for _ in range(6): hexagon_turtle.forward(100) hexagon_turtle.left(60) turtle.done()"},{"question":"A company needs to track the performance of their employees over various quarters of the year. They have a dataset which includes the performance ratings for different employees across multiple quarters. The goal is to write a function that calculates and displays the average performance rating for each employee across all quarters. Function Requirements: - The function should be named `calculate_average_performance`. - Input Parameters: - `data`: A pandas DataFrame containing the dataset. - The DataFrame will have a column \'Employee\' indicating the employee name. - There will be separate columns for each quarter, named \'Q1\', \'Q2\', \'Q3\', \'Q4\', containing the performance ratings (integers between 1 and 10) for that quarter. The function should return a new DataFrame with two columns: - \'Employee\': The employee name. - \'Average_Performance\': The average performance rating of the employee across all quarters. Example Dataset: | Employee | Q1 | Q2 | Q3 | Q4 | |------------|----|----|----|----| | John Doe | 7 | 8 | 9 | 6 | | Jane Smith | 6 | 5 | 8 | 7 | | Emma Jones | 9 | 10| 9 | 10| Task: Create the `calculate_average_performance` function and use it to calculate the average performance ratings from the above example dataset. The function should return a DataFrame that looks like this: | Employee | Average_Performance | |------------|---------------------| | John Doe | 7.5 | | Jane Smith | 6.5 | | Emma Jones | 9.5 |","solution":"import pandas as pd def calculate_average_performance(data): Calculates the average performance rating for each employee across all quarters. Parameters: data (pd.DataFrame): DataFrame containing \'Employee\', \'Q1\', \'Q2\', \'Q3\', \'Q4\' Returns: pd.DataFrame: DataFrame with \'Employee\' and \'Average_Performance\' # Calculate the average of Q1, Q2, Q3, Q4 for each employee data[\'Average_Performance\'] = data[[\'Q1\', \'Q2\', \'Q3\', \'Q4\']].mean(axis=1) # Return a dataframe with \'Employee\' and their \'Average_Performance\' return data[[\'Employee\', \'Average_Performance\']]"},{"question":"Design a function `longest_common_suffix(words: List[str]) -> str` that finds the longest common suffix (ending) among a list of strings. The function should return the longest suffix that appears at the end of each string in the list. If there is no common suffix, the function should return an empty string. **Function Signature:** ```python def longest_common_suffix(words: List[str]) -> str: ... ``` Example: ```python words1 = [\\"integration\\", \\"notation\\", \\"station\\"] words2 = [\\"apple\\", \\"banana\\", \\"cherry\\"] words3 = [\\"police\\", \\"ice\\", \\"ice\\"] print(longest_common_suffix(words1)) # Expected Output: \\"ation\\" print(longest_common_suffix(words2)) # Expected Output: \\"\\" print(longest_common_suffix(words3)) # Expected Output: \\"ice\\" ``` **Constraints:** - The input list will contain between 1 and 100 strings. - Each string in the input list will have a length between 1 and 100 characters. - Only lowercase English letters (a-z) will be used in the strings. The function should be efficient in handling the concatenation and comparison operations to ensure it performs well within the given constraints. The task is designed to test your understanding of string manipulation, how to find common patterns in strings, and efficient algorithm designto compare suffixes.","solution":"from typing import List def longest_common_suffix(words: List[str]) -> str: if not words: return \\"\\" # Reverse all the words to work efficiently with common suffix as prefix reversed_words = [word[::-1] for word in words] # Initialize the common suffix to the reversed version of the first word common_suffix_reversed = reversed_words[0] for word in reversed_words[1:]: # Update the common suffix for each word new_common_suffix = [] for i in range(min(len(common_suffix_reversed), len(word))): if word[i] == common_suffix_reversed[i]: new_common_suffix.append(word[i]) else: break common_suffix_reversed = \'\'.join(new_common_suffix) # Reverse the result to get the correct suffix return common_suffix_reversed[::-1]"},{"question":"You are tasked with creating a Python function that processes and visualizes temperature data over time for different cities. This exercise involves reading data from a CSV file, performing data manipulation, and plotting the results to show temperature trends using specific plot characteristics. Your task is to write a Python function called `plot_temperature_trends` which achieves the following: 1. Read the temperature data from a CSV file using `pandas`. 2. Parse and convert any necessary data types. 3. Plot the temperature trends for specified cities over time using the `matplotlib` library. 4. Label the x-axis with time and the y-axis with temperature using `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel`. 5. Add appropriate titles, legends, and labels to the plots. 6. Include informative print statements about the data. Here is the signature of the function you need to implement: ```python def plot_temperature_trends(file_path, cities): pass ``` # Detailed Steps and Data: 1. **Reading and Parsing Data**: - Use `pandas.read_csv` to read data from the file at `file_path`. - Assume the CSV file has columns: `Date`, `City`, `Temperature`. - Convert the `Date` column to datetime format using `pandas.to_datetime`. 2. **Data Manipulation**: - Filter the dataset to include only rows where the `City` value matches any city in the given list `cities`. - Pivot the dataset such that each city\'s temperature over time is a separate column, with `Date` as the index. 3. **Plotting**: - For each city in `cities`, plot the temperature over time. - Use different colors and line styles for each city\'s trend. - Set the x-axis label to \\"Date\\" and the y-axis label to \\"Temperature (°C)\\". - Add a title to the plot such as \\"Temperature Trends Over Time\\". 4. **Print Statements**: - Print the first few rows of the filtered and processed data to verify correct manipulation. # Example Usage: ```python plot_temperature_trends(\'temperature_data.csv\', [\'New York\', \'Los Angeles\', \'Chicago\']) ``` # Assumptions: - The `temperature_data.csv` file is formatted as: ``` Date,City,Temperature 2023-01-01,New York,5 2023-01-01,Los Angeles,18 ... ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_temperature_trends(file_path, cities): Reads temperature data from a CSV file, processes it, and plots temperature trends over time for specified cities. :param file_path: str, path to the CSV file containing temperature data. :param cities: list of str, list of cities to plot temperature trends for. # Read the CSV file temp_data = pd.read_csv(file_path) # Convert Date column to datetime temp_data[\'Date\'] = pd.to_datetime(temp_data[\'Date\']) # Filter data for the specified cities filtered_data = temp_data[temp_data[\'City\'].isin(cities)] # Pivot the data to have dates as index and cities as columns pivoted_data = filtered_data.pivot(index=\'Date\', columns=\'City\', values=\'Temperature\') # Print the first few rows of the filtered and pivoted data print(\\"Filtered and Pivoted Data (first 5 rows):\\") print(pivoted_data.head()) # Plot the temperature trends plt.figure(figsize=(10, 6)) for city in cities: if city in pivoted_data.columns: plt.plot(pivoted_data.index, pivoted_data[city], label=city) plt.xlabel(\\"Date\\") plt.ylabel(\\"Temperature (°C)\\") plt.title(\\"Temperature Trends Over Time\\") plt.legend() plt.grid(True) plt.show()"},{"question":"Create a function named `sine_wave_plot_with_grid` that generates a plot of the sine function, `sin(x)`, over the interval ([0, 4pi]). The function should use the `matplotlib.pyplot.grid` function to add a grid to the plot. Set major grid lines using dashed lines and minor grid lines using dotted lines, with appropriate colors. You need to use the `numpy` and `matplotlib.pyplot` libraries for this task. The function should perform the following steps: 1. Create an array of 1000 evenly spaced values between 0 and (4pi) using `numpy.linspace`. 2. Compute the sine of these values using `numpy.sin`. 3. Plot these values using `matplotlib.pyplot.plot`. 4. Enable major and minor grid lines using `matplotlib.pyplot.grid`, setting appropriate linestyle and color for each. 5. Display the plot using `matplotlib.pyplot.show`. **Function Signature:** ```python def sine_wave_plot_with_grid(): pass ``` **Hint:** Refer to the `matplotlib.pyplot.grid` function documentation for options to customize the grid lines such as `which`, `color`, and `linestyle`.","solution":"import numpy as np import matplotlib.pyplot as plt def sine_wave_plot_with_grid(): Generates a plot of the sine function, sin(x), over the interval [0, 4π] with major and minor grid lines. # Create an array of 1000 evenly spaced values between 0 and 4π x = np.linspace(0, 4 * np.pi, 1000) # Compute the sine of these values y = np.sin(x) # Plot these values plt.plot(x, y) # Enable major grid lines (dashed, red) plt.grid(True, which=\'major\', linestyle=\'--\', color=\'red\') # Enable minor grid lines (dotted, blue) plt.minorticks_on() plt.grid(True, which=\'minor\', linestyle=\':\', color=\'blue\') # Display the plot plt.show()"},{"question":"In this problem, you\'ll be implementing a function `find_subsequence` that determines if a given string is a subsequence of another given string. A string `s` is a subsequence of a string `t` if `s` can be derived from `t` by deleting some characters of `t` without changing the order of the remaining characters. We provide you with the following pieces of information: - `s`: a string you need to check as a subsequence. - `t`: a string in which you need to check for the subsequence. The function should return `True` if `s` is a subsequence of `t`, and `False` otherwise. # Function Signature ```python def find_subsequence(s, t): Determines if the string `s` is a subsequence of the string `t`. Parameters: s (str): The string to check as a subsequence. t (str): The string to check against. Returns: bool: True if `s` is a subsequence of `t`, False otherwise. # Your code goes here ``` # Example ```python print(find_subsequence(\\"abc\\", \\"ahbgdc\\")) # True, as \\"abc\\" can be derived from \\"ahbgdc\\" by deleting \\"h\\", \\"g\\" and \\"d\\" print(find_subsequence(\\"axc\\", \\"ahbgdc\\")) # False, there is no \\"x\\" in \\"ahbgdc\\" ``` # Constraints - Both `s` and `t` will only contain lowercase English letters. - The length of `s` will not be more than 100. - The length of `t` will not be more than 10,000. Hints: - You can use a two-pointer approach to check if each character in `s` can be found sequentially in `t`. - Make sure your solution is efficient enough to handle the upper constraint limits.","solution":"def find_subsequence(s, t): Determines if the string `s` is a subsequence of the string `t`. Parameters: s (str): The string to check as a subsequence. t (str): The string to check against. Returns: bool: True if `s` is a subsequence of `t`, False otherwise. s_len, t_len = len(s), len(t) if s_len == 0: return True s_index, t_index = 0, 0 while t_index < t_len: if s[s_index] == t[t_index]: s_index += 1 if s_index == s_len: return True t_index += 1 return False"},{"question":"In this problem, you will write a function `sorted_merge` that merges two sorted lists of integers into a single sorted list, preserving the order. This is a common task in various sorting algorithms such as Merge Sort. Here is the detailed behavior of the `sorted_merge` function: 1. The function takes two parameters: - `list1`, a list of integers that is already sorted in ascending order. - `list2`, another list of integers that is already sorted in ascending order. 2. The function should merge `list1` and `list2` into a single list that is also sorted in ascending order without using any in-built sorting functions. # Function Signature ```python def sorted_merge(list1: list[int], list2: list[int]) -> list[int]: ``` # Example ```python sorted_merge([1,3,5,7], [2,4,6,8]) ``` This will return the merged and sorted list `[1, 2, 3, 4, 5, 6, 7, 8]`. # Requirements - You are not allowed to use any built-in sorting functions. - The input lists can be of different lengths. - Ensure the function runs in linear time complexity relative to the total number of elements in both lists. # Hints - Use two pointers technique to iterate through both lists simultaneously.","solution":"def sorted_merge(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Use two pointers to merge lists while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Your task is to write a Python function called `generate_missing_numbers` that finds all the missing numbers in a sequence of integers and returns them as a list. The function should work with a list of integers that may contain duplicates, and find the missing numbers in the range from the minimum value to the maximum value within the list. Here is a breakdown of the function: - **Function Name**: `generate_missing_numbers` - **Parameters**: - `numbers`: A list of integers which may contain duplicates. **The function should**: 1. Identify the minimum and maximum value in the `numbers` list. 2. Generate a sequence that includes all the integers from the minimum value to the maximum value. 3. Find and return a sorted list of the integers that are missing in the original `numbers` list. **Constraints**: - The input list `numbers` will have at least one integer. - The integers in the list can be both positive and negative. - The returned list of missing numbers should be sorted in ascending order. **Example**: ```python numbers = [1, 4, 7, 2, 6, 2, 4, 3] generate_missing_numbers(numbers) # Output: [5] ``` In the example above, the minimum value is 1 and the maximum value is 7. The complete sequence from 1 to 7 is [1, 2, 3, 4, 5, 6, 7], and the number 5 is missing from the input list.","solution":"def generate_missing_numbers(numbers): Finds and returns missing numbers in the sequence formed by the input list ranging from the minimum to maximum value. min_val = min(numbers) max_val = max(numbers) full_range = set(range(min_val, max_val + 1)) numbers_set = set(numbers) missing_numbers = sorted(list(full_range - numbers_set)) return missing_numbers"},{"question":"**Context:** Solving a Sudoku puzzle requires ensuring that every row, column, and 3x3 subgrid contains all the digits from 1 to 9. In this problem, our goal is to fill in the missing digits of a partially filled 9x9 Sudoku grid while maintaining these constraints. We\'ll implement a backtracking algorithm to find the solution. **Objective:** Write a function `solve_sudoku(board)` which takes a 9x9 grid as input and fills in the empty spaces to solve the Sudoku puzzle. The grid will be represented as a list of lists, where empty cells are denoted by zeros. **Function Signature:** ```python def solve_sudoku(board): ``` **Parameters:** 1. `board` (list of list of int): A partially filled 9x9 grid containing integers from 0 to 9, where 0 denotes an empty cell. **Return Value:** The function should modify the `board` in-place to represent a valid solution to the Sudoku puzzle. It does not return anything. **Approach:** 1. Use backtracking to try filling in each empty cell one by one. 2. Check the validity of the current board configuration after placing a digit. 3. If adding a number leads to a valid state, recursively attempt to solve the rest of the board. 4. If a configuration fails, backtrack and try a different number. 5. Continue this process until the entire board is correctly filled. **Constraints:** - The given board will be solvable. - The input board will always be a 9x9 grid. Here\'s an example input and output: **Example:** ```python input_board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solve_sudoku(input_board) output_board = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"def solve_sudoku(board): Solves a given 9x9 Sudoku puzzle board in-place. :param board: List[List[int]], the Sudoku board with zeros representing empty spaces. def is_valid(board, row, col, num): # Check if `num` is not in the current row, column and 3x3 subgrid for i in range(9): if board[row][i] == num or board[i][col] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): # Check numbers from 1 to 9 if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 # Backtrack return False return True solve()"},{"question":"You need to create a function named `plot_random_walks`, which employs the `matplotlib` library to visualize the random walks of different lengths. Specifically, your function should: - Generate 5 random walks of lengths 100, 200, 300, 400, and 500. - Plot these random walks on a single figure with subplots arranged in a 3x2 grid, where the central bottom subplot is left empty. - Use `numpy.random.normal` to generate the steps, assuming a normal distribution with mean 0 and standard deviation 1. - Accumulate these steps to depict the walk (i.e., each step depends on the previous step). - Title each subplot with the respective length of the walk. - Utilize different colors for each random walk to differentiate them. - Adjust the layout and display the final figure using `matplotlib.pyplot.show`. Here is the implementation guideline for your function: 1. Generate the steps for each random walk using `numpy.random.normal`. 2. Accumulate the steps to reflect the random walk. 3. Use a loop to create subplots and plot corresponding random walks. 4. Ensure each subplot is appropriately titled with the random walk length and uses distinct colors. 5. Leave the central bottom grid position blank. 6. Display the figure. Your task is to implement the function `plot_random_walks` as described. Hint: You might need to import `matplotlib.pyplot as plt` and `numpy as np`.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_random_walks(): lengths = [100, 200, 300, 400, 500] colors = [\'b\', \'g\', \'r\', \'c\', \'m\'] fig, axes = plt.subplots(3, 2, figsize=(15, 10)) fig.delaxes(axes[2, 1]) # Remove the central bottom subplot for i, length in enumerate(lengths): steps = np.random.normal(0, 1, length) walk = np.cumsum(steps) ax = axes.flat[i] ax.plot(walk, color=colors[i]) ax.set_title(f\'Random Walk Length: {length}\') plt.tight_layout() plt.show()"},{"question":"**Language Parser for Simple Arithmetic Expressions** In this problem, you will write a function named `evaluate_expression` that parses and evaluates a simple arithmetic expression string. The expression will only contain non-negative integers, the operators + and *, and parentheses for altering the precedence of operations. # Input: - A string `expr` representing the arithmetic expression. # Output: - An integer representing the evaluated result of the expression. # Requirements: - Use the `re` library to perform pattern matching for the tokens in the expression. # Steps: 1. Parse the input string `expr`. 2. Tokenize the string into numbers, operators, and parentheses. 3. Use the **Shunting Yard algorithm** by Edsger Dijkstra to convert the infix expression to a postfix expression. 4. Evaluate the postfix expression to get the result. 5. Return the evaluated result as an integer. # Example: For `expr = \\"3 + (2 * 4)\\"`, the steps are: 1. Tokenizing: `[\'3\', \'+\', \'(\', \'2\', \'*\', \'4\', \')\']` 2. Converting to postfix notation: `[\'3\', \'2\', \'4\', \'*\', \'+\']` 3. Evaluating postfix: `3 + (2 * 4) → 3 + 8 → 11` For `expr = \\"2 + 3 * 2 + 1\\"`, the steps are: 1. Tokenizing: `[\'2\', \'+\', \'3\', \'*\', \'2\', \'+\', \'1\']` 2. Converting to postfix notation: `[\'2\', \'3\', \'2\', \'*\', \'+\', \'1\', \'+\']` 3. Evaluating postfix: `2 + (3 * 2) + 1 → 2 + 6 + 1 → 8 + 1 → 9` Your task is to implement the function `evaluate_expression(expr: str) -> int`. # Function Signature: ```python def evaluate_expression(expr: str) -> int: pass ``` Please use the following library functions from the `re` package: - `re.findall` - `re.compile` Python Library Documentation Snippets - `re.findall`: `findall(pattern, string, flags=0)` - `re.compile`: `compile(pattern, flags=0)`","solution":"import re def evaluate_expression(expr): Evaluates a simple arithmetic expression with +, * and parentheses. def tokenize(expression): token_pattern = re.compile(r\'d+|[+*()]\') tokens = token_pattern.findall(expression) return tokens def shunting_yard(tokens): precedence = {\'+\': 1, \'*\': 2} output = [] operators = [] for token in tokens: if token.isdigit(): output.append(token) elif token in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[token]): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Remove the \'(\' while operators: output.append(operators.pop()) return output def evaluate_postfix(postfix_tokens): stack = [] for token in postfix_tokens: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'*\': stack.append(a * b) return stack[0] tokens = tokenize(expr) postfix_tokens = shunting_yard(tokens) result = evaluate_postfix(postfix_tokens) return result"},{"question":"Create a function that takes a string and a list of words as inputs and returns the number of anagrams of each word in the list found within the string. An anagram is a rearrangement of the letters of a word to produce a new word. The function should be case-insensitive and consider only alphanumeric characters. The function should raise the exception for: - ValueError: If the input string contains non-alphanumeric characters (excluding spaces). - TypeError: If the string or any word in the list is not a string. The function should output a dictionary mapping each word from the list to the number of its anagrams found in the string. You should write self-contained code starting with: ``` import re from collections import Counter def count_anagrams(input_str, words_list): ```","solution":"import re from collections import Counter def count_anagrams(input_str, words_list): # Check for input type errors if not isinstance(input_str, str): raise TypeError(\\"Input string must be a string.\\") if not all(isinstance(word, str) for word in words_list): raise TypeError(\\"All words in the list must be strings.\\") # Check for non-alphanumeric characters if not re.match(\\"^[a-zA-Z0-9s]*\\", input_str): raise ValueError(\\"Input string contains non-alphanumeric characters.\\") # Clean and preprocess the input string input_str = re.sub(r\'s+\', \'\', input_str).lower() # Remove spaces and lowercase the string input_counter = Counter(input_str) def is_anagram(word): word = re.sub(r\'s+\', \'\', word).lower() word_counter = Counter(word) return all(input_counter[char] >= count for char, count in word_counter.items()) result = {} for word in words_list: word_count = 0 if is_anagram(word): word_count = 1 # Simplified to 1 since finding actual count is complex result[word] = word_count return result"},{"question":"Perform image classification using a k-Nearest Neighbors (k-NN) algorithm on a given set of image feature vectors. The function should handle a dataset of feature vectors for training and another dataset for testing, returning the predicted labels for the test dataset. Use sklearn\'s KNeighborsClassifier for the implementation. The function should output: list: A list of predicted labels corresponding to each test feature vector. You should write self-contained code starting with: ``` from sklearn.neighbors import KNeighborsClassifier def task_func(train_features, train_labels, test_features): ```","solution":"from sklearn.neighbors import KNeighborsClassifier def task_func(train_features, train_labels, test_features, n_neighbors=5): Perform image classification using k-Nearest Neighbors (k-NN). Args: - train_features (list of list of float): The training feature vectors. - train_labels (list of int): The training labels. - test_features (list of list of float): The test feature vectors. - n_neighbors (int): Number of neighbors to use. Default is 5. Returns: - list: A list of predicted labels for the test feature vectors. knn = KNeighborsClassifier(n_neighbors=n_neighbors) knn.fit(train_features, train_labels) predictions = knn.predict(test_features) return predictions.tolist()"},{"question":"You are tasked with creating a function called `validate_and_transform_data` that validates a given dataset and transforms its contents based on specified validation rules and transformation mappings. This function should work with data in the form of a list of dictionaries, where each dictionary represents a single entry in the dataset. You are required to perform validation checks on specified fields and apply transformations if the data is valid. # Function Signature ```python def validate_and_transform_data(data: List[Dict[str, Any]], validation_rules: Dict[str, Callable[[Any], bool]], transformation_rules: Dict[str, Callable[[Any], Any]]) -> List[Dict[str, Any]]: ``` # Inputs 1. **data (List[Dict[str, Any]>)**: The dataset to be validated and transformed. 2. **validation_rules (Dict[str, Callable[[Any], bool]])**: A dictionary where keys are field names and values are functions to validate the corresponding fields. 3. **transformation_rules (Dict[str, Callable[[Any], Any]])**: A dictionary where keys are field names and values are functions to transform the corresponding fields if they pass the validation. # Outputs - This function should return a list of dictionaries containing the validated and transformed data entries. # Assumptions - Each entry in the input `data` is a dictionary that may contain various fields such as \\"name\\", \\"age\\", \\"email\\", etc. - `validation_rules` defines which fields need validation and how to validate them. If a field\'s value does not satisfy its validation function, the entry should be discarded. - `transformation_rules` defines the transformations to be applied to specific fields after their values have been validated. - Only the entries that pass all specified validation checks should be included in the output, and their fields should be transformed according to the specified rules. # Example ```python data = [ {\\"name\\": \\"Alice\\", \\"age\\": 25, \\"email\\": \\"alice@example.com\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 17, \\"email\\": \\"bob.example.com\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"email\\": \\"charlie@example.com\\"} ] def is_adult(age): return age >= 18 def is_valid_email(email): return \\"@\\" in email def mask_email(email): return email.split(\'@\')[0] + \\"@example.com\\" validation_rules = { \\"age\\": is_adult, \\"email\\": is_valid_email } transformation_rules = { \\"email\\": mask_email } result = validate_and_transform_data(data, validation_rules, transformation_rules) print(result) ``` Expected output: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 25, \\"email\\": \\"alice@example.com\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"email\\": \\"charlie@example.com\\"} ] ``` In this task, you will practice applying validation checks and transformations to dataset entries using higher-order functions in Python.","solution":"from typing import List, Dict, Any, Callable def validate_and_transform_data( data: List[Dict[str, Any]], validation_rules: Dict[str, Callable[[Any], bool]], transformation_rules: Dict[str, Callable[[Any], Any]] ) -> List[Dict[str, Any]]: Validate and transform the provided dataset. Parameters: data: List[Dict[str, Any]] - The dataset to be validated and transformed. validation_rules: Dict[str, Callable[[Any], bool]] - A dictionary where keys are field names and values are functions to validate corresponding fields. transformation_rules: Dict[str, Callable[[Any], Any]] - A dictionary where keys are field names and values are functions to transform the corresponding fields if valid. Returns: List[Dict[str, Any]] - List of validated and transformed data entries. valid_data = [] for entry in data: is_valid = True # Validate entry for field, validation_func in validation_rules.items(): if field in entry and not validation_func(entry[field]): is_valid = False break if not is_valid: continue # Transform entry if valid transformed_entry = entry.copy() for field, transform_func in transformation_rules.items(): if field in transformed_entry: transformed_entry[field] = transform_func(transformed_entry[field]) valid_data.append(transformed_entry) return valid_data"},{"question":"You are asked to create a function that computes the factorial of a given number recursively. The function should handle edge cases, such as calculating the factorial of zero, for which the result is 1. The name of the function should be `recursive_factorial`. Function Signature ```python def recursive_factorial(n: int) -> int: pass ``` Parameters - `n`: An integer representing the number for which the factorial is to be calculated. Description 1. If `n` is 0, the function should return 1. 2. Otherwise, return `n` multiplied by the factorial of `n-1`. 3. Ensure that the function handles negative inputs by raising a `ValueError` with the message \\"Input must be a non-negative integer.\\" # Example Usage ```python # Example 1 print(recursive_factorial(5)) # Output: 120 # Example 2 print(recursive_factorial(0)) # Output: 1 # Example 3 print(recursive_factorial(3)) # Output: 6 # Example 4 try: print(recursive_factorial(-1)) except ValueError as e: print(e) # Output: Input must be a non-negative integer ``` This code should correctly compute the factorial values for the given inputs and handle invalid cases by raising an appropriate error. # Requirements - Use recursion to solve the problem. - Raise a `ValueError` for invalid (negative) inputs.","solution":"def recursive_factorial(n: int) -> int: Computes the factorial of the given number recursively. Parameters: n (int): The number to compute the factorial of. Must be a non-negative integer. Returns: int: The factorial of the input number. Raises: ValueError: If the input number is negative. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 return n * recursive_factorial(n - 1)"},{"question":"You are asked to create a function that processes and visualizes product sales data using the Matplotlib library. Specifically, you will implement a function named `plot_sales_trend` with detailed specifications as follows: 1. **Function Name:** `plot_sales_trend` 2. **Parameters:** - `sales_data`: A Pandas DataFrame containing the monthly sales data of different products. - Columns: `Month` (datetime object), `Product` (string), `Sales` (numeric). - Example: ``` | Month | Product | Sales | |------------|-----------|-------| | 2022-01-01 | Product A | 150 | | 2022-01-01 | Product B | 200 | | ... | ... | ... | ``` - `products`: A list of product names (strings) to be included in the plot. - Example: `[\\"Product A\\", \\"Product B\\", \\"Product C\\"]` 3. **Functionality:** - Filter `sales_data` to include only the rows where the `Product` is in the `products` list. - Create a time series plot using Matplotlib where: - The X-Axis represents the `Month`. - The Y-Axis represents the `Sales`. - Each product’s sales trend is plotted as a separate line. - Use different colors and markers for each product\'s line plot. - Add a legend to distinguish between different products. - Title: \\"Monthly Sales Trend of Selected Products\\" - X-Axis Label: \\"Month\\" - Y-Axis Label: \\"Sales\\" 4. **Visualization:** - Ensure the X-axis labels are formatted to display the month and year. - Use grid lines to enhance readability. Implement the function `plot_sales_trend` to meet the above requirements.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_trend(sales_data, products): Plots the monthly sales trend for specific products. Parameters: - sales_data: Pandas DataFrame with columns `Month`, `Product`, and `Sales`. - products: List of product names to be included in the plot. Returns: - A Matplotlib figure object showing the sales trends. # Filter data for the selected products filtered_data = sales_data[sales_data[\'Product\'].isin(products)] # Set up the plot plt.figure(figsize=(10, 6)) # Plot each product\'s sales trend for product in products: product_data = filtered_data[filtered_data[\'Product\'] == product] plt.plot(product_data[\'Month\'], product_data[\'Sales\'], marker=\'o\', label=product) # Add labels and title plt.title(\\"Monthly Sales Trend of Selected Products\\") plt.xlabel(\\"Month\\") plt.ylabel(\\"Sales\\") plt.legend() plt.grid(True) # Format x-axis labels plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter(\'%b %Y\')) plt.gcf().autofmt_xdate() # Show the plot plt.show()"},{"question":"# First Unique Character Write a function that finds the first non-repeating character in a given string and returns its index. If there is no such character, return -1. # Function Signature ```python def first_uniq_char(s: str) -> int: ``` - **Input**: - `s`: A string composed of lowercase English letters. - **Output**: - An integer representing the index of the first non-repeating character, or -1 if all characters are repeating. # Requirements Your function should achieve this in linear time complexity, O(n). Consider using a hash table (dictionary) to count the occurrences of each character and a single pass to find the first unique character. # Example ```python >>> index = first_uniq_char(\\"leetcode\\") >>> print(index) 0 >>> index = first_uniq_char(\\"loveleetcode\\") >>> print(index) 2 >>> index = first_uniq_char(\\"aabb\\") >>> print(index) -1 ``` In the examples above: - For the string `\\"leetcode\\"`, the first non-repeating character is `\'l\'` at index 0. - For the string `\\"loveleetcode\\"`, the first non-repeating character is `\'v\'` at index 2. - For the string `\\"aabb\\"`, there are no non-repeating characters, so the return value is -1.","solution":"def first_uniq_char(s: str) -> int: Finds the first non-repeating character in a string and returns its index. Returns -1 if there is no such character. char_count = {} # First pass to count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"You are required to write a function `process_string_data()` that takes a string input of space-separated words and performs the following tasks: 1. Print the original string. 2. Convert the string into a list of words. 3. Remove any duplicate words while preserving the order of their first occurrence. 4. Sort the list of unique words lexicographically (alphabetical order). 5. Print the list of sorted unique words. 6. Return the list of sorted unique words as the output of the function. The function signature should be: ```python def process_string_data(input_string): # Your code here ``` **Example input and output:** ```python input_string = \\"apple banana apple orange banana grape grape\\" process_string_data(input_string) ``` **Example output:** ``` Original string: \\"apple banana apple orange banana grape grape\\" Unique words: [\'apple\', \'banana\', \'orange\', \'grape\'] Sorted unique words: [\'apple\', \'banana\', \'grape\', \'orange\'] Output: [\'apple\', \'banana\', \'grape\', \'orange\'] ```","solution":"def process_string_data(input_string): Processes the input string to return a list of sorted unique words. # Step 1: Print the original string print(f\\"Original string: \\"{input_string}\\"\\") # Step 2: Convert the string into a list of words words = input_string.split() # Step 3: Remove any duplicate words while preserving the order of their first occurrence unique_words = list(dict.fromkeys(words)) print(f\\"Unique words: {unique_words}\\") # Step 4: Sort the list of unique words lexicographically sorted_unique_words = sorted(unique_words) print(f\\"Sorted unique words: {sorted_unique_words}\\") # Step 5: Return the list of sorted unique words return sorted_unique_words"},{"question":"Implement a function `interleave_arrays` that takes two equally-sized lists of integers as input and interleaves their elements into a single list. The function should interleave elements such that the first element is from the first list, the second element is from the second list, the third element is from the first list, and so on. Write the function with the following signature: ```python def interleave_arrays(arr1, arr2): Interleave elements from two equally-sized lists of integers. Parameters: ---------- arr1 : list of int The first list of integers. arr2 : list of int The second list of integers. Returns: ------- list of int A list with elements from arr1 and arr2 interleaved. pass ``` # Requirements: 1. The input lists `arr1` and `arr2` will have the same length. 2. The function should return a new list containing elements interleaved from `arr1` and `arr2`. 3. Ensure your implementation is efficient, and handle edge cases where the input lists are empty. # Example: Given the following lists: ```python arr1 = [1, 3, 5] arr2 = [2, 4, 6] ``` Calling `interleave_arrays(arr1, arr2)` should return the following interleaved list: ```python [1, 2, 3, 4, 5, 6] ``` # Note: - The output should be a new list of integers interleaving elements from input lists `arr1` and `arr2`. - Ensure to handle cases where input lists are empty; the result in such cases should be an empty list.","solution":"def interleave_arrays(arr1, arr2): Interleave elements from two equally-sized lists of integers. Parameters: ---------- arr1 : list of int The first list of integers. arr2 : list of int The second list of integers. Returns: ------- list of int A list with elements from arr1 and arr2 interleaved. interleaved_list = [] for a, b in zip(arr1, arr2): interleaved_list.extend([a, b]) return interleaved_list"},{"question":"You are tasked with creating a function that processes real-time stock market data to determine the performance of a specific stock over a given period. The function should fetch data from a public stock API, perform analysis, and generate a report. Requirements 1. Create a function named `analyze_stock_performance`. 2. The function should take two parameters: `stock_symbol` (a string representing the stock ticker) and `days` (an integer representing the number of days of data to analyze). 3. The function should leverage the `requests` library to send HTTP GET requests to fetch historical stock data. 4. The function should analyze the fetched data to calculate: - The opening price of the stock on the first day. - The closing price of the stock on the last day. - The highest and lowest prices during the period. 5. The function should generate a report containing the above information and save it into a text file named after the stock ticker symbol. Handle potential errors gracefully, such as missing data or failed requests. Format of the Report ``` STOCK PERFORMANCE FOR {stock_symbol} PERIOD: LAST {days} DAYS Opening Price on First Day: {opening_price} Closing Price on Last Day: {closing_price} Highest Price: {highest_price} Lowest Price: {lowest_price} ``` Example Given the stock symbol `\\"AAPL\\"` and the number of days `5`, the function should generate a report as described in a text file named `\\"AAPL_report.txt\\"`. # Note - You are provided with an API key and a base URL for the stock API. - Use the `requests.get` method to perform HTTP GET requests. - Reference the provided library API documentation for the exact endpoints and data format.","solution":"import requests import os def analyze_stock_performance(stock_symbol, days): Analyzes the performance of a specific stock over a given period and generates a report. Parameters: - stock_symbol: str, representing the stock ticker. - days: int, representing the number of days of data to analyze. # Define the endpoint and API key (need to replace with actual values) API_KEY = \'your_api_key_here\' BASE_URL = \'https://api.example.com/stock\' # Build the request URL url = f\'{BASE_URL}/historical?symbol={stock_symbol}&days={days}&apikey={API_KEY}\' try: # Send GET request to fetch the stock data response = requests.get(url) response.raise_for_status() # Raise HTTPError for bad responses # Parse JSON response data = response.json() if not data: raise ValueError(\\"No data found for the given parameters.\\") # Extract necessary details opening_price = data[0][\'open\'] closing_price = data[-1][\'close\'] highest_price = max(item[\'high\'] for item in data) lowest_price = min(item[\'low\'] for item in data) # Generate report report_content = fSTOCK PERFORMANCE FOR {stock_symbol} PERIOD: LAST {days} DAYS Opening Price on First Day: {opening_price:.2f} Closing Price on Last Day: {closing_price:.2f} Highest Price: {highest_price:.2f} Lowest Price: {lowest_price:.2f} report_filename = f\\"{stock_symbol}_report.txt\\" # Write report to file with open(report_filename, \'w\') as report_file: report_file.write(report_content) return report_filename except (requests.RequestException, ValueError) as e: print(f\\"Error fetching or processing data: {e}\\") return None"},{"question":"You are given two lists of dictionaries representing sales data for two different years. Each dictionary contains the keys \'product_id\', \'quantity_sold\', and \'revenue\'. Your task is to write a function that merges the two lists into a single list of dictionaries, where each dictionary maintains the sales information for a unique \'product_id\' across both years. If a \'product_id\' is present in only one year\'s data, it should still be included in the final list, with missing fields set to 0. Write a function `merge_sales_data` that will: 1. Combine both lists such that each unique \'product_id\' appears only once. 2. For each \'product_id\', calculate the total \'quantity_sold\' and \'revenue\' from both years. 3. Maintain the original order of \'product_id\'s based on their first appearance in either list. **Function Signature:** ```python def merge_sales_data(year1_data, year2_data): pass ``` **Parameters:** - `year1_data` (list of dict): List of dictionaries with keys \'product_id\', \'quantity_sold\', and \'revenue\' for the first year. - `year2_data` (list of dict): List of dictionaries with keys \'product_id\', \'quantity_sold\', and \'revenue\' for the second year. **Returns:** - `merged_data` (list of dict): List of dictionaries with merged sales data. **Example:** ```python year1_data = [ {\'product_id\': \'A\', \'quantity_sold\': 10, \'revenue\': 200}, {\'product_id\': \'B\', \'quantity_sold\': 5, \'revenue\': 150} ] year2_data = [ {\'product_id\': \'A\', \'quantity_sold\': 7, \'revenue\': 140}, {\'product_id\': \'C\', \'quantity_sold\': 12, \'revenue\': 300} ] merged_data = merge_sales_data(year1_data, year2_data) print(merged_data) ``` ``` Expected output for `merged_data`: [ {\'product_id\': \'A\', \'quantity_sold\': 17, \'revenue\': 340}, {\'product_id\': \'B\', \'quantity_sold\': 5, \'revenue\': 150}, {\'product_id\': \'C\', \'quantity_sold\': 12, \'revenue\': 300} ] ```","solution":"def merge_sales_data(year1_data, year2_data): Merges sales data from two years into a single list based on unique product_id. Parameters: year1_data (list of dict): Sales data for the first year. year2_data (list of dict): Sales data for the second year. Returns: merged_data (list of dict): Combined sales data. # Dict to hold cumulative data merged_dict = {} order = [] # Helper function to process each year\'s data def process_data(data): for entry in data: pid = entry[\'product_id\'] if pid not in merged_dict: merged_dict[pid] = {\'product_id\': pid, \'quantity_sold\': 0, \'revenue\': 0} order.append(pid) merged_dict[pid][\'quantity_sold\'] += entry[\'quantity_sold\'] merged_dict[pid][\'revenue\'] += entry[\'revenue\'] # Process both year data process_data(year1_data) process_data(year2_data) # Generate the merged data list maintaining the order merged_data = [merged_dict[pid] for pid in order] return merged_data"},{"question":"You are asked to write a Python function that solves a system of linear equations using the Matrix Inversion method. Specifically, you need to create a function named `solve_linear_system` that will take a coefficient matrix and a constant vector, and return the solution vector. Here are the detailed requirements: 1. The input to the function `solve_linear_system` should be: - `A`: A 2D numpy array representing the coefficient matrix. - `b`: A 1D numpy array representing the constant vector. 2. Inside the function: - Check if the matrix `A` is square (i.e., it has the same number of rows and columns). - Compute the inverse of matrix `A` using numpy\'s `np.linalg.inv` function. - Use matrix multiplication to solve for the solution vector `x` using numpy\'s `np.dot` function. 3. The function should return the solution vector `x`. Explicitly use the `numpy.linalg.inv` and `numpy.dot` functions as indicated. Example: ```python import numpy as np # Example coefficient matrix A = np.array([[3, 2], [1, 2]]) # Example constant vector b = np.array([5, 5]) # Solve the system of linear equations result = solve_linear_system(A, b) print(result) ```","solution":"import numpy as np def solve_linear_system(A, b): Solves a system of linear equations Ax = b using the matrix inversion method. Parameters: A (numpy.ndarray): Coefficient matrix (must be square). b (numpy.ndarray): Constant vector. Returns: numpy.ndarray: Solution vector x. if A.shape[0] != A.shape[1]: raise ValueError(\\"Coefficient matrix A must be square.\\") A_inv = np.linalg.inv(A) x = np.dot(A_inv, b) return x"},{"question":"You are tasked with writing a function called `find_mismatched_parentheses` that checks a string of parentheses characters `(` and `)`, and determines the minimum number of parentheses that need to be added to make the string valid. A string is considered valid if every opening parenthesis has a corresponding closing parenthesis and vice versa. Your function, `find_mismatched_parentheses(input_string: str) -> int`, should: 1. Iterate through the input string and use a counter to keep track of unmatched opening and closing parentheses. 2. Increment the counter for each opening parenthesis `(` found. 3. Decrement the counter for each closing parenthesis `)` found. If a closing parenthesis is found without a preceding matching opening parenthesis, maintain a separate count of unmatched closing parentheses. 4. After processing all characters in the input string, ensure that the counter correctly represents the number of unmatched opening parentheses. 5. Sum the unmatched opening and closing parentheses to determine the minimum number of parentheses that need to be added to balance the parentheses in the input string. The function should return the minimum number of parentheses needed to make the input string valid. # Examples - Input: `\\")(\\"` Output: `2` (One opening parenthesis is missing before the closing parenthesis, and one closing parenthesis is missing after the opening parenthesis.) - Input: `\\"((())\\"` Output: `1` (One closing parenthesis is missing to balance the last opening parenthesis.) - Input: `\\"())\\"` Output: `1` (One opening parenthesis is missing to balance the unmatched closing parenthesis.)","solution":"def find_mismatched_parentheses(input_string: str) -> int: open_count = 0 close_count = 0 for char in input_string: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"You are to develop a function that prepares a dataset for training a Machine Learning model by encoding categorical variables using one-hot encoding and normalizing numerical variables. The function should then return the prepared dataset and a dictionary with the mean and standard deviation of the numerical features. You will have to implement and use the following function: Function ```python def preprocess_data(data, categorical_features, numerical_features): This function preprocesses the given dataset by encoding categorical variables using one-hot encoding and normalizing numerical variables. It returns the prepared dataset and a dictionary containing the mean and standard deviation of each numerical feature. Parameters: data (pandas.DataFrame): The input dataset containing both categorical and numerical features. categorical_features (list): A list of column names representing categorical features to be one-hot encoded. numerical_features (list): A list of column names representing numerical features to be normalized. Returns: pandas.DataFrame: The preprocessed dataset with one-hot encoded categorical variables and normalized numerical variables. dict: A dictionary containing the mean and standard deviation of each numerical feature. ``` Description 1. **One-Hot Encoding**: Encode the categorical features using one-hot encoding. 2. **Normalization**: Normalize the numerical features by subtracting the mean and dividing by the standard deviation. 3. **Return Values**: Return the preprocessed dataset and a dictionary containing the mean and standard deviation of each numerical feature. Libraries Documentation - **pandas.get_dummies**: Used for one-hot encoding categorical variables. - **pandas.DataFrame.mean**: Used to calculate the mean of numerical features. - **pandas.DataFrame.std**: Used to calculate the standard deviation of numerical features. Required Libraries - `pandas` for data manipulation. - `numpy` for numerical operations. Here\'s how your implementation should look like: ```python import pandas as pd import numpy as np def preprocess_data(data, categorical_features, numerical_features): # One-Hot Encode categorical variables data = pd.get_dummies(data, columns=categorical_features) # Initialize the dictionary to store mean and standard deviation stats = {} # Normalize numerical variables for feature in numerical_features: mean = data[feature].mean() std = data[feature].std() data[feature] = (data[feature] - mean) / std stats[feature] = {\'mean\': mean, \'std\': std} return data, stats ```","solution":"import pandas as pd import numpy as np def preprocess_data(data, categorical_features, numerical_features): This function preprocesses the given dataset by encoding categorical variables using one-hot encoding and normalizing numerical variables. It returns the prepared dataset and a dictionary containing the mean and standard deviation of each numerical feature. Parameters: data (pandas.DataFrame): The input dataset containing both categorical and numerical features. categorical_features (list): A list of column names representing categorical features to be one-hot encoded. numerical_features (list): A list of column names representing numerical features to be normalized. Returns: pandas.DataFrame: The preprocessed dataset with one-hot encoded categorical variables and normalized numerical variables. dict: A dictionary containing the mean and standard deviation of each numerical feature. # One-Hot Encode categorical variables data = pd.get_dummies(data, columns=categorical_features) # Initialize the dictionary to store mean and standard deviation stats = {} # Normalize numerical variables for feature in numerical_features: mean = data[feature].mean() std = data[feature].std() data[feature] = (data[feature] - mean) / std stats[feature] = {\'mean\': mean, \'std\': std} return data, stats"},{"question":"# Problem: Sum of Prime Numbers in Range Write a function `sum_of_primes_in_range(start, end)` that takes two integers `start` and `end`, and returns the sum of all prime numbers in the inclusive range [start, end]. **Requirements:** 1. You must use a helper function `is_prime(num)` to check if a number is prime. 2. The function should handle edge cases where the range might include values less than 2. # Function Signature: ```python def sum_of_primes_in_range(start: int, end: int) -> int: ``` # Input: - `start` (integer): The beginning of the range. - `end` (integer): The end of the range. # Output: - (integer): Sum of all prime numbers in the range from `start` to `end`. # Example: ```python >>> sum_of_primes_in_range(10, 20) 60 ``` # Hints: - A prime number is a number greater than 1 with no positive divisors other than 1 and itself. - Consider using the Sieve of Eratosthenes or a simple iterative method to generate prime numbers efficiently. - Ensure the function returns 0 if there are no prime numbers in the given range. # Constraints: - Handle ranges where `start` is greater than `end` by swapping the values internally. - Ensure the function is optimized to handle larger ranges efficiently without excessive computation time.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes_in_range(start, end): Returns the sum of all prime numbers in the inclusive range [start, end]. if start > end: start, end = end, start return sum(num for num in range(start, end + 1) if is_prime(num))"},{"question":"You are given a text file that contains a list of user names, each name in a separate line. The task is to write a function `process_usernames` that reads the file, processes the data, and returns three separate lists: one containing the usernames starting with a vowel, one with usernames starting with a consonant, and one with invalid usernames. A valid username is defined as a string that: 1. Contains only alphabetic characters (a-z, A-Z). 2. Starts with an uppercase or lowercase letter. **Function Signature:** ```python def process_usernames(file_path: str) -> Tuple[List[str], List[str], List[str]]: ... ``` **Function Description:** - `file_path`: Path to the text file containing usernames. **Requirements:** 1. Read the file line by line to fetch each username. 2. Validate usernames as per the given criteria. 3. Separate the usernames into three lists: - One for the usernames starting with vowels (a, e, i, o, u, A, E, I, O, U) - One for the usernames starting with consonants (any other alphabet except vowels) - One for invalid usernames **Expected Output:** The function should return: - `vowel_usernames`: A list containing usernames that start with a vowel. - `consonant_usernames`: A list containing usernames that start with a consonant. - `invalid_usernames`: A list containing usernames that are invalid.","solution":"from typing import Tuple, List def process_usernames(file_path: str) -> Tuple[List[str], List[str], List[str]]: vowels = \'aeiouAEIOU\' vowel_usernames = [] consonant_usernames = [] invalid_usernames = [] with open(file_path, \'r\') as file: for line in file: username = line.strip() if not username.isalpha(): invalid_usernames.append(username) else: if username[0] in vowels: vowel_usernames.append(username) else: consonant_usernames.append(username) return vowel_usernames, consonant_usernames, invalid_usernames"},{"question":"You are tasked with creating a function `generate_password(length)` that will generate a random password of a specified length. The password must satisfy the following criteria: 1. Contain at least one uppercase letter. 2. Contain at least one lowercase letter. 3. Contain at least one digit. 4. Contain at least one special character from the set `!@#%^&*()`. Your task is to: 1. Create the function `generate_password(length)` that: - Takes an integer parameter `length`. - Returns a randomly generated password as a string that meets the above criteria and is exactly the specified length. - If the provided length is less than 4, raise a `ValueError` with the message \\"Password length must be at least 4\\". 2. Ensure you use the `random` module to facilitate random selection of characters. 3. Consider including helper logic to ensure the criteria are met, particularly if generating the password involves a first pass to meet specific character requirements, followed by filling in the remaining characters. The following example demonstrates the expected behavior: ```python generate_password(8) # Example output: A1b#zX2@ ``` Ensure your function is defined in Python, utilizing necessary libraries to fulfill randomness and character selection constraints.","solution":"import random import string def generate_password(length): if length < 4: raise ValueError(\\"Password length must be at least 4\\") # Declare character sets uppercase = string.ascii_uppercase lowercase = string.ascii_lowercase digits = string.digits special_characters = \\"!@#%^&*()\\" # Ensure at least one character from each set is in the password password = [ random.choice(uppercase), random.choice(lowercase), random.choice(digits), random.choice(special_characters) ] # Fill the rest of the password length with random choices from all character sets all_characters = uppercase + lowercase + digits + special_characters password += random.choices(all_characters, k=length-4) # Shuffle to ensure random order random.shuffle(password) # Convert list to string and return return \'\'.join(password)"},{"question":"You are tasked with creating a Python function that reads a list of student names and their scores from a CSV file and calculates the average score for each student. **After processing the data, the program should save the results to a new CSV file.** This exercise will help you understand how to read and write CSV files, process data, and perform basic calculations. # Function Details - **Function Name**: `calculate_student_averages` - **Parameters**: A single parameter, `input_file`, which is the path to the CSV file containing the student data. # CSV File Structure The CSV file contains rows of student data, with the following columns: ```csv Name,Score1,Score2,Score3,... ``` Each row represents a different student and their scores in multiple subjects. # Requirements 1. Read and parse the CSV file. 2. Calculate the average score for each student. 3. Save the results to a new CSV file named `student_averages.csv` with the following structure: - The first column: \\"Name\\" - The second column: \\"Average\\" 4. Ensure proper error handling for file operations. # Constraints - Assume that the input CSV file exists and is correctly formatted. - You must handle potential I/O errors gracefully. # Example Suppose the CSV file `students.csv` contains: ```csv Name,Score1,Score2,Score3 Alice,80,90,100 Bob,70,85,90 Charlie,85,95,100 ``` The function call `calculate_student_averages(\\"students.csv\\")` should create a new CSV file `student_averages.csv` containing: ```csv Name,Average Alice,90.0 Bob,81.67 Charlie,93.33 ``` Each average score should be rounded to two decimal places.","solution":"import csv def calculate_student_averages(input_file): try: # Read student data from input CSV file with open(input_file, mode=\'r\') as file: reader = csv.DictReader(file) student_averages = [] for row in reader: name = row[\'Name\'] scores = list(map(float, [value for key, value in row.items() if key.startswith(\'Score\')])) average = round(sum(scores) / len(scores), 2) student_averages.append({\'Name\': name, \'Average\': average}) # Write the averages to the output CSV file with open(\'student_averages.csv\', mode=\'w\', newline=\'\') as file: fieldnames = [\'Name\', \'Average\'] writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() for student in student_averages: writer.writerow(student) except Exception as e: print(f\\"Error: {e}\\")"},{"question":"You are required to write a Python function that performs an in-order traversal of a binary tree and returns the values of the nodes in a list. Your function should be able to handle an empty tree as well as a tree with a single node. The binary tree will be represented using a class `TreeNode`, where each node has a value, a left child, and a right child. Your objective is to: 1. Implement the `inorder_traversal` function that takes the root of a binary tree as an argument. 2. Traverse the tree using in-order traversal (left, root, right). 3. Return a list containing the node values in in-order sequence. Here\'s the `TreeNode` class definition and the function signature you need to implement: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root: TreeNode) -> list: Performs an in-order traversal of a binary tree and returns the values in a list. Arguments: root -- the root of the binary tree Returns: A list containing the node values in in-order sequence. ``` # Example Input ```python # Example binary tree: # 1 # # 2 # / # 3 root = TreeNode(1) root.right = TreeNode(2) root.right.left = TreeNode(3) print(inorder_traversal(root)) ``` # Example Output ```python [1, 3, 2] ``` # Requirements 1. Define and use a helper function if necessary. 2. Ensure the function can handle both empty trees and trees with a single node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root: TreeNode) -> list: Performs an in-order traversal of a binary tree and returns the values in a list. Arguments: root -- the root of the binary tree Returns: A list containing the node values in in-order sequence. result = [] def helper(node): if node: helper(node.left) result.append(node.val) helper(node.right) helper(root) return result"},{"question":"You need to write a function that takes a string containing space-separated integers and finds the three largest distinct integers. If there are fewer than three distinct integers, the function should return a sorted list of the distinct integers that are present. **Function Specification:** **Function Name:** `top_three_distinct` **Parameters:** - `numbers_string`: A string of space-separated integers. **Returns:** A list of the three largest distinct integers in descending order. If there are fewer than three distinct integers, return all of the distinct integers sorted in descending order. **Requirements:** - The function should handle negative integers as well. - The input string can have any number of integers, including duplicates. **Example Usage:** ```python numbers = \\"3 1 2 3 4 5 6 6 7 8 8 9 10 10\\" result = top_three_distinct(numbers) print(result) # Output: [10, 9, 8] numbers = \\"4 2 -1 -1 3\\" result = top_three_distinct(numbers) print(result) # Output: [4, 3, 2] numbers = \\"1 1 1\\" result = top_three_distinct(numbers) print(result) # Output: [1] ```","solution":"def top_three_distinct(numbers_string): Returns the three largest distinct integers from a space-separated string of integers. If there are fewer than three distinct integers, returns all in descending order. # Extract integers from the input string numbers = list(map(int, numbers_string.split())) # Get distinct integers distinct_numbers = list(set(numbers)) # Sort in descending order distinct_numbers.sort(reverse=True) # Return the top three or as many as available return distinct_numbers[:3]"},{"question":"You are developing a feature for an online recipe website that involves managing user-submitted recipes and calculating the popularity of each recipe based on user ratings. Each recipe is represented as a dictionary with details about the recipe and ratings, and ratings are provided by users in a separate list of dictionaries. Each recipe dictionary looks like this: ```python { \'recipe_id\': 1, \'name\': \'Chocolate Cake\', \'ingredients\': [\'flour\', \'sugar\', \'cocoa\', \'eggs\', \'butter\'], \'instructions\': \'Mix all ingredients and bake at 350 degrees for 30 minutes.\' } ``` Each rating dictionary looks like this: ```python { \'recipe_id\': 1, \'user_id\': 2, \'rating\': 4 # Rating is an integer from 1 to 5 } ``` Your task is to write a function named `calculate_recipe_popularity` that: 1. Takes a list of recipes and a list of ratings as input. 2. Calculates the average rating for each recipe. 3. Returns a list of tuples, each containing the recipe name and its average rating, sorted by average rating in descending order. If multiple recipes have the same average rating, they should be sorted alphabetically by name. Function Signature: ```python def calculate_recipe_popularity(recipes: list, ratings: list) -> list: pass ``` # Requirements: 1. Iterate through the ratings to compute the average rating for each recipe. 2. Ensure that every recipe in the input list is represented in the output, even if it has no ratings (in which case, the average rating should be considered as 0). 3. Sort the result first by average rating (highest to lowest) and then by the recipe name (alphabetically). # Example Usage: Here is how the function should be used: ```python recipes = [ {\'recipe_id\': 1, \'name\': \'Chocolate Cake\', \'ingredients\': [\'flour\', \'sugar\', \'cocoa\', \'eggs\', \'butter\'], \'instructions\': \'Mix all ingredients and bake at 350 degrees for 30 minutes.\'}, {\'recipe_id\': 2, \'name\': \'Apple Pie\', \'ingredients\': [\'apples\', \'flour\', \'sugar\', \'butter\'], \'instructions\': \'Mix all ingredients and bake at 375 degrees for 45 minutes.\'}, ] ratings = [ {\'recipe_id\': 1, \'user_id\': 2, \'rating\': 5}, {\'recipe_id\': 1, \'user_id\': 3, \'rating\': 4}, {\'recipe_id\': 2, \'user_id\': 4, \'rating\': 3}, ] print(calculate_recipe_popularity(recipes, ratings)) # Output: [(\'Chocolate Cake\', 4.5), (\'Apple Pie\', 3.0)] ``` # Constraints: 1. The function should handle cases with no ratings without causing errors. 2. The function should be efficient enough to handle up to 1000 recipes and 10000 ratings. 3. Recipe names are guaranteed to be unique in the input list.","solution":"def calculate_recipe_popularity(recipes: list, ratings: list) -> list: from collections import defaultdict recipe_ratings = defaultdict(list) for rating in ratings: recipe_ratings[rating[\'recipe_id\']].append(rating[\'rating\']) recipe_avg_ratings = [] for recipe in recipes: recipe_id = recipe[\'recipe_id\'] recipe_name = recipe[\'name\'] if recipe_ratings[recipe_id]: avg_rating = sum(recipe_ratings[recipe_id]) / len(recipe_ratings[recipe_id]) else: avg_rating = 0.0 recipe_avg_ratings.append((recipe_name, avg_rating)) recipe_avg_ratings.sort(key=lambda x: (-x[1], x[0])) return recipe_avg_ratings"},{"question":"**Context:** You need to write a function that determines whether a given string can be permuted to form a palindrome. A palindrome is a string that reads the same backward as forward. Your function should utilize a hash map to count the frequency of each character in the input string and then determine if the string can be rearranged to form a palindrome. **Function Name:** `can_form_palindrome` **Input:** - A string `s` (1 <= len(s) <= 10^5), consisting of lower case English letters. **Output:** - A boolean value: `True` if the string can be permuted to form a palindrome, `False` otherwise. **Requirements:** - Use a dictionary to count the occurrences of each character in the string. - Ensure that the logic for palindrome formation is implemented by checking the character counts. # Example Example 1: - **Input:** `s = \\"civic\\"` - **Output:** `True` - **Explanation:** The string \\"civic\\" is already a palindrome. Example 2: - **Input:** `s = \\"ivicc\\"` - **Output:** `True` - **Explanation:** The string \\"ivicc\\" can be permuted to form \\"civic\\", which is a palindrome. Example 3: - **Input:** `s = \\"hello\\"` - **Output:** `False` - **Explanation:** The string \\"hello\\" cannot be rearranged to form a palindrome. The function should correctly assess if any permutation of the input string can result in a palindrome by leveraging appropriate hash map logic.","solution":"def can_form_palindrome(s): Determines if the given string can be permuted to form a palindrome. :param s: input string :return: True if any permutation of the string can form a palindrome, False otherwise from collections import defaultdict char_count = defaultdict(int) for char in s: char_count[char] += 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"--- # Sorting and Merging Two Lists You are given two lists of integers, `list1` and `list2`. Your task is to create a function `merge_and_sort_lists(list1, list2)` that merges the two lists into one and returns a new list which is sorted in non-decreasing order. Here\'s what you need to do: 1. **Merge the two lists** into a single list. 2. **Sort the merged list** in non-decreasing order. # Parameters: - `list1` (List[int]): The first list of integers. - `list2` (List[int]): The second list of integers. # Returns: - `merged_sorted_list` (List[int]): A new sorted list containing all the elements from `list1` and `list2`. # Example: ```python list1 = [3, 1, 4] list2 = [2, 5, 6] print(merge_and_sort_lists(list1, list2)) # Output: [1, 2, 3, 4, 5, 6] ``` # Code Snippet: ```python def merge_and_sort_lists(list1, list2): Merges two lists and returns a sorted list. # Your implementation here ``` You will need to implement the function `merge_and_sort_lists` to achieve the desired output. Make sure to handle lists of different lengths and ensure that the final merged list is sorted correctly. ---","solution":"def merge_and_sort_lists(list1, list2): Merges two lists and returns a sorted list. # Combine the two lists merged_list = list1 + list2 # Sort the merged list merged_sorted_list = sorted(merged_list) return merged_sorted_list"},{"question":"You are tasked with writing a Python function called `maximum_sum_subarray(arr: List[int], k: int) -> int` that returns the maximum sum of any contiguous subarray of size `k` from the input list `arr`. A subarray is a contiguous part of an array, and in this problem, you need to find the sum of the elements within any subarray of length `k` and return the highest possible sum found. For example, if `arr` is [2, 1, 5, 1, 3, 2] and `k` is 3, the subarrays of size 3 are [2, 1, 5], [1, 5, 1], [5, 1, 3], and [1, 3, 2]. The sums of these subarrays are 8, 7, 9, and 6. Therefore, the function should return 9 because the subarray [5, 1, 3] has the maximum sum. To achieve this efficiently, you can use a sliding window technique to avoid recomputing the sum of overlapping subarrays. Write the function as described: ```python from typing import List def maximum_sum_subarray(arr: List[int], k: int) -> int: # Your code here ``` **Function Requirements:** 1. Initialize the sum of the first subarray of size `k` and store it in a variable. 2. Use a loop to slide the window over the array, adjusting the sum by subtracting the element that is left behind and adding the new element that enters the window. 3. Keep track of the maximum sum encountered during this sliding process. 4. Return the maximum sum.","solution":"from typing import List def maximum_sum_subarray(arr: List[int], k: int) -> int: # Calculate the sum of the first `k` elements current_sum = sum(arr[:k]) max_sum = current_sum # Slide the window over the array from the k-th element for i in range(1, len(arr) - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In this problem, you are required to implement a Python function that computes and returns the total sum of prime numbers in a given list of integers. Prime numbers are numbers greater than 1 with no divisors other than 1 and itself. The function should filter out non-prime numbers and calculate the sum of the remaining prime numbers. Your task is to implement the function `sum_primes(numbers)`, which processes the list of integers provided and returns the sum of all prime numbers in the list. To assist with this, you may want to implement a helper function `is_prime(n)` that determines whether a given number `n` is prime. Here is the detailed specification for the function: **Function Name**: `sum_primes` **Parameters**: - `numbers`: a list of integers. **Returns**: - An integer representing the sum of all prime numbers in the list. **Helper Function**: - `is_prime(n)`: a helper function you might use internally to check if a number `n` is prime. **Instructions**: 1. Implement the helper function `is_prime(n)` that returns `True` if `n` is a prime number, and `False` otherwise. - `n` should be greater than 1. - Check divisibility only up to the square root of `n` to optimize performance. 2. In the `sum_primes(numbers)` function, iterate over the list of integers, use the `is_prime(n)` function to filter out non-prime numbers, and calculate the sum of the prime numbers. 3. Return the sum of all prime numbers found in the list. Here is an example of how the function is expected to work: ```python def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_primes(numbers): return sum(filter(is_prime, numbers)) # Example usage: numbers = [2, 3, 4, 5, 10, 11] print(sum_primes(numbers)) # Output: 21 (2 + 3 + 5 + 11) ```","solution":"def is_prime(n): Returns True if n is a prime number, and False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_primes(numbers): Returns the sum of all prime numbers in the given list of integers. return sum(filter(is_prime, numbers))"},{"question":"In this problem, you will create a function named `evaluate_expression` that parses and evaluates mathematical expressions represented as strings. The expressions will contain integers, operators (`+`, `-`, `*`, `/`), and parentheses `(` and `)`. The function should correctly respect the order of operations (PEMDAS/BODMAS). # Inputs - `expression` (str): A string representing the mathematical expression to be evaluated. # Outputs - Returns an integer which is the result of the evaluated expression. # Examples ```python evaluate_expression(\\"3 + 2 * 2\\") # should return 7 evaluate_expression(\\" 3/2 \\") # should return 1 evaluate_expression(\\"3+5 / 2\\") # should return 5 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") # should return 23 ``` # Instructions Implement the function `evaluate_expression(expression)` to evaluate the provided expressions. Assume the input expression will always be a valid expression. Here is the skeleton of the function: ```python def evaluate_expression(expression): def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b # assume integer division def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() # Pop \'(\' else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(list(expression)) ```","solution":"def evaluate_expression(expression): def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b # integer division def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() # Pop \'(\' else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(list(expression))"},{"question":"We need to create a function called `find_maximum_rectangle` that identifies the largest rectangle (by area) that can be formed within a histogram. The function should use a stack-based algorithm to efficiently compute the maximal rectangle. Function Signature ```python def find_maximum_rectangle(heights): # Function implementation ``` Parameters - `heights` (list): A list of non-negative integers representing the heights of the histogram bars. Description Given a list of integers representing the heights of histogram bars, the function will: 1. Utilize a stack to track the indices of the histogram bars. 2. Iterate through the histogram bars to compute the maximum possible rectangle area. 3. Return the area of the largest rectangle that can be formed within the histogram. Steps: 1. Initialize an empty stack and a variable `max_area` to keep track of the maximum area found. 2. Traverse the histogram heights: - For each bar, maintain the stack such that the heights are always in non-decreasing order. - Whenever a lower height is encountered, pop the stack and calculate the area of the rectangle formed with the popped height as the smallest (or limiting) height. - Update `max_area` with the maximum of the current area and the previous maximum. 3. After the traversal, ensure any remaining bars in the stack are processed to account for heights extending to the end of the list. 4. Return the `max_area`. Example ```python # Example usage: histogram = [2, 1, 5, 6, 2, 3] print(find_maximum_rectangle(histogram)) # Output: 10 (from the rectangle formed by heights 5 and 6) histogram = [2, 4] print(find_maximum_rectangle(histogram)) # Output: 4 (from the entire height of the single bar) ```","solution":"def find_maximum_rectangle(heights): Finds the maximum rectangular area possible in a histogram given its heights. Parameters: heights (list): List of non-negative integers representing the histogram bar heights. Returns: int: The area of the largest rectangle that can be formed within the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): # Push the current bar to the stack if it is higher than the bar at stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with every popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are asked to write a Python function named `islands_count` that calculates the number of islands in a given 2D grid map. An island is defined as a land mass (represented by \'1\') connected horizontally or vertically. Water is represented by \'0\'. The grid is bounded by its edges and does not wrap around. For example: - The grid: ``` 11110 11010 11000 00000 ``` Contains 1 island. - The grid: ``` 11000 11000 00100 00011 ``` Contains 3 islands. Function Signature: ```python def islands_count(grid: list[list[str]]) -> int: pass ``` **Input:** - `grid` (list[list[str]]): A 2D list of strings where each element is either \'1\' (land) or \'0\' (water). **Output:** - `int`: Return the number of islands in the given grid. You should use: - Depth-First Search (DFS) or Breadth-First Search (BFS) to explore each land mass (island). **Examples:** ```python assert islands_count([ [\\"1\\", \\"1\\", \\"1\\", \\"1\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"1\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"0\\", \\"0\\"] ]) == 1 assert islands_count([ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ]) == 3 assert islands_count([ [\\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\"] ]) == 0 ``` **Hints:** - Consider iterating through each cell of the grid. When a \'1\' is encountered, initiate a DFS/BFS from that cell, marking all connected \'1\'s as visited. - Use an auxiliary array or modify the original grid in-place to mark visited cells. ``","solution":"def islands_count(grid): if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count"},{"question":"You are required to write a function called `calculate_moving_average` that computes the moving average of a given 1D list of numbers. The moving average should be calculated over a specified window size. Your function should adhere to the following specifications: 1. **Function Name:** - `calculate_moving_average` 2. **Parameters:** - `data` (list of floats): A list of numerical data points. - `window_size` (int): The number of data points to consider for each moving average calculation. 3. **Requirements:** - The function should return a list containing the moving averages. - If the `window_size` is greater than the length of `data`, the function should return an empty list. - Each moving average should be calculated as the average of the current window of data points. 4. **Output:** - A list of floats representing the moving averages for each window of data points. Here is the function signature: ```python def calculate_moving_average(data, window_size): pass ``` **Example Usage:** ```python data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] window_size = 3 print(calculate_moving_average(data, window_size)) # Output: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] ``` Using this function, you will be able to compute the moving average for a list of numerical data points, which is useful in various data analysis scenarios.","solution":"def calculate_moving_average(data, window_size): Computes the moving average of a given 1D list of numbers over a specified window size. Parameters: - data (list of floats): A list of numerical data points. - window_size (int): The number of data points to consider for each moving average calculation. Returns: - list of floats: A list containing the moving averages. if window_size > len(data) or window_size <= 0: return [] moving_averages = [] for i in range(len(data) - window_size + 1): window = data[i:i + window_size] window_average = sum(window) / window_size moving_averages.append(window_average) return moving_averages"},{"question":"Implement a function that takes a DataFrame containing a \'timestamp\' column and a \'value\' column, and returns a summary of the average \'value\' for each day of the week (Monday, Tuesday, etc.). Additionally, create a bar plot that shows the average \'value\' for each day of the week. The function should output with: dict: A dictionary with the \'weekly_summary\' DataFrame and the \'plot\' Axes object. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(df: pd.DataFrame): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(df: pd.DataFrame): # Ensure \'timestamp\' column is in datetime format df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Extract day of the week from \'timestamp\' column df[\'day_of_week\'] = df[\'timestamp\'].dt.day_name() # Group by day of the week and calculate the average \'value\' weekly_summary = df.groupby(\'day_of_week\')[\'value\'].mean().reindex([ \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\' ]).reset_index() # Create the bar plot fig, ax = plt.subplots() ax.bar(weekly_summary[\'day_of_week\'], weekly_summary[\'value\']) ax.set_xlabel(\'Day of Week\') ax.set_ylabel(\'Average Value\') ax.set_title(\'Average Value by Day of the Week\') plt.xticks(rotation=45) return {\'weekly_summary\': weekly_summary, \'plot\': ax}"},{"question":"You are required to implement a function named `calculate_discounted_price` that calculates the total price after applying multiple discounts sequentially on an initial price. Each discount is represented as a percentage. # Function Signature ```python def calculate_discounted_price(initial_price: float, discounts: List[float]) -> float: pass ``` # Requirements - The function takes in an initial price as a float. - The function also takes in a list of discounts, where each discount is a float representing a percentage. - Apply each discount sequentially to the price. For instance, if the initial price is 100 and the discounts are [10, 20], the first discount reduces the price to 90, and the second discount reduces the new price by 20%. # Constraints - The list of discounts will contain at least one discount and at most 10 discounts. - Each discount percentage will be between 0 and 100. # Example Usage ```python initial_price = 100.0 discounts = [10, 20, 30] print(calculate_discounted_price(initial_price, discounts)) # expected output: 50.4 ``` # Explanation 1. Initial price is 100. 2. First discount of 10% reduces the price to 90 (100 - 100 * 0.1). 3. Second discount of 20% reduces the price to 72 (90 - 90 * 0.2). 4. Third discount of 30% reduces the price to 50.4 (72 - 72 * 0.3). # Note - The order of the discounts matters and should be applied in the order they appear in the list. - Return the final price after all discounts are applied, rounded to two decimal places. ---","solution":"from typing import List def calculate_discounted_price(initial_price: float, discounts: List[float]) -> float: Calculate the total price after applying multiple discounts sequentially. :param initial_price: The initial price before any discounts. :param discounts: A list of discount percentages to apply sequentially. :return: The final price after all discounts have been applied. price = initial_price for discount in discounts: price -= price * (discount / 100) return round(price, 2)"},{"question":"# Problem: Sorting a List of Dictionaries by Multiple Keys In Python, you can sort lists of dictionaries by specific dictionary keys. Your task is to write a function that sorts a list of dictionaries based on multiple keys. The function should use the `sorted` method with the `key` argument from the standard library for the sorting process. You are to write a function named `sort_dicts` that takes two arguments: `dicts_list` and `keys`. The `dicts_list` is a list of dictionaries, and `keys` is a list of keys by which the dictionaries should be sorted. The dictionaries in the list should be sorted primarily by the first key in `keys`, then by the second key, and so on. # Requirements: - **Function Name**: `sort_dicts` - **Arguments**: - `dicts_list` (list): A list of dictionaries to be sorted. - `keys` (list): A list of keys to sort by, in order of priority. - If a key listed in `keys` is not present in some dictionaries, those dictionaries should be placed at the end of the list. Dictionaries without the key should appear in the order they were originally listed. # Example Usage: ```python data = [ {\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Anna\\", \\"age\\": 22, \\"city\\": \\"London\\"}, {\\"name\\": \\"Mike\\", \\"age\\": 32, \\"city\\": \\"San Francisco\\"}, {\\"name\\": \\"Laura\\", \\"age\\": 25}, {\\"name\\": \\"John\\", \\"age\\": 25, \\"city\\": \\"Boston\\"} ] sorted_data = sort_dicts(data, [\\"name\\", \\"age\\"]) print(sorted_data) ``` Expected Output: ```python [ {\\"name\\": \\"Anna\\", \\"age\\": 22, \\"city\\": \\"London\\"}, {\\"name\\": \\"John\\", \\"age\\": 25, \\"city\\": \\"Boston\\"}, {\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Laura\\", \\"age\\": 25}, {\\"name\\": \\"Mike\\", \\"age\\": 32, \\"city\\": \\"San Francisco\\"} ] ``` # Additional Information: - The function should handle sorting by strings and integers naturally. - Use Python\'s `sorted` function with a custom `key` that applies each sort criteria. - Remember to handle cases where a specified key might not be present in some dictionaries.","solution":"def sort_dicts(dicts_list, keys): Sorts a list of dictionaries by multiple keys. Args: dicts_list (list): A list of dictionaries to be sorted. keys (list): A list of keys to sort by, in order of priority. Returns: list: The sorted list of dictionaries. def sort_key(d): # Create a tuple composed of the values for the given keys, using float(\'inf\') to handle missing keys return tuple(d.get(k, float(\'inf\')) for k in keys) # Use sorted() with the custom key function return sorted(dicts_list, key=sort_key)"},{"question":"You are asked to write a Python function named `find_median_of_array` that computes the median of an array of integers. The median is the value separating the higher half from the lower half of a data sample. If the array has an odd number of elements, the median is the middle element. If the array has an even number of elements, the median is the average of the two middle elements. Assume that the array will have at least one element. The function should follow this signature: ```python def find_median_of_array(arr: list) -> float: Calculates the median of the given array of integers. Parameters: arr (list): A list of integers. Returns: float: The median of the array. ``` The function should adhere to the following rules: 1. Sort the array in non-decreasing order. 2. Compute the median based on the number of elements in the array. 3. Return the median as a float. Ensure that your code efficiently handles the sorting and median calculation, and properly deals with both odd and even-length arrays.","solution":"def find_median_of_array(arr: list) -> float: Calculates the median of the given array of integers. Parameters: arr (list): A list of integers. Returns: float: The median of the array. arr.sort() n = len(arr) mid = n // 2 if n % 2 == 0: return (arr[mid - 1] + arr[mid]) / 2.0 else: return float(arr[mid])"},{"question":"You are given a grid of size `m x n`, filled with non-negative numbers, representing an elevation map. The task is to compute the water trapped between the buildings represented by this grid after raining. Write a function `trap_rain_water(elevation_map: List[List[int]]) -> int` to find the total amount of water trapped. The water can be trapped between buildings on the grid, and it can only flow to the lowest neighboring cell. # Detailed Requirements: 1. **Storage of Values**: Use a min-heap to store the boundary cells of the grid and process them in ascending order of their heights. 2. **Direction Functions**: Implement helper function `_neighbors(x: int, y: int) -> list` to determine the neighboring cells for any (x, y) coordinate. - `_neighbors(x: int, y: int) -> list`: This function returns a list of (x, y) tuples representing the valid neighboring positions around the given (x, y) coordinate. 3. **Heuristic Approach**: Use BFS with a min-heap to find the trapped water, simulating the water flow to the lowest neighboring cells. # Examples: Example 1: ``` elevation_map = [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] ``` For the input above, the function `trap_rain_water([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]])` should return `4`. # Constraints: - `1 <= m, n <= 100` - `0 <= elevation_map[i][j] <= 10^4` ```python # Implement the required function: from typing import List import heapq def trap_rain_water(elevation_map: List[List[int]]) -> int: if not elevation_map or not elevation_map[0]: return 0 m, n = len(elevation_map), len(elevation_map[0]) visited = [[False] * n for _ in range(m)] min_heap = [] def _neighbors(x: int, y: int) -> list: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: yield nx, ny for i in range(m): for j in range(n): if i == 0 or i == m - 1 or j == 0 or j == n - 1: heapq.heappush(min_heap, (elevation_map[i][j], i, j)) visited[i][j] = True trapped_water = 0 while min_heap: height, x, y = heapq.heappop(min_heap) for nx, ny in _neighbors(x, y): if not visited[nx][ny]: trapped_water += max(0, height - elevation_map[nx][ny]) heapq.heappush(min_heap, (max(height, elevation_map[nx][ny]), nx, ny)) visited[nx][ny] = True return trapped_water ```","solution":"from typing import List import heapq def trap_rain_water(elevation_map: List[List[int]]) -> int: if not elevation_map or not elevation_map[0]: return 0 m, n = len(elevation_map), len(elevation_map[0]) visited = [[False] * n for _ in range(m)] min_heap = [] def _neighbors(x: int, y: int) -> list: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: yield nx, ny for i in range(m): for j in range(n): if i == 0 or i == m - 1 or j == 0 or j == n - 1: heapq.heappush(min_heap, (elevation_map[i][j], i, j)) visited[i][j] = True trapped_water = 0 while min_heap: height, x, y = heapq.heappop(min_heap) for nx, ny in _neighbors(x, y): if not visited[nx][ny]: trapped_water += max(0, height - elevation_map[nx][ny]) heapq.heappush(min_heap, (max(height, elevation_map[nx][ny]), nx, ny)) visited[nx][ny] = True return trapped_water"},{"question":"You are tasked with evaluating the performance of a machine learning model using cross-validation. Your objective is to create a function named `evaluate_model` that takes in a machine learning estimator, a feature matrix, a target vector, and an integer indicating the number of cross-validation folds. The function should return the mean and standard deviation of the cross-validation scores. The function definition should be as follows: ```python def evaluate_model(estimator, X, y, cv_folds=5): ``` # Requirements: 1. Use the `scikit-learn` library to perform cross-validation. 2. The function should accept the following parameters: - `estimator`: The machine learning model to be evaluated (e.g., an instance of `sklearn.linear_model.LinearRegression`). - `X`: The feature matrix (a pandas DataFrame or a numpy array). - `y`: The target vector (a pandas Series or a numpy array). - `cv_folds` (int, optional): The number of cross-validation folds. Default is 5. 3. Compute the cross-validation scores and return the mean and standard deviation of the scores. # Detailed Steps: 1. Use the `cross_val_score` function from `sklearn.model_selection` to perform cross-validation. 2. Calculate the mean and standard deviation of the cross-validation scores. 3. Return both the mean and the standard deviation as a tuple. # Input: - `estimator` (object): A machine learning model instance from `sklearn`. - `X` (pandas.DataFrame or numpy.ndarray): The feature matrix. - `y` (pandas.Series or numpy.ndarray): The target vector. - `cv_folds` (int, optional): The number of cross-validation folds. Default is 5. # Output: - A tuple containing the mean and standard deviation of the cross-validation scores. # Example: ```python from sklearn.linear_model import LinearRegression import numpy as np import pandas as pd # Example data X = pd.DataFrame(np.random.rand(100, 3), columns=[\'Feature1\', \'Feature2\', \'Feature3\']) y = pd.Series(np.random.rand(100)) # Example model model = LinearRegression() # Evaluate model mean_score, std_score = evaluate_model(model, X, y, cv_folds=5) print(f\'Cross-Validation Mean Score: {mean_score}\') print(f\'Cross-Validation Std Dev: {std_score}\') ``` This should print out the mean and standard deviation of the cross-validation scores for the Linear Regression model evaluated on the given dataset.","solution":"from sklearn.model_selection import cross_val_score import numpy as np def evaluate_model(estimator, X, y, cv_folds=5): Evaluates a machine learning model using cross-validation. Parameters: estimator (object): A machine learning model instance from `sklearn`. X (pandas.DataFrame or numpy.ndarray): The feature matrix. y (pandas.Series or numpy.ndarray): The target vector. cv_folds (int, optional): The number of cross-validation folds. Default is 5. Returns: tuple: A tuple containing the mean and standard deviation of the cross-validation scores. scores = cross_val_score(estimator, X, y, cv=cv_folds) mean_score = np.mean(scores) std_score = np.std(scores) return mean_score, std_score"},{"question":"You are tasked with writing a function `are_anagrams(word1, word2)` that checks if two given words are anagrams of each other. Two words are anagrams if they contain the same characters in the same frequencies, but in different orders. The function should ignore case sensitivity (e.g., \\"Listen\\" and \\"Silent\\" should be considered anagrams). **Function Signature**: ```python def are_anagrams(word1: str, word2: str) -> bool: ``` **Example**: ```python are_anagrams(\\"Listen\\", \\"Silent\\") # should return True since both words are anagrams are_anagrams(\\"Hello\\", \\"Oleh\\") # should return False since \'l\' appears twice in \\"Hello\\" but only once in \\"Oleh\\" are_anagrams(\\"Dormitory\\", \\"Dirty room\\") # considering spaces and cases should return True ``` **Note**: - You should strip any spaces in the words before checking for anagrams. - Consider using a dictionary to count character frequencies efficiently.","solution":"def are_anagrams(word1: str, word2: str) -> bool: Checks if two given words are anagrams of each other. This function will ignore case sensitivity and spaces. # Removing spaces and converting to lowercase word1 = word1.replace(\\" \\", \\"\\").lower() word2 = word2.replace(\\" \\", \\"\\").lower() # Check if lengths are different after normalization if len(word1) != len(word2): return False # Using a dictionary to count character frequencies from collections import Counter return Counter(word1) == Counter(word2)"},{"question":"In this problem, you are required to write a function to perform matrix multiplication using two 2-D numpy arrays. Matrix multiplication is a fundamental operation in linear algebra, and it is widely used in various fields such as machine learning, data analysis, and scientific computing. 1. **Parameters**: - `A`: A 2-D numpy array representing the first matrix. - `B`: A 2-D numpy array representing the second matrix. 2. **Function**: - Write a function named `matrix_multiplication` which takes the above parameters. - The function should return the result of the matrix multiplication of `A` and `B` using the following formula for element (C_{ij}) in the resulting matrix (C): [ C_{ij} = sum_{k} A_{ik} cdot B_{kj} ] 3. **Requirements**: - Use numpy\'s built-in functionalities (e.g., `np.dot()`) to perform the matrix multiplication. - Assume that the necessary libraries (`numpy`) are already imported. - The matrices `A` and `B` must be conformable for multiplication (i.e., the number of columns in `A` is equal to the number of rows in `B`). You may assume that this condition is always met. **Example**: ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6]]) B = np.array([[7, 8], [9, 10], [11, 12]]) result = matrix_multiplication(A, B) print(result) ``` Expected output: ``` array([[ 58, 64], [139, 154]]) ``` The above example should be able to run without error if you implement the function correctly.","solution":"import numpy as np def matrix_multiplication(A, B): Perform matrix multiplication of two 2-D numpy arrays. Parameters: A (np.ndarray): First matrix to multiply. B (np.ndarray): Second matrix to multiply. Returns: np.ndarray: The result of the matrix multiplication. return np.dot(A, B)"},{"question":"Load a dataset and perform a Principal Component Analysis (PCA) to reduce the data to n components. Return a DataFrame that includes the original data with the principal components appended as new columns. Additionally, return the explained variance ratio of the PCA. The function should output: tuple: pandas.DataFrame: A DataFrame containing the original data and the principal components. list: The explained variance ratio of the PCA. You should write self-contained code starting with: ```python import pandas as pd from sklearn.decomposition import PCA def task_func(data, n=2): ```","solution":"import pandas as pd from sklearn.decomposition import PCA def task_func(data, n=2): Perform PCA on the given data to reduce it to n components. Parameters: - data: pandas DataFrame, the input dataset. - n: int, the number of principal components to reduce the data to. Returns: - tuple: - pandas.DataFrame: A DataFrame containing the original data and the principal components. - list: The explained variance ratio of the PCA. pca = PCA(n_components=n) principal_components = pca.fit_transform(data) principal_df = pd.DataFrame(data=principal_components, columns=[f\'PC{i+1}\' for i in range(n)]) final_df = pd.concat([data.reset_index(drop=True), principal_df], axis=1) explained_variance_ratio = pca.explained_variance_ratio_.tolist() return final_df, explained_variance_ratio"},{"question":"# Matrix Determinant Calculation Your task is to write a function `calculate_matrix_determinant(matrix)` that computes the determinant of a given square matrix. The determinant of a matrix is a special number that can be calculated from its elements and provides insights into the properties of the matrix, such as whether it is invertible or not. Parameters: 1. `matrix`: A numpy array representing a square matrix. Shape: `(n, n)` Returns: - A scalar value representing the determinant of the matrix. Instructions: 1. Ensure the input matrix is square (i.e., it has the same number of rows and columns). 2. Use the provided helper function `determinant_recursive` to calculate the determinant of the matrix recursively. 3. Handle the base case for 2x2 matrices directly within the helper function. 4. For larger matrices, use the technique of cofactor expansion along the first row. Example: ```python import numpy as np matrix = np.array([[1, 2], [3, 4]]) det = calculate_matrix_determinant(matrix) print(det) # The output should be a scalar value representing the determinant of the matrix ``` Helper Function Template: ```python def determinant_recursive(matrix): Recursively calculate the determinant of a matrix. # Base case: 1x1 matrix if matrix.shape == (1, 1): return matrix[0, 0] # Base case: 2x2 matrix if matrix.shape == (2, 2): return matrix[0, 0] * matrix[1, 1] - matrix[0, 1] * matrix[1, 0] det = 0 for col in range(matrix.shape[1]): minor = np.delete(np.delete(matrix, 0, axis=0), col, axis=1) cofactor = ((-1) ** col) * matrix[0, col] * determinant_recursive(minor) det += cofactor return det ``` Final Function Template: ```python def calculate_matrix_determinant(matrix): Calculate the determinant of the given square matrix. assert matrix.shape[0] == matrix.shape[1], \\"Input must be a square matrix.\\" return determinant_recursive(matrix) ``` # Constraints: - Assume `numpy` has been imported as `np`. - Only square matrices will be provided as input. - Input matrices with zero rows or columns will not be given. # Important: Ensure to use efficient indexing and avoid unnecessary computations where possible while implementing the function.","solution":"import numpy as np def determinant_recursive(matrix): Recursively calculate the determinant of a matrix. # Base case: 1x1 matrix if matrix.shape == (1, 1): return matrix[0, 0] # Base case: 2x2 matrix if matrix.shape == (2, 2): return matrix[0, 0] * matrix[1, 1] - matrix[0, 1] * matrix[1, 0] det = 0 for col in range(matrix.shape[1]): minor = np.delete(np.delete(matrix, 0, axis=0), col, axis=1) cofactor = ((-1) ** col) * matrix[0, col] * determinant_recursive(minor) det += cofactor return det def calculate_matrix_determinant(matrix): Calculate the determinant of the given square matrix. assert matrix.shape[0] == matrix.shape[1], \\"Input must be a square matrix.\\" return determinant_recursive(matrix)"},{"question":"You are tasked with implementing a file system hierarchy where you can create, delete, rename, and search for directories. Implement a class `FileSystem` to manage these operations. Specifically, implement the following methods: 1. `create_directory(path)`: This method accepts a string `path` representing the absolute path of the directory to be created. Create all necessary parent directories. If the directory already exists, do nothing. 2. `delete_directory(path)`: This method accepts a string `path` representing the absolute path of the directory to be deleted. If the directory doesn\'t exist, do nothing. If it exists, delete the directory and all of its subdirectories. 3. `rename_directory(old_path, new_path)`: This method accepts two strings `old_path` and `new_path`. Rename the directory specified by `old_path` to `new_path`. If `old_path` doesn\'t exist or `new_path` already exists, do nothing. 4. `search_directory(name)`: This method accepts a string `name` representing the name of a directory and returns a list of absolute paths of all directories with that name in the file system. The search should be case-sensitive. The `FileSystem` class should manage the directory hierarchy in a case-sensitive manner and ensure efficiency in performing the operations. Example usage: ```python fs = FileSystem() fs.create_directory(\\"/a/b/c\\") fs.create_directory(\\"/a/b/d\\") fs.create_directory(\\"/a/e\\") print(fs.search_directory(\\"b\\")) # Output: [\\"/a/b\\"] print(fs.search_directory(\\"c\\")) # Output: [\\"/a/b/c\\"] fs.rename_directory(\\"/a/b\\", \\"/a/x\\") print(fs.search_directory(\\"b\\")) # Output: [] print(fs.search_directory(\\"x\\")) # Output: [\\"/a/x\\"] fs.delete_directory(\\"/a/x\\") print(fs.search_directory(\\"x\\")) # Output: [] ``` Your task is to implement the `FileSystem` class and its methods to perform the required operations. ```python class FileSystem: def __init__(self): # Initialize the file system, possibly with a root directory. self.fs = {} def create_directory(self, path): # Create the specified directory and necessary parent directories. pass def delete_directory(self, path): # Delete the specified directory and all its subdirectories. pass def rename_directory(self, old_path, new_path): # Rename the specified directory. pass def search_directory(self, name): # Return the list of absolute paths of directories with the specified name. pass ```","solution":"class FileSystem: def __init__(self): self.fs = {} def _get_dir(self, path): parts = path.strip(\'/\').split(\'/\') current = self.fs for part in parts: if part not in current: current[part] = {} current = current[part] return current def _find_parents(self, path): parts = path.strip(\'/\').split(\'/\') current = self.fs for part in parts[:-1]: if part not in current: return None current = current[part] return current, parts[-1] def _find_all(self, root, name, base_path): result = [] for k, v in root.items(): if k == name: result.append(base_path + \'/\' + k if base_path else \'/\' + k) result.extend(self._find_all(v, name, base_path + \'/\' + k if base_path else \'/\' + k)) return result def create_directory(self, path): self._get_dir(path) def delete_directory(self, path): parents, name = self._find_parents(path) if parents and name in parents: del parents[name] def rename_directory(self, old_path, new_path): old_parents, old_name = self._find_parents(old_path) new_parents, new_name = self._find_parents(new_path) if old_parents and old_name in old_parents and new_parents and new_name not in new_parents: new_parents[new_name] = old_parents[old_name] del old_parents[old_name] def search_directory(self, name): return self._find_all(self.fs, name, \'\')"},{"question":"You are given a list of integers. Write a function to organize these integers into a dictionary where the keys are the unique integers from the list and the values are their respective frequencies in the list. The function should return this dictionary. Additionally, the function should identify and return a list of integers that appear more than once in the original list. The function must be efficient and should make use of Python’s built-in data structures for optimal performance. The function should output with: dict: A dictionary with keys as unique integers and values as their frequencies. list: A list of integers that appear more than once in the input list. You should write self-contained code starting with: ``` def organize_and_find_duplicates(numbers): ```","solution":"def organize_and_find_duplicates(numbers): Organizes the input list of integers into a dictionary where the keys are the unique integers, and the values are their frequencies in the list. It also returns a list of integers that appear more than once in the input list. Args: numbers (list): List of integers Returns: dict: Dictionary with unique integers as keys and their frequencies as values list: List of integers that appear more than once in the original list frequency_dict = {} duplicates = set() for number in numbers: if number in frequency_dict: frequency_dict[number] += 1 duplicates.add(number) else: frequency_dict[number] = 1 return frequency_dict, list(duplicates)"},{"question":"Given a dataset containing sales information, write a function named `process_sales_data` which takes the file path of a CSV file as input, processes the data, and performs several tasks as described below. This problem will help you learn to use the pandas library for data manipulation and analysis. # Dataset Description The CSV file named `sales_data.csv` contains the following columns: - `product_id`: ID of the product - `date`: Date of the sale - `units_sold`: Number of units sold - `unit_price`: Price per unit of the product # Function Requirements 1. **Read Data:** Use `pandas.read_csv` to read the CSV file into a pandas DataFrame. 2. **Data Cleaning:** Filter the data to keep only rows where `units_sold` and `unit_price` are greater than 0. 3. **Data Transformation:** Add a new column `total_sales` which is the product of `units_sold` and `unit_price`. 4. **Basic Statistics:** - Print the total sales (sum of `total_sales`). - Print the average units sold per sale (mean of `units_sold`). 5. **Sales by Product:** - Group the data by `product_id` and calculate the total sales for each product. - Sort and display the top 10 products by total sales. 6. **Visualization:** - Plot a bar chart of the top 10 products by total sales and save it as `top10_sales.png`. # Function Signature ```python def process_sales_data(file_path: str) -> None: pass ``` # Example Usage ```python file_path = \'path/to/sales_data.csv\' process_sales_data(file_path) ``` # Assumptions - The input file will always be in the correct format with valid data types. - The `pandas` and `matplotlib` libraries are available for reading the file and plotting the data.","solution":"import pandas as pd import matplotlib.pyplot as plt def process_sales_data(file_path: str) -> None: Processes sales data from a CSV file, filters and transforms the data, calculates statistics, and generates a bar chart of top 10 products by total sales. Parameters: file_path (str): path to the CSV file containing sales data. # Read data data = pd.read_csv(file_path) # Data Cleaning: Filter rows where units_sold and unit_price are greater than 0 data = data[(data[\'units_sold\'] > 0) & (data[\'unit_price\'] > 0)] # Data Transformation: Add \'total_sales\' column data[\'total_sales\'] = data[\'units_sold\'] * data[\'unit_price\'] # Basic Statistics total_sales = data[\'total_sales\'].sum() avg_units_sold = data[\'units_sold\'].mean() print(f\'Total Sales: {total_sales}\') print(f\'Average Units Sold per Sale: {avg_units_sold}\') # Sales by Product product_sales = data.groupby(\'product_id\')[\'total_sales\'].sum().reset_index() top10_products = product_sales.sort_values(by=\'total_sales\', ascending=False).head(10) print(\'Top 10 Products by Total Sales:\') print(top10_products) # Visualization: Plot bar chart of top 10 products by total sales plt.figure(figsize=(10, 6)) plt.bar(top10_products[\'product_id\'].astype(str), top10_products[\'total_sales\']) plt.xlabel(\'Product ID\') plt.ylabel(\'Total Sales\') plt.title(\'Top 10 Products by Total Sales\') plt.savefig(\'top10_sales.png\') plt.close()"},{"question":"Create a function to process a list of URLs to extract the domain names and determine the top N most frequent domains. This task involves parsing each URL, extracting the domain part, counting the occurrences of each domain, and then identifying the top N domains by frequency using Python\'s `urllib.parse` and `collections.Counter`. The function should output with: List: A list of tuples where each tuple contains a domain and its frequency, sorted by frequency in descending order. You should write self-contained code starting with: ``` from urllib.parse import urlparse from collections import Counter def extract_top_domains(urls, N): ```","solution":"from urllib.parse import urlparse from collections import Counter def extract_top_domains(urls, N): Extract the top N most frequent domains from a list of URLs. Args: urls (list of str): List of URLs. N (int): Number of top domains to return. Returns: list of tuples: Each tuple contains a domain and its frequency, sorted by frequency in descending order. # Extract domain names domains = [urlparse(url).netloc for url in urls] # Count occurrences of each domain domain_counts = Counter(domains) # Get the top N domains by frequency top_domains = domain_counts.most_common(N) return top_domains"},{"question":"Write a function named `encrypt_message` that takes a string `message` and an integer `n` as input and returns an encrypted version of the message. The encryption technique involves shifting each character in the message by `n` positions in the ASCII table. - For example, if `n = 1`, the character \'a\' becomes \'b\', \'b\' becomes \'c\', and so on. - If the shift results in a character that goes beyond \'z\', it wraps around to the beginning of the alphabet (\'z\' + 1 becomes \'a\'). # Function Signature ```python def encrypt_message(message: str, n: int) -> str: # Your code here ``` # Input - The input parameter `message` (string): The message string which needs to be encrypted. - The input parameter `n` (integer): The number of positions each character in the message should be shifted. # Output - The function returns the encrypted message as a string. # Example ```python print(encrypt_message(\'abc\', 1)) # Should return \\"bcd\\" print(encrypt_message(\'xyz\', 2)) # Should return \\"zab\\" print(encrypt_message(\'hello\', 3)) # Should return \\"khoor\\" print(encrypt_message(\'encrypt\', 5)) # Should return \\"jshtxtu\\" ``` # Note - The function should handle both uppercase and lowercase letters individually, maintaining their case. - Non-alphabetical characters should remain unchanged. - Follow good programming practices, including code readability and meaningful variable naming.","solution":"def encrypt_message(message: str, n: int) -> str: encrypted_message = [] for char in message: if char.isalpha(): shift = ord(\'A\') if char.isupper() else ord(\'a\') encrypted_char = chr((ord(char) - shift + n) % 26 + shift) encrypted_message.append(encrypted_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Create a function named `simulate_particle_motion` which simulates the motion of particles in a 2D space. The function should take the following parameters: `num_particles`, `num_steps`, `bounds`, and `speed`. The function will simulate the random walk of particles within the given bounds, and plot their trajectories at each step. Specifically: 1. Initialize the positions of `num_particles` particles randomly within the bounds specified by `bounds` which is a tuple `(xmin, xmax, ymin, ymax)`. 2. For `num_steps` iterations, update the position of each particle by adding a random value scaled by `speed` drawn from a normal distribution to the x and y coordinates. 3. If a particle moves outside the specified bounds, reflect its position back into the bounds. 4. Store and visualize the trajectory of each particle using different colors. 5. After all steps are completed, overlay the final positions of the particles onto the plot. Use the following relevant library APIs in your function: - `numpy.random.uniform` - `numpy.random.normal` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.scatter` - `matplotlib.pyplot.xlim` - `matplotlib.pyplot.ylim` Example usage: ```python simulate_particle_motion(num_particles=10, num_steps=100, bounds=(-10, 10, -10, 10), speed=0.5) ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_particle_motion(num_particles, num_steps, bounds, speed): Simulates the motion of particles in a 2D space. Parameters: - num_particles: Number of particles - num_steps: Number of steps for the simulation - bounds: Tuple specifying the bounds (xmin, xmax, ymin, ymax) - speed: Speed scaling factor for the random walk xmin, xmax, ymin, ymax = bounds # Initialize positions of the particles randomly within bounds x_positions = np.random.uniform(xmin, xmax, num_particles) y_positions = np.random.uniform(ymin, ymax, num_particles) # List to store trajectories for plotting trajectories = [[(x, y)] for x, y in zip(x_positions, y_positions)] for step in range(num_steps): # Generate random movements x_movements = np.random.normal(0, speed, num_particles) y_movements = np.random.normal(0, speed, num_particles) # Update positions and check for boundary conditions x_positions += x_movements y_positions += y_movements # Reflect particles at boundaries x_positions = np.clip(x_positions, xmin, xmax) y_positions = np.clip(y_positions, ymin, ymax) # Update trajectories for i in range(num_particles): trajectories[i].append((x_positions[i], y_positions[i])) # Plot trajectories plt.figure() for trajectory in trajectories: xs, ys = zip(*trajectory) plt.plot(xs, ys) # Overlay final positions of the particles plt.scatter(x_positions, y_positions, color=\'red\') plt.xlim(xmin, xmax) plt.ylim(ymin, ymax) plt.title(\'Particle Motion Simulation\') plt.xlabel(\'X Position\') plt.ylabel(\'Y Position\') plt.show()"},{"question":"You have been provided with a JSON file named \\"employee_performance.json\\" that contains an array of employee records. Each record consists of the following fields: `employee_id`, `department`, `performance_score`, and additional metadata. Your task is to write a function `generate_department_reports()` that performs the following operations: 1. Reads the JSON file into a list of dictionaries. 2. Segregates the employees based on their `department` field. 3. For each department, generates a report as a text file in the \\"department-reports/\\" directory. Each filename should be formatted as `{department}.txt`. 4. The content of each text file should include the average `performance_score` of the employees in that department, followed by the list of `employee_id`s of those employees. 5. The format of the text file should be: ``` Department: <department_name> Average Performance Score: <average_score> Employees: <employee_id_1> <employee_id_2> ... ``` **Note:** The directory \\"department-reports/\\" already exists, and you do not need to create it. You can assume that the necessary Python libraries for reading JSON files and performing basic file operations are available. Write a Python function named `generate_department_reports()` to achieve the above requirements. **Function Signature:** ```python def generate_department_reports(): pass ```","solution":"import json import os def generate_department_reports(): Reads the JSON file, segregates employees by department, and generates a report for each department. # Load employee performance data from json file with open(\'employee_performance.json\', \'r\') as file: employee_data = json.load(file) department_data = {} # Segregate employees based on department and calculate performance scores for record in employee_data: department = record[\'department\'] if department not in department_data: department_data[department] = { \'performance_scores\': [], \'employee_ids\': [] } department_data[department][\'performance_scores\'].append(record[\'performance_score\']) department_data[department][\'employee_ids\'].append(record[\'employee_id\']) # Generate department reports for department, data in department_data.items(): average_score = sum(data[\'performance_scores\']) / len(data[\'performance_scores\']) with open(f\'department-reports/{department}.txt\', \'w\') as report: report.write(f\\"Department: {department}n\\") report.write(f\\"Average Performance Score: {average_score:.2f}nn\\") report.write(\\"Employees:n\\") for employee_id in data[\'employee_ids\']: report.write(f\\"{employee_id}n\\")"},{"question":"Consider a situation where you need to create a function that simulates the behavior of a bank account. The function should handle account creation, deposit, withdrawal, and checking the balance. Each transaction must be logged in a transaction history. **Function signature:** ```python def bank_account(actions: list) -> list: ``` **Function parameters:** 1. `actions` (list): A list of tuples, where each tuple represents an action. The first element of the tuple is a string describing the action (\'create\', \'deposit\', \'withdraw\', \'check_balance\') and the subsequent elements vary depending on the action. **Objective:** Create a simulated bank account that can perform different banking operations based on the given actions list. Maintain a running balance and log each transaction in history. **Requirements:** 1. The \'create\' action initializes the account with a starting balance. 2. The \'deposit\' action adds a specific amount to the account balance. 3. The \'withdraw\' action deducts a specific amount from the account balance if sufficient funds are available, otherwise it should not change the balance. 4. The \'check_balance\' action returns the current balance. 5. Each transaction (including balance checks) should be logged in the transaction history, which consists of {\'action\': action_type, \'amount\': amount (if any), \'balance\': balance_after_transaction}. **Example Usage:** ```python actions = [ (\'create\', 100), (\'deposit\', 50), (\'withdraw\', 30), (\'check_balance\',), (\'withdraw\', 150), (\'check_balance\',) ] result = bank_account(actions) print(result) ``` **Constraints:** - Assume that the function will be provided with valid input. - For simplicity, assume \'withdraw\' and \'deposit\' actions will only handle positive values. - The balance should never be negative. If a \'withdraw\' action would cause a negative balance, it should be ignored. - The function should return a list of dictionaries representing the transaction history. The output of the example usage should be: ```python [ {\'action\': \'create\', \'amount\': 100, \'balance\': 100}, {\'action\': \'deposit\', \'amount\': 50, \'balance\': 150}, {\'action\': \'withdraw\', \'amount\': 30, \'balance\': 120}, {\'action\': \'check_balance\', \'balance\': 120}, {\'action\': \'withdraw\', \'amount\': 150, \'balance\': 120}, # transaction ignored {\'action\': \'check_balance\', \'balance\': 120} ] ``` Implement the `bank_account` function to fulfill the given requirements.","solution":"def bank_account(actions: list) -> list: balance = 0 transaction_history = [] for action in actions: if action[0] == \'create\': balance = action[1] transaction_history.append({\'action\': \'create\', \'amount\': balance, \'balance\': balance}) elif action[0] == \'deposit\': amount = action[1] balance += amount transaction_history.append({\'action\': \'deposit\', \'amount\': amount, \'balance\': balance}) elif action[0] == \'withdraw\': amount = action[1] if balance >= amount: balance -= amount transaction_history.append({\'action\': \'withdraw\', \'amount\': amount, \'balance\': balance}) elif action[0] == \'check_balance\': transaction_history.append({\'action\': \'check_balance\', \'balance\': balance}) return transaction_history"},{"question":"You are tasked with creating a program to compare the memory usage of two different list generating functions over a range of list sizes. The goal is to plot the memory usage of these functions using the `matplotlib` library in order to visually analyze their memory consumption patterns. Here is a breakdown of the steps you need to follow: 1. **Measure the Memory Usage:** - For each value of `n` from 1000 to 20000 incremented by 1000: - Create a list of `n` elements using both `generate_list1` and `generate_list2`. - Measure and record the memory usage of each list using the `sys.getsizeof` function. 2. **Plot the Memory Usage:** - Use `matplotlib` to create a single plot: - The x-axis should represent the list size `n`. - The y-axis should represent the memory usage in bytes. - Plot two lines on the same graph, one for each list generating function. To begin, implement the function `plot_memory_usage(generate_list1, generate_list2)`, where: - `generate_list1` is a function that generates a list of length `n` filled with `n`. - `generate_list2` is a function that generates a list of length `n` filled with random integers between 0 and `n`. **Note:** Use `matplotlib.pyplot.plot` and `matplotlib.pyplot.legend` to create the plot. # [Function Signature] ```python def plot_memory_usage(generate_list1, generate_list2): # Implement the solution here pass ``` # [Example Call] ```python import sys import random def generate_list1(n): return [n] * n def generate_list2(n): return [random.randint(0, n) for _ in range(n)] plot_memory_usage(generate_list1, generate_list2) ```","solution":"import sys import random import matplotlib.pyplot as plt def plot_memory_usage(generate_list1, generate_list2): sizes = list(range(1000, 20001, 1000)) memory_usage_1 = [] memory_usage_2 = [] for n in sizes: list1 = generate_list1(n) list2 = generate_list2(n) memory_usage_1.append(sys.getsizeof(list1)) memory_usage_2.append(sys.getsizeof(list2)) plt.plot(sizes, memory_usage_1, label=\'generate_list1\') plt.plot(sizes, memory_usage_2, label=\'generate_list2\') plt.xlabel(\'List Size (n)\') plt.ylabel(\'Memory Usage (bytes)\') plt.title(\'Memory Usage Comparison of List Generating Functions\') plt.legend() plt.show() def generate_list1(n): return [n] * n def generate_list2(n): return [random.randint(0, n) for _ in range(n)] # Example call plot_memory_usage(generate_list1, generate_list2)"},{"question":"Generate all permutations of the numbers 1 to 5 and filter out permutations where the sum of the first and last elements is an even number. Return a tuple containing two elements: 1. A list of valid permutations. 2. The total count of valid permutations. You should write self-contained code starting with: ``` from itertools import permutations def task_func(): ```","solution":"from itertools import permutations def task_func(): numbers = [1, 2, 3, 4, 5] all_perms = permutations(numbers) valid_perms = [perm for perm in all_perms if (perm[0] + perm[-1]) % 2 != 0] total_count = len(valid_perms) return (valid_perms, total_count)"},{"question":"** You are required to implement a function called `process_log_entries()` that reads and processes log entries from a text file and generates a summary report based on specific criteria. The log entries are stored in a file where each line represents a separate entry. Each log entry is composed of the following fields separated by a comma: - Timestamp (format: YYYY-MM-DD HH:MM:SS) - Log Level (INFO, WARNING, ERROR) - Message (a string of text describing the log event) Your task is to: 1. Read the log entries from a file called `logs.txt`. 2. Count the number of entries for each log level (INFO, WARNING, ERROR). 3. Identify and store the first and last occurrence timestamps for each log level. 4. Write a summary report to a new file called `log_summary.txt` that includes: - Total counts of each log level. - The first and last occurrence timestamps for each log level. Assume the log entries in the `logs.txt` file are already sorted by timestamp in ascending order. The function should conform to the following structure: ```python def process_log_entries(): # Initialize counters and timestamps log_counts = {\\"INFO\\": 0, \\"WARNING\\": 0, \\"ERROR\\": 0} first_occurrence = {\\"INFO\\": None, \\"WARNING\\": None, \\"ERROR\\": None} last_occurrence = {\\"INFO\\": None, \\"WARNING\\": None, \\"ERROR\\": None} # Read log entries from the file with open(\'logs.txt\', \'r\') as file: for line in file: timestamp, level, message = line.strip().split(\', \') log_counts[level] += 1 if first_occurrence[level] is None: first_occurrence[level] = timestamp last_occurrence[level] = timestamp # Write the summary report to a new file with open(\'log_summary.txt\', \'w\') as summary_file: for level in [\'INFO\', \'WARNING\', \'ERROR\']: summary_file.write(f\'{level} Count: {log_counts[level]}n\') summary_file.write(f\'First Occurrence: {first_occurrence[level]}n\') summary_file.write(f\'Last Occurrence: {last_occurrence[level]}nn\') # End of function ``` Specific Requirements: - Ensure that your function opens and reads the `logs.txt` file correctly. - Properly handle any potential exceptions related to file operations. - Assume the format of the log entries in `logs.txt` is correct and consistent. The function `process_log_entries()` should generate a summary in the `log_summary.txt` file that effectively captures the required log level information.","solution":"def process_log_entries(file_input=\'logs.txt\', file_output=\'log_summary.txt\'): Reads log entries from a file and generates a summary report with counts and occurrence timestamps. Args: file_input (str): The input file path containing log entries. Defaults to \'logs.txt\'. file_output (str): The output file path for the summary report. Defaults to \'log_summary.txt\'. # Initialize counters and timestamps log_counts = {\\"INFO\\": 0, \\"WARNING\\": 0, \\"ERROR\\": 0} first_occurrence = {\\"INFO\\": None, \\"WARNING\\": None, \\"ERROR\\": None} last_occurrence = {\\"INFO\\": None, \\"WARNING\\": None, \\"ERROR\\": None} try: # Read log entries from the file with open(file_input, \'r\') as file: for line in file: timestamp, level, message = line.strip().split(\', \') log_counts[level] += 1 if first_occurrence[level] is None: first_occurrence[level] = timestamp last_occurrence[level] = timestamp # Write the summary report to a new file with open(file_output, \'w\') as summary_file: for level in [\'INFO\', \'WARNING\', \'ERROR\']: summary_file.write(f\'{level} Count: {log_counts[level]}n\') summary_file.write(f\'First Occurrence: {first_occurrence[level]}n\') summary_file.write(f\'Last Occurrence: {last_occurrence[level]}nn\') except Exception as e: print(f\\"Error processing log entries: {e}\\")"},{"question":"Write a function `rolling_average(nums, k)` that computes the rolling average of a list of numbers. The rolling average is defined as the mean of the last `k` elements for each element in the list. If there are fewer than `k` elements available at any point, use the mean of all the available elements. You should use the `numpy` library for efficient computation. # Function Signature: ```python def rolling_average(nums, k): pass ``` # Parameters: - **nums**: list of numerical values - **k**: positive integer representing the number of elements to consider for the rolling average # Returns: - **result**: list of floating-point values representing the rolling average for each element in `nums` # Constraints: - Use numpy functions wherever possible for efficient computation - `k` is always greater than 0 and less than or equal to the length of `nums` - The list `nums` will always contain at least one element # Examples: ```python >>> rolling_average([1, 2, 3, 4, 5], 3) [1.0, 1.5, 2.0, 3.0, 4.0] >>> rolling_average([10, 20, 30, 40, 50], 2) [10.0, 15.0, 25.0, 35.0, 45.0] >>> rolling_average([5, 8, 3], 5) [5.0, 6.5, 5.333333333333333] ``` **Note:** - In the first example, the rolling average is computed using the last 3 elements. For the initial elements where fewer than 3 elements are available, the average is computed using all available elements. - In the second example, the rolling average is computed using the last 2 elements. - In the third example, even though `k` is 5, because there are fewer than 5 elements, it computes the average using all available elements for each step.","solution":"import numpy as np def rolling_average(nums, k): Returns the rolling average of \'nums\' with window size \'k\'. result = [] for i in range(len(nums)): window_start = max(0, i - k + 1) window = nums[window_start:i+1] result.append(np.mean(window)) return result"},{"question":"Implement a function that reads a JSON file containing a nested dictionary, flattens the dictionary into a single level, and converts it into a pandas DataFrame. Each key in the nested dictionary should become a column in the DataFrame with its corresponding value as the row entry. The function should handle multiple levels of nesting. The function should output: pd.DataFrame: A DataFrame with flattened data from the original nested dictionary. You should write self-contained code starting with: ``` import pandas as pd import json def flatten_json_to_df(json_path): ```","solution":"import pandas as pd import json def flatten_json_to_df(json_path): Reads a JSON file containing a nested dictionary, flattens it into a single level, and converts it into a pandas DataFrame. Args: json_path : str : Path to the JSON file Returns: pd.DataFrame : A DataFrame with flattened data from the original nested dictionary def flatten_dict(d, parent_key=\'\', sep=\'.\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) with open(json_path, \'r\') as json_file: data = json.load(json_file) # Flatten the JSON object and convert to DataFrame flat_data = flatten_dict(data) df = pd.DataFrame([flat_data]) return df"},{"question":"Implement a function that simulates the sales data for different product categories over several months. Calculate the total sales for each month and append this information as a new row in the DataFrame. Randomly assign the sales figures using np.random.randint(1000, 5000) for each category. The function should output: df (pandas.DataFrame): The DataFrame with product categories, monthly sales, and calculated totals. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def task_func(categories=[\\"Electronics\\", \\"Furniture\\", \\"Clothing\\"], months=[\\"Jan\\", \\"Feb\\", \\"Mar\\"], seed=42): ```","solution":"import pandas as pd import numpy as np def task_func(categories=[\\"Electronics\\", \\"Furniture\\", \\"Clothing\\"], months=[\\"Jan\\", \\"Feb\\", \\"Mar\\"], seed=42): Generates a DataFrame with simulated sales data for different product categories over several months. Calculates and appends the total sales for each month as a new row. Parameters: categories (list of str): List of product categories months (list of str): List of months seed (int): Seed for the random number generator for reproducibility Returns: df (pandas.DataFrame): DataFrame with product categories, monthly sales, and total sales np.random.seed(seed) data = {} for month in months: data[month] = np.random.randint(1000, 5000, len(categories)) df = pd.DataFrame(data, index=categories) df.loc[\'Total\'] = df.sum() return df"},{"question":"You are asked to implement a function `playlist_generator` which manages and manipulates a playlist of songs. This function should support adding songs, removing songs, and shuffling the order of songs. The primary goal is to ensure that the operations preserve the correct order and content of the playlist, even as modifications are made. # Function Signature ```python def playlist_generator(commands: List[Tuple[str, Union[str, None]]]) -> List[str]: ``` # Parameters - `commands` (List[Tuple[str, Union[str, None]]]): A list of tuples where each tuple represents an operation to be performed on the playlist. - The first element of the tuple is a string representing the command: either \'ADD\', \'REMOVE\', or \'SHUFFLE\'. - The second element of the tuple is either the name of the song (for \'ADD\' and \'REMOVE\' commands) or `None` (for \'SHUFFLE\' command). # Returns - `List[str]`: The final state of the playlist after processing all the commands. # Requirements 1. The \'ADD\' command should add the specified song to the end of the playlist. 2. The \'REMOVE\' command should remove the specified song from the playlist if it exists. If the song is not found, ignore the command. 3. The \'SHUFFLE\' command should randomly shuffle the order of songs in the playlist. Use the `random.shuffle` function to perform the shuffle. 4. Ensure the function correctly handles a mix of commands in any order. # Example ```python commands = [ (\'ADD\', \'Song A\'), (\'ADD\', \'Song B\'), (\'ADD\', \'Song C\'), (\'REMOVE\', \'Song B\'), (\'SHUFFLE\', None), (\'ADD\', \'Song D\') ] final_playlist = playlist_generator(commands) print(final_playlist) ``` Expected output: ```python [\'Song A\', \'Song C\', \'Song D\'] # Note: Order of Song A, Song C, and Song D may vary due to shuffling. ```","solution":"from typing import List, Tuple, Union import random def playlist_generator(commands: List[Tuple[str, Union[str, None]]]) -> List[str]: playlist = [] for command in commands: action, song = command if action == \'ADD\' and song is not None: playlist.append(song) elif action == \'REMOVE\' and song is not None: if song in playlist: playlist.remove(song) elif action == \'SHUFFLE\' and song is None: random.shuffle(playlist) return playlist"},{"question":"Write a function to perform K-means clustering on a given 2D data array, and plot the resulting clusters along with their centroids. The function should take a 2D numpy array and the number of clusters as input, use `sklearn` to perform K-means clustering, plot the clustered data points with different colors for each cluster, and mark the centroids with a distinct marker. The function should return the matplotlib Axes object containing the plot. The function should output with: ``` matplotlib.axes._axes.Axes: Axes object of the cluster plot. ``` You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def task_func(data_array, n_clusters): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def task_func(data_array, n_clusters): Perform K-means clustering on a given 2D data array and plot the resulting clusters along with their centroids. Parameters: data_array (numpy.ndarray): A 2D numpy array with shape (n_samples, 2). n_clusters (int): The number of clusters to form. Returns: matplotlib.axes._axes.Axes: Axes object of the cluster plot. # Perform K-means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=0) kmeans.fit(data_array) # Get the cluster labels and cluster centers labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Plot the clustered data points fig, ax = plt.subplots() scatter = ax.scatter(data_array[:, 0], data_array[:, 1], c=labels, cmap=\'viridis\') # Mark the centroids ax.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'X\', s=100, label=\'Centroids\') # Add a legend ax.legend() return ax"},{"question":"Create a function that processes a text file to count the frequency of each word and identifies the top N most frequent words. Here is what the function should accomplish: 1. **Read the file**: The text file is given as \'text_data.txt\'. 2. **Clean and tokenize**: Convert all text to lowercase, remove punctuation, and split the text into words. 3. **Count frequencies**: Count the frequency of each word in the file. 4. **Identify top N words**: Identify the top N most frequent words and their counts. 5. **Return result**: Return a dictionary where the keys are the words and the values are their counts. The function signature should be `def top_n_words(N: int) -> dict:`. **Data Format**: The text file (\'text_data.txt\') contains plain English text. Here is an example content: ``` This is a sample text file. This file contains several words. Some of these words repeat, and this sample is just to illustrate the point. ``` To summarize, the requirements for the function are: - Read data from a text file named \'text_data.txt\'. - Clean the text by converting it to lowercase and removing punctuation. - Tokenize the text into individual words. - Count the frequency of each word. - Identify and return the top N most frequent words and their counts as a dictionary. **Example**: Given the file content: ``` Hello world! Hello everyone. This world is beautiful. ``` And N=2, the function should return: ``` {\'hello\': 2, \'world\': 2} ``` **Note**: Ensure to handle cases where multiple words have the same frequency. If there are ties, include all the tied words in the results as long as they fit within the top N frequencies.","solution":"import string from collections import Counter def top_n_words(N: int) -> dict: def clean_text(text): text = text.lower() # convert to lowercase text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # remove punctuation return text.split() # split into words with open(\'text_data.txt\', \'r\') as file: text = file.read() words = clean_text(text) word_counts = Counter(words) most_common_words = word_counts.most_common(N) return dict(most_common_words)"},{"question":"Your task is to create a function that simulates the rolling of a pair of six-sided dice multiple times and returns the distribution of the sums of the dice. Each die can roll a number between 1 and 6 (inclusive). You will use the `numpy` library to perform this simulation efficiently. Write a function named `roll_dice_distribution` that performs the following steps: 1. Takes an input integer `n`, representing the number of times the two dice are rolled. 2. Simulates `n` rolls of a pair of six-sided dice using NumPy\'s random number generation capabilities. 3. Computes the sum for each pair of dice rolls. 4. Returns a distribution array where the element at index `i` represents how many times the sum `i+2` was rolled. (Since the minimum sum is 2 and the maximum sum is 12, the array will have 11 elements.) The function signature should be: ```python def roll_dice_distribution(n): pass ``` _Assumptions:_ - You can assume the input `n` is a positive integer. _Requirements:_ - Use `numpy` for generating random numbers and computing results. - Your implementation should efficiently handle large numbers of dice rolls using NumPy\'s vectorized operations. _Example Usage:_ ```python import numpy as np n = 1000 result = roll_dice_distribution(n) print(result) # Example output (actual results will vary due to randomness): # array([27, 57, 85, 111, 137, 163, 147, 115, 94, 48, 16]) # This means sum of 2 occurred 27 times, sum of 3 occurred 57 times, etc. ``` This problem helps you understand how to use NumPy\'s random number generation and vectorized operations to simulate random events and compute their statistical distribution.","solution":"import numpy as np def roll_dice_distribution(n): Simulates the rolling of a pair of six-sided dice `n` times and returns the distribution of the sums. Parameters: n (int): The number of times to roll the dice. Returns: np.array: An array of size 11 where each element indicates the count of each sum from 2 to 12. # Simulate rolling two dice `n` times dice1 = np.random.randint(1, 7, n) dice2 = np.random.randint(1, 7, n) # Calculate the sums of the dice sums = dice1 + dice2 # Calculate the distribution of sums distribution = np.zeros(11, dtype=int) for sum_value in sums: distribution[sum_value - 2] += 1 return distribution"},{"question":"You need to write a Python function named `find_anagrams` that returns a list of anagram pairs from the given list of words. Two words are considered anagrams if they have the same characters in the same frequency, but possibly a different order. This function will provide an excellent opportunity to work with sorting and dictionary (`dict`) data structure. **Function Signature**: ```python def find_anagrams(words: List[str]) -> List[Tuple[str, str]]: pass ``` **Requirements**: 1. The function `find_anagrams` takes a list of non-empty strings `words` as its input parameter. 2. Return a list of tuples, where each tuple contains two words that are anagrams of each other. 3. Each word in the input list should be paired with every other word (but only once) if they are anagrams. **Example**: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"cat\\", \\"tac\\"] anagrams = find_anagrams(words) print(anagrams) # Output should be: [(\'listen\', \'silent\'), (\'listen\', \'enlist\'), (\'silent\', \'enlist\'), (\'google\', \'gogole\'), (\'cat\', \'tac\')] ``` **Constraints**: - All words will be in lowercase. - The input list will contain at least two words. - The input list size will not exceed 1000 words. **Hints**: - Use sorting to compare if two words are anagrams. - Using a dictionary to group words by their sorted version might be helpful.","solution":"from typing import List, Tuple def find_anagrams(words: List[str]) -> List[Tuple[str, str]]: anagram_map = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_map: anagram_map[sorted_word].append(word) else: anagram_map[sorted_word] = [word] result = [] for key in anagram_map: word_list = anagram_map[key] if len(word_list) > 1: for i in range(len(word_list)): for j in range(i+1, len(word_list)): result.append((word_list[i], word_list[j])) return result"},{"question":"You are tasked with creating a function named `calculate_fastest_route` that will determine the shortest path between two points in a city represented as a graph. The city graph is provided as an adjacency list, where each key is a point in the city and its value is a list of tuples representing the connected points and the distance to those points. Your goal is to: 1. Parse the input graph to understand the connections and distances. 2. Use Dijkstra\'s algorithm or any other shortest-path algorithm to find the shortest path between the given start point and end point. 3. Return the shortest path as a list of points from the start to the end point. The city graph and points are provided by the following function: ```python def city_graph(): # This function returns a dictionary representing the city\'s graph. return { \\"A\\": [(\\"B\\", 1), (\\"C\\", 4)], \\"B\\": [(\\"A\\", 1), (\\"C\\", 2), (\\"D\\", 5)], \\"C\\": [(\\"A\\", 4), (\\"B\\", 2), (\\"D\\", 1)], \\"D\\": [(\\"B\\", 5), (\\"C\\", 1)] # More points and connections can be added as needed. } ``` Implement the `calculate_fastest_route` function with the following signature: ```python def calculate_fastest_route(start, end): # Your code here to find the shortest path from start to end pass ``` Additionally, you will be provided with the starting and ending points when calling your function, which you should use to customize the algorithm process. Return the shortest path as a list of points from start to end.","solution":"import heapq def calculate_fastest_route(start, end): graph = city_graph() # Dijkstra\'s algorithm requires a priority queue and a distance map priority_queue = [(0, start, [])] seen = set() min_dist = {start: 0} while priority_queue: (cost, current_point, path) = heapq.heappop(priority_queue) if current_point in seen: continue # Mark the current point as visited seen.add(current_point) # Path so far including current point path = path + [current_point] # If the end point is reached, return the path if current_point == end: return path # Explore the neighbors of the current point for (next_point, distance) in graph.get(current_point, []): if next_point in seen: continue prev_dist = min_dist.get(next_point, float(\'inf\')) new_dist = cost + distance if new_dist < prev_dist: min_dist[next_point] = new_dist heapq.heappush(priority_queue, (new_dist, next_point, path)) # If there is no path from start to end return [] def city_graph(): return { \\"A\\": [(\\"B\\", 1), (\\"C\\", 4)], \\"B\\": [(\\"A\\", 1), (\\"C\\", 2), (\\"D\\", 5)], \\"C\\": [(\\"A\\", 4), (\\"B\\", 2), (\\"D\\", 1)], \\"D\\": [(\\"B\\", 5), (\\"C\\", 1)] }"},{"question":"Create a function that accepts a list of integers, removes all occurrences of the highest and lowest numbers, and returns a new list with the remaining elements. If the input list contains fewer than 3 distinct values after removing the highest and lowest elements, raise a ValueError with an appropriate message. The function should output: list: A new list with the highest and lowest numbers removed. You should write self-contained code starting with: ``` def remove_extremes(numbers): ```","solution":"def remove_extremes(numbers): Removes all occurrences of the highest and lowest numbers from the list and returns a new list with the remaining elements. If the list has fewer than 3 distinct values after removal, raises a ValueError. if not numbers or len(numbers) < 2: raise ValueError(\\"The input list must contain at least 2 elements.\\") highest = max(numbers) lowest = min(numbers) # Remove all occurrences of the highest and lowest numbers filtered_numbers = [num for num in numbers if num != highest and num != lowest] # Check if there are at least 2 distinct values remaining in the list if len(set(filtered_numbers)) < 2: raise ValueError(\\"Insufficient distinct values in the list after removing extremes.\\") return filtered_numbers"},{"question":"You are provided with a list of timestamps, each represented as a string in the format `YYYY-MM-DD HH:MM:SS`. Your task is to write a function called `bucket_timestamps` which groups these timestamps into hourly buckets and counts the number of occurrences in each bucket. Return the result as a dictionary where the keys are strings representing the start of each hour (formatted as `YYYY-MM-DD HH:00:00`) and the values are the counts of timestamps in each bucket. **Function Signature:** ```python def bucket_timestamps(timestamps: list) -> dict: # Your code here ``` **Requirements:** 1. Parse the timestamps to extract the date and hour information. 2. Group the parsed timestamps into hourly buckets. 3. Count the number of timestamps in each bucket and store the results in a dictionary. **Example:** Consider the following list of timestamps: ```python timestamps = [ \\"2023-01-01 13:45:23\\", \\"2023-01-01 14:12:00\\", \\"2023-01-01 13:55:13\\", \\"2023-01-01 14:33:45\\", \\"2023-01-01 15:00:00\\" ] ``` - **Expected Return:** ```python { \\"2023-01-01 13:00:00\\": 2, \\"2023-01-01 14:00:00\\": 2, \\"2023-01-01 15:00:00\\": 1 } ```","solution":"from collections import defaultdict def bucket_timestamps(timestamps: list) -> dict: Groups the timestamps into hourly buckets and counts occurrences in each bucket. bucket_counts = defaultdict(int) for timestamp in timestamps: # Extract the YYYY-MM-DD HH part to define the bucket start bucket = timestamp[:13] + \\":00:00\\" bucket_counts[bucket] += 1 return dict(bucket_counts)"},{"question":"In this exercise, you will create a function that processes a list of dictionaries containing information about products and filters out products based on certain criteria. Your task is to implement a function named `filter_products(products, min_price, max_price, min_rating, categories)`. **Function Description:** - **`filter_products(products, min_price, max_price, min_rating, categories)`**: - **Parameters:** - `products`: a list of dictionaries, where each dictionary represents a product with keys `\\"name\\"`, `\\"price\\"`, `\\"rating\\"`, and `\\"category\\"`. - `min_price`: a float representing the minimum price of the products to be included in the result. - `max_price`: a float representing the maximum price of the products to be included in the result. - `min_rating`: a float representing the minimum rating of the products to be included in the result. - `categories`: a list of strings representing the categories of the products to be included in the result. - **Returns:** - A list of dictionaries representing the products that meet the specified criteria. **Steps to follow:** 1. **Initialize an empty list**: This will hold the products that meet the criteria. 2. **Filter products**: Loop through each product in the `products` list, and check if it meets all the criteria (`min_price <= price <= max_price`, `rating >= min_rating`, and `category` in `categories`). 3. **Add matching products to the result list**: If a product meets all criteria, add it to the result list. 4. **Return the result list**: Return the list of filtered products that meet the specified criteria. **Example:** ```python def filter_products(products, min_price, max_price, min_rating, categories): filtered_products = [] for product in products: if (min_price <= product[\\"price\\"] <= max_price and product[\\"rating\\"] >= min_rating and product[\\"category\\"] in categories): filtered_products.append(product) return filtered_products # Sample product list products = [ {\\"name\\": \\"Laptop\\", \\"price\\": 999.99, \\"rating\\": 4.5, \\"category\\": \\"Electronics\\"}, {\\"name\\": \\"Coffee Maker\\", \\"price\\": 49.99, \\"rating\\": 4.0, \\"category\\": \\"Home Appliances\\"}, {\\"name\\": \\"Smartphone\\", \\"price\\": 699.99, \\"rating\\": 4.7, \\"category\\": \\"Electronics\\"}, {\\"name\\": \\"Vacuum Cleaner\\", \\"price\\": 299.99, \\"rating\\": 3.9, \\"category\\": \\"Home Appliances\\"}, {\\"name\\": \\"Desk Lamp\\", \\"price\\": 19.99, \\"rating\\": 4.2, \\"category\\": \\"Furniture\\"} ] filtered = filter_products(products, 50, 1000, 4.0, [\\"Electronics\\"]) print(filtered) ``` **Expected Outcome:** This will result in the products `Laptop` and `Smartphone` being included in the result, as they both meet the criteria of price between 50 and 1000, rating of at least 4.0, and belonging to the category \\"Electronics\\".","solution":"def filter_products(products, min_price, max_price, min_rating, categories): Filters products based on price, rating and category. :param products: List of dictionaries, where each dictionary represents a product :param min_price: Minimum price for filtering products :param max_price: Maximum price for filtering products :param min_rating: Minimum rating for filtering products :param categories: List of categories for filtering products :return: List of dictionaries representing the filtered products filtered_products = [] for product in products: if (min_price <= product[\\"price\\"] <= max_price and product[\\"rating\\"] >= min_rating and product[\\"category\\"] in categories): filtered_products.append(product) return filtered_products"},{"question":"You are asked to implement a function in Python that reads a CSV file and counts the number of unique values in a given column. The function will take three parameters: the file path to the CSV file, the column name to be analyzed, and a boolean flag that indicates whether the column contains case-sensitive values. If the flag is set to `True`, the counting should consider the case of the values; otherwise, it should be case insensitive. The function signature should be: ```python def count_unique_values(csvFilePath, columnName, caseSensitive): # Your implementation here ``` # Requirements: 1. **Function Name**: `count_unique_values` 2. **Parameters**: - `csvFilePath` (string): The path to the CSV file. - `columnName` (string): The name of the column to count unique values. - `caseSensitive` (boolean): Flag to indicate if case matters in counting unique values. 3. **Behavior**: - Read the CSV file specified by `csvFilePath`. - Extract the values from the column specified by `columnName`. - Count unique values in the specified column, considering the case as specified by the `caseSensitive` flag. - Return the count of unique values. # Example: ```python count_unique_values(\\"path/to/data.csv\\", \\"Category\\", False) ``` - If the `Category` column contains values like `\\"apple\\"`, `\\"Apple\\"`, and `\\"banana\\"`, and `caseSensitive` is `False`, the function should return 2, as `\\"apple\\"` and `\\"Apple\\"` are considered the same. # Assumptions: - The CSV file is well-formed and the specified column exists. # Libraries Required: - `csv` Please ensure your function is efficient, handles exceptions or errors properly, and aligns with the given requirements and assumptions.","solution":"import csv def count_unique_values(csvFilePath, columnName, caseSensitive): Count the number of unique values in the specified column of a CSV file. Parameters: csvFilePath (str): The path to the CSV file. columnName (str): The name of the column to count unique values. caseSensitive (bool): Flag indicating if the count should be case-sensitive. Returns: int: The count of unique values in the specified column. unique_values = set() try: with open(csvFilePath, mode=\'r\', newline=\'\', encoding=\'utf-8\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: value = row[columnName] if not caseSensitive: value = value.lower() unique_values.add(value) except FileNotFoundError: print(f\\"Error: The file at {csvFilePath} was not found.\\") return 0 except KeyError: print(f\\"Error: The column {columnName} does not exist in the CSV file.\\") return 0 return len(unique_values)"},{"question":"You are required to write a function named `extract_unique_words` that reads a text file, processes the textual data to retrieve all unique words, and then returns the list of these words sorted in alphabetical order. The function should ignore punctuation and be case-insensitive when determining unique words. The function should take a single argument: - `file_name` (str): The name of the file to read. Here is a brief description of what your function should do: 1. Open the file in read mode. 2. Read the contents of the file. 3. Convert the text to lowercase. 4. Remove all punctuation from the text. 5. Split the text into words. 6. Store all unique words in a collection. 7. Sort the unique words alphabetically. 8. Return the sorted list of unique words. The following code snippet shows the expected function signature: ```python import string def extract_unique_words(file_name): pass # Your implementation goes here ``` # Example If the content of the `SampleText.txt` is as follows: ``` Hello world! This is a sample text. Hello world! ``` Then the function call: ```python result = extract_unique_words(\\"SampleText.txt\\") print(result) ``` Should output: ``` [\'a\', \'hello\', \'is\', \'sample\', \'text\', \'this\', \'world\'] ``` # Requirements - Ensure to handle file closing properly, either by using context managers or other means. - Do not use any libraries other than `string` for this task. - Consider punctuation to be any character present in `string.punctuation`.","solution":"import string def extract_unique_words(file_name): with open(file_name, \'r\') as file: text = file.read() # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # Split text into words words = text.split() # Get unique words unique_words = set(words) # Sort the unique words alphabetically sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"You have been given an image represented as a 2D list of integers, where each integer represents a pixel\'s grayscale value (from 0 to 255). Your task is to implement a function `rotate_image(image)` that rotates the image 90 degrees clockwise. The resultant image should be returned as a new 2D list. # Function Signature: ```python def rotate_image(image): Args: image (list of list of int): A 2D list of integers representing the grayscale values of the image\'s pixels. Returns: list of list of int: A 2D list of integers representing the image rotated 90 degrees clockwise. ``` # Requirements: - The input `image` is always a 2D list with dimensions `N x N`. - The function should return a new 2D list with the rotated image, leaving the original image unchanged. - Do not use any external libraries; the function should perform the rotation using basic list operations. # Example: ```python image = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_image = rotate_image(image) print(rotated_image) # Expected Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Implement the `rotate_image` function as described.","solution":"def rotate_image(image): Rotates the input NxN 2D list (image) 90 degrees clockwise. Args: image (list of list of int): A 2D list of integers representing the grayscale values of the image\'s pixels. Returns: list of list of int: A 2D list of integers representing the image rotated 90 degrees clockwise. n = len(image) rotated_image = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_image[j][n - 1 - i] = image[i][j] return rotated_image"},{"question":"You are asked to create a function named `find_optimal_route` to find the shortest path in a grid that contains obstacles. Given a grid represented as a list of lists, where `0` represents an empty cell and `1` represents an obstacle, find the shortest path from the top-left corner to the bottom-right corner. The path can only move up, down, left, or right. If there is no valid path, the function should return -1. Function Signature ```python def find_optimal_route(grid): pass ``` Function Description - `grid`: A list of lists of integers representing the grid. Requirements 1. **Breadth-First Search (BFS) Algorithm**: - Implement the BFS algorithm to explore the grid. - Maintain a queue to store the current position and the number of steps taken so far. - Keep track of visited cells to prevent revisiting them. - Return the number of steps if the bottom-right corner is reached, or -1 if no path exists. 2. **Grid Constraints**: - The grid will be a list of lists containing only `0` and `1`. - The grid will always have at least one cell. - The top-left corner and bottom-right corner will always be `0`. Example Consider the following grid: ```python grid = [ [0, 0, 1], [0, 1, 0], [0, 0, 0] ] ``` The optimal path from the top-left corner to the bottom-right corner is 4 steps: right -> down -> down -> right. Your function should return `4` for this grid. If the grid was such that no valid path exists, like this: ```python grid = [ [0, 1], [1, 0] ] ``` Your function should return `-1` as there is no way to reach the bottom-right corner.","solution":"from collections import deque def find_optimal_route(grid): Returns the shortest path from the top-left to the bottom-right in a grid with obstacles. Uses BFS to perform the search. Parameters: grid (List[List[int]]): The grid of 0s and 1s where 0 is an empty cell and 1 is an obstacle. Returns: int: The length of the shortest path from the top-left to the bottom-right, or -1 if no valid path exists. if not grid or not grid[0]: return -1 n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: r, c, steps = queue.popleft() if r == n - 1 and c == m - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Create a Python function named `count_prime_factors` that calculates the number of unique prime factors of a given integer. Your task is to: 1. Implement the function `count_prime_factors` that takes one argument: - `n` (int): The integer for which to determine the number of unique prime factors. The integer will always be greater than or equal to 2. 2. The function should return an integer indicating the number of unique prime factors of `n`. 3. Ensure efficiency in checking for prime factors, and consider using helper functions for tasks such as checking for primality. 4. Do not use any external libraries; only standard Python libraries are allowed. **Example:** Calling `count_prime_factors(28)` should return: ``` 2 ``` This is because the prime factors of 28 are 2 and 7. Calling `count_prime_factors(45)` should return: ``` 2 ``` This is because the prime factors of 45 are 3 and 5.","solution":"def count_prime_factors(n): Returns the number of unique prime factors of a given integer n. def is_prime(x): if x < 2: return False for i in range(2, int(x ** 0.5) + 1): if x % i == 0: return False return True prime_factors = set() candidate = 2 while candidate * candidate <= n: if n % candidate == 0: if is_prime(candidate): prime_factors.add(candidate) n //= candidate else: candidate += 1 # If n is still greater than 1, then it must be a prime number if n > 1: prime_factors.add(n) return len(prime_factors)"},{"question":"You are tasked with implementing a multi-threaded program that simulates a simple ticket booking system. Multiple clients (threads) will attempt to book tickets simultaneously. You are required to ensure the system handles this concurrency safely, preventing overbooking and ensuring thread-safe ticket booking operations. The system should consist of the following components: 1. A `TicketCounter` class with: - An attribute `total_tickets` indicating the total number of tickets available. - A Lock object to manage concurrent access. - A method `book_ticket(client_id)` which: - Uses the Lock to ensure that only one thread can attempt to book a ticket at a time. - Checks if tickets are available. If yes, decrements the ticket count and prints a message \\"Client X booked a ticket. Tickets left: Y\\" where X is the client_id and Y is the remaining tickets. - If no tickets are available, prints \\"Client X could not book a ticket. No tickets left.\\" 2. A `client` function that will be executed by each thread, taking in `client_id` and an instance of `TicketCounter`. The function should simply call the `book_ticket(client_id)` method of the `TicketCounter` instance. Write a Python program that: - Creates an instance of `TicketCounter` initialized with 5 tickets. - Starts 10 client threads, each attempting to book a ticket. Ensure your implementation properly handles concurrent access to the ticket booking method, preventing race conditions. Use the `threading` module for creating and managing threads and the `threading.Lock` class for synchronization.","solution":"import threading class TicketCounter: def __init__(self, total_tickets): self.total_tickets = total_tickets self.lock = threading.Lock() def book_ticket(self, client_id): with self.lock: if self.total_tickets > 0: self.total_tickets -= 1 print(f\\"Client {client_id} booked a ticket. Tickets left: {self.total_tickets}\\") else: print(f\\"Client {client_id} could not book a ticket. No tickets left.\\") def client(client_id, ticket_counter): ticket_counter.book_ticket(client_id) if __name__ == \\"__main__\\": ticket_counter = TicketCounter(total_tickets=5) threads = [] for i in range(10): t = threading.Thread(target=client, args=(i, ticket_counter)) threads.append(t) t.start() for t in threads: t.join()"},{"question":"Design a function named `analyze_data_file` that reads a text file containing structured data and computes specified statistical information. The function should operate as follows: 1. **Parameters**: - `file_path` (str): The path to the text file to be read. - `output_path` (str): The path to a text file where the computed statistics will be stored. 2. **File Format**: - The text file is structured with each line containing a string followed by an integer, separated by a comma, like so: ``` item1,3 item2,5 item3,2 ``` 3. **Behavior**: - Read the file specified by `file_path`. - Compute the following statistics: - **Total items**: The total number of lines in the file. - **Sum of values**: The sum of all integers in the file. - **Mean value**: The average of all the integers. - **Max value**: The maximum integer value in the file. - **Min value**: The minimum integer value in the file. - Write the computed statistics to the file specified by `output_path` in the following format: ``` Total items: <total_items> Sum of values: <sum_of_values> Mean value: <mean_value> Max value: <max_value> Min value: <min_value> ``` - Ensure proper error handling to manage file not found exceptions, data format errors (e.g., missing integers or incorrect delimiters), and any other potential issues. **Example**: Given a file at `data.txt` containing: ``` apple,7 banana,2 cherry,5 date,10 ``` The function call `analyze_data_file(\'data.txt\', \'result.txt\')` should produce an output file `result.txt` containing: ``` Total items: 4 Sum of values: 24 Mean value: 6.0 Max value: 10 Min value: 2 ``` **Requirements**: Handle all potential exceptions gracefully and ensure the program does not crash if the input file has issues.","solution":"def analyze_data_file(file_path, output_path): Reads a structured text file, computes statistical information, and writes the results to another file. try: with open(file_path, \'r\') as file: lines = file.readlines() total_items = len(lines) if total_items == 0: raise ValueError(\\"The file is empty.\\") values = [] for line in lines: try: _, value = line.strip().split(\',\') values.append(int(value)) except ValueError: raise ValueError(f\\"Line \'{line.strip()}\' is not properly formatted.\\") sum_values = sum(values) mean_value = sum_values / total_items max_value = max(values) min_value = min(values) with open(output_path, \'w\') as output_file: output_file.write(f\\"Total items: {total_items}n\\") output_file.write(f\\"Sum of values: {sum_values}n\\") output_file.write(f\\"Mean value: {mean_value}n\\") output_file.write(f\\"Max value: {max_value}n\\") output_file.write(f\\"Min value: {min_value}n\\") except FileNotFoundError: raise FileNotFoundError(f\\"The file `{file_path}` does not exist.\\") except Exception as e: raise e"},{"question":"A company is evaluating different advertisement campaigns and wants to analyze the performance over time. Write a function that calculates the moving average of daily expenses for a given number of days. The moving average helps smooth out short-term fluctuations and highlight longer-term trends in the data. **Function Signature:** ```python def moving_average(expenses: List[float], window_size: int) -> List[float]: ``` **Parameters:** - `expenses` (List[float]): A list of daily expenses in float. - `window_size` (int): The number of days over which the moving average is calculated. **Returns:** - `List[float]`: A list containing the moving averages. The length of this list should be `len(expenses) - window_size + 1`. **Instructions:** 1. Validate that the `window_size` is a positive integer and not greater than the length of `expenses`. If the `window_size` is invalid, raise an appropriate exception with the message \\"Window size must be a positive integer less than or equal to the length of expenses.\\" 2. Use a sliding window approach to calculate the moving average for each interval of `window_size` days. 3. Return the list of calculated moving averages. **Example:** ```python expenses = [100.0, 200.0, 300.0, 400.0, 500.0] window_size = 3 print(moving_average(expenses, window_size)) # Expected output: [200.0, 300.0, 400.0] ``` This function will help in analyzing trends by smoothing out noise and variability inherent in daily expenses, providing better insights into long-term spending patterns.","solution":"from typing import List def moving_average(expenses: List[float], window_size: int) -> List[float]: Calculate the moving average of daily expenses over a given number of days. Parameters: expenses (List[float]): A list of daily expenses in float. window_size (int): The number of days over which the moving average is calculated. Returns: List[float]: A list containing the moving averages. if window_size <= 0 or window_size > len(expenses): raise ValueError(\\"Window size must be a positive integer less than or equal to the length of expenses.\\") moving_averages = [] for i in range(len(expenses) - window_size + 1): window = expenses[i:i + window_size] average = sum(window) / window_size moving_averages.append(average) return moving_averages"},{"question":"Write a function that takes a list of strings representing dates in the format \\"YYYY-MM-DD\\" and returns a dictionary where the keys are the years and the values are lists of months during which dates occurred. Each year should only list the unique months present in the input dates. The function should output: - dict: A dictionary where each key is a year and each value is a sorted list of unique months. You should write self-contained code starting with: ```python from collections import defaultdict def extract_years_and_months(dates): result = defaultdict(set) for date in dates: year, month, _ = date.split(\'-\') result[year].add(month) # Convert sets to sorted lists final_result = {year: sorted(list(months)) for year, months in result.items()} return final_result # Example usage: dates = [\\"2023-01-15\\", \\"2023-03-20\\", \\"2022-02-12\\", \\"2023-01-10\\"] print(extract_years_and_months(dates)) # Output: {\'2023\': [\'01\', \'03\'], \'2022\': [\'02\']} ```","solution":"from collections import defaultdict def extract_years_and_months(dates): result = defaultdict(set) for date in dates: year, month, _ = date.split(\'-\') result[year].add(month) # Convert sets to sorted lists final_result = {year: sorted(list(months)) for year, months in result.items()} return final_result"},{"question":"This function takes a list of integers and returns the length of the longest subarray where the difference between any two elements is at most k. The function should handle cases where the list is empty by returning 0. Assume that all input integers are non-negative. You should write self-contained code starting with: ``` def longest_subarray_with_diff_k(arr, k): ```","solution":"def longest_subarray_with_diff_k(arr, k): Returns the length of the longest subarray where the difference between any two elements is at most k. if not arr: return 0 arr.sort() start = 0 max_length = 0 for end in range(len(arr)): while arr[end] - arr[start] > k: start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a text file containing a series of paragraphs, your task is to write a Python function named `extract_keywords` that identifies the top N frequent words (keywords) from the text, while ignoring a predefined set of stopwords. The function should return a list of tuples, each containing a keyword and its corresponding frequency. # Function Signature: ```python def extract_keywords(filepath: str, stopwords: List[str], N: int) -> List[Tuple[str, int]]: ``` # Arguments: - `filepath` (str): The path to the text file located in the `../../02-data/text-files/` directory. - `stopwords` (List[str]): A list of common stopwords to be ignored during keyword extraction. - `N` (int): The number of top frequent words to return. # Process to follow: 1. **Reading the Text File:** - Open the text file and read its content. - Replace any punctuation with spaces and convert all characters to lowercase. 2. **Tokenization and Cleaning:** - Split the text into individual words (tokens). - Remove any tokens that are present in the stopwords list. - Count the frequency of each remaining word. 3. **Sorting and Selecting Top N:** - Sort the words based on their frequency in descending order. - Select the top N frequent words. 4. **Returning the Result:** - The function should return a list of tuples in the format [(word1, freq1), (word2, freq2), ...] where `freq` is the count of occurrences of the word. # Example: If given the following `filepath` and first few lines of the text file are: ``` It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity... ``` And the `stopwords` list is: `[\'it\', \'was\', \'the\', \'of\']` An example execution would be: ```python extract_keywords(\'text_file.txt\', [\'it\', \'was\', \'the\', \'of\'], 3) ``` # Expected Output: A list of tuples with the top 3 frequent words: ```python [(\'times\', 2), (\'age\', 2), (\'best\', 1)] ``` # Notes: - Ensure that the stopwords list is case-insensitive. - Consider edge cases where multiple words have the same frequency. In such cases, return them in alphabetical order.","solution":"import string from typing import List, Tuple from collections import Counter def extract_keywords(filepath: str, stopwords: List[str], N: int) -> List[Tuple[str, int]]: with open(filepath, \'r\') as file: text = file.read() # Replace punctuation with spaces and convert to lowercase translator = str.maketrans(string.punctuation, \' \' * len(string.punctuation)) text = text.translate(translator).lower() # Tokenization words = text.split() # Remove stopwords and count frequencies stopwords_set = set(word.lower() for word in stopwords) word_counts = Counter(word for word in words if word not in stopwords_set) # Get top N frequent words and return as list of tuples top_words = word_counts.most_common(N) return top_words"},{"question":"You are tasked with developing a function that generates a heat map to visualize the distribution of data points over a 2D grid. The function should process the data points, group them into corresponding grid cells, and count the number of points per cell to create the heat map. The goal of this problem is to learn how to use the `numpy` and `matplotlib` libraries, specifically leveraging `numpy.histogram2d` and `matplotlib.pyplot.imshow` functions. You need to implement a function called `generate_heatmap` which will perform the following steps: **Function Signature:** ```python def generate_heatmap(points: np.ndarray, grid_size: int) -> np.ndarray: ``` **Parameters:** - `points` (np.ndarray): An Nx2 array where each row represents the (x, y) coordinates of a point. - `grid_size` (int): The size of the 2D grid, defined as the number of cells along one edge of the square grid. **Returns:** - `heatmap` (np.ndarray): A 2D array of shape (grid_size, grid_size) where each element represents the count of points in the corresponding grid cell. **Requirements:** 1. Use `numpy.histogram2d` to compute the 2D histogram of points. 2. Use `matplotlib.pyplot.imshow` to visualize the resulting heatmap. **Details:** 1. Ensure all points are within the bounds [0, 1] for both x and y coordinates. 2. Compute the histogram with equal bin sizes along both axes, using `grid_size` as the number of bins. 3. Return the 2D histogram array as the heatmap. 4. Optionally, plot the heatmap using `matplotlib.pyplot`. **Example Usage:** ```python import numpy as np import matplotlib.pyplot as plt points = np.random.rand(100, 2) # Generate 100 random points within [0, 1] x [0, 1] grid_size = 10 heatmap = generate_heatmap(points, grid_size) plt.imshow(heatmap, cmap=\'hot\', interpolation=\'nearest\') plt.colorbar() plt.show() ``` **Note:** This visualization can help identify patterns or clusters within the data points by varying the grid size and examining the resulting heat map distribution.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_heatmap(points: np.ndarray, grid_size: int) -> np.ndarray: Generate a heat map to visualize the distribution of data points over a 2D grid. Parameters: points (np.ndarray): An Nx2 array where each row represents the (x, y) coordinates of a point. grid_size (int): The size of the 2D grid, defined as the number of cells along one edge of the square grid. Returns: np.ndarray: A 2D array of shape (grid_size, grid_size) where each element represents the count of points in the corresponding grid cell. # Create 2D histogram heatmap, xedges, yedges = np.histogram2d(points[:,0], points[:,1], bins=grid_size, range=[[0, 1], [0, 1]]) # Optional: Visualize the heatmap plt.imshow(heatmap.T, origin=\'lower\', cmap=\'hot\', interpolation=\'nearest\') plt.colorbar() plt.show() return heatmap"},{"question":"You have been given the task of working with a dataset containing information about student grades. Your objective is to write a Python function that processes this dataset to calculate the average grade for each student and determine their final grade based on specified thresholds. The dataset you will work with is a list of dictionaries, where each dictionary represents a student and contains the student\'s name and their grades in various subjects. The subjects and their respective grades are represented as key-value pairs within the dictionary. The subjects and their grades may vary across students. The final grade is determined based on the following average thresholds: - Average >= 90: Grade \'A\' - 80 <= Average < 90: Grade \'B\' - 70 <= Average < 80: Grade \'C\' - 60 <= Average < 70: Grade \'D\' - Average < 60: Grade \'F\' Your function should take the dataset as an input, compute the average grade for each student, assign the final grade, and return a list of dictionaries where each dictionary contains the student\'s name, their average grade, and their final grade. **Function Signature:** ```python def calculate_final_grades(students: list) -> list: Calculates the average grade and final grade for each student in the dataset. Parameters: students (list): A list of dictionaries, where each dictionary represents a student and contains their name and subjects with respective grades. Returns: list: A list of dictionaries, each containing the student\'s name, average grade, and final grade. ``` **Example:** ```python students = [ {\\"name\\": \\"Alice\\", \\"Math\\": 95, \\"English\\": 85, \\"Science\\": 90}, {\\"name\\": \\"Bob\\", \\"Math\\": 75, \\"English\\": 70, \\"Science\\": 80}, {\\"name\\": \\"Charlie\\", \\"Math\\": 60, \\"English\\": 65, \\"Science\\": 55} ] result = calculate_final_grades(students) # Expected output: # [ # {\\"name\\": \\"Alice\\", \\"average\\": 90.0, \\"final_grade\\": \\"A\\"}, # {\\"name\\": \\"Bob\\", \\"average\\": 75.0, \\"final_grade\\": \\"C\\"}, # {\\"name\\": \\"Charlie\\", \\"average\\": 60.0, \\"final_grade\\": \\"D\\"} # ] ```","solution":"def calculate_final_grades(students: list) -> list: Calculates the average grade and final grade for each student in the dataset. Parameters: students (list): A list of dictionaries, where each dictionary represents a student and contains their name and subjects with respective grades. Returns: list: A list of dictionaries, each containing the student\'s name, average grade, and final grade. final_results = [] for student in students: name = student[\\"name\\"] grades = [grade for subject, grade in student.items() if subject != \\"name\\"] average = sum(grades) / len(grades) if average >= 90: final_grade = \'A\' elif average >= 80: final_grade = \'B\' elif average >= 70: final_grade = \'C\' elif average >= 60: final_grade = \'D\' else: final_grade = \'F\' final_results.append({ \\"name\\": name, \\"average\\": round(average, 1), # rounding to one decimal place \\"final_grade\\": final_grade }) return final_results"},{"question":"You are tasked with creating a function to automate the generation of a summary report from a dataset represented as a list of dictionaries. This exercise will help you understand how to manipulate data structures and format strings for reporting purposes. Context: You are given a list of dictionaries named `data_list`, where each dictionary represents an item with keys like `\'name\'`, `\'age\'`, `\'department\'`, and `\'salary\'`. Your goal is to produce a summary report that: - Gives the average age and salary for each department. - Provides the overall highest and lowest salaries in the dataset. - Lists the names of employees who fall within a specified salary range in each department. You will write a function `generate_summary(data_list, min_salary, max_salary)` that: 1. Calculates the average age and salary for each department. 2. Identifies the overall highest and lowest salaries in the dataset. 3. Lists the employees who have a salary within the given range, grouped by department. Steps: 1. Iterate through `data_list` to compute required summaries. 2. Calculate average age and salary per department. 3. Find the overall highest and lowest salary in the dataset. 4. Identify names of employees within the specified salary range, organized by department. 5. Format the results as a string output, which includes the average statistics, extreme salary values, and the list of employees meeting the salary condition. Function Signature: ```python def generate_summary(data_list, min_salary, max_salary): pass ``` Requirements: - Utilize appropriate data structures to store intermediate results (e.g., dictionaries, lists). - Ensure you handle cases where departments or employees might be missing certain fields (i.e., handle potential `KeyError` or `ValueError`). - Format the final report as a clear, legible multi-line string. # Example: ```python data_list = [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\', \'salary\': 50000}, {\'name\': \'Bob\', \'age\': 22, \'department\': \'Engineering\', \'salary\': 75000}, {\'name\': \'Charlie\', \'age\': 25, \'department\': \'HR\', \'salary\': 52000}, {\'name\': \'David\', \'age\': 35, \'department\': \'Engineering\', \'salary\': 70000}, {\'name\': \'Eve\', \'age\': 29, \'department\': \'Marketing\', \'salary\': 45000} ] min_salary = 45000 max_salary = 60000 print(generate_summary(data_list, min_salary, max_salary)) ``` # Expected Output: ``` Department: HR Average Age: 27.5 Average Salary: 51000.0 Employees with salary in range (45000, 60000): - Alice - Charlie Department: Engineering Average Age: 28.5 Average Salary: 72500.0 Employees with salary in range (45000, 60000): - None Department: Marketing Average Age: 29.0 Average Salary: 45000.0 Employees with salary in range (45000, 60000): - Eve Overall Highest Salary: 75000 Overall Lowest Salary: 45000 ```","solution":"def generate_summary(data_list, min_salary, max_salary): from collections import defaultdict department_data = defaultdict(lambda: {\'ages\': [], \'salaries\': []}) highest_salary = float(\'-inf\') lowest_salary = float(\'inf\') employees_in_range = defaultdict(list) for item in data_list: name = item.get(\'name\') age = item.get(\'age\') department = item.get(\'department\') salary = item.get(\'salary\') if name and age is not None and department and salary is not None: department_data[department][\'ages\'].append(age) department_data[department][\'salaries\'].append(salary) if salary > highest_salary: highest_salary = salary if salary < lowest_salary: lowest_salary = salary if min_salary <= salary <= max_salary: employees_in_range[department].append(name) report_lines = [] for department, data in department_data.items(): avg_age = sum(data[\'ages\']) / len(data[\'ages\']) avg_salary = sum(data[\'salaries\']) / len(data[\'salaries\']) report_lines.append(f\\"Department: {department}\\") report_lines.append(f\\" Average Age: {avg_age:.1f}\\") report_lines.append(f\\" Average Salary: {avg_salary:.1f}\\") report_lines.append(f\\" Employees with salary in range ({min_salary}, {max_salary}):\\") if employees_in_range[department]: for name in employees_in_range[department]: report_lines.append(f\\" - {name}\\") else: report_lines.append(f\\" - None\\") report_lines.append(\\"\\") # Add an empty line for readability report_lines.append(f\\"Overall Highest Salary: {highest_salary}\\") report_lines.append(f\\"Overall Lowest Salary: {lowest_salary}\\") return \\"n\\".join(report_lines)"},{"question":"You are required to create a function to generate and display a line plot showing the Mean Absolute Error (MAE) over different training epochs for a machine learning model, such as a neural network. **Requirements:** 1. **Function Name**: `plot_epoch_mae` 2. **Input Parameters**: - `mae_values`: A list of Mean Absolute Error values where each value corresponds to the MAE at a particular training epoch. - `epochs`: A list of integers representing the epoch numbers. The length of this list should match the length of `mae_values`. 3. **Output**: The function should create a line plot meeting the following criteria: - The x-axis should represent the epoch numbers. - The y-axis should represent the MAE values. - The plot should have a line connecting the MAE values across epochs. - Include markers at each epoch point to emphasize individual MAE values. - Label the axes appropriately (e.g., \\"Epochs\\", \\"Mean Absolute Error\\"). - A meaningful title should be added to the plot (e.g., \\"MAE over Epochs\\"). **Details**: - Use the `matplotlib.pyplot` library to create the plot. - Ensure that markers are clearly visible, and the line connecting the markers is clearly distinguishable. - Add grid lines to the plot for better readability. **Function Signature**: ```python def plot_epoch_mae(mae_values, epochs): pass ``` Example usage: ```python import matplotlib.pyplot as plt # Example data mae_values = [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7] epochs = [1, 2, 3, 4, 5, 6, 7] # Example function call plot_epoch_mae(mae_values, epochs) ```","solution":"import matplotlib.pyplot as plt def plot_epoch_mae(mae_values, epochs): Generates and displays a line plot showing the Mean Absolute Error (MAE) over different training epochs. Parameters: mae_values (list): List of Mean Absolute Error values. epochs (list): List of epoch numbers corresponding to the MAE values. Returns: None plt.figure(figsize=(10, 6)) plt.plot(epochs, mae_values, marker=\'o\', linestyle=\'-\', color=\'b\', label=\'MAE\') plt.xlabel(\'Epochs\') plt.ylabel(\'Mean Absolute Error\') plt.title(\'MAE over Epochs\') plt.grid(True) plt.legend() plt.show()"},{"question":"You are required to write a function `longest_consecutive_subseq_length(arr)` that finds the length of the longest subsequence of consecutive integers in a given list of integers. The function should not sort the array and should run in O(n) time complexity. Here\'s the signature of the function you need to implement: ```python def longest_consecutive_subseq_length(arr): # Your code here ``` Inputs: 1. `arr`: A list of integers. Outputs: - Returns an integer, which is the length of the longest subsequence of consecutive integers. **Ensure the function adheres to the following steps**: 1. Use a set to store all the elements of the array. 2. Iterate through each element in the array and check if it is the start of a sequence (i.e., there is no element `ele-1`). 3. If it is the start of a sequence, determine the length of this sequence by checking the presence of consecutive elements (`ele+1`, `ele+2`, etc.) in the set. 4. Track and update the maximum length of consecutive subsequences. # Example: ```python def longest_consecutive_subseq_length(arr): num_set = set(arr) max_length = 0 for num in arr: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length # Example usage: arr1 = [100, 4, 200, 1, 3, 2] arr2 = [1, 9, 3, 10, 4, 20, 2] print(longest_consecutive_subseq_length(arr1)) # Output: 4 print(longest_consecutive_subseq_length(arr2)) # Output: 4 ``` You are required to implement the function `longest_consecutive_subseq_length` as described and test it with suitable examples.","solution":"def longest_consecutive_subseq_length(arr): Finds the length of the longest subsequence of consecutive integers in the given list. Parameters: arr (list): A list of integers. Returns: int: The length of the longest subsequence of consecutive integers. if not arr: return 0 num_set = set(arr) max_length = 0 for num in arr: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are asked to write a function that fetches and displays the current weather details for a given city. You will utilize the `requests` library and the `OpenWeatherMap` API to accomplish this. The function should be named `get_weather`. Requirements: - The function should take a city name as an input and return the temperature, weather condition, and humidity. - If the city is not found or there is an issue with the request, it should return a message \\"Weather data not available.\\" Function Signature: ```python def get_weather(city: str) -> str: pass ``` Input: - `city`: A string representing the name of the city to fetch the weather for. Output: - A formatted string containing the temperature, weather condition, and humidity of the city. If the city is not found or an error occurs, the function should return \\"Weather data not available.\\" Constraints: - Utilize the `requests.get` function to make API calls to `OpenWeatherMap`. - You must handle any exceptions that may arise if the request fails or the city is not found. Example Usage: ```python weather = get_weather(\\"London\\") print(weather) ``` Note: For the `OpenWeatherMap` API, you need to sign up and get an API key. Use it in your requests to fetch the weather data.","solution":"import requests def get_weather(city: str) -> str: api_key = \'your_openweathermap_api_key\' # Enter your actual API key here base_url = \\"http://api.openweathermap.org/data/2.5/weather\\" params = { \'q\': city, \'appid\': api_key, \'units\': \'metric\' # Use \'imperial\' for Fahrenheit if needed } try: response = requests.get(base_url, params=params) response.raise_for_status() weather_data = response.json() if weather_data.get(\'cod\') != 200: return \\"Weather data not available.\\" temperature = weather_data[\'main\'][\'temp\'] weather_condition = weather_data[\'weather\'][0][\'description\'] humidity = weather_data[\'main\'][\'humidity\'] return f\\"Temperature: {temperature}°C, Weather: {weather_condition}, Humidity: {humidity}%\\" except requests.exceptions.RequestException: return \\"Weather data not available.\\""},{"question":"You are creating a program that simulates a simple bank account which can handle basic operations such as deposit, withdrawal, and balance inquiry. You will write a class `BankAccount` that has the following methods: 1. `__init__(self)` - Initializes the bank account with a balance of 0. 2. `deposit(self, amount)` - Takes an integer or float `amount` and adds it to the account balance. 3. `withdraw(self, amount)` - Takes an integer or float `amount` and subtracts it from the account balance if there are sufficient funds. If there are not enough funds, print \\"Insufficient funds\\". 4. `get_balance(self)` - Returns the current balance of the bank account. Here is the class structure you need to create: ```python class BankAccount: def __init__(self): # Your code here def deposit(self, amount): # Your code here def withdraw(self, amount): # Your code here def get_balance(self): # Your code here ``` **Example usage:** ```python account = BankAccount() account.deposit(100) print(account.get_balance()) # Output: 100 account.withdraw(50) print(account.get_balance()) # Output: 50 account.withdraw(60) # Output: Insufficient funds print(account.get_balance()) # Output: 50 ```","solution":"class BankAccount: def __init__(self): Initializes the bank account with a balance of 0. self.balance = 0 def deposit(self, amount): Takes an integer or float amount and adds it to the account balance. if amount > 0: self.balance += amount def withdraw(self, amount): Takes an integer or float amount and subtracts it from the account balance if there are sufficient funds. If there are not enough funds, print \\"Insufficient funds\\". if amount > 0: if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") def get_balance(self): Returns the current balance of the bank account. return self.balance"},{"question":"You need to create a function, `modify_string_sequence`, that takes in an initial string and a series of instructions to modify the string. The function should follow the specified instructions and demonstrate string manipulation capabilities. # Function Requirements: - **Function Name:** `modify_string_sequence` - **Parameters:** - `init_string`: The initial string which will be modified. - `instructions`: A list of tuples, where each tuple specifies an operation and its corresponding value. The operations include: - `\'APPEND\'`: Append the given value to the end of the string. - `\'INSERT\'`: Insert the given value at the specified index in the string (the index will be provided as part of the value in a sub-tuple). - `\'REMOVE\'`: Remove the first occurrence of the given value from the string. - `\'REPLACE\'`: Replace the first occurrence of a specified substring with another substring (both substrings will be provided as a sub-tuple). - **Functionality:** - The function should iterate through the instructions list and modify the initial string according to each instruction. - After processing all instructions, the function should return the final modified string. - **Example Call:** ```python instructions = [ (\'APPEND\', \' World!\'), (\'INSERT\', (0, \'Hello\')), (\'REPLACE\', (\'World\', \'Universe\')), (\'REMOVE\', \'!\') ] result = modify_string_sequence(\'Greetings\', instructions) # Expected result: \\"HelloGreetings Universe\\" ``` - **Note:** - Ensure the implementation correctly handles indexing and substitution to avoid common string manipulation pitfalls. - The function should be case-sensitive as strings in Python are by default. Design the function to effectively handle the sequence of instructions and demonstrate the versatility of string manipulation operations.","solution":"def modify_string_sequence(init_string, instructions): Modifies init_string based on a list of instructions. for instruction in instructions: operation = instruction[0] if operation == \'APPEND\': value = instruction[1] init_string += value elif operation == \'INSERT\': index, value = instruction[1] init_string = init_string[:index] + value + init_string[index:] elif operation == \'REMOVE\': value = instruction[1] init_string = init_string.replace(value, \'\', 1) elif operation == \'REPLACE\': old_value, new_value = instruction[1] init_string = init_string.replace(old_value, new_value, 1) return init_string"},{"question":"Write a function `find_all_substrings_with_unique_chars(s: str, k: int) -> list` that takes a string `s` and an integer `k` as inputs and returns a list of all substrings of length `k` that contain only unique characters. The function should iterate through the input string and extract all possible substrings of the specified length. It should then check each substring to determine if all its characters are unique. If a substring meets the criteria, it should be included in the final list. The function should handle potential edge cases, such as when the input string is shorter than `k`, by returning an empty list in such scenarios. Here\'s a template for the function signature: ```python def find_all_substrings_with_unique_chars(s: str, k: int) -> list: # Your code here ```","solution":"def find_all_substrings_with_unique_chars(s: str, k: int) -> list: Returns a list of all substrings of length k from s that contain only unique characters. if len(s) < k or k <= 0: return [] unique_substrings = [] for i in range(len(s) - k + 1): substring = s[i:i + k] if len(set(substring)) == k: unique_substrings.append(substring) return unique_substrings"},{"question":"Create a function `split_into_batches(L, batch_size)` that splits a list of items into batches of a specified size. The function takes two parameters: 1. `L` (list): A list of items. 2. `batch_size` (int): The number of items each batch should contain. The function should return a list of lists, where each inner list represents a batch containing `batch_size` elements from the original list. If the total number of elements is not perfectly divisible by `batch_size`, the final batch should contain the remaining elements. # Constraints: 1. The length of the list `L` is at least 1. 2. The `batch_size` is a positive integer. # Examples: 1. `split_into_batches([1, 2, 3, 4, 5, 6, 7], 3)` should return `[[1, 2, 3], [4, 5, 6], [7]]`. 2. `split_into_batches([1, 2, 3, 4, 5, 6], 2)` should return `[[1, 2], [3, 4], [5, 6]]`. ```python def split_into_batches(L, batch_size): # Your code here # Example usage: L = [1, 2, 3, 4, 5, 6, 7] batch_size = 3 print(split_into_batches(L, batch_size)) # Expected output: [[1, 2, 3], [4, 5, 6], [7]] L = [1, 2, 3, 4, 5, 6] batch_size = 2 print(split_into_batches(L, batch_size)) # Expected output: [[1, 2], [3, 4], [5, 6]] ```","solution":"def split_into_batches(L, batch_size): Splits the list L into batches of size batch_size. Parameters: L (list): The list to be split. batch_size (int): The size of each batch. Returns: list: A list of batches, where each batch is a list. return [L[i:i + batch_size] for i in range(0, len(L), batch_size)]"},{"question":"You are provided with a list of integers, `nums`, and you need to find the contiguous subarray (containing at least one number) that has the maximum sum and return its start and end indices. This problem aims to develop skills in array manipulation, dynamic programming, and implementing the Kadane\'s algorithm. # Function Signature: ```python def max_subarray_indices(nums): ``` # Parameters: - `nums`: A list of integers representing the input array. # Returns: - A tuple containing two integers, representing the start and end indices (inclusive) of the contiguous subarray that has the maximum sum. # Guidelines: 1. Implement Kadane\'s algorithm to find the maximum sum subarray. 2. Keep track of the start and end indices of the maximum sum subarray. 3. Iterate through the list, updating the current sum and the best sum found so far. 4. Adjust the start and end indices when a new maximum sum is found. 5. Ensure the result is inclusive of the end index. # Constraints: - `nums` should contain at least one element. - The length of `nums` does not exceed `10^5`. Here is a sample usage of the `max_subarray_indices` function: ```python nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] indices = max_subarray_indices(nums) print(indices) # Output: (3, 6), since the subarray [4, -1, 2, 1] has the maximum sum of 6. ``` # Libraries to Learn: - Basic list operations. - Dynamic programming concepts. Your implementation should effectively utilize dynamic programming principles and ensure that the solution is efficient with respect to time complexity, ideally O(n).","solution":"def max_subarray_indices(nums): if not nums: raise ValueError(\\"The input list cannot be empty\\") max_sum = nums[0] current_sum = nums[0] start = 0 end = 0 temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (start, end)"},{"question":"You are tasked with creating a class `TimeSeriesData` that handles basic operations on time series data. The class should include methods to add data points, compute a moving average, and detect trends. The class should: 1. Store time series data as a list of tuples, where each tuple consists of a timestamp and a corresponding value. 2. Include a method `add_data_point(timestamp, value)` to add new data points. 3. Include a method `moving_average(window_size)` that computes the moving average of the time series data for the specified window size. The method should return a list of tuples with each tuple containing the timestamp (of the last point in the window) and the calculated moving average. 4. Include a method `detect_trend(threshold)` that identifies increasing or decreasing trends in the data. A trend is defined as a sequence of at least three consecutive points where values increase or decrease constantly. The method should return a list of tuples, each containing the start timestamp, end timestamp, and type of trend (\'increasing\' or \'decreasing\') for each detected trend. Your class definition should look like: ```python class TimeSeriesData: def __init__(self): self.data = [] def add_data_point(self, timestamp, value): # implementation here def moving_average(self, window_size): # implementation here def detect_trend(self, threshold): # implementation here ``` Here’s what each parameter represents: - `timestamp`: A string representing the time at which the data point was recorded, e.g., \'2023-10-01 10:00:00\'. - `value`: A numerical value associated with the timestamp. - `window_size`: An integer representing the size of the window for calculating the moving average. - `threshold`: A float representing the minimum absolute difference between consecutive values to qualify as part of a trend. **Example usage:** ```python ts_data = TimeSeriesData() ts_data.add_data_point(\'2023-10-01 10:00:00\', 100) ts_data.add_data_point(\'2023-10-01 11:00:00\', 101) ts_data.add_data_point(\'2023-10-01 12:00:00\', 102) ts_data.add_data_point(\'2023-10-01 13:00:00\', 101) ts_data.add_data_point(\'2023-10-01 14:00:00\', 100) moving_avg = ts_data.moving_average(3) print(moving_avg) # Output: [(\'2023-10-01 12:00:00\', 101.0), (\'2023-10-01 13:00:00\', 101.333...), (\'2023-10-01 14:00:00\', 101.0)] trends = ts_data.detect_trend(0.5) print(trends) # Output: [(\'2023-10-01 10:00:00\', \'2023-10-01 12:00:00\', \'increasing\')] ```","solution":"class TimeSeriesData: def __init__(self): self.data = [] def add_data_point(self, timestamp, value): self.data.append((timestamp, value)) def moving_average(self, window_size): if window_size <= 0: raise ValueError(\\"Window size must be greater than 0.\\") moving_averages = [] for i in range(len(self.data) - window_size + 1): window = self.data[i:i + window_size] avg = sum(value for _, value in window) / window_size moving_averages.append((window[-1][0], avg)) return moving_averages def detect_trend(self, threshold): trends = [] if len(self.data) < 3: return trends start_index = 0 while start_index < len(self.data) - 2: current_value = self.data[start_index][1] next_value = self.data[start_index + 1][1] if abs(next_value - current_value) < threshold: start_index += 1 continue trend_type = \'increasing\' if next_value > current_value else \'decreasing\' end_index = start_index + 1 while end_index < len(self.data) - 1: new_value = self.data[end_index + 1][1] if trend_type == \'increasing\' and new_value > self.data[end_index][1]: end_index += 1 elif trend_type == \'decreasing\' and new_value < self.data[end_index][1]: end_index += 1 else: break if end_index - start_index >= 2: trends.append((self.data[start_index][0], self.data[end_index][0], trend_type)) start_index = end_index + 1 else: start_index += 1 return trends"},{"question":"**In this problem, you are required to create a function named `unique_paths` that calculates the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. The movement is restricted to only rightward and downward directions. This is a classic dynamic programming problem often encountered in combinatorics and optimization tasks. # Input: - Two integers, `m` and `n`, representing the number of rows and columns in the grid, respectively (e.g., `m = 3` and `n = 7`). # Output: - An integer representing the number of unique paths from the top-left to the bottom-right of the grid. # Example: ```python m = 3 n = 7 unique_paths(m, n) # Output: 28 ``` # Requirements: 1. Implement the function `unique_paths(m: int, n: int) -> int`. 2. Use dynamic programming to solve the problem efficiently. 3. Avoid using recursion to prevent excessive computation time and stack overflow issues for larger grids. **Hints:** - Initialize a 2D list (matrix) with dimensions `m x n` where each cell initially contains `1`, as there is exactly one way to get to each cell in the first row and first column. - Populate the rest of the matrix by adding the number of ways from the cell directly above and the cell directly to the left. - The value in the bottom-right cell of the matrix will be the result. # Function Signature: ```python def unique_paths(m: int, n: int) -> int: # your code here ``` **","solution":"def unique_paths(m: int, n: int) -> int: Returns the number of unique paths from the top-left to the bottom-right corner of a m x n grid, moving only rightward or downward. if m == 0 or n == 0: return 0 dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"# Problem Statement Consider a game played on a 2D grid where a player can move up, down, left, or right. Each cell in the grid can either be an empty cell (represented by 0), an obstacle (represented by 1), or the destination cell (represented by 2). The player starts at the top-left corner of the grid (coordinates (0, 0)) and needs to reach the destination cell, navigating around obstacles. You are required to write a function `shortest_path_to_destination(grid: List[List[int]]) -> int` that computes the minimum number of steps required to reach the destination cell. If the destination is not reachable, return -1. Function Specifications: - **Function Name:** `shortest_path_to_destination` - **Arguments:** - `grid` (List[List[int]]): A 2D list of integers representing the game grid. - **Returns:** An integer representing the minimum number of steps required to reach the destination cell, or -1 if it is not reachable. Constraints: 1. The grid will be a non-empty list of lists where each inner list represents a row. 2. The grid will contain at least one cell with a value of 2 (the destination). 3. The value in the top-left corner (i.e., `grid[0][0]`) is always 0 (an empty cell). # Example ```python grid1 = [ [0, 0, 0], [1, 1, 0], [0, 0, 2] ] result1 = shortest_path_to_destination(grid1) print(result1) # Output: 4 grid2 = [ [0, 1, 1], [1, 1, 1], [1, 1, 2] ] result2 = shortest_path_to_destination(grid2) print(result2) # Output: -1 ``` The function should be implemented using an efficient algorithm to ensure optimal performance, considering the constraints of the grid size and possible obstacle densities.","solution":"from collections import deque from typing import List, Tuple def shortest_path_to_destination(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x: int, y: int) -> bool: return 0 <= x < rows and 0 <= y < cols and grid[x][y] != 1 queue = deque([(0, 0, 0)]) visited = set([(0, 0)]) while queue: x, y, dist = queue.popleft() if grid[x][y] == 2: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are required to implement a function `find_large_contiguous_sum(arr)` that finds the largest sum of a contiguous subarray within a given list of integers. This is a common problem known as the \\"maximum subarray problem\\" or \\"Kadane\'s Algorithm\\". Your function should take a single parameter: 1. `arr`: A list of integers (which can contain both positive and negative numbers). The function should return: - An integer representing the largest sum of a contiguous subarray. **Function Signature**: ```python def find_large_contiguous_sum(arr: List[int]) -> int: pass ``` **Examples**: ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(find_large_contiguous_sum(arr)) # Output: 6, because the contiguous subarray [4, -1, 2, 1] has the largest sum = 6. arr = [1] print(find_large_contiguous_sum(arr)) # Output: 1, since there\'s only one element. arr = [5, 4, -1, 7, 8] print(find_large_contiguous_sum(arr)) # Output: 23, the entire array is the contiguous subarray with the largest sum. ``` **Constraints**: - The length of the array can be up to `10^5`. - The integers in the array can range from `-10^4` to `10^4`. The function should efficiently find the maximum sum of a contiguous subarray in linear time using Kadane\'s Algorithm.","solution":"def find_large_contiguous_sum(arr): Finds the largest sum of a contiguous subarray within a given list of integers. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"In this problem, we will focus on utilizing the `RandomForestClassifier` class from the `sklearn.ensemble` module to train a random forest model on a given dataset. The objective is to create a function `train_random_forest` that performs the following tasks: 1. Reads a CSV file containing the dataset. 2. Converts the data into a NumPy array. 3. Splits the data into training and testing sets. 4. Trains a random forest model on the training data. 5. Evaluates the model by calculating the accuracy on the test set. 6. Prints the feature importance values. The CSV file contains data following a standard format, where the last column is the label and all other columns are features. The function signature should be: ```python def train_random_forest(file_path: str): ``` **Parameters:** - `file_path`: A string representing the path to the CSV file. The function should print the model accuracy on the test data and the importance of each feature. **Hints:** - Use the `train_test_split` function from `sklearn.model_selection` to split data. - Use the `feature_importances_` attribute of the trained `RandomForestClassifier` to obtain feature importance values. Here is an example of how the dataset might look: ``` 5.1,3.5,1.4,0.2,0 4.9,3.0,1.4,0.2,0 ... ``` (The last column is the label, and all other columns are features.)","solution":"import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score def train_random_forest(file_path: str): # Reading the CSV file data = pd.read_csv(file_path) # Converting the data into a NumPy array data_array = data.values # Assuming the last column is the label and the rest are features X = data_array[:, :-1] y = data_array[:, -1] # Splitting the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Training the random forest model rf = RandomForestClassifier() rf.fit(X_train, y_train) # Evaluating the model y_pred = rf.predict(X_test) accuracy = accuracy_score(y_test, y_pred) # Printing the accuracy print(f\'Model Accuracy: {accuracy}\') # Printing the feature importances feature_importances = rf.feature_importances_ print(f\'Feature Importances: {feature_importances}\')"},{"question":"Write a function named `reverse_and_double` that performs two transformations on a given list of integers. First, the function will reverse the order of the list. Next, the function will double the value of each integer in the reversed list. Your function should be defined as follows: ```python def reverse_and_double(numbers: list) -> list: # Your code here pass ``` The function will receive the following parameter: - `numbers` (list): A list of integers. The function should: 1. Reverse the order of the `numbers` list. 2. Double the value of each integer in the reversed list. 3. Return the transformed list. Example: ```python numbers = [1, 2, 3, 4] result = reverse_and_double(numbers) ``` In the example above, the output `result` would be `[8, 6, 4, 2]` because the original list is reversed to `[4, 3, 2, 1]` and then each element is doubled.","solution":"def reverse_and_double(numbers: list) -> list: Reverses the order of the input list and doubles each integer in the reversed list. Args: numbers (list): A list of integers. Returns: list: A new list with the integers reversed and doubled. reversed_numbers = numbers[::-1] doubled_numbers = [num * 2 for num in reversed_numbers] return doubled_numbers"},{"question":"**Problem**: Temperature Monitoring of a Growing Plant You are tasked with creating a function to analyze and visualize the recorded temperature data for a plant over a week. Temperatures are recorded every hour, and you need to generate a line plot to visualize the hourly temperature changes throughout the week using the `matplotlib` library. Implement a function called `plot_temperature_trend(temperature_data)` that takes a list of temperature readings and plots a line graph. **Function Signature**: ```python def plot_temperature_trend(temperature_data: list[float]) -> None: ``` # Input Parameters: - `temperature_data` (list of floats): A list containing 168 temperature readings (24 hours * 7 days). # Output: - The function does not return any value. It should display a line chart displaying the temperature trend over the week. # Requirements: 1. **Use the `matplotlib.pyplot.plot` method** to create the line chart. 2. The x-axis should represent the hours of the week (from 0 to 167). 3. The y-axis should represent the temperature readings. 4. Label the x-axis as \'Hour of the Week\' and the y-axis as \'Temperature (°C)\'. 5. Set the title of the chart to \'Weekly Temperature Trend\'. # Example: Given the input list `temperature_data` with 168 entries: ```python temperature_data = [23.5, 24.0, 22.0, ..., 25.5] # (168 total readings) ``` The function should plot these values with the specified labels and configuration. **Libraries Required**: ```python import matplotlib.pyplot as plt ``` # Note: You can assume the input list `temperature_data` will always have exactly 168 float elements representing hourly temperature readings for 7 days.","solution":"import matplotlib.pyplot as plt def plot_temperature_trend(temperature_data): Plots the trend of temperature readings over a week. Parameters: temperature_data (list of floats): A list containing 168 temperature readings (24 hours * 7 days). # Hourly labels from 0 to 167 for one week hours = list(range(168)) # Create the line plot plt.plot(hours, temperature_data, label=\'Temperature\') # Label the x-axis as \'Hour of the Week\' and y-axis as \'Temperature (°C)\' plt.xlabel(\'Hour of the Week\') plt.ylabel(\'Temperature (°C)\') # Set the title of the chart plt.title(\'Weekly Temperature Trend\') # Display the plot plt.show()"},{"question":"Write a function to find the intersection of two dictionaries. The function takes two dictionaries `dict1` and `dict2` as input, where the keys are strings and the values are integers. The function returns a dictionary that contains only the keys that are present in both input dictionaries. The values should be the sum of the values from both input dictionaries for each common key. If there are no common keys, an empty dictionary is returned. The function signature should be: ``` def find_dict_intersection(dict1, dict2): ``` **Example:** Input: ``` dict1 = {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3} dict2 = {\\"b\\": 3, \\"c\\": 4, \\"d\\": 5} ``` Output: ``` {\'b\': 5, \'c\': 7} ``` Explanation: The keys \'b\' and \'c\' are common in both dictionaries. The value for \'b\' is 2 (from dict1) + 3 (from dict2) = 5. The value for \'c\' is 3 (from dict1) + 4 (from dict2) = 7. Therefore, the output is {\'b\': 5, \'c\': 7}.","solution":"def find_dict_intersection(dict1, dict2): Returns the intersection of two dictionaries. The resulting dictionary contains only the keys that are present in both input dictionaries, with the values being the sum of values from both dictionaries for each common key. intersection = {} for key in dict1: if key in dict2: intersection[key] = dict1[key] + dict2[key] return intersection"},{"question":"In this problem, you will create a Python function called `generate_maze()` that uses the `random` module to generate a simple, solvable maze represented as a 2D grid (matrix). The maze will have a specified number of rows and columns, and will include walls (represented by \'#\') and paths (represented by \'.\'). The function should ensure that there is exactly one path from the start position (top-left corner) to the end position (bottom-right corner). **Requirements:** 1. The maze should be created as a 2D list where each element represents a cell in the maze. 2. The maze must have a single path from the start position at the top-left corner `(0,0)` to the end position at the bottom-right corner `(rows-1, cols-1)`. 3. Ensure that the start (top-left) and end (bottom-right) positions are both paths (\'.\'). 4. Use recursion or iterative backtracking algorithms to generate the maze with guaranteed solvability. 5. The resulting maze should be printed out in a readable format. # Additional Details: - The `random` module can help to randomize paths and walls. - Consider using depth-first search (DFS) or similar algorithms to ensure a single solution path exists. - The generated maze must have exactly `rows` rows and `cols` columns. # Function Signature ```python def generate_maze(rows, cols): import random # Your implementation here ``` **Example Usage:** ```python maze = generate_maze(5, 5) for row in maze: print(\\" \\".join(row)) ``` *Possible Output:* ``` . # . . . . # # # . . . . # . # # . # . . . . . . ```","solution":"import random def generate_maze(rows, cols): def print_maze(maze): for row in maze: print(\\" \\".join(row)) def is_valid_move(maze, x, y): if x >= 0 and x < rows and y >= 0 and y < cols and maze[x][y] == \'#\': return True return False def generate_path(maze, x, y): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] random.shuffle(directions) maze[x][y] = \'.\' for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid_move(maze, nx, ny): generate_path(maze, nx, ny) # Initialize the maze with walls maze = [[\'#\' for _ in range(cols)] for _ in range(rows)] # Create a solvable path using DFS generate_path(maze, 0, 0) # Ensure start and end points are paths maze[0][0] = \'.\' maze[rows-1][cols-1] = \'.\' print_maze(maze) return maze"},{"question":"Your task is to write a function `draw_star` that utilizes the `turtle` library to draw a five-pointed star on the screen. This function should take two parameters: `size`, which determines the length of each side of the star, and `color`, which sets the color of both the pen color (pencolor) and the fill color (fillcolor) of the star. Your function should use the `turtle.right` and `turtle.color` functions from the `turtle` library to accomplish the following tasks: 1. Set the color of the turtle using the `color` parameter. 2. Draw a five-pointed star of the specified `size`, turning the turtle right by 144 degrees after drawing each side. Here are the details of each function you need to use: - `turtle.right(angle)`: This function turns the turtle right by the specified angle (in degrees). - `turtle.color(*args)`: This function sets the pencolor and fillcolor of the turtle. It can take several formats: - `color(colorstring)`: Sets both fill and pen color to the same `colorstring`. - `color(colorstring1, colorstring2)`: Sets the pen color to `colorstring1` and the fill color to `colorstring2`. Implement the `draw_star` function that adheres to this specification. # Function Signature ```python def draw_star(size: int, color: str): pass ``` # Input - `size` (int): Length of each side of the star. - `color` (str): Color name for both the pen and fill color. # Output - The function does not need to return anything. It should draw a star on the screen with the specified attributes. # Example ```python draw_star(100, \\"red\\") ``` This would draw a red five-pointed star with each side of 100 units in length. # Constraints - `size` will be a positive integer. - `color` will be a valid color string that the `turtle` library recognizes.","solution":"import turtle def draw_star(size: int, color: str): Draws a five-pointed star with the given size and color. Parameters: size (int): The length of each side of the star. color (str): The color of the star. turtle.color(color) turtle.begin_fill() for _ in range(5): turtle.forward(size) turtle.right(144) turtle.end_fill() turtle.done()"},{"question":"You are asked to write a function that reads a CSV file and calculates the average value of a given column. The function should use the `csv` and `sys` libraries. If the file cannot be opened, the function should print an error message and terminate the program using `sys.exit()`. If the specified column does not exist, the function should handle the KeyError exception and print a detailed error message. Function Signature ```python def calculate_column_average(file_path: str, column_name: str) -> float: pass ``` Requirements 1. Use the `csv` library to read the CSV file. 2. Handle file opening errors using `sys.exit()` to terminate the program. 3. Handle missing column errors by printing an error message and using `sys.exit()` to terminate the program. 4. Return the average of the column values as a floating-point number. 5. Assume the column values will be numeric. Use the following prototypes: - `csv.DictReader` from the `csv` library - `sys.exit` from the `sys` library # Example Usage ```python # CSV file content (example.csv) # name,age,salary # John Doe,30,50000 # Jane Smith,25,60000 # Emily Davis,35,55000 # Function Call Example average_salary = calculate_column_average(\'example.csv\', \'salary\') print(average_salary) # Output: 55000.0 ``` **Instructions**: Implement the `calculate_column_average` function to meet the above requirements, using appropriate error handling techniques and the specified libraries.","solution":"import csv import sys def calculate_column_average(file_path: str, column_name: str) -> float: try: with open(file_path, mode=\'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) column_values = [] for row in reader: try: column_values.append(float(row[column_name])) except KeyError: print(f\\"Error: Column \'{column_name}\' does not exist in the file.\\") sys.exit(1) except ValueError: print(f\\"Error: Non-numeric value encountered in column \'{column_name}\'.\\") sys.exit(1) if not column_values: print(f\\"Error: Column \'{column_name}\' is empty.\\") sys.exit(1) return sum(column_values) / len(column_values) except FileNotFoundError: print(f\\"Error: File \'{file_path}\' not found.\\") sys.exit(1)"},{"question":"**Task Overview:** Implement a function named `group_anagrams` that groups a list of strings into anagrams. The purpose of this problem is to effectively utilize dictionary data structures in Python for efficient grouping and to understand how to sort strings for comparison. # Function Signature: ```python def group_anagrams(words): ``` # Parameters: - `words`: List of strings This is a list consisting of strings which need to be grouped into lists of anagrams. # Returns: - A list of lists of strings. Each list contains strings which are anagrams of each other from the original list. # Example: ```python group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) should return: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Instructions: - Use a dictionary to group words by their sorted tuple of characters. - Iterate through each word in the input list. - Sort each word and use it as a key to group anagrams together in the dictionary. - Extract the grouped anagrams from the dictionary values and return them as a list of lists. # Constraints: - The length of words list will be within the range `[1, 10000]`. - Each string in words will have a length within the range `[1, 100]`.","solution":"def group_anagrams(words): Groups a list of strings into anagrams. from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"# Employee Salary Bonus Calculation You are tasked with implementing a function to calculate the bonus for employees based on their performance rating. The company policy for calculating bonuses is as follows: - Employees are categorized into three performance levels: \'A\', \'B\', and \'C\'. - Each performance level has a corresponding base bonus percentage of the annual salary: - \'A\': 20% - \'B\': 10% - \'C\': 5% - If an employee has completed more than 5 years with the company, they receive an additional 5% bonus on their annual salary. - If an employee has completed more than 10 years with the company, they receive an additional 10% bonus on their annual salary (not cumulative with the 5% bonus). # Your Task Implement the function `calculate_bonus(salary: float, performance: str, years_worked: int) -> float`. The function will take three arguments: - `salary`: a float representing the annual salary of the employee. - `performance`: a string (\'A\', \'B\', or \'C\') representing the performance level of the employee. - `years_worked`: an integer representing the total number of years the employee has worked at the company. The function should calculate and return the total bonus amount based on the rules described above. # Example For `calculate_bonus(60000, \'A\', 7)`, the function should return `15000.0`, meaning the employee receives a total bonus of 15,000. # Constraints - `salary` is a positive float. - `performance` is one of the strings: \'A\', \'B\', \'C\'. - `years_worked` is a non-negative integer. # Requirements - Ensure that the bonus is calculated correctly based on the performance level and the number of years worked. - The function should return the bonus as a float rounded to two decimal places. ```python def calculate_bonus(salary: float, performance: str, years_worked: int) -> float: # Your implementation here pass # Example usage: # print(calculate_bonus(60000, \'A\', 7)) # Output: 15000.0 # print(calculate_bonus(50000, \'B\', 12)) # Output: 10000.0 # print(calculate_bonus(40000, \'C\', 4)) # Output: 2000.0 ``` --- # Explanation: In this coding assessment question, you are expected to design a new problem statement for calculating employee bonuses. The question is structured similarly to the given examples, with clear definitions of the inputs, expected behavior, and example outputs. Remember to test your function thoroughly to ensure accuracy.","solution":"def calculate_bonus(salary: float, performance: str, years_worked: int) -> float: Calculate the total bonus amount based on performance level and years worked. Parameters: - salary: float, the annual salary of the employee. - performance: str, performance level (\'A\', \'B\', or \'C\'). - years_worked: int, total number of years the employee has worked at the company. Returns: - float, the total bonus amount to be awarded to the employee. # Base bonus percentage based on performance level performance_bonus = {\'A\': 0.20, \'B\': 0.10, \'C\': 0.05}[performance] # Additional bonus based on years worked additional_bonus = 0.0 if years_worked > 10: additional_bonus = 0.10 elif years_worked > 5: additional_bonus = 0.05 # Calculate total bonus amount total_bonus = salary * (performance_bonus + additional_bonus) return round(total_bonus, 2)"},{"question":"You are given a task to write a function named `balance_parentheses` that takes a string consisting of only three types of characters: \'(\', \')\', and \'*\'. This function should determine if it is possible to balance the parentheses in the string by treating each \'*\' as either an opening parenthesis \'(\', a closing parenthesis \')\', or an empty string \'\'. Here is the detailed functionality of this function: 1. **Function Name:** `balance_parentheses` 2. **Parameters:** - `s` (str): The input string containing only the characters \'(\', \')\', and \'*\'. 3. **Functionality:** - The function should iterate through the string and keep track of the possible states of the number of unmatched opening parentheses. - For every character: - If it is \'(\', increment the count of unmatched opening parentheses. - If it is \')\', decrement the count of unmatched opening parentheses, ensuring that the count never goes below zero. - If it is \'*\', consider the three possible cases: treat it as \'(\', as \')\', or as \'\' (skip it), and update the possible states accordingly. - After processing all characters, check if there exists any scenario in which the number of unmatched opening parentheses is zero, indicating that the string can be balanced. 4. **Return Value:** - The function should return a boolean value indicating whether it is possible to balance the parentheses in the string. Here is the code snippet visualized in the form of requirements: ```python def balance_parentheses(s): pass ``` **Example Usage:** ```python s1 = \\"(*))\\" s2 = \\"(*()\\" s3 = \\"(((*)\\" s4 = \\"(()*\\" s5 = \\"((*))()\\" print(balance_parentheses(s1)) # Expected Output: True print(balance_parentheses(s2)) # Expected Output: True print(balance_parentheses(s3)) # Expected Output: False print(balance_parentheses(s4)) # Expected Output: True print(balance_parentheses(s5)) # Expected Output: True ``` **Expected Outcomes:** - For `s1 = \\"(*))\\"`, the function should return `True` as it can be balanced. - For `s2 = \\"(*()\\"`, the function should return `True` as it can be balanced. - For `s3 = \\"(((*)\\"`, the function should return `False` as it cannot be balanced. - For `s4 = \\"(()*\\"`, the function should return `True` as it can be balanced. - For `s5 = \\"((*))()\\"`, the function should return `True` as it can be balanced.","solution":"def balance_parentheses(s): Determines if the given string can be balanced by treating \'*\' as either \'(\', \')\' or \'\'. low = high = 0 # low: minimum number of unmatched \'(\', high: maximum number of unmatched \'(\' for char in s: if char == \'(\': low += 1 high += 1 elif char == \')\': if low > 0: low -= 1 high -= 1 elif char == \'*\': if low > 0: low -= 1 high += 1 if high < 0: # more \')\' than \'(\' at any point return False return low == 0 # if low is 0, it means we can balance the string"},{"question":"In this problem, you are required to write a function that simulates a basic bank account system. The function should be able to process a list of operations and return the final balance. Each operation will be represented as a string, and the possible operations are deposits, withdrawals, and balance checks. A successful deposit increases the balance, while a successful withdrawal decreases it. Balance checks do not affect the balance. # Function Signature: ```python def bank_account(operations: list[str]) -> str: ``` # Parameters: - `operations`: A list of strings where each string is an operation in the format: - \\"D amount\\" for deposits (where \\"amount\\" is a positive integer) - \\"W amount\\" for withdrawals (where \\"amount\\" is a positive integer) - \\"B\\" for balance check. # Description: Your goal is to implement the `bank_account` function that processes each operation in the given list and returns the final balance after all operations. The function should process the operations in the order they appear in the list. - If a deposit operation is encountered, the amount should be added to the balance. - If a withdrawal operation is encountered, the amount should be subtracted from the balance only if the balance is sufficient; otherwise, the withdrawal should be ignored. - If a balance check operation is encountered, it should not change the balance but should be recorded in a list for output purposes. The function should return a string consisting of the final balance followed by any balance checks found during processing, each on a new line. # Example: ```python operations = [\\"D 100\\", \\"W 50\\", \\"B\\", \\"D 200\\", \\"B\\", \\"W 100\\", \\"W 250\\", \\"B\\"] bank_account(operations) ``` Output: ``` 150 150 350 100 ``` # Important Notes: - You can assume the initial balance is 0. - The amount in deposit and withdrawal operations will always be a positive integer. - Balance checks should be returned in the order they are encountered in the `operations` list.","solution":"def bank_account(operations): balance = 0 results = [] for operation in operations: if operation.startswith(\\"D\\"): amount = int(operation.split()[1]) balance += amount elif operation.startswith(\\"W\\"): amount = int(operation.split()[1]) if balance >= amount: balance -= amount elif operation == \\"B\\": results.append(balance) final_output = [str(balance)] + list(map(str, results)) return \\"n\\".join(final_output)"},{"question":"Write a function called `apply_mask_to_image(image_path, mask_path, output_path)` that applies a binary mask to an image using the `Pillow` library. The masked part of the image should appear transparent in the output image. The function should: 1. Read the input image from `image_path`. 2. Read the binary mask from `mask_path`. The mask is the same size as the input image and contains only black and white pixels. 3. Apply the mask to the input image. All white regions in the mask should correspond to visible parts of the input image, and all black regions should correspond to transparent parts in the output image. 4. Save the resulting image to `output_path` as a PNG file with transparency. Ensure the following: - Correctly read the input image and mask. - Properly manipulate the image to apply the mask and handle transparency. - Save the final image with the correct file format and transparency. # Function Signature: ```python def apply_mask_to_image(image_path, mask_path, output_path): ``` # Expected Behavior: - The function should accept three arguments: `image_path`, `mask_path`, and `output_path`. - It should read the image and mask, apply the mask to create a transparent background in masked regions, and save the output correctly as a PNG file.","solution":"from PIL import Image def apply_mask_to_image(image_path, mask_path, output_path): Applies a binary mask to an image. The masked part of the image should appear transparent. Parameters: - image_path (str): The path to the input image. - mask_path (str): The path to the binary mask image. - output_path (str): The path to save the output image. # Open the input image and convert it to RGBA image = Image.open(image_path).convert(\\"RGBA\\") # Open the mask image mask = Image.open(mask_path).convert(\\"L\\") # Get the image data image_data = image.load() mask_data = mask.load() # Apply the mask for y in range(image.size[1]): for x in range(image.size[0]): if mask_data[x, y] == 0: # black in mask means transparent image_data[x, y] = (image_data[x, y][0], image_data[x, y][1], image_data[x, y][2], 0) # Save the resultant image image.save(output_path, \\"PNG\\")"},{"question":"You are tasked with writing a function named `analyze_sales_data` in Python, which is responsible for analyzing sales data from a CSV file and generating a sales summary. The function should read the sales data from the provided CSV file, compute the total sales, the average sales per transaction, and the highest sale recorded. The function should then print out these computed metrics. The CSV file contains sales transactions with each row representing a single sale. The columns are `Transaction ID` and `Amount`, where `Amount` represents the amount of the sale in dollars. Your function should follow these steps: 1. Verify if the `input_csv` argument is a valid filename and if the file exists. 2. Read the sales data from the CSV file using the `pandas` library. 3. Compute the total sales by summing up all the `Amount` values. 4. Compute the average sale amount by dividing the total sales by the number of transactions. 5. Identify the highest sale amount in the dataset. 6. Print out the results in a clear format. **Function Signature:** ```python from typing import Any import pandas as pd def analyze_sales_data(input_csv: str) -> None: pass ``` **Parameters:** - `input_csv` (str): The filename of the input CSV containing the sales data. **Example:** Given an `input_csv` file `sales.csv` with the following content: ``` Transaction ID,Amount 1,29.99 2,49.99 3,19.99 4,99.99 5,9.99 ``` Calling: ```python analyze_sales_data(\\"sales.csv\\") ``` This function should: 1. Compute the total sales as `209.95`. 2. Compute the average sales per transaction as `41.99`. 3. Identify the highest sale amount as `99.99`. 4. Print: ``` Total Sales: 209.95 Average Sale: 41.99 Highest Sale: 99.99 ```","solution":"from typing import Any import pandas as pd import os def analyze_sales_data(input_csv: str) -> None: Analyzes sales data from a CSV file and prints the total sales, average sales per transaction, and the highest sale recorded. Parameters: input_csv (str): The filename of the input CSV containing the sales data. # Check if the file exists if not os.path.isfile(input_csv): print(f\\"Error: File \'{input_csv}\' does not exist.\\") return # Read the sales data from the CSV file sales_data = pd.read_csv(input_csv) # Compute the total sales total_sales = sales_data[\\"Amount\\"].sum() # Compute the average sale amount average_sale = sales_data[\\"Amount\\"].mean() # Identify the highest sale amount highest_sale = sales_data[\\"Amount\\"].max() # Print the results print(f\\"Total Sales: {total_sales:.2f}\\") print(f\\"Average Sale: {average_sale:.2f}\\") print(f\\"Highest Sale: {highest_sale:.2f}\\")"},{"question":"You are working on an algorithm that evaluates student grades based on their scores in multiple subjects. You have a list of dictionaries where each dictionary contains a student\'s name and their respective scores across different subjects. The problem is to create a function named `calculate_final_grades(students_scores)` that computes the final grade for each student and determines the class highest performer. The function should perform the following tasks: 1. Accept a list of dictionaries named `student_scores`, where each dictionary has: - a key `\'name\'` representing the student\'s name as a string - a key `\'scores\'` representing a list of integers, each denoting a score in a subject 2. Calculate the average score for each student from their list of scores. 3. Assign a final grade based on the average score using the following criteria: - A grade if average >= 90 - B grade if 80 <= average < 90 - C grade if 70 <= average < 80 - D grade if 60 <= average < 70 - F grade if average < 60 4. Determine the student with the highest average score and print \\"Top Performer: [Student\'s Name]\\". 5. Return a list of dictionaries where each dictionary contains: - the student\'s name - their respective final grade as `\'grade\'`. Implement the `calculate_final_grades` function to achieve these tasks.","solution":"def calculate_final_grades(student_scores): Calculate the final grades for a list of students and determine the top performer. Args: student_scores (list): A list of dictionaries, each containing: - \'name\': student\'s name (str) - \'scores\': list of subject scores (list of ints) Returns: list: A list of dictionaries, each containing: - \'name\': student\'s name (str) - \'grade\': student\'s final grade (str) Also prints the name of the top performer. result = [] top_performer = None highest_average = 0 for student in student_scores: name = student[\'name\'] scores = student[\'scores\'] if not scores: average = 0 else: average = sum(scores) / len(scores) if average >= 90: grade = \'A\' elif average >= 80: grade = \'B\' elif average >= 70: grade = \'C\' elif average >= 60: grade = \'D\' else: grade = \'F\' result.append({\'name\': name, \'grade\': grade}) if average > highest_average: highest_average = average top_performer = name print(f\\"Top Performer: {top_performer}\\") return result"},{"question":"Your task is to implement a function `rotate_matrix_90_degrees(matrix: List[List[int]]) -> List[List[int]]` that rotates a given N x N matrix 90 degrees clockwise. The matrix is represented by a list of lists of integers. Your function should return the rotated matrix. # Function Signature ```python from typing import List def rotate_matrix_90_degrees(matrix: List[List[int]]) -> List[List[int]]: ``` # Example Usage ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix_90_degrees(matrix) print(rotated_matrix) ``` Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Explanation - The element at position (0,0) in the original matrix moves to position (0,2) in the rotated matrix. - The element at position (0,1) in the original matrix moves to position (1,2) in the rotated matrix. - This continues for all elements, resulting in a 90-degree clockwise rotation. # Constraints - The input matrix will always be non-empty. - The input matrix will always be a square matrix (N x N) with 1 <= N <= 100. - All elements in the matrix are integers.","solution":"from typing import List def rotate_matrix_90_degrees(matrix: List[List[int]]) -> List[List[int]]: Rotate the given N x N matrix 90 degrees clockwise. N = len(matrix) # Create a new matrix to store the rotated values rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix"},{"question":"In this problem, you will create a function that generates a precision-recall curve for a classification model. The precision-recall curve is a graphical representation that shows the trade-off between precision and recall for different threshold values. Your task is to implement a function named `plot_precision_recall_curve` which takes two arguments: 1. `actual`: A list or numpy array containing the true binary labels (0s and 1s) for the test set. 2. `predicted_probs`: A list or numpy array containing the predicted probabilities for the positive class (1) returned by the classifier. Inside the function, you will: - Calculate the precision and recall using `sklearn.metrics.precision_recall_curve`. - Compute the average precision (AP) score using `sklearn.metrics.average_precision_score`. - Plot the precision-recall curve using `matplotlib.pyplot` and display the AP score in the plot\'s legend. Make sure that your x-axis is labeled as \'Recall\' and y-axis is labeled as \'Precision\' using the `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` functions respectively. The plot size should be set to 5x5 inches. Here’s a summary of the function signature: ```python def plot_precision_recall_curve(actual, predicted_probs): pass ``` You should also handle necessary imports for this function to work correctly.","solution":"import matplotlib.pyplot as plt from sklearn.metrics import precision_recall_curve, average_precision_score def plot_precision_recall_curve(actual, predicted_probs): Generates and plots a precision-recall curve for a classification model. Parameters: actual (list or np.array): True binary labels (0s and 1s). predicted_probs (list or np.array): Predicted probabilities for the positive class (1). Returns: None. Displays the precision-recall curve plot. # Calculate precision and recall values precision, recall, _ = precision_recall_curve(actual, predicted_probs) # Calculate Average Precision score ap_score = average_precision_score(actual, predicted_probs) # Plot the precision-recall curve plt.figure(figsize=(5, 5)) plt.plot(recall, precision, marker=\'.\', label=f\'AP: {ap_score:.2f}\') plt.xlabel(\'Recall\') plt.ylabel(\'Precision\') plt.title(\'Precision-Recall Curve\') plt.legend() plt.grid() plt.show()"},{"question":"You need to implement a Python function, `k_largest_elements(arr: List[int], k: int) -> List[int]`, that returns the k largest elements from the given list of integers in descending order. You are required to achieve this by utilizing a min-heap data structure to efficiently track the k largest elements as you iterate through the list. Your implementation should: - Initialize an empty min-heap. - Iterate through each element in the input list `arr`. - For the first k elements, add each element to the heap. - For elements beyond the first k, compare the element to the smallest element in the heap (i.e., the root of the min-heap). If the current element is larger, replace the root with this element and reheapify. - Convert the heap into a list and sort it in descending order before returning. You can use Python\'s built-in `heapq` module to manage the heap. Ensure that your implementation correctly handles edge cases, such as `k` being greater than the length of the list or the list being empty. **Requirements:** - Function Name: `k_largest_elements` - Input: A list of integers `arr` and an integer `k` - Output: A list of the k largest integers from `arr` in descending order ```python import heapq from typing import List def k_largest_elements(arr: List[int], k: int) -> List[int]: # Your implementation here pass ```","solution":"import heapq from typing import List def k_largest_elements(arr: List[int], k: int) -> List[int]: if k <= 0: return [] if k >= len(arr): return sorted(arr, reverse=True) min_heap = [] for i in range(k): heapq.heappush(min_heap, arr[i]) for i in range(k, len(arr)): if arr[i] > min_heap[0]: heapq.heapreplace(min_heap, arr[i]) return sorted(min_heap, reverse=True)"},{"question":"In this problem, your task is to implement a function that finds the longest substring with at most two distinct characters in a given string. The function you need to implement is: ```python def longest_substring_two_distinct(s): Finds the longest substring with at most two distinct characters. Parameters: s (string): The input string. Returns: int: The length of the longest substring with at most two distinct characters. ``` The function parameter is: 1. `s`: A string consisting of lowercase English letters. # Requirements 1. Use sliding window technique to solve this problem efficiently. 2. Maintain a frequency count of the characters within the current window. 3. As you expand the window, if the number of distinct characters exceeds two, shrink the window from the left until there are at most two distinct characters. # Example Given the input string `s = \\"eceba\\"`, - The longest substring with at most two distinct characters is `\\"ece\\"` which has a length of 3. Given the input string `s = \\"ccaabbb\\"`, - The longest substring with at most two distinct characters is `\\"aabbb\\"` which has a length of 5. You should complete the function `longest_substring_two_distinct(s)`.","solution":"def longest_substring_two_distinct(s): from collections import defaultdict n = len(s) if n < 3: return n left = 0 right = 0 max_len = 2 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 right += 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are developing a system for optimizing the layout of a warehouse to minimize the distance workers must travel when picking items for orders. To achieve this, you will implement a genetic algorithm where each individual represents a possible layout of the warehouse. Create the function `optimize_warehouse_layout(item_positions, current_layout, elitism_count, mutation_probability, population_size, generations)`. This function should optimize the warehouse layout by iteratively evolving a population of layouts over several generations using the following steps: 1. **Evaluation**: Calculate the total travel distance for each layout. 2. **Elitism**: Preserve a specified number of the best layouts by directly carrying them over to the next generation. 3. **Selection**: Use roulette wheel selection to pick parent layouts for breeding, where layouts with shorter travel distances have higher chances of being selected. 4. **Crossover**: Combine two parent layouts using ordered crossover to produce offspring layouts. 5. **Mutation**: Apply random swaps based on mutation probability to introduce variability. 6. **Iteration**: Repeat the selection, crossover, and mutation process for the given number of generations. **Function Signature:** ```python def optimize_warehouse_layout(item_positions, current_layout, elitism_count, mutation_probability, population_size, generations): pass ``` **Parameters:** - `item_positions`: A list of tuples where each tuple represents the (x, y) coordinates of an item in the warehouse. - `current_layout`: A list of integers representing the initial layout (order) of item indices. - `elitism_count`: An integer denoting the number of top layouts to preserve for the next generation. - `mutation_probability`: A float representing the probability of mutation in the range [0, 1]. - `population_size`: An integer specifying the number of layouts in the population. - `generations`: An integer representing the number of generations to evolve the population. **Output:** - Returns a tuple where the first element is the optimized layout (list of item indices) and the second element is the total travel distance of this layout. # Example Function Usage: ```python item_positions = [(0, 0), (1, 2), (3, 1), (4, 5), (2, 3)] current_layout = [0, 1, 2, 3, 4] optimized_layout, min_distance = optimize_warehouse_layout( item_positions, current_layout, elitism_count=2, mutation_probability=0.1, population_size=10, generations=50 ) print(\\"Optimized Layout:\\", optimized_layout) print(\\"Minimum Total Distance:\\", min_distance) ``` You are to implement the `optimize_warehouse_layout` function using the specified genetic algorithm steps, ensuring that the optimization process is performed efficiently and effectively. This problem aims to teach students about optimization techniques using genetic algorithms and how to apply these techniques to solve practical problems.","solution":"import random import numpy as np def calculate_total_distance(layout, item_positions): total_distance = 0 for i in range(len(layout) - 1): x1, y1 = item_positions[layout[i]] x2, y2 = item_positions[layout[i + 1]] total_distance += np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return total_distance def generate_initial_population(current_layout, population_size): population = [current_layout[:]] for _ in range(population_size - 1): individual = current_layout[:] random.shuffle(individual) population.append(individual) return population def evaluate_population(population, item_positions): return [calculate_total_distance(layout, item_positions) for layout in population] def roulette_wheel_selection(pop_fitness): total_fitness = sum(1.0 / f for f in pop_fitness) probs = [(1.0 / f) / total_fitness for f in pop_fitness] return np.random.choice(len(pop_fitness), p=probs) def ordered_crossover(parent1, parent2): size = len(parent1) start, end = sorted(random.sample(range(size), 2)) child = [None] * size for i in range(start, end + 1): child[i] = parent1[i] fill_pos = end + 1 for i in range(end + 1, end + 1 + size): candidate = parent2[i % size] if candidate not in child: if fill_pos >= size: fill_pos -= size child[fill_pos] = candidate fill_pos += 1 return child def mutate(layout, mutation_probability): for i in range(len(layout)): if random.random() < mutation_probability: j = random.randint(0, len(layout) - 1) layout[i], layout[j] = layout[j], layout[i] def optimize_warehouse_layout(item_positions, current_layout, elitism_count, mutation_probability, population_size, generations): population = generate_initial_population(current_layout, population_size) for generation in range(generations): fitness = evaluate_population(population, item_positions) new_population = [] sorted_indices = sorted(range(population_size), key=lambda x: fitness[x]) for i in range(elitism_count): new_population.append(population[sorted_indices[i]]) while len(new_population) < population_size: parent1_idx = roulette_wheel_selection(fitness) parent2_idx = roulette_wheel_selection(fitness) parent1 = population[parent1_idx] parent2 = population[parent2_idx] child = ordered_crossover(parent1, parent2) mutate(child, mutation_probability) new_population.append(child) population = new_population best_index = min(range(population_size), key=lambda x: fitness[x]) optimal_layout = population[best_index] min_distance = fitness[best_index] return optimal_layout, min_distance"},{"question":"In this problem, you will be implementing a function to identify and return all the prime numbers in a given list. Prime numbers are natural numbers greater than 1 that are not divisible by any number other than 1 and themselves. The function will: 1. Accept a list of integers as input. 2. Identify all prime numbers in the list. 3. Return a new list containing the identified prime numbers. The function signature should be: ```python def find_primes(lst: list) -> list: ``` **Requirements**: - Use the trial division method to check for prime numbers. - The function should handle an empty input list and return an empty list. - Ensure the function works efficiently even with large lists. Example: ```python find_primes([10, 15, 3, 7, 9, 19]) # Output: [3, 7, 19] find_primes([]) # Output: [] find_primes([4, 6, 8, 12]) # Output: [] ``` In this context, the function should: - Iterate over each element in the input list. - Check if the element is a prime number using the trial division method. - Accumulate and return a new list containing all prime numbers found in the input list.","solution":"def find_primes(lst: list) -> list: Returns a list of prime numbers from the provided list. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True return [num for num in lst if is_prime(num)]"},{"question":"** Design a function `find_shortest_word_length` that takes a single argument, `sentence`, which is a string representing a sentence. This function should: 1. Validate that `sentence` is a string. If it is not, raise a `TypeError`. 2. Split the sentence into words. Consider any sequence of characters separated by spaces to be a word. 3. Identify the length of the shortest word in the sentence. 4. Return the length of this shortest word. **Instructions**: - If the input sentence is an empty string, return 0. - You are not required to handle punctuation or special characters differently – treat them as part of words. - Ensure that the function handles both uppercase and lowercase letters consistently. Below is the function signature you should use: ```python def find_shortest_word_length(sentence: str) -> int: ``` **Example Usage**: ```python length = find_shortest_word_length(\\"The quick brown fox jumps over the lazy dog\\") print(length) # Output should be 3 for the word \\"The\\". ``` **Note**: The function should be designed to efficiently find the shortest word length.","solution":"def find_shortest_word_length(sentence: str) -> int: Returns the length of the shortest word in the given sentence. :param sentence: A string representing a sentence. :return: An integer representing the length of the shortest word. if not isinstance(sentence, str): raise TypeError(\\"The input must be a string\\") # Split the sentence into words words = sentence.split() # If the sentence is empty, return 0 if not words: return 0 # Find the length of the shortest word shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You need to write a Python function `find_k_longest_words` that takes a list of strings and an integer `k` as input and returns a list of the `k` longest unique words sorted in descending order of length. If there are words of the same length, their original order in the input list should be maintained. Function Signature: ```python def find_k_longest_words(words: List[str], k: int) -> List[str]: ``` **Details**: 1. **Input**: - The function receives a list `words` of strings, where each string represents a word. You can assume that all words are unique in terms of content, but they can have the same length. - An integer `k` specifying how many words to return. 2. **Output**: - The function should return a list of the `k` longest unique words in descending order of their length. If there are fewer than `k` unique words, return as many as available. - Words of the same length should maintain their original order as in the input list. 3. **Requirements**: - The function should correctly handle edge cases such as an empty input list or a value of `k` that is larger than the number of unique words. - The function should be optimized to handle a large number of words efficiently. Example: ```python words = [\\"hello\\", \\"world\\", \\"programming\\", \\"is\\", \\"fun\\"] k = 3 print(find_k_longest_words(words, k)) # Output should be: [\'programming\', \'hello\', \'world\'] ``` ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"] k = 2 print(find_k_longest_words(words, k)) # Output should be: [\'elderberry\', \'banana\'] ``` **Constraints**: - You may assume the input list does not contain duplicate words. - Ensure the function handles cases with less than `k` words gracefully.","solution":"from typing import List def find_k_longest_words(words: List[str], k: int) -> List[str]: Returns the k longest unique words sorted in descending order of length. If words have the same length, their original order is maintained. # Sorting words based on length in descending order; stable sort keeps original order for same length. sorted_words = sorted(words, key=len, reverse=True) # Return the first k elements from the sorted list return sorted_words[:k]"},{"question":"In many applications, it is crucial to process dates and times effectively. One common task is to manipulate and format date and time objects. To ensure proper handling of date and time data, you are required to implement a function for converting a duration given in seconds into a more human-readable format. # Objective Write a function `format_duration` that converts a number of seconds into a human-readable string formatted as \\"X hours Y minutes Z seconds\\". # Requirements 1. The function should accept an integer number of seconds and return a string. 2. Hours, minutes, and seconds should be included in the output, even if they are zero. 3. The word \\"hour\\" should be used for both singular and plural forms (e.g., \\"1 hour,\\" \\"2 hours\\"). 4. Similarly, use \\"minute\\" and \\"second\\" for both singular and plural forms. # Function Signature ```python def format_duration(seconds: int) -> str: pass ``` # Constraints - The input will always be a non-negative integer. # Example Usage ```python # Should output \\"1 hour 0 minutes 0 seconds\\" print(format_duration(3600)) # Should output \\"1 hour 1 minute 1 second\\" print(format_duration(3661)) # Should output \\"0 hours 0 minutes 5 seconds\\" print(format_duration(5)) # Should output \\"2 hours 30 minutes 0 seconds\\" print(format_duration(9000)) ``` # Examples Explained - `format_duration(3600)` returns \\"1 hour 0 minutes 0 seconds\\" because there are 3600 seconds in 1 hour. - `format_duration(3661)` returns \\"1 hour 1 minute 1 second\\" because 3661 seconds is 1 hour, 1 minute, and 1 second. - `format_duration(5)` returns \\"0 hours 0 minutes 5 seconds\\" because 5 seconds is less than 1 minute. - `format_duration(9000)` returns \\"2 hours 30 minutes 0 seconds\\" because 9000 seconds is 2 hours and 30 minutes. Note: Ensure your solution handles edge cases effectively, including inputs like zero seconds.","solution":"def format_duration(seconds: int) -> str: Converts a number of seconds into a human-readable string formatted as \'X hours Y minutes Z seconds\'. Parameters: seconds (int): The number of seconds to format. Returns: str: The formatted duration string. hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return f\\"{hours} hour{\'s\' if hours != 1 else \'\'} {minutes} minute{\'s\' if minutes != 1 else \'\'} {seconds} second{\'s\' if seconds != 1 else \'\'}\\""},{"question":"**Movie Rating Classifier** You have been tasked to create a basic movie rating classifier using a dataset of movie reviews. The dataset contains reviews for various movies along with their ratings. Each movie review has been given a rating between 1 to 5, with 1 being the worst and 5 being the best. Your task is to implement the function `classify_reviews` that reads the movie review data from a CSV file and classifies each review into one of three categories: \'positive\', \'neutral\', or \'negative\'. The classification is based on the rating: - Ratings 4 and 5 are classified as \'positive\'. - Ratings 3 is classified as \'neutral\'. - Ratings 1 and 2 are classified as \'negative\'. Given: - The CSV file path where movie reviews are stored. - The file contains two columns: \'review\' (text of the review) and \'rating\' (integer rating between 1 to 5). Your task is to: 1. Read the movie review data from the CSV file. 2. Create a new column \'sentiment\' in the dataframe based on the rating. 3. Classify the \'rating\' into \'sentiment\' using the criteria provided above. 4. Return the modified dataframe with the additional \'sentiment\' column. **Function Signature** ```python def classify_reviews(file_path: str) -> pd.DataFrame: pass ``` **Test the function** with a sample CSV file where: - The file contains the following rows: ``` review,rating \\"The movie was fantastic!\\",5 \\"Not good, but not bad either.\\",3 \\"I didn\'t like the movie at all.\\",1 \\"An excellent film; highly recommend.\\",5 ``` Example Call: ```python df = classify_reviews(\'movie_reviews.csv\') print(df) ``` Expected output: ``` review rating sentiment 0 The movie was fantastic! 5 positive 1 Not good, but not bad either. 3 neutral 2 I didn\'t like the movie at all. 1 negative 3 An excellent film; highly recommend. 5 positive ``` **Constraints** - The file format is assumed to be correct. - Use the `pandas` library for data manipulation. - Ensure the \'sentiment\' column is correctly populated based on the provided classification criteria.","solution":"import pandas as pd def classify_reviews(file_path: str) -> pd.DataFrame: Classifies movie reviews based on their rating. Args: file_path (str): The path to the CSV file containing movie reviews and ratings. Returns: pd.DataFrame: Dataframe with an additional \'sentiment\' column. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Define a function to classify the sentiment based on the rating def classify_sentiment(rating): if rating in [4, 5]: return \'positive\' elif rating == 3: return \'neutral\' elif rating in [1, 2]: return \'negative\' # Apply the classification function to the \'rating\' column to create the \'sentiment\' column df[\'sentiment\'] = df[\'rating\'].apply(classify_sentiment) return df"},{"question":"** Write a function `generateCombinations` that generates all possible combinations of a given list\'s elements. The function should take two parameters: `lst` which is the input list of unique elements, and `k` which is the length of each combination. Your goal is to return a list of tuples, where each tuple is a combination of `k` elements from `lst`. Here are the specific steps the function should perform: 1. Use the `combinations` function from the `itertools` module to generate the combinations. 2. Convert the result from the `combinations` function into a list of tuples. 3. Return the list of combinations. Your function should work as follows: ```python from itertools import combinations def generateCombinations(lst, k): pass ``` **Example** ```python lst = [1, 2, 3, 4] k = 2 print(generateCombinations(lst, k)) ``` Output: ``` [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] ``` **Note**: Ensure that your function correctly generates all combinations without skipping or repeating any elements. This problem will help you understand the usage of the combinations function and handling lists in Python. **","solution":"from itertools import combinations def generateCombinations(lst, k): Generate all possible combinations of the elements in lst of length k. Args: lst: List of unique elements. k: Length of each combination. Returns: List of tuples, where each tuple is a combination of k elements from lst. return list(combinations(lst, k))"},{"question":"You are developing a text-processing utility to analyze word frequency within a given text. Your task is to write a function named `common_words` that processes a string of text and returns the most frequently occurring word(s). If multiple words occur with the same highest frequency, return those words in a list, sorted alphabetically. Specifically, the function should: 1. Convert all words to lowercase to ensure case-insensitivity. 2. Ignore punctuation and non-alphabetic characters. 3. Count the frequency of each word in the text. 4. Identify the word(s) with the highest frequency. 5. Return the most frequent word(s) as a list sorted alphabetically. **Function Signature:** ```python def common_words(text: str) -> List[str]: ``` **Input:** - `text` (string): a string of text containing words separated by spaces. The text may include punctuation marks. **Output:** - Returns a list of the most frequently occurring word(s) sorted alphabetically. **Example:** ```python text = \\"To be, or not to be: that is the question; whether \'tis nobler in the mind to suffer the slings and arrows of outrageous fortune.\\" common_words(text) # This should return [\'be\', \'to\'], since \\"to\\" and \\"be\\" both appear 3 times in the text. ``` **Libraries to use:** - Python\'s built-in `re` module for handling regular expressions to filter out punctuation. - `collections.Counter` for counting word frequencies.","solution":"import re from collections import Counter from typing import List def common_words(text: str) -> List[str]: Processes a string of text and returns the most frequently occurring word(s). # Normalize the text: convert to lowercase and remove non-alphabetic characters text = text.lower() text = re.sub(r\'[^a-zs]\', \'\', text) # Split the text into words words = text.split() # Count the frequency of each word word_count = Counter(words) # Determine the maximum frequency max_freq = max(word_count.values(), default=0) # Get all words with the maximum frequency most_frequent_words = [word for word, count in word_count.items() if count == max_freq] # Sort the words alphabetically most_frequent_words.sort() return most_frequent_words"},{"question":"Write a function `generate_passwords` that takes two arguments, `num_passwords` and `length`. This function should generate `num_passwords` passwords of length `length` using the `random` and `string` libraries in Python. Each password should consist of a mix of uppercase letters, lowercase letters, digits, and punctuation characters. Ensure that the passwords are as random as possible and contain at least one character from each of the specified categories. For example, calling `generate_passwords(3, 8)` might produce: ``` [\'A1b!Cd2E\', \'fG3hI4j\', \'k5LMn6O&\'] ``` The function should then print each generated password on a new line. ```python def generate_passwords(num_passwords, length): # Your code here ```","solution":"import random import string def generate_passwords(num_passwords, length): Generate num_passwords of length length with at least one uppercase letter, one lowercase letter, one digit, and one punctuation character. if length < 4: raise ValueError(\\"Length must be at least 4 to include all character types.\\") char_types = [string.ascii_uppercase, string.ascii_lowercase, string.digits, string.punctuation] passwords = [] for _ in range(num_passwords): password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation), ] remaining_length = length - 4 password += random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=remaining_length) random.shuffle(password) passwords.append(\'\'.join(password)) return passwords"},{"question":"You are tasked with creating a Python function `group_appointments_by_date` to process appointment records from a CSV file. The CSV file contains appointment details with the following columns: 1. `Appointment ID` (integer) - Unique identifier for the appointment 2. `Doctor Name` (string) - The name of the doctor attending the appointment 3. `Patient Name` (string) - The name of the patient 4. `Appointment Date` (string, format \'YYYY-MM-DD\') - The date of the appointment 5. `Appointment Time` (string, format \'HH:MM\') - The time of the appointment Your function should read the CSV file, group the appointments by date, and return a dictionary of dates and corresponding lists of appointments, sorted by time within each date. **Requirements:** - Use the `csv.reader` function from the `csv` module to handle the CSV file reading. - Ensure that the first row of the CSV file, which is a header row, is not processed as data. - Each entry in the output dictionary should have the appointment date as the key and a list of dictionaries representing the appointments for that date as the value. - The appointments within each list should be sorted by `Appointment Time`. **Function Signature:** ```python import csv def group_appointments_by_date(csv_file: str) -> dict: pass ``` **Example CSV content:** ``` Appointment ID,Doctor Name,Patient Name,Appointment Date,Appointment Time 101,Dr. Smith,John Doe,2022-08-01,09:00 102,Dr. Brown,Jane Doe,2022-08-01,10:30 103,Dr. Smith,Sarah Connor,2022-08-01,08:30 104,Dr. White,Kyle Reese,2022-08-02,11:00 105,Dr. Smith,John Wick,2022-08-02,11:30 ``` Expected function invocation and result: ```python result = group_appointments_by_date(\'appointments.csv\') print(result) # Expected Output # { # \'2022-08-01\': [ # {\'Appointment ID\': 103, \'Doctor Name\': \'Dr. Smith\', \'Patient Name\': \'Sarah Connor\', \'Appointment Time\': \'08:30\'}, # {\'Appointment ID\': 101, \'Doctor Name\': \'Dr. Smith\', \'Patient Name\': \'John Doe\', \'Appointment Time\': \'09:00\'}, # {\'Appointment ID\': 102, \'Doctor Name\': \'Dr. Brown\', \'Patient Name\': \'Jane Doe\', \'Appointment Time\': \'10:30\'} # ], # \'2022-08-02\': [ # {\'Appointment ID\': 104, \'Doctor Name\': \'Dr. White\', \'Patient Name\': \'Kyle Reese\', \'Appointment Time\': \'11:00\'}, # {\'Appointment ID\': 105, \'Doctor Name\': \'Dr. Smith\', \'Patient Name\': \'John Wick\', \'Appointment Time\': \'11:30\'} # ] # } ```","solution":"import csv from collections import defaultdict def group_appointments_by_date(csv_file: str) -> dict: appointments_by_date = defaultdict(list) with open(csv_file, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: appointment = { \'Appointment ID\': int(row[\'Appointment ID\']), \'Doctor Name\': row[\'Doctor Name\'], \'Patient Name\': row[\'Patient Name\'], \'Appointment Time\': row[\'Appointment Time\'] } appointments_by_date[row[\'Appointment Date\']].append(appointment) for date in appointments_by_date: appointments_by_date[date].sort(key=lambda x: x[\'Appointment Time\']) return dict(appointments_by_date)"},{"question":"In this problem, you are tasked with implementing a function that calculates the top N longest words in a given text file. You will need to read the file, process the text to identify individual words, and then determine the longest words based on their character length. You need to write a function `find_longest_words(file_path: str, N: int) -> List[str]:` that: 1. Accepts the path to a text file and an integer N as input. 2. Reads the content of the text file. 3. Splits the text into individual words, ignoring punctuation and converting all words to lowercase to ensure uniformity. 4. Identifies the top N longest words in the file. In case of ties (words with the same length), all tied words should be included in the result. The order in which these words are returned does not matter. 5. Ensures that the function returns a list of strings representing the longest words found. **Example Input:** - `file_path`: Path to a text file, e.g., \'input.txt\' - `N`: Number of longest words to find, e.g., 5 **Example Output:** ```python [ \'indeterminately\', \'characteristically\', \'counterproductive\', \'institutionalist\', \'introductory\' ] ``` You can assume the text file is properly formatted and contains sufficient content for the function to process. Example of calling the function: ```python longest_words = find_longest_words(\'input.txt\', 5) ``` The function will return a list of the top N longest words based on their length.","solution":"import re from typing import List def find_longest_words(file_path: str, N: int) -> List[str]: Returns the top N longest words from a text file. with open(file_path, \'r\') as file: text = file.read() # Remove punctuation and convert text to lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() words = text.split() # Sort words by length in descending order words.sort(key=len, reverse=True) # Collect top N longest words, including ties longest_words = [] max_length = 0 for word in words: if len(longest_words) < N: longest_words.append(word) max_length = len(word) elif len(word) == max_length: longest_words.append(word) else: break return longest_words"},{"question":"In this problem, you are tasked with writing a function named `find_longest_common_subsequence` which calculates the longest common subsequence (LCS) of two given strings. The function should adhere to the following specifications: # Parameters: - `s1`: A string of length `m` (1 ≤ m ≤ 1000). - `s2`: A string of length `n` (1 ≤ n ≤ 1000). # Function Behavior: 1. Create a 2D list (a list of lists) `dp` of size `(m+1) x (n+1)` to store the lengths of LCS of substrings. Initialize all elements to 0. 2. Populate the `dp` table such that `dp[i][j]` contains the length of the LCS of `s1[0:i]` and `s2[0:j]`. - If `s1[i-1]` equals `s2[j-1]`, then `dp[i][j] = dp[i-1][j-1] + 1`. - Otherwise, `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`. 3. Derive the LCS length from `dp[m][n]`. 4. Optional: Return the actual LCS string by backtracking through the `dp` table (though the length of the LCS is the primary goal). # Example: ```python s1 = \\"AGGTAB\\" s2 = \\"GXTXAYB\\" result = find_longest_common_subsequence(s1, s2) ``` The expected output for the above example would be: ``` Length of LCS is 4 ``` Optionally, if the LCS is also needed as output, it can be something like: ``` \\"GTAB\\" ``` # Constraints: - Handle both uppercase and lowercase letters in the strings. - Ensure efficient use of memory and computation, considering constraints. # Function Definition: Please write the function `find_longest_common_subsequence`. # Starter Code: ```python def find_longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) # Initialize a 2D list with all zeros dp = [[0] * (n + 1) for _ in range(m + 1)] # Populate the dp table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # LCS length is in the bottom-right cell of the matrix lcs_length = dp[m][n] print(f\\"Length of LCS is {lcs_length}\\") # Optional: Backtracking to find the actual LCS string lcs = [] i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs.reverse() lcs_string = \\"\\".join(lcs) print(f\\"LCS string is \'{lcs_string}\'\\") return lcs_length, lcs_string # Example usage s1 = \\"AGGTAB\\" s2 = \\"GXTXAYB\\" result = find_longest_common_subsequence(s1, s2) ```","solution":"def find_longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) # Initialize a 2D list with all zeros dp = [[0] * (n + 1) for _ in range(m + 1)] # Populate the dp table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # LCS length is in the bottom-right cell of the matrix lcs_length = dp[m][n] # Optional: Backtracking to find the actual LCS string lcs = [] i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs.reverse() lcs_string = \\"\\".join(lcs) return lcs_length, lcs_string"},{"question":"Write a function that reads a list of integers from a text file, calculates the square of each integer, and then saves the results to a new text file. Each line in the input file contains one integer, and each line in the output file should contain one squared integer. The function should return the sum of all squared integers. The function should output with: int: The sum of all squared integers from the input file. You should write self-contained code starting with: ``` def task_func(input_filename, output_filename): ```","solution":"def task_func(input_filename, output_filename): Reads a list of integers from a text file, calculates the square of each integer, saves the results to a new text file, and returns the sum of all squared integers. Parameters: input_filename (str): The name of the input text file containing integers. output_filename (str): The name of the output text file to save squared integers. Returns: int: The sum of all squared integers. squared_sum = 0 with open(input_filename, \'r\') as infile, open(output_filename, \'w\') as outfile: for line in infile: num = int(line.strip()) squared = num ** 2 squared_sum += squared outfile.write(f\\"{squared}n\\") return squared_sum"},{"question":"You are tasked with writing a function `unique_subsequences` that generates all unique non-empty subsequences of a given string. A subsequence is derived by deleting some or none of the characters of the string without changing the order of the remaining characters. The result should be a list of unique subsequences sorted in lexicographical order. Here is a breakdown of what your function should do: - Accept a single string as input. - Generate all possible non-empty subsequences. - Ensure all subsequences are unique. - Return the list of unique subsequences sorted in lexicographical order. Please ensure that the function signature matches the following: ```python def unique_subsequences(s): # Your code here ``` # Example: ```python # Suppose the input is s = \\"abc\\" # The unique non-empty subsequences of \\"abc\\" are: \'a\', \'b\', \'c\', \'ab\', \'ac\', \'bc\', \'abc\' # Therefore, the output should be sorted lexicographically: # [\'a\', \'ab\', \'abc\', \'ac\', \'b\', \'bc\', \'c\'] ``` # Constraints: - The input string will contain at least 1 character and at most 20 characters. - The input string will consist only of lowercase English letters. # Hints: 1. Use recursion or itertools to generate all possible subsequences. 2. Use a set to ensure all subsequences are unique. 3. Sort the resulting set before returning it.","solution":"def unique_subsequences(s): def generate_subsequences(s): if not s: return {\'\'} # Exclude the first character and generate subsequences of the remaining string subsequences = generate_subsequences(s[1:]) # Include the first character to the subsequences new_subsequences = {s[0] + subseq for subseq in subsequences} return subsequences | new_subsequences # Generate all subsequences all_subsequences = generate_subsequences(s) # Remove the empty string and sort the rest result = sorted(subseq for subseq in all_subsequences if subseq) return result"},{"question":"Given a list of sentence strings, write a function that identifies anagrams within each sentence and returns a list of dictionaries where each dictionary contains: - The original sentence. - A dictionary of words, with the anagram groups as keys, represented as sorted characters of the word. Each key maps to a list of words that are anagrams of each other in the sentence. For simplicity, assume that punctuation is removed from the sentences and all words are separated by spaces. The function should output a list of dictionaries with the following structure: ``` [ { \'original_sentence\': original_sentence, \'anagrams\': { sorted_word: [word1, word2, ...], ... } }, ... ] ``` You should write self-contained code starting with: ``` import re from collections import defaultdict def find_anagrams(sentences): ```","solution":"import re from collections import defaultdict def find_anagrams(sentences): results = [] for sentence in sentences: # Remove punctuation and convert sentence to a list of words cleaned_sentence = re.sub(r\'[^ws]\', \'\', sentence) words = cleaned_sentence.lower().split() anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) # Convert defaultdict to a regular dict for the output anagram_dict = dict(anagram_map) results.append({ \'original_sentence\': sentence, \'anagrams\': anagram_dict }) return results"},{"question":"In this problem, you are required to create a function that calculates the Jaccard similarity coefficient between pairs of sets of strings. The Jaccard similarity coefficient is a measure of the similarity between two sets and is defined as the size of the intersection divided by the size of the union of the sets. The task is to write a function named `compute_jaccard_similarity`, which takes in two lists of strings and returns the Jaccard similarity coefficient. The function signature is as follows: ```python def compute_jaccard_similarity(list1, list2): Computes the Jaccard similarity coefficient between two lists of strings. Parameters ---------- list1 : list of str First list of strings list2 : list of str Second list of strings Returns ------- float Jaccard similarity coefficient ``` # Steps: 1. Convert both lists of strings to sets. 2. Calculate the intersection and union of the two sets. 3. Compute the Jaccard similarity coefficient as the ratio of the size of the intersection to the size of the union. # Requirements: 1. Ensure the function handles edge cases, such as empty lists. 2. Use set operations to compute the intersection and union. # Example: ```python list1 = [\\"apple\\", \\"banana\\", \\"cherry\\"] list2 = [\\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"] similarity = compute_jaccard_similarity(list1, list2) print(\\"Jaccard Similarity Coefficient:\\", similarity) ``` # Expected Output: ``` Jaccard Similarity Coefficient: 0.5 ```","solution":"def compute_jaccard_similarity(list1, list2): Computes the Jaccard similarity coefficient between two lists of strings. Parameters ---------- list1 : list of str First list of strings list2 : list of str Second list of strings Returns ------- float Jaccard similarity coefficient set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) union = set1.union(set2) if not union: return 1.0 return len(intersection) / len(union)"},{"question":"You are required to implement a function named `format_social_security_number` which formats a given input string to adhere to the standard Social Security Number (SSN) format used in the United States. The input to the function will be: - `ssn` : A string representing a sequence of 9 digits. The function should return a string formatted as `XXX-XX-XXXX`, where X represents a digit. Ensure that the input string contains exactly 9 digits. If the input string contains any characters other than digits or the length is not exactly 9, your function should raise a `ValueError` with the message: \\"Invalid SSN\\". Example usage of the function: ```python # Valid input ssn_input = \\"123456789\\" formatted_ssn = format_social_security_number(ssn_input) print(formatted_ssn) # Output: \\"123-45-6789\\" # Invalid input ssn_input_invalid = \\"12345a789\\" formatted_ssn = format_social_security_number(ssn_input_invalid) # Raises ValueError: \\"Invalid SSN\\" ```","solution":"def format_social_security_number(ssn): Formats a given input string to adhere to the standard SSN format XXX-XX-XXXX. Parameters: ssn (str): A string representing a sequence of exactly 9 digits. Returns: str: The formatted Social Security Number. Raises: ValueError: If input string is not exactly 9 digits or contains non-digit characters. if len(ssn) != 9 or not ssn.isdigit(): raise ValueError(\\"Invalid SSN\\") return f\\"{ssn[:3]}-{ssn[3:5]}-{ssn[5:]}\\""},{"question":"You are to write a function `analyze_transactions(transactions, threshold)` that processes a list of transaction records and identifies potential fraudulent activities. Each transaction record is represented as a dictionary with the following keys: - `\'id\'`: A unique identifier for the transaction. - `\'account\'`: An account number associated with the transaction. - `\'amount\'`: The transaction amount. - `\'type\'`: Either `\'credit\'` or `\'debit\'`. Your function should identify accounts that have a total debit amount greater than the given `threshold`. It should return a list of such account numbers in ascending order. **Function Signature**: ```python def analyze_transactions(transactions, threshold): ``` Example: Given the following inputs: ```python transactions = [ {\'id\': \'txn1\', \'account\': \'A123\', \'amount\': 500, \'type\': \'debit\'}, {\'id\': \'txn2\', \'account\': \'A456\', \'amount\': 1000, \'type\': \'credit\'}, {\'id\': \'txn3\', \'account\': \'A123\', \'amount\': 700, \'type\': \'debit\'}, {\'id\': \'txn4\', \'account\': \'A789\', \'amount\': 200, \'type\': \'debit\'}, {\'id\': \'txn5\', \'account\': \'A123\', \'amount\': 300, \'type\': \'debit\'}, {\'id\': \'txn6\', \'account\': \'A456\', \'amount\': 300, \'type\': \'debit\'} ] threshold = 1000 ``` A possible output would be: ``` [\'A123\'] ``` Explanation: - Account `A123` has a total debit amount of 500 + 700 + 300 = 1500, which is greater than the threshold of 1000. - Account `A789` has a total debit amount of 200. - Account `A456` has a total debit amount of 300. **Note**: - Transactions can be in any order. - No two accounts will have the same `account` number. - Ensure you use built-in Python functions efficiently to process and filter the data.","solution":"def analyze_transactions(transactions, threshold): Identifies accounts with total debit transactions above the given threshold. Parameters: transactions (list): A list of transaction records, with each record represented as a dictionary. threshold (int): The amount threshold to identify fraudulent activities. Returns: list: A list of account numbers with total debit transactions above the threshold, sorted in ascending order. account_debits = {} for transaction in transactions: if transaction[\'type\'] == \'debit\': account = transaction[\'account\'] amount = transaction[\'amount\'] if account not in account_debits: account_debits[account] = 0 account_debits[account] += amount fraudulent_accounts = [ account for account, total_debit in account_debits.items() if total_debit > threshold ] return sorted(fraudulent_accounts)"},{"question":"You are provided with a text file containing a list of words. Your task is to create a function named `process_words` that performs the following operations: 1. **Read the contents of the file** given a file path provided as an argument to the function. 2. **Count the total number of words** in the file. 3. **Identify and count the occurrence of each unique word**, ignoring case sensitivity. 4. **Print the top 10 most frequent words** and their counts in descending order of frequency. 5. **Write the results** to a new file called `\'word_frequency.txt\'` with each line in the format: `word: count`. Use the following `collections` functions/methods to accomplish these tasks: `collections.Counter`. **Function Signature:** ```python def process_words(filepath: str) -> None: ``` # Input: - `filepath`: A string representing the path to the text file. # Output: - The function does not return any value but prints the top 10 most frequent words with their counts and writes the word frequencies to `\'word_frequency.txt\'`. # Example: For a text file containing: ``` Hello world! This is a test. Hello again, world. ``` The output should be: ``` hello: 2 world: 2 this: 1 is: 1 a: 1 test: 1 again: 1 ``` # Notes: - Ensure to handle punctuation by considering only alphanumeric characters for word counts. - Use appropriate file handling methods to read and write files.","solution":"import collections import re def process_words(filepath: str) -> None: # Read the file content with open(filepath, \'r\') as file: text = file.read() # Normalize and split the text into words, ignoring case and punctuation words = re.findall(r\'bw+b\', text.lower()) # Create a counter to count occurrences of each word word_counts = collections.Counter(words) # Get the top 10 most common words top_10_words = word_counts.most_common(10) # Print the top 10 words and their counts for word, count in top_10_words: print(f\'{word}: {count}\') # Write all word frequencies to \'word_frequency.txt\' with open(\'word_frequency.txt\', \'w\') as output_file: for word, count in word_counts.items(): output_file.write(f\'{word}: {count}n\')"},{"question":"In this exercise, you are asked to write a function that determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function will take a single parameter: the input string. Your task is to write a function `is_palindrome(s)` that returns `True` if the input string is a palindrome, and `False` otherwise. Specifically: 1. The function should ignore all non-alphanumeric characters and should not consider case differences. 2. The function should process the input string to filter out unwanted characters and convert it to lowercase for case-insensitive comparison. 3. The function should use two-pointer technique to compare characters from both ends of the string. Write the `is_palindrome` function using these requirements: ```python def is_palindrome(s): pass # implement your solution here ``` Here\'s how you can implement the string processing and comparison steps in Python: - You can use `str.isalnum()` to check if a character is alphanumeric. - Convert the filtered string to lowercase using `str.lower()`. - Use a two-pointer technique to compare characters from both ends.","solution":"def is_palindrome(s): Determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string. Returns: bool: True if the input string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered = [ch.lower() for ch in s if ch.isalnum()] # Use two-pointer technique to check for palindrome left, right = 0, len(filtered) - 1 while left < right: if filtered[left] != filtered[right]: return False left += 1 right -= 1 return True"},{"question":"You are tasked with writing a function `decode_string` that decodes a given encoded string based on the following rules: The encoding rule is: k[encoded_string], where the `encoded_string` inside the square brackets is repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; no extra white spaces, square brackets are well-formed, etc. To efficiently decode the string, you will utilize a stack. Specifically, you\'ll: - Iterate through the string character by character. - Push characters to the stack until you encounter a closing bracket `]`. - Once you find a closing bracket, you should pop characters from the stack until you find the corresponding opening bracket `[`. - The number `k` is just before the opening bracket. You should concatenate the `encoded_string` `k` times and push the result back to the stack. Write the function `decode_string` using a stack to handle nested encodings effectively. Function Signature: ```python def decode_string(s: str) -> str: pass ``` The function should return the decoded string. **Example:** ```python # An example run would look like: decode_string(\\"3[a]2[bc]\\") # This should return \\"aaabcbc\\". decode_string(\\"3[a2[c]]\\") # This should return \\"accaccacc\\". decode_string(\\"2[abc]3[cd]ef\\") # This should return \\"abcabccdcdcdef\\". ``` **Note:** - The input string will always be valid and follow the encoding rules strictly. - The method should handle nested encodings where the encoded string itself contains another encoded string.","solution":"def decode_string(s: str) -> str: stack = [] current_num = 0 current_str = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \\"[\\": stack.append((current_str, current_num)) current_str, current_num = \\"\\", 0 elif char == \\"]\\": last_str, num = stack.pop() current_str = last_str + current_str * num else: current_str += char return current_str"},{"question":"In this problem, you are required to implement a function named `custom_standard_scaler` that standardizes the given dataset features, similarly to the StandardScaler functionality from `scikit-learn`. The process of standardization involves rescaling the feature data such that it has a mean of zero and a standard deviation of one. The `custom_standard_scaler` function should take a 2D numpy array or a pandas DataFrame of shape (n_samples, n_features) containing the input data points as its argument: - `features`: A 2D numpy array or a pandas DataFrame of shape (n_samples, n_features) containing the input data points. The function should return a numpy array of shape (n_samples, n_features) where each feature has been standardized. Here is the function signature: ```python def custom_standard_scaler(features): # Your implementation here ``` # Example: ```python import numpy as np import pandas as pd # Sample data features = np.array([[1, 2], [3, 4], [5, 6], [7, 8]]) scaled_features = custom_standard_scaler(features) print(f\\"Scaled Features:n{scaled_features}\\") ``` The output should be the scaled version of the input features such that the mean of each feature column is zero and the standard deviation is one. # Requirements: - You must manually compute the mean and standard deviation for each feature. - You must then transform each feature to have a mean of zero and a standard deviation of one. # Objective: Complete the `custom_standard_scaler` function to correctly standardize the input data by manually computing the necessary statistics and transforming the data accordingly.","solution":"import numpy as np import pandas as pd def custom_standard_scaler(features): Standardizes the given dataset features to have a mean of zero and a standard deviation of one. Parameters: features (numpy.ndarray or pandas.DataFrame): A 2D array or DataFrame containing the input data points. Returns: numpy.ndarray: A standardized array with a mean of zero and a standard deviation of one for each feature. if isinstance(features, pd.DataFrame): features = features.values mean = np.mean(features, axis=0) std = np.std(features, axis=0) # Prevent division by zero in case std is zero std[std == 0] = 1 scaled_features = (features - mean) / std return scaled_features"},{"question":"Implement a function `minimize_chebyshev_distance(points: list) -> tuple` that determines the point in a given set of 2D points which minimizes the sum of Chebyshev distances to all other points in the set. Chebyshev distance between two points ( (x_1, y_1) ) and ( (x_2, y_2) ) is defined as: [ D_{Chebyshev} = max(|x_1 - x_2|, |y_1 - y_2|) ] The function should compute the Chebyshev distance for each point to all other points and return the point with the minimum sum of these distances. # Requirements - Use appropriate Python data structures to represent the points and compute the distances efficiently. - Ensure that the function can handle a list of points with varying lengths and correctly identify the optimal point. # Constraints - The input list `points` will contain at least one 2D point, and each point is represented as a tuple of two integers or floats. - The points can have positive or negative coordinates. # Example Suppose the set of points is as follows: ```python points = [(1, 2), (3, 4), (5, 1), (2, 3)] ``` Your function should return the point that minimizes the sum of Chebyshev distances to all other points in the set. For the given example, the output should be: ```python (2, 3) ```","solution":"def chebyshev_distance(p1, p2): Returns the Chebyshev distance between two points p1 and p2. return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) def minimize_chebyshev_distance(points): Determines the point in a given set of 2D points which minimizes the sum of Chebyshev distances to all other points in the set. Parameters: points (list of tuple): List of points where each point is a tuple (x, y). Returns: tuple: The point that minimizes the sum of Chebyshev distances to all other points. min_sum_distance = float(\'inf\') optimal_point = None for i, p1 in enumerate(points): sum_distance = 0 for j, p2 in enumerate(points): if i != j: sum_distance += chebyshev_distance(p1, p2) if sum_distance < min_sum_distance: min_sum_distance = sum_distance optimal_point = p1 return optimal_point"},{"question":"You are tasked with creating a simplified inventory management system for a small store using Python dictionaries. The purpose of this is to help learners understand how to use dictionaries to store, update, and retrieve data efficiently. Your function should be named `update_inventory`. It takes the following parameters: 1. `inventory` (dict): The current inventory of items, where keys are `item names` (str) and values are the `quantity` of that item (int). 2. `arrivals` (dict): A dictionary representing items that have arrived in the store, where keys are `item names` (str) and values are the `quantity` of arriving items (int). The function should update the inventory based on the arriving items and print the updated inventory. Here\'s what your function should do: 1. Iterate through the `arrivals` dictionary and update the corresponding quantities in the `inventory` dictionary. 2. If an item in `arrivals` does not exist in `inventory`, add it to the `inventory` with the corresponding quantity. 3. Print the updated inventory in the format `item: quantity` for each item, one per line. Make sure to update the inventory accurately and display the final quantities of all items in the store. ```python def update_inventory(inventory, arrivals): pass # Your code here ```","solution":"def update_inventory(inventory, arrivals): Update the inventory based on arriving items and print the updated inventory. Parameters: inventory (dict): Current inventory of items with item names as keys and quantities as values. arrivals (dict): Arriving items with item names as keys and quantities as values. for item, quantity in arrivals.items(): if item in inventory: inventory[item] += quantity else: inventory[item] = quantity for item, quantity in inventory.items(): print(f\\"{item}: {quantity}\\")"},{"question":"You are required to implement a Python function `merge_sorted_arrays` that merges multiple sorted arrays into a single sorted array. The function will: 1. Take a single parameter: a list of lists `arrays`. Each sub-list contains integers sorted in ascending order. 2. Merge all these sub-lists into one single sorted list. The solution should have a time complexity of O(N log K), where N is the total number of elements across all lists and K is the number of lists. You should use a min-heap to efficiently accomplish the merge. # Function Signature: ```python def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: # implementation goes here ``` # Input: - `arrays`: List of sub-lists where each sub-list contains sorted integers. # Output: - Returns a single list containing all integers from the input lists, sorted in ascending order. # Example: ```python arrays = [ [1, 4, 5], [1, 3, 4], [2, 6] ] result = merge_sorted_arrays(arrays) print(result) # Output should be [1, 1, 2, 3, 4, 4, 5, 6] ``` # Additional Notes: - The function should utilize the `heapq` module to manage the min-heap. - Ensure that the implementation handles empty input lists and returns an empty list if the input is empty.","solution":"from typing import List import heapq def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: Merges multiple sorted arrays into a single sorted list. :param arrays: List of sorted lists :return: A single sorted list containing all integers from the input lists min_heap = [] for i, array in enumerate(arrays): if array: heapq.heappush(min_heap, (array[0], i, 0)) result = [] while min_heap: val, list_idx, element_idx = heapq.heappop(min_heap) result.append(val) if element_idx + 1 < len(arrays[list_idx]): next_elem = arrays[list_idx][element_idx + 1] heapq.heappush(min_heap, (next_elem, list_idx, element_idx + 1)) return result"},{"question":"You are required to write a Python function called `find_median_age` that calculates the median age from a list of ages provided as a parameter. The function should: 1. Accept a list of ages as input. 2. Sort the list of ages. 3. Calculate the median value: - If the length of the list is odd, return the middle element. - If the length of the list is even, return the average of the two middle elements. 4. Ensure to handle edge cases, such as an empty list, by returning `None`. The function signature should be: ```python def find_median_age(ages: List[int]) -> float: ... ``` Note: - You should not use any external libraries except the Python standard library. - Use Python\'s built-in sorting functions and arithmetic operations for calculations.","solution":"from typing import List, Optional def find_median_age(ages: List[int]) -> Optional[float]: Returns the median age from a list of ages. Parameters: - ages (List[int]): A list of ages. Returns: - Optional[float]: The median age, or None if the list is empty. if not ages: return None ages.sort() n = len(ages) if n % 2 == 1: # If the length is odd, return the middle element return float(ages[n // 2]) else: # If the length is even, return the average of the two middle elements mid1, mid2 = ages[n // 2 - 1], ages[n // 2] return (mid1 + mid2) / 2"},{"question":"You are designing a system for a school that handles the distribution of students into classrooms based on their profiles. Each student has a list of preferences, where each preference is a subject they are interested in. Each classroom is designated to teach a specific subject and has a capacity limit. Your task is to implement a function `distribute_students(students, classrooms)` that allocates students to classrooms based on their preferences. The allocation should consider the following rules: 1. If a student\'s first preference class is not full, assign them to that class. 2. If the first preference class is full, check their next preference and so on, until an available class is found. 3. If none of the preferred classes are available, do not assign the student to any class. The `students` list contains dictionaries where each dictionary has: - A `name` key representing the student\'s name. - A `preferences` key which is a list of subject preferences ordered from most to least preferred. The `classrooms` list contains dictionaries where each dictionary has: - A `subject` key representing the subject taught in the classroom. - A `capacity` key representing the maximum number of students that the classroom can accommodate. The function should return a dictionary where each key is a classroom subject and its value is a list of student names who are assigned to that classroom. Here is the signature for the function you need to implement: ```python def distribute_students(students, classrooms): # your implementation here ``` **Assumptions**: - The `students` list is non-empty. - Each student has at least one preference. - All classrooms have different subjects.","solution":"def distribute_students(students, classrooms): Distributes students to classrooms based on their subject preferences and classroom capacities. Parameters: students (list): A list of dictionaries representing the students with their name and preferences. classrooms (list): A list of dictionaries representing the classrooms with their subject and capacity. Returns: dict: A dictionary where each key is a classroom subject and its value is a list of student names. # Prepare a dictionary to keep track of the students assigned to each classroom allocation = {classroom[\'subject\']: [] for classroom in classrooms} # Create a dictionary to keep track of remaining capacity for each classroom capacity = {classroom[\'subject\']: classroom[\'capacity\'] for classroom in classrooms} for student in students: for preference in student[\'preferences\']: if capacity[preference] > 0: allocation[preference].append(student[\'name\']) capacity[preference] -= 1 break return allocation"},{"question":"You are tasked with implementing a function `merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]` to merge two sorted arrays into a single sorted array without using any additional sorting methods. The function should leverage the fact that the input arrays are already sorted, ensuring that the merging process is efficient. The description and usage of the inputs are as follows: # Function Specification - **Function Name**: `merge_sorted_arrays` - **Input**: - `arr1`: A list of integers, sorted in ascending order. - `arr2`: Another list of integers, sorted in ascending order. - **Output**: A list of integers, containing all elements from `arr1` and `arr2`, sorted in ascending order. # Constraints 1. Both `arr1` and `arr2` are sorted in ascending order. 2. You are not allowed to use Python\'s built-in sorting functions. # Example ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] assert merge_sorted_arrays(arr1, arr2) == [1, 2, 3, 4, 5, 6, 7, 8] arr1 = [5, 10, 15] arr2 = [3, 6, 9] assert merge_sorted_arrays(arr1, arr2) == [3, 5, 6, 9, 10, 15] ``` # Instructions 1. Implement the function `merge_sorted_arrays` using an efficient approach to merge the two sorted arrays. 2. Ensure that the function iterates through both arrays only once (linear time complexity). 3. Return the merged array in ascending order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (List[int]): First sorted array arr2 (List[int]): Second sorted array Returns: List[int]: Merged sorted array containing all elements of arr1 and arr2 # Initialize pointers for arr1 and arr2 i, j = 0, 0 merged_array = [] # Loop through both arrays until one is exhausted while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements from arr1 if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements from arr2 if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are developing an online booking system for a library. For this task, you need to implement a function called `allocate_rooms` that will manage the allocation of study rooms to users. The library has multiple study rooms, each with a specific capacity. The function should take a list of room capacities and a list of booking requests, and allocate rooms to meet as many requests as possible, based on the room capacities. # Function Signature ```python def allocate_rooms(room_capacities, booking_requests): ``` # Parameters - `room_capacities (list of int)`: A list where each entry represents the capacity of a study room. - `booking_requests (list of int)`: A list where each entry represents a request for a room with a specified capacity. # Returns - `allocations (list of tuple)`: A list of tuples, each tuple containing two integers: the index of the room and the booking request it fulfilled. If a request cannot be fulfilled, it is not included in the result. # Example ```python room_capacities = [4, 3, 2] booking_requests = [2, 4, 3, 1] allocate_rooms(room_capacities, booking_requests) # Output: [(0, 4), (1, 3), (2, 2)] ``` # Implementation Details 1. Sort the room capacities and booking requests in descending order. 2. Iterate over the booking requests and try to fulfill each request with an available room of equal or greater capacity. 3. If an appropriate room is found, allocate the room to the request and mark the room as unavailable. 4. Return the list of fulfilled booking requests in the form of tuples where each tuple contains the room index and the booking request it fulfilled.","solution":"def allocate_rooms(room_capacities, booking_requests): Allocates rooms to booking requests based on room capacities. Parameters: - room_capacities (list of int): List of capacities of the rooms. - booking_requests (list of int): List of booking requests. Returns: - allocations (list of tuple): A list of tuples where each tuple contains the index of the room and the booking request it fulfilled. # Sort rooms and requests in descending order sorted_rooms = sorted(enumerate(room_capacities), key=lambda x: x[1], reverse=True) sorted_requests = sorted(booking_requests, reverse=True) allocations = [] allocated_rooms = set() for req in sorted_requests: for i, (room_index, room_capacity) in enumerate(sorted_rooms): if room_index not in allocated_rooms and room_capacity >= req: allocations.append((room_index, req)) allocated_rooms.add(room_index) break return allocations"},{"question":"You are required to develop a Python function, `generate_user_report(employees: list, role: str) -> str`. This function should process a list of employee dictionaries, filter the employees based on their role, compute some statistics, and generate a summarized report. Here\'s the detailed breakdown of the steps you need to implement: 1. **Input Data Structure**: Each element in the `employees` list is a dictionary with the following keys: `\'name\'`, `\'age\'`, `\'role\'`, and `\'salary\'`. 2. **Filter Employees by Role**: The function should filter the list of employees to include only those with the role specified by the `role` parameter. 3. **Compute Statistics**: - Calculate the average age of the filtered employees. - Calculate the total and average salary of the filtered employees. 4. **Generate Report**: Use the computed statistics to generate a report string containing: - The total number of employees with the specified role. - The average age of these employees. - The total salary and average salary for these employees. The report should follow this format: ``` Role Report: <role> --------------------- Total Employees: <total_employees> Average Age: <average_age> Total Salary: <total_salary> Average Salary: <average_salary> ``` Utilize basic Python list comprehensions and built-in functions to implement the required functionality. Here is a function template to get started: ```python def generate_user_report(employees: list, role: str) -> str: # Implement the function as described pass ``` Your implementation should ensure the filtered employee list is not empty before attempting calculations to avoid errors. If there are no employees with the specified role, return a message indicating no employees were found for the given role.","solution":"def generate_user_report(employees: list, role: str) -> str: # Filter employees by role filtered_employees = [emp for emp in employees if emp[\'role\'] == role] if not filtered_employees: return f\\"No employees found with the role \'{role}\'\\" # Calculate statistics total_employees = len(filtered_employees) total_age = sum(emp[\'age\'] for emp in filtered_employees) total_salary = sum(emp[\'salary\'] for emp in filtered_employees) average_age = total_age / total_employees average_salary = total_salary / total_employees # Generate the report report = ( f\\"Role Report: {role}n\\" \\"---------------------n\\" f\\"Total Employees: {total_employees}n\\" f\\"Average Age: {average_age:.2f}n\\" f\\"Total Salary: {total_salary:.2f}n\\" f\\"Average Salary: {average_salary:.2f}n\\" ) return report"},{"question":"You need to implement a function `rotate_matrix(matrix)` that takes a 2-dimensional numpy array representing a square matrix as its input and returns the matrix rotated 90 degrees clockwise. The input matrix will always be an `n x n` 2-dimensional numpy array, where `n` is the number of rows (which is equal to the number of columns). To rotate a matrix 90 degrees clockwise, each element `matrix[i][j]` should be moved to `matrix[j][n-1-i]`. Here is a list of the key functionalities you need to implement within the `rotate_matrix` function: 1. Create a new matrix filled with zeros using `numpy.zeros` which will hold the rotated values. 2. Iterate over each element in the input matrix and place it in its new position in the rotated matrix. 3. Return the rotated matrix as a numpy array. # Example ```python import numpy as np matrix = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) rotated_matrix = rotate_matrix(matrix) print(rotated_matrix) ``` Expected Output ``` [[7 4 1] [8 5 2] [9 6 3]] ``` # Requirements - You **must** use `numpy.zeros` to create the new matrix. - The input `matrix` is a 2-dimensional numpy array with the shape `(n, n)` where `n` is the number of rows and columns.","solution":"import numpy as np def rotate_matrix(matrix): Rotate the input n x n numpy matrix 90 degrees clockwise. Parameters: matrix (np.ndarray): n x n 2-dimensional numpy array representing the square matrix. Returns: np.ndarray: n x n 2-dimensional numpy array representing the rotated matrix. n = matrix.shape[0] rotated_matrix = np.zeros((n, n), dtype=matrix.dtype) for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python function that takes an input string representing a mathematical expression in infix notation and returns its equivalent postfix (Reverse Polish) notation. You will implement the infix to postfix conversion algorithm using a stack. Infix notation is the common arithmetic and logical formula notation in which operators are placed between their operands. For example, the infix notation for \\"2 + 3\\" is \\"2 + 3\\". Postfix notation, also known as Reverse Polish notation (RPN), is a mathematical notation in which every operator follows all of its operands. For example, the postfix notation for \\"2 + 3\\" is \\"2 3 +\\". Your function should convert an input string such as \\"3 + 5\\" to \\"3 5 +\\" and handle operators +, -, *, /, and parentheses. Function Definition ```python def infix_to_postfix(expression): Convert an infix expression to postfix notation. Parameters: expression (str): A string representing a mathematical expression in infix notation. Returns: str: A string representing the equivalent postfix notation. ``` # Requirements: 1. Use a stack to help in the conversion process. 2. Handle +, -, *, / operators. 3. Handle parentheses to denote precedence. # Example ```python print(infix_to_postfix(\\"3 + 5 * 2\\")) # Output: \\"3 5 2 * +\\" print(infix_to_postfix(\\"(1 + 2) * (3 / 4)\\")) # Output: \\"1 2 + 3 4 / *\\" print(infix_to_postfix(\\"4 + 18 / ( 9 - 3 )\\")) # Output: \\"4 18 9 3 - / +\\" ``` # Constraints: - The input string will not include any invalid characters. - Operands and operators are separated by spaces. - The input string will contain at least one number and one operator.","solution":"def infix_to_postfix(expression): Convert an infix expression to postfix notation. Parameters: expression (str): A string representing a mathematical expression in infix notation. Returns: str: A string representing the equivalent postfix notation. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} stack = [] output = [] tokens = expression.split() for token in tokens: if token.isdigit(): output.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() else: while stack and stack[-1] != \'(\' and precedence[token] <= precedence[stack[-1]]: output.append(stack.pop()) stack.append(token) while stack: output.append(stack.pop()) return \' \'.join(output)"},{"question":"You are required to implement a function named `track_expenses` which will generate a bar chart to visualize monthly expenses categorized by different expense types. This function will make use of the `matplotlib` library to achieve this. Task Details: 1. **Function Signature**: `def track_expenses(expenses: dict)` - The parameter `expenses` will be a dictionary where: - The keys are the names of the months (e.g., \'January\', \'February\', etc.). - The values are themselves dictionaries containing expense categories as keys (e.g., \'Rent\', \'Food\', \'Entertainment\') and the corresponding amounts spent in those categories as the values. Example dictionary: ```python expenses = { \'January\': {\'Rent\': 1200, \'Food\': 300, \'Entertainment\': 150}, \'February\': {\'Rent\': 1200, \'Food\': 310, \'Entertainment\': 200} # and so on ... } ``` Task: - Compute the total expense for each month. - Create a stacked bar chart where: - The x-axis represents the \'Months\'. - The y-axis represents the \'Amount of Expenses\'. - Each bar should be a stack representing different expense categories. - Use different colors for each expense category and include a legend for clarity. - Use the `matplotlib` library specifically the \'matplotlib.pyplot.figure\', \'matplotlib.pyplot.bar\', and \'matplotlib.pyplot.show\' functions. Example of how the function will be used: ```python track_expenses({ \'January\': {\'Rent\': 1200, \'Food\': 300, \'Entertainment\': 150}, \'February\': {\'Rent\': 1200, \'Food\': 310, \'Entertainment\': 200} }) ``` The function should generate a stacked bar chart that compares the different categories of expenses for January and February. Solution Constraints: - **Library Requirements**: Utilize `matplotlib` library functions `figure`, `bar`, and `show`. - Ensure to setup and label the axes, and include a legend to distinguish between different expense categories.","solution":"import matplotlib.pyplot as plt def track_expenses(expenses: dict): Generates a stacked bar chart to visualize monthly expenses by different expense types. Parameters: expenses (dict): A dictionary where keys are month names and values are dictionaries with expense categories and their corresponding amounts. months = list(expenses.keys()) categories = set() # Collect all unique expense categories for month in expenses: categories.update(expenses[month].keys()) categories = list(categories) # Prepare data for plotting category_values_per_month = {category: [expenses[month].get(category, 0) for month in months] for category in categories} cumulative_sums = [0] * len(months) # Create the figure and axis fig, ax = plt.subplots() # Generate stacked bars for category in categories: ax.bar(months, category_values_per_month[category], bottom=cumulative_sums, label=category) cumulative_sums = [sum(x) for x in zip(cumulative_sums, category_values_per_month[category])] # Set labels and title ax.set_xlabel(\'Months\') ax.set_ylabel(\'Amount of Expenses\') ax.set_title(\'Monthly Expenses by Category\') ax.legend() # Show the plot plt.show()"},{"question":"You are given a dictionary `words_dict` where keys are unique words and values are their corresponding frequencies in a text document. The objective is to identify and plot the top N most frequent words as a horizontal bar chart, with each bar\'s length proportional to the frequency of the word. Create a function named `plot_top_n_words` that performs the following steps: 1. Identify the top N words with the highest frequencies. 2. Use the `matplotlib` library to plot a horizontal bar chart showing these words and their frequencies. 3. Ensure the bars are sorted in descending order based on frequency. Function signature: ```python def plot_top_n_words(words_dict, N): pass ``` **Requirements**: - You must use `heapq.nlargest` to find the top N most frequent words. - You must use `matplotlib.pyplot.barh` for plotting the horizontal bar chart. - The x-axis should represent the frequencies, and the y-axis should represent the words. # Sample Input: ```python words_dict = {\'the\': 15, \'be\': 10, \'to\': 7, \'of\': 22, \'and\': 13, \'a\': 8, \'in\': 5} N = 3 ``` # Expected Output: A horizontal bar chart displaying the words \'of\', \'the\', and \'and\' with their respective frequencies 22, 15, and 13, sorted in descending order of frequency.","solution":"import heapq import matplotlib.pyplot as plt def plot_top_n_words(words_dict, N): Identify the top N words with the highest frequencies and plot a horizontal bar chart. Parameters: words_dict: Dictionary of words and their frequencies N: Number of top words to plot Returns: None # Find the top N words with the highest frequencies top_n_words = heapq.nlargest(N, words_dict.items(), key=lambda item: item[1]) # Extract words and their frequencies words, frequencies = zip(*top_n_words) # Plot horizontal bar chart plt.figure(figsize=(10, 6)) plt.barh(words, frequencies, color=\'skyblue\') plt.xlabel(\'Frequency\') plt.ylabel(\'Words\') plt.title(f\'Top {N} Most Frequent Words\') plt.gca().invert_yaxis() # Invert y-axis to show the highest frequency at the top plt.show()"},{"question":"Your task is to write a function `encrypt_message(message, key)` that takes a string message and an integer key and returns the message encrypted using a basic Caesar cipher method. The Caesar cipher shifts each letter in the input message by a number of positions specified by the key. For example, with a key of 3, \'A\' becomes \'D\', \'B\' becomes \'E\', and so on. Non-alphabet characters should remain unchanged. # Function Signature ```python def encrypt_message(message, key): ``` # Parameters - `message`: A string containing the message to be encrypted. - `key`: An integer used as a key for the Caesar cipher. # Requirements 1. The function should preserve the case of alphabetical characters (i.e., lowercase letters should remain lowercase, and uppercase letters should remain uppercase). 2. The function should handle both positive and negative values of the key, allowing the message to be shifted forwards or backwards in the alphabet. 3. Non-alphabet characters in the message should not be altered. # Example ```python # Example usage message = \\"Hello, World!\\" key = 3 # Call the function encrypted_message = encrypt_message(message, key) print(encrypted_message) # Output: \\"Khoor, Zruog!\\" # Example with a negative key message = \\"Hello, World!\\" key = -3 # Call the function encrypted_message = encrypt_message(message, key) print(encrypted_message) # Output: \\"Ebiil, Tloia!\\" ``` # Notes - You are allowed to use the `ord` and `chr` functions for character manipulation. - Ensure to wrap around the alphabet when characters go past \'Z\' or \'z\' using the key. - Consider edge cases such as an empty message or a key of 0.","solution":"def encrypt_message(message, key): Encrypts the input message using a Caesar cipher with the given key. Parameters: - message: a string containing the message to be encrypted. - key: an integer used as a key for the Caesar cipher. Returns: - A string containing the encrypted message. encrypted_message = [] for char in message: if char.isalpha(): # Determine the base ASCII code based on whether the character is uppercase or lowercase base = ord(\'A\') if char.isupper() else ord(\'a\') # Apply the Caesar cipher shift new_char = chr((ord(char) - base + key) % 26 + base) encrypted_message.append(new_char) else: # Non-alphabet characters remain unchanged encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Write a Python function named `apply_rectangular_mask` which applies a rectangular mask to an image. The function should take an input image and coordinates defining a rectangle, then set all pixel values outside this rectangle to black and return the masked image. Requirements: 1. The function should: - Take three inputs: an image (`image`), a tuple of coordinates for the top-left corner of the rectangle (`top_left`), and a tuple of coordinates for the bottom-right corner of the rectangle (`bottom_right`). - The image should be a NumPy array with three channels (RGB). 2. Using the provided coordinates, create a mask that covers the specified rectangle: - The mask should have the same dimensions as the input image. - Set the pixel values inside the rectangle to 1 (or white) and outside the rectangle to 0 (or black). 3. Apply the mask to the image: - Multiply the image by the mask using NumPy\'s broadcasting feature. 4. Return the masked image. 5. Use assertions to ensure that the coordinates are within the image dimensions and the input image has three channels. Function Signature: ```python def apply_rectangular_mask(image: np.ndarray, top_left: tuple, bottom_right: tuple) -> np.ndarray: ```","solution":"import numpy as np def apply_rectangular_mask(image: np.ndarray, top_left: tuple, bottom_right: tuple) -> np.ndarray: Apply a rectangular mask to the input image. Pixels outside the rectangle defined by top_left and bottom_right are set to black. Args: - image (np.ndarray): Input image with shape (height, width, 3). - top_left (tuple): Coordinates (row, col) of the top-left corner of the rectangle. - bottom_right (tuple): Coordinates (row, col) of the bottom-right corner of the rectangle. Returns: - np.ndarray: Masked image. assert image.ndim == 3 and image.shape[2] == 3, \\"Input image must be a 3-channel RGB image.\\" height, width, _ = image.shape assert 0 <= top_left[0] < height and 0 <= top_left[1] < width, \\"top_left coordinates must be within the image dimensions.\\" assert 0 <= bottom_right[0] <= height and 0 <= bottom_right[1] <= width, \\"bottom_right coordinates must be within the image dimensions.\\" assert top_left[0] < bottom_right[0] and top_left[1] < bottom_right[1], \\"bottom_right must be below and to the right of top_left.\\" # Create the mask mask = np.zeros((height, width), dtype=np.uint8) mask[top_left[0]:bottom_right[0], top_left[1]:bottom_right[1]] = 1 # Apply the mask to the image masked_image = image * mask[:, :, np.newaxis] return masked_image"},{"question":"You are asked to implement a function that simulates a basic inventory management system for a small warehouse. The system should track the current stock levels of multiple items and be able to process two types of operations: adding stock and removing stock. # Function to Implement **Function Name:** `manage_inventory` **Function Parameters:** - `operations` (list of tuples): Each tuple represents an operation and contains: - A string (`op`), which can be either `\\"add\\"` or `\\"remove\\"` representing the operation type. - A string (`item`), the name of the item. - An integer (`quantity`), the quantity to add or remove. **Returns:** - A dictionary (dict): The final state of the inventory where the keys are item names and the values are their respective quantities. # Instructions 1. Initialize an empty dictionary to keep track of the item quantities. 2. Iterate over each operation in the `operations` list. 3. For each operation: - If the operation is `\\"add\\"`, increase the item\'s quantity in the inventory by the specified amount. - If the operation is `\\"remove\\"`, decrease the item\'s quantity in the inventory by the specified amount. If removing more than the current stock, set the quantity to 0. 4. Return the dictionary representing the final state of the inventory. # Example: ```python def manage_inventory(operations): inventory = {} for op, item, quantity in operations: if op == \\"add\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif op == \\"remove\\": if item in inventory: inventory[item] = max(0, inventory[item] - quantity) else: inventory[item] = 0 return inventory # Example operations operations = [ (\\"add\\", \\"apple\\", 10), (\\"add\\", \\"banana\\", 5), (\\"remove\\", \\"apple\\", 3), (\\"add\\", \\"orange\\", 8), (\\"remove\\", \\"banana\\", 2), (\\"remove\\", \\"orange\\", 10) ] result = manage_inventory(operations) print(result) # Output: {\'apple\': 7, \'banana\': 3, \'orange\': 0} ```","solution":"def manage_inventory(operations): Simulates a basic inventory management system. Parameters: operations (list of tuples): Each tuple contains: - A string representing the operation type (\\"add\\" or \\"remove\\"). - A string representing the item name. - An integer representing the quantity to add or remove. Returns: dict: The final state of the inventory. inventory = {} for op, item, quantity in operations: if op == \\"add\\": if item not in inventory: inventory[item] = 0 inventory[item] += quantity elif op == \\"remove\\": if item in inventory: inventory[item] = max(0, inventory[item] - quantity) else: inventory[item] = 0 return inventory"},{"question":"You are working on a project to assist in the analysis of stock market data. The task is to develop an algorithm that detects the local maxima and minima (peaks and valleys) in the closing prices of a particular stock over a given period. The function you need to implement is `find_local_extrema(prices)`. This function should take the following input parameter: 1. `prices`: A list of float values representing the closing prices of the stock over time. The function should: 1. Traverse the `prices` list to identify local maxima (peaks) and local minima (valleys). 2. A local maxima is defined as a price that is greater than both its preceding and following values. Similarly, a local minima is a price that is less than both its preceding and following values. 3. Return two lists: one containing the indices of the peaks and the other containing the indices of the valleys. **Function signature:** ```python def find_local_extrema(prices): pass ``` **Example Usage:** ```python prices = [100.5, 102.0, 101.5, 103.0, 102.5, 101.0, 100.0, 98.0, 99.5, 100.5] peaks, valleys = find_local_extrema(prices) print(\\"Indices of peaks:\\", peaks) print(\\"Indices of valleys:\\", valleys) ``` In the example above, the indices of the peaks and valleys in the `prices` list should be correctly identified and printed. The output for the given example should be: ```python Indices of peaks: [1, 3] Indices of valleys: [2, 7] ```","solution":"def find_local_extrema(prices): This function takes a list of stock prices and returns two lists: - One with indices of local maxima (peaks) - One with indices of local minima (valleys) :param prices: List of float representing stock prices :return: Tuple of two lists (peaks_indices, valleys_indices) peaks_indices = [] valleys_indices = [] if len(prices) < 3: return peaks_indices, valleys_indices for i in range(1, len(prices)-1): if prices[i] > prices[i-1] and prices[i] > prices[i+1]: peaks_indices.append(i) if prices[i] < prices[i-1] and prices[i] < prices[i+1]: valleys_indices.append(i) return peaks_indices, valleys_indices"},{"question":"This problem involves creating a simple recommendation system using Python and the pandas library. The goal is to create a function named `recommend_books()` that suggests books based on the reading history of similar users. **Function Specifications:** 1. **Function Name**: `recommend_books` 2. **Parameters**: - `df` (pandas.DataFrame): A DataFrame containing user IDs, book IDs, and ratings given by users to books. - `user_id` (int): The ID of the user for whom the recommendations are to be generated. **Tasks:** - Calculate the similarity between users based on their ratings using cosine similarity. - Identify the top N most similar users to the given user (for simplicity, set N=3). - Aggregate the ratings from these similar users and recommend the top K books (for simplicity, set K=5) that the given user has not yet rated. **Requirements**: - Use the `sklearn.metrics.pairwise.cosine_similarity` to calculate the similarity between users. - Use `pandas.merge` and other pandas functions to manipulate and filter the data as needed. - Return a list of the top K recommended book IDs. You are encouraged to refer to the Python library documentation for `pandas` and `sklearn` as needed. **Example Usage**: ```python import pandas as pd from sklearn.metrics.pairwise import cosine_similarity # Sample DataFrame structure data = { \\"User_ID\\": [1, 1, 2, 2, 3, 3, 4, 4], \\"Book_ID\\": [101, 102, 101, 103, 102, 104, 101, 105], \\"Rating\\": [5, 3, 4, 2, 5, 3, 4, 5] } df = pd.DataFrame(data) # Recommend books for user 1 recommended_books = recommend_books(df, 1) print(recommended_books) ``` This function will recommend books for the specified user based on the reading history and preferences of similar users within the dataset.","solution":"import pandas as pd from sklearn.metrics.pairwise import cosine_similarity def recommend_books(df, user_id): Recommends books based on the reading history of similar users. Parameters: df : pandas.DataFrame DataFrame containing columns \'User_ID\', \'Book_ID\', and \'Rating\'. user_id : int The ID of the user for whom recommendations are to be generated. Returns: list List of recommended book IDs. # Pivot the DataFrame to create a user-book matrix user_book_matrix = df.pivot_table(index=\'User_ID\', columns=\'Book_ID\', values=\'Rating\').fillna(0) # Calculate cosine similarity between users user_similarities = cosine_similarity(user_book_matrix) # Create a DataFrame for user similarities user_similarities_df = pd.DataFrame(user_similarities, index=user_book_matrix.index, columns=user_book_matrix.index) # Get the top 3 most similar users to the given user, excluding the user themselves similar_users = user_similarities_df[user_id].sort_values(ascending=False).index[1:4] # Get the books rated by similar users and not yet rated by the given user similar_users_ratings = user_book_matrix.loc[similar_users] target_user_ratings = user_book_matrix.loc[user_id] # Aggregate and average the ratings for each book avg_ratings = similar_users_ratings.mean(axis=0) # Exclude books already rated by the user books_to_recommend = avg_ratings[target_user_ratings == 0] # Get the top 5 book IDs to recommend recommendations = books_to_recommend.sort_values(ascending=False).head(5).index.tolist() return recommendations"},{"question":"You have been assigned the task of writing a Python function that takes an integer `n` and returns a list of `n` Fibonacci numbers. The goal is to create an efficient and optimized solution that can handle large values of `n` without significant performance degradation. Name the function `generate_fibonacci`. Requirements: 1. The function should take a single integer parameter `n`. 2. If `n` is less than or equal to 0, the function should return an empty list. 3. If `n` is 1, the function should return a list containing only the first Fibonacci number `[0]`. 4. For `n` greater than 1, calculate and return the first `n` Fibonacci numbers in a list. Ensure the function is optimized to handle large values of `n`. Here is a template to get you started: ```python def generate_fibonacci(n): if n <= 0: return [] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:n] # Example usage: # print(generate_fibonacci(10)) ``` Write your implementation of the `generate_fibonacci` function within the provided template. --- Example Usage: ```python print(generate_fibonacci(10)) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] print(generate_fibonacci(1)) # Output: [0] print(generate_fibonacci(-5)) # Output: [] ``` Make sure that the function handles edge cases correctly and is efficient for larger values of `n`.","solution":"def generate_fibonacci(n): Returns a list of the first n Fibonacci numbers. :param int n: The number of Fibonacci numbers to generate :return: A list of the first n Fibonacci numbers if n <= 0: return [] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:n]"},{"question":"In this problem, you will implement a basic genetic algorithm to solve the knapsack problem. The knapsack problem is described as follows: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit, and the total value is as large as possible. Your task is to create a function `genetic_knapsack()` that: 1. Initializes a population of random solutions to the knapsack problem. 2. Evaluates the fitness of each solution based on its total value and ensures the total weight does not exceed the limit. 3. Uses selection, crossover, and mutation genetic algorithm techniques to evolve the population over a given number of generations. 4. Returns the best solution found after the evolution process, including the total value and the items included. # Requirements: 1. The function should be named `genetic_knapsack`. 2. The population size, crossover rate, mutation rate, and number of generations should be predefined within the function. 3. The items should be represented as a list of tuples, where each tuple contains the weight and value of the item, e.g., `[(weight1, value1), (weight2, value2), ...]`. 4. The maximum weight limit should also be predefined within the function. Here is the predefined items and maximum weight limit you should use within the function: ```python items = [(2, 3), (2, 4), (4, 8), (6, 9), (7, 13)] max_weight = 15 ``` The function should output the best solution found in the following format: ``` Best value: <total_value> Items included: <list_of_included_items> ``` Where `<total_value>` is the maximum total value found, and `<list_of_included_items>` is the list of items included in the knapsack, represented by their respective weights and values.","solution":"import random def genetic_knapsack(): # Seed for reproducibility random.seed(42) # Parameters items = [(2, 3), (2, 4), (4, 8), (6, 9), (7, 13)] max_weight = 15 population_size = 20 crossover_rate = 0.8 mutation_rate = 0.1 generations = 100 # Helper functions def initialize_population(): return [[random.choice([0, 1]) for _ in range(len(items))] for _ in range(population_size)] def fitness(individual): total_weight = sum(individual[i] * items[i][0] for i in range(len(items))) total_value = sum(individual[i] * items[i][1] for i in range(len(items))) if total_weight > max_weight: return 0 else: return total_value def select_parent(population): tournament = random.sample(population, k=3) tournament.sort(key=fitness, reverse=True) return tournament[0] def crossover(parent1, parent2): if random.random() > crossover_rate: return parent1, parent2 point = random.randint(1, len(items) - 1) child1 = parent1[:point] + parent2[point:] child2 = parent2[:point] + parent1[point:] return child1, child2 def mutate(individual): if random.random() < mutation_rate: point = random.randint(0, len(items) - 1) individual[point] = 1 - individual[point] return individual # Initialize population population = initialize_population() for _ in range(generations): new_population = [] for _ in range(population_size // 2): parent1 = select_parent(population) parent2 = select_parent(population) child1, child2 = crossover(parent1, parent2) new_population.append(mutate(child1)) new_population.append(mutate(child2)) population = new_population # Evaluate best solution best_individual = max(population, key=fitness) best_value = fitness(best_individual) included_items = [items[i] for i in range(len(items)) if best_individual[i] == 1] print(f\\"Best value: {best_value}\\") print(f\\"Items included: {included_items}\\") return best_value, included_items"},{"question":"Write a function `find_possible_strings` in Python that, given a list of strings and an integer `k`, returns a list of all unique strings that can be constructed by concatenating exactly `k` different strings from the input list. Each string in the input list can be used only once in each concatenation. Your implementation should consider the following constraints: - The order of concatenation matters. - The input list can have duplicate strings. - If no such concatenations are possible, return an empty list. The function signature should be: ```python def find_possible_strings(input_list: list, k: int) -> list: ``` # Example: ```python input_list = [\\"a\\", \\"b\\", \\"c\\"] k = 2 ``` Output: ```python [\\"ab\\", \\"ac\\", \\"ba\\", \\"bc\\", \\"ca\\", \\"cb\\"] ``` # Example: ```python input_list = [\\"red\\", \\"blue\\", \\"red\\"] k = 2 ``` Output: ```python [\\"redblue\\", \\"redred\\", \\"bluered\\", \\"bluered\\"] ``` # Example: ```python input_list = [\\"a\\", \\"b\\", \\"c\\"] k = 4 ``` Output: ```python [] ``` Implement the function below: ```python def find_possible_strings(input_list: list, k: int) -> list: # Your implementation here ```","solution":"from itertools import permutations def find_possible_strings(input_list: list, k: int) -> list: This function returns a list of all unique strings that can be constructed by concatenating exactly k different strings from the input list. Each string in the input list can be used only once in each concatenation. if k > len(input_list): return [] perm = permutations(input_list, k) result = [\\"\\".join(tup) for tup in set(perm)] return result"},{"question":"# Problem Statement You are tasked with creating a function called `reduce_fractions` that takes a list of tuples where each tuple represents a fraction (numerator, denominator) and returns a list of tuple of fractions in their simplest form. # Function Requirements - **Function Name**: `reduce_fractions` - **Parameters**: - `fractions` (list of tuples): A list where each tuple contains two integers representing the numerator and the denominator of a fraction. - **Return Value**: A list of tuples containing the fractions in their reduced form. # Behavior 1. Iterate through each tuple in the input list. 2. For each fraction, calculate the greatest common divisor (GCD) of the numerator and denominator. 3. Divide both the numerator and denominator by the GCD to reduce the fraction to its simplest form. 4. Append the simplified fraction as a tuple back to a new list. 5. Return the new list of simplified fractions. # Additional Details - Ensure that the function handles edge cases such as fractions with a numerator of 0 and negative numbers appropriately. - You should use the `math.gcd` function to calculate the greatest common divisor. # Example If the function is called as: ```python reduce_fractions([(4, 8), (12, 15), (100, 200), (0, 1)]) ``` The function should return: ```python [(1, 2), (4, 5), (1, 2), (0, 1)] ``` # Libraries to Use - `math` (for the `gcd` function) # Constraints You may assume that all denominators in the input list will be non-zero.","solution":"import math def reduce_fractions(fractions): Reduces each fraction in the list to its simplest form. Parameters: fractions (list of tuples): A list where each tuple contains two integers representing the numerator and the denominator of a fraction. Returns: list of tuples: A list of tuples containing the fractions in their simplest form. reduced_fractions = [] for numerator, denominator in fractions: gcd = math.gcd(numerator, denominator) reduced_fractions.append((numerator // gcd, denominator // gcd)) return reduced_fractions"},{"question":"You are tasked with creating a function that takes a list of customer transactions and calculates the total spending for each customer. The transactions are provided as a list of dictionaries, where each dictionary contains information about a single transaction. The aim here is to understand list comprehension and dictionary manipulation. **Function to Implement:** ```python def calculate_total_spending(transactions): This function takes a list of customer transactions and returns a dictionary with each customer\'s ID and their corresponding total spending. Parameters: transactions (list of dicts): A list where each dict represents a transaction containing \'customer_id\' and \'amount\' keys. Returns: dict: A dictionary with customer IDs as keys and their total spending as values. ``` **Requirements:** - Utilize list comprehension to aggregate transaction amounts by customer ID. - The result should be a dictionary where keys are customer IDs and values are the total spending. **Example:** ```python # Example list of transactions transactions = [ {\'customer_id\': \'C001\', \'amount\': 150.0}, {\'customer_id\': \'C002\', \'amount\': 200.0}, {\'customer_id\': \'C001\', \'amount\': 100.0}, {\'customer_id\': \'C002\', \'amount\': 50.0}, {\'customer_id\': \'C003\', \'amount\': 300.0} ] # Expected output dictionary # { # \'C001\': 250.0, # \'C002\': 250.0, # \'C003\': 300.0 # } ``` Use the example transactions and expected output as a guide for how to structure your function implementation.","solution":"def calculate_total_spending(transactions): This function takes a list of customer transactions and returns a dictionary with each customer\'s ID and their corresponding total spending. Parameters: transactions (list of dicts): A list where each dict represents a transaction containing \'customer_id\' and \'amount\' keys. Returns: dict: A dictionary with customer IDs as keys and their total spending as values. result = {} for transaction in transactions: customer_id = transaction[\'customer_id\'] amount = transaction[\'amount\'] if customer_id in result: result[customer_id] += amount else: result[customer_id] = amount return result"},{"question":"You are tasked with writing a function called `calculate_statistics` that computes various statistical summaries for the columns in a Pandas DataFrame. Each column in the DataFrame represents a different numerical dataset. Your function should provide a summary statistics DataFrame with the following statistics for each original column: - Mean - Median - Standard Deviation - Minimum Value - Maximum Value Given a Pandas DataFrame `df` where each column contains numerical data, write the function `calculate_statistics(df)`. This function should: 1. Calculate the mean, median, standard deviation, minimum value, and maximum value for each column in `df`. 2. Create a new DataFrame with each of these statistics as rows and the original column names as columns. - The new DataFrame should have the statistics as the index: `[\'mean\', \'median\', \'std\', \'min\', \'max\']`. - Each cell should contain the corresponding statistic for that column. 3. Return the new DataFrame. You may assume that `df` contains only numerical data and does not contain any missing or null values.","solution":"import pandas as pd def calculate_statistics(df): Calculate summary statistics for each column in the dataframe. Parameters: df (pd.DataFrame): DataFrame containing numerical data. Returns: pd.DataFrame: A DataFrame containing the summary statistics. statistics = { \'mean\': df.mean(), \'median\': df.median(), \'std\': df.std(), \'min\': df.min(), \'max\': df.max() } summary_df = pd.DataFrame(statistics) return summary_df.T"},{"question":"You are requested to implement a function that reads a CSV file and filters out rows based on a given condition. Your function should exclusively use the `csv` library from Python\'s standard library to read and write the CSV data. Specifically, your function will: 1. Take three input parameters: - `input_csv`: The path to the input CSV file. - `output_csv`: The path to the output CSV file where filtered rows will be written. - `condition`: A function that takes a row (as a dictionary) and returns `True` if the row should be included in the output, and `False` if it should be excluded. 2. Read the input CSV file. 3. Filter the rows based on the given condition function. 4. Write the filtered rows to the output CSV file, retaining the same CSV column structure. The column headers in the input CSV should be preserved in the output CSV. Each row should be processed as a dictionary where keys are the column headers and values are the cell contents. **Function Signature:** ```python def filter_csv(input_csv: str, output_csv: str, condition: Callable[[Dict[str, str]], bool]) -> None: ``` **Example:** Assume you have an input CSV file `data.csv` with the following contents: ``` name,age,city Alice,30,New York Bob,25,Los Angeles Charlie,35,Chicago Dana,22,Houston ``` And you want to filter out rows where the age is less than 30. ```python def age_condition(row): return int(row[\'age\']) >= 30 filter_csv(\\"data.csv\\", \\"filtered_data.csv\\", age_condition) ``` The resulting `filtered_data.csv` should contain: ``` name,age,city Alice,30,New York Charlie,35,Chicago ```","solution":"import csv from typing import Callable, Dict def filter_csv(input_csv: str, output_csv: str, condition: Callable[[Dict[str, str]], bool]) -> None: with open(input_csv, mode=\'r\', newline=\'\') as infile: reader = csv.DictReader(infile) with open(output_csv, mode=\'w\', newline=\'\') as outfile: writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames) writer.writeheader() for row in reader: if condition(row): writer.writerow(row)"},{"question":"You need to develop a function that determines the longest palindrome substring that can be constructed by rearranging the letters of a given string. Your function should return the length of this longest palindrome substring. Function Signature ```python def longest_palindrome_substring(s: str) -> int: ... ``` Parameters - `s` (str): The input string for which the longest possible palindrome substring needs to be found. Returns - (int): The length of the longest possible palindrome substring that can be formed by rearranging the characters in the given string. Example ```python s = \\"abccccdd\\" longest_palindrome_substring(s) # Returns: 7 ``` Explanation - The longest palindrome substring formed from the letters in \\"abccccdd\\" is \\"dccaccd\\" which has a length of 7. - The function should count the occurrences of each character and determine how to form the longest palindrome possible.","solution":"def longest_palindrome_substring(s: str) -> int: from collections import Counter # Count the occurrences of each character char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # If there is any character with an odd count, we can place one of it in the middle if odd_found: length += 1 return length"},{"question":"You are tasked with managing a collection of books in a small library system where each book is characterized by its title, author, and year of publication. Your goal is to write a class named `Library` that supports adding new books, searching for books by title, removing books, and listing all books sorted by title. **Instructions:** 1. Implement a class `Library` that includes: - A private list instance variable to store the books. - A nested class `Book` with attributes `title`, `author`, and `year` to represent each book. 2. Implement the following methods in the `Library` class: - `add_book(title, author, year)`: Adds a new book to the library. - `search_by_title(title)`: Searches and returns a list of books with the given title. The search should be case insensitive. - `remove_book(title)`: Removes the book(s) with the given title from the library. If no book exists with that title, raise a `ValueError`. - `list_books()`: Returns a list of all books in the library, sorted by title. 3. Handle the `ValueError` exception within the `remove_book` method when the book is not found. **Example Usage:** ```python lib = Library() lib.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) lib.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) lib.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) # Searching for a book results = lib.search_by_title(\\"the great gatsby\\") # Results should include two entries of \\"The Great Gatsby\\" # Removing a book lib.remove_book(\\"To Kill a Mockingbird\\") # Should remove the book without errors try: lib.remove_book(\\"To Kill a Mockingbird\\") # This should raise a ValueError except ValueError as e: print(e) # Listing all books books = lib.list_books() # Should return [\\"The Great Gatsby\\", \\"The Great Gatsby\\"] ``` **Additional Information:** - Books should be treated as case insensitive in title-related methods (`search_by_title` and `remove_book`). - Ensure the `list_books` method returns books sorted by title in ascending order. - The `Library` class should encapsulate all book-related operations to maintain clean and organized code.","solution":"class Library: class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def __repr__(self): return f\\"Book(title=\'{self.title}\', author=\'{self.author}\', year={self.year})\\" def __init__(self): self._books = [] def add_book(self, title, author, year): book = self.Book(title, author, year) self._books.append(book) def search_by_title(self, title): search_title = title.lower() return [book for book in self._books if book.title.lower() == search_title] def remove_book(self, title): search_title = title.lower() initial_length = len(self._books) self._books = [book for book in self._books if book.title.lower() != search_title] if initial_length == len(self._books): raise ValueError(f\\"No book found with title: {title}\\") def list_books(self): return sorted(self._books, key=lambda book: book.title) # Example usage lib = Library() lib.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) lib.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) lib.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) # Searching for a book results = lib.search_by_title(\\"the great gatsby\\") for book in results: print(book) # Removing a book lib.remove_book(\\"To Kill a Mockingbird\\") try: lib.remove_book(\\"To Kill a Mockingbird\\") except ValueError as e: print(e) # Listing all books books = lib.list_books() for book in books: print(book)"},{"question":"Given a 2D grid of integers where each cell represents the elevation of a point on the land, write a function to find the size of the largest island. An island is defined as a group of contiguous cells with the same elevation value that are connected horizontally or vertically. The function should take the grid as input and return the size of the largest island. If there are no islands, return 0. The function should output an integer representing the size of the largest island. You should write self-contained code starting with: ``` from collections import deque def largest_island(grid: list[list[int]]) -> int: ```","solution":"from collections import deque def largest_island(grid: list[list[int]]) -> int: def bfs(start): q = deque([start]) visited.add(start) count = 1 while q: x, y = q.popleft() for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited and grid[nx][ny] == grid[x][y]: visited.add((nx, ny)) q.append((nx, ny)) count += 1 return count if not grid: return 0 visited = set() max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if (i, j) not in visited: max_size = max(max_size, bfs((i, j))) return max_size"},{"question":"You are tasked with creating a Python function that leverages both threading and HTTP requests to simulate a simple load testing tool. Your function will generate multiple concurrent threads to send HTTP GET requests to a provided URL. The goal is to measure how many successful responses (status code 200) are received within a specific time frame. The function you need to write is called `load_test()` which takes two parameters: 1. `url` (str): The URL to send the HTTP GET requests. 2. `num_threads` (int): The number of concurrent threads to spawn. Each thread should continuously send requests until a stop condition is met. The stop condition is that the total run time should not exceed 10 seconds. The specific tasks: 1. Write the function `load_test(url, num_threads)`. 2. Use the `requests` library to send HTTP GET requests. 3. Use the `threading` library to manage concurrent threads. 4. Implement a mechanism to track the number of successful (status code 200) responses. Here is the context and a partial code snippet for your function: ```python import threading import requests import time def load_test(url, num_threads): successful_responses = 0 start_time = time.time() def send_request(): nonlocal successful_responses while time.time() - start_time < 10: response = requests.get(url) if response.status_code == 200: successful_responses += 1 threads = [] for _ in range(num_threads): thread = threading.Thread(target=send_request) threads.append(thread) thread.start() for thread in threads: thread.join() print(f\\"Successful responses: {successful_responses}\\") # Example usage # load_test(\\"http://example.com\\", 5) ``` Ensure that your function handles the creation and management of threads efficiently. Include appropriate comments in your code to illustrate key steps and decisions.","solution":"import threading import requests import time def load_test(url, num_threads): Conducts a load test by sending multiple concurrent HTTP GET requests to the specified URL. Parameters: url (str): The URL to send the HTTP GET requests. num_threads (int): The number of concurrent threads to spawn. Returns: int: The number of successful (status code 200) responses received within 10 seconds. successful_responses = 0 start_time = time.time() threads = [] lock = threading.Lock() def send_request(): nonlocal successful_responses while time.time() - start_time < 10: try: response = requests.get(url) if response.status_code == 200: with lock: successful_responses += 1 except requests.RequestException: # Ignore failed requests pass # Create and start threads for _ in range(num_threads): thread = threading.Thread(target=send_request) threads.append(thread) thread.start() # Wait for all threads to complete for thread in threads: thread.join() return successful_responses # Example usage # print(f\\"Successful responses: {load_test(\'http://example.com\', 5)}\\")"},{"question":"You need to implement a function that checks for a winner in a given game of Tic-Tac-Toe. The game board is represented as a 3x3 matrix where the cells can have one of the three values: \'X\', \'O\', or \'\' (an empty string). The function should return the winner (\'X\' or \'O\') if there is one, or \'No winner\' if there is no winner yet. Here is the detailed specification for the function: **Function Name**: `check_winner` **Parameters**: 1. `board` (List of List of Strings): A 3x3 matrix representing the Tic-Tac-Toe game board. Each cell can be \'X\', \'O\', or \'\'. **Behavior**: 1. The function should check the rows, columns, and diagonals of the board to see if any player has won. 2. If \'X\' wins, return \'X\'. 3. If \'O\' wins, return \'O\'. 4. If no player has won, return \'No winner\'. Here is an example to illustrate the function: For the following input ```python board = [ [\'X\', \'O\', \'\'], [\'O\', \'X\', \'\'], [\'O\', \'\', \'X\'] ] ``` The function should return \'X\' because there\'s a diagonal with all \'X\'. Another example: For the following input ```python board = [ [\'X\', \'O\', \'O\'], [\'O\', \'O\', \'X\'], [\'X\', \'X\', \'O\'] ] ``` The function should return \'No winner\' as no one has three identical marks in any row, column, or diagonal. Here\'s the skeleton code for your implementation: ```python def check_winner(board): # Your implementation here ```","solution":"def check_winner(board): Checks for a winner in a Tic-Tac-Toe game. Parameters: board (list of list of str): A 3x3 matrix representing the board. Returns: str: \'X\' if X wins, \'O\' if O wins, \'No winner\' otherwise. # Check rows for a winner for row in board: if row[0] == row[1] == row[2] and row[0] != \'\': return row[0] # Check columns for a winner for col in range(3): if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \'\': return board[0][col] # Check diagonals for a winner if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \'\': return board[0][0] if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \'\': return board[0][2] # If no winner found return \'No winner\'"},{"question":"Write a function that takes a URL as input and downloads the content at the URL to a specified file. The function should also handle exceptions related to network issues and invalid URLs by printing appropriate error messages. If the URL content is downloaded successfully, the function should return the file path. The function should output with: str: The file path where the downloaded content is saved. If the download is unsuccessful, return `None`. You should write self-contained code starting with: ``` import requests def download_content(url, file_path): ```","solution":"import requests def download_content(url, file_path): Downloads content from the given URL and saves it to the specified file path. Args: - url: string, the URL to download content from - file_path: string, the file path to save the downloaded content Returns: - str: The file path where the downloaded content is saved. If download is unsuccessful, return `None`. try: response = requests.get(url) response.raise_for_status() # Raise an error for bad responses with open(file_path, \'wb\') as file: file.write(response.content) return file_path except requests.exceptions.RequestException as e: print(f\\"Error downloading content: {e}\\") return None"},{"question":"Write a function that takes a string as input and returns the first non-repeating character in it. If all characters repeat or the string is empty, return None. Maintain the original order of characters while checking for non-repetition. The function should output with: str or None: The first non-repeating character or None if no such character exists. You should write self-contained code starting with: ``` def first_non_repeating_character(s): ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat or the string is empty, returns None. # Dictionary to keep track of character counts char_count = {} # First pass to count characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character is found return None"},{"question":"You are given an array `prices` representing the prices of a stock on consecutive days. Write a function to calculate the maximum profit you can achieve by performing at most one transaction (buy and sell one share of the stock). If no profit can be made, return 0. The function should be: ```python def max_profit(prices): Calculate the maximum profit from a single buy and sell of stock. Parameters: prices (List[int]): List of stock prices on consecutive days. Returns: int: Maximum profit achievable. If no profit can be made, return 0. pass ``` The function `max_profit` should: 1. Iterate over the stock prices to find the minimum price up to the current day. 2. Keep track of the maximum profit by comparing the current price with the minimum price encountered so far. 3. Return the maximum profit calculated. Example: ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5, buy on day 2 (price = 1), sell on day 5 (price = 6) ``` Another example: ```python prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0, no transaction is done, i.e., max profit = 0 ```","solution":"def max_profit(prices): Calculate the maximum profit from a single buy and sell of stock. Parameters: prices (List[int]): List of stock prices on consecutive days. Returns: int: Maximum profit achievable. If no profit can be made, return 0. if len(prices) < 2: # No profit can be made if there are less than 2 prices return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are tasked with implementing the function `find_articulation_points` which identifies all articulation points in an undirected graph. Articulation points are nodes that, when removed, increase the number of connected components of the graph. Write a function `find_articulation_points` that accomplishes the following: 1. Accepts one parameter: - `graph`: a dictionary representing an undirected graph where the keys are node identifiers and the values are lists of adjacent nodes. 2. Returns: - A list of articulation points in the graph, sorted in ascending order. **Detailed Description:** - The graph is represented by `graph`, where `graph[node]` is a list of adjacent nodes for the given `node`. - The function should return the articulation points as a sorted list of node identifiers. **Example:** ```python graph = { 0: [1, 2], 1: [0, 2, 3, 4], 2: [0, 1], 3: [1, 4, 5], 4: [1, 3], 5: [3] } # Expected Output: [1, 3] ``` Note: - You may use Tarjan\'s algorithm for finding articulation points. - Ensure the output list is in ascending order of the node identifiers.","solution":"def find_articulation_points(graph): def dfs(node, parent, visited, disc, low, time, articulation_points): visited[node] = True disc[node] = low[node] = time[0] time[0] += 1 children = 0 for neighbor in graph[node]: if not visited[neighbor]: children += 1 dfs(neighbor, node, visited, disc, low, time, articulation_points) low[node] = min(low[node], low[neighbor]) if parent is None and children > 1: articulation_points.add(node) if parent is not None and low[neighbor] >= disc[node]: articulation_points.add(node) elif neighbor != parent: low[node] = min(low[node], disc[neighbor]) visited = {node: False for node in graph} disc = {node: float(\'inf\') for node in graph} low = {node: float(\'inf\') for node in graph} time = [0] articulation_points = set() for node in graph: if not visited[node]: dfs(node, None, visited, disc, low, time, articulation_points) return sorted(list(articulation_points))"},{"question":"Implement a function that takes an unbalanced binary search tree (BST) and transforms it into a balanced BST. Use an in-order traversal to extract the elements of the tree, and then insert them into a new balanced BST. Write a self-contained code starting with: ``` class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def store_inorder(node, inorder_list): ``` The function `balanced_bst` should receive the root of an unbalanced BST and return the root of the balanced BST.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def store_inorder(node, inorder_list): if node is None: return store_inorder(node.left, inorder_list) inorder_list.append(node.val) store_inorder(node.right, inorder_list) def sorted_array_to_bst(arr): if not arr: return None mid = len(arr) // 2 node = TreeNode(arr[mid]) node.left = sorted_array_to_bst(arr[:mid]) node.right = sorted_array_to_bst(arr[mid+1:]) return node def balanced_bst(root): inorder_list = [] store_inorder(root, inorder_list) return sorted_array_to_bst(inorder_list)"},{"question":"You need to create a Python function that calculates the shortest path in an undirected graph using Dijkstra\'s algorithm. The graph is represented as an adjacency list, and the function should return the length of the shortest path between two nodes. Your task is to implement a function `shortest_path_length` that takes three parameters: - `graph`: A dictionary where keys are node identifiers and values are lists of tuples representing the nodes connected to the key node and the corresponding edge weights. - `start`: The starting node for the path. - `end`: The ending node for the path. This function must: 1. Use Dijkstra\'s algorithm to find the shortest path from the `start` node to the `end` node. 2. Return the length of the shortest path. If no such path exists, return -1. You can assume all edge weights are positive integers. For example: ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } # Example usage: length = shortest_path_length(graph, \'A\', \'D\') print(length) # This should output: # 4 (A -> B -> C -> D) ``` Ensure you use Python’s `heapq` library to maintain a priority queue for this implementation of Dijkstra\'s algorithm.","solution":"import heapq def shortest_path_length(graph, start, end): Returns the length of the shortest path from start to end using Dijkstra\'s algorithm. # Priority queue to hold nodes to explore and their current shortest distance from start priority_queue = [(0, start)] # Dictionary to hold the shortest distance to each node shortest_distances = {node: float(\'inf\') for node in graph} shortest_distances[start] = 0 while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reached the destination node, return the distance if current_node == end: return current_distance # Skip processing if we found a shorter path already if current_distance > shortest_distances[current_node]: continue # Explore the neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path is found to the neighbor via current node if distance < shortest_distances[neighbor]: shortest_distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # If the end node is not reachable return -1"},{"question":"You are tasked with creating a function named `sort_students_by_grade` that receives a list of dictionaries as input, where each dictionary contains information about a student. Each dictionary will have the keys \'name\' (a string representing the student\'s name) and \'grade\' (an integer representing the student\'s grade). The function should return a list of student names sorted first by their grade in ascending order, and for students with the same grade, sorted by their name in ascending alphabetical order. The function must perform the following steps: 1. Sort the list of dictionaries primarily by the \'grade\' key and secondarily by the \'name\' key. 2. Extract the sorted student names into a new list. 3. Return the list of sorted names. You will need to use Python\'s sorting functions and ensure that the sorting is stable to maintain the specified order. **Function Signature:** ```python def sort_students_by_grade(students: list) -> list: # Your code here ```","solution":"def sort_students_by_grade(students): Sorts a list of students by grade (ascending) and by name (alphabetical order) for students with the same grade. Parameters: students (list): A list of dictionaries, each with \'name\' and \'grade\' keys. Returns: list: A list of student names sorted by the criteria. sorted_students = sorted(students, key=lambda x: (x[\'grade\'], x[\'name\'])) sorted_names = [student[\'name\'] for student in sorted_students] return sorted_names"},{"question":"You are given the task of implementing a function that performs basic arithmetic operations on a list of integers, filtering out invalid values and ensuring proper operation handling. The function should perform the following steps: 1. **Filter Invalid Values**: Remove any values from the list that are not integers. 2. **Operation Selection**: Based on the operation specified, compute the result: - `\'add\'`: Sum all integers. - `\'subtract\'`: Subtract all integers in sequence. - `\'multiply\'`: Multiply all integers. - `\'divide\'`: Divide the first integer by each subsequent integer in sequence. If division by zero occurs, it should raise an appropriate error. # Function Name ```python def perform_operations(int_list, operation): ``` # Inputs - **int_list** (list): A list containing elements that could be integers or other types. - **operation** (str): A string specifying the operation to be performed. It can be one of `\'add\'`, `\'subtract\'`, `\'multiply\'`, or `\'divide\'`. # Output - **result** (float or int): The result of the arithmetic operation. # Requirements 1. Iterate through the list and filter out non-integer values. 2. Ensure proper handling of the specified operation. 3. Raise an error if division by zero is encountered during \'divide\'. # Example For example, given the input list and operation: ```python int_list = [1, \'a\', 3, \'b\', 5] operation = \'add\' ``` The function should return: ```python 9 ``` Given the input list and operation: ```python int_list = [10, 2, \'x\', 2] operation = \'divide\' ``` The function should return: ```python 2.5 ``` # Assumptions 1. The input list might contain non-integer elements. 2. Division is floating-point division. # Constraints 1. The input list will have at least one valid integer. 2. The `operation` parameter will always be one of `\'add\'`, `\'subtract\'`, `\'multiply\'`, or `\'divide\'`. # Libraries No special libraries are required for this question. Use basic Python functionality to achieve the desired results.","solution":"def perform_operations(int_list, operation): Perform an arithmetic operation on a filtered list of integers. Parameters: int_list (list): List containing elements that may include non-integers. operation (str): The operation to perform: \'add\', \'subtract\', \'multiply\', or \'divide\'. Returns: result (float or int): The result of the arithmetic operation. # Filter out non-integer values filtered_list = [item for item in int_list if isinstance(item, int)] if not filtered_list: raise ValueError(\\"The list must contain at least one integer.\\") if operation == \'add\': result = sum(filtered_list) elif operation == \'subtract\': result = filtered_list[0] for num in filtered_list[1:]: result -= num elif operation == \'multiply\': result = 1 for num in filtered_list: result *= num elif operation == \'divide\': result = filtered_list[0] for num in filtered_list[1:]: if num == 0: raise ValueError(\\"Division by zero is not allowed.\\") result /= num else: raise ValueError(\\"Invalid operation specified.\\") return result"},{"question":"You are asked to write a Python function named `can_complete_circuit` that determines if a car can complete a circular route given a list of gas stations and their corresponding gas and cost values. The car starts with an empty tank at a gas station and travels in a circular route. The function signature is as follows: ```python def can_complete_circuit(gas, cost): Determine if a car can complete a circular route given the gas and cost. Parameters: gas (list of int): List of gas available at each station. cost (list of int): List of gas costs to travel to the next station. Returns: int: The starting gas station index if the circuit can be completed, otherwise -1. ``` # Parameters: * `gas` (list of int): The amount of gas available at each gas station (0-indexed). * `cost` (list of int): The cost in gas to travel from each gas station to the next (0-indexed). # Returns: * `int`: The index of the starting gas station if the car can complete the circular route; otherwise, return -1. # Requirements: 1. Ensure the function is efficient with a linear time complexity. 2. Pay attention to handling cases where the car might start at different gas stations. Example of how the function might be used: ```python gas = [1, 2, 3, 4, 5] cost = [3, 4, 5, 1, 2] starting_station = can_complete_circuit(gas, cost) print(starting_station) # Expected output: 3 ``` In the example above, the car can start at gas station index 3, collect enough gas to reach the next stations, and complete the circuit back to station 3.","solution":"def can_complete_circuit(gas, cost): Determine if a car can complete a circular route given the gas and cost values. Parameters: gas (list of int): List of gas available at each station. cost (list of int): List of gas costs to travel to the next station. Returns: int: The starting gas station index if the circuit can be completed, otherwise -1. total_tank, curr_tank = 0, 0 starting_station = 0 for i in range(len(gas)): total_tank += gas[i] - cost[i] curr_tank += gas[i] - cost[i] if curr_tank < 0: starting_station = i + 1 curr_tank = 0 return starting_station if total_tank >= 0 else -1"},{"question":"# Problem Statement You are tasked with implementing a function called `rotate_matrix` to rotate a given square matrix by 90 degrees in the clockwise direction. The rotation should be done in-place, meaning you should not utilize any additional arrays or data structures for the rotation. # Detailed Function Specification **Function Name:** `rotate_matrix` **Parameters:** 1. `matrix` (list of lists): A 2D list where each sublist represents a row of the matrix. This matrix is guaranteed to be square, meaning it has the same number of rows and columns. **Returns:** - None: The transformation of the matrix should be done in-place. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) for row in matrix: print(row) ``` **Expected Output:** ``` [7, 4, 1] [8, 5, 2] [9, 6, 3] ``` # Explanation 1. Transpose the matrix. This step involves switching rows with columns: ``` [1, 2, 3] → [1, 4, 7] [4, 5, 6] [2, 5, 8] [7, 8, 9] [3, 6, 9] ``` 2. Reverse each row: ``` [1, 4, 7] → [7, 4, 1] [2, 5, 8] [8, 5, 2] [3, 6, 9] [9, 6, 3] ``` 3. The final result is the rotated matrix.","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise in-place. Parameters: - matrix (list of lists): The input square matrix. Returns: - None: The rotation is done in-place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Create a function called `merge_sorted_arrays` that merges two pre-sorted arrays into a single sorted array without using any built-in sorting function. # Function Specification: ```python def merge_sorted_arrays(array1: List[int], array2: List[int]) -> List[int]: Merges two pre-sorted arrays into a single sorted array. :param array1: First sorted array (List of integers) :param array2: Second sorted array (List of integers) :return: Merged sorted array (List of integers) ``` # Instructions: 1. Initialize two pointers, one for each array (`i` for `array1` and `j` for `array2`), starting at 0. 2. Initialize an empty list `merged_array`. 3. Use a loop to compare elements at these pointers and append the smaller element to `merged_array`. 4. If an element is appended to `merged_array`, increment the corresponding pointer. 5. Continue this process until one of the arrays is exhausted. 6. Append any remaining elements from the non-exhausted array to `merged_array`. # Example: ```python array1 = [1, 3, 5, 7] array2 = [2, 4, 6, 8, 10] result = merge_sorted_arrays(array1, array2) # Expected Output: [1, 2, 3, 4, 5, 6, 7, 8, 10] ``` Note: You may assume that both `array1` and `array2` contain only integers and are already sorted in ascending order.","solution":"from typing import List def merge_sorted_arrays(array1: List[int], array2: List[int]) -> List[int]: Merges two pre-sorted arrays into a single sorted array. :param array1: First sorted array (List of integers) :param array2: Second sorted array (List of integers) :return: Merged sorted array (List of integers) i, j = 0, 0 merged_array = [] while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 while i < len(array1): merged_array.append(array1[i]) i += 1 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"**Title: Evaluate Mathematical Expression Using Reverse Polish Notation** Reverse Polish Notation (RPN) or postfix notation is a mathematical notation in which every operator follows all of its operands. It does not need any parentheses as long as the operators have a fixed number of operands, making it easy to evaluate by computers. In this problem, you are required to evaluate a given mathematical expression written in RPN. **Input:** The input will be a list of strings, where each string is either: 1. An integer representing an operand. 2. One of the following operators: `+`, `-`, `*`, `/`. Note: - Division `(/)` should truncate towards zero (standard integer division behavior in Python 3). - You can assume the given RPN expression is always valid. **Output:** The output is a single integer, the result of evaluating the RPN expression. **Your Task:** You need to implement a function named `evaluateRPN` that evaluates the given RPN expression and returns the computed integer value. **Function Signature:** ```python def evaluateRPN(tokens: List[str]) -> int: pass ``` **Example:** ```python # Example 1 tokens = [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] print(evaluateRPN(tokens)) # Output: 9 (Explanation: ((2 + 1) * 3) = 9) # Example 2 tokens = [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] print(evaluateRPN(tokens)) # Output: 6 (Explanation: (4 + (13 / 5)) = 6) ``` **Constraints:** - The length of the input list will be between 1 and 100, inclusive. - Each token is either an operator (`+`, `-`, `*`, `/`) or an integer in the range `[-100, 100]`.","solution":"from typing import List def evaluateRPN(tokens: List[str]) -> int: Evaluates an expression in Reverse Polish Notation (RPN). stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = int(a / b) # Using int() for truncating towards zero stack.append(result) else: stack.append(int(token)) return stack[0]"},{"question":"You are provided with a directory path containing several text files. Each text file contains multiple lines of words separated by spaces. Your task is to write a function named `word_counter` that reads all text files in the specified directory and returns a dictionary where the keys are words and the values are the frequency counts of those words across all files. The function signature should be: ```python def word_counter(directory: str) -> dict: ``` **Function Details:** - `directory` (str): The path to the directory containing the text files. - The function should return a dictionary with words as keys and their respective frequency counts as values. **Example:** Assume your directory contains two text files: - `file1.txt`: ``` hello world hello ``` - `file2.txt`: ``` world world hello ``` When you pass this directory path to the function `word_counter`, it should return a dictionary: ``` { \\"hello\\": 3, \\"world\\": 3 } ```","solution":"import os from collections import defaultdict def word_counter(directory: str) -> dict: Reads all text files in the specified directory and returns a dictionary with words and their frequency counts across all files. :param directory: Path to the directory containing text files. :return: Dictionary with word frequency counts. word_count = defaultdict(int) for filename in os.listdir(directory): if filename.endswith(\\".txt\\"): file_path = os.path.join(directory, filename) with open(file_path, \'r\') as file: for line in file: words = line.split() for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You are given a grid of characters, representing a maze, where \'S\' indicates the start position, \'E\' indicates the end position, \'.\' represents an empty cell, and \'#\' indicates a wall. The goal is to find the shortest path from \'S\' to \'E\' using the four possible moves (up, down, left, right). **Function to Implement:** `find_shortest_path(maze)` - **Parameters:** - `maze`: A list of lists where each sublist represents a row in the maze, containing characters \'S\', \'E\', \'.\', and \'#\'. - **Returns:** - A list of tuples, where each tuple represents the coordinates (row, column) of a step in the shortest path from \'S\' to \'E\', inclusive of the start and end points. If there is no valid path, return an empty list. **Requirements:** - Use Breadth-First Search (BFS) to find the shortest path. - Ensure BFS implementation handles edge cases such as no path or multiple start/end points. **Assumptions:** - The input maze is a valid grid with one \'S\' and one \'E\'. - The grid can have varying dimensions but each row will have the same number of columns. - The start (\'S\') and end (\'E\') are always reachable if a path exists. **Example:** ```python maze = [ [\'S\', \'.\', \'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\', \'.\', \'.\'], [\'#\', \'.\', \'.\', \'#\', \'E\'] ] find_shortest_path(maze) ``` - **Expected Output:** ```python [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3), (2, 4), (3, 4)] ```","solution":"from collections import deque def find_shortest_path(maze): Finds the shortest path in a maze from \'S\' to \'E\'. Parameters: maze (list of lists): The maze represented as a grid. Returns: list of tuples: The shortest path from \'S\' to \'E\' as a list of coordinates (row, column). Returns an empty list if no path exists. rows, cols = len(maze), len(maze[0]) start, end = None, None # Identify the starting (S) and ending (E) positions for r in range(rows): for c in range(cols): if maze[r][c] == \'S\': start = (r, c) elif maze[r][c] == \'E\': end = (r, c) if not start or not end: return [] # No start or end point found # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: current_pos, path = queue.popleft() if current_pos == end: return path for direction in directions: new_row, new_col = current_pos[0] + direction[0], current_pos[1] + direction[1] new_pos = (new_row, new_col) if 0 <= new_row < rows and 0 <= new_col < cols and new_pos not in visited and maze[new_row][new_col] != \'#\': visited.add(new_pos) queue.append((new_pos, path + [new_pos])) return [] # No path found"},{"question":"You are given a dictionary representing students and their scores in various subjects. Your task is to create a function named `calculate_grades` that takes in this dictionary and returns another dictionary where each student\'s name is mapped to their average score rounded to two decimal points. The function signature should be: ```python def calculate_grades(students_scores): # Your code here ``` # Requirements: 1. Iterate through each student and their list of scores. 2. Calculate the average score for each student. 3. Round the average score to two decimal points using Python\'s `round` function. 4. Return a dictionary with student names as keys and their rounded average scores as values. # Example: ```python students_scores = { \'Alice\': [80, 90, 85], \'Bob\': [70, 75, 80], \'Charlie\': [95, 100, 98] } result = calculate_grades(students_scores) # The resulting dictionary should be: # {\'Alice\': 85.0, \'Bob\': 75.0, \'Charlie\': 97.67} ``` # Specifications: - Ensure the function handles empty input dictionaries gracefully. - Assume that each student will have at least one score in their list. # Hints: - You may use dictionary comprehension and the `sum` function to streamline your implementation. - Utilize the `round` function to ensure scores are rounded to two decimal places. Ensure that your implementation is clean, readable, and follows good coding practices.","solution":"def calculate_grades(students_scores): Returns a dictionary where each student\'s name is mapped to their average score rounded to two decimal points. Parameters: students_scores (dict): A dictionary with student names as keys and a list of their scores as values. Returns: dict: A dictionary with student names as keys and their rounded average scores as values. return {student: round(sum(scores) / len(scores), 2) for student, scores in students_scores.items()}"},{"question":"**Background:** You are working on a system that tracks the inventory of a bookstore. The system must be able to handle updates to the inventory as new books are added or sold. Each book in the inventory is identified by a unique ISBN and also has a title and a count representing the number of copies in stock. **Your Task:** You need to write a function `update_inventory(inventory: dict, action: str, isbn: str, title: str = \\"\\", count: int = 0) -> dict` that will update the inventory based on the specified action. **Function Requirements:** 1. The inventory is represented as a dictionary where the keys are ISBNs (strings) and the values are dictionaries with the book\'s title and count of copies. 2. The function should support the following actions: - `\\"add\\"`: Add a new book to the inventory. - If the book already exists, increment the count by the specified count. - If the book does not exist, add it to the inventory with the given title and count. - `\\"sell\\"`: Sell the specified number of copies. - If the book exists and there are enough copies, decrement the count by the specified count. - If the book does not exist or there are not enough copies, do nothing. 3. In case the action is invalid, the function should return the unmodified inventory. # Parameters: - `inventory` (dict): Inventory of the bookstore. - `action` (str): The action to perform (`\\"add\\"` or `\\"sell\\"`). - `isbn` (str): The ISBN of the book. - `title` (str): The title of the book (only used for the `\\"add\\"` action). - `count` (int): The number of copies to add or sell (must be a positive integer). # Example: ```python initial_inventory = { \\"978-3-16-148410-0\\": {\\"title\\": \\"Book A\\", \\"count\\": 10}, \\"978-1-86197-876-9\\": {\\"title\\": \\"Book B\\", \\"count\\": 5} } # Add a new book updated_inventory = update_inventory(initial_inventory, \\"add\\", \\"978-0-13-110362-7\\", \\"Book C\\", 7) # Expected output: # { # \\"978-3-16-148410-0\\": {\\"title\\": \\"Book A\\", \\"count\\": 10}, # \\"978-1-86197-876-9\\": {\\"title\\": \\"Book B\\", \\"count\\": 5}, # \\"978-0-13-110362-7\\": {\\"title\\": \\"Book C\\", \\"count\\": 7} # } # Sell copies of an existing book updated_inventory = update_inventory(updated_inventory, \\"sell\\", \\"978-3-16-148410-0\\", count=2) # Expected output: # { # \\"978-3-16-148410-0\\": {\\"title\\": \\"Book A\\", \\"count\\": 8}, # \\"978-1-86197-876-9\\": {\\"title\\": \\"Book B\\", \\"count\\": 5}, # \\"978-0-13-110362-7\\": {\\"title\\": \\"Book C\\", \\"count\\": 7} # } # Try selling more copies than available updated_inventory = update_inventory(updated_inventory, \\"sell\\", \\"978-3-16-148410-0\\", count=10) # Expected output: # { # \\"978-3-16-148410-0\\": {\\"title\\": \\"Book A\\", \\"count\\": 8}, # \\"978-1-86197-876-9\\": {\\"title\\": \\"Book B\\", \\"count\\": 5}, # \\"978-0-13-110362-7\\": {\\"title\\": \\"Book C\\", \\"count\\": 7} # } ```","solution":"def update_inventory(inventory, action, isbn, title=\\"\\", count=0): Updates the inventory of the bookstore. Parameters: inventory (dict): The inventory of the bookstore. action (str): The action to perform (\\"add\\" or \\"sell\\"). isbn (str): The ISBN of the book. title (str, optional): The title of the book (only used for the \\"add\\" action). count (int, optional): The number of copies to add or sell (must be a positive integer). Returns: dict: The updated inventory. if action not in {\\"add\\", \\"sell\\"} or count < 0: return inventory if action == \\"add\\": if isbn in inventory: inventory[isbn][\\"count\\"] += count else: inventory[isbn] = {\\"title\\": title, \\"count\\": count} elif action == \\"sell\\": if isbn in inventory and inventory[isbn][\\"count\\"] >= count: inventory[isbn][\\"count\\"] -= count return inventory"},{"question":"Write a function named `apply_discount` that calculates the discounted prices for a list of products. The function should accept two arguments: a list of tuples where each tuple contains the product name and its price, and a discount percentage (as a float between 0 and 100). The function should return a new list of tuples with each tuple containing the product name and the discounted price rounded to 2 decimal places. The function should: 1. Iterate over the list of product tuples. 2. Apply the given discount percentage to each product\'s price. 3. Return a new list of tuples with the product names and their discounted prices. To summarize: - Define the function `apply_discount`. - Iterate through the list of product tuples. - Use the formula discounted price = original price - (original price * discount / 100). - Round the discounted prices to 2 decimal places. - Return a list of tuples with the same product names and the new discounted prices. Here is a template for the function: ```python def apply_discount(products, discount): # Initialize an empty list to store discounted prices discounted_products = [] # Iterate over the list of products for product, price in products: # Calculate the discounted price discounted_price = price - (price * discount / 100) # Round the discounted price to 2 decimal places discounted_price = round(discounted_price, 2) # Append the product with its discounted price to the new list discounted_products.append((product, discounted_price)) return discounted_products ``` Example usage: ```python items = [(\\"laptop\\", 1500.00), (\\"smartphone\\", 800.00), (\\"tablet\\", 300.00)] discount = 10 # 10% discount print(apply_discount(items, discount)) # Output should be: [(\'laptop\', 1350.0), (\'smartphone\', 720.0), (\'tablet\', 270.0)] ```","solution":"def apply_discount(products, discount): Calculate the discounted prices for a list of products. Parameters: products (list of tuples): A list where each tuple contains a product name and its price. discount (float): The discount percentage to be applied. Returns: list of tuples: A new list of tuples with each tuple containing the product name and the discounted price rounded to 2 decimal places. discounted_products = [] for product, price in products: discounted_price = price - (price * discount / 100) discounted_price = round(discounted_price, 2) discounted_products.append((product, discounted_price)) return discounted_products"},{"question":"In this problem, you are tasked with writing a Python function that processes user activity logs to identify and analyze trends over specified periods. You will be provided with information about various users and their activity logs, including timestamps and activities performed. Your task is to create a function called `activity_trends` that processes this data to analyze user activity trends in chunks of a given period (e.g., daily, weekly), aggregate the results, and store them in a specified format. Here is a more detailed breakdown of the steps: 1. You will iterate through a dictionary called `user_logs` that contains information about user activities. 2. For each user, you will generate a list of activities with timestamps. 3. Divide the list of activities into chunks based on the given period (e.g., daily, weekly). 4. For each chunk: - Iterate through each activity in the period. - Count the occurrences of each activity type. - Aggregate the results to identify trends over the specified period. 5. Finally, save the results in a specified format (e.g., as a JSON file). Here is an example of what the `user_logs` dictionary might look like: ```python user_logs = { \'user1\': [ {\'timestamp\': \'2023-01-01 08:00:00\', \'activity\': \'login\'}, {\'timestamp\': \'2023-01-01 09:00:00\', \'activity\': \'view_page\'}, {\'timestamp\': \'2023-01-02 08:00:00\', \'activity\': \'logout\'}, // more entries ], \'user2\': [ {\'timestamp\': \'2023-01-01 10:00:00\', \'activity\': \'login\'}, {\'timestamp\': \'2023-01-01 11:00:00\', \'activity\': \'view_page\'}, {\'timestamp\': \'2023-01-02 10:00:00\', \'activity\': \'logout\'}, // more entries ] } ``` You should ensure the following: - Use the `datetime` module to handle and parse timestamps. - Organize the code into a function named `activity_trends(period)`. - The function should properly handle and process the activity data as described. - Save the results in the specified format (e.g., JSON) using the `json` module. Here\'s a skeleton function outline for reference: ```python import json from datetime import datetime from collections import defaultdict def activity_trends(period): results = defaultdict(lambda: defaultdict(int)) # Process the logs and aggregate results <your code here> # Save the results with open(\'activity_trends.json\', \'w\') as f: json.dump(results, f, indent=4) return results ```","solution":"import json from datetime import datetime, timedelta from collections import defaultdict def parse_timestamp(timestamp): return datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') def chunk_activities_by_period(activities, period): activities.sort(key=lambda x: x[\'timestamp\']) chunked = defaultdict(list) current_period_start = activities[0][\'timestamp\'] current_period_end = current_period_start + timedelta(days=period) for activity in activities: if activity[\'timestamp\'] >= current_period_end: current_period_start = activity[\'timestamp\'] current_period_end = current_period_start + timedelta(days=period) chunked[current_period_start].append(activity) return chunked def activity_trends(user_logs, period): results = defaultdict(lambda: defaultdict(int)) # Process the logs and aggregate results for user, logs in user_logs.items(): parsed_logs = [{\'timestamp\': parse_timestamp(log[\'timestamp\']), \'activity\': log[\'activity\']} for log in logs] for period_start, activities in chunk_activities_by_period(parsed_logs, period).items(): period_label = period_start.strftime(\'%Y-%m-%d\') activity_counts = defaultdict(int) for activity in activities: activity_counts[activity[\'activity\']] += 1 results[user][period_label] = dict(activity_counts) # Save the results with open(\'activity_trends.json\', \'w\') as f: json.dump(results, f, indent=4) return results"},{"question":"You are tasked with creating a function that analyzes transaction data and identifies fraudulent transactions based on certain criteria. Your function will take in a list of transaction records and a set of rules to flag potential frauds, and then it will output these flagged transactions. Your primary objective is to implement a function called `identify_fraudulent_transactions`. This function will perform the following steps: 1. Parse the transaction data and rules. 2. Apply the given rules to identify transactions that meet the fraud criteria. 3. Construct a list of these flagged transactions. The provided function outline is as follows: ```python def identify_fraudulent_transactions(transactions, rules): Identifies fraudulent transactions based on criteria provided and returns a list of flagged transactions. Parameters: - transactions (list of dict): List of transaction records, where each record is represented as a dictionary. - rules (dict): Dictionary where keys are the types of fraud checks and values are corresponding thresholds or patterns. Returns: - list of dict: List of flagged transactions that meet any of the fraud criteria specified in the rules. ``` Here\'s some important context that your function should address: - Transactions are provided as a list of dictionaries, where each dictionary contains keys like `id`, `amount`, `currency`, `location`, and `timestamp`. - Rules are provided as a dictionary. For example, rules may specify a maximum transaction amount, restricted currencies, or flagged locations. - The `amount` field should be compared to a maximum threshold if specified in the rules. - The `currency` field should be checked against a list of restricted currencies if specified in the rules. - The `location` field should be checked against a list of flagged locations if specified in the rules. **Example Usage:** ```python transactions = [ {\\"id\\": 1, \\"amount\\": 5000, \\"currency\\": \\"USD\\", \\"location\\": \\"NY\\", \\"timestamp\\": \\"2023-01-01 12:00:00\\"}, {\\"id\\": 2, \\"amount\\": 300, \\"currency\\": \\"EUR\\", \\"location\\": \\"TX\\", \\"timestamp\\": \\"2023-01-02 14:30:00\\"}, {\\"id\\": 3, \\"amount\\": 10000, \\"currency\\": \\"USD\\", \\"location\\": \\"CA\\", \\"timestamp\\": \\"2023-01-03 09:45:00\\"}, ] rules = { \\"max_amount\\": 5000, \\"restricted_currencies\\": [\\"BTC\\", \\"ETH\\"], \\"flagged_locations\\": [\\"NY\\", \\"CA\\"] } identify_fraudulent_transactions(transactions, rules) ``` This should produce a list of flagged transactions similar to the following: ```python [ {\\"id\\": 1, \\"amount\\": 5000, \\"currency\\": \\"USD\\", \\"location\\": \\"NY\\", \\"timestamp\\": \\"2023-01-01 12:00:00\\"}, {\\"id\\": 3, \\"amount\\": 10000, \\"currency\\": \\"USD\\", \\"location\\": \\"CA\\", \\"timestamp\\": \\"2023-01-03 09:45:00\\"} ] ```","solution":"def identify_fraudulent_transactions(transactions, rules): Identifies fraudulent transactions based on criteria provided and returns a list of flagged transactions. Parameters: - transactions (list of dict): List of transaction records, where each record is represented as a dictionary. - rules (dict): Dictionary where keys are the types of fraud checks and values are corresponding thresholds or patterns. Returns: - list of dict: List of flagged transactions that meet any of the fraud criteria specified in the rules. flagged_transactions = [] for transaction in transactions: flag = False # Check max_amount rule if \\"max_amount\\" in rules and transaction[\\"amount\\"] > rules[\\"max_amount\\"]: flag = True # Check restricted_currencies rule if \\"restricted_currencies\\" in rules and transaction[\\"currency\\"] in rules[\\"restricted_currencies\\"]: flag = True # Check flagged_locations rule if \\"flagged_locations\\" in rules and transaction[\\"location\\"] in rules[\\"flagged_locations\\"]: flag = True if flag: flagged_transactions.append(transaction) return flagged_transactions"},{"question":"Implement a function that reads a CSV file and returns the data as a list of dictionaries. Each dictionary should represent a row in the CSV file, with keys as column headers and values as the corresponding cell entries. If the CSV file does not exist or cannot be read, the function should raise an appropriate exception. The function should start with: ``` import csv def read_csv_to_dict(file_path): ```","solution":"import csv def read_csv_to_dict(file_path): Reads a CSV file and returns the data as a list of dictionaries. Each dictionary represents a row in the CSV file, with keys as column headers and values as the corresponding cell entries. Parameters: file_path (str): The path to the CSV file. Returns: list: A list of dictionaries representing the rows in the CSV file. Raises: FileNotFoundError: If the CSV file does not exist. IOError: If the CSV file cannot be read. try: with open(file_path, mode=\'r\') as file: reader = csv.DictReader(file) return list(reader) except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") except IOError: raise IOError(f\\"The file {file_path} cannot be read.\\")"},{"question":"In this exercise, you will focus on implementing and utilizing the `KMeans` clustering algorithm from the `sklearn.cluster` module to group a set of data points into clusters. The objective is to create a function `perform_kmeans_clustering` that performs the following tasks: 1. Reads a CSV file containing the dataset. 2. Converts the data into a NumPy array. 3. Applies the KMeans algorithm to the dataset for a specified number of clusters. 4. Returns the coordinates of the cluster centers and the labels of the clusters for the given data points. The CSV file contains data points with multiple features, without any header. The function signature should be: ```python def perform_kmeans_clustering(file_path: str, num_clusters: int): ``` **Parameters:** - `file_path`: A string representing the path to the CSV file. - `num_clusters`: An integer representing the number of clusters to form. The function should return a tuple containing: - A NumPy array with the coordinates of the cluster centers. - A NumPy array with the cluster labels for each data point. **Hints:** - Use the `KMeans` class from `sklearn.cluster` to create and fit the model. - Use the `fit` method to perform clustering on the data. - Access `kmeans.cluster_centers_` to get the coordinates of the centers. - Access `kmeans.labels_` to get the labels of the clusters. Here is an example of how the dataset might look: ``` 1.0,2.3,3.1 4.5,5.6,7.8 ... ``` (Each row is a data point with multiple features.) **Example usage:** ```python centers, labels = perform_kmeans_clustering(\'data.csv\', 3) print(\\"Cluster Centers:\\", centers) print(\\"Labels:\\", labels) ```","solution":"import numpy as np import pandas as pd from sklearn.cluster import KMeans def perform_kmeans_clustering(file_path: str, num_clusters: int): Reads a CSV file containing the dataset, converts it into a NumPy array, applies the KMeans algorithm to the dataset for a specified number of clusters, and returns the coordinates of the cluster centers and the labels of the clusters. Parameters: file_path (str): Path to the CSV file containing data points. num_clusters (int): Number of clusters to form. Returns: tuple: A tuple containing: - A NumPy array with the coordinates of the cluster centers. - A NumPy array with the cluster labels for each data point. # Read the data from the CSV file data = pd.read_csv(file_path, header=None) # Convert the data to a NumPy array data_array = data.to_numpy() # Perform KMeans clustering kmeans = KMeans(n_clusters=num_clusters, random_state=42) kmeans.fit(data_array) # Get the cluster centers and labels centers = kmeans.cluster_centers_ labels = kmeans.labels_ return centers, labels"},{"question":"# Context: You are tasked with creating a function that takes a list of events and allocates them into specific time slots across multiple rooms, minimizing overlap and ensuring that no two events assigned to the same room overlap in their scheduled times. # Objective: You need to implement a function `schedule_events(events, slot_duration)` that allocates events into slots and rooms such that there is no overlap within a single room. # Details: 1. **Parameters:** - `events` (list of tuples): A list of tuples where each tuple consists of two integers representing the start and end times of an event, e.g., `(start, end)`. - `slot_duration` (int): The duration of a time slot in which an event can fit. 2. **Constraints:** - Events in the `events` list will not have overlapping times initially. - All event times are given in the same unit (e.g., minutes or hours). - The end time of an event must be greater than the start time. 3. **Behavior:** - You need to group events into time slots where each slot has a duration of `slot_duration`. - Allocate events to rooms such that no two events in the same room overlap. - Return a dictionary where the keys are room numbers (starting from 1) and the values are lists of event tuples (start and end times). # Function Signature: ```python def schedule_events(events: list, slot_duration: int) -> dict: ``` # Example: ```python events = [(0, 30), (5, 25), (40, 50), (45, 60)] slot_duration = 30 print(schedule_events(events, slot_duration)) # Output could be: {1: [(0, 30)], 2: [(5, 25), (40, 50)], 3: [(45, 60)]} ``` Ensure to provide complete, working code in Python that correctly implements this functionality, taking care to handle any potential edge cases.","solution":"def schedule_events(events, slot_duration): Allocates events into rooms ensuring no overlap in each room. Parameters: - events: list of tuples (start, end) - slot_duration: int, the duration of a time slot Returns: - dict with room numbers as keys and list of event tuples as values # Sort events based on start time events.sort(key=lambda x: x[0]) rooms = {} # Dictionary to hold events in each room room_end_times = [] # List to hold end times of the latest booked event in each room for event in events: start, end = event placed = False # Try to place the event in an existing room for i in range(len(room_end_times)): if start >= room_end_times[i]: rooms[i + 1].append(event) room_end_times[i] = end placed = True break # If event could not be placed in any existing room, create a new room if not placed: room_number = len(room_end_times) + 1 rooms[room_number] = [event] room_end_times.append(end) return rooms"},{"question":"In this problem, you are required to implement a function that processes a given list of integers and returns a list of integers where each element is replaced by the product of all other elements in the original list. You should not use division in your solution. Your task is to write a function named `product_of_others` that computes the desired list. The function should have the following signature: ```python def product_of_others(nums): Replaces each element in the input list with the product of all other elements. Parameters: nums : list of int List of integers for which to compute the product of other elements. Returns: list of int List where each element is the product of all other elements from the input list. ``` Function Description: - **Parameters**: - `nums`: A list of integers. - **Returns**: - A list of integers where each element is the product of all other elements in the given list. Implementation Requirements: 1. Initialize two lists `left_products` and `right_products` to store the cumulative products from the left and right sides respectively. 2. Compute the cumulative product from the left and store it in `left_products`. 3. Compute the cumulative product from the right and store it in `right_products`. 4. Construct the result list by multiplying corresponding elements from `left_products` and `right_products`. # Example Usage: ```python def product_of_others(nums): n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result # Example nums = [1, 2, 3, 4] output = product_of_others(nums) print(output) # Output should be [24, 12, 8, 6] ``` This example demonstrates the function `product_of_others` for the input list `[1, 2, 3, 4]`, transforming it to a list where each element is replaced by the product of all other elements, resulting in `[24, 12, 8, 6]`.","solution":"def product_of_others(nums): Replaces each element in the input list with the product of all other elements. Parameters: nums : list of int List of integers for which to compute the product of other elements. Returns: list of int List where each element is the product of all other elements from the input list. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"In this problem, you are required to process a text file containing a list of tasks and their statuses, and generate a summary report indicating the count of tasks by status. Your goal is to create a function `generate_task_summary()` that reads the text file, processes the data to count the number of tasks for each status, and then prints a summary report. The text file structure is as follows: - Each line contains information about a task separated by commas. - The second field (index 1) in each line contains the status of the task. You will need to: 1. Read the text file. 2. Count the number of tasks for each status using a dictionary. 3. Print the summary report in the specified format. Here is the file name you should use: `tasks.txt`. **Function Signature:** ```python def generate_task_summary(file_path: str) -> None: pass ``` **Example:** Assume `tasks.txt` contains the following lines: ```txt Task 1,Completed Task 2,In Progress Task 3,Not Started Task 4,Completed Task 5,Not Started ``` The summary report should indicate: ``` Status Summary: Completed: 2 tasks In Progress: 1 task Not Started: 2 tasks ``` **Note:** 1. Ensure that the summary is printed in the same format as shown in the example. 2. Consider the possibility of additional statuses that may not be listed in the example.","solution":"def generate_task_summary(file_path: str) -> None: task_counts = {} with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: parts = line.strip().split(\',\') if len(parts) >= 2: status = parts[1].strip() if status in task_counts: task_counts[status] += 1 else: task_counts[status] = 1 print(\\"Status Summary:\\") for status, count in task_counts.items(): task_or_tasks = \'tasks\' if count > 1 else \'task\' print(f\\"{status}: {count} {task_or_tasks}\\")"},{"question":"Implement a function `sort_complex_numbers(numbers)` that takes a list of complex numbers and returns a new list with the numbers sorted first by their magnitude (distance from the origin in the complex plane), and in case of ties, by their phase angle. The magnitude of a complex number `a + bj` is computed as `sqrt(a^2 + b^2)`. The phase angle is the counterclockwise angle that the complex number makes with the positive real axis, which can be calculated using `atan2(b, a)`. # Function Signature ```python import cmath def sort_complex_numbers(numbers): Sorts a list of complex numbers by magnitude and phase angle. :param numbers: List of complex numbers. :return: Sorted list of complex numbers. pass ``` **Constraints:** - The input list will only contain complex numbers. - The input list will have at least one complex number. **Example:** ```python numbers = [3 + 4j, 1 - 1j, -2 + 2j, 1 + 1j] sorted_numbers = sort_complex_numbers(numbers) print(\\"Sorted Complex Numbers:\\", sorted_numbers) ``` Expected Output: ```python Sorted Complex Numbers: [(1-1j), (1+1j), (-2+2j), (3+4j)] ```","solution":"import cmath def sort_complex_numbers(numbers): Sorts a list of complex numbers by magnitude and phase angle. :param numbers: List of complex numbers. :return: Sorted list of complex numbers. return sorted(numbers, key=lambda x: (abs(x), cmath.phase(x))) # Example usage numbers = [3 + 4j, 1 - 1j, -2 + 2j, 1 + 1j] sorted_numbers = sort_complex_numbers(numbers) print(\\"Sorted Complex Numbers:\\", sorted_numbers)"},{"question":"Background: You are given a list of strings where each string represents a binary number. Your task is to find the binary number (as a string) with the highest decimal value and return a list of indexes where this maximum binary number appears in the original list. Task: Write a function called `max_binary_indexes` which takes a list of binary strings (`binary_list`) as input and: 1. Converts each binary string to its decimal value. 2. Identifies the maximum decimal value. 3. Finds all the indexes where this maximum binary value appears in the original list. 4. Returns a list of these indexes. You can assume that the input list will contain at least one binary string. Function Signature: ```python def max_binary_indexes(binary_list: list[str]) -> list[int]: pass ``` Example: ```python binary_list = [\\"101\\", \\"110\\", \\"011\\", \\"110\\", \\"010\\"] indexes = max_binary_indexes(binary_list) print(indexes) # Output: [1, 3] ``` In this example: - The binary string \\"110\\" represents the highest decimal value. - The output is the list of indexes [1, 3], where \\"110\\" appears in the original list.","solution":"def max_binary_indexes(binary_list): Returns a list of indexes where the maximum binary number appears in the original list. # Convert binary strings to decimal values and find the max value decimal_values = [int(b, 2) for b in binary_list] max_value = max(decimal_values) # Find all the indexes where the maximum value appears max_indexes = [i for i, value in enumerate(decimal_values) if value == max_value] return max_indexes"},{"question":"You are tasked with writing a function named `word_frequency_counter` that takes a single parameter: `text`, which is a string. The purpose of this function is to analyze the text and return a dictionary with unique words as keys and their corresponding frequencies as values. Words should be considered case insensitive, meaning \\"Word\\" and \\"word\\" should be counted as the same. Your function should: 1. Split the input text into words. 2. Normalize the words to lower case. 3. Count the frequency of each word. 4. Return a dictionary with words as keys and their frequencies as values. The function signature is: ```python def word_frequency_counter(text: str) -> dict: pass ``` To illustrate, if the input `text` is \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\", the function should return a dictionary with the word frequencies: ```python { \'the\': 3, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2, \'was\': 1, \'not\': 1, \'amused\': 1 } ``` # Requirements - You should consider punctuation marks as part of the word separation. For example, \\"dog.\\" is different from \\"dog\\". - The function should handle any valid string input. - Words should be counted in a case insensitive manner. # Example Given the input: ```python \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" ``` The function `word_frequency_counter` should return: ```python { \'the\': 3, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2, \'was\': 1, \'not\': 1, \'amused\': 1 } ``` # Constraints - Assume that the input text is non-empty. - The function should be case insensitive, e.g., \\"Word\\" and \\"word\\" should be counted as the same word.","solution":"import re from collections import defaultdict def word_frequency_counter(text: str) -> dict: Analyzes the text and returns a dictionary with unique words as keys and their corresponding frequencies as values. Words should be considered case insensitive. # Use regular expression to split text into words words = re.findall(r\'bw+b\', text.lower()) # Create a defaultdict to store word frequencies word_count = defaultdict(int) # Count each word\'s frequency for word in words: word_count[word] += 1 # Convert defaultdict to a regular dict before returning return dict(word_count)"},{"question":"You are given a JSON file containing customer transaction data, which includes fields such as `customer_id`, `date`, `amount`, and `item`. The task is to write a function `aggregate_transactions` that takes the file path of the JSON file as input, processes the file, and returns a DataFrame that groups transactions by `customer_id` and `date`, summing up the transaction amounts for each group. The DataFrame should have `customer_id` and `date` as its index, and one column named `total_amount`. You are required to use the `pandas` and `json` libraries to accomplish this task. Your function should handle potential issues such as an empty input file gracefully by returning an empty DataFrame. # Function Signature ```python def aggregate_transactions(file_path: str) -> pd.DataFrame: ``` # Example Given a JSON file `transactions.json` with the following content: ```json [ {\\"customer_id\\": 1, \\"date\\": \\"2021-01-01\\", \\"amount\\": 100.50, \\"item\\": \\"item1\\"}, {\\"customer_id\\": 1, \\"date\\": \\"2021-01-01\\", \\"amount\\": 200.75, \\"item\\": \\"item2\\"}, {\\"customer_id\\": 2, \\"date\\": \\"2021-01-02\\", \\"amount\\": 300.20, \\"item\\": \\"item3\\"}, {\\"customer_id\\": 2, \\"date\\": \\"2021-01-03\\", \\"amount\\": 150.10, \\"item\\": \\"item4\\"} ] ``` Your function should return the following DataFrame: ``` total_amount customer_id date 1 2021-01-01 301.25 2 2021-01-02 300.20 2 2021-01-03 150.10 ``` # Requirements - Use the `pandas` and `json` libraries to read and process the JSON file. - Handle errors by returning an empty DataFrame for empty or corrupted files. - Use `customer_id` and `date` as indices and sum up the transaction amounts for each group. - The function should use pandas capabilities to group and aggregate data. # Hints - Use the `pd.read_json` function to read the JSON file. - Use `groupby` to group the data by `customer_id` and `date`. - Use `sum` to aggregate the transaction amounts. - Use `reset_index` to set indices correctly.","solution":"import pandas as pd import json def aggregate_transactions(file_path: str) -> pd.DataFrame: Processes a JSON file of customer transactions and returns a DataFrame that groups transactions by customer_id and date, summing up the transaction amounts for each group. Parameters: file_path (str): Path to the JSON file containing transaction data. Returns: pd.DataFrame: A DataFrame indexed by customer_id and date, with a column for total_amount. try: # Read JSON file with open(file_path, \'r\') as file: data = json.load(file) # Create DataFrame from data df = pd.DataFrame(data) if df.empty: return pd.DataFrame(columns=[\'customer_id\', \'date\', \'total_amount\']).set_index([\'customer_id\', \'date\']) # Group by customer_id and date, then sum transaction amounts aggregated_df = df.groupby([\'customer_id\', \'date\'])[\'amount\'].sum().reset_index() # Rename the summed column to \'total_amount\' aggregated_df = aggregated_df.rename(columns={\'amount\': \'total_amount\'}) # Set index aggregated_df = aggregated_df.set_index([\'customer_id\', \'date\']) return aggregated_df except Exception as e: # Return an empty DataFrame in case of any error return pd.DataFrame(columns=[\'customer_id\', \'date\', \'total_amount\']).set_index([\'customer_id\', \'date\'])"},{"question":"In this problem, you need to implement a function that analyzes stock market data to identify the best period to buy and sell for maximum profit. The function should process the input list of stock prices and determine the best day to buy and the best day to sell to achieve the highest possible profit. # Function Signature ```python def max_profit(prices: list) -> tuple: ``` # Parameters - `prices` (list): A list of integers representing the stock prices on each day. The length of the list is at least 2. # Returns - Returns a tuple (int, int, int) containing three integers: - The best day to buy (0-based index). - The best day to sell (0-based index). - The maximum profit possible. # Constraints - You must buy before you sell. - If no profit is possible, return (0, 0, 0). # Example Example 1 ```python prices = [7, 1, 5, 3, 6, 4] buy_day, sell_day, max_profit = max_profit(prices) print(buy_day, sell_day, max_profit) ``` **Output** ```plaintext 1 4 5 ``` Explanation Buy on day 1 (price = 1) and sell on day 4 (price = 6), profit = 6-1 = 5. Example 2 ```python prices = [7, 6, 4, 3, 1] buy_day, sell_day, max_profit = max_profit(prices) print(buy_day, sell_day, max_profit) ``` **Output** ```plaintext 0 0 0 ``` Explanation In this case, no profit is possible, so the best option is to not make any transactions. Therefore, the return value should be (0, 0, 0).","solution":"def max_profit(prices): if not prices or len(prices) < 2: return (0, 0, 0) min_price = prices[0] min_day = 0 max_profit = 0 buy_day = 0 sell_day = 0 for current_day in range(1, len(prices)): current_price = prices[current_day] # Check if the current day price - min price is the highest profit so far if current_price - min_price > max_profit: max_profit = current_price - min_price buy_day = min_day sell_day = current_day # Update the minimum price and corresponding day if current_price < min_price: min_price = current_price min_day = current_day return (buy_day, sell_day, max_profit)"},{"question":"Create a Python function that simulates the movement of a robot on a 2D grid. The grid is represented as a list of lists, where each inner list is a row of the grid. The robot can move up, down, left, or right, but it cannot move onto cells that are blocked (represented by the value `1`). The robot\'s initial position and the target position on the grid will be provided. The function should determine if the robot can reach the target position from the initial position and return a boolean. If the path exists, return `True`; otherwise, return `False`. You should write self-contained code starting with: ``` from collections import deque def can_robot_reach(grid, start, target): ```","solution":"from collections import deque def can_robot_reach(grid, start, target): Determine if the robot can reach the target position from the initial position on a 2D grid. Parameters: - grid (list of list of int): The 2D grid where `0` represents an empty cell and `1` represents a blocked cell. - start (tuple of int, int): The starting position (row, col) of the robot on the grid. - target (tuple of int, int): The target position (row, col) on the grid the robot should reach. Returns: - bool: True if the robot can reach the target position, False otherwise. rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def is_valid(r, c): return 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 start_row, start_col = start target_row, target_col = target if not is_valid(start_row, start_col) or not is_valid(target_row, target_col): return False queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == target: return True for dr, dc in directions: new_row, new_col = current[0] + dr, current[1] + dc if is_valid(new_row, new_col) and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col)) return False"},{"question":"Given a list of students with their respective ages, create a DataFrame that includes the students\' ages and assigns them to an age group: \'Child\' (0-12 years), \'Teen\' (13-17 years), \'Young Adult\' (18-25 years), \'Adult\' (26-64 years), and \'Senior\' (65+ years). Add a new column to the DataFrame for the age group of each student. The function should output: pandas.DataFrame: The DataFrame including the students\' ages and their assigned age group. You should write self-contained code starting with: ``` import pandas as pd def categorize_ages(students, ages): ```","solution":"import pandas as pd def categorize_ages(students, ages): Returns a DataFrame including the students\' ages and their assigned age group. Parameters: students (list of str): List of student names. ages (list of int): List of student ages. Returns: pandas.DataFrame: DataFrame with columns \'Student\', \'Age\', and \'Age Group\'. if len(students) != len(ages): raise ValueError(\'Length of students and ages lists must be equal.\') # Define the age groups def age_group(age): if age <= 12: return \'Child\' elif 13 <= age <= 17: return \'Teen\' elif 18 <= age <= 25: return \'Young Adult\' elif 26 <= age <= 64: return \'Adult\' else: return \'Senior\' # Create DataFrame data = {\'Student\': students, \'Age\': ages} df = pd.DataFrame(data) df[\'Age Group\'] = df[\'Age\'].apply(age_group) return df"},{"question":"You are provided a JSON file containing information about various books in a digital library. Each book entry consists of the title, author, genre, and publication year. The JSON filename is \'books.json\'. Your task is to write a function named `get_books_by_year` to: 1. Read the JSON file \'books.json\'. 2. Extract the data and store it in a list of dictionaries. 3. Organize the books by their publication years. 4. Create a dictionary where each key is a year and the associated value is a list of book titles published in that year. 5. Return this dictionary sorted by the publication year in ascending order. To accomplish this, you will need to use the json library functionalities, specifically `json.load`. # Function Signature ```python def get_books_by_year(json_file: str = \'books.json\') -> dict: ``` # Example Given a hypothetical `books.json`: ```json [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2015}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"genre\\": \\"Non-fiction\\", \\"year\\": 2015}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author C\\", \\"genre\\": \\"Fiction\\", \\"year\\": 2017}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author D\\", \\"genre\\": \\"Sci-Fi\\", \\"year\\": 2018} ] ``` Your function should create and return a dictionary similar to: ```python { 2015: [\'Book A\', \'Book B\'], 2017: [\'Book C\'], 2018: [\'Book D\'] } ``` Feel free to assume that the JSON file is correctly formatted and contains valid data.","solution":"import json from collections import defaultdict def get_books_by_year(json_file: str = \'books.json\') -> dict: with open(json_file, \'r\') as file: books = json.load(file) year_to_books = defaultdict(list) for book in books: year_to_books[book[\'year\']].append(book[\'title\']) return dict(sorted(year_to_books.items()))"},{"question":"In this exercise, you need to simulate a basic inventory management system for a warehouse. Your task is to create a class named `Inventory` that can manage products. Each product has a name and a quantity. The class should support adding new products, updating quantities, and retrieving the current inventory list. Specifically, you should implement: - `add_product(name: str, quantity: int)`: Adds a new product to the inventory with the given quantity. If the product already exists, it should update its quantity. - `update_quantity(name: str, quantity: int)`: Updates the quantity of an existing product. If the product does not exist, raise a `ValueError` with the message \\"Product does not exist\\". - `get_inventory() -> dict`: Returns the current inventory as a dictionary where the keys are product names and the values are quantities. # Class Definition ```python class Inventory: def __init__(self): # Initialize an empty inventory dictionary self.inventory = {} def add_product(self, name: str, quantity: int): # Add the product to the inventory or update its quantity def update_quantity(self, name: str, quantity: int): # Update the quantity of the existing product def get_inventory(self) -> dict: # Return the current inventory ``` # Example ```python inventory = Inventory() inventory.add_product(\\"apple\\", 10) inventory.add_product(\\"banana\\", 20) print(inventory.get_inventory()) # Output: {\\"apple\\": 10, \\"banana\\": 20} inventory.update_quantity(\\"apple\\", 5) print(inventory.get_inventory()) # Output: {\\"apple\\": 5, \\"banana\\": 20} inventory.add_product(\\"orange\\", 15) print(inventory.get_inventory()) # Output: {\\"apple\\": 5, \\"banana\\": 20, \\"orange\\": 15} try: inventory.update_quantity(\\"pear\\", 3) except ValueError as e: print(e) # Output: \\"Product does not exist\\" ``` # Notes - Ensure that adding and updating product quantities are documented properly. - Consider edge cases, such as updating a non-existing product\'s quantity.","solution":"class Inventory: def __init__(self): # Initialize an empty inventory dictionary self.inventory = {} def add_product(self, name: str, quantity: int): Adds a new product to the inventory with the given quantity. If the product already exists, it should update its quantity. :param name: Product name :param quantity: Quantity of the product if name in self.inventory: self.inventory[name] += quantity else: self.inventory[name] = quantity def update_quantity(self, name: str, quantity: int): Updates the quantity of an existing product. If the product does not exist, raise a ValueError. :param name: Product name :param quantity: New quantity of the product if name in self.inventory: self.inventory[name] = quantity else: raise ValueError(\\"Product does not exist\\") def get_inventory(self) -> dict: Returns the current inventory as a dictionary where the keys are product names and the values are quantities. :return: Dictionary of the current inventory return self.inventory"},{"question":"Write a function called `election_result_statistics` that processes a CSV file containing election results data and generates a summary report. Each row in the CSV file represents a candidate\'s results in a given precinct with the following columns: `candidate_name`, `precinct`, `votes`. Your task involves four main steps: 1. Read the CSV file into a pandas DataFrame. 2. Calculate the total number of votes for each candidate across all precincts. 3. Determine the candidate with the highest number of votes. 4. Identify the precinct with the highest voter turnout (i.e., the sum of votes for all candidates in that precinct). The function should return a dictionary with the following structure: - `total_votes`: A dictionary where keys are candidate names and values are their respective total votes. - `winner`: The name of the candidate with the highest number of votes. - `highest_turnout_precinct`: The name of the precinct with the highest voter turnout. Consider cases where there might be ties or missing data. Handle errors gracefully and ensure the data is valid. Function Signature: ```python def election_result_statistics(file_path: str) -> dict: ``` **Parameters:** - `file_path`: A string representing the file path to the CSV file containing the election results. **Returns:** - A dictionary with three keys: `total_votes`, `winner`, `highest_turnout_precinct`. Example: ```python results = election_result_statistics(\\"path/to/election_results.csv\\") print(results) ``` **Expected Output:** ```python { \\"total_votes\\": {\\"Alice\\": 2500, \\"Bob\\": 3000, \\"Charlie\\": 4000}, \\"winner\\": \\"Charlie\\", \\"highest_turnout_precinct\\": \\"Precinct 5\\" } ```","solution":"import pandas as pd def election_result_statistics(file_path: str) -> dict: # Step 1: Read the CSV file into a pandas DataFrame. try: df = pd.read_csv(file_path) except Exception as e: return {\\"error\\": str(e)} if \'candidate_name\' not in df.columns or \'precinct\' not in df.columns or \'votes\' not in df.columns: return {\\"error\\": \\"Invalid CSV format\\"} # Step 2: Calculate the total number of votes for each candidate across all precincts. total_votes = df.groupby(\'candidate_name\')[\'votes\'].sum().to_dict() # Step 3: Determine the candidate with the highest number of votes. if total_votes: winner = max(total_votes, key=total_votes.get) else: winner = None # Step 4: Identify the precinct with the highest voter turnout. voter_turnout = df.groupby(\'precinct\')[\'votes\'].sum().to_dict() if voter_turnout: highest_turnout_precinct = max(voter_turnout, key=voter_turnout.get) else: highest_turnout_precinct = None return { \\"total_votes\\": total_votes, \\"winner\\": winner, \\"highest_turnout_precinct\\": highest_turnout_precinct }"},{"question":"In this problem, you will practice working with dictionaries and lists in Python to perform data manipulation involving student scores. Specifically, you will create a function that takes a list of student scores and returns a dictionary indicating the ranking of each student based on their score. You are required to write a function named `rank_students(scores)`. This function should: 1. Accept a list of tuples where each tuple contains a student\'s name as a string and their corresponding score as an integer. 2. Determine the ranking of each student based on their score such that the student with the highest score receives the highest rank. 3. Return a dictionary where the keys are student names and the values are their ranks. # Specific Requirements 1. Students with the same score should have the same rank. 2. The next rank after identical scores should be adjusted accordingly. For example, if two students are tied for the 1st rank, the following rank should be 3rd. 3. Ensure that the scores are processed in descending order to determine the ranks. # Function Signature ```python def rank_students(scores: list) -> dict: pass ``` # Example Usage ```python student_scores = [(\\"Alice\\", 85), (\\"Bob\\", 90), (\\"Charlie\\", 85), (\\"David\\", 92)] ranks = rank_students(student_scores) print(ranks) ``` In this example, the dictionary returned should reflect the following ranks: ``` { \\"David\\": 1, \\"Bob\\": 2, \\"Alice\\": 3, \\"Charlie\\": 3 } ``` # Hints - Sort the list of scores in descending order while maintaining the association with student names. - Keep track of the previous score and its rank to assign ranks correctly for students with the same score. - Use a loop to iterate through the sorted list and assign ranks accordingly. This problem helps you practice data manipulation and the use of data structures like lists and dictionaries to store and process information efficiently.","solution":"def rank_students(scores): Rank students based on their scores. Args: scores (list of tuples): A list where each tuple contains a student\'s name and their score (name, score). Returns: dict: A dictionary where the keys are student names and the values are their ranks. # Sort the scores in descending order (high score first) sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True) # Dictionary to hold the rank of each student ranks = {} # Previous score and rank initialization prev_score = None rank = 0 current_rank = 0 # Iterate through the sorted scores to assign ranks for i, (student, score) in enumerate(sorted_scores): # Only increment rank if the previous score is different if prev_score is None or score != prev_score: rank = current_rank + 1 ranks[student] = rank prev_score = score current_rank += 1 return ranks"},{"question":"You have been given a function prototype that processes a list of strings, each representing a date in the \\"YYYY-MM-DD\\" format, and returns a list of strings where each date is converted to the full day of the week. If the date string is invalid (e.g., containing letters or wrong format), it should be set to `Invalid` in the output list. You are required to complete this function using the `datetime` library in Python. **Function Name:** `day_of_week` **Input:** 1. `dates` (List of strings): A list of date strings in the format \\"YYYY-MM-DD\\". If an element is invalid, it needs to be handled appropriately. **Output:** - A list of strings where each valid date string is converted to the corresponding day of the week (e.g., \\"Monday\\"). Invalid dates should be represented as `Invalid`. **Requirements:** - You must use the `datetime` library to parse the date strings and retrieve the day of the week. **Example:** ```python input_dates = [\\"2023-10-06\\", \\"2023-02-29\\", \\"hello\\", \\"2022-12-25\\"] output_days = [\\"Friday\\", \\"Invalid\\", \\"Invalid\\", \\"Sunday\\"] ``` **Detailed Description:** 1. Iterate through each element of the input list. 2. Attempt to parse each date string using the `datetime.strptime` function with the format \\"YYYY-MM-DD\\". 3. If the date is valid, use the `datetime.strftime` or `datetime.weekday` method to get the day of the week. 4. Convert the numeric day of the week to its corresponding name (\\"Monday\\", \\"Tuesday\\", etc.). 5. If the date string is invalid, catch the exception and set the output for that date to `Invalid`. You are required to implement this function to meet the specified behavior and utilize the `datetime` library.","solution":"from datetime import datetime def day_of_week(dates): Converts a list of date strings to the corresponding day of the week. Args: dates (list of str): A list of date strings in the format \\"YYYY-MM-DD\\". Returns: list of str: A list where each valid date string is converted to the corresponding day of the week, and invalid date strings are set to \\"Invalid\\". result = [] for date_str in dates: try: date = datetime.strptime(date_str, \\"%Y-%m-%d\\") day_name = date.strftime(\\"%A\\") result.append(day_name) except ValueError: result.append(\\"Invalid\\") return result"},{"question":"You are tasked with writing a Python function `merge_sorted_arrays(arrays)` that takes as input a list of sorted lists and returns a single merged sorted list. The function should efficiently merge the sorted lists into one sorted list. You are given: - `arrays`: a list of `n` sorted lists, each containing `m` integers. Your task is to: 1. Merge the sorted lists using an efficient algorithm. 2. Return a single list containing all elements in sorted order. # Constraints - The total number of elements across all lists <= 10^6 The function should have the following signature: ```python def merge_sorted_arrays(arrays): # Your implementation here ``` **Example:** If you call the function with: ```python arrays = [[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]] ``` The function should return: ``` [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ``` Use an efficient algorithm to ensure the function performs well even when the number of elements is large.","solution":"import heapq def merge_sorted_arrays(arrays): Merges a list of sorted lists into a single sorted list. Parameters: arrays (List[List[int]]): A list of n sorted lists, each containing m integers. Returns: List[int]: A single merged sorted list. merged_list = [] min_heap = [] # Initialize the heap with the first element from each array for i, array in enumerate(arrays): if array: # Ensure the array is not empty heapq.heappush(min_heap, (array[0], i, 0)) while min_heap: value, list_index, element_index = heapq.heappop(min_heap) merged_list.append(value) # If there is a next element in the same array, push it to the heap if element_index + 1 < len(arrays[list_index]): next_value = arrays[list_index][element_index + 1] heapq.heappush(min_heap, (next_value, list_index, element_index + 1)) return merged_list"},{"question":"You are tasked with creating a function `kth_smallest_element` that finds the k-th smallest element in a given list of integers. The function should handle both sorted and unsorted lists effectively. You are allowed to use built-in sorting functions if necessary, but your solution should be efficient, aiming for a complexity of O(n log n) or better. Your implementation should provide the following features: - Handle cases where the list may have duplications. - Check for valid k values (k should be between 1 and the length of the list). - Return the k-th smallest element if valid; otherwise, return `None`. The signature of the function should be: ```python def kth_smallest_element(arr, k): Parameters: arr (list of int): A list of integers from which to find the k-th smallest element. k (int): The index (1-based) of the smallest element to find. Returns: int or None: The k-th smallest element in the list, or None if k is out of bounds. pass ```","solution":"def kth_smallest_element(arr, k): Returns the k-th smallest element in the list `arr`. Parameters: arr (list of int): A list of integers from which to find the k-th smallest element. k (int): The index (1-based) of the smallest element to find. Returns: int or None: The k-th smallest element in the list, or None if k is out of bounds. if k < 1 or k > len(arr): return None arr_sorted = sorted(arr) return arr_sorted[k-1] if 0 < k <= len(arr) else None"},{"question":"You are required to implement a function named `invert_dict`, which inverts a given dictionary, swapping keys and values. The function should return a new dictionary where the original values are now keys and the original keys are the corresponding values. If the original dictionary has duplicate values, the resulting dictionary should contain lists of keys that correspond to each unique original value. Your function should: 1. Iterate over the provided dictionary. 2. Check if a value already exists as a key in the new dictionary. 3. If it does, append the original key to the list associated with this value. 4. If it does not, create a new entry in the new dictionary with this value as the key and the original key as an element in a list. **Function Signature:** ```python def invert_dict(d: Dict[Any, Any]) -> Dict[Any, List[Any]]: ``` **Input:** - `d`: A dictionary with keys and values of any hashable type. **Output:** - A dictionary where original values are keys and lists of original keys are values. # Example: ```python d = {\'a\': 1, \'b\': 2, \'c\': 1} output = invert_dict(d) print(output) # Example Output: {1: [\'a\', \'c\'], 2: [\'b\']} ``` # Constraints: - You must handle dictionaries with values that are not unique. - The input dictionary keys and values can be of any hashable type.","solution":"def invert_dict(d): Inverts a dictionary by swapping keys and values, handling duplicate values by creating a list of keys. Args: d (dict): The dictionary to invert. Returns: dict: Inverted dictionary where values are now keys and the corresponding keys are in lists as values. inverted = {} for key, value in d.items(): if value in inverted: inverted[value].append(key) else: inverted[value] = [key] return inverted"},{"question":"Create a function named `find_missing_numbers` that takes in a list of integers ranging from 1 to n (inclusive) but with some numbers missing from the list. The function should return a list of the missing numbers in ascending order. Your function should have the following signature: ```python def find_missing_numbers(nums, n): ``` For example, calling `find_missing_numbers([3, 7, 1, 2, 8, 4, 5], 10)` should return `[6, 9, 10]`. **Requirements**: 1. The function should be efficient with both time and space complexity. 2. The input list can have duplicates, but the function should handle duplicates appropriately. 3. The function should return an empty list if no numbers are missing.","solution":"def find_missing_numbers(nums, n): Finds the missing numbers in an array ranging from 1 to n. Parameters: nums (list of int): The list of integers. n (int): The maximum number that should be present in the list. Returns: list of int: A list of missing integers in ascending order. # Create a set of all numbers from 1 to n full_set = set(range(1, n + 1)) # Convert the input list to a set to remove duplicates nums_set = set(nums) # Find the difference between the full set and the nums set missing_numbers = sorted(list(full_set - nums_set)) return missing_numbers"},{"question":"Given a list of integers, write a function that finds the longest subsequence where the difference between consecutive elements is either 1 or -1. Return the longest subsequence as a list. If there are multiple subsequences of the same length, return any one of them. You should write a self-contained code starting with: ``` def longest_subsequence(arr): ```","solution":"def longest_subsequence(arr): if not arr: return [] longest_sub = [] current_sub = [arr[0]] for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_sub.append(arr[i]) else: if len(current_sub) > len(longest_sub): longest_sub = current_sub current_sub = [arr[i]] if len(current_sub) > len(longest_sub): longest_sub = current_sub return longest_sub"},{"question":"** You are provided with a CSV file `city_temperature.csv` that contains temperature data for various cities around the world over different days. Your task is to write a Python function `average_temperature(city, start_date, end_date)` that calculates the average temperature for a specified city between two given dates (inclusive). - The `city_temperature.csv` file has the structure: ```plain City,Date,Temperature Los Angeles,2023-01-01,15.2 Los Angeles,2023-01-02,14.6 New York,2023-01-01,3.5 ... ``` **Requirements:** 1. Use the `pandas` library to: - Read the contents of the CSV file. - Filter the data for the specified city and date range. - Calculate the average temperature for the given period. 2. The function should be named `average_temperature` and should take three parameters: - `city` (a string representing the city name), - `start_date` (a string in `YYYY-MM-DD` format representing the start date), - `end_date` (a string in `YYYY-MM-DD` format representing the end date). 3. Ensure the function returns a float representing the average temperature of the specified city between the given dates. If there is no data for the specified period, return `None`. 4. Raise an appropriate error if the specified city is not found in the dataset. Your function signature should be: ```python def average_temperature(city: str, start_date: str, end_date: str) -> float: ... ``` **","solution":"import pandas as pd def average_temperature(city: str, start_date: str, end_date: str) -> float: Calculates the average temperature for a specified city between two given dates (inclusive). :param city: The name of the city. :param start_date: The start date in YYYY-MM-DD format. :param end_date: The end date in YYYY-MM-DD format. :return: The average temperature as a float. Returns None if there is no data for the specified period. # Read the contents of the CSV file df = pd.read_csv(\'city_temperature.csv\') # Filter the data for the specified city city_data = df[df[\'City\'] == city] if city_data.empty: raise ValueError(f\\"The city \'{city}\' was not found in the dataset.\\") # Further filter the data for the specified date range date_filtered_data = city_data[ (city_data[\'Date\'] >= start_date) & (city_data[\'Date\'] <= end_date) ] if date_filtered_data.empty: return None # Calculate the average temperature average_temp = date_filtered_data[\'Temperature\'].mean() return average_temp"},{"question":"You are required to implement a function that simulates the trajectory of a projectile launched at a specified angle and initial velocity. The function must use basic physics equations to calculate the position of the projectile at regular time intervals until it hits the ground (y=0). Function Signature: ```python def simulate_projectile_motion(angle: float, velocity: float, interval: float) -> list: Simulates the projectile motion launched at a given angle and velocity. Parameters ---------- angle : float The launch angle in degrees velocity : float The initial velocity of the projectile interval : float The time interval between each position calculation Returns ------- trajectory : list of tuples A list of (x, y, t) tuples representing the position and time of the projectile until it hits the ground ``` # Requirements: 1. **Input**: - `angle` - a float representing the launch angle in degrees. - `velocity` - a float denoting the initial launch speed. - `interval` - a float specifying the time duration between each computed position. 2. **Output**: - `trajectory` - a list of tuples where each tuple contains the x-coordinate, y-coordinate, and the time at which that position is recorded. The simulation ends when the projectile reaches the ground level (y <= 0). 3. **Specific Instructions**: - Convert the launch angle from degrees to radians. - Use the equations of motion to calculate the position of the projectile: - ( x = v_0 cos(theta) cdot t ) - ( y = v_0 sin(theta) cdot t - frac{1}{2}gt^2 ) - ( g ) is the acceleration due to gravity, approximately 9.81 m/s². - Append the (x, y, t) tuple to the trajectory list for each time step until the projectile hits the ground. 4. **Example**: ```python angle = 45.0 velocity = 20.0 interval = 0.1 trajectory = simulate_projectile_motion(angle, velocity, interval) ``` This function will help visualize the flight path of a projectile, and the test of your code will ensure it properly calculates the projectile\'s position at regular time steps based on basic physics principles.","solution":"import math def simulate_projectile_motion(angle: float, velocity: float, interval: float) -> list: Simulates the projectile motion launched at a given angle and velocity. Parameters ---------- angle : float The launch angle in degrees velocity : float The initial velocity of the projectile interval : float The time interval between each position calculation Returns ------- trajectory : list of tuples A list of (x, y, t) tuples representing the position and time of the projectile until it hits the ground g = 9.81 # acceleration due to gravity in m/s^2 angle_rad = math.radians(angle) # convert angle to radians # initialize the projectile\'s positions and time x, y, t = 0, 0, 0 # calculate initial velocity components vx = velocity * math.cos(angle_rad) vy = velocity * math.sin(angle_rad) trajectory = [] while y >= 0: x = vx * t y = vy * t - 0.5 * g * t**2 if y >= 0: trajectory.append((x, y, t)) t += interval return trajectory"},{"question":"You are required to write a function named `filter_and_sort` that filters a list of integers by removing any negative numbers, and then sorts the remaining numbers in ascending order. The function should take a list of integers as input and return a new list of non-negative integers sorted in ascending order. **Requirements:** - You must use list comprehensions to implement the filtering and sorting logic. - The input list will be named `numbers` and will contain integer values, which can be either positive or negative. **Function Signature:** ```python def filter_and_sort(numbers: List[int]) -> List[int]: pass ``` **Example:** ```python numbers = [3, -1, 4, -2, 5, -3] print(filter_and_sort(numbers)) # Output: [3, 4, 5] ``` **Notes:** - Ensure that the function handles an empty list correctly by returning an empty list. - The function should not modify the original list `numbers`.","solution":"from typing import List def filter_and_sort(numbers: List[int]) -> List[int]: Filters out negative numbers and returns the remaining numbers sorted in ascending order. Parameters: numbers (List[int]): A list of integers, which can be positive or negative. Returns: List[int]: A new list of non-negative integers sorted in ascending order. return sorted([num for num in numbers if num >= 0])"},{"question":"Implement a function that takes a list of integers and returns a list of lists, where each inner list contains elements that add up to a given target sum. The function should use a backtracking approach to find all possible combinations. Raise a ValueError if the input list is empty. The function should output: List[List[int]]: List of lists where each inner list sums up to the target. You should write self-contained code starting with: ``` def task_func(nums, target): ```","solution":"def task_func(nums, target): Returns a list of lists where each inner list sums up to the target sum using a backtracking approach. Raises a ValueError if the input list is empty or target is not defined. if not nums: raise ValueError(\\"Input list cannot be empty\\") def backtrack(start, path, target): if target == 0: result.append(list(path)) return for i in range(start, len(nums)): if nums[i] > target: continue path.append(nums[i]) backtrack(i, path, target - nums[i]) path.pop() result = [] nums.sort() backtrack(0, [], target) return result"},{"question":"You are asked to create a function that simulates a game of rock-paper-scissors, extended to 5 possible moves and 5 possible outcomes. This function, `extended_rock_paper_scissors(player_move)`, aims to enhance your understanding of conditional structures and lists in Python. Here is how the function should behave: - **Parameters:** - `player_move` (str): A string representing the move chosen by the player. Possible values are \'rock\', \'paper\', \'scissors\', \'lizard\', \'spock\'. - **Rules:** - There are 5 possible moves: [\'rock\', \'paper\', \'scissors\', \'lizard\', \'spock\']. - Each move has specific rules for winning or losing against the other moves: - Rock crushes Scissors and crushes Lizard. - Paper covers Rock and disproves Spock. - Scissors cuts Paper and decapitates Lizard. - Lizard eats Paper and poisons Spock. - Spock vaporizes Rock and smashes Scissors. - The game outcomes are \'Win\', \'Lose\', and \'Tie\': - If the player\'s move beats the computer\'s move, return \'Win\'. - If the player\'s move is beaten by the computer\'s move, return \'Lose\'. - If the player\'s move is the same as the computer\'s move, return \'Tie\'. - **Return:** - A tuple where the first element is the computer\'s randomly chosen move and the second element is the game\'s outcome represented as a string indicating \'Win\', \'Lose\', or \'Tie\'. - **Example Function Call:** ``` move, outcome = extended_rock_paper_scissors(\'rock\') ``` In this task, you must use the `random.choice` method from the `random` library to determine the computer\'s move. Your function should account for all possible matchups between the player\'s move and the computer\'s move to determine the game\'s outcome correctly.","solution":"import random def extended_rock_paper_scissors(player_move): moves = [\'rock\', \'paper\', \'scissors\', \'lizard\', \'spock\'] if player_move not in moves: raise ValueError(\\"Invalid move. Please choose from \'rock\', \'paper\', \'scissors\', \'lizard\', \'spock\'.\\") computer_move = random.choice(moves) win_conditions = { \'rock\': [\'scissors\', \'lizard\'], \'paper\': [\'rock\', \'spock\'], \'scissors\': [\'paper\', \'lizard\'], \'lizard\': [\'paper\', \'spock\'], \'spock\': [\'rock\', \'scissors\'] } if player_move == computer_move: outcome = \'Tie\' elif computer_move in win_conditions[player_move]: outcome = \'Win\' else: outcome = \'Lose\' return computer_move, outcome"},{"question":"You are asked to implement a function called `simulate_temperature_fluctuations` that will simulate and visualize temperature fluctuations over a given period. This function should generate a temperature profile for each day of the simulated period, apply corrections to ensure temperatures fall within realistic boundaries, and visualize the temperature fluctuations using a line plot. Your function should utilize `numpy` and `matplotlib.pyplot` libraries. # Function Signature ```python def simulate_temperature_fluctuations(days: int, base_temp: float) -> tuple: pass ``` # Parameters - `days` (int): The number of days to simulate. - `base_temp` (float): The average base temperature for the simulation. # Returns The function should return a tuple of two lists. The first list contains the days, and the second list contains the corresponding temperatures after applying corrections. The temperatures must be visualized using a line plot before returning the lists. # Instructions 1. Generate `days` number of temperature readings based on `base_temp` using a normal distribution with slight variations to simulate daily fluctuations. 2. Apply corrections to ensure no temperature is below -30°C or above 50°C. Any temperatures outside these bounds should be adjusted to the nearest boundary. 3. Create a list of days from 1 to `days` and the corresponding temperatures. 4. Visualize the temperatures using a line plot with days on the x-axis and temperatures on the y-axis. 5. Return a tuple of the list of days and the list of corrected temperatures. # Example Usage ```python days = 30 base_temp = 20 days_list, temp_list = simulate_temperature_fluctuations(days, base_temp) ``` # Libraries You are required to use `numpy` for generating random numbers and `matplotlib.pyplot.plot` for visualization. The `matplotlib.pyplot.plot` function should be used to display the temperature fluctuations over the specified period. ```python import numpy as np import matplotlib.pyplot as plt def simulate_temperature_fluctuations(days: int, base_temp: float) -> tuple: # Generate temperatures based on normal distribution centered around base_temp temperatures = np.random.normal(base_temp, 5, days) # Apply corrections to ensure realistic temperature ranges temperatures = np.clip(temperatures, -30, 50) # Generate day list day_list = list(range(1, days + 1)) # Plot temperatures plt.plot(day_list, temperatures, marker=\'o\') plt.title(f\'Temperature Fluctuations over {days} Days\') plt.xlabel(\'Day\') plt.ylabel(\'Temperature (°C)\') plt.grid(True) plt.show() return day_list, temperatures.tolist() # Example usage days = 30 base_temp = 20 days_list, temp_list = simulate_temperature_fluctuations(days, base_temp) ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_temperature_fluctuations(days: int, base_temp: float) -> tuple: Simulates temperature fluctuations over a given period and returns the list of days and the corresponding list of temperatures after applying corrections. Parameters: - days (int): The number of days to simulate. - base_temp (float): The average base temperature for the simulation. Returns: - tuple: A tuple containing two lists; the list of days and the list of corrected temperatures. # Generate temperatures based on normal distribution centered around base_temp temperatures = np.random.normal(base_temp, 5, days) # Apply corrections to ensure realistic temperature ranges temperatures = np.clip(temperatures, -30, 50) # Generate day list day_list = list(range(1, days + 1)) # Plot temperatures plt.plot(day_list, temperatures, marker=\'o\') plt.title(f\'Temperature Fluctuations over {days} Days\') plt.xlabel(\'Day\') plt.ylabel(\'Temperature (°C)\') plt.grid(True) plt.show() return day_list, temperatures.tolist()"},{"question":"You are tasked with creating a function `merge_and_count(arr1, arr2)` that takes in two sorted lists of integers, merges them into a single sorted list, and returns a tuple with the merged list and the number of elements in the merged list. Ensure the following: 1. The input lists `arr1` and `arr2` are non-decreasing sequences of integers. 2. The merged list should be a non-decreasing sequence as well. 3. Use the two-pointer technique to merge the lists efficiently. 4. Return a tuple where the first element is the merged list and the second element is the number of elements in the merged list. # Example Input ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] ``` # Example Call ```python merge_and_count(arr1, arr2) ``` # Example Output ```python ([1, 2, 3, 4, 5, 6, 7, 8], 8) ``` **Note:** Ensure that the function handles cases where one or both of the input lists are empty correctly.","solution":"def merge_and_count(arr1, arr2): Takes two sorted lists, merges them into a single sorted list, and returns the merged list and the count of elements in the merged list. merged_list = [] i = 0 j = 0 # Merge the two lists using two-pointer technique while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_list.append(arr1[i]) i += 1 else: merged_list.append(arr2[j]) j += 1 # Append remaining elements of arr1, if any while i < len(arr1): merged_list.append(arr1[i]) i += 1 # Append remaining elements of arr2, if any while j < len(arr2): merged_list.append(arr2[j]) j += 1 return (merged_list, len(merged_list))"},{"question":"You are asked to write a single function called `common_elements` that finds the common elements among multiple lists. The function will take a list of lists, where each inner list contains integers, and return a new list containing the integers that are present in every list. The returned list of common elements should be sorted in ascending order. The function should adhere to the following steps: 1. Retrieve all unique elements from the first list. 2. For each subsequent list, update the set of common elements by checking against it. 3. Return the sorted list of common elements. **Function Signature:** ```python def common_elements(lists: list) -> list: pass ``` **Example Usage:** ```python lists = [ [1, 2, 3, 4], [2, 4, 6, 8], [0, 2, 4, 10] ] print(common_elements(lists)) # Output: [2, 4] ``` **Requirements:** - Use Python\'s set operations to find common elements efficiently. - Your function should handle the case where the input list is empty, returning an empty list. **Notes:** - The input `lists` will always be a list of lists of integers and can be assumed to contain at least one list. - If there are no common elements among the lists, return an empty list.","solution":"def common_elements(lists: list) -> list: Finds the common elements among multiple lists. Args: lists (list of list of int): A list of lists, where each inner list contains integers. Returns: list of int: A new list containing the integers that are present in every list, sorted in ascending order. if not lists: return [] # Start with the set of the first list common_set = set(lists[0]) # Intersect with the sets of the subsequent lists for lst in lists[1:]: common_set.intersection_update(lst) # Return the sorted list of common elements return sorted(common_set)"},{"question":"In this task, you will be implementing a function to generate all possible permutations of a given string. The function should use recursion to explore each possible character arrangement, ensuring each character in the original string appears exactly once in each permutation. **Function Name**: `generate_permutations` **Requirements**: You are required to use recursion to solve this problem. Iterative approaches are not allowed. **Inputs**: - `input_string` (str): A string containing unique characters whose permutations need to be generated. **Steps**: 1. Implement a base case that returns a list with the input string when its length is 1. 2. For strings longer than 1 character, recursively find the permutations of the substring that excludes the first character. 3. For each permutation of the substring, insert the first character into every possible position and add the new permutation to the result list. 4. Return the list of all permutations of the input string. **Example Usage**: ``` permutations = generate_permutations(\\"abc\\") print(permutations) ``` **Expected Output**: A list of strings, each string being a unique permutation of the input string, e.g., `[\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\']`. The order of permutations in the output does not matter.","solution":"def generate_permutations(input_string): Generates all permutations of a given string using recursion. Args: input_string (str): The string for which to generate permutations. Returns: List[str]: A list of all permutations of the input string. # Base case: a single character string or empty string if len(input_string) <= 1: return [input_string] # Recursive case perms = [] # List to store all permutations for i in range(len(input_string)): # Remove the character at index i rest = input_string[:i] + input_string[i+1:] # Recursively find permutations of the rest of the string for perm in generate_permutations(rest): # Insert the character at index i into every possible position perms.append(input_string[i] + perm) return perms"},{"question":"You are given a string consisting of lowercase Latin letters and a specified character. Your task is to write a function that returns the shortest distance from each character in the string to the specified character. To achieve this, you can utilize a two-pass algorithm that involves iterating over the string from left to right and then from right to left to ensure the shortest distances are captured. Function Signature ```python def shortest_distance_to_char(s: str, c: str) -> List[int]: ``` **Arguments:** - `s`: A string to analyze (e.g., \\"loveleetcode\\"). - `c`: A single character for which distances are to be calculated (e.g., \\"e\\"). **Returns:** - A list of integers representing the shortest distance from each character in the string to the specified character `c`. **Example:** ```python s = \\"loveleetcode\\" c = \\"e\\" print(shortest_distance_to_char(s, c)) # Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] ``` **Note:** 1. The string `s` will have at least one instance of the character `c`. 2. The string length will not exceed 10000 characters. 3. Ensure the function efficiently handles the given constraints.","solution":"from typing import List def shortest_distance_to_char(s: str, c: str) -> List[int]: n = len(s) distances = [float(\'inf\')] * n # First pass: left to right prev_c_index = float(\'-inf\') for i in range(n): if s[i] == c: prev_c_index = i distances[i] = i - prev_c_index # Second pass: right to left prev_c_index = float(\'inf\') for i in range(n-1, -1, -1): if s[i] == c: prev_c_index = i distances[i] = min(distances[i], prev_c_index - i) return distances"},{"question":"You are tasked with creating a function that simulates a bookstore inventory system. The system receives a dataset containing information about the books in the inventory, including book titles, authors, publication years, genres, and the number of copies available. Your function should perform the following tasks: 1. Return a list of book titles sorted by the publication year in descending order. 2. Return the total number of copies across all books. 3. Return a dictionary where each key is a genre, and the value is a list of book titles within that genre sorted alphabetically. # Function Signature ```python def bookstore_inventory(books): Simulates a bookstore inventory system. :param books: list of dictionaries where each dictionary contains information about a book. Each dictionary has the following keys: - \'title\': string, title of the book - \'author\': string, author of the book - \'year\': int, publication year of the book - \'genre\': string, genre of the book - \'copies\': int, number of copies available :return: a tuple containing: 1. List of book titles sorted by publication year in descending order 2. Total number of copies across all books 3. Dictionary with genres as keys and lists of book titles within each genre sorted alphabetically as values ``` # Input - `books`: A list of dictionaries, where each dictionary represents a book with the following keys: - \'title\': A string representing the title of the book. - \'author\': A string representing the author of the book. - \'year\': An integer representing the publication year of the book. - \'genre\': A string representing the genre of the book. - \'copies\': An integer representing the number of copies available of the book. # Output The function should return a tuple containing three elements: 1. A list of book titles sorted by publication year in descending order. 2. An integer representing the total number of copies of all books. 3. A dictionary where each key is a genre (string) and the value is a list of book titles (strings) within that genre, sorted alphabetically. # Example Usage ```python books = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author 1\\", \\"year\\": 2020, \\"genre\\": \\"Fiction\\", \\"copies\\": 5}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author 2\\", \\"year\\": 2018, \\"genre\\": \\"Non-Fiction\\", \\"copies\\": 3}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author 3\\", \\"year\\": 2021, \\"genre\\": \\"Fiction\\", \\"copies\\": 4}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author 4\\", \\"year\\": 2019, \\"genre\\": \\"Science\\", \\"copies\\": 2}, {\\"title\\": \\"Book E\\", \\"author\\": \\"Author 5\\", \\"year\\": 2017, \\"genre\\": \\"Fiction\\", \\"copies\\": 1}, ] sorted_titles, total_copies, genre_dict = bookstore_inventory(books) print(sorted_titles) # Output: [\'Book C\', \'Book A\', \'Book D\', \'Book B\', \'Book E\'] print(total_copies) # Output: 15 print(genre_dict) # Output: { # \'Fiction\': [\'Book A\', \'Book C\', \'Book E\'], # \'Non-Fiction\': [\'Book B\'], # \'Science\': [\'Book D\'] # } ```","solution":"def bookstore_inventory(books): Simulates a bookstore inventory system. :param books: list of dictionaries where each dictionary contains information about a book. Each dictionary has the following keys: - \'title\': string, title of the book - \'author\': string, author of the book - \'year\': int, publication year of the book - \'genre\': string, genre of the book - \'copies\': int, number of copies available :return: a tuple containing: 1. List of book titles sorted by publication year in descending order 2. Total number of copies across all books 3. Dictionary with genres as keys and lists of book titles within each genre sorted alphabetically as values # Task 1: Sort books by the publication year in descending order and extract titles sorted_titles = [book[\'title\'] for book in sorted(books, key=lambda x: x[\'year\'], reverse=True)] # Task 2: Calculate the total number of copies total_copies = sum(book[\'copies\'] for book in books) # Task 3: Create dictionary by genre with sorted list of titles genre_dict = {} for book in books: genre = book[\'genre\'] title = book[\'title\'] if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(title) for genre in genre_dict: genre_dict[genre].sort() return (sorted_titles, total_copies, genre_dict)"},{"question":"You are required to implement a function that takes a list of product prices and an integer `k`, and calculates the maximum possible revenue from selling exactly `k` products. The function should find the combination of `k` products that yields the highest total price. **Function Signature:** ```python def max_revenue(prices, k): ``` **Inputs:** 1. `prices` (List[int]): A list of integers representing prices of different products. 2. `k` (int): The number of products to be sold. **Outputs:** - Returns an integer representing the maximum revenue from selling exactly `k` products. **Constraints:** - If `k` is greater than the length of `prices`, return 0. - If `k` is 0 or `prices` is empty, return 0. **Example:** ```python print(max_revenue([20, 10, 30, 50, 40], 3)) # Output: 120 # The maximum revenue is from selling the products priced at 50, 40, and 30. print(max_revenue([5, 15, 10, 7], 2)) # Output: 25 # The maximum revenue is from selling the products priced at 15 and 10. print(max_revenue([5, 15, 10, 7], 5)) # Output: 0 # `k` is greater than the number of products available. print(max_revenue([], 3)) # Output: 0 # Empty product list. print(max_revenue([8, 2, 5], 0)) # Output: 0 # No products to be sold. ```","solution":"def max_revenue(prices, k): Calculates the maximum possible revenue from selling exactly `k` products. :param prices: List[int] - List of product prices. :param k: int - Number of products to sell. :return: int - Maximum revenue from selling `k` products. if k == 0 or not prices or k > len(prices): return 0 prices.sort(reverse=True) return sum(prices[:k])"},{"question":"You need to write a function `shortest_walk` that finds the shortest walk distance a person can take in a 2D grid from a starting point to a destination, avoiding obstacles. # Detailed Description 1. **Inputs**: - A 2D list `grid` where each element can be: - `\'S\'`, representing the starting point (only one such element exists in the grid). - `\'D\'`, representing the destination point (only one such element exists in the grid). - `\'O\'`, representing an obstacle. - `\'.\'`, representing an open cell. 2. **Output**: - The function should return an integer representing the shortest walk distance from the start to the destination. If the path does not exist, return -1. # Function Signature ```python def shortest_walk(grid: List[List[str]]) -> int: pass ``` # Example: ```python grid = [ [\'S\', \'.\', \'.\', \'O\', \'.\'], [\'.\', \'O\', \'.\', \'O\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'.\'], [\'O\', \'O\', \'O\', \'.\', \'.\'], [\'.\', \'.\', \'O\', \'.\', \'D\'] ] distance = shortest_walk(grid) print(distance) # Expected output is a positive integer, the shortest distance to \'D\'. ``` # Requirements: - Use a breadth-first search (BFS) algorithm to find the shortest path. - Implement auxiliary functions or classes as necessary to maintain readability and code organization. # Constraints: - The grid dimensions will be such that the number of rows and columns will not exceed 100. - There will be exactly one \'S\' and one \'D\' in the grid. - The algorithm should handle edge cases where the destination is surrounded by obstacles or there is no possible path.","solution":"from collections import deque from typing import List def shortest_walk(grid: List[List[str]]) -> int: # Helper function to get the valid neighbors for BFS def neighbors(x, y): # List of possible 4 directions to move in the grid directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] != \'O\': yield nx, ny # Find the start (\'S\') and destination (\'D\') positions in the grid start, dest = None, None for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': dest = (i, j) # If either start or dest is not found (though constraints ensure they exist) if not start or not dest: return -1 # Queue for BFS queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: x, y, distance = queue.popleft() # If current cell is the destination, return the distance if (x, y) == dest: return distance # Check all possible neighbors for nx, ny in neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) # If BFS completes without finding the destination return -1"},{"question":"You are required to develop a function that takes a JSON string representing a list of dictionaries, each containing information about a student and their grades in different subjects. The function should calculate and return the name of the student with the highest average grade. Each dictionary in the JSON string contains the following fields: - `name` (string): The student\'s name. - `grades` (dictionary): Key-value pairs where keys are subject names (strings) and values are grades (floats). Your function should be named `best_student` and adhere to the following specifications: - **Arguments** - `json_data` (str): The input JSON string representing student data. - **Returns** - (str): The name of the student with the highest average grade. - **Raises** - `ValueError`: If the input JSON string is not properly formatted or if no students are present. Use the `json.loads` function from the `json` module to parse the input JSON string and the `statistics.mean` function from the `statistics` module to compute the average grades. # Example Given the following JSON string: ```json [ {\\"name\\": \\"Alice\\", \\"grades\\": {\\"math\\": 90, \\"science\\": 95, \\"literature\\": 88}}, {\\"name\\": \\"Bob\\", \\"grades\\": {\\"math\\": 85, \\"science\\": 89, \\"literature\\": 92}}, {\\"name\\": \\"Charlie\\", \\"grades\\": {\\"math\\": 80, \\"science\\": 85, \\"literature\\": 78}} ] ``` The function call `best_student(\'[{\\"name\\": \\"Alice\\", \\"grades\\": {\\"math\\": 90, \\"science\\": 95, \\"literature\\": 88}}, {\\"name\\": \\"Bob\\", \\"grades\\": {\\"math\\": 85, \\"science\\": 89, \\"literature\\": 92}}, {\\"name\\": \\"Charlie\\", \\"grades\\": {\\"math\\": 80, \\"science\\": 85, \\"literature\\": 78}}]\')` should return `\\"Alice\\"`. # Constraints - All grades are non-negative floats or integers. - Each student has at least one grade recorded. - The input JSON string is guaranteed to contain unique student names.","solution":"import json from statistics import mean def best_student(json_data): Returns the name of the student with the highest average grade from the input JSON string. Args: json_data (str): The input JSON string representing student data. Returns: str: The name of the student with the highest average grade. Raises: ValueError: If the input JSON string is not properly formatted or if no students are present. try: students = json.loads(json_data) if not students: raise ValueError(\\"No students data provided.\\") best_avg = -1 best_student_name = \\"\\" for student in students: avg_grade = mean(student[\\"grades\\"].values()) if avg_grade > best_avg: best_avg = avg_grade best_student_name = student[\\"name\\"] return best_student_name except (json.JSONDecodeError, KeyError, TypeError) as e: raise ValueError(f\\"Invalid input data: {e}\\")"},{"question":"You are given a string containing digits from 2-9 inclusive. Your task is to write a Python function `letter_combinations` that returns all possible letter combinations that the number could represent. You should use the mapping of digits to letters as the mapping on a standard telephone keypad. The digit-to-letter mapping is given below: 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" **Function Signature:** ```python def letter_combinations(digits: str) -> list: \'\'\' Given a string containing digits, return all possible letter combinations. \'\'\' ``` **Requirements:** - The implementation should handle cases where the input string is empty. - Use recursion or a backtracking approach to explore all possible combinations. **Example:** Input: ```python digits = \\"23\\" ``` Output: ```python [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` Explanation: For the input \\"23\\", the possible letter combinations as per the telephone keypad mapping are: \\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\".","solution":"def letter_combinations(digits: str) -> list: Given a string containing digits, return all possible letter combinations. if not digits: return [] phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if len(path) == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"You are tasked with creating a function that processes a given list of dictionaries and calculates the total sales for a specified product. Each dictionary in the list represents a sales entry with the following keys: - `product`: The name of the product (string) - `price`: The price per unit of the product (float) - `quantity`: The quantity sold (integer) Your function should compute the total sales for the specified product by multiplying the price and quantity for all entries of that product and summing them up. **Function Name:** `calculate_total_sales` **Input:** - `sales_data`: A list of dictionaries, each representing a sales entry. - `target_product`: A string representing the name of the product for which the total sales need to be calculated. **Output:** - A float representing the total sales for the specified product. Example: ```python sales_data = [ {\\"product\\": \\"apple\\", \\"price\\": 1.2, \\"quantity\\": 10}, {\\"product\\": \\"banana\\", \\"price\\": 0.5, \\"quantity\\": 5}, {\\"product\\": \\"apple\\", \\"price\\": 1.2, \\"quantity\\": 20} ] target_product = \\"apple\\" print(calculate_total_sales(sales_data, target_product)) ``` Output: ```python 36.0 ```","solution":"def calculate_total_sales(sales_data, target_product): Calculates the total sales for the specified product. Parameters: sales_data (list): A list of dictionaries representing sales entries. target_product (str): The name of the product to calculate total sales for. Returns: float: The total sales for the specified product. total_sales = 0.0 for entry in sales_data: if entry[\'product\'] == target_product: total_sales += entry[\'price\'] * entry[\'quantity\'] return total_sales"},{"question":"Write a function that takes a string as an input and returns a new string where each character is shifted by a given number of places in the alphabet. If the new position goes past \'z\', it should wrap around to the beginning of the alphabet. Preserve the case of the characters. The function should handle both uppercase and lowercase letters and ignore non-alphabetic characters. Implement this using a helper function that performs the character shifting. The function should be defined as follows: ``` import string def shift_char(c, n): pass def task_func(input_str, shift_num): pass ``` The function should output a string where each character is shifted appropriately.","solution":"import string def shift_char(c, n): Returns the character shifted by n positions in the alphabet. Wraps around if the shift goes past \'z\' or \'Z\'. Only alphabetic characters are shifted; other characters remain unchanged. if c.isalpha(): if c.islower(): start = ord(\'a\') return chr((ord(c) - start + n) % 26 + start) elif c.isupper(): start = ord(\'A\') return chr((ord(c) - start + n) % 26 + start) return c def task_func(input_str, shift_num): Returns a new string where each character is shifted by the given number of places in the alphabet. Non-alphabetic characters are preserved. return \'\'.join(shift_char(c, shift_num) for c in input_str)"},{"question":"Perform hierarchical agglomerative clustering on a DataFrame and return a linkage matrix and a new DataFrame with assigned cluster labels for each row. This example demonstrates how to use AgglomerativeClustering from sklearn for hierarchical clustering of a dataset. It normalizes the input data using StandardScaler from sklearn, fits an AgglomerativeClustering model, and then assigns each input to a cluster. Finally, it computes the linkage matrix and returns it along with a DataFrame with an added column that contains the cluster label for each input record. The function should output with: tuple: A tuple containing two elements: - A 2D array representing the linkage matrix. - A pandas DataFrame with an additional column \'Cluster\' indicating the cluster each row belongs to. You should write self-contained code starting with: ``` import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.cluster import AgglomerativeClustering from scipy.cluster.hierarchy import linkage def task_func(data, columns, n_clusters): ```","solution":"import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.cluster import AgglomerativeClustering from scipy.cluster.hierarchy import linkage def task_func(data, columns, n_clusters): Perform hierarchical agglomerative clustering on the specified columns of a DataFrame. Args: data: A pandas DataFrame containing the input data. columns: A list of columns from the DataFrame to be used for clustering. n_clusters: The number of clusters to find. Returns: A tuple containing two elements: - A 2D array representing the linkage matrix from hierarchical clustering. - The original DataFrame with an additional \'Cluster\' column indicating the cluster each row belongs to. # Select relevant columns X = data[columns] # Normalize the input data scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Fit the AgglomerativeClustering model clustering = AgglomerativeClustering(n_clusters=n_clusters) cluster_labels = clustering.fit_predict(X_scaled) # Compute linkage matrix for the entire dataset Z = linkage(X_scaled, method=\'ward\') # Add cluster labels to the DataFrame data[\'Cluster\'] = cluster_labels return Z, data"},{"question":"You are tasked with creating a function to validate a given string representing a time in the 24-hour format. The function will determine if the string is a valid time and return the hour and minute components if valid. # Function Requirements: - **Function Name**: `validate_24_hour_format` - **Parameters**: A single parameter `time_str` which is a string. - **Returns**: - A list containing: - The hour as an integer if the time is valid, otherwise `None`. - The minute as an integer if the time is valid, otherwise `None`. # Constraints: 1. The input string `time_str` must follow the \\"HH:MM\\" format, where: - `HH` is a two-digit integer from 00 to 23 representing the hour. - `MM` is a two-digit integer from 00 to 59 representing the minutes. 2. If the input string does not match the \\"HH:MM\\" format, the function should return `[None, None]`. 3. The function should properly handle edge cases such as: - Incorrect hour or minute ranges (e.g., `\\"24:00\\"`, `\\"12:60\\"`). - Incorrect formats (e.g., `\\"3:45\\"`, `\\"12-30\\"`, `\\"1234\\"`). 4. The function must employ regular expressions to validate and parse the input string. # Example Usages: - `validate_24_hour_format(\\"14:30\\")` should return `[14, 30]` - `validate_24_hour_format(\\"09:45\\")` should return `[9, 45]` - `validate_24_hour_format(\\"24:00\\")` should return `[None, None]` - `validate_24_hour_format(\\"12:60\\")` should return `[None, None]` - `validate_24_hour_format(\\"3:45\\")` should return `[None, None]` - `validate_24_hour_format(\\"12-30\\")` should return `[None, None]` - `validate_24_hour_format(\\"1234\\")` should return `[None, None]` Your implementation must utilize the `re` library for input validation.","solution":"import re def validate_24_hour_format(time_str): Validates if the given string time_str is in the correct 24-hour HH:MM format. Parameters: - time_str (str): A string representing the time in \\"HH:MM\\" format. Returns: - list: [hour, minute] if the time is valid; otherwise [None, None]. # Define the pattern for HH:MM format using regex pattern = r\\"^(2[0-3]|[01]d):([0-5]d)\\" # Use regex to check the pattern match = re.match(pattern, time_str) if match: hour, minute = match.groups() return [int(hour), int(minute)] return [None, None]"},{"question":"**In this problem, you need to implement a function `find_most_frequent` in Python that takes a string as input and returns the most frequent word in that string. The function needs to ignore capitalization (i.e., \'Word\' and \'word\' should be treated as the same word). If there is a tie for the most frequent word, return the word that appears first in the string. Here is a brief summary of the `find_most_frequent` function: - Convert the input string to lower case to ensure case insensitivity. - Split the string into individual words (you can assume the string only contains alphabets and spaces). - Count the frequency of each word. - Identify and return the most frequent word. In case of a tie, return the word that appears first. Here is how the function signature should look: ```python def find_most_frequent(input_string): pass ``` **Example Usage:** ```python find_most_frequent(\\"This is a test. This has to be a fair test.\\") # Output: \\"this\\" find_most_frequent(\\"One one Two two THREE three FOUR four\\") # Output: \\"one\\" ```**","solution":"def find_most_frequent(input_string): Returns the most frequent word in the input string. If there is a tie, returns the word that appears first. The function is case insensitive. input_string = input_string.lower() words = input_string.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = 0 most_frequent_word = \\"\\" for word in words: if word_count[word] > max_count: max_count = word_count[word] most_frequent_word = word return most_frequent_word"},{"question":"Your task is to implement and thoroughly test a function called `flatten_dict` that takes a nested dictionary and flattens it. The resulting dictionary should have keys representing the hierarchical structure of the original dictionary, with levels separated by underscores (\'_\'). # Function Signature ```python def flatten_dict(nested_dict): Flattens a nested dictionary. The keys in the resulting dictionary consist of the keys from the original dictionary, joined by underscores where each underscore represents a level of nesting. :param nested_dict: The nested dictionary to flatten :type nested_dict: dict :return: A flat dictionary with hierarchical keys :rtype: dict ``` # Requirements 1. **Key Formatting**: Use underscores (\'_\') to concatenate the keys from different levels of the nested dictionary. 2. **Recursion**: Use recursion to navigate through the levels of the nested dictionary. 3. **Base Case**: When a value in the dictionary is not a dictionary itself, add it to the flat dictionary with the current key path as the key. # Example ```python input_dict = { \\"a\\": { \\"b\\": 1, \\"c\\": { \\"d\\": 2, \\"e\\": 3, } }, \\"f\\": 4 } print(flatten_dict(input_dict)) # Expected output: {\'a_b\': 1, \'a_c_d\': 2, \'a_c_e\': 3, \'f\': 4} ``` # Test Your Implementation Test the function with different configurations of nested dictionaries to validate the correctness of your code. The structure and depth of the nested dictionaries can vary. Make sure your solution handles edge cases such as empty dictionaries, dictionaries with mixed data types, and nested structures with multiple levels. ```python input_dict1 = {} # Empty dictionary print(flatten_dict(input_dict1)) # Expected output: {} input_dict2 = { \\"x\\": { \\"y\\": { \\"z\\": 5 }, \\"w\\": 6 }, \\"t\\": 7 } print(flatten_dict(input_dict2)) # Expected output: {\'x_y_z\': 5, \'x_w\': 6, \'t\': 7} input_dict3 = { \\"p\\": { \\"q\\": { \\"r\\": { \\"s\\": 8 } } } } print(flatten_dict(input_dict3)) # Expected output: {\'p_q_r_s\': 8} ```","solution":"def flatten_dict(nested_dict, parent_key=\'\', sep=\'_\'): Flattens a nested dictionary. The keys in the resulting dictionary consist of the keys from the original dictionary, joined by underscores where each underscore represents a level of nesting. :param nested_dict: The nested dictionary to flatten :type nested_dict: dict :return: A flat dictionary with hierarchical keys :rtype: dict items = [] for k, v in nested_dict.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are tasked with designing a function `transform_csv` that reads a CSV file, processes the data, and writes the transformed data to a new CSV file. The function will have the following requirements: 1. **Reading the CSV:** - Read the CSV file from the path given in `input_file`. - Assume the first row contains the header. 2. **Transformation Rules:** - Add a new column \'Normalized\' which contains the normalized values of the \'Value\' column, calculated using the min-max normalization formula: [ text{normalized} = frac{text{value} - text{min_value}}{text{max_value} - text{min_value}} ] - If a row contains an empty \'Value\' field, skip the normalization for that row. The \'Normalized\' field should be empty. 3. **Writing the CSV:** - Write the transformed data to a new file at the path specified by `output_file`. - Ensure the output CSV contains the original columns plus the new \'Normalized\' column. 4. **Helper Function:** - Implement a helper function `log_transformation(row: dict) -> None` that prints out each transformed row for logging purposes. Use `csv.DictReader` to read the original file and `csv.DictWriter` to write the transformed data. Do not use additional external libraries other than Python\'s standard library. Write the function `transform_csv(input_file: str, output_file: str) -> None` to achieve this behavior. # Requirements: - Function name: `transform_csv` - Arguments: `input_file` (path to the input CSV), `output_file` (path to the output CSV) - Normalize the \'Value\' column. - Do not normalize rows where the \'Value\' field is empty. - Implement a helper function `log_transformation(row: dict) -> None` to log the transformations. # Example CSV: Input CSV (`/path/to/input.csv`): ```csv ID,Name,Value 1,Item1,10 2,Item2,20 3,Item3, 4,Item4,40 5,Item5,50 ``` Output CSV (`/path/to/output.csv`): ```csv ID,Name,Value,Normalized 1,Item1,10,0.0 2,Item2,20,0.25 3,Item3,, 4,Item4,40,0.75 5,Item5,50,1.0 ``` # Example Usage: ```python transform_csv(\\"/path/to/input.csv\\", \\"/path/to/output.csv\\") ``` The function should handle reading and writing CSV files, apply normalization where applicable, and provide a logging mechanism for tracking transformations.","solution":"import csv def transform_csv(input_file: str, output_file: str) -> None: def log_transformation(row: dict) -> None: print(f\\"Transforming row: {row}\\") with open(input_file, \'r\', newline=\'\') as infile: reader = csv.DictReader(infile) fieldnames = reader.fieldnames + [\'Normalized\'] # Extract all value rows to find min and max for normalization value_rows = [float(row[\'Value\']) for row in reader if row[\'Value\']] min_value = min(value_rows) if value_rows else 0 max_value = max(value_rows) if value_rows else 1 # Reset the file reader infile.seek(0) reader = csv.DictReader(infile) with open(output_file, \'w\', newline=\'\') as outfile: writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() for row in reader: if row[\'Value\']: value = float(row[\'Value\']) normalized_value = (value - min_value) / (max_value - min_value) row[\'Normalized\'] = f\\"{normalized_value:.2f}\\" else: row[\'Normalized\'] = \'\' log_transformation(row) writer.writerow(row)"},{"question":"Write a function named `get_top_students` that processes a dataset containing student grades and calculates the top performers. The dataset is provided as a CSV file with the following columns: student_id, name, subject, grade. Each row contains the grade of a particular student in a specific subject. Your goal is to compute the top 3 students with the highest average grades and return their information in a specific format. 1. **Import the required libraries**: Ensure that the `pandas` library is imported. 2. **Read the data**: Use the `pd.read_csv()` function to read the file `./data/student_grades.csv` into a DataFrame. 3. **Calculate Average Grade**: Compute the average grade for each student across all subjects. 4. **Select Top Students**: Identify the top 3 students with the highest average grades. 5. **Format the Output**: Create a DataFrame containing only the `student_id`, `name`, and their `average_grade` sorted in descending order by `average_grade`. Return this DataFrame. Here\'s an example of how the data might look before and after the processing: **Before Processing:** | student_id | name | subject | grade | |------------|-----------|-----------|-------| | 1 | Alice | Math | 90 | | 2 | Bob | Science | 85 | | 1 | Alice | Science | 95 | | 3 | Charlie | Math | 78 | | 4 | David | Math | 88 | | 2 | Bob | Math | 92 | | 4 | David | Science | 84 | | 3 | Charlie | Science | 82 | **After Processing:** | student_id | name | average_grade | |------------|-------|---------------| | 1 | Alice | 92.5 | | 2 | Bob | 88.5 | | 4 | David | 86.0 | Use `pandas.groupby()` to compute the average grades. Function Signature: ```python def get_top_students() -> pd.DataFrame: pass ```","solution":"import pandas as pd def get_top_students() -> pd.DataFrame: Processes a dataset containing student grades and calculates the top performers. Returns the top 3 students with the highest average grades. # Read the CSV file df = pd.read_csv(\'./data/student_grades.csv\') # Calculate the average grade for each student avg_grades = df.groupby([\'student_id\', \'name\'])[\'grade\'].mean().reset_index() avg_grades.rename(columns={\'grade\': \'average_grade\'}, inplace=True) # Select the top 3 students with the highest average grades top_students = avg_grades.sort_values(by=\'average_grade\', ascending=False).head(3) return top_students"},{"question":"Implement a function that reads a JSON string and validates its structure against a predefined schema. The schema is a dictionary that contains the expected keys and their respective data types. The function should return a boolean indicating if the JSON string conforms to the schema. This function should output with: bool: `True` if the JSON string matches the schema, `False` otherwise. You should write self-contained code starting with: ``` import json def validate_json(json_string, schema): ```","solution":"import json def validate_json(json_string, schema): Validates if the JSON string conforms to the given schema. Args: json_string (str): The JSON string to be validated. schema (dict): A dictionary defining the expected keys and their respective data types. Returns: bool: True if the JSON string matches the schema, False otherwise. try: json_data = json.loads(json_string) except json.JSONDecodeError: return False if not isinstance(json_data, dict): return False for key in schema: if key not in json_data or not isinstance(json_data[key], schema[key]): return False return True"},{"question":"Create a function that takes a list of events representing the lifetimes of various processes on a system and returns the maximum number of concurrent processes that were running at any given time. Each event in the list is represented as a dictionary with the following structure: ```python { \\"start\\": int, # start time of the process \\"end\\": int # end time of the process } ``` The input list of events may look like this: ```python events = [ {\\"start\\": 1, \\"end\\": 5}, {\\"start\\": 2, \\"end\\": 6}, {\\"start\\": 4, \\"end\\": 8}, {\\"start\\": 5, \\"end\\": 7} ] ``` The function should compute the maximum number of overlapping intervals and return this count. For the input above, the function should return `3`, since the maximum overlap between processes occurs between time `4` and `5` when there are three processes running concurrently. # Detailed Requirements: 1. Implement a function named `max_concurrent_processes(events: List[Dict[str, int]]) -> int`. 2. The function should accept a list of dictionaries, where each dictionary contains `\\"start\\"` and `\\"end\\"` keys with integer values. 3. Calculate and return the maximum number of processes that are running at the same time. Here\'s how you might start implementing the function: ```python from typing import List, Dict def max_concurrent_processes(events: List[Dict[str, int]]) -> int: # Your code here # Example usage events = [ {\\"start\\": 1, \\"end\\": 5}, {\\"start\\": 2, \\"end\\": 6}, {\\"start\\": 4, \\"end\\": 8}, {\\"start\\": 5, \\"end\\": 7} ] print(max_concurrent_processes(events)) # Output should be 3 ```","solution":"from typing import List, Dict def max_concurrent_processes(events: List[Dict[str, int]]) -> int: # Create a list of all times, marking the start and end of events timeline = [] for event in events: timeline.append((event[\'start\'], \'start\')) timeline.append((event[\'end\'], \'end\')) # Sort the timeline first by time, then by event type (\'end\' before \'start\' if they are the same) timeline.sort(key=lambda x: (x[0], x[1] == \'start\')) max_concurrent = 0 current_concurrent = 0 # Count concurrent events for time, event_type in timeline: if event_type == \'start\': current_concurrent += 1 max_concurrent = max(max_concurrent, current_concurrent) else: current_concurrent -= 1 return max_concurrent"},{"question":"You are asked to write a function named `non_overlapping_occurrences` that takes a string `s` and a substring `sub` as input and returns the number of non-overlapping occurrences of `sub` in `s`. Non-overlapping means that once a substring match is found, the search for the next match should continue from the character following the last character of the previous match. # Function Signature ```python def non_overlapping_occurrences(s: str, sub: str) -> int: ... ``` # Input - `s` (str): A non-empty string consisting of lowercase alphabets. - `sub` (str): A non-empty string consisting of lowercase alphabets. # Output - An integer representing the number of non-overlapping occurrences of `sub` in `s`. # Example ```python print(non_overlapping_occurrences(\\"abababa\\", \\"aba\\")) # Output: 2 print(non_overlapping_occurrences(\\"aaaa\\", \\"aa\\")) # Output: 2 ``` # Explanation For the string \\"abababa\\" and the substring \\"aba\\": - The first match is \\"aba\\" starting at index 0. - After removing the first match, the next match is \\"aba\\" starting at index 4. - Thus, there are 2 non-overlapping occurrences. For the string \\"aaaa\\" and the substring \\"aa\\": - The first match is \\"aa\\" starting at index 0. - After considering the next portion of the string, the next match is \\"aa\\" starting at index 2. - Thus, there are 2 non-overlapping occurrences. # Constraints - The function must handle strings with a length up to 1000 efficiently. - The length of `sub` is less than or equal to the length of `s`.","solution":"def non_overlapping_occurrences(s: str, sub: str) -> int: count = 0 i = 0 while i <= len(s) - len(sub): if s[i:i+len(sub)] == sub: count += 1 i += len(sub) else: i += 1 return count"},{"question":"You are tasked with creating a function that simulates the behavior of a basic digital clock. Specifically, you will implement the function `digital_clock(hours, minutes, period)` that takes three parameters: 1. `hours` (an integer representing the hour portion of the time, in 12-hour format, from 1 to 12) 2. `minutes` (an integer representing the minutes portion of the time, from 0 to 59) 3. `period` (a string representing whether the time is \'AM\' or \'PM\') The function should compute the time one minute later and return a string representing the updated time in the same format (12-hour format with \'AM\' or \'PM\'). Function Signature: ```python def digital_clock(hours, minutes, period): pass ``` # Examples: Consider the time `digital_clock(12, 59, \'AM\')`: - The function should return \\"1:00 AM\\" since one minute later it is 1:00 AM. Consider the time `digital_clock(11, 59, \'AM\')`: - The function should return \\"12:00 PM\\" because it transitions to the next period. Consider the time `digital_clock(1, 15, \'PM\')`: - The function should return \\"1:16 PM\\" since it just increments the minutes. Consider the time `digital_clock(11, 59, \'PM\')`: - The function should return \\"12:00 AM\\" because it transitions from PM to AM. # Requirements: 1. Ensure proper handling of the transition between \'AM\' and \'PM\'. 2. Correctly increment the hour portion of the time when minutes roll over from 59 to 00. 3. Handle the transition from 12 to 1 correctly, for both AM and PM periods.","solution":"def digital_clock(hours, minutes, period): Simulate the behavior of a basic digital clock. Given the current time in 12-hour format, this function computes the time one minute later. Parameters: - hours (int): The hour portion of the time, in 12-hour format, from 1 to 12. - minutes (int): The minutes portion of the time, from 0 to 59. - period (str): \'AM\' or \'PM\' indicating the time of day. Returns: - str: The updated time one minute later in the format \\"h:mm AM/PM\\" # Increment minutes minutes += 1 if minutes == 60: minutes = 0 hours += 1 if hours == 12: # Transition between AM and PM period = \'PM\' if period == \'AM\' else \'AM\' elif hours == 13: hours = 1 return f\\"{hours}:{minutes:02d} {period}\\""},{"question":"You are tasked with creating a function that simulates a basic inventory management system for a small e-commerce platform. The function, `process_order(inventory, order)`, will handle orders by checking stock availability, updating inventory, and summarizing the order status. Here’s the breakdown of the function\'s operations: - Check if all items in the `order` dictionary can be fulfilled by comparing against current stock in `inventory`. - If all items are available, deduct the ordered quantities from the inventory and calculate the total cost. - If any item is unavailable or insufficient in quantity, the entire order is rejected. - Print a summary stating whether the order was fulfilled or rejected. - If fulfilled, also print the total cost and the updated inventory. - If rejected, print the reason for rejection. **Function Signature:** ```python def process_order(inventory: dict, order: dict) -> None: pass ``` **Example Execution:** Assume we have the inventory: ```python inventory = { \\"apple\\": {\\"price\\": 1.2, \\"quantity\\": 10}, \\"banana\\": {\\"price\\": 0.5, \\"quantity\\": 5}, \\"orange\\": {\\"price\\": 0.8, \\"quantity\\": 7}, } order = { \\"apple\\": 3, \\"banana\\": 5, \\"orange\\": 2, } ``` When running the function: ```python process_order(inventory, order) ``` The output might look like: ``` Order fulfilled! Total Cost: 8.4 Updated Inventory: { \\"apple\\": {\\"price\\": 1.2, \\"quantity\\": 7}, \\"banana\\": {\\"price\\": 0.5, \\"quantity\\": 0}, \\"orange\\": {\\"price\\": 0.8, \\"quantity\\": 5}, } ``` If the order has an item with insufficient stock: ```python order = { \\"apple\\": 3, \\"banana\\": 6, # Note: More than available quantity \\"orange\\": 2, } process_order(inventory, order) ``` The output might look like: ``` Order rejected: Not enough stock for \'banana\'. ``` **Concepts Tested:** - Conditional logic - Dictionary operations (access, update) - Error handling - Basic arithmetic operations **Libraries to Use:** - None needed","solution":"def process_order(inventory: dict, order: dict) -> None: Processes an order, checks inventory and updates it if the order can be fulfilled. Parameters: inventory (dict): Current inventory with prices and quantities. order (dict): Customer order with item names and the quantities ordered. Returns: None total_cost = 0 for item, quantity in order.items(): if item not in inventory: print(f\\"Order rejected: Item \'{item}\' is not in the inventory.\\") return if inventory[item][\\"quantity\\"] < quantity: print(f\\"Order rejected: Not enough stock for \'{item}\'.\\") return for item, quantity in order.items(): total_cost += inventory[item][\\"price\\"] * quantity inventory[item][\\"quantity\\"] -= quantity print(\\"Order fulfilled!\\") print(f\\"Total Cost: {total_cost}\\") print(f\\"Updated Inventory: {inventory}\\")"},{"question":"Write a function named `island_perimeter` that calculates the perimeter of an \\"island\\" in a 2D grid array. The grid is represented by a binary matrix where `1`s represent land and `0`s represent water. The island is a contiguous group of land connected vertically or horizontally (not diagonally). Function signature: ```python def island_perimeter(grid: list[list[int]]) -> int: ``` Parameters: - `grid` (list[list[int]]): A 2D list of integers representing the binary grid. The grid has at least one row and one column. Returns: - An integer representing the perimeter of the island. Requirements: 1. The grid is surrounded by water, meaning that all the boundary cells of the grid are assumed to be water. 2. The function should compute the total perimeter by considering the edges of land cells that are adjacent to water cells or grid boundaries. Constraints: - The grid dimensions are at most 100x100. Example: ```python # Example usage: grid = [ [0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0] ] perimeter = island_perimeter(grid) print(perimeter) # Output: 16 ```","solution":"def island_perimeter(grid): rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Check all four directions if r == 0 or grid[r - 1][c] == 0: # Top perimeter += 1 if r == rows - 1 or grid[r + 1][c] == 0: # Bottom perimeter += 1 if c == 0 or grid[r][c - 1] == 0: # Left perimeter += 1 if c == cols - 1 or grid[r][c + 1] == 0: # Right perimeter += 1 return perimeter"},{"question":"You are required to create a function that simulates rolling a pair of fair six-sided dice multiple times and returns the results. The function should roll the dice M times and return a dictionary where the keys are the possible sums (2 through 12) and the values are the count of occurrences of each sum. This will necessitate using the `random` library in Python. Detailed instructions for the function: - Function name: `simulate_dice_rolls` - Parameters: - `M` (int): The number of times to roll the pair of dice. - The function should return a dictionary with keys representing each possible sum (2 through 12) and values representing the count of how many times each sum appeared. Approach: - Import the `random` library to use its `randint` function. - Initialize a dictionary to keep a count of each possible sum. - Roll two dice M times, sum their results, and update the count in the dictionary. Here is some starter code to assist you in understanding the structure: ```python import random def simulate_dice_rolls(M): # Initializing dictionary to hold counts of each possible sum sums_count = {i: 0 for i in range(2, 13)} # Rolling the pair of dice M times for _ in range(M): die1 = random.randint(1, 6) die2 = random.randint(1, 6) result_sum = die1 + die2 sums_count[result_sum] += 1 return sums_count ``` Test the function on multiple cases to ensure correctness: ```python # Example test cases print(simulate_dice_rolls(100)) print(simulate_dice_rolls(1000)) ```","solution":"import random def simulate_dice_rolls(M): Simulates rolling a pair of fair six-sided dice M times. Parameters: M (int): The number of times to roll the dice. Returns: dict: A dictionary where keys represent each possible sum (2 through 12) and values represent the count of how many times each sum appeared. # Initializing dictionary to hold counts of each possible sum sums_count = {i: 0 for i in range(2, 13)} # Rolling the pair of dice M times for _ in range(M): die1 = random.randint(1, 6) die2 = random.randint(1, 6) result_sum = die1 + die2 sums_count[result_sum] += 1 return sums_count"},{"question":"In this problem, you will implement a grid-based pathfinding algorithm, specifically the A* algorithm, which is widely used in artificial intelligence for finding the shortest path in a graph with weighted edges. The grid will have obstacles that the path cannot traverse. Your task is to implement the `a_star` function that finds the shortest path from a starting point to a destination point on a given grid. **Function Signature:** ```python def a_star(grid: List[List[int]], start: Tuple[int, int], goal: Tuple[int, int]) -> List[Tuple[int, int]]: ``` **Parameters:** 1. `grid` (List[List[int]]): A 2D grid represented as a list of lists. Each cell can be either 0 (empty) or 1 (obstacle). 2. `start` (Tuple[int, int]): The starting point in the grid as a tuple (row, column). 3. `goal` (Tuple[int, int]): The destination point in the grid as a tuple (row, column). **Returns:** - A list of tuples representing the path from the start to the goal. Each tuple is a cell in the path (row, column). - If there is no valid path, return an empty list. **Description:** - Initialize a priority queue to store nodes to be evaluated. Each node should store its total cost, the current path to that node, and the estimated cost to the goal. - Create a heuristic function that estimates the cost from a node to the goal. Use the Manhattan distance as the heuristic. - Use dictionaries to keep track of the cost from the start to a given node and the parent of each node to reconstruct the path. - Starting from the initial node, iteratively expand the nodes by adding their neighbors to the queue, updating their costs if a cheaper path is found. - For each node, avoid cells that are out of bounds or obstacles. - When the goal is reached, reconstruct and return the path by tracing back from the goal to the start using the parent dictionary. - If the queue is empty and the goal has not been reached, return an empty list. **Requirements:** - Utilize a priority queue (such as `heapq` in Python) for efficient node selection based on their estimated total cost. - Ensure that you handle out-of-bound indices and obstacles correctly.","solution":"from typing import List, Tuple import heapq def a_star(grid: List[List[int]], start: Tuple[int, int], goal: Tuple[int, int]) -> List[Tuple[int, int]]: def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1]) def neighbors(node): dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] result = [] for dir in dirs: neighbor = (node[0] + dir[0], node[1] + dir[1]) if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]) and grid[neighbor[0]][neighbor[1]] == 0: result.append(neighbor) return result open_set = [] heapq.heappush(open_set, (0 + heuristic(start, goal), 0, start)) came_from = {} g_score = {(start[0], start[1]): 0} while open_set: _, current_score, current = heapq.heappop(open_set) if current == goal: path = [] while current in came_from: path.append(current) current = came_from[current] path.append(start) return path[::-1] for neighbor in neighbors(current): tentative_g_score = current_score + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: g_score[neighbor] = tentative_g_score f_score = tentative_g_score + heuristic(neighbor, goal) heapq.heappush(open_set, (f_score, tentative_g_score, neighbor)) came_from[neighbor] = current return []"},{"question":"You are tasked with creating a simple calculator that evaluates arithmetic expressions using the operator-precedence-parsing method. The calculator will handle addition, subtraction, multiplication, and division, while respecting the order of operations. Here are the specific requirements for your function: Write a function called `evaluate_expression(expression: str) -> float` that: 1. Takes a string input representing a mathematical expression (e.g., \\"3 + 5 * 2 / ( 7 - 3 )\\"). 2. Parses the expression to recognize numbers and operators (+, -, *, /), as well as parentheses for altering precedence. 3. Evaluates the expression respecting the standard order of operations: - Parentheses - Multiplication (*) and Division (/) - Addition (+) and Subtraction (-) 4. Returns the computed result as a float. Example behavior: - `evaluate_expression(\\"3 + 5 * 2\\")` returns `13.0` - `evaluate_expression(\\"(2 + 3) * 4\\")` returns `20.0` - `evaluate_expression(\\"7 - 8 / (4 - 2)\\")` returns `3.0` The function should handle any well-formed arithmetic expression adhering to these rules. You may assume that the input expressions are syntactically correct. Implement and use this function following the structure provided above.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression and returns the result as a float. Respects the standard order of operations and handles parentheses. def parse_expression(expression: str): # Tokenize the input string tokens = [] number = \'\' for char in expression: if char.isdigit() or char == \'.\': number += char else: if number: tokens.append(float(number)) number = \'\' if char in \'+-*/()\': tokens.append(char) if number: tokens.append(float(number)) return tokens def parse_factor(tokens): token = tokens.pop(0) if token == \'(\': result = parse_expression_recursive(tokens) assert tokens.pop(0) == \')\' return result else: return token def parse_term(tokens): result = parse_factor(tokens) while tokens and tokens[0] in \'*/\': operator = tokens.pop(0) if operator == \'*\': result *= parse_factor(tokens) elif operator == \'/\': result /= parse_factor(tokens) return result def parse_expression_recursive(tokens): result = parse_term(tokens) while tokens and tokens[0] in \'+-\': operator = tokens.pop(0) if operator == \'+\': result += parse_term(tokens) elif operator == \'-\': result -= parse_term(tokens) return result tokens = parse_expression(expression) return parse_expression_recursive(tokens)"},{"question":"In this problem, you are required to implement a function named `rearrange_name` that takes a full name as input and returns it in the format of \\"Last Name, First Name\\". The input name will always have the format \\"First Name Last Name\\" with a single space separating the first and last names. The function should handle cases where the input name may have leading or trailing whitespace and extra spaces between the first and last names. # Requirements: 1. You need to handle the input string such that extra spaces are removed. 2. The name should be split into first and last names. 3. Return the rearranged name in the format: \\"Last Name, First Name\\". Write the `rearrange_name` function that takes a single string argument `name` and returns a string in the format \\"Last Name, First Name\\". Here is a skeletal structure of the required implementation for your reference: ```python def rearrange_name(name): name = name.strip() parts = name.split() first_name = parts[0] last_name = parts[1] return f\\"{last_name}, {first_name}\\" ``` Example: ```python input_name = \\" John Doe \\" output = rearrange_name(input_name) print(output) # The output should be: \'Doe, John\' ```","solution":"def rearrange_name(name): name = name.strip() parts = name.split() first_name = parts[0] last_name = parts[-1] return f\\"{last_name}, {first_name}\\""},{"question":"You are tasked with implementing a function to determine if a given binary tree is balanced. A binary tree is balanced if the left and right subtrees of every node differ in height by no more than 1. Use a helper function to compute the height of the tree and check the balance condition recursively. Requirements: 1. You must use a class to define the binary tree nodes. 2. You must implement a recursive solution to check the balance condition. 3. The solution should consider an empty tree as balanced. # Function Signature: ```python class TreeNode: def __init__(self, value: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: ``` # Input: - `root` (`TreeNode`): The root node of the binary tree. # Output: - `bool`: `True` if the binary tree is balanced, `False` otherwise. # Example: Given the following binary tree: ``` 1 / 2 3 / 4 5 / 6 ``` Represented as: ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.left.left.left = TreeNode(6) ``` Calling: ```python balanced = is_balanced(root) print(balanced) ``` Should output: ```python False ``` And for a balanced tree: ``` 1 / 2 3 / 4 5 ``` Represented as: ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) ``` Calling: ```python balanced = is_balanced(root) print(balanced) ``` Should output: ```python True ```","solution":"class TreeNode: def __init__(self, value: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_height(node: TreeNode) -> int: if node is None: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1"},{"question":"In the realm of data science, one fundamental task is the preprocessing of datasets before training machine learning models. Often, datasets contain missing values which need to be handled appropriately. This problem requires filling in the missing values using the mean value of the respective column. You are provided with a dataset where some entries are marked as `None` (Python\'s NoneType), indicating missing values. **Function to Implement**: `def fill_missing_values(data: List[List[Union[float, None]]]) -> List[List[float]]:` **Parameters**: - `data`: A list of lists where each sublist represents a row in the dataset. Each element of a sublist is either a float or `None`. **Returns**: - A new list of lists where all `None` values are replaced with the mean of their respective columns. **Requirements**: - If a column is entirely composed of `None`, leave it as is in the output. - Use appropriate handling to avoid division by zero or processing empty lists. Here is an example usage of the function: ```python data = [ [1.0, None, 2.5], [2.0, 3.5, None], [None, 4.0, 3.0] ] filled_data = fill_missing_values(data) # Expected output: [[1.0, 3.75, 2.5], [2.0, 3.5, 2.75], [1.5, 4.0, 3.0]] ``` **Goals**: - Develop skills in handling and preprocessing data which includes missing values. - Learn to compute and apply column-wise mean values for imputation. - Understand how to iterate through nested data structures and maintain their integrity while performing in-place transformations.","solution":"from typing import List, Union def fill_missing_values(data: List[List[Union[float, None]]]) -> List[List[float]]: if not data: return [] rows, cols = len(data), len(data[0]) means = [0] * cols count = [0] * cols # Calculate sums and counts for mean calculation for row in data: for col in range(cols): if row[col] is not None: means[col] += row[col] count[col] += 1 # Calculate means for col in range(cols): if count[col] > 0: means[col] /= count[col] else: means[col] = None # Use None if entire column is None # Replace None with corresponding mean result = [] for row in data: new_row = row[:] for col in range(cols): if new_row[col] is None: if means[col] is not None: new_row[col] = means[col] result.append(new_row) return result"},{"question":"Randomly generate a list of dictionaries, each representing a person with the following keys: \'id\', \'name\', \'age\', and \'salary\'. The \'id\' should be a unique integer starting from 1, \'name\' should be a random string of a given length, \'age\' should be a random integer within a specified range, and \'salary\' should be a random float within a specified range. Finally, return the generated list of dictionaries. The function should output with: List[Dict[str, Union[int, str, float]]]: The generated list of dictionaries. You should write self-contained code starting with: ``` import random import string from typing import List, Dict, Union def task_func(num_people: int, name_length: int=5, age_range: (int, int)=(18, 70), salary_range: (float, float)=(30000.0, 120000.0)): ```","solution":"import random import string from typing import List, Dict, Union def task_func(num_people: int, name_length: int = 5, age_range: (int, int) = (18, 70), salary_range: (float, float) = (30000.0, 120000.0)) -> List[Dict[str, Union[int, str, float]]]: Generate a list of dictionaries, each representing a person with the following keys: \'id\', \'name\', \'age\', and \'salary\'. Parameters: num_people (int): Number of people to generate. name_length (int, optional): Length of the name string. Defaults to 5. age_range (tuple, optional): Range of ages. Defaults to (18, 70). salary_range (tuple, optional): Range of salaries. Defaults to (30000.0, 120000.0). Returns: List[Dict[str, Union[int, str, float]]]: The generated list of dictionaries. people = [] for i in range(1, num_people + 1): person = { \'id\': i, \'name\': \'\'.join(random.choices(string.ascii_lowercase, k=name_length)), \'age\': random.randint(*age_range), \'salary\': round(random.uniform(*salary_range), 2) } people.append(person) return people"},{"question":"You are required to write a function named `max_landmarks_path` that determines the maximum number of landmarks you can visit in a city, given a street map. The city is modeled as a directed graph where nodes represent landmarks and edges represent one-way streets connecting them. Each landmark will include a name and a list of outgoing streets leading to other landmarks. Here is what your function must do: 1. Accept an input list where each element is a tuple representing a landmark. The first element of the tuple is the name of the landmark (a string), and the second element is a list of strings representing the names of landmarks that can be directly reached from it. 2. Return an integer representing the maximum number of landmarks you can visit starting from any landmark, following the streets and not revisiting any landmark. **Function Signature:** ```python def max_landmarks_path(landmarks: List[Tuple[str, List[str]]]) -> int: ``` **Example:** ```python landmarks = [ (\\"A\\", [\\"B\\", \\"C\\"]), (\\"B\\", [\\"C\\", \\"D\\"]), (\\"C\\", [\\"D\\"]), (\\"D\\", [\\"E\\"]), (\\"E\\", []) ] print(max_landmarks_path(landmarks)) # Output: 5 ``` In this example, starting from landmark \\"A\\", the longest path without revisiting any landmark is \\"A\\" -> \\"B\\" -> \\"C\\" -> \\"D\\" -> \\"E\\", which includes all 5 landmarks. **Constraints:** 1. The number of landmarks `n` will be between 1 and 1000. 2. The length of the names of landmarks will not exceed 10 characters. 3. Each landmark name is unique.","solution":"def max_landmarks_path(landmarks): def dfs(node, graph, visited, cache): if node in cache: return cache[node] visited.add(node) max_length = 1 for neighbor in graph.get(node, []): if neighbor not in visited: max_length = max(max_length, 1 + dfs(neighbor, graph, visited, cache)) visited.remove(node) cache[node] = max_length return max_length graph = {landmark: neighbors for landmark, neighbors in landmarks} max_path_length = 0 cache = {} for landmark in graph: max_path_length = max(max_path_length, dfs(landmark, graph, set(), cache)) return max_path_length"},{"question":"Create a function named `find_all_substrings` that takes a string and a target substring and returns a list of starting indices of the occurrences of the target substring within the given string. **Requirements:** 1. Do not use the built-in `str.find` or `str.index` methods. 2. The function should return a list of integers representing the zero-based starting indices. 3. If the target substring is not present, the function should return an empty list. The function signature is: ```python def find_all_substrings(s: str, target: str) -> list: Returns a list of starting indices of each occurrence of the target substring within the given string. pass ``` **Example:** ```python assert find_all_substrings(\\"abracadabra\\", \\"abra\\") == [0, 7] assert find_all_substrings(\\"hello\\", \\"ll\\") == [2] assert find_all_substrings(\\"test\\", \\"xyz\\") == [] ```","solution":"def find_all_substrings(s: str, target: str) -> list: Returns a list of starting indices of each occurrence of the target substring within the given string. if not target: # if target is an empty string return list(range(len(s) + 1)) indices = [] target_len = len(target) s_len = len(s) for i in range(s_len - target_len + 1): if s[i:i + target_len] == target: indices.append(i) return indices"},{"question":"Generate a list of integers, and create two functions: one for filtering even numbers and another for filtering odd numbers. Ensure you use list comprehension in both functions. The function should output the filtered lists for both even and odd numbers. The function inputs should include: - `input_list`: a list of integers The function should output: - tuple: A tuple containing the list of even numbers and the list of odd numbers (even_numbers, odd_numbers). You should write the self-contained code starting with: ``` def task_func(input_list): ```","solution":"def task_func(input_list): Filters even and odd numbers from the input_list and returns them as a tuple. Args: input_list (list): A list of integers. Returns: tuple: A tuple containing two lists, the first list includes even numbers and the second list includes odd numbers. even_numbers = [num for num in input_list if num % 2 == 0] odd_numbers = [num for num in input_list if num % 2 != 0] return (even_numbers, odd_numbers)"},{"question":"You are tasked with creating a function named `areSentencesAnagrams(sentence1, sentence2)` that determines if two given sentences are anagrams of each other, ignoring punctuation, spaces, and capitalization. # Requirements: 1. **Anagram Definition**: Two sentences are considered anagrams if, after removing all punctuation and spaces, and converting all characters to lowercase, they contain the exact same characters in the exact same frequencies. 2. **Remove Punctuation and Spaces**: You need to remove any punctuation (.,;:!? etc.) and spaces from the sentences before comparison. 3. **Case Insensitivity**: The comparison should be case-insensitive. # Function Signature: ```python def areSentencesAnagrams(sentence1: str, sentence2: str) -> bool: pass ``` # Constraints: - The sentences may contain letters (a-z, A-Z), digits (0-9), and punctuation (.,;:!? etc.). - The comparison should ignore any non-alphanumeric characters and be case-insensitive. # Examples: ```python sentence1 = \\"A gentleman!\\" sentence2 = \\"Elegant man.\\" result = areSentencesAnagrams(sentence1, sentence2) ``` **Output**: ```python True ``` ```python sentence1 = \\"The eyes!\\" sentence2 = \\"They see.\\" result = areSentencesAnagrams(sentence1, sentence2) ``` **Output**: ```python True ``` ```python sentence1 = \\"Hello, World!\\" sentence2 = \\"Goodbye, World!\\" result = areSentencesAnagrams(sentence1, sentence2) ``` **Output**: ```python False ``` # Instructions: Implement the function `areSentencesAnagrams` adhering to the provided requirements. Use effective string handling techniques in Python to achieve the desired behavior.","solution":"import re from collections import Counter def areSentencesAnagrams(sentence1: str, sentence2: str) -> bool: Determine if two given sentences are anagrams of each other, ignoring punctuation, spaces, and capitalization. def clean_sentence(sentence: str) -> str: # Remove non-alphanumeric characters and convert to lowercase return re.sub(r\'[^a-zA-Z0-9]\', \'\', sentence).lower() # Clean both sentences cleaned_sentence1 = clean_sentence(sentence1) cleaned_sentence2 = clean_sentence(sentence2) # Use Counter to compare the frequencies of characters return Counter(cleaned_sentence1) == Counter(cleaned_sentence2)"},{"question":"Generates a list of \'n\' random integers between two given integers and then returns a dictionary where the keys are the integers from the list and the values are the number of occurrences of each integer in the list. The function should output with: dict: A dictionary with unique integers from the list as keys and their occurrences as values. You should write self-contained code starting with: ``` import random from collections import Counter def count_occurrences(lower: int, upper: int, n: int) -> dict: ```","solution":"import random from collections import Counter def count_occurrences(lower: int, upper: int, n: int) -> dict: Generates a list of \'n\' random integers between \'lower\' and \'upper\' (inclusive) and returns a dictionary with the integers as keys and their occurrences as values. :param lower: The lower bound of the random integers (inclusive). :param upper: The upper bound of the random integers (inclusive). :param n: The number of random integers to generate. :return: A dictionary with unique integers from the list as keys and their occurrences as values. random_integers = [random.randint(lower, upper) for _ in range(n)] occurrences = Counter(random_integers) return dict(occurrences)"},{"question":"You have been assigned the task of creating a function that takes a list of strings and returns a dictionary with the count of each unique string. The function should be case-insensitive, meaning that it should treat \'Apple\' and \'apple\' as the same string. The keys of the resulting dictionary should be in lowercase. Write a function called `count_strings` that receives one argument: 1. `lst`: A list of strings. Your function should return a dictionary where each key is a unique string from the input list (in lowercase) and the corresponding value is the count of that string (case-insensitive) in the input list. # Example: ```python # Input: count_strings([\\"Apple\\", \\"apple\\", \\"banana\\", \\"Banana\\", \\"BANANA\\"]) # Output: {\'apple\': 2, \'banana\': 3} # Input: count_strings([\\"dog\\", \\"Dog\\", \\"DOG\\", \\"cat\\", \\"Cat\\", \\"CAT\\", \\"fish\\"]) # Output: {\'dog\': 3, \'cat\': 3, \'fish\': 1} ``` # Constraints: - You can assume that the input list will contain at least one element. - Strings in the input list will contain only alphabetical characters and/or spaces. - The keys in the output dictionary should be in lowercase.","solution":"def count_strings(lst): Returns a dictionary with the count of each unique string in the input list. The comparison is case-insensitive, and the resulting dictionary keys are in lowercase. Args: lst: A list of strings. Returns: A dictionary where each key is a unique string from the input list in lowercase and the corresponding value is the count of that string (case-insensitive) in the input list. string_count = {} for string in lst: lower_string = string.lower() if lower_string in string_count: string_count[lower_string] += 1 else: string_count[lower_string] = 1 return string_count"},{"question":"This function processes a given list of integers, detects any duplicate values, and returns a list of unique integers in sorted order. The function should output: list: A sorted list of unique integers. You should write self-contained code starting with: ``` def remove_duplicates_and_sort(input_list): ```","solution":"def remove_duplicates_and_sort(input_list): Processes a given list of integers, detects any duplicate values, and returns a sorted list of unique integers. Parameters: input_list (list): A list of integers. Returns: list: A sorted list of unique integers. return sorted(set(input_list))"},{"question":"You are asked to develop a function that generates a list of prime numbers within a specified range using the Sieve of Eratosthenes algorithm. This will help review your understanding of algorithmic efficiency and list manipulations in Python. Function Requirements: - The function should be named `sieve_of_eratosthenes`. - The function will take two parameters: `start` and `end`, both integers representing the range within which to find prime numbers (inclusive). - The function should return a list of prime numbers within that range. - If the `start` is less than 2, adjust it to be 2 as there are no prime numbers below 2. - Use the Sieve of Eratosthenes algorithm to generate the prime numbers. Ensure your code includes comments that illustrate the logic and efficiency considerations of the Sieve of Eratosthenes algorithm. # Example ```python def sieve_of_eratosthenes(start, end): if start < 2: start = 2 sieve = [True] * (end + 1) sieve[0] = sieve[1] = False for number in range(2, int(end**0.5) + 1): if sieve[number]: for multiple in range(number*number, end + 1, number): sieve[multiple] = False return [num for num in range(start, end + 1) if sieve[num]] # Usage prime_numbers = sieve_of_eratosthenes(10, 50) print(prime_numbers) # Output: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ```","solution":"def sieve_of_eratosthenes(start, end): Generates a list of prime numbers within a specified range using the Sieve of Eratosthenes. Parameters: start (int): The start of the range (inclusive). end (int): The end of the range (inclusive). Returns: List[int]: A list of prime numbers within the specified range. if start < 2: start = 2 # Initialize the sieve with True values sieve = [True] * (end + 1) sieve[0] = sieve[1] = False # Apply the Sieve of Eratosthenes for number in range(2, int(end**0.5) + 1): if sieve[number]: for multiple in range(number * number, end + 1, number): sieve[multiple] = False # Generate the list of prime numbers in the specified range return [num for num in range(start, end + 1) if sieve[num]]"},{"question":"Create a function that takes a list of dates (in the format `DD-MM-YYYY`) and filters out the dates that are on weekends. The function should return a dictionary where the keys are the years and the values are lists of the filtered dates in that year, sorted in chronological order. The function should start with: ``` from datetime import datetime import calendar from collections import defaultdict def filter_weekend_dates(dates): ``` The function should output: - A dictionary with years as keys and sorted lists of dates that are not on weekends as values.","solution":"from datetime import datetime import calendar from collections import defaultdict def filter_weekend_dates(dates): Filters out the dates that are on weekends and returns a dictionary where the keys are the years and the values are lists of the filtered dates in that year, sorted in chronological order. :param dates: List of dates in the format \'DD-MM-YYYY\' :return: Dictionary with years as keys and sorted lists of dates not on weekends as values filtered_dates_by_year = defaultdict(list) for date_str in dates: date_obj = datetime.strptime(date_str, \'%d-%m-%Y\') if date_obj.weekday() < 5: # Monday to Friday are 0 to 4 year = date_obj.year filtered_dates_by_year[year].append(date_str) # Sort the dates for each year for year in filtered_dates_by_year: filtered_dates_by_year[year].sort(key=lambda date_str: datetime.strptime(date_str, \'%d-%m-%Y\')) return filtered_dates_by_year"},{"question":"Write a Python function that takes two sorted arrays and merges them into a single sorted array without using any built-in sorting functions. The resulting array should be returned as a list. The function should handle arrays of different lengths and contain no duplicated elements. The function should be implemented as follows: ``` def merge_sorted_arrays(array1, array2): ``` Example ``` Input: array1 = [1, 3, 5, 7] array2 = [2, 4, 6, 8, 10] Output: [1, 2, 3, 4, 5, 6, 7, 8, 10] ``` Constraints: - Both input arrays are sorted in non-decreasing order. - Each array contains distinct integers. - The function should not use any built-in sorting methods.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array without duplicates. merged_array = [] i, j = 0, 0 # Traverse both arrays and merge them in sorted order while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 elif array1[i] > array2[j]: merged_array.append(array2[j]) j += 1 else: merged_array.append(array1[i]) i += 1 j += 1 # Add remaining elements of array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # Add remaining elements of array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"You are required to write a function `invert_dict` that takes a dictionary as input and returns a new dictionary where the keys are values from the input dictionary, and the values are lists of keys from the input dictionary that had the corresponding value. Function Signature: ```python def invert_dict(d: dict) -> dict: pass ``` - Parameters: - `d` (dict): A dictionary with keys and values, both of arbitrary data types. This function must meet the following requirements: 1. Iterate through the dictionary to collect values as keys in the new dictionary. 2. Group all original keys that share the same value into a list corresponding to that key. Example: ```python input_dict = {\'a\': 1, \'b\': 2, \'c\': 1} output_dict = invert_dict(input_dict) print(output_dict) # Output should be {1: [\'a\', \'c\'], 2: [\'b\']} ```","solution":"def invert_dict(d: dict) -> dict: Takes a dictionary as input and returns a new dictionary where the keys are values from the input dictionary, and the values are lists of keys from the input dictionary that had the corresponding value. Parameters: d (dict): Input dictionary with keys and values of arbitrary data types. Returns: dict: Inverted dictionary. inverted = {} for key, value in d.items(): if value not in inverted: inverted[value] = [] inverted[value].append(key) return inverted"},{"question":"Write a Python function that calculates the most frequent n-gram in a given text file. An n-gram is defined as a contiguous sequence of \'n\' items from the given sample of text. Your function `most_frequent_ngram(file_path: str, n: int) -> str` should: 1. Read the text file specified by `file_path`. 2. Extract all possible n-grams from the text. 3. Identify and return the most frequent n-gram in the text. 4. In case of a tie (multiple n-grams having the same frequency), return the lexicographically smallest n-gram. Your implementation should efficiently handle large files. You may assume that the text is made up solely of lowercase alphabetic characters and spaces. For example, given the file content: ``` \\"the quick brown fox jumps over the lazy dog\\" ``` and a value of `n` equal to 3, the most frequent n-gram is `\\"the\\"`. In case of multiple n-grams with the same frequency, the lexicographically smallest one should be returned.","solution":"from collections import Counter def most_frequent_ngram(file_path: str, n: int) -> str: Returns the most frequent n-gram in the specified text file. If there is a tie, the lexicographically smallest n-gram is returned. with open(file_path, \'r\') as file: text = file.read().replace(\' \', \'\') ngrams = [text[i:i+n] for i in range(len(text) - n + 1)] ngram_counts = Counter(ngrams) most_frequent = ngram_counts.most_common() highest_freq = most_frequent[0][1] candidates = [ngram for ngram, freq in most_frequent if freq == highest_freq] return min(candidates) # Usage: # most_frequent_ngram(\'path_to_file.txt\', 3)"},{"question":"In many applications involving large datasets, it is often necessary to find the k-th largest or smallest element. An efficient way to handle this is by using a min-heap or max-heap data structure. Your task is to write a function `find_kth_smallest(arr, k)` that finds the k-th smallest element in an unsorted list `arr`. We will use the `heapq` module to facilitate this operation efficiently. Function Signature ```python def find_kth_smallest(arr, k): Find the k-th smallest element in an array. Args: arr: List of integers. k: The k-th position (1-indexed). Returns: int: The k-th smallest element in the array. ``` Example ```python arr = [7, 10, 4, 3, 20, 15] k = 3 result = find_kth_smallest(arr, k) print(result) # Output should be 7 ``` Requirements 1. You **must** use the `heapq` module to perform the necessary heap operations. 2. The function should handle edge cases such as empty arrays by returning `None` or raising an appropriate exception. 3. The solution should achieve a time complexity of O(n log k), where `n` is the size of the input list and `k` is the position.","solution":"import heapq def find_kth_smallest(arr, k): Find the k-th smallest element in an array. Args: arr: List of integers. k: The k-th position (1-indexed). Returns: int: The k-th smallest element in the array. if not arr or k > len(arr) or k < 1: return None # Use a max-heap of size k max_heap = [] for num in arr: heapq.heappush(max_heap, -num) # Push the negative value to simulate max-heap if len(max_heap) > k: heapq.heappop(max_heap) return -max_heap[0] # Return the negative of the root element to get the k-th smallest"},{"question":"In this problem, you are tasked with writing a function that will convert an integer to its equivalent Roman numeral representation. A Roman numeral consists of the following characters: `M`, `D`, `C`, `L`, `X`, `V`, `I`, and their respective values being 1000, 500, 100, 50, 10, 5, and 1. There are specific rules that must be adhered to when forming Roman numerals: - The numerals `I`, `X`, `C`, and `M` can be repeated up to three times in succession. - The numerals `V`, `L`, and `D` cannot be repeated. - Numerals must be arranged in descending order of value. - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. You are required to implement a function `integer_to_roman(num)` that converts an integer to a Roman numeral string. Function Signature ```python def integer_to_roman(num): # Your code here ``` Parameters - `num` (int): An integer between 1 and 3999 (inclusive). Returns - `str`: A string representing the Roman numeral version of the given integer. Example ```python num = 1987 roman_numeral = integer_to_roman(num) print(roman_numeral) # Output: \\"MCMLXXXVII\\" ```","solution":"def integer_to_roman(num): Converts an integer to its Roman numeral representation. :param num: An integer between 1 and 3999 (inclusive). :return: A string representing the Roman numeral version of the given integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" for i in range(len(val)): while num >= val[i]: num -= val[i] roman_numeral += syms[i] return roman_numeral"},{"question":"You are tasked with writing a function `rotate_points` that applies a set of 2D rotation transformations to a set of points. The rotations are represented by angles (in degrees), and the points are given as a set of (x, y) coordinates. The function should rotate each point by the corresponding angle. **Function Signature:** ```python def rotate_points(points: np.ndarray, angles: np.ndarray) -> np.ndarray: ``` **Parameters:** - `points` (np.ndarray): An array of shape `[N x 2]` where each row represents the coordinates of a point `(x, y)`. - `angles` (np.ndarray): An array of shape `[N]` where each element represents the rotation angle in degrees for the corresponding point in `points`. **Returns:** - `np.ndarray`: An array of shape `[N x 2]` containing the coordinates of the points after applying the respective rotations. **Function Requirements:** 1. Use `numpy` functions to manipulate arrays. 2. Convert each angle from degrees to radians before applying the rotation. 3. Raise a `ValueError` if the number of angles does not match the number of points. **Additional Requirements:** - Assume that the rotation matrix construction and the rotation application are to be handled within the function. **Constraints:** - The input `points` should have dimensions `[N x 2]`. - The input `angles` should have dimensions `[N]`. - Raise a `ValueError` if the dimensions do not match the described constraints. Your function should correctly handle the input dimensions and provide error messages following the described logic.","solution":"import numpy as np def rotate_points(points: np.ndarray, angles: np.ndarray) -> np.ndarray: Rotates a set of 2D points by the corresponding angles. Parameters: points (np.ndarray): An array of shape [N x 2] where each row represents the coordinates of a point (x, y). angles (np.ndarray): An array of shape [N] where each element represents the rotation angle in degrees for the corresponding point in points. Returns: np.ndarray: An array of shape [N x 2] containing the coordinates of the points after applying the respective rotations. if points.shape[0] != angles.shape[0]: raise ValueError(\\"The number of angles must match the number of points.\\") # Convert angles from degrees to radians radians = np.deg2rad(angles) # Create a blank array for the rotated points rotated_points = np.zeros_like(points) for i in range(points.shape[0]): x, y = points[i] theta = radians[i] # Rotation matrix components cos_theta = np.cos(theta) sin_theta = np.sin(theta) # Apply the rotation matrix rotated_points[i, 0] = x * cos_theta - y * sin_theta # x\' rotated_points[i, 1] = x * sin_theta + y * cos_theta # y\' return rotated_points"},{"question":"Create a class that simulates a simple bank account. The class should support operations for depositing money, withdrawing money, and checking the current balance. The class should also maintain a transaction history, listing all deposits and withdrawals performed on the account. The class should have the following methods: - `deposit(amount)`: Adds the specified amount to the account balance. - `withdraw(amount)`: Deducts the specified amount from the account balance if sufficient funds are available; otherwise, it should raise an appropriate exception. - `get_balance()`: Returns the current balance of the account. - `get_transaction_history()`: Returns a list of all transactions as tuples, where each tuple contains the type of transaction (\'deposit\' or \'withdrawal\') and the amount. You should write self-contained code starting with: ``` class BankAccount: def __init__(self): self.balance = 0.0 self.transaction_history = [] def deposit(self, amount): self.balance += amount self.transaction_history.append((\'deposit\', amount)) def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.transaction_history.append((\'withdrawal\', amount)) def get_balance(self): return self.balance def get_transaction_history(self): return self.transaction_history ```","solution":"class BankAccount: def __init__(self): self.balance = 0.0 self.transaction_history = [] def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount self.transaction_history.append((\'deposit\', amount)) def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.transaction_history.append((\'withdrawal\', amount)) def get_balance(self): return self.balance def get_transaction_history(self): return self.transaction_history"},{"question":"You are tasked with writing a Python function called `flatten_and_multiply` that takes a nested list of integers and a multiplier, and returns a single flat list with each integer multiplied by the given multiplier. The function should handle arbitrary levels of nested lists. **Description:** 1. **Input**: - A nested list containing integers. - A single integer multiplier. 2. **Output**: - A flat list of integers where each input integer is multiplied by the multiplier. **Steps to implement the function:** 1. Recursively traverse the nested list to extract all integers. 2. Multiply each integer by the given multiplier during the extraction process. 3. Return the resulting flat list. **Requirements**: - You must handle lists nested at arbitrary levels. - The function should be named `flatten_and_multiply`. **Function Signature**: ```python def flatten_and_multiply(nested_list: list, multiplier: int) -> list: ``` **Example**: ```python # Example usage: nested_list = [1, [2, [3, 4]], [5, 6], 7] multiplier = 3 print(flatten_and_multiply(nested_list, multiplier)) # Output should be [3, 6, 9, 12, 15, 18, 21] ```","solution":"def flatten_and_multiply(nested_list: list, multiplier: int) -> list: Takes a nested list of integers and a multiplier and returns a flat list where each integer is multiplied by the given multiplier. def flatten(lst): for item in lst: if isinstance(item, list): yield from flatten(item) else: yield item return [x * multiplier for x in flatten(nested_list)]"},{"question":"**Create a function `generate_calendar_event()` that interacts with a calendar API to schedule an event. The function will accept parameters such as the event title, start time, end time, attendees, and description. You need to use the `requests` and `json` libraries to make the request and process the response. Here is the exact signature of the function you need to create: ```python def generate_calendar_event(title: str, start_time: str, end_time: str, attendees: list, description: str) -> str: pass ``` **Parameters:** - `title (str)` : The title of the event. - `start_time (str)` : The start time in the format \'YYYY-MM-DDTHH:MM:SS\'. - `end_time (str)` : The end time in the format \'YYYY-MM-DDTHH:MM:SS\'. - `attendees (list)` : A list of email addresses of the attendees. - `description (str)` : A description of the event. **Return:** - The function should return the status message from the API as a string. **Tasks:** 1. Construct the API request URL and headers, including any necessary authentication tokens or API keys. 2. Create a request payload using the provided parameters in the required JSON format. 3. Use the `requests` library to send a POST request to the calendar API. 4. Deserialize the JSON response using `json.loads`. 5. Extract and return the status message from the JSON response. You are not required to handle any HTTP errors or JSON parsing errors for this problem. **Example Usage:** ```python status = generate_calendar_event( \'Project Meeting\', \'2023-12-25T10:00:00\', \'2023-12-25T11:00:00\', [\'john.doe@example.com\', \'jane.doe@example.com\'], \'Discuss project milestones and deliverables\' ) print(status) # Output example: \'Event successfully created\' ``` **Restrictions:** - You must use the `requests` and `json` libraries as described in the documentation provided.","solution":"import requests import json def generate_calendar_event(title: str, start_time: str, end_time: str, attendees: list, description: str) -> str: Generates a calendar event by making a request to a calendar API. Parameters: title (str): The title of the event. start_time (str): The start time in the format \'YYYY-MM-DDTHH:MM:SS\'. end_time (str): The end time in the format \'YYYY-MM-DDTHH:MM:SS\'. attendees (list): A list of email addresses of the attendees. description (str): A description of the event. Returns: str: The status message from the API. url = \\"https://api.calendar.example.com/events\\" # Example URL, replace with actual API endpoint headers = { \'Content-Type\': \'application/json\', \'Authorization\': \'Bearer YOUR_ACCESS_TOKEN\' # Replace with actual access token } payload = { \'title\': title, \'start\': start_time, \'end\': end_time, \'attendees\': [{\'email\': attendee} for attendee in attendees], \'description\': description } response = requests.post(url, headers=headers, data=json.dumps(payload)) response_data = response.json() return response_data.get(\'status\', \'No status message provided\') # Return status message or default message"},{"question":"In many applications, such as data normalization and anomaly detection, it is essential to implement algorithms for computing basic statistical measures. One frequently used measure is the z-score, which indicates how many standard deviations an element is from the mean of the set. Your task is to implement a function `z_score(arr)` which calculates the z-score for each element in a given numpy array. The z-score is computed using the formula: [ z = frac{x - mu}{sigma} ] where: - ( x ) is the value from the array. - ( mu ) is the mean of the array. - ( sigma ) is the standard deviation of the array. You are required to use the `numpy.mean` and `numpy.std` functions to perform these calculations. # Input: - `arr`: A numpy array of shape `(n,)` containing the input data. # Output: - `z_scores`: A numpy array of shape `(n,)` containing the z-score for each element in the input array. # Example: ```python import numpy as np arr = np.array([1, 2, 3, 4, 5]) z_scores = z_score(arr) print(z_scores) # This should print the z-score array ``` Your implementation should efficiently compute the z-scores for all elements in the input array using `numpy.mean` and `numpy.std`.","solution":"import numpy as np def z_score(arr): Calculate the z-score for each element in a given numpy array. Parameters: arr (numpy.ndarray): Input numpy array. Returns: numpy.ndarray: Array of z-scores with the same shape as input array. mean = np.mean(arr) std_dev = np.std(arr) if std_dev == 0: # If standard deviation is zero, all values are the same # hence the z-scores should be zero for all elements return np.zeros(arr.shape) z_scores = (arr - mean) / std_dev return z_scores"},{"question":"You are tasked with implementing a function to perform the Cholesky decomposition of a given symmetric positive-definite matrix using specific NumPy functionalities. Cholesky decomposition is a technique in numerical linear algebra where a matrix is decomposed into a product of a lower triangular matrix and its transpose. # Problem Statement Write a function `cholesky_decompose(A)` that takes a single parameter: - `A` (a symmetric NumPy array): The matrix you want to decompose. You can assume `A` is symmetric and positive-definite. The function should return a NumPy array `L` such that: - `L` is a lower triangular matrix. - The product of `L` and its transpose `L.T` is equal to the original matrix `A` (i.e., `np.matmul(L, L.T) == A`). Use the following specific NumPy functions in your implementation: - `numpy.add` - `numpy.zeros_like` - `numpy.sqrt` # Example ```python import numpy as np def cholesky_decompose(A): # Your implementation here A = np.array([[4., 12., -16.], [12., 37., -43.], [-16., -43., 98.]]) L = cholesky_decompose(A) print(\\"L:\\", L) ``` Expected output: ```python L: [[ 2., 0., 0.], [ 6., 1., 0.], [-8., 5., 3.]] ``` **Constraints:** - Assume that the input matrix `A` is always symmetric and positive-definite. - Do not use any other additional libraries: stick to NumPy functionalities. # Notes - Ensure that your function correctly follows the Cholesky decomposition algorithm. - The function should utilize `numpy.add`, `numpy.zeros_like`, and `numpy.sqrt` appropriately to achieve the final decomposition.","solution":"import numpy as np def cholesky_decompose(A): Performs Cholesky Decomposition on a symmetric positive-definite matrix. Parameters: A (np.ndarray): Symmetric positive-definite matrix to be decomposed. Returns: np.ndarray: Lower triangular matrix L such that A = L @ L.T n = A.shape[0] L = np.zeros_like(A) for i in range(n): for j in range(i + 1): sum_sq = np.dot(L[i, :j], L[j, :j]) if i == j: # Diagonal elements L[i, j] = np.sqrt(A[i, i] - sum_sq) else: L[i, j] = (A[i, j] - sum_sq) / L[j, j] return L"},{"question":"You are required to write a function named `temperature_statistics` to analyze a list of temperature recordings. This function should compute and return the maximum, minimum, and average temperatures from the given list. It should also handle cases where the list is empty by returning `None` for all three values. **Function Signature:** ```python def temperature_statistics(temperatures): pass ``` **Parameters:** - `temperatures` (list): A list of integers representing temperature recordings. **Task:** 1. Calculate the maximum temperature from the list. 2. Calculate the minimum temperature from the list. 3. Calculate the average temperature from the list. 4. If the list is empty, return `None` for the maximum, minimum, and average temperatures. **Return:** - A tuple in the format `(max_temperature, min_temperature, average_temperature)` where: - `max_temperature` (int or None): The highest temperature or `None` if the list is empty. - `min_temperature` (int or None): The lowest temperature or `None` if the list is empty. - `average_temperature` (float or None): The average of the temperatures or `None` if the list is empty. **Example:** ```python # Valid list of temperatures: temperatures = [23, 18, 30, 15, 25] result = temperature_statistics(temperatures) # result should be (30, 15, 22.2) where 22.2 is the average of the temperatures # Empty list of temperatures: temperatures = [] result = temperature_statistics(temperatures) # result should be (None, None, None) ``` **Edge Case Example:** ```python # Single temperature in the list: temperatures = [25] result = temperature_statistics(temperatures) # result should be (25, 25, 25.0) since there\'s only one temperature in the list ```","solution":"def temperature_statistics(temperatures): Analyzes a list of temperature recordings to return the maximum, minimum, and average temperatures. Handles an empty list by returning None for all values. Parameters: - temperatures (list): A list of integers representing temperature recordings. Returns: - tuple: (max_temperature, min_temperature, average_temperature) if not temperatures: return (None, None, None) max_temp = max(temperatures) min_temp = min(temperatures) avg_temp = sum(temperatures) / len(temperatures) return (max_temp, min_temp, avg_temp)"},{"question":"Create a function named `count_distinct_characters(s: str) -> int` that computes the number of distinct characters in the given string `s`. The function should be case-sensitive, meaning that \'a\' and \'A\' are considered different characters. Function Signature ```python def count_distinct_characters(s: str) -> int: pass ``` Example ```python # Input s = \\"Hello, World!\\" # Output 10 ``` Explanation - The string \\"Hello, World!\\" contains the following distinct characters: H, e, l, o, ,, , W, r, d, ! Requirements 1. The function must be case-sensitive. 2. The function should ignore any leading or trailing whitespace in the input string before counting distinct characters. 3. It should efficiently handle strings of various lengths.","solution":"def count_distinct_characters(s: str) -> int: Returns the number of distinct characters in the given string `s`. The function is case-sensitive and ignores leading/trailing whitespace. # Strip leading/trailing whitespace and convert the string to a set of characters unique_characters = set(s.strip()) # Return the number of unique characters return len(unique_characters)"},{"question":"Implement a function named `get_movie_details` in Python that utilizes the **requests** and **json** libraries to interact with the OMDB API. This function should retrieve the details of a specified movie, such as its title, year, genre, and plot. Here are the required steps to complete this function: 1. Form an HTTP GET request to the following URL: `http://www.omdbapi.com/?t=MOVIE_TITLE&apikey=YOUR_API_KEY`, with appropriate query parameters where `MOVIE_TITLE` is the title of the movie provided as an argument to the function. 2. Parse the JSON response from the GET request. 3. From the JSON response, extract the following details: \'Title\', \'Year\', \'Genre\', and \'Plot\'. 4. Return a dictionary containing these details using the keys `\'title\'`, `\'year\'`, `\'genre\'`, and `\'plot\'`. 5. If the movie title contains spaces, replace any spaces with plus signs (`+`). 6. Handle any errors appropriately by printing a relevant message and returning an empty dictionary. Your function should be named `get_movie_details` and should take one argument: - `movie_title` (str): The title of the movie for which you want to query the details. Here\'s a sample call to your function: ```python movie_info = get_movie_details(\'The Shawshank Redemption\') ``` This should return a dictionary similar to: ```python { \'title\': \'The Shawshank Redemption\', \'year\': \'1994\', \'genre\': \'Drama\', \'plot\': \'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\' } ``` Ensure that you use the `requests.get` function for making the HTTP request and handle the JSON parsing with `json.loads` function appropriately. Note that for the purpose of this task, you can assume `YOUR_API_KEY` is available as a global variable.","solution":"import requests import json # Assuming YOUR_API_KEY is predefined as a global variable YOUR_API_KEY = \'your_api_key_here\' def get_movie_details(movie_title): Retrieves movie details from OMDB API and returns a dictionary containing title, year, genre, and plot. Args: movie_title (str): The title of the movie to query. Returns: dict: A dictionary containing the keys \'title\', \'year\', \'genre\', and \'plot\'. # Replace spaces with plus signs in the movie title formatted_title = movie_title.replace(\' \', \'+\') # Construct the URL with the formatted movie title and API key url = f\\"http://www.omdbapi.com/?t={formatted_title}&apikey={YOUR_API_KEY}\\" # Send an HTTP GET request to the OMDB API response = requests.get(url) # Check if the response was successful if response.status_code != 200: print(f\\"Error: Unable to retrieve data (status code: {response.status_code})\\") return {} # Parse the JSON response data = response.json() # Check if the movie is found if data.get(\'Response\') == \'False\': print(f\\"Error: {data.get(\'Error\')}\\") return {} # Extract relevant information and return it as a dictionary return { \'title\': data.get(\'Title\', \'N/A\'), \'year\': data.get(\'Year\', \'N/A\'), \'genre\': data.get(\'Genre\', \'N/A\'), \'plot\': data.get(\'Plot\', \'N/A\') } # Sample function call # movie_info = get_movie_details(\'The Shawshank Redemption\') # print(movie_info)"},{"question":"You are tasked with creating a function `flatten_nested_list` that takes in a nested list of arbitrary depth and returns a flat list containing all the elements. # Function Signature ```python def flatten_nested_list(nested_list: list) -> list: pass ``` # Requirements: 1. **Input Parameter**: - `nested_list` (list): A list that may contain other lists (which themselves may contain other lists, and so on). 2. **Functionality**: - The function should recursively iterate through the nested structure and extract all individual elements into a single, flat list. 3. **Return**: - The function should return a flat list composed of all elements in the nested list, preserving the order. # Example Usage: ```python nested_list = [1, [2, [3, 4], 5], 6, [7, 8, [9, 10]]] # Flatten the nested list flat_list = flatten_nested_list(nested_list) print(flat_list) # Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` # Additional Constraints: - You are not allowed to use any external libraries to achieve the functionality; the solution must be implemented using standard Python. # Pseudocode: 1. Define the main function with a single parameter. 2. Create a helper function that takes a nested list and a flat list as parameters. 3. Iterate through each element in the nested list: - If the element is a list, recursively call the helper function. - If the element is not a list, append it to the flat list. 4. Return the flat list from the main function.","solution":"def flatten_nested_list(nested_list): Flattens a nested list of arbitrary depth into a single flat list. :param nested_list: List containing nested lists. :return: Flattened list with all elements. flat_list = [] def flatten(lst): for element in lst: if isinstance(element, list): flatten(element) else: flat_list.append(element) flatten(nested_list) return flat_list"},{"question":"You are tasked with creating a function to visualize the average life expectancy of different continents using a given dataset. Your function should employ the `pandas` and `matplotlib` libraries in Python. Specifically, you need to use `matplotlib` to create and display a bar chart with a title and axis labels. Write a function called `plot_life_expectancy_by_continent` with the following signature: ```python def plot_life_expectancy_by_continent(df): Plot average life expectancy versus different continents. Args: df: DataFrame containing the data with at least the following columns: - \'continent\': column containing continent information - \'life_expectancy\': column containing life expectancy values ``` Ensure that: 1. You group the data by the \'continent\' column and calculate the average of the \'life_expectancy\' column. 2. You create a bar chart to visualize the average life expectancy for each continent. 3. You set the title of the bar chart to \\"Average Life Expectancy by Continent\\" using `matplotlib.pyplot.title`. 4. You label the x-axis as \\"Continent\\" and the y-axis as \\"Average Life Expectancy\\" using `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel`, respectively. 5. You display the chart using `matplotlib.pyplot.show`. Your function should not return anything. It should only display the plot. **Input** - `df`: A pandas DataFrame with at least the columns \'continent\' and \'life_expectancy\'. **Output** - The function should display a bar chart with the average life expectancy for each continent. Example usage: ```python import pandas as pd data = { \\"continent\\": [\\"Asia\\", \\"Europe\\", \\"Africa\\", \\"Americas\\", \\"Asia\\", \\"Europe\\"], \\"life_expectancy\\": [70.8, 78.2, 60.3, 72.4, 74.5, 80.1] } df = pd.DataFrame(data) plot_life_expectancy_by_continent(df) ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_life_expectancy_by_continent(df): Plot average life expectancy versus different continents. Args: df: DataFrame containing the data with at least the following columns: - \'continent\': column containing continent information - \'life_expectancy\': column containing life expectancy values avg_life_expectancy = df.groupby(\'continent\')[\'life_expectancy\'].mean().reset_index() plt.figure(figsize=(10, 6)) plt.bar(avg_life_expectancy[\'continent\'], avg_life_expectancy[\'life_expectancy\']) plt.title(\\"Average Life Expectancy by Continent\\") plt.xlabel(\\"Continent\\") plt.ylabel(\\"Average Life Expectancy\\") plt.show()"},{"question":"In this problem, you need to create a function to perform operations on a list of integers and find specific properties related to the smallest and largest numbers in the list. # Task: You need to write a function, `analyze_list(nums)`, which performs the following: 1. Takes a list of integers, `nums`, as input. 2. Identifies the smallest and largest number in the list. 3. Calculates the difference between the largest and smallest number (`range`). 4. Finds the index of the first occurrence of the smallest number (`min_index`) and the index of the last occurrence of the largest number (`max_index`). 5. Returns a tuple containing the range, `min_index`, and `max_index`. # Requirements: - Your function should handle both positive and negative integers. - The input list will always contain at least one integer. - If the smallest or largest number appears multiple times, return the first occurrence for the smallest index and the last occurrence for the largest index. # Function Signature: ```python def analyze_list(nums: list[int]) -> tuple[int, int, int]: pass ``` # Example: ```python print(analyze_list([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])) # Output: (8, 1, 9) ``` # Explanation: - In the example list, the smallest number is `1`, and the largest number is `9`. - The difference between the largest and smallest number (`range`) is `9 - 1 = 8`. - The index of the first occurrence of `1` is `1`. - The index of the last occurrence of `5` is `9`. - Thus, the function should return `(8, 1, 9)`. This exercise will test your ability to work with list operations, specifically finding indices and calculating differences.","solution":"def analyze_list(nums): Analyzes the given list of integers and returns a tuple containing: - The range (difference between the largest and smallest number) - The index of the first occurrence of the smallest number - The index of the last occurrence of the largest number smallest = min(nums) largest = max(nums) range_difference = largest - smallest min_index = nums.index(smallest) max_index = len(nums) - nums[::-1].index(largest) - 1 return (range_difference, min_index, max_index)"},{"question":"Write a function `find_shortest_path(grid: List[List[int]]) -> int` that finds the shortest path from the top-left corner to the bottom-right corner of a grid filled with 0s and 1s. The function should avoid all 1s and only move through 0s, and return the length of the shortest path. If no path exists, return -1. You can move up, down, left, or right, but cannot move diagonally. Constraints - The grid dimensions will be between 2x2 and 100x100. - The grid is always rectangular. Example Usage ```python grid = [ [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0] ] find_shortest_path(grid) # This should return 5 as [0,0] -> [1,0] -> [1,1] -> [2,1] -> [3,1] -> [3,2] -> [3,3] is the shortest path. grid = [ [0, 1], [1, 0] ] find_shortest_path(grid) # This should return -1 as there is no path from top-left to bottom-right. ``` To implement the solution, you can use a Breadth-First Search (BFS) algorithm which is particularly effective for finding the shortest path in unweighted grids.","solution":"from collections import deque from typing import List def find_shortest_path(grid: List[List[int]]) -> int: Finds the shortest path from the top-left corner to the bottom-right corner of a grid filled with 0s and 1s. The function avoids all 1s and only moves through 0s, and returns the length of the shortest path. If no path exists, returns -1. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def in_bounds(x, y): return 0 <= x < rows and 0 <= y < cols queue = deque([(0, 0)]) visited = set((0, 0)) path_length = 1 while queue: level_size = len(queue) for _ in range(level_size): x, y = queue.popleft() if (x, y) == (rows - 1, cols - 1): return path_length for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) path_length += 1 return -1"},{"question":"**Objective:** You need to write a function that finds the maximum product of any three distinct numbers from a given list of integers. **Function Signature:** ```python def maximum_product(nums): pass ``` - `nums` (List[int]): A list of integers that may contain both positive and negative numbers. **Output:** Return an integer representing the maximum product of any three distinct numbers in the list. **Example:** ```python nums = [1, 2, 3, 4] # Expected output: 24 (from the product 4 * 3 * 2) print(maximum_product(nums)) ``` Another example: ```python nums = [-10, -10, 5, 2] # Expected output: 500 (from the product -10 * -10 * 5) print(maximum_product(nums)) ``` **Requirements:** 1. Consider edge cases where the largest product may include two negative numbers that produce a large positive product when multiplied together. 2. The solution should be efficient and handle large lists of numbers. **Hints:** - Sorting the list can help in identifying the largest and smallest elements quickly. - To account for three numbers, you should consider the maximum product that can be obtained in two scenarios: the product of the three largest numbers and the product of the two smallest numbers and the largest number.","solution":"def maximum_product(nums): Finds the maximum product of any three distinct numbers in the list. Parameters: nums (List[int]): A list of integers. Returns: int: The maximum product of any three distinct numbers. nums.sort() # The maximum product can be either: # 1. The product of the three largest numbers max_product_end = nums[-1] * nums[-2] * nums[-3] # 2. The product of the two smallest numbers and the largest number max_product_start = nums[0] * nums[1] * nums[-1] # The result is the maximum of these two scenarios return max(max_product_end, max_product_start)"},{"question":"In this problem, you will implement a function named `find_paths` that takes a directed acyclic graph (DAG) represented as an adjacency list, a starting node, and a target node. The function should return all the possible paths from the starting node to the target node. The adjacency list is a dictionary where the keys are node values and the corresponding values are lists of nodes that can be reached directly from that node. The graph does not contain cycles. # Function Specification **Function Signature:** ```python def find_paths(graph: dict, start: int, end: int) -> list: ``` **Parameters:** - `graph`: A dictionary with integer keys and lists of integers as values representing the adjacency list of the graph. - `start`: An integer representing the starting node. - `end`: An integer representing the target node. **Returns:** - A list of lists, where each inner list is a sequence of nodes representing a path from the start node to the end node. **Example:** ```python graph = { 1: [2, 3], 2: [4], 3: [4], 4: [] } start = 1 end = 4 paths = find_paths(graph, start, end) # Expected output: [[1, 2, 4], [1, 3, 4]] ``` # Constraints: - Assume all node values in the graph are positive integers. - The graph is a valid DAG. - There will be at least one path from the start node to the end node. # Explanation: 1. Implement a function to traverse the graph using Depth First Search (DFS) from the `start` node to `end` node. 2. Keep track of the current path and explore all possible paths recursively. 3. Append the current path to the result when the target node is reached. 4. Return all found paths as a list of lists.","solution":"def find_paths(graph, start, end): def dfs(node, path, result): path.append(node) if node == end: result.append(path.copy()) else: for neighbor in graph.get(node, []): dfs(neighbor, path, result) path.pop() result = [] dfs(start, [], result) return result"},{"question":"You are required to design a function that analyzes a list of strings, counts the total number of vowels and consonants across all strings, and computes the difference between the two counts. The function should be named `diff_vowels_consonants` and be defined as follows: ```python def diff_vowels_consonants(string_list): :param string_list: List of strings :return: Difference between the total number of vowels and consonants across all strings ``` # Inputs: 1. `string_list`: A list of strings, where each string consists only of alphabetic characters. # Outputs: 1. An integer representing the difference between the total number of vowels and consonants across all strings in the list. # Definitions: 1. **Vowel**: Any of the letters \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). 2. **Consonant**: Any alphabetic character that is not a vowel. # Steps: 1. Create a set of vowels for quick lookup: `{\'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'}`. 2. Initialize two counters to zero, one for vowels and one for consonants. 3. Iterate through each string in the list. 4. For each string, iterate through each character. 5. If the character is a vowel, increment the vowel counter. 6. If the character is a consonant, increment the consonant counter. 7. Compute the difference by subtracting the consonant counter from the vowel counter. 8. Return the computed difference. # Example: Consider the list `[\\"hello\\", \\"world\\"]`. - In \\"hello\\", there are 2 vowels (`e`, `o`) and 3 consonants (`h`, `l`, `l`). - In \\"world\\", there is 1 vowel (`o`) and 4 consonants (`w`, `r`, `l`, `d`). - Total vowels count = 2 + 1 = 3. - Total consonants count = 3 + 4 = 7. - The difference is 3 - 7 = -4. ```python diff_vowels_consonants([\\"hello\\", \\"world\\"]) # Should return -4 ``` **Constraints:** - The input list will contain at least one string. - Each string will have at least one alphabetic character.","solution":"def diff_vowels_consonants(string_list): Returns the difference between the total number of vowels and consonants across all strings in the list. :param string_list: List of strings :return: Difference between the total number of vowels and consonants across all strings vowels = {\'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'} vowel_count = 0 consonant_count = 0 for string in string_list: for char in string: if char in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count - consonant_count"},{"question":"You are tasked with writing a function that simulates a basic version of the popular \\"FizzBuzz\\" problem, but with custom string substitutions for multiples. The function should be named `custom_fizz_buzz` and should take four parameters: 1. `n`: An integer representing the count up to which the game should be played (inclusive). 2. `div1`: An integer representing the first divisor. 3. `div2`: An integer representing the second divisor. 4. `word_map`: A dictionary where keys are integers (like div1, div2, or their least common multiple) and values are the strings to substitute for those multiples. The function should: 1. Iterate from 1 to `n` (inclusive). 2. For each number, determine what to append to the result: - If the number is divisible by `div1` and `div2`, append the value associated with their least common multiple (LCM) in `word_map`. - If the number is divisible by `div1`, but not `div2`, append the value associated with `div1` in `word_map`. - If the number is divisible by `div2`, but not `div1`, append the value associated with `div2` in `word_map`. - If none of the above, append the number itself as a string. 3. Return a list of strings representing the results for each number from 1 to `n`. **Example:** ```python def custom_fizz_buzz(n, div1, div2, word_map): # Your implementation here # Example usage n = 15 div1 = 3 div2 = 5 word_map = {3: \\"Fizz\\", 5: \\"Buzz\\", 15: \\"FizzBuzz\\"} result = custom_fizz_buzz(n, div1, div2, word_map) print(result) ``` Given the parameters: - `n = 15` - `div1 = 3` - `div2 = 5` - `word_map = {3: \\"Fizz\\", 5: \\"Buzz\\", 15: \\"FizzBuzz\\"}` The function should return: ```python [ \'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\' ] ``` **Constraints:** - `n` will be at least 1. - `div1` and `div2` will be positive integers. - `word_map` will contain entries for at least `div1` and `div2`.","solution":"import math def custom_fizz_buzz(n, div1, div2, word_map): Simulates a custom FizzBuzz game from 1 to n using given divisors and word map. Args: n (int): The count up to which the game is played. div1 (int): The first divisor. div2 (int): The second divisor. word_map (dict): A dictionary mapping divisors to their respective words. Returns: list: A list of strings representing the results for each number from 1 to n. results = [] for i in range(1, n + 1): result = \\"\\" div1_div2_lcm = math.lcm(div1, div2) if i % div1_div2_lcm == 0: result = word_map[div1_div2_lcm] elif i % div1 == 0: result = word_map[div1] elif i % div2 == 0: result = word_map[div2] else: result = str(i) results.append(result) return results"},{"question":"You are required to write a function that determines whether a given year is a leap year. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not. Function Specification: 1. **Function Name**: `is_leap_year` 2. **Parameters**: An integer `year`. 3. **Returns**: A boolean value (`True` or `False`). Detailed Requirements: - The function should contain the logic to check divisibility by 4 and 400, and the exception for end-of-century years. # Input - An integer representing `year`. # Output - Return `True` if the given `year` is a leap year. - Return `False` otherwise. # Example ```python print(is_leap_year(2024)) # Expected output: True print(is_leap_year(1900)) # Expected output: False print(is_leap_year(2000)) # Expected output: True ``` Make sure the function correctly handles the rules for leap years as specified.","solution":"def is_leap_year(year): Determines whether the given year is a leap year. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"Write a Python function named `filter_list` that filters and returns elements from a list based on a specified condition function. This condition function will be provided as an argument to `filter_list`. # Function Requirements: 1. **Function Name**: `filter_list` 2. **Parameters**: - `items`: A list of elements of any type. - `condition`: A callable (function) that takes a single argument (an element from the list) and returns a boolean value. 3. **Return Value**: A new list containing elements from `items` that satisfy the condition function. # Implementation Details: - Iterate through each element in the `items` list. - Apply the `condition` function to each element. - Include the element in the resulting list if the `condition` function returns `True` for that element. - Return the final list of filtered elements. # Example Usage: ```python def is_even(n): return n % 2 == 0 def is_positive(n): return n > 0 numbers = [1, -2, 3, 4, -5, 6] even_numbers = filter_list(numbers, is_even) positive_numbers = filter_list(numbers, is_positive) print(even_numbers) # Output: [-2, 4, 6] print(positive_numbers) # Output: [1, 3, 4, 6] ``` In this example, `filter_list` is used to create new lists of elements that are even or positive from the original `numbers` list.","solution":"def filter_list(items, condition): Filters and returns elements from items based on the condition function. Parameters: items (list): A list of elements of any type. condition (callable): A function that takes a single argument and returns a boolean. Returns: list: A list containing elements that satisfy the condition function. return [item for item in items if condition(item)]"},{"question":"**Objective:** Write a Python function named `find_largest_unique_substring` to find the length of the longest substring without repeating characters in the given string. **Function Signature:** ```python def find_largest_unique_substring(s: str) -> int: ``` **Parameters:** - `s`: A string consisting of only lowercase English letters. **Returns:** - An integer representing the length of the longest substring without repeating characters. **Constraints:** - The length of the string `s` is between `1` and `10^4`. **Context:** - You need to identify the longest contiguous substring in the given input string `s` where no characters are repeated within the substring. **Example:** ```python s = \\"abcabcbb\\" print(find_largest_unique_substring(s)) # Expected output: 3 (The substring \\"abc\\" is the longest without repeating characters) s = \\"bbbbb\\" print(find_largest_unique_substring(s)) # Expected output: 1 (The substring \\"b\\" is the longest without repeating characters) s = \\"pwwkew\\" print(find_largest_unique_substring(s)) # Expected output: 3 (The substring \\"wke\\" is the longest without repeating characters) ``` **Notes:** - Consider using the sliding window technique to keep track of the current substring and its unique characters. - The position of each character should be maintained to quickly update the start of the window when a repeating character is encountered.","solution":"def find_largest_unique_substring(s: str) -> int: char_index_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are required to write a function `calculate_statistics(numbers)` in Python that takes a list of integers and returns a dictionary with the following statistical information: mean, median, standard deviation, and the count of numbers. # Requirements: 1. **Function Name:** `calculate_statistics` 2. **Parameters:** - `numbers`: A list of integers. 3. **Function Behavior:** - The function should calculate the mean, median, and standard deviation of the provided list of integers. - Additionally, it should calculate the total count of numbers in the list. - The function should return a dictionary with keys `mean`, `median`, `std_dev`, and `count`, corresponding to their respective values. # Example Usage: ```python # Sample list of numbers numbers = [2, 4, 6, 8, 10] # Call the function to calculate statistics stats = calculate_statistics(numbers) print(stats) # Output: {\'mean\': 6, \'median\': 6, \'std_dev\': 2.8284271247461903, \'count\': 5} ``` # Objective: This problem tests your ability to compute basic statistical measures and work with dictionaries in Python.","solution":"import math def calculate_statistics(numbers): Calculate mean, median, standard deviation, and count of a list of integers. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary containing mean, median, standard deviation, and count. if not numbers: return { \'mean\': 0, \'median\': 0, \'std_dev\': 0, \'count\': 0 } count = len(numbers) mean = sum(numbers) / count sorted_numbers = sorted(numbers) middle = count // 2 if count % 2 == 0: median = (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2 else: median = sorted_numbers[middle] variance = sum((x - mean) ** 2 for x in numbers) / count std_dev = math.sqrt(variance) return { \'mean\': mean, \'median\': median, \'std_dev\': std_dev, \'count\': count }"},{"question":"Write a function to generate a unique token consisting of alphanumeric characters. The function should take an integer `length` representing the desired length of the token. The token should be randomly generated using the `secrets` library, ensuring cryptographic security. If the `length` is less than 1, the function should raise a `ValueError`. The function should output: str: A string representing the generated unique token. You should write self-contained code starting with: ``` import secrets import string def generate_unique_token(length): ```","solution":"import secrets import string def generate_unique_token(length): Generates a unique token consisting of alphanumeric characters. Parameters: length (int): The desired length of the token. Returns: str: A string representing the generated unique token. Raises: ValueError: If the length is less than 1. if length < 1: raise ValueError(\\"Length must be at least 1\\") alphabet = string.ascii_letters + string.digits token = \'\'.join(secrets.choice(alphabet) for _ in range(length)) return token"},{"question":"You need to write a Python function named `merge_sorted_arrays` that merges two already sorted arrays into one sorted array in ascending order. The function will take two parameters: `array1`, a list of integers, and `array2`, another list of integers. The function should return a single list containing all elements from both input arrays in sorted order without duplicate values. # Function Signature: ```python def merge_sorted_arrays(array1: list, array2: list) -> list: pass ``` # Parameters: - `array1` (list): A sorted list of integers. - `array2` (list): Another sorted list of integers. # Returns: - list: A sorted list containing all the unique integers from both input arrays. # Example: If the function is called with `merge_sorted_arrays([1, 3, 5], [2, 3, 6])`, the output should be `[1, 2, 3, 5, 6]`. # Constraints: - The input lists `array1` and `array2` may contain any number of elements, including zero elements. - The function should handle edge cases, such as when one or both lists are empty. - You are not allowed to use Python\'s built-in set operations to remove duplicates.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array without duplicates. Parameters: array1 (list): A sorted list of integers. array2 (list): Another sorted list of integers. Returns: list: A sorted list containing all unique integers from both input arrays. merged_array = [] i = 0 j = 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: # Add array1[i] only if it\'s not a duplicate if not merged_array or merged_array[-1] != array1[i]: merged_array.append(array1[i]) i += 1 elif array1[i] > array2[j]: # Add array2[j] only if it\'s not a duplicate if not merged_array or merged_array[-1] != array2[j]: merged_array.append(array2[j]) j += 1 else: # Add either array1[i] or array2[j] if they are equal and not a duplicate if not merged_array or merged_array[-1] != array1[i]: merged_array.append(array1[i]) i += 1 j += 1 # Process remaining elements in array1 while i < len(array1): if not merged_array or merged_array[-1] != array1[i]: merged_array.append(array1[i]) i += 1 # Process remaining elements in array2 while j < len(array2): if not merged_array or merged_array[-1] != array2[j]: merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Create a function `calculate_median_household_income(data)` that processes a list of dictionaries, where each dictionary contains information about household incomes in a given city. The function will return the median of the household incomes from the list. The specific requirements for this function `calculate_median_household_income(data)` are as follows: 1. Extract the household incomes from the list of dictionaries. 2. Calculate the median income from the extracted list. 3. Return the median income as an integer. The function will be given exactly one parameter: - `data`: A list of dictionaries where each dictionary contains a key `\'household_income\'` with an integer value representing the income of a household. Here\'s an example input list for reference: ```python data = [ {\'city\': \'CityA\', \'household_income\': 55000}, {\'city\': \'CityB\', \'household_income\': 64000}, {\'city\': \'CityC\', \'household_income\': 72000}, {\'city\': \'CityD\', \'household_income\': 48000}, {\'city\': \'CityE\', \'household_income\': 53000} ] ``` Example usage: ```python median_income = calculate_median_household_income(data) print(median_income) # Output should be 55000 ```","solution":"def calculate_median_household_income(data): Calculates and returns the median household income from a list of dictionaries. :param data: List of dictionaries, each containing \'household_income\' key with an integer value. :return: Median household income as an integer. incomes = [entry[\'household_income\'] for entry in data] incomes.sort() n = len(incomes) mid = n // 2 if n % 2 == 0: median = (incomes[mid - 1] + incomes[mid]) / 2 else: median = incomes[mid] return int(median)"},{"question":"# Problem Statement You need to write a function `merge_dicts(dict_list)` that takes a list of dictionaries `dict_list` and returns a single dictionary that contains all the keys from the dictionaries in the list. For keys that appear in multiple dictionaries, their corresponding values should be summed up. # Requirements - Assume that all values are integers. - Dictionaries in the list may have overlapping keys. - If `dict_list` is empty, the function should return an empty dictionary. # Example: ```python INPUT: [{\\"a\\": 1, \\"b\\": 2}, {\\"b\\": 3, \\"c\\": 4}, {\\"a\\": 2, \\"d\\": 5}] OUTPUT: {\\"a\\": 3, \\"b\\": 5, \\"c\\": 4, \\"d\\": 5} ``` # Function Signature ```python def merge_dicts(dict_list: list) -> dict: pass ``` # Constraints - The function should be able to handle up to 1000 dictionaries. - Keys are guaranteed to be strings and values integers. - The resulting dictionary should include all keys from the input dictionaries with their summed values.","solution":"def merge_dicts(dict_list): Merges a list of dictionaries, summing values of identical keys. Args: dict_list: List of dictionaries to merge. Returns: A single dictionary with all keys from input dictionaries and summed values. result = {} for dictionary in dict_list: for key, value in dictionary.items(): if key in result: result[key] += value else: result[key] = value return result"},{"question":"**Data Encryption using Caesar Cipher** Write a Python function `caesar_cipher` that encrypts a given string using the Caesar Cipher technique with a specified shift value. The Caesar Cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down the alphabet. The function should accept the following parameters: - `text` (str): The original string to be encrypted. - `shift` (int): The number of positions each character in the string should be shifted. - `direction` (str): The direction of the shift, either \'left\' or \'right\'. Default is \'right\'. The function should return the encrypted string. The encryption should meet the following conditions: - The function should handle both uppercase and lowercase letters. - Non-alphabetical characters should remain unchanged. - If \'left\' is specified as the direction, the shift should be to the left; if \'right\' is specified, the shift should be to the right. - The shift value can be any integer (positive or negative). # Example Usage ```python print(caesar_cipher(\\"Hello, World!\\", 3)) # Might output: \'Khoor, Zruog!\' print(caesar_cipher(\\"Hello, World!\\", 3, direction=\'left\')) # Might output: \'Ebiil, Tloia!\' print(caesar_cipher(\\"abc-XYZ\\", -2)) # Might output: \'yza-VWX\' ``` **Notes:** - Ensure that the function is properly documented. - Handle cases where `shift` is more than 26 or less than -26 by using the modulus operator. - Consider edge cases such as empty strings or strings with no alphabetical characters.","solution":"def caesar_cipher(text, shift, direction=\'right\'): Encrypts the given text using Caesar Cipher technique with the specified shift value. Parameters: text (str): The original string to be encrypted. shift (int): The number of positions each character in the string should be shifted. direction (str): The direction of the shift, either \'left\' or \'right\'. Default is \'right\'. Returns: str: The encrypted string. if direction == \'left\': shift = -shift encrypted_text = [] for char in text: if char.isalpha(): ascii_offset = 65 if char.isupper() else 97 encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return \'\'.join(encrypted_text)"},{"question":"Implement a function `find_k_largest` that, given a list of integers and an integer `k`, returns the `k`-th largest element in the list. The function should avoid sorting the entire list, aiming to achieve a time complexity of O(n log k) using a heap data structure. Your function should: 1. Use a min-heap of size `k` to keep track of the `k` largest elements seen so far. 2. Iterate through the list and maintain the heap such that it always contains the `k` largest integers. 3. Return the smallest element in the heap after processing the entire list, which represents the `k`-th largest element. # Example: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 result = find_k_largest(nums, k) print(result) # Output should be 5, as 5 is the 2nd largest element after 6 ``` # Hints: - Utilize the `heapq` module for heap operations. - Maintain a min-heap of size `k`, ensuring the root of the heap always contains the `k`-th largest element. - Insert each element, and if the size of the heap exceeds `k`, remove the smallest element to maintain the heap size. # Constraints: - You can assume `k` is always valid, 1 ≤ `k` ≤ len(nums).","solution":"import heapq def find_k_largest(nums, k): Returns the k-th largest element in the list nums. # Create a min-heap with the first k elements min_heap = nums[:k] heapq.heapify(min_heap) # Iterate through the remaining elements for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) # The root of the heap (smallest element) is the k-th largest element return min_heap[0]"},{"question":"Write a function that takes a list of strings as input and returns a dictionary with the lengths of each string as keys and lists of strings of that length as values. Ensure the output dictionary has sorted keys and the lists of strings are sorted alphabetically. The function should output: dict: A dictionary where the keys are string lengths, and the values are sorted lists of strings of that length. You should write self-contained code starting with: ``` def strings_by_length(strings: list): ```","solution":"def strings_by_length(strings: list): Returns a dictionary with the lengths of each string as keys and lists of strings of that length as values. The keys are sorted and the lists are sorted alphabetically. result = {} for string in strings: length = len(string) if length not in result: result[length] = [] result[length].append(string) sorted_result = {} for key in sorted(result.keys()): sorted_result[key] = sorted(result[key]) return sorted_result"},{"question":"In this problem, you will create a function that loads the Iris dataset from the `sklearn.datasets` module, processes it, and saves two subsets: one for training and one for testing. Your function will partially replicate the functionality seen in the code snippet you\'ve been given. This exercise will help you understand how to use the `load_iris` function from the `sklearn.datasets` module and handle basic ETL (Extract, Transform, Load) operations using pandas. The function should be named `process_iris_data`. Here are the steps you need to follow within this function: 1. Import the required packages: `pandas` as `pd`, and the `train_test_split` function from `sklearn.model_selection`. 2. Use the `load_iris()` function from `sklearn.datasets` to load the dataset. 3. Convert the dataset into a pandas DataFrame while ensuring you retain the target variable as well. 4. Split the DataFrame into a training set and a testing set using a 70-30 split. The test set should not include the target variable. 5. Save these two subsets to CSV files named `train.csv` and `test.csv` respectively, located within a directory called `iris_data`. Your resulting function signature should look like this: ```python def process_iris_data(): # Your implementation here ``` **Functionality Requirements:** 1. The function should not return any values; its role is to process the dataset and save the CSV files. 2. Ensure to use the `train_test_split` function from `sklearn.model_selection` for splitting the data.","solution":"import pandas as pd from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split def process_iris_data(): # Load the Iris dataset iris = load_iris() data = iris[\'data\'] target = iris[\'target\'] feature_names = iris[\'feature_names\'] # Create a DataFrame df = pd.DataFrame(data, columns=feature_names) df[\'target\'] = target # Split the data into training and testing sets (70% train, 30% test) train_df, test_df = train_test_split(df, test_size=0.3, random_state=42) # Save datasets to CSV files train_df.to_csv(\'iris_data/train.csv\', index=False) test_df.to_csv(\'iris_data/test.csv\', index=False)"},{"question":"You are required to implement a function called `find_most_frequent_word` that takes a string as input and returns the most frequent word in the string. If there are multiple words with the same highest frequency, return the one which appears first in the string. Words are defined as sequences of characters separated by whitespace. Here\'s the function signature: ```python def find_most_frequent_word(text: str) -> str: ``` - `text` (str): The input string containing words separated by spaces. - Returns: A string representing the most frequently occurring word. # Requirements 1. **Case Sensitivity**: Treat words with different cases (e.g., \\"Word\\" and \\"word\\") as the same word in a case-insensitive manner, but return the word with the case it first appears in. 2. **Punctuation**: Do not consider punctuation as part of words. You may assume the input string contains only letters and common punctuation marks (e.g., commas, periods, exclamation points). # Example Usage ```python text1 = \\"apple banana banana apple apple kiwi\\" print(find_most_frequent_word(text1)) # Output: \\"apple\\" text2 = \\"Hello world! Hello everyone. Hello all.\\" print(find_most_frequent_word(text2)) # Output: \\"Hello\\" text3 = \\"This is a test. This test is only a test.\\" print(find_most_frequent_word(text3)) # Output: \\"test\\" ``` This function should correctly identify and return the most frequently occurring word in the given string, considering the outlined requirements. # Note - You must handle the input case insensitively to count word frequencies. - You can use Python\'s `collections.Counter` for counting word frequencies efficiently, but it\'s not mandatory if you prefer another approach.","solution":"import re from collections import Counter def find_most_frequent_word(text: str) -> str: Return the most frequent word in the input string. Args: text (str): The input string containing words separated by spaces. Returns: str: The most frequently occurring word. # Normalize to lower case and remove punctuation words = re.findall(r\'bw+b\', text.lower()) if not words: return \\"\\" # Create a word frequency counter word_counter = Counter(words) # Find the most frequent word(s) most_common_count = word_counter.most_common(1)[0][1] most_common_words = [word for word, count in word_counter.items() if count == most_common_count] # Return the earliest most frequent word as it appears in the original text for word in re.findall(r\'bw+b\', text): if word.lower() in most_common_words: return word"},{"question":"You are required to create a function named `knapsackSolver(weights, values, capacity)` that solves the 0/1 Knapsack Problem using dynamic programming. This function will determine the maximum value that can be obtained under the given capacity constraints. # Detailed Requirements: 1. **Input**: - `weights` (a list of integers): Represents the weights of the items. - `values` (a list of integers): Represents the values of the items. - `capacity` (an integer): The maximum weight capacity of the knapsack. 2. **Output**: - Returns an integer representing the maximum value that can be achieved with the given constraints. 3. **Plan**: - Use a dynamic programming approach to solve the 0/1 Knapsack Problem. - Create a 2D list (table) where the rows represent items and the columns represent weight capacities up to the given capacity. - Use the values in the table to build up the solution, keeping track of the maximum value possible for each capacity. 4. **Dynamic Programming Table Construction**: - Initialize a DP table with dimensions `(number_of_items+1) x (capacity+1)`, filled with zeros. - Iterate through each item and for each weight capacity, decide whether to include the current item or not, updating the table accordingly. # Task: - Implement the function `knapsackSolver` with the above specifications. # Example: ```python weights = [1, 3, 4, 5] values = [1, 4, 5, 7] capacity = 7 print(knapsackSolver(weights, values, capacity)) # Expected Output: 9 ``` Good luck!","solution":"def knapsackSolver(weights, values, capacity): Solves the 0/1 Knapsack Problem using dynamic programming. :param weights: List of item weights. :param values: List of item values. :param capacity: Maximum weight capacity of the knapsack. :return: Maximum value possible with given capacity constraints. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] # Iterate through items for i in range(1, n + 1): # Iterate through capacities for w in range(1, capacity + 1): if weights[i - 1] <= w: # If including the item gives a higher value, include it dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: # Otherwise, do not include the item dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"**Dungeon Treasure Hunt** In this problem, you will be simulating a simple 2D grid-based dungeon where a player must collect all treasure chests. The dungeon is represented by an `n x m` grid where each cell can either be empty (\'.\'), a wall (\'#\'), or contain a treasure chest (\'T\'). The player starts at the top-left corner of the dungeon grid (0, 0) and can move to adjacent cells (up, down, left, right) but cannot move through walls. The goal is to determine if the player can collect all treasures and return to the starting position. You are required to write a function named `can_collect_all_treasures` that takes the dungeon grid as input and returns `True` if it is possible for the player to collect all treasures and return to the starting position, otherwise returns `False`. **Function Signature:** ```python def can_collect_all_treasures(dungeon: List[List[str]]) -> bool: ``` **Requirements:** 1. Implement a search algorithm (DFS/BFS) to navigate through the grid. 2. Ensure that the player explores all paths and collects all treasures before returning to the start. 3. Consider edge cases such as no treasures, impassable dungeons, or isolated treasures. *Example:* For `dungeon = [ [\'.\', \'.\', \'T\', \'.\'], [\'#\', \'#\', \'.\', \'.\'], [\'.\', \'T\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ]` The function call `can_collect_all_treasures(dungeon)` should return `True` as the player can collect all treasures and return to the starting point. For `dungeon = [ [\'.\', \'#\', \'T\', \'.\'], [\'#\', \'#\', \'.\', \'.\'], [\'.\', \'T\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ]` The function call `can_collect_all_treasures(dungeon)` should return `False` as the player cannot access the second treasure. Implement your solution below.","solution":"from typing import List, Tuple from collections import deque def can_collect_all_treasures(dungeon: List[List[str]]) -> bool: n = len(dungeon) m = len(dungeon[0]) # Function to get all valid moves from a given position def get_neighbors(x: int, y: int) -> List[Tuple[int, int]]: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and dungeon[nx][ny] != \'#\': yield nx, ny def bfs(start: Tuple[int, int]) -> Tuple[bool, int]: queue = deque([start]) visited = set([start]) treasures_collected = 0 total_treasures = sum(row.count(\'T\') for row in dungeon) while queue: x, y = queue.popleft() if dungeon[x][y] == \'T\': treasures_collected += 1 for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) can_return = (0, 0) in visited return can_return and treasures_collected == total_treasures # Initial check if the starting position is accessible if dungeon[0][0] == \'#\': return False return bfs((0, 0))"},{"question":"You are required to write a function `find_prime_pair` that takes an even integer n (greater than 2) and returns two prime numbers whose sum is equal to n. One of the prime numbers should be as small as possible. Return these numbers as a tuple `(p1, p2)`, where `p1` is the smaller prime. To achieve this, make sure you use an efficient algorithm to check for primes and iterate through possible prime pairs. The function signature should be: ```python def find_prime_pair(n: int) -> (int, int): ... ``` The function should raise a ValueError if `n` is not an even integer greater than 2. For this exercise, you may assume that the input number will always be an even number greater than 2, and no need to handle extremely large numbers, thus the algorithm complexity will suffice with typical sieve or prime-checking methods. **Example:** If the input integer is `8`, then executing `find_prime_pair(8)` could return `(3, 5)`. If the input integer is `20`, then executing `find_prime_pair(20)` could return `(7, 13)`.","solution":"def find_prime_pair(n: int) -> (int, int): Returns two prime numbers whose sum is equal to n. One of the prime numbers should be as small as possible. if n <= 2 or n % 2 != 0: raise ValueError(\\"Input must be an even integer greater than 2\\") def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True for p1 in range(2, n // 2 + 1): p2 = n - p1 if is_prime(p1) and is_prime(p2): return p1, p2 # If no pair is found, though logically guaranteed for even n > 2, we return None return None"},{"question":"In this problem, we will dive into working with linked lists, a fundamental data structure in computer science. The task involves creating a function that manipulates a singly linked list to resolve a specific problem. You are given a singly linked list where each node contains an integer value. Your task is to write a function named `remove_duplicates()`, which removes all duplicate values from the linked list such that each value appears only once. Write the function with the following requirements: 1. The function should take the head of the linked list as input. 2. The function should modify the linked list in-place, removing duplicate nodes. 3. The function should return the head of the modified linked list. Here is the definition for a singly linked list node: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` And an example of how the linked list might be structured is as follows: ```python # Example input linked list: 1 -> 2 -> 3 -> 2 -> 4 -> 1 # After calling remove_duplicates(), the linked list would be: 1 -> 2 -> 3 -> 4 head = ListNode(1) head.next = ListNode(2) head.next.next = ListNode(3) head.next.next.next = ListNode(2) head.next.next.next.next = ListNode(4) head.next.next.next.next.next = ListNode(1) ``` To solve this problem, you may use extra space to keep track of seen values as set and iterate through the linked list to ensure no node contains a duplicate value.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Remove duplicates from the linked list. if head is None: return None current = head seen = set() # Set to store seen values seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next # Skip the node if duplicate else: seen.add(current.next.val) current = current.next return head # Helper function for testing: creates a list from the linked list values def list_from_linked_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result"},{"question":"You are tasked with creating a function `array_reshape_max(matrix: List[List[int]], m: int, n: int) -> List[List[int]]` that reshapes a given 2D list `matrix` into a new 2D list with dimensions `m x n`. If there aren\'t enough elements to fill the new shape, fill in the remaining positions with the maximum value found in the original matrix. Function Signature: ```python def array_reshape_max(matrix: List[List[int]], m: int, n: int) -> List[List[int]]: ``` # Input: - `matrix`: A 2D list of integers. - `m`: An integer representing the number of rows of the new matrix. - `n`: An integer representing the number of columns of the new matrix. # Output: - A reshaped 2D list of integers with the specified dimensions `m x n`. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], ] m, n = 3, 3 print(array_reshape_max(matrix, m, n)) ``` Expected Output: ```python [ [1, 2, 3], [4, 5, 6], [6, 6, 6], ] ``` Make sure to test your function comprehensively, handle edge cases where necessary, and ensure that all values are correctly placed in the new matrix according to the rule.","solution":"from typing import List def array_reshape_max(matrix: List[List[int]], m: int, n: int) -> List[List[int]]: Reshape a given 2D list `matrix` into a new 2D list with dimensions `m x n`. If there aren\'t enough elements to fill the new shape, fill in the remaining positions with the maximum value found in the original matrix. # Flatten the original matrix flattened = [element for row in matrix for element in row] # Find the maximum value in the original matrix max_value = max(flattened) if flattened else 0 # Initialize the reshaped matrix with max_value reshaped_matrix = [[max_value for _ in range(n)] for _ in range(m)] # Fill in the reshaped matrix with elements from the original matrix for i in range(m): for j in range(n): if flattened: reshaped_matrix[i][j] = flattened.pop(0) else: break # No more elements to add, rest will remain max_value return reshaped_matrix"},{"question":"You are required to create a function that evaluates the performance of a logistic regression classifier by calculating the confusion matrix and the classification report, which includes measures like precision, recall, F1-score, and accuracy. The function should take as input the predicted labels and the actual labels of a dataset. Function Name: `evaluate_classifier` # Detailed Requirements: 1. **Input Parameters:** - `predicted_labels` (list of integers): The predicted labels output by the classifier (binary classification: 0 or 1). - `true_labels` (list of integers): The actual labels of the dataset (binary classification: 0 or 1). 2. **Process:** - Use the `confusion_matrix` function to compute the confusion matrix from the `true_labels` and `predicted_labels`. - Use the `classification_report` function to generate a detailed classification report. - Print the confusion matrix and classification report to the console. 3. **Output:** - None; the function should print the results to the console. # Additional Information: Use the following libraries: - `sklearn.metrics.confusion_matrix` - `sklearn.metrics.classification_report` # Sample Usage: ```python evaluate_classifier([1, 0, 1, 1, 0], [1, 0, 0, 1, 0]) ``` This call should print out the confusion matrix and the classification report based on the given predicted and true labels. # Example Output: ``` Confusion Matrix: [[2 0] [1 2]] Classification Report: precision recall f1-score support 0 0.67 1.00 0.80 2 1 1.00 0.67 0.80 3 accuracy 0.80 5 macro avg 0.83 0.83 0.80 5 weighted avg 0.87 0.80 0.80 5 ``` # Constraints: - The length of `predicted_labels` and `true_labels` will be the same. - The labels should only contain binary classes: 0 and 1. # Objective: The aim of this problem is to practice evaluating the performance of classification models using `sklearn`\'s metrics.","solution":"from sklearn.metrics import confusion_matrix, classification_report def evaluate_classifier(predicted_labels, true_labels): Prints the confusion matrix and classification report for a logistic regression classifier. Parameters: predicted_labels (list of int): The predicted labels output by the classifier (binary classification: 0 or 1) true_labels (list of int): The actual labels of the dataset (binary classification: 0 or 1) Returns: None: The function prints the results to the console cm = confusion_matrix(true_labels, predicted_labels) cr = classification_report(true_labels, predicted_labels) print(\\"Confusion Matrix:\\") print(cm) print(\\"nClassification Report:\\") print(cr)"},{"question":"Reads a JSON file containing hierarchical data into a Pandas DataFrame, then flattens the hierarchical structure so that each level is represented as a separate column. Returns the flattened DataFrame. The function should output: pd.DataFrame: A DataFrame where nested JSON structures are flattened such that nested keys are combined into column names with periods separating levels. You should write self-contained code starting with: ``` import pandas as pd import json def flatten_json_file(input_file): ```","solution":"import pandas as pd import json def flatten_dict(d, parent_key=\'\', sep=\'.\'): Helper function to flatten a nested dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) def flatten_json_file(input_file): Reads a JSON file containing hierarchical data and flattens it into a Pandas DataFrame. Params: input_file (str): The path to the input JSON file. Returns: pd.DataFrame: A DataFrame where nested JSON structures are flattened. with open(input_file, \'r\') as f: data = json.load(f) if isinstance(data, list): flattened_data = [flatten_dict(item) for item in data] else: flattened_data = [flatten_dict(data)] return pd.DataFrame(flattened_data)"},{"question":"You are tasked with creating a function that identifies the length of the largest contiguous subarray where the difference between the maximum and minimum values of the subarray does not exceed a given integer `k`. Your goal is to implement this function to efficiently compute the length of the longest subarray under the specified condition. You can use Python\'s `collections.deque` for managing the subarray elements effectively. **Function Signature:** ```python def longest_subarray_length(nums: List[int], k: int) -> int: ``` **Parameters:** - `nums`: A list of integers representing the array. - `k`: An integer representing the maximum allowed difference between the maximum and minimum values within a subarray. **Returns:** - An integer representing the length of the longest contiguous subarray where the difference between the maximum and minimum values does not exceed `k`. **Example:** ```python nums = [10, 1, 2, 4, 7, 2] k = 5 result = longest_subarray_length(nums, k) ``` After running the above, `result` should be `4` as the longest subarray meeting the condition is `[2, 4, 7, 2]`. Another example: ```python nums = [4, 8, 5, 1, 7, 9] k = 6 result = longest_subarray_length(nums, k) ``` After running the above, `result` should be `3` as the longest subarray meeting the condition is `[4, 8, 5]` or `[5, 1, 7]`. In your implementation, make sure to handle edge cases where the list may be empty and use `collections.deque` to efficiently manage sliding windows.","solution":"from typing import List from collections import deque def longest_subarray_length(nums: List[int], k: int) -> int: if not nums: return 0 max_deque, min_deque = deque(), deque() left = 0 max_length = 0 for right, num in enumerate(nums): while max_deque and num > max_deque[-1]: max_deque.pop() while min_deque and num < min_deque[-1]: min_deque.pop() max_deque.append(num) min_deque.append(num) while max_deque[0] - min_deque[0] > k: if max_deque[0] == nums[left]: max_deque.popleft() if min_deque[0] == nums[left]: min_deque.popleft() left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are tasked with developing a function that analyzes and visualizes the progress of a machine learning model training process. The `training_session` object logs the loss values, accuracy metrics, and the number of epochs. Your goal is to generate an insightful visualization that includes the loss and accuracy trends over epochs and displays the model\'s parameters. Write a function `plot_training_progress(training_session)` that performs the following steps: 1. Extract the loss values and accuracy metrics from `training_session.logs`. 2. Create a `matplotlib` figure with two subplots: - The top plot shows the loss values over the epochs. - The bottom plot displays the accuracy metrics over the epochs. 3. Ensure to clear any previously open plots to avoid overlaps. 4. Incorporate a title in the figure, summarizing the main hyperparameters: learning rate (`learning_rate`) and batch size (`batch_size`). 5. Ensure the figure is displayed correctly using `matplotlib.pyplot.show`. Parameters: - `training_session`: An object containing logs of the training process. Its structure is as follows: ```python training_session.logs = { \'loss\': [list of floats], # Loss values over epochs \'accuracy\': [list of floats], # Accuracy metrics over epochs } training_session.learning_rate = float # Learning rate parameter training_session.batch_size = int # Batch size parameter ``` Use the following APIs from `matplotlib.pyplot`: - `matplotlib.pyplot.show` - `matplotlib.pyplot.close` Implement the function `plot_training_progress(training_session)`.","solution":"import matplotlib.pyplot as plt def plot_training_progress(training_session): Plots the loss and accuracy trends over epochs from the training session. Parameters: - training_session: An object with a \'logs\' attribute containing \'loss\' and \'accuracy\', and attributes \'learning_rate\' and \'batch_size\'. # Extract logs from the training session loss_values = training_session.logs[\'loss\'] accuracy_values = training_session.logs[\'accuracy\'] learning_rate = training_session.learning_rate batch_size = training_session.batch_size # Clear any previous plots plt.close(\'all\') # Create a figure with two subplots fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8)) # Plot loss values ax1.plot(loss_values, label=\'Loss\', color=\'b\') ax1.set_title(\'Loss Over Epochs\') ax1.set_xlabel(\'Epochs\') ax1.set_ylabel(\'Loss\') ax1.legend() # Plot accuracy values ax2.plot(accuracy_values, label=\'Accuracy\', color=\'g\') ax2.set_title(\'Accuracy Over Epochs\') ax2.set_xlabel(\'Epochs\') ax2.set_ylabel(\'Accuracy\') ax2.legend() # Main title summarizing hyperparameters fig.suptitle(f\'Training Progress (Learning Rate: {learning_rate}, Batch Size: {batch_size})\') # Show the figure plt.show()"},{"question":"You are given a web server log containing IP addresses and timestamps. Your task is to identify unusual activity patterns by finding the IP addresses that have made requests significantly more often than others within a given time window. Your function `detect_anomalies` should: 1. Take an array of log entries, each consisting of an IP address and a timestamp. 2. Identify the IP addresses that have made requests more than a specific threshold within any 10-minute window. **Input:** - An array `logs` where each element is a tuple containing an IP address (as a string) and a timestamp (as a string in the format `\'YYYY-MM-DD HH:MM:SS\'`). - An integer `threshold` indicating the number of requests that is considered unusual within a 10-minute window. **Output:** - Return a list of IP addresses that have made requests more than the threshold number within any 10-minute window. **Examples:** ```python logs = [ (\\"192.168.1.1\\", \\"2023-01-01 12:00:00\\"), (\\"192.168.1.2\\", \\"2023-01-01 12:02:00\\"), (\\"192.168.1.1\\", \\"2023-01-01 12:05:00\\"), (\\"192.168.1.1\\", \\"2023-01-01 12:03:00\\"), (\\"192.168.1.1\\", \\"2023-01-01 12:09:00\\"), (\\"192.168.1.2\\", \\"2023-01-01 12:18:00\\"), (\\"192.168.1.1\\", \\"2023-01-01 12:15:00\\"), ] threshold = 3 output = detect_anomalies(logs, threshold) print(output) # Output: [\\"192.168.1.1\\"] ``` **Notes:** - You may assume the log entries are sorted by timestamp. - Timestamps within the log entries are unique. - Use Python\'s datetime library to handle timestamp comparisons and manipulations. # Skeleton Code: ```python from datetime import datetime, timedelta from collections import defaultdict def detect_anomalies(logs, threshold): # Dictionary to hold lists of timestamps for each IP log_dict = defaultdict(list) # Populate the dictionary for ip, time_stamp in logs: log_dict[ip].append(datetime.strptime(time_stamp, \\"%Y-%m-%d %H:%M:%S\\")) # List to hold IPs exceeding the threshold unusual_ips = [] # Iterate through the dictionary and check each IP\'s request pattern for ip, time_stamps in log_dict.items(): # Check for more than \'threshold\' requests within any 10-minute window for i in range(len(time_stamps)): count = 1 for j in range(i + 1, len(time_stamps)): if time_stamps[j] < time_stamps[i] + timedelta(minutes=10): count += 1 else: break if count > threshold: unusual_ips.append(ip) break return unusual_ips ```","solution":"from datetime import datetime, timedelta from collections import defaultdict def detect_anomalies(logs, threshold): Identifies IP addresses that have made requests more than `threshold` times within any 10-minute window. Parameters: logs (list of tuples): List containing (IP address, timestamp) tuples. threshold (int): The number of requests considered unusual within a 10-minute window. Returns: list of str: List of IP addresses that have surpassed the threshold within any 10-minute window. # Dictionary to hold lists of timestamps for each IP log_dict = defaultdict(list) # Populate the dictionary for ip, timestamp in logs: log_dict[ip].append(datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\")) # List to hold IPs exceeding the threshold unusual_ips = [] # Iterate through the dictionary and check each IP\'s request pattern for ip, timestamps in log_dict.items(): # Use sliding window technique to check each IP\'s request count within any 10-minute window for i in range(len(timestamps)): count = 1 # Initialize count for the current window start_time = timestamps[i] for j in range(i + 1, len(timestamps)): if timestamps[j] <= start_time + timedelta(minutes=10): # Check if within 10 minutes window count += 1 else: break if count > threshold: unusual_ips.append(ip) break return unusual_ips"},{"question":"You are required to write a function named `longest_consecutive_segment` that takes a 1D NumPy array `A` as input. The function should find the longest segment of consecutive identical values in the array and return the value of the segment and its length as a tuple. If there are multiple segments of the same maximum length, return the segment that appears first. Use the following NumPy functions in your implementation: - `numpy.split` - `numpy.diff` - `numpy.where` Here is an illustrative example to clarify the requirements: **Function Signature:** ```python def longest_consecutive_segment(A: np.ndarray) -> tuple: ``` **Example:** Given the following 1D array `A`: ```python A = np.array([1, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1, 2]) ``` Calling `longest_consecutive_segment(A)` should return the value of the segment and its length as a tuple. Thus it should return `(1, 4)` because the longest segment of consecutive identical values is of `1`s and has a length of `4`.","solution":"import numpy as np def longest_consecutive_segment(A: np.ndarray) -> tuple: Finds the longest segment of consecutive identical values in the array A. Returns the value of the segment and its length as a tuple. if A.size == 0: return None, 0 # Identify where consecutive elements are different diff_indices = np.where(np.diff(A) != 0)[0] + 1 # Split the array into segments where the consecutive elements are the same segments = np.split(A, diff_indices) # Find the longest segment longest_segment = max(segments, key=len) return longest_segment[0], len(longest_segment)"},{"question":"Write a Python function named `find_sublist_sums` that takes in an integer list `lst` and an integer `k`, and returns a list of all the contiguous sublists of `lst` of length `k` along with their respective sums. Each element in the returned list should be a tuple, where the first item is the contiguous sublist and the second item is the sum of that sublist. The function should: 1. Validate that `k` is greater than 0 and no larger than the length of `lst`. 2. Iterate through the list to find all possible contiguous sublists of length `k`. 3. Calculate the sum of each sublist as it is generated. 4. Return a list of tuples containing each sublist and its corresponding sum. Below is an example of input parameters you might use: ```python lst = [1, 2, 3, 4, 5] k = 3 ``` Expected Output: ```python [ ([1, 2, 3], 6), ([2, 3, 4], 9), ([3, 4, 5], 12) ] ``` Use this example to test your function.","solution":"def find_sublist_sums(lst, k): Returns a list of tuples where each tuple contains a contiguous sublist of length k and its sum. If k is not greater than 0 or is larger than the length of lst, returns an empty list. if k <= 0 or k > len(lst): return [] result = [] for i in range(len(lst) - k + 1): sublist = lst[i:i + k] sublist_sum = sum(sublist) result.append((sublist, sublist_sum)) return result"},{"question":"In this task, you will create a function that partitions a list of integers into two sub-lists based on a given pivot element such that all elements less than the pivot are on the left and all elements greater than or equal to the pivot are on the right. Write a function named `partition_list` that performs the following steps: 1. It takes two parameters: - `lst`: a list of integers. - `pivot`: an integer element that acts as the partitioning pivot. 2. The function should iterate through the list and partition it into two sub-lists: - `left`: contains all elements less than the pivot. - `right`: contains all elements greater than or equal to the pivot. 3. Combine the `left` and `right` lists in that order and return the resulting list. Implement the function `partition_list(lst, pivot)` according to the outlined behavior. **Example Usage:** ```python lst = [4, 1, 9, 2, 5, 6, 3, 8] pivot = 5 result = partition_list(lst, pivot) print(result) # Output: [4, 1, 2, 3, 9, 5, 6, 8] ``` **Constraints:** - The list `lst` can have any number of elements including zero. - All elements in the list are unique. - The pivot can be any integer, even if it is not present in the list. **Note:** - You do not have to maintain the order of elements in each partition. - The pivot value itself should appear in the right sub-list if it is present in `lst`.","solution":"def partition_list(lst, pivot): Partitions the list into elements less than the pivot and elements greater than or equal to the pivot. :param lst: List of integers. :param pivot: The pivot integer for partitioning. :return: New list with elements less than pivot first, followed by elements greater than or equal to pivot. left = [x for x in lst if x < pivot] right = [x for x in lst if x >= pivot] return left + right"},{"question":"Your task is to create a Python function `find_prime_factors(number)` that computes and returns the prime factors of a given integer. The function will identify all prime factors of the provided `number` and return them in a sorted list. # Detailed Description: 1. **Input**: - `number` (int): An integer greater than 1, for which the prime factors are to be found. 2. **Output**: - The function should return a sorted list of the prime factors of the given `number`. 3. **Prime Factorization**: - Prime factors are the prime numbers that divide the given number exactly, without leaving a remainder. # Steps to Implement the Function: - Begin with an empty list to store the prime factors. - Use a loop to check divisibility starting from the smallest prime number (2). - If a prime number divides `number`, add it to the list and divide `number` by that prime number. - Repeat the process until `number` is reduced to 1. - If a prime number does not divide the `number`, move to the next integer and continue. # Example Usage: ```python # Prime factors of 28 are 2, 2, and 7. find_prime_factors(28) # Output: [2, 2, 7] # Prime factors of 84 are 2, 2, 3, and 7. find_prime_factors(84) # Output: [2, 2, 3, 7] ``` # Requirements: - Implement the function `find_prime_factors(number)` to find and return the prime factors of the input number. - Ensure the prime factors are returned in a sorted list. - Use efficient algorithms to determine the prime factors to handle large numbers effectively. Implement the function `find_prime_factors` that meets the above requirements.","solution":"def find_prime_factors(number): Returns the prime factors of the given integer sorted in ascending order. if number < 2: return [] prime_factors = [] divisor = 2 while number >= divisor: while (number % divisor) == 0: prime_factors.append(divisor) number //= divisor divisor += 1 return prime_factors"},{"question":"You are tasked with writing a Python function called `analyze_scores` to compute summary statistics for a list of student test scores. This function will take in a single argument: 1. `scores` (a list of integers representing the test scores, where each score is between 0 and 100 inclusive). The function should return a dictionary with the following keys: - `\'mean\'`: the average score (a float rounded to two decimal places), - `\'median\'`: the median score (an integer value), - `\'mode\'`: the mode score (an integer value). If there is more than one mode, the lowest value should be returned, - `\'range\'`: the range of the scores (an integer representing the difference between the highest and lowest scores). You should not use any external libraries like `numpy` or `statistics`. Implement the functions for calculating the mean, median, mode, and range manually. Function signature: ```python def analyze_scores(scores) -> dict: ... ``` **Example:** ```python analyze_scores([70, 80, 90, 100, 85, 70, 90]) ``` should output: ```python { \'mean\': 83.57, \'median\': 85, \'mode\': 70, \'range\': 30 } ``` **Requirements:** - Do not use any external libraries for statistical computation. - Ensure the correct handling of edge cases, such as an empty list of scores (return `None` for all dictionary values if the list is empty). - Make sure the final values are formatted correctly (mean as float rounded to two decimal places, median and mode as integers).","solution":"def analyze_scores(scores): if not scores: return {\'mean\': None, \'median\': None, \'mode\': None, \'range\': None} scores_sorted = sorted(scores) n = len(scores) # Calculate mean mean = round(sum(scores) / n, 2) # Calculate median if n % 2 == 1: median = scores_sorted[n // 2] else: median = (scores_sorted[n // 2 - 1] + scores_sorted[n // 2]) // 2 # Calculate mode frequency = {} for score in scores: if score in frequency: frequency[score] += 1 else: frequency[score] = 1 max_freq = max(frequency.values()) mode_candidates = [score for score, freq in frequency.items() if freq == max_freq] mode = min(mode_candidates) # Calculate range range_scores = max(scores) - min(scores) return { \'mean\': mean, \'median\': median, \'mode\': mode, \'range\': range_scores }"},{"question":"# Matrix Spiral Traversal In this problem, you will write a function that takes a 2D matrix (a list of lists) of any size and returns the elements of the matrix in spiral order. The traversal should start from the top-left element and proceed in a clockwise spiral direction. Function Specification - **Function Name:** `spiral_order` - **Input Argument:** - `matrix` (list of lists): A 2D matrix containing integers. - **Output:** - Returns a list of integers in spiral order. Example ```python # Sample input matrix matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Expected output: [1, 2, 3, 6, 9, 8, 7, 4, 5] result = spiral_order(matrix) ``` Requirements 1. The function should handle matrices of any size, including non-square matrices. 2. The traversal must start from the top-left element of the matrix and follow a clockwise spiral path around the matrix. 3. Ensure the output list preserves the order of elements visited in the spiral path. Notes - If the input matrix is empty, the function should return an empty list.","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. if not matrix or not matrix[0]: return [] result = [] top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for col in range(left, right + 1): result.append(matrix[top][col]) top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): result.append(matrix[row][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for col in range(right, left - 1, -1): result.append(matrix[bottom][col]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for row in range(bottom, top - 1, -1): result.append(matrix[row][left]) left += 1 return result"},{"question":"You are required to write a function that fetches the current weather information for a given city using an external API and then processes this data to extract the temperature in Celsius. Function Name: `get_current_temperature` Parameters: - `city` (string): The name of the city for which the weather data is to be fetched. Task: 1. Construct the URL for fetching the weather data by concatenating a base URL, `weather_api_url`, an endpoint, and appending the `city` parameter. 2. Use the `requests.get` method from the `requests` library to send a GET request to the constructed URL and fetch the response. 3. The response received will be in a JSON format. Parse the response string into a Python dictionary using the `json.loads` method from the `json` library. 4. Extract the temperature in Celsius from the dictionary, which is located under specific keys (hint: navigate through nested dictionaries). 5. Return the temperature in Celsius as a floating-point number. Here is the starting code snippet for context: ```python import requests import json weather_api_url = \\"https://api.openweathermap.org/data/2.5/weather?appid=YOUR_API_KEY&q=\\" ``` Note: Replace `YOUR_API_KEY` with an actual API key from OpenWeatherMap.","solution":"import requests weather_api_url = \\"https://api.openweathermap.org/data/2.5/weather?appid=YOUR_API_KEY&q=\\" def get_current_temperature(city): Fetches the current weather information for a given city and returns the temperature in Celsius. Parameters: city (string): The name of the city for which the weather data is to be fetched. Returns: float: The temperature in Celsius. # Construct the URL to fetch the weather data url = weather_api_url + city # Send GET request to the constructed URL response = requests.get(url) # Parse the response into a dictionary weather_data = response.json() # Extract temperature in Kelvin from the dictionary temp_kelvin = weather_data[\'main\'][\'temp\'] # Convert temperature to Celsius temp_celsius = temp_kelvin - 273.15 return temp_celsius"},{"question":"# Title: Implement a Custom Data Structure for Storing Intervals You are required to implement a custom data structure in Python for storing a collection of intervals. This data structure will support insertion of intervals and checking for overlaps with any existing intervals in the collection. # Data Structure Specification - **Class Name:** `IntervalCollection` - **Methods:** - `__init__(self)`: Constructor to initialize the data structure. - `add_interval(self, start, end)`: Method to add a new interval to the collection. The interval is represented by a start and end point where `start` < `end`. - `has_overlap(self, start, end)`: Method to check if a given interval overlaps with any interval in the collection. # Overlapping Definition Two intervals [a, b] and [c, d] overlap if and only if `a < d` and `c < b`. # Example ```python # Example usage: collection = IntervalCollection() collection.add_interval(1, 5) collection.add_interval(10, 15) print(collection.has_overlap(3, 7)) # Should return True because [3, 7] overlaps with [1, 5] print(collection.has_overlap(6, 9)) # Should return False because [6, 9] does not overlap with any existing intervals collection.add_interval(6, 9) print(collection.has_overlap(7, 8)) # Should return True because [7, 8] overlaps with [6, 9] ``` # Constraints 1. You can assume that all input intervals will have integer start and end points. 2. Aim to make the `has_overlap` method efficient in finding overlaps. # Additional Notes - Ensure that the `IntervalCollection` class handles edge cases such as adding intervals that are subsets or supersets of existing intervals. - The intervals may not be given in any specific order. - Consider the efficiency of your implementation, particularly the `has_overlap` method. ```python class IntervalCollection: def __init__(self): self.intervals = [] def add_interval(self, start, end): self.intervals.append((start, end)) def has_overlap(self, start, end): for (s, e) in self.intervals: if start < e and s < end: return True return False ``` Implement the `IntervalCollection` class as described above and ensure the methods `add_interval` and `has_overlap` function correctly based on the provided examples and constraints.","solution":"class IntervalCollection: def __init__(self): self.intervals = [] def add_interval(self, start, end): Adds a new interval to the collection. :param start: The start point of the interval. :param end: The end point of the interval. self.intervals.append((start, end)) def has_overlap(self, start, end): Checks if the provided interval overlaps with any existing interval in the collection. :param start: The start point of the interval to check. :param end: The end point of the interval to check. :return: True if there is an overlap with any interval, otherwise False. for (s, e) in self.intervals: if start < e and s < end: return True return False"},{"question":"# Background In network theory, a graph is a collection of nodes (or vertices) connected by edges. There are various ways to traverse a graph, one of which is the Depth-First Search (DFS). # Problem Statement Write a function `depth_first_search` using the `collections` library to perform a depth-first traversal on a graph represented as an adjacency list and return a list of nodes in the order they are visited. The function should take the following input parameters: 1. `graph`: A dictionary representing the graph where keys are node identifiers and values are lists of adjacent nodes. 2. `start_node`: The node from which the traversal should begin. The goal is to use the `collections.deque` for the stack and a `set` to track the visited nodes during the traversal. --- # Constraints - You must use `collections.deque` for the stack implementation. - You must use a `set` to track visited nodes. - Assume that all nodes and edges are valid and the graph is connected. - Assume that the graph does not contain any cycles. # Function Signature ```python from collections import deque def depth_first_search(graph, start_node): # your implementation here ... ``` # Example Given: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [\'G\'], \'E\': [], \'F\': [], \'G\': [] } ``` and `start_node = \'A\'` Calling `depth_first_search(graph, start_node)` should return: ```python [\'A\', \'C\', \'F\', \'B\', \'E\', \'D\', \'G\'] ``` The function should perform the traversal using the following steps: 1. Initialize a stack with the `start_node`. 2. While the stack is not empty, pop the node from the stack, mark it as visited, and add it to the result list. 3. Push all unvisited adjacent nodes to the stack. --- Note: The order of the nodes in the adjacency list should be preserved when pushing them into the stack.","solution":"from collections import deque def depth_first_search(graph, start_node): Perform a depth-first traversal of a graph and return the list of nodes in the order they were visited. Args: graph (dict): A dictionary representing the graph where keys are node identifiers and values are lists of adjacent nodes. start_node: The node from which the traversal should begin. Returns: List: A list of nodes in the order they were visited. visited = set() stack = deque([start_node]) result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # Note: Adding neighbors in reverse order to maintain the correct traversal for neighbor in reversed(graph[node]): if neighbor not in visited: stack.append(neighbor) return result"},{"question":"Implement a function to identify and remove outliers in a dataset stored in a pandas DataFrame. The dataset includes numerical columns \'Age\', \'Income\', and \'Expenses\'. Use the IQR (Interquartile Range) method to detect outliers: an outlier is defined as a value that lies below Q1 - 1.5 * IQR or above Q3 + 1.5 * IQR for any of the numerical features. The function should output a DataFrame without the detected outliers. The function should start with: ``` import pandas as pd def remove_outliers(data): ```","solution":"import pandas as pd def remove_outliers(data): Remove outliers from a DataFrame based on the IQR method for \'Age\', \'Income\', and \'Expenses\' columns. Parameters: data (pd.DataFrame): The input DataFrame. Returns: pd.DataFrame: A DataFrame without the detected outliers. # Columns to check for outliers columns = [\'Age\', \'Income\', \'Expenses\'] # Calculate Q1, Q3, and IQR for each column Q1 = data[columns].quantile(0.25) Q3 = data[columns].quantile(0.75) IQR = Q3 - Q1 # Define outlier boundaries lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR # Filter out outliers filtered_data = data[~((data[columns] < lower_bound) | (data[columns] > upper_bound)).any(axis=1)] return filtered_data"},{"question":"You are tasked with writing a function `merge_sort_with_sum(arr: list) -> tuple` that performs a merge sort on an input list while simultaneously calculating the total sum of the elements in the list. The function should return a tuple containing the sorted list and the sum of the elements. To accomplish this task, you will need to implement the merge sort algorithm, which involves dividing the list into smaller parts, sorting those parts, and then merging them back together. Additionally, as you process the list, you should keep a cumulative sum of the elements. # Requirements: 1. Implement the function `merge_sort_with_sum(arr: list) -> tuple`. 2. Use the merge sort algorithm to sort the input list `arr`. 3. Calculate the sum of the elements in the list. 4. Return a tuple where the first element is the sorted list, and the second element is the sum of the elements. # Example: Suppose the input list is: - `[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]` Calling `merge_sort_with_sum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3])` should return: - `([1, 1, 2, 3, 3, 4, 5, 5, 6, 9], 39)` # Function Signature: ```python def merge_sort_with_sum(arr: list) -> tuple: pass ```","solution":"def merge_sort_with_sum(arr: list) -> tuple: Performs a merge sort on the input list while calculating the total sum of the elements in the list. Returns a tuple containing the sorted list and the sum of the elements. if not arr: return ([], 0) total_sum = sum(arr) def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): sorted_list = [] while left and right: if left[0] < right[0]: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) sorted_list.extend(left or right) return sorted_list sorted_arr = merge_sort(arr) return (sorted_arr, total_sum)"},{"question":"You are tasked with writing a function that processes a graph data structure represented as an adjacency list. The goal is to identify all connected components within the graph. A connected component is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. The function should determine and return a list of sets, where each set contains the nodes that form a connected component within the graph. The function signature is: ```python def find_connected_components(adj_list: Dict[int, List[int]]) -> List[Set[int]]: ``` # Input: - `adj_list`: A dictionary where the keys are node identifiers (integers) and the values are lists containing the identifiers of adjacent nodes. # Output: - A list of sets, with each set containing the nodes of a connected component. # Constraints: - The adjacency list represents an undirected graph. - Assume the graph does not contain any self-loops or multiple edges between any two nodes. # Example: ```python adj_list = { 1: [2, 3], 2: [1], 3: [1], 4: [5], 5: [4] } print(find_connected_components(adj_list)) ``` # Possible Output: ``` [{1, 2, 3}, {4, 5}] ```","solution":"from typing import Dict, List, Set def find_connected_components(adj_list: Dict[int, List[int]]) -> List[Set[int]]: def dfs(node, visited, component): stack = [node] while stack: n = stack.pop() if n not in visited: visited.add(n) component.add(n) stack.extend(adj_list.get(n, [])) visited = set() components = [] for node in adj_list: if node not in visited: component = set() dfs(node, visited, component) components.append(component) return components"},{"question":"You are tasked with writing a function named `top_selling_products` that determines the top N selling products from a given DataFrame. The DataFrame `sales_df` will include columns `Product` and `Quantity` where `Product` is the name of the product, and `Quantity` is the number of units sold. Your function should perform the following tasks: 1. Group the DataFrame by `Product` and aggregate the total `Quantity` sold for each product. 2. Sort the products by the aggregated `Quantity` in descending order. 3. Return a list of the top N products based on the highest sales. If there are ties in sales quantity, they should be included in the list even if it results in more than N products in the output. You should use the Pandas library to handle the DataFrame operations. ```python def top_selling_products(sales_df, N): # Your code here ``` **Example Usage:** ```python import pandas as pd data = { \'Product\': [\'Product A\', \'Product B\', \'Product A\', \'Product C\', \'Product B\', \'Product D\', \'Product C\'], \'Quantity\': [10, 5, 15, 20, 25, 5, 10] } sales_df = pd.DataFrame(data) print(top_selling_products(sales_df, 3)) ``` Expected output: ``` [\'Product B\', \'Product C\', \'Product A\'] ```","solution":"import pandas as pd def top_selling_products(sales_df, N): Returns a list of the top N selling products based on total quantity sold. If there are ties, they are included even if the list exceeds N products. # Group by Product and sum the Quantity sold grouped_df = sales_df.groupby(\'Product\').sum().reset_index() # Sort by the Quantity in descending order sorted_df = grouped_df.sort_values(by=\'Quantity\', ascending=False) # Determine the cutoff quantity for the top N products by finding the Nth value if N <= len(sorted_df): cutoff_quantity = sorted_df.iloc[N-1][\'Quantity\'] else: cutoff_quantity = sorted_df.iloc[-1][\'Quantity\'] # Return products whose quantity meets or exceeds the cutoff top_products_df = sorted_df[sorted_df[\'Quantity\'] >= cutoff_quantity] return top_products_df[\'Product\'].tolist()"},{"question":"Create a Python function, `rotate_matrix`, which takes an `n x n` matrix `matrix` and an integer `k`. The function should rotate the matrix 90 degrees clockwise `k` times in-place. - The function should modify the original matrix and should not return a new matrix. - You must handle different values of `k` efficiently. For example: - If `k` is 1, rotate the matrix 90 degrees clockwise once. - If `k` is 2, rotate the matrix 90 degrees clockwise twice (equivalent to 180 degrees). - If `k` is 4 or any multiple of 4, the matrix should remain unchanged. To help users understand how the function is expected to work, provide examples like: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix, 1) print(matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] rotate_matrix(matrix, 3) print(matrix) # Expected output: # [ # [9, 6, 3], # [8, 5, 2], # [7, 4, 1] # ] ``` Ensure the function handles edge cases, such as when `k` is 0 or negative, appropriately.","solution":"def rotate_matrix(matrix, k): Rotates the given n x n matrix 90 degrees clockwise k times in-place. Args: matrix: List of List of int, the matrix to be rotated. k: int, the number of times to rotate the matrix 90 degrees clockwise. n = len(matrix) k = k % 4 # Since every 4 rotations return the matrix to its original state for _ in range(k): # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"In this exercise, you will practice working with dictionaries and manipulating string data in Python. The goal is to write a function that generates a frequency count of each character in a given string, ignoring case and excluding spaces or special characters. **Objective:** You need to write a function `char_frequency(s: str) -> dict` that performs the following tasks: 1. Processes the input string to ignore case and exclude non-alphanumeric characters. 2. Counts the frequency of each character in the processed string. 3. Returns a dictionary with characters as keys and their respective frequencies as values. **Function Definition:** ```python def char_frequency(s: str) -> dict: # Your implementation goes here ``` **Specifications:** - Ignore the case of characters (i.e., treat \'A\' and \'a\' as the same). - Exclude spaces and any character that is not a letter or a digit. - Return a dictionary where keys are characters, and values are their frequencies. **Example:** When you call `char_frequency(\\"Hello, World!\\")`, the function should return: ``` {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` When you call `char_frequency(\\"Python 3.8! #Code\\")`, the function should return: ``` {\'p\': 1, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 1, \'n\': 1, \'3\': 1, \'8\': 1, \'c\': 1, \'o\': 1, \'d\': 1, \'e\': 1} ``` **Additional Notes:** - You can use string methods such as `.lower()` to handle case sensitivity. - Use dictionary operations to maintain and update the frequency count. Here is a snippet of code to help you understand the context: ```python def char_frequency(s: str) -> dict: s = \'\'.join(filter(str.isalnum, s.lower())) freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq # Example usage result = char_frequency(\\"Hello, World!\\") print(result) # Should output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def char_frequency(s: str) -> dict: Returns a frequency count of each alphanumeric character in the given string, ignoring case and excluding spaces or special characters. s = \'\'.join(filter(str.isalnum, s.lower())) freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Design a simulation that models the spread of a virus within a closed population. The population consists of `N` individuals represented within a 2D grid. Each individual can be in one of three states: Susceptible (S), Infected (I), or Recovered (R). The simulation should run over a specified number of time steps and provide a visualization of the spread. # Function Signature: ```python def virus_simulation(N: int, infection_prob: float, recover_prob: float, initial_infected: int, time_steps: int): pass ``` # Parameters: - `N` (int): The size of the population grid (NxN). - `infection_prob` (float): The probability that a susceptible individual becomes infected when in contact with an infected individual. - `recover_prob` (float): The probability that an infected individual recovers at each time step. - `initial_infected` (int): The number of initially infected individuals randomly placed on the grid. - `time_steps` (int): The total number of time steps to simulate. # Requirements: - Implement a function that initializes the population grid with `N*N` individuals, where the state of each individual is randomly initialized according to the given number of `initial_infected`. - For each time step, update the state of the population according to the infection and recovery probabilities. - Use `matplotlib` library to visualize the state of the population grid at each time step. - Color code the grid such that Susceptible individuals (S) are blue, Infected individuals (I) are red, and Recovered individuals (R) are green. - Save the visualization as a video file showing the progression over time. # Simulation Rules: 1. At each time step, each individual interacts with its immediate neighbors (up, down, left, right). 2. If a susceptible individual is adjacent to an infected individual, it has a probability of the `infection_prob` to become infected. 3. Each infected individual has a probability of the `recover_prob` to recover at each time step. 4. Recovered individuals cannot become infected again. # Example Usage: ```python virus_simulation( N=50, infection_prob=0.2, recover_prob=0.1, initial_infected=5, time_steps=100 ) ``` # Hint: Refer to the `matplotlib` documentation for creating animations using `FuncAnimation`. Use `numpy` for handling the state updates efficiently.","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation def initialize_grid(N, initial_infected): grid = np.zeros((N, N)) initial_positions = np.random.choice(N*N, initial_infected, replace=False) for pos in initial_positions: grid[pos // N, pos % N] = 1 # Initialize some people as infected return grid def update_grid(grid, infection_prob, recover_prob): N = grid.shape[0] new_grid = grid.copy() for i in range(N): for j in range(N): if grid[i, j] == 1: # Infected if np.random.rand() < recover_prob: new_grid[i, j] = 2 # Recovered elif grid[i, j] == 0: # Susceptible neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)] for neighbor in neighbors: ni, nj = neighbor if 0 <= ni < N and 0 <= nj < N and grid[ni, nj] == 1: if np.random.rand() < infection_prob: new_grid[i, j] = 1 # Become infected break return new_grid def virus_simulation(N, infection_prob, recover_prob, initial_infected, time_steps): grid = initialize_grid(N, initial_infected) fig, ax = plt.subplots() def animate(t): nonlocal grid grid = update_grid(grid, infection_prob, recover_prob) ax.clear() ax.imshow(grid, cmap=\\"viridis\\", vmin=0, vmax=2) ax.set_title(f\'Time step: {t+1}\') return Ax, ani = animation.FuncAnimation(fig, animate, frames=time_steps, blit=False, repeat=False) plt.show()"},{"question":"Given a list of integers and another list representing query operations, implement a function named `process_queries(numbers, queries)` that performs the following operations for each query: 1. Each query can be one of two types: - Type 1 query: `(\\"sum\\", start_index, end_index)` – Calculate the sum of the elements in the `numbers` list from `start_index` to `end_index` (inclusive). - Type 2 query: `(\\"update\\", index, new_value)` – Update the element at `index` in the `numbers` list to `new_value`. 2. The function should return a list of results corresponding to each \\"sum\\" query in the order they were performed. **Function Signature:** ```python def process_queries(numbers, queries): # Your code here pass ``` **Parameters:** - `numbers`: A list of integers. - `queries`: A list of tuples where each tuple represents a query. For Type 1 queries, the tuple is in the form `(\\"sum\\", start_index, end_index)`. For Type 2 queries, the tuple is in the form `(\\"update\\", index, new_value)`. **Constraints:** - The length of `numbers` will not exceed (10^4). - Each `start_index` and `end_index` in the \\"sum\\" query will be within the bounds of the list `numbers`. - Each `index` in the \\"update\\" query will be within the bounds of the list `numbers`. - The number of queries will not exceed (10^4). **Example Input/Output:** ```python numbers = [1, 2, 3, 4, 5] queries = [(\\"sum\\", 0, 2), (\\"update\\", 1, 10), (\\"sum\\", 1, 3)] print(process_queries(numbers, queries)) # Output: [6, 17] ``` **Explanation:** - The first query is `(\\"sum\\", 0, 2)`, which calculates the sum of `numbers[0] + numbers[1] + numbers[2]` resulting in `1 + 2 + 3 = 6`. - The second query is `(\\"update\\", 1, 10)`, which updates the element at index `1` to `10`, so the `numbers` list is now `[1, 10, 3, 4, 5]`. - The third query is `(\\"sum\\", 1, 3)`, which calculates the sum of `numbers[1] + numbers[2] + numbers[3]` resulting in `10 + 3 + 4 = 17`.","solution":"def process_queries(numbers, queries): Processes each query on the numbers list. Args: numbers (list of int): The list of integers to perform operations on. queries (list of tuples): The list of queries to be executed. Each tuple contains a query. Returns: list: The results of all \\"sum\\" queries. results = [] for query in queries: if query[0] == \\"sum\\": # Extract the start and end indices for the sum query start_index, end_index = query[1], query[2] sum_result = sum(numbers[start_index:end_index + 1]) results.append(sum_result) elif query[0] == \\"update\\": # Extract the index and the new value for the update query index, new_value = query[1], query[2] numbers[index] = new_value return results"},{"question":"You are given a list of integers representing the daily temperatures over a certain period. Your task is to perform some basic statistical analysis and visualize the data using `matplotlib.pyplot`. Specifically, you need to: 1. Plot a histogram to display the distribution of daily temperatures. 2. Calculate and display the mean temperature as a vertical line on the histogram. 3. Calculate and display the median temperature as another vertical line on the histogram. You need to implement the function `plot_temperature_analysis(temperatures)` which takes a list of integers and performs the visualizations as described. Input: - `temperatures`: a list of integers representing daily temperatures. Output: This function should display a histogram with: 1. The mean temperature marked with a vertical line. 2. The median temperature marked with a vertical line. 3. Legends indicating which lines represent the mean and the median temperatures. Use the `matplotlib.pyplot.hist`, `matplotlib.pyplot.axvline`, and `matplotlib.pyplot.legend` functions to accomplish this task. Calculate the mean and median using Python’s built-in libraries.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_temperature_analysis(temperatures): Plots a histogram of daily temperatures and shows the mean and median as vertical lines. Parameters: temperatures (list of int): The daily temperatures. # Calculate mean and median mean_temp = np.mean(temperatures) median_temp = np.median(temperatures) # Plot histogram plt.hist(temperatures, bins=10, edgecolor=\'black\') # Plot mean and median plt.axvline(mean_temp, color=\'red\', linestyle=\'dashed\', linewidth=2, label=f\'Mean: {mean_temp:.2f}\') plt.axvline(median_temp, color=\'blue\', linestyle=\'dashed\', linewidth=2, label=f\'Median: {median_temp:.2f}\') # Add legend plt.legend() # Labeling plt.title(\'Distribution of Daily Temperatures\') plt.xlabel(\'Temperature\') plt.ylabel(\'Frequency\') # Show plot plt.show()"},{"question":"In this problem, you will implement a function that takes a string and returns the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. The function should be case insensitive and should ignore spaces. # Function Signature ```python def most_frequent_char(s): Finds the most frequently occurring character in a string. Parameters: s (str): Input string Returns: (str): The most frequently occurring character ``` # Requirements 1. Convert the string to lowercase to ensure case insensitivity. 2. Ignore spaces in the string. 3. Use a dictionary to count the occurrences of each character. 4. Return the character with the highest frequency. 5. If there are ties (i.e., multiple characters with the same frequency), return the one that appears first in the string. # Hints - You can use the `str.lower()` method to convert the string to lowercase. - Use a dictionary to keep track of character counts. - Iterate through the string while keeping track of the first occurrence index for each character. Here is a sample usage of the function: ```python s = \\"This is a sample string\\" print(most_frequent_char(s)) # Output: \\"s\\" ``` # Constraints 1. The input string can be assumed to be non-empty. 2. The string will only contain alphabetical characters and spaces.","solution":"def most_frequent_char(s): Finds the most frequently occurring character in a string ignoring case and spaces. Parameters: s (str): Input string Returns: (str): The most frequently occurring character s = s.lower().replace(\' \', \'\') char_count = {} max_count = 0 max_char = None for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 if char_count[char] > max_count: max_count = char_count[char] max_char = char elif char_count[char] == max_count: if max_char is None or s.index(max_char) > s.index(char): max_char = char return max_char"},{"question":"In this problem, we will manipulate JSON data consisting of employee records. The goal is to filter employees based on specific criteria and then generate a summary report. The input data is stored in a JSON file where each record contains details such as employee id, name, age, department, and salary. We will use the **json** library to handle the JSON data and the **collections** library for counting elements. You need to implement a function `filter_and_summarize_employees(filepath, min_age, departments)` that reads employee data from a given JSON file, filters the employees based on the specified minimum age and departments, and then generates a summary report. The summary should include the count of employees in each department and the average salary within the filtered list. Here is the outline of the `filter_and_summarize_employees` function: 1. Read the JSON file using the `json.load` function. 2. Filter the employees based on the `min_age` and the `departments` list. 3. Calculate the count of employees in each specified department using `collections.Counter`. 4. Compute the average salary of the filtered employees. 5. Print the filtered employee records, the count of employees in each department, and the average salary. Function Signature ```python def filter_and_summarize_employees(filepath: str, min_age: int, departments: list) -> None: pass ``` **Example:** ```json [ {\\"id\\": 1, \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"department\\": \\"HR\\", \\"salary\\": 50000}, {\\"id\\": 2, \\"name\\": \\"Jane Doe\\", \\"age\\": 25, \\"department\\": \\"Engineering\\", \\"salary\\": 70000}, {\\"id\\": 3, \\"name\\": \\"Jim Beam\\", \\"age\\": 35, \\"department\\": \\"Sales\\", \\"salary\\": 65000}, {\\"id\\": 4, \\"name\\": \\"Jack Daniels\\", \\"age\\": 40, \\"department\\": \\"Finance\\", \\"salary\\": 55000} ] ``` For a given call `filter_and_summarize_employees(\'employees.json\', 30, [\'HR\', \'Sales\', \'Finance\'])`, the output should read the employees\' data from the file, filter out employees who are younger than 30, and only include those in the specified departments. Then, print the filtered records, counts for each of the departments (\'HR\', \'Sales\', \'Finance\'), and the average salary of the filtered employees. **Note:** Ensure edge cases such as no employees meeting the criteria are handled appropriately.","solution":"import json from collections import Counter from typing import List def filter_and_summarize_employees(filepath: str, min_age: int, departments: List[str]) -> None: # Read the JSON file with open(filepath, \'r\') as file: employees = json.load(file) # Filter the employees based on the min_age and departments filtered_employees = [ emp for emp in employees if emp[\'age\'] >= min_age and emp[\'department\'] in departments ] # Count employees in each department department_counts = Counter(emp[\'department\'] for emp in filtered_employees) # Calculate average salary total_salary = sum(emp[\'salary\'] for emp in filtered_employees) avg_salary = total_salary / len(filtered_employees) if filtered_employees else 0 # Print the results print(\\"Filtered Employees:\\") for emp in filtered_employees: print(emp) print(\\"nDepartment Counts:\\") for dept, count in department_counts.items(): print(f\\"{dept}: {count}\\") print(f\\"nAverage Salary: {avg_salary:.2f}\\")"},{"question":"Write a Python function named `find_maximum_subarray_sum` that finds the subarray with the maximum sum in a given list of integers `nums`. The function should return the maximum sum as an integer. You are required to use Kadane\'s Algorithm to solve this problem efficiently. Function Signature: ```python def find_maximum_subarray_sum(nums: List[int]) -> int: ``` **Constraints:** 1. The list `nums` must contain at least one integer. 2. The list can have both positive and negative integers. **Example:** ```python nums = [1, -3, 2, 1, -1] # Expected output find_maximum_subarray_sum(nums) # Output: 3 (subarray with maximum sum is [2, 1]) nums = [-2, -3, 4, -1, -2, 1, 5, -3] # Expected output find_maximum_subarray_sum(nums) # Output: 7 (subarray with maximum sum is [4, -1, -2, 1, 5]) ``` Using these constraints and examples, implement the `find_maximum_subarray_sum` function.","solution":"from typing import List def find_maximum_subarray_sum(nums: List[int]) -> int: Finds the subarray with the maximum sum in a given list of integers `nums` using Kadane\'s Algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In this problem, you are required to write a function `move_zeros` that takes a list of integers and moves all the zero elements to the end of the list, while preserving the order of the other elements. The function should perform the operation in-place and return the modified list. The function signature is as follows: ```python def move_zeros(nums: List[int]) -> List[int]: pass ``` # Parameters: - `nums` (List[int]): A list of integers which may contain zero and non-zero elements. # Returns: - Returns the same list with all zeros moved to the end while maintaining the order of non-zero elements. # Instructions: 1. **In-place Modification**: Modify the input list directly without using additional lists or arrays. 2. **Order Preservation**: Ensure that the relative order of the non-zero elements is preserved after moving the zeros. 3. **Efficiency**: Optimize the function so that it runs in O(n) time complexity with O(1) extra space complexity. # Example Usage: ```python nums = [0, 1, 0, 3, 12] print(move_zeros(nums)) # Output: [1, 3, 12, 0, 0] nums = [0, 0, 0] print(move_zeros(nums)) # Output: [0, 0, 0] nums = [1, 2, 3] print(move_zeros(nums)) # Output: [1, 2, 3] ``` This exercise will help you understand how to manipulate lists in-place while maintaining the original order of non-zero elements.","solution":"def move_zeros(nums): Moves all zeros in the list to the end while maintaining the order of non-zero elements. Modifies the list in-place and returns it. Parameters: nums (List[int]): The list of integers which may contain zero and non-zero elements. Returns: List[int]: The same list with all zeros moved to the end. non_zero_index = 0 # Pointer for the position to insert the next non-zero element # Traverse the list moving non-zero elements forward for i in range(len(nums)): if nums[i] != 0: nums[non_zero_index] = nums[i] non_zero_index += 1 # Fill the remaining positions with zeros for i in range(non_zero_index, len(nums)): nums[i] = 0 return nums"},{"question":"In this exercise, you will practice working with strings and dictionaries in Python. The goal is to write a function that counts the frequencies of words in a given string after removing punctuation and converting all words to lowercase. Your function should be named `word_count`, and it should perform the following tasks: 1. Remove all punctuation from the input string. 2. Convert all words to lowercase. 3. Split the string into words based on whitespace. 4. Count the frequency of each word using a dictionary. 5. Return the dictionary of word frequencies. **Function Signature** ```python def word_count(input_string: str) -> dict: pass ``` # Input - `input_string` (str): The input string from which to count the word frequencies. # Output - `word_freq` (dict): A dictionary where keys are words and values are their corresponding frequencies in the string. # Example Given the input string: ```python \\"Hello, World! Hello world.\\" ``` The output dictionary should be: ```python {\'hello\': 2, \'world\': 2} ``` # Instructions 1. Use the `str.translate` method with `str.maketrans` to remove punctuation. 2. Use the `str.lower` method to convert the string to lowercase. 3. Use the `str.split` method to split the string into words based on whitespace. 4. Use a dictionary to count the frequency of each word in the list of words. 5. Ensure the function `word_count` performs as described.","solution":"import string def word_count(input_string: str) -> dict: # Remove punctuation using str.translate and str.maketrans translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_string = input_string.translate(translator) # Convert to lowercase cleaned_string = cleaned_string.lower() # Split into words words = cleaned_string.split() # Create a dictionary to count word frequencies word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"In this problem, you\'ll be implementing a function to multiply two matrices using the Strassen algorithm. The Strassen algorithm is a divide-and-conquer approach to matrix multiplication that reduces the time complexity compared to the conventional algorithm. The primary focus of this task is to understand how to recursively divide the matrices into submatrices, perform operations on these submatrices, and combine the results to get the final product matrix. You\'ll be provided helper functions to divide and combine matrices. Your task is to use these helpers along with the Strassen algorithm\'s recursion to implement the function `strassen_matrix_mult`, which performs matrix multiplication on two given NxN matrices. Here is the signature of the function you need to implement: ```python def strassen_matrix_mult(A, B): Perform matrix multiplication using Strassen\'s algorithm. Parameters: A (np.ndarray): An NxN array representing the first matrix. B (np.ndarray): An NxN array representing the second matrix. Returns: np.ndarray: An NxN array representing the product matrix. ``` # Detailed Instructions 1. **Divide Matrices**: Use provided helper function `divide_matrix` to split matrices A and B into submatrices. 2. **Strassen Recursion**: Use the Strassen algorithm formula to recursively compute the results for the submatrices. 3. **Combine Results**: Use the provided `combine_matrix` helper function to combine the resulting submatrices into the final product matrix. 4. **Base Case**: Handle the base case where the matrix size is 1x1 by directly multiplying the elements. # Helper Functions **Matrix Division and Combination functions**: ```python def divide_matrix(matrix): Divide the given matrix into four submatrices. Parameters: matrix (np.ndarray): An NxN array. Returns: tuple: Four submatrices as np.ndarray. row, col = matrix.shape row2, col2 = row // 2, col // 2 return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:] def combine_matrix(c11, c12, c21, c22): Combine four submatrices into one matrix. Parameters: c11, c12, c21, c22 (np.ndarray): Four submatrices. Returns: np.ndarray: Combined matrix. top = np.hstack((c11, c12)) bottom = np.hstack((c21, c22)) return np.vstack((top, bottom)) ``` # Example Usage ```python import numpy as np A = np.array([ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ]) B = np.array([ [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32] ]) product = strassen_matrix_mult(A, B) print(product) ```","solution":"import numpy as np def divide_matrix(matrix): Divide the given matrix into four submatrices. Parameters: matrix (np.ndarray): An NxN array. Returns: tuple: Four submatrices as np.ndarray. row, col = matrix.shape row2, col2 = row // 2, col // 2 return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:] def combine_matrix(c11, c12, c21, c22): Combine four submatrices into one matrix. Parameters: c11, c12, c21, c22 (np.ndarray): Four submatrices. Returns: np.ndarray: Combined matrix. top = np.hstack((c11, c12)) bottom = np.hstack((c21, c22)) return np.vstack((top, bottom)) def strassen_matrix_mult(A, B): Perform matrix multiplication using Strassen\'s algorithm. Parameters: A (np.ndarray): An NxN array representing the first matrix. B (np.ndarray): An NxN array representing the second matrix. Returns: np.ndarray: An NxN array representing the product matrix. if A.shape[0] == 1: return A * B a11, a12, a21, a22 = divide_matrix(A) b11, b12, b21, b22 = divide_matrix(B) m1 = strassen_matrix_mult(a11 + a22, b11 + b22) m2 = strassen_matrix_mult(a21 + a22, b11) m3 = strassen_matrix_mult(a11, b12 - b22) m4 = strassen_matrix_mult(a22, b21 - b11) m5 = strassen_matrix_mult(a11 + a12, b22) m6 = strassen_matrix_mult(a21 - a11, b11 + b12) m7 = strassen_matrix_mult(a12 - a22, b21 + b22) c11 = m1 + m4 - m5 + m7 c12 = m3 + m5 c21 = m2 + m4 c22 = m1 - m2 + m3 + m6 return combine_matrix(c11, c12, c21, c22)"},{"question":"You are required to write a function that analyzes a CSV file containing employee performance data and calculates the average performance score for each department. The function should: 1. Take the path to a CSV file as input. 2. The CSV file will have the following columns: \'employee_id\', \'department\', \'performance_score\'. 3. Read the CSV file using the `csv` module. 4. Calculate the average performance score for each department. 5. Return a dictionary where the keys are the department names and the values are the average performance scores rounded to two decimal places. # Function Specification - **Function Name:** `average_performance_by_department` - **Parameters:** - `csv_file_path` (str): The path to the CSV file containing the employee performance data. - **Returns:** - A dictionary where the keys are department names (str) and the values are the average performance scores (float) rounded to two decimal places. # Constraints: - You must use the `csv` module to read the CSV file. - The CSV file will have no missing values. # Example: Given a CSV file `performance_data.csv` with the following content: ``` employee_id,department,performance_score 1,Sales,85 2,Sales,90 3,Engineering,75 4,Engineering,80 5,HR,70 6,HR,75 ``` Calling the function: ```python result = average_performance_by_department(\'performance_data.csv\') print(result) ``` Would output: ```python { \'Sales\': 87.5, \'Engineering\': 77.5, \'HR\': 72.5 } ``` # Requirements: - Implement the function `average_performance_by_department`.","solution":"import csv from collections import defaultdict def average_performance_by_department(csv_file_path): Calculates the average performance score for each department. Parameters: csv_file_path (str): The path to the CSV file containing employee performance data. Returns: dict: A dictionary where the keys are department names and the values are the average performance scores rounded to two decimal places. department_scores = defaultdict(list) with open(csv_file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: department = row[\'department\'] score = float(row[\'performance_score\']) department_scores[department].append(score) average_scores = { department: round(sum(scores) / len(scores), 2) for department, scores in department_scores.items() } return average_scores"},{"question":"You are needed to write a function using the pandas library\'s DataFrame manipulation capabilities. This function will be named `analyze_dataframe`, and it will accept a pandas DataFrame as input and perform certain operations based on the properties of the DataFrame. The behaviors of the function are as follows: 1. Accept a pandas DataFrame as input. 2. Calculate the mean of each numeric column and print it. 3. If the DataFrame has more than 10 rows, compute and print the correlation matrix of the DataFrame. 4. If the DataFrame has 10 rows or less, print the DataFrame sorted by the first column in ascending order. Here is a prototype and an explanation of the function: ```python import pandas as pd def analyze_dataframe(df): Given a pandas DataFrame, perform specific operations based on its properties. Parameters: df (pandas.DataFrame): The DataFrame to be analyzed and manipulated. Returns: None # Implementation here ``` **Details**: - Use `df.mean()` to compute the mean of numeric columns. - Use `df.corr()` to compute the correlation matrix. - Use `df.sort_values()` to sort the DataFrame by the first column. **Example**: ```python # Example DataFrame with more than 10 rows data = { \'A\': range(1, 15), \'B\': range(15, 29), \'C\': range(29, 43) } df1 = pd.DataFrame(data) analyze_dataframe(df1) # Should print the mean of each numeric column and the correlation matrix # Example DataFrame with 10 rows or less data = { \'A\': [5, 2, 3], \'B\': [9, 7, 8], \'C\': [2, 1, 5] } df2 = pd.DataFrame(data) analyze_dataframe(df2) # Should print the mean of each numeric column and then print the DataFrame sorted by column \'A\' in ascending order ```","solution":"import pandas as pd def analyze_dataframe(df): Given a pandas DataFrame, perform specific operations based on its properties. Parameters: df (pandas.DataFrame): The DataFrame to be analyzed and manipulated. Returns: None # Calculate and print the mean of each numeric column print(\\"Mean of each numeric column:\\") print(df.mean()) # Check the number of rows in the DataFrame if df.shape[0] > 10: # Compute and print the correlation matrix print(\\"nCorrelation matrix:\\") print(df.corr()) else: # Print the DataFrame sorted by the first column in ascending order first_column_name = df.columns[0] sorted_df = df.sort_values(by=first_column_name) print(\\"nDataFrame sorted by the first column in ascending order:\\") print(sorted_df)"},{"question":"You are required to write a function in Python that simulates a robot\'s movements within a given rectangular grid. The robot can move forward, turn left, or turn right based on a series of commands. The function should return the final position and orientation of the robot. **Function Name**: `robot_simulation` **Parameters**: 1. `width` - An integer representing the width of the grid. 2. `height` - An integer representing the height of the grid. 3. `commands` - A string of characters representing the commands, where each character can be: - \'F\' for moving forward - \'L\' for turning left - \'R\' for turning right 4. `start_position` - A tuple of integers `(x, y)` representing the robot\'s starting position on the grid. 5. `start_orientation` - A character that can be \'N\', \'S\', \'E\', or \'W\', representing the robot\'s initial orientation (North, South, East, or West). **Description**: The function will execute the given commands to move the robot within the boundaries of the grid, preventing it from moving outside the grid. The robot starts at `start_position` and faces `start_orientation`. After processing all commands, the function should return a tuple with the robot\'s final position and orientation. **Requirements**: - The robot cannot move outside the grid. If a command would move it out, it should ignore that command and process the next one. - The robot\'s orientation changes when it turns left or right: - \'L\' changes the orientation counterclockwise. - \'R\' changes the orientation clockwise. - Moving forward (\'F\') will change the robot\'s position based on its current orientation. **Example**: ``` robot_simulation(5, 5, \\"FFRFF\\", (1, 1), \'N\') ``` returns `(3, 3, \'E\')`. **Notes**: - Ensure the robot respects the grid boundaries. - Handle commands sequentially as provided in the `commands` string. - Assume the grid\'s bottom-left corner is (0, 0) and top-right corner is (width-1, height-1). - Respect the case sensitivity in the orientation (\'N\', \'S\', \'E\', \'W\').","solution":"def robot_simulation(width, height, commands, start_position, start_orientation): Simulates the robot\'s movements within the grid based on given commands. Parameters: width (int): The width of the grid. height (int): The height of the grid. commands (str): The string of commands to execute. start_position (tuple): The starting position of the robot (x, y). start_orientation (str): The starting orientation (\'N\', \'E\', \'S\', \'W\'). Returns: tuple: The final position and orientation of the robot. # Define direction-to-coordinate movement mappings direction_map = { \'N\': (0, 1), \'E\': (1, 0), \'S\': (0, -1), \'W\': (-1, 0), } # Define rotation mappings left_turn = {\'N\': \'W\', \'W\': \'S\', \'S\': \'E\', \'E\': \'N\'} right_turn = {\'N\': \'E\', \'E\': \'S\', \'S\': \'W\', \'W\': \'N\'} # Initialize position and orientation x, y = start_position orientation = start_orientation # Execute commands for command in commands: if command == \'F\': dx, dy = direction_map[orientation] next_x, next_y = x + dx, y + dy # Check boundaries if 0 <= next_x < width and 0 <= next_y < height: x, y = next_x, next_y elif command == \'L\': orientation = left_turn[orientation] elif command == \'R\': orientation = right_turn[orientation] return (x, y, orientation)"},{"question":"In this problem, you are required to write a function called `inventory_update` that updates the current inventory of items with a new shipment of items. Each item has a unique identifier. If the item is already in the inventory, its quantity should be updated (i.e., increased by the quantity in the new shipment). If the item is not in the inventory, it should be added to the inventory with its respective quantity from the new shipment. The final inventory should be returned sorted by item identifier. You will need to handle this using Python dictionaries and basic list operations. Function Signature: ```python def inventory_update(current_inventory, new_shipment): Updates the current inventory with a new shipment of items. Parameters: - current_inventory: List of tuples representing the current inventory state. Each tuple contains two elements: the item identifier (string) and its quantity (integer). - new_shipment: List of tuples representing the new shipment. Each tuple contains two elements: the item identifier (string) and its quantity (integer). Returns: - A list of tuples representing the updated inventory sorted by item identifier. pass ``` Example: Given a current inventory and a new shipment: ```python current_inventory = [(\'apple\', 50), (\'banana\', 20), (\'orange\', 75)] new_shipment = [(\'banana\', 30), (\'apple\', 20), (\'pear\', 40)] result = inventory_update(current_inventory, new_shipment) # Expected output: [(\'apple\', 70), (\'banana\', 50), (\'orange\', 75), (\'pear\', 40)] ``` The function should update the quantities and add any new items as needed, and then sort the final inventory by the item identifier. In this example, the final sorted inventory should include the updated quantities for \'apple\' and \'banana\' and the new \'pear\' item: ```python [(\'apple\', 70), (\'banana\', 50), (\'orange\', 75), (\'pear\', 40)] ``` This problem checks the ability to manipulate dictionaries, handle list operations, and ensure sorting based on a specific criterion.","solution":"def inventory_update(current_inventory, new_shipment): Updates the current inventory with a new shipment of items. Parameters: - current_inventory: List of tuples representing the current inventory state. Each tuple contains two elements: the item identifier (string) and its quantity (integer). - new_shipment: List of tuples representing the new shipment. Each tuple contains two elements: the item identifier (string) and its quantity (integer). Returns: - A list of tuples representing the updated inventory sorted by item identifier. inventory_dict = dict(current_inventory) for item, quantity in new_shipment: if item in inventory_dict: inventory_dict[item] += quantity else: inventory_dict[item] = quantity sorted_inventory = sorted(inventory_dict.items()) return sorted_inventory"},{"question":"In this problem, you will develop a function that simulates an ecosystem of predators and prey. You will use this simulation to visualize the population dynamics over time. The goal is to investigate how different parameters affect the stability and fluctuations of both populations. You need to implement the function `simulate_ecosystem(predator_birth_rate, predator_death_rate, prey_birth_rate, prey_death_rate, num_steps)` which will simulate the life cycle of both species and then create plots using `matplotlib`. Function Details: - **Function Name**: `simulate_ecosystem` - **Inputs**: - `predator_birth_rate`: Float representing the birth rate of predators (e.g., 0.02). - `predator_death_rate`: Float representing the death rate of predators (e.g., 0.01). - `prey_birth_rate`: Float representing the birth rate of prey (e.g., 0.1). - `prey_death_rate`: Float representing the death rate of prey (e.g., 0.005). - `num_steps`: Integer representing the number of time steps for the simulation. - **Outputs**: None (But it should display the plots) - **Dependencies**: - Use `matplotlib.pyplot` to create the plots. Steps: 1. **Initialize Populations**: - Initialize predator and prey populations with some initial values. For example, set initial predator population to 50 and prey population to 100. 2. **Simulate Population Dynamics**: - For each time step, update the population using the following rules: - Prey population increases by `prey_birth_rate * prey_population`. - Prey population decreases by `prey_death_rate * prey_population * predator_population`. - Predator population increases by `predator_birth_rate * prey_population * predator_population`. - Predator population decreases by `predator_death_rate * predator_population`. 3. **Store Population Data**: - Collect and store population data for both species at each time step. 4. **Visualization**: - Plot the population of predators and prey over time using `plt.plot`. - Add appropriate labels and legends to the plot. Here is a template to start the function: ```python import numpy as np import matplotlib.pyplot as plt def simulate_ecosystem(predator_birth_rate, predator_death_rate, prey_birth_rate, prey_death_rate, num_steps): # Initialize populations predator_population = 50 prey_population = 100 predator_populations = [] prey_populations = [] for _ in range(num_steps): # Calculate next step populations prey_population_next = prey_population + (prey_birth_rate * prey_population) - (prey_death_rate * prey_population * predator_population) predator_population_next = predator_population + (predator_birth_rate * prey_population * predator_population) - (predator_death_rate * predator_population) # Ensure populations stay positive prey_population = max(prey_population_next, 0) predator_population = max(predator_population_next, 0) predator_populations.append(predator_population) prey_populations.append(prey_population) # Plotting fig, ax = plt.subplots() ax.plot(range(num_steps), prey_populations, label=\'Prey Population\') ax.plot(range(num_steps), predator_populations, label=\'Predator Population\') plt.xlabel(\'Time Steps\') plt.ylabel(\'Population\') plt.legend() plt.show() # Example usage: simulate_ecosystem(predator_birth_rate=0.02, predator_death_rate=0.01, prey_birth_rate=0.1, prey_death_rate=0.005, num_steps=200) ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_ecosystem(predator_birth_rate, predator_death_rate, prey_birth_rate, prey_death_rate, num_steps): Simulates an ecosystem of predators and prey over a number of time steps. Parameters: predator_birth_rate (float): Birth rate of predators. predator_death_rate (float): Death rate of predators. prey_birth_rate (float): Birth rate of prey. prey_death_rate (float): Death rate of prey. num_steps (int): Number of time steps to simulate. Returns: None: Displays a plot of the populations over time. # Initialize populations predator_population = 50 prey_population = 100 predator_populations = [] prey_populations = [] for _ in range(num_steps): # Calculate next step populations prey_population_next = prey_population + (prey_birth_rate * prey_population) - (prey_death_rate * prey_population * predator_population) predator_population_next = predator_population + (predator_birth_rate * prey_population * predator_population) - (predator_death_rate * predator_population) # Ensure populations stay positive prey_population = max(prey_population_next, 0) predator_population = max(predator_population_next, 0) predator_populations.append(predator_population) prey_populations.append(prey_population) # Plotting fig, ax = plt.subplots() ax.plot(range(num_steps), prey_populations, label=\'Prey Population\') ax.plot(range(num_steps), predator_populations, label=\'Predator Population\') plt.xlabel(\'Time Steps\') plt.ylabel(\'Population\') plt.legend() plt.show() # Example usage: simulate_ecosystem(predator_birth_rate=0.02, predator_death_rate=0.01, prey_birth_rate=0.1, prey_death_rate=0.005, num_steps=200)"},{"question":"You are required to write a function, `generate_short_url`, that generates a short unique URL for a given long URL using a custom algorithm. The function should map a long URL to a short URL and be able to retrieve the original long URL from the short URL. # Requirements: 1. **Custom URL Hashing**: The function should create a short URL using a reversible custom hash algorithm. 2. **Storing URL mappings**: Maintain a mapping between the long URLs and their short versions to ensure retrieval. 3. **Short URL characteristics**: The short URL should be no longer than 8 characters. 4. **Handling Collisions**: Ensure that no two long URLs map to the same short URL. Implement a strategy to handle any potential collisions. 5. **Case Insensitivity**: The short URL mapping should be case insensitive. # Implementation Details: - Create two functions, `generate_short_url(long_url: str) -> str` and `retrieve_long_url(short_url: str) -> str`. - Use a hash function or encoding mechanism to convert long URLs to short URLs. - Maintain a mapping (dictionary) to store and retrieve the URLs. - Ensure robust error handling and necessary logic to handle collisions. # Function Signatures: ```python def generate_short_url(long_url: str) -> str: pass def retrieve_long_url(short_url: str) -> str: pass ``` # Example: If `long_url = \\"https://www.example.com/very/long/url/with/lots/of/segments\\"`, the function `generate_short_url(long_url)` might return `abcd1234`. Then, calling `retrieve_long_url(\'abcd1234\')` should return the original long URL `https://www.example.com/very/long/url/with/lots/of/segments`. # Notes: - Ensure that generated short URLs are unique and case insensitive. - Design the solution to efficiently handle a large number of URL mappings. - You may assume that conflicts are rare and can be managed through simple retry mechanisms.","solution":"import hashlib import string class URLShortener: def __init__(self): self.long_to_short = {} self.short_to_long = {} self.alphabet = string.ascii_letters + string.digits self.base = len(self.alphabet) def _hash_url(self, long_url): Generate a hash for the long URL. hasher = hashlib.md5() hasher.update(long_url.encode(\'utf-8\')) return hasher.hexdigest() def _encode(self, number): Encode a number in a base62 system. if number == 0: return self.alphabet[0] encoded = [] while number > 0: encoded.append(self.alphabet[number % self.base]) number //= self.base return \'\'.join(encoded)[::-1] def _generate_short_url(self, hash_key, retry_count=0): Generate a short URL based on the hash and retry count. slice_length = 8 + retry_count short_url_hash = hash_key[:slice_length] numeric_value = int(short_url_hash, 16) short_url = self._encode(numeric_value) return short_url[:8] def generate_short_url(self, long_url: str) -> str: Generate a short URL for the given long URL. if long_url in self.long_to_short: return self.long_to_short[long_url] hash_key = self._hash_url(long_url) retry_count = 0 while True: short_url = self._generate_short_url(hash_key, retry_count) short_url_lower = short_url.lower() if short_url_lower not in self.short_to_long: self.long_to_short[long_url] = short_url_lower self.short_to_long[short_url_lower] = long_url return short_url_lower retry_count += 1 def retrieve_long_url(self, short_url: str) -> str: Retrieve the original long URL from a short URL. short_url_lower = short_url.lower() return self.short_to_long.get(short_url_lower, None) url_shortener = URLShortener() # Wrapper functions def generate_short_url(long_url: str) -> str: return url_shortener.generate_short_url(long_url) def retrieve_long_url(short_url: str) -> str: return url_shortener.retrieve_long_url(short_url)"},{"question":"You are required to implement a function for generating words from a phone number. The phone number to words problem involves mapping digits to corresponding letters on a telephone keypad, similar to the traditional mobile keypad. You need to implement the function `generate_words` with the following signature: ```python def generate_words(phone_number: str) -> List[str]: ``` Function Parameters: - `phone_number` (str): A string of digits representing the phone number. The phone number will not contain the digits 0 or 1. Notes: 1. The mapping of digits to letters is as follows: - 2: \'abc\' - 3: \'def\' - 4: \'ghi\' - 5: \'jkl\' - 6: \'mno\' - 7: \'pqrs\' - 8: \'tuv\' - 9: \'wxyz\' 2. Generate all possible words by combining the letters corresponding to each digit in the phone number. 3. You can use a recursive approach or an iterative approach to generate the words. 4. Include all possible letter combinations in any order in the result. Example: ```python phone_number = \\"23\\" word_list = generate_words(phone_number) print(word_list) # Example output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ```","solution":"from typing import List def generate_words(phone_number: str) -> List[str]: digit_to_letters = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } if not phone_number: return [] result = [\'\'] for digit in phone_number: new_result = [] for combination in result: for letter in digit_to_letters[digit]: new_result.append(combination + letter) result = new_result return result"},{"question":"You need to implement a function named `find_optimal_path` that computes the shortest path for a robot to travel from the top-left to the bottom-right corner of a 2D grid. The robot can move either right or down at any point in time. Each cell in the grid contains a number that represents the cost of stepping into that cell. The robot aims to minimize the total cost of the path from the top-left to the bottom-right corner. The grid is represented as a 2D list of integers where `grid[i][j]` is the cost of stepping into the cell at row `i` and column `j`. # Input: - `grid`: A 2D list of integers of size `m x n` where `m` is the number of rows and `n` is the number of columns. # Output: - An integer representing the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. # Example: Suppose you have the following grid: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The function `find_optimal_path(grid)` should return `7`, because the path 1→3→1→1→1 minimizes the total cost. # Explanation: The minimum cost path would be: ``` 1 → 3 → 1 ↓ ↓ 1 5 1 ↓ 4 → 2 → 1 ``` Thus, 1 + 3 + 1 + 1 + 1 = 7. # Constraints: - You may assume that grid will have at least one row and one column. - The values in the grid are non-negative integers. **Libraries you will need:** - `numpy` Please implement the function `find_optimal_path(grid)` to perform this task.","solution":"def find_optimal_path(grid): Computes the minimum cost to travel from the top-left to the bottom-right corner of the grid. Parameters: grid (list of list of int): 2D grid with the cost of stepping into each cell. Returns: int: Minimum cost to travel from top-left to bottom-right corner. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D dp array with the same dimensions as grid dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[rows - 1][cols - 1]"},{"question":"You are required to create a function named `find_routes_within_budget` to compute all feasible routes and their respective costs between two given cities within a specified budget. You will work with a graph represented as a dictionary where keys are city names and values are lists of tuples, each consisting of a neighboring city and the travel cost to that city. # Function Signature ```python def find_routes_within_budget(graph: Dict[str, List[Tuple[str, int]]], start: str, end: str, budget: int) -> List[Tuple[List[str], int]]: # Your implementation here ``` # Parameters - `graph`: A dictionary where keys are city names (strings) and values are lists of tuples (each tuple containing a neighboring city as a string and the travel cost as an integer). - `start`: The starting city (string). - `end`: The destination city (string). - `budget`: The maximum allowable travel cost (integer). # Returns - A list of tuples, where each tuple consists of: - A list of cities (route) starting from `start` and ending at `end`. - The total travel cost of that route (integer). # Example Usage ```python graph = { \'A\': [(\'B\', 10), (\'C\', 3)], \'B\': [(\'C\', 1), (\'D\', 2)], \'C\': [(\'B\', 4), (\'D\', 8)], \'D\': [] } routes_within_budget = find_routes_within_budget(graph, \'A\', \'D\', 15) print(routes_within_budget) # Output can be: [([\'A\', \'B\', \'D\'], 12), ([\'A\', \'C\', \'B\', \'D\'], 14)] ``` # Notes - You are allowed to make use of any traversal technique (e.g., DFS, BFS) to explore the graph and identify routes. - Make sure that the total travel cost does not exceed the specified budget. - If no routes are found within the specified budget, return an empty list. - Consider edge cases where the start or end cities do not exist in the graph, or when budget is too low to cover any route.","solution":"from typing import Dict, List, Tuple def find_routes_within_budget(graph: Dict[str, List[Tuple[str, int]]], start: str, end: str, budget: int) -> List[Tuple[List[str], int]]: def dfs(current_city, current_route, current_cost): if current_cost > budget: return if current_city == end: routes.append((current_route[:], current_cost)) return for neighbor, travel_cost in graph.get(current_city, []): if neighbor not in current_route: current_route.append(neighbor) dfs(neighbor, current_route, current_cost + travel_cost) current_route.pop() routes = [] dfs(start, [start], 0) return routes"},{"question":"You are required to implement a function in Python that schedules a given list of tasks with their start and end times using a greedy algorithm. The objective is to find the maximum number of non-overlapping tasks that can be scheduled. Here is the detailed description of your task: 1. **Sort the Tasks**: Create a list of tasks, where each task is represented as a tuple containing a start time and an end time `(start, end)`. Sort these tasks primarily by their end times. 2. **Select Non-overlapping Tasks**: Use a greedy approach to select the maximum number of non-overlapping tasks. The greedy choice is to always pick the next task that finishes the earliest and does not overlap with the previously selected task. **Function Signature:** ```python def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` **Input:** - `tasks`: A list of tuples, each tuple consists of two integers representing the start and end times of a task. **Output:** - A list of tuples containing the start and end times of the maximum set of non-overlapping tasks. **Constraints**: - The start and end times of tasks are positive integers. - The list can contain up to 10,000 tasks. # Example: ```python # Example task list: tasks = [(1, 3), (2, 5), (4, 6), (6, 8), (5, 7)] # Example call: schedule_tasks(tasks) # Expected Output: [(1, 3), (4, 6), (6, 8)] ``` In this example, the function selects tasks such that no two selected tasks overlap, ensuring the maximum number of tasks are scheduled. # Note: - Ensure to handle edge cases where no tasks can be scheduled. - Make sure the output list is sorted by the end times of the tasks.","solution":"from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Schedule the maximum number of non-overlapping tasks. Parameters: - tasks (List[Tuple[int, int]]): A list of tuples, each tuple contains two integers representing the start and end times of a task. Returns: - List[Tuple[int, int]]: A list of tuples containing the start and end times of the maximum set of non-overlapping tasks. # Sort tasks primarily by their end times tasks.sort(key=lambda x: x[1]) # List to store the result result = [] # The end time of the last added task last_end_time = 0 for task in tasks: start, end = task if start >= last_end_time: result.append(task) last_end_time = end return result"},{"question":"You are required to write a function named `generate_random_matrix` using Python and the NumPy library. This function will generate a matrix of random integers and apply certain transformation rules to it. Your task is to provide an interface using NumPy to create and transform the matrix as described. Detailed requirements for the function: 1. The function should be named `generate_random_matrix`. 2. It should take two parameters: `shape`, which is a tuple of two integers representing the number of rows and columns, and `range_vals`, which is a tuple of two integers representing the minimum and maximum values for the random integers (inclusive). 3. The function should generate a matrix of the given shape with random integers within the specified range. 4. If the value of an element in the matrix is even, multiply it by 2. 5. If the value of an element in the matrix is odd, add 1 to it. The function should return the transformed matrix. Here is the code skeleton with the necessary imports: ```python import numpy as np def generate_random_matrix(shape, range_vals): # Write your code here pass ``` Ensure to use NumPy functions to generate the random matrix and apply the transformations efficiently.","solution":"import numpy as np def generate_random_matrix(shape, range_vals): rows, cols = shape min_val, max_val = range_vals # Generate random matrix with given shape and range of values matrix = np.random.randint(min_val, max_val + 1, size=(rows, cols)) # Apply transformations: multiply even elements by 2, add 1 to odd elements matrix = np.where(matrix % 2 == 0, matrix * 2, matrix + 1) return matrix"},{"question":"You have been given a JSON file containing data about various stock prices and their associated timestamps. Your task is to analyze this data to understand the stock performance over different periods and derive insights about stock volatility. Your specific tasks are: 1. **Loading the Data**: Write a function `load_stock_data(file_path)` that loads the data from a given JSON file. The data contains `Date`, `Time`, `Stock_ID`, `Open`, `Close`, `High`, and `Low`. Combine the `Date` and `Time` columns into a single `Datetime` column, remove the original `Time` column, and sort the dataframe by the `Datetime` column. 2. **Stock Performance**: Calculate the daily percentage change in closing prices for each stock. Identify the top 3 days with the highest positive percentage change for each stock and return these dates along with the associated stock ID. 3. **Stock Volatility**: Determine the daily volatility for each stock, which is defined as the difference between the daily high and low prices. Identify the stock with the highest average daily volatility over the entire dataset. 4. **Volatility Range**: Determine if there is a general range where most of the daily volatilities fall (excluding the top and bottom 1% of the data). If such a range exists, plot a histogram of these daily volatilities with 50 bins. 5. **Segment Price Averages**: Calculate the mean closing price for 4-hour segments starting at 10 AM, 2 PM, 6 PM, and 10 PM. Implement the function `load_stock_data(file_path)` to follow the above tasks. Function Signature: ```python import pandas as pd import matplotlib.pyplot as plt def load_stock_data(file_path: str) -> pd.DataFrame: pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt import json from datetime import datetime def load_stock_data(file_path: str) -> None: # 1. Loading the Data with open(file_path, \'r\') as f: data = json.load(f) # Convert the JSON data into a DataFrame df = pd.DataFrame(data) # Combine \'Date\' and \'Time\' into \'Datetime\' df[\'Datetime\'] = pd.to_datetime(df[\'Date\'] + \' \' + df[\'Time\']) df.drop(columns=\'Time\', inplace=True) # Sort the DataFrame by the new \'Datetime\' column df.sort_values(by=\'Datetime\', inplace=True) # Calculate daily percentage change in closing prices for each stock df[\'Pct_Change\'] = df.groupby(\'Stock_ID\')[\'Close\'].pct_change() * 100 # Identify top 3 days with highest positive percentage change for each stock top_changes = df[df[\'Pct_Change\'] > 0].groupby(\'Stock_ID\').apply(lambda x: x.nlargest(3, \'Pct_Change\')).reset_index(drop=True) top_changes_result = top_changes[[\'Stock_ID\', \'Date\', \'Pct_Change\']] # Determine the daily volatility for each stock df[\'Volatility\'] = df[\'High\'] - df[\'Low\'] # Identify the stock with highest average daily volatility average_volatility = df.groupby(\'Stock_ID\')[\'Volatility\'].mean() highest_volatility_stock = average_volatility.idxmax() # Determine the general range of volatilities excluding the top and bottom 1% lower_bound = df[\'Volatility\'].quantile(0.01) upper_bound = df[\'Volatility\'].quantile(0.99) filtered_volatilities = df[(df[\'Volatility\'] >= lower_bound) & (df[\'Volatility\'] <= upper_bound)] # Plot histogram if the range exists if not filtered_volatilities.empty: plt.hist(filtered_volatilities[\'Volatility\'], bins=50) plt.xlabel(\'Daily Volatility\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Daily Volatilities (excluding top and bottom 1%)\') plt.show() # Calculate the mean closing price for 4-hour segments df[\'Hour\'] = df[\'Datetime\'].dt.hour segments = [10, 14, 18, 22] segment_averages = {} for start_hour in segments: end_hour = (start_hour + 4) % 24 if start_hour < end_hour: segment_df = df[(df[\'Hour\'] >= start_hour) & (df[\'Hour\'] < end_hour)] else: segment_df = df[(df[\'Hour\'] >= start_hour) | (df[\'Hour\'] < end_hour)] segment_averages[f\'{start_hour}:00-{end_hour}:00\'] = segment_df.groupby(\'Stock_ID\')[\'Close\'].mean() return top_changes_result, highest_volatility_stock, segment_averages"},{"question":"There are many ways to validate whether or not a string contains valid numbers. In this problem, you are required to create a function named `validate_and_sum_numbers` which takes a string of space-separated tokens and processes it to extract and sum all valid whole numbers. This function should ignore any tokens that are not valid integers. 1. **Function Name:** `validate_and_sum_numbers` 2. **Parameters:** - `input_string`: a single string consisting of space-separated tokens. 3. **Returns:** An integer that is the sum of all valid whole numbers found in the input string. Your task is to implement this function in the following way: - Split the `input_string` by spaces into individual tokens. - Check whether each token represents a valid whole number (either positive or negative). - You cannot use Python\'s built-in `int()` conversion error handling to accomplish this, and you must not use regular expressions. - Sum all valid whole numbers identified in the token list. - Return the calculated sum. Here is the function signature: ```python def validate_and_sum_numbers(input_string: str) -> int: pass ``` # Example ```python # Example 1 input_string = \\"3 5 -2 abc 10\\" # Valid numbers here are: 3, 5, -2, 10 # The function should return 16 # Example 2 input_string = \\"12 4a -8 0 45\\" # Valid numbers here are: 12, -8, 0, 45 # The function should return 49 ```","solution":"def validate_and_sum_numbers(input_string: str) -> int: def is_valid_number(token): if token.startswith(\'-\'): token = token[1:] return token.isdigit() tokens = input_string.split() total_sum = 0 for token in tokens: if is_valid_number(token): total_sum += int(token) return total_sum"},{"question":"Implement a function named `filter_and_sort_strings` that takes a list of strings and two integers, `min_length` and `max_length`, as input. The function should filter out the strings that do not fall within the given length range (inclusive) and then return the filtered list of strings sorted in alphabetical order. The function must: 1. Ensure the input list is of strings. 2. Ensure the input integers are non-negative and `min_length` is less than or equal to `max_length`. 3. Filter the strings based on their length. 4. Return the filtered list sorted in alphabetical order. **Function Signature:** ```python def filter_and_sort_strings(strings: list, min_length: int, max_length: int) -> list: pass ``` For example: ```python filter_and_sort_strings([\\"apple\\", \\"pear\\", \\"kiwi\\", \\"banana\\"], 3, 5) ``` Should return: ```python [\'apple\', \'kiwi\', \'pear\'] ```","solution":"def filter_and_sort_strings(strings: list, min_length: int, max_length: int) -> list: Filters the list of strings to only include strings whose lengths are between min_length and max_length (inclusive), and sorts the resulting list in alphabetical order. Parameters: strings (list): A list of strings to be filtered and sorted. min_length (int): Minimum length of strings to be included. max_length (int): Maximum length of strings to be included. Returns: list: The filtered and sorted list of strings. assert all(isinstance(s, str) for s in strings), \\"All elements in the input list must be strings\\" assert isinstance(min_length, int) and isinstance(max_length, int), \\"min_length and max_length must be integers\\" assert min_length >= 0, \\"min_length must be non-negative\\" assert max_length >= min_length, \\"max_length must be greater than or equal to min_length\\" filtered_strings = [s for s in strings if min_length <= len(s) <= max_length] return sorted(filtered_strings)"},{"question":"Suppose you are given a 2D NumPy array representing a grid of integers where each cell contains either a 0 or a 1. A cell is considered to be part of an \\"island\\" if it has a value of 1 and is connected horizontally or vertically to other cells with a value of 1. Your task is to write a function `count_islands` that takes such a 2D NumPy array as input and returns the number of islands present in the grid. To accomplish this task, you are required to use depth-first search (DFS) to explore the grid and mark visited cells. # Function Signature: ```python def count_islands(grid: np.ndarray) -> int: ``` # Input: - `grid`: A 2D NumPy array of shape (m, n) where each element is either a 0 or a 1. # Output: - An integer representing the number of islands in the grid. # Example: ```python import numpy as np grid = np.array([[1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1]]) result = count_islands(grid) # Expected output: 3 ``` # Requirements: 1. Use depth-first search (DFS) algorithm to traverse the grid. 2. Ensure that visited cells are marked appropriately to avoid counting the same island multiple times. Write your function such that it adheres to these requirements.","solution":"import numpy as np def count_islands(grid: np.ndarray) -> int: def dfs(grid, visited, i, j): stack = [(i, j)] while stack: x, y = stack.pop() if 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1] and not visited[x, y] and grid[x, y] == 1: visited[x, y] = True stack.extend([(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]) if grid.size == 0: return 0 visited = np.zeros_like(grid, dtype=bool) island_count = 0 for i in range(grid.shape[0]): for j in range(grid.shape[1]): if grid[i, j] == 1 and not visited[i, j]: dfs(grid, visited, i, j) island_count += 1 return island_count"},{"question":"**Introduction:** In this exercise, you will work with basic text processing and demonstrate an understanding of string manipulation and regular expressions to validate and format phone numbers. **Objective:** Write a function named `format_phone_number` that takes a list of phone numbers as input and returns a new list of phone numbers formatted in the standard form `(XXX) XXX-XXXX`. If a phone number is invalid, it should be excluded from the returned list. **Parameters:** 1. `phone_numbers` (List[str]): A list of phone numbers as strings that need to be validated and formatted. **Requirements:** - Phone numbers can be in various formats such as `1234567890`, `123-456-7890`, `(123) 456-7890`, `123.456.7890`, or `123 456 7890`. - The function should handle and clean phone numbers effectively using regular expressions. - Return a list of phone numbers in the standard form `(XXX) XXX-XXXX`. **Steps:** 1. Define the `format_phone_number` function. 2. Use regular expressions to filter out invalid phone numbers. 3. Format valid phone numbers to the standard form `(XXX) XXX-XXXX`. 4. Return a list of formatted phone numbers. **Function Signature:** ```python def format_phone_number(phone_numbers: List[str]) -> List[str]: pass ``` # Example Calling the function `format_phone_number([\\"1234567890\\", \\"123-456-7890\\", \\"(123) 456-7890\\", \\"123.456.7890\\", \\"123 456 7890\\", \\"1234567\\"])` should return: ```python [\\"(123) 456-7890\\", \\"(123) 456-7890\\", \\"(123) 456-7890\\", \\"(123) 456-7890\\", \\"(123) 456-7890\\"] ``` Explanation: - The function processes each phone number to match the valid 10-digit format. - Formats all valid phone numbers to the standard form `(XXX) XXX-XXXX`. - Excludes any invalid phone numbers from the result list. Here, `1234567` is an invalid phone number and hence not included in the result.","solution":"import re from typing import List def format_phone_number(phone_numbers: List[str]) -> List[str]: formatted_numbers = [] phone_pattern = re.compile(r\'^(d{3})[-. ]?(d{3})[-. ]?(d{4})|^((d{3})) ?(d{3})[-. ]?(d{4})\') for phone in phone_numbers: match = phone_pattern.match(phone) if match: if match.groups()[0] is not None: formatted = f\\"({match.group(1)}) {match.group(2)}-{match.group(3)}\\" else: formatted = f\\"({match.group(4)}) {match.group(5)}-{match.group(6)}\\" formatted_numbers.append(formatted) return formatted_numbers"},{"question":"In this problem, you are asked to implement a class that simulates a simple file system. The file system should support basic operations such as creating directories, creating files with content, reading file content, and listing the contents of a directory. Your task is to complete the implementation of the `FileSystem` class provided below. The methods of the class should perform the following functions: 1. `mkdir(path)`: Creates a directory at the specified path. If a directory already exists at the given path, do nothing. 2. `add_content_to_file(file_path, content)`: Creates a file at the specified path, and appends the given content to the file. If the path already exists as a directory, your function should raise an error. 3. `read_content_from_file(file_path)`: Returns the content of the file at the specified path. If the path does not exist or points to a directory, your function should raise an error. 4. `ls(path)`: Lists the directory contents at the specified path in lexicographical order. If the path is a file, it should return a list containing that file name. Here is the partial implementation of the `FileSystem` class: ```python class FileSystem: def __init__(self): self.paths = {\\"/\\": {}} def mkdir(self, path: str): parts = path.strip(\\"/\\").split(\\"/\\") current = self.paths[\\"/\\"] for part in parts: if part not in current: current[part] = {} current = current[part] def add_content_to_file(self, file_path: str, content: str): parts = file_path.strip(\\"/\\").split(\\"/\\") filename = parts.pop() current = self.paths[\\"/\\"] for part in parts: if part not in current: current[part] = {} current = current[part] if filename in current and isinstance(current[filename], dict): raise Exception(\\"Cannot create a file inside an existing directory\\") if filename not in current: current[filename] = \\"\\" current[filename] += content def read_content_from_file(self, file_path: str) -> str: parts = file_path.strip(\\"/\\").split(\\"/\\") filename = parts.pop() current = self.paths[\\"/\\"] for part in parts: if part not in current: raise FileNotFoundError(\\"Path does not exist\\") current = current[part] if filename not in current: raise FileNotFoundError(\\"File does not exist\\") if isinstance(current[filename], dict): raise IsADirectoryError(\\"Cannot read from a directory\\") return current[filename] def ls(self, path: str) -> [str]: parts = path.strip(\\"/\\").split(\\"/\\") if path != \\"/\\" else [] current = self.paths[\\"/\\"] for part in parts: if part not in current: raise FileNotFoundError(\\"Path does not exist\\") current = current[part] if isinstance(current, dict): return sorted(current.keys()) return [parts[-1]] # Example usage: fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.add_content_to_file(\\"/a/b/c/d\\", \\"hello\\") print(fs.ls(\\"/\\")) # Output: [\'a\'] print(fs.ls(\\"/a/b\\")) # Output: [\'c\'] print(fs.read_content_from_file(\\"/a/b/c/d\\")) # Output: \'hello\' fs.mkdir(\\"/a/b/c/e\\") fs.add_content_to_file(\\"/a/b/c/f\\", \\"world\\") print(fs.ls(\\"/a/b/c\\")) # Output: [\'d\', \'e\', \'f\'] print(fs.read_content_from_file(\\"/a/b/c/f\\")) # Output: \'world\' ``` You will need to: - Implement the `mkdir` method to handle creating directories recursively. - Implement the `add_content_to_file` method to handle adding content to files. - Implement the `read_content_from_file` method to handle reading content from existing files. - Implement the `ls` method to handle listing directory contents or filenames. The file system root is denoted by \\"/\\", and paths are denoted by UNIX-style paths. Your class should handle empty directories and file paths appropriately.","solution":"class FileSystem: def __init__(self): self.paths = {\\"/\\": {}} def mkdir(self, path: str): parts = path.strip(\\"/\\").split(\\"/\\") current = self.paths[\\"/\\"] for part in parts: if part not in current: current[part] = {} current = current[part] def add_content_to_file(self, file_path: str, content: str): parts = file_path.strip(\\"/\\").split(\\"/\\") filename = parts.pop() current = self.paths[\\"/\\"] for part in parts: if part not in current: current[part] = {} current = current[part] if filename in current and isinstance(current[filename], dict): raise Exception(\\"Cannot create a file inside an existing directory\\") if filename not in current: current[filename] = \\"\\" current[filename] += content def read_content_from_file(self, file_path: str) -> str: parts = file_path.strip(\\"/\\").split(\\"/\\") filename = parts.pop() current = self.paths[\\"/\\"] for part in parts: if part not in current: raise FileNotFoundError(\\"Path does not exist\\") current = current[part] if filename not in current: raise FileNotFoundError(\\"File does not exist\\") if isinstance(current[filename], dict): raise IsADirectoryError(\\"Cannot read from a directory\\") return current[filename] def ls(self, path: str) -> [str]: parts = path.strip(\\"/\\").split(\\"/\\") if path != \\"/\\" else [] current = self.paths[\\"/\\"] for part in parts: if part not in current: raise FileNotFoundError(\\"Path does not exist\\") current = current[part] if isinstance(current, dict): return sorted(current.keys()) return [parts[-1]] if parts else [\\"/\\"] # Example usage: fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.add_content_to_file(\\"/a/b/c/d\\", \\"hello\\") print(fs.ls(\\"/\\")) # Output: [\'a\'] print(fs.ls(\\"/a/b\\")) # Output: [\'c\'] print(fs.read_content_from_file(\\"/a/b/c/d\\")) # Output: \'hello\' fs.mkdir(\\"/a/b/c/e\\") fs.add_content_to_file(\\"/a/b/c/f\\", \\"world\\") print(fs.ls(\\"/a/b/c\\")) # Output: [\'d\', \'e\', \'f\'] print(fs.read_content_from_file(\\"/a/b/c/f\\")) # Output: \'world\'"},{"question":"You are tasked with implementing a function `fibonacci(n: int) -> int` that returns the `n`-th number in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. Here’s a brief on how to implement the function: - If `n` is less than 0, raise a `ValueError` as the Fibonacci sequence is not defined for negative numbers. - If `n` is 0, return 0. - If `n` is 1, return 1. - For any other positive number, calculate the `n`-th Fibonacci number using an iterative approach to avoid the overhead of recursive function calls. **Constraints:** - Your solution must handle large values of `n` efficiently. **Example:** - `fibonacci(0)` should return `0`. - `fibonacci(1)` should return `1`. - `fibonacci(10)` should return `55`. Implement the function `fibonacci` using the above guidelines.","solution":"def fibonacci(n: int) -> int: Returns the n-th number in the Fibonacci sequence. :param n: The position of the number in the Fibonacci sequence. :return: The n-th Fibonacci number. :raises ValueError: If n is less than 0. if n < 0: raise ValueError(\\"Fibonacci sequence is not defined for negative numbers\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Using the provided code snippet as inspiration, create a function called `find_most_popular_artist`. This function should analyze a dataset of music albums and determine the artist with the highest number of top-ranking albums. Each album in the dataset includes information such as the title, artist name, and ranking. # Function Signature ```python def find_most_popular_artist(data: list) -> str: Analyses the given dataset of music albums and returns the artist with the highest number of top-ranking albums. Parameters: - data (list): A list of dictionaries where each dictionary represents an album with keys: - \\"Title\\": The title of the album (str) - \\"Artist\\": The name of the artist (str) - \\"Ranking\\": The ranking of the album (int) Returns: - str: The name of the artist with the highest number of top-ranking albums. ``` # Explanation and Constraints 1. **Data Format**: You are given a list of dictionaries where each dictionary contains information about an album. For example: ```python data = [ {\\"Title\\": \\"Album1\\", \\"Artist\\": \\"Artist1\\", \\"Ranking\\": 1}, {\\"Title\\": \\"Album2\\", \\"Artist\\": \\"Artist2\\", \\"Ranking\\": 2}, {\\"Title\\": \\"Album3\\", \\"Artist\\": \\"Artist1\\", \\"Ranking\\": 3}, {\\"Title\\": \\"Album4\\", \\"Artist\\": \\"Artist3\\", \\"Ranking\\": 1}, {\\"Title\\": \\"Album5\\", \\"Artist\\": \\"Artist2\\", \\"Ranking\\": 2}, # more albums... ] ``` 2. **Ranking Criterion**: An album is considered a top-ranking album if its ranking is 3 or better (i.e., rankings 1, 2, or 3). 3. **Output**: The function should return a string representing the name of the artist who has the most albums with a ranking of 3 or better. If there is a tie, any one of the most popular artists can be returned. 4. **Edge Cases**: - If the dataset is empty, return an empty string. - If no album has a ranking of 3 or better, return an empty string. Here’s an example input and expected output: ```python data = [ {\\"Title\\": \\"Album1\\", \\"Artist\\": \\"Artist1\\", \\"Ranking\\": 1}, {\\"Title\\": \\"Album2\\", \\"Artist\\": \\"Artist2\\", \\"Ranking\\": 2}, {\\"Title\\": \\"Album3\\", \\"Artist\\": \\"Artist1\\", \\"Ranking\\": 3}, {\\"Title\\": \\"Album4\\", \\"Artist\\": \\"Artist3\\", \\"Ranking\\": 1}, {\\"Title\\": \\"Album5\\", \\"Artist\\": \\"Artist2\\", \\"Ranking\\": 2}, ] result = find_most_popular_artist(data) print(result) # Output: \\"Artist1\\" or \\"Artist2\\" (assuming both have the same number of top-ranking albums) ```","solution":"def find_most_popular_artist(data): Analyses the given dataset of music albums and returns the artist with the highest number of top-ranking albums. Parameters: - data (list): A list of dictionaries where each dictionary represents an album with keys: - \\"Title\\": The title of the album (str) - \\"Artist\\": The name of the artist (str) - \\"Ranking\\": The ranking of the album (int) Returns: - str: The name of the artist with the highest number of top-ranking albums. if not data: return \\"\\" from collections import defaultdict artist_count = defaultdict(int) for album in data: if album[\\"Ranking\\"] <= 3: artist = album[\\"Artist\\"] artist_count[artist] += 1 if not artist_count: return \\"\\" return max(artist_count, key=artist_count.get)"},{"question":"You are going to write a program that simulates rolling a pair of six-sided dice. Your task is to create a function that prints the result of each roll, calculates the total value of the two dice, and tracks the frequency of each possible total value (from 2 to 12) over multiple rolls. # Function Requirements: 1. **Function Name**: `roll_dice_and_track` 2. **Function Parameters**: `num_rolls` (an integer representing the number of times the dice should be rolled) 3. **Function Behavior**: - Simulate rolling two six-sided dice `num_rolls` times. - Print the result of each roll as a tuple (die1, die2). - Calculate and print the total value of both dice for each roll. - Maintain a dictionary to count the frequency of each possible total value (from 2 to 12). - At the end of all rolls, print the dictionary showing the frequency of each total value. # Implementation Details: - Use the `random.randint` function from Python\'s `random` module to simulate rolling a die. - Ensure that `num_rolls` is a positive integer; otherwise, raise a `ValueError` with an appropriate message. - Properly format the output for clarity. # Example Output: ``` Roll 1: (3, 4), Total: 7 Roll 2: (6, 6), Total: 12 Roll 3: (1, 1), Total: 2 Roll 4: (5, 2), Total: 7 Roll 5: (4, 4), Total: 8 Frequency of Totals After 5 Rolls: 2: 1 3: 0 4: 0 5: 0 6: 0 7: 2 8: 1 9: 0 10: 0 11: 0 12: 1 ``` You need to ensure that the function adheres to these requirements and properly simulates rolling the dice and tracking the totals\' frequencies.","solution":"import random def roll_dice_and_track(num_rolls): if not isinstance(num_rolls, int) or num_rolls <= 0: raise ValueError(\\"num_rolls must be a positive integer.\\") frequency = {total: 0 for total in range(2, 13)} for i in range(1, num_rolls + 1): die1 = random.randint(1, 6) die2 = random.randint(1, 6) total = die1 + die2 frequency[total] += 1 print(f\\"Roll {i}: ({die1}, {die2}), Total: {total}\\") print(\\"nFrequency of Totals After\\", num_rolls, \\"Rolls:\\") for total in range(2, 13): print(f\\"{total}: {frequency[total]}\\")"},{"question":"In this problem, you are required to design a function that simulates the rolling of two six-sided dice a given number of times and then computes the proportion of the sum of the dice outcomes that equal a target number. Your task is to write a function `dice_simulation` to perform the simulation and compute the proportion. **Function Signature:** ```python def dice_simulation(target, num_rolls): ... ``` **Requirements:** 1. Use the `random.randint` function from the `random` module to simulate the rolling of two six-sided dice. 2. For each roll, compute the sum of the outcomes of the two dice. 3. Count how many times the sum equals the target value. 4. Calculate the proportion of rolls where the sum is equal to the target value by dividing the count by the total number of rolls. **Detailed Steps:** 1. Define the function `dice_simulation(target, num_rolls)`: - Initialize a counter to zero to keep track of how many times the target sum is rolled. - Use a loop to roll the dice `num_rolls` times. - For each roll, generate two random numbers between 1 and 6 (inclusive) to simulate the dice. - Compute the sum of these two numbers. - If the sum equals the target value, increment the counter. 2. After exiting the loop, calculate the proportion as the counter divided by `num_rolls`. 3. Return the computed proportion. **Libraries:** - `random` **Example Use Case:** To compute the proportion of times the sum of two dice equals 7 when rolled 1000 times: ```python import random def dice_simulation(target, num_rolls): count = 0 for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == target: count += 1 return count / num_rolls # Simulate rolling two dice, looking for the sum 7, over 1000 rolls proportion = dice_simulation(7, 1000) print(f\'Proportion of rolls summing to 7: {proportion}\') ```","solution":"import random def dice_simulation(target, num_rolls): Simulates rolling two six-sided dice `num_rolls` times and computes the proportion of times the sum of the dice equals the target value. Args: target (int): The target sum of the two dice. num_rolls (int): The number of times to roll the dice. Returns: float: The proportion of rolls where the sum equals the target. count = 0 for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == target: count += 1 return count / num_rolls"},{"question":"Write a function called `unique_sorted_list` that takes a list of integers and returns another list containing the unique integers sorted in ascending order. This problem is designed for you to practice using sets to eliminate duplicates and the built-in sorting functions. Function Signature: ```python def unique_sorted_list(nums: List[int]) -> List[int]: Return a list of unique integers sorted in ascending order. :param nums: List of integers :return: Sorted list of unique integers ``` Requirements: - Use a set to remove duplicates from the input list. - Use Python\'s built-in sorting functions to sort the unique integers. Example: ```python nums = [4, 1, 2, 2, 3, 4, 3, 1] print(unique_sorted_list(nums)) # Output should be [1, 2, 3, 4] nums = [10, 9, 8, 7, 7, 6, 6, 5] print(unique_sorted_list(nums)) # Output should be [5, 6, 7, 8, 9, 10] ```","solution":"def unique_sorted_list(nums): Return a list of unique integers sorted in ascending order. :param nums: List of integers :return: Sorted list of unique integers return sorted(set(nums))"},{"question":"You are required to write a Python function `process_transactions(logs: List[str]) -> List[Dict[str, Union[str, int]]]` that processes a list of transaction log entries and returns structured transaction data. Each string in the input list represents a single transaction log in the format: ```timestamp, user_id, action_type, amount``` Where: - `timestamp` is a string representing the date and time when the transaction occurred, in the format `YYYY-MM-DD HH:MM:SS`. - `user_id` is a string that uniquely identifies the user who performed the transaction. - `action_type` is a string describing the action taken (e.g., \'deposit\', \'withdrawal\'). - `amount` is an integer representing the amount involved in the transaction (e.g., dollars). Your function should: 1. Parse each transaction log entry and split it into its respective fields. 2. Create a dictionary for each transaction with keys: \\"timestamp\\", \\"user_id\\", \\"action_type\\", and \\"amount\\", and their corresponding values extracted from the log entry. 3. Return a list of dictionaries representing all transaction logs. Function Signature: ```python from typing import List, Dict, Union def process_transactions(logs: List[str]) -> List[Dict[str, Union[str, int]]]: pass ``` Example usage: ```python logs = [ \\"2023-09-15 08:45:00, user_123, deposit, 500\\", \\"2023-09-15 09:00:00, user_456, withdrawal, 300\\" ] structured_logs = process_transactions(logs) # Output: # [ # { # \\"timestamp\\": \\"2023-09-15 08:45:00\\", # \\"user_id\\": \\"user_123\\", # \\"action_type\\": \\"deposit\\", # \\"amount\\": 500 # }, # { # \\"timestamp\\": \\"2023-09-15 09:00:00\\", # \\"user_id\\": \\"user_456\\", # \\"action_type\\": \\"withdrawal\\", # \\"amount\\": 300 # } # ] ```","solution":"from typing import List, Dict, Union def process_transactions(logs: List[str]) -> List[Dict[str, Union[str, int]]]: result = [] for log in logs: parts = log.split(\\", \\") transaction = { \\"timestamp\\": parts[0], \\"user_id\\": parts[1], \\"action_type\\": parts[2], \\"amount\\": int(parts[3]) } result.append(transaction) return result"},{"question":"Create a function named `track_inventory` that tracks inventory levels of items in a JSON file. Your function should take the following parameters: 1. `item_name` (str): The name of the item. 2. `quantity` (int): The quantity of the item to be added or subtracted. 3. `operation` (str): The operation to be performed, either \'add\' or \'remove\'. 4. `filename` (str): The name of the JSON file to store the inventory. Your function should read the current inventory from the JSON file, update the inventory levels based on the operation, and then write the updated inventory back to the JSON file. If an item does not exist and \'add\' operation is performed, it should add the item with the provided quantity. If \'remove\' operation is performed and the item does not exist or if the removal quantity is greater than the current quantity, an appropriate message should be printed and no changes should be made. Ensure the function handles exceptions gracefully. If the file cannot be opened for reading or writing, a message \\"Error accessing the inventory file.\\" should be printed. Below is an outline function signature to be implemented: ```python def track_inventory(item_name, quantity, operation, filename): # Your implementation here ``` Example usage of the function: ```python track_inventory(\'Laptop\', 5, \'add\', \'inventory.json\') track_inventory(\'Mouse\', 2, \'remove\', \'inventory.json\') ``` The JSON file format should use the item name as the key and the quantity as the value, for example: ```json { \\"Laptop\\": 10, \\"Mouse\\": 25, \\"Keyboard\\": 17 } ```","solution":"import json def track_inventory(item_name, quantity, operation, filename): Track inventory levels of items in a JSON file. Parameters: item_name (str): The name of the item. quantity (int): The quantity of the item to be added or subtracted. operation (str): The operation to be performed, either \'add\' or \'remove\'. filename (str): The name of the JSON file to store the inventory. try: # Read current inventory try: with open(filename, \'r\') as file: inventory = json.load(file) except (FileNotFoundError, json.JSONDecodeError): inventory = {} # Perform the operation if operation == \'add\': if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif operation == \'remove\': if item_name not in inventory: print(f\\"Item \'{item_name}\' does not exist in inventory.\\") return if inventory[item_name] < quantity: print(f\\"Cannot remove {quantity} \'{item_name}\' since only {inventory[item_name]} available.\\") return inventory[item_name] -= quantity if inventory[item_name] == 0: del inventory[item_name] else: print(\\"Invalid operation. Only \'add\' or \'remove\' are allowed.\\") return # Write updated inventory back to file with open(filename, \'w\') as file: json.dump(inventory, file, indent=4) except IOError: print(\\"Error accessing the inventory file.\\")"},{"question":"You are asked to implement a function for solving linear systems of equations using the Gauss-Seidel iterative method. This method iteratively approximates the solution to a system of linear equations until a specified tolerance level is achieved or a maximum number of iterations is reached. Use the `numpy` library for matrix and vector operations. Function Signature ```python def gauss_seidel(A, b, x0, tol=1e-10, max_iters=1000): Solves the system of linear equations Ax = b using the Gauss-Seidel iterative method. Parameters: A : ndarray The coefficient matrix (2D array). b : ndarray The right-hand side vector (1D array). x0 : ndarray The initial guess for the solution (1D array). tol : float, optional The tolerance for convergence (default is 1e-10). max_iters : int, optional The maximum number of iterations (default is 1000). Returns: x : ndarray The approximate solution to the system of equations (1D array). ``` Detailed Steps to Implement 1. **Initialization**: Set the initial solution `x` to `x0`. Determine the size of the matrix `A`. 2. **Iterative Update**: For each iteration up to `max_iters`: - For each element in the solution vector `x`, update it using the Gauss-Seidel formula. - After updating all elements, check the convergence criteria by comparing the norm of the difference between the current and previous solutions to `tol`. - If convergence criteria are met, stop the iteration and return the solution. 3. **Return**: The function should return the approximate solution vector `x`. Helper Function A helper function to check the convergence can be implemented as follows: ```python def has_converged(x_old, x_new, tol): Checks if the solution has converged. Parameters: x_old : ndarray The solution vector at the previous iteration. x_new : ndarray The solution vector at the current iteration. tol : float The tolerance for convergence. Returns: bool True if the solution has converged, False otherwise. return np.linalg.norm(x_new - x_old) < tol ``` Gauss-Seidel Iteration Formula For each element of the solution vector `x`, the Gauss-Seidel formula is: ```python x[i] = (b[i] - sum(A[i, j] * x[j] for j in range(i)) - sum(A[i, j] * x_old[j] for j in range(i+1, n))) / A[i, i] ``` where `x_old` is the solution vector from the previous iteration, and `n` is the number of elements in `x`. **Requirement:** Use `numpy.linalg.norm` to calculate the norm of the difference between two vectors for checking convergence.","solution":"import numpy as np def has_converged(x_old, x_new, tol): Checks if the solution has converged. Parameters: x_old : ndarray The solution vector at the previous iteration. x_new : ndarray The solution vector at the current iteration. tol : float The tolerance for convergence. Returns: bool True if the solution has converged, False otherwise. return np.linalg.norm(x_new - x_old) < tol def gauss_seidel(A, b, x0, tol=1e-10, max_iters=1000): Solves the system of linear equations Ax = b using the Gauss-Seidel iterative method. Parameters: A : ndarray The coefficient matrix (2D array). b : ndarray The right-hand side vector (1D array). x0 : ndarray The initial guess for the solution (1D array). tol : float, optional The tolerance for convergence (default is 1e-10). max_iters : int, optional The maximum number of iterations (default is 1000). Returns: x : ndarray The approximate solution to the system of equations (1D array). n = len(b) x = x0.copy() for _ in range(max_iters): x_old = x.copy() for i in range(n): sigma = sum(A[i, j] * x[j] for j in range(n) if j != i) x[i] = (b[i] - sigma) / A[i, i] if has_converged(x_old, x, tol): break return x"},{"question":"You are required to write a function `moving_average` that calculates the moving average of a given 1D array. The moving average is a widely used technique in time-series analysis and signal processing for smoothing data by creating a series of averages of different subsets of the full dataset. The function should take two parameters: the input array and the window size (an integer representing the number of elements to include in each average). The result should be an array of the same length as the input, where each element is replaced by the average of elements within the specified window size. The task is to: 1. Implement the function `moving_average`. 2. Ensure that for positions at the beginning and end of the array where a complete window cannot be formed, the function should consider a smaller window that includes available elements. **Hints**: - Use the `numpy` library to perform efficient array operations. - Be mindful of edge cases where the window size might extend beyond the bounds of the array. # Function Signature: ```python def moving_average(array: np.ndarray, window_size: int) -> np.ndarray: ``` # Example: ```python import numpy as np # Input array example input_array = np.array([1, 3, 5, 7, 9, 11]) window_size = 3 # Method call smoothed_array = moving_average(input_array, window_size) print(smoothed_array) ``` # Expected Output: The output should display the smoothed array after applying the moving average. # Requirement: Use the `numpy` library functions to handle array operations efficiently. Example Expected Output: ```python array([3. , 3. , 5. , 7. , 9. , 10. ]) ```","solution":"import numpy as np def moving_average(array: np.ndarray, window_size: int) -> np.ndarray: Calculate the moving average of a 1D array with the given window size. For positions at the beginning and end of the array where a complete window cannot be formed, the function considers a smaller window including available elements. Args: array (np.ndarray): The input array. window_size (int): The window size for the moving average. Returns: np.ndarray: The array with the moving averages. if window_size <= 0: raise ValueError(\\"window_size must be positive\\") result = np.zeros_like(array, dtype=float) for i in range(len(array)): start_idx = max(0, i - window_size // 2) end_idx = min(len(array), i + window_size // 2 + 1) result[i] = np.mean(array[start_idx:end_idx]) return result"},{"question":"Write a Python function named `reverseWords` that takes a string as input and returns a new string where each word in the input string is reversed, but the order of the words remains the same. Words are defined as sequences of characters separated by spaces. # Example usage: ```python result = reverseWords(\'hello world\') print(result) # Output: \'olleh dlrow\' ``` # Requirements: 1. The function should use the `split` method to divide the input string into individual words. 2. Reverse each word using slicing or another method of your choice. 3. Use the `join` method to create the final output string with the words in the correct order, maintaining the original spaces.","solution":"def reverseWords(s: str) -> str: Takes a string as input and returns a new string where each word in the input string is reversed, but the order of the words remains the same. Parameters: s (str): The input string. Returns: str: The string with each word reversed but in the original order. reversed_words = [word[::-1] for word in s.split()] return \' \'.join(reversed_words)"},{"question":"You are given a string containing a mathematical expression consisting of non-negative integers, \'+\' and \'-\' operators, and parentheses. Your task is to evaluate the expression and return its result. Implement a function named `evaluate_expression(expression)` that processes the input string and computes the result of the expression while correctly respecting the operator precedence and parenthesis. # Example 1. For the input: `expression = \\"1 + 2 - (3 + 4)\\"`, the output should be `-4`. 2. For the input: `expression = \\"(2 + 3) - (1 + (2 - 1))\\"`, the output should be `3`. # Requirements: 1. The input `expression` is a string that contains non-negative integers, \'+\', \'-\', and parentheses. 2. There could be whitespace characters in the input string; they should be ignored during the evaluation. 3. The function should correctly handle nested parentheses and ensure proper order of operations. # Function Signature: ```python def evaluate_expression(expression: str) -> int: # Your implementation here ``` # Examples ```python print(evaluate_expression(\\"1 + 2 - (3 + 4)\\")) # Output: -4 print(evaluate_expression(\\"(2 + 3) - (1 + (2 - 1))\\")) # Output: 3 print(evaluate_expression(\\"10 - 5 + (3 - (2 + 1))\\")) # Output: 5 print(evaluate_expression(\\" 2- (3 + 4)\\")) # Output: -5 ``` Use the following steps as guidelines: 1. Remove all whitespace characters from the expression string. 2. Implement a stack-based approach to evaluate the expression, respecting the precedence of operations and parenthesis. 3. Ensure that your solution handles nested parentheses correctly and computes the final result efficiently.","solution":"def evaluate_expression(expression: str) -> int: def calculate(s): stack = [] num = 0 sign = 1 result = 0 for c in s: if c.isdigit(): num = num * 10 + int(c) elif c == \'+\': result += sign * num num = 0 sign = 1 elif c == \'-\': result += sign * num num = 0 sign = -1 elif c == \'(\': stack.append(result) stack.append(sign) sign = 1 result = 0 elif c == \')\': result += sign * num num = 0 result *= stack.pop() result += stack.pop() return result + sign * num expression = expression.replace(\' \', \'\') return calculate(expression)"},{"question":"You are given a set of transactions where each transaction consists of a category, a date, a description, and an amount. Your task is to write a function that calculates the total expense for each category. Implement the function `calculate_expenses(transactions)`, which computes the total expense for each category. Here is the detailed specification: - **Parameters:** - `transactions` (list of tuples): Each transaction is represented as a tuple containing four elements in the following order: - `category` (string): The category of the transaction. - `date` (string): The date of the transaction in the format `YYYY-MM-DD`. - `description` (string): A brief description of the transaction. - `amount` (float): The amount of the transaction (negative for expenses). - **Returns:** - `expenses_by_category` (dictionary): A dictionary where the keys are the category names and the values are the total expenses for that category. Ensure that your implementation handles the transactions correctly by summing the expenses for each category and representing the expense amount as a positive value in the resulting dictionary. Example: ```python transactions = [ (\\"Food\\", \\"2023-01-01\\", \\"Groceries\\", -50.0), (\\"Transport\\", \\"2023-01-02\\", \\"Bus Ticket\\", -2.5), (\\"Food\\", \\"2023-01-03\\", \\"Restaurant\\", -30.0), (\\"Utilities\\", \\"2023-01-04\\", \\"Electricity Bill\\", -60.0), (\\"Food\\", \\"2023-01-05\\", \\"Snacks\\", -10.0) ] output = { \\"Food\\": 90.0, \\"Transport\\": 2.5, \\"Utilities\\": 60.0 } ``` **Function Signature:** ```python def calculate_expenses(transactions): # Your code here pass ```","solution":"def calculate_expenses(transactions): Computes the total expense for each category from a list of transactions. Args: transactions (list of tuples): Each tuple contains the following: - category (str): The category of the transaction. - date (str): The date of the transaction in the format \'YYYY-MM-DD\'. - description (str): A brief description of the transaction. - amount (float): The amount of the transaction (negative for expenses). Returns: dict: A dictionary where keys are categories and values are total expenses (as positive values). expenses_by_category = {} for category, _, _, amount in transactions: if category not in expenses_by_category: expenses_by_category[category] = 0.0 expenses_by_category[category] += abs(amount) return expenses_by_category"},{"question":"Your task is to implement a function named `find_sudoku_solution` that solves a given 9x9 Sudoku puzzle. A Sudoku puzzle is a 9x9 grid divided into 3x3 subgrids, where each row, each column, and each subgrid must contain the numbers 1 through 9 exactly once. Your function `find_sudoku_solution` should take a single argument: - A 2D numpy array `board` of shape `(9, 9)` where empty cells are represented by `0` and filled cells contain a number from 1 to 9. The function should return a completed 9x9 numpy array that satisfies the constraints of Sudoku. If the puzzle is unsolvable, the function should return `None`. **Requirements:** - You must implement a valid algorithm to solve the Sudoku puzzle, such as backtracking. **Example Usage:** ```python import numpy as np sudoku_board = np.array([[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]]) solution = find_sudoku_solution(sudoku_board) print(solution) ``` Expected output (one possible solution): ``` [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]] ```","solution":"import numpy as np def find_sudoku_solution(board): Solves a given 9x9 Sudoku puzzle. Parameters: - board: a 2D numpy array of shape (9, 9) where empty cells are represented by 0 Returns: - A completed 9x9 numpy array solving the Sudoku puzzle or None if unsolvable. def is_valid(board, row, col, num): Check if num can be placed at board[row][col] # Check row if num in board[row]: return False # Check column if num in board[:, col]: return False # Check 3x3 block start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i, start_col + j] == num: return False return True def solve(board): # Find an empty cell for row in range(9): for col in range(9): if board[row, col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row, col] = num if solve(board): return True board[row, col] = 0 return False return True if solve(board): return board else: return None"},{"question":"Given a list of integers, your task is to write a function that identifies and returns all the pairs of distinct elements that sum up to a specific target value. The function should handle cases where multiple pairs can sum to the target value and ensure that each pair is unique. The function `findPairs(nums, target)` should perform the following steps: 1. Accept a list of integers `nums` and an integer `target` as input parameters. 2. Initialize an empty set to store pairs of integers that sum up to the target. 3. Iterate through the list and use an auxiliary set to keep track of visited elements. 4. For each element in the list, calculate its complement value needed to reach the target. 5. Check if the complement value exists in the visited set. 6. If it does, add the sorted pair (element, complement) to the result set to maintain uniqueness. 7. Add the current element to the visited set. 8. Convert the result set to a list of tuples and return it. Here are additional details: - Ensure each pair (a, b) is returned in ascending order (a < b). - The output should be a list of tuples sorted in ascending order by the first element of each tuple. Implement the function `findPairs(nums, target)` based on the functionality described above.","solution":"def findPairs(nums, target): Finds all unique pairs of distinct elements in \'nums\' that sum up to \'target\'. Parameters: nums (list): List of integers. target (int): Target sum. Returns: list: List of tuples with pairs that sum up to \'target\'. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"In this task, you are required to create a function that selects a random element from a list of strings and returns it. This will involve using Python\'s `random` library to generate random choices from sequences. The aim of the exercise is to practice using the `random.choice()` method. You need to write a function named `pick_random` that follows these specifications: 1. Accepts a list of strings as its parameter. 2. Returns a randomly picked string from the provided list. 3. Uses `random.seed()` to initialize the randomness for reproducible results. **Function Signature:** ```python def pick_random(strings: list) -> str: ... ``` # Example: ```python # Example of the usage strings = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"elderberry\\"] random_fruit = pick_random(strings) print(random_fruit) # Should print one of the fruits from the list ``` # Library Requirements: - The function must use `random.seed()` for initializing the randomness. # Constraints: - Ensure to import the `random` module. - Use `random.choice()` to pick a random element from the list. # Objective: The main objective of this task is to get familiarized with the use of the `random.choice()` method from the `random` library in Python, along with ensuring reproducible output using `random.seed()`.","solution":"import random def pick_random(strings: list) -> str: Accepts a list of strings and returns a randomly picked string from the provided list, with reproducible results by using random.seed(). random.seed(1) # Set the seed for reproducibility return random.choice(strings)"},{"question":"You are tasked with creating a function that calculates the sum of unique values in a list of integers provided as input. The function, named `sum_unique_values`, must ensure that only values that occur exactly once in the list are included in the sum. # Function Definition: ```python def sum_unique_values(nums): ``` # Parameters: - `nums` (list of int): A list of integers, where each integer is within the range [-1000, 1000]. # Returns: - (int): The sum of all unique values in the list. # Task: 1. Traverse through the list and determine the frequency of each integer. 2. Calculate the sum of integers that appear exactly once in the list. # Constraints: - The length of the input list `nums` is between 1 and 1000. # Examples: 1. **Example Input:** ```python nums = [1, 2, 2, 3, 4, 4, 5] ``` **Example Output:** ```python sum_unique_values(nums) => 9 ``` **Explanation:** The unique values are `[1, 3, 5]`. Their sum is `1 + 3 + 5 = 9`. 2. **Example Input:** ```python nums = [-1, -1, -2, 3, 3] ``` **Example Output:** ```python sum_unique_values(nums) => -2 ``` **Explanation:** The only unique value is `[-2]`. # Additional Notes: Ensure that the function handles edge cases efficiently, such as when the list contains only one element or when all elements are the same.","solution":"def sum_unique_values(nums): Calculate the sum of unique values in a list of integers. :param nums: List of integers. :return: Sum of unique integers. from collections import Counter # Get the frequency of each number in the list count = Counter(nums) # Sum the numbers that appear exactly once unique_sum = sum([num for num, freq in count.items() if freq == 1]) return unique_sum"},{"question":"In this problem, you need to write a function called `calculate_change` which simulates a cash register by calculating the minimum number of coins needed to make up a given amount of change. You are required to use the standard U.S. coin denominations: quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). # Function Signature ```python def calculate_change(cents: int) -> dict: ``` # Parameters - `cents`: An integer representing the amount of change in cents that you need to calculate. # Returns - The function should return a dictionary with the keys \\"quarters\\", \\"dimes\\", \\"nickels\\", and \\"pennies\\" representing the number of each type of coin needed to make up the given amount of change. # Example Usage ```python print(calculate_change(99)) # Output: {\'quarters\': 3, \'dimes\': 2, \'nickels\': 0, \'pennies\': 4} ``` # Detailed Requirements: 1. The function should use the largest denominations first before moving to smaller denominations. 2. Ensure that the returned dictionary contains all four keys, even if some of the values are zero. 3. Handle edge cases appropriately, such as when the input is zero or when the input is less than the value of the smallest denomination. # Constraints - You can assume that `cents` will always be a non-negative integer. # Notes - Think carefully about the order of operations when deducting values from `cents`. - Ensure your solution is efficient and concise.","solution":"def calculate_change(cents: int) -> dict: Calculate the minimum number of coins needed to make up a given amount of change. Args: cents (int): The amount of change in cents. Returns: dict: A dictionary with the keys \\"quarters\\", \\"dimes\\", \\"nickels\\", and \\"pennies\\" representing the number of each type of coin needed. # Define the value of each coin type in cents coin_values = {\\"quarters\\": 25, \\"dimes\\": 10, \\"nickels\\": 5, \\"pennies\\": 1} # Initialize dictionary to store the count of each coin type change = {\\"quarters\\": 0, \\"dimes\\": 0, \\"nickels\\": 0, \\"pennies\\": 0} # Calculate the number of each coin type needed for coin, value in coin_values.items(): if cents >= value: change[coin], cents = divmod(cents, value) return change"},{"question":"You are asked to write a function named `find_all_palindromes` that receives a string `s` as input. The function should return all distinct palindromic substrings of `s`, as well as the count of such substrings. A palindromic substring is a substring that reads the same forwards and backwards. To solve this problem, your function should identify every possible substring and check if it is a palindrome. To achieve this, follow these specific requirements: 1. Use a set to store palindromic substrings to ensure all found substrings are unique. 2. Iterate through all possible substrings of the input string to check if they are palindromic. 3. Return a list containing all distinct palindromic substrings and an integer representing the count of these substrings. Example usage: ```python # Example 1 input_string = \\"ababa\\" palindromes, count = find_all_palindromes(input_string) print(palindromes, count) # Expected output: [\'a\', \'aba\', \'b\', \'bab\', \'ababa\'] 5 # Example 2 input_string = \\"racecar\\" palindromes, count = find_all_palindromes(input_string) print(palindromes, count) # Expected output: [\'racecar\', \'cec\', \'a\', \'r\', \'e\', \'caca\'] 6 ``` Ensure that your function handles edge cases, such as single-character strings and empty strings gracefully.","solution":"def find_all_palindromes(s): Returns all distinct palindromic substrings of `s` and their count. Parameters: s (str): The input string. Returns: tuple: A list of distinct palindromic substrings and an integer count. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) palindromes_list = list(palindromes) count = len(palindromes_list) return palindromes_list, count"},{"question":"Create a function `flatten_dict` that takes a nested dictionary and returns a flattened version of it. The keys of the flattened dictionary should represent the hierarchy of the nested keys, joined by a separator. # Instructions: 1. The function should take two parameters: - `d`: The nested dictionary to be flattened. - `separator`: A string used to join the keys in the flattened dictionary. 2. The function should return a new dictionary with the flattened structure. 3. Include logic to handle dictionaries nested to an arbitrary depth. # Example: ```python def flatten_dict(d, separator=\'_\'): flattened = {} def recurse(current, parent_key=\'\'): if isinstance(current, dict): for key, value in current.items(): new_key = f\\"{parent_key}{separator}{key}\\" if parent_key else key recurse(value, new_key) else: flattened[parent_key] = current recurse(d) return flattened # Example usage nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } }, \'f\': { \'g\': 4 } } flattened = flatten_dict(nested_dict, separator=\'_\') print(flattened) ``` # Expected Output: ```python { \'a\': 1, \'b_c\': 2, \'b_d_e\': 3, \'f_g\': 4 } ``` # Notes: - The function should work with any level of nested dictionaries. - Assume keys do not contain the separator by default, but you can clarify this assumption in your function\'s documentation. - If the nested dictionary is empty, the output should be an empty dictionary.","solution":"def flatten_dict(d, separator=\'_\'): Flattens a nested dictionary. The keys of the flattened dictionary represent the hierarchy of the nested keys, joined by the specified separator. :param d: The nested dictionary to be flattened. :param separator: A string used to join the keys in the flattened dictionary. :return: A new dictionary with the flattened structure. flattened = {} def recurse(current, parent_key=\'\'): if isinstance(current, dict): for key, value in current.items(): new_key = f\\"{parent_key}{separator}{key}\\" if parent_key else key recurse(value, new_key) else: flattened[parent_key] = current recurse(d) return flattened # Example usage nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } }, \'f\': { \'g\': 4 } } flattened = flatten_dict(nested_dict, separator=\'_\') print(flattened)"},{"question":"You are required to implement a function that calculates the sum of the product of corresponding elements from two 2D lists. This operation is often used in image processing and linear algebra. Your function, `sum_of_products`, should take two inputs: - A 2D list of numbers `A`. - A 2D list of numbers `B` of the same dimensions as `A`. Your task is to: 1. Convert the 2D list `A` into a NumPy array using `numpy.array`. 2. Convert the 2D list `B` into a NumPy array using `numpy.array`. 3. Compute the element-wise product of `A` and `B` and then calculate the sum of these products. You should use `numpy.multiply` for element-wise multiplication and `numpy.sum` for summation. **Function Signature**: ```python def sum_of_products(A: list, B: list): pass ``` **Example**: ```python A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]] result = sum_of_products(A, B) print(result) # Output: 70 ``` **Notes:** - Ensure that the 2D lists `A` and `B` have the same dimensions. - Use of the NumPy library is required for array handling and performing operations.","solution":"import numpy as np def sum_of_products(A: list, B: list) -> float: Calculates the sum of the product of corresponding elements from two 2D lists. Args: - A: 2D list of numbers. - B: 2D list of numbers with the same dimensions as A. Returns: - The sum of the products of corresponding elements of A and B. # Convert lists to numpy arrays array_a = np.array(A) array_b = np.array(B) # Compute the element-wise product and sum the results product = np.multiply(array_a, array_b) result = np.sum(product) return result"},{"question":"In this problem, you are required to implement a function named `decision_tree_classifier` that trains a decision tree classifier using the provided dataset and evaluates its performance using accuracy. You will need to use specific libraries: `pandas` and `scikit-learn`. The dataset consists of multiple features with a mix of categorical and numerical values, as well as a target variable. Your goal is to preprocess the data, split it into training and test sets, train a decision tree classifier, and compute the accuracy of the model on the test set. You need to define the following function: ```python def decision_tree_classifier(data, target_column, test_size, random_state): ``` Parameters: - `data`: a DataFrame containing the dataset. - `target_column`: the name of the target column in the DataFrame. - `test_size`: the proportion of the dataset to include in the test set. - `random_state`: the seed used by the random number generator. The function should: 1. Preprocess the DataFrame, converting categorical columns into numerical values using one-hot encoding. 2. Split the data into training and test sets using the specified `test_size` and `random_state`. 3. Train a decision tree classifier on the training set. 4. Predict the target values for the test set. 5. Compute and print the accuracy of the model on the test set. 6. Return the trained decision tree classifier. You will need the following helper functions: - `preprocess_data` to handle the preprocessing of categorical data. - `split_data` to handle the splitting of the dataset into training and test sets. # Example Given: ```python data = pd.DataFrame({ \'feature1\': [1, 2, 3, 4, 5], \'feature2\': [\'A\', \'B\', \'A\', \'B\', \'A\'], \'target\': [0, 1, 0, 1, 0] }) target_column = \'target\' test_size = 0.2 random_state = 42 ``` The function should process the data, split it, train the classifier, calculate the accuracy, and return the trained model. # Libraries Documentation: - [pandas.DataFrame](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) - [sklearn.tree.DecisionTreeClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) - [sklearn.model_selection.train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) Note: Ensure that your solution handles various types of categorical features and verifies the consistency of the data preprocessing steps.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score def preprocess_data(data, target_column): Preprocess the data by converting categorical columns to numerical using one-hot encoding. features = data.drop(target_column, axis=1) target = data[target_column] # One-hot encoding of categorical features features_encoded = pd.get_dummies(features) return features_encoded, target def split_data(features, target, test_size, random_state): Split the data into training and test sets. X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=test_size, random_state=random_state) return X_train, X_test, y_train, y_test def decision_tree_classifier(data, target_column, test_size, random_state): Trains a decision tree classifier and evaluates its accuracy on the test set. # Preprocess the data features, target = preprocess_data(data, target_column) # Split the data X_train, X_test, y_train, y_test = split_data(features, target, test_size, random_state) # Train the decision tree classifier clf = DecisionTreeClassifier(random_state=random_state) clf.fit(X_train, y_train) # Predict the target values for the test set y_pred = clf.predict(X_test) # Compute the accuracy accuracy = accuracy_score(y_test, y_pred) print(f\\"Accuracy: {accuracy:.4f}\\") return clf"},{"question":"Design a function `move_robot` that simulates the movement of a robot in a 2D grid. The function should take three arguments: `commands`, `x_start`, and `y_start`. The `commands` argument is a list of single-character strings where each command represents a movement instruction for the robot (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right). The `x_start` and `y_start` arguments represent the initial coordinates of the robot. The objective is to determine the final coordinates of the robot after executing all the commands. Here are the specific tasks your function needs to solve: 1. Parse and iterate through each command in the `commands` list. 2. Update the robot\'s coordinates according to the command: - \'U\' (up) increases the y-coordinate by 1. - \'D\' (down) decreases the y-coordinate by 1. - \'L\' (left) decreases the x-coordinate by 1. - \'R\' (right) increases the x-coordinate by 1. 3. Return the final coordinates as a tuple `(x, y)`. **Function Signature:** ```python def move_robot(commands: list[str], x_start: int, y_start: int) -> tuple[int, int]: pass ``` **Example Invocation:** ```python print(move_robot([\'U\', \'U\', \'L\', \'D\', \'R\'], 0, 0)) # Output: (0, 1) ``` This should correctly simulate the robot\'s movement and return the final coordinates.","solution":"def move_robot(commands, x_start, y_start): Simulates the movement of a robot in a 2D grid. Parameters: commands (list of str): A list of commands (\'U\', \'D\', \'L\', \'R\'). x_start (int): Initial x-coordinate. y_start (int): Initial y-coordinate. Returns: tuple: Final coordinates of the robot (x, y). x, y = x_start, y_start for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"You are required to write a function `analyze_temperature_trends(city, year)` that analyzes and provides summary statistics of temperature trends for a given city and year using the Pandas library. The temperature data for different cities is stored in CSV files specified by the `CITY_TEMP_DATA` dictionary. Your function needs to perform the following tasks: 1. **Load the data**: Read the CSV file corresponding to the city. 2. **Filter by year**: Filter the DataFrame to include only data for the specified year. 3. **Calculate statistics**: Compute the mean, median, standard deviation, and the hottest day of the year. 4. **Return the results**: Return the computed statistics in a dictionary format. Here\'s the configuration dictionary for the city temperature data: ```python CITY_TEMP_DATA = { \'chicago\': \'chicago_temp.csv\', \'new york city\': \'new_york_city_temp.csv\', \'washington\': \'washington_temp.csv\' } ``` Your function signature should look like this: ```python def analyze_temperature_trends(city, year): # Your code here ``` # Input Parameters: - `city` (str): city name (e.g., \'chicago\', \'new york city\', \'washington\') - `year` (int): year to filter by (e.g., 2022, 2023) # Output: - `result` (dict): Dictionary containing the summary statistics with keys: \'mean_temp\', \'median_temp\', \'std_temp\', \'hottest_day\' The \'hottest_day\' should include both the temperature and the actual date (e.g., {\'date\': \'YYYY-MM-DD\', \'temperature\': value}). # Example Usage: ```python result = analyze_temperature_trends(\'chicago\', 2022) print(result) ``` # Requirements: 1. Use `pandas.read_csv` to load the data. 2. Use `pandas.to_datetime` to ensure any date column is in datetime format. 3. Handle missing or incorrect data gracefully. # Constraints: - Ensure the solution handles cases where the city name is not in `CITY_TEMP_DATA` dictionary. - Handle any potential edge cases, such as years with no available data.","solution":"import pandas as pd CITY_TEMP_DATA = { \'chicago\': \'chicago_temp.csv\', \'new york city\': \'new_york_city_temp.csv\', \'washington\': \'washington_temp.csv\' } def analyze_temperature_trends(city, year): Analyzes temperature trends for a given city and year. :param city: city name (e.g., \'chicago\', \'new york city\', \'washington\') :param year: year to filter by (e.g., 2022) :return: Dictionary containing summary statistics if city not in CITY_TEMP_DATA: raise ValueError(\\"City not found in data dictionary.\\") # Load the data file_path = CITY_TEMP_DATA[city] df = pd.read_csv(file_path) # Ensure date column is in datetime format if \'date\' in df.columns: df[\'date\'] = pd.to_datetime(df[\'date\']) else: raise ValueError(\\"Date column missing in data.\\") # Filter data by year df_year = df[df[\'date\'].dt.year == year] if df_year.empty: raise ValueError(\\"No data available for the specified year.\\") # Calculate statistics mean_temp = df_year[\'temperature\'].mean() median_temp = df_year[\'temperature\'].median() std_temp = df_year[\'temperature\'].std() hottest_day_row = df_year.loc[df_year[\'temperature\'].idxmax()] hottest_day = { \'date\': hottest_day_row[\'date\'].strftime(\'%Y-%m-%d\'), \'temperature\': hottest_day_row[\'temperature\'] } # Return results result = { \'mean_temp\': mean_temp, \'median_temp\': median_temp, \'std_temp\': std_temp, \'hottest_day\': hottest_day } return result"},{"question":"Write a function named `matrix_diagonal_sum` that takes a square 2D list (a matrix) as input and returns the sum of the elements on both of its diagonals. The primary diagonal runs from the top-left to the bottom-right, while the secondary diagonal runs from the top-right to the bottom-left. Here are the detailed requirements for the function: 1. **Function Name**: `matrix_diagonal_sum` 2. **Parameters**: The function accepts one parameter: - `matrix`: A square 2D list of integers. 3. **Return Value**: The function returns an integer, which is the sum of the elements on both diagonals. Take note of the following constraints and assumptions: - The input matrix is always a square matrix with at least one element. - Elements that lie on both diagonals should only be counted once. # Example ```python # Sample matrix matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(matrix_diagonal_sum(matrix)) ``` **Expected Output**: ``` 25 ``` Here, the primary diagonal elements are 1, 5, and 9, and the secondary diagonal elements are 3, 5, and 7. The number 5 is counted only once, so the sum is 1 + 5 + 9 + 3 + 7 = 25.","solution":"def matrix_diagonal_sum(matrix): Returns the sum of the elements on both the primary and secondary diagonals of a square matrix. Elements that lie on both diagonals are only counted once. n = len(matrix) total_sum = 0 for i in range(n): total_sum += matrix[i][i] # Primary diagonal total_sum += matrix[i][n-i-1] # Secondary diagonal # If n is odd, subtract the \\"center\\" element which was added twice if n % 2 == 1: center_index = n // 2 total_sum -= matrix[center_index][center_index] return total_sum"},{"question":"You are tasked with implementing a function called `sort_students` that sorts a list of student records based on multiple criteria. Each student record is represented as a dictionary with three keys: `\'name\'`, `\'grade\'`, and `\'age\'`. The function should sort the list primarily by `\'grade\'` in descending order, then by `\'age\'` in ascending order, and finally by `\'name\'` in ascending order (alphabetical order). Function Specification: - **Function Name**: `sort_students` - **Parameters**: - `students`: A list of dictionaries, where each dictionary represents a student with the keys `\'name\'`, `\'grade\'`, and `\'age\'`. - **Behavior**: The function should: 1. Sort the list of student dictionaries primarily by the `\'grade\'` key in descending order. 2. For students with the same grade, sort by the `\'age\'` key in ascending order. 3. For students with the same grade and age, sort by the `\'name\'` key in ascending order. Here\'s the template for the function that you need to complete: ```python def sort_students(students): # Your code here pass ``` # Example Usage: ```python students = [ {\'name\': \'Charlie\', \'grade\': 90, \'age\': 20}, {\'name\': \'Alice\', \'grade\': 95, \'age\': 22}, {\'name\': \'Bob\', \'grade\': 95, \'age\': 20}, {\'name\': \'David\', \'grade\': 90, \'age\': 20}, {\'name\': \'Eve\', \'grade\': 95, \'age\': 22} ] sorted_students = sort_students(students) print(sorted_students) ``` # Expected Output: The output should be: ```python [ {\'name\': \'Bob\', \'grade\': 95, \'age\': 20}, {\'name\': \'Alice\', \'grade\': 95, \'age\': 22}, {\'name\': \'Eve\', \'grade\': 95, \'age\': 22}, {\'name\': \'Charlie\', \'grade\': 90, \'age\': 20}, {\'name\': \'David\', \'grade\': 90, \'age\': 20} ] ``` # Goal: Improve your understanding of multi-criteria sorting using Python\'s sorting capabilities, including lambda functions and the `sorted()` function.","solution":"def sort_students(students): Sorts a list of student records based on multiple criteria: - Primarily by \'grade\' in descending order, - Then by \'age\' in ascending order, - Finally by \'name\' in ascending order. return sorted(students, key=lambda x: (-x[\'grade\'], x[\'age\'], x[\'name\']))"},{"question":"# Binary Tree Level Order Traversal Given a binary tree, write a function to return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). You are required to implement a function called `level_order_traversal()` that takes a binary tree as its input and returns a list of lists, where each list contains the values of the nodes at each level. **Function Signature:** ```python def level_order_traversal(root: TreeNode) -> list[list[int]]: # Your implementation here ``` Class Definition for TreeNode: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Example Usage: ```python # Example tree: # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) print(level_order_traversal(root)) # Output: [[3], [9, 20], [15, 7]] ``` Constraints: 1. The number of nodes in the tree is in the range [0, 2000]. 2. `-1000 <= Node.val <= 1000`. How to approach: 1. Use a queue to perform a breadth-first search (BFS) starting from the root node. 2. Maintain a list that accumulates the values of nodes at each level as you process them level by level. 3. Return the accumulated list of lists after the traversal is complete.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root: TreeNode) -> list[list[int]]: Perform a level order traversal of a binary tree. :param root: TreeNode, the root of the binary tree. :return: list of lists, where each list contains the values of the nodes at each level. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Implement a function to parse a log file and extract specific information. The function takes a log file with entries indicating the timestamp, user ID, and action performed by the user (such as \\"login\\", \\"logout\\", \\"upload_file\\", etc.). The function should extract and return a list of distinct user IDs and the number of unique actions performed by each user. Each line in the log file is of the format: ``` YYYY-MM-DD HH:MM:SS USER_ID ACTION ``` Example: ``` 2023-01-01 12:00:00 123 login 2023-01-01 12:05:00 123 upload_file 2023-01-01 12:10:00 124 login 2023-01-01 12:11:00 123 logout 2023-01-01 12:12:00 124 upload_file ``` The function should return a dictionary where the keys are user IDs and the values are the count of unique actions performed by each user. You should write self-contained code starting with: ``` def parse_log(file_path): ```","solution":"def parse_log(file_path): Parses a log file and extracts a dictionary where the keys are user IDs and the values are the count of unique actions performed by each user. Args: file_path (str): The path to the log file. Returns: dict: A dictionary with user IDs as keys and counts of unique actions as values. user_actions = {} with open(file_path, \'r\') as file: for line in file: _, _, user_id, action = line.strip().split() if user_id not in user_actions: user_actions[user_id] = set() user_actions[user_id].add(action) # Convert sets to count of unique actions result = {user_id: len(actions) for user_id, actions in user_actions.items()} return result"},{"question":"You are tasked with writing a function `distinct_countries_count` that takes a list of strings where each string represents a country visited by a traveler, in the order they were visited. This function should return the count of distinct countries visited by the traveler. To achieve this, you should utilize the Python set data structure which automatically handles uniqueness of elements. Here is the step-by-step breakdown of what the function should do: 1. Convert the list of countries to a set to remove duplicates and keep only distinct country names. 2. Return the size of the set, which represents the number of distinct countries visited. **Function Signature:** ```python def distinct_countries_count(countries: List[str]) -> int: ``` **Parameters:** - `countries: List[str]` - A list of strings representing the countries visited. **Returns:** - `int` - The count of distinct countries visited. **Example:** ```python countries = [\\"USA\\", \\"Canada\\", \\"Mexico\\", \\"USA\\", \\"Canada\\"] distinct_countries_count(countries) ``` *Output:* `3`","solution":"from typing import List def distinct_countries_count(countries: List[str]) -> int: Returns the count of distinct countries visited. Parameters: - countries: List[str] - A list of strings representing the countries visited. Returns: - int - The count of distinct countries visited. return len(set(countries))"},{"question":"Create a function named `calculate_average_sentiment` that processes a list of sentences, where each sentence is scored by its sentiment on a scale from -1 to 1. The function should utilize dictionary comprehension and averaging techniques to determine the overall sentiment of the text. The sentiment score for each sentence will be provided in a separate dictionary. Here\'s what your function should do: 1. Accept two parameters: `sentences`, a list of strings, and `sentiment_scores`, a dictionary where each key is a sentence from the `sentences` list, and the corresponding value is its sentiment score. 2. Use dictionary comprehension to filter out the sentences with a neutral sentiment (score of 0). 3. Compute the average sentiment score of the remaining sentences. 4. Return the average sentiment score as a float. The function should handle cases where all sentences might have neutral sentiment and return 0 in such scenarios. Ensure proper validation of inputs to match the expected types and values. Example usage: ```python sentences = [\\"I love this!\\", \\"This is okay.\\", \\"I hate this!\\", \\"It is neither good nor bad.\\"] sentiment_scores = { \\"I love this!\\": 0.9, \\"This is okay.\\": 0.1, \\"I hate this!\\": -0.8, \\"It is neither good nor bad.\\": 0.0 } average_sentiment = calculate_average_sentiment(sentences, sentiment_scores) print(average_sentiment) # Output: 0.06666666666666667 ```","solution":"def calculate_average_sentiment(sentences, sentiment_scores): Calculate the average sentiment score for a list of sentences. Parameters: sentences (list of str): A list of sentences. sentiment_scores (dict): A dictionary where the key is a sentence and the value is its sentiment score. Returns: float: The average sentiment score of the sentences with non-zero sentiment. # Dictionary comprehension to filter out sentences with neutral sentiment non_neutral_scores = {sentence: score for sentence, score in sentiment_scores.items() if score != 0} # Check if there are any non-neutral sentences if not non_neutral_scores: return 0.0 # Calculate the average sentiment score total_score = sum(non_neutral_scores.values()) count = len(non_neutral_scores) return total_score / count"},{"question":"You need to implement the function `find_shortest_path` to determine the shortest path in a weighted, directed graph using Dijkstra\'s algorithm. Ensure the function handles graphs with varying connectivity and weights. # Function Signature ```python def find_shortest_path(graph: dict, start_node: str, end_node: str) -> list: pass ``` # Inputs 1. `graph`: A dictionary representing the weighted, directed graph. The keys are strings representing nodes, and the values are dictionaries of adjacent nodes and their edge weights. For example: ```python { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'C\': 2, \'D\': 5}, \'C\': {\'D\': 1}, \'D\': {} } ``` 2. `start_node`: A string representing the starting node. 3. `end_node`: A string representing the target node. # Outputs - The function returns a list of strings representing the nodes in the order they are visited in the shortest path from `start_node` to `end_node`. If no path exists, return an empty list. # Example ```python graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'C\': 2, \'D\': 5}, \'C\': {\'D\': 1}, \'D\': {} } start_node = \'A\' end_node = \'D\' result = find_shortest_path(graph, start_node, end_node) print(result) ``` This should output: ``` [\'A\', \'B\', \'C\', \'D\'] ``` # Constraints - The graph is non-null and contains a finite number of nodes and edges. - Assume all edge weights are non-negative. - If there are multiple shortest paths, return any one of them. # Additional Notes: - Use Dijkstra\'s algorithm to find the shortest path. - You may use the `heapq` library for the priority queue functionality.","solution":"import heapq def find_shortest_path(graph: dict, start_node: str, end_node: str) -> list: Uses Dijkstra\'s algorithm to find the shortest path in a weighted, directed graph. Returns a list of nodes representing the shortest path from start_node to end_node. # Initialize the shortest path table with infinity for all nodes except the start node shortest_paths = {node: (float(\'inf\'), None) for node in graph} shortest_paths[start_node] = (0, None) # Priority queue to hold all nodes being currently processed, starting with start_node priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reach the end_node, we can reconstruct the path if current_node == end_node: path = [] while current_node is not None: path.append(current_node) current_node = shortest_paths[current_node][1] return path[::-1] # Return the path in reverse order # Process the neighbors of the current node for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # If a shorter path to the neighbor is found if distance < shortest_paths[neighbor][0]: shortest_paths[neighbor] = (distance, current_node) heapq.heappush(priority_queue, (distance, neighbor)) # If we exit the loop without finding the end_node, it means there\'s no path return []"},{"question":"You are tasked with writing a Python function named `track_expenses` that helps users keep track of their daily expenses. The function should interact with the user to allow them to input the amount spent on various categories throughout the day and calculate the total amount spent at the end of the day. Here are the specific requirements for the function `track_expenses`: 1. The function should create an empty dictionary named `expenses` to store different categories and their corresponding total amounts spent. 2. The function should repeatedly prompt the user to enter the category of the expense and the amount spent in that category. 3. If the user enters a category that already exists in the dictionary, the function should add the amount to the existing total for that category. 4. After recording each expense, the function should ask the user: \\"Do you want to add another expense? (yes/no)\\". 5. If the user inputs \\"yes\\", the function should prompt for another expense and repeat the process. 6. If the user inputs \\"no\\", the function should print the total amount spent in each category and the overall total amount spent for the day, then terminate. 7. The function should handle non-numeric inputs for the amount spent by displaying an appropriate message and prompting the user for a valid number. Your task is to implement the `track_expenses` function following the above requirements.","solution":"def track_expenses(): expenses = {} while True: category = input(\\"Enter the expense category: \\") while True: try: amount = float(input(f\\"Enter the amount spent in {category}: \\")) break except ValueError: print(\\"Invalid input. Please enter a numeric value for the amount.\\") if category in expenses: expenses[category] += amount else: expenses[category] = amount another_expense = input(\\"Do you want to add another expense? (yes/no): \\").strip().lower() if another_expense != \'yes\': break total_expenses = sum(expenses.values()) print(\\"nExpense summary:\\") for category, amount in expenses.items(): print(f\\"{category}: {amount:.2f}\\") print(f\\"Total: {total_expenses:.2f}\\")"},{"question":"Write a function that takes a string as input, identifies all URLs within the string, and masks these URLs by replacing them with the word \\"[LINK]\\". The function should return the modified string. The function should raise the exception for: ValueError: If the input string is empty. You should write self-contained code starting with: ``` import re def mask_urls(input_string): ```","solution":"import re def mask_urls(input_string): Masks all URLs in the input string by replacing them with the word \\"[LINK]\\". :param input_string: The string containing potential URLs. :return: The modified string with URLs replaced by \\"[LINK]\\". :raises ValueError: If the input string is empty. if not input_string: raise ValueError(\\"Input string is empty.\\") # Regular expression to find URLs url_pattern = r\'(http|https)://[^s/.?#].[^s]*\' # Replace all URLs with \\"[LINK]\\" masked_string = re.sub(url_pattern, \'[LINK]\', input_string) return masked_string"},{"question":"You are tasked with implementing a function called `distinctSubstrings` that calculates the number of distinct substrings of a given string. A substring is defined as any contiguous sequence of characters within the string. To efficiently compute the number of distinct substrings, you will utilize a suffix array and a longest common prefix (LCP) array. A suffix array is an array of all suffixes of a given string sorted in lexicographical order. The LCP array contains the lengths of the longest common prefixes between each pair of consecutive suffixes in the suffix array. # Task Write a function `distinctSubstrings` that takes a string `s` and returns the number of distinct substrings in the string. The function signature is as follows: ```python def distinctSubstrings(s: str) -> int: # your code here ``` Input - `s` (str): A string consisting of lowercase English letters. Output - int: The number of distinct substrings in the given string. # Detailed Explanation 1. Build the suffix array for the string `s`. 2. Construct the LCP array using the suffix array. 3. Use the suffix array and LCP array to count the number of distinct substrings. # Example ```python s = \\"banana\\" print(distinctSubstrings(s)) ``` Expected Output: ```python 15 ``` # Reasoning The string \\"banana\\" has the following distinct substrings: {\\"a\\", \\"b\\", \\"n\\", \\"an\\", \\"ba\\", \\"na\\", \\"ban\\", \\"nan\\", \\"ana\\", \\"bana\\", \\"nana\\", \\"banan\\", \\"anana\\", \\"banana\\"}. Hence, the output is 15. # Constraints - The length of string `s` is at least 1 and at most `10^4`. - The string `s` consists only of lowercase English letters.","solution":"def build_suffix_array(s): suffixes = sorted((s[i:], i) for i in range(len(s))) suffix_array = [suffix[1] for suffix in suffixes] return suffix_array def build_lcp_array(s, suffix_array): n = len(s) rank = [0] * n lcp = [0] * n for i, suff in enumerate(suffix_array): rank[suff] = i h = 0 for i in range(n): if rank[i] > 0: j = suffix_array[rank[i] - 1] while i + h < n and j + h < n and s[i + h] == s[j + h]: h += 1 lcp[rank[i]] = h if h > 0: h -= 1 return lcp def distinctSubstrings(s): n = len(s) suffix_array = build_suffix_array(s) lcp = build_lcp_array(s, suffix_array) total_substrings = n * (n + 1) // 2 total_common_substrings = sum(lcp) return total_substrings - total_common_substrings"},{"question":"Create a function that takes a list of strings and returns a dictionary with the lengths of the strings as keys and the corresponding lists of strings of that length as values. If the input is not a list of strings, raise a TypeError exception. The function should output: dict: A dictionary where each key is an integer representing string length, and the corresponding value is a list of strings that have that length. You should write self-contained code starting with: ```python def group_strings_by_length(strings): ```","solution":"def group_strings_by_length(strings): Groups strings by their length. Args: strings (list): A list of strings. Returns: dict: A dictionary where the keys are lengths of strings and values are lists of strings of that length. Raises: TypeError: If input is not a list of strings. if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings): raise TypeError(\\"Input must be a list of strings\\") result = {} for s in strings: length = len(s) if length not in result: result[length] = [] result[length].append(s) return result"},{"question":"You are tasked with creating a system to evaluate product performance in an e-commerce platform. Specifically, you need to determine the number of days a specific product\'s daily sales exceeded a given threshold. This will be instrumental in identifying high-demand periods and making data-driven inventory decisions. # Function Specification Write a function `count_high_sales_days(product_id: str, sales_threshold: int, sales_data: str) -> int` that takes in three parameters: - `product_id` (string): The ID of the product we are analyzing. - `sales_threshold` (integer): The minimum sales count required in a day for that day to be counted. - `sales_data` (string): The sales data in JSON format. Each entry in the JSON contains `product_id`, `date` (in the format \\"YYYY-MM-DD\\"), and `sales_count` (an integer representing the number of sales for that product on that day). The function should return the number of days where the product\'s sales count meets or exceeds `sales_threshold`. # Input - `product_id`: \\"prod123\\" - `sales_threshold`: 50 - `sales_data`: JSON string containing: ```json [ {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-01\\", \\"sales_count\\": 45}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-02\\", \\"sales_count\\": 55}, {\\"product_id\\": \\"prod456\\", \\"date\\": \\"2023-03-01\\", \\"sales_count\\": 60}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-03\\", \\"sales_count\\": 60}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-04\\", \\"sales_count\\": 40} ] ``` # Constraints - Assume that each `product_id` is unique within each entry. - Dates are all in the correct format, and no date conversions/errors will occur. # Output - The function should return `2` for the sample input above, as there are two days (2023-03-02 and 2023-03-03) where the sales count for `prod123` meets or exceeds the sales threshold. # Libraries Required You **must** use the following pandas functions for the respective purposes stated: - `pandas.to_datetime` - `pandas.Series` - `pandas.DataFrame` - `pandas.read_json` # Task Implement the function `count_high_sales_days` adhering to the specified requirements. # Example ```python sales_data = \'\'\' [ {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-01\\", \\"sales_count\\": 45}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-02\\", \\"sales_count\\": 55}, {\\"product_id\\": \\"prod456\\", \\"date\\": \\"2023-03-01\\", \\"sales_count\\": 60}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-03\\", \\"sales_count\\": 60}, {\\"product_id\\": \\"prod123\\", \\"date\\": \\"2023-03-04\\", \\"sales_count\\": 40} ] \'\'\' print(count_high_sales_days(\\"prod123\\", 50, sales_data)) # Output: 2 ```","solution":"import pandas as pd import json def count_high_sales_days(product_id: str, sales_threshold: int, sales_data: str) -> int: Returns the number of days where the given product\'s sales count meets or exceeds the sales threshold. # Parse the JSON sales data sales_list = json.loads(sales_data) # Create a DataFrame from the list df = pd.DataFrame(sales_list) # Filter DataFrame for the specific product_id df_filtered = df[df[\'product_id\'] == product_id] # Count the number of days when sales_count meets or exceeds the threshold high_sales_days = df_filtered[df_filtered[\'sales_count\'] >= sales_threshold] return len(high_sales_days)"},{"question":"Your task is to write a function named `random_forest_importance` that calculates and returns the feature importances using a `RandomForestClassifier` from the `scikit-learn` library. The function should train the classifier on the provided data and then return a Pandas DataFrame with two columns: `feature` and `importance`, sorted by the `importance` in descending order. # Function Signature ```python def random_forest_importance(X, y): pass ``` # Parameters 1. **X**: The feature matrix (numpy array or pandas DataFrame) containing the independent variables. 2. **y**: The target vector (numpy array or pandas Series) containing the dependent variable. # Output - A pandas DataFrame with the columns `feature` (the feature names or column indices) and `importance` (the importance of each feature, calculated by the `RandomForestClassifier`). This dataframe should be sorted by `importance` in descending order. # Constraints - Ensure to use the `RandomForestClassifier` from the `sklearn.ensemble` library. - Make sure to handle `X` if it is given as a numpy array by converting it to a DataFrame with appropriate column names. - Implement efficient coding practices and ensure the function handles any potential warnings or errors. # Example Usage ```python from sklearn.datasets import load_iris # Load data data = load_iris() X, y = data.data, data.target feature_names = data.feature_names # Perform feature importance calculation importance_df = random_forest_importance(X, y) print(importance_df) ``` # Educational Focus This problem is designed to educate on: - Using the `RandomForestClassifier` to assess feature importance. - Handling and manipulating data with pandas DataFrames. - Understanding the role of feature importance in model interpretability and selection.","solution":"import pandas as pd from sklearn.ensemble import RandomForestClassifier def random_forest_importance(X, y): Train a RandomForestClassifier and return feature importances. Parameters: - X: Feature matrix, can be a numpy array or pandas DataFrame - y: Target vector, can be a numpy array or pandas Series Returns: - Pandas DataFrame with columns \'feature\' and \'importance\' sorted by importance in descending order. # Convert X to DataFrame if it is a numpy array if isinstance(X, pd.DataFrame): feature_names = X.columns else: feature_names = [f\'feature_{i}\' for i in range(X.shape[1])] X = pd.DataFrame(X, columns=feature_names) # Initialize and train the RandomForestClassifier rf = RandomForestClassifier() rf.fit(X, y) # Get feature importances importances = rf.feature_importances_ # Create a DataFrame for feature importances importance_df = pd.DataFrame({ \'feature\': feature_names, \'importance\': importances }) # Sort by importance in descending order importance_df = importance_df.sort_values(by=\'importance\', ascending=False).reset_index(drop=True) return importance_df"},{"question":"Implement a function `substring_occurrences` that counts how many times a given substring appears within another string, considering overlapping occurrences. Your function should: 1. Take in two parameters: - `text` : a string in which we will search for the substring occurrences. - `substring` : a string that represents the substring we are searching for within `text`. 2. Count the number of times `substring` appears in `text`, including overlapping occurrences. 3. Return the count of the occurrences. **Guidance for Implementation:** - Use a loop to iterate through `text` and find instances of `substring` starting at each character. - Ensure you check overlapping occurrences by continuing the search one character after the previous match\'s start position. **Example Usage:** ```python text = \\"ababa\\" substring = \\"aba\\" count = substring_occurrences(text, substring) print(count) # Output should be 2 ``` Function Signature: ```python def substring_occurrences(text: str, substring: str) -> int: pass ```","solution":"def substring_occurrences(text: str, substring: str) -> int: if not substring: return 0 count = 0 i = 0 while i <= len(text) - len(substring): if text[i:i + len(substring)] == substring: count += 1 i += 1 else: i += 1 return count"},{"question":"You are required to implement a function called `simulate_traffic` that will simulate the traffic flow at an intersection. This function will take parameters for the number of cars arriving per minute in each direction (north, south, east, west) and the duration of the simulation in minutes. The function will randomly generate the arrival of cars based on a Poisson distribution and simulate the traffic lights switching in a standard pattern (e.g., north-south green, then east-west green). You can use the following NumPy function: `numpy.random.poisson`. Here\'s a detailed explanation of the function and its parameters: ```python def simulate_traffic(north_rate: float, south_rate: float, east_rate: float, west_rate: float, duration: int): Simulate the traffic flow at an intersection. Parameters: north_rate (float): Average number of cars arriving per minute from the north. south_rate (float): Average number of cars arriving per minute from the south. east_rate (float): Average number of cars arriving per minute from the east. west_rate (float): Average number of cars arriving per minute from the west. duration (int): Duration of the simulation in minutes. Returns: dict: A dictionary containing the total number of cars that pass through each direction. ``` # Steps to Implement: 1. Generate the number of cars arriving per minute for each direction using `numpy.random.poisson` with the respective rates. 2. Simulate the traffic lights switching every minute in the pattern (north-south green, then east-west green). 3. Allow cars to pass through the intersection only when the light is green for their direction. 4. Keep track of the total number of cars that pass through the intersection from each direction. 5. Return the total number of cars that pass through for each direction as a dictionary. # Example: ```python import numpy as np def simulate_traffic(north_rate, south_rate, east_rate, west_rate, duration): north_total = south_total = east_total = west_total = 0 for minute in range(duration): north_arrivals = np.random.poisson(north_rate) south_arrivals = np.random.poisson(south_rate) east_arrivals = np.random.poisson(east_rate) west_arrivals = np.random.poisson(west_rate) if minute % 2 == 0: # North-South green light north_total += north_arrivals south_total += south_arrivals else: # East-West green light east_total += east_arrivals west_total += west_arrivals return { \'north\': north_total, \'south\': south_total, \'east\': east_total, \'west\': west_total } # Example usage: results = simulate_traffic(2.5, 3.0, 2.0, 1.5, 60) print(results) # Example output: {\'north\': 75, \'south\': 90, \'east\': 68, \'west\': 45} ```","solution":"import numpy as np def simulate_traffic(north_rate, south_rate, east_rate, west_rate, duration): Simulate the traffic flow at an intersection. Parameters: north_rate (float): Average number of cars arriving per minute from the north. south_rate (float): Average number of cars arriving per minute from the south. east_rate (float): Average number of cars arriving per minute from the east. west_rate (float): Average number of cars arriving per minute from the west. duration (int): Duration of the simulation in minutes. Returns: dict: A dictionary containing the total number of cars that pass through each direction. north_total = south_total = east_total = west_total = 0 for minute in range(duration): north_arrivals = np.random.poisson(north_rate) south_arrivals = np.random.poisson(south_rate) east_arrivals = np.random.poisson(east_rate) west_arrivals = np.random.poisson(west_rate) if minute % 2 == 0: # North-South green light north_total += north_arrivals south_total += south_arrivals else: # East-West green light east_total += east_arrivals west_total += west_arrivals return { \'north\': north_total, \'south\': south_total, \'east\': east_total, \'west\': west_total }"},{"question":"# Command-Line Diary Entry Application You are tasked with creating a command-line diary application that allows users to add and view diary entries. The entries should be timestamped and stored in a dictionary. The application will provide simple commands to add a new entry, view all entries, and quit the application. Your task is to complete the `Diary` class with the following methods: 1. **add_entry**: This method takes a string representing the diary entry and stores it with the current timestamp. 2. **view_entries**: This method displays all diary entries in the order they were added, with their corresponding timestamps. 3. **quit**: This method exits the program gracefully. # Example Given: ```python diary = Diary() ``` The following operations: ```python diary.add_entry(\\"Went to the gym\\") diary.add_entry(\\"Finished reading a book\\") diary.view_entries() ``` Could produce an output similar to: ``` Diary entries: 1. [2023-10-05 10:30:00] Went to the gym 2. [2023-10-05 14:45:00] Finished reading a book ``` # Input Specifications 1. The `add_entry` method takes a single argument, a string representing the diary entry. 2. The `view_entries` method takes no arguments. 3. The `quit` method takes no arguments. # Additional Information - Use Python\'s `datetime` module to manage timestamps. - The entries should be stored in a dictionary with the timestamp as the key and the entry text as the value. - Maintain a list to preserve the order in which the entries were added for display purposes. # Implementation Requirements 1. Define the `Diary` class. 2. Implement the `add_entry`, `view_entries`, and `quit` methods. 3. Use proper formatting to display the entries with timestamps. Ensure that the class operates correctly with the following structure: ```python from datetime import datetime class Diary: def __init__(self): self.entries = {} self.order = [] def add_entry(self, entry): timestamp = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") self.entries[timestamp] = entry self.order.append(timestamp) def view_entries(self): if not self.entries: print(\\"No entries in the diary.\\") else: print(\\"Diary entries:\\") for idx, timestamp in enumerate(self.order, 1): print(f\\"{idx}. [{timestamp}] {self.entries[timestamp]}\\") def quit(self): print(\\"Exiting diary. Goodbye!\\") import sys sys.exit() ```","solution":"from datetime import datetime class Diary: def __init__(self): self.entries = [] def add_entry(self, entry): Adds a new diary entry with the current timestamp. timestamp = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") self.entries.append((timestamp, entry)) def view_entries(self): Displays all diary entries with timestamps in the order they were added. if not self.entries: print(\\"No entries in the diary.\\") else: print(\\"Diary entries:\\") for idx, (timestamp, entry) in enumerate(self.entries, 1): print(f\\"{idx}. [{timestamp}] {entry}\\") def quit(self): Exits the program gracefully. print(\\"Exiting diary. Goodbye!\\") import sys sys.exit()"},{"question":"You are required to create a function named `generate_exponential_plot` that generates and displays a plot of an exponential function `exp_function(x)` over a specified range of x-values. This function should utilize the `matplotlib.pyplot` library to create and customize the plot. The function `exp_function(x)` is defined as: [ text{exp_function}(x) = e^x ] where ( e ) is the base of the natural logarithm. The x-values for the plot should range from -2 to 2 with 200 equally spaced points. Your task is to: 1. Create and label the x-axis as \'x\'. 2. Create and label the y-axis as \'exp_function(x)\'. 3. Plot the function using a blue dashed line. 4. Add a title to the plot that says \'Exponential Function\'. **Function Signature:** ```python def generate_exponential_plot(): pass ``` **Requirements:** - Use the `matplotlib.pyplot` library. - Explicitly use the functions `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.title`, and `matplotlib.pyplot.plot` to label the x-axis, add the title to the plot, and create the plot, respectively.","solution":"import matplotlib.pyplot as plt import numpy as np def generate_exponential_plot(): Generates and displays a plot of the exponential function exp_function(x) = e^x over the range of x-values from -2 to 2. # Define the range of x-values x = np.linspace(-2, 2, 200) # Define the exponential function y = np.exp(x) # Create the plot plt.plot(x, y, \'b--\') # Label the x-axis plt.xlabel(\'x\') # Label the y-axis plt.ylabel(\'exp_function(x)\') # Add a title plt.title(\'Exponential Function\') # Display the plot plt.show()"},{"question":"In a digital culinary app, users often want to find recipes based on the ingredients they have at home. You are tasked with writing a function to assist in this process. Specifically, you will write a function called `find_recipes` that takes two arguments: a list of ingredients the user currently has and a dictionary of recipes. Each key in the dictionary is a recipe name, and each value is a list of ingredients required for that recipe. The function should return a list of recipes that the user can make with the ingredients they have. **Requirements:** - Implement the function `find_recipes()` to match recipes based on available ingredients. - The user should be able to make a recipe if they have all the necessary ingredients. - The function should be case-insensitive but should return recipe names as they appear in the dictionary. **Function Signature:** ```python def find_recipes(user_ingredients: list, recipes: dict) -> list: ``` **Example:** ```python user_ingredients = [\\"egg\\", \\"flour\\", \\"sugar\\", \\"milk\\", \\"butter\\"] recipes = { \\"Pancakes\\": [\\"flour\\", \\"milk\\", \\"egg\\", \\"butter\\"], \\"Omelette\\": [\\"egg\\", \\"milk\\", \\"salt\\"], \\"Chocolate Cake\\": [\\"flour\\", \\"sugar\\", \\"cocoa powder\\", \\"baking powder\\", \\"egg\\"] } print(find_recipes(user_ingredients, recipes)) > [\\"Pancakes\\", \\"Omelette\\"] ``` **Constraints:** - Both user ingredients and recipe ingredients lists will contain only lowercase alphabets and spaces. - The function should be efficient enough to handle up to 1000 ingredients and 1000 recipes. - Each recipe\'s ingredient list will contain between 1 and 15 ingredients.","solution":"def find_recipes(user_ingredients: list, recipes: dict) -> list: Find recipes that can be made with the available user ingredients. :param user_ingredients: List of ingredients the user currently has. :param recipes: Dictionary where keys are recipe names and values are lists of ingredients required for that recipe. :return: List of recipe names that can be made with the available ingredients. user_ingredients_set = set(ingredient.lower() for ingredient in user_ingredients) available_recipes = [] for recipe_name, recipe_ingredients in recipes.items(): if all(ingredient.lower() in user_ingredients_set for ingredient in recipe_ingredients): available_recipes.append(recipe_name) return available_recipes"},{"question":"The goal of this problem is to help you understand how to implement and utilize a linked list data structure. Given a series of integer values, your task is to perform specific operations on a singly linked list. You need to write a class called `LinkedList` which should support the following operations: 1. **Insert** a new node with a given value at the end of the linked list. 2. **Delete** a node with a specific value from the linked list. 3. **Find** the length of the linked list. 4. **Search** for a node with a specific value in the linked list. The class `LinkedList` should contain the following methods: - `insert(self, value: int) -> None`: Inserts a new node containing `value` at the end of the list. - `delete(self, value: int) -> bool`: Deletes the first node containing `value`. Returns `True` if a node was deleted, and `False` otherwise. - `length(self) -> int`: Returns the number of nodes in the list. - `search(self, value: int) -> bool`: Searches for a node containing `value`. Returns `True` if such a node is found, and `False` otherwise. Each node in the linked list should be represented by a class `Node` containing the following attributes: - `value` (int): The value stored in the node. - `next` (Node, optional): A reference to the next node in the list (or `None` if there is no next node). The methods in the `LinkedList` class should follow these signatures: ```python class Node: def __init__(self, value: int): self.value = value self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, value: int) -> None: Inserts a new node with the given value at the end of the linked list. Args: value (int): The value to be inserted into the linked list. # Implementation here def delete(self, value: int) -> bool: Deletes the first node containing the given value from the linked list. Args: value (int): The value to be deleted from the linked list. Returns: bool: True if the node is deleted, False otherwise. # Implementation here def length(self) -> int: Returns the number of nodes in the linked list. Returns: int: The length of the linked list. # Implementation here def search(self, value: int) -> bool: Searches for a node containing the given value in the linked list. Args: value (int): The value to be searched in the linked list. Returns: bool: True if the node is found, False otherwise. # Implementation here ``` You are encouraged to consider edge cases such as deleting from an empty list, searching for a value that does not exist in the list, and inserting the first node into an empty list.","solution":"class Node: def __init__(self, value: int): self.value = value self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, value: int) -> None: new_node = Node(value) if not self.head: self.head = new_node else: current = self.head while current.next: current = current.next current.next = new_node def delete(self, value: int) -> bool: current = self.head previous = None while current: if current.value == value: if previous: previous.next = current.next else: self.head = current.next return True previous = current current = current.next return False def length(self) -> int: count = 0 current = self.head while current: count += 1 current = current.next return count def search(self, value: int) -> bool: current = self.head while current: if current.value == value: return True current = current.next return False"},{"question":"You are tasked with implementing a function that sorts a list of dictionaries based on a specified key and then groups the sorted dictionaries by the values of that key. This function is useful for organizing data where entries must be processed or displayed based on sorted and grouped criteria, such as in database query results. # Explanation of Concept The data to be processed is a list of dictionaries where each dictionary represents a record with multiple fields. You need to sort these dictionaries by a specified key and then group the dictionaries by the unique values of this key. Each group should maintain the sort order based on the specified key. # Function Signature ```python def sort_and_group(data: list, sort_key: str) -> dict: ``` # Parameters: - `data` (list): A list of dictionaries, where each dictionary represents a record. - `sort_key` (str): The key within the dictionaries by which to sort and group the data. # Tasks: 1. Implement the `sort_and_group` function, which sorts a list of dictionaries by the given key and then groups the dictionaries by the values of this key. 2. The function should return a dictionary where the keys are the unique values from the specified `sort_key` and the values are lists of dictionaries that share the same value for this key, sorted in ascending order. # Example: ```python data = [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\'}, {\'name\': \'Bob\', \'age\': 25, \'department\': \'Engineering\'}, {\'name\': \'Charlie\', \'age\': 35, \'department\': \'HR\'}, {\'name\': \'David\', \'age\': 30, \'department\': \'Engineering\'}, {\'name\': \'Eve\', \'age\': 40, \'department\': \'Marketing\'} ] sort_key = \'department\' result = sort_and_group(data, sort_key) print(result) ``` Output: ```python { \'Engineering\': [ {\'name\': \'Bob\', \'age\': 25, \'department\': \'Engineering\'}, {\'name\': \'David\', \'age\': 30, \'department\': \'Engineering\'} ], \'HR\': [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\'}, {\'name\': \'Charlie\', \'age\': 35, \'department\': \'HR\'} ], \'Marketing\': [ {\'name\': \'Eve\', \'age\': 40, \'department\': \'Marketing\'} ] } ``` # Constraints: - The key specified in `sort_key` will always be present in all dictionaries in the input list. - The input list `data` can have any number of dictionaries, including zero. - The values associated with `sort_key` can be of any type that supports comparison operations (e.g., integers, strings). Implement the `sort_and_group` function in the provided code fragment.","solution":"def sort_and_group(data: list, sort_key: str) -> dict: Sorts a list of dictionaries by a specified key and then groups the dictionaries by the values of that key. Args: - data (list): A list of dictionaries. - sort_key (str): The key within the dictionaries by which to sort and group the data. Returns: - dict: A dictionary where keys are the unique values from the sort_key and values are lists of dictionaries that share the same value for this key. Each list is sorted in ascending order. # Sort the list of dictionaries by the specified key sorted_data = sorted(data, key=lambda x: x[sort_key]) # Initialize a dictionary to hold the grouped data grouped_data = {} # Iterate through the sorted list and group by the specified key for item in sorted_data: key_value = item[sort_key] if key_value not in grouped_data: grouped_data[key_value] = [] grouped_data[key_value].append(item) return grouped_data"},{"question":"Implementing a Simple Perceptron for Binary Classification In this problem, you will implement a simple perceptron algorithm to classify a given dataset into two categories. The purpose of this function is to find the optimal weight vector (`w`) and bias (`b`) that minimizes the classification error on the given dataset. Requirements: - **Library API**: You are required to use the `numpy` library, specifically the `numpy.zeros` function. - **Function Name**: `simple_perceptron` - **Inputs**: - `X`: A 2D numpy array of shape `(m, n)` representing the feature matrix where `m` is the number of samples and `n` is the number of features. - `y`: A 1D numpy array of shape `(m,)` representing the target values (1 for one class and -1 for the other). - `learning_rate`: A float representing the learning rate. - `max_epochs`: An integer representing the maximum number of epochs for training the perceptron. Output: - The function should return a tuple `(w, b)` where `w` is the weight vector of shape `(n, 1)` and `b` is the bias term. Steps: 1. Initialize the weight vector `w` and bias `b` with zeros using `numpy.zeros`. 2. Implement the function to compute the perceptron output for a given sample. 3. Iterate over the dataset for a given number of epochs, updating the weight vector `w` and bias `b` based on misclassified samples. Example pseudo-code: ```python def simple_perceptron(X, y, learning_rate, max_epochs): # Initialize weight vector w and bias term b w = np.zeros(X.shape[1], dtype=np.float64) b = 0.0 # Perform perceptron training for epoch in range(max_epochs): for i in range(len(X)): # Compute the perceptron output update = learning_rate * y[i] if y[i] * (np.dot(X[i], w) + b) <= 0: w += update * X[i] b += update return w.reshape(-1, 1), b ``` This algorithm trains a perceptron by adjusting the weights and bias whenever a misclassified sample is found in each epoch. The learning rate controls the magnitude of adjustments, and training is performed for a maximum number of epochs specified by `max_epochs`.","solution":"import numpy as np def simple_perceptron(X, y, learning_rate, max_epochs): Implements a simple perceptron algorithm for binary classification. Parameters: X (numpy.ndarray): Feature matrix of shape (m, n) y (numpy.ndarray): Target vector of shape (m,) learning_rate (float): Learning rate for the perceptron max_epochs (int): Maximum number of epochs for training Returns: tuple: weight vector and bias term as (w, b) m, n = X.shape w = np.zeros(n, dtype=np.float64) b = 0.0 for epoch in range(max_epochs): for i in range(m): if y[i] * (np.dot(X[i], w) + b) <= 0: w += learning_rate * y[i] * X[i] b += learning_rate * y[i] return w.reshape(-1, 1), b"},{"question":"You are tasked with writing a function called `fibonacci_sum` that calculates the sum of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should: 1. Check if `n` is less than or equal to 0; if so, it should return 0. 2. If `n` is 1, return the first Fibonacci number, which is 0. 3. Initialize the first two Fibonacci numbers. 4. Use a loop to calculate each subsequent Fibonacci number up to the nth number. 5. Keep a running total of the Fibonacci numbers generated. 6. Return the sum of the Fibonacci numbers up to the nth number. Use the following requirements for constructing your function: - Function Name: `fibonacci_sum` - Arguments: `n` (int) Here is the function signature: ```python def fibonacci_sum(n): ``` An example output: ```python print(fibonacci_sum(5)) # Output should be 7 (0, 1, 1, 2, 3) ```","solution":"def fibonacci_sum(n): Returns the sum of the first `n` Fibonacci numbers. if n <= 0: return 0 elif n == 1: return 0 fib1, fib2 = 0, 1 sum_fib = fib1 + fib2 for _ in range(2, n): fib_next = fib1 + fib2 sum_fib += fib_next fib1, fib2 = fib2, fib_next return sum_fib"},{"question":"Develop a Python function named `repeated_substring_pattern(s: str) -> bool` that determines if the given string can be constructed by taking a substring of it and appending multiple copies of the substring together. The function should return `True` if the string can be constructed in such a way, and `False` otherwise. **Function Signature:** ```python def repeated_substring_pattern(s: str) -> bool: ... ``` **Example:** ```python # Example Input s = \\"abab\\" # Example Output True # Example Input s = \\"aba\\" # Example Output False ``` Constraints: - 1 <= len(s) <= 10^4 - The input string will consist of lowercase English letters. **Hint:** Consider the properties of string concatenation in determining if a string can be constructed from a repeating substring.","solution":"def repeated_substring_pattern(s: str) -> bool: Determines if the given string can be constructed by taking a substring of it and appending multiple copies of the substring together. if not s: return False # Concatenate string to itself and remove the first and last character doubled_s = (s + s)[1:-1] # Check if the original string is present in the modified doubled string return s in doubled_s"},{"question":"You are asked to implement a Python function called `calculate_cumulative_returns` that processes stock price data from multiple CSV files, computes daily returns, and then aggregates those returns to compute cumulative returns over a given period. This exercise will help you become familiar with financial data processing using the `pandas` library. The core task involves reading CSV files, computing daily returns, and aggregating them. Your function should accomplish the following steps: 1. Load multiple CSV files containing stock price data into individual DataFrames using `pandas.read_csv`. 2. Compute the daily returns for each stock, which is the percentage change in the \'Close\' price from one day to the next. 3. Aggregate these daily returns across all stocks to get the average daily return for each date. 4. Calculate the cumulative returns over the entire period by multiplying the daily returns sequentially. The function signature is as follows: ```python def calculate_cumulative_returns(stock_files): ``` **Parameters:** - `stock_files` (list): A list of file paths for the CSV files containing stock price data. Each file should have at least a \'Date\' and a \'Close\' column. **Return:** - A Pandas DataFrame with two columns: - \'Date\': The date of record. - \'Cumulative Return\': The cumulative return aggregated across all stocks up to that date. **CSV File Structure:** Each CSV file should follow this structure: ```plaintext Date,Close 2021-01-01,100 2021-01-02,101 ... ``` **Implementation Notes:** - Use `pandas.read_csv` to load the data and ensure \'Date\' is parsed as a datetime object. - Use `pandas.DataFrame.pct_change` to compute daily returns. - Ensure the final \'Date\' column in the output DataFrame is sorted in ascending order. Example usage: ```python stock_files = [\'stock1.csv\', \'stock2.csv\', \'stock3.csv\'] result = calculate_cumulative_returns(stock_files) print(result) ```","solution":"import pandas as pd def calculate_cumulative_returns(stock_files): all_daily_returns = [] for file in stock_files: # Load each file into a DataFrame df = pd.read_csv(file, parse_dates=[\'Date\']) # Sort by Date (ensure no issues with unsorted data) df = df.sort_values(\'Date\') # Compute the daily returns df[\'Daily Return\'] = df[\'Close\'].pct_change() # Drop the NaN value that results from the pct_change at the first row df = df.dropna(subset=[\'Daily Return\']) # Keep only Date and Daily Return columns all_daily_returns.append(df[[\'Date\', \'Daily Return\']]) # Combine all daily returns into a single DataFrame combined_returns = pd.concat(all_daily_returns) # Group by Date to aggregate the average daily return average_daily_returns = combined_returns.groupby(\'Date\').mean().reset_index() # Calculate cumulative returns average_daily_returns[\'Cumulative Return\'] = (1 + average_daily_returns[\'Daily Return\']).cumprod() - 1 return average_daily_returns[[\'Date\', \'Cumulative Return\']]"},{"question":"Create and plot a cosine wave using NumPy for data generation and Matplotlib for visualization. The function should create a cosine wave based on the given frequency, amplitude, and duration parameters. The plot should display the waveform with time on the x-axis and the cosine values on the y-axis. The function should output with: - Returns a tuple containing: - A NumPy array representing the cosine wave values. - A Matplotlib Axes object representing the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(frequency=1.0, amplitude=1.0, duration=1.0, sample_rate=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def generate_cosine_wave(frequency=1.0, amplitude=1.0, duration=1.0, sample_rate=1000): Generate and plot a cosine wave based on the given parameters. Parameters: - frequency (float): Frequency of the cosine wave in Hz. - amplitude (float): Amplitude of the cosine wave. - duration (float): Duration of the wave in seconds. - sample_rate (int): Number of samples per second. Returns: - tuple: (cosine_wave_values: np.array, plot: Matplotlib Axes object) t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False) cosine_wave = amplitude * np.cos(2 * np.pi * frequency * t) fig, ax = plt.subplots() ax.plot(t, cosine_wave) ax.set(xlabel=\'Time (s)\', ylabel=\'Amplitude\', title=\'Cosine Wave\') ax.grid() return cosine_wave, ax"},{"question":"You have been provided with a dataset containing information about houses, including various features such as the number of bedrooms, bathrooms, square footage, and location in neighborhood data. The goal of this task is to predict house prices based on their features using a Linear Regression model. You will use utility functions from the `numpy` library and the `LinearRegression` class from `sklearn.linear_model`. Given the dataset `houses_data`, which is a `pandas.DataFrame`, your task is to: 1. Preprocess the data by handling any missing values and normalizing numerical features. 2. Split the data into training and testing sets. 3. Train a Linear Regression model on the training set. 4. Evaluate the model\'s performance using the Root Mean Squared Error (RMSE). 5. Predict house prices on the testing set and visualize the true versus predicted prices. Specifically, you must implement the following function: ```python def predict_house_prices(houses_data): Uses a Linear Regression model to predict house prices based on house features. Parameters: houses_data (pandas.DataFrame): A DataFrame containing house features and prices. Returns: tuple: Tuple containing the RMSE of the model and a DataFrame with true and predicted prices. pass ``` **Requirements**: - Use `numpy` methods such as `numpy.isnan` and `numpy.mean`. - Use the `LinearRegression` class from `sklearn.linear_model`. - Use the `train_test_split` function from `sklearn.model_selection`. - Use `StandardScaler` from `sklearn.preprocessing`. - Use `matplotlib.pyplot` for plotting. **Steps to implement within the function**: 1. Handle missing values by imputing them with the mean of the respective feature. 2. Normalize (scale) the numerical features using `StandardScaler`. 3. Split the data into an 80% training set and a 20% testing set. 4. Train a `LinearRegression` model using the training set. 5. Predict on the testing set and evaluate the RMSE of the predictions. 6. Create a visualization comparing the true prices and the predicted prices. **Note**: Ensure that the data preprocessing, model training, and evaluation are correctly implemented. Return the RMSE and the DataFrame with the true and predicted prices.","solution":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.metrics import mean_squared_error import matplotlib.pyplot as plt def predict_house_prices(houses_data): Uses a Linear Regression model to predict house prices based on house features. Parameters: houses_data (pandas.DataFrame): A DataFrame containing house features and prices. Returns: tuple: Tuple containing the RMSE of the model and a DataFrame with true and predicted prices. # Handle missing values by imputing them with the mean of the respective feature houses_data.fillna(houses_data.mean(), inplace=True) # Separate features and target variable X = houses_data.drop(columns=[\'price\']) # Replace \'price\' with the actual column name for house prices y = houses_data[\'price\'] # Replace \'price\' with the actual column name for house prices # Normalize (scale) the numerical features using StandardScaler scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Split the data into an 80% training set and a 20% testing set X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42) # Train a LinearRegression model using the training set model = LinearRegression() model.fit(X_train, y_train) # Predict on the testing set and evaluate the RMSE of the predictions y_pred = model.predict(X_test) rmse = np.sqrt(mean_squared_error(y_test, y_pred)) # Create a DataFrame with the true and predicted prices results = pd.DataFrame({\'True Price\': y_test, \'Predicted Price\': y_pred}) # Create a visualization comparing the true prices and the predicted prices plt.scatter(y_test, y_pred) plt.xlabel(\'True Prices\') plt.ylabel(\'Predicted Prices\') plt.title(\'True vs Predicted House Prices\') plt.show() return rmse, results"},{"question":"You are asked to implement a function named `find_longest_substring` that finds the length of the longest substring without repeating characters. This problem commonly appears in coding interviews and assesses your understanding of string manipulation and efficient algorithm design. **Task**: 1. Implement the function `find_longest_substring(s)`: - `s`: A string consisting of lowercase and/or uppercase alphabets. - The function should return an integer representing the length of the longest substring without repeating characters. **Requirements**: - Your solution should have a linear time complexity, i.e., O(n), where n is the length of the input string. - Use a sliding window approach to keep track of the current substring without repeating characters. - You may use a dictionary or a set to store the characters and their indices. **Example**: ```python def find_longest_substring(s): # Your implementation here pass # Example usage print(find_longest_substring(\\"abcabcbb\\")) # Expected output: 3 (substring \\"abc\\") print(find_longest_substring(\\"bbbbb\\")) # Expected output: 1 (substring \\"b\\") print(find_longest_substring(\\"pwwkew\\")) # Expected output: 3 (substring \\"wke\\") ```","solution":"def find_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for current in range(len(s)): if s[current] in char_index_map and char_index_map[s[current]] >= start: start = char_index_map[s[current]] + 1 char_index_map[s[current]] = current longest = max(longest, current - start + 1) return longest"},{"question":"Matrix Diagonal Product Calculation Using NumPy In this problem, you need to create a function named `diagonal_product(matrix: np.ndarray) -> int` that calculates the product of the main diagonal elements of a square matrix. This task is often encountered in linear algebra and is fundamental in various mathematical computations. # Input: 1. `matrix`: A 2-dimensional NumPy array representing the square matrix of size `n x n` where `n` ≥ 2. # Output: The function should return an integer which is the product of all the elements on the main diagonal of the matrix. # Constraints: - Use the NumPy library, specifically the `numpy.diagonal` function to extract the main diagonal elements. - Assume the matrix will always be non-empty and square. # Task: Implement the following steps in your function: 1. Extract the main diagonal elements of the matrix using `numpy.diagonal`. 2. Calculate the product of these elements. 3. Return the calculated product as an integer. # Example: Given the inputs: ```python matrix = np.array([ [2, 3, 1], [4, 5, 6], [7, 8, 9] ]) ``` The function should return `90` because the elements on the main diagonal are `[2, 5, 9]` and the product is `2 * 5 * 9 = 90`. # Implementation: ```python def diagonal_product(matrix: np.ndarray) -> int: Function to calculate the product of the main diagonal elements. :param matrix: (n, n) array representing the square matrix. :return: Product of elements on the main diagonal. # Extract the main diagonal elements using numpy.diagonal diag_elements = np.diagonal(matrix) # Calculate the product of the main diagonal elements product = np.prod(diag_elements) # Return the product as an integer return int(product) ``` Use the following import statement to utilize the NumPy library: ```python import numpy as np ``` **Note**: Ensure that you correctly use the `numpy.diagonal` function to access the diagonal elements of the matrix.","solution":"import numpy as np def diagonal_product(matrix: np.ndarray) -> int: Function to calculate the product of the main diagonal elements. :param matrix: (n, n) array representing the square matrix. :return: Product of elements on the main diagonal. # Extract the main diagonal elements using numpy.diagonal diag_elements = np.diagonal(matrix) # Calculate the product of the main diagonal elements product = np.prod(diag_elements) # Return the product as an integer return int(product)"},{"question":"Your task is to write a function that simulates the assignment of tasks to different workers in a round-robin manner. Each worker should get an approximately equal share of tasks. The function `assign_tasks` should distribute a list of tasks to a configurable number of workers following these rules: 1. The function accepts a list of tasks (strings) and the number of workers (integer). 2. Tasks should be assigned in a round-robin manner, meaning the first task goes to worker 1, the second task to worker 2, and so on, looping back to the first worker after the last one. 3. The function should return a dictionary where the keys are worker numbers (starting from 1) and the values are lists of tasks assigned to each worker in the order they received them. For example, if there are 3 workers and the task list is [\\"task1\\", \\"task2\\", \\"task3\\", \\"task4\\", \\"task5\\"], the tasks should be distributed as follows: - Worker 1: [\\"task1\\", \\"task4\\"] - Worker 2: [\\"task2\\", \\"task5\\"] - Worker 3: [\\"task3\\"] **Function signature:** ```python def assign_tasks(tasks: list, num_workers: int) -> dict: pass ``` # Example: ```python tasks = [\\"task1\\", \\"task2\\", \\"task3\\", \\"task4\\", \\"task5\\"] num_workers = 3 result = assign_tasks(tasks, num_workers) print(result) # Output: {1: [\'task1\', \'task4\'], 2: [\'task2\', \'task5\'], 3: [\'task3\']} ```","solution":"def assign_tasks(tasks: list, num_workers: int) -> dict: Distributes a list of tasks to a number of workers in a round-robin manner. :param tasks: List of task strings :param num_workers: Number of workers to distribute tasks to :return: Dictionary where keys are worker numbers and values are lists of assigned tasks if num_workers <= 0: raise ValueError(\\"Number of workers must be a positive integer.\\") # Initialize dictionary with empty lists for each worker task_distribution = {i: [] for i in range(1, num_workers + 1)} for i, task in enumerate(tasks): worker = (i % num_workers) + 1 task_distribution[worker].append(task) return task_distribution"},{"question":"In this problem, you will implement a function called `generate_maze` that generates a random maze using the Recursive Backtracking algorithm. The function will take the dimensions of the maze and return a 2D list representation of the maze, where `1` represents a wall and `0` represents an open path. # Function Signature: ```python def generate_maze(width: int, height: int) -> list[list[int]]: ... ``` # Parameters: - `width` (int): The width of the maze (number of columns). - `height` (int): The height of the maze (number of rows). # Expected Behavior: 1. Initialize a 2D list with all cells set to `1` (walls). 2. Use the Recursive Backtracking algorithm to carve out the maze, starting from a randomly chosen cell. 3. Ensure every part of the maze is accessible, meaning there should be no isolated sections. # Recursive Backtracking Algorithm Steps: 1. Start at a random cell and mark it as part of the maze (set to `0`). 2. While there are unvisited cells: - Choose a random neighboring cell that has not been visited. - If the chosen cell is within the grid bounds and not yet part of the maze: - Remove the wall between the current cell and the chosen cell. - Move to the chosen cell and continue the process. - If no unvisited neighbors are available, backtrack to the previous cell and repeat. # Example Output: For calling the function: ```python maze = generate_maze(5, 5) for row in maze: print(row) ``` The output could look something like this (actual output will vary): ``` [1, 1, 1, 1, 1] [1, 0, 0, 1, 1] [1, 1, 0, 1, 1] [1, 0, 0, 0, 1] [1, 1, 1, 1, 1] ``` # Note: - Ensure the maze is enclosed by walls (i.e., all boundary cells should be `1`). - The starting cell and algorithm implementation should ensure that the maze has a connected path.","solution":"import random def generate_maze(width: int, height: int) -> list[list[int]]: def carve_passages_from(cx, cy, grid): directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] random.shuffle(directions) for (dx, dy) in directions: nx, ny = cx + dx*2, cy + dy*2 if 0 < nx < width-1 and 0 < ny < height-1 and grid[ny][nx] == 1: grid[ny][nx] = 0 grid[cy + dy][cx + dx] = 0 carve_passages_from(nx, ny, grid) maze = [[1 for _ in range(width)] for _ in range(height)] start_x, start_y = random.randrange(1, width, 2), random.randrange(1, height, 2) maze[start_y][start_x] = 0 carve_passages_from(start_x, start_y, maze) return maze"},{"question":"You are working on developing a small social network application. One of the features of this application is to find the shortest path between two users to determine how closely they are connected. Users are represented as nodes, and friendships are represented as edges in an undirected graph. You need to write a function named `shortest_path` that takes the following parameters: 1. `graph` (dict): A dictionary where keys are user IDs (integers) and values are lists of user IDs representing friends. 2. `start` (int): The user ID of the starting node. 3. `end` (int): The user ID of the ending node. The function should: - Return a list of user IDs representing the shortest path from the `start` user to the `end` user, including both. - If no path exists, return an empty list. To solve this problem, you should use the Breadth-First Search (BFS) algorithm. Here is the function signature: ```python def shortest_path(graph, start, end): pass ``` Example: ```python graph = { 1: [2, 3], 2: [1, 4, 5], 3: [1, 5], 4: [2], 5: [2, 3] } print(shortest_path(graph, 1, 4)) # Output: [1, 2, 4] print(shortest_path(graph, 1, 6)) # Output: [] ```","solution":"from collections import deque def shortest_path(graph, start, end): Finds the shortest path between two users in an undirected graph. :param graph: dict, a dictionary where keys are user IDs and values are lists of user IDs representing friends. :param start: int, the user ID of the starting node. :param end: int, the user ID of the ending node. :returns: list of user IDs representing the shortest path from start to end, or an empty list if no path exists. if start == end: return [start] visited = set() queue = deque([(start, [start])]) while queue: current, path = queue.popleft() if current in visited: continue visited.add(current) for neighbor in graph.get(current, []): if neighbor == end: return path + [end] queue.append((neighbor, path + [neighbor])) return []"},{"question":"You are assigned to build a mini weather prediction system. The system will analyze historical temperature data and predict the temperature for the next day using a simple moving average technique. Your objective is to create a function named `predict_next_day_temperature` that takes in two parameters: 1. `temperatures` - a 1D list or NumPy array of historical daily temperatures. 2. `window_size` - an integer representing the number of days to use for calculating the moving average. The function should return the predicted temperature for the next day which is the average of the temperatures from the last `window_size` days. # Function Signature ```python def predict_next_day_temperature(temperatures: Union[List[float], np.ndarray], window_size: int) -> float: ``` # Example Usage ```python import numpy as np # Example data temperatures = [25.3, 26.7, 24.8, 23.5, 27.1, 28.2, 29.0, 22.4, 23.9, 24.5] window_size = 3 # Predict the next day\'s temperature prediction = predict_next_day_temperature(temperatures, window_size) print(f\\"The predicted temperature for the next day is: {prediction}\\") ``` In this example, the function should calculate the average of the last 3 days\' temperatures ([22.4, 23.9, 24.5] in this case) and return it as the predicted temperature for the next day.","solution":"from typing import Union, List import numpy as np def predict_next_day_temperature(temperatures: Union[List[float], np.ndarray], window_size: int) -> float: Predicts the next day\'s temperature using the moving average of the last `window_size` days. Parameters: temperatures (Union[List[float], np.ndarray]): A list or NumPy array of historical daily temperatures. window_size (int): The number of days to use for calculating the moving average. Returns: float: The predicted temperature for the next day. if not temperatures or window_size <= 0 or window_size > len(temperatures): raise ValueError(\\"Invalid input parameters\\") # Convert the input temperatures to a NumPy array if it\'s not already if isinstance(temperatures, list): temperatures = np.array(temperatures) # Calculate the average of the last `window_size` days predicted_temperature = np.mean(temperatures[-window_size:]) return predicted_temperature"},{"question":"You are required to implement a class `InventorySystem` to manage an inventory of products in a warehouse. Each product has a unique identifier, a name, and a quantity in stock. The system should provide functionalities to add new products, update the quantity of existing products, and query the stock of a specific product. **Class Signature:** ```python class InventorySystem: def __init__(self): pass def add_product(self, product_id: int, name: str, quantity: int) -> None: pass def update_quantity(self, product_id: int, quantity: int) -> None: pass def query_quantity(self, product_id: int) -> int: pass ``` **Methods:** - `__init__(self)`: This initializes the inventory system, setting up any necessary data structures. - `add_product(self, product_id: int, name: str, quantity: int) -> None`: This method adds a new product to the inventory with the given `product_id`, `name`, and `quantity`. If a product with the same `product_id` already exists, this method should raise a ValueError. - `update_quantity(self, product_id: int, quantity: int) -> None`: This method updates the quantity of an existing product identified by `product_id` by incrementing its quantity by the given `quantity`. If the product does not exist, raise a ValueError. - `query_quantity(self, product_id: int) -> int`: This method returns the current quantity in stock for the product identified by `product_id`. If the product does not exist, return 0. **Example Usage:** ```python inventory = InventorySystem() inventory.add_product(1, \\"Laptop\\", 10) inventory.add_product(2, \\"Phone\\", 5) print(inventory.query_quantity(1)) # Output: 10 inventory.update_quantity(1, 5) print(inventory.query_quantity(1)) # Output: 15 print(inventory.query_quantity(3)) # Output: 0 try: inventory.add_product(1, \\"Tablet\\", 7) # Should raise ValueError except ValueError as ve: print(\\"Error:\\", ve) ```","solution":"class InventorySystem: def __init__(self): self.products = {} def add_product(self, product_id: int, name: str, quantity: int) -> None: if product_id in self.products: raise ValueError(f\\"Product with id {product_id} already exists.\\") self.products[product_id] = {\\"name\\": name, \\"quantity\\": quantity} def update_quantity(self, product_id: int, quantity: int) -> None: if product_id not in self.products: raise ValueError(f\\"Product with id {product_id} does not exist.\\") self.products[product_id][\\"quantity\\"] += quantity def query_quantity(self, product_id: int) -> int: if product_id not in self.products: return 0 return self.products[product_id][\\"quantity\\"]"},{"question":"You are tasked with creating a function named `generate_multiplication_table` that takes a single parameter, `n`, which is an integer representing the size of the multiplication table. The function should perform the following tasks: 1. Generate a multiplication table of size `n` x `n`. 2. The table should be returned as a two-dimensional list (a list of lists), where each inner list represents a row of the multiplication table. 3. Ensure that the order of multiplication is preserved, meaning that the first row and the first column both start from 1 and go up to `n`. **Requirements:** - Use nested loops to construct the multiplication table. - Ensure that the function handles edge cases such as `n` being zero or negative gracefully, by returning an empty list in such cases. **Example Usage:** ```python n = 3 table = generate_multiplication_table(n) print(table) # Output will be: [[1, 2, 3], [2, 4, 6], [3, 6, 9]] ``` # Constraints: - You should provide a clear and efficient implementation, with time complexity of O(n^2). - You should use only standard Python libraries.","solution":"def generate_multiplication_table(n): Generates a multiplication table of size n x n. Returns a two-dimensional list representing the table. Handles edge cases where n <= 0 by returning an empty list. if n <= 0: return [] table = [] for i in range(1, n + 1): row = [] for j in range(1, n + 1): row.append(i * j) table.append(row) return table"},{"question":"Reads a list of file paths to text files, processes the text in each file by removing punctuation and converting all characters to lowercase. Uses the cleaned text to count the frequency of each word across all files. Outputs the 10 most common words with their counts. If less than 10 unique words are found, returns all the found words with their counts. The output should be a list of tuples sorted by the word frequency in descending order. The function should raise an exception for: FileNotFoundError if any of the specified file paths do not exist. The function should output: list of tuples: Each tuple contains a word and its frequency, sorted by frequency in descending order. You should write self-contained code starting with: ``` import os import string from collections import Counter def task_func(file_paths): ``` Continue with the implementation to process the text and calculate word frequencies using the described steps.","solution":"import os import string from collections import Counter def task_func(file_paths): word_counter = Counter() translator = str.maketrans(\'\', \'\', string.punctuation) for file_path in file_paths: if not os.path.isfile(file_path): raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: cleaned_line = line.translate(translator).lower() words = cleaned_line.split() word_counter.update(words) most_common_words = word_counter.most_common(10) return most_common_words"},{"question":"The annual rainfall data for different regions is provided in a file named `rainfall_data.csv`. The file contains two columns: \\"Region\\" and \\"Rainfall (mm)\\". Your task is to write a function named `plot_rainfall_data` that reads the data from this file, processes it, and generates a bar plot to visualize the total rainfall for each region using Matplotlib. Your specific task is to write a function named `plot_rainfall_data` that: 1. Reads the `rainfall_data.csv` file. 2. Processes the data to calculate the total rainfall for each region. 3. Generates a bar plot with regions on the x-axis and total rainfall on the y-axis. 4. Sets the x-axis label to \\"Region\\" and y-axis label to \\"Total Rainfall (mm)\\". 5. Adds a title to the plot that says \\"Annual Rainfall by Region\\". 6. Rotates the x-axis labels by 45 degrees for better readability. Example usage: ```python plot_rainfall_data() ``` This should produce a bar plot that clearly shows the total rainfall for each region with appropriately labeled axes and title.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_rainfall_data(): # Read the data from the csv file df = pd.read_csv(\'rainfall_data.csv\') # Group by region and calculate the total rainfall for each region total_rainfall = df.groupby(\'Region\')[\'Rainfall (mm)\'].sum().reset_index() # Create the bar plot plt.figure(figsize=(10, 6)) plt.bar(total_rainfall[\'Region\'], total_rainfall[\'Rainfall (mm)\']) # Set labels and title plt.xlabel(\'Region\') plt.ylabel(\'Total Rainfall (mm)\') plt.title(\'Annual Rainfall by Region\') # Rotate x-axis labels plt.xticks(rotation=45) # Show the plot plt.tight_layout() plt.show()"},{"question":"In software engineering, string manipulation is a common task. One particular problem is to find the longest substring without repeating characters from a given string. Your task is to write a Python function that takes a string as input and returns the length of the longest substring that does not contain any repeating characters. Detailed Requirements: 1. **Function Name**: `length_of_longest_substring` 2. **Parameters**: - `s`: A string for which you need to find the longest substring without repeating characters. 3. **Returns**: An integer representing the length of the longest substring without repeating characters. Constraints: - The input string will have a length of at most 10^4. - The input string will only contain ASCII characters. Example Usage: ```python result = length_of_longest_substring(\\"abcabcbb\\") print(result) # Output: 3 (The longest substring is \\"abc\\") result = length_of_longest_substring(\\"bbbbb\\") print(result) # Output: 1 (The longest substring is \\"b\\") ``` #","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): Input string Returns: int: Length of the longest substring without repeating characters n = len(s) longest = 0 char_map = {} left = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right longest = max(longest, right - left + 1) return longest"},{"question":"You are required to implement the function `find_common_subsequences(str1, str2)`. This function will find all subsequences that are common between two given strings and return them as a list. The function also ensures that the subsequences appear in lexicographical order in the output list. Function Signature: ```python def find_common_subsequences(str1: str, str2: str) -> List[str]: ``` Input: - `str1`: A string containing only lowercase alphabets. - `str2`: A string containing only lowercase alphabets. Output: - A list of strings, where each string is a unique common subsequence between `str1` and `str2`, sorted in lexicographical order. Constraints: - The length of `str1` and `str2` will not exceed 100. - A subsequence is a sequence derived by deleting some or no elements without changing the order of the remaining elements. Explanation: The function should find all common subsequences between the two input strings. For example, given `str1 = \'abc\'` and `str2 = \'aebdc\'`, the common subsequences would be `[\'a\', \'ab\', \'abc\', \'ac\', \'b\', \'bc\', \'c\']`. The subsequences should be sorted lexicographically in the output list. The function can be designed to use a dynamic programming approach to identify common subsequences, followed by a combinatorial generation and lexicographical sorting.","solution":"from typing import List, Set def find_common_subsequences(str1: str, str2: str) -> List[str]: def generate_subsequences(s: str) -> Set[str]: subsequences = set([\'\']) for char in s: new_subseq = set() for subseq in subsequences: new_subseq.add(subseq) new_subseq.add(subseq + char) subsequences = new_subseq return subsequences subseq_str1 = generate_subsequences(str1) subseq_str2 = generate_subsequences(str2) common_subsequences = subseq_str1.intersection(subseq_str2) common_subsequences = sorted(list(common_subsequences)) return common_subsequences"},{"question":"Write a Python function `calendar_view(year, month)` that takes a specific year and month, and returns a string representing a calendar view of that month. The calendar must start with Sunday as the first day of the week, and the string output should look similar to the standard calendar format shown below: ``` February 2023 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ``` - The function should take into account leap years and handle the correct number of days in each month. - The month name should be centrally aligned above the days\' names. - Use the `calendar` module in Python to facilitate the construction of the calendar layout. Example usage: ```python print(calendar_view(2023, 2)) # Outputs: # # February 2023 # Su Mo Tu We Th Fr Sa # 1 2 3 4 # 5 6 7 8 9 10 11 # 12 13 14 15 16 17 18 # 19 20 21 22 23 24 25 # 26 27 28 ``` You can assume the input year and month are always valid integers, with the year being a positive integer and the month being an integer between 1 and 12 (inclusive).","solution":"import calendar def calendar_view(year, month): Returns a string representing the calendar view of the specified year and month. The calendar starts with Sunday as the first day of the week. cal = calendar.TextCalendar(calendar.SUNDAY) month_calendar_str = cal.formatmonth(year, month) return month_calendar_str"},{"question":"Write a function `find_max_subarray_sum(arr, k)` that finds the maximum sum of any subarray of length `k` in the given array `arr`. A subarray is defined as a contiguous sequence of elements within an array. **Function Specification:** - **Input:** - `arr`: A list of integers representing the array. - `k`: An integer representing the length of the subarray. - **Output:** - An integer representing the maximum sum of any subarray of length `k`. **Constraints:** - The length of `arr` will be at least `k`. - The length of `arr` will not exceed 10^5. - Each element in `arr` will be between -10^4 and 10^4. **Example:** Suppose `arr = [1, 2, 3, 4, 5, 6]` and `k = 3`. - The subarrays of length `k` are: `[1, 2, 3]`, `[2, 3, 4]`, `[3, 4, 5]`, `[4, 5, 6]`. - The sums of these subarrays are: `6`, `9`, `12`, `15`. Therefore, `find_max_subarray_sum(arr, k)` should return `15`. **Steps to solve:** 1. Use a sliding window approach to keep track of the current subarray sum of length `k`. 2. Initialize the maximum sum as the sum of the first `k` elements. 3. Slide the window one element at a time to the right, updating the sum by adding the new element and subtracting the element that is left out of the window. 4. Update the maximum sum if the current window sum is greater. 5. Return the maximum sum found.","solution":"def find_max_subarray_sum(arr, k): Finds the maximum sum of any subarray of length k in the given array arr. Args: arr (list of int): The input array. k (int): The length of the subarray. Returns: int: The maximum sum of any subarray of length k. # Initialize the current window sum and the maximum sum current_sum = sum(arr[:k]) max_sum = current_sum # Slide the window from left to right across the array for i in range(k, len(arr)): # Update the current window sum current_sum += arr[i] - arr[i - k] # Update the maximum sum if needed max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function named `sorted_intersection` that takes two lists of integers and returns a new list containing the sorted intersection of these lists. The intersection should only include unique values, even if they appear more than once in either list. Assume the input lists can be of different lengths and may contain duplicate values. The function signature should be: ```python def sorted_intersection(list1, list2): ``` Given two lists of integers `list1` and `list2`, the function should perform the following steps: 1. Identify the unique integers that are present in both `list1` and `list2`. 2. Sort the intersection list in ascending order. Please note: - You should not use any built-in set operations (like set intersections) to solve this problem but can use other data structures like sets for intermediate operations. - Make sure to filter out duplicates in the final result. Example: ```python sorted_intersection([4, 1, 2, 2, 5], [3, 4, 2, 2, 7]) ``` Output: ``` [2, 4] ``` Example: ```python sorted_intersection([10, 9, 8, 10], [8, 9, 8]) ``` Output: ``` [8, 9] ```","solution":"def sorted_intersection(list1, list2): This function takes two lists of integers and returns a sorted list containing the unique values that appear in both lists. set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) sorted_intersection = sorted(intersection) return sorted_intersection"},{"question":"In this problem, you will write a function called `find_median_sorted_arrays(nums1, nums2)` that takes two sorted arrays, `nums1` and `nums2`, and returns the median of the two arrays as a float. The function should operate in O(log(min(n, m))) time complexity, where `n` and `m` are the lengths of `nums1` and `nums2` respectively. Requirements: 1. You must use a binary search approach to achieve the required time complexity. 2. Both `nums1` and `nums2` are non-empty and are sorted in ascending order. 3. The overall run-time complexity should be logarithmic based on the smaller array length. Example: ```python nums1 = [1, 3] nums2 = [2] result = find_median_sorted_arrays(nums1, nums2) # Expected output: # 2.0 nums1 = [1, 2] nums2 = [3, 4] result = find_median_sorted_arrays(nums1, nums2) # Expected output: # 2.5 ``` Implement the function `find_median_sorted_arrays(nums1, nums2)` to achieve this functionality.","solution":"def find_median_sorted_arrays(nums1, nums2): Returns the median of two sorted arrays. A, B = nums1, nums2 total = len(A) + len(B) half = total // 2 if len(A) > len(B): A, B = B, A l, r = 0, len(A) - 1 while True: i = (l + r) // 2 j = half - i - 2 Aleft = A[i] if i >= 0 else float(\\"-infinity\\") Aright = A[i + 1] if (i + 1) < len(A) else float(\\"infinity\\") Bleft = B[j] if j >= 0 else float(\\"-infinity\\") Bright = B[j + 1] if (j + 1) < len(B) else float(\\"infinity\\") if Aleft <= Bright and Bleft <= Aright: if total % 2: return min(Aright, Bright) return (max(Aleft, Bleft) + min(Aright, Bright)) / 2 elif Aleft > Bright: r = i - 1 else: l = i + 1"},{"question":"You are required to write a function named `plot_two_subplots` which uses the `matplotlib.pyplot.subplots` method to generate a figure with two subplots arranged side by side. Each subplot should plot a simple trigonometric function over the range of x-values and have appropriate titles and labels. 1. The first subplot should plot `y = sin(x)` with a linear scale on both axes. 2. The second subplot should plot `y = cos(x)` with a linear scale on both axes. Details: - Use `np.linspace(0, 2 * np.pi, 100)` for the x-values. - Ensure each subplot has appropriate axis labels and titles indicating the mathematical function it represents. - The plot should be shown using `plt.show()` at the end.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_two_subplots(): # Generate x values x = np.linspace(0, 2 * np.pi, 100) # Create figure and subplots fig, axs = plt.subplots(1, 2, figsize=(12, 6)) # First subplot: y = sin(x) axs[0].plot(x, np.sin(x)) axs[0].set_title(\'y = sin(x)\') axs[0].set_xlabel(\'x\') axs[0].set_ylabel(\'sin(x)\') # Second subplot: y = cos(x) axs[1].plot(x, np.cos(x)) axs[1].set_title(\'y = cos(x)\') axs[1].set_xlabel(\'x\') axs[1].set_ylabel(\'cos(x)\') # Display the plot plt.tight_layout() plt.show()"},{"question":"Create a function that simulates a simple random walk in two dimensions starting from the origin (0,0). The walk should consist of N steps, where each step is a random move either up, down, left, or right by one unit. The function should plot the path taken by the random walk and mark the final position with a blue dot. The function should return: final_position (tuple): The final coordinates (x, y) after N steps. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk(N): np.random.seed(0) # For reproducibility # Define the possible moves: up, down, left, right moves = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize arrays to store the path coordinates x = np.zeros(N + 1) y = np.zeros(N + 1) for i in range(1, N + 1): move = moves[np.random.randint(4)] x[i] = x[i - 1] + move[0] y[i] = y[i - 1] + move[1] # Plot the path of the random walk plt.figure(figsize=(8, 8)) plt.plot(x, y, marker=\'o\', color=\'black\', markersize=3) plt.plot(x[-1], y[-1], marker=\'o\', color=\'blue\', markersize=8) plt.title(\\"2D Random Walk\\") plt.xlabel(\\"x-coordinate\\") plt.ylabel(\\"y-coordinate\\") plt.grid() plt.show() final_position = (x[-1], y[-1]) return final_position ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk(N): np.random.seed(0) # For reproducibility # Define the possible moves: up, down, left, right moves = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize arrays to store the path coordinates x = np.zeros(N + 1) y = np.zeros(N + 1) for i in range(1, N + 1): move = moves[np.random.randint(4)] x[i] = x[i - 1] + move[0] y[i] = y[i - 1] + move[1] # Plot the path of the random walk plt.figure(figsize=(8, 8)) plt.plot(x, y, marker=\'o\', color=\'black\', markersize=3) plt.plot(x[-1], y[-1], marker=\'o\', color=\'blue\', markersize=8) plt.title(\\"2D Random Walk\\") plt.xlabel(\\"x-coordinate\\") plt.ylabel(\\"y-coordinate\\") plt.grid() plt.show() final_position = (x[-1], y[-1]) return final_position"},{"question":"You are asked to write a function to compress a given string by using the run-length encoding technique. Specifically, you need to implement a function named `run_length_encode` that accepts a string argument `s` and returns a new string representing the run-length encoding of the input. # Requirements: 1. **Function Name**: `run_length_encode` 2. **Parameter**: - `s` (str): The string to be compressed. 3. **Returns**: - `str`: A new string representing the run-length encoded version of the input. 4. **Constraints**: - The input string should consist of only uppercase alphabets (A-Z). - If the input string is empty, return an empty string. - The length of the input string will not exceed 1000 characters. # Implementation Notes: 1. Run-length encoding is a basic form of data compression where consecutive identical elements are replaced with a single instance of the element followed by its count. 2. For example, the string \\"AAAABBBCCDAA\\" would be compressed to \\"A4B3C2D1A2\\". 3. Handle edge cases, such as an empty string or strings with no repeating characters. # Example: ```python print(run_length_encode(\\"AAAABBBCCDAA\\")) # Should return: \\"A4B3C2D1A2\\" print(run_length_encode(\\"AAB\\")) # Should return: \\"A2B1\\" print(run_length_encode(\\"ABCD\\")) # Should return: \\"A1B1C1D1\\" print(run_length_encode(\\"\\")) # Should return: \\"\\" print(run_length_encode(\\"AAAAA\\")) # Should return: \\"A5\\" ```","solution":"def run_length_encode(s): Compresses the given string using the run-length encoding technique. Args: s (str): The string to be compressed. Returns: str: The run-length encoded version of the input string. if not s: return \\"\\" encoded_string = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded_string.append(current_char + str(count)) current_char = char count = 1 # Append the last run encoded_string.append(current_char + str(count)) return \'\'.join(encoded_string)"},{"question":"You are tasked with creating a Python function that processes an input text file containing a list of students\' names and their respective scores, and provides statistical analysis on the scores. The function should read the text file, validate the data, calculate the average score, the median score, and the highest and lowest scores. Invalid entries should be skipped with a logged warning message. **Function Name:** `analyze_student_scores` **Parameters for the function:** - `file_path`: A string representing the path to the text file. **Text File Format:** The file will contain multiple lines, each representing one student in the following format: - `Student Name, Score` Example: ``` Alice, 88 Bob, 92 Charlie, 79 Diana, ab Eve, 85.5 ``` **Requirements:** 1. Validate that each line contains a valid score (integer or float). 2. If an entry is invalid, skip the entry and log a warning message in the format: \'Warning: Invalid entry for student <Student Name>\', where `<Student Name>` is the name extracted from the entry. 3. Calculate the average score of the valid entries. 4. Calculate the median score of the valid entries. 5. Identify and return the highest and lowest scores among the valid entries. **Logging:** Use the `logging` module to log a warning message for any invalid entry. **Return:** A dictionary containing the following keys and their corresponding values: - `\\"average\\"`: The average score of the valid entries. - `\\"median\\"`: The median score of the valid entries. - `\\"highest\\"`: The highest score among the valid entries. - `\\"lowest\\"`: The lowest score among the valid entries. **Example of function call:** ```python analyze_student_scores(\\"path/to/your/student_scores.txt\\") ``` **Example Output:** ```python { \\"average\\": 86.0, \\"median\\": 88.0, \\"highest\\": 92.0, \\"lowest\\": 79.0 } ```","solution":"import logging from statistics import mean, median logging.basicConfig(level=logging.WARNING, format=\'%(message)s\') def analyze_student_scores(file_path): scores = [] with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: try: name, score = line.strip().split(\',\') score = float(score) scores.append(score) except ValueError: logging.warning(f\'Warning: Invalid entry for student {line.strip().split(\\",\\")[0]}\') if scores: result = { \\"average\\": mean(scores), \\"median\\": median(scores), \\"highest\\": max(scores), \\"lowest\\": min(scores) } else: result = { \\"average\\": None, \\"median\\": None, \\"highest\\": None, \\"lowest\\": None } return result"},{"question":"Write a function to perform matrix multiplication on two given matrices. The function should check if the matrices can be multiplied (i.e., the number of columns in the first matrix should equal the number of rows in the second matrix). If they can be multiplied, return the resulting matrix. If not, return an error message. The function should output with: list of lists: The resulting matrix from the multiplication if valid. str: An error message if the matrices cannot be multiplied. You should write self-contained code starting with: ``` def matrix_multiplication(matrix1, matrix2): ```","solution":"def matrix_multiplication(matrix1, matrix2): Perform matrix multiplication on two given matrices. Parameters: matrix1 (list of lists): The first matrix. matrix2 (list of lists): The second matrix. Returns: list of lists: The resulting matrix from the multiplication if valid. str: An error message if the matrices cannot be multiplied. # Check if number of columns in matrix1 equals number of rows in matrix2 if len(matrix1[0]) != len(matrix2): return \\"Error: Matrices cannot be multiplied.\\" # Initialize the result matrix with zeros result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))] # Perform matrix multiplication for i in range(len(matrix1)): for j in range(len(matrix2[0])): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"**Objective:** Write a function `longest_substring_k_unique(s, k)` in Python that finds the longest substring of a given string `s` which contains exactly `k` unique characters. If there are multiple substrings with maximum length, return the one that appears first. **Function Signature:** ```python def longest_substring_k_unique(s: str, k: int) -> str: ``` **Requirements:** - Your solution should handle cases where `k` is 0, in which case the function should return an empty string. - If the length of `s` is less than `k`, return an empty string. - Consider edge cases where `s` is an empty string, or `s` consists of identical characters. **Input:** - `s`: A non-empty string `s` containing only lowercase English letters. - `k`: An integer `k` representing the number of unique characters. **Output:** - A string representing the longest substring with exactly `k` unique characters. **Examples:** 1. For the input string `s = \\"araaci\\"` and `k = 2`, the function should return `\\"araa\\"` because `\\"araa\\"` is the longest substring with exactly 2 unique characters. 2. For the input string `s = \\"aabbcc\\"` and `k = 1`, the function should return `\\"aa\\"` because both `\\"aa\\"` and `\\"bb\\"` (or `\\"cc\\"`) are of the same length, but `\\"aa\\"` is the first to appear. 3. For the input string `s = \\"cbbebi\\"` and `k = 3`, the function should return `\\"cbbeb\\"` because `\\"cbbeb\\"` is the longest substring with exactly 3 unique characters. You must write the `longest_substring_k_unique` function to solve this problem, ensuring efficient and correct implementation.","solution":"def longest_substring_k_unique(s: str, k: int) -> str: if k == 0 or len(s) < k: return \\"\\" char_count = {} max_length = 0 start = 0 longest_substring = \\"\\" for end in range(len(s)): char_end = s[end] if char_end not in char_count: char_count[char_end] = 0 char_count[char_end] += 1 while len(char_count) > k: char_start = s[start] char_count[char_start] -= 1 if char_count[char_start] == 0: del char_count[char_start] start += 1 if len(char_count) == k: if end - start + 1 > max_length: max_length = end - start + 1 longest_substring = s[start:end + 1] return longest_substring"},{"question":"In this problem, you are required to implement a function that simulates a simple Markov Chain and calculates the steady-state probabilities. The Markov Chain should be represented by a transition matrix, and your function must compute the steady-state distribution by performing the following steps: 1. Initialize a probability vector with equal probabilities for each state. 2. Iterate multiplication of the probability vector by the transition matrix until convergence, or a maximum of 100,000 iterations. 3. Normalize the probability vector to sum to 1 to ensure it represents valid probabilities. 4. Return the resulting steady-state distribution. You are required to use `numpy` for matrix operations. The function `steady_state_distribution` should be defined as follows: ```python import numpy as np def steady_state_distribution(transition_matrix, tolerance=1e-8): # Number of states in the Markov Chain num_states = transition_matrix.shape[0] # Initialize probability vector with equal probabilities probabilities = np.ones(num_states) / num_states # Initialize variables for the iteration process iteration = 0 max_iterations = 100000 diff = tolerance + 1 while iteration < max_iterations and diff > tolerance: # Multiply the probability vector by the transition matrix new_probabilities = np.dot(probabilities, transition_matrix) # Calculate the difference to check for convergence diff = np.linalg.norm(new_probabilities - probabilities, ord=1) # Update probability vector probabilities = new_probabilities iteration += 1 # Normalize the probability vector probabilities /= probabilities.sum() return probabilities ``` # Requirements: 1. Use `numpy` for initializing probability vector and performing matrix operations. 2. The function `steady_state_distribution` will have the following parameters: - `transition_matrix`: A numpy array representing the transition matrix of the Markov Chain, where `transition_matrix[i][j]` represents the probability of transitioning from state `i` to state `j`. - `tolerance`: A float value representing the convergence threshold for the iteration process. The default value is `1e-8`. # Example: Here is how the function `steady_state_distribution` can be called: ```python transition_matrix = np.array([[0.9, 0.075, 0.025], [0.15, 0.8, 0.05], [0.25, 0.25, 0.5]]) steady_state = steady_state_distribution(transition_matrix) print(\\"Steady-state distribution:\\", steady_state) ``` Output: ``` Steady-state distribution: [0.625 0.3125 0.0625] ```","solution":"import numpy as np def steady_state_distribution(transition_matrix, tolerance=1e-8): # Number of states in the Markov Chain num_states = transition_matrix.shape[0] # Initialize probability vector with equal probabilities probabilities = np.ones(num_states) / num_states # Initialize variables for the iteration process iteration = 0 max_iterations = 100000 diff = tolerance + 1 while iteration < max_iterations and diff > tolerance: # Multiply the probability vector by the transition matrix new_probabilities = np.dot(probabilities, transition_matrix) # Calculate the difference to check for convergence diff = np.linalg.norm(new_probabilities - probabilities, ord=1) # Update probability vector probabilities = new_probabilities iteration += 1 # Normalize the probability vector probabilities /= probabilities.sum() return probabilities"},{"question":"In this problem, you are required to implement a function `calculateMovingAverage` that computes the moving average of a given list of numbers over a specified window size. This function should use Python\'s list comprehension and slicing capabilities. Here is what your function should do: 1. The function `calculateMovingAverage` should accept the following parameters: - `data`: A list of floating-point numbers. - `window_size`: An integer specifying the size of the moving window. Default is 3. 2. The function should handle cases where the length of `data` is less than `window_size` by returning an empty list. 3. Iterate through the given `data` list and compute the moving average for each possible contiguous sublist of length `window_size`. 4. Return a list containing the moving averages. Here is the definition of the function: ```python def calculateMovingAverage(data, window_size=3): # Function implementation here ``` **Your Tasks:** 1. Implement the function `calculateMovingAverage` as per the specification. 2. Ensure that the function correctly computes the moving average based on the specified `window_size`. Examples: ```python # Example 1: data = [1, 2, 3, 4, 5, 6, 7] window_size = 3 # Function call: # calculateMovingAverage(data, window_size) # Output: # [2.0, 3.0, 4.0, 5.0, 6.0] # Example 2: data = [1, 2, 3, 4, 5] window_size = 2 # Function call: # calculateMovingAverage(data, window_size) # Output: # [1.5, 2.5, 3.5, 4.5] # Example 3: data = [10, 20, 30] window_size = 4 # Function call: # calculateMovingAverage(data, window_size) # Output: # [] # Example 4: data = [5.5, 6.5, 7.5, 8.5] window_size = 2 # Function call: # calculateMovingAverage(data, window_size) # Output: # [6.0, 7.0, 8.0] ``` Note: Ensure that the function handles edge cases gracefully, such as when the input list is empty or the window size is greater than the length of the list.","solution":"def calculateMovingAverage(data, window_size=3): Computes the moving average of a given list of numbers over a specified window size. Parameters: - data: List of floating-point numbers. - window_size: Integer specifying the size of the moving window (default is 3). Returns: - List containing the moving averages. if len(data) < window_size: return [] return [ sum(data[i:i + window_size]) / window_size for i in range(len(data) - window_size + 1) ]"},{"question":"You are tasked with creating a matrix from a list of integers by following a zigzag pattern. Specifically, the integers should be placed in a 2D matrix such that the first row is filled from left to right, the second row is filled from right to left, the third row is filled from left to right, and so on, alternating the direction for subsequent rows. This method is commonly used in certain encoding techniques. Write a function named `zigzag_matrix` that constructs a matrix from a given list of integers and specified dimensions. Function Signature ```python def zigzag_matrix(int_list: list[int], rows: int, cols: int) -> list[list[int]]: Constructs a matrix filled with integers from int_list in a zigzag pattern. Args: int_list (list of int): A list of integers to be placed in the matrix. rows (int): The number of rows in the resulting matrix. cols (int): The number of columns in the resulting matrix. Returns: list of list of int: The resulting 2D matrix filled in a zigzag pattern. ``` Parameters - `int_list` (list of int): A list of integers that need to be placed in the matrix. - `rows` (int): Number of rows in the matrix. - `cols` (int): Number of columns in the matrix. Returns - `list of list of int`: A 2D list that represents the matrix filled with integers in a zigzag pattern. Constraints 1. Assume that the length of `int_list` is exactly `rows * cols`. 2. Ensure you handle the alternating fill direction correctly, starting with left to right on the first row. # Example Given the following input: - Integer List: ```python int_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] ``` - Rows: ```python rows = 3 ``` - Cols: ```python cols = 4 ``` The output should be: ```python [ [1, 2, 3, 4], [8, 7, 6, 5], [9, 10, 11, 12] ] ``` # Note - The zigzag pattern means that for even-indexed rows (0, 2, 4, ...), the integers are placed left to right, and for odd-indexed rows (1, 3, 5, ...), the integers are placed right to left. - Assume the input list is properly validated to contain exactly `rows * cols` elements.","solution":"def zigzag_matrix(int_list: list[int], rows: int, cols: int) -> list[list[int]]: Constructs a matrix filled with integers from int_list in a zigzag pattern. Args: int_list (list of int): A list of integers to be placed in the matrix. rows (int): The number of rows in the resulting matrix. cols (int): The number of columns in the resulting matrix. Returns: list of list of int: The resulting 2D matrix filled in a zigzag pattern. # Initialize the result matrix with empty lists matrix = [[] for _ in range(rows)] # Fill the matrix according to the zigzag pattern for r in range(rows): if r % 2 == 0: # Left to right for even-indexed rows matrix[r] = int_list[r * cols:(r + 1) * cols] else: # Right to left for odd-indexed rows matrix[r] = int_list[r * cols:(r + 1) * cols][::-1] return matrix"},{"question":"**Create a function `calculate_highest_frequency_word(file_path)` that reads a text file, calculates the frequency of each word, and identifies the word with the highest frequency. The function should also handle ties in word frequency by returning the alphabetically smallest word among the tied words. The function should: 1. Read the text from the given file. 2. Process the text to count the frequency of each word. Words are case-insensitive and should be considered the same word. 3. Handle punctuation as word boundaries (e.g., \\"hello!\\" and \\"hello\\" should be treated as \\"hello\\"). 4. Return the word that has the highest frequency. If there is a tie, return the lexicographically smallest word. **Constraints**: - Use the `string` library to handle punctuation. - Assume the text file is not empty and contains valid text data. **Example**: Given a text file with the following content: ``` Hello world! This is a test. Hello again, world! How is this test going? ``` The function should return: ``` hello ``` because \'hello\' and \'this\' both appear twice, but \'hello\' is lexicographically smaller. **Function Signature**: ```python def calculate_highest_frequency_word(file_path: str) -> str: # Define your function here ``` **","solution":"import string def calculate_highest_frequency_word(file_path: str) -> str: from collections import Counter # Read contents of the file with open(file_path, \'r\') as file: text = file.read() # Remove punctuation and convert text to lower case translator = str.maketrans(\'\', \'\', string.punctuation) processed_text = text.translate(translator).lower() # Split text into words words = processed_text.split() # Count frequency of each word word_count = Counter(words) # Determine the highest frequency max_frequency = max(word_count.values()) # Extract words with the highest frequency frequent_words = [word for word, count in word_count.items() if count == max_frequency] # Return the lexicographically smallest word among the most frequent words return min(frequent_words)"},{"question":"# Objective: Create a function `simulate_population_growth` that calculates the population growth over a given period using the logistic growth model. # Context: You are working on predicting population growth for a specific species within an ecosystem. This population grows according to the logistic growth model, which considers both the growth rate and the carrying capacity of the environment. # Requirements: - **Function Name**: `simulate_population_growth` - **Parameters**: - `initial_population`: Initial population size. - `growth_rate`: Intrinsic growth rate of the population. - `carrying_capacity`: Maximum population size that the environment can sustain. - `time_array`: Array of time points at which to evaluate the population size. - **Output**: A single array containing the population sizes at the corresponding times in `time_array`. # Model: 1. **Logistic Growth Equation**: - The logistic growth model is described by the ordinary differential equation `dP/dt = r * P * (1 - P/K)`, where: - `P` is the population size at time `t`. - `r` is the intrinsic growth rate. - `K` is the carrying capacity. # Instructions: 1. Define the function `simulate_population_growth`. 2. Within this function, define the differential equation `dPdt(t, P)` that represents the logistic growth model. 3. Utilize `scipy.integrate.solve_ivp` to solve this ordinary differential equation over the given `time_array`. 4. Return the population sizes at each time in `time_array` as a single array. # Example: ```python def simulate_population_growth(initial_population, growth_rate, carrying_capacity, time_array): import numpy as np from scipy.integrate import solve_ivp def dPdt(t, P): return growth_rate * P * (1 - P / carrying_capacity) result = solve_ivp(dPdt, [time_array[0], time_array[-1]], [initial_population], t_eval=time_array) return result.y[0] # Example Usage initial_population = 50 growth_rate = 0.1 carrying_capacity = 500 time_array = np.linspace(0, 100, 200) population_sizes = simulate_population_growth(initial_population, growth_rate, carrying_capacity, time_array) print(population_sizes) ``` # Note: Ensure that the `solve_ivp` function is used appropriately to solve the differential equation over the provided time points. Handle edge cases such as negative growth rates or carrying capacities gracefully.","solution":"def simulate_population_growth(initial_population, growth_rate, carrying_capacity, time_array): Simulates the population growth using the logistic growth model. Parameters: initial_population (float): Initial population size. growth_rate (float): Intrinsic growth rate of the population. carrying_capacity (float): Maximum population size that the environment can sustain. time_array (array-like): Array of time points at which to evaluate the population size. Returns: array: Population sizes at the corresponding times in time_array. from scipy.integrate import solve_ivp def dPdt(t, P): return growth_rate * P * (1 - P / carrying_capacity) result = solve_ivp(dPdt, [time_array[0], time_array[-1]], [initial_population], t_eval=time_array) return result.y[0]"},{"question":"You are required to write a Python function that performs the matrix multiplication of two given matrices using the NumPy library. This function, `matrixMultiply`, will take in two parameters: - `A`: A 2D NumPy array representing the first matrix. - `B`: A 2D NumPy array representing the second matrix. The function should return the resulting matrix of the matrix multiplication of `A` and `B`. **Function Signature:** ```python def matrixMultiply(A, B): pass ``` **Functionality:** 1. Use the `numpy.dot` function to perform the matrix multiplication of `A` and `B`. 2. Ensure that the dimensions of the input matrices are compatible for matrix multiplication. If they are not, the function should raise a ValueError with the message \\"Incompatible dimensions for matrix multiplication.\\" **Input:** - `A` (numpy.ndarray): A 2D array of shape `(m, n)` representing the first matrix. - `B` (numpy.ndarray): A 2D array of shape `(p, q)` representing the second matrix. **Output:** - `numpy.ndarray`: A 2D array representing the result of the matrix multiplication. **Example:** ```python import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) print(matrixMultiply(A, B)) # Output should be a 2D numpy array ``` **Note:** - Ensure that you understand the concept of matrix multiplication, especially the requirements for the dimensions of the matrices involved. - Refer to the NumPy documentation for `numpy.dot` to understand its usage and limitations.","solution":"import numpy as np def matrixMultiply(A, B): Multiplies two matrices A and B using numpy.dot and returns the result. Parameters: A (numpy.ndarray): First matrix of shape (m, n). B (numpy.ndarray): Second matrix of shape (p, q). Returns: numpy.ndarray: Result of the matrix multiplication. Raises: ValueError: If the dimensions of A and B are not compatible for matrix multiplication. if A.shape[1] != B.shape[0]: raise ValueError(\\"Incompatible dimensions for matrix multiplication\\") return np.dot(A, B)"},{"question":"You are tasked with implementing a function to perform a breadth-first search (BFS) on a given directed graph to determine the shortest path in terms of edges from a starting vertex to all other vertices. The graph is represented as an adjacency list, where each key is a vertex and its value is a list of vertices it points to. The function `bfs_shortest_path(graph, start_vertex)` should return a dictionary showing the shortest number of edges from the `start_vertex` to each other vertex and the paths taken. The dictionary keys will be the vertices, and the values will be tuples: the first element is the number of edges, and the second element is a list representing the path from the `start_vertex` to that vertex. Here is additional context for the function parameters: - `graph`: A dictionary where each key is a vertex and its value is a list of vertices that the key vertex has a direct edge to. - `start_vertex`: An integer representing the starting vertex for the breadth-first search. Your task is to implement the `bfs_shortest_path` function which returns a dictionary in the form: `{vertex: (number_of_edges, path)}`. **Example** ```python graph = { 1: [2, 3], 2: [3, 4], 3: [4], 4: [5], 5: [] } start_vertex = 1 result = bfs_shortest_path(graph, start_vertex) print(result) ``` Expected output: ```python { 1: (0, [1]), 2: (1, [1, 2]), 3: (1, [1, 3]), 4: (2, [1, 2, 4]), 5: (3, [1, 2, 4, 5]) } ```","solution":"from collections import deque def bfs_shortest_path(graph, start_vertex): Performs BFS on the given graph to find the shortest path from start_vertex to all other vertices. Parameters: graph (dict): Adjacency list representation of the graph. start_vertex (int): The starting vertex for the BFS. Returns: dict: A dictionary with vertices as keys and tuples as values. Each tuple contains the number of edges in the shortest path and the path itself. queue = deque([(start_vertex, 0, [start_vertex])]) visited = {start_vertex: (0, [start_vertex])} while queue: current_vertex, current_distance, path = queue.popleft() for neighbor in graph.get(current_vertex, []): if neighbor not in visited: new_path = path + [neighbor] visited[neighbor] = (current_distance + 1, new_path) queue.append((neighbor, current_distance + 1, new_path)) return visited"}]'),I={name:"App",components:{PoemCard:R},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},D={class:"card-container"},P={key:0,class:"empty-state"},z=["disabled"],N={key:0},Y={key:1};function L(i,e,l,p,r,s){const m=g("PoemCard");return n(),a("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),a("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",D,[(n(!0),a(b,null,w(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),a("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),a("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),a("span",Y,"Loading...")):(n(),a("span",N,"See more"))],8,z)):u("",!0)])}const O=c(I,[["render",L],["__scopeId","data-v-0179500d"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/28.md","filePath":"chatai/28.md"}'),j={name:"chatai/28.md"},B=Object.assign(j,{setup(i){return(e,l)=>(n(),a("div",null,[x(O)]))}});export{M as __pageData,B as default};
