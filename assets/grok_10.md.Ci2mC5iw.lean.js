import{_ as c,o as n,c as r,a as t,m as d,t as h,C as g,M as _,U as b,f as l,F as v,p as y,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},R={class:"review-title"},W={class:"review-content"};function F(i,e,u,f,s,a){return n(),r("div",q,[t("div",T,[t("div",R,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",W,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(h(u.poem.solution),1)])])])}const I=c(k,[["render",F],["__scopeId","data-v-e7a15067"]]),A=JSON.parse(`[{"question":"You are given an array of integers representing the heights of buildings. The size of the array represents the street length. Your task is to calculate the amount of sunlight each building receives. A building receives sunlight if there are no taller buildings to its left. Example: \`\`\` buildings = [2, 1, 3, 2, 4] sunlight = [2, 1, 3, 1, 4] Explanation: - Building at index 0 (height 2) receives 2 units of sunlight. - Building at index 1 (height 1) receives 1 unit of sunlight. - Building at index 2 (height 3) receives 3 units of sunlight. - Building at index 3 (height 2) receives 1 unit of sunlight. - Building at index 4 (height 4) receives 4 units of sunlight. \`\`\` Can you provide a Python solution to this problem?","solution":"def calculate_sunlight(buildings): Calculate the amount of sunlight each building receives. Args: buildings (list of int): List of building heights. Returns: list of int: List of sunlight units each building receives. sunlight = [] max_height = 0 for height in buildings: if height > max_height: max_height = height sunlight.append(max_height) return sunlight"},{"question":"Here is some code: \`\`\`python import random def guess_the_number(): Plays a number guessing game with the user. number = random.randint(1, 100) guesses_left = 7 print(\\"I'm thinking of a number between 1 and 100.\\") while guesses_left > 0: print(f\\"You have {guesses_left} guesses left.\\") try: guess = int(input(\\"Enter your guess: \\")) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue if guess < number: print(\\"Too low!\\") elif guess > number: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {7 - guesses_left} tries!\\") return guesses_left -= 1 print(f\\"You ran out of guesses. The number was {number}.\\") guess_the_number() \`\`\` This code implements a number guessing game where the computer chooses a random number between 1 and 100, and the player has 7 attempts to guess it. Can you add features to this game?","solution":"import random def get_random_number(): return random.randint(1, 100) def check_guess(guess, number, attempts): if guess < number: return \\"Too low!\\" elif guess > number: return \\"Too high!\\" else: return f\\"Congratulations! You guessed the number in {attempts} tries!\\" def provide_hint(number): if number % 2 == 0: return \\"Hint: The number is even.\\" else: return \\"Hint: The number is odd.\\" def guess_the_number(): Plays a number guessing game with the user. games_won = 0 while True: number = get_random_number() guesses_left = 7 print(\\"nI'm thinking of a number between 1 and 100.\\") while guesses_left > 0: print(f\\"You have {guesses_left} guesses left.\\") try: guess = int(input(\\"Enter your guess: \\")) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue result = check_guess(guess, number, 7 - guesses_left) print(result) if \\"Congratulations\\" in result: games_won += 1 break guesses_left -= 1 if guesses_left == 4: print(provide_hint(number)) if guesses_left == 0: print(f\\"You ran out of guesses. The number was {number}.\\") print(f\\"Games won: {games_won}\\") play_again = input(\\"Would you like to play again? (yes/no): \\").strip().lower() if play_again != 'yes': print(\\"Thanks for playing! Goodbye!\\") break"},{"question":"Objective: Develop a Python script named \`text_analyzer.py\` that analyzes the textual content of a file. 2. File Input: - The script should accept the filename as a command-line argument. For example: \`\`\`bash python text_analyzer.py my_document.txt \`\`\` 3. Analysis: - Word Count: Count the total number of words in the file. - Character Count: Count the total number of characters in the file (excluding whitespace). - Line Count: Count the total number of lines in the file. - Sentence Count: Count the total number of sentences in the file (assuming sentences end with \\".\\", \\"!\\", or \\"?","solution":"import sys import re def count_words(text): Returns the total number of words in the input text. words = text.split() return len(words) def count_characters(text): Returns the total number of characters in the input text (excluding whitespace). characters = re.sub(r's+', '', text) return len(characters) def count_lines(text): Returns the total number of lines in the input text. lines = text.split('n') return len(lines) def count_sentences(text): Returns the total number of sentences in the input text assuming sentences end with \\".\\", \\"!\\", or \\"?\\". sentences = re.split(r'[.!?]', text) sentences = [sentence for sentence in sentences if sentence.strip() != ''] return len(sentences) def analyze_file(filename): Analyzes the file and prints the word count, character count, line count, and sentence count. try: with open(filename, 'r') as file: text = file.read() word_count = count_words(text) character_count = count_characters(text) line_count = count_lines(text) sentence_count = count_sentences(text) print(f'Word Count: {word_count}') print(f'Character Count: {character_count}') print(f'Line Count: {line_count}') print(f'Sentence Count: {sentence_count}') except FileNotFoundError: print(f'Error: File \\"{filename}\\" not found.') if __name__ == '__main__': if len(sys.argv) != 2: print(\\"Usage: python text_analyzer.py <filename>\\") else: analyze_file(sys.argv[1])"},{"question":"This is what I am trying to achieve and the code I have so far: **Goal:** I want to build a simple text-based adventure game in Python where the player navigates through different rooms described by text and makes choices that affect the story. **What I Have:** \`\`\`python rooms = { \\"hallway\\": { \\"description\\": \\"You are in a dimly lit hallway. There is a door to the north and a door to the east.\\", \\"north\\": \\"bedroom\\", \\"east\\": \\"kitchen\\", }, \\"bedroom\\": { \\"description\\": \\"A small, tidy bedroom. There is a window to the west.\\", \\"west\\": \\"hallway\\", }, \\"kitchen\\": { \\"description\\": \\"A cluttered kitchen. There is a door to the west.\\", \\"west\\": \\"hallway\\", }, } current_room = \\"hallway\\" while True: room = rooms[current_room] print(room[\\"description\\"]) action = input(\\"> \\") if action in room: current_room = room[action] else: print(\\"Invalid direction.\\") \`\`\` **What I Need Help With:** I need help with the following: 1. **Clearer Input Handling:** - The current code only accepts compass directions (north, east, west, etc.). I want it to be more flexible, allowing players to type full sentences like \\"go north,\\" \\"open door,\\" or \\"examine table.\\" 2. **Adding Items:** I'd like to add items to rooms that players can pick up and use. 3. **Implementing Actions:** - I want to expand beyond just movement. I'd like players to be able to interact with objects, solve puzzles, or engage in simple combat. 4. **Saving and Loading Progress:** - It would be great to allow players to save their game and load it later. **Can you guide me on how to implement these features?","solution":"import re import pickle def save_game(state, filename=\\"savegame.pkl\\"): with open(filename, \\"wb\\") as f: pickle.dump(state, f) def load_game(filename=\\"savegame.pkl\\"): with open(filename, \\"rb\\") as f: return pickle.load(f) rooms = { \\"hallway\\": { \\"description\\": \\"You are in a dimly lit hallway. There is a door to the north and a door to the east.\\", \\"north\\": \\"bedroom\\", \\"east\\": \\"kitchen\\", \\"items\\": [\\"key\\"], }, \\"bedroom\\": { \\"description\\": \\"A small, tidy bedroom. There is a window to the west.\\", \\"west\\": \\"hallway\\", \\"items\\": [], }, \\"kitchen\\": { \\"description\\": \\"A cluttered kitchen. There is a door to the west.\\", \\"west\\": \\"hallway\\", \\"items\\": [\\"note\\"], }, } inventory = [] current_room = \\"hallway\\" def parse_command(command): match = re.match(r\\"(go|move|walk) (north|south|east|west)\\", command) if match: return \\"move\\", match.group(2) match = re.match(r\\"(take|pick up|grab) (w+)\\", command) if match: return \\"take\\", match.group(2) match = re.match(r\\"(look|examine|inspect)\\", command) if match: return \\"look\\", None match = re.match(r\\"(save|load) (game)\\", command) if match: return match.group(1), None return \\"unknown\\", None def game_loop(): global current_room while True: room = rooms[current_room] print(room[\\"description\\"]) action = input(\\"> \\") action_type, detail = parse_command(action) if action_type == \\"move\\": if detail in room: current_room = room[detail] else: print(\\"You can't go that way.\\") elif action_type == \\"take\\": if detail in room[\\"items\\"]: room[\\"items\\"].remove(detail) inventory.append(detail) print(f\\"You picked up a {detail}.\\") else: print(\\"There is no such item here.\\") elif action_type == \\"look\\": print(f\\"You see: {', '.join(room['items']) or 'Nothing special.'}\\") elif action_type == \\"save\\": save_game({\\"current_room\\": current_room, \\"inventory\\": inventory, \\"rooms\\": rooms}) print(\\"Game saved.\\") elif action_type == \\"load\\": state = load_game() current_room = state[\\"current_room\\"] inventory = state[\\"inventory\\"] rooms.update(state[\\"rooms\\"]) print(\\"Game loaded.\\") else: print(\\"I don't understand that command.\\") if __name__ == \\"__main__\\": game_loop()"},{"question":"This is a simple coding challenge I'm working on. The goal is to write a program that takes a string input and outputs the maximum length palindrome substring within that input. Here are some examples: Input: \\"bananas\\" Output: \\"anana\\" Input: \\"racecar\\" Output: \\"racecar\\" Input: \\"apple\\" Output: \\"a\\" I think recursion could be a good approach, but I'm struggling to figure out the base case and recursive step. Can you help me write this palindrome function using recursion?","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of the input string s. def is_palindrome(sub): return sub == sub[::-1] def recur(s, left, right): if left == right: return s[left] if left > right: return \\"\\" if is_palindrome(s[left:right + 1]): return s[left:right + 1] substr1 = recur(s, left + 1, right) substr2 = recur(s, left, right - 1) if len(substr1) > len(substr2): return substr1 else: return substr2 if not s: return \\"\\" return recur(s, 0, len(s) - 1)"},{"question":"Here's a snippet of Python code: \`\`\`python def multiply_list(data): \\"Multiplies all items in a list\\" product = 1 for item in data: product *= item return product \`\`\` This function takes a list as input (\`data\`) and returns the product of all elements in the list. 1. Can you rewrite the function using list comprehension?","solution":"from functools import reduce from operator import mul def multiply_list(data): Multiplies all items in a list using list comprehension. return reduce(mul, [item for item in data], 1)"},{"question":"This is a snippet of Python code which simulates a card game. \`\`\`python import random SUITS = [\\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\"] RANKS = [\\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"Jack\\", \\"Queen\\", \\"King\\", \\"Ace\\"] class Card: def __init__(self, suit, rank): self.suit = suit self.rank = rank def __str__(self): return f\\"{self.rank} of {self.suit}\\" class Deck: def __init__(self): self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS] def shuffle(self): random.shuffle(self.cards) def deal(self): if len(self.cards) > 0: return self.cards.pop() else: return None # Example usage deck = Deck() deck.shuffle() card = deck.deal() print(card) \`\`\` **Code Breakdown:** 1. **Setup**: - Defines constants \`SUITS\` and \`RANKS\` for the card values. 2. **\`Card\` Class**: - Represents a single playing card with a \`suit\` and \`rank\`. - \`__str__\` method allows for a user-friendly representation when printing a card object. 3. **\`Deck\` Class**: - Represents a deck of cards. - \`__init__\`: Creates a list of all 52 unique \`Card\` objects. - \`shuffle\`: Uses Python's \`random.shuffle\` to randomize the order of cards in the deck. - \`deal\`: Removes and returns the top card from the deck, returning \`None\` if the deck is empty. **Question:** How would you modify this code to simulate a simplified version of the card game \\"War\\"?","solution":"import random SUITS = [\\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\"] RANKS = [\\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"Jack\\", \\"Queen\\", \\"King\\", \\"Ace\\"] class Card: def __init__(self, suit, rank): self.suit = suit self.rank = rank def __str__(self): return f\\"{self.rank} of {self.suit}\\" def value(self): return RANKS.index(self.rank) class Deck: def __init__(self): self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS] def shuffle(self): random.shuffle(self.cards) def deal(self): if len(self.cards) > 0: return self.cards.pop() else: return None def war_game(): deck = Deck() deck.shuffle() # Split the deck between two players half_deck_size = len(deck.cards) // 2 player1_deck = deck.cards[:half_deck_size] player2_deck = deck.cards[half_deck_size:] while player1_deck and player2_deck: card1 = player1_deck.pop(0) # Player 1's card card2 = player2_deck.pop(0) # Player 2's card if card1.value() > card2.value(): player1_deck.extend([card1, card2]) elif card1.value() < card2.value(): player2_deck.extend([card1, card2]) else: player1_deck.append(card1) player2_deck.append(card2) if len(player1_deck) > len(player2_deck): return \\"Player 1 wins!\\" elif len(player1_deck) < len(player2_deck): return \\"Player 2 wins!\\" else: return \\"It's a draw!\\" # Example game simulation result = war_game() print(result)"},{"question":"Problem Description: You're working on a new educational app aimed at teaching mathematical concepts to children. One of the features you're designing is a \\"Number Guessing Game.\\" In this game, the app will think of a random number within a specified range, and the child will try to guess it. Your Task: Use Python to write a program that implements the \\"Number Guessing Game.\\" The program should: 1. Generate a random number within a user-specified range. 2. Prompt the user to guess the number. 3. Provide feedback to the user after each guess (e.g., too high, too low, correct!). 4. Track the number of guesses the user takes. 5. Offer the option to play again. \`\`\`python import random def number_guessing_game(): Plays a number guessing game with the user. # Get the lower and upper bounds for the range from the user. lower_bound = int(input(\\"Enter the lower bound of the range: \\")) upper_bound = int(input(\\"Enter the upper bound of the range: \\")) # Generate a random number within the specified range. secret_number = random.randint(lower_bound, upper_bound) # Initialize the number of guesses. num_guesses = 0 # Main game loop while True: try: #Prompt the user to guess the number guess = int(input(f\\"Guess a number between {lower_bound} and {upper_bound}: \\")) # Increment the guess count num_guesses += 1 # Check if the guess is correct. if guess == secret_number: print(f\\"Congratulations! You guessed the number in {num_guesses} tries.\\") break elif guess < secret_number: print(\\"Too low! Try again.\\") else: print(\\"Too high! Try again.\\") except ValueError: print(\\"Invalid input. Please enter a number.\\") # Ask the user if they want to play again. play_again = input(\\"Want to play again?","solution":"import random def number_guessing_game(): Plays a number guessing game with the user. while True: # Get the lower and upper bounds for the range from the user. lower_bound = int(input(\\"Enter the lower bound of the range: \\")) upper_bound = int(input(\\"Enter the upper bound of the range: \\")) # Generate a random number within the specified range. secret_number = random.randint(lower_bound, upper_bound) # Initialize the number of guesses. num_guesses = 0 # Main game loop while True: try: # Prompt the user to guess the number guess = int(input(f\\"Guess a number between {lower_bound} and {upper_bound}: \\")) # Increment the guess count num_guesses += 1 # Check if the guess is correct. if guess == secret_number: print(f\\"Congratulations! You guessed the number in {num_guesses} tries.\\") break elif guess < secret_number: print(\\"Too low! Try again.\\") else: print(\\"Too high! Try again.\\") except ValueError: print(\\"Invalid input. Please enter a number.\\") # Ask the user if they want to play again. play_again = input(\\"Want to play again? (yes/no): \\").strip().lower() if play_again != 'yes': break"},{"question":"The problem to solve is: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` Could you please provide a solution using python \`\`\`python def two_sum(nums, target): hashmap = {} for i, num in enumerate(nums): complement = target - num if complement in hashmap: return [hashmap[complement], i] hashmap[num] = i return []","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array 'nums' that add up to 'target'. :param nums: List of integers :param target: An integer target sum :return: List containing indices of the two numbers that add up to target hashmap = {} for i, num in enumerate(nums): complement = target - num if complement in hashmap: return [hashmap[complement], i] hashmap[num] = i return []"},{"question":"Here's the problem: I have a text document with a list of usernames. Each username is separated by a newline character. I want to write a Python script to process this file and identify any usernames that are longer than a specified length. Here's what I've tried: \`\`\`python def find_long_usernames(filename, max_length): long_usernames = [] with open(filename, 'r') as f: for line in f: if len(line.strip()) > max_length: long_usernames.append(line.strip()) return long_usernames","solution":"def find_long_usernames(filename, max_length): Takes a filename and a max_length, and returns a list of usernames longer than max_length. :param filename: The name of the file containing usernames. :param max_length: The maximum allowed length for usernames. :return: A list of usernames longer than max_length. long_usernames = [] with open(filename, 'r') as f: for line in f: if len(line.strip()) > max_length: long_usernames.append(line.strip()) return long_usernames"},{"question":"Let's say I have a binary string of length 100. Let's say I want to count how many times the pattern \\"01\\" appears consecutively. Here's one way to do it: > **Simple Brute Force Approach** - Loop through the string, comparing consecutive characters. - If you find \\"01\\", increment a counter. While this works, it has its downfalls: - **Inefficiency:** Checking every consecutive pair for larger strings becomes computationally expensive. Let's explore a more efficient approach: **Rabin-Karp Algorithm** - Though often used for string matching, it can be adapted for pattern counting. - Convert the pattern \\"01\\" into a numerical hash. - Sliding window: Move a window of size 2 across the string, calculating the hash of the window's content. - Compare: Compare the window hash with the pattern hash. If they match, increment the counter. - Hash Collisions: Implement a way to handle potential hash collisions (e.g., double-checking the actual substring). Can you explain how to implement the Rabin-Karp algorithm to count \\"01\\" occurrences in a binary string?","solution":"def rabin_karp_count_01(binary_string): Uses Rabin-Karp algorithm to count the occurrences of '01' in a binary string. :param binary_string: A binary string of length 100. :return: The number of times '01' occurs consecutively. pattern = \\"01\\" pattern_hash = hash(pattern) count = 0 window_length = len(pattern) for i in range(len(binary_string) - window_length + 1): window = binary_string[i:i + window_length] if hash(window) == pattern_hash: if window == pattern: # Double checking to handle hash collisions count += 1 return count # Using Python's built-in hash function for simplicity, # but in practice, a custom rolling hash function may be implemented for better control."},{"question":"Objective: Create a text-based adventure game using Python. Story: The player is trapped in a dark dungeon. They need to find a way out, encountering obstacles and making choices along the way. \`\`\`python def start_game(): print(\\"Welcome to the Dungeon!\\") print(\\"You awake in a dark, damp cell. A single flickering torch illuminates...\\") # ...Rest of the game logic will go here... start_game() \`\`\` Gameplay Mechanics: Choices: Present players with multiple-choice options at key points. Each choice should lead to a different outcome or path. Inventory: Allow the player to collect items that can be used later. Combat: Implement simple combat encounters using text descriptions. The player can use items or fight using basic attacks. Additional Features (Optional): Puzzles: Include logic puzzles to solve for progression. Character Stats: Allow players to have stats like health and strength, which affect combat. Saving/Loading: Implement a system to save the player's progress. Requirements: Python 3 Instructions: 1. Create a new Python file. 2. Copy and paste the code above into the file. 3. Flesh out the game logic by adding the missing parts (choices, inventory, combat, etc.). 4. Test and refine your game. Tips: Use descriptive text to set the scene and create an immersive experience. Keep the game relatively concise for a first implementation. Let's work together to build this text-based adventure game! What would you like to add or change first?","solution":"import random class Game: def __init__(self): self.health = 100 self.inventory = [] self.game_over = False def start_game(self): self.print_intro() while not self.game_over: self.choice_in_cell() if self.game_over: break self.find_treasure_room() if self.game_over: break self.battle_monster() if self.game_over: break self.find_exit() def print_intro(self): print(\\"Welcome to the Dungeon!\\") print(\\"You awake in a dark, damp cell. A single flickering torch illuminates your surroundings...\\") def choice_in_cell(self): print(\\"You can:\\") print(\\"1. Examine the cell door\\") print(\\"2. Search the cell\\") choice = input(\\"What do you do? (1/2): \\") if choice == '1': self.examine_door() elif choice == '2': self.search_cell() else: print(\\"Invalid choice, try again.\\") self.choice_in_cell() def examine_door(self): print(\\"The door is locked, but you notice a keyhole.\\") if \\"key\\" in self.inventory: print(\\"You use the key from your inventory and unlock the door.\\") self.inventory.remove(\\"key\\") else: print(\\"You don't have a key...\\") self.game_over = True def search_cell(self): print(\\"You search the cell and find a rusty key!\\") self.inventory.append(\\"key\\") def find_treasure_room(self): print(\\"You proceed down a dark hallway.\\") print(\\"You see a room with a treasure chest.\\") print(\\"You can:\\") print(\\"1. Open the chest\\") print(\\"2. Ignore the chest and keep moving\\") choice = input(\\"What do you do? (1/2): \\") if choice == '1': self.open_chest() elif choice == '2': print(\\"You choose to ignore the chest and continue along the hallway.\\") else: print(\\"Invalid choice, try again.\\") self.find_treasure_room() def open_chest(self): print(\\"You open the chest and find a sword!\\") self.inventory.append(\\"sword\\") def battle_monster(self): print(\\"You encounter a monster blocking your path!\\") print(\\"You can:\\") print(\\"1. Fight the monster\\") print(\\"2. Run away\\") choice = input(\\"What do you do? (1/2): \\") if choice == '1': self.fight_monster() elif choice == '2': print(\\"You try to run away, but the monster catches you.\\") self.game_over = True else: print(\\"Invalid choice, try again.\\") self.battle_monster() def fight_monster(self): if \\"sword\\" in self.inventory: print(\\"You fight the monster with your sword and win!\\") self.inventory.remove(\\"sword\\") else: print(\\"You have no weapon to fight the monster!\\") self.game_over = True def find_exit(self): print(\\"You keep moving and finally find the exit of the dungeon.\\") print(\\"Congratulations, you have escaped!\\") self.game_over = True if __name__ == \\"__main__\\": game = Game() game.start_game()"},{"question":"Here's the problem statement: You are given an array of integers and a target value. You need to find the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. **Example:** \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` Explain how to solve this problem using a hash table (dictionary in Python). **Explanation:** 1. **Create a Hash Table:** Initialize an empty dictionary to store numbers from the array as keys and their indices as values. 2. **Iterate Through the Array:** Loop through each number \`num\` in the input array \`nums\`. 3. **Calculate Complement:** For each \`num\`, calculate the \`complement\` by subtracting it from the \`target\`: \`complement = target - num\`. 4. **Check for Complement in Hash Table:** Check if the \`complement\` exists as a key in the hash table. - If the \`complement\` is found, it means we have already encountered the other number needed to reach the \`target\`. Return the current index \`i\` and the index of the \`complement\` stored in the hash table. - If the \`complement\` is not found, add the current \`num\` and its index \`i\` as a key-value pair to the hash table. 5. **Repeat:** Continue iterating through the array and repeating steps 3-4. **Python Code:** \`\`\`python def two_sum(nums, target): hashmap = {}","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Args: nums: List[int] - an array of integers. target: int - the target sum. Returns: List[int] - a list containing the indices of the two numbers. hashmap = {} for i, num in enumerate(nums): complement = target - num if complement in hashmap: return [hashmap[complement], i] hashmap[num] = i"},{"question":"Learning Objective: To create a program that can efficiently solve Sudoku puzzles of various difficulties.","solution":"def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve_sudoku(board): empty_cell = find_empty(board) if not empty_cell: return True # Solved row, col = empty_cell for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty(board): for row in range(9): for col in range(9): if board[row][col] == 0: return (row, col) return None"},{"question":"This is a program in Python that will take two numbers as input from the user and find the greatest common divisor (GCD) of the two numbers using Euclidean Algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean Algorithm. while b: a, b = b, a % b return a"},{"question":"This code snippet generates a list of unique combinations of numbers from 0 to \`n\` based on a given \`r\`. \`\`\`python from itertools import combinations def unique_combinations(n, r): return list(combinations(range(n + 1), r)) # Example usage n = 5 r = 3 combinations_list = unique_combinations(n, r) print(combinations_list) \`\`\` This code generates unique combination of 3 numbers from 0 to 5. The output of this code is \`\`\` [(0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 4), (0, 3, 5), (0, 4, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)] \`\`\` **Can you explain how the code works?","solution":"from itertools import combinations def unique_combinations(n, r): Generates a list of unique combinations of r numbers from 0 to n. return list(combinations(range(n + 1), r))"},{"question":"I want to build a simple chatbot using Python and basic machine learning techniques. Here's my approach: 1. **Dataset:** Use a publicly available dataset of dialogues or conversations. 2. **Preprocessing:** Clean the text data, tokenize it, and create a vocabulary. 3. **Training:** * **Choose a simple Machine learning technique**: Maybe a Bag-of-Words (BoW) model or TF-IDF. * **Train a classifier**: This classifier will learn to predict the next word in a sequence given the preceding words 4. **Chatbot:** Build a simple loop that takes user input, preprocesses it, uses the trained classifier to predict the next word, and generates a response. Could you please elaborate on each step and provide code examples using Python and relevant libraries?","solution":"# Step 1: Dataset import pandas as pd # We'll use a simple dataset for demonstration. Here, 'data.csv' is a CSV file with dialogs. try: df = pd.read_csv('data.csv') conversations = df['dialogues'].tolist() except FileNotFoundError: conversations = [ \\"Hello, how are you?\\", \\"I am fine, thank you.\\", \\"What is your name?\\", \\"My name is Chatbot.\\" ] # Step 2: Preprocessing from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.pipeline import Pipeline import re def preprocess_text(text): text = text.lower() text = re.sub(r\\"[^a-zA-Z0-9s]\\", \\"\\", text) return text processed_conversations = [preprocess_text(conv) for conv in conversations] # Step 3: Training # Using Bag-of-Words (BoW) model and a simple Multinomial Naive Bayes classifier from sklearn.naive_bayes import MultinomialNB # Create a pipeline that processes text, converts it to BoW, and trains the classifier pipeline = Pipeline([ ('vectorizer', CountVectorizer()), ('tfidf_transformer', TfidfTransformer()), ('classifier', MultinomialNB()) ]) # Prepares training data # Splitting each conversation into preceding words (X) and the next word (y) X_train = [] y_train = [] for conversation in processed_conversations: words = conversation.split() for i in range(len(words) - 1): X_train.append(\\" \\".join(words[:i+1])) y_train.append(words[i+1]) # Fit the model pipeline.fit(X_train, y_train) # Step 4: Chatbot def chatbot_response(input_text, pipeline): processed_input = preprocess_text(input_text) predicted_next_word = pipeline.predict([processed_input])[0] return input_text + ' ' + predicted_next_word # Example use of the chatbot user_input = \\"Hello\\" response = chatbot_response(user_input, pipeline) print(response)"},{"question":"You are given a string \`s\`. Return all the starting indices of the \`t\` character within the string. Example: \`\`\`python s = \\"hellothellohello\\" t = \\"t\\" \`\`\` Output: \`\`\` [3, 7, 11] \`\`\` My solution: \`\`\`python def find_starting_indices(s: str, t: str) -> list[int]: indices = [] for i in range(len(s)): if s[i] == t: indices.append(i) return indices \`\`\` Question: Is there a more efficient way to do this?","solution":"def find_starting_indices(s: str, t: str) -> list[int]: Return all starting indices of the character t within the string s. return [i for i in range(len(s)) if s[i] == t]"},{"question":"This is a coding challenge based on LeetCode. **Problem Statement:** Given an integer array nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have **exactly one solution**, and you may not use the same element twice. You can return the answer in any order. **Example:** \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` **Constraints:** * 2 <= nums.length <= 10^4 * -10^9 <= nums[i] <= 10^9 * -10^9 <= target <= 10^9 * Only one valid answer exists. **Can you write a Python solution which takes advantage of dictionaries?","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. :param nums: List[int], list of integers :param target: int, target sum :return: List[int], indices of the two numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [] # This line will not be reached as per problem constraints."},{"question":"Here's a piece of code I'm working on. I'm trying to count the number of times a specific pattern appears in a string. \`\`\`python import re def count_pattern(text, pattern): match = re.findall(pattern, text) return len(match) text = \\"This is a test string. This string is for testing.\\" pattern = r\\"this\\" count = count_pattern(text, pattern) print(f\\"Pattern '{pattern}' found {count} times.\\") \`\`\` This code works as expected for this example. **But what if the pattern I want to count is case-insensitive?","solution":"import re def count_pattern(text, pattern, case_insensitive=False): Counts the number of times a pattern appears in a given text. :param text: The text to search within. :param pattern: The pattern to search for. :param case_insensitive: If True, performs case-insensitive matching. :return: The count of occurrences of the pattern in the text. flags = re.IGNORECASE if case_insensitive else 0 match = re.findall(pattern, text, flags) return len(match) # Example usage text = \\"This is a test string. This string is for testing.\\" pattern = r\\"this\\" count = count_pattern(text, pattern, case_insensitive=True) print(f\\"Pattern '{pattern}' found {count} times.\\")"},{"question":"You have a string, represented by \`s\`. You also have an integer, represented by \`k\`. **Task:** Return the lexicographically smallest string that can be created by removing at most \`k\` characters from \`s\`. **Example:** \`\`\` s = \\"daily\\" k = 1 Output: \\"aily\\" \`\`\` **Explanation:** By removing the 'd' from 'daily', we get 'aily', which is the lexicographically smallest string achievable by removing at most one character. **Constraints:** * 1 <= len(s) <= 1000 * 0 <= k <= len(s) **Code (Python):** \`\`\`python def remove_k_chars(s, k): n = len(s) if k >= n: return \\"\\" dp = [['' for _ in range(k + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = s[0:i] # Your code here \`\`\` \`\`\` return dp[n][k] \`\`\` Can you complete the code implementation and explain your approach?","solution":"def remove_k_chars(s, k): Returns the lexicographically smallest string that can be created by removing at most k characters from s. n = len(s) stack = [] to_remove = k for char in s: while stack and to_remove > 0 and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # If there are still characters left to remove stack = stack[:len(s) - k] return ''.join(stack)"},{"question":"This is the problem statement: You are given an array of n integers where n > 1, and a positive integer target sum s. your goal is to find two numbers from the array whose sum is equal to the target sum * **Input:** An array of integers, arr, and a positive integer, target_sum * **Output:** An array containing the two numbers that sum up to the target_sum. If no such pair is found, return an empty array **Here's an example**: **Input:** arr = [10, 2, 8, 7, 6, 5], target_sum = 13 **Output:** [10, 3] because 10 + 3 = 13 **I need help writing a Python function for this:** \`\`\`python def find_pair_sum(arr, target_sum): Finds two numbers from an array that sum up to a given target. Args: arr: A list of integers. target_sum: The target sum to find. Returns: A list containing the two numbers that sum up to the target_sum, or an empty list if no such pair is found.","solution":"def find_pair_sum(arr, target_sum): Finds two numbers from an array that sum up to a given target. Args: arr: A list of integers. target_sum: The target sum to find. Returns: A list containing the two numbers that sum up to the target_sum, or an empty list if no such pair is found. num_dict = {} for num in arr: complement = target_sum - num if complement in num_dict: return [complement, num] num_dict[num] = True return []"},{"question":"Given a string 's', find the longest substring without repeating characters. Example: \`\`\` Input: s = \\"abcabcbb\\" Output: \\"abc\\" Explanation: The answer must be a substring, \\"abc\\" is the longest substring without repeating characters. Input: s = \\"bbbbb\\" Output: \\"b\\" Explanation: The answer must be a substring, \\"b\\" is the longest substring without repeating characters. Input: s = \\"pwwkew\\" Output: \\"wke\\" Explanation: The answer must be a substring, \\"wke\\" is the longest substring without repeating characters. \`\`\` Constraints: 0 <= len(s) <= 5 10^4 s consists of English letters, digits, symbols and spaces. Follow up: Can you do it in O(n) time complexity where n is the length of the string?","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. n = len(s) if n == 0: return \\"\\" start, max_len, max_sub = 0, 0, \\"\\" char_map = {} for end in range(n): current_char = s[end] if current_char in char_map and char_map[current_char] >= start: start = char_map[current_char] + 1 char_map[current_char] = end if end - start + 1 > max_len: max_len = end - start + 1 max_sub = s[start:end+1] return max_sub"},{"question":"Given an array \`nums\` and an integer \`target\`, return indices of the two numbers such that they add up to \`target\`. You may assume that each input would have exactly one solution , and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Example 3: Input: nums = [3, 3], target = 6 Output: [0, 1] Constraints: \`2 <= nums.length <= 104\` \`-109 <= nums[i] <= 109\` \`-109 <= target <= 109\` Only one valid answer exists. Can you provide a Python code solution for this problem?","solution":"def two_sum(nums, target): Given an array nums and an integer target, return indices of the two numbers such that they add up to target. Args: nums (List[int]): List of integers. target (int): Target sum. Returns: List[int]: Indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): diff = target - num if diff in num_to_index: return [num_to_index[diff], i] num_to_index[num] = i"},{"question":"This is the input for a program that searches for a word in a text file. \`\`\` apple banana cherry apple pie pineapple orange apple \`\`\` The program should output: \`\`\` Found \\"apple\\" in line 1 Found \\"apple\\" in line 2 Found \\"apple\\" in line 4 \`\`\` Here's how the program would work step-by-step: 1. The program reads the input text file line by line 2. For each line, it checks if the target word (\\"apple\\" in this case) is present 3. If the word is found, it prints a message indicating the line number where the word was found. Can you write a Python code snippet that does this?","solution":"def search_word_in_lines(word, lines): Searches for the given word in the list of lines and returns a list of strings indicating the line numbers where the word was found. :param word: The word to search for. :param lines: A list of strings representing the lines to search within. :return: A list of result strings indicating where the word was found. results = [] for idx, line in enumerate(lines, start=1): if word in line.split(): results.append(f'Found \\"{word}\\" in line {idx}') return results"},{"question":"Write a Python program to read a text file and count the occurrences of each vowel (a, e, i, o, u) in the file.","solution":"def count_vowels(filename): Counts the occurrences of each vowel (a, e, i, o, u) in the specified text file. Args: filename (str): The path to the text file. Returns: dict: A dictionary with vowels as keys and their counts as values. vowels = \\"aeiou\\" counts = {vowel: 0 for vowel in vowels} with open(filename, 'r') as file: text = file.read().lower() for character in text: if character in vowels: counts[character] += 1 return counts"},{"question":"You have a set of n elements and you want to find all possible subsets. For example, If you have a set {A, B, C}, the subsets are: {}, {A}, {B}, {C}, {A, B}, {A, C}, {B, C}, {A, B, C} Can you provide a Python code to generate all possible subsets of a set?","solution":"from itertools import chain, combinations def all_subsets(input_set): Generates all subsets of a given set. Args: input_set (set): A set of elements. Returns: list: A list of sets, each being a subset of the input set. s = list(input_set) return list(map(set, chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))))"},{"question":"This is an example input file for the algorithm: \`\`\` example word1,word3,word2 word2,word1,word3 word3,word2,word1 example2 word4,word5 word5,word4 \`\`\` This file contains pairs of words which represent connections. For example, \\"word1,word3,word2\\" means that there is a connection between word1 and word3, and also between word3 and word2. **The task is:** Write a Python program that: 1. Reads the input file. 2. Builds a graph data structure (using a dictionary) to represent the connections between words. 3. Implements Breadth-First Search (BFS) algorithm to find the shortest path between two given words. **The program should take the following inputs:** * **File path:** Path to the input file. * **Start word:** The start word for the path finding. * **End word:** The end word for the path finding. **The program should output:** * If there is a path between the start and end words, it should output the shortest path. * If there is no path between the start and end words, it should output \\"No path found.\\". \`\`\` file_path = input(\\"Enter the file path: \\") start_word = input(\\"Enter the start word: \\") end_word = input(\\"Enter the end word: \\")","solution":"from collections import deque def build_graph(file_path): graph = {} with open(file_path, 'r') as file: for line in file: line = line.strip() if line and \\",\\" in line: words = line.split(',') for i in range(len(words) - 1): if words[i] not in graph: graph[words[i]] = [] if words[i + 1] not in graph: graph[words[i + 1]] = [] if words[i + 1] not in graph[words[i]]: graph[words[i]].append(words[i + 1]) if words[i] not in graph[words[i + 1]]: graph[words[i + 1]].append(words[i]) return graph def bfs(graph, start, end): if start not in graph or end not in graph: return \\"No path found.\\" queue = deque([(start, [start])]) visited = set() while queue: current, path = queue.popleft() if current == end: return path visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return \\"No path found.\\" def find_shortest_path(file_path, start_word, end_word): graph = build_graph(file_path) return bfs(graph, start_word, end_word)"},{"question":"Write a python function to split a text string into sentences. This is a classic NLP task and can be trickier than it seems due to edge cases like abbreviations, numbers, acronyms etc. Requirements: 1. Functionality: The function should accurately split a given text string into a list of sentences. 2. Sentence Delimiters: The function should handle the following sentence delimiters: Period (.) Question mark (?","solution":"import re def split_into_sentences(text): Splits the input text into sentences based on period, question mark or exclamation mark delimiters. Parameters: text (str): The input text string to split into sentences. Returns: list: A list of sentences. # Use regex to account for common delimiters: ., !, ? sentences = re.split(r'(?<!w.w.)(?<![A-Z][a-z].)(?<=.|?|!)s', text) return [sentence.strip() for sentence in sentences if sentence.strip()]"},{"question":"Define a function \`find_peaks()\` that takes a list of numbers as input and returns a list containing the indices of all the peaks in the list.","solution":"def find_peaks(arr): This function takes a list of numbers as input and returns a list containing the indices of all the peaks in the list. A peak is defined as an element that is greater than its neighbors. if len(arr) < 3: return [] peaks = [] for i in range(1, len(arr) - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(i) return peaks"},{"question":"In Python, how can you create a function that calculates the distance between two points in a 3D space?","solution":"import math def distance_between_points(p1, p2): Calculate the distance between two points in 3D space. Parameters: p1 (tuple): A tuple of three numbers representing the coordinates of the first point (x1, y1, z1). p2 (tuple): A tuple of three numbers representing the coordinates of the second point (x2, y2, z2). Returns: float: The distance between the two points. return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 + (p2[2] - p1[2])**2)"},{"question":"You are given a string containing only lowercase letters and spaces. You need to write a Python function that takes this string as input and returns the characters that appear exactly once in the string, in the order they appear.","solution":"def find_unique_characters(s): Returns the characters that appear exactly once in the string s, in the order they appear. Params: s (str): Input string containing only lowercase letters and spaces. Returns: List[str]: List of characters that are unique in the input string. from collections import Counter count = Counter(s) return [char for char in s if count[char] == 1]"},{"question":"Write a Python program to implement the Breadth-First Search (BFS) algorithm for an undirected graph.","solution":"from collections import deque def bfs(graph, start_node): Perform the Breadth-First Search (BFS) algorithm on an undirected graph. Parameters: graph (dict): A dictionary representing the graph where keys are node identifiers and values are lists of neighboring node identifiers. start_node: The starting node for the BFS traversal. Returns: list: A list of nodes in the order they were visited. visited = [] queue = deque([start_node]) while queue: node = queue.popleft() if node not in visited: visited.append(node) queue.extend(neighbor for neighbor in graph[node] if neighbor not in visited) return visited"},{"question":"The problem I'm trying to solve is finding the **shortest path between two points on a grid**. To solve this, I want to implement Dijkstra's algorithm. I already know the general idea behind Dijkstra's algorithm: it starts from a source node and iteratively explores the graph, finding the shortest path to each node. However, I'm having trouble with the **implementation details**, specifically: * **Data Structures**: What data structures should I use to represent the grid and the distances?","solution":"import heapq def dijkstra(grid, start, end): Implements Dijkstra's algorithm to find the shortest path on a grid. :param grid: 2D list of 1s (accessible) and 0s (inaccessible) :param start: Tuple (x, y) - starting coordinate :param end: Tuple (x, y) - ending coordinate :return: shortest path length or float('inf') if not reachable rows, cols = len(grid), len(grid[0]) # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Distance grid initialized with infinity distances = [[float('inf') for _ in range(cols)] for _ in range(rows)] # Priority queue for the min-heap pq = [] # Initialize the start position heapq.heappush(pq, (0, start)) distances[start[0]][start[1]] = 0 while pq: current_distance, (x, y) = heapq.heappop(pq) # Early exit if we reach the end node if (x, y) == end: return current_distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: new_distance = current_distance + 1 if new_distance < distances[nx][ny]: distances[nx][ny] = new_distance heapq.heappush(pq, (new_distance, (nx, ny))) return float('inf')"},{"question":"Exercise Implement a function \`count_overlapping_rectangles(rectangles)\` that takes a list of rectangles as input and returns the number of overlapping rectangles. A rectangle is represented by a tuple of four integers \`(x1, y1, x2, y2)\`, where: \`(x1, y1)\` are the coordinates of the bottom-left corner. \`(x2, y2)\` are the coordinates of the top-right corner. Two rectangles overlap if they share any common area. Example \`\`\`python rectangles = [(1, 1, 3, 3), (2, 2, 4, 4), (3, 3, 5, 5)] count_overlapping_rectangles(rectangles) == 3 \`\`\` In this example, all three rectangles overlap. \`\`\`python rectangles = [(1, 1, 3, 3), (4, 4, 6, 6)] count_overlapping_rectangles(rectangles) == 0 \`\`\` In this example, the rectangles do not overlap. Hint: You can use nested loops to compare each rectangle with every other rectangle. \`\`\`python def count_overlapping_rectangles(rectangles): count = 0 for i in range(len(rectangles)): for j in range(i + 1, len(rectangles)): # Compare rectangles[i] and rectangles[j] pass return count \`\`\` Explanation: We initialize a counter \`count\` to 0. We use two nested loops to iterate over all pairs of rectangles. For each pair of rectangles, we call a function \`compare_rectangles\` (which you need to implement) to check if they overlap. If they overlap, we increment the \`count\`. Bonus: Can you implement the function \`compare_rectangles\` to check if two rectangles overlap?","solution":"def do_overlap(rect1, rect2): Check if two rectangles overlap. (x1, y1, x2, y2) = rect1 (a1, b1, a2, b2) = rect2 # If one rectangle is on the left side of the other if x1 >= a2 or a1 >= x2: return False # If one rectangle is above the other if y1 >= b2 or b1 >= y2: return False return True def count_overlapping_rectangles(rectangles): Count the number of overlapping rectangles in the given list. count = 0 n = len(rectangles) overlap_set = set() for i in range(n): for j in range(i + 1, n): if do_overlap(rectangles[i], rectangles[j]): overlap_set.add(i) overlap_set.add(j) return len(overlap_set)"},{"question":"This program simulates a simple dice roller. \`\`\`python import random def roll_dice(): Rolls a single six-sided die. return random.randint(1, 6) while True: input(\\"Press Enter to roll the dice (or type 'q' to quit): \\") choice = input().lower() if choice == 'q': break result = roll_dice() print(\\"You rolled a\\", result) \`\`\` This code works fine,** but I want to be able to specify the number of dice to roll**. How can I modify the code to allow the user to choose how many dice to roll?","solution":"import random def roll_dice(number_of_dice): Rolls a specified number of six-sided dice. Parameters: number_of_dice (int): The number of dice to roll. Returns: list: A list of integers representing the results of each die roll. return [random.randint(1, 6) for _ in range(number_of_dice)] def main(): while True: num_dice = input(\\"Enter the number of dice to roll (or type 'q' to quit): \\").lower() if num_dice == 'q': break if not num_dice.isdigit(): print(\\"Please enter a valid number.\\") continue num_dice = int(num_dice) results = roll_dice(num_dice) print(\\"You rolled:\\", results) if __name__ == \\"__main__\\": main()"},{"question":"A string s is given as input. Each character in s is either 'E' (representing a move East) or 'S' (representing a move South). Imagine the movements are made on a grid starting at the origin (0,0). Goal: Determine if it's possible to reach the origin (0,0) again after following the given movements in s. Example: \`\`\` s = \\"EESSEE\\" Output: True \`\`\` Explanation: EESSEE represents a sequence of East-East-South-South-East-East. This movement pattern results in reaching the origin (0,0) again. Can you provide a Python solution to this problem?","solution":"def can_return_to_origin(s): Determines if it's possible to return to the origin (0,0) after following the movements in string s. Args: s: A string containing the characters 'E' and 'S'. Returns: True if it's possible to return to the origin, False otherwise. east_count = s.count('E') south_count = s.count('S') return east_count % 2 == 0 and south_count % 2 == 0"},{"question":"Given two equal-length arrays, \`nums1\` and \`nums2\`, return the dot product of two arrays. Constraints: \`1 <= nums1.length, nums2.length <= 10^4\` \`-10^9 <= nums1[i], nums2[i] <= 10^9\` Example: \`\`\` nums1 = [1, 2, 3] nums2 = [4, 5, 6] dotProduct = 1 4 + 2 5 + 3 6 = 32 Output: 32 \`\`\` Can you provide a Python solution for this problem?","solution":"def dot_product(nums1, nums2): Returns the dot product of two equal-length arrays, nums1 and nums2. return sum(x * y for x, y in zip(nums1, nums2))"},{"question":"I need a Python function that takes a string as input and returns the count of uppercase letters, lowercase letters, digits, and special characters.","solution":"def count_characters(s): Counts the number of uppercase letters, lowercase letters, digits, and special characters in a string. Args: s (str): The input string. Returns: dict: A dictionary with counts of 'uppercase', 'lowercase', 'digits', and 'special_chars'. counts = {'uppercase': 0, 'lowercase': 0, 'digits': 0, 'special_chars': 0} for char in s: if char.isupper(): counts['uppercase'] += 1 elif char.islower(): counts['lowercase'] += 1 elif char.isdigit(): counts['digits'] += 1 else: counts['special_chars'] += 1 return counts"},{"question":"Write a function \`is_vowel(char)\` that takes a single character \`char\` as input and returns \`True\` if the character is a vowel (a, e, i, o, u), and \`False\` otherwise.","solution":"def is_vowel(char): Determines if a given character is a vowel. return char.lower() in 'aeiou'"},{"question":"This is a Python project where you write a program to guess a randomly generated number between 1 and 100. Implement the following: 1. **Random Number Generation:** Generate a random integer between 1 and 100 (inclusive) using the \`random\` module. 2. **User Input:** Prompt the user to enter their guess using the \`input()\` function. 3. **Input Validation:** - Ensure the input is an integer. - Ensure the input is within the valid range (1 to 100). 4. **Comparison:** Compare the user's guess with the randomly generated number: - If the guess is correct, congratulate the user and end the game. 5. **Feedback:** - If the guess is too low, tell the user to guess higher. - If the guess is too high, tell the user to guess lower. 6. **Loop:** Continue the guessing process until the user guesses the correct number. **Bonus:** - Keep track of the number of guesses the user takes and display it at the end. - Limit the number of guesses the user has (e.g., 7 guesses) and end the game if they exceed the limit. \`\`\`python import random","solution":"import random def generate_random_number(): Generate a random integer between 1 and 100 (inclusive). return random.randint(1, 100) def get_user_guess(): Prompt the user to enter their guess. while True: try: guess = int(input(\\"Enter your guess (1-100): \\")) if 1 <= guess <= 100: return guess else: print(\\"Please enter a number between 1 and 100.\\") except ValueError: print(\\"Invalid input. Please enter an integer.\\") def compare_guess(guess, target): Compare the user's guess with the randomly generated number. if guess < target: print(\\"Too low. Try again.\\") elif guess > target: print(\\"Too high. Try again.\\") else: print(\\"Congratulations! You've guessed the correct number.\\") return True return False def play_game(guess_limit=7): Main function to play the number guessing game. target = generate_random_number() attempts = 0 while attempts < guess_limit: guess = get_user_guess() attempts += 1 if compare_guess(guess, target): print(f\\"You guessed the number in {attempts} attempts.\\") break else: print(f\\"Sorry, you've used all {guess_limit} attempts. The correct number was {target}.\\")"},{"question":"The problem statement: A robot is positioned at a starting point in a grid. It can move only horizontally and vertically, one step at a time. Can you write a Python program that takes the grid size (number of rows and columns) and the starting position (row, column) as input and generates all possible paths the robot can take to reach a target position (row, column) . Let's assume the goal is for the program to be generalizable so that it can handle any grid size and any starting and target positions within the grid. \`\`\`python from collections import defaultdict def find_paths(rows, cols, start_row, start_col, target_row, target_col): Generates all possible paths from a starting position to a target position in a grid. Args: rows: Number of rows in the grid. cols: Number of columns in the grid. start_row: Row index of the starting position. start_col: Column index of the starting position. target_row: Row index of the target position. target_col: Column index of the target position. Returns: A list of all possible paths, where each path is a list of tuples representing the (row, column) coordinates of each step. paths = [] def explore(row, col, current_path): if row == target_row and col == target_col: paths.append(current_path.copy()) return if row < 0 or row >= rows or col < 0 or col >= cols: return","solution":"def find_paths(rows, cols, start_row, start_col, target_row, target_col): Generates all possible paths from a starting position to a target position in a grid. Args: rows: Number of rows in the grid. cols: Number of columns in the grid. start_row: Row index of the starting position. start_col: Column index of the starting position. target_row: Row index of the target position. target_col: Column index of the target position. Returns: A list of all possible paths, where each path is a list of tuples representing the (row, column) coordinates of each step. paths = [] def explore(row, col, current_path): if row == target_row and col == target_col: paths.append(current_path.copy()) return if row < 0 or row >= rows or col < 0 or col >= cols: return # Move right explore(row, col + 1, current_path + [(row, col + 1)]) # Move down explore(row + 1, col, current_path + [(row + 1, col)]) # Start the exploration from the starting point explore(start_row, start_col, [(start_row, start_col)]) return paths"},{"question":"Let's say you receive the following input: * **Data format:** A Python dictionary representing a single product. * **Example:** \`\`\`python product = { \\"name\\": \\"Laptop\\", \\"price\\": 1200, \\"brand\\": \\"Dell\\", \\"description\\": \\"Powerful laptop with 16GB RAM\\", \\"category\\": \\"Electronics\\", \\"ratings\\": [4.5, 3.8, 4.2, 5.0] } \`\`\` **Task:** Create a Python function that takes a product dictionary as input and returns a nicely formatted string description of the product. **Requirements:** * The string should include the product's name, price, brand, and a short summary of the description. * The average rating should be calculated and included in the string. **Example Output:** For the input dictionary above, the output should be similar to: \`\`\` Dell Laptop A powerful laptop with 16GB RAM Price: 1200 Average Rating: 4.38 \`\`\` \`\`\`python def describe_product(product): Generates a formatted string description of a product. Args: product: A dictionary representing the product. Returns: A formatted string describing the product. name = product[\\"name\\"] brand = product[\\"brand\\"] description = product[\\"description\\"][:50] + \\"...\\"","solution":"def describe_product(product): Generates a formatted string description of a product. Args: product: A dictionary representing the product. Returns: A formatted string describing the product. name = product.get(\\"name\\", \\"Unknown Product\\") brand = product.get(\\"brand\\", \\"Unknown Brand\\") description = product.get(\\"description\\", \\"No Description\\")[:50] + \\"...\\" price = product.get(\\"price\\", \\"Unknown Price\\") ratings = product.get(\\"ratings\\", []) average_rating = round(sum(ratings) / len(ratings), 2) if ratings else 0 formatted_description = f\\"{brand} {name}nn\\" formatted_description += f\\"{description}nn\\" formatted_description += f\\"Price: {price}n\\" formatted_description += f\\"Average Rating: {average_rating}n\\" return formatted_description"},{"question":"This is a tricky one. You have a string s, and you want to count the number of distinct substrings it has. For example: * For \\"abca\\", there are 9 distinct substrings: \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"ab\\", \\"bc\\", \\"ca\\", \\"abc\\", \\"abca\\". * For \\"aaa\\", there are 4 distinct substrings: \\"a\\", \\"aa\\", \\"aaa\\". Write a Python function that takes a string as input and returns the number of distinct substrings it has. Bonus: * Can you think of ways to optimize your solution?","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string s. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"This week's coding challenge is about array manipulation. You will be given an array of integers, and your task is to find the shortest contiguous subarray that contains all the elements of a given target array.","solution":"def shortest_subarray_with_target(arr, target): Returns the shortest contiguous subarray that contains all the elements of the target array. import collections target_count = collections.Counter(target) current_count = collections.Counter() start = 0 min_length = float('inf') min_start = 0 min_end = 0 formed = 0 for end, value in enumerate(arr): if value in target_count: current_count[value] += 1 if current_count[value] == target_count[value]: formed += 1 while formed == len(target_count): if end - start + 1 < min_length: min_length = end - start + 1 min_start = start min_end = end start_value = arr[start] if start_value in target_count: if current_count[start_value] == target_count[start_value]: formed -= 1 current_count[start_value] -= 1 start += 1 if min_length == float('inf'): return [] return arr[min_start:min_end+1]"},{"question":"I have a file containing a list of words, each on a separate line. I want to: 1. **Filter the list to only include words that are 5 letters long.** 2. **Sort the filtered list alphabetically.** 3. **Write the sorted list to a new file.** Could someone please help me with a Python script to achieve this?","solution":"def filter_and_sort_words(input_file_path, output_file_path): Reads words from 'input_file_path', filters them to include only words that are 5 letters long, sorts them alphabetically, and writes the sorted list to 'output_file_path'. with open(input_file_path, 'r') as file: words = file.readlines() # Filter words to include only those that are 5 letters long five_letters_words = [word.strip() for word in words if len(word.strip()) == 5] # Sort the list alphabetically sorted_words = sorted(five_letters_words) # Write the sorted list to the new file with open(output_file_path, 'w') as file: for word in sorted_words: file.write(f\\"{word}n\\")"},{"question":"The Problem: I need to write a program that: 1. Accepts a list of strings as input. 2. Finds the longest string in the list. 3. Calculates the sum of the lengths of all strings in the list. 4. Prints the longest string and the sum of lengths. My attempts to do this in Python have been unsuccessful. Could someone help me with the code for this program?","solution":"def longest_string_and_sum_of_lengths(strings): Accepts a list of strings and returns the longest string and the sum of the lengths of all strings in the list. Parameters: strings (list): A list of strings. Returns: tuple: A tuple containing the longest string and the sum of the lengths of all strings. if not strings: return \\"\\", 0 longest_str = max(strings, key=len) total_length = sum(len(s) for s in strings) return longest_str, total_length"},{"question":"The problem asks us to explain the steps involved in creating a simple neural network from scratch using Python.","solution":"import numpy as np class SimpleNeuralNetwork: def __init__(self, input_size, hidden_size, output_size): # Initialize weights self.input_size = input_size self.hidden_size = hidden_size self.output_size = output_size self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size) self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size) # Initialize biases self.bias_hidden = np.zeros((1, self.hidden_size)) self.bias_output = np.zeros((1, self.output_size)) def sigmoid(self, x): return 1 / (1 + np.exp(-x)) def sigmoid_derivative(self, x): return x * (1 - x) def forward(self, X): # Calculate hidden layer activation self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden self.hidden_output = self.sigmoid(self.hidden_input) # Calculate output layer activation self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output self.final_output = self.sigmoid(self.final_input) return self.final_output def backward(self, X, y, output, learning_rate): # Error in output error = y - output delta_output = error * self.sigmoid_derivative(output) # Error in hidden layer error_hidden = delta_output.dot(self.weights_hidden_output.T) delta_hidden = error_hidden * self.sigmoid_derivative(self.hidden_output) # Update the weights and biases self.weights_hidden_output += self.hidden_output.T.dot(delta_output) * learning_rate self.bias_output += np.sum(delta_output, axis=0, keepdims=True) * learning_rate self.weights_input_hidden += X.T.dot(delta_hidden) * learning_rate self.bias_hidden += np.sum(delta_hidden, axis=0, keepdims=True) * learning_rate def train(self, X, y, epochs, learning_rate): for epoch in range(epochs): output = self.forward(X) self.backward(X, y, output, learning_rate) # Helper function to train and test a simple neural network def create_and_train_nn(input_size, hidden_size, output_size, X, y, epochs, learning_rate): nn = SimpleNeuralNetwork(input_size, hidden_size, output_size) nn.train(X, y, epochs, learning_rate) return nn"},{"question":"This is a coding challenge I am currently facing. **Challenge:** Write a function that takes in a single argument, a string, and returns the first non-repeating character in the string. If there are no non-repeating characters, return None. **Example:** \`\`\` first_non_repeating_character(\\"abcabc\\") # None first_non_repeating_character(\\"aabbccddeeff\\") # None first_non_repeating_character(\\"abcade\\") # 'c' first_non_repeating_character(\\"aabbccddeeffg\\") # 'g' first_non_repeating_character(\\"\\") # None \`\`\` **My Attempt:** \`\`\`python def first_non_repeating_character(string): Returns the first non-repeating character in the string. If there are no non-repeating characters, return None. char_counts = {} for char in string: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 for char in string: if char_counts[char] == 1: return char return None \`\`\` This solution works as intended. Can you suggest any improvements to make the code more efficient or Pythonic?","solution":"def first_non_repeating_character(string): Returns the first non-repeating character in the string. If there are no non-repeating characters, return None. from collections import OrderedDict # Using OrderedDict to maintain the insertion order of characters char_counts = OrderedDict() for char in string: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Finding the first non-repeating character for char, count in char_counts.items(): if count == 1: return char return None"},{"question":"This is a problem from an online coding challenge platform: **Problem statement:** You are given an array of integers \`nums\`. You need to find the length of the longest continuous increasing subarray. **Example:** \`\`\` Input: nums = [1,3,5,4,7] Output: 3 Explanation: The longest continuous increasing subarray is [1,3,5], with length 3. Input: nums = [2,2,2,2] Output: 1 Explanation: The longest continuous increasing subarray is [2], with length 1. \`\`\` **Can someone help me to solve this using Python?","solution":"def findLengthOfLCIS(nums): This function takes in a list of integers and returns the length of the longest continuous increasing subarray. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] > nums[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given an array of integers \`nums\` and an integer \`target\`. Return: An array of two integers that add up to \`target\`. Constraints: Each input will have exactly one solution,and you may not use the same element twice. You can return the answer in any order. Example: \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` (Optional) Follow-up: Can you come up with an algorithm that is less than O(n^2) time complexity?","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to target. Args: nums: List of integers. target: An integer target sum. Returns: A list containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [] # In case there is no solution, though the question says there will be one."},{"question":"Objective: To build a Python program that calculates the sum of all prime numbers within a user-specified range.","solution":"def is_prime(n): Check if the number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(start, end): Return the sum of all prime numbers within the range [start, end]. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"# Challenge: Implement a function to find the longest common subsequence (LCS) of two strings.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between two strings. m, n = len(str1), len(str2) # Create a 2D array to store the lengths of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a sorted array of integers \\"nums\\" and a target value \\"target\\", and you need to find the indices of the two numbers whose sum equals the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Constraints: 2 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9 Only one valid answer exists. Can you provide a Python solution using a two-pointer approach?","solution":"def two_sum(nums, target): Given a sorted array of integers and a target value, this function returns the indices of the two numbers whose sum equals the target. Args: nums (List[int]): A sorted array of integers. target (int): The target sum value. Returns: List[int]: Indices of the two numbers whose sum equals to target. left, right = 0, len(nums) - 1 while left < right: curr_sum = nums[left] + nums[right] if curr_sum == target: return [left, right] elif curr_sum < target: left += 1 else: right -= 1 return [] # Example usage: # nums = [2, 7, 11, 15] # target = 9 # Output: [0, 1]"},{"question":"I need to convert a string of text containing newline characters (n) to a list of strings, where each string in the list corresponds to a line in the original text. In Python you could use the \`splitlines()\` method, but I need to implement this myself without using any built-in functions. **Here's what I have so far:** \`\`\`python def split_string(text): lines = [] current_line = \\"\\" for char in text: if char == 'n': lines.append(current_line) current_line = \\"\\" else: current_line += char if current_line: lines.append(current_line) return lines \`\`\` **Can you explain how this code works and if there are any potential issues with it?","solution":"def split_string(text): Splits the input text into a list of lines, handling line breaks manually. :param text: The input string containing newline characters. :return: A list of lines as strings. lines = [] current_line = \\"\\" for char in text: if char == 'n': lines.append(current_line) current_line = \\"\\" else: current_line += char if current_line: lines.append(current_line) return lines"},{"question":"You are given an array of integers \`nums\` where each element represents the number of chocolates a child has. Your task is to distribute the chocolates in the following rule: 1. Start from the beginning of the array (index 0) 2. For each child, compare their chocolates with the preceding child's chocolates. 3. If a child has fewer chocolates than their preceding child, give them enough chocolates to have one more than the preceding child. Example: Input: \`\`\`python nums = [1, 2, 2, 1, 3] \`\`\` Output: \`\`\`python [2, 2, 3, 3, 3] \`\`\` Explanation: – At index 0, the child has 1 chocolate. The preceding child doesn't exist, so move to the next child. – At index 1, the child has 2 chocolates, which is more than the preceding child (none), so move to the next child. – At index 2, the child has 2 chocolates, the same as the preceding child. Move to the next child. – At index 3, the child has 1 chocolate, which is less than the preceding child (2). You give the child 2 more chocolates, resulting in 3 chocolates for the current child. – At index 4, the child has 3 chocolates, which is more than the preceding child (3), so move to the next child. Code: \`\`\`python def distribute_chocolates(nums): for i in range(1, len(nums)): if nums[i] > nums[i-1] or nums[i] == nums[i-1]: continue elif nums[i] < nums[i-1]: nums[i] = nums[i-1] + 1 return nums nums = [1, 2, 2, 1, 3] result = distribute_chocolates(nums) print(result) \`\`\` This code seems to work, can you improve it?","solution":"def distribute_chocolates(nums): Distribute chocolates to children based on the given rules. for i in range(1, len(nums)): if nums[i] < nums[i-1]: nums[i] = nums[i-1] + 1 return nums # Example usage nums = [1, 2, 2, 1, 3] result = distribute_chocolates(nums) print(result)"},{"question":"These are the instructions I've been given: **Instructions:** The goal of this exercise is to understand how different programming paradigms influence the structure and style of code. You'll implement a simple sorting algorithm (Bubble Sort) using two different paradigms: Imperative and Functional. **Deliverables:** * Two implementations of the Bubble Sort Algorithm: * **Imperative:** Using explicit looping constructs (for/while) and mutable data structures. * **Functional:** Using recursion and immutable data structures. Now, can you provide me with examples of both Imperative and Functional implementations of the Bubble Sort algorithm in Python?","solution":"def bubble_sort_imperative(arr): Perform bubble sort in an imperative style. It modifies the input list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def bubble_sort_functional(arr): Perform bubble sort in a functional style. It returns a new sorted list. def sort_pass(arr): n = len(arr) if n <= 1: return arr rest_sorted, max_elem = sort_pass(arr[:-1]), arr[-1] for i in range(len(rest_sorted)): if max_elem < rest_sorted[i]: rest_sorted.insert(i, max_elem) return rest_sorted rest_sorted.append(max_elem) return rest_sorted is_sorted = False while not is_sorted: new_arr = sort_pass(arr) is_sorted = new_arr == arr arr = new_arr return arr"},{"question":"This is a code snippet in Python that seems to perform a bit manipulation and calculation. Can anyone explain what this code does step by step, specifically the meaning of & and >> in this context?","solution":"def bit_manipulation(x, y): Performs a bitwise AND operation between x and y, then right-shifts the result by 2 positions. return (x & y) >> 2"},{"question":"The following code snippet defines a function called 'add' that takes two arguments: a list 'nums' and a number 'target'. The function aims to find two numbers within the 'nums' list that sum up to the 'target' value. If such a pair is found, the function returns their indices. Otherwise, it returns None.","solution":"def find_two_sum(nums, target): Returns the indices of the two numbers in the list 'nums' that add up to 'target'. If no such numbers exist, returns None. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return None"},{"question":"I'm working on a project where I need to find all the lines in a text file that start with a specific keyword. \`\`\`python def find_lines(filename, keyword): This function finds all lines in a text file that start with a specific keyword. Args: filename (str): The name of the text file. keyword (str): The keyword to search for at the beginning of lines. Returns: list: A list of lines that start with the keyword, each line is without the keyword. \`\`\` I started writing the function, but I'm struggling to complete the part where I need to read each line of the file and check if it starts with the keyword. Could you please help me complete this function?","solution":"def find_lines(filename, keyword): This function finds all lines in a text file that start with a specific keyword. Args: filename (str): The name of the text file. keyword (str): The keyword to search for at the beginning of lines. Returns: list: A list of lines that start with the keyword, each line is trimmed of the keyword. matching_lines = [] with open(filename, 'r') as file: for line in file: if line.startswith(keyword): # Append the line without the keyword matching_lines.append(line[len(keyword):].strip()) return matching_lines"},{"question":"A user wants to know if a particular email address is valid. Requirement: Write a Python function \`is_valid_email(email)\` that takes an email address as input and returns \`True\` if the email address is valid, \`False\` otherwise. Note: For simplicity, we will consider an email address to be valid if it contains an \\"@\\" symbol and a \\".\\" symbol. \`\`\`python def is_valid_email(email): Checks if an email address is valid. Args: email: The email address to check. Returns: True if the email address is valid, False otherwise. if \\"@\\" in email and \\".\\" in email: return True return False \`\`\` Explanation: The function first checks if the \\"@\\" symbol and the \\".\\" symbol are present in the email address using the \`in\` operator. If both symbols are present, it returns \`True\`, indicating a possibly valid email address. Otherwise, it returns \`False\`, indicating an invalid email address. \`\`\`python # Example usage email1 = \\"john.doe@example.com\\" email2 = \\"invalid.email\\" print(f\\"Is '{email1}' valid?","solution":"def is_valid_email(email): Checks if an email address is valid. Args: email: The email address to check. Returns: True if the email address is valid, False otherwise. if \\"@\\" in email and \\".\\" in email: return True return False"},{"question":"This is the prompt: Design a \\"Guess the Number\\" game. **Functionality:** 1. The game chooses a random number between 1 and 100. 2. The player has to guess the number within a limited number of attempts (e.g., 7 attempts). 3. After each guess, the game provides feedback: * \\"Too high!\\" if the guess is higher than the secret number. * \\"Too low!\\" if the guess is lower than the secret number. * \\"Congratulations! You guessed the number in [number of attempts] attempts.\\" if the guess is correct. **Additional Considerations:** * Include error handling for invalid input (e.g., non-numeric input). * Allow the player to play again. Here is my code: \`\`\`python import random def guess_the_number(): Plays a number guessing game with the user. number = random.randint(1, 100) attempts = 7 print(\\"Welcome to Guess the Number!\\") print(\\"I'm thinking of a number between 1 and 100.\\") while attempts > 0: try: guess = int(input(\\"You have {} attempts left. Take a guess: \\".format(attempts))) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue if guess < number: print(\\"Too low!\\") elif guess > number: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {7 - attempts + 1} attempts.\\") return attempts -= 1 print(f\\"You ran out of attempts. The number was {number}.\\") while True: guess_the_number() play_again = input(\\"Play again?","solution":"import random def guess_the_number(): Plays a number guessing game with the user. number = random.randint(1, 100) attempts = 7 print(\\"Welcome to Guess the Number!\\") print(\\"I'm thinking of a number between 1 and 100.\\") while attempts > 0: try: guess = int(input(\\"You have {} attempts left. Take a guess: \\".format(attempts))) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue if guess < number: print(\\"Too low!\\") elif guess > number: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {7 - attempts + 1} attempts.\\") return attempts -= 1 print(f\\"You ran out of attempts. The number was {number}.\\") if __name__ == \\"__main__\\": while True: guess_the_number() play_again = input(\\"Play again? (y/n): \\") if play_again.lower() != 'y': break"},{"question":"For a project, we need to create a Python program that analyzes text and calculates its readability score using the Flesch-Kincaid Reading Ease formula. \`\`\`python def calculate_flesch_kincaid(text): Calculates the Flesch-Kincaid Reading Ease score for a given text. Args: text: The text to analyze. Returns: The Flesch-Kincaid Reading Ease score as a float. # TODO: Implement the Flesch-Kincaid reading ease formula pass \`\`\` Can someone help me with the implementation of the Flesch-Kincaid Reading Ease formula in the \`calculate_flesch_kincaid\` function?","solution":"import re def calculate_flesch_kincaid(text): Calculates the Flesch-Kincaid Reading Ease score for a given text. Args: text: The text to analyze. Returns: The Flesch-Kincaid Reading Ease score as a float. def count_syllables(word): word = word.lower() vowels = \\"aeiouy\\" syllables = 0 if word[0] in vowels: syllables += 1 for index in range(1, len(word)): if word[index] in vowels and word[index - 1] not in vowels: syllables += 1 if word.endswith(\\"e\\"): syllables -= 1 if word.endswith(\\"le\\") and len(word) > 2 and word[-3] not in vowels: syllables += 1 if syllables == 0: syllables += 1 return syllables words = re.findall(r'w+', text) num_words = len(words) num_syllables = sum(count_syllables(word) for word in words) num_sentences = len(re.findall(r'[.!?]', text)) if num_words == 0 or num_sentences == 0: return 0.0 asl = num_words / num_sentences asw = num_syllables / num_words flesch_kincaid_score = 206.835 - (1.015 * asl) - (84.6 * asw) return round(flesch_kincaid_score, 2)"},{"question":"You need to determine if a given binary string represents a valid palindrome. Input: A binary string (consisting of only '0's and '1's). Output: \\"Valid Palindrome\\" if the string reads the same backward as forward; otherwise, \\"Not a Palindrome\\". Example: \`\`\` Input: 10101 Output: Valid Palindrome Input: 10010 Output: Valid Palindrome Input: 110011 Output: Valid Palindrome Input: 1010 Output: Not a Palindrome \`\`\` Can you write a Python code to solve this problem?","solution":"def is_valid_palindrome(binary_string): Returns \\"Valid Palindrome\\" if the binary string is a valid palindrome. Otherwise, returns \\"Not a Palindrome\\". binary_string = binary_string.strip() if binary_string == binary_string[::-1]: return \\"Valid Palindrome\\" else: return \\"Not a Palindrome\\""},{"question":"The following problem states: **Design and Implement a program that reads a user input text and searches for all occurrences of predefined keywords within the text.** Here's an outline of the implemented Python program: \`\`\`python","solution":"def find_keywords(text, keywords): This function searches for all occurrences of predefined keywords in the given text. Parameters: text (str): The input text to search within. keywords (list): A list of keywords to search for in the text. Returns: dict: A dictionary with keywords as keys and the number of occurrences as values. result = {keyword: text.lower().count(keyword.lower()) for keyword in keywords} return result"},{"question":"This is a coding assignment, where I need to implement a program that simulates a game of \\"Guess the Number\\". The program should choose a random number between 1 and 100. The player has to guess the number, and the program provides feedback on whether the guess is too high or too low. The game continues until the player guesses the correct number. The program should also track the number of guesses it takes the player to win. Here's a sample interaction: \`\`\` I'm thinking of a number between 1 and 100. Try to guess it! Enter your guess: 50 Too high! Enter your guess: 25 Too low! Enter your guess: 37 Too high! Enter your guess: 31 Correct! You guessed the number in 4 tries. \`\`\` Can you help me with the Python code?","solution":"import random def guess_the_number(): number_to_guess = random.randint(1, 100) guess_count = 0 correct_guess = False print(\\"I'm thinking of a number between 1 and 100. Try to guess it!\\") while not correct_guess: try: guess = int(input(\\"Enter your guess: \\")) guess_count += 1 if guess < number_to_guess: print(\\"Too low!\\") elif guess > number_to_guess: print(\\"Too high!\\") else: correct_guess = True print(f\\"Correct! You guessed the number in {guess_count} tries.\\") except ValueError: print(\\"Please enter a valid number.\\")"},{"question":"This is a coding challenge question I found online. \`\`\`python def max_area(height): Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. For example: max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49 pass \`\`\` Could you provide a solution to the code challenge?","solution":"def max_area(height): Given n non-negative integers representing an elevation map where the width of each bar is 1, compute the maximum area of water that can be contained between two bars. For example: max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49 left, right = 0, len(height) - 1 max_area = 0 while left < right: width = right - left current_area = min(height[left], height[right]) * width max_area = max(max_area, current_area) if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"This is a task for you. You are given a string, \\"abcde\\". Your task is to find all the possible palindromic substrings within \\"abcde\\". A palindrome is a word, phrase, or sequence that reads the same backward as forward. Here are the palindromic substrings of \\"abcde\\": a b c d e aa bb cc dd ee aba aca ada These are all possible palindromic substrings within \\"abcde\\". Can you write a Python code to achieve this?","solution":"def find_palindromic_substrings(s): Finds all palindromic substrings in the given string \`s\`. :param s: Input string in which to find palindromic substrings :return: A set of all palindromic substrings in \`s\` n = len(s) palindromic_substrings = set() for i in range(n): # Find odd length palindromes with center i expand_around_center(s, i, i, palindromic_substrings) # Find even length palindromes with center between i and i+1 expand_around_center(s, i, i + 1, palindromic_substrings) return palindromic_substrings def expand_around_center(s, left, right, palindromic_substrings): Helper function to expand around the center and find all palindromes. :param s: Input string :param left: Left index :param right: Right index :param palindromic_substrings: A set that stores found palindromic substrings while left >= 0 and right < len(s) and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1"},{"question":"You are given an array of integers \`nums\` and an integer \`target\`. Please return the indices of the two numbers such that they add up to \`target\`. Assumptions: Each input \`nums\` will have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` Example 2: \`\`\` Input: nums = [3,2,4], target = 6 Output: [1,2] \`\`\` Example 3: \`\`\` Input: nums = [3,3], target = 6 Output: [0,1] \`\`\` Explanation: You can solve this problem efficiently in O(n) time using a hash map. 1. Create a Hash Map: Store each element in \`nums\` as a key and its index as the value. 2. Iterate through \`nums\`: For each element \`num\` at index \`i\`: Calculate \`complement = target - num\`. Check if \`complement\` exists in the hash map. If yes: return the indices \`i\` and the index of \`complement\` from the hash map. If no: add \`num\` with index \`i\` to the hash map. Could you provide a Python implementation for this solution?","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. :param nums: List of integers :param target: Target integer sum :return: List of two integer indices hash_map = {} for i, num in enumerate(nums): complement = target - num if complement in hash_map: return [hash_map[complement], i] hash_map[num] = i"},{"question":"Here's a few problems I'm getting stuck on for my Python assignment: **Problem 1:** Write a function called \`get_length_of_longest_word\` that takes a string as input (representing a sentence) and returns the length of the longest word in the sentence. Here are some examples: \`\`\`python get_length_of_longest_word(\\"This is a sentence\\") == 7 get_length_of_longest_word(\\"A very long sentence indeed\\") == 6 get_length_of_longest_word(\\"A very long sentence with a superlongword\\") == 14 \`\`\` **Problem 2:** Write a function called \`reverse_string\` that takes a string as input and returns the same string reversed. Here are some examples: \`\`\`python reverse_string(\\"hello\\") == \\"olleh\\" reverse_string(\\"world\\") == \\"dlrow\\" reverse_string(\\"Python\\") == \\"nohtyP\\" \`\`\` **Problem 3:** Write a function called \`is_palindrome\` that takes a string as input and returns True if the string is a palindrome (reads the same backwards as forwards) and False otherwise. Here are some examples: \`\`\`python is_palindrome(\\"racecar\\") == True is_palindrome(\\"madam\\") == True is_palindrome(\\"apple\\") == False \`\`\` I'm pretty new to Python and would really appreciate any help you can give me. \`\`\`python def get_length_of_longest_word(sentence): This function takes a sentence as input and returns the length of the longest word. Args: sentence: A string representing a sentence. Returns: An integer representing the length of the longest word in the sentence.","solution":"def get_length_of_longest_word(sentence): This function takes a sentence as input and returns the length of the longest word. Args: sentence: A string representing a sentence. Returns: An integer representing the length of the longest word in the sentence. words = sentence.split() if not words: return 0 longest_word = max(words, key=len) return len(longest_word) def reverse_string(s): This function takes a string as input and returns the same string reversed. Args: s: A string to be reversed. Returns: A string which is the reverse of the input. return s[::-1] def is_palindrome(s): This function takes a string as input and returns True if the string is a palindrome and False otherwise. Args: s: A string to be checked for palindrome. Returns: A boolean indicating if the string is a palindrome. return s == s[::-1]"},{"question":"You are presented with a text file containing a collection of words. Your task is to write a program that identifies the palindromes within the text file and outputs them to the console.","solution":"def is_palindrome(word): Checks if a given word is a palindrome. return word == word[::-1] def find_palindromes_in_file(file_path): Reads a text file and prints all palindrome words found in it. with open(file_path, 'r') as file: words = file.read().split() palindromes = [word for word in words if is_palindrome(word)] for palindrome in palindromes: print(palindrome) # Example usage: # find_palindromes_in_file('sample.txt')"},{"question":"Input: - A list of integers, - An integer, \`target\` (the target difference) Output: - A boolean value (\`True\` if there is a pair of integers in the list whose difference is equal to \`target\`, otherwise \`False\`) Example: Let's say the input list is \`[1, 3, 5, 7, 9]\` and the \`target\` is \`4\`. 1. Pair \`(5, 1)\` satisfies the condition as \`5 - 1 = 4\`. Therefore, the output will be \`True\`. Requirement: Implement the solution using a single loop. \`\`\`python def has_pair_with_difference(nums, target): Checks if there is a pair of integers in a list whose difference is equal to a given target. Args: nums: A list of integers. target: The target difference. Returns: True if there is a pair with the target difference, False otherwise. # Your code here \`\`\` Further Considerations: - Can you implement the solution with a better time complexity than O(n^2)?","solution":"def has_pair_with_difference(nums, target): Checks if there is a pair of integers in a list whose difference is equal to a given target. Args: nums: A list of integers. target: The target difference. Returns: True if there is a pair with the target difference, False otherwise. nums_set = set(nums) # Using a set for O(1) average time complexity lookups for num in nums: if (num + target) in nums_set or (num - target) in nums_set: return True return False"},{"question":"I need a help writing a Python script that takes a CSV file as input and outputs another CSV file containing only the unique values from each column.","solution":"import csv def extract_unique_values(input_file, output_file): Reads a CSV file, extracts unique values from each column, and writes them to another CSV file. Parameters: - input_file (str): Path to the input CSV file. - output_file (str): Path to the output CSV file. unique_values = {} # Read the input CSV file and collect unique values for each column with open(input_file, mode='r', newline='') as csv_file: reader = csv.DictReader(csv_file) for row in reader: for key, value in row.items(): if key not in unique_values: unique_values[key] = set() unique_values[key].add(value) # Write unique values to the output CSV file with open(output_file, mode='w', newline='') as csv_file: writer = csv.DictWriter(csv_file, fieldnames=unique_values.keys()) writer.writeheader() max_len = max(len(values) for values in unique_values.values()) for i in range(max_len): row = {key: list(values)[i] if i < len(values) else \\"\\" for key, values in unique_values.items()} writer.writerow(row)"},{"question":"This is a problem from Project Euler: You are given a list of numbers, say \`[1, 2, 3, 4, 5]\`. Find the sum of pairwise products of these numbers. Here's what I have so far: \`\`\`python def pairwise_sum(numbers): total = 0 for i in range(len(numbers)): for j in range(i + 1, len(numbers)): total += numbers[i] * numbers[j] return total \`\`\` **Explain what this code is doing?","solution":"def pairwise_sum(numbers): Returns the sum of the products of all unique pairs in the list \`numbers\`. total = 0 for i in range(len(numbers)): for j in range(i + 1, len(numbers)): total += numbers[i] * numbers[j] return total"},{"question":"This is **Problem Statement:** You have a grid with M rows and N columns. Each cell in the grid initially has a value of 0. You will receive T queries. Each query has the following format: - **Type:** \\"H\\" or \\"V\\". - **Value:** An integer R for horizontal queries (\\"H\\") or C for vertical queries (\\"V\\"). - **Start:** An integer S which indicates the starting index for the query. **For horizontal queries (\\"H\\"):** - Set all cells in row R to the value of the query 'Value'. - The grid index starts from 1, so row 1 is the topmost row and row M is the bottommost row. **For vertical queries (\\"V\\"):** - Set all cells in column C to the value of the query 'Value'. - The grid index starts from 1, so column 1 is the leftmost column and column N is the rightmost column. **After performing all queries, print the grid.** # **Input:** The first line contains three integers: M, N, and T, representing the number of rows, number of columns, and the number of queries, respectively. The following T lines contain each query in the format described above. # **Output:** Print the grid after all queries are processed. Each row of the grid should be printed in a separate line, with the values of each cell separated by a space. Let me know if you need me to illustrate with an example. **Can you write the Python code for this problem?","solution":"def process_grid_queries(M, N, T, queries): Processes the grid based on the given queries and returns the final grid. Parameters: M (int): Number of rows in the grid. N (int): Number of columns in the grid. T (int): Number of queries. queries (list of tuples): List of queries in the format (Type, Value, Start). Returns: list of list of int: The final grid after processing all queries. # Initialize the grid with all zeros grid = [[0] * N for _ in range(M)] for query in queries: q_type, value, start = query if q_type == \\"H\\": row = start - 1 # Convert to zero-indexed grid[row] = [value] * N elif q_type == \\"V\\": col = start - 1 # Convert to zero-indexed for i in range(M): grid[i][col] = value return grid"},{"question":"You are given a set of parentheses \\"(\\" and \\")\\" (and possibly other characters). You need to find a sub-string consisting only of balanced parentheses. **Note:** * The parentheses are considered balanced if they have matching opening and closing parentheses, starting with an opening parenthesis \\"(\\" followed by either another open parenthesis, a non-parenthesis character, or a closing parenthesis that matches the immediate last open parenthesis. * Example: **(abc) )** → (abc) is a balanced substring **Input:** \`\`\`txt \\"()(()\\" \`\`\` **Output:** \`\`\`txt \\"()()\\" \`\`\` How to approach the problem?","solution":"def find_balanced_parentheses_substr(s): Given a string s, returns the longest balanced parentheses substring. :param s: Input string containing parentheses and possibly other characters. :return: A substring with balanced parentheses. stack = [] last_index = -1 max_len = 0 result = \\"\\" for i, char in enumerate(s): if char == '(': stack.append(i) elif char == ')': if stack: start = stack.pop() length = i - start + 1 if length > max_len: max_len = length result = s[start:i + 1] else: last_index = i else: continue return result"},{"question":"We are given a string sequence of the form \`\`\` ab*c* \`\`\` where \\"*\\" indicates a wildcard character that can represent any single character. We want to find all the string sequences that match this pattern. Here are some examples: * **Matching strings:** * \\"abc\\" * \\"abd\\" * \\"abe\\" * \\"abf\\" etc * **Non-matching strings:** * \\"abbc\\" (extra b) * \\"ac\\" (missing b) * \\"xab\\" (x does not match a) Now, we want to write a function in Python called \`match_pattern(text, pattern)\` which 1. Takes two arguments: - \`text\`: The text string to check - \`pattern\`: The pattern string with \\"*\\" wildcards 2. Returns \`True\` if the text matches the pattern, \`False\` otherwise. Can you provide the python code for this function and explain it step-by-step?","solution":"def match_pattern(text, pattern): Returns True if the text matches the pattern where '*' can be any single character, False otherwise. if len(text) != len(pattern): return False for t_char, p_char in zip(text, pattern): if p_char != '*' and t_char != p_char: return False return True # Example Usage: # print(match_pattern(\\"abc\\", \\"ab*c*\\")) # should return True"},{"question":"Assignment: Please create a text-based adventure game using Python. This game will be a basic game about a player exploring a mysterious island. Specific Requirements: The game should have a clear objective: find a hidden treasure chest. There should be at least 3 different locations the player can visit. There should be at least two puzzles the player must solve to progress. The game should end when the player finds the treasure chest or gives up. Example Gameplay: \`\`\` You awake on a sandy beach. You don't know how you got here. What do you do?","solution":"def game(): print(\\"You awake on a sandy beach. You don't know how you got here.\\") has_key = False solved_puzzle_1 = False solved_puzzle_2 = False while True: print(\\"nWhere do you want to go?\\") print(\\"1. Explore the forest\\") print(\\"2. Examine the old hut\\") print(\\"3. Search the beach\\") print(\\"4. Give up\\") choice = input(\\"Enter the number of your choice: \\") if choice == '1': if not solved_puzzle_1: print(\\"nYou enter the forest and come across a locked chest with a combination lock.\\") while True: answer = input(\\"What is 5 + 3? \\") if answer == '8': print(\\"You solved the puzzle and found a key inside the chest.\\") has_key = True solved_puzzle_1 = True break else: print(\\"Incorrect. Try again.\\") else: print(\\"nYou already solved the puzzle here.\\") elif choice == '2': if has_key and not solved_puzzle_2: print(\\"nYou enter the old hut and find another locked chest.\\") while True: answer = input(\\"What is 10 - 7? \\") if answer == '3': print(\\"You solved the puzzle and found the hidden treasure chest.\\") solved_puzzle_2 = True print(\\"Congratulations! You found the treasure.\\") return else: print(\\"Incorrect. Try again.\\") else: if has_key: print(\\"nYou already solved the puzzle here.\\") else: print(\\"nThe chest is locked. You need to find a key first.\\") elif choice == '3': print(\\"nYou search the beach but find nothing of interest.\\") elif choice == '4': print(\\"You gave up. The game is over.\\") return else: print(\\"Invalid choice. Please try again.\\")"},{"question":"For example: * Input: \\"hello world\\" * Expected Output: \\"olleH dlrow\\" Let's build a Python function to reverse a string. \`\`\`python def reverse_string(text): Reverses a given string. Args: text: The string to be reversed. Returns: The reversed string. return text[::-1]","solution":"def reverse_words_in_string(s): Reverses each word in the given string while maintaining word order. Args: s: The string with words to be reversed. Returns: A new string with each word reversed. words = s.split() reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"This is a coding challenge called \\"Pair Sum\\": Given an array of integers \`nums\` and an integer \`target\`, return \`true\` if there are two numbers in \`nums\` that add up to \`target\`, otherwise \`return false\`. You are not allowed to modify the array. **Example:** \`\`\` Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: Since nums[0] + nums[1] == 9, we return true. Input: nums = [3, 2, 4], target = 6 Output: true Input: nums = [3, 3], target = 6 Output: true \`\`\` My thought process: 1. **Iteration:** We need to iterate over the array \`nums\`. For each element \`nums[i]\`, **Complementary Element:** Find if there exists a \`nums[j]\` (where \`j != i\`) such that \`nums[i] + nums[j] == target\`. **Data Structures:** - Since we can't modify the array, and we're checking complements, a set (like a hash table in other languages) would be ideal for efficient \`O(1)\` lookup. \`\`\`python def has_pair_with_sum(nums, target): seen = set()","solution":"def has_pair_with_sum(nums, target): Checks if there are two numbers in the nums array that add up to the target. :param nums: List of integers :param target: Integer target sum :return: True if a pair with the sum exists, False otherwise seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"This file contains information about the number of students who enrolled in each course. We want to create a new file named \\"enrolled.txt\\" and store the student enrollments information in ascending order by course number. The input file name is \\"course.txt\\". \`\`\` Sample Input File content (course.txt): CS101 30 CS102 25 CS201 40 CS103 35 Sample Output File content (enrolled.txt): CS101 30 CS102 25 CS103 35 CS201 40 \`\`\` Here's my Python code \`\`\`python def sort_enrollments(): Reads student enrollment data from 'course.txt' and writes it to 'enrolled.txt' in ascending order by course number. try: with open(\\"course.txt\\", \\"r\\") as input_file, open(\\"enrolled.txt\\", \\"w\\") as output_file: data = input_file.readlines() data.sort() # Sorts based on the whole line (course number + enrollment) output_file.writelines(data) print(\\"Enrollments sorted and written to 'enrolled.txt'\\") except FileNotFoundError: print(\\"Error: 'course.txt' not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\") if __name__ == \\"__main__\\": sort_enrollments() \`\`\` This code successfully creates the \\"enrolled.txt\\" file and writes the data in the desired order. Can someone provide insights and suggestions on how to enhance the readability, efficiency, or potential issues?","solution":"def sort_enrollments(input_filename=\\"course.txt\\", output_filename=\\"enrolled.txt\\"): Reads student enrollment data from 'course.txt' and writes it to 'enrolled.txt' in ascending order by course number. try: with open(input_filename, \\"r\\") as input_file: data = input_file.readlines() # Sorting based on course number which is the first part of each line data.sort(key=lambda line: line.split()[0]) with open(output_filename, \\"w\\") as output_file: output_file.writelines(data) print(f\\"Enrollments sorted and written to '{output_filename}'\\") except FileNotFoundError: print(f\\"Error: '{input_filename}' not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\") if __name__ == \\"__main__\\": sort_enrollments()"},{"question":"This is the code I have so far for my simple text-based adventure game: The player must choose between 3 rooms to enter. Then each room has a description and a set of options. I would like to add a health system, damage, and also a death scenario. Health System: - Player starts with 100 health. - Each room can inflict damage based on user choice. - When player's health reaches 0, player dies and the game ends. Example: \`\`\`python def room1(): print(\\"You enter a dusty room. Cobwebs hang from the ceiling...\\") choice = input(\\"Do you [inspect] the cobwebs or [ignore] them?","solution":"class Game: def __init__(self): self.health = 100 def take_damage(self, damage): self.health -= damage print(f\\"You took {damage} damage. Health is now {self.health}.\\") def check_health(self): if self.health <= 0: print(\\"You have died. Game Over.\\") return False return True def room1(self): print(\\"You enter a dusty room. Cobwebs hang from the ceiling...\\") choice = input(\\"Do you [inspect] the cobwebs or [ignore] them? \\") if choice == \\"inspect\\": print(\\"A spider bites you!\\") self.take_damage(20) elif choice == \\"ignore\\": print(\\"You ignore the cobwebs and move on.\\") else: print(\\"Invalid choice.\\") return self.check_health() def room2(self): print(\\"You enter a dimly lit room. There is a strange noise coming from a corner...\\") choice = input(\\"Do you [investigate] the noise or [stay] where you are? \\") if choice == \\"investigate\\": print(\\"A ghost appears and scares you!\\") self.take_damage(30) elif choice == \\"stay\\": print(\\"You stay put and nothing happens.\\") else: print(\\"Invalid choice.\\") return self.check_health() def room3(self): print(\\"You enter a bright room. There's a chest in the middle...\\") choice = input(\\"Do you [open] the chest or [ignore] it? \\") if choice == \\"open\\": print(\\"The chest explodes!\\") self.take_damage(50) elif choice == \\"ignore\\": print(\\"You ignore the chest and move on.\\") else: print(\\"Invalid choice.\\") return self.check_health() def start_game(): game = Game() rooms = [game.room1, game.room2, game.room3] while True: room_choice = input(\\"Choose a room to enter (1, 2, or 3): \\") if room_choice in [\\"1\\", \\"2\\", \\"3\\"]: room = rooms[int(room_choice) - 1] if not room(): break else: print(\\"Invalid room choice.\\") if __name__ == \\"__main__\\": start_game()"},{"question":"You are given an array of integers and a target sum. You need to determine if there are two numbers in the array that add up to the target sum. Example: \`\`\` Input array: [2, 7, 11, 15] Target sum: 9 Output: True (because 2 + 7 = 9) Input array: [3, 2, 4] Target sum: 6 Output: True (because 2 + 4 = 6) Input array: [1, 2, 3, 4, 5] Target sum: 10 Output: True (because 3 + 7 = 10) Input array: [1, 2, 3 , 4, 5] Target sum: 8 Output: False \`\`\` Can you provide a Python code solution using the Hash Table (Dictionary) approach?","solution":"def has_pair_with_sum(arr, target_sum): Returns True if there are two numbers in the array that add up to the target_sum, otherwise returns False. seen_numbers = {} for number in arr: complement = target_sum - number if complement in seen_numbers: return True seen_numbers[number] = True return False"},{"question":"The following problem is: You are given an array of integers \`nums\` and an integer \`target\`. You need to find the **three** numbers in \`nums\` that add up to the \`target\`, and return them in an array. You may assume that each input would have exactly one solution, and you may not use the same element twice. Can you provide me with a solution in Python?","solution":"def three_sum(nums, target): Find three numbers in nums that add up to the target. Args: nums (list): A list of integers. target (int): An integer target sum. Returns: list: A list containing three integers that sum up to the target. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return [nums[i], nums[left], nums[right]] elif current_sum < target: left += 1 else: right -= 1 return [] # Although the problem guarantees one solution, this is a safeguard."},{"question":"I am trying to build a basic chat bot which can respond to greetings, farewells, and questions about the user's name. Here is the code I have so far: \`\`\`python # Greeting responses greetings = [\\"Hello!\\", \\"Hi there!\\", \\"Hey!\\"] # Farewell responses farewells = [\\"Goodbye!\\", \\"See you later!\\", \\"Take care!\\"] # Function to get a random response from a list def get_random_response(responses): import random return random.choice(responses) # Main chatbot loop while True: user_input = input(\\"You: \\") user_input = user_input.lower() # Responding to greetings if user_input in [\\"hello\\", \\"hi\\", \\"hey\\"]: print(\\"Bot: \\" + get_random_response(greetings)) # Responding to farewells else if user_input in [\\"goodbye\\", \\"bye\\", \\"see you later\\"]: print(\\"Bot: \\" + get_random_response(farewells)) # Responding to questions about name elif \\"name\\" in user_input: print(\\"Bot: My name is ChatBot.\\") \`\`\` This code is functional but I'd like to: 1. **Improve Name Question Handling:** * Make the bot ask for the user's name if they inquire about it. * Remember the user's name for future interactions. 2. **Add More Features:** * Implement basic question handling about the bot itself (e.g., \\"How are you?","solution":"import random # Greeting responses greetings = [\\"Hello!\\", \\"Hi there!\\", \\"Hey!\\"] # Farewell responses farewells = [\\"Goodbye!\\", \\"See you later!\\", \\"Take care!\\"] # Basic responses about the bot itself bot_responses = { \\"how are you\\": \\"I'm just a bot, but I'm functioning as expected!\\", \\"what are you\\": \\"I'm a basic chat bot created to interact with you!\\" } # Function to get a random response from a list def get_random_response(responses): return random.choice(responses) # Main chatbot function def chatbot(): user_name = None while True: user_input = input(\\"You: \\") user_input = user_input.lower() # Responding to greetings if user_input in [\\"hello\\", \\"hi\\", \\"hey\\"]: print(\\"Bot: \\" + get_random_response(greetings)) # Responding to farewells elif user_input in [\\"goodbye\\", \\"bye\\", \\"see you later\\"]: print(\\"Bot: \\" + get_random_response(farewells)) break # Responding to questions about user's name elif \\"name\\" in user_input: if user_name is None: print(\\"Bot: What is your name?\\") user_name = input(\\"You: \\") print(f\\"Bot: Nice to meet you, {user_name}!\\") else: print(f\\"Bot: Your name is {user_name}.\\") # Responding to basic questions about the bot elif user_input in bot_responses: print(f\\"Bot: {bot_responses[user_input]}\\") # Default response for unrecognized inputs else: print(\\"Bot: I'm not sure how to respond to that.\\")"},{"question":"Here's a fun coding challenge I came across: Implement a function that takes an array of integers as input and returns the pair of elements that have the smallest difference between them. For example: \`\`\` smallest_difference([1, 5, 3, 19, 18, 25]) = (18, 19) \`\`\` **My Thoughts:** - I want to make the solution efficient. Sorting the array beforehand seems like a smart move. **Could you guide me through implementing this in Python?** Let's tackle this! Here's how you can implement the smallest difference finder in Python: \`\`\`python def smallest_difference(nums): Finds the pair of elements in an array that have the smallest difference. Args: nums: A list of integers. Returns: A tuple containing the pair with the smallest difference. nums.sort()","solution":"def smallest_difference(nums): Finds the pair of elements in an array that have the smallest difference. Args: nums: A list of integers. Returns: A tuple containing the pair with the smallest difference. if len(nums) < 2: return None nums.sort() min_diff = float('inf') min_pair = (nums[0], nums[1]) for i in range(len(nums) - 1): diff = nums[i+1] - nums[i] if diff < min_diff: min_diff = diff min_pair = (nums[i], nums[i+1]) return min_pair"},{"question":"Objective: To implement a basic text-based adventure game using Python. Requirements: - The game should: - Present the player with a description of their current location. - Offer a set of choices (i.e., go north, go south, examine object). - Process player input and update the game state accordingly. - Respond with consequences based on player choices. Structure: The game can be structured using: - Variables to store game state information (e.g., current location, inventory). - Functions to handle different actions (e.g., move(), examine(), take() ). - Dictionaries or lists to represent locations and their connected exits. Example Implementation: \`\`\`python current_location = \\"Living Room\\" inventory = [] locations = { \\"Living Room\\": {\\"north\\": \\"Kitchen\\", \\"south\\": \\"Basement\\"}, \\"Kitchen\\": {\\"south\\": \\"Living Room\\"}, \\"Basement\\": {\\"north\\": \\"Living Room\\"} } def move(direction): global current_location if direction in locations[current_location]: current_location = locations[current_location][direction] print(f\\"You are now in the {current_location}.n\\") else: print(\\"You cannot go that way.n\\") # Sample gameplay loop while True: # Describe current location print(f\\"You are in the {current_location}.n\\") # Present choices if current_location == \\"Living Room\\": print(\\"You can go north or south.n\\") choice = input(\\"What do you want to do?","solution":"current_location = \\"Living Room\\" inventory = [] locations = { \\"Living Room\\": {\\"north\\": \\"Kitchen\\", \\"south\\": \\"Basement\\"}, \\"Kitchen\\": {\\"south\\": \\"Living Room\\"}, \\"Basement\\": {\\"north\\": \\"Living Room\\"} } def move(direction): Move the player in the specified direction if possible. Parameters: direction (str): The direction in which to move. Returns: str: The new location or an error message if the move is invalid. global current_location if direction in locations[current_location]: current_location = locations[current_location][direction] return f\\"You are now in the {current_location}.\\" else: return \\"You cannot go that way.\\" def get_current_location(): Get the player's current location. Returns: str: The current location. return current_location"},{"question":"The following is a problem description: There are N houses and N wells. A water connection is planned to be laid between each house and a well. The houses and wells are given as points in a 2D plane, with coordinates (x, y). Write a python function which takes a list of house coordinates and a list of well coordinates and returns the minimum total distance of connections. Your function should use a greedy approach. **Note:** Each house should be connected to exactly one well and each well should be connected to exactly one house. Here's my attempt: \`\`\`python import math def min_total_distance(houses, wells): Calculates the minimum total distance of water connections between houses and wells using a greedy approach. Args: houses: A list of tuples, where each tuple represents the (x, y) coordinates of a house. wells: A list of tuples, where each tuple represents the (x, y) coordinates of a well. Returns: The minimum total distance of connections. distances = []","solution":"import math def min_total_distance(houses, wells): Calculates the minimum total distance of water connections between houses and wells using a greedy approach. Args: houses: A list of tuples, where each tuple represents the (x, y) coordinates of a house. wells: A list of tuples, where each tuple represents the (x, y) coordinates of a well. Returns: The minimum total distance of connections. distances = [] for house in houses: for well in wells: dist = math.sqrt((house[0] - well[0]) ** 2 + (house[1] - well[1]) ** 2) distances.append((dist, house, well)) # sort by distance distances.sort() total_distance = 0 assigned_houses = set() assigned_wells = set() for distance, house, well in distances: if house not in assigned_houses and well not in assigned_wells: total_distance += distance assigned_houses.add(house) assigned_wells.add(well) return total_distance"},{"question":"These are the instructions for the first challenge in a coding competition. **Challenge 1: Reverse and Add** * You are given a positive integer *n*. * Define a function *transform(n)* which does the following: * Reverses the digits of *n*. * Adds the reversed number to the original number. * Repeat the *transform(n)* operation until the resulting number becomes a palindrome. * Return the number of times you performed the *transform(n)* operation. **Example:** \`\`\` Input: 123 Output: 2 Explanation: 1. Reverse(123) = 321 2. 123 + 321 = 444 (Palindrome) 3. Number of transformations = 2 \`\`\` \`\`\` Input: 195 Output: 3 Explanation: 1. Reverse(195) = 591 2. 195 + 591 = 786 3. Reverse(786) = 687 4. 786 + 687 = 1473 5. Reverse(1473) = 3741 6. 1473 + 3741 = 5214 7. Reverse(5214) = 4125 8. 5214 + 4125 = 9339 9. Reverse(9339) = 9339 (Palindrome) 10. Number of transformations = 3 \`\`\` **Can you write a function called \\"transform\\" that performs the operations defined in the challenge?","solution":"def transform(n): Perform the reverse and add operation until the resulting number becomes a palindrome. Return the number of times the operation was performed. def is_palindrome(num): return str(num) == str(num)[::-1] def reverse_number(num): return int(str(num)[::-1]) count = 0 while not is_palindrome(n): reversed_n = reverse_number(n) n += reversed_n count += 1 return count"},{"question":"The problem Given a string, return the first non-repeating character in it. If there is no non-repeating character, return \\"_\\". Constraints: You can assume the string will only contain lowercase letters. Example: \\"leetcode\\" -> \\"l\\" \\"loveleetcode\\" -> \\"v\\" \\"aabbccddee\\" -> \\"_\\" \`\`\`python def firstUniqChar(s): # Create a dictionary to store the frequency of each character char_counts = {} # Iterate over the string and update the frequency of each character in the dictionary for char in s: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Iterate over the string again and return the first character with frequency 1 for char in s: if char_counts[char] == 1: return char # If no non-repeating character is found, return \\"_\\" return \\"_\\" \`\`\` Your code mostly works, but can you improve it by using more efficient methods than two loops?","solution":"def firstUniqChar(s): Returns the first non-repeating character in the given string. If all characters are repeating, returns '_'. # Using a single pass through the string to create a count dictionary and a set for unique characters char_counts = {} for char in s: char_counts[char] = char_counts.get(char, 0) + 1 # Iterate over string characters to find the first unique one for char in s: if char_counts[char] == 1: return char return \\"_\\""},{"question":"The following code snippet appears to define a function named \`calculate_distance\` that presumably calculates the distance between two points: \`\`\`python def calculate_distance(point1, point2): Calculates the distance between two points. Args: point1: A tuple representing the first point (x1, y1). point2: A tuple representing the second point (x2, y2). Returns: The distance between the two points.","solution":"import math def calculate_distance(point1, point2): Calculates the distance between two points. Args: point1: A tuple representing the first point (x1, y1). point2: A tuple representing the second point (x2, y2). Returns: The distance between the two points. x1, y1 = point1 x2, y2 = point2 return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"This task involves writing Python code to implement the \\"Sliding Window\\" problem. Let's assume it's about finding the maximum sum of a contiguous subarray of size 'k' within a given array.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a contiguous subarray of size k within the given array. Parameters: arr (list): The input list of integers. k (int): The size of the subarray. Returns: int: The maximum sum of the subarray of size k. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"These are the requirements for the task: 1. Function should be named \\"parse_text_to_json\\" 2. Function should take a single argument \\"text_data\\" which is a string of plain text 3. Function should return a JSON object 4. **Each sentence should become a separate key in the JSON object.** 5. **The value associated with each sentence key should be the length of the sentence in words.** Write Python code that fulfills these requirements: Example Input Text: This is the first sentence. This is the second sentence. This is the third sentence. Example Output: {\\"This is the first sentence.\\": 5, \\"This is the second sentence.\\": 5, \\"This is the third sentence.\\": 5} \`\`\`python def parse_text_to_json(text_data: str) -> dict: Parses plain text into a JSON object where each sentence is a key and its value is the number of words in the sentence. Args: text_data (str): The plain text to be parsed. Returns: dict: A JSON object containing sentences as keys and word counts as values. sentences = re.split(r'(?","solution":"import json import re def parse_text_to_json(text_data: str) -> dict: Parses plain text into a JSON object where each sentence is a key and its value is the number of words in the sentence. Args: text_data (str): The plain text to be parsed. Returns: dict: A JSON object containing sentences as keys and word counts as values. sentences = re.split(r'(?<!w.w.)(?<![A-Z][a-z].)(?<=.|?)s', text_data) result = {} for sentence in sentences: if sentence: # Ensure to ignore empty strings word_count = len(sentence.split()) result[sentence] = word_count return result"},{"question":"Here is a set of rules for a simple solitaire card game called Flip. **Rules:** * **Gameplay:** Deal four cards face down in a row. Turn over the top card of the remaining deck. * **Objective:** Move cards from the row to the discard pile (the turned over card) based on suit and rank, in ascending numerical order. * **Moves:** * **Match:** If a card in the row matches the suit of the discard pile's top card **and** is the next rank higher, you can move it to the discard pile. Matches wrap around: King can be placed on Ace. * **Game End:** * **Win:** When all four cards in the row are moved to the discard pile. * **Loss:** When no more moves are possible. * **Deck Size:** A standard 52-card deck is used. **Example:** If the discard pile's top card is the 6 of Hearts, you can move the 7 of Hearts from the row to the discard pile. **Considerations for a solver:** * **Depth First Search (DFS):** The solver could use DFS to explore all possible game states. * **Backtracking:** When a move leads to a dead end, backtrack and explore other options. **What I need:** * **Pseudocode:** Can you provide pseudocode for a solver using Depth First Search (DFS) and backtracking to solve this Flip game?","solution":"def flip_game_solver(deck): Solver for the Flip game using Depth First Search (DFS) and backtracking. :param deck: List of tuples representing the deck, where each tuple is (rank, suit). :return : Boolean indicating whether the game can be won. def can_place(card, top_card): Check if a card can be placed on the top card. :param card: Tuple representing the card (rank, suit). :param top_card: Tuple representing the top card (rank, suit). :return : Boolean indicating if the card can be placed. rank_order = ('A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K') next_rank_index = (rank_order.index(top_card[0]) + 1) % len(rank_order) return card[1] == top_card[1] and card[0] == rank_order[next_rank_index] def dfs(row, remaining_deck, discard_pile): Perform DFS to explore all possible game states. :param row: List of tuples representing the current row of four cards. :param remaining_deck: List of tuples representing the remaining deck to draw from. :param discard_pile: List of tuples representing the discard pile (last element is the top card). :return: Boolean indicating whether the game can be won from the current state. if not row: return True # All cards from the row are moved to the discard pile, hence win. for i in range(len(row)): if can_place(row[i], discard_pile[-1]): new_row = row[:i] + row[i + 1:] new_discard_pile = discard_pile + [row[i]] if dfs(new_row, remaining_deck, new_discard_pile): return True # Found a winning path. if remaining_deck: new_top_card = remaining_deck[0] return dfs(row, remaining_deck[1:], discard_pile + [new_top_card]) return False # No more moves possible, hence loss. initial_row = deck[:4] initial_discard_pile = [deck[4]] remaining_deck = deck[5:] return dfs(initial_row, remaining_deck, initial_discard_pile)"},{"question":"The problem is that I need to identify any and all instances of a specific word within a large text document. The criteria for a match is as follows: * Must match the exact word. * Must ignore case sensitivity. * Allow spaces and other punctuation surrounding the word. Can you provide me with a Python code snippet using regular expression to achieve this?","solution":"import re def find_word_instances(text, word): Finds all instances of the specified word in the given text, ignoring case and allowing for spaces and punctuation around the word. :param text: The text to search within. :param word: The specific word to find. :return: A list of all instances of the word. pattern = r'b' + re.escape(word) + r'b' return re.findall(pattern, text, re.IGNORECASE)"},{"question":"This project involves writing a Python function that takes a string as input and returns a new string that contains only the even-indexed characters of the input string.","solution":"def even_indexed_chars(input_string): Returns a new string that contains only the even-indexed characters of the input string. return input_string[::2]"},{"question":"Consider the following function: \`\`\` def longest_common_prefix(strs: list[str]) -> str: if not strs: return \\"\\" prefix = strs[0] for i in range(1, len(strs)): j = 0 while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]: j += 1 prefix = prefix[:j] return prefix \`\`\`\`\`\` This function aims to find the longest common prefix string amongst an array of strings. Let's analyze it step-by-step. **Functionality Breakdown:** 1. **Empty List Check:** - It starts by handling the edge case of an empty input list (\`strs\`). If the list is empty, it returns an empty string (\`\\"\\"\`). 2. **Initialization:** - If the list is not empty, it initializes \`prefix\` with the first string in the list (\`strs[0]\`). This assumes the first string is a potential common prefix. 3. **Iteration and Comparison:** - The code then iterates through the remaining strings in the list (\`for i in range(1, len(strs))\`). - For each string (\`strs[i]\`), it uses a \`while\` loop to compare characters at corresponding positions (\`j\`) in \`prefix\` and the current string. - The loop continues as long as: - \`j\` is within the bounds of both \`prefix\` and \`strs[i]\`. - The characters at position \`j\` in both strings are the same. 4. **Prefix Update:** - After the \`while\` loop, \`prefix\` is updated to be a substring of itself, from index 0 up to \`j\`. This effectively shortens \`prefix\` to the matched portion. 5. **Return:** - Finally, after comparing \`prefix\` with all strings in the list, the function returns the final \`prefix\`. **Example:** \`\`\` strs = [\\"flower\\", \\"flow\\", \\"flight\\"] longest_common_prefix(strs)","solution":"def longest_common_prefix(strs: list[str]) -> str: if not strs: return \\"\\" prefix = strs[0] for i in range(1, len(strs)): j = 0 while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]: j += 1 prefix = prefix[:j] return prefix"},{"question":"Let's consider the classic \\"Guess the Number\\" game, where a player tries to guess a secret number within a given range. Goal: The goal of this challenge is to write a Python program that implements a classic \\"Guess the Number\\" game with the following functionalities: 1. User-defined range: - Ask the player to enter the lower and upper bounds of the range for the secret number. 2. Computer generates the secret number: - Use Python's \`random\` module to generate a random integer within the specified range as the secret number. 3. Guessing loop: 4. - Continuous Guessing: - Allow the player to enter guesses repeatedly until they guess correctly. 5. Feedback: Provide feedback to the player after each guess: - \\"Too high!\\" if the guess is greater than the secret number. - \\"Too low!\\" if the guess is less than the secret number. - \\"You guessed it!\\" if the guess is correct. 6. Guess counter: - Keep track of the number of guesses the player makes. Can you help me with the Python code implementation for this \\"?","solution":"import random def guess_the_number(lower, upper): Implements the classic \\"Guess the Number\\" game. Args: lower (int): The lower bound of the guess range. upper (int): The upper bound of the guess range. Returns: int: The number of guesses it took the player to guess the number correctly. secret_number = random.randint(lower, upper) guess_count = 0 while True: guess = int(input(f\\"Guess a number between {lower} and {upper}: \\")) guess_count += 1 if guess > secret_number: print(\\"Too high!\\") elif guess < secret_number: print(\\"Too low!\\") else: print(\\"You guessed it!\\") break return guess_count"},{"question":"Here's the problem: **Given an array of integers, find the longest increasing continuous subsequence.** **Example:** \`\`\` arr = [1, 2, 3, 1, 4, 5, 2, 6] Longest increasing continuous subsequence: [1, 4, 5] \`\`\` Here's my solution: \`\`\`python def longest_increasing_subsequence(arr): if len(arr) == 0: return '' longest_subsequence = [arr[0]] current_subsequence = [arr[0]] for i in range(1, len(arr)): if arr[i] > arr[-1]: current_subsequence.append(arr[i]) else: current_subsequence = [arr[i]] if len(current_subsequence) > len(longest_subsequence): longest_subsequence = current_subsequence.copy() return longest_subsequence arr = [1, 2, 3, 1, 4, 5, 2, 6] result = longest_increasing_subsequence(arr) print(result)","solution":"def longest_increasing_continuous_subsequence(arr): if len(arr) == 0: return [] longest_subsequence = [] current_subsequence = [] for i in range(len(arr)): if i == 0 or arr[i] > arr[i - 1]: current_subsequence.append(arr[i]) else: current_subsequence = [arr[i]] if len(current_subsequence) > len(longest_subsequence): longest_subsequence = current_subsequence.copy() return longest_subsequence # Example arr = [1, 2, 3, 1, 4, 5, 2, 6] result = longest_increasing_continuous_subsequence(arr) print(result) # Output: [1, 2, 3]"},{"question":"I'm working on a coding project and need to determine if a list of strings contains any duplicate words. \`\`\`python sentences = [ \\"the quick brown fox jumps over the lazy dog\\", \\"now is the time for all good men\\", \\"the sky is blue\\", \\"the early bird gets the worm\\" ] \`\`\` Can you help me write Python code to achieve this?","solution":"def has_duplicate_words(sentence): Checks if a sentence contains any duplicate words. Parameters: sentence (str): The sentence to check. Returns: bool: True if there are duplicate words, False otherwise. words = sentence.split() return len(words) != len(set(words)) def any_sentences_with_duplicates(sentences): Determines if any sentence in the list contains duplicate words. Parameters: sentences (List[str]): List of sentences to check. Returns: bool: True if any sentence contains duplicate words, False otherwise. for sentence in sentences: if has_duplicate_words(sentence): return True return False"},{"question":"Consider the linear regression problem: Given a set of n data points {(xᵢ, yᵢ)}, i = 1, ..., n, find, the line of best fit y = mx + c, where m is the slope and c is the y-intercept. The line of best fit minimizes the sum of squared errors (SSE), which is defined as: SSE = Σᵢ(yᵢ - ŷᵢ)² = Σᵢ(yᵢ - (mxᵢ + c))² where ŷᵢ is the predicted value of yᵢ. Implement a Python program to find the best fit line for a given dataset. def best_fit_line(x, y): Finds the best fit line for a given dataset using the method of least squares. Args: x: A list of x-coordinates. y: A list of y-coordinates. Returns: A tuple containing the slope (m) and y-intercept (c) of the best fit line.","solution":"def best_fit_line(x, y): Finds the best fit line for a given dataset using the method of least squares. Args: x: A list of x-coordinates. y: A list of y-coordinates. Returns: A tuple containing the slope (m) and y-intercept (c) of the best fit line. n = len(x) sum_x = sum(x) sum_y = sum(y) sum_x_squared = sum(xi**2 for xi in x) sum_xy = sum(xi * yi for xi, yi in zip(x, y)) m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x**2) c = (sum_y - m * sum_x) / n return m, c"},{"question":"I want to build a simple web scraper written in Python to scrape data from a website. Here are the requirements: * **Functionality:** * The scraper should be able to navigate to a given URL. * It should be able to extract specific data points (text, images, links) from the webpage. * **Specificity:** * The data should be extracted based on HTML tags (e.g., <div>, <a>, <img>) and their attributes (e.g., class, id). * You can assume the website structure is relatively stable. * **Output:** * The extracted data should be saved to a structured format like a CSV or JSON file. **Can you provide me with a basic Python code example incorporating the \`requests\` and \`BeautifulSoup\` libraries to demonstrate this?","solution":"import requests from bs4 import BeautifulSoup import json def scrape_website(url): Scrapes the specified URL and extracts data points. :param url: URL of the website to scrape :return: Extracted data as a dictionary response = requests.get(url) if response.status_code == 200: soup = BeautifulSoup(response.content, 'html.parser') data = { 'title': [], 'paragraphs': [], 'links': [], 'images': [] } # Extracting all titles for title in soup.find_all('h1'): data['title'].append(title.get_text()) # Extracting all paragraphs for paragraph in soup.find_all('p'): data['paragraphs'].append(paragraph.get_text()) # Extracting all links for link in soup.find_all('a', href=True): data['links'].append(link['href']) # Extracting all images for img in soup.find_all('img', src=True): data['images'].append(img['src']) return data else: return None def save_to_json(file_name, data): Saves the collected data to a JSON file. with open(file_name, 'w') as file: json.dump(data, file, indent=4)"},{"question":"Objective: The objective of this script is to generate a random password with a specified length and allow the user to validate whether it meets their security criteria. Let me know what additional information you need to write the script. Programming language: Python I would like a user-friendly interface with the following features: Password Length: The user should be able to input the desired password length. Character Types: The user should be able to select which types of characters to include in the password (e.g., lowercase letters, uppercase letters, numbers, symbols). Password Generation: The script should generate a random password based on the user's specifications. Password Validation: The user should be able to confirm whether the generated password meets their chosen security criteria. Iteration: Allow the user to generate new passwords until they are satisfied. Error Handling: Implement appropriate error handling to deal with invalid inputs. Let me know if I need to provide any further details?","solution":"import random import string def generate_password(length, include_lowercase=True, include_uppercase=True, include_numbers=True, include_symbols=True): Generates a random password based on the specified criteria. Parameters: - length (int): The desired length of the password. - include_lowercase (bool): If True, include lowercase letters. - include_uppercase (bool): If True, include uppercase letters. - include_numbers (bool): If True, include numeric characters. - include_symbols (bool): If True, include special characters. Returns: - str: The generated password. if length <= 0: raise ValueError(\\"Password length must be greater than zero.\\") character_pool = '' if include_lowercase: character_pool += string.ascii_lowercase if include_uppercase: character_pool += string.ascii_uppercase if include_numbers: character_pool += string.digits if include_symbols: character_pool += string.punctuation if not character_pool: raise ValueError(\\"No character types selected; unable to generate password.\\") password = ''.join(random.choice(character_pool) for _ in range(length)) return password def validate_password(password, validation_criteria): Validates the password based on the specified criteria. Parameters: - password (str): The generated password. - validation_criteria (dict): A dictionary with the criteria to validate, e.g., {'min_length': 8, 'include_uppercase': True}. Returns: - bool: True if the password meets all criteria, False otherwise. min_length = validation_criteria.get('min_length', 0) include_lowercase = validation_criteria.get('include_lowercase', False) include_uppercase = validation_criteria.get('include_uppercase', False) include_numbers = validation_criteria.get('include_numbers', False) include_symbols = validation_criteria.get('include_symbols', False) if len(password) < min_length: return False if include_lowercase and not any(c.islower() for c in password): return False if include_uppercase and not any(c.isupper() for c in password): return False if include_numbers and not any(c.isdigit() for c in password): return False if include_symbols and not any(c in string.punctuation for c in password): return False return True"},{"question":"Objective The objective of this coding assignment is to create a Python program that plays a guessing game with the user. The program should: Generate a random secret number between 1 and 100 (inclusive). Allow the user to make guesses until they guess the number correctly. Provide feedback to the user after each guess, indicating whether their guess is too high, too low, or correct. Count the number of guesses the user takes. Display the final number of guesses to the user when they guess correctly. Instructions - 1. Use the \`random\` module to generate a random secret number. 2. Use a \`while\` loop to allow the user to keep making guesses until they guess correctly. 3. Prompt the user to enter a guess using the \`input()\` function. 4. Convert the user's input to an integer using the \`int()\` function. 5. Compare the user's guess to the secret number and provide feedback using an \`if-elif-else\` statement. 6. Increment a counter variable after each guess. 7. Once the user guesses correctly, display a message congratulating them and tell them the number of guesses they took. Example Input/Output: \`\`\` I've chosen a number between 1 and 100. Can you guess it?","solution":"import random def guessing_game(): Plays a guessing game with the user where they must guess a random number between 1 and 100. Provides feedback on whether guesses are too high or too low. Counts the number of guesses and displays the count when the correct number is guessed. secret_number = random.randint(1, 100) guesses = 0 while True: user_guess = int(input(\\"Enter your guess: \\")) guesses += 1 if user_guess < secret_number: print(\\"Too low!\\") elif user_guess > secret_number: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {guesses} attempts.\\") break"},{"question":"This is a coding interview question I was asked: \\"Given an array of integers, write a function \`find_pairs\` that finds all the unique pairs of elements in the array that sum up to a target value. **Example:** \`\`\`python array = [1, 2, 3, 4, 5] target = 7 find_pairs(array, target)","solution":"def find_pairs(array, target): Finds all unique pairs in the array that sum up to the target value. Parameters: array (list): List of integers. target (int): Target sum value. Returns: set: A set of tuples, each containing a unique pair of integers that sum up to the target. seen = set() pairs = set() for number in array: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return pairs"},{"question":"To help you understand the problem, I will provide you with a context. Context: I am working on a project where I require a function that takes two arguments: * a list of numbers * a target value and returns the indices of the two numbers in the list that add up to the target value. Let's call this function \\"findSumPair\\". **Example Usage:** \`\`\`python numbers = [2, 7, 11, 15] target = 9 indices = findSumPair(numbers, target) print(indices) # Expected Output: [0, 1] \`\`\` In this example, the numbers at indices 0 (value 2) and 1(value 7) add up to the target value 9. Can you write the code for the function \\"findSumPair\\"?","solution":"def findSumPair(numbers, target): This function returns the indices of the two numbers in the list that add up to the target value. Parameters: numbers (list of int): A list of integers. target (int): The target sum. Returns: list of int: Indices of the two numbers that add up to the target value. nums_map = {} for i, num in enumerate(numbers): complement = target - num if complement in nums_map: return [nums_map[complement], i] nums_map[num] = i return []"},{"question":"Project: Create a Python project that predicts the \\"Next Word Prediction\\" using a large language model (LLM) called GPT-2","solution":"from transformers import GPT2LMHeadModel, GPT2Tokenizer def predict_next_word(prompt_text): Predicts the next word in the given prompt_text using a GPT-2 model. Parameters: prompt_text (str): The text prompt for which the next word is to be predicted. Returns: str: The predicted next word. # Load pre-trained GPT-2 model and tokenizer from Hugging Face model_name = \\"gpt2\\" tokenizer = GPT2Tokenizer.from_pretrained(model_name) model = GPT2LMHeadModel.from_pretrained(model_name) # Encode the input text and get tensor input_ids = tokenizer.encode(prompt_text, return_tensors='pt') # Generate the next word outputs = model.generate(input_ids, max_length=len(input_ids[0]) + 1, num_return_sequences=1, do_sample=True) # Decode the generated token to get the predicted next word generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True) # Return only the new word added to the prompt return generated_text[len(prompt_text):].strip().split()[0]"},{"question":"Problem Statement: Write a Python function that takes a single argument, a string representing a sentence, and returns the length of the longest word in the sentence.","solution":"def longest_word_length(sentence): Returns the length of the longest word in the given sentence. :param sentence: A string representing a sentence. :return: An integer representing the length of the longest word. words = sentence.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"This code block appears to be for a Python library specific to handling network devices. \`\`\`python def discover_devices(network_range, protocol=\\"TCP\\"): Discovers network devices using the specified protocol. Args: network_range: The network range to scan, e.g., \\"192.168.1.0/24\\". protocol: The protocol to use for device discovery, defaults to \\"TCP\\". Returns: A list of discovered device IP addresses. # ... Implementation goes here ... pass \`\`\` **Could you elaborate on the possible implementations for this function based on different network scanning techniques?","solution":"import socket from ipaddress import ip_network def discover_devices(network_range, protocol=\\"TCP\\"): Discovers network devices using the specified protocol. Args: network_range: The network range to scan, e.g., \\"192.168.1.0/24\\". protocol: The protocol to use for device discovery, defaults to \\"TCP\\". Returns: A list of discovered device IP addresses. if protocol.upper() != \\"TCP\\": raise NotImplementedError(f\\"Protocol {protocol} not supported. Only TCP is implemented.\\") # Generate a list of IPs in the network range ip_list = [str(ip) for ip in ip_network(network_range).hosts()] discovered_devices = [] for ip in ip_list: try: # Attempt to establish a connection with the device on port 80 (HTTP) with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.settimeout(1) # set short timeout result = sock.connect_ex((ip, 80)) # If the port is open, result will be 0 if result == 0: discovered_devices.append(ip) except Exception as e: print(f\\"Error scanning {ip}: {e}\\") return discovered_devices"},{"question":"Objective: Develop a Python script to calculate the total number of unique words in a given text file.","solution":"def count_unique_words(file_path): Calculate the total number of unique words in a given text file. Parameters: file_path (str): The path to the text file. Returns: int: The total number of unique words. with open(file_path, 'r') as file: text = file.read() words = text.split() unique_words = set(word.lower() for word in words) return len(unique_words)"},{"question":"How to convert a float to a string without using built-in function in Python?","solution":"def float_to_string(num): Converts a floating point number to a string representation without using built-in functions like str() for direct conversion. if num < 0: return '-' + float_to_string(-num) whole_part = int(num) decimal_part = num - whole_part whole_part_str = '' if whole_part == 0: whole_part_str = '0' else: while whole_part > 0: digit = whole_part % 10 whole_part_str = chr(digit + ord('0')) + whole_part_str whole_part //= 10 decimal_part_str = '' if decimal_part > 0: decimal_part_str = '.' for _ in range(6): # limiting to 6 decimal places for simplicity decimal_part *= 10 digit = int(decimal_part) decimal_part_str += chr(digit + ord('0')) decimal_part -= digit return whole_part_str + decimal_part_str"},{"question":"You are given a string 's' and need to find the longest substring that contains the maximum number of unique characters. Example: \`\`\` Input: s = \\"abcabcbb\\" Output: \\"abc\\" \`\`\` Explanation: The longest substring with the maximum number of unique characters is \\"abc\\". \`\`\` Input: s = \\"bbbbb\\" Output: \\"b\\" \`\`\` Explanation: The longest substring with the maximum number of unique characters is \\"b\\" since \\"b\\" is the only unique character. Constraints: 1 <= s.length <= 10^4 s contains only lowercase English letters. Here I'm Providing the Solution But I want to understand how it works so can you explaine each part of the code?","solution":"def longest_unique_substring(s): Returns the longest substring with the maximum number of unique characters. n = len(s) if n == 0: return \\"\\" max_len = 0 start = 0 max_start = 0 char_position = {} for end in range(n): if s[end] in char_position and char_position[s[end]] >= start: start = char_position[s[end]] + 1 char_position[s[end]] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_start = start return s[max_start:max_start + max_len]"},{"question":"This is going to be an exciting project! I'm looking for help building a program that generates random art with the following capabilities: **Core Features:** 1. **Shape Generation:** Ability to generate simple geometric shapes (circles, squares, triangles, lines) at random positions and sizes within a specified canvas. 2. **Color Selection:** Ability to choose random colors from a defined palette or generate random RGB values. 3. **Composition:** * Allow for layered shapes, with some shapes potentially overlapping others. * Introduce options for basic transformations like rotations and reflections for added complexity. **Advanced Features (Optional):** 1. **Gradient Fills:** Enable using gradients instead of solid colors for shape fills. 2. **Pattern Generation:** Allow for patterns to be generated within shapes, possibly using repeating elements or fractal-like algorithms. 3. **User Interaction:** * Allow users to specify parameters like canvas size, number of shapes, color palette, and complexity level. * Potential for interactive elements where users can manipulate shapes or colors after generation. **Important Considerations:** * **Programming Language:** Python would be the preferred choice due to its rich libraries for graphics and ease of use. * **Libraries:** Please recommend relevant Python libraries for implementation, focusing on those that are well-documented and community-supported. * **Graphics:** Pygame, Pillow (PIL), Tkinter - any pros/cons for art generation within each?","solution":"import random from PIL import Image, ImageDraw import math def generate_random_color(): Generates a random RGB color. return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) def generate_circle(draw, width, height): Generates a random circle within the given width and height on the provided draw object. radius = random.randint(10, min(width, height) // 4) x = random.randint(radius, width - radius) y = random.randint(radius, height - radius) color = generate_random_color() draw.ellipse((x - radius, y - radius, x + radius, y + radius), fill=color) def generate_square(draw, width, height): Generates a random square within the given width and height on the provided draw object. side_length = random.randint(10, min(width, height) // 4) x = random.randint(0, width - side_length) y = random.randint(0, height - side_length) color = generate_random_color() draw.rectangle((x, y, x + side_length, y + side_length), fill=color) def generate_triangle(draw, width, height): Generates a random triangle within the given width and height on the provided draw object. side_length = random.randint(10, min(width, height) // 4) x1 = random.randint(0, width - side_length) y1 = random.randint(0, height - side_length) x2 = x1 + side_length y2 = y1 x3 = x1 + side_length / 2 y3 = y1 - math.sqrt(3) / 2 * side_length color = generate_random_color() draw.polygon([(x1, y1), (x2, y2), (x3, y3)], fill=color) def generate_line(draw, width, height): Generates a random line within the given width and height on the provided draw object. x1 = random.randint(0, width) y1 = random.randint(0, height) x2 = random.randint(0, width) y2 = random.randint(0, height) color = generate_random_color() draw.line((x1, y1, x2, y2), fill=color) def generate_random_art(width, height, num_shapes): Generates random art with the specified number of shapes on a canvas of given width and height. image = Image.new(\\"RGB\\", (width, height), (255, 255, 255)) draw = ImageDraw.Draw(image) shape_functions = [generate_circle, generate_square, generate_triangle, generate_line] for _ in range(num_shapes): shape_function = random.choice(shape_functions) shape_function(draw, width, height) return image"},{"question":"I'm trying to make a Python program to guess a player's number between 1 and 100. Here's what I have so far: \`\`\`python import random def guess_number(): number = random.randint(1, 100) guess = int(input(\\"Guess a number between 1 and 100: \\")) if guess < number: print(\\"Too low!\\") elif guess > number: print(\\"Too high!\\") else: print(\\"You got it!\\") guess_number() \`\`\` This program only allows one guess. How can I modify it to allow the player multiple guesses until they guess correctly?","solution":"import random def guess_number(): number = random.randint(1, 100) guess = None while guess != number: guess = int(input(\\"Guess a number between 1 and 100: \\")) if guess < number: print(\\"Too low!\\") elif guess > number: print(\\"Too high!\\") else: print(\\"You got it!\\")"},{"question":"In Python, if I import a module 'mymodule' that I've created, all functions/classes defined within it become available but is it possible to only import *specific* functions or classes from a module?","solution":"def func1(): return \\"Function 1\\" def func2(): return \\"Function 2\\" class MyClass: def method(self): return \\"Method in MyClass\\""},{"question":"There's a group of friends who are all trying to save money for a big vacation together. Each of them contributes a set amount of money each week. This process can go on for potentially many weeks. Let's create a Python program that simulates this! **Here's the detailed logic:** 1. **Input:** * The program should ask the user for the (1) number of friends, (2) the amount each friend contributes per week, and (3) the total cost of the vacation. * The program should also ask for the number of weeks to simulate the saving process. 2. **Calculate:** * At the end of each week, calculate the total amount saved. * Print the week number and the total savings at the end of each week. 3. **Goal Check:** * Check at the end of each week if the total savings have reached or exceeded the vacation cost. * If the goal is reached: * Print \\"Congratulations! You can afford the vacation!\\". * Display (1) the total savings, (2) the number of weeks it took to save enough, and (3) the amount of extra money saved (if any). Otherwise (if the savings haven't reached the goal yet), continue to the next week. **Here's an example of how the program should run:** \`\`\` How many friends are going on the vacation?","solution":"def simulate_savings(number_of_friends, amount_per_week, vacation_cost, number_of_weeks): Simulates the weekly savings of a group of friends saving for a vacation. Parameters: number_of_friends (int): Number of friends contributing. amount_per_week (int): Amount each friend contributes per week. vacation_cost (int): Total cost of the vacation. number_of_weeks (int): Number of weeks to simulate the saving process. Returns: dict: Summary of the simulation with keys 'total_savings', 'weeks_taken', 'extra_money'. total_savings = 0 result = {} for week in range(1, number_of_weeks + 1): total_savings += number_of_friends * amount_per_week print(f\\"Week {week}: Total savings so far is {total_savings}\\") if total_savings >= vacation_cost: print(\\"Congratulations! You can afford the vacation!\\") result['total_savings'] = total_savings result['weeks_taken'] = week result['extra_money'] = total_savings - vacation_cost break else: result['total_savings'] = total_savings result['weeks_taken'] = number_of_weeks result['extra_money'] = 0 return result"},{"question":"The following code implements a depth-first search (DFS) algorithm. Explain its operation step-by-step, focusing on the use of the \`visited\` and \`stack\` data structures.","solution":"def depth_first_search(graph, start): Perform a depth-first search on a graph starting from the given node. Parameters: - graph: A dictionary representing the adjacency list of the graph. - start: The starting node for the DFS. Returns: - A list of nodes in the order they were visited. visited = set() # Set to keep track of visited nodes. stack = [start] # Stack to manage the nodes to explore. visit_order = [] # List to record the visit order of nodes. while stack: node = stack.pop() # Take the last node from the stack. if node not in visited: visited.add(node) # Mark node as visited. visit_order.append(node) # Record visit order. # Add all unvisited neighbors to the stack. stack.extend(neighbour for neighbour in graph[node] if neighbour not in visited) return visit_order"},{"question":"Objective: Define a function called \`count_consonants\` that takes a string as input and returns the number of consonants in the string.","solution":"def count_consonants(s): Returns the number of consonants in the input string. Args: s (str): The input string. Returns: int: The number of consonants in the string. vowels = 'aeiouAEIOU' consonants_count = 0 for char in s: if char.isalpha() and char not in vowels: consonants_count += 1 return consonants_count"},{"question":"Write a Python code snippet to: 1. Define a function \`validate_email\` that takes one argument, \`email\`. 2. Inside the function: - Use a regular expression to validate if the email address has the structure of a valid email. - If the email is valid, return \`True\`, otherwise return \`False\`. 3. Call the function with a sample email address and print the result. \`\`\`python import re def validate_email(email): # Write your regular expression here regex = r\\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\\" # Check if the email matches the regex match = re.match(regex, email) if match: return True else: return False # Example usage email_address = \\"test.user@example.com\\" is_valid = validate_email(email_address) print(f\\"Is '{email_address}' a valid email?","solution":"import re def validate_email(email): Validate if the given email address is in a valid format. Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. # Regular expression for validating an email address regex = r\\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\\" # Check if the email matches the regex match = re.match(regex, email) if match: return True else: return False # Example usage email_address = \\"test.user@example.com\\" is_valid = validate_email(email_address) print(f\\"Is '{email_address}' a valid email? {is_valid}\\")"},{"question":"Let's design a simple programming quiz. Here are some requirements: * The quiz should be in Python. * It should consist of 5 multiple choice questions. * Each question should have 4 possible answers, only one of which is correct. * The quiz should keep track of the user's score. \`\`\`python # Python Programming Quiz # Function to display the quiz questions and answers def ask_question(question, options): print(question) for i, option in enumerate(options): print(f\\"{i+1}. {option}\\") while True: try: user_answer = int(input(\\"Enter your answer (1-4): \\")) if 1 <= user_answer <= 4: return user_answer else: print(\\"Invalid input. Please enter a number between 1 and 4.\\") except ValueError: print(\\"Invalid input. Please enter a number.\\") # List of quiz questions and their answers questions = [ { \\"question\\": \\"What is the output of \`print(5 + 3 * 2)\`?","solution":"# Python Programming Quiz def ask_question(question, options): Displays the question and options, captures and returns the user's answer. print(question) for i, option in enumerate(options): print(f\\"{i+1}. {option}\\") while True: try: user_answer = int(input(\\"Enter your answer (1-4): \\")) if 1 <= user_answer <= 4: return user_answer else: print(\\"Invalid input. Please enter a number between 1 and 4.\\") except ValueError: print(\\"Invalid input. Please enter a number.\\") def run_quiz(questions): Run the quiz with provided questions and tracks the score. score = 0 for q in questions: user_answer = ask_question(q[\\"question\\"], q[\\"options\\"]) if q[\\"options\\"][user_answer - 1] == q[\\"answer\\"]: score += 1 print(f\\"Your final score is {score}/{len(questions)}\\") # List of quiz questions and their answers questions = [ { \\"question\\": \\"What is the output of \`print(5 + 3 * 2)\`?\\", \\"options\\": [\\"11\\", \\"16\\", \\"10\\", \\"None of the above\\"], \\"answer\\": \\"11\\" }, { \\"question\\": \\"What is the correct file extension for Python files?\\", \\"options\\": [\\".pyth\\", \\".pt\\", \\".py\\", \\".pyt\\"], \\"answer\\": \\".py\\" }, { \\"question\\": \\"What keyword is used to create a function in Python?\\", \\"options\\": [\\"func\\", \\"def\\", \\"fun\\", \\"define\\"], \\"answer\\": \\"def\\" }, { \\"question\\": \\"Which of the following is a mutable data type in Python?\\", \\"options\\": [\\"tuple\\", \\"int\\", \\"str\\", \\"list\\"], \\"answer\\": \\"list\\" }, { \\"question\\": \\"How do you insert a comment in Python code?\\", \\"options\\": [\\"// This is a comment\\", \\"/* This is a comment */\\", \\"# This is a comment\\", \\"-- This is a comment\\"], \\"answer\\": \\"# This is a comment\\" } ] # To run the quiz, uncomment the following line # run_quiz(questions)"},{"question":"Objective: Build and evaluate a basic NLP model for sentiment analysis in Python using the IMDB movie reviews dataset.","solution":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score, classification_report def load_imdb_data(): Loads the IMDB movie reviews dataset. This is a representative example of loading a dataset. # For simplicity of demonstration using a small subset of data # In practice, use the full dataset which can be downloaded from various sources data = { 'review': [ 'I loved the movie', 'I hated the movie', 'It was fantastic', 'Not good', 'Amazing!', 'Terrible movie', 'Absolutely wonderful', 'Horrible experience', 'Best movie ever', 'Worst film ever' ], 'sentiment': ['positive', 'negative', 'positive', 'negative', 'positive', 'negative', 'positive', 'negative', 'positive', 'negative'] } df = pd.DataFrame(data) return df def preprocess_data(df): Preprocesses the IMDB dataset by splitting into training and test sets and applying a CountVectorizer to transform text data into feature vectors. X = df['review'] y = df['sentiment'] vectorizer = CountVectorizer() X_vectorized = vectorizer.fit_transform(X) X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42) return X_train, X_test, y_train, y_test, vectorizer def train_model(X_train, y_train): Trains a Naive Bayes classifier on the training data. model = MultinomialNB() model.fit(X_train, y_train) return model def evaluate_model(model, X_test, y_test): Evaluates the trained model on the test set and prints the accuracy and classification report. y_pred = model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) report = classification_report(y_test, y_pred, target_names=['positive', 'negative']) return accuracy, report def main(): Main function to load data, preprocess, train, and evaluate the model. df = load_imdb_data() X_train, X_test, y_train, y_test, vectorizer = preprocess_data(df) model = train_model(X_train, y_train) accuracy, report = evaluate_model(model, X_test, y_test) print('Accuracy:', accuracy) print('Classification Report:n', report) if __name__ == \\"__main__\\": main()"},{"question":"Let's say I have a Python code like this example: The goal is to process a CSV file with Pandas and modify it based on some conditions. \`\`\`python import pandas as pd def process_csv(filename, condition_column, target_column, new_value): This function processes a CSV file by modifying values in a specific column based on a condition in another column. Args: filename: Path to the CSV file. condition_column: Name of the column containing the condition to check. target_column: Name of the column to modify. new_value: The new value to set for the target column if the condition is met. Returns: The modified DataFrame. df = pd.read_csv(filename)","solution":"import pandas as pd def process_csv(filename, condition_column, target_column, new_value): This function processes a CSV file by modifying values in a specific column based on a condition in another column. Args: filename: Path to the CSV file. condition_column: Name of the column containing the condition to check. target_column: Name of the column to modify. new_value: The new value to set for the target column if the condition is met. Returns: The modified DataFrame. df = pd.read_csv(filename) df.loc[df[condition_column], target_column] = new_value return df"},{"question":"The problem statement below gives: * a directed graph * a starting node * an ending node **Problem Statement:** Find all paths from a starting node to an ending node in a directed graph. Here's a Python implementation using depth-first search (DFS): \`\`\`python def find_all_paths(graph, start, end): Finds all paths from a starting node to an ending node in a directed graph. Args: graph: A dictionary representing the graph where keys are nodes and values are lists of their outgoing neighbors. start: The starting node. end: The ending node. Returns: A list of all paths from start to end, where each path is a list of nodes. paths = [] def dfs(node, current_path): if node == end: paths.append(current_path.copy())","solution":"def find_all_paths(graph, start, end): Finds all paths from a starting node to an ending node in a directed graph. Args: graph: A dictionary representing the graph where keys are nodes and values are lists of their outgoing neighbors. start: The starting node. end: The ending node. Returns: A list of all paths from start to end, where each path is a list of nodes. paths = [] def dfs(node, current_path): current_path.append(node) if node == end: paths.append(current_path.copy()) else: for neighbor in graph.get(node, []): dfs(neighbor, current_path) current_path.pop() dfs(start, []) return paths"},{"question":"The problem is this: You should write a Python program which takes a list of integers as input, and returns the indices of the two numbers in the list which add up to a target sum. **Example:** Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1], Explanation Because nums[0] + nums[1] == 9 **Conditions:** - Each input would have exactly one solution, and you may not use the same elementtwice You can assume that each input would have exactly one solution Can anyone tell me how can I write a code for this?","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list which add up to the target sum. :param nums: List[int] - List of integers :param target: int - Target sum :return: List[int] - List with indices of the two elements that add up to target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"You have an array of integers, and you want to find the maximum product of two integers in the array. Example: \`\`\` Input: [2, 5, -3, 10, 8] Output: 80 Explanation: The maximum product is achieved by multiplying 10 and 8. \`\`\` Constraints: The input array will contain at least two integers. The integers in the array can be positive, negative, or zero. \`\`\`python def max_product(nums): Finds the maximum product of two integers in a given array. Args: nums: A list of integers. Returns: The maximum product of two integers in the array. # Your code here \`\`\` Can you provide a Python solution for this problem?","solution":"def max_product(nums): Finds the maximum product of two integers in a given array. Args: nums: A list of integers. Returns: The maximum product of two integers in the array. # Initialize largest and second largest positive numbers max1 = max2 = float('-inf') # Initialize smallest and second smallest negative numbers min1 = min2 = float('inf') for num in nums: if num > max1: max2, max1 = max1, num elif num > max2: max2 = num if num < min1: min2, min1 = min1, num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"There are n houses in a row, each house can have one lamp only. The starting state of the lamp for each house can be either on or off. You are given an array 'a' representing the starting state of a lamp in each house. In a single step, - If a lamp is on, it will turn off. - If a lamp is OFF, it will turn on. Given the array 'a', find out the minimum number of steps required to turn ALL Lamps ON. **Example**: Let's say *a = [0, 1, 0, 1]* Here, 0 represents OFF and 1 represents ON. Initially, two lamps are off (* index 0 and 2 )* and two lamps are on(*index 1 and 3*). - **Step 1:** [1, 0, 1, 0]% All lamps were flipped - **Step 2:** [0, 1, 0, 1]% Again all lamps were flipped back Thus, it took **2 steps** to have all lamps on **Can you write the Python code for this task?","solution":"def min_steps_to_all_on(lamps): Function to determine the minimum number of steps required to turn all lamps on. Parameters: lamps (List[int]): A list representing the state of each lamp (0 for OFF, 1 for ON) Returns: int: Minimum number of steps to turn all lamps ON # Count how many lamps are currently OFF count_off = lamps.count(0) # If there are no lamps off, it means all are already ON if count_off == 0: return 0 # It takes exactly two steps if there are any OFF lamps return 2"},{"question":"Let's build a basic game where the computer chooses a random number and the player has to guess it. Here's a basic outline: * The computer will choose a random number between 1 and 100. * The player will input a guess. * The computer will tell the player if the guess is too high, too low, or correct. * The player gets 7 attempts to guess the correct number. Let's start with the code for generating the random number. * You'll need to import the \`random\` module. \`\`\`python import random \`\`\` * Now you can generate a random number using the \`randint()\` function \`\`\`python random_number = random.randint(1, 100) \`\`\` Can you provide the complete code with error handling and user interface for a number guessing game?","solution":"import random def guess_the_number(attempts=7): The computer chooses a random number between 1 and 100, and the player has to guess it within a given number of attempts. random_number = random.randint(1, 100) print(\\"I have thought of a number between 1 and 100. You have 7 attempts to guess it.\\") for attempt in range(1, attempts + 1): try: guess = int(input(f\\"Attempt {attempt}/{attempts}: Enter your guess: \\")) if guess < 1 or guess > 100: print(\\"Please enter a number between 1 and 100.\\") continue if guess < random_number: print(\\"Your guess is too low.\\") elif guess > random_number: print(\\"Your guess is too high.\\") else: print(f\\"Congratulations! You've guessed the correct number {random_number} in {attempt} attempts.\\") return except ValueError: print(\\"Invalid input. Please enter an integer.\\") print(f\\"Sorry, you've used all your attempts. The correct number was {random_number}.\\")"},{"question":"This is what I want to achieve: \`\`\`python def greet_world(name): print(\\"_\\" * len(name) * 2) print(f\\"{name.upper()} WELCOME\\") print(\\"_\\" * len(name) * 2) greet_world(\\"world\\") OUTPUT: ________________ WORLD WELCOME ________________ \`\`\` The code should be able to work for any input name. I don't know how to make the top and bottom lines the correct length \`\`\`python def greet_world(name): print(\\"_\\" * ??)","solution":"def greet_world(name): Prints a greeting message with a name and a decorative line before and after the message. Parameters: name (str): The name to be included in the greeting message. line_length = len(name) * 2 print(\\"_\\" * line_length) print(f\\"{name.upper()} WELCOME\\") print(\\"_\\" * line_length)"},{"question":"This is an example of an array of arrays where \\"1\\" represents land and \\"0\\" represents water \`\`\` myArray = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1], [1, 0, 0, 0, 1]] \`\`\` From this array, I need to find and print all the groups (islands) of connected land. Here's what the islands look like visually: \`\`\` * * * * * * * * * * \`\`\` How can I achieve this using Python?","solution":"def dfs(myArray, visited, i, j): stack = [(i, j)] n = len(myArray) m = len(myArray[0]) while stack: x, y = stack.pop() if visited[x][y]: continue visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and myArray[nx][ny] == 1 and not visited[nx][ny]: stack.append((nx, ny)) def find_islands(myArray): n = len(myArray) m = len(myArray[0]) visited = [[False] * m for _ in range(n)] island_count = 0 for i in range(n): for j in range(m): if myArray[i][j] == 1 and not visited[i][j]: dfs(myArray, visited, i, j) island_count += 1 return island_count"},{"question":"There is a large, open field with an uncountable number of equally spaced points on a rectangular grid. At each point there lies a single firefly. Each firefly can change its state from on (glowing) to off (not glowing) every second. There is a global signal that simultaneously alerts all fireflies to change their states in sync every second (all fireflies flash simultaneously). Every second, each firefly looks at its eight neighboring fireflies: - Directly north, south, east, and west. - Diagonally north-east, north-west, south-east, and south-west. A firefly will change its state to the opposite of the state of the majority of its neighbors. If there's a tie between the number of on and off fireflies in its neighborhood, the firefly will remain in its current state. **Tasks:** 1. **Simulate** the behavior of the fireflies over time. 2. **Visualize** the on/off states of the fireflies. **Considerations:** * The field is a rectangular grid of any user-specified size. * The initial state of each firefly (on or off) should be randomly determined. * The simulation should run for a user-specified number of seconds. * You can use any programming language, libraries, or tools you are comfortable with. **Further Exploration:** * What patterns emerge over time? * How do the firefly patterns differ for different grid sizes? * How does the initial random distribution of on/off states affect the patterns?","solution":"import numpy as np def initialize_grid(rows, cols): Initializes a grid with the given number of rows and cols, where each cell is randomly assigned a state: 1 (on) or 0 (off). return np.random.randint(2, size=(rows, cols)) def get_neighbors(grid, x, y): Returns the states of the 8 neighboring cells of the cell at (x, y) in the grid. Considers the grid to be finite with boundary conditions. rows, cols = grid.shape neighbors = [] directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: neighbors.append(grid[nx, ny]) return neighbors def update_grid(grid): Updates the grid based on the rules described: Each firefly will change its state to the opposite of the state of the majority of its neighbors. If there's a tie, the firefly will remain in its current state. rows, cols = grid.shape new_grid = np.copy(grid) for x in range(rows): for y in range(cols): neighbors = get_neighbors(grid, x, y) on_neighbors = sum(neighbors) off_neighbors = len(neighbors) - on_neighbors if on_neighbors > off_neighbors: new_grid[x, y] = 0 elif off_neighbors > on_neighbors: new_grid[x, y] = 1 return new_grid def simulate_fireflies(rows, cols, iterations): Simulates the firefly grid for a number of iterations. grid = initialize_grid(rows, cols) for _ in range(iterations): grid = update_grid(grid) return grid def visualize_grid(grid): Visualizes the grid using matplotlib. import matplotlib.pyplot as plt plt.imshow(grid, cmap='gray', interpolation='none') plt.show() # Usage example: # grid = simulate_fireflies(10, 10, 5) # visualize_grid(grid)"},{"question":"You are given an array of positive integers and a target integer. Find the contiguous subarray whose sum is equal to the target. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [2, 7] Requirements: 1. Your solution must have O(n) time complexity. 2. Your solution must use constant extra space. Why O(n Time Complexity and Constant Extra Space?","solution":"def find_subarray_with_sum(nums, target): Returns the contiguous subarray whose sum is equal to the target. If no such subarray is found, return an empty list. left, total = 0, 0 for right in range(len(nums)): total += nums[right] while total > target and left <= right: total -= nums[left] left += 1 if total == target: return nums[left:right + 1] return [] # Example usage: nums = [2, 7, 11, 15] target = 9 print(find_subarray_with_sum(nums, target)) # Output: [2, 7]"},{"question":"[Python] I want to build a program that automatically generates quiz questions based on a text document. Here's what I have so far: \`\`\`python import random def generate_quiz_question(text): sentences = text.split('.') random.shuffle(sentences) question = random.choice(sentences) return question def main(): with open(\\"text.txt\\", \\"r\\") as file: text = file.read() question = generate_quiz_question(text) print(question) if __name__ == \\"__main__\\": main() \`\`\` This code: 1. Reads text document 2. Splits the text into sentences. 3. Randomly selects a sentence. **Here is what I'd like to improve:** 1. **More Interesting Questions:** * Replace a word in a sentence with a blank * Convert a declarative sentence into a question. * Provide multiple choice options 2. **Difficulty Levels**: * Be able to adjust question difficulty **What are some techniques or approaches I can use to achieve these improvements?","solution":"import random import re def generate_quiz_question(text, type='blank', difficulty='easy'): sentences = text.split('.') sentences = [s.strip() for s in sentences if s.strip()] random.shuffle(sentences) question = random.choice(sentences) if type == 'blank': words = question.split() if len(words) > 1: blank_index = random.randint(0, len(words) - 1) answer = words[blank_index] words[blank_index] = \\"____\\" question = ' '.join(words) return question, answer else: return question, None elif type == 'multiple_choice': words = question.split() if len(words) > 1: blank_index = random.randint(0, len(words) - 1) answer = words[blank_index] words[blank_index] = \\"____\\" question = ' '.join(words) choices = [answer] while len(choices) < 4: fake_answer = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=len(answer))) if fake_answer not in choices: choices.append(fake_answer) random.shuffle(choices) return question, answer, choices else: return question, None, [] elif type == 'question': question = re.sub(r'b(is|are|was|were)b', r'1 not', question, count=1) question += '?' return question, None def main(): with open(\\"text.txt\\", \\"r\\") as file: text = file.read() question, answer, choices = generate_quiz_question(text, type='multiple_choice') print(f\\"Question: {question}\\") print(f\\"Answer: {answer}\\") print(f\\"Choices: {choices}\\") if __name__ == \\"__main__\\": main()"},{"question":"Problem Statement: Implement a function, \`find_shortest_path(matrix, start, end)\`, that finds the shortest path between two nodes in a given maze represented as a matrix.","solution":"from collections import deque def find_shortest_path(matrix, start, end): Finds the shortest path between two nodes in a given maze represented as a matrix. Args: matrix: List of Lists, where 0 represents an open path and 1 represents walls. start: Tuple (x, y) indicating the start position in the maze. end: Tuple (x, y) indicating the end position in the maze. Returns: Integer representing the length of the shortest path, or -1 if no path exists. rows, cols = len(matrix), len(matrix[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_in_bounds(x, y): return 0 <= x < rows and 0 <= y < cols and matrix[x][y] == 0 queue = deque([(start[0], start[1], 0)]) # Current position and count of steps taken visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_in_bounds(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an array of integers 'nums' and an integer 'target'. You are going to find TWO indices of elements in 'nums' that add up to the given 'target'. For the solution to be valid: You *must not* use the same element twice. Return the indices as a list [index1, index2] where index1 < index2. You may assume that each input would have only *one* solution. **Input format:** \`nums\` : A list of integers \`target\`: An integer \`\`\`python nums = [2, 7, 11, 15] target = 9 \`\`\` **Output:** If the target sum is found: \`[0, 1]\` It's because \`nums[0] + nums[1] = 2 + 7 = 9\` If the target sum is not found, you can return an empty list \`[]\` or \`None\` **Constraints:** - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9 - Only one valid answer exists. Can you write an algorithm to find two indices that add up to the given target and not use the same element twice?","solution":"def two_sum(nums, target): Returns the indices of two numbers in nums that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"The problem is: Given an array of n integers, find all pairs of elements in the array whose sum equals k, where k is a given integer. # For Examples - For an input array of \`[1, 2, 3, 4, 5]\` and \`k = 7\`, the solution would be pairs: \`[2, 5], [3, 4]\`. - For an input array of \`[10, 12, 10, 15, 18, 20]\` and \`k = 30\`, the solution would be pairs: \`[10, 20], [12, 18]\`. **Can you provide a Python implementation using sets or dictionaries (hash maps)?","solution":"def find_pairs_with_sum(arr, k): Given an array of integers and a target sum k, return all unique pairs of elements that sum to k. Parameters: arr (list of int): The input array of integers. k (int): The target sum. Returns: list of tuple: A list of tuples, each containing a pair of elements that sum to k. seen = set() pairs = set() for num in arr: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return list(pairs)"},{"question":"In Python, what does the \`dir(object)\` function do and how does it contribute to the concept of introspection?","solution":"def get_dir(obj): Returns a list of attributes and methods of an object. This function leverages Python's built-in \`dir()\` function, which is used for introspection. Introspection is the ability of a program to examine the type or properties of an object at runtime. Parameters: obj (object): The object to be introspected. Returns: list: A list of string names of the attributes and methods of the object. return dir(obj)"},{"question":"This problem requires creating a python program to display the ASCII art representation of a christmas tree, but instead of using static characters for the ornaments, it generates random characters for each ornament.","solution":"import random import string def generate_christmas_tree(height): Generates a Christmas tree of given height. Each ornament on the tree is represented by a random character. tree = [] for i in range(height): stars = '*' * (2 * i + 1) ornaments = ''.join(random.choice(string.ascii_letters) for _ in range(2 * i + 1)) tree.append(stars.center(height + i)) tree.append(ornaments.center(height + i)) trunk = ['|'.center(height + height - 1), '|'.center(height + height - 1)] return \\"n\\".join(tree + trunk)"},{"question":"This is a fun little coding challenge I saw online: You are given an integer array nums and an integer k. Find the **maximum** sum of a **contiguous subarray** of size **exactly k**. **Constraints:** * 1 <= k <= nums.length <= 10^5 * -10^4 <= nums[i] <= 10^4 **Example:** \`\`\` Input: nums = [1, 4, 2, 10, 2, 3, 1, 0, 20], k = 4 Output: 18 Explanation: The subarray of the size 4 that maximizes the sum is [10, 2, 3, 1], thus the output is 10 + 2 + 3 + 1 = 18. \`\`\` Here was my approach: **1. Sliding Window** Since we are looking for contiguous subarrays of fixed size, the sliding window technique comes in handy. **2. Calculate Initial Window Sum:** * We calculate the sum of the first k elements in the array to initialize our window sum. **3. Move the Window:** * We slide the window one element to the right at a time. **4. Update Window Sum:** * In each step: - We **subtract** the element going out of the window (leftmost element). - We **add** the element entering the window (rightmost element). **5. Track the Maximum Sum:** * We store the maximum sum encountered so far throughout the process of sliding the window. **Python Code:** \`\`\`python def max_sum_subarray(nums, k): Finds the maximum sum of a contiguous subarray of size k. Args: nums: The input array of integers. k: The size of the contiguous subarray. Returns: The maximum sum of a contiguous subarray of size k. if len(nums) < k: return 0","solution":"def max_sum_subarray(nums, k): Finds the maximum sum of a contiguous subarray of size k. Args: nums: The input array of integers. k: The size of the contiguous subarray. Returns: The maximum sum of a contiguous subarray of size k. if len(nums) < k: return 0 # Calculate the sum of the first k elements window_sum = sum(nums[:k]) max_sum = window_sum # Slide the window over the array minus the first k elements for i in range(len(nums) - k): # Update window sum by excluding the element going out and including the element coming in window_sum += nums[i + k] - nums[i] # Update the maximum sum if the new window sum is larger max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Objective: Implement a Python function which takes a list of integers as input and returns a new list containing only the elements that appear an even number of times in the input list. Example: \`\`\`python numbers = [1, 2, 2, 3, 4, 4, 5, 5, 5] result = even_occurrences(numbers) print(result) # Output: [2, 4] \`\`\` Explanation: In the example above, the numbers 2 and 4 appear an even number of times (2 times each) in the list \`numbers\`. Considerations: 1. You can leverage Python's built-in data structures like dictionaries to efficiently track the frequency of elements in the list. 2. Consider edge cases; for instance, what should happen if the input list is empty?","solution":"def even_occurrences(numbers): Returns a new list containing only the elements that appear an even number of times in the input list. from collections import Counter count = Counter(numbers) return [num for num, freq in count.items() if freq % 2 == 0]"},{"question":"This Python script is designed to process comma-separated values (CSV) data, specifically targeting a user-specified file path. It performs string interpolation using user-defined variables within the CSV content, replacing placeholders in the structure: \\"_{{variable_name}}_\\".","solution":"import csv def process_csv(file_path, variables): Processes a CSV file and performs string interpolation using user-defined variables within the CSV content, replacing placeholders in the structure: \\"_{{variable_name}}_\\". Args: file_path (str): The path to the CSV file. variables (dict): A dictionary containing variable names and their corresponding values. Returns: list: A list of dictionaries containing the processed CSV data. processed_data = [] with open(file_path, mode='r', newline='') as file: csv_reader = csv.DictReader(file) for row in csv_reader: processed_row = {} for key, value in row.items(): for var_name, var_value in variables.items(): placeholder = f\\"_{{{{{var_name}}}}}_\\" if value: value = value.replace(placeholder, var_value) processed_row[key] = value processed_data.append(processed_row) return processed_data"},{"question":"You are given a string input_str. You need to find if a given substring, search_str, is a subsequence of the input string. If it finds the subsequence return the starting index of the first instance of the subsequence, otherwise return -1. Example: input_str = “abcde” search_str = “ace” Output: 0 input_str = \\"abcde\\" search_str = \\"aec\\" output: -1 Let me know if you can help me with the function which take the input strings and return the starting index?","solution":"def find_subsequence_index(input_str, search_str): Returns the starting index of the first instance of the subsequence search_str in input_str or -1 if search_str is not a subsequence of input_str. n, m = len(input_str), len(search_str) j = 0 # index for search_str # Traverse input_str and search_str for i in range(n): if j < m and input_str[i] == search_str[j]: j += 1 if j == m: # All characters in search_str are found in sequence break if j == m: return 0 return -1"},{"question":"This code seems to find the maximum element \`\`\`python def find_max(nums): Returns the index of the maximum element in a list of numbers. Args: nums: A list of numbers. Returns: The index of the maximum element in the list. max_index = 0 for i in range(1, len(nums)): if nums[i] > nums[max_index]: max_index = i return max_index \`\`\` **How it works:** * The function initializes \`max_index\` to 0, assuming the first element is the maximum. 1. **Iteration:** It then iterates through the list starting from the second element (index 1) using a \`for\` loop. 2. **Comparison:** Inside the loop, it compares the current element \`nums[i]\` with the element at the current \`max_index\`. 3. **Update \`max_index\`:** If the current element is larger than the element at \`max_index\`, it updates \`max_index\` to the current index \`i\`. 4. **Return:** After iterating through the entire list, \`max_index\` will point to the index of the maximum element, which is returned by the function. * **Efficient:** This code is efficient as it iterates through the list only once. **Illustrative Example:** \`\`\`python numbers = [5, 2, 8, 3, 1] max_index = find_max(numbers) print(f'The maximum element is at index: {max_index}') # Output: The maximum element is at index: 2 \`\`\` This code works well for finding the index of the maximum element in a list *Is there way to make it work for \`list\`s that contain strings as well?","solution":"def find_max(nums): Returns the index of the maximum element in a list of numbers or strings. Args: nums: A list of numbers or strings. Returns: The index of the maximum element in the list. if not nums: raise ValueError(\\"List is empty\\") max_index = 0 for i in range(1, len(nums)): # Use str() to convert non-comparable types to their string representations. if str(nums[i]) > str(nums[max_index]): max_index = i return max_index"},{"question":"This code creates a single image from multiple images using OpenCV: \`\`\`python import cv2 import numpy as np def stitch_images(images): Stitches multiple images into a single panorama image. Args: images: A list of image paths. Returns: The stitched panorama image. stitcher = cv2.Stitcher_create(cv2.Stitcher_PANORAMA) status, stitched_image = stitcher.stitch(images) if status == cv2.stitcher_OK: return stitched_image else: print(f\\"Stitching failed with error code {status}\\") return None","solution":"import cv2 import numpy as np def stitch_images(image_paths): Stitches multiple images into a single panorama image. Args: image_paths: A list of image paths. Returns: The stitched panorama image. images = [] for image_path in image_paths: img = cv2.imread(image_path) if img is not None: images.append(img) else: print(f\\"Image at {image_path} could not be loaded.\\") stitcher = cv2.Stitcher_create(cv2.Stitcher_PANORAMA) status, stitched_image = stitcher.stitch(images) if status == cv2.Stitcher_OK: return stitched_image else: print(f\\"Stitching failed with error code {status}\\") return None"},{"question":"Objective: Develop a deep learning model that can classify images into 5 categories: Dog, Cat, Bird, Fish, and Reptile. Dataset: A labelled dataset consisting of images for each of the five categories will be provided. Tools: We can use PyTorch or TensorFlow, whichever is preferred. Here's a basic outline of the steps involved: 1. Data Preprocessing: Load and split the dataset into training, validation, and test sets. Resize images to a consistent size. Normalize pixel values for better training performance. 2. Model Architecture: Choose a deep learning architecture suitable for image classification (e.g., Convolutional Neural Network - CNN). Design the network layers (convolutional, pooling, fully connected) to extract features from images and classify them into the five categories. 3. Training: Define a loss function (e.g., categorical cross-entropy) to measure the difference between predicted and actual labels. Train the model on the training set using an optimization algorithm (e.g., stochastic gradient descent) Monitor performance on the validation set to prevent overfitting. Choose appropriate hyperparameters like batch size and learning rate 4. Evaluation: Evaluate the trained model's performance on the test set using metrics such as accuracy, precision, recall, and F1-score. Could you elaborate more on each of these steps?","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"This is what I've started creating. \`\`\`python import random def guess_the_number_game(): number = random.randint(1, 100) guesses_left = 7 print(\\"Welcome to the Guess the Number Game!\\") print(\\"I'm thinking of a number between 1 and 100.\\") while guesses_left > 0: print(f\\"You have {guesses_left} guesses left.\\") try: guess = int(input(\\"Guess a number: \\")) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue if guess < number: print(\\"Too low! Guess higher.\\") elif guess > number: print(\\"Too high! Guess lower.\\") else: print(f\\"Congratulations! You guessed the number {number} in {7 - guesses_left} tries!\\") return guesses_left -= 1 print(f\\"You ran out of guesses! The number was {number}.\\") guess_the_number_game() \`\`\` This is a simple number guessing game where the player has 7 guesses to guess a random number between 1 and 100. In this game: The player is presented with a welcome message and instructions. The player can input their guesses. *It validates the input to ensure it's a number.* It provides feedback on whether the guess is too high, too low, or correct. The game ends when: * The player guesses the correct number. * The player runs out of guesses. This is a good start, but I'd like to improve it. Here are some ideas: * **Difficulty levels: ** Allow the player to choose between easy (1-50), medium (1-100), and hard (1-200). * **Hint system: ** If the player is stuck after a couple of guesses, offer a hint, such as \\"The number is even\\" or \\"The number is divisible by 3.\\" * **Scorekeeping:** Keep track of players' best scores for each difficulty level. * **Play again: ** Allow the player to play again after the game ends. * Can you help me implement these enhancements?","solution":"import random def get_hint(number): hints = [] if number % 2 == 0: hints.append(\\"The number is even.\\") else: hints.append(\\"The number is odd.\\") if number % 3 == 0: hints.append(\\"The number is divisible by 3.\\") else: hints.append(\\"The number is not divisible by 3.\\") return hints def guess_the_number_game(): scores = {\\"easy\\": [], \\"medium\\": [], \\"hard\\": []} while True: print(\\"Welcome to the Guess the Number Game!\\") print(\\"Choose your difficulty level:\\") print(\\"1. Easy (1-50)\\") print(\\"2. Medium (1-100)\\") print(\\"3. Hard (1-200)\\") try: difficulty = int(input(\\"Enter the difficulty level (1-3): \\")) except ValueError: print(\\"Invalid input. Please enter 1, 2, or 3.\\") continue if difficulty == 1: number = random.randint(1, 50) max_number = 50 elif difficulty == 2: number = random.randint(1, 100) max_number = 100 elif difficulty == 3: number = random.randint(1, 200) max_number = 200 else: print(\\"Invalid input. Please enter 1, 2, or 3.\\") continue guesses_left = 7 print(f\\"I'm thinking of a number between 1 and {max_number}.\\") while guesses_left > 0: print(f\\"You have {guesses_left} guesses left.\\") try: guess = int(input(\\"Guess a number: \\")) except ValueError: print(\\"Invalid input. Please enter a number.\\") continue if guess < number: print(\\"Too low! Guess higher.\\") elif guess > number: print(\\"Too high! Guess lower.\\") else: score = 7 - guesses_left + 1 scores_level = [\\"easy\\", \\"medium\\", \\"hard\\"][difficulty-1] scores[scores_level].append(score) best_score = min(scores[scores_level]) print(f\\"Congratulations! You guessed the number {number} in {score} tries!\\") print(f\\"Your best score in {scores_level} level is {best_score} tries.\\") break if guesses_left == 5 or guesses_left == 3: hints = get_hint(number) print(f\\"Hint: {random.choice(hints)}\\") guesses_left -= 1 else: print(f\\"You ran out of guesses! The number was {number}.\\") play_again = input(\\"Would you like to play again? (yes/no): \\").lower() if play_again != \\"yes\\": break"},{"question":"def longestPalindrome(s: str) -> int, int: Given a string s, return the start & end index of the longest palindromic substring in s. n = len(s) if n < 2: return 0, 0","solution":"def longestPalindrome(s: str) -> (int, int): Given a string s, return the start & end index of the longest palindromic substring in s. n = len(s) if n < 2: return 0, 0 start, end = 0, 0 def expandAroundCenter(left: int, right: int): nonlocal start, end while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 left += 1 right -= 1 if right - left > end - start: start, end = left, right for i in range(n): expandAroundCenter(i, i) expandAroundCenter(i, i + 1) return start, end"},{"question":"This is the code I have so far for a tic tac toe game using Python: \`\`\`python board = [' ' for _ in range(9)] def print_board(): print('-------------') for i in range(3): print('|', board[i], '|', board[i + 3], '|', board[i + 6], '|') print('-------------') def player_input(): marker = '' while not (marker == 'X' or marker == 'O'): marker = input('Player 1: Choose X or O: ').upper() return marker def place_marker(marker, position): board[position - 1] = marker print_board() player1_marker = player_input() print(f\\"Player 1 chose: {player1_marker}\\") \`\`\` So far, I have managed to create the empty board, get the input from the player, and display it to the console. I know I still need to add some functionalities to create a fully functional tic tac toe game: * Implement a **check_win** function to check if a player has won the game. * Function for **choosing a position** on the board. * Handle **player turns** * **Game loop** to keep the game running till the game is won or a tie. Can you please help me to add these functionalities?","solution":"board = [' ' for _ in range(9)] def print_board(): print('-------------') for i in range(3): print('|', board[i * 3], '|', board[i * 3 + 1], '|', board[i * 3 + 2], '|') print('-------------') def player_input(): marker = '' while not (marker == 'X' or marker == 'O'): marker = input('Player 1: Choose X or O: ').upper() return marker def place_marker(marker, position): board[position - 1] = marker def check_win(marker): win_combinations = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] ] for combo in win_combinations: if all(board[i] == marker for i in combo): return True return False def choose_position(): position = 0 while position not in range(1, 10) or board[position - 1] != ' ': try: position = int(input('Choose your position (1-9): ')) except ValueError: print(\\"Invalid input. Please enter a number between 1 and 9.\\") return position def is_board_full(): return ' ' not in board def play_game(): print_board() player1_marker = player_input() player2_marker = 'O' if player1_marker == 'X' else 'X' print(f\\"Player 1 is {player1_marker}, Player 2 is {player2_marker}\\") game_on = True current_marker = player1_marker while game_on: position = choose_position() place_marker(current_marker, position) print_board() if check_win(current_marker): print(f\\"Player {1 if current_marker == player1_marker else 2} wins!\\") game_on = False elif is_board_full(): print(\\"It's a tie!\\") game_on = False else: current_marker = player2_marker if current_marker == player1_marker else player1_marker # Uncomment to start a tic-tac-toe game in interactive mode # play_game()"},{"question":": You are given a sorted array of integers called \`nums\`. Write a function that determines if there exists any element in the array whose square is equal to a given integer \`target\`. **Example:** * \`nums = [-3, -1, 0, 3, 5, 9]\` * \`target = 9\` * **Output:** True **Constraints:** * \`1 <= len(nums) <= 10^4\` * \`-10^4 <= nums[i] <= 10^4\` * \`0 <= target <= 10^8\` \`\`\`python def squared_element_exists(nums, target): Determines if the square of any element in a sorted array equals a target integer. Args: nums: A sorted array of integers. target: An integer representing the target value. Returns: True if there exists an element in nums whose square equals target, False otherwise. # Write your code here \`\`\` **Requirements:** * Your solution should have a time complexity of O(log n) where n is the length of the array. * You should leverage the fact the array is sorted. **Bonus:** Can you solve this problem without using any built-in list functions (like \`in\` or \`sort\`)?","solution":"def squared_element_exists(nums, target): Determines if the square of any element in a sorted array equals a target integer. Args: nums: A sorted array of integers. target: An integer representing the target value. Returns: True if there exists an element in nums whose square equals target, False otherwise. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 square = nums[mid] ** 2 if square == target: return True elif square < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"Problem Statement: You are given a list of integers. Write a Python code to find the maximum product of two numbers in the list.","solution":"def max_product_of_two(nums): Returns the maximum product of two numbers in the list. if len(nums) < 2: raise ValueError(\\"The list must have at least two elements.\\") nums_sorted = sorted(nums, reverse=True) return max(nums_sorted[0] * nums_sorted[1], nums_sorted[-1] * nums_sorted[-2])"},{"question":"Here is some code that simulates a simple dice game: \`\`\`python import random def roll_dice(): return random.randint(1, 6) def play_game(): score = 0 for _ in range(3): roll = roll_dice() score += roll print(f\\"You rolled a {roll}. Your current score is {score}.\\") print(f\\"Your final score is {score}.\\") play_game() \`\`\` This code does the following: 1. **Defines a \`roll_dice()\` function:** This function generates a random integer between 1 and 6 (inclusive) representing a dice roll. 2. **Defines a \`play_game()\` function:** This function simulates a three-round game. * It initializes a \`score\` variable to 0. * Uses a \`for\` loop to iterate three times (for each round). * In each round, it calls \`roll_dice()\` to get the roll result and adds it to the current \`score\`. * It prints the roll result and the current score after each round. * After the three rounds, it prints the final score. Now, I want to modify this code to be more sophisticated. I wanted to add the following features: 1. **Player Options:** Give the player the option to \\"roll\\" or \\"hold\\" in each round. * If the player chooses to \\"roll\\", a dice is rolled and added to their score. * If the player chooses to \\"hold\\", their turn ends, and their current score is kept. 2. **Target Score:** Introduce a target score that the player needs to reach to win. The game continues until the player reaches or exceeds the target score. 3. **Computer Opponent:** Add a simple computer opponent that also makes \\"roll\\" or \\"hold\\" decisions. The computer can apply a simple strategy, like holding when its score is higher than a certain thresold. \`\`\`python import random def roll_dice(): return random.randint(1, 6) def play_game(): target_score = 20","solution":"import random def roll_dice(): return random.randint(1, 6) def player_decision(): decision = input(\\"Do you want to 'roll' or 'hold'? \\") while decision not in ['roll', 'hold']: print(\\"Invalid input. Please enter 'roll' or 'hold'.\\") decision = input(\\"Do you want to 'roll' or 'hold'? \\") return decision def computer_decision(score): if score >= 15: return 'hold' return 'roll' def play_game(): target_score = 20 player_score = 0 computer_score = 0 while player_score < target_score and computer_score < target_score: print(\\"nPlayer's turn:\\") player_turn = True while player_turn and player_score < target_score: decision = player_decision() if decision == 'roll': roll = roll_dice() player_score += roll print(f\\"You rolled a {roll}. Your current score is {player_score}.\\") if player_score >= target_score: break else: player_turn = False if player_score >= target_score: break print(\\"nComputer's turn:\\") computer_turn = True while computer_turn and computer_score < target_score: decision = computer_decision(computer_score) print(f\\"Computer decides to {decision}.\\") if decision == 'roll': roll = roll_dice() computer_score += roll print(f\\"Computer rolled a {roll}. Computer's current score is {computer_score}.\\") if computer_score >= target_score: break else: computer_turn = False if player_score >= target_score: print(f\\"nCongratulations! You won with a score of {player_score}.\\") elif computer_score >= target_score: print(f\\"nComputer wins with a score of {computer_score}. Better luck next time!\\") if __name__ == \\"__main__\\": play_game()"},{"question":"For the following problems: * **Use Python** \`\`\`python def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = int(input(\\"Enter a non-negative integer: \\")) if num < 0: print(\\"Factorial is not defined for negative numbers.\\") else: print(\\"The factorial of\\", num, \\"is\\", factorial(num)) \`\`\` **1. Explain the concept of recursion.** **2. How does recursion work in the provided Python code?","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 else: return n * factorial(n-1) def explain_recursion(): Returns an explanation of recursion concept. return ( \\"Recursion is a programming technique where a function calls itself in order to \\" \\"solve a problem. The process involves the function repeatedly invoking itself \\" \\"with modified arguments until it reaches a base case, which stops the recursion. \\" \\"In many recursive functions, a condition (base case) is defined to prevent \\" \\"infinite recursion and to provide an answer for the simplest form of the problem.\\" ) def how_recursion_works(): Returns an explanation of how recursion works in the provided \`factorial\` function. return ( \\"In the provided Python code, recursion works within the \`factorial\` function. \\" \\"The function calculates the factorial of a non-negative integer n. The base case \\" \\"is defined as \`if n == 0\`, which returns 1 (the factorial of 0 is 1). If n is not \\" \\"zero, the recursive step returns \`n * factorial(n-1)\`, meaning the function calls \\" \\"itself with the argument \`n-1\`. This process continues until the base case is met. \\" \\"For example, \`factorial(3)\` will result in \`3 * factorial(2)\`, which results in \\" \\"\`3 * (2 * factorial(1))\`, which finally results in \`3 * (2 * 1 * factorial(0))\`, \\" \\"ending the recursion with factorial(0) returning 1, thus producing result 3*2*1*1.\\" )"},{"question":"Project: We are going to build a basic chatbot. Here's what we need: A simple greeting Ability to ask the user for their name Ability to remember the user’s name and address the user by their name in subsequent responses. Let me know when you're ready! Let's get coding! \`\`\`python name = \\"\\" def greet(): Greets the user and asks for their name. print(\\"Hello there!\\") global name name = input(\\"What is your name?","solution":"class ChatBot: def __init__(self): self.user_name = None def greet(self): Greets the user and asks for their name. print(\\"Hello there!\\") self.user_name = input(\\"What is your name? \\") def respond(self): Responds to the user using their name. if self.user_name: print(f\\"Nice to meet you, {self.user_name}!\\") else: print(\\"I don't know your name yet. Please tell me your name by using the 'greet' method.\\")"},{"question":"Write a Python code to create a function that accepts a string as input and returns the sum of the ASCII values of the characters in the string.","solution":"def sum_ascii_values(s): Returns the sum of the ASCII values of the characters in the string s. :param s: The input string :return: Sum of ASCII values of characters in s return sum(ord(char) for char in s)"},{"question":"This program aims to translate user inputted English text into the corresponding Pig Latin word. The user inputs English text and the program outputs Pig Latin text. Example: Input: hello world Output: ellohay orldway Here are the rules for converting English words to Pig Latin: 1. If a word begins with a consonant, move the first consonant or consonant cluster to the end of the word and add \\"ay\\". 2. If a word begins with a vowel, add \\"way\\" to the end of the word. \`\`\`python def pig_latin(word): Translates a single English word into Pig Latin. # Your code here. vowels = \\"aeiouAEIOU\\" if word[0] in vowels: return word + \\"way\\" else: # Find the first vowel for i in range(1, len(word)): if word[i] in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" def translate_sentence(sentence): Translates an entire English sentence into Pig Latin. # Your code here. words = sentence.split() translated_words = [pig_latin(word) for word in words] return \\" \\".join(translated_words) # Get input from the user sentence inpu t = input(\\"Enter an English sentence: \\") # Translate the sentence into Pig Latin translated_sentence = translate_sentence(sentence.lower() ) # Print the translated sentence print(\\"Pig Latin translation:\\", translated_sentence) \`\`\` Can someone help me finish the code and help me understand the logic behind the code?","solution":"def pig_latin(word): Translates a single English word into Pig Latin. vowels = \\"aeiouAEIOU\\" if word[0] in vowels: return word + \\"way\\" else: # Find the first vowel for i in range(1, len(word)): if word[i] in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" def translate_sentence(sentence): Translates an entire English sentence into Pig Latin. words = sentence.split() translated_words = [pig_latin(word) for word in words] return \\" \\".join(translated_words) if __name__ == \\"__main__\\": # Get input from the user sentence = input(\\"Enter an English sentence: \\") # Translate the sentence into Pig Latin translated_sentence = translate_sentence(sentence.lower()) # Print the translated sentence print(\\"Pig Latin translation:\\", translated_sentence)"},{"question":"This is a task: > Given a string, return the first non-repeating character in it. If there is no non-repeating character, return None. Let's call this function \`first_non_repeating_character\` Here are some examples: * \`first_non_repeating_character(\\"abcabcbb\\")\` returns \`'b'\` * \`first_non_repeating_character(\\"aabb\\")\` returns \`None\` Can you write the code for this function in Python? \`\`\`python def first_non_repeating_character(string): Given a string, return the first non-repeating character in it. If there is no non-repeating character, return None. For example: first_non_repeating_character(\\"abcabcbb\\") == 'b' first_non_repeating_character(\\"aabb\\") == None","solution":"def first_non_repeating_character(string): Given a string, return the first non-repeating character in it. If there is no non-repeating character, return None. For example: first_non_repeating_character(\\"abcabcbb\\") == 'b' first_non_repeating_character(\\"aabb\\") == None from collections import Counter # Create a counter for all characters in the string char_count = Counter(string) # Find the first character that appears only once for char in string: if char_count[char] == 1: return char # If no such character exists, return None return None"},{"question":"The code provides instructions on how to write a Python function that returns the second largest element in a list. \`\`\`python def get_second_largest(numbers): Returns the second largest element in a list of numbers. Args: numbers: A list of numbers. Returns: The second largest element in the list, or None if the list has less than two elements. if len(numbers) < 2: return None # Remove duplicates to avoid issues with multiple occurences # of the largest number unique_numbers = list(set(numbers)) # Sort the list in descending order unique_numbers.sort(reverse=True) # Return the second element (second largest) return unique_numbers[1] \`\`\` Can you give me a step by step breakdown of the codes function?","solution":"def get_second_largest(numbers): Returns the second largest element in a list of numbers. Args: numbers: A list of numbers. Returns: The second largest element in the list, or None if the list has less than two elements. if len(numbers) < 2: return None # Remove duplicates to avoid issues with multiple occurrences # of the largest number unique_numbers = list(set(numbers)) # Sort the list in descending order unique_numbers.sort(reverse=True) # Return the second element (second largest) return unique_numbers[1]"},{"question":"You are given a string \`s\` consisting of lowercase English letters. You want to split the string into the minimal number of substrings such that each substring is a palindrome. Example: Input: \`\`\` s = \\"aab\\" \`\`\` Output: \`\`\` 2 \`\`\` Explanation: The string can be split into \\"aa\\" and \\"b\\". Both are palindromes. Constraints: - 1 <= length of string \`s\` <= 1000 Code Requirements: - Write a Python function \`min_cuts(s)\` which takes a string \`s\` as input and returns the minimum number of cuts required to make the string \`s\` a concatenation of palindromic substrings. - Explain the time and space complexity of your algorithm. Bonus: Can you improve the performance of your solution by using dynamic programming?","solution":"def min_cuts(s): Returns the minimum number of cuts required to make the string s a concatenation of palindromic substrings. n = len(s) is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 2: is_palindrome[i][j] = (s[i] == s[j]) else: is_palindrome[i][j] = (s[i] == s[j]) and is_palindrome[i+1][j-1] dp = [float('inf')] * n for i in range(n): if is_palindrome[0][i]: dp[i] = 0 else: for j in range(i): if is_palindrome[j+1][i]: dp[i] = min(dp[i], dp[j] + 1) return dp[-1] # Time Complexity: O(n^2) - we use two nested loops of length n to fill the palindrome table and to compute cuts. # Space Complexity: O(n^2) - we use a 2D list to store whether substrings are palindromes and a list of size n for dp."},{"question":"This text talks about how to build a simple chatbot named \`hello_bot\`: \`\`\`python def hello_bot(): This function allows the user to interact with a simple chatbot. user_input = input(\\"Hello! What can I do for you?","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. A palindrome is a string that reads the same forwards and backwards. s = ''.join(filter(str.isalnum, s)).lower() return s == s[::-1]"},{"question":"Objective: Develop a Python program for a simple text-based adventure game. Gameplay: The player starts in a room and is presented with a list of possible actions. Based on their choice, they progress through the game. Features: - At least 3 rooms connected in a meaningful way (e.g., a house with living room, kitchen, and garden). - Choices that directly affect the story's outcome. - Basic inventory system (optional). Code Structure: - Use functions to organize the code. - Employ a dictionary or similar data structure to represent rooms and their connections. Example Gameplay: \`\`\` You are standing in a living room. There is a door to the north and a window to the east. What do you do?","solution":"def adventure_game(): rooms = { 'living_room': { 'description': 'You are standing in a living room. There is a door to the north and a window to the east.', 'actions': { 'go north': 'kitchen', 'go east': 'garden', 'sit': 'You sit on the couch and relax for a moment.' } }, 'kitchen': { 'description': 'You have entered the kitchen. There is a door to the south.', 'actions': { 'go south': 'living_room', 'cook': 'You start cooking a meal.' } }, 'garden': { 'description': 'You are in a garden with beautiful flowers. There is a window to the west.', 'actions': { 'go west': 'living_room', 'pick flower': 'You pick a beautiful flower from the garden.' } } } inventory = [] current_room = 'living_room' def describe_room(room): return rooms[room]['description'] def get_actions(room): return rooms[room]['actions'] while True: print(describe_room(current_room)) actions = get_actions(current_room) print('Your actions are:', ', '.join(actions.keys())) action = input('What do you do? ').strip().lower() if action in actions: if action.startswith('go '): current_room = actions[action] else: result = actions[action] print(result) if action == 'pick flower': inventory.append('flower') elif action == 'cook': inventory.append('cooked meal') else: print('Invalid action. Please try again.')"},{"question":"Can you generate code for a basic web scraper in Python using BeautifulSoup library?","solution":"import requests from bs4 import BeautifulSoup def get_page_title(url): Returns the title of the web page at the specified URL. Parameters: url (str): The URL of the web page to scrape. Returns: str: The title of the web page. response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') return soup.title.string"},{"question":"You are given an array of numbers. Your goal is to find the subarray with the largest product. For example, given the array:[-2, 3, -2, 4] The subarray [3, -2, 4] has the largest product of 24. You must write the function \`\`\`python def max_product_subarray(nums): \`\`\` That takes an array of numbers as input and returns the maximum product of any contiguous subarray within that array. **Considerations:** * The input array can contain both positive and negative numbers. * The array can be empty. * The maximum product subarray can be the entire array. Please provide the function code and a clear explanation of its logic. **Bonus:** * What is the time and space complexity of your solution?","solution":"def max_product_subarray(nums): Given an array of integers, find the subarray with the largest product. Args: nums: A list of integers. Returns: An integer representing the maximum product of any contiguous subarray. if not nums: return 0 # If the list is empty, return 0 # Initialize variables to store the maximum and minimum products up to the current position max_product = min_product = result = nums[0] for num in nums[1:]: # When negative number is encountered, swap maximum and minimum product if num < 0: max_product, min_product = min_product, max_product # Update the max_product and min_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) # Update the result to be the max_product found so far result = max(result, max_product) return result # Time complexity: O(n), where n is the length of the input list # Space complexity: O(1), as we are using constant space independent of the input size"},{"question":"Here **Problem:** A robot vacuum cleaner is navigating a rectangular room. The room has obstacles in it, which are represented by squares on a grid. The vacuum cleaner starts at the top-left corner and needs to reach the bottom-right corner. **Input:** The input will be a 2D array (list of lists) representing the grid. * '0' represents an empty space. * '1' represents an obstacle. * The top-left corner will always be '1'. **Output:** * If the vacuum cleaner can reach the bottom-right corner, return the shortest path as a list of directions ('U' for up, 'D' for down, 'L' for left, 'R' for right). * If the vacuum cleaner cannot reach the bottom-right corner, return an empty list. **Example:** \`\`\` Input: [[1, 0, 0], [0, 0, 0], [0, 0, 1]] Output: ['D', 'D', 'R', 'R'] \`\`\` * **I will provide inputs as lists of strings each representing a row** **Please note:** You can assume: * The start position will always be the top-left corner. * The end position will always be the bottom-right corner. Let me know your solutions in Python! Let's get started! What's the first thing you would \`\`\`python def find_path(grid): if grid[0][0] == '1': return [] \`\`\` My code checks if the starting cell is blocked. Good first step. What should I do next?","solution":"from collections import deque def find_path(grid): if grid[0][0] == '1': return [] # Directions: down, right, up, left directions = { (1, 0): 'D', (0, 1): 'R', (-1, 0): 'U', (0, -1): 'L' } rows = len(grid) cols = len(grid[0]) queue = deque([(0, 0, [])]) # Each entry is (row, col, path) visited = {(0, 0)} while queue: r, c, path = queue.popleft() if (r, c) == (rows-1, cols-1): return path for (dr, dc), direction in directions.items(): nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == '0' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, path + [direction])) return []"},{"question":"Problem Statement: You are given a string of numbers and you need to find the longest increasing subsequence within that string. Input: A string of numbers, e.g., \\"12342567\\" Output: The longest increasing subsequence, e.g., \\"1234567\\". Note: The output should maintain the relative order of the digits in the input string. If there are multiple subsequences of the same length, any one of them is acceptable as output. You can use any programming language or method for solving this problem. This problem requires us to efficiently find the longest possible sequence of increasing digits within a given string. A brute-force approach might involve checking all possible subsequences, which becomes impractical for large strings. Therefore, a more efficient algorithm is needed, possibly involving dynamic programming techniques. Can you provide a Python solution using dynamic programming?","solution":"def longest_increasing_subsequence(s: str) -> str: Returns the longest increasing subsequence from the string of numbers. if not s: return \\"\\" n = len(s) lengths = [1] * n previous = [-1] * n for i in range(1, n): for j in range(i): if s[j] < s[i] and lengths[j] + 1 > lengths[i]: lengths[i] = lengths[j] + 1 previous[i] = j max_length = max(lengths) index = lengths.index(max_length) lis = [] while index != -1: lis.append(s[index]) index = previous[index] return ''.join(reversed(lis))"},{"question":"The goal is to have a list of all valid word lists that can be made from a given set of letters. This is not a straightforward word search because the letter set is fixed, and the only output should be a list of all combinable real words. Example Input: Letters: \\"eat\\" Output: - ate - eat - tea Example Input: Letters: \\"aabbcc\\" Output: - bb - bc - bcc - cab - cac and so on.... How can this approach be programmed?","solution":"import itertools def valid_words_from_letters(letters, dictionary): Returns a list of valid words that can be created from the given set of letters. letters : str : A string of letters dictionary : set : A set of valid words (dictionary) return : list : A list of valid words valid_words = set() for i in range(1, len(letters) + 1): for combination in itertools.permutations(letters, i): word = ''.join(combination) if word in dictionary: valid_words.add(word) return sorted(valid_words) # Example usage: # Assuming we have a dictionary of English words example_dictionary = set([\\"ate\\", \\"eat\\", \\"tea\\", \\"bb\\", \\"bc\\", \\"bcc\\", \\"cab\\", \\"cac\\"]) result = valid_words_from_letters(\\"aabbcc\\", example_dictionary) print(result)"},{"question":"Input: A large text file containing paragraphs. Objective: Identify and extract all sentences that contain specific keywords. Example: \`\`\` Input Text File: This is a sample text file. It contains multiple paragraphs. Here is a sentence with the keyword \\"apple\\". Here is another sentence without the keyword. This is another paragraph with the keyword \\"banana\\". Keywords: {\\"apple\\", \\"banana\\"} \`\`\` Output: \`\`\` Here is a sentence with the keyword \\"apple\\". This is another paragraph with the keyword \\"banana\\". \`\`\` Requirements: Efficient keyword matching: The solution should efficiently match keywords against sentences, even for large text files. Case-insensitive matching: Keyword comparisons should be case-insensitive. Partial keyword matches: The solution should allow matching sentences even if the keyword is not a complete word. For example, a sentence containing \\"apples\\" should be matched for the keyword \\"apple\\". Possible Approach: Use regular expressions to pattern match keywords within sentences. Use a library or tool for text processing and keyword extraction (e.g., NLTK, spaCy). What would be a Python code example for this. \`\`\`python def extract_sentences_with_keywords(text_file_path, keywords): from nltk.tokenize import sent_tokenize sentences = sent_tokenize (open (text_file_path, 'r').read()) extracted_sentences = [] for sentence in sentences: #for keyw in keywords: not needed?","solution":"import re def extract_sentences_with_keywords(text, keywords): Extracts sentences from the input text that contain any of the specified keywords. :param text: A large string containing the text to search through. :param keywords: A set of keywords to search for in the text. :return: A list of sentences containing the keywords. # Tokenize text into sentences using regular expression sentences = re.split(r'(?<!w.w.)(?<![A-Z][a-z].)(?<=.|?)s', text) # Create a regex pattern for the keywords keywords_pattern = re.compile(r'|'.join(re.escape(keyword) for keyword in keywords), re.IGNORECASE) # Extract sentences with any keywords extracted_sentences = [sentence for sentence in sentences if keywords_pattern.search(sentence)] return extracted_sentences"},{"question":"You are given an array of integers. Find all unique triplets in the array which give the sum of **zero **. **Example:** Given an array nums = [-1, 0, 1, 2, -1, -4] A solution set is: [ [-1, -1, 2], [-1, 0, 1] ] **Note:** The solution set must not contain duplicate triplets. **Here is my code:** \`\`\`python def threeSum(nums: list[int]) -> list[list[int]]: res = [] nums.sort() for i in range(len(nums)-2): # Skip duplicate values for i if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: res.append([nums[i], nums[left], nums[right]]) # Skip duplicate values for left and right while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return res \`\`\` **My code works.** I'd like to know what else can I improve?","solution":"from typing import List def threeSum(nums: List[int]) -> List[List[int]]: Find all unique triplets in the array that give the sum of zero. Args: nums: List of integers. Returns: List of unique triplets where the sum is zero. res = [] nums.sort() for i in range(len(nums)-2): # Skip duplicate values for i if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: res.append([nums[i], nums[left], nums[right]]) # Skip duplicate values for left and right while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return res"},{"question":"The following is my code: \`\`\`python from itertools import permutations def count_triangles(sticks): Count how many triangles can be formed from a given list of sticks. The input list will contain integers (lengths of the sticks). Triangle Inequality Theorem: sum of two sides of a triangle greater than the third side Args: sticks: A list of integers representing the lengths of the sticks. Returns: The number of triangles that can be formed from the sticks. count = 0 for perm in list(permutations(sticks, 3)): a, b, c = perm if a + b > c and a + c > b and b + c > a: count += 1 return count","solution":"from itertools import combinations def count_triangles(sticks): Count how many triangles can be formed from a given list of sticks. The input list will contain integers (lengths of the sticks). Triangle Inequality Theorem: sum of two sides of a triangle greater than the third side Args: sticks: A list of integers representing the lengths of the sticks. Returns: The number of triangles that can be formed from the sticks. count = 0 for combo in combinations(sticks, 3): a, b, c = sorted(combo) if a + b > c: count += 1 return count"},{"question":"In a 2D grid, I want the robot to move from top left corner to bottom right corner without revisiting any cell. \`\`\` | 1 2 3 | 4 5 6 | 7 8 9 \`\`\` example outputs: 1 -> 2 -> 3 -> 6 -> 9 1 -> 4 -> 5 -> 6 -> 9 **Note:** - The robot can move only in Down (\`D\`) or Right (\`R\`) directions. - The robot can't move diagonally or left upwards. \`\`\` Can you provide Python code to find all possible path * using recursion **Challenge:** **Extra Credit: Can you \`\`\`python \`\`\` **Challenge:** * **Efficiency:** Analyze the time and space complexity of your solution. Can you optimize it further?","solution":"def find_paths(grid, row=0, col=0, path=\\"\\"): Returns a list of all possible paths for the robot to move from the top-left to the bottom-right corner of the grid. Args: - grid (list of list of int): 2D grid. - row (int): current row of the robot. - col (int): current column of the robot. - path (str): current path represented by a sequence of 'D' and 'R'. Returns: - list of str: All valid paths to reach the bottom-right corner. rows = len(grid) cols = len(grid[0]) # If robot is out of the grid bounds if row >= rows or col >= cols: return [] # If robot has reached the bottom-right corner if row == rows - 1 and col == cols - 1: return [path] # Move Right (R) or Down (D) paths_from_right = find_paths(grid, row, col + 1, path + 'R') paths_from_down = find_paths(grid, row + 1, col, path + 'D') # Combining all paths return paths_from_right + paths_from_down"},{"question":"This is the problem I am trying to solve: \`\`\` Given two strings, a and b, return True if they have every vowel in common, and False otherwise. Vowels are defined as: a, e, i, o, and u. \`\`\` \`\`\`python def have_common_vowels(a, b): Given two strings, a and b, return True if they have every vowel in common, and False otherwise. Vowels are defined as: a, e, i, o, and u.","solution":"def have_common_vowels(a, b): Given two strings, a and b, return True if they have every vowel in common, and False otherwise. Vowels are defined as: a, e, i, o, and u. vowels = set('aeiou') vowels_in_a = set([char for char in a.lower() if char in vowels]) vowels_in_b = set([char for char in b.lower() if char in vowels]) return vowels_in_a == vowels_in_b"},{"question":"We are given a binary string (\`str\`), which represents a sequence of heads (\\"H\\") or tails (\\"T\\"). Our goal is to count how many different subsequences of the string represent valid consecutive heads or tails. **Example:** Input: \`str = \\"HTHTHT\\"\` Expected Output: \`4\` The valid subsequences are: - \`\\"HH\\"\` (starts at index 1) - \`\\"TT\\"\` (starts at index 5) - \`\\"HT\\"\` (starts at index 0) - \`\\"TH\\"\` (starts at index 2) **Can you provide a Python implementation for this?","solution":"def count_valid_subsequences(s): Returns the count of valid subsequences in the binary string that represent valid consecutive heads or tails. count = 0 for i in range(len(s) - 1): if s[i] != s[i + 1]: count += 1 return count"},{"question":"I'd like to see code implementing a basic binary search algorithm in Python.","solution":"def binary_search(arr, target): This function implements the binary search algorithm. Parameters: arr (list): A list of elements to search through. The list must be sorted. target: The element to search for in the list. Returns: int: The index of the target element if it is found in the list; otherwise, -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 # Check if target is present at mid if arr[mid] == target: return mid # If target is greater, ignore left half elif arr[mid] < target: left = mid + 1 # If target is smaller, ignore right half else: right = mid - 1 # Target not present in array return -1"},{"question":"This is related to a problem i'm having when writing a program in Python. I'm new to the language. I'm trying to find the shortest path between two nodes in a weighted graph using Dijkstra's algorithm. I have implemented the algorithm but I'm struggling with properly initializing the distances to all nodes. In Dijkstra's algorithm, you need to initialize the distance to the source node to 0 and the distances to all other nodes to infinity. I have represented the graph using an adjacency list. Here's a snippet of my code: \`\`\`python import heapq def dijkstra(adj_list, start_node): distances = {} for node in adj_list: distances[node] = float('inf') distances[start_node] = 0 # rest of the Dijkstra's Algorithm return distances \`\`\` My Issue: This code initializes all the distances correctly, but the issue arises when I'm dealing with large graphs. Using \`float('inf')\` to represent infinity for every single node in a very large graph takes up a lot of memory as infinities can be represented with fewer bits than floating-point numbers, Is there a more memory-efficient way to represent infinity in this context within the context of Dijkstra's algorithm?","solution":"import heapq def dijkstra(adj_list, start_node): distances = {node: None for node in adj_list} distances[start_node] = 0 priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if distances[current_node] is not None and current_distance > distances[current_node]: continue for neighbor, weight in adj_list[current_node]: distance = current_distance + weight if distances[neighbor] is None or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"We are playing a game where we take turns guessing a number between 1 to 100. Player 1 guesses first. When a player guesses, the other player tells them if their guess is \\"higher\\", \\"lower\\", or \\"correct\\". Can you write a simple program to simulate this game?","solution":"import random class NumberGuessingGame: def __init__(self): self.target_number = random.randint(1, 100) self.turn = 1 # Player 1 starts def guess(self, number): if number < 1 or number > 100: result = \\"Guess out of bounds! Please choose a number between 1 and 100.\\" elif number < self.target_number: result = \\"higher\\" self.turn = 2 if self.turn == 1 else 1 elif number > self.target_number: result = \\"lower\\" self.turn = 2 if self.turn == 1 else 1 else: result = \\"correct\\" return result def current_turn(self): return self.turn def reset_game(self): self.target_number = random.randint(1, 100) self.turn = 1"},{"question":"The following program defines a function \`rotate\` that takes a string \`s\` and an integer \`n\` as input, and returns the string \`s\` rotated right by \`n\` characters. Examples: \`\`\`python def rotate(s, n): return s[-n:] + s[:-n] print(rotate(\\"hello\\", 2))","solution":"def rotate(s, n): Rotates the string s to the right by n characters. Args: s (str): The input string. n (int): The number of characters to rotate by. Returns: str: The rotated string. if not s: return s n %= len(s) # Handle cases where n > len(s) return s[-n:] + s[:-n] # Example usage print(rotate(\\"hello\\", 2)) # \\"lohel\\""},{"question":"You are given a string S consisting of uppercase English letters. Find the length of the longest substring of S which is a palindrome. Example: 1. For S = \\"BANANAS\\", the output should be 5, because \\"ANANA\\" is the longest palindromic substring. 2. For S = \\"AABAA\\", the output should be 5, because \\"AABAA\\" is the longest palindromic substring. 3. For S = \\"RACECAR\\", the output should be 7, because \\"RACECAR\\" itself is the longest palindromic substring. I need: A Python implementation of a solution to this problem. I've looked online for solutions, but I'm having trouble understanding the logic behind them, especially when it comes to time complexity . Can you provide a solution with detailed explanations, especially regarding time complexity?","solution":"def longest_palindromic_substring_length(S): Finds the length of the longest palindromic substring in S. :param S: String consisting of uppercase English letters :return: Length of the longest palindromic substring if not S: return 0 n = len(S) max_length = 1 # Table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True start = 0 # Check for substrings of length 2. for i in range(n - 1): if S[i] == S[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2. for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Check if current substring is palindrome if dp[i + 1][j - 1] and S[i] == S[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"Exercise 1: Write a function called \`reverse_string(s)\` that takes a string as input and returns the reverse of that string. Example: \`\`\` >>> reverse_string(\\"hello\\") 'olleh' \`\`\` Exercise 2: Write a function called \`is_palindrome(s)\` that takes a string as input and returns \`True\` if the string is a palindrome, and \`False\` otherwise. Example: \`\`\` >>> is_palindrome(\\"racecar\\") True >>> is_palindrome(\\"hello\\") False \`\`\` Bonus: For both exercises, consider what happens if empty strings or strings with only whitespace are provided as input. How would you handle these cases?","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] def is_palindrome(s): Returns True if the input string s is a palindrome, and False otherwise. stripped_s = s.replace(\\" \\", \\"\\") return stripped_s == stripped_s[::-1]"},{"question":"This is a follow-up to a previous conversation where we discussed about creating a Python program that takes several files and merges them into a single file. \`\`\`python import glob def merge_files(file_pattern): Merges all files matching the given pattern into a single file. Args: file_pattern: A shell-style wildcard pattern for the files to merge. Returns: None with open('merged_file.txt', 'w') as outfile: for filename in glob.glob(file_pattern): with open(filename, 'r') as infile: outfile.write(infile.read()) # Example usage: merge_files('data/*.txt') \`\`\` The code above works, but I have two questions: 1. **How to let the user choose the output filename?","solution":"import glob def merge_files(file_pattern, output_filename='merged_file.txt'): Merges all files matching the given pattern into a single file. Args: file_pattern: A shell-style wildcard pattern for the files to merge. output_filename: The name of the output file. Returns: None with open(output_filename, 'w') as outfile: for filename in glob.glob(file_pattern): with open(filename, 'r') as infile: outfile.write(infile.read()) # Example usage: # merge_files('data/*.txt', 'output_merged_file.txt')"},{"question":"This problem was presented to me in a coding challenge but unfortunately, I did not succeed. **Challenger Name:** LeetCode **Problem Name:** Longest Substring Without Repeating Characters **Difficulty:** Medium **Description:** Given a string \`s\`, find the length of the longest substring without repeating characters. **Example 1:** \`\`\` Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\". **Example 2:** Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\". \`\`\` **My approach:** I was thinking about using two pointers, starting from the beginning of the string and moving both along until a repeating character was found. I knew this wasn't the optimal approach, but I struggled to develop an efficient solution. Can you please provide a more efficient solution to this problem, explaining the logic behind it?","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} max_length = start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 else: max_length = max(max_length, i - start + 1) char_index[char] = i return max_length"},{"question":"I need a Python code that will process a text file, read the data within and identify all the phone numbers within the text. \`\`\`python import re def extract_phone_numbers(file_path): Extracts phone numbers from a text file. Args: file_path: The path to the text file. Returns: A list of phone numbers found in the file. phone_numbers = [] with open(file_path, 'r') as f: text = f.read() # Use a regular expression to find phone numbers phone_pattern = r'+?","solution":"import re def extract_phone_numbers(file_path): Extracts phone numbers from a text file. Args: file_path: The path to the text file. Returns: A list of phone numbers found in the file. phone_numbers = [] with open(file_path, 'r') as file: text = file.read() # Use a regular expression to find phone numbers phone_pattern = r'bd{3}[-.s]??d{3}[-.s]??d{4}b|(d{3})s*d{3}[-.s]??d{4}|bd{10}b' phone_numbers = re.findall(phone_pattern, text) return phone_numbers"},{"question":"I'm trying to solve a problem in dynamic programming. **Problem Statement:** Find the longest increasing subsequence (LIS) of a given sequence. **Example:** Input: [1, 3, 2, 4, 5] Output: [1, 2, 4, 5] **My Approach:** I'm using a dynamic programming approach with a bottom-up approach. 1. **Initialization:** * I create a \`dp\` table of the same size as the input sequence. * Each element \`dp[i]\` will store the length of the LIS ending at index \`i\`. 2. **Iteration:** I iterate through the \`dp\` table from index 1 to the end. * For each element \`dp[i]\`, I iterate through all the previous elements \`dp[j]\` where \`j < i\`. * If \`arr[j] < arr[i]\` (indicating that \`arr[i]\` can extend the subsequence ending at \`j\`), I update \`dp[i]\` as the maximum of \`dp[i]\` and \`dp[j] + 1\`. 3. **Finding the Maximum:** After iterating through the \`dp\` table, I find the maximum value in \`dp\`, which represents the length of the LIS. 4. **Backtracking:** To get the actual subsequence, I backtrack through the \`dp\` table, starting from the index with the maximum value. **Code (Python):** \`\`\`python def longest_increasing_subsequence(arr): n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[j] < arr[i] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 return max(dp) \`\`\` **Problems:** This code currently only returns the length of the LIS. It doesn't return the actual subsequence. **Help Needed:** 1. How can I modify my code to not only return the length of the LIS but also the subsequence itself?","solution":"def longest_increasing_subsequence(arr): n = len(arr) if n == 0: return [] dp = [1] * n previous = [-1] * n for i in range(1, n): for j in range(i): if arr[j] < arr[i] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 previous[i] = j # Find the index of the maximum value in dp max_index = 0 for i in range(1, n): if dp[i] > dp[max_index]: max_index = i # Backtrack to find the sequence lis = [] current_index = max_index while current_index != -1: lis.append(arr[current_index]) current_index = previous[current_index] lis.reverse() return lis"},{"question":"Given an array of integers \`nums\` and an integer \`target\`, return true if there are two numbers in the array that add up to 0 (i.e., satisfy \`num1 + num2 == 0\`), otherwise return false. \`\`\`python def sum_zero(nums: List[int], target = 0) -> bool: Given an array of integers nums and an integer target, return true if there are two numbers in the array that add up to target (i.e., satisfy num1 + num2 == target), otherwise return false. For example: sum_zero([1, -1], 0 ) == True sum_zero([2, 3, 5, -3], 2) == False sum_zero([3, 4, 6, -5], 1) == True sum_zero([1], 2) == False pass # setnums = set(nums) # complement = target # for num in setnums: # if complement - num in setnums: # return True # return False \`\`\` Can you help me write a Python function to solve this?","solution":"from typing import List def sum_zero(nums: List[int], target: int = 0) -> bool: Given an array of integers nums and an integer target, return true if there are two numbers in the array that add up to target (i.e., satisfy num1 + num2 == target), otherwise return false. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"This is a problem for **binary search in Python**. Given a _sorted_ array \`nums\` of integers, find the index of the target value \`target\`. If the target value is found, return its index. If not, return \`-1\`. **Example:** \`\`\` Input: nums = [-1, 0, 3, 5, 9, 12], target = 9 Output: 4 Explanation: 9 exists at index 4 in the array. \`\`\` **Instructions:** Write a Python function \`binary_search(nums, target)\` that performs binary search on the given sorted array. Handle the base cases where the target is found or the search space is exhausted. \`\`\`python def binary_search(nums, target): # Implement your solution here \`\`\` **Tips:** * Initialize two pointers, \`left\` and \`right\`, to point to the start and end of the search space. * In each iteration: * Compute the middle index \`mid\`. * If \`nums[mid] == target\`, you found the target and return \`mid\`. * If \`nums[mid] < target\`, move the \`left\` pointer to \`mid + 1\` to search the right half. * If \`nums[mid] > target\`, move the \`right\` pointer to \`mid - 1\` to search the left half. * Repeat this process until \`left\` crosses \`right\`, indicating the target is not in the array. **Bonus:** What are the time and space complexities for binary search?","solution":"def binary_search(nums, target): Performs binary search on a sorted array to find the index of the target value. If the target value is found, returns its index, otherwise returns -1. :param nums: List[int], a sorted list of integers :param target: int, the integer value to search for :return: int, the index of the target value in the array, or -1 if not found left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1 # Time complexity: O(log n) because we are dividing the search space by half each time. # Space complexity: O(1) because we are using a fixed amount of additional space."},{"question":"This is my code \`\`\`python def minRemove parentheses(s: str) -> str: stack = [] open_parentheses_count = 0 for char in s: if char == '(': open_parentheses_count += 1 stack.append(char) elif char == ')': if open_parentheses_count > 0: open_parentheses_count -= 1 stack.append(char) # Code for removing unnecessary parentheses result = \\"\\".join(stack) return result \`\`\` This code aims to remove minimum number of parentheses to make the given string valid. But it has some issues: The \`#Code for removing unnecessary parentheses\` is where you need to add the logic to remove extra parentheses. Could you please help me complete this function?","solution":"def minRemoveParentheses(s: str) -> str: stack = [] open_parentheses_count = 0 indexes_to_remove = set() for i, char in enumerate(s): if char == '(': open_parentheses_count += 1 stack.append(i) elif char == ')': if open_parentheses_count > 0: open_parentheses_count -= 1 stack.pop() else: indexes_to_remove.add(i) indexes_to_remove = indexes_to_remove.union(set(stack)) result = ''.join([char for i, char in enumerate(s) if i not in indexes_to_remove]) return result"},{"question":"You are given a string, S, of length N. Determine if there exists a substring of S that is a palindrome. **Input Format:** The first line contains an integer, T, denoting the number of test cases. Each test case is represented by a single line containing a string, S. **Output Format:** For each test case, print \\"YES\\" if there exists a palindromic substring within S, otherwise print \\"NO\\". **Constraints:** * 1 ≤ T ≤ 10 * 1 ≤ N ≤ 10^5 * S consists of lowercase English letters only. **Example:** **Input:** 3 aabaa racecar hello **Output:** YES YES NO **Explanation:** * **aabaa:** The substring \\"aba\\" is a palindrome. * **racecar:** The entire string \\"racecar\\" is a palindrome. * **hello:** There is no palindromic substring in \\"hello\\". Can you provide a Python solution for this problem?","solution":"def has_palindromic_substring(s): Returns \\"YES\\" if there exists a palindromic substring in the string s, otherwise \\"NO\\". n = len(s) for length in range(2, n + 1): # Start with length 2 to avoid single character palindromes for i in range(n - length + 1): substring = s[i:i + length] if substring == substring[::-1]: # Check if the substring is a palindrome return \\"YES\\" return \\"NO\\""},{"question":"I am trying to build a simple language model using Python. Here's what I have so far: \`\`\`python import nltk # Download the necessary NLTK data nltk.download('punkt') nltk.download('gutenberg') from nltk.corpus import gutenberg from nltk.tokenize import word_tokenize # Load some text data text = gutenberg.raw('austen-emma.txt') # Tokenize the text tokens = word_tokenize(text) # Build a vocabulary vocabulary = set(tokens) \`\`\` This code downloads text from the Gutenberg corpus, tokenizes it into words, and builds a vocabulary. My next step is to create a simple language model that can predict the next word given a sequence of previous words. **Can you help me with the following:** 1. **Choosing a suitable language modeling approach:** What are some simple language modeling approaches suitable for a beginner?","solution":"from collections import defaultdict, Counter import random def train_bigram_model(tokens): Train a Bigram model using the given tokens. Returns a dictionary mapping each word to a Counter of the subsequent words. bigram_model = defaultdict(Counter) for i in range(len(tokens) - 1): bigram_model[tokens[i]][tokens[i + 1]] += 1 return bigram_model def predict_next_word(bigram_model, current_word): Predict the next word based on the current word using the Bigram model. Returns the most likely next word. if current_word in bigram_model: next_word_counter = bigram_model[current_word] most_common_next_word = next_word_counter.most_common(1)[0][0] return most_common_next_word else: return random.choice(list(bigram_model.keys()))"},{"question":"The problem statement: You are given an array of integers nums and an integer target. Return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9 Only one valid answer exists. Can you provide a Python solution that solves this problem efficiently? \`\`\`python def two_sum(nums, target): Finds two numbers in a list that add up to a given target. Args: nums: A list of integers. target: The target sum. Returns: A list containing the indices of the two numbers that add up to the target, or None if no such pair exists. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return None","solution":"def two_sum(nums, target): Finds two numbers in a list that add up to a given target. Args: nums: A list of integers. target: The target sum. Returns: A list containing the indices of the two numbers that add up to the target, or None if no such pair exists. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return None"},{"question":"How to use this library: \`\`\`python import re def parse_email(email): Parses an email address and returns a dictionary containing the username, domain, and TLD. match = re.match(r\\"([^@]+)@([^.]+).([^.]+)\\", email) if match: return { \\"username\\": match.group(1), \\"domain\\": match.group(2), \\"tld\\": match.group(3), } else: return None","solution":"import re def parse_email(email): Parses the given email address and returns a dictionary containing the username, domain, and top-level domain (TLD) if the email is valid. Otherwise, returns None. Args: email (str): The email address to parse. Returns: dict or None: A dictionary with 'username', 'domain', 'tld' keys if valid, otherwise None. match = re.match(r\\"([^@]+)@([^.]+).([^.]+)\\", email) if match: return { \\"username\\": match.group(1), \\"domain\\": match.group(2), \\"tld\\": match.group(3), } else: return None"},{"question":"This is a question from my Data Structures & Algorithms course: > Given a sorted array of integers and a target value, determine if the target value exists in the array. Return true if the target exists, and false otherwise. > **Example:** > \`\`\` > sorted_array = [2, 5, 7, 8, 11, 12] > target = 11 > result = search(sorted_array, target) > print(result)","solution":"def search(sorted_array, target): Determines if the target value exists in the sorted array using binary search. Arguments: sorted_array -- A list of sorted integers. target -- The integer value to search for in the sorted_array. Returns: True if the target exists in the sorted_array, else False. left, right = 0, len(sorted_array) - 1 while left <= right: mid = (left + right) // 2 if sorted_array[mid] == target: return True elif sorted_array[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"The **Problem:** You are given an array of integers \`nums\` and an integer \`target\`. You need to find the indices of two numbers in the array that add up to the \`target\`. **Example:** \`\`\` nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` **Constraints:** - Each input would have **exactly one solution**, and you may not use the *same* element twice. - You can return the answer in any order. **Can you provide a Python solution using a dictionary?","solution":"def two_sum(nums, target): Returns the indices of two numbers in the array that add up to the target. Args: nums (list of int): List of integers target (int): Target sum Returns: list of int: Indices of the two numbers num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], index] num_to_index[num] = index"},{"question":"This is the problem: You are given a string containing only the characters 'a' and 'b'. You need to find the length of the longest substring that contains an equal number of 'a's and 'b's. Example: Input: \\"aabbabb\\" Output: 4 Explanation: The longest substring with an equal number of 'a's and 'b's is \\"abba\\". **Solution:** \`\`\`python def longest_substring_equal_ab(s): count = 0 max_length = 0 for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] count_a = substring.count('a') count_b = substring.count('b') if count_a == count_b: max_length = max(max_length, len(substring)) return max_length","solution":"def longest_substring_equal_ab(s): Returns the length of the longest substring that contains an equal number of 'a's and 'b's. max_length = 0 count_dict = {0: -1} count = 0 for i, char in enumerate(s): count += 1 if char == 'a' else -1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length"},{"question":"This is a problem: **Given a string s, find the length of the longest substring without repeating characters.** **Example 1:** Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. **Example 2:** Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. **Example 3:** Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. **Constraints:** * 0 <= s.length <= 5 * 104 * s consists of English letters, digits, symbols and spaces. I need to write the code in Python. Here's my attempt: \`\`\`python def length_of_longest_substring(s: str) -> int: longest = 0 start = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: longest = max(longest, i - start + 1) used_chars[char] = i return longest \`\`\` Can you review my code and suggest any improvements?","solution":"def length_of_longest_substring(s: str) -> int: longest = 0 start = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: longest = max(longest, i - start + 1) used_chars[char] = i return longest"},{"question":"This is a **coding challenge**. **Goal:** Implement a function called \`longest_consecutive_sequence\` that takes a list of integers as input and returns the length of the longest consecutive sequence. **Example:** \`\`\` longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4 \`\`\` **Explanation:** The longest consecutive sequence in the input list is \`[1, 2, 3, 4]\`, which has a length of \`4\`. **Constraints:** * The input list may contain duplicate numbers. * The input list may not be sorted. * You can assume that the input list will always contain at least one number. **Instructions:** 1. Implement the \`longest_consecutive_sequence\` function. 2. Provide a clear and concise explanation of your solution. **Bonus:** * Can you optimize your solution to have a time complexity of O(n)?","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive sequence in the list of integers \`nums\`. if not nums: return 0 num_set = set(nums) longest_length = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_length = max(longest_length, current_streak) return longest_length"},{"question":"Objective: Implement a Python function \`find_missing_number(nums)\` that takes a list of integers \`nums\` representing a sequence with one missing number and returns the missing number.","solution":"def find_missing_number(nums): Given a list of integers nums containing n distinct numbers taken from 0, 1, 2, ..., n, returns the one number that is missing from the list. n = len(nums) expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"This is the problem statement: You are given an array of integers nums and an integer target. Return the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. **Example 1:** \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` **Example 2:** \`\`\` Input: nums = [3,2,4], target = 6 Output: [1,2] \`\`\` **Example 3:** \`\`\` Input: nums = [3,3], target = 6 Output: [0,1] \`\`\` I have solved this problem using a brute force approach but it is inefficient. Can you provide a more efficient solution using a hash map?","solution":"def two_sum(nums, target): This function returns indices of the two numbers such that they add up to the target. :param nums: List of integers :param target: Integer target sum :return: List containing two indices num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"This is the problem I am working on: You are given an integer array \`nums\` and an integer \`k\`. Find the **maximum sum** of a contiguous subarray of size \`k\`. **Example:** \`\`\` Input: nums = [2,1,5,1,3,2], k = 3 Output: 9 Explanation: The subarray with the maximum sum is [5,1,3]. \`\`\` I've written the following Python code to solve this problem: \`\`\`python def max_subarray_sum(nums, k): if len(nums) < k: return 0 max_sum = float('-inf') for i in range(len(nums) - k + 1): current_sum = 0 for j in range(i, i + k): current_sum += nums[j] max_sum = max(max_sum, current_sum) return max_sum \`\`\` **Explain how the code works:** The code uses a sliding window approach to find the maximum sum of a contiguous subarray of size \`k\`. Here's a breakdown: 1. **Initialization:** - \`max_sum\` is initialized to negative infinity to ensure that any valid subarray sum will be greater. 2. **Sliding Window:** - The outer loop iterates through the array with a step size of 1. The loop variable \`i\` represents the starting index of the sliding window. - The inner loop calculates the sum of the elements within the current window of size \`k\`. 3. **Updating Maximum Sum:** - After calculating the \`current_sum\` for the current window, it's compared with the current \`max_sum\`. If \`current_sum\` is greater, \`max_sum\` is updated. 4. **Return:** - After iterating through all possible windows, the function returns the \`max_sum\`. **Can you suggest any improvements to the code?","solution":"def max_subarray_sum(nums, k): if len(nums) < k: return 0 # Calculate the sum of the first window max_sum = current_sum = sum(nums[:k]) # Slide the window over the array for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"This is a problem about finding the shortest path in a grid. I have a grid with 10 rows and 10 columns. The grid is represented by a 2D list. I have a starting point (row, column) and an ending point (row, column). I need to find the shortest path from the starting point to the ending point, moving only horizontally or vertically, not diagonally. I'm thinking of using a Breadth-First Search (BFS) algorithm. Can you please provide me with a Python implementation of the BFS algorithm for this problem?","solution":"from collections import deque def bfs_shortest_path(grid, start, end): Uses Breadth-First Search (BFS) to find the shortest path from start to end in a grid. Parameters: - grid (list of list of int): The grid representing the map. - start (tuple of int, int): The starting point (row, column). - end (tuple of int, int): The ending point (row, column). Returns: - list of tuple of int, int: The shortest path from start to end as a list of coordinates. If no path is found, returns an empty list. rows, cols = len(grid), len(grid[0]) visited = set() queue = deque([[(start[0], start[1])]]) while queue: path = queue.popleft() row, col = path[-1] if (row, col) == end: return path for drow, dcol in [(0, 1), (1, 0), (0, -1), (-1, 0)]: r, c = row + drow, col + dcol if 0 <= r < rows and 0 <= c < cols and (r, c) not in visited and grid[r][c] == 0: visited.add((r, c)) new_path = list(path) new_path.append((r, c)) queue.append(new_path) return [] # Example grid # 0 represents an open cell, 1 represents an obstacle example_grid = [ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0] ] start = (0, 0) end = (9, 9) shortest_path = bfs_shortest_path(example_grid, start, end) print(\\"Shortest path from start to end:\\", shortest_path)"},{"question":"My daughter is learning to code and wants to build a simple game. Here's her idea: * **Type of game:** Guessing game * **Mechanics:** * The computer randomly chooses a number between 1 and 100. * The player guesses a number. * The computer tells the player if their guess is too high or too low. * The player keeps guessing until they get the right number. * The game keeps track of how many guesses it took. Can you provide some Python code to help her get started?","solution":"import random def guessing_game(): A simple guessing game where the computer randomly chooses a number between 1 and 100, and the player tries to guess the number with the computer providing feedback on whether the guesses are too high, too low, or correct. The game keeps track of the number of guesses it takes for the player to guess correctly. number_to_guess = random.randint(1, 100) number_of_guesses = 0 guess = None print(\\"Welcome to the guessing game! Try to guess the number between 1 and 100.\\") while guess != number_to_guess: guess = int(input(\\"Enter your guess: \\")) number_of_guesses += 1 if guess < number_to_guess: print(\\"Too low!\\") elif guess > number_to_guess: print(\\"Too high!\\") else: print(f\\"Congratulations! You guessed the number in {number_of_guesses} attempts.\\") return number_of_guesses"},{"question":"You are given a string consisting of lowercase English letters. You need to find the longest substring that contains all the unique characters present in the string. 2. Example: Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\" Can you provide a solution to this problem using Python?","solution":"def longest_unique_substring(s): Returns the longest substring that contains all unique characters present in the string s. if not s: return \\"\\" start, max_len, substr_start = 0, 0, 0 seen = {} for end in range(len(s)): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 substr_start = start return s[substr_start:substr_start + max_len]"},{"question":"In Python, how can I efficiently find the indices of all occurrences of a given substring within a larger string?","solution":"def find_substring_occurrences(haystack, needle): Finds all the start indices of the substring \`needle\` in the string \`haystack\`. Args: - haystack: The larger string. - needle: The substring to find. Returns: - A list of starting indices where \`needle\` is found in \`haystack\`. if not needle: raise ValueError(\\"The substring to find must not be empty.\\") start = 0 indices = [] while True: start = haystack.find(needle, start) if start == -1: break indices.append(start) start += 1 # Move past the last found index return indices"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find the longest substring that contains at most two distinct characters. Example: Input: \\"eceba\\" Output: \\"ece\\" Input: \\"ccaabbb\\" Output: \\"ccaabbb\\" Constraints: The length of the string is in the range [1, 10^4]. The string consists only of lowercase English letters. Can you please provide a solution for this problem in Python?","solution":"def longest_substring_two_distinct(s): Function to find the longest substring with at most two distinct characters. if not s: return 0 start = 0 max_len = 0 char_map = {} for end in range(len(s)): if s[end] in char_map: char_map[s[end]] += 1 else: char_map[s[end]] = 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"We have a 2D array representing a grid. We want to find the shortest path from a starting cell to a destination cell. **Assumptions:** * You can only move horizontally or vertically, not diagonally. * You can move only one cell at a time. **Input:** * A 2D array representing the grid. * The coordinates of the starting cell. * The coordinates of the destination cell. **Output:** * The length of the shortest path. Can you provide a solution using Breadth-First Search (BFS)?","solution":"from collections import deque def shortest_path(grid, start, destination): Find the shortest path in a 2D grid from start to destination using BFS. :param grid: 2D list representing the grid :param start: Tuple (row, col) representing the starting cell :param destination: Tuple (row, col) representing the destination cell :return: Integer representing the length of the shortest path if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited.add((start[0], start[1])) while queue: current_row, current_col, dist = queue.popleft() # Check if we have reached the destination if (current_row, current_col) == destination: return dist # Explore neighbors for dr, dc in directions: new_row, new_col = current_row + dr, current_col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 1: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1 # If there is no path from start to destination"},{"question":"This problem states: You are given an array of integers nums and an integer target. Return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. **Example 1:** \`\`\` Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` **Example 2:** \`\`\` Input: nums = [3,2,4], target = 6 Output: [1,2] \`\`\` **Example 3:** \`\`\` Input: nums = [3,3], target = 6 Output: [0,1] \`\`\` Can you provide a Python solution using a dictionary?","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums that add up to target. :param nums: List of integers. :param target: Integer target sum. :return: List containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [] # Just as a default safeguard, though the prompt ensures there is exactly one solution."},{"question":"The following code defines a function named \`process_data\` that takes a list of numbers as input and returns a new list with the following modifications: * **Squares:** All even numbers in the input list are squared. * **Sum:** The sum of all odd numbers in the input list is calculated. * **Appending:** The calculated sum of odd numbers is appended to the end of the new list. \`\`\`python def process_data(data): new_data = [] sum_odd = 0 for num in data: if num % 2 == 0: new_data.append(num ** 2) else: sum_odd += num new_data.append(sum_odd) return new_data","solution":"def process_data(data): Processes the list of numbers by: - Squaring all even numbers. - Calculating the sum of all odd numbers. - Appending the sum of odd numbers to the end of the list. Parameters: - data (list of int): The list of numbers to process. Returns: - list of int: A new list with squared even numbers and the sum of odd numbers appended. new_data = [] sum_odd = 0 for num in data: if num % 2 == 0: new_data.append(num ** 2) else: sum_odd += num new_data.append(sum_odd) return new_data"},{"question":"You are given a list of integers \`nums\`. Write a Python function \`find_longest_sequence(nums)\` that returns the length of the longest consecutive sequence in the list.","solution":"def find_longest_sequence(nums): Finds the length of longest consecutive sequence of numbers in the list. Args: nums: List[int] - List of integers. Returns: int - length of the longest consecutive sequence. if not nums: return 0 nums_set = set(nums) longest_sequence = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_sequence = 1 while current_num + 1 in nums_set: current_num += 1 current_sequence += 1 longest_sequence = max(longest_sequence, current_sequence) return longest_sequence"},{"question":"You are given an array of integers \`nums\` and an integer \`target\`. You need to find two numbers in the array that add up to the \`target\`. Example: \`\`\` nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` Constraints: Each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Can you provide a Python code solution using a dictionary to optimize the time complexity?","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. :param nums: List[int], a list of integers :param target: int, target sum :return: List[int], list of two indices num_dict = {} for i, num in enumerate(nums): diff = target - num if diff in num_dict: return [num_dict[diff], i] num_dict[num] = i"},{"question":"Project: Building a Python script for generating code in Python. Goal: The script should take a natural language description of a task and generate Python code that accomplishes that task. Approach: Natural Language Processing (NLP): Use a library like spaCy to process the natural language input, identifying key entities, actions, and relationships. Code Generation: Utilize a code generation model like Codex (from OpenAI) or a rule-based system to translate the NLP output into Python code. Code Refinement: Implement basic code refinement techniques, such as variable renaming for readability and adding comments. Example: Input: \\"Write a function that takes a list of numbers and returns the sum of all the even numbers in the list.\\" Output: \`\`\`python def sum_even_numbers(numbers): This function takes a list of numbers and returns the sum of all the even numbers. sum = 0 for number in numbers: if number % 2 == 0: sum += number return sum \`\`\` Challenges: Ambiguity in Natural Language: Natural language is inherently ambiguous. The script should be able to handle different phrasings of the same task. Complexity of Code Generation: Generating complex code structures and algorithms from natural language descriptions can be very challenging. Code Accuracy and Reliability: Ensuring that the generated code is accurate, bug-free, and reliable is crucial. Ethical Considerations: Bias: NLP models can inherit biases from the training data, potentially leading to biased code generation. Misuse: The script could be misused to generate malicious code. Questions: Codex API Integration: What are the best practices for integrating the Codex API into a Python script?","solution":"import openai def generate_code(natural_language_description, api_key): This function takes a natural language description and generates Python code using OpenAI's Codex API. :param natural_language_description: str, Description of the task in natural language :param api_key: str, OpenAI API key for authentication :return: str, Generated Python code openai.api_key = api_key response = openai.Completion.create( engine=\\"text-davinci-002\\", prompt=f\\"Generate Python code for the following task: {natural_language_description}\\", max_tokens=150, n=1, stop=None, temperature=0.5, ) code = response.choices[0].text.strip() return code"},{"question":"Objective: To create a Python function that converts a string containing hexadecimal color codes into RGB tuples.","solution":"def hex_to_rgb(hex_string): Convert a hex color code string to an RGB tuple. Parameters: hex_string (str): A string representing a hex color code (e.g., \\"#RRGGBB\\" or \\"RRGGBB\\"). Returns: tuple: A tuple containing the RGB values (e.g., (255, 255, 255)). hex_string = hex_string.lstrip('#') if len(hex_string) != 6: raise ValueError(\\"Hex string must be 6 characters long\\") r = int(hex_string[0:2], 16) g = int(hex_string[2:4], 16) b = int(hex_string[4:6], 16) return (r, g, b)"},{"question":"The question asks for a code snippet that implements the binary search algorithm in Python.","solution":"def binary_search(arr, target): Performs binary search on a sorted array. Parameters: arr (list): A list of sorted elements. target (any): The element to search for. Returns: int: The index of the target element if found; otherwise, -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Here is the prompt: I want to build a program that can translate any text from English to Morse code. Here is the solution: \`\`\`python MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-'} def translate_to_morse(text): morse_code = '' for letter in text.upper(): if letter != ' ': morse_code += MORSE_CODE_DICT.get(letter, '","solution":"MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-', ' ':'/'} def translate_to_morse(text): morse_code = '' for letter in text.upper(): morse_code += MORSE_CODE_DICT.get(letter, '') + ' ' return morse_code.strip()"},{"question":"You have two strings, \`str1\` and \`str2\`. Write a function \`longest_common_subsequence(str1, str2)\` that finds the longest common subsequence of the two strings.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence of two strings. m, n = len(str1), len(str2) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence is in dp[m][n] lcs_length = dp[m][n] # Now we will construct the longest common subsequence string lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 # Since we built the LCS from the end to start, reverse it before returning. return ''.join(reversed(lcs))"},{"question":"Problem Statement: You are given a list of strings representing phone numbers. You need to write a function that validates these phone numbers based on a specific format. Format: The phone number format should be: 10 digits long Starts with an optional country code (e.g., +1, +44) Example Input: \`\`\` phone_numbers = [\\"+15551234567\\", \\"5551234567\\", \\"15551234567\\", \\"+447890123456\\"] \`\`\` Example Output: \`\`\` Valid phone numbers: +15551234567 5551234567 15551234567 +447890123456 \`\`\` Constraints: The function should handle optional country codes. The function should return a list of valid phone numbers. Can you write a Python function to accomplish this task?","solution":"import re def validate_phone_numbers(phone_numbers): Validate phone numbers based on specific format The phone number format must be: - 10 digits long - Can start with an optional country code (e.g., +1, +44) Args: phone_numbers (list): A list of phone numbers as strings Returns: list: A list of valid phone numbers valid_phone_numbers = [] pattern = re.compile(r\\"^+?d{10,13}\\") for number in phone_numbers: if pattern.match(number): valid_phone_numbers.append(number) return valid_phone_numbers"},{"question":"How can I use Python to generate and evaluate a random set of equations with the following properties: * **Linear:** The equations should be linear. * **Two variables:** Each equation should involve two variables. * **Integer coefficients:** The coefficients should be integers. * **Solvable:** The system of equations should have a unique solution. Here's what I've done so far: \`\`\`python import random def generate_equation(variables): Generates a random linear equation with two variables. a = random.randint(-10, 10) b = random.randint(-10, 10) c = random.randint(-10, 10) return f\\"{a}{variables[0]} + {b}{variables[1]} = {c}\\" variables = ['x', 'y'] equation1 = generate_equation(variables) equation2 = generate_equation(variables) print(f\\"System of equations:n{equation1}n{equation2}\\") \`\`\` This code generates two random linear equations. However, it doesn't guarantee a unique solution. **How can I modify the code to ensure that the generated system of equations has a unique solution?** To determine if a system of linear equations has a unique solution, you can use the determinant. **Can you help me integrate the determinant check into the code?** Once I have a solvable system, I want to **solve it and print the solution**. \`\`\`python from sympy import symbols, Eq, solve","solution":"import random from sympy import symbols, Eq, solve def generate_random_coefficients(): Generates random integer coefficients a, b, c where -10 <= a, b, c <= 10 a = random.randint(-10, 10) b = random.randint(-10, 10) c = random.randint(-10, 10) return a, b, c def generate_system_of_equations(): Generates a system of two linear equations with a unique solution. while True: a1, b1, c1 = generate_random_coefficients() a2, b2, c2 = generate_random_coefficients() # Calculate the determinant of the coefficient matrix determinant = a1 * b2 - a2 * b1 # Ensure the system is solvable (unique solution exists) if determinant != 0: return (a1, b1, c1, a2, b2, c2) def generate_equations_and_solve(): x, y = symbols('x y') a1, b1, c1, a2, b2, c2 = generate_system_of_equations() equation1 = Eq(a1 * x + b1 * y, c1) equation2 = Eq(a2 * x + b2 * y, c2) solution = solve((equation1, equation2), (x, y)) return equation1, equation2, solution # Example use: eq1, eq2, sol = generate_equations_and_solve() print(f\\"System of equations:n{eq1}n{eq2}\\") print(f\\"Solution: {sol}\\")"},{"question":"This is a follow-up to my previous request. Previously, I asked for help writing a Python script to * Analyze a text file containing a list of URLs. * Identify URLs that are not accessible (i.e., return HTTP error codes). * Print the inaccessible URLs to the console. You provided a helpful script that used the \`requests\` library. Now, I'd like to **enhance this script to also**: * Store the inaccessible URLs in a separate text file named \\"inaccessible_urls.txt\\". \`\`\`python import requests def check_url_accessibility(url): Checks if a URL is accessible. Args: url: The URL to check. Returns: True if the URL is accessible, False otherwise. try: response = requests.get(url) response.raise_for_status() return True except requests.exceptions.RequestException as e: return False def main(): Reads URLs from a file, checks their accessibility, and prints inaccessible URLs. with open(\\"urls.txt\\", \\"r\\") as f: urls = f.readlines() inaccessible_urls = [] for url in urls: url = url.strip() if not check_url_accessibility(url): print(f\\"URL {url} is inaccessible.\\") inaccessible_urls.append(url) # Add code here to store inaccessible URLs in \\"inaccessible_urls.txt\\" if __name__ == \\"__main__\\": main() \`\`\` Can you modify the script to include this functionality?","solution":"import requests def check_url_accessibility(url): Checks if a URL is accessible. Args: url: The URL to check. Returns: True if the URL is accessible, False otherwise. try: response = requests.get(url) response.raise_for_status() return True except requests.exceptions.RequestException: return False def main(): Reads URLs from a file, checks their accessibility, prints and stores inaccessible URLs. with open(\\"urls.txt\\", \\"r\\") as f: urls = f.readlines() inaccessible_urls = [] for url in urls: url = url.strip() if not check_url_accessibility(url): print(f\\"URL {url} is inaccessible.\\") inaccessible_urls.append(url) if inaccessible_urls: with open(\\"inaccessible_urls.txt\\", \\"w\\") as f: for url in inaccessible_urls: f.write(url + \\"n\\") if __name__ == \\"__main__\\": main()"},{"question":"Step 1: Identify the Problem The problem is to design a program that can translate English text into Morse code. Step 2: Understand the Requirements The program should be able to take English text as input. The program should output the Morse code equivalent of the input text. The program should handle spaces between words. The program should handle punctuation marks (optional). Step 3: Design the Solution We can use a dictionary to store the mapping between English letters and their corresponding Morse code representations. We can then iterate over each character in the input text, look up its Morse code equivalent in the dictionary, and append it to the output string. Step 4: Implement the Solution \`\`\`python MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?","solution":"MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ',':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-', ' ':'/' } def english_to_morse(text): Translates English text to Morse code. text = text.upper() morse_code = [] for char in text: if char in MORSE_CODE_DICT: morse_code.append(MORSE_CODE_DICT[char]) else: # Handling characters not in the dictionary by ignoring them continue return ' '.join(morse_code)"},{"question":"Please create a Python function called \`find_average_length\` that takes a list of strings as input and returns the average length of the strings in the list.","solution":"def find_average_length(string_list): Returns the average length of the strings in the list. Parameters: string_list (list of str): The list of strings. Returns: float: The average length of the strings. if not string_list: return 0.0 total_length = sum(len(s) for s in string_list) return total_length / len(string_list)"},{"question":"This is the problem I am working on: You are given a list of integers and a target integer. You want to find two numbers in the list that add up to the target. For example: \`\`\` Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. \`\`\` Here is my current solution: \`\`\`python def two_sum(nums, target): for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: return [i, j] \`\`\` This solution works, but it is inefficient because it has a time complexity of O(n^2). I want to find a more efficient solution with a time complexity of O(n). Can you help me with that?","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. :param nums: List[int], list of integers :param target: int, target sum :return: List[int], list of two indices seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i"},{"question":"This is the code for a simple dice rolling simulator. I'd like to add a feature where the user can choose how many dice they want to roll. \`\`\`python import random def roll_dice(): Rolls a single six-sided die. return random.randint(1, 6) # Roll the dice and print the result result = roll_dice() print(f\\"You rolled a {result}\\") \`\`\` Here's how I would modify the code to achieve this: \`\`\`python import random def roll_dice(num_dice=1): Rolls a specified number of six-sided dice. rolls = [] for _ in range(num_dice): rolls.append(random.randint(1, 6)) return rolls # Get user input for number of dice num_dice = int(input(\\"How many dice do you want to roll?","solution":"import random def roll_dice(num_dice=1): Rolls a specified number of six-sided dice. Args: num_dice (int): Number of dice to roll. Default is 1. Returns: list: List of integers representing the result of each die rolled. rolls = [random.randint(1, 6) for _ in range(num_dice)] return rolls # Example usage: # num_dice = int(input(\\"How many dice do you want to roll? \\")) # result = roll_dice(num_dice) # print(f\\"You rolled: {result}\\")"},{"question":"This is for a personal project, I want to create a small, interactive chatbot that can hold simple conversations. Here's what I want it to do: * Greet the user when they start a conversation. * Remember the user's name (if provided). * Respond to basic greetings (like \\"hi,\\" \\"hello,\\" \\"hey\\"). * Ask the user simple questions about their day, hobbies, etc. * Give generic responses based on the user's answers. I'm planning to use Python. What libraries or frameworks would you recommend for this project?","solution":"import re class SimpleChatbot: def __init__(self): self.name = None def greet(self): return \\"Hello! What's your name?\\" def remember_name(self, name): self.name = name return f\\"Nice to meet you, {self.name}!\\" def respond_to_greeting(self, greeting): greetings = ['hi', 'hello', 'hey'] if any(greet in greeting.lower() for greet in greetings): return f\\"{greeting.capitalize()}! How can I assist you today, {self.name or 'friend'}?\\" return \\"I'm sorry, I didn't understand that greeting.\\" def ask_question(self): return \\"How has your day been so far?\\" def respond_to_answer(self, answer): return \\"That's interesting! What do you like to do for fun?\\" def respond_to_hobby(self, hobby): return f\\"{hobby.capitalize()} sounds like a lot of fun!\\" # Example library that can be used: re (for regular expressions) # Potentially useful libraries include: # - NLTK (Natural Language Toolkit) # - spaCy (industrial-strength NLP) # But for a basic chatbot, a custom script without additional libraries is sufficient."},{"question":"I'm interested in understanding how to implement a dynamic programming approach to solve the following problem: **Problem:** Given a list of coins with different denominations, find the minimum number of coins required to make up a given amount. **Example:** * Coins: [1, 5, 10, 25] * Amount: 41 * **Solution:** 3 coins (1 x 25 + 1 x 10 + 1 x 6) **Dynamic Programming Approach:** Let's break down how to implement a dynamic programming solution for this classic coin change problem. **1. Define the Subproblem:** The key to dynamic programming is breaking the problem into smaller, overlapping subproblems. In this case, the subproblem can be defined as follows: * \`dp[i]\` represents the minimum number of coins needed to make up the amount \`i\`. **2. Base Case:** * \`dp[0] = 0\` (You need zero coins to make up an amount of 0). **3. Recurrence Relation:** To calculate \`dp[i]\`, we iterate through all available coin denominations (\`coins\` list): * For each coin \`c\` in \`coins\`: * If \`c <= i\` (the coin value is less than or equal to the current amount), we check: * \`dp[i - c] + 1\` : This represents the minimum coins needed to make up the remaining amount (\`i - c\`) plus one for the current coin. * We choose the minimum of all these possibilities (for all coins) to determine \`dp[i]\`. **4. Code Implementation (Python):** \`\`\`python def coin_change(coins, amount): dp = [amount + 1] * (amount + 1)","solution":"def coin_change(coins, amount): Returns the minimum number of coins required to make up the given amount. Args: coins (List[int]): List of coin denominations. amount (int): The target amount. Returns: int: The minimum number of coins needed to make the amount, or -1 if it is not possible. dp = [amount + 1] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if coin <= i: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Objective: To develop a Python code that performs sentiment analysis on text data using a pre-trained sentiment analysis model.","solution":"from transformers import pipeline def sentiment_analysis(text): Performs sentiment analysis on the provided text using a pre-trained sentiment analysis model. Args: text (str): The text to be analyzed. Returns: dict: A dictionary containing 'label' (the sentiment) and 'score' (the confidence score). # Initialize the sentiment analysis pipeline sentiment_classifier = pipeline(\\"sentiment-analysis\\") # Analyze the sentiment of the text result = sentiment_classifier(text) # Return the result return result[0]"},{"question":"I am trying to create a program that converts a binary number to decimal. \`\`\`python def binary_to_decimal(binary): decimal = 0 power = 0 for digit in binary[::-1]: decimal += int(digit) * 2**power power += 1 return decimal # Example usage binary_number = \\"101101\\" decimal_number = binary_to_decimal(binary_number) print(f\\"The decimal equivalent of {binary_number} is {decimal_number}\\") \`\`\` This program works correctly for positive binary numbers. However, I want to extend it to handle negative binary numbers. **How can I modify the program to correctly convert negative binary numbers to decimal?","solution":"def binary_to_decimal(binary): Converts a binary number (as a string) to its decimal equivalent. Supports both positive and negative binary numbers. is_negative = binary.startswith('-') if is_negative: binary = binary[1:] decimal = 0 power = 0 for digit in binary[::-1]: decimal += int(digit) * 2**power power += 1 if is_negative: decimal *= -1 return decimal # Example usage binary_number = \\"-101101\\" decimal_number = binary_to_decimal(binary_number) print(f\\"The decimal equivalent of {binary_number} is {decimal_number}\\")"},{"question":"This is the code I have so far for my program. I need to add a function that will calculate the area of a triangle. \`\`\`python def calculate_rectangle_area(length, width): Calculates the area of a rectangle. area = length * width return area # Get user input for length and width length = float(input(\\"Enter the length of the rectangle: \\")) width = float(input(\\"Enter the width of the rectangle: \\")) # Calculate and print the area of the rectangle rectangle_area = calculate_rectangle_area(length, width) print(f\\"The area of the rectangle is: {rectangle_area}\\") \`\`\` Here's what I'm thinking for the triangle area function: \`\`\`python def calculate_triangle_area(base, height): Calculates the area of a triangle. area = 0.5 * base * height return area \`\`\` How can I integrate this new function into my existing code?","solution":"def calculate_rectangle_area(length, width): Calculates the area of a rectangle. area = length * width return area def calculate_triangle_area(base, height): Calculates the area of a triangle. area = 0.5 * base * height return area"},{"question":"Here is the situation: * **Problem:** I want to track how many times a specific word appears in a text file. * **Solution:** Use Python with its built-in libraries. Here's the Python code: \`\`\`python def count_word(filename, word): Counts the occurrences of a word in a text file. count = 0 with open(filename, 'r') as file: for line in file: words = line.lower().split() count += words.count(word.lower()) return count","solution":"def count_word(filename, word): Counts the occurrences of a specific word in a text file. count = 0 with open(filename, 'r') as file: for line in file: words = line.lower().split() count += words.count(word.lower()) return count"},{"question":"I have a text file containing a list of names. I want to find the longest name in the file. Here's an example text file (names.txt): \`\`\` Alice Bob Charlie David Emily Franklin Grace Henry Isabella Jackson \`\`\` The output should be: \`\`\` Isabella \`\`\` I'm using Python. Here's my code: \`\`\`python def find_longest_name(filename): longest_name = \\"\\" with open(filename, 'r') as f: for line in f: name = line.strip() if len(name) > len(longest_name): longest_name = name return longest_name filename = \\"names.txt\\" longest_name = find_longest_name(filename) print(longest_name) \`\`\` This code works correctly. Is there a more concise way to achieve the same result using Python's built-in functions?","solution":"def find_longest_name(filename): Finds and returns the longest name from the given file. with open(filename, 'r') as f: return max((name.strip() for name in f), key=len)"},{"question":"This is an exercise I'm working on, and I'm stuck. **Exercise:** Given a list of integers \`nums\`, write a function \`find_peaks(nums)\` that returns a list of indices representing the peaks in the list. **A peak is defined as an element that is greater than its immediate neighbors.** **Example:** \`\`\`python nums = [1, 2, 3, 1, 4, 5, 3, 2, 1] peaks = find_peaks(nums) print(peaks) # Output: [2, 5] \`\`\` Here's the code I have so far: \`\`\`python def find_peaks(nums): peaks = [] for i in range(1, len(nums) - 1): if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: peaks.append(i) return peaks \`\`\` **Problem:** My code works for most cases but fails when there are consecutive peaks. **Question:** How can I modify my code to handle consecutive peaks correctly?","solution":"def find_peaks(nums): peaks = [] if not nums: return peaks if len(nums) == 1: return [0] if nums[0] > nums[1]: peaks.append(0) for i in range(1, len(nums) - 1): if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: peaks.append(i) if nums[-1] > nums[-2]: peaks.append(len(nums) - 1) return peaks"},{"question":"This is my final project for a Python course. I need to create a program that plays a game of Tic-Tac-Toe against the user. I have already implemented the game board and player input. **Here's what I have so far:** \`\`\`python def print_board(board): print(\\"-------------\\") for row in board: print(\\"|\\", end=\\"\\") for cell in row: print(f\\" {cell} |\\", end=\\"\\") print(\\"n-------------\\") def get_player_move(): while True: try: row, col = map(int, input(\\"Enter your move (row, column) separated by comma: \\").split(\\",\\")) if 0 <= row <= 2 and 0 <= col <= 2: return row, col else: print(\\"Invalid move. Please enter row and column between 0 and 2.\\") except ValueError: print(\\"Invalid input. Please enter two numbers separated by comma.\\") # Initialize the game board board = [[\\" \\" for _ in range(3)] for _ in range(3)] # Game loop while True: # Print the board print_board(board) # Get player's move row, col = get_player_move() # TODO: Implement game logic (checking for wins, draws, and AI move) \`\`\` **I need help with the following:** 1. **Checking for a win condition.** 2. **Checking for a draw condition.** 3. **Implementing the AI player's logic.** Can you help me complete the project?","solution":"def print_board(board): print(\\"-------------\\") for row in board: print(\\"|\\", end=\\"\\") for cell in row: print(f\\" {cell} |\\", end=\\"\\") print(\\"n-------------\\") def get_player_move(): while True: try: row, col = map(int, input(\\"Enter your move (row, column) separated by comma: \\").split(\\",\\")) if 0 <= row <= 2 and 0 <= col <= 2: return row, col else: print(\\"Invalid move. Please enter row and column between 0 and 2.\\") except ValueError: print(\\"Invalid input. Please enter two numbers separated by comma.\\") def check_win(board, player): # Check rows for row in board: if all(cell == player for cell in row): return True # Check columns for col in range(3): if all(board[row][col] == player for row in range(3)): return True # Check diagonals if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)): return True return False def check_draw(board): return all(cell != \\" \\" for row in board for cell in row) def get_ai_move(board): for row in range(3): for col in range(3): if board[row][col] == \\" \\": return row, col def tic_tac_toe(): board = [[\\" \\" for _ in range(3)] for _ in range(3)] current_player = \\"X\\" while True: print_board(board) if current_player == \\"X\\": row, col = get_player_move() else: row, col = get_ai_move(board) if board[row][col] == \\" \\": board[row][col] = current_player else: print(\\"Cell is already occupied. Try again.\\") continue if check_win(board, current_player): print_board(board) print(f\\"Player {current_player} wins!\\") break if check_draw(board): print_board(board) print(\\"The game is a draw!\\") break current_player = \\"O\\" if current_player == \\"X\\" else \\"X\\" if __name__ == \\"__main__\\": tic_tac_toe()"},{"question":"This is a coding challenge. **Problem:** Given an array of integers \`nums\`, find the maximum product of any three numbers in the array. **Example:** \`\`\` nums = [1, 2, 3, 4] Output: 24 \`\`\` **Explanation:** The maximum product is achieved by multiplying \`4 * 3 * 2 = 24\`. **Constraints:** * \`3 <= nums.length <= 10^4\` * \`-1000 <= nums[i] <= 1000\` Can you provide a solution to this problem in Python?","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers in the array. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You have an array of integers called \`nums\`. Write a function called \`find_pairs_with_sum\` that takes this array and a target sum as input and returns a list of all unique pairs of numbers in the array that add up to the target sum.","solution":"def find_pairs_with_sum(nums, target): Finds all unique pairs of numbers in the array that add up to the target sum. Args: nums (list): List of integers. target (int): Target sum. Returns: list: List of tuples, each containing a pair of numbers that add up to the target sum. nums.sort() # Sort the array to handle duplicates easily and for two-pointer technique pairs = [] seen = set() # Set to keep track of seen numbers for unique pairs left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target and (nums[left], nums[right]) not in seen: pairs.append((nums[left], nums[right])) seen.add((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Define a function \`longest_palindrome_substring\` that takes a string as input and returns the longest palindromic substring.","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 # Create a table to store results of subproblems table = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True # Check for sub-string of length 2. for i in range(n-1): if s[i] == s[i+1]: table[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2. # k is length of substring. for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if table[i+1][j-1] and s[i] == s[j]: table[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"I'm looking for a way to write a Python program to find the maximum sum of non-adjacent elements in a given array. **Example:** Input: [2, 4, 6, 2, 5] Output: 13 (2 + 6 + 5) **Explanation:** The maximum sum of non-adjacent elements is obtained by selecting 2, 6, and 5 from the array. **Constraints:** * The input array can contain both positive and negative integers. * The array length can be any positive integer. \`\`\`python def max_sum_non_adjacent(arr): Finds the maximum sum of non-adjacent elements in a given array. Args: arr: A list of integers. Returns: The maximum sum of non-adjacent elements. # TODO: Implement the logic here. return 0 # Example usage arr = [2, 4, 6, 2, 5] max_sum = max_sum_non_adjacent(arr) print(f\\"Maximum sum of non-adjacent elements: {max_sum}\\") \`\`\` Can you provide me with a Python program to achieve this?","solution":"def max_sum_non_adjacent(arr): Finds the maximum sum of non-adjacent elements in a given array. Args: arr: A list of integers. Returns: The maximum sum of non-adjacent elements. if not arr: return 0 # Initialize inclusive and exclusive sums inclusive = 0 exclusive = 0 for num in arr: # Current max excluding the current number new_exclusive = max(inclusive, exclusive) # Current max including the current number inclusive = exclusive + num exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"A Description: The initial setup of the program. Function: To initialize variables and define constants. Code: \`\`\`python # Initialize variables x = 0 y = 0 # Define constants PI = 3.14159 GRAVITY = 9.81 \`\`\` B Description: A function to calculate the area of a circle. Function: Takes the radius of a circle as input and returns the area. Code: \`\`\`python def circle_area(radius): return PI radius2 \`\`\` C Description: A function to calculate the force of gravity on an object. Function: Takes the mass of an object and returns the force of gravity. Code: \`\`\`python def gravity_force(mass): return mass GRAVITY \`\`\` D Description: The main part of the program. Function: To demonstrate the use of the functions defined in B and C. Code: \`\`\`python # Calculate the area of a circle with radius 5 area = circle_area(5) print(\\"Area of the circle:\\", area) # Calculate the force of gravity on an object with mass 10 kg force = gravity_force(10) print(\\"Force of gravity:\\", force) \`\`\` Explanation: This program defines a set of functions for common calculations. It initializes some variables and constants in section A. Sections B and C define functions to calculate the area of a circle and the force of gravity, respectively. Finally, section D demonstrates the use of these functions by calculating the area of a circle with radius 5 and the force of gravity on an object with mass 10 kg. Question: What is the output of this program?","solution":"# Initialize variables x = 0 y = 0 # Define constants PI = 3.14159 GRAVITY = 9.81 def circle_area(radius): Returns the area of a circle given its radius. return PI * (radius ** 2) def gravity_force(mass): Returns the force of gravity on an object given its mass. return mass * GRAVITY # Calculate the area of a circle with radius 5 area = circle_area(5) print(\\"Area of the circle:\\", area) # Calculate the force of gravity on an object with mass 10 kg force = gravity_force(10) print(\\"Force of gravity:\\", force)"},{"question":"Here is the code: \`\`\`python def find_missing_numbers(nums): Finds all missing numbers from a given list of integers. Args: nums: A list of integers. Returns: A list of all missing numbers in the range from 1 to the maximum value in nums. missing_nums = [] max_num = max(nums) for i in range(1, max_num + 1): if i not in nums: missing_nums.append(i) return missing_nums","solution":"def find_missing_numbers(nums): Finds all missing numbers from a given list of integers. Args: nums: A list of integers. Returns: A list of all missing numbers in the range from 1 to the maximum value in nums. if not nums: return [] missing_nums = [] max_num = max(nums) for i in range(1, max_num + 1): if i not in nums: missing_nums.append(i) return missing_nums"},{"question":"These are the rules of the game: 1. Each player starts with 100 points. 2. A player rolls a single six-sided die. 3. The number rolled is added to the player's score. 4. If a player rolls a 6, they lose all their points and their turn ends. 5. A player can choose to hold their turn and keep their points. 6. Play continues until one player reaches 100 points or more. The goal of the game is to be the first player to reach 100 points or more. **Now I want to create a text-based game in Python that simulates this game for two players.** \`\`\`python import random def roll_die(): Simulates rolling a six-sided die. return random.randint(1, 6) def play_turn(player_name, current_score): Plays a single turn for a player. print(f\\"{player_name}'s turn. Current score: {current_score}\\") while True: choice = input(\\"Roll or hold?","solution":"import random def roll_die(): Simulates rolling a six-sided die. return random.randint(1, 6) def play_turn(player_name, current_score): Plays a single turn for a player. print(f\\"{player_name}'s turn. Current score: {current_score}\\") while True: choice = input(\\"Roll or hold? \\").strip().lower() if choice == 'roll': roll = roll_die() print(f\\"{player_name} rolled a {roll}\\") if roll == 6: print(f\\"{player_name} rolled a 6 and lost all points this turn!\\") return 0 current_score += roll elif choice == 'hold': return current_score else: print(\\"Invalid choice. Please type 'roll' or 'hold'.\\") def game(): Main game function for two players. player_scores = {'Player 1': 0, 'Player 2': 0} players = ['Player 1', 'Player 2'] while True: for player in players: player_scores[player] = play_turn(player, player_scores[player]) if player_scores[player] >= 100: print(f\\"{player} wins with {player_scores[player]} points!\\") return # This code is meant to be run interactively # game()"},{"question":"Objective: To create a Python script that reads a text file, extracts specific information from it, and outputs the extracted information to a new text file.","solution":"def extract_todo_lines(input_file, output_file): Reads the input file, extracts lines that start with \\"TODO\\", and writes them to the output file. Parameters: input_file (str): Path to the input text file. output_file (str): Path to the output text file. with open(input_file, 'r') as infile: lines = infile.readlines() todo_lines = [line for line in lines if line.startswith(\\"TODO\\")] with open(output_file, 'w') as outfile: outfile.writelines(todo_lines)"},{"question":"Write a function to count the number of set bits in an integer.","solution":"def count_set_bits(n): Returns the number of set bits (1-bits) in the binary representation of the integer n. count = 0 while n > 0: count += n & 1 n >>= 1 return count"},{"question":"Write a function to take an input array of integers and return the sum of the squares of the integers. The input array will always have at least one integer, and all values will be between -100 and 100. **Hint**: You can use a list comprehension to perform operations on each element in the list. Another method is to use the \`map\` function combined with \`sum\`.","solution":"def sum_of_squares(arr): Returns the sum of the squares of the integers in the input array. Parameters: arr (List[int]): Input list of integers. Returns: int: Sum of the squares of the integers. return sum(x**2 for x in arr)"},{"question":"Write a function to move the zeros in an array to the end while maintaining the order of non-zero elements. The function should perform this operation in-place without using extra space. For example, given the array [0, 1, 0, 3, 12], the function should transform it to [1, 3, 12, 0, 0].","solution":"def move_zeros(nums): Move all zeros to the end of the list while maintaining the order of non-zero elements. This operation must be done in-place without using extra space. :param nums: List of integers. last_non_zero_found_at = 0 # Move all the non-zero elements maintain their relative order for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill the remaining with zeros for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"Write a function to reverse the bits of a given 32 bit unsigned integer. For example, reverseBits(0b110000111101) should return 0b101111000011.","solution":"def reverseBits(n: int) -> int: Reverses the bits of a given 32-bit unsigned integer. Parameters: n (int): 32-bit unsigned integer to reverse the bits of. Returns: int: The 32-bit unsigned integer with bits reversed. result = 0 for i in range(32): result <<= 1 result |= (n & 1) n >>= 1 return result"},{"question":"Write a function to check if a string is a permutation of a palindrome. A string is a permutation of a palindrome if it can be rearranged to form a palindrome. For example, the string \\"tactcoa\\" is a permutation of a palindrome because it can be rearranged to form \\"tacocat\\" or \\"atcocta\\", which are palindromes.","solution":"def is_permutation_of_palindrome(s): Check if a string is a permutation of a palindrome. s = s.replace(\\" \\", \\"\\").lower() # Removing spaces and lowercasing the string char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the count of characters with odd occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be a permutation of a palindrome # There can be at most one character with an odd count return odd_count <= 1"},{"question":"Write a function to reverse a list of elements in Python. Can you provide a solution that also handles lists with mixed types of elements?","solution":"def reverse_list(lst): Reverses the input list. Args: lst (list): A list of elements which can be of mixed types. Returns: list: The reversed list. return lst[::-1]"},{"question":"Write a function to calculate the sum of the values in each level of a binary tree and return the sums as a list. For example, for the binary tree in the provided diagram, the function should return [1, 3, 7] because the sum of the values at each level (root, root's children, and leaf nodes) is 1, 3, and 7, respectively.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_sum(root): Returns the sum of the values in each level of a binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_sum = 0 level_length = len(queue) for _ in range(level_length): node = queue.popleft() level_sum += node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_sum) return result"},{"question":"Write a function to convert a binary string to an integer. Can you show me a simple way to do this in Python?","solution":"def binary_to_int(binary_string): Converts a binary string to an integer. Args: binary_string (str): A string representing a binary number. Returns: int: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Write a function to calculate the nth Fibonacci number using a recursive approach in Python. What are the critical aspects of this implementation, and what potential issues should be considered when using recursion to calculate Fibonacci numbers?","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to calculate the total marks of a student in a school. The function should take a student name and the list of marks of all subjects as input and return the total marks.","solution":"def calculate_total_marks(student_name, marks): Calculate the total marks of a student. Parameters: student_name (str): The name of the student. marks (list): A list of integers representing the marks in different subjects. Returns: int: The total marks. return sum(marks)"},{"question":"Write a function to generate the first n prime numbers and return them in a list. For example, if n = 5, the function should return \`[2, 3, 5, 7, 11]\`.","solution":"def generate_primes(n): Generates the first n prime numbers and returns them in a list. Parameters: n (int): The number of prime numbers to generate. Returns: List[int]: A list containing the first n prime numbers. if n <= 0: return [] primes = [] num = 2 # The first prime number while len(primes) < n: for prime in primes: if num % prime == 0: break else: primes.append(num) num += 1 return primes"},{"question":"Write a function to reverse a list in Python. Which built-in method should be used to reverse a list?","solution":"def reverse_list(lst): Reverses the input list in place and returns it. lst.reverse() return lst # The built-in method used here is lst.reverse()"},{"question":"Write a function to calculate the maximum area of a rectangle in a 2D grid where all sides are parallel to the grid axes. The rectangle can be formed by selecting any two distinct points in the grid and extending them horizontally and vertically to form a rectangle.","solution":"def max_rectangle_area(grid): Given a 2D grid of points, calculate the maximum area of a rectangle that can be formed with sides parallel to the grid axes. :param grid: List[List[int]] - A 2D grid of points (1 represents a point, 0 represents empty space) :return: int - The maximum area of a rectangle that can be formed if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) max_area = 0 for i in range(rows): heights = [0] * cols for j in range(i, rows): for k in range(cols): if grid[j][k] == 1: heights[k] += 1 else: heights[k] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): Helper function to calculate largest rectangle area in a histogram. :param heights: List[int] - Heights of the histogram :return: int - The maximum area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function to calculate the Fibonacci sequence in Python. The function should take two integers as input: the first integer is the number of terms in the sequence, and the second integer is the seed value for the sequence. The seed value determines the starting point of the sequence. For example, if the seed is 0 and the number of terms is 10, the sequence starts with 0 and 1, and the function returns the first 10 terms of the Fibonacci sequence. The seed value can be -5 or 0. Both negative and positive seed values should be allowed. If the seed is 0, the function should return the Fibonacci sequence starting from the first two terms (0 and 1). If the seed is -5, the function should return the Fibonacci sequence starting from -5 and 0. The function should return the Fibonacci sequence as a list.","solution":"def fibonacci_sequence(num_terms, seed): Returns the Fibonacci sequence with a specified number of terms and seed value. Args: num_terms (int): Number of terms in the Fibonacci sequence. seed (int): The seed value for the sequence. Returns: list: The Fibonacci sequence as a list. sequence = [] if seed == 0: a, b = 0, 1 elif seed == -5: a, b = -5, 0 else: raise ValueError(\\"Seed value can only be 0 or -5.\\") for _ in range(num_terms): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to calculate the total number of nodes in a binary tree. The function should take the root of the binary tree as input and return the total number of nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes(root): Returns the total number of nodes in the binary tree with the given root. :param root: TreeNode, the root of the binary tree :return: int, the total number of nodes if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to find and return the length of the longest contiguous subarray with an equal number of 0s and 1s.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 count_dict = {0: -1} for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length"},{"question":"Write a function to find the longest substring in a given string that contains exactly k distinct characters. How can this problem be solved using a sliding window approach in Python?","solution":"def longest_substring_with_k_distinct(s, k): Returns the longest substring with exactly k distinct characters. if k == 0 or not s: return \\"\\" n = len(s) left = 0 right = 0 max_len = 0 max_substr = \\"\\" char_map = {} while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 if len(char_map) == k: current_len = right - left + 1 if current_len > max_len: max_len = current_len max_substr = s[left:right+1] right += 1 return max_substr"},{"question":"Write a function to partition a linked list around a value x such that all nodes less than x come before all nodes greater than or equal to x. The relative order of the nodes from both partitions should remain the same as in the original list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition(head, x): Partitions the linked list around the value x. before_head = ListNode(0) before = before_head after_head = ListNode(0) after = after_head current = head while current: if current.val < x: before.next = current before = before.next else: after.next = current after = after.next current = current.next after.next = None before.next = after_head.next return before_head.next"},{"question":"Write a function to calculate the number of trailing zeros in the factorial of a given number \`n\`. The function should take an integer \`n\` as input and return the number of trailing zeros.","solution":"def trailing_zeros_in_factorial(n): Return the number of trailing zeros in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Write a function to implement QuickSort on an array of integers. Explain each step of your code.","solution":"def quicksort(arr): Implement QuickSort algorithm to sort an array of integers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] # Choosing pivot as the middle element left = [x for x in arr if x < pivot] # Elements less than pivot middle = [x for x in arr if x == pivot] # Elements equal to pivot right = [x for x in arr if x > pivot] # Elements greater than pivot return quicksort(left) + middle + quicksort(right) # Recursively sorting"},{"question":"Write a function to count the number of vowels in a string. The function should return the total count of vowels found in the input string. Vowels considered are 'A', 'E', 'I', 'O', 'U' and their lowercase counterparts 'a', 'e', 'i', 'o', 'u'.","solution":"def count_vowels(s): Returns the count of vowels in the input string s. Vowels considered are 'A', 'E', 'I', 'O', 'U' and their lowercase counterparts 'a', 'e', 'i', 'o', 'u'. Parameters: s (str): The input string Returns: int: The count of vowels in the input string vowels = \\"AEIOUaeiou\\" return sum(1 for char in s if char in vowels)"},{"question":"Write a function to return the index of the last occurrence of a target value in a sorted array. If the target is not found in the array, return -1.","solution":"def find_last_occurrence(arr, target): Returns the index of the last occurrence of the target value in the sorted array. If the target is not found, returns -1. low, high = 0, len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: result = mid low = mid + 1 elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return result"},{"question":"Write a function to find all the elements in an array that are less than the median value of the array and return them in a new array. If the array is empty, return an empty array.","solution":"def elements_less_than_median(arr): Returns an array of elements that are less than the median value of the input array. If the array is empty, returns an empty array. if not arr: return [] sorted_arr = sorted(arr) n = len(arr) median = sorted_arr[n // 2] if n % 2 != 0 else (sorted_arr[n // 2 - 1] + sorted_arr[n // 2]) / 2 return [x for x in arr if x < median]"},{"question":"Write a function to detect if there is a cycle in a singly linked list. If a cycle exists, return the node where the cycle begins. If there is no cycle, return null.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Detects if there is a cycle in the list. If there is, returns the node where the cycle begins. If there is no cycle, returns None. if not head or not head.next: return None slow = head fast = head # First part is to determine if there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None # Second part is to find the entry point of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to calculate the sum of elements in an array using the divide and conquer method.","solution":"def sum_array(arr): Returns the sum of elements in the array using the divide and conquer method. if len(arr) == 0: return 0 elif len(arr) == 1: return arr[0] else: mid = len(arr) // 2 left_sum = sum_array(arr[:mid]) right_sum = sum_array(arr[mid:]) return left_sum + right_sum"},{"question":"Write a function to determine the number of possible ways to make up a certain amount using given coin denominations. The function should return the number of combinations that make up the amount.","solution":"def coin_change_combinations(coins, amount): Determines the number of possible ways to make up a certain amount using given coin denominations. :param coins: List[int], List of distinct coin denominations. :param amount: int, The target amount to make up. :return: int, Number of combinations to make up the amount. dp = [0] * (amount + 1) dp[0] = 1 # Base case: There's one way to make amount 0, which is not using any coins. for coin in coins: for x in range(coin, amount + 1): dp[x] += dp[x - coin] return dp[amount]"},{"question":"Write a function to find the duplicate number in an array of integers where 1 ≤ nums[i] ≤ n (n = size of array). The function should return the duplicate number.","solution":"def find_duplicate(nums): Returns the duplicate number in an array of integers where 1 ≤ nums[i] ≤ n (n = size of array). # Using Floyd's Tortoise and Hare (Cycle Detection) algorithm slow = nums[0] fast = nums[0] # Phase 1: Finding the intersection point of the two runners. while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle. slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a function to parse the input string containing an arithmetic expression and evaluate it. The function should handle addition, subtraction, multiplication, and division. The function should ignore any spaces in the input string.","solution":"def parse_and_evaluate(expression): Parses the input arithmetic expression string and evaluates it. Supports addition, subtraction, multiplication, and division. Ignores spaces in the input string. # Removing spaces from the expression expression = expression.replace(\\" \\", \\"\\") try: # Evaluating the arithmetic expression result = eval(expression) except Exception as e: # Handling any potential errors during evaluation return str(e) return result"},{"question":"Write a function to determine the factorial of a given number. The function should take an integer as input and return the factorial of that number. Make sure to include necessary imports at the beginning of your code snippet if required. Your solution should include a check function with provided data points to verify the correctness of your solution.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to check if a given list of integers contains at least two distinct triplets that sum to zero. The function should return \`true\` if such triplets exist, and \`false\` otherwise. The function should also handle duplicate numbers efficiently.","solution":"def has_two_distinct_triplets(nums): This function checks if there are at least two distinct triplets in the given list of integers that sum to zero. Parameters: nums (list of int): List of integers Returns: bool: True if there are at least two distinct triplets that sum to zero, False otherwise. nums.sort() triplets = set() for i in range(len(nums)-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, len(nums)-1 while left < right: tr_sum = nums[i] + nums[left] + nums[right] if tr_sum == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left-1]: left += 1 while left < right and nums[right] == nums[right+1]: right -= 1 elif tr_sum < 0: left += 1 else: right -= 1 if len(triplets) >= 2: return True return False"},{"question":"Write a function to solve the problem where we need to find the root of a number using Newton's method. The function should take two parameters: the number \`n\` for which we want to find the square root, and a precision level \`p\`. The function should return the square root of \`n\` with a precision of \`p\` decimal places.","solution":"def newtons_sqrt(n, p): Finds the square root of a number using Newton's method with the given precision. :param n: The number to find the square root of. :param p: The precision level (number of decimal places). :return: The square root of n with a precision of p decimal places. if n < 0: raise ValueError(\\"Cannot compute square root of a negative number\\") if n == 0: return 0.0 x = n precision = 10 ** (-p) while True: root = 0.5 * (x + (n / x)) if abs(root - x) < precision: return round(root, p) x = root"},{"question":"Write a function to detect the character that appears most frequently in a string. If there are multiple characters with the same highest frequency, return all of them in a sorted list.","solution":"from collections import Counter def most_frequent_chars(s): Returns the character(s) that appear most frequently in the string s. If there are multiple characters with the same highest frequency, return them as a sorted list. if not s: return [] # Count the frequency of each character in the string char_counts = Counter(s) # Find the highest frequency max_freq = max(char_counts.values()) # Collect all characters with the highest frequency most_frequent = [char for char, count in char_counts.items() if count == max_freq] return sorted(most_frequent)"},{"question":"Write a function to check if a given string contains all unique characters without using any additional data structures like arrays, sets, or dictionaries. You should also consider cases where the string contains uppercase and lowercase letters are treated as different characters.","solution":"def has_all_unique_chars(s): Checks if the string s contains all unique characters. length = len(s) for i in range(length): for j in range(i + 1, length): if s[i] == s[j]: return False return True"},{"question":"Write a function to calculate the Fibonacci number at the given position using recursion.","solution":"def fibonacci(n): Returns the Fibonacci number at the given position n using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to remove duplicates from a sorted list. The function should take a sorted list of integers and return the list with all duplicates removed. The function should be efficient and should not use any additional data structures, i.e., it should operate in O(1) extra space.","solution":"def remove_duplicates_from_sorted_list(nums): This function removes duplicates from a sorted list in-place and returns the length of the unique elements list. The list is modified in-place to contain the unique elements at the beginning. Parameters: nums (List[int]): The sorted list of integers. Returns: int: The length of the list with duplicates removed. if not nums: return 0 write_index = 1 # Index to place the next unique element for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function to find the frequency of a given element in a list. Here is an example list: example_list = [10, 20, 30, 10, 40, 50, 20, 20, 60, 70].","solution":"def frequency_of_element(lst, element): Returns the frequency of the given element in the list. Parameters: lst (list): The list in which to count the occurrences of the element. element (any): The element whose frequency is to be counted. Returns: int: The frequency of the element in the list. return lst.count(element)"},{"question":"Write a function to perform a binary search on a sorted array and return the index of the target element if found. If the target is not found, return -1. Ensure the function is optimized with a time complexity of O(log n).","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the index of the target element. Parameters: arr (list): A sorted list of elements. target: Element to be searched for in the list. Returns: int: Index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to remove all the odd numbers from an array using Python. How would you call this function with an example array, and what would the output be?","solution":"def remove_odd_numbers(arr): Removes all the odd numbers from the given array. Parameters: arr (list of int): The array from which odd numbers should be removed. Returns: list of int: A new list with all odd numbers removed. return [num for num in arr if num % 2 == 0] # Example of calling the function example_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] output_array = remove_odd_numbers(example_array) print(output_array) # Output will be: [2, 4, 6, 8, 10]"},{"question":"Write a function to calculate the nth Fibonacci number using recursion. The function should also handle the case where n is negative and return an appropriate error message.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. If n is negative, returns an error message. if n < 0: return \\"Error: n should be a non-negative integer\\" elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to calculate the factorial of a number. The function should take in a single argument, the number, and return the factorial of that number. If the number is negative, the function should return -1, indicating an error since factorial is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of n. If n is a negative number, returns -1 indicating an error. if n < 0: return -1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to generate Fibonacci series up to n terms, where n is a positive integer. The function should return a list containing the Fibonacci series.","solution":"def generate_fibonacci_series(n): Generate Fibonacci series up to n terms. Parameters: n (int): The number of terms in the Fibonacci series to generate. Returns: list: A list containing the Fibonacci series up to n terms. if n <= 0: return [] fib_series = [0] * n if n > 0: fib_series[0] = 0 if n > 1: fib_series[1] = 1 for i in range(2, n): fib_series[i] = fib_series[i-1] + fib_series[i-2] return fib_series"},{"question":"Write a function to sort an array of integers using a stack in Python. The function should take an array of integers as input and return the sorted array. The primary goal is to implement a stack-based sorting algorithm.","solution":"def sort_stack_using_stack(arr): Sorts an array of integers using stacks. Parameters: arr (list): List of integers to sort. Returns: list: Sorted list of integers. # Auxiliary stack to help in sorting sorted_stack = [] # Process each element in the input array for value in arr: # While there are elements in sorted_stack and top of sorted_stack is greater than value while sorted_stack and sorted_stack[-1] > value: # Pop from sorted_stack and push to arr (simulation of back and forth moves) arr.append(sorted_stack.pop()) # Push the current value to the sorted_stack sorted_stack.append(value) # Now sorted_stack contains the sorted elements return sorted_stack"},{"question":"Write a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. For example, the string \\"A man, a plan, a canal, Panama\\" should return True.","solution":"def is_valid_palindrome(s): Checks if the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to find the union and intersection of two sets of numbers.","solution":"def union_and_intersection(set1, set2): Returns the union and intersection of two sets. Args: set1 -- first set of numbers set2 -- second set of numbers Returns: A tuple containing: - The union of set1 and set2 - The intersection of set1 and set2 union_set = set1.union(set2) intersection_set = set1.intersection(set2) return (union_set, intersection_set)"},{"question":"Write a function to remove all duplicate elements from an array.","solution":"def remove_duplicates(arr): Removes duplicates from the array while maintaining the order of elements. Parameters: arr (list): List of elements which may contain duplicates. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to merge k sorted arrays int a single sorted array. The function should take a vector of sorted vectors as input and return a single sorted vector containing all the elements from the input vectors.","solution":"import heapq def merge_k_sorted_arrays(arrays): Merges k sorted arrays into a single sorted array. Parameters: arrays (List[List[int]]): A list of k sorted arrays. Returns: List[int]: A single sorted array containing all elements from the input arrays. min_heap = [] for array_index, array in enumerate(arrays): if array: # Push first element of each array along with the array index and element index heapq.heappush(min_heap, (array[0], array_index, 0)) result = [] while min_heap: value, array_index, element_index = heapq.heappop(min_heap) result.append(value) # If there are more elements in the array, push the next element to the heap if element_index + 1 < len(arrays[array_index]): next_element = arrays[array_index][element_index + 1] heapq.heappush(min_heap, (next_element, array_index, element_index + 1)) return result"},{"question":"Write a function to find all the prime factors of a given number. A prime factor is a factor that is a prime number. For example, the prime factors of 18 are 2 and 3 since 18 = 2 x 3 x 3.","solution":"def prime_factors(n): Returns a list of all prime factors of the given number n. factors = [] divisor = 2 while n >= divisor: if n % divisor == 0: factors.append(divisor) n = n // divisor else: divisor += 1 return factors"},{"question":"Write a function to reverse a singly linked list. The linked list is represented by the head of the list. Each node in the list contains an integer value and a pointer to the next node. The function should return the head of the reversed list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, head of the singly linked list :return: ListNode, head of the reversed singly linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to demonstrate depth-first search (DFS) in a binary tree. The input will be the root of the tree and the target value. The function should return a boolean indicating whether the target value exists in the binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs(root, target): Perform a depth-first search on a binary tree to find the target value. :param root: TreeNode, the root of the binary tree. :param target: The value to be searched in the binary tree. :return: Boolean indicating whether the target value exists in the binary tree. if root is None: return False if root.value == target: return True return dfs(root.left, target) or dfs(root.right, target)"},{"question":"Write a function to find the maximum sum of a subarray given a list of integers. This function should return the maximum sum possible.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray in the list of integers \`nums\`. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to calculate the nth power of a number using recursion in Python. The function should take two parameters: the base number and the exponent. It should return the result of raising the base number to the exponent using a recursive approach.","solution":"def power(base, exponent): Returns the base raised to the exponent using recursion. Parameters: base (int/float): the base number exponent (int): the exponent to raise the base Returns: int/float: the result of base raised to the exponent if exponent == 0: return 1 elif exponent > 0: return base * power(base, exponent - 1) else: return 1 / power(base, -exponent)"},{"question":"Write a function to return the nth Fibonacci number in Python. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones (0, 1, 1, 2, 3, 5, 8, 13, ...). How can you write a function that calculates the nth Fibonacci number using recursive calls?","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones (0, 1, 1, 2, 3, 5, 8, 13, ...). if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to calculate the total cost of an order, including tax.","solution":"def calculate_total_cost(order_subtotal, tax_rate): Calculate the total cost of an order including tax. Parameters: order_subtotal (float): The subtotal of the order before tax. tax_rate (float): The tax rate as a decimal (e.g., 0.07 for 7% tax). Returns: float: The total cost of the order including tax. if order_subtotal < 0: raise ValueError(\\"Order subtotal cannot be negative\\") if not (0 <= tax_rate <= 1): raise ValueError(\\"Tax rate must be between 0 and 1\\") total_cost = order_subtotal * (1 + tax_rate) return round(total_cost, 2)"},{"question":"Write a function to determine if a given list of numbers is sorted in ascending order, descending order, or not sorted at all. Write it in Python.","solution":"def determine_sort_order(numbers): Determines if a list of numbers is sorted in ascending order, descending order, or not sorted at all. Args: numbers (list): A list of numbers. Returns: str: 'ascending' if the list is sorted in ascending order, 'descending' if the list is sorted in descending order, 'not sorted' if the list is not sorted. if numbers == sorted(numbers): return 'ascending' elif numbers == sorted(numbers, reverse=True): return 'descending' else: return 'not sorted'"},{"question":"Write a function to check if the brackets in the given string are balanced. The function should return \`True\` if every opening bracket has a corresponding closing bracket in the correct order, and \`False\` otherwise. The string will only contain the characters \`(\`, \`)\`, \`{\`, \`}\`, \`[\`, and \`]\`.","solution":"def are_brackets_balanced(s): Checks if the brackets in the given string are balanced. Args: s (str): The input string containing brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {')': '(', '}': '{', ']': '['} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: # In case of any other character (which shouldn't be there by the problem statement) return False return stack == []"},{"question":"Write a function to compute a hash value for a given string using the Python built-in hash() function.","solution":"def compute_hash_value(input_string): Returns the hash value of the given string using Python's built-in hash() function. return hash(input_string)"},{"question":"Write a function to implement a binary search algorithm to find the position of an element in a sorted array. If the element is not found, return -1. Here is a sample array: arr = [1, 2, 4, 5, 6, 8, 10, 12]","solution":"def binary_search(arr, target): Implements binary search to find the position of target in a sorted array. If the element is not found, returns -1. Parameters: arr (list): The sorted array to search within. target (int): The element to search for in the array. Returns: int: The index of the target element in the array or -1 if not found. left = 0 right = len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to evaluate the sum of an infinite geometric series. The function should take the first term \`a\` and common ratio \`r\` as input parameters and return the sum of the series if the common ratio is between 0 and 1 (exclusive). If the common ratio is outside this range, the function should return \`None\` to indicate that the series does not converge.","solution":"def infinite_geometric_series_sum(a, r): Returns the sum of an infinite geometric series with first term 'a' and common ratio 'r'. Returns None if the common ratio 'r' is not between 0 and 1 (exclusive). if 0 < r < 1: return a / (1 - r) else: return None"},{"question":"Write a function to extract all numbers from a given string and return them in a list. For instance, if the input string is \\"abc123def456ghi789\\", the output should be a list containing the numbers 123, 456, and 789.","solution":"import re def extract_numbers(input_string): Extracts all numbers from a given string and returns them in a list. Args: input_string (str): The input string from which to extract numbers. Returns: list: A list of integers representing the numbers extracted from the input string. return [int(num) for num in re.findall(r'd+', input_string)]"},{"question":"Write a function to insert a node with a given value into a binary search tree (BST). If the BST is already empty, the function should create a new root node with the given value. Otherwise, it should insert the node in the appropriate position to maintain the BST properties.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_into_bst(root, val): Inserts a new node with the given value into the binary search tree rooted at 'root'. Returns the root of the modified binary search tree. if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root"},{"question":"Write a function to calculate the total number of positive integers less than 1000 that are divisible by both 3 and 5. How can I iterate through all numbers in this range and check for divisibility?","solution":"def count_divisible_by_3_and_5(): Returns the count of positive integers less than 1000 that are divisible by both 3 and 5. count = 0 for i in range(1, 1000): if i % 3 == 0 and i % 5 == 0: count += 1 return count"},{"question":"Write a function to find the maximum number of consecutive '1' bits in a given integer. For example, in the binary representation of the integer 13 (which is 1101), the function should return 3 because there are three consecutive '1' bits.","solution":"def max_consecutive_ones(n): Returns the maximum number of consecutive '1' bits in the binary representation of the given integer. :param n: Integer :return: Maximum number of consecutive '1' bits # Convert integer to binary representation and strip the '0b' prefix binary_representation = bin(n)[2:] # Split the binary string by '0' and find the maximum length of the resulting parts return max(len(bits) for bits in binary_representation.split('0'))"},{"question":"Write a function to reverse a string in Python. The function should take a string \`s\` as input and return the reversed string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to find the longest common prefix (LCP) of a list of strings. The function should take a list of strings as input and return the longest common prefix discovered.","solution":"def longest_common_prefix(strs): Returns the longest common prefix of the list of strings. :param strs: List of strings :return: String representing the longest common prefix if not strs: return \\"\\" # Sort the array to have the shortest prefix candidates at start strs.sort() # The longest common prefix will be between the first and the last item after sorting first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Write a function to convert a given string to its corresponding Pig Latin version. In Pig Latin, if a word begins with a vowel, add \\"way\\" to the end of the word. If the word begins with a consonant, move the first letter to the end and then add \\"ay\\". Please provide a detailed explanation of your solution.","solution":"def to_pig_latin(sentence): Convert the given sentence to its corresponding Pig Latin version. Parameters: sentence (str): The input sentence to be converted. Returns: str: The Pig Latin version of the sentence. vowels = \\"aeiouAEIOU\\" words = sentence.split() pig_latin_words = [] for word in words: if word[0] in vowels: pig_latin_word = word + \\"way\\" else: pig_latin_word = word[1:] + word[0] + \\"ay\\" pig_latin_words.append(pig_latin_word) return \\" \\".join(pig_latin_words)"},{"question":"Write a function to calculate the length of the longest path in a binary tree, where each node is labeled with a unique integer. The path may start at any node and may pass through zero or more nodes. A node can be part of multiple paths.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def longest_path_length(root): Returns the length of the longest path in the binary tree. def dfs(node): nonlocal max_length if not node: return 0 left_length = dfs(node.left) right_length = dfs(node.right) max_length = max(max_length, left_length + right_length) return max(left_length, right_length) + 1 max_length = 0 dfs(root) return max_length"},{"question":"Write a function to calculate the mean of an array of numbers using Python.","solution":"def calculate_mean(numbers): Returns the mean (average) of a list of numbers. :param numbers: List of numbers :return: Mean of the numbers if not numbers: return 0 # return 0 for empty list return sum(numbers) / len(numbers)"},{"question":"Write a function to find the shortest path in a 2D grid using Breadth-First Search (BFS). The grid represents a maze, where 0 represents an open path and 1 represents a blocked cell. The function should return the length of the shortest path from the start point to the end point, or -1 if no path exists.","solution":"from collections import deque def shortest_path(grid, start, end): Finds the shortest path in a 2D grid using Breadth-First Search (BFS). :param grid: List of lists, where 0 represents an open path and 1 represents a blocked cell. :param start: Tuple (x, y) representing the start point. :param end: Tuple (x, y) representing the end point. :return: Length of the shortest path from start to end, or -1 if no path exists. if not grid or start == end: return 0 rows, cols = len(grid), len(grid[0]) queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function to print all numbers from 1 to n without using any looping or conditional statements?","solution":"def print_numbers(n, current=1): Recursively prints all numbers from 1 to n without using any loops or conditionals. # Base case for the recursive function if current > n: return print(current) # Recursive call print_numbers(n, current + 1)"},{"question":"Write a function to rotate an array by a given number of positions. The function should take an array and the number of positions to rotate as parameters. If the number of positions exceeds the length of the array, the function should handle it elegantly (either wrap around or handle any special case).","solution":"def rotate_array(arr, positions): Rotate the array 'arr' to the right by 'positions' number of steps. If 'positions' is greater than the length of the array, it should wrap around. Parameters: arr (list): The list of elements to rotate. positions (int): The number of positions to rotate the list. Returns: list: The rotated list. if not arr: return arr n = len(arr) positions = positions % n # handle positions greater than the length of the array return arr[-positions:] + arr[:-positions]"},{"question":"Write a function to convert a given binary number to its decimal equivalent using bitwise operators in Python. The function should take an integer representing the binary number and return the decimal equivalent as an integer.","solution":"def binary_to_decimal(binary_number): Converts a given binary number to its decimal equivalent using bitwise operators. Parameters: binary_number (int): The binary number to convert. Returns: int: The decimal equivalent of the binary number. decimal_number = 0 power = 0 while binary_number > 0: decimal_number += (binary_number & 1) << power binary_number >>= 1 power += 1 return decimal_number"},{"question":"Write a function to reverse a linked list while maintaining the original order of nodes in the reversed list. For example, if the linked list is 1 -> 2 -> 3 -> 4, the function should return 4 -> 3 -> 2 -> 1, but the values in each node should remain 1, 2, 3, 4.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the linked list while maintaining the original order of values in the nodes. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def linked_list_to_list(head): Helper function to convert linked list to list for testing. result = [] while head: result.append(head.val) head = head.next return result def list_to_linked_list(lst): Helper function to convert list to linked list for testing. dummy = ListNode() current = dummy for value in lst: current.next = ListNode(val=value) current = current.next return dummy.next"},{"question":"Write a function to find a number that appears only once in an array. All other numbers appear three times. The function should return the single number that appears only once. If the array is empty, the function should return 0.","solution":"def single_number(nums): Finds the number that appears only once in an array where all other numbers appear three times. If the array is empty, returns 0. Args: nums (list): A list of integers. Returns: int: The single number that appears only once or 0 if the array is empty. if not nums: return 0 # Initialize variables to keep track of bits occurring once and twice once, twice = 0, 0 for num in nums: # 'twice' retains bits that are present twice among all elements seen so far twice |= once & num # 'once' retains bits that are present once among all elements seen so far once ^= num # Common bits between 'once' and 'twice' will give bits occurring thrice, # so we need to reset these bits from 'once' and 'twice' thrice = once & twice # Reset bits occurring thrice in 'once' and 'twice' once &= ~thrice twice &= ~thrice return once"},{"question":"Write a function to calculate the maximum profit from buying and selling stocks on a single day. You are given a list of stock prices on consecutive days.","solution":"def max_profit(prices): Given a list of stock prices, calculate the maximum profit that can be achieved from buying and then selling the stock on a single day. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Update max_profit if the current profit is greater. current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit # Update min_price if the current price is lower. if price < min_price: min_price = price return max_profit"},{"question":"Write a function to rotate an array to the right by k positions. The function should return the rotated array. If k is greater than the length of the array, the function should handle this by considering the effective rotations which is the remainder of k divided by the array length.","solution":"def rotate_array(arr, k): Rotates the array to the right by k positions. Args: arr (list): The array to rotate. k (int): The number of positions to rotate the array. Returns: list: The rotated array. n = len(arr) if n == 0: return arr # if array is empty, return it as is k = k % n # avoid rotations larger than the array size return arr[-k:] + arr[:-k]"},{"question":"Write a function to update a user's email in a dictionary data structure. The dictionary contains user details where the keys are user IDs and the values are another dictionary containing the user's name and email. The function should update the user's email based on the user ID and return the updated dictionary.","solution":"def update_user_email(users, user_id, new_email): Updates the email of a user in the users dictionary. Parameters: users (dict): dictionary of user details where keys are user IDs and values are dictionaries with user information. user_id (str): the ID of the user whose email needs to be updated. new_email (str): the new email address for the user. Returns: dict: updated users dictionary. if user_id in users: users[user_id]['email'] = new_email return users"},{"question":"Write a function to calculate the shortest path in a weighted graph.","solution":"import heapq def dijkstra(graph, start): Computes the shortest path distances from the starting node to all other nodes in a weighted graph. Parameters: graph : dict A dictionary where the keys are nodes and the value for each key is a list of tuples. Each tuple contains a neighbor node and the weight of the edge connecting to that neighbor. start : any The starting node. Returns: dict : A dictionary where the keys are nodes and the values are the shortest path distance from the start node. # Priority queue to store (distance, node) queue = [(0, start)] distances = {node: float('inf') for node in graph} distances[start] = 0 while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances"},{"question":"Write a function to return the middle value in a list of numbers. If the list has an odd number of elements, the function should return the middle element. If the list has an even number of elements, the function should return the average of the two middle elements.","solution":"def middle_value(numbers): Returns the middle value in a list of numbers. If the list has an odd number of elements, the function returns the middle element. If the list has an even number of elements, the function returns the average of the two middle elements. n = len(numbers) if n == 0: raise ValueError(\\"The list must not be empty\\") mid = n // 2 if n % 2 == 1: return numbers[mid] else: return (numbers[mid - 1] + numbers[mid]) / 2"},{"question":"Write a function to reverse the words in a string in Python. For example, given the string \\"Hello world from Python\\", the function should return \\"Python from world Hello\\".","solution":"def reverse_words(s): Given a string, reverse the order of the words. return ' '.join(s.split()[::-1])"},{"question":"Write a function to find the minimum number of changes required to make a binary string alternating between 0 and 1. The function should take a binary string as input and return an integer representing the minimum number of changes needed.","solution":"def min_changes_to_alternating(binary_string): Returns the minimum number of changes required to make the binary string alternating between 0 and 1. count1 = 0 # Changes needed if we start with '0' count2 = 0 # Changes needed if we start with '1' for i in range(len(binary_string)): if i % 2 == 0: if binary_string[i] != '0': count1 += 1 if binary_string[i] != '1': count2 += 1 else: if binary_string[i] != '1': count1 += 1 if binary_string[i] != '0': count2 += 1 return min(count1, count2)"},{"question":"Write a function to calculate the total number of unique permutations of a given array of integers. The function should handle cases where the array contains duplicate elements.","solution":"from collections import Counter from math import factorial def unique_permutations(arr): Calculate the total number of unique permutations of a given array of integers, taking into account duplicate elements. Args: arr (list of int): The array of integers. Returns: int: The total number of unique permutations. count_freq = Counter(arr) n = len(arr) denominator = 1 for freq in count_freq.values(): denominator *= factorial(freq) return factorial(n) // denominator"},{"question":"Write a function to check if a given string \`s\` is a valid palindrome, ignoring spaces, punctuation and capitalization.","solution":"import string def is_palindrome(s): Checks if the given string s is a valid palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): Input string. Returns: bool: True if s is a palindrome, False otherwise. # Remove spaces, punctuation, and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forwards and backwards return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to calculate the sum of all integers in a list that are greater than a specified threshold. The function should be efficient and concise.","solution":"def sum_above_threshold(nums, threshold): Returns the sum of all integers in the list 'nums' that are greater than 'threshold'. return sum(num for num in nums if num > threshold)"},{"question":"Write a function to identify and return the smallest integer in a non-empty list of integers. In the case of an empty list, the function should return an appropriate value indicating no elements are present.","solution":"def find_smallest_integer(lst): Returns the smallest integer in a non-empty list of integers. If the list is empty, returns None. if not lst: # Check if the list is empty return None return min(lst)"},{"question":"Write a function to parse a string and extract all the numbers in it. For example, given the string \\"hello123world456\\", the function should return a list of numbers [123, 456].","solution":"import re def extract_numbers(text): Given a string, returns a list of all the numbers found in the string. return list(map(int, re.findall(r'd+', text)))"},{"question":"Write a function to reverse the words in a sentence. The function should take a single string as input and return a new string with the words in reverse order. Words are defined as sequences of characters separated by whitespace.","solution":"def reverse_words(sentence): Reverses the words in a given sentence. Args: sentence (str): The sentence to be reversed. Returns: str: A new sentence with the words in reversed order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the factorial of a given non-negative integer. The function should handle values of up to 1000. To optimize for performance, particularly for larger numbers, consider using a loop. Additionally, handle potential overflow issues that might arise.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to reverse the order of characters in an entire word. For example, if the word is \\"example\\", the reversed word should be \\"elpmaxe\\".","solution":"def reverse_word(word): Returns the word with its characters in reverse order. return word[::-1]"},{"question":"Write a function to remove duplicates from an array in Python, preserving the order of the remaining elements. You should use a different approach than the one provided in the given solution.","solution":"def remove_duplicates(arr): Removes duplicates from an array while preserving the original order of elements. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to check if two strings are anagrams of each other. Two strings are considered anagrams if they can be rearranged to form each other.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Lowercase both strings and filter out non-alphanumeric characters str1 = ''.join(filter(str.isalnum, str1.lower())) str2 = ''.join(filter(str.isalnum, str2.lower())) # Check if sorted characters of both strings are the same return sorted(str1) == sorted(str2)"},{"question":"Write a function to find the unique elements in a list of numbers and return them in a new list.","solution":"def find_unique_elements(numbers): Returns a list of unique elements in the provided list of numbers. unique_elements = [] seen = set() for number in numbers: if number not in seen: unique_elements.append(number) seen.add(number) return unique_elements"},{"question":"Write a function to find all unique combinations of a given list of integers that sum up to a target value. Each number in the list can only be used once in the combination. The order of the combinations does not matter, but the numbers in each combination should be in ascending order.","solution":"from typing import List def unique_combinations(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path[:]) return if target < 0: return for i in range(start, len(sorted_nums)): if i > start and sorted_nums[i] == sorted_nums[i-1]: # skip duplicates continue path.append(sorted_nums[i]) backtrack(i + 1, target - sorted_nums[i], path) path.pop() sorted_nums = sorted(nums) # sort input to ensure combinations are in ascending order result = [] backtrack(0, target, []) return result"},{"question":"Write a function to decode a given string using the Caesar cipher with a specified shift value. The function should handle both lowercase and uppercase letters, and non-alphabetical characters should remain unchanged.","solution":"def caesar_decode(s, shift): Decodes a given string s using the Caesar cipher with a specified shift value. Only alphabetical characters are shifted while others remain unchanged. def shift_char(c, shift): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') - shift) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') - shift) % 26 + ord('A')) return c return ''.join(shift_char(c, shift) for c in s)"},{"question":"Write a function to find the kth smallest element in an array, and return its index. The function is expected to be able to handle arrays with integers ranging from -10^9 to 10^9 and elements can have multiples. The function signature is defined as: \`int kthSmallest(int[] arr, int k)\`, where \`arr\` is the input array and \`k\` is the order of the smallest element to find. If the input is invalid such as \`k\` being less than 1 or greater than the length of the array, the function should return -1.","solution":"def kthSmallest(arr, k): Returns the index of the kth smallest element in the array. If k is out of bounds, returns -1. if k < 1 or k > len(arr): return -1 arr_with_index = [(num, i) for i, num in enumerate(arr)] arr_with_index.sort() return arr_with_index[k-1][1]"},{"question":"Write a function to return the middle value of a given list. If the list has an even number of elements, return the average of the two middle values. If the list is empty, return None.","solution":"def middle_value(lst): Returns the middle value of a given list. If the list has an even number of elements, returns the average of the two middle values. If the list is empty, returns None. if not lst: return None n = len(lst) mid = n // 2 if n % 2 == 1: return lst[mid] else: return (lst[mid - 1] + lst[mid]) / 2"},{"question":"Write a function to detect cycles in a directed graph using BFS (Breadth-First Search) traversal. The graph is represented as an adjacency list in Python.","solution":"from collections import deque, defaultdict def detect_cycle_bfs(graph): Detects cycles in a directed graph using BFS traversal. Parameters: graph (dict): A dictionary representing the adjacency list of the graph. Returns: bool: True if a cycle is detected, False otherwise. indegree = defaultdict(int) # Count the indegrees of each node for node in graph: for neighbor in graph[node]: indegree[neighbor] += 1 # Collect all nodes with indegree 0 queue = deque([node for node in graph if indegree[node] == 0]) visited_nodes = 0 while queue: node = queue.popleft() visited_nodes += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If all nodes are visited, then there is no cycle return visited_nodes != len(graph)"},{"question":"Write a function to reverse a linked list in Python. Define a \`Node\` class for the linked list structure. The function should take the head of the linked list as an argument and return the new head of the reversed linked list. Additionally, provide a helper function to print the linked list for testing purposes.","solution":"class Node: def __init__(self, value): self.value = value self.next = None def reverse_linked_list(head): previous = None current = head while current: next_node = current.next current.next = previous previous = current current = next_node return previous def print_linked_list(head): current = head values = [] while current: values.append(current.value) current = current.next return values"},{"question":"Write a function to find the first occurrence of the minimum value in a sorted list and return its index. If the list contains multiple occurrences of the minimum value, return the index of the first occurrence. If the list is empty, return -1. The function should handle lists with negative numbers, zero, and positive numbers.","solution":"def first_occurrence_of_min(sorted_list): Returns the index of the first occurrence of the minimum value in a sorted list. If the list is empty, returns -1. :param sorted_list: List of integers (sorted in non-decreasing order) :return: Index of the first occurrence of the minimum value or -1 if the list is empty if not sorted_list: return -1 return 0 # Since the list is sorted, the minimum value is always at index 0"},{"question":"Write a function to reverse the elements of a one-dimensional vector (array) in Python.","solution":"def reverse_vector(vector): Returns the reversed version of the input vector (array). return vector[::-1]"},{"question":"Write a function to reverse a stack without using any additional data structures. You can only use recursive calls. How can I approach this problem?","solution":"# Function to insert an element at the bottom of a stack. def insert_at_bottom(stack, item): if not stack: stack.append(item) else: top = stack.pop() insert_at_bottom(stack, item) stack.append(top) # Recursive function to reverse the stack. def reverse_stack(stack): if stack: top = stack.pop() reverse_stack(stack) insert_at_bottom(stack, top)"},{"question":"Write a function to find the missing number in an array of integers. The array contains numbers from 1 to n with one number missing. Do this without using extra space and in O(n) time complexity.","solution":"def find_missing_number(arr): Finds the missing number in an array that contains all the numbers from 1 to n except one missing number. Parameters: arr (list): An array containing the numbers from 1 to n except one. Returns: int: The missing number. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a function to find the longest common prefix between two strings. The function should return the longest common prefix, or an empty string if there is no common prefix.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix between two strings. If there is no common prefix, returns an empty string. min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return str1[:i] return str1[:min_length]"},{"question":"Write a function to perform the preorder traversal of a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def preorder_traversal(root): Perform a preorder traversal of a binary tree. if root is None: return [] # Preorder traversal: root, left, right result = [root.value] result.extend(preorder_traversal(root.left)) result.extend(preorder_traversal(root.right)) return result"},{"question":"Write a function to find the intersection of two sets of integers.","solution":"def intersection(set1, set2): Returns the intersection of two sets of integers. return set1.intersection(set2)"},{"question":"Write a function to return the maximum element in a singly linked list where the elements are in ascending order but there may be duplicate elements.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_max(head): Returns the maximum element in a singly linked list. Assumes the elements are in ascending order, possibly with duplicates. if not head: return None max_value = head.val current = head while current: if current.val > max_value: max_value = current.val current = current.next return max_value"},{"question":"Write a function to return the n-th Fibonacci number in Python. The function should handle the cases when n is 0 or 1.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: - fibonacci(0) = 0 - fibonacci(1) = 1 - fibonacci(n) = fibonacci(n-1) + fibonacci(n-2) for n >= 2 if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to sort an array of integers using the Bubble Sort algorithm. Bubble Sort is a simple sorting algorithm that repeatedly steps through the array, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the array is repeated until the array is sorted. The function should be named \`bubble_sort\` and take an array as its input and return the sorted array.","solution":"def bubble_sort(arr): n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a function to reverse a string in Python. You should return the reversed string without using slicing or the reversed() function. Instead, use a loop to iterate through the string in reverse.","solution":"def reverse_string(s): Returns the reversed string of the input string s reversed_s = \\"\\" for char in range(len(s) - 1, -1, -1): reversed_s += s[char] return reversed_s"},{"question":"Write a function to sort an array of integers in ascending order using the Quick Sort algorithm. Provide the code implementation in Python.","solution":"def quick_sort(arr): Sorts an array of integers in ascending order using the Quick Sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to count and return the minimum number of operations required to transform a given integer into an even number. If the number is already even, return 0. An operation is defined as incrementing or decrementing the number by 1.","solution":"def min_operations_to_even(n): Returns the minimum number of operations required to transform the given integer n into an even number. If n is already even, returns 0. Each operation is either incrementing or decrementing the number by 1. if n % 2 == 0: return 0 else: return 1"},{"question":"Write a function to generate all possible subsets of a given list of numbers.","solution":"def generate_subsets(nums): Generates all possible subsets of a given list of numbers. Parameters: nums (List[int]): The list of numbers from which to generate subsets. Returns: List[List[int]]: A list containing all subsets of the input list. def backtrack(first=0, curr=[]): if len(curr) == k: output.append(curr[:]) return for i in range(first, len(nums)): curr.append(nums[i]) backtrack(i + 1, curr) curr.pop() output = [] for k in range(len(nums) + 1): backtrack() return output"},{"question":"Write a function to find the median of two sorted arrays of integers. The function should have a time complexity of O(log(n + m)), where n and m are the lengths of the two arrays, respectively. How would you approach this problem?","solution":"def find_median_sorted_arrays(nums1, nums2): Finds the median of two sorted arrays. if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 x, y = len(nums1), len(nums2) low, high = 0, x while low <= high: partitionX = (low + high) // 2 partitionY = (x + y + 1) // 2 - partitionX maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1] minX = float('inf') if partitionX == x else nums1[partitionX] maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1] minY = float('inf') if partitionY == y else nums2[partitionY] if maxX <= minY and maxY <= minX: if (x + y) % 2 == 0: return (max(maxX, maxY) + min(minX, minY)) / 2 else: return max(maxX, maxY) elif maxX > minY: high = partitionX - 1 else: low = partitionX + 1 raise ValueError(\\"Input arrays are not sorted\\")"},{"question":"Write a function to print the FizzBuzz sequence up to a given number using Python. The function should take one parameter, \`n\`, which is the upper limit of the sequence. For multiples of 3, print \\"Fizz\\", for multiples of 5, print \\"Buzz\\", and for multiples of both 3 and 5, print \\"FizzBuzz\\". For all other numbers, print the number itself.","solution":"def fizzbuzz(n): Prints the FizzBuzz sequence up to a given number n. For multiples of 3, prints \\"Fizz\\". For multiples of 5, prints \\"Buzz\\". For multiples of both 3 and 5, prints \\"FizzBuzz\\". For all other numbers, prints the number itself. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to calculate the sum of all even numbers in a given array using a functional programming approach.","solution":"from functools import reduce def sum_of_evens(arr): Returns the sum of all even numbers in the given list. Parameters: arr (list of ints): A list of integers. Returns: int: The sum of all even numbers. return reduce(lambda acc, x: acc + x if x % 2 == 0 else acc, arr, 0)"},{"question":"Write a function to calculate the minimum number of jumps to reach the end of the array (arr) from the start of the array (index 0) where each element in the array represents the maximum jump length at that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps to reach the end of the array. :param arr: List[int] - array where each element represents the maximum length of jump from that position :return: int - minimum number of jumps to reach the end of the array if len(arr) <= 1: return 0 if arr[0] == 0: return float('inf') n = len(arr) jumps = 0 maxReach = arr[0] steps = arr[0] for i in range(1, n): if i == n-1: return jumps + 1 maxReach = max(maxReach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= maxReach: return float('inf') steps = maxReach - i return float('inf')"},{"question":"Write a function to remove duplicates from a sorted array in Python.","solution":"def remove_duplicates_from_sorted_array(arr): Removes duplicates from a sorted array in-place and returns the length of the array after duplicates have been removed. The function works by iterating through the array and keeping track of the index for unique elements. Parameters: arr (list of int): The sorted array from which duplicates need to be removed. Returns: int: The length of the array after duplicates have been removed. if not arr: return 0 # The index of the last unique element last_unique_index = 0 for i in range(1, len(arr)): if arr[i] != arr[last_unique_index]: last_unique_index += 1 arr[last_unique_index] = arr[i] return last_unique_index + 1"},{"question":"Write a function to decode a run-length encoded list. The encoded list is represented as a list of pairs \`[count, value]\`, where \`count\` is an integer representing how many times \`value\` appears consecutively. Your function should return the decoded list.","solution":"def decode_rle(encoded_list): Decodes a run-length encoded list. Parameters: - encoded_list (list of [count, value] pairs): The run-length encoded list. Returns: - list: The decoded list. decoded_list = [] for count, value in encoded_list: decoded_list.extend([value] * count) return decoded_list"},{"question":"Write a function to return the nth Fibonacci number using dynamic programming to optimize the solution. The nth Fibonacci number is defined as F(n) = F(n-1) + F(n-2), with F(0) = 0 and F(1) = 1. You should use a bottom-up approach to solve this problem.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming (bottom-up approach). if n == 0: return 0 elif n == 1: return 1 # Initialize the base cases fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a function to identify if a linked list has a cycle. If the cycle exists, return the node at the start of the cycle; otherwise, return None.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): Detects a cycle in a linked list. If a cycle exists, returns the node at the start of the cycle; otherwise, returns None. if not head or not head.next: return None slow = fast = head # First phase: Detect whether there is a cycle while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: # No cycle return None # Second phase: Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to check if a given binary tree is a symmetric tree. A symmetric tree is one where the binary tree is a mirror reflection of itself across its root. In other words, the left subtree of the root is a mirror image of the right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Check if the binary tree is symmetric. :param root: TreeNode :return: bool if not root: return True def is_mirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val) and is_mirror(left.left, right.right) and is_mirror(left.right, right.left) return is_mirror(root.left, root.right)"},{"question":"Write a function to merge two sorted linked lists. The function should return a new linked list that is sorted by the values in both input linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. :param l1: ListNode, first sorted linked list :param l2: ListNode, second sorted linked list :return: ListNode, merged sorted linked list dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 if l2: current.next = l2 return dummy.next"},{"question":"Write a function to simulate the rolling of a pair of dice. Each die has 6 faces, numbered from 1 to 6. The function should return the sum of the numbers on the two dice.","solution":"import random def roll_dice(): Simulates rolling a pair of dice and returns the sum of the numbers on the two dice. die1 = random.randint(1, 6) die2 = random.randint(1, 6) return die1 + die2"},{"question":"Write a function to solve this problem: Assume that, given a list of integers, you need to write a function that will return the frequency of each unique number in the list.","solution":"def frequency_of_numbers(nums): Returns the frequency of each unique number in the list. frequency_dict = {} for num in nums: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"Write a function to calculate the sum of a range of numbers from \`a\` to \`b\`. The function should be inclusive of both \`a\` and \`b\` in the sum.","solution":"def sum_range(a, b): Returns the sum of the numbers from a to b (inclusive). if a > b: a, b = b, a total = 0 for num in range(a, b + 1): total += num return total"},{"question":"Write a function to find the number of ones in the binary representation of a given integer.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a function to find the minimum sum of a subarray in a given array of integers.","solution":"def min_subarray_sum(arr): Returns the minimum sum of a subarray in the given array of integers. if not arr: return 0 current_min = arr[0] global_min = arr[0] for num in arr[1:]: current_min = min(num, current_min + num) if current_min < global_min: global_min = current_min return global_min"},{"question":"Write a function to find the longest common prefix (LCP) among a list of strings.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. :param strs: List of strings :return: The longest common prefix if not strs: return \\"\\" # Start with the first string in the list as the prefix prefix = strs[0] for string in strs[1:]: while string[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] if not prefix: break return prefix"},{"question":"Write a function to convert a string to a double-precision floating point number.","solution":"def string_to_double(s): Converts a string to a double-precision floating point number. Args: s (str): The string to convert. Returns: float: The converted double-precision floating point number. try: return float(s) except ValueError: raise ValueError(\\"The provided string cannot be converted to a float\\")"},{"question":"Write a function to convert a given list of integers into their corresponding ordinal word representations (\\"1st\\", \\"2nd\\", \\"3rd\\", etc.). Your function should be named \`convert_to_ordinal\` and take a list of integers as an input and return a list of ordinal word strings. Ensure your solution iterates through each number and appends the appropriate ordinal suffix to it. For example, for the input list \`[1, 2, 3, 4, 11, 21, 31]\`, your function should return \`['1st', '2nd', '3rd', '4th', '11th', '21st', '31st']\`.","solution":"def convert_to_ordinal(numbers): Converts a list of integers to their corresponding ordinal word representations. Parameters: numbers (list): A list of integers to be converted. Returns: list: A list of strings with ordinal word representations. def ordinal(n): if 10 <= n % 100 <= 20: suffix = 'th' else: suffix = {1: 'st', 2: 'nd', 3: 'rd'}.get(n % 10, 'th') return str(n) + suffix return [ordinal(num) for num in numbers]"},{"question":"Write a function to find the roots of a quadratic equation. The coefficients of the quadratic equation are passed as arguments to the function. The function should return the roots of the equation. If the equation has no real roots, the function should return a message indicating no real roots. If the equation has real roots, the function should return the roots as a tuple. If the equation has a single real root, the function should still return it as a tuple with one element.","solution":"import cmath def find_roots(a, b, c): Finds the roots of the quadratic equation ax^2 + bx + c = 0. Returns a tuple of the roots if they are real. Returns a message if there are no real roots. # Calculate discriminant discriminant = b**2 - 4*a*c # Check if discriminant is negative if discriminant < 0: return \\"No real roots\\" # Calculate two possible roots root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) # Check if roots are real if discriminant == 0: return (root1.real,) else: return (root1.real, root2.real)"},{"question":"Write a function to print balanced parentheses. This function prints '(', ')', and returns the number of pairs of balanced parentheses it can generate using '(', ')'.","solution":"def print_balanced_parentheses(n): Generates all combinations of n pairs of balanced parentheses. Returns the list of these combinations. result = [] def backtrack(s='', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + '(', left + 1, right) if right < left: backtrack(s + ')', left, right + 1) backtrack() return result"},{"question":"Write a function to generate the gray code sequence for n bits. Gray code is a binary numeral system where two successive values differ in only one bit. Here is how you can think about it: start with 0, then you have 1 (which changes the least significant bit from 0 to 1), then 3 (which flips the second least significant bit of 1), followed by 2 (flipping back the second least significant bit of 3), and so on.","solution":"def gray_code(n): Generate the sequence of Gray codes for a given number of bits. Parameters: n (int): Number of bits Returns: List[int]: A list of integers representing the Gray code sequence if n == 0: return [0] gray_codes = gray_code(n - 1) return gray_codes + [x + (1 << (n - 1)) for x in reversed(gray_codes)]"},{"question":"Write a function to count the number of integers in a given range [L, R] that are divisible by both X and Y.","solution":"def count_divisible(L, R, X, Y): Returns the count of integers in the range [L, R] that are divisible by both X and Y. count = 0 L = max(L, X * Y) # Ensuring L is at least the product of X and Y for number in range(L, R + 1): if number % X == 0 and number % Y == 0: count += 1 return count"},{"question":"Write a function to add two numbers without using the '+' operator. The function should take two integers as input and return their sum. Additionally, provide the time and space complexity of the function.","solution":"def add_without_plus(a, b): Returns the sum of a and b without using the '+' operator. Uses bitwise operations to achieve the sum. MAX_INT = 0x7FFFFFFF MASK = 0xFFFFFFFF while b != 0: carry = (a & b) << 1 a = (a ^ b) & MASK b = carry & MASK # Handle negative values return a if a <= MAX_INT else ~(a ^ MASK) # Time Complexity: O(1) # Space Complexity: O(1)"},{"question":"Write a function to calculate the factorial of a number in a language of your choice (Choose the language of your preference).","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to check if a given string is a palindrome using a stack. A palindrome is a string that reads the same backward as forward, and a stack is a Last In First Out (LIFO) data structure.","solution":"def is_palindrome(s): Checks if the given string is a palindrome using a stack. :param s: Input string :return: True if the string is a palindrome, False otherwise stack = [] for char in s: stack.append(char) reversed_str = '' while stack: reversed_str += stack.pop() return s == reversed_str"},{"question":"Write a function to merge two sorted lists into one sorted list. The solution should be efficient in terms of time complexity.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from either list into result. while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Capture remaining elements of list1, if any. while i < len(list1): merged_list.append(list1[i]) i += 1 # Capture remaining elements of list2, if any. while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function to generate the first n Fibonacci numbers using a recursive approach. The function should take an integer \`n\` as input and return a list containing the Fibonacci sequence up to the nth number.","solution":"def fibonacci_recursive(n): Generates the first n Fibonacci numbers using a recursive approach. Returns a list containing the Fibonacci sequence up to the nth number. def fib_helper(x): if x <= 0: return [] elif x == 1: return [0] elif x == 2: return [0, 1] else: seq = fib_helper(x - 1) return seq + [seq[-1] + seq[-2]] return fib_helper(n)"},{"question":"Write a function to get the length of a string in a given programming language.","solution":"def get_length(string): Returns the length of a given string. return len(string)"},{"question":"Write a function to find the maximum number in an array. The function should be able to handle arrays of any length and return the correct maximum number.","solution":"def find_maximum(arr): Returns the maximum number in an array. Assumes the array is non-empty. :param arr: list of numbers. :return: the maximum number in the list. if not arr: raise ValueError(\\"The input array must be non-empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a function to remove duplicates from an unsorted linked list. You can use a hash table to solve this problem, but the goal is to solve it with O(1) space complexity.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(linked_list): Removes duplicates from an unsorted linked list with O(1) space complexity. if not linked_list or not linked_list.next: return linked_list current = linked_list while current: runner = current while runner.next: if runner.next.value == current.value: runner.next = runner.next.next else: runner = runner.next current = current.next return linked_list"},{"question":"Write a function to find the missing number in an array containing n distinct numbers in the range [0, n]. The array is expected to have one integer missing.","solution":"def find_missing_number(arr): Finds the missing number in an array containing n distinct numbers in the range [0, n]. Parameters: arr (list): The input list containing n distinct numbers in the range [0, n] with one number missing. Returns: int: The missing number. n = len(arr) total = n * (n + 1) // 2 array_sum = sum(arr) return total - array_sum"},{"question":"Write a function to create a dataframe using pandas where the data is from a dictionary.","solution":"import pandas as pd def create_dataframe(data_dict): Creates a DataFrame from a dictionary where keys are column names and values are lists of column data. :param data_dict: Dictionary with column names as keys and lists of data as values. :return: pandas DataFrame return pd.DataFrame(data_dict)"},{"question":"Write a function to find the union of two sets, represented as lists of elements without duplicates. For example, given two lists \`list1 = [1, 2, 3, 4]\` and \`list2 = [3, 4, 5, 6]\`, the function should return \`[1, 2, 3, 4, 5, 6]\`.","solution":"def union_of_sets(list1, list2): Returns the union of two sets (represented as lists). set1 = set(list1) set2 = set(list2) union_set = set1.union(set2) return list(union_set)"},{"question":"Write a function to generate all possible subsets of a given set \`{1, 2, ..., n}\`. Write this function in Python.","solution":"def generate_subsets(n): Generate all possible subsets of a set {1, 2, ..., n}. from itertools import chain, combinations def subsets(iterable): s = list(iterable) return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1))) return subsets(range(1, n+1))"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number n. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The function should return the sequence as a list. If n is less than or equal to 0, the function should return an empty list.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the given number n. Parameters: n (int): The upper bound for the maximum value in the sequence. Returns: list: A list containing the Fibonacci sequence up to n. if n <= 0: return [] fib_sequence = [0, 1] while True: next_value = fib_sequence[-1] + fib_sequence[-2] if next_value > n: break fib_sequence.append(next_value) return fib_sequence"},{"question":"Write a function to perform breadth-first search (BFS) on a graph. The graph will be represented using an adjacency list, and the function should return the shortest path from a given start node to all other nodes. If there is no path between the start node and a node, the distance should be represented as infinity.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, start): Perform BFS on a graph and return the shortest path from the start node to all other nodes. Parameters: graph (dict): A dictionary representing the graph using adjacency list. start: The start node. Returns: dict: A dictionary where keys are nodes and values are the shortest distance from the start node. If a node is not reachable from the start, its distance will be infinity. # Initialize distances with infinity distances = {node: float('inf') for node in graph} distances[start] = 0 # Create a queue and enqueue the start node queue = deque([start]) while queue: current_node = queue.popleft() # Process all neighbors for neighbor in graph[current_node]: if distances[neighbor] == float('inf'): # Not visited distances[neighbor] = distances[current_node] + 1 queue.append(neighbor) return distances"},{"question":"Write a function to calculate the binomial coefficient, which is the number of ways to choose k items from a set of n items without regard to the order of selection. The function should return the binomial coefficient for the given values of n and k.","solution":"from math import factorial def binomial_coefficient(n, k): Calculate the binomial coefficient, which is the number of ways to choose k items from a set of n items without regard to the order of selection. :param n: Total number of items :param k: Number of items to choose :return: Binomial coefficient C(n, k) if k > n or n < 0 or k < 0: return 0 return factorial(n) // (factorial(k) * factorial(n - k))"},{"question":"Write a function to remove all consecutive duplicates from a string in Python.","solution":"def remove_consecutive_duplicates(s): Removes all consecutive duplicates from the string s. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a function to remove all the vowels from a given string and return the modified string. In Python, you can use string methods and list comprehensions to easily manipulate strings.","solution":"def remove_vowels(input_string): Removes all vowels from the input string and returns the modified string. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in input_string if char not in vowels)"},{"question":"Write a function to find the shortest path between two nodes in a directed graph using Breadth-First Search (BFS).","solution":"from collections import deque def bfs_shortest_path(graph, start, goal): Find the shortest path between start and goal nodes in a directed graph using BFS. :param graph: dict, adjacency list representation of the graph :param start: starting node :param goal: goal node :return: list, shortest path from start to goal (including both), or None if no path exists queue = deque([[start]]) visited = set() while queue: path = queue.popleft() current = path[-1] if current == goal: return path if current not in visited: visited.add(current) for neighbor in graph.get(current, []): new_path = list(path) new_path.append(neighbor) queue.append(new_path) return None"},{"question":"Write a function to find the Fibonacci sequence up to the nth term using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n == 1: return 0 if n == 2: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to create a date from given year, month, day.","solution":"import datetime def create_date(year, month, day): Creates a datetime.date object from given year, month, day. Returns 'Invalid date' if the date is invalid. try: return datetime.date(year, month, day) except ValueError: return 'Invalid date'"},{"question":"Write a function to check if a number is within a given range. The function should take three parameters: the number to check (\`n\`), the lower bound (\`low\`), and the upper bound (\`high\`). The function should return \`True\` if the number is within the range (inclusive), and \`False\` otherwise.","solution":"def is_within_range(n, low, high): Checks if the number n is within the range [low, high] inclusive. Parameters: n (int or float): The number to check. low (int or float): The lower bound of the range. high (int or float): The upper bound of the range. Returns: bool: True if n is within the range [low, high], False otherwise. return low <= n <= high"},{"question":"Write a function to find the minimum number of coins required to sum up to a given amount using a given array of coin denominations. If it is not possible to make that amount with the given coins, return -1. The function should use dynamic programming to solve the problem efficiently.","solution":"def coin_change(coins, amount): Returns the minimum number of coins required to make up the given amount. If it is not possible, return -1. Parameters: coins (list of int): The denominations of the coins available. amount (int): The target amount to be made with the coins. Returns: int: The minimum number of coins needed to make the amount, or -1 if not possible. # Create a list to store the minimum coins needed for each amount up to the target amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # Iterate over each amount from 1 to the target amount for i in range(1, amount + 1): # Check each coin denomination for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If the target amount is still marked as inf, it means it's not possible to make the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to calculate the sum of all numbers that are both square and cubic. These numbers are known as sixth powers. However, for this problem, you are only interested in numbers less than n.","solution":"def sum_of_sixth_powers(n): Returns the sum of all numbers less than n that are both squares and cubes, i.e., sixth powers. Parameters: n (int): The upper limit (exclusive) for the numbers to be summed. Returns: int: The sum of sixth power numbers less than n. sum_sixth_powers = 0 i = 1 while i ** 6 < n: sum_sixth_powers += i ** 6 i += 1 return sum_sixth_powers"},{"question":"Write a function to check if a given string contains the character 'a' followed immediately by one or more 'b's. The function should return \\"Matched!\\" if the pattern is found, and \\"Not Matched!\\" if it is not.","solution":"import re def check_ab_pattern(s): Check if the given string contains 'a' followed immediately by one or more 'b's. Parameters: s (str): The input string to check Returns: str: 'Matched!' if the pattern is found, 'Not Matched!' otherwise pattern = r'ab+' if re.search(pattern, s): return \\"Matched!\\" else: return \\"Not Matched!\\""},{"question":"Write a function to evaluate a string as a mathematical expression and return the result. The function should handle basic operations: addition (+), subtraction (-), multiplication (*), and division (/). It should also support the use of parentheses to define the order of operations. The function should be able to handle both integer and floating-point numbers.","solution":"import operator import re def evaluate_expression(expression): Evaluates a mathematical expression provided as a string and returns the result. Supports +, -, *, / and parentheses for order of operations. # Define operators and their precedence operators = { '+': (1, operator.add), '-': (1, operator.sub), '*': (2, operator.mul), '/': (2, operator.truediv) } def parse_expression(expression): tokens = re.findall(r'(bd+.d+|bd+|S)', expression) output_queue = [] operator_stack = [] for token in tokens: if re.match(r'd', token): # number output_queue.append(float(token) if '.' in token else int(token)) elif token in operators: # operator while (operator_stack and operator_stack[-1] in operators and operators[token][0] <= operators[operator_stack[-1]][0]): output_queue.append(operator_stack.pop()) operator_stack.append(token) elif token == '(': # left parenthesis operator_stack.append(token) elif token == ')': # right parenthesis top_token = operator_stack.pop() while top_token != '(': output_queue.append(top_token) top_token = operator_stack.pop() while operator_stack: output_queue.append(operator_stack.pop()) return output_queue def evaluate_rpn(rpn_expression): stack = [] for token in rpn_expression: if token in operators: b = stack.pop() a = stack.pop() stack.append(operators[token][1](a, b)) else: stack.append(token) return stack[0] rpn_expression = parse_expression(expression) return evaluate_rpn(rpn_expression)"},{"question":"Write a function to compute the sum of the squares of the first n natural numbers, where n is a non-negative integer. Ensure the function returns a non-negative integer. If the input is negative, the function should return -1 to indicate an error.","solution":"def sum_of_squares(n): Computes the sum of the squares of the first n natural numbers. :param n: A non-negative integer. :return: The sum of squares of the first n natural numbers, or -1 if n is negative. if n < 0: return -1 return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function to remove all occurrences of a given value from an array and return the new length of the array after modification. Assume the array is sorted and the order of the elements can be changed. The function should modify the array in place and use O(1) extra memory.","solution":"def remove_element(nums, val): Removes all occurrences of val in nums in-place and returns the new length of the array. :param nums: List[int] - The input array. :param val: int - The value to be removed. :return: int - The new length of the array after removing val. k = 0 # Pointer for the next position to insert non-val elements. for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"Write a function to compute the factorial of a non-negative integer n. However, ensure your solution includes an iterative approach rather than a recursive one. Also, the function should handle large numbers efficiently by using the BigInteger class from the System.Numerics namespace in C#.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using an iterative approach. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to simulate the rolling of a single six-sided die. The function should return a random integer between 1 and 6.","solution":"import random def roll_die(): Simulates the rolling of a single six-sided die. Returns a random integer between 1 and 6 (inclusive). return random.randint(1, 6)"},{"question":"Write a function to search for a target value within a circularly sorted array without duplicates. The array is circularly sorted, which means it might have been rotated. For example, [0,1,2,4,5,6,7] might be rotated to [4,5,6,7,0,1,2].","solution":"def search_in_circular_sorted_array(arr, target): Search for a target value within a circularly sorted array without duplicates. :param arr: List[int] - the circularly sorted array :param target: int - the target value to search for :return: int - the index of target in the array, or -1 if not found if not arr: return -1 start, end = 0, len(arr) - 1 while start <= end: mid = (start + end) // 2 if arr[mid] == target: return mid # Check if mid to end is sorted if arr[mid] <= arr[end]: # Check if target is in the sorted part if arr[mid] < target <= arr[end]: start = mid + 1 else: end = mid - 1 else: # If start to mid is sorted if arr[start] <= target < arr[mid]: end = mid - 1 else: start = mid + 1 return -1"},{"question":"Write a function to calculate the sum of two integers using bitwise operators without using the '+' or '-' operator.","solution":"def add(a, b): Returns the sum of a and b using bitwise operators. MAX = 0xFFFFFFFF MASK = 0x80000000 while b != 0: carry = a & b a = (a ^ b) & MAX b = (carry << 1) & MAX # if a is negative, convert a to a negative value if a & MASK: return ~(a ^ MAX) return a"},{"question":"Write a function to check if a given string is a valid ISBN-10 number. An ISBN-10 number is a 10-digit number where the first 9 digits are digits (0-9) and the last digit is either a digit or an 'X' (which represents 10). The validation is done using a weighted sum method, where each digit (e.g., 10 represented by 'X') is multiplied by its position (1 through 10), and the sum of these products is compared to 0 modulo 11.","solution":"def is_valid_isbn10(isbn): Checks if a given string is a valid ISBN-10 number. if len(isbn) != 10: return False total = 0 for i in range(10): if isbn[i] == 'X' and i == 9: value = 10 elif '0' <= isbn[i] <= '9': value = int(isbn[i]) else: return False total += value * (i + 1) return total % 11 == 0"},{"question":"Write a function to check if a given integer is a power of three. An integer n is a power of three if there exists an integer x such that 3^x = n. Your function should return True if n is a power of three, and False otherwise.","solution":"def is_power_of_three(n): Check if the given integer is a power of three. :param n: Integer to check :return: True if n is a power of three, False otherwise if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to reverse a linked list in place. How can this be done efficiently?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the given linked list in place and returns the new head of the list. prev = None current = head while current is not None: next_node = current.next # Store the next node current.next = prev # Reverse the current node's pointer prev = current # Move the prev pointer one step forward current = next_node # Move the current pointer one step forward return prev"},{"question":"Write a function to sum the numbers from 1 to n, but for multiples of 3 return \\"Fizz\\", for multiples of 5 return \\"Buzz\\", and for multiples of both 3 and 5 return \\"FizzBuzz\\". The function should take a single integer n as input and return a list of strings as described.","solution":"def fizz_buzz_sum(n): Returns a list of strings from 1 to n with the following substitution: - For multiples of 3, add \\"Fizz\\" instead of the number - For multiples of 5, add \\"Buzz\\" instead of the number - For multiples of both 3 and 5, add \\"FizzBuzz\\" instead of the number result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to determine the number of days in a given month and year.","solution":"def days_in_month(year, month): Returns the number of days in a given month and year. Parameters: - year: an integer representing the year - month: an integer representing the month (1 for January, 2 for February, etc.) Returns: - An integer representing the number of days in the given month and year. if month == 2: # February # Check if the year is a leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 elif month in {4, 6, 9, 11}: # April, June, September, November return 30 elif month in {1, 3, 5, 7, 8, 10, 12}: # January, March, May, July, August, October, December return 31 else: raise ValueError(\\"Invalid month. Month must be between 1 and 12.\\")"},{"question":"Write a function to find the second smallest number in a list of integers. The list may contain duplicates and negative numbers. The function should return \`None\` if there is no second smallest number in the list.","solution":"def second_smallest(numbers): Returns the second smallest number in the list of integers. Returns None if there is no second smallest number. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to find all prime numbers between 1 and n, where n is a positive integer. The function should return a list of these prime numbers.","solution":"def find_primes(n): Returns a list of all prime numbers between 1 and n (inclusive). if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Write a function to calculate the sum of all elements in an array. The function should return the sum.","solution":"def sum_array(arr): Returns the sum of all elements in the array. Args: arr (list): A list of numbers. Returns: int: The sum of all numbers in the array. return sum(arr)"},{"question":"Write a function to calculate the sum of all even numbers between two given numbers (inclusive). If the first number is greater than the second, the function should return 0.","solution":"def sum_of_evens(start, end): Calculate the sum of all even numbers between start and end (inclusive). If start is greater than end, return 0. if start > end: return 0 return sum(i for i in range(start, end + 1) if i % 2 == 0)"},{"question":"Write a function to detect if a given string contains all unique characters without using any additional data structures such as arrays or hash maps. The function should be efficient and concise, ideally with a time complexity better than O(n^2).","solution":"def all_unique_characters(s): Check if the string \`s\` contains all unique characters. # Iterate over each character in the string for i in range(len(s)): # Check if the character appears again in the rest of the string if s[i] in s[i+1:]: return False return True"},{"question":"Write a function to determine the prime factors of a given number. A prime factor is a natural number greater than 1 that has no positive divisors other than 1 and itself. Here is an example for 8: 8 = 2 * 2 * 2, so the prime factors of 8 are 2, 2, 2. For a number like 25, its prime factors are 5, 5. For 70, its prime factors are 2, 5, 7. Your function should return these prime factors in a list.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Write a function to detect valid credit card numbers using the Luhn algorithm. The function should return true if the credit card number is valid and false otherwise.","solution":"def luhn_algorithm(card_number: str) -> bool: Checks if the provided credit card number is valid using the Luhn algorithm. Parameters: card_number (str): The credit card number to check. Returns: bool: True if the credit card number is valid, False otherwise. # Remove spaces from the card number card_number = card_number.replace(\\" \\", \\"\\") # Check if all characters in the card_number are digits if not card_number.isdigit(): return False # Convert the card_number to a list of integers digits = [int(digit) for digit in card_number] # Reverse the order of digits digits.reverse() # Apply the Luhn algorithm for i in range(len(digits)): if i % 2 == 1: digits[i] *= 2 if digits[i] > 9: digits[i] -= 9 # Sum all the digits total = sum(digits) # Check if the total modulo 10 is 0 return total % 10 == 0"},{"question":"Write a function to calculate the sum of elements in a list. The function should take a list of integers as input and return the sum of all the elements in the list. You should implement this in Python.","solution":"def sum_of_elements(lst): Returns the sum of all the elements in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of all the elements in the list. return sum(lst)"},{"question":"Write a function to reverse a given integer. For instance, if the input is 123, the output should be 321. However, if the reversed integer overflows, the function should return 0. An integer overflows if it is less than -2^31 or greater than 2^31 - 1.","solution":"def reverse_integer(x): Reverses the given integer x. If the reversed integer overflows, the function returns 0. An integer overflows if it is less than -2^31 or greater than 2^31 - 1. MIN_INT, MAX_INT = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 reversed_int = int(str(abs(x))[::-1]) * sign if reversed_int < MIN_INT or reversed_int > MAX_INT: return 0 return reversed_int"},{"question":"Write a function to reverse a singly linked list. Please provide a detailed explanation of each step involved in the process.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed singly linked list prev = None current = head while current: next_node = current.next # preserve the next node current.next = prev # reverse the link prev = current # move prev and current one step forward current = next_node return prev # at the end, prev will be the new head of the reversed list"},{"question":"Write a function to find the maximum depth of a binary tree using a recursive approach. The function should take a binary tree node as input and return the depth of the tree.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. :param root: TreeNode or None :return: int, maximum depth of the binary tree if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to calculate the n-th Fibonacci number using recursion. The function should be efficient and handle large values of n. How can we optimize it?","solution":"def fibonacci(n, memo=None): Returns the n-th Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the maximum number in a given list of integers. If the list is empty, the function should return \`None\`. This function is crucial for data analysis tasks where identifying the highest value is necessary.","solution":"def find_max(lst): Returns the maximum number in a given list of integers. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a function to check if a numeric string represents a valid floating-point number or not. The function should ignore any leading or trailing whitespaces and consider '+' and '-' signs as valid. The function should return \`true\` if the string is a valid floating-point number, and \`false\` otherwise.","solution":"def is_valid_float(s): Checks if the given string represents a valid floating-point number. Parameters: s (str): The string to be checked Returns: bool: True if the string is a valid floating-point number, otherwise False try: float(s.strip()) return True except ValueError: return False"},{"question":"Write a function to find the first non-repeating character in a string. If no such character exists, return an empty string.","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a string. If no such character exists, returns an empty string. char_count = {} # Count occurrence of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that occurs only once for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function to find the longest sequence of 1s in a given binary string. The function should return the length of this sequence.","solution":"def longest_sequence_of_1s(binary_string): Returns the length of the longest sequence of 1s in a given binary string. return max(map(len, binary_string.split('0')))"},{"question":"Write a function to calculate the total price of a product after applying a discount based on the quantity purchased. When the quantity is 10 or more, a 10% discount is applied. If the quantity is less than 10, no discount is applied.","solution":"def calculate_total_price(unit_price, quantity): Calculate the total price of a product after applying discount based on quantity. Parameters: unit_price (float): The price per unit of the product. quantity (int): The quantity of the product being purchased. Returns: float: The total price after applying the discount. if quantity >= 10: discount = 0.10 else: discount = 0.0 total_price = unit_price * quantity * (1 - discount) return total_price"},{"question":"Write a function to divide two integers without using the '*' ('multiply'), '/' ('divide'), 'modulus' or '%' operators, and ensure it handles both positive and negative integers.","solution":"def divide(dividend, divisor): Divides two integers without using multiplication, division, or modulus operators. Returns the quotient result. # Handle division by zero case if divisor == 0: raise ValueError(\\"Division by zero is not allowed\\") # Determine the sign of the final result negative = (dividend < 0) != (divisor < 0) # Work with positive values for simplicity dividend, divisor = abs(dividend), abs(divisor) quotient = 0 # Subtract the divisor from the dividend incrementally while dividend >= divisor: temp_divisor, multiple = divisor, 1 while dividend >= temp_divisor: dividend -= temp_divisor quotient += multiple # Increase the divisor multiple for faster computation multiple <<= 1 temp_divisor <<= 1 return -quotient if negative else quotient"},{"question":"Write a function to find the maximum subarray sum in a given array. The subarray can have at least one element. However, as a twist, your function should not use Kadane's algorithm directly but should implement a similar logic. Your function should have a complexity of O(n^2).","solution":"def max_subarray_sum(arr): Function to find the maximum subarray sum with complexity O(n^2). max_sum = float('-inf') n = len(arr) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function to calculate the sum of all elements in the nth row of Pascal's triangle.","solution":"def sum_of_pascals_triangle_row(n): Returns the sum of all elements in the nth row of Pascal's Triangle. # The sum of the elements in the nth row of Pascal's Triangle is 2^n return 2 ** n"},{"question":"Write a function to check if a given list of numbers contains any duplicates. The function should return \`True\` if any number appears more than once, and \`False\` otherwise.","solution":"def contains_duplicates(nums): Returns True if the list nums contains any duplicates, otherwise False. return len(nums) != len(set(nums))"},{"question":"Write a function to check if a given string is a palindrome and if its length is a prime number. A palindrome is a string that reads the same backward as forward. A prime number is a number greater than 1 that is divisible only by 1 and itself.","solution":"def is_palindrome(s): Check if the given string is a palindrome. return s == s[::-1] def is_prime(n): Check if the given number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def is_palindrome_and_prime_length(s): Check if the string is a palindrome and its length is a prime number. return is_palindrome(s) and is_prime(len(s))"},{"question":"Write a function to find all pairs in an array that give a sum of 0. The array contains non-negative integers only and there will be no duplicates in the array.","solution":"def find_pairs_with_zero_sum(arr): Returns all pairs in an array that give a sum of 0. Since the array contains only non-negative integers, no pairs will sum to zero. return []"},{"question":"Write a function to find the solution of a given equation in one variable. The equation will be represented as a string in the form of \\"ax + b = 0\\". Your function should return the value of x that satisfies the equation.","solution":"def solve_equation(equation): Solves a linear equation of the form \\"ax + b = 0\\" for x. # Remove spaces from the equation equation = equation.replace(\\" \\", \\"\\") # Split the equation into two parts at the \\"=\\" left_side, right_side = equation.split('=') # Identify the coefficient (a) and the constant (b) on the left side a, b = left_side.split('x') a = int(a) b = int(b) if b else 0 # Convert right side to integer right_side = int(right_side) # Solve for x x = (right_side - b) / a return x"},{"question":"Write a function to reverse the words in a given string. For example, if the input string is \\"hello world\\", the output should be \\"world hello\\".","solution":"def reverse_words(sentence): Reverses the words in a given sentence string. Parameters: sentence (str): The string whose words need to be reversed. Returns: str: A string with words in reversed order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to generate the running sum of numbers in a list.","solution":"def running_sum(nums): Returns the running sum of numbers in the list \`nums\`. The running sum is defined as the sum of all elements up to the current index. running_total = 0 result = [] for num in nums: running_total += num result.append(running_total) return result"},{"question":"Write a function to turn a string of a binary number into an integer. You will be given a binary number in the form of a string, and you must return the decimal equivalent of the binary number as an integer. The function should be able to handle binary numbers up to 64 bits long.","solution":"def binary_to_integer(binary_str): Converts a binary string to its decimal integer equivalent. :param binary_str: A string representing a binary number. :return: The decimal integer equivalent of the binary number. return int(binary_str, 2)"},{"question":"Write a function to find the minimum number of coins needed to make change for a given amount. You can use any combination of a given set of coin denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make change for a given amount. :param coins: List of coin denominations available :param amount: The amount to make change for :return: Minimum number of coins needed to make change for the given amount, or -1 if change cannot be made # Initialize dp array where dp[i] represents the minimum number of coins needed for amount i dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: No coins are needed to make 0 amount # Compute minimum coins required for each amount up to the given amount for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to sum all the elements in a given list of integers and return the result. For example, if the input list is \`[1, 2, 3, 4, 5]\`, the function should return \`15\`.","solution":"def sum_list(numbers): Returns the sum of all elements in the list. :param numbers: List of integers. :return: Integer sum of all elements. return sum(numbers)"},{"question":"Write a function to find the maximum product of a single positive number and a single negative number in an array. If there are no negative or positive numbers in the array, the function should return 0.","solution":"def max_product(arr): Returns the maximum product of a single positive and a single negative number in an array. If there are no negative or positive numbers, returns 0. if not arr: return 0 max_negative = float('-inf') min_positive = float('inf') for num in arr: if num < 0 and num > max_negative: max_negative = num if num > 0 and num < min_positive: min_positive = num if max_negative == float('-inf') or min_positive == float('inf'): return 0 return max_negative * min_positive"},{"question":"Write a function to generate the gray code for a given non-negative integer n.","solution":"def gray_code(n): Generate a sequence of gray codes for a given non-negative integer n. result = [] number_of_codes = 1 << n # 2^n gray codes for i in range(number_of_codes): gray = i ^ (i >> 1) result.append(gray) return result"},{"question":"Write a function to calculate the formula for a moving average, particularly the exponential moving average (EMA). The function should accept three parameters: the initial value, the decay factor, and a list of new data points. It should return the updated value after each data point has been processed.","solution":"def exponential_moving_average(initial_value, decay, data_points): Calculates the exponential moving average (EMA) of given data points. Parameters: initial_value (float): The initial value of EMA. decay (float): The smoothing factor (a number between 0 and 1). data_points (list of float): The new data points to update the EMA. Returns: float: The updated EMA value after processing all data points. ema = initial_value for point in data_points: ema = (1 - decay) * ema + decay * point return ema"},{"question":"Write a function to reverse a linked list. I would like detailed explanation along with the code.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the linked list :return: ListNode, the head of the reversed linked list prev = None # Previous node starts as None current = head # Current node is the head of the list while current: next_node = current.next # Save the next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to next node return prev # New head of the reversed list"},{"question":"Write a function to traverse a binary tree in a level order (BFS) and return the nodes' values in a list. How would you represent and manipulate the queue structure to accomplish this?","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Traverse a binary tree in level order (BFS) and return the nodes' values in a list. :param root: TreeNode, the root of the binary tree :return: List of node values in level order if root is None: return [] result = [] queue = deque([root]) while queue: current_node = queue.popleft() result.append(current_node.value) if current_node.left: queue.append(current_node.left) if current_node.right: queue.append(current_node.right) return result"},{"question":"Write a function to find the maximum and minimum values in an array of integers and return them in a tuple.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values in an array of integers. if not arr: raise ValueError(\\"The array must not be empty.\\") max_val = max(arr) min_val = min(arr) return (max_val, min_val)"},{"question":"Write a function to add two binary numbers represented as strings. The function should return their sum as a string.","solution":"def add_binary(a, b): Returns the sum of two binary numbers represented as strings. # Convert binary strings to integers num1 = int(a, 2) num2 = int(b, 2) # Sum the integers total = num1 + num2 # Convert the sum back to a binary string return bin(total)[2:]"},{"question":"Write a function to find the sum of all prime numbers within a given range [start, end] inclusively in Python.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_range(start, end): Returns the sum of all prime numbers within the range [start, end] inclusively. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"Write a function to remove all duplicate elements from a sorted array. The function should return a new array without duplicates, and the relative order of unique elements should be the same as in the original array.","solution":"def remove_duplicates(array): Given a sorted array, remove all duplicate elements. Parameters: array (list): A sorted list of elements. Returns: list: A new list with duplicates removed. if not array: return [] result = [array[0]] for i in range(1, len(array)): if array[i] != array[i - 1]: result.append(array[i]) return result"},{"question":"Write a function to reverse a given string using recursion without using slicing or any built-in functions that directly reverse a string.","solution":"def reverse_string(s): Reverses a given string using recursion. Args: - s (str): The string to be reversed. Returns: - str: The reversed string. if len(s) == 0: return s else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a function to implement a simple stack using an array. The stack should support the following operations: push, pop, and peek. Additionally, the function should handle the case when the stack is empty.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if self.is_empty(): return None return self.stack.pop() def peek(self): if self.is_empty(): return None return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"question":"Write a function to check if a binary tree is a BST (Binary Search Tree). A BST is characterized by the properties that for any given node, all values in its left subtree are smaller than the node's value, and all values in its right subtree are larger than the node's value. To facilitate this, we can use additional parameters to keep track of the allowed range for each node's value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode, lower=float('-inf'), upper=float('inf')) -> bool: if not root: return True val = root.val if val <= lower or val >= upper: return False if not is_valid_bst(root.right, val, upper): return False if not is_valid_bst(root.left, lower, val): return False return True"},{"question":"Write a function to calculate the factorial of a number ( n ) using event-driven programming in Python. Fibonacci is an event-driven process, and we can use a similar concept here. The function will take an input number ( n ) and calculate the factorial of ( n! ).","solution":"import asyncio class FactorialEvent: def __init__(self): self.subscribers = [] def register(self, function): self.subscribers.append(function) async def notify(self, n, result): for subscriber in self.subscribers: await subscriber(n, result) class FactorialCalculator: def __init__(self): self.factorial_event = FactorialEvent() self.factorial_event.register(self.print_result) async def calculate_factorial(self, n): result = 1 for i in range(2, n + 1): result *= i await asyncio.sleep(0) # Event-driven context switch await self.factorial_event.notify(n, result) return result async def print_result(self, n, result): print(f\\"The factorial of {n} is {result}\\") async def main(n): calculator = FactorialCalculator() return await calculator.calculate_factorial(n) # Main function to run the coroutine def factorial(n): return asyncio.run(main(n))"},{"question":"Write a function to calculate the sum of all even numbers from 1 to n using a loop in Python.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n. total_sum = 0 for number in range(2, n+1, 2): total_sum += number return total_sum"},{"question":"Write a function to find all the permutations of a given string using Python. For example, if the input string is \\"abc\\", the function should return all the permutations: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\".","solution":"from itertools import permutations def find_permutations(s): Returns all permutations of a given string. perm_list = permutations(s) return [''.join(p) for p in perm_list]"},{"question":"Write a function to determine if a given number is a perfect square or not. The number can be quite large, potentially up to several hundred billion. Therefore, the solution should be optimized and not rely on direct mathematical computation (like \`sqrt\` function). A solution that uses binary search would be optimal.","solution":"def is_perfect_square(num): Determines if the input number is a perfect square or not. :param num: The input number to check, should be a non-negative integer. :return: True if num is a perfect square, False otherwise. if num < 0: return False if num == 0 or num == 1: return True low, high = 2, num // 2 while low <= high: mid = (low + high) // 2 square = mid * mid if square == num: return True elif square < num: low = mid + 1 else: high = mid - 1 return False"},{"question":"Write a function to reverse a singly linked list. You may not modify the values in the list's nodes. Only the nodes themselves may be changed.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed singly linked list prev = None curr = head while curr is not None: next_temp = curr.next # store next node curr.next = prev # reverse the link prev = curr # move prev up curr = next_temp # move curr up return prev"},{"question":"Write a function to compute the number of times a given number appears as a prefix of the numbers in an array.","solution":"def count_prefix_occurrences(arr, prefix): Counts the number of times the given prefix appears as a prefix of any number in the array. Parameters: arr (list of int/str): List of numbers/integer which can be checked for prefix. prefix (str or int): The prefix to be checked. Returns: int: The count of numbers in the array that have the given prefix. prefix = str(prefix) return sum(str(num).startswith(prefix) for num in arr)"},{"question":"Write a function to calculate the maximum profit from a list of stock prices where you can only complete at most two transactions. You cannot sell stock before you buy it. For example, given the array prices = [3, 3, 5, 0, 0, 3, 1, 4], the maximum profit is 6.","solution":"def maxProfit(prices): Returns the maximum profit with at most two transactions. if not prices: return 0 # Initialize variables to keep track of the maximum profits for one and two transactions. t1_cost = float('inf') t2_cost = float('inf') t1_profit = 0 t2_profit = 0 for price in prices: # Update the first transaction costs and profit t1_cost = min(t1_cost, price) t1_profit = max(t1_profit, price - t1_cost) # Update the second transaction costs and profit, considering the profit earned from the first transaction t2_cost = min(t2_cost, price - t1_profit) t2_profit = max(t2_profit, price - t2_cost) return t2_profit"},{"question":"Write a function to generate all valid parentheses combinations for a given number of pairs of parentheses.","solution":"def generate_parentheses(n): Generates all combinations of n pairs of valid parentheses. :param n: Number of pairs of parentheses :type n: int :return: List of valid parentheses combinations :rtype: List[str] def backtrack(s=\\"\\", left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \\"(\\", left + 1, right) if right < left: backtrack(s + \\")\\", left, right + 1) result = [] backtrack() return result"},{"question":"Write a function to find the maximum product of a subarray within a given array of integers. For example, given the array \`[2, 3, -2, 4]\`, the function should return \`6\` because the subarray \`[2, 3]\` has the largest product.","solution":"def max_product_subarray(nums): Finds the maximum product of a subarray within a given array of integers. :param nums: List[int] - A list of integers. :return: int - The maximum product of a subarray. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function to determine if a linked list is a palindrome or not by modifying the linked list in place. Additionally, the function should return the state of the palindrome and reset the list to its original state. This function should use the Stack data structure to solve this problem.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def isPalindrome(head): if not head or not head.next: return True # Split the linked list into two halves slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half prev, curr = None, slow while curr: next_temp = curr.next curr.next = prev prev = curr curr = next_temp # Check palindrome first_half, second_half = head, prev result = True while second_half: if first_half.val != second_half.val: result = False break first_half = first_half.next second_half = second_half.next # Restore the second half prev, curr = None, prev while curr: next_temp = curr.next curr.next = prev prev = curr curr = next_temp return result"},{"question":"Write a function to find the distance between two points in a 3D space. The function should take the coordinates of the two points as input and return the Euclidean distance between them. The coordinates should be taken as input in the form of (x, y, z).","solution":"import math def distance_between_points(point1, point2): Calculates the Euclidean distance between two points in 3D space. Parameters: point1 (tuple): Coordinates of the first point in the form (x, y, z) point2 (tuple): Coordinates of the second point in the form (x, y, z) Returns: float: The Euclidean distance between the two points return math.sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2 + (point2[2] - point1[2]) ** 2)"},{"question":"Write a function to calculate the circumference of a circle using the formula 2 * π * radius. Implement the function in Python and include a docstring with a brief description, parameter details, and the expected output.","solution":"import math def circumference_of_circle(radius): Calculate the circumference of a circle. Parameters: radius (float): The radius of the circle. Should be a non-negative value. Returns: float: The circumference of the circle. if radius < 0: raise ValueError(\\"The radius cannot be negative.\\") return 2 * math.pi * radius"},{"question":"Write a function to delete a node with a given key in a binary search tree (BST). Please provide a detailed explanation of your solution and handle all possible edge cases.","solution":"class TreeNode: A node in a binary search tree. def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def deleteNode(root, key): Deletes a node with the given key in a BST and returns the new root. if not root: return root if key < root.key: root.left = deleteNode(root.left, key) elif key > root.key: root.right = deleteNode(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left min_larger_node = getMin(root.right) root.key = min_larger_node.key root.right = deleteNode(root.right, min_larger_node.key) return root def getMin(node): Finds the node with the smallest key in the given BST. while node.left: node = node.left return node"},{"question":"Write a function to check if a person is a minor or not based on their age in Python.","solution":"def is_minor(age): Returns True if the person is a minor (under 18 years), otherwise returns False. return age < 18"},{"question":"Write a function to compute the factorial of a number n using a recursive approach. The function should be able to handle large numbers efficiently and should be able to handle both positive and negative integers. However, negative factorials are undefined, so the function should raise a ValueError if a negative number is passed.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises ValueError if a negative number is passed. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to find the second maximum number in a given array of integers. If the array has less than two unique numbers, the function should return \`None\`. Ensure your function handles different cases and does not modify the original array.","solution":"def second_maximum(numbers): Returns the second maximum number in a given array of integers. If the array has less than two unique numbers, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a function to calculate the maximum profit you can achieve from buying and selling a stock within a given period of time, given an array of daily stock prices. The goal is to determine the best day to buy and sell the stock to maximize profit, but you can only complete one transaction (i.e., you cannot buy and sell on the same day).","solution":"def max_profit(prices): Given an array of \`prices\` representing the daily stock prices, returns the maximum profit that can be achieved from one buy and one sell. :param prices: List[int] :return: int if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function to implement the QuickSort algorithm, detailing each step of the process.","solution":"def quicksort(arr): Implements the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"question":"Write a function to calculate the n-th Fibonacci number.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to reverse a string without using any extra space except for variable used for iteration. Also, the function should operate in O(n) time complexity.","solution":"def reverse_string(s): Reverses the input string in place and returns it. s = list(s) # Convert string to list to allow modification. left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s)"},{"question":"Write a function to calculate the sum of the squares of even numbers in a given list. The function should handle edge cases such as negative numbers and non-integer values gracefully.","solution":"def sum_of_squares_of_even_numbers(lst): Returns the sum of the squares of even numbers in the given list. Non-integer values are ignored. result = 0 for num in lst: if isinstance(num, int) and num % 2 == 0: result += num ** 2 return result"},{"question":"Write a function to implement a multi-threaded sum calculator for an array of integers.","solution":"import threading def sum_array(arr): Calculates the sum of an array of integers using multiple threads. def worker(start, end, arr, result, index): result[index] = sum(arr[start:end]) n_threads = 4 # You can adjust this according to your system's capabilities length = len(arr) batch_size = (length + n_threads - 1) // n_threads # ceiling division threads = [] # Shared result array result = [0] * n_threads for i in range(n_threads): start = i * batch_size end = min((i + 1) * batch_size, length) thread = threading.Thread(target=worker, args=(start, end, arr, result, i)) threads.append(thread) thread.start() for thread in threads: thread.join() return sum(result)"},{"question":"Write a function to calculate the sum of all numbers in an array using recursion in Python.","solution":"def sum_array(arr): Recursively calculates the sum of all numbers in the array. Parameters: arr (list): A list of numbers. Returns: int: The sum of all numbers in the array. if len(arr) == 0: return 0 else: return arr[0] + sum_array(arr[1:])"},{"question":"Write a function to remove duplicates from an array without using any extra space. Assume the array is sorted. Also, modify the original array.","solution":"def remove_duplicates(arr): Removes duplicates from a sorted array in place without using extra space. Modifies the original array. Parameters: arr (list): A sorted list of integers with possible duplicates. Returns: int: The new length of the array after removing duplicates. if not arr: return 0 write_index = 1 for i in range(1, len(arr)): if arr[i] != arr[i - 1]: arr[write_index] = arr[i] write_index += 1 return write_index"},{"question":"Write a function to solve the partition problem. What is the time complexity of the function?","solution":"def can_partition(nums): Determines if a list of numbers can be partitioned into two subsets with equal sum. Args: nums (list of int): List of integers. Returns: bool: True if the list can be partitioned into two subsets with equal sum, False otherwise. total_sum = sum(nums) # If total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) # Create a DP table dp = [[False] * (subset_sum + 1) for _ in range(n + 1)] # Initialize the dp array for i in range(n + 1): dp[i][0] = True # Fill the partition table for i in range(1, n + 1): for sum_val in range(1, subset_sum + 1): if nums[i - 1] <= sum_val: dp[i][sum_val] = dp[i - 1][sum_val] or dp[i - 1][sum_val - nums[i - 1]] else: dp[i][sum_val] = dp[i - 1][sum_val] return dp[n][subset_sum]"},{"question":"Write a function to implement a simple HTTP client using the \`HttpClient\` class in C#. The function should perform a GET request to a specified URL and return the response content as a string.","solution":"import requests def http_get(url): Perform a GET request to the specified URL and return the response content as a string. :param url: URL to which the GET request is sent. :return: Response content as a string. response = requests.get(url) response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx) return response.text"},{"question":"Write a function to count the frequency of each word in a given text. The function should ignore case sensitivity and punctuation.","solution":"import re from collections import Counter def word_count(text): Returns a dictionary with the frequency of each word in the given text. The function is case insensitive and ignores punctuation. # Convert text to lowercase text = text.lower() # Remove punctuation using regex text = re.sub(r'[^ws]', '', text) # Split the text into words words = text.split() # Count the frequency of each word using Counter frequency = Counter(words) return dict(frequency)"},{"question":"Write a function to find the most frequent even number in a Python list. If there are no even numbers or if multiple even numbers have the same highest frequency, return the smallest one.","solution":"def most_frequent_even(lst): Find the most frequent even number in a list. If there are no even numbers or if multiple even numbers have the same highest frequency, return the smallest one. Parameters: lst (list): A list of integers. Returns: int or None: The most frequent even number, or the smallest even number if multiple even numbers have the same frequency. Returns None if there are no even numbers. from collections import Counter # Filter out even numbers even_numbers = [num for num in lst if num % 2 == 0] if not even_numbers: return None # Count the frequency of each even number counts = Counter(even_numbers) # Find the highest frequency max_frequency = max(counts.values()) # Get all even numbers with the highest frequency most_frequent_evens = [num for num, count in counts.items() if count == max_frequency] # Return the smallest one if there are multiple or only one even number with the highest frequency return min(most_frequent_evens)"},{"question":"Write a function to convert a given integer number to its binary representation as a string. For example, if the input number is 5, the function should return \\"101\\". If the input number is 0, the function should return \\"0\\".","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" binary_representation = \\"\\" while n > 0: binary_representation = str(n % 2) + binary_representation n = n // 2 return binary_representation"},{"question":"Write a function to find the sum of all positive integers up to a given negative integer \`n\`, where \`n\` is less than or equal to -1. The function should be named \`sumUpToNegative\`.","solution":"def sumUpToNegative(n): Returns the sum of all positive integers up to the given negative integer n. If n is -1, it returns 1 (the sum of {1}). If n is -2, it returns 3 (the sum of {1 + 2}), and so on. :param n: an integer which is less than or equal to -1 :return: the sum of all positive integers up to |n| if n >= 0: raise ValueError(\\"Input must be a negative integer less than or equal to -1\\") return sum(range(1, abs(n) + 1))"},{"question":"Write a function to find all the combinations of a given list of numbers that sum to a specific target. Each number in the list can only be used once in the combination. The solution should include all possible combinations where each combination sums to the target. The function should return these combinations aswell as the total count of such combinations.","solution":"from typing import List, Tuple def combination_sum(nums: List[int], target: int) -> Tuple[List[List[int]], int]: def backtrack(start, path): current_sum = sum(path) if current_sum == target: results.append(path.copy()) return if current_sum > target: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: # Skip duplicates continue path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() results = [] backtrack(0, []) return results, len(results)"},{"question":"Write a function to find the first missing positive integer in a given unsorted array of integers. The function should have a time complexity of O(n) and use only constant space.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an unsorted array. :param nums: List[int] - unsorted array of integers :return: int - the first missing positive integer n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function to calculate the sum of all elements in a list. Here is the initial list: lst = [5, 10, 15]","solution":"def sum_of_list(lst): Returns the sum of all elements in a list. return sum(lst)"},{"question":"Write a function to check if a given number is an Armstrong number or not. An Armstrong number is a number of three digits or more that is equal to the sum of its own digits each raised to the power of the number of digits. Return true if the number is an Armstrong number, and false otherwise.","solution":"def is_armstrong_number(number): Checks if a given number is an Armstrong number. An Armstrong number is a number of three digits or more that is equal to the sum of its own digits each raised to the power of the number of digits. # Convert number to string to easily iterate over digits num_str = str(number) num_digits = len(num_str) # Compute the sum of each digit raised to the power of the number of digits sum_of_powers = sum(int(digit) ** num_digits for digit in num_str) # Check if the sum of the powers is equal to the original number return sum_of_powers == number"},{"question":"Write a function to sum two numbers and return the result. Ensure clarity and conciseness in your code.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Write a function to parse a string and extract all the words that start with the letter \\"a\\" or \\"A\\". Words are defined as sequences of characters separated by spaces.","solution":"def extract_a_words(s): Extracts all words from the input string that start with the letter 'a' or 'A'. Parameters: s (str): The string to parse. Returns: list: A list of words starting with 'a' or 'A'. words = s.split() a_words = [word for word in words if word.lower().startswith('a')] return a_words"},{"question":"Write a function to reverse a string in Python. How can this be done by iterating through the string in reverse order and appending each character to a new string?","solution":"def reverse_string(s): Reverses the given string by iterating through it in reverse order and appending each character to a new string. reversed_s = \\"\\" for char in reversed(s): reversed_s += char return reversed_s"},{"question":"Write a function to formulate a new URL by appending parameters to the original URL. If the URL already has query parameters, the function should add the new parameters without replacing the existing ones. The function should make sure to preserve the original URL's encoding and any fragment identifiers (#).","solution":"from urllib.parse import urlencode, urlparse, parse_qs, urlunparse def append_params_to_url(url, params): Appends new parameters to the given URL. Preserves existing parameters, URL encoding, and fragment identifiers. Args: url (str): The original URL. params (dict): A dictionary of parameters to add to the URL. Returns: str: The new URL with the parameters appended. parsed_url = urlparse(url) existing_params = parse_qs(parsed_url.query) # Update existing parameters with new parameters existing_params.update(params) # Convert parameters back to query string new_query = urlencode(existing_params, doseq=True) # Reconstruct the URL with the updated query parameters new_url = urlunparse(( parsed_url.scheme, parsed_url.netloc, parsed_url.path, parsed_url.params, new_query, parsed_url.fragment )) return new_url"},{"question":"Write a function to convert a given Binary Search Tree (BST) into its Binary Tree (BT) equivalent, such that each node in the BST becomes a node in the BT with its left child being the original left child and its right child being the original right child of the BST node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_to_bt(root): Convert a BST to its Binary Tree (BT) equivalent. Since a BST is already a BT by definition, this function simply returns the input BST. :param root: TreeNode, root of the Binary Search Tree :return: TreeNode, root of the Binary Tree # In a BST to BT conversion preserving structure, no changes are needed return root"},{"question":"Write a function to add two numbers in Python, but the numbers are stored as strings. The function should return the result as a string.","solution":"def add_strings(num1, num2): Adds two numbers that are represented as strings. Parameters: num1 (str): The first number as string num2 (str): The second number as string Returns: str: The result of the addition as string return str(int(num1) + int(num2))"},{"question":"Write a function to remove the last character from a string in Python.","solution":"def remove_last_character(s): Removes the last character from a string. Parameters: s (str): The input string. Returns: str: The string with the last character removed. If the string is empty, it returns an empty string. if not s: return \\"\\" return s[:-1]"},{"question":"Write a function to calculate the Fibonacci sequence at a given position in the sequence without using recursion. The function should be efficient and handle large input values.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach for efficiency. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to find the maximum number in a list of integers. The list is not necessarily sorted.","solution":"def find_max(lst): Returns the maximum number in a list of integers. Args: lst (list): A list of integers Returns: int: The maximum number in the list if not lst: raise ValueError(\\"List is empty\\") max_num = lst[0] for num in lst: if num > max_num: max_num = num return max_num"},{"question":"Write a function to find the largest number in a list. Can you also explain the logic behind the function?","solution":"def find_largest_number(lst): Returns the largest number in a list. The function iterates through each element in the list and keeps track of the largest element encountered so far. It initializes the largest number as the first element and updates it whenever a larger element is found. Args: lst (list): A list of numbers. Returns: number: The largest number in the list. if not lst: raise ValueError(\\"The list is empty\\") largest = lst[0] for num in lst: if num > largest: largest = num return largest"},{"question":"Write a function to calculate the maximum sum of a subarray within an array of integers. You can choose from 0 to n elements in the array.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within an array of integers. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to calculate the minimum height of a binary tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def min_height(root): Calculate the minimum height of a binary tree. if root is None: return 0 if root.left is None and root.right is None: return 1 if root.left is None: return min_height(root.right) + 1 if root.right is None: return min_height(root.left) + 1 return min(min_height(root.left), min_height(root.right)) + 1"},{"question":"Write a function to find the maximum element in a given list of integers. You should implement a simple iterative solution without using any built-in Python functions like \`max()\`.","solution":"def find_maximum(numbers): Returns the maximum element in a given list of integers. :param numbers: List of integers :return: The maximum integer in the list if not numbers: raise ValueError(\\"List is empty\\") max_number = numbers[0] for num in numbers: if num > max_number: max_number = num return max_number"},{"question":"Write a function to concatenate two strings and print the result.","solution":"def concatenate_strings(str1, str2): Concatenates two strings and returns the result. return str1 + str2"},{"question":"Write a function to check if the given string is a valid parentheses string (vpString). A vpString is defined as a string consisting of the characters '(', ')', '(' and ')'. A string is considered a valid vpString if all brackets are correctly closed and nested. For example, \\"(()())\\", \\"(()(()))\\", and \\"()()\\" are valid vpStrings, while \\")(\\", \\"(()))(\\", and \\"((()\\" are not.","solution":"def is_valid_parentheses_string(vpString): Checks if the given string is a valid parentheses string. A string is a valid parentheses string if every opening parenthesis '(' has a corresponding closing parenthesis ')', and the parentheses are properly nested. Parameters: vpString (str): The string to be checked. Returns: bool: True if the string is a valid parentheses string, False otherwise. stack = [] for char in vpString: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() else: return False # Only '(' and ')' are valid characters return len(stack) == 0"},{"question":"Write a function to find the substring whose occurrence is maximum in a given string. For example, if the input string is \\"the quick brown fox jumps fox the\\", the function should return \\"the\\" as it occurs twice.","solution":"def most_frequent_substring(text): Finds the substring whose occurrence is maximum in a given string. Params: text (str): The input string where we need to find the most frequent substring. Returns: str: The substring with the maximum occurrence. if not text: return \\"\\" words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Find the word with the maximum frequency max_word = max(word_count, key=word_count.get) return max_word"},{"question":"Write a function to reverse a string without using any built-in functions or additional data structures (like lists, arrays, etc.). You are only allowed to use basic loops and string operations.","solution":"def reverse_string(s): Returns the reversed string of s without using any built-in functions or additional data structures. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to print the \\"N th\\" Fibonacci sequence in Python. The function should take one parameter, 'n', which represents the position in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the N th Fibonacci number. if n <= 0: return \\"Invalid input. The position must be a positive integer.\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to calculate the factorial of a given number n. The function should handle large numbers efficiently and avoid integer overflow. To achieve this, use a BigInteger class which provides arbitrary-precision arithmetic.","solution":"def factorial(n): Returns the factorial of the given number n using arbitrary-precision arithmetic. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to return the length of a given string using the built-in methods of the string class.","solution":"def string_length(input_string): Returns the length of the input string. return len(input_string)"},{"question":"Write a function to calculate the bhattacharyya coefficient between two input histograms. The bhattacharyya coefficient is a measure of the overlap between two probability distributions. It is used in information theory and statistics.","solution":"import math def bhattacharyya_coefficient(hist1, hist2): Calculate and return the Bhattacharyya coefficient between two histograms. Parameters: hist1 (list): The first histogram (a list of probabilities). hist2 (list): The second histogram (a list of probabilities). Returns: float: The Bhattacharyya coefficient. if len(hist1) != len(hist2): raise ValueError(\\"Histograms must be of the same length\\") coefficient = 0 for h1, h2 in zip(hist1, hist2): coefficient += math.sqrt(h1 * h2) return coefficient"},{"question":"Write a function to find the minimum number of operations required to convert a given string to another string by performing the following operations: insert, delete, or replace a character.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to convert string s1 to string s2. Operations allowed: insert, delete, or replace a character. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # If first string is empty, only option is to insert all characters of second string for i in range(m + 1): dp[i][0] = i # If second string is empty, only option is to remove all characters of first string for j in range(n + 1): dp[0][j] = j # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a function to determine whether a given integer is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. Assume the input is a signed 32-bit integer.","solution":"def is_palindrome(x): Determine if the given integer is a palindrome. # A negative number cannot be a palindrome if x < 0: return False # Convert the number to string to check palindrome property str_x = str(x) return str_x == str_x[::-1]"},{"question":"Write a function to check if two triangles are congruent.","solution":"def are_triangles_congruent(sides1, sides2): Check if two triangles are congruent based on their sides. Args: sides1 (tuple): A tuple of three side lengths of the first triangle. sides2 (tuple): A tuple of three side lengths of the second triangle. Returns: bool: True if the triangles are congruent, False otherwise. return sorted(sides1) == sorted(sides2)"},{"question":"Write a function to find the maximum sum of a subarray of a given array with the constraint that no two elements in the subarray are adjacent.","solution":"def max_non_adjacent_sum(arr): Finds the maximum sum of a subarray with the constraint that no two elements in the subarray are adjacent. Parameters: arr (list): The input array of integers. Returns: int: The maximum sum of the subarray with no adjacent elements. if not arr: return 0 incl = 0 # Maximum sum including the previous element excl = 0 # Maximum sum excluding the previous element for num in arr: # Current maximum excluding num new_excl = max(incl, excl) # Current maximum including num incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a function to solve a given puzzle in Python. The puzzle is a 4-dimensional grid, represented as a list of lists. Each cell in the grid contains an integer, and the goal is to find the path from the top-left corner to the bottom-right corner that has the lowest total sum of integers. You can only move right or down at any point in time.","solution":"def min_path_sum(grid): Find the path from the top-left corner to the bottom-right corner of a 4D grid that has the lowest total sum of integers. You can only move right or down. :param grid: List[List[int]] - A 4D grid with integers :return: int - The minimum path sum from top-left to bottom-right if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Write a function to find the top k frequent words in a given array of strings. The function should return the words in descending order of their frequency. If two words have the same frequency, return them in lexicographical order (alphabetical order).","solution":"from collections import Counter from typing import List def top_k_frequent_words(words: List[str], k: int) -> List[str]: Returns the top k frequent words in descending order of their frequency. If two words have the same frequency, they are returned in lexicographical order. count = Counter(words) candidates = list(count.keys()) candidates.sort(key=lambda word: (-count[word], word)) return candidates[:k]"},{"question":"Write a function to detect and remove the cycle in a singly linked list. The function should take the head of the linked list as input and return the head of the modified linked list with the cycle removed. If there is no cycle, the function should return the original head of the list.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detect_and_remove_cycle(head): Detect and remove the cycle in a singly linked list, if any. :param head: ListNode, the head of the linked list :return: ListNode, the head of the modified linked list with the cycle removed if head is None or head.next is None: return head slow = head fast = head cycle_exists = False # Step 1: Detect cycle using Floyd's Tortoise and Hare approach while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # cycle detected cycle_exists = True break # Step 2: If cycle exists, find the cycle start node and remove the cycle if cycle_exists: slow = head while slow != fast: slow = slow.next fast = fast.next # Find the last node in the cycle while fast.next != slow: fast = fast.next # Removing the cycle fast.next = None return head"},{"question":"Write a function to create a binary search tree (BST) from an array of integers. The function should take an array of integers as input and return the root of the BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_into_bst(root, val): if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def create_bst_from_array(arr): if not arr: return None root = None for val in arr: root = insert_into_bst(root, val) return root"},{"question":"Write a function to find the factorial of a given number using recursion. Also, ensure to handle potential stack overflow errors that might occur for large inputs. Discuss optimization techniques to prevent stack overflows in recursive functions.","solution":"def factorial(n): Returns the factorial of a given number using recursion. Handles ValueError for negative inputs. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1) def safe_factorial(n): Returns the factorial of a given number using recursion with an optimization technique to prevent stack overflow by using iterative approach for large inputs. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") # For small n, use recursion if n <= 12: # Based on stack depth limit (platform dependent) return factorial(n) # For large n, use an iterative approach result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find all the prime divisors of a given number and return them in a sorted list. A prime divisor of a number is a divisor that is a prime number.","solution":"def is_prime(num): Helper function to check whether a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def prime_divisors(n): Returns a sorted list of all prime divisors of n. if n <= 1: return [] divisors = [] for i in range(2, n + 1): if n % i == 0 and is_prime(i): divisors.append(i) return divisors"},{"question":"Write a function to compare two integers and return the larger one. If they are equal, return either.","solution":"def compare_and_return_larger(a, b): Returns the larger of the two integers provided. If they are equal, returns either one. if a >= b: return a return b"},{"question":"Write a function to implement a breadth-first search (BFS) on a grid to find the shortest path between two points. The grid is represented as a 2D list of integers, where 0 represents an open path and 1 represents a wall. The function should return the shortest path as a list of coordinates, or \`None\` if no path exists.","solution":"from collections import deque def bfs_shortest_path(grid, start, end): Performs BFS on the grid to find the shortest path between start and end points. :param grid: List of lists representing the grid (2D List) :param start: Tuple representing the starting coordinates (row, col) :param end: Tuple representing the ending coordinates (row, col) :return: List of coordinates representing the shortest path from start to end (inclusive), or None if no path exists. rows, cols = len(grid), len(grid[0]) if grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return None queue = deque([(start, [start])]) visited = set([start]) while queue: (current, path) = queue.popleft() if current == end: return path for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]: next_row, next_col = current[0] + direction[0], current[1] + direction[1] if 0 <= next_row < rows and 0 <= next_col < cols: next_node = (next_row, next_col) if next_node not in visited and grid[next_row][next_col] == 0: queue.append((next_node, path + [next_node])) visited.add(next_node) return None"},{"question":"Write a function to generate the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should return a list containing all Fibonacci numbers up to \`n\`.","solution":"def fibonacci(n): Generates a list of Fibonacci numbers up to a given number n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Write a function to calculate the square root of a number using the Newton-Raphson method in Python. The function should be able to handle both positive and negative inputs. For negative inputs, the function should return \`None\`, as the square root of a negative number is not a real number. The precision of the result should be within 1e-6.","solution":"def newton_raphson_sqrt(x): Calculate the square root of x using the Newton-Raphson method. Returns None for negative inputs. The precision of the result is within 1e-6. if x < 0: return None tolerance = 1e-6 guess = x / 2.0 while abs(guess * guess - x) > tolerance: guess = (guess + x / guess) / 2.0 return guess"},{"question":"Write a function to locate an embedded value in an array of values such that it meets a condition.","solution":"def locate_value(arr, threshold): Returns the first value in the array \`arr\` that is greater than \`threshold\`. If no such value exists, returns None. for value in arr: if value > threshold: return value return None"},{"question":"Write a function to recursively multiply two numbers without using the built-in multiplication operator. How can this be achieved using addition instead of multiplication?","solution":"def recursive_multiply(a, b): Recursively multiplies two numbers a and b without using the built-in multiplication operator. This function uses addition to achieve multiplication. # Base case if b == 0: return 0 # If b is negative, convert the problem to positive multiplication and adjust the result accordingly if b < 0: return -recursive_multiply(a, -b) # Recursive step return a + recursive_multiply(a, b - 1)"},{"question":"Write a function to convert a string to its integer equivalent, but handle errors for non-numeric characters and ensure that the conversion is case-insensitive.","solution":"def string_to_integer(s): Converts a string to its integer equivalent. Handles errors for non-numeric characters and ensures the conversion is case-insensitive. try: # Remove any leading or trailing whitespace and ensure the string is lowercased s = s.strip().lower() return int(s) except ValueError: raise ValueError(\\"The provided string is not a valid integer.\\")"},{"question":"Write a function to compute the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence (0-indexed) Returns: int: The nth Fibonacci number if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to calculate the factorial of a number interactively. The function should accept an integer as the base of the factorial and if the input is not a positive integer, the function should raise an error.","solution":"def factorial(n): Returns the factorial of a positive integer n. Raises a ValueError if n is not a positive integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to reverse an array using Stack data structure in Python","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() def is_empty(self): return len(self.items) == 0 def reverse_array(arr): stack = Stack() # Push all elements of the array onto the stack for item in arr: stack.push(item) # Pop all elements from the stack to get them in reverse order reversed_arr = [] while not stack.is_empty(): reversed_arr.append(stack.pop()) return reversed_arr"},{"question":"Write a function to find the maximum element in a 2D array. The function should take a 2D array as input and return the maximum element found in the array.","solution":"def find_max_element_2d(array): Returns the maximum element in a 2D array. max_element = float('-inf') for row in array: for element in row: if element > max_element: max_element = element return max_element"},{"question":"Write a function to evaluate a postfix expression (also known as Reverse Polish Notation). Assume the postfix expression consists of only integers and the operators \\"+\\", \\"-\\", \\"*\\", and \\"/\\".","solution":"def evaluate_postfix(expression): Evaluates a postfix expression and returns the calculated result. Args: expression (str): A string containing the postfix expression with integers and operators +, -, *, /. Returns: int: The result of evaluating the postfix expression. stack = [] operators = set(['+', '-', '*', '/']) for token in expression.split(): if token not in operators: stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(int(a / b)) # Using int() to mimic integer division behavior in some languages return stack[0]"},{"question":"Write a function to reverse the characters in a given string \`s\`. For example, if the string is \\"hello\\", the output should be \\"olleh\\".","solution":"def reverse_string(s): Returns the string s reversed. return s[::-1]"},{"question":"Write a function to convert a string first character to upper case. The function should also check if the input string is identical to its reverse string and return a boolean result. For example, if the input string is \\"racecar\\", the function should return True since it is a palindrome and its first character should be converted to upper case, resulting in \\"Racecar\\".","solution":"def convert_and_check_palindrome(s): Converts the first character of the string to upper case and checks if the string is a palindrome. Parameters: s (str): The input string Returns: tuple: A tuple containing: - The modified string with the first character in upper case. - A boolean indicating if the string is a palindrome. if not s: return \\"\\", False modified_string = s[0].upper() + s[1:] is_palindrome = s == s[::-1] return modified_string, is_palindrome"},{"question":"Write a function to generate the first N Fibonacci numbers and return them in an array. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Generates the first N Fibonacci numbers and returns them in an array. :param n: The number of Fibonacci numbers to generate :return: A list containing the first N Fibonacci numbers if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to return the first n non-empty consecutive lines in a file. For example, the input is (file1.txt, 3), and the function returns the first 3 non-empty lines in the file \\"file1.txt\\".","solution":"def first_n_non_empty_lines(filename, n): Returns the first n non-empty consecutive lines from the given file. :param filename: The name of the file to read. :param n: The number of non-empty lines to return. :return: A list containing the first n non-empty lines. result = [] with open(filename, 'r') as file: for line in file: if line.strip(): # Check if the line is non-empty result.append(line.strip()) if len(result) == n: break return result"},{"question":"Write a function to reverse an integer in Python. If reversing the integer causes it to overflow, return 0. Assume the environment does not allow you to store 64-bit integers.","solution":"def reverse_integer(x): Reverses an integer. If reversing the integer causes it to overflow, returns 0. Parameters: x (int): The integer to reverse. Returns: int: The reversed integer if it does not overflow, otherwise 0. sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_abs = 0 while x_abs != 0: last_digit = x_abs % 10 reversed_abs = reversed_abs * 10 + last_digit x_abs //= 10 if reversed_abs > 2**31 - 1: return 0 return sign * reversed_abs"},{"question":"Write a function to reverse a list of integers in place in Python using a for loop?","solution":"def reverse_list_in_place(lst): Reverses a list of integers in place. n = len(lst) for i in range(n // 2): lst[i], lst[n - 1 - i] = lst[n - 1 - i], lst[i] return lst"},{"question":"Write a function to find the minimum element in a rotated sorted list with unique elements. The list could be rotated and may contain duplicates.","solution":"def find_minimum_rotated_sorted_list(nums): Finds the minimum element in a rotated sorted list with unique elements. Args: nums: List[int] -- The rotated sorted list. Returns: int -- The minimum element in the list. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Write a function to decide whether a given integer \`n\` is a perfect square. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, \`16\` is a perfect square because it is \`4 * 4\`, but \`12\` is not.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = int(n ** 0.5) return root * root == n"},{"question":"Write a function to count the number of unique characters in a string Given string = \\"hello\\"","solution":"def count_unique_characters(s): Returns the count of unique characters in the string s. return len(set(s))"},{"question":"Write a function to find the maximum number in a list of integers. The function should handle both positive and negative integers.","solution":"def find_maximum(numbers): Returns the maximum number in a list of integers. if not numbers: raise ValueError(\\"The list is empty\\") max_num = numbers[0] for num in numbers: if num > max_num: max_num = num return max_num"},{"question":"Write a function to find the minimum sum of the maximum values in non-overlapping intervals of a given array. You are allowed to divide the array into n segments, and the function should return the minimum possible sum of the maximum values from each segment.","solution":"def min_sum_of_max_values(arr, n): Returns the minimum sum of the maximum values in non-overlapping intervals. def is_valid_partition(mid, n): count, cur_sum = 0, 0 for num in arr: if cur_sum + num > mid: count += 1 cur_sum = num if count >= n: return False else: cur_sum += num return True if not arr or n <= 0: return 0 low, high = max(arr), sum(arr) result = high while low <= high: mid = (low + high) // 2 if is_valid_partition(mid, n): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Write a function to find the second largest number in an array. If the array has less than two elements, return -1.","solution":"def second_largest(nums): Returns the second largest number in the list. If the list has less than two elements, returns -1. if len(nums) < 2: return -1 first = second = float('-inf') for num in nums: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else -1"},{"question":"Write a function to find the third maximum number in an array of integers. If the third maximum does not exist, return the maximum number. The solution should be efficient and handle edge cases gracefully.","solution":"def third_max(nums): Returns the third maximum number in the array if it exists, otherwise returns the maximum number. first, second, third = float('-inf'), float('-inf'), float('-inf') for num in nums: if num in (first, second, third): continue if num > first: first, second, third = num, first, second elif num > second: second, third = num, second elif num > third: third = num return third if third != float('-inf') else first"},{"question":"Write a function to simulate a dice throw. The function should take one parameter: the number of sides on the dice. Tt should return a random number between 1 and the number of sides specified.","solution":"import random def throw_dice(sides): Simulates a dice throw. Parameters: sides (int): Number of sides on the dice. Returns: int: Random number between 1 and the number of sides on the dice. if sides < 1: raise ValueError(\\"Number of sides must be at least 1.\\") return random.randint(1, sides)"},{"question":"Write a function to detect and return the longest palindromic substring in a provided string. A palindromic substring is a sequence of characters which reads the same backward as forward.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): substr1 = expand_around_center(i, i) # odd-length palindromes substr2 = expand_around_center(i, i + 1) # even-length palindromes longest = max(longest, substr1, substr2, key=len) return longest"},{"question":"Write a function to remove duplicates from a sorted list of integers and return a new list with unique elements. The function should have a time complexity of O(n) and a space complexity of O(1), assuming the output list does not count towards space complexity.","solution":"def remove_duplicates(sorted_list): Removes duplicates from a sorted list and returns a new list with unique elements. Time Complexity: O(n) Space Complexity: O(1) (excluding the space required for the output list) if not sorted_list: return [] unique_list = [] n = len(sorted_list) unique_list.append(sorted_list[0]) for i in range(1, n): if sorted_list[i] != sorted_list[i-1]: unique_list.append(sorted_list[i]) return unique_list"},{"question":"Write a function to calculate the sum of all left leaves in a binary tree. A left leaf is a leaf node that is the left child of some node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): Calculate the sum of all left leaves in a binary tree. if not root: return 0 def is_leaf(node): return node and not node.left and not node.right def dfs(node): if not node: return 0 sum_left = 0 if node.left and is_leaf(node.left): sum_left += node.left.val sum_left += dfs(node.left) sum_left += dfs(node.right) return sum_left return dfs(root)"},{"question":"Write a function to calculate the sum of all numbers between 1 and n (inclusive). The function should be recursive.","solution":"def recursive_sum(n): Returns the sum of all numbers between 1 and n (inclusive) using recursion. # Base case: if n is 1, return 1 if n == 1: return 1 # Recursive case: return n plus the sum of all previous numbers return n + recursive_sum(n - 1)"},{"question":"Write a function to sort an array of integers in Python.","solution":"def sort_array(arr): Returns a sorted array of integers. Parameters: arr (list): A list of integers. Returns: list: A sorted list of integers. return sorted(arr)"},{"question":"Write a function to find the length of the longest increasing subsequence (LIS) in a given list of integers.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given list of integers. :param nums: List of integers :return: Length of LIS if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to sort an array in descending order using the quick sort algorithm.","solution":"def quick_sort_descending(arr): Sorts the input array in descending order using the quick sort algorithm. if len(arr) <= 1: return arr pivot = arr[0] left = [x for x in arr[1:] if x > pivot] right = [x for x in arr[1:] if x <= pivot] return quick_sort_descending(left) + [pivot] + quick_sort_descending(right)"},{"question":"Write a function to delete a specific node in a singly linked list, given only access to that node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_node(node): Deletes a node from a singly linked list given only access to that node. We copy the value of the next node into the current node and then bypass the next node. if node is None or node.next is None: raise ValueError(\\"The node to be deleted cannot be the last node\\") node.val = node.next.val node.next = node.next.next"},{"question":"Write a function to generate the nth Fibonacci number in Python. The function should be optimized to handle large values of n efficiently. What are some common issues that might arise when implementing a Fibonacci function, and how can they be addressed?","solution":"def fibonacci(n): Returns the nth Fibonacci number. This implementation uses an iterative approach to handle large values of n efficiently. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to print the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the Fibonacci sequence up to 8 is 0, 1, 1, 2, 3, 5, 8. Your function should not use recursion and should be efficient.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to the given number n. if n < 0: return [] elif n == 0: return [0] sequence = [0, 1] while True: next_value = sequence[-1] + sequence[-2] if next_value > n: break sequence.append(next_value) return sequence"},{"question":"Write a function to remove duplicates from a linked list. How would you approach this problem in Python?","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_duplicates(head): Removes duplicates from a sorted linked list. current = head while current and current.next: if current.val == current.next.val: # Skip the duplicated node current.next = current.next.next else: current = current.next return head def linked_list_to_list(head): Converts a linked list to a Python list. result = [] current = head while current: result.append(current.val) current = current.next return result def list_to_linked_list(lst): Converts a Python list to a linked list. if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head"},{"question":"Write a function to find the maximum value in a binary search tree (BST) using a breadth-first search (BFS) approach.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_bfs(root): Given a binary search tree (BST), find the maximum value using BFS. if not root: return None max_value = float('-inf') queue = deque([root]) while queue: node = queue.popleft() if node.value > max_value: max_value = node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) return max_value"},{"question":"Write a function to determine if a given string is a valid palindrome. A valid palindrome is a string that reads the same backward as forward, considering only alphanumeric characters and ignoring cases. For example, \\"A man, a plan, a canal: Panama\\" is a valid palindrome, but \\"race a car\\" is not.","solution":"import re def is_palindrome(s): Returns True if the input string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Use a regular expression to remove all non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function to generate the power set of a given set of distinct integers using bit manipulation in Python.","solution":"def power_set(nums): Returns the power set of a given set of distinct integers using bit manipulation. n = len(nums) power_set_result = [] for i in range(1 << n): subset = [nums[j] for j in range(n) if i & (1 << j)] power_set_result.append(subset) return power_set_result"},{"question":"Write a function to partition the array A[] into the minimum number of contiguous sub-arrays such that the sum of each sub-array is divisible by B. Note that B is not 0.","solution":"def partition_array(arr, B): Partition the array into the minimum number of contiguous sub-arrays such that the sum of each sub-array is divisible by B. Parameters: arr (list): List of integers. B (int): Integer for divisibility condition (not zero). Returns: List[List[int]]: A list of sub-arrays. if B == 0: raise ValueError(\\"B cannot be 0\\") n = len(arr) result = [] sub_array = [] current_sum = 0 for num in arr: sub_array.append(num) current_sum += num if current_sum % B == 0: result.append(sub_array) sub_array = [] current_sum = 0 if sub_array: # taking care of any remaining elements in the sub array result.append(sub_array) return result"},{"question":"Write a function to find the element that appears more than once in an array. For example, in the array \`[1, 2, 3, 2, 5, 3, 5, 7]\`, the function should return a list of elements that appear more than once.","solution":"def find_duplicates(arr): Returns a list of elements that appear more than once in the array. from collections import Counter counter = Counter(arr) return [item for item, count in counter.items() if count > 1]"},{"question":"Write a function to find the next greater element for each element in an array. The next greater element for a given element x is the first element on the right side of x in the array that is greater than x. If there is no such element, you should return -1 for that position in the result array.","solution":"def next_greater_elements(arr): Finds the next greater element for each element in the array. The next greater element for a given element x is the first element on the right side of x in the array that is greater than x. If there is no such element, returns -1 for that position in the result array. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: idx = stack.pop() result[idx] = arr[i] stack.append(i) return result"},{"question":"Write a function to find the maximum sum of a subarray in a given array.你有一个给定的数组，你需要编写一个函数来找到这个数组中子数组的最大和。","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in the given array. :param arr: List of integers :return: Integer, maximum sum of any subarray if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: # Update current_sum to the maximum of num itself or current_sum + num current_sum = max(num, current_sum + num) # Update max_sum to the maximum of itself or the new current_sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to generate all subsets of a given string.","solution":"def generate_subsets(a_string): Generates all subsets of a given string. Parameters: a_string (str): The input string. Returns: List[str]: A list of all subsets of the input string. def helper(s, i, current, result): if i == len(s): result.append(current) return # Exclude the i-th character helper(s, i + 1, current, result) # Include the i-th character helper(s, i + 1, current + s[i], result) result = [] helper(a_string, 0, \\"\\", result) return result"},{"question":"Write a function to remove duplicates from a list in Python, considering both the value and the index of the elements. If the value is the same but the index is different, the element should be kept. How can this be done efficiently?","solution":"def remove_duplicates(values): Removes duplicate values from a list while keeping the order of first occurrence. Elements are considered unique based on their value and their first occurrence index. Args: values (list): A list of values that may contain duplicates. Returns: list: A list without duplicates, preserving the order of the first occurrence. seen = set() output = [] for value in values: if value not in seen: seen.add(value) output.append(value) return output"},{"question":"Write a function to calculate the average of an array of integers.","solution":"def calculate_average(nums): Returns the average of an array of integers. :param nums: List of integers. :return: Float average of the numbers. if not nums: return 0 return sum(nums) / len(nums)"},{"question":"Write a function to calculate the height of a binary tree. The function should return the height as an integer. If the tree is empty, the height should be 0.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height_of_binary_tree(root): Returns the height of the binary tree rooted at the given node. if root is None: return 0 else: left_height = height_of_binary_tree(root.left) right_height = height_of_binary_tree(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to find the perimeter of a square given its side length. The function should be able to handle both integer and floating-point side lengths.","solution":"def perimeter_of_square(side_length): Returns the perimeter of a square given its side length. Parameters: side_length (int, float): The length of a side of the square. Returns: float: The perimeter of the square. return 4 * side_length"},{"question":"Write a function to compute the nth power of a base using recursion in Python.","solution":"def power(base, n): Returns the result of base raised to the power of n using recursion. if n == 0: return 1 elif n < 0: return 1 / power(base, -n) else: return base * power(base, n - 1)"},{"question":"Write a function to reverse the characters of each word in a sentence without reversing the order of the words themselves.","solution":"def reverse_chars_in_words(sentence): Reverses the characters of each word in \`sentence\` without reversing the order of the words. Parameters: sentence (str): The input sentence. Returns: str: The sentence with characters in each word reversed. words = sentence.split() reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to calculate the factorial of a number using a stack-based approach in Python. Your function should return the factorial of a given number.","solution":"def factorial_stack(n): Returns the factorial of a non-negative integer n using a stack. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") stack = [] result = 1 for i in range(2, n + 1): stack.append(i) while stack: result *= stack.pop() return result"},{"question":"Write a function to find the total number of digits in a given non-negative integer.","solution":"def count_digits(n): Returns the total number of digits in a given non-negative integer. if n == 0: return 1 count = 0 while n > 0: count += 1 n //= 10 return count"},{"question":"Write a function to check if a given array contains any duplicates.","solution":"def contains_duplicates(arr): Checks if the given array contains any duplicates. :param arr: List of elements to check for duplicates :return: True if there are duplicates, False otherwise return len(arr) != len(set(arr))"},{"question":"Write a function to accurately compute the volume of a sphere given its radius r. You should implement this function and give it an appropriate name. Provide a docstring for the function that properly describes its purpose and parameters. Also, create a separate test function to check that the implementation is correct.","solution":"import math def sphere_volume(r): Calculate the volume of a sphere given its radius. Parameters: r (float): The radius of the sphere Returns: float: The volume of the sphere if r < 0: raise ValueError(\\"Radius cannot be negative.\\") return (4/3) * math.pi * (r**3)"},{"question":"Write a function to sort a list based on a custom key selector. The key selector function will be provided as an argument to the main sorting function. The list to be sorted is a list of tuples, where each tuple contains two elements: the first element is an integer, and the second is a string. The key selector function will accept this tuple and return a value used for sorting.","solution":"def custom_sort(lst, key_selector): Sorts a list of tuples based on a custom key selector function. Parameters: lst (list of tuples): List to be sorted where each tuple consists of an integer and a string. key_selector (function): Function that accepts a tuple and returns a value to be used for sorting. Returns: list: Sorted list of tuples. return sorted(lst, key=key_selector)"},{"question":"Write a function to find the single number in a non-empty array where every element appears twice except for one, using a Pythonic approach.","solution":"def single_number(nums): Finds the single number in an array where every element appears twice except for one. Uses bitwise XOR operation to achieve this in a Pythonic way. :param nums: List[int], a non-empty list of integers where every element appears twice except one. :return: int, the single number. single = 0 for num in nums: single ^= num return single"},{"question":"Write a function to determine the sum of all numbers in a list. Implement this function iteratively and recursively, and compare the differences in efficiency and readability for large lists.","solution":"def sum_iterative(numbers): Returns the sum of all numbers in the list using an iterative approach. total = 0 for number in numbers: total += number return total def sum_recursive(numbers): Returns the sum of all numbers in the list using a recursive approach. if len(numbers) == 0: return 0 else: return numbers[0] + sum_recursive(numbers[1:])"},{"question":"Write a function to print all prime numbers between 2 and n, where n is a positive integer provided by the user. The function should be written in Python.","solution":"def generate_primes(n): Returns a list of all prime numbers between 2 and n (inclusive). if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Write a function to insert a node at the nth position in a singly linked list. The function should handle both positive and negative indices, where positive indices are from the beginning (1st element is at index 1), and negative indices are from the end (e.g., -1 refers to the last element).","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def insert_node(head, data, position): Inserts a node with the given data at the nth position in the singly linked list. Positive indices start from 1. Negative indices start from -1 (last element). new_node = ListNode(data) if not head: # Empty list case if position == 1 or position == -1: return new_node else: raise IndexError(\\"Index out of bounds\\") # Handling negative index if position < 0: length = 0 current = head while current: length += 1 current = current.next position = length + position + 1 if position == 1: new_node.next = head return new_node previous = None current = head current_position = 1 while current and current_position < position: previous = current current = current.next current_position += 1 if current_position == position: if previous: previous.next = new_node new_node.next = current return head else: raise IndexError(\\"Index out of bounds\\")"},{"question":"Write a function to check if a website is reachable. The function should take a URL as a string input and return a boolean value indicating whether the website is reachable.","solution":"import requests def is_website_reachable(url): Checks if the given website is reachable. Args: url (str): The URL of the website to check. Returns: bool: True if the website is reachable, otherwise False. try: response = requests.get(url, timeout=5) return response.status_code == 200 except requests.RequestException: return False"},{"question":"Write a function to find the intersection of two arrays. The function should return a list of unique elements that are present in both arrays.","solution":"def intersection(arr1, arr2): Returns a list of unique elements that are present in both arrays. set1 = set(arr1) set2 = set(arr2) return list(set1.intersection(set2))"},{"question":"Write a function to calculate the total cost of a meal including tax and tip in Python.","solution":"def calculate_total_cost(meal_cost, tax_rate, tip_rate): Calculate the total cost of a meal including tax and tip. Parameters: meal_cost (float): Cost of the meal before tax and tip. tax_rate (float): Tax rate as a decimal (e.g., 0.05 for 5% tax). tip_rate (float): Tip rate as a decimal (e.g., 0.15 for 15% tip). Returns: float: Total cost of the meal including tax and tip. tax_amount = meal_cost * tax_rate tip_amount = meal_cost * tip_rate total_cost = meal_cost + tax_amount + tip_amount return total_cost"},{"question":"Write a function to Fibonacci sequence with a twist: instead of returning the nth Fibonacci number, return the sum of the first n Fibonacci numbers.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return sum(fib[:n])"},{"question":"Write a function to compare two numbers and return the larger of the two. If both numbers are equal, return \\"Equal\\".","solution":"def compare_numbers(a, b): Compares two numbers and returns the larger of the two. If both numbers are equal, returns 'Equal'. if a > b: return a elif b > a: return b else: return \\"Equal\\""},{"question":"Write a function to convert a string to an integer. The function must handle both positive and negative integers, and ignore any leading whitespace characters. If no digits are found, the function should return 0 as per the standard C library function atoi(). Additionally, the function should handle overflow and underflow scenarios and return the appropriate value, according to the sign of the number being converted.","solution":"def atoi(s): Convert a string to an integer, handling whitespaces, optional '+' or '-' sign, and overflow/underflow scenarios. Args: s (str) : The string to convert to an integer. Returns: int: The converted integer. If no valid conversion could be performed, returns 0. s = s.strip() if not s: return 0 sign = 1 start = 0 if s[0] == '-': sign = -1 start = 1 elif s[0] == '+': start = 1 result = 0 for i in range(start, len(s)): if not s[i].isdigit(): break result = result * 10 + (ord(s[i]) - ord('0')) result *= sign # Handling overflow and underflow scenarios INT_MAX = 2**31 - 1 INT_MIN = -2**31 if result < INT_MIN: return INT_MIN if result > INT_MAX: return INT_MAX return result"},{"question":"Write a function to create a maximum number by arranging given integers.","solution":"from functools import cmp_to_key def largest_number(nums): Rearranges a list of non-negative integers into the largest possible number. if not nums: # handle empty list return \\"\\" # Convert integers to strings for easy comparison nums_str = [str(num) for num in nums] # Define a custom comparator def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the numbers using the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Concatenate sorted numbers to form the largest number largest_num = ''.join(nums_str) # Handle the special case where the largest number formed is '0' if largest_num[0] == '0': return '0' return largest_num"},{"question":"Write a function to find the multiple of 6 closest to a given integer. If the number is exactly divisible by 6, return the number itself.","solution":"def closest_multiple_of_6(n): Returns the closest multiple of 6 to the given number. If the number is exactly divisible by 6, return the number itself. # If n is already a multiple of 6, return n if n % 6 == 0: return n # Calculate quotient and find nearest multiples lower_multiple = (n // 6) * 6 upper_multiple = lower_multiple + 6 # Determine which multiple is closer if n - lower_multiple < upper_multiple - n: return lower_multiple else: return upper_multiple"},{"question":"Write a function to partition an array around a given pivot index. The function should rearrange the array such that elements less than the pivot are on the left, elements equal to the pivot are in the middle, and elements greater than the pivot are on the right. The function should return the final position of the pivot element after the partitioning.","solution":"def partition(arr, pivot_index): Partitions the array around the given pivot index such that elements less than the pivot are on the left, elements equal to the pivot are in the middle, and elements greater than the pivot are on the right. Returns the final position of the pivot element after partitioning. pivot = arr[pivot_index] less_than_pivot = [] equal_to_pivot = [] greater_than_pivot = [] # Partition the array elements into different lists for element in arr: if element < pivot: less_than_pivot.append(element) elif element == pivot: equal_to_pivot.append(element) else: greater_than_pivot.append(element) # Combine the lists to reform the array arr[:] = less_than_pivot + equal_to_pivot + greater_than_pivot # The final position of the pivot is the position just after the last element that is less than pivot new_pivot_index = len(less_than_pivot) return new_pivot_index"},{"question":"Write a function to check if a given binary tree is symmetric (a mirror of itself). You can use the given code as a starting point.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Check if the binary tree is symmetric. if not root: return True def is_mirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)) return is_mirror(root.left, root.right)"},{"question":"Write a function to check if a number is prime. If the number is prime, return its square. Otherwise, return its cube.","solution":"def is_prime(number): Check if a number is prime. If the number is prime, return its square. Otherwise, return its cube. if number <= 1: return number ** 3 for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return number ** 3 return number ** 2"},{"question":"Write a function to sort an array of integers using the selection sort algorithm. Provide a brief explanation of the selection sort algorithm and its time complexity.","solution":"def selection_sort(arr): Sorts an array of integers using the selection sort algorithm. Parameters: arr (list): The list of integers to sort. Returns: list: The sorted list. n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Write a function to find all unique solutions to the N-Queens problem. The N-Queens problem is a classic problem in combinatorial mathematics. It asks for all distinct solutions to the problem of placing N queens on an N×N chessboard so that no two queens threaten each other. The solution ensures that no two queens are in the same row, column, or diagonal.","solution":"def solve_n_queens(n): Returns all the distinct solutions to the N-Queens problem. Each solution is represented as a list of strings, where 'Q' represents a queen and '.' represents an empty space. def is_not_under_attack(row, col): return not (cols[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): queens.add((row, col)) cols[col] = 1 hills[row - col] = 1 dales[row + col] = 1 def remove_queen(row, col): queens.remove((row, col)) cols[col] = 0 hills[row - col] = 0 dales[row + col] = 0 def add_solution(): solution = [] for _, col in sorted(queens): solution.append('.' * col + 'Q' + '.' * (n - col - 1)) solutions.append(solution) def backtrack(row=0): for col in range(n): if is_not_under_attack(row, col): place_queen(row, col) if row + 1 == n: add_solution() else: backtrack(row + 1) remove_queen(row, col) solutions = [] queens = set() cols = [0] * n hills = [0] * (2 * n - 1) dales = [0] * (2 * n - 1) backtrack() return solutions"},{"question":"Write a function to find the maximum profit that can be obtained from a single buy and sell operation of stocks. The function should take a list of integers representing the stock prices on consecutive days and return the maximum profit that can be made. If no profit can be made, the function should return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be made from a single buy and sell operation. :param prices: List of integers representing stock prices on consecutive days. :return: Integer representing the maximum profit. Returns 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function to generate the nth Fibonacci number using an iterative approach. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the longest substring with exactly k unique characters in a given string. For example, for the string \\"aabacbebebe\\" and k = 3 the longest substring is \\"cbebebe\\". Note: There may be more than one substring. In such cases, return the substring with the least starting index. If no such substring exists, return an empty string.","solution":"def longest_substring_with_k_unique_chars(s, k): Finds the longest substring with exactly k unique characters. Parameters: s (str): The input string. k (int): The number of unique characters. Returns: str: The longest substring with k unique characters. if k == 0 or not s: return \\"\\" left = 0 right = 0 max_length = 0 max_substring = \\"\\" char_count = {} while right < len(s): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 if len(char_count) == k: current_length = right - left + 1 if current_length > max_length: max_length = current_length max_substring = s[left:right+1] right += 1 return max_substring"},{"question":"Write a function to find the maximum subarray sum using Kadane's algorithm. How can you implement this algorithm in Python?","solution":"def max_subarray_sum(nums): Implementation of Kadane's algorithm to find the maximum subarray sum. :param nums: List of integers :return: Integer representing the maximum subarray sum if not nums: return 0 max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the middle node of a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle_node(head): Returns the middle node of a linked list. If there are two middle nodes, return the second middle node. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to calculate the area of a triangle given the lengths of its three sides. Additionally, ensure the function can handle invalid inputs gracefully by returning an appropriate message.","solution":"import math def area_of_triangle(a, b, c): Returns the area of a triangle when given the lengths of its three sides. Uses Heron's formula to calculate the area. Returns an appropriate message for invalid inputs or non-triangular sides. # Validate inputs if any(type(side) not in [int, float] for side in [a, b, c]): return \\"Invalid input: All sides must be numbers.\\" if a <= 0 or b <= 0 or c <= 0: return \\"Invalid input: All sides must be positive.\\" # Check for triangle inequality if a + b <= c or a + c <= b or b + c <= a: return \\"Invalid input: The sides do not form a triangle.\\" # Calculate area using Heron's formula s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a function to generate Pascal's Triangle up to n rows. Each row should start and end with 1. The middle elements in each row are calculated based on the sum of the two numbers above them in the previous row.","solution":"def pascals_triangle(n): Generate Pascal's Triangle up to n rows. Parameters: n (int): Number of rows of Pascal's Triangle to generate Returns: List[List[int]]: 2D list representing Pascal's Triangle triangle = [] for i in range(n): # Start each row with 1 row = [1] * (i + 1) # Calculate the inner elements of the row for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) return triangle"},{"question":"Write a function to find the median of an array of numbers. The function should handle even and odd数组的中位数。","solution":"def find_median(arr): Returns the median of an array of numbers. The function handles both even and odd lengths of the array. if not arr: raise ValueError(\\"Array cannot be empty\\") arr_sorted = sorted(arr) n = len(arr_sorted) mid = n // 2 if n % 2 == 1: # odd length return arr_sorted[mid] else: # even length return (arr_sorted[mid - 1] + arr_sorted[mid]) / 2"},{"question":"Write a function to determine if a given integer is a palindrome. An integer is a palindrome when it reads the same backward as forward, ignoring spaces, signs, and capital letters. Note that the integer should be a valid number.","solution":"def is_integer_palindrome(num): Determines if the given integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Args: num (int): The integer to check. Returns: bool: True if the integer is palindrome, False otherwise. # Convert the integer to string and ignore signs numStr = str(abs(num)) # Check if the string reads the same backwards return numStr == numStr[::-1]"},{"question":"Write a function to find the nth Fibonacci number using a recursive approach. The function should handle negative inputs by returning an appropriate error message.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. Handles negative inputs by returning an appropriate error message. if n < 0: return \\"Input should be a non-negative integer.\\" elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to find the longest palindromic subsequence in a given string. The function should return the length of the longest palindromic subsequence.","solution":"def longest_palindromic_subsequence(s: str) -> int: Function to find the length of the longest palindromic subsequence in a given string. :param s: input string :type s: str :return: length of the longest palindromic subsequence :rtype: int n = len(s) if n == 0: return 0 # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is length of substring for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = 2 else: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # Length of longest palindromic subsequence return dp[0][n - 1]"},{"question":"Write a function to find all the duplicate elements in a list. The function should take a list of integers as input and return a list of integers that are duplicated, ensuring no duplicate duplicates are returned in the output (i.e., each number from the output list is unique).","solution":"def find_duplicates(nums): Returns a list of unique duplicate elements. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a function to render an HTML element with a class attribute. The function should take three parameters: the tag name, the element's class, and the text content of the element. Then, return the HTML string.","solution":"def render_element(tag, class_name, text_content): Returns an HTML string for an element with the specified tag, class attribute, and text content. Parameters: - tag (str): The tag name of the HTML element (e.g., 'div', 'span'). - class_name (str): The class to be assigned to the HTML element. - text_content (str): The text to be enclosed within the HTML element. Returns: - str: A string representing the HTML element. return f'<{tag} class=\\"{class_name}\\">{text_content}</{tag}>'"},{"question":"Write a function to reverse a string in Python. For example, the input \\"hello\\" should return \\"olleh\\". Ensure that the function handles both uppercase and lowercase letters, and maintains the case of each letter in the reversed string.","solution":"def reverse_string(s): Reverses the input string s and returns the resulting string. return s[::-1]"},{"question":"Write a function to find the maximum element in an array, but optimize the function to run in O(1) space complexity and solve the problem in a single pass efficiently.","solution":"def find_maximum(arr): Returns the maximum element in the array. This function runs in O(1) space complexity and a single pass of the array. if not arr: # If array is empty, return None or raise an exception return None # Initialize max_element to the smallest possible value max_element = arr[0] # Iterate through the array and find the maximum element for num in arr: if num > max_element: max_element = num return max_element"},{"question":"Write a function to compare two arrays and return the index of the first occurrence of common elements between the two arrays. If no common elements are found, return -1. Compare the arrays using binary search for efficiency.","solution":"def binary_search(arr, x): A helper function to perform binary search on a sorted array. :param arr: The sorted array in which to search for the element x. :param x: The element to search for in the array. :return: True if the element is found, False otherwise. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: return True elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return False def compare_arrays(arr1, arr2): Compares two arrays and returns the index of the first occurrence of common elements between the two arrays. If no common elements are found, returns -1. Binary search is used for efficiency. :param arr1: The first array. :param arr2: The second array. :return: The index of the first occurrence of common elements or -1. arr2.sort() for index, element in enumerate(arr1): if binary_search(arr2, element): return index return -1"},{"question":"Write a function to split a list of strings into chunks of a specified size, then join each chunk with a specific delimiter.","solution":"def chunk_and_join(strings, chunk_size, delimiter): Splits a list of strings into chunks of a specified size, then joins each chunk with a specific delimiter. Args: strings (list of str): The list of strings to be processed. chunk_size (int): The size of each chunk. delimiter (str): The delimiter used to join each chunk. Returns: list of str: A list where each element is a chunk of the original list joined by the delimiter. if chunk_size <= 0: raise ValueError(\\"chunk_size must be greater than 0\\") chunks = [strings[i:i + chunk_size] for i in range(0, len(strings), chunk_size)] joined_chunks = [delimiter.join(chunk) for chunk in chunks] return joined_chunks"},{"question":"Write a function to check whether it is possible to form a given integer into a string of successive integers starting from 1, with the digits circularly shifted.","solution":"def can_form_successive_integers(n): Function to check if the given integer can be formed into a string of successive integers starting from 1, with the digits circularly shifted. :param n: Input integer :return: Boolean value indicating if the condition is met str_n = str(n) length = len(str_n) # Generate the required sequence string current = 1 successive_string = \\"\\" while len(successive_string) < length: successive_string += str(current) current += 1 # Add the current part only if necessary if len(successive_string) > length: successive_string = successive_string[:length] wrapped_string = successive_string + successive_string # Wrap for circular check return str_n in wrapped_string"},{"question":"Write a function to generate the nth Fibonacci number using both iterative and recursive approaches. Also, provide the time and space complexity analysis for each approach.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b def fibonacci_recursive(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: return 0 elif n == 1: return 1 return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) # Time complexity analysis: # Iterative approach: O(n) # Recursive approach: O(2^n) # Space complexity analysis: # Iterative approach: O(1) # Recursive approach: O(n) due to recursion stack"},{"question":"Write a function to sort a list in ascending order using the bubble sort algorithm. Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts a list in ascending order using the bubble sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to reverse the order of words in a given sentence without altering the order of characters within the words themselves. For example, given the sentence \\"hello world\\", the function should return \\"world hello\\". You are not allowed to use any built-in functions for reversing strings.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence without altering the order of characters within the words. Args: sentence (str): The sentence to be reversed. Returns: str: The sentence with the order of words reversed. words = [] i = 0 while i < len(sentence): while i < len(sentence) and sentence[i] == ' ': i += 1 start = i while i < len(sentence) and sentence[i] != ' ': i += 1 if start < i: words.append(sentence[start:i]) reversed_sentence = '' for j in range(len(words)-1, -1, -1): reversed_sentence += words[j] if j != 0: reversed_sentence += ' ' return reversed_sentence"},{"question":"Write a function to determine if a given integer array is strictly increasing. The function should return \`True\` if the array is strictly increasing, and \`False\` otherwise. An array is considered strictly increasing if each element in the array is greater than the previous one. For example, the function should return \`True\` for \`[1, 2, 3, 4, 5]\` and \`False\` for \`[1, 2, 2, 3, 4]\`.","solution":"def is_strictly_increasing(arr): Returns True if the given integer array is strictly increasing, False otherwise. for i in range(len(arr) - 1): if arr[i] >= arr[i + 1]: return False return True"},{"question":"Write a function to remove all duplicates from an integer array and return the length of the new array without duplicates. Additionally, ensure that the function modifies the original array to contain the unique elements in ascending order.","solution":"def remove_duplicates(arr): Removes all duplicates from an integer array, modifies the array to have unique elements in ascending order, and returns the length of the array without duplicates. Parameters: arr (list): The input list of integers. Returns: int: The length of the array without duplicates. if not arr: return 0 # Removing duplicates and sorting the array unique_elements = sorted(set(arr)) # Modifying the original array arr[:] = unique_elements return len(arr)"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Can you provide a simple implementation?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to compute the factorial of a given number using recursion. Ensure that the function handles cases for negative numbers and numbers greater than 20 by raising appropriate exceptions. Consider memory efficiency and potential stack overflow issues for large input values.","solution":"def factorial(n): Returns the factorial of the given non-negative integer n using recursion. Raises ValueError for negative integers and OverflowError for numbers greater than 20. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n > 20: raise OverflowError(\\"Factorial calculation for numbers greater than 20 is not safe for recursion\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to reverse the order of the words in a string s, such that s becomes \\"world! Hello\\".","solution":"def reverse_words(s): Reverses the order of the words in a string. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A new string with the words in reverse order. return ' '.join(s.split()[::-1])"},{"question":"Write a function to return \`true\` if the given string is a palindrome, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Returns true if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to find the duplicate number in a given array of integers where each integer is between 1 and n (inclusive) for some positive integer n. The function should return the duplicate number using a constant space solution. Can you provide a step-by-step explanation on how to approach this problem?","solution":"def find_duplicate(nums): Function to find the duplicate number in the given array. Args: nums (list): List of integers where each integer is between 1 and n (inclusive). Returns: int: The duplicate number. # Initialize the tortoise and the hare tortoise = hare = nums[0] # First part of Floyd's tortoise and hare algorithm # Finding the intersection point while True: tortoise = nums[tortoise] hare = nums[nums[hare]] if tortoise == hare: break # Finding the entrance to the cycle tortoise = nums[0] while tortoise != hare: tortoise = nums[tortoise] hare = nums[hare] return hare"},{"question":"Write a function to count the number of unique words in a given string. The function should be case-insensitive and should ignore any punctuation marks.","solution":"import re def count_unique_words(s): Returns the number of unique words in the given string. The function is case-insensitive and ignores punctuations. # Convert to lower case s = s.lower() # Remove punctuation using regular expressions s = re.sub(r'[^ws]', '', s) # Split the string into words words = s.split() # Use a set to store unique words unique_words = set(words) # Return the count of unique words return len(unique_words)"},{"question":"Write a function to convert a given string to its corresponding ASCII values. Each character in the string should be converted to its ASCII value and returned as a list of integers.","solution":"def string_to_ascii(s): Converts a given string to its corresponding ASCII values. Parameters: s (str): The input string Returns: list: A list of integers representing the ASCII values of the characters in the string return [ord(char) for char in s]"},{"question":"Write a function to divide two numbers without using multiplication, division, or any arithmetic operators and without using Python's built-in functions that implement these operations. You should only use bitwise and shifting operations.","solution":"def divide(dividend, divisor): Divide two numbers without using multiplication, division or mod operator. Use bitwise operations and shifting. # Handle edge cases if divisor == 0: raise ValueError(\\"Cannot divide by zero\\") if dividend == 0: return 0 # Determine the sign of the result negative = (dividend < 0) != (divisor < 0) dividend, divisor = abs(dividend), abs(divisor) # Initialization quotient = 0 the_sum = divisor # Dividend must be greater than or equal to divisor while dividend >= divisor: current_quotient = 1 while (the_sum << 1) <= dividend: the_sum <<= 1 current_quotient <<= 1 dividend -= the_sum quotient += current_quotient the_sum = divisor return -quotient if negative else quotient"},{"question":"Write a function to reverse a string using an in-place algorithm without additional storage create a Scala function to accomplish this task.","solution":"def reverse_string_in_place(s): Reverses the input string in place and returns the reversed string. s = list(s) # Convert string to a list because strings are immutable i, j = 0, len(s) - 1 while i < j: s[i], s[j] = s[j], s[i] i += 1 j -= 1 return \\"\\".join(s)"},{"question":"Write a function to find the maximum sum of pairs in a list where each pair consists of one element from the beginning and one element from the end of the list. The pairs can overlap, and the steps between selecting elements for each pair can vary.","solution":"def max_sum_pairs(arr): Returns the maximum sum of pairs from the list where each pair consists of one element from the beginning and one element from the end of the list. Parameters: arr (list of int): A list of integers. Returns: int: The maximum sum of pairs. max_sum = float('-inf') length = len(arr) for i in range((length + 1) // 2): # Iterate only half the length pair_sum = arr[i] + arr[length - 1 - i] if pair_sum > max_sum: max_sum = pair_sum return max_sum"},{"question":"Write a function to return the transpose of a matrix. Transposing a matrix means that the rows of the original matrix become the columns of the new matrix, and vice versa.","solution":"def transpose_matrix(matrix): Returns the transpose of a given matrix. Args: matrix (list of list of int/float): The original matrix to be transposed. Returns: list of list of int/float: The transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Write a function to determine the smallest and largest elements in an array. The function should return these two values as a tuple.","solution":"def find_min_max(arr): Returns a tuple with the smallest and largest elements in an array. Parameters: arr (List[int]): List of integers. Returns: tuple: A tuple containing the smallest and largest elements. if not arr: raise ValueError(\\"The array should contain at least one element\\") min_elem = min(arr) max_elem = max(arr) return (min_elem, max_elem)"},{"question":"Write a function to calculate the sum of an array. How would you do this in Python?","solution":"def sum_array(arr): Returns the sum of elements in the array. Parameters: arr (list of numbers): The array to sum up. Returns: number: The sum of the elements in the array. return sum(arr)"},{"question":"Write a function to calculate the sum of all numbers between two integers, inclusive. The function should take in two parameters, \`start\` and \`end\`, and return the sum of all integers from \`start\` to \`end\` (inclusive). If the range is negative (i.e., \`end\` is less than \`start\`), the function should return -1.","solution":"def sum_of_integers_between(start, end): Returns the sum of all integers from \`start\` to \`end\` (inclusive). If \`end\` is less than \`start\`, returns -1. if end < start: return -1 else: return sum(range(start, end + 1))"},{"question":"Write a function to solve the puzzle of Lights Out on a 3x3 grid. The goal is to turn off all the lights by toggling them or the lights directly above, below, to the left, and to the right of each button. Assume all lights are initially on.","solution":"def toggle(grid, r, c): Toggle the light at (r, c) and its neighbors. directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < 3 and 0 <= nc < 3: grid[nr][nc] = 1 - grid[nr][nc] # Toggles the light def solve_lights_out(initial_grid): Solve the Lights Out puzzle on a 3x3 grid. The function assumes all lights are initially on. Each light state is either 1 (on) or 0 (off). Returns a sequence of (r, c) moves to turn all the lights off. steps = [] # Try all combinations of first row toggles for first_row_toggle in range(1 << 3): # 2^3 = 8 combinations grid = [row[:] for row in initial_grid] # Deep copy of the grid current_steps = [] # Apply the toggles according to the combination bit pattern for c in range(3): if first_row_toggle & (1 << c): toggle(grid, 0, c) current_steps.append((0, c)) # Process the rest of the grid based on first row toggles for r in range(1, 3): for c in range(3): if grid[r-1][c] == 1: # If the light above is still on, toggle current light toggle(grid, r, c) current_steps.append((r, c)) # Check if all lights are off if all(grid[r][c] == 0 for r in range(3) for c in range(3)): steps = current_steps break return steps # Assuming the initial condition where all lights are on initial_grid = [[1 for _ in range(3)] for _ in range(3)] solution_steps = solve_lights_out(initial_grid) print(solution_steps)"},{"question":"Write a function to return the sum of all even numbers in a given 2D array. The function should be named \`sum_even_numbers\` and take a 2D array \`arr\` as its parameter. The function should iterate through each element in the array, check if it is an even number, and if so, add it to the sum. Finally, the function should return the total sum of all even numbers in the array.","solution":"def sum_even_numbers(arr): Returns the sum of all even numbers in the given 2D array. total_sum = 0 for row in arr: for num in row: if num % 2 == 0: total_sum += num return total_sum"},{"question":"Write a function to calculate the length of the longest continuous subarray that contains exactly \`k\` distinct elements. For example, if the input array is \`[1, 2, 1, 2, 3]\` and \`k = 2\`, the function should return \`4\` because the longest subarray that contains exactly 2 distinct elements is \`[1, 2, 1, 2]\`.","solution":"def longest_subarray_with_k_distinct(nums, k): Returns the length of the longest continuous subarray that contains exactly k distinct elements. from collections import defaultdict count = defaultdict(int) start = 0 max_length = 0 distinct_count = 0 for end in range(len(nums)): if count[nums[end]] == 0: distinct_count += 1 count[nums[end]] += 1 while distinct_count > k: count[nums[start]] -= 1 if count[nums[start]] == 0: distinct_count -= 1 start += 1 if distinct_count == k: max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function to count the number of occurrences of a given value in an array. For example, if the array is [1, 2, 2, 3, 3, 3] and the value is 3, the function should return 3.","solution":"def count_occurrences(arr, value): Counts the number of occurrences of a given value in an array. Parameters: arr (list): The list in which to count occurrences. value: The value to count in the list. Returns: int: The number of occurrences of the value in the list. return arr.count(value)"},{"question":"Write a function to calculate the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one number. Ensure that your function is optimized to have a performance complexity better than O(n^2).","solution":"def max_subarray_sum(nums): Calculates the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Parameters: nums (List[int]): List of integers. Has at least one number. Returns: int: Maximum sum of the contiguous subarray. # Implementing Kadane's Algorithm max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to convert a given binary search tree (BST) to a binary tree with the minimum possible height. The resulting binary tree should also maintain the values in sorted order.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_to_min_height_bst(root): Converts a given binary search tree (BST) to a binary tree with the minimum possible height. The resulting binary tree should also maintain the values in sorted order. # Helper function to traverse BST in-order and store elements def inorder_traversal(node): if not node: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) # Helper function to build a balanced BST from sorted array def sorted_array_to_bst(arr): if not arr: return None mid = len(arr) // 2 root = TreeNode(arr[mid]) root.left = sorted_array_to_bst(arr[:mid]) root.right = sorted_array_to_bst(arr[mid+1:]) return root # Get sorted elements from the BST sorted_elements = inorder_traversal(root) # Build and return the balanced BST return sorted_array_to_bst(sorted_elements)"},{"question":"Write a function to sort an array in-place using the QuickSort algorithm.","solution":"def quicksort(arr, low, high): Sorts an array in-place using the QuickSort algorithm. if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi-1) quicksort(arr, pi+1, high) def partition(arr, low, high): Helper function to partition the array on the pivot element. pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Write a function to find the duplicate number in an array of integers where each integer is between 1 and n (inclusive), with n being the array's length. The array contains exactly one duplicate.","solution":"def find_duplicate(nums): Returns the duplicate number in the array. :param nums: List of integers where each integer is between 1 and n (inclusive) and the array contains exactly one duplicate. :return: The duplicate number. seen = set() for num in nums: if num in seen: return num seen.add(num)"},{"question":"Write a function to convert a decimal number to its binary representation using recursion. The function should take an integer as input and return a string containing the binary representation of the given decimal number. If the input number is 0, the function should return \\"0\\".","solution":"def decimal_to_binary(n): Convert a decimal number to its binary representation using recursion. if n == 0: return \\"0\\" elif n == 1: return \\"1\\" else: return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Write a function to calculate the sum of all unique elements in an array. The function should handle negative numbers and duplicates. Here's the function signature: \`def sum_unique_elements(arr: list) -> int:\`","solution":"def sum_unique_elements(arr: list) -> int: Returns the sum of all unique elements in the array. Parameters: arr (list): A list of integers which may contain duplicates. Returns: int: The sum of all unique elements. unique_elements = set(arr) return sum(unique_elements)"},{"question":"Write a function to calculate the Fibonacci number at a given index using recursion.","solution":"def fibonacci(n): Returns the Fibonacci number at the given index n using recursion. if n < 0: raise ValueError(\\"Index cannot be negative\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to convert a Roman numeral to an integer in Python, handling the rules such as IV (4), IX (9), and XL (40). The function should take one argument which is a string representing a Roman numeral.","solution":"def roman_to_int(roman): Convert a Roman numeral to an integer. roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} prev_value = 0 total = 0 for char in reversed(roman): current_value = roman_dict[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Write a function to reverse a stack using recursion. A stack is a LIFO data structure. How can you reverse it without using any additional data structure?","solution":"def reverse_stack(stack): Reverses the given stack using recursion. # base case: if the stack is empty, return if not stack: return # remove the top item top = stack.pop() # reverse the stack recursively reverse_stack(stack) # insert the top item at the bottom insert_at_bottom(stack, top) def insert_at_bottom(stack, item): Inserts an item at the bottom of the given stack using recursion. # base case: if the stack is empty, push the item if not stack: stack.append(item) return # remove the top item top = stack.pop() # insert item at bottom recursively insert_at_bottom(stack, item) # push the top item back to stack stack.append(top)"},{"question":"Write a function to find the minimum value in a given array.","solution":"def find_minimum(arr): Returns the minimum value in the given array. If the array is empty, returns None. if not arr: return None return min(arr)"},{"question":"Write a function to find the second largest number in an array using Python. If the array has less than two elements, return None.","solution":"def second_largest(arr): Returns the second largest number in the array. If the array has less than two elements, returns None. :param arr: List of integers :return: Second largest integer or None if len(arr) < 2: return None first = second = float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a function to sort an array of integers using the quicksort algorithm.","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to rotate an array to the right by k steps. For example, given the array [1, 2, 3, 4, 5] rotated right by 2 steps would be [4, 5, 1, 2, 3].","solution":"def rotate_right(arr, k): Rotates an array to the right by k steps. Parameters: arr (list): The input array to rotate. k (int): The number of steps to rotate the array to the right. Returns: list: The rotated array. if not arr: return arr k %= len(arr) # Normalize k to prevent extra rotations return arr[-k:] + arr[:-k]"},{"question":"Write a function to remove duplicates from an array while maintaining the original order. If the array is not sorted, the function should handle it effectively. Here's what I want: if \`input_list = [1, 2, 2, 3, 4, 4, 5]\` the function should return \`[1, 2, 3, 4, 5]\`.","solution":"def remove_duplicates(input_list): Removes duplicates from an array while maintaining the original order. Args: input_list (list): The input list with possible duplicates. Returns: list: A list with duplicates removed and the original order maintained. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to calculate the smallest number of coins needed to make up a given amount of money. The function should be able to handle different denominations of coins. For example, given the amount of money 11 and denominations [1, 2, 5], the function should return 3 (since 5 + 5 + 1 = 11). If the amount can't be made up with the given denominations, the function should return -1.","solution":"def min_coins(amount, denominations): Returns the smallest number of coins needed to make up the given amount. If it is not possible to make up that amount with the given denominations, returns -1. # Initialize the DP table with a value greater than the amount. dp = [amount + 1] * (amount + 1) dp[0] = 0 for coin in denominations: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a function to find the sum of all positive integers up to and including n.","solution":"def sum_up_to(n): Returns the sum of all positive integers up to and including n. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Write a function to check if a given string \`s\` contains the substring \\"abc\\". If it does, return \`true\`; otherwise, return \`false\`.","solution":"def contains_abc(s): Checks if the input string \`s\` contains the substring \\"abc\\". Args: s (str): The input string. Returns: bool: True if \\"abc\\" is found in \`s\`, otherwise False. return \\"abc\\" in s"},{"question":"Write a function to find the second largest number in an integer array. If the second largest number does not exist, return -1. The function should be efficient and work in O(n) time complexity.","solution":"def second_largest(nums): Returns the second largest number in the array. If the second largest number does not exist, return -1. if len(nums) < 2: return -1 first, second = float('-inf'), float('-inf') for num in nums: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else -1"},{"question":"Write a function to solve the equation \\"x + y = z\\" in Python.","solution":"def solve_equation(x, y): Solves the equation x + y = z by returning the value of z. return x + y"},{"question":"Write a function to find all the prime factors of a given number.","solution":"def prime_factors(n): Returns a list of all prime factors of a given number n. factors = [] # First get the number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # Now find odd factors for i in range(3, int(n**0.5)+1, 2): while n % i == 0: factors.append(i) n = n // i # This condition is to check if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a function to print the first n Fibonacci numbers. The Fibonacci sequence is defined as the sequence of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 5 Fibonacci numbers are 0, 1, 1, 2, 3.","solution":"def fibonacci(n): Returns a list containing the first n Fibonacci numbers. :param n: an integer indicating how many Fibonacci numbers to generate. :return: a list of the first n Fibonacci numbers. if n <= 0: return [] sequence = [0] if n == 1: return sequence sequence.append(1) for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to check if a given integer is a palindrome without using extra space. The function should return true if the integer is a palindrome and false otherwise. A palindrome is an integer that reads the same backward as forward, such as 121 or 1221. The function should not use additional data structures like arrays or lists to check the palindrome.","solution":"def is_palindrome(x): Checks if the given integer is a palindrome without using extra space. :param x: int :return: bool # Negative numbers are not palindromes if x < 0: return False original = x reversed_num = 0 while x > 0: digit = x % 10 reversed_num = reversed_num * 10 + digit x //= 10 return original == reversed_num"},{"question":"Write a function to simulate a coin toss and return the result as a string indicating \\"Heads\\" or \\"Tails\\".","solution":"import random def coin_toss(): Simulates a coin toss and returns 'Heads' or 'Tails'. return \\"Heads\\" if random.choice([True, False]) else \\"Tails\\""},{"question":"Write a function to generate the longest possible palindrome by removing zero or more characters from the input string. What is a palindrome?","solution":"def longest_palindrome(s): Generate the longest possible palindrome by removing zero or more characters from the input string. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Write a function to generate all the prime factors of a given number \`n\`. The function should return a list of all prime factors, each repeated the number of times it divides \`n\`.","solution":"def prime_factors(n): Returns all the prime factors of a given number n. Each prime factor is repeated the number of times it divides n. i = 2 factors = [] while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors"},{"question":"Write a function to calculate the sum of all numbers in an array. You should handle the case where the array might be empty.","solution":"def sum_of_array(arr): Returns the sum of all numbers in the array. If the array is empty, returns 0. return sum(arr)"},{"question":"Write a function to compare two strings, s1 and s2, and return the longest common subsequence (LCS) of the two strings.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence (LCS) of two strings. m, n = len(s1), len(s2) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up. for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The value of dp[m][n] contains the length of LCS of s1 and s2. # Now let's build the LCS string based on the dp array. lcs = [] while m > 0 and n > 0: if s1[m - 1] == s2[n - 1]: lcs.append(s1[m - 1]) m -= 1 n -= 1 elif dp[m - 1][n] > dp[m][n - 1]: m -= 1 else: n -= 1 # The lcs list is built in reverse order, so we need to reverse it before returning. return ''.join(reversed(lcs))"},{"question":"Write a function to parse a string containing a postfix expression and calculate its using stack. The input will be a space-separated string. For example, \\"231*+\\" represents the postfix expression (2+3)*1. The function should support basic operations: addition (+), subtraction (-), multiplication (*), and division (/).","solution":"def evaluate_postfix(expression): Evaluates a postfix (reverse Polish notation) expression. Args: expression (str): The postfix expression as a space-separated string. Returns: float: The result of the postfix expression. stack = [] operators = set(['+', '-', '*', '/']) for token in expression.split(): if token not in operators: stack.append(float(token)) # Convert number tokens to float and push onto stack else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(a / b) return stack[0]"},{"question":"Write a function to convert a given list of numbers into a dictionary where the keys are the numbers and the values are their corresponding indices in the list. If a number appears more than once in the list, store all its indices in a list as the value for that key.","solution":"def list_to_dict(nums): Convert a list of numbers into a dictionary where the keys are the numbers and the values are their corresponding indices in the list. If a number appears more than once, store all its indices in a list as the value. Args: nums (list): A list of numbers. Returns: dict: A dictionary with numbers as keys and their indices (or list of indices) as values. num_dict = {} for index, num in enumerate(nums): if num in num_dict: if isinstance(num_dict[num], list): num_dict[num].append(index) else: num_dict[num] = [num_dict[num], index] else: num_dict[num] = index return num_dict"},{"question":"Write a function to calculate the sum of two numbers, then print the result.","solution":"def sum_and_print(a, b): Returns the sum of a and b and prints the result. result = a + b print(result) return result"},{"question":"Write a function to identify all prime numbers within a given range. The range will be provided as two parameters: \`start\` (inclusive) and \`end\` (exclusive). The function should return a list of all prime numbers within the range, sorted in ascending order.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Returns a list of prime numbers in the range [start, end). primes = [] for num in range(start, end): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function to check if a given integer is a power of three. The function should return \`True\` if the number is a power of three, and \`False\` otherwise. The input will be a single integer \`n\`. You should not use any built-in function like \`math.log()\` or \`math.sqrt()\`. Instead, implement a solution that only uses basic arithmetic operations like addition, subtraction, multiplication, division, and comparison.","solution":"def is_power_of_three(n): Determine if a given integer n is a power of three. Args: n (int): The integer to check. Returns: bool: True if n is a power of three, otherwise False. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to calculate the height of a binary tree in Python. The function should return the number of edges on the longest path from the root node to a leaf node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def binary_tree_height(root): Calculate the height of a binary tree. The height of a binary tree is the number of edges on the longest path from the root to a leaf node. :param root: TreeNode, the root node of the binary tree :return: int, the height of the binary tree if root is None: return -1 # Return -1 for the height of an empty tree left_height = binary_tree_height(root.left) right_height = binary_tree_height(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to return the area of a circle given its radius as a parameter. The function should be named \`calculate_circle_area\` and it should take a single parameter: \`radius\`. The area of a circle can be calculated using the formula: \`area = π * radius * radius\`. You are required to use the mathematical constant π (pi) from the \`math\` module.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. return math.pi * radius * radius"},{"question":"Write a function to convert a given integer into a binary string without the '0b' prefix. For example, if the input is 5, the output should be '101'.","solution":"def int_to_binary_string(n): Converts a given integer into a binary string without the '0b' prefix. Parameters: n (int): The integer to be converted to binary string. Returns: str: The binary representation of the integer as a string. return bin(n)[2:]"},{"question":"Write a function to count the occurrences of each letter in a given string. The function should ignore case sensitivity and count only alphabetic characters. The result should be returned as a dictionary where the keys are the letters and the values are the counts.","solution":"def count_letter_occurrences(s): Counts the occurrences of each letter in a given string. Ignores case sensitivity and counts only alphabetic characters. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are letters and values are their counts. count_dict = {} for char in s: if char.isalpha(): char = char.lower() if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a function to check if a list is sorted in ascending order.","solution":"def is_sorted(lst): Checks if the list is sorted in ascending order. Parameters: - lst (list): The list of elements to check. Returns: - bool: True if the list is sorted in ascending order, False otherwise. return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))"},{"question":"Write a function to check if two strings are rotations of each other using Python. Two strings are rotations if one string can be obtained by rotating the other string by some number of characters. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\".","solution":"def are_rotations(str1, str2): Check if str2 is a rotation of str1. # Check if both strings are of the same length and are not empty if len(str1) == len(str2) and len(str1) > 0: # Concatenate str1 with itself and see if str2 is a substring return str2 in str1 + str1 return False"},{"question":"Write a function to implement the Knapsack problem using dynamic programming in Python. The function should accept a list of item values, a list of item weights, and the maximum weight capacity of the knapsack as parameters. The function should return the maximum value that can be obtained without exceeding the weight capacity.","solution":"def knapsack(values, weights, max_weight): n = len(values) # Table to store results of subproblems dp = [[0] * (max_weight + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(max_weight + 1): if weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight]"},{"question":"Write a function to find the maximum number of consecutive one's in a binary array. For example, given the binary array [1, 1, 0, 1, 1, 1], the function should return 3. Another example is with the array [1, 0, 0, 1, 0, 1], where the function should return 2.","solution":"def find_max_consecutive_ones(nums): Returns the maximum number of consecutive 1's in a binary array. max_count = count = 0 for num in nums: if num == 1: count += 1 max_count = max(max_count, count) else: count = 0 return max_count"},{"question":"Write a function to find the maximum profit in a stock trading problem without performing more than one transaction. You can only sell the stock on a day which is strictly after you buy it. For example, if the input is an array of prices where prices[i] is the price of a given stock on day i, return the maximum profit.","solution":"def max_profit(prices): Returns the maximum profit from a single stock trade. :param prices: List[int] - list of stock prices :return: int - the maximum profit possible if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to count the number of subarrays where the sum of the elements is equal to a given integer k.","solution":"def subarray_sum(nums, k): Returns the count of subarrays where the sum of the elements is equal to k. count = 0 current_sum = 0 sum_dict = {0: 1} for num in nums: current_sum += num if current_sum - k in sum_dict: count += sum_dict[current_sum - k] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"Write a function to return the sum of all integers in a nested list. For example, given the input \`[[1, 2, [3]], 4, [5, 6]]\`, the function should return \`21\` because \`1 + 2 + 3 + 4 + 5 + 6 = 21\`.","solution":"def sum_nested_list(nested_list): Returns the sum of all integers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to reverse the digits of a given integer. The function should handle both positive and negative integers.","solution":"def reverse_integer(n): Reverses the digits of the given integer. Args: n (int): The integer to be reversed. Returns: int: The integer obtained by reversing the digits of the input. sign = -1 if n < 0 else 1 n = abs(n) reversed_n = int(str(n)[::-1]) return sign * reversed_n"},{"question":"Write a function to reverse a linked list in place. You should not swap the values of the nodes in the list, only the nodes themselves. The function takes the head of a linked list as input and returns the new head of the reversed linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list in place. :param ListNode head: The head of the linked list :return: The new head of the reversed linked list :rtype: ListNode prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to get the week number of the year based on the ISO 8601 standard, where the first week of the year is the one that includes the first Thursday, and the day of the week is also considered. For example, if the first Thursday of the year is January 4th, 2020, then the week number is considered as the first week. Here, the day of the week is not considered.","solution":"import datetime def get_week_number(year, month, day): Returns the ISO 8601 week number of the year for a given date. Parameters: year (int): The year of the date. month (int): The month of the date. day (int): The day of the date. Returns: int: The ISO 8601 week number of the year. date = datetime.date(year, month, day) iso_calendar = date.isocalendar() return iso_calendar[1]"},{"question":"Write a function to check if a given string is a valid IP address. An IP address consists of four decimal numbers, separated by dots, where each number can range from 0 to 255. The function should return \\"Valid IP Address\\" if the string is a valid IP address, and \\"Invalid IP Address\\" if it is not.","solution":"def is_valid_ip(ip): Check if the provided string is a valid IP address. Parameters: - ip (str): The string to be checked. Returns: - str: \\"Valid IP Address\\" if the string is a valid IP address, \\"Invalid IP Address\\" otherwise. parts = ip.split('.') # Proper length check: there must be exactly 4 parts if len(parts) != 4: return \\"Invalid IP Address\\" for part in parts: # Check if each part is an integer and in the range 0-255 if not part.isdigit(): return \\"Invalid IP Address\\" num = int(part) if not (0 <= num <= 255): return \\"Invalid IP Address\\" # Check leading zeros if len(part) > 1 and part[0] == '0': return \\"Invalid IP Address\\" return \\"Valid IP Address\\""},{"question":"Write a function to calculate the nth Fibonacci number, given n is a non-negative integer. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") # Base cases if n == 0: return 0 elif n == 1: return 1 # Starting with the first two numbers of the sequence a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to print out the elements of a linked list","solution":"class ListNode: Definition for a singly-linked list node. def __init__(self, val=0, next=None): self.val = val self.next = next def print_linked_list(head): Prints out the elements of the linked list starting from the head node. current = head elements = [] while current is not None: elements.append(current.val) current = current.next print(\\" -> \\".join(map(str, elements)))"},{"question":"Write a function to convert a given string into a binary string, where each character is represented by 8 bits.","solution":"def string_to_binary(input_string): Converts a given string into a binary string, where each character is represented by 8 bits. Args: input_string (str): The string to be converted. Returns: str: A binary string representation of the input string. return ''.join(format(ord(char), '08b') for char in input_string)"},{"question":"Write a function to find all prime numbers up to a given number using the Sieve of Eratosthenes algorithm. Then, modify this function to find all prime numbers within a given range (start and end).","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False for start in range(2, int(n**0.5) + 1): if primes[start]: for multiple in range(start * start, n + 1, start): primes[multiple] = False return [num for num, is_prime in enumerate(primes) if is_prime] def primes_in_range(start, end): Returns a list of all prime numbers within the range [start, end] using the Sieve of Eratosthenes algorithm. if start > end: return [] all_primes = sieve_of_eratosthenes(end) return [num for num in all_primes if num >= start]"},{"question":"Write a function to generate a random number between 1 and 100 using Python. You should use the \`random\` module for this task.","solution":"import random def generate_random_number(): Returns a random integer between 1 and 100 inclusive. return random.randint(1, 100)"},{"question":"Write a function to calculate the number of ways to reach the nth step in a staircase. Each time you can either climb 1 step or 2 steps. How can this problem be solved using dynamic programming?","solution":"def ways_to_reach_nth_step(n): Returns the number of ways to reach the nth step in a staircase. Each time you can either climb 1 step or 2 steps. :param n: int - the step number to reach :return: int - the number of ways to reach the nth step if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to check if a number is a happy number. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it enters a cycle that does not include 1. If it does enter a cycle that includes 1, then the number is happy.","solution":"def is_happy_number(n): Returns True if n is a happy number, otherwise False. def get_next(number): total_sum = 0 while number > 0: digit = number % 10 total_sum += digit ** 2 number //= 10 return total_sum seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"Write a function to convert a given list of integers into a string where elements are separated by commas and each element is enclosed in double quotes.","solution":"def list_to_quoted_string(lst): Converts a list of integers into a string where elements are separated by commas and each element is enclosed in double quotes. For example: Input: [1, 2, 3] Output: '\\"1\\",\\"2\\",\\"3\\"' :param lst: List of integers :return: A string with quoted and comma-separated integers return ','.join(f'\\"{x}\\"' for x in lst)"},{"question":"Write a function to find the smallest number greater than a given number n that can be evenly divided by m.","solution":"def smallest_divisible(n, m): Returns the smallest number greater than n that can be evenly divided by m. remainder = n % m if remainder == 0: return n + m return n + (m - remainder)"},{"question":"Write a function to generate the nth number in the Fibonacci sequence in Python. The Fibonacci sequence is defined as follows: f(0) = 0, f(1) = 1, and f(n) = f(n-1) + f(n-2) for n > 1.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the third maximum number in an array of integers. If the third maximum does not exist, return the maximum number. For example, given the array \`[2, 2, 3, 1]\`, the function should return \`3\` due to \`3\` being the third distinct maximum number. If the array contains only two distinct numbers such as \`[1, 2]\`, the function should return \`2\` as the third maximum does not exist. Similarly, for the array \`[2, 2, 2]\`, where all elements are the same, the function should return \`2\`.","solution":"def third_max(nums): Returns the third distinct maximum number in the given list of integers. If the third maximum does not exist, returns the maximum number. distinct_nums = list(set(nums)) # Remove duplicates distinct_nums.sort(reverse=True) # Sort in descending order if len(distinct_nums) < 3: return distinct_nums[0] # Return the maximum number return distinct_nums[2] # Return the third maximum number"},{"question":"Write a function to calculate the sum of all the elements in an array. You should handle empty arrays gracefully.","solution":"def sum_array(arr): Returns the sum of all the elements in the array. If the array is empty, returns 0. return sum(arr) if arr else 0"},{"question":"Write a function to calculate the summation of an array of numbers in Python. The function should take in an array of integers and return the sum of all the integers in the array.","solution":"def array_sum(arr): Returns the sum of all integers in the array. Parameters: arr (list): A list of integers. Returns: int: The sum of all integers in the list. return sum(arr)"},{"question":"Write a function to find the first non-repeating character in a string. Can you provide an example code in Python?","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns None. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a function to generate and return all subsets of a given set.","solution":"def generate_subsets(s): Generate all subsets of the given set. :param s: list or set :return: list of sets s = list(s) n = len(s) subsets = [] # Use bit manipulation to generate all possible subsets for i in range(2**n): subset = set() for j in range(n): if i & (1 << j): subset.add(s[j]) subsets.append(subset) return subsets"},{"question":"Write a function to integrate a polynomial function represented by a list of coefficients. The input is a list of integers where the index represents the power of x (0 for constant term, 1 for x, 2 for x^2, etc.), and the value at each index represents the coefficient of that term. The function should return a list of integers representing the coefficients of the integrated function. The constant of integration will be 0.","solution":"def integrate_polynomial(coeffs): Integrates a polynomial represented by a list of coefficients. Parameters: coeffs (list of int): List of coefficients where the index represents the power of x. Returns: List of int: List of coefficients of the integrated polynomial with a constant of integration being 0. integrated_coeffs = [0] # Integration constant C = 0 for i, coeff in enumerate(coeffs): integrated_coeffs.append(coeff / (i + 1)) return integrated_coeffs"},{"question":"Write a function to calculate the sum of all elements in a 2D list (matrix) and return the sum.","solution":"def sum_matrix(matrix): Calculate the sum of all elements in a 2D list (matrix) and return the sum. Parameters: matrix (list of list of int): The 2D list (matrix) whose elements need to be summed up. Returns: int: The sum of all elements in the matrix. return sum(sum(row) for row in matrix)"},{"question":"Write a function to remove duplicates from a given array of integers. The function should return a new array with unique elements, preserving the original order of the array.","solution":"def remove_duplicates(arr): Removes duplicates from the given array while preserving the order. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function to find the first non-repeating character in a given string. If there is no such character, return an underscore ('_') instead. The function should have a time complexity of O(n), where n is the length of the string. Additionally, the function should not use any additional data structures like dictionaries, lists, or sets.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If no such character exists, returns '_'. seen_once = set() seen_multiple = set() for c in s: if c in seen_once: seen_multiple.add(c) else: seen_once.add(c) for c in s: if c not in seen_multiple: return c return '_'"},{"question":"Write a function to check if all characters in a given string are distinct.","solution":"def all_characters_distinct(s): Returns True if all characters in the string s are distinct, False otherwise. return len(set(s)) == len(s)"},{"question":"Write a function to calculate the total length of a given string. The function should take a string as input and return the total length of the string, not including any spaces.","solution":"def total_length_no_spaces(s): Returns the total length of the string without counting spaces. return len(s.replace(\\" \\", \\"\\"))"},{"question":"Write a function to determine whether a binary tree is a valid min-heap. A binary tree is a valid min-heap if for every node, the value of the node is less than or equal to the values of its children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_min_heap(root): Determines whether a binary tree is a valid min-heap. Args: root (TreeNode): The root node of the binary tree. Returns: bool: True if the binary tree is a valid min-heap, False otherwise. if root is None: return True if root.left and root.value > root.left.value: return False if root.right and root.value > root.right.value: return False return is_min_heap(root.left) and is_min_heap(root.right)"},{"question":"Write a function to check if a binary tree is a mirror of itself (i.e., a palindrome). A binary tree is a palindrome if the sequence of values from the tree when read from left to right and from right to left are identical.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_mirror_tree(root): Returns True if the binary tree is a mirror of itself (i.e., a palindrome). if not root: return True return is_mirror(root.left, root.right) def is_mirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val) and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)"},{"question":"Write a function to count the number of words in a string \`s\`. A word is defined as a sequence of characters separated by spaces. The function should return the total number of words in the string.","solution":"def count_words(s): Returns the number of words in the string s. A word is defined as a sequence of characters separated by spaces. # Split the string by spaces and filter out any empty strings words = [word for word in s.split(' ') if word] return len(words)"},{"question":"Write a function to find the maximum number of balls that can be picked from two bins, given a maximum number of balls that can be picked from each bin. Each bin has a certain number of balls, and you can pick up to the maximum allowed from each bin. You cannot pick more balls than are available in the bins.","solution":"def max_balls_picked(balls_in_bin1, balls_in_bin2, max_pick_bin1, max_pick_bin2): Returns the maximum number of balls that can be picked from two bins. # Calculate the number of balls picked from each bin picked_from_bin1 = min(balls_in_bin1, max_pick_bin1) picked_from_bin2 = min(balls_in_bin2, max_pick_bin2) # Return the total number of balls picked return picked_from_bin1 + picked_from_bin2"},{"question":"Write a function to remove all occurrences of a given values from an array. For example, given the array \`[1, 2, 3, 3, 4]\` and the value \`3\`, the function should return \`[1, 2, 4]\`.","solution":"def remove_occurrences(arr, value): Remove all occurrences of the given value from the array. Parameters: arr (list): The array from which to remove occurrences. value (any): The value to remove from the array. Returns: list: A new array with the value removed. return [x for x in arr if x != value]"},{"question":"Write a function to check if a string contains a valid permutation of a given substring. A valid permutation is defined as a substring within the main string that contains all the characters of the given substring with the same frequency. For example, in the string \\"abcabc\\", a valid permutation of \\"abc\\" is \\"abc\\" or \\"bca\\" or \\"cab\\", etc.","solution":"from collections import Counter def contains_permutation(main_str, sub_str): Check if the main string contains any permutation of the given substring. Args: main_str (str): The main string. sub_str (str): The substring to find permutations of. Returns: bool: True if there's a valid permutation of sub_str in main_str, otherwise False. len_sub_str = len(sub_str) sub_counter = Counter(sub_str) window_counter = Counter(main_str[:len_sub_str]) if sub_counter == window_counter: return True for i in range(len_sub_str, len(main_str)): start_char = main_str[i - len_sub_str] end_char = main_str[i] window_counter[end_char] += 1 window_counter[start_char] -= 1 if window_counter[start_char] == 0: del window_counter[start_char] if window_counter == sub_counter: return True return False"},{"question":"Write a function to reverse a string in Python. Given the string \\"hello world\\", the function should return \\"dlrow olleh\\". Write a simple test case to check if the function works correctly.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to calculate the best fit line given a set of points. The line equation should be in the standard form y = mx + c.","solution":"def best_fit_line(points): Calculates the best fit line y = mx + c for a given set of points. Args: points (list of tuples): A list of 2D points (x, y). Returns: tuple: A tuple (m, c) where y = mx + c is the best fit line. n = len(points) if n == 0: raise ValueError(\\"No points provided\\") sum_x = sum(point[0] for point in points) sum_y = sum(point[1] for point in points) sum_x_squared = sum(point[0]**2 for point in points) sum_xy = sum(point[0] * point[1] for point in points) denominator = n * sum_x_squared - sum_x**2 if denominator == 0: raise ValueError(\\"Denominator is zero, cannot calculate best fit line\\") m = (n * sum_xy - sum_x * sum_y) / denominator c = (sum_y * sum_x_squared - sum_x * sum_xy) / denominator return m, c"},{"question":"Write a function to calculate the sum of numbers from 1 to n using recursion in Python. The function should take two parameters: an integer \`n\` and an optional parameter \`current_sum\` which defaults to 0. The function should return the total sum of numbers from 1 to n.","solution":"def sum_to_n(n, current_sum=0): Returns the sum of numbers from 1 to n using recursion. Args: - n (int): The number up to which to calculate the sum. - current_sum (int, optional): Intermediate sum during recursion, defaults to 0. Returns: - int: The total sum from 1 to n. if n <= 0: return current_sum else: return sum_to_n(n - 1, current_sum + n)"},{"question":"Write a function to generate a series of Fibonacci numbers within a given range [m, n]. The function should take two arguments, \`m\` and \`n\`, and return a list of Fibonacci numbers that fall within the range, inclusive.","solution":"def fibonacci_in_range(m, n): Returns a list of Fibonacci numbers within the given range [m, n], inclusive. Parameters: m (int): Lower bound of the range. n (int): Upper bound of the range. Returns: list: List of Fibonacci numbers within the specified range. if m > n: return [] fib_series = [] a, b = 0, 1 while a <= n: if a >= m: fib_series.append(a) a, b = b, a + b return fib_series"},{"question":"Write a function to reverse a linked list in-place without using any additional data structures.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list in-place and returns the new head of the list. previous = None current = head while current: next_node = current.next current.next = previous previous = current current = next_node return previous"},{"question":"Write a function to determine the nth Fibonacci number in Python. The function should be efficient and avoid the exponential time complexity of a naive recursive approach. Consider using dynamic programming to achieve this.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib[-1]"},{"question":"Write a function to generate the nth Fibonacci number using memoization. The function should be efficient and avoid recalculating Fibonacci numbers that have already been computed.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization for efficiency. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to reverse a sequence of words and output them. Here each word is separated by a space. The input will be a string containing the words, and the output should keep the original order of the words but reverse the characters in each word.","solution":"def reverse_words(sentence): Reverses the characters in each word of the sentence. Parameters: sentence (str): Input string with a sequence of words. Returns: str: Output string with characters of each word reversed, maintaining the original word order. words = sentence.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to generate a list of Fibonacci numbers up to a given limit. The function should also return a count of even numbers within this range of Fibonacci numbers.","solution":"def fibonacci_with_even_count(limit): Generates a list of Fibonacci numbers up to the given limit and returns a tuple of the list and the count of even numbers in the list. Args: limit (int): The upper limit for the Fibonacci sequence (inclusive). Returns: tuple: A tuple containing the list of Fibonacci numbers and the count of even numbers in the list. if limit < 0: return ([], 0) fib_list = [] a, b = 0, 1 while a <= limit: fib_list.append(a) a, b = b, a + b even_count = sum(1 for x in fib_list if x % 2 == 0) return (fib_list, even_count)"},{"question":"Write a function to detect if a given string has all unique characters. The function should return \`True\` if all characters in the string are unique, and \`False\` otherwise. Assume the string only contains printable ASCII characters.","solution":"def has_unique_chars(s): Returns True if the string has all unique characters, otherwise False. return len(set(s)) == len(s)"},{"question":"Write a function to find the height of a binary tree. The height of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_height(root): Returns the height of the binary tree. Height is defined as the number of nodes along the longest path from the root to the farthest leaf node. if root is None: return 0 else: left_height = find_height(root.left) right_height = find_height(root.right) return max(left_height, right_height) + 1"},{"question":"Write a function to calculate the factorial of a number in Python, but handle large numbers efficiently. For large numbers, standard factorial functions might run into stack overflow or memory issues. Consider using Python's built-in capabilities to handle large integers.","solution":"def factorial(n): Returns the factorial of a given number \`n\`. Uses an iterative approach to handle large numbers efficiently. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the mean of an array of numbers, but exclude any numbers that are outside a specified range, say between 10 and 20 (inclusive).","solution":"def calculate_mean_in_range(numbers, low, high): Calculate the mean of numbers within the inclusive range [low, high]. :param numbers: List of numbers to calculate the mean from. :param low: Lower bound of the range. :param high: Upper bound of the range. :return: Mean of numbers within the specified range, or None if no numbers are in the range. filtered_numbers = [num for num in numbers if low <= num <= high] if len(filtered_numbers) == 0: return None return sum(filtered_numbers) / len(filtered_numbers)"},{"question":"Write a function to calculate the sum of the squares of the first n natural numbers. Many people use the formula (n * (n + 1) * (2 * n + 1)) / 6 to calculate this. Implement this formula in a function named \`sum_of_squares\`.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers using the formula: (n * (n + 1) * (2 * n + 1)) / 6 Parameters: n (int): The number of natural numbers to include in the sum. Returns: int: The sum of the squares of the first n natural numbers. return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"Write a function to check if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\". Ensure your function handles both uppercase and lowercase letters, and ignore spaces and punctuation. For example, \\"A man, a plan, a canal, Panama\\" should be considered a palindrome.","solution":"import re def is_palindrome(s): Checks if a given string is a palindrome. Handles both uppercase and lowercase letters, ignoring spaces and punctuation. clean_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() return clean_s == clean_s[::-1]"},{"question":"Write a function to find the maximum sum of a subarray with a minimum length of 1 within a given array of integers. The function should return an integer representing the maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray with a minimum length of 1 within the given array of integers. Uses Kadane's algorithm. if not arr: raise ValueError(\\"The input array must not be empty\\") current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to solve the 0/1 Knapsack problem in Python. The function should take two lists: one representing the weights of items and the other representing the corresponding values, and two integers representing the capacity of the knapsack and the number of items. The function should return the maximum value that can be put in the knapsack without exceeding its capacity.","solution":"def knapsack(weights, values, capacity, n): Solves the 0/1 Knapsack problem. :param weights: List of weights of the items. :param values: List of values of the items. :param capacity: Capacity of the knapsack. :param n: Number of items. :return: Maximum value that can be put in the knapsack. dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a function to sort an array of integers in ascending order using the merge sort algorithm. In this function, handle edge cases and ensure the function is generic in terms of integers.","solution":"def merge_sort(arr): Sorts an array of integers in ascending order using the merge sort algorithm. if len(arr) <= 1: return arr def merge(left, right): Merges two sorted lists into one sorted list. merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # Append remaining elements merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"Write a function to convert a string to a list of integers, where each integer is the Unicode code point value of the character in the string.","solution":"def string_to_unicode_list(s): Convert a string to a list of integers, where each integer is the Unicode code point value of the character in the string. :param s: The input string. :return: A list of integers representing the Unicode code point values of the characters in the string. return [ord(char) for char in s]"},{"question":"Write a function to implement a simple Caesar Cipher in Python. The function should take a string and an integer as arguments and output the encrypted string using the Caesar Cipher method. Note that the function should be case-insensitive and handle both alphabets and spaces.","solution":"def caesar_cipher(text, shift): Encrypts the input text using the Caesar cipher method with a given shift. Parameters: text (str): The input string to be encrypted. shift (int): The number of positions each character in the text is shifted. Returns: str: The encrypted string. encrypted_text = [] shift = shift % 26 # to handle cases where the shift is greater than 26 for char in text: if char.isalpha(): shifted = ord(char.lower()) + shift if shifted > ord('z'): shifted -= 26 encrypted_text.append(chr(shifted)) else: encrypted_text.append(char) return \\"\\".join(encrypted_text)"},{"question":"Write a function to identify the largest palindrome number within a given range. A palindrome number is a number that remains the same when its digits are reversed. For example, 12321 is a palindrome number. The function should return the largest palindrome number found within the range from 100 to 999. If no palindrome is found, return -1.","solution":"def largest_palindrome_in_range(start, end): Returns the largest palindrome number within the given range [start, end]. If no palindrome is found, returns -1. def is_palindrome(n): return str(n) == str(n)[::-1] largest_palindrome = -1 for num in range(end, start - 1, -1): if is_palindrome(num) and num > largest_palindrome: largest_palindrome = num return largest_palindrome # Finding the largest palindrome within the range 100 to 999 result = largest_palindrome_in_range(100, 999)"},{"question":"Write a function to find the single number in a non-empty array of integers where every other number appears exactly twice. The function should return the single number.","solution":"def single_number(nums): Returns the single number in the array where every other number appears exactly twice. single = 0 for num in nums: single ^= num return single"},{"question":"Write a function to count how many prime numbers are there in a given range [start, end] using the Sieve of Eratosthenes algorithm.","solution":"def count_primes_sieve_of_eratosthenes(start, end): Returns the number of prime numbers in the range [start, end] using the Sieve of Eratosthenes algorithm. if start > end: return 0 # Create a boolean array and initialize all entries as true sieve = [True] * (end + 1) sieve[0] = sieve[1] = False # Implement Sieve of Eratosthenes p = 2 while (p * p <= end): if sieve[p] == True: for i in range(p * p, end + 1, p): sieve[i] = False p += 1 # Count and return the primes in the specified range prime_count = sum(1 for i in range(start, end + 1) if sieve[i]) return prime_count"},{"question":"Write a function to generate a Fibonacci sequence up to a specified number of terms, where each term is the sum of the two preceding ones. The function should take one parameter, which is the number of terms to generate.","solution":"def generate_fibonacci(n): Generate a Fibonacci sequence up to n terms. Parameters: n (int): The number of terms to generate. Returns: list: A list containing the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci_sequence = [0, 1] for i in range(2, n): next_term = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_term) return fibonacci_sequence"},{"question":"Write a function to remove all the even integers from a list and return the resulting list. Write a function in Python.","solution":"def remove_even_numbers(lst): Removes all even numbers from the given list. Args: lst (list): A list of integers. Returns: list: A list with all even integers removed. return [num for num in lst if num % 2 != 0]"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth number using recursion in Python. The function should be optimized to handle large inputs efficiently.","solution":"def fibonacci(n, memo = {}): Returns the nth Fibonacci number using a recursive approach with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to find the maximum sum of a subarray within a one-dimensional array of numbers. For example, given the array \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the function should return \`6\`, as the subarray \`[4, -1, 2, 1]\` has the maximum sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within a one-dimensional array of numbers. if not nums: return 0 current_max = overall_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) overall_max = max(overall_max, current_max) return overall_max"},{"question":"Write a function to determine whether a number is Fibonacci number or not. A Fibonacci number is one that appears in the Fibonacci sequence, where each number after the first two (0 and 1) is the sum of the two preceding ones. Additionally, check for the fact that a Fibonacci number square is also a Fibonacci number.","solution":"def is_fibonacci_number(num): Check if a number is a Fibonacci number. def is_perfect_square(x): s = int(x**0.5) return s*s == x if num < 0: return False # A number is a Fibonacci number if and only if one (or both) of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square return is_perfect_square(5*num*num + 4) or is_perfect_square(5*num*num - 4) def is_fibonacci_square(fib_num): Check if a Fibonacci number's square is also a Fibonacci number. if not is_fibonacci_number(fib_num): return False return is_fibonacci_number(fib_num ** 2)"},{"question":"Write a function to find the majority element in an array, using a divide-and-conquer algorithm. The majority element is defined as the element that appears more than ⌊n / 2⌋ times in the array, where n is the size of the array. The function should return the majority element if it exists, otherwise, it should return -1.","solution":"def find_majority_element(nums): def majority_element_rec(start, end): # Base case: only one element if start == end: return nums[start] mid = (start + end) // 2 left_major = majority_element_rec(start, mid) right_major = majority_element_rec(mid + 1, end) # If both sides have the same majority element, return it if left_major == right_major: return left_major # Otherwise, count each element and return the one that appears more frequently left_count = sum(1 for i in range(start, end + 1) if nums[i] == left_major) right_count = sum(1 for i in range(start, end + 1) if nums[i] == right_major) return left_count if left_count > right_count else right_major n = len(nums) if n == 0: return -1 candidate = majority_element_rec(0, n - 1) # Verify if the candidate is indeed a majority element count = sum(1 for num in nums if num == candidate) return candidate if count > n // 2 else -1"},{"question":"Write a function to convert an integer to its hexadecimal representation without using any built-in functions like toHexString(). You should also handle negative integers by converting them to their 32-bit signed integer format first. Assume integer wrap-around for negative numbers.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal representation. Handles negative integers by converting them to 32-bit signed integer format. Args: n (int): the integer to convert. Returns: str: the hexadecimal representation of the integer. if n == 0: return \\"0\\" # For negative integers, convert to 32-bit signed equivalent if n < 0: n = (1 << 32) + n hex_chars = \\"0123456789abcdef\\" hex_string = \\"\\" while n > 0: hex_string = hex_chars[n % 16] + hex_string n = n // 16 return hex_string"},{"question":"Write a function to implement the Collatz conjecture. The function should take an integer as input and return the number of steps it takes to reach 1. The Collatz conjecture involves repeatedly applying the following operation to a number: if the number is even, divide it by 2; if the number is odd, multiply it by 3 and add 1. Repeat this process until the number reaches 1.","solution":"def collatz_steps(n): Returns the number of steps it takes to reach 1 using the Collatz conjecture operations. steps = 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 steps += 1 return steps"},{"question":"Write a function to implement the breadth-first search (BFS) algorithm to traverse a binary tree and print all the nodes at a given level k. Here's the structure of the binary tree node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def bfs_at_level_k(root, k): Perform a BFS traversal of the binary tree and return the values of nodes at level k. if root is None: return [] queue = [(root, 0)] result = [] while queue: node, level = queue.pop(0) if level == k: result.append(node.value) if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return result"},{"question":"Write a function to save an image to a file system and return the path of the saved image.","solution":"import os from PIL import Image def save_image(image: Image.Image, save_directory: str, image_name: str) -> str: Saves the given image to the specified directory with the given name. Parameters: image (PIL.Image.Image): The image to save. save_directory (str): The directory where the image should be saved. image_name (str): The name for the saved image file. Returns: str: The path to the saved image. if not os.path.exists(save_directory): os.makedirs(save_directory) image_path = os.path.join(save_directory, image_name) image.save(image_path) return image_path"},{"question":"Write a function to create a list of permutations of a given list. The function should take a single argument, \`data\`, which is a list of elements. The function should return a list of all permutations of \`data\`. A permutation is an arrangement of elements in a specific order. For example, if \`[1,2,3]\` is the input, the function should return \`[[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]]\`.","solution":"from itertools import permutations def list_permutations(data): Returns a list of all permutations of the input list \`data\`. return list(map(list, permutations(data)))"},{"question":"Write a function to find the maximum element in a list using a for loop. I am expecting a solution written in Python.","solution":"def find_max_element(lst): Returns the maximum element in a list using a for loop. If the list is empty, returns None. if not lst: return None max_element = lst[0] for element in lst[1:]: if element > max_element: max_element = element return max_element"},{"question":"Write a function to find the maximum number in a list using recursion. The function should take a list of numbers as input and return the maximum number found in the list. If the list is empty, the function should return \`None\`.","solution":"def find_max_recursive(nums): Finds the maximum number in a list using recursion. Parameters: nums (list): List of numbers Returns: int/float/None: Maximum number in the list or None if the list is empty # Base case: if the list is empty, return None if not nums: return None # Base case: if the list has only one element, return that element if len(nums) == 1: return nums[0] # Recursive case: find the maximum between the first element and # the maximum of the rest of the list current_num = nums[0] max_of_remaining = find_max_recursive(nums[1:]) if max_of_remaining is None or current_num > max_of_remaining: return current_num else: return max_of_remaining"},{"question":"Write a function to check if a binary tree is height-balanced. A binary tree is considered height-balanced if for every node in the tree, the height difference between the left and right subtree is no more than 1. Implement the function \`isBalanced\` and provide a test function \`testIsBalanced\` to verify its correctness.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): Determine if the binary tree is height-balanced. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = 1 + max(left_height, right_height) is_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, is_balanced return check_height(root)[1]"},{"question":"Write a function to calculate the factorial of a number using a loop in Python. The function should take one parameter, \`n\`, which represents the number to calculate the factorial for. Ensure that the function handles the case where \`n\` is zero or negative, as the factorial is not defined for these values. The function should return the factorial of \`n\` if \`n\` is a non-negative integer, and an appropriate error message for any other input.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n using a loop. Args: n (int): The integer to calculate the factorial for. Returns: int or str: The factorial of n if n is non-negative, otherwise an error message. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to count the number of bits that are set (i.e., have the value 1) in the binary representation of a non-negative integer. This is also known as the Hamming Weight or the number of 1 bits.","solution":"def count_set_bits(n): Returns the number of bits that are set (i.e., have the value 1) in the binary representation of a non-negative integer n. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a function to sort an array of numbers in ascending order using the radix sort algorithm. The function should take an array as an argument and return the sorted array. Additionally, describe the time complexity of the radix sort algorithm.","solution":"def radix_sort(arr): Sorts an array of integers in ascending order using the radix sort algorithm. if not arr: return [] # Find the maximum number to figure out the number of digits max_num = max(arr) # Implement counting sort for each digit. Exponent grows as 10^0, 10^1, 10^2, ... exp = 1 while max_num // exp > 0: counting_sort(arr, exp) exp *= 10 return arr def counting_sort(arr, exp): A helper function to perform counting sort based on digit represented by exp. n = len(arr) output = [0] * n # The output array elements that will have sorted arr count = [0] * 10 # There are 10 possible digits (0 to 9) # Store count of occurrences in count[] for i in range(n): index = arr[i] // exp count[index % 10] += 1 # Change count[i] so that it contains actual position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = arr[i] // exp output[count[index % 10] - 1] = arr[i] count[index % 10] -= 1 # Copy the output array to arr[], so that arr now contains sorted numbers for i in range(n): arr[i] = output[i] # Time Complexity: # For radix sort, the time complexity is O(d*(n+k)), where: # - n is the number of elements in the input array # - d is the number of digits in the largest number # - k is the range of digits (0 to 9) # In most cases, this can be simplified to O(n*k) since d is relatively small compared to n."},{"question":"Write a function to perform a merge sort on an array.","solution":"def merge_sort(arr): Perform a merge sort on an array. if len(arr) <= 1: return arr # Split the array into two halves mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively split and merge the halves left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merge two sorted arrays into one sorted array. result = [] i = j = 0 # Merge while there are elements in both arrays while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Append any remaining elements result.extend(left[i:]) result.extend(right[j:]) return result"},{"question":"Write a function to calculate the number of ways to represent a given number n as the sum of positive integers. The function should use dynamic programming to improve efficiency.","solution":"def count_ways_to_sum(n): Calculates the number of ways to represent a given number n as the sum of positive integers. Uses dynamic programming for efficiency. if n <= 0: return 0 # dp[i] will be storing the number of ways to get sum i dp = [0] * (n + 1) # Base case: there is exactly 1 way to get sum 0 (by having no elements) dp[0] = 1 # Iterate from 1 to n and calculate the number of ways to get each sum for i in range(1, n + 1): for j in range(i, n + 1): dp[j] += dp[j - i] return dp[n]"},{"question":"Write a function to convert a list of tuples into a dictionary. Each tuple contains a key and a value. The function should handle cases where there are duplicate keys by keeping only the last occurrence of the key-value pair.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary. If there are duplicate keys, only the last occurrence of the key-value pair is kept. Parameters: tuples_list (list): A list of tuples where each tuple contains a key and a value. Returns: dict: A dictionary representation of the list of tuples. output_dict = {} for key, value in tuples_list: output_dict[key] = value return output_dict"},{"question":"Write a function to reverse the string \\"Hello, world!\\" in Python. Here is what the function should return: \\"dlrow ,olleH\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Example usage: # reverse_string(\\"Hello, world!\\") should return \\"dlrow ,olleH\\""},{"question":"Write a function to calculate the vertex of a parabola given its quadratic equation ax^2 + bx + c. The formula to find the vertex is V = (-b/(2a), (4ac - b^2)/(4a)). If the equation is linear or constant (a = 0), it should return an error message.","solution":"def find_vertex(a, b, c): Returns the vertex of a parabola given the quadratic equation ax^2 + bx + c. Parameters: a (int or float): coefficient of x^2 b (int or float): coefficient of x c (int or float): constant term Returns: tuple: vertex of the parabola in the form (h, k) Raises ValueError if the equation is linear or constant (a = 0). if a == 0: raise ValueError(\\"The equation is linear or constant (a = 0), not a quadratic equation.\\") h = -b / (2 * a) k = (4 * a * c - b ** 2) / (4 * a) return (h, k)"},{"question":"Write a function to generate all possible combinations of k numbers out of n numbers from 1 to n. For example, if n = 4 and k = 2, the combinations are: [1,2], [1,3], [1,4], [2,3], [2,4], [3,4]. How can I solve this problem in Python?","solution":"from itertools import combinations def generate_combinations(n, k): Generates all possible combinations of k numbers out of n numbers from 1 to n. :param n: Total number of elements. :param k: Number of elements in each combination. :return: List of all combinations. return list(combinations(range(1, n + 1), k))"},{"question":"Write a function to count the number of unique elements in an array using Python. All elements in the array are integers.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the array. Parameters: arr (list): The list of integers. Returns: int: The number of unique elements in the list. return len(set(arr))"},{"question":"Write a function to reverse a string in Python. You should not use any built-in functions or libraries for reversing a string. Your function should take a single string as input and return the reversed string.","solution":"def reverse_string(s): Reverses the given string without using any built-in functions or libraries for reversing. :param s: Input string :return: Reversed string reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to identify all prime numbers within a given range. The function should return a list of prime numbers that are greater than or equal to the start of the range and less than the end of the range. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first few prime numbers are 2, 3, 5, 7, 11, etc. If the start of the range is greater than or equal to the end, return an empty list. For instance, given the range of 2 to 25, the function should return [2, 3, 5, 7, 11, 13, 17, 19, 23].","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Returns a list of prime numbers in the range [start, end). if start >= end: return [] primes = [] for num in range(start, end): if is_prime(num): primes.append(num) return primes"},{"question":"Write a function to calculate the maximum area of a rectangle given the lengths of its two sides.","solution":"def max_rectangle_area(length, width): Returns the maximum area of a rectangle given the lengths of its two sides. return length * width"},{"question":"Write a function to compute the factorial of a given number \`n\`. The function should handle both positive and negative inputs, and validate whether \`n\` is an integer. If the input is invalid, the function should raise an appropriate exception.","solution":"def factorial(n): Returns the factorial of the given number n. If n is negative, raises a ValueError. If n is not an integer, raises a TypeError. if not isinstance(n, int): raise TypeError(\\"n must be an integer\\") if n < 0: raise ValueError(\\"n must be non-negative\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to display the first n terms of the Fibonacci sequence using Python.","solution":"def fibonacci(n): Returns the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function to design a stack with operations push(x), pop(), top(), and empty() which supports getting minimum element in constant time.","solution":"class MinStack: def __init__(self): Initializes the stack. self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Pushes element x onto stack. self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the element on the top of the stack. popped = self.stack.pop() if popped == self.min_stack[-1]: self.min_stack.pop() def top(self) -> int: Gets the top element of the stack. return self.stack[-1] def empty(self) -> bool: Returns whether the stack is empty. return len(self.stack) == 0 def get_min(self) -> int: Retrieves the minimum element in the stack. return self.min_stack[-1]"},{"question":"Write a function to find the minimum of three numbers using both functional and procedural programming paradigms in Python.","solution":"def min_of_three_functional(a, b, c): Returns the minimum of three numbers using a functional programming paradigm. return min(a, b, c) def min_of_three_procedural(a, b, c): Returns the minimum of three numbers using a procedural programming paradigm. if a <= b and a <= c: return a elif b <= a and b <= c: return b else: return c"},{"question":"Write a function to implement ASCII values for lowercase alphabets.","solution":"def ascii_lowercase(): Returns a dictionary with lowercase alphabets as keys and their corresponding ASCII values as values. return {chr(c): c for c in range(ord('a'), ord('z') + 1)}"},{"question":"Write a function to return all possible interleavings of two strings. An interleaving of two strings is a string that contains all characters from both strings, with no characters in between them, but possibly with their order altered.","solution":"def interleave(str1, str2): Return all possible interleavings of two strings. def generate_interleavings(s1, s2, path, result): if not s1 and not s2: result.append(path) return if s1: generate_interleavings(s1[1:], s2, path + s1[0], result) if s2: generate_interleavings(s1, s2[1:], path + s2[0], result) result = [] generate_interleavings(str1, str2, \\"\\", result) return result"},{"question":"Write a function to calculate the factorial of a number. The function should handle the case of 0! = 1 as well. The function should also check if the input is a non-negative integer before proceeding to calculate the factorial. If the input is invalid, the function should return an error message.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If the input is invalid, returns an error message. if not isinstance(n, int) or n < 0: return \\"Error: Input must be a non-negative integer.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to determine if a given string ends with a specific suffix.","solution":"def ends_with(string, suffix): Returns True if string ends with the given suffix, False otherwise. return string.endswith(suffix)"},{"question":"Write a function to generate all permutations of an input list of unique numbers. For example, given a list \`[1, 2, 3]\`, the function should return \`[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\`.","solution":"def generate_permutations(nums): Generates all permutations of the input list of unique numbers. :param nums: List of unique numbers :return: List of permutations, where each permutation is a list if len(nums) == 0: return [[]] result = [] for i in range(len(nums)): first = nums[i] remaining = nums[:i] + nums[i+1:] for p in generate_permutations(remaining): result.append([first] + p) return result"},{"question":"Write a function to find the binary representation of a given decimal number and return it as a string.","solution":"def decimal_to_binary(n): Returns the binary representation of a given decimal number n as a string. if n == 0: return \\"0\\" binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 return binary_str"},{"question":"Write a function to generate a frequency table from a given list of data values.","solution":"def frequency_table(data): Generates a frequency table from the given list of data values. Parameters: data (list): A list of data values Returns: dict: A dictionary where keys are unique data values and values are their frequencies freq_table = {} for value in data: if value in freq_table: freq_table[value] += 1 else: freq_table[value] = 1 return freq_table"},{"question":"Write a function to print out the numbers from 1 to N using a recursive function in Python.","solution":"def print_numbers_recursive(n, current=1): Prints numbers from 1 to n recursively. :param n: The upper limit of numbers to print. :param current: The current number being printed. Defaults to 1. if current > n: return print(current) print_numbers_recursive(n, current + 1)"},{"question":"Write a function to find the average score of a list of student scores.","solution":"def average_score(scores): Returns the average score from a list of scores. if not scores: return 0 return sum(scores) / len(scores)"},{"question":"Write a function to print all the subsets of a given set. Subsets include all possible combinations of the elements in the set. The function should output these subsets as a list of lists, where each list represents a subset.","solution":"def subsets(s): Generate all subsets of a given set s. Args: s (set): The input set. Returns: list of list: All subsets of the input set. def backtrack(start, path): # Append the current subset (path) result.append(path[:]) for i in range(start, len(s)): # Include s[i] into the current subset path.append(s[i]) # Move forward to the next element backtrack(i + 1, path) # Exclude s[i] from the current subset path.pop() # Convert the set to a list to support index-based operations s = list(s) result = [] backtrack(0, []) return result"},{"question":"Write a function to reverse a string without using extra memory. How can I optimize the performance of this function for large strings?","solution":"def reverse_string_in_place(s): Reverses the string s in place without using extra memory. # Convert string to list to allow in-place modifications str_list = list(s) left, right = 0, len(str_list) - 1 # Swap characters from the beginning and end moving towards the center while left < right: str_list[left], str_list[right] = str_list[right], str_list[left] left += 1 right -= 1 return ''.join(str_list)"},{"question":"Write a function to reverse a linked list recursively in Python. The function accepts a head node of a singly linked list and returns the new head of the reversed linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_recursively(head): Reverse a singly linked list recursively. :param head: ListNode, the head node of the singly linked list :return: ListNode, the new head of the reversed linked list if head is None or head.next is None: return head new_head = reverse_linked_list_recursively(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to find the largest number in an array of integers. The function should be able to handle arrays with both positive and negative numbers.","solution":"def find_largest_number(arr): Returns the largest number in an array of integers. Parameters: arr (list): A list of integers. Returns: int: The largest number in the list. if not arr: raise ValueError(\\"Array is empty!\\") largest = arr[0] for num in arr: if num > largest: largest = num return largest"},{"question":"Write a function to print factors of a given integer.","solution":"def print_factors(n): Returns a list of factors of the given integer n. if n == 0: return [] factors = [] for i in range(1, abs(n) + 1): if n % i == 0: factors.append(i) if n < 0: factors = [-f for f in factors] return factors"},{"question":"Write a function to find the first unique element in a list which appearance is only once, and return the index of this element. If there is no unique element, return -1.","solution":"def first_unique_element_index(lst): Returns the index of the first unique element in the list. If there is no unique element, return -1. from collections import Counter # Get the count of all elements element_count = Counter(lst) # Find the first unique element for index, element in enumerate(lst): if element_count[element] == 1: return index return -1"},{"question":"Write a function to reverse a stack using recursion. The stack is represented as a list in Python.","solution":"def reverse_stack(stack): Reverses the stack using recursion. if not stack: return top = stack.pop() reverse_stack(stack) insert_at_bottom(stack, top) def insert_at_bottom(stack, item): Helper function to insert an element at the bottom of the stack. if not stack: stack.append(item) else: top = stack.pop() insert_at_bottom(stack, item) stack.append(top)"},{"question":"Write a function to find and remove duplicates in a list of integers using Python. The function should return a new list with each integer appearing only once.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers. Args: nums: list of integers Returns: list of integers with duplicates removed return list(set(nums))"},{"question":"Write a function to calculate the number of subarrays that have a sum equal to a given target. The array is non-empty and contains non-negative integers.","solution":"def count_subarrays_with_sum(nums, target): Returns the number of subarrays that have a sum equal to the given target. Parameters: nums (List[int]): List of non-negative integers. target (int): The target sum for the subarrays. Returns: int: Number of subarrays that sum up to the target. from collections import defaultdict count = 0 current_sum = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 for num in nums: current_sum += num if current_sum - target in prefix_sums: count += prefix_sums[current_sum - target] prefix_sums[current_sum] += 1 return count"},{"question":"Write a function to find maximum element in a stack.","solution":"class Stack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): if self.stack: value = self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() return value return None def get_max(self): if self.max_stack: return self.max_stack[-1] return None"},{"question":"Write a function to convert an array of integers to a string, where each integer is separated by a comma. For example, the array \`[1, 2, 3]\` should be converted to the string \`\\"1,2,3\\"\`.","solution":"def array_to_string(arr): Converts an array of integers to a string, where each integer is separated by a comma. :param arr: List of integers. :return: A string representation of the array with elements separated by commas. return ','.join(map(str, arr))"},{"question":"Write a function to return a new string where all occurrences of a specified character are replaced with a new specified character in a given string.","solution":"def replace_character(string, old_char, new_char): Returns a new string where all occurrences of old_char are replaced with new_char in the given string. Parameters: string (str): The original string. old_char (str): The character to be replaced. new_char (str): The character to replace with. Returns: str: The new string with replacements. return string.replace(old_char, new_char)"},{"question":"Write a function to determine if a string contains a balanced set of parentheses.","solution":"def is_balanced(s): Returns True if the input string contains a balanced set of parentheses, False otherwise. stack = [] for char in s: if char == '(': stack.append('(') elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to implement a bubble sort in ascending order. Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts an array of numbers in ascending order using bubble sort algorithm. n = len(arr) for i in range(n-1): # Track whether any swaps were made in this iteration swapped = False for j in range(n-1-i): if arr[j] > arr[j+1]: # Swap if elements are in the wrong order arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swaps were made, the array is already sorted if not swapped: break return arr"},{"question":"Write a function to change the color of all pixels within a circular region in a 2D image array. The function should take in the image array, the center of the circle (x and y coordinates), the radius of the circle, and the new color value. The function should then modify the image array in place.","solution":"import numpy as np def change_circle_color(image, x_center, y_center, radius, new_color): Changes the color of all pixels within a circular region in a 2D image array. Args: - image (np.ndarray): The input 2D image array. - x_center (int): x-coordinate of the center of the circle. - y_center (int): y-coordinate of the center of the circle. - radius (int): Radius of the circle. - new_color (int): New color value for the pixels within the circle. This function modifies the image array in place. for x in range(max(0, x_center - radius), min(image.shape[0], x_center + radius + 1)): for y in range(max(0, y_center - radius), min(image.shape[1], y_center + radius + 1)): if (x - x_center)**2 + (y - y_center)**2 <= radius**2: image[x, y] = new_color"},{"question":"Write a function to print a matrix (2D array) in spiral order.","solution":"def spiral_order(matrix): Given a 2D array, return its elements in spiral order. if not matrix or not matrix[0]: return [] spiral = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): spiral.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): spiral.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): spiral.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): spiral.append(matrix[i][left]) left += 1 return spiral"},{"question":"Write a function to convert a given string to a list of ASCII values of its characters.","solution":"def string_to_ascii(s): Converts a string to a list of ASCII values of its characters. :param s: Input string :return: List of ASCII values return [ord(char) for char in s]"},{"question":"Write a function to get all possible subsets of a given set of numbers, using backtracking.","solution":"def subsets(nums): Returns all possible subsets of a given set of numbers using backtracking. result = [] def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Write a function to reverse a linked list. The linked list is represented as \`ListNode\` objects where each object has a \`val\` attribute for the value and a \`next\` attribute pointing to the next node or \`None\` if it's the last node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode, the head of the linked list :return: ListNode, the head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev def linked_list_to_list(head): Converts a linked list to a Python list. :param head: ListNode, the head of the linked list :return: list, elements in the linked list result = [] current = head while current: result.append(current.val) current = current.next return result def list_to_linked_list(values): Converts a Python list to a linked list. :param values: list, elements to be converted into linked list :return: ListNode, the head of the linked list if not values: return None head = ListNode(values[0]) current = head for value in values[1:]: current.next = ListNode(value) current = current.next return head"},{"question":"Write a function to check whether a given string contains balanced parentheses. The function should return \`true\` if the parentheses are balanced and \`false\` otherwise.","solution":"def is_balanced_parentheses(s): Check whether a given string contains balanced parentheses. Args: s (str): Input string containing parentheses. Returns: bool: True if parentheses are balanced, otherwise False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Write a function to get the nth Fibonacci number in Python. The function should be efficient and use memoization to prevent redundant calculations. The function should also handle edge cases, such as negative numbers and input types that are not integers.","solution":"def fib(n, memo={}): Returns the nth Fibonacci number using memoization. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 if n == 1: return 1 if n not in memo: memo[n] = fib(n - 1, memo) + fib(n - 2, memo) return memo[n]"},{"question":"Write a function to reverse the order of elements in a linked list. You should be able to handle lists of various sizes, including empty lists. Malformed lists are not to be tolerated, meaning all inputs should be valid linked lists. If the input is an invalid linked list, the function should return \`None\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the order of elements in a linked list. Parameters: head (ListNode): Head node of the linked list Returns: ListNode: New head node of the reversed linked list if not isinstance(head, ListNode) and head is not None: return None prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to implement the Householder reduction for a real symmetric tridiagonal matrix to an upper Hessenberg form. Householder reduction is a component of many eigenvalue algorithms, including QR and Divide-and-Conquer methods.","solution":"import numpy as np def householder_tridiagonalization(A): Reduces a real symmetric tridiagonal matrix A to an upper Hessenberg form using Householder reduction. Parameters: A (np.ndarray): A real symmetric tridiagonal matrix. Returns: H (np.ndarray): The upper Hessenberg form of the matrix A. n = A.shape[0] H = A.copy() for k in range(n-2): x = H[k+1:, k] e1 = np.zeros_like(x) e1[0] = np.linalg.norm(x) v = x + np.sign(x[0]) * e1 v = v / np.linalg.norm(v) H[k+1:, k:] -= 2.0 * np.outer(v, np.dot(v, H[k+1:, k:])) H[:, k+1:] -= 2.0 * np.outer(np.dot(H[:, k+1:], v), v) return H"},{"question":"Write a function to validate if a given string is a valid IPv4 address. An IPv4 address is a string in the form \\"A.B.C.D\\" where A, B, C, and D are numbers between 0 and 255.","solution":"def is_valid_ipv4_address(ip): Validates if a given string is a valid IPv4 address. An IPv4 address is a string in the form \\"A.B.C.D\\" where A, B, C, and D are numbers between 0 and 255. parts = ip.split('.') # IPv4 address must have exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be a number if not part.isdigit(): return False num = int(part) # Each number must be between 0 and 255 if num < 0 or num > 255: return False return True"},{"question":"Write a function to find the smallest element in an array.","solution":"def find_smallest_element(arr): Returns the smallest element in the array. Parameters: arr (list): A list of numerical values. Returns: int/float: The smallest element in the array. if not arr: raise ValueError(\\"Array must not be empty\\") return min(arr)"},{"question":"Write a function to determine if a binary tree is complete. A binary tree is complete if every level of the tree is completely filled except possibly the last level, and all nodes in the last level are as far left as possible.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isCompleteBinaryTree(root): Returns True if the binary tree is a complete binary tree, else False. if not root: return True queue = deque([root]) end_of_tree = False while queue: node = queue.popleft() if node: if end_of_tree: return False queue.append(node.left) queue.append(node.right) else: end_of_tree = True return True"},{"question":"Write a function to reverse the words in a string. The words in the string are separated by spaces. The function should also trim any leading and trailing spaces from the string, and ensure that there is only one space between words in the reversed string.","solution":"def reverse_words(s: str) -> str: Reverse the words in the string s. Remove leading/trailing spaces and ensure there is only one space between words in the reversed string. words = s.strip().split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to delete duplicate characters in a string without using any additional data structures such as arrays, maps, or sets. The function should manipulate characters in-place if possible, and return the length of the string after removal of duplicate characters. For example, if the input string is \\"programming\\", the function should modify it to \\"progamin\\" and return the length as 9.","solution":"def delete_duplicates(s): Removes duplicate characters from the string s and returns the new length of the string. This function modifies the string in-place. # Convert the input string to a list to allow in-place modifications s = list(s) n = len(s) if n == 0: return 0 write_index = 1 for read_index in range(1, n): char_already_seen = False for j in range(write_index): if s[j] == s[read_index]: char_already_seen = True break if not char_already_seen: s[write_index] = s[read_index] write_index += 1 # Truncate the list to the new length s = s[:write_index] return write_index"},{"question":"Write a function to find the maximum of two numbers and return that number. If they are equal, return an indication that they are equal.","solution":"def max_of_two(a, b): Returns the maximum of two numbers. If the numbers are equal, returns 'Equal'. if a > b: return a elif b > a: return b else: return 'Equal'"},{"question":"Write a function to find the maximum number in a list of integers. If the list is empty, the function should return \`None\`. Here is your list: \`[4, 5, 1, 3]\`","solution":"def find_max_number(lst): Returns the maximum number in a list of integers. If the list is empty, the function returns None. if not lst: return None return max(lst) # Example usage nums = [4, 5, 1, 3] max_number = find_max_number(nums) print(max_number) # Output: 5"},{"question":"Write a function to calculate the depth of a binary tree in Python using recursion. 🌳","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def depth_of_binary_tree(root): Returns the depth of the binary tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. :param root: TreeNode, the root of the binary tree :return: int, the depth of the binary tree if root is None: return 0 else: left_depth = depth_of_binary_tree(root.left) right_depth = depth_of_binary_tree(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to exchange the positions of a given pair of elements in an array. For example, if we have an array of integers like [5, 3, 8, 2] and we are asked to swap the elements at positions 1 and 3, the resulting array should be [5, 2, 8, 3].","solution":"def swap_elements(arr, pos1, pos2): Swaps the elements at the given positions pos1 and pos2 in the array arr. Args: arr (list): The array in which the elements are to be swapped. pos1 (int): The position of the first element to be swapped. pos2 (int): The position of the second element to be swapped. Returns: list: The array with the elements swapped. # Ensure positions are within the array bounds if pos1 < 0 or pos1 >= len(arr) or pos2 < 0 or pos2 >= len(arr): raise IndexError(\\"Position out of array bounds\\") # Swap the elements arr[pos1], arr[pos2] = arr[pos2], arr[pos1] return arr"},{"question":"Write a function to perform matrix multiplication in Python. The function should take two 2D lists (matrices) as input and return the result of their multiplication. If the number of columns in the first matrix does not match the number of rows in the second matrix, the function should raise a ValueError with the message \\"Matrix dimensions do not match\\".","solution":"def matrix_multiply(matrix1, matrix2): Multiply two matrices (2D lists) and return the result as a new matrix. Parameters: matrix1 (list of list of int/float): The first matrix. matrix2 (list of list of int/float): The second matrix. Returns: list of list of int/float: The result of multiplying matrix1 by matrix2. Raises ValueError if dimensions do not match. if not matrix1 or not matrix2 or len(matrix1[0]) != len(matrix2): raise ValueError(\\"Matrix dimensions do not match\\") result_rows = len(matrix1) result_cols = len(matrix2[0]) common_dim = len(matrix2) # Initialize the result matrix with zeros result = [[0 for _ in range(result_cols)] for _ in range(result_rows)] for i in range(result_rows): for j in range(result_cols): for k in range(common_dim): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Write a function to find the maximum area of a rectangle that can be inscribed in a semicircle with radius R. The width of the rectangle is parallel to the base of the semicircle.","solution":"import math def max_rectangle_area_in_semicircle(R): Finds the maximum area of a rectangle that can be inscribed in a semicircle with radius R. Parameters: R (float): Radius of the semicircle Returns: float: Maximum area of the inscribed rectangle return R**2"},{"question":"Write a function to calculate the factorial of a number using recursion. What's the factorial of 5?","solution":"def factorial(n): Returns the factorial of the given number using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: return n * factorial(n-1) # The factorial of 5 factorial_of_5 = factorial(5)"},{"question":"Write a function to check if a given array of integers contains a subarray with a sum that is a multiple of a given integer k. The function should return \`true\` if such a subarray exists, otherwise return \`false\`.","solution":"def check_subarray_sum(nums, k): Function to check if a given array contains a subarray with a sum that is a multiple of k. :param nums: List of integers. :param k: The integer to check the multiple of. :return: True if a subarray sum multiple of k exists, else False. if k == 0: # Special case when k is 0, we need to look for a subarray that sums to 0 for i in range(len(nums) - 1): if nums[i] == 0 and nums[i + 1] == 0: return True return False prefix_sum = 0 mod_map = {0: -1} # to handle the edge case where the subarray starts from the beginning for i, num in enumerate(nums): prefix_sum += num mod = prefix_sum % k if mod in mod_map: if i - mod_map[mod] > 1: return True else: mod_map[mod] = i return False"},{"question":"Write a function to find the maximum subarray sum in a given array of integers. The function should use a divide and conquer approach.","solution":"def max_crossing_sum(arr, left, mid, right): Helper function to find the maximum sum of the crossing subarray. # Include elements on left of mid. left_sum = float('-inf') total = 0 for i in range(mid, left - 1, -1): total += arr[i] if total > left_sum: left_sum = total # Include elements on right of mid. right_sum = float('-inf') total = 0 for i in range(mid + 1, right + 1): total += arr[i] if total > right_sum: right_sum = total # Return sum of elements on left and right of mid. return left_sum + right_sum def max_subarray_sum(arr, left, right): Returns the maximum sum of the subarray using divide and conquer approach. # Base Case: Only one element. if left == right: return arr[left] # Find middle point. mid = (left + right) // 2 return max(max_subarray_sum(arr, left, mid), max_subarray_sum(arr, mid + 1, right), max_crossing_sum(arr, left, mid, right)) def find_maximum_subarray_sum(arr): Wrapper function to find the maximum subarray sum. if not arr: raise ValueError(\\"Array is empty\\") return max_subarray_sum(arr, 0, len(arr) - 1)"},{"question":"Write a function to reverse only the words in a given string, keeping the order of the words intact. For example, given the string \\"Hello world this is a test\\", the function should return \\"olleH dlrow siht si a tset\\".","solution":"def reverse_words_in_string(s): Given a string, reverse each word individually while maintaining their order in the string. Args: s (str): input string Returns: str: string with each word reversed return ' '.join(word[::-1] for word in s.split())"},{"question":"Write a function to solve the minimum window substring problem in Python.","solution":"def min_window(s, t): if not s or not t: return \\"\\" from collections import Counter dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"Write a function to find the common difference in an arithmetic sequence. Three elements of the sequence are provided as inputs.","solution":"def find_common_difference(a, b, c): Given three elements of an arithmetic sequence, this function finds and returns the common difference. # The common difference can be derived using the difference between consecutive elements in sequence return b - a"},{"question":"Write a function to traverse a binary tree in a depth-first manner using recursion.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_traversal(root): Returns the elements of the binary tree in a depth-first manner. def dfs(node, result): if node is not None: result.append(node.value) # Preorder traversal dfs(node.left, result) dfs(node.right, result) return result return dfs(root, [])"},{"question":"Write a function to calculate the nth Fibonacci number in Python using recursion with memoization to improve performance.","solution":"def fibonacci(n, memo = {}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to calculate the sum of all the numerical values in a given list. If the list contains other structures (like nested lists or dictionaries), the function should handle them correctly, calculating the total sum of all numerical values, regardless of how deeply nested they are. The function should also ignore non-numerical values (like strings).","solution":"def sum_nested_values(input_list): Returns the sum of all numerical values in the list, including nested structures. Ignores non-numerical values. def helper(data): total = 0 if isinstance(data, (int, float)): return data if isinstance(data, list): for item in data: total += helper(item) elif isinstance(data, dict): for key, value in data.items(): total += helper(value) return total return helper(input_list)"},{"question":"Write a function to return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Find the indices of the two numbers in the list that add up to the target. Args: nums (list of int): List of integers. target (int): The target sum. Returns: list of int: The indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function to decode a URL-encoded string.","solution":"import urllib.parse def decode_url(encoded_url): Decodes a URL-encoded string. Args: encoded_url (str): The URL-encoded string. Returns: str: The decoded string. return urllib.parse.unquote(encoded_url)"},{"question":"Write a function to calculate the Nth root of a number using Python's native \`math\` library. The function should handle both even and odd roots and return both the real and complex roots if necessary.","solution":"import math def nth_root(number, n): Calculates the Nth root of a number using Python's native \`math\` library. Returns a tuple with both the real and complex roots if necessary. Parameters: number (float): the number to find the Nth root of n (int): the root to calculate Returns: tuple: a tuple containing the real and complex roots if n == 0: raise ValueError(\\"n cannot be 0\\") if number >= 0: # Real root for non-negative numbers real_root = number ** (1 / n) return (real_root,) else: if n % 2 == 0: # Return complex roots for negative numbers and even n real_part = 0 imaginary_part = abs(number) ** (1 / n) return (complex(real_part, imaginary_part), complex(real_part, -imaginary_part)) else: # Real root for negative numbers and odd n real_root = -((-number) ** (1 / n)) return (real_root,)"},{"question":"Write a function to translate all words in a given string to uppercase.","solution":"def to_uppercase(sentence): Translates all words in a given string to uppercase. return sentence.upper()"},{"question":"Write a function to find the sum of all nodes in a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_binary_tree(root): Returns the sum of all nodes in the binary tree. if root is None: return 0 return root.value + sum_of_binary_tree(root.left) + sum_of_binary_tree(root.right)"},{"question":"Write a function to remove duplicates from a string using a stack data structure. The function should take a string as input and return the string with duplicates removed, preserving the order of characters.","solution":"def remove_duplicates(s): Removes duplicates from the input string using a stack data structure, preserving the order of characters. stack = [] seen = set() # To track seen characters for char in s: if char not in seen: stack.append(char) seen.add(char) return ''.join(stack)"},{"question":"Write a function to calculate the maximum number of desks that can fit into a classroom given the classroom dimensions. Each desk has a fixed size of 1x1 meter.","solution":"def max_desks(classroom_length, classroom_width): Returns the maximum number of desks that can fit into a classroom. Each desk has a fixed size of 1x1 meter. Parameters: classroom_length (int): The length of the classroom in meters. classroom_width (int): The width of the classroom in meters. Returns: int: The maximum number of desks that can fit into the classroom. if classroom_length <= 0 or classroom_width <= 0: return 0 # No desks can fit in non-positive dimensions return classroom_length * classroom_width"},{"question":"Write a function to determine if a given string contains a valid URL.","solution":"import re def contains_valid_url(s): Checks if the given string contains a valid URL. :param s: Input string :return: Boolean indicating if the string contains a valid URL url_pattern = re.compile( r'http[s]?://(?:[a-zA-Z]|[0-9]|[-_@.&+]|[!*(),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+' ) return re.search(url_pattern, s) is not None"},{"question":"Write a function to compute the factorial of a non-negative integer and then compute and return the sum of the digits of the resulting factorial. For instance, if the input is 5, the factorial is 120, and the sum of the digits is 3 (1+2+0).","solution":"def factorial_digit_sum(n): Computes the factorial of a non-negative integer n and returns the sum of the digits of the resulting factorial. Parameters: n (int): A non-negative integer Returns: int: Sum of the digits of the factorial of n if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") # Compute factorial factorial = 1 for i in range(2, n + 1): factorial *= i # Compute sum of the digits digit_sum = sum(int(digit) for digit in str(factorial)) return digit_sum"},{"question":"Write a function to find the maximum profit in a stock market given a list of prices of a stock for several days. However, you are not allowed to buy a stock on the same day you sell it, and you cannot sell a stock before you buy one.","solution":"def max_profit(prices): Returns the maximum profit from buying and then selling the stock. :param prices: List of stock prices. :return: Maximum profit possible. if not prices or len(prices) < 2: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to generate all subsets of a given set of integers. The function should take an array of integers as input and return a list of lists, where each inner list represents a unique subset of the input array.","solution":"def generate_subsets(nums): Generates all subsets of a given set of integers. :param nums: List[int] - list of integers :return: List[List[int]] - list of all subsets result = [] subset = [] def backtrack(start): result.append(subset[:]) for i in range(start, len(nums)): subset.append(nums[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"Write a function to convert a string to a float in Python.","solution":"def string_to_float(s): Converts a string to a float. Parameters: s (str): The string to convert to a float. Returns: float: The converted float value. Raises: ValueError: If the string cannot be converted to a float. return float(s)"},{"question":"Write a function to search a given number in a sorted array. The function should return the index of the given number if it is present in the array, otherwise, it should return -1.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of a target number. :param arr: List[int], sorted array of integers :param target: int, the number to search for :return: int, the index of the target number if found, otherwise -1 left, right = 0, arr.__len__() - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to calculate the factorial of a non-negative integer using a loop.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using a loop. If n is 0, the function will return 1 as 0! is 1. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to remove all duplicate elements from a list while preserving the original order of the elements. You should ensure that your solution is efficient in terms of both time and space complexity.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the list while preserving the original order. :param input_list: List of elements which may contain duplicates :return: A new list with duplicates removed. seen = set() output_list = [] for element in input_list: if element not in seen: seen.add(element) output_list.append(element) return output_list"},{"question":"Write a function to calculate the average time of function execution in Python.","solution":"import time def average_execution_time(func, *args, **kwargs): Calculate the average time of function execution. Parameters: func (callable): The function to be executed. *args: Positional arguments to pass to \`func\`. **kwargs: Keyword arguments to pass to \`func\`. Returns: float: The average execution time of the function. num_executions = 10 total_time = 0.0 for _ in range(num_executions): start_time = time.time() func(*args, **kwargs) end_time = time.time() total_time += end_time - start_time return total_time / num_executions"},{"question":"Write a function to inverse the order of characters in a string using recursion in Python. For example, given a string \\"hello\\", the function should return \\"olleh\\".芸","solution":"def reverse_string_recursively(s): Reverses a string using recursion. if len(s) == 0: return s else: return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a function to find the maximum sum of a subsequence array such that no two elements in the subsequence are adjacent in the original array. Example: input: arr[] = {3, 2, 7, 10}; Output: 13 (3 + 10)","solution":"def max_sum_non_adjacent(arr): Function to find the maximum sum of a subsequence where no two elements are adjacent. incl = 0 # Max sum including the current element excl = 0 # Max sum excluding the current element for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a function to calculate the factorial of a given number \`n\` using recursion. The function should handle positive integers. If the input is not a positive integer, the function should raise a ValueError. If the input is 0, the function should return 1, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of a given number n. :param n: a positive integer :return: factorial of n :raises ValueError: if n is not a positive integer if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to calculate the total number of orders processed by a store in a given period, considering only the orders that were completed within a specified time frame. The function should return the maximum number of orders completed within any given hour during that period.","solution":"import datetime def max_orders_in_an_hour(start_time, end_time, orders): Calculate the maximum number of orders completed within any given hour during the specified period. :param start_time: Start time of the period (datetime.datetime) :param end_time: End time of the period (datetime.datetime) :param orders: List of dictionaries with each dictionary containing 'order_id' and 'completion_time' (datetime.datetime) :return: Maximum number of orders completed within any given hour during the period (int) # Filter orders within the given time period filtered_orders = [order for order in orders if start_time <= order['completion_time'] <= end_time] # Dictionary to count number of orders per hour hourly_order_counts = {} # Count orders per hour for order in filtered_orders: hour = order['completion_time'].replace(minute=0, second=0, microsecond=0) if hour not in hourly_order_counts: hourly_order_counts[hour] = 0 hourly_order_counts[hour] += 1 # Find the maximum number of orders in any given hour if hourly_order_counts: return max(hourly_order_counts.values()) return 0"},{"question":"Write a function to calculate and return the sum of the elements in an array that are not divisible by 3 or 5.","solution":"def sum_not_divisible_by_3_or_5(array): Returns the sum of the elements in an array that are not divisible by 3 or 5. return sum(x for x in array if x % 3 != 0 and x % 5 != 0)"},{"question":"Write a function to find the longest palindromic substring in a given string. The function should return the palindrome substring.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if len(s) == 0: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Write a function to return the first common ancestor of two nodes in a binary tree. First common ancestor here refers to the lowest common ancestor (LCA). You may assume that both nodes are in the tree and are not null.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root, node1, node2): Returns the lowest common ancestor (LCA) of two nodes in a binary tree. if root is None: return None if root == node1 or root == node2: return root left_lca = find_lca(root.left, node1, node2) right_lca = find_lca(root.right, node1, node2) if left_lca and right_lca: return root return left_lca if left_lca is not None else right_lca"},{"question":"Write a function to find the nearest perfect square to a given number. The function should take a single integer as input and return the nearest perfect square. If the number is already a perfect square, return the number itself.","solution":"import math def nearest_perfect_square(n): Returns the nearest perfect square to the given number 'n'. If 'n' is already a perfect square, returns 'n' itself. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") sqrt_n = math.isqrt(n) lower_square = sqrt_n * sqrt_n upper_square = (sqrt_n + 1) * (sqrt_n + 1) if abs(n - lower_square) < abs(n - upper_square): return lower_square else: return upper_square"},{"question":"Write a function to insert a new node with a given data value at the end of a singly linked list. The linked list is represented by a class \`ListNode\`.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_at_end(head, value): Inserts a new node with the given value at the end of the linked list. :param head: The head of the linked list. :param value: The value to be added to the end of the linked list. :return: The head of the modified linked list. new_node = ListNode(value) if not head: return new_node current = head while current.next: current = current.next current.next = new_node return head"},{"question":"Write a function to find the missing number in an array that contains all numbers from 1 to n except one.","solution":"def find_missing_number(arr): Given an array containing n-1 integers from 1 to n, finds the missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a function to compute the n-th Fibonacci number using recursion. How can you avoid duplicate calculations which can significantly improve the performance?","solution":"def fibonacci(n, memo={}): Returns the n-th Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to calculate the number of 1-bits in the binary representation of a given non-negative integer. This function is known as the \\"Hamming Weight\\" or \\"Bit Count\\". For example, the integer 7 (represented as 111 in binary) has a Hamming Weight of 3. Write a function named \`calculate_bit_count\` that takes a single non-negative integer as input and returns the count of 1-bits in its binary representation.","solution":"def calculate_bit_count(n): Returns the count of 1-bits in the binary representation of the non-negative integer n. return bin(n).count('1')"},{"question":"Write a function to implement the algorithm thatachieves the maximum sum subarray problem. Explain the key steps of the algorithm.","solution":"def maximum_sum_subarray(arr): Finds the maximum sum of a contiguous subarray in an array. Parameters: arr (list of int): The input array Returns: int: The maximum sum of the contiguous subarray if len(arr) == 0: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to find the shortest path between two nodes in a binary tree. You can go to any connected node from a given node.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_shortest_path(root, start_value, end_value): Finds the shortest path between two nodes in a binary tree. This function returns the length of the shortest path. if not root: return -1 # Create a graph as adjacency list node_neighbors = {} def build_graph(node, parent=None): if node: if node.value not in node_neighbors: node_neighbors[node.value] = [] if parent: node_neighbors[node.value].append(parent.value) node_neighbors[parent.value].append(node.value) build_graph(node.left, node) build_graph(node.right, node) build_graph(root) # Perform BFS to find the shortest path def bfs(start, end): queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: current_node, distance = queue.popleft() if current_node == end: return distance for neighbor in node_neighbors.get(current_node, []): if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 return bfs(start_value, end_value)"},{"question":"Write a function to generate all possible subsets of a given set of numbers, without repeating any subsets.","solution":"from itertools import chain, combinations def generate_subsets(nums): Generates all possible subsets of a given set of numbers without repeating any subsets. Args: nums (list): List of numbers. Returns: list of lists: A list containing all subsets. return list(chain.from_iterable(combinations(nums, r) for r in range(len(nums) + 1)))"},{"question":"Write a function to compute the factorial of a number. Here, the factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. Your function should handle the case when the input is 0, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to calculate the determinant of a matrix. The matrix can be of any size, but it is guaranteed to be a square matrix. The function should use recursion to calculate the determinant. How can I implement this in Python?","solution":"def determinant(matrix): Returns the determinant of a square matrix using recursion. # Base case for 2x2 matrix if len(matrix) == 2 and len(matrix[0]) == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] # Recursive case for matrix larger than 2x2 det = 0 for c in range(len(matrix)): submatrix = [row[:c] + row[c+1:] for row in (matrix[1:])] sign = (-1) ** c det += sign * matrix[0][c] * determinant(submatrix) return det"},{"question":"Write a function to calculate the factorial of a given number n. The function should be named \`factorial\` and take a single integer parameter n. The factorial of n, denoted as n!, is the product of all positive integers less than or equal to n. For example, the factorial of 5 (5!) is 5 * 4 * 3 * 2 * 1 = 120.","solution":"def factorial(n): Returns the factorial of the given number n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to calculate the sum of numbers from 1 to n using a while loop. Also, implement error handling to check if n is a positive integer.","solution":"def sum_of_numbers(n): Returns the sum of numbers from 1 to n using a while loop. Parameters: - n (int): The upper limit of the range to sum up. Must be a positive integer. Returns: - int: The sum of numbers from 1 to n. Raises: - ValueError: If n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"n must be a positive integer\\") total_sum = 0 i = 1 while i <= n: total_sum += i i += 1 return total_sum"},{"question":"Write a function to compute the minimum number of operations required to transform one binary string into another using only insertions and deletions. The string length is n. The function signature should be: \`int solve(int n, char *A, char *B)\`.","solution":"def solve(n, A, B): Computes the minimum number of operations required to transform binary string A into binary string B using only insertions and deletions. :param n: Length of the strings :param A: Initial binary string :param B: Target binary string :return: Minimum number of operations # longest common subsequence length def lcs(X, Y, m, n): L = [[0] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] m = len(A) n = len(B) lcs_length = lcs(A, B, m, n) # minimum number of operations return (m - lcs_length) + (n - lcs_length)"},{"question":"Write a function to check if a given list of integers contains any repeated elements. If it does, return the first repeated element. If no repeated element is found, return -1.","solution":"def first_repeated_element(nums): Returns the first repeated element in the list of integers 'nums'. If no repeated element is found, returns -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a function to read data from a given URL and print the data. The function should handle exceptions and be robust in case the URL is invalid or the connection fails.","solution":"import requests def fetch_data_from_url(url): Fetches data from the given URL and prints it. Handles exceptions and prints appropriate error messages. :param url: The URL to fetch data from. :type url: str try: response = requests.get(url) response.raise_for_status() # Raises an HTTPError if the HTTP request returned an unsuccessful status code print(response.text) except requests.exceptions.RequestException as e: print(f\\"An error occurred: {e}\\")"},{"question":"Write a function to calculate the sum of the first N natural numbers and then print the sum.","solution":"def sum_of_first_n_natural_numbers(N): Returns the sum of the first N natural numbers. Parameters: N (int): The number up to which the sum is to be calculated. Returns: int: The sum of the first N natural numbers. if N < 1: raise ValueError(\\"N should be a natural number (greater than 0).\\") return N * (N + 1) // 2"},{"question":"Write a function to find the contiguous non-empty subarray within an array whose sum is the largest possible (considering both positive and negative numbers).","solution":"def max_subarray_sum(nums): Finds the contiguous subarray within a list of numbers which has the largest sum and returns that sum. if not nums: return 0 # Initialize the variables current_sum = max_sum = nums[0] # Traverse through the list starting from the second element for num in nums[1:]: # Update the current_sum to be either the current number itself or the current number + current_sum current_sum = max(num, current_sum + num) # Update the max_sum if the current_sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to convert a string to a boolean value, handling various edge cases such as leading/trailing spaces, empty strings, and invalid input.","solution":"def string_to_boolean(s): Converts a string to a boolean value. Handles leading/trailing spaces, empty strings, and invalid inputs. Returns True for \\"true\\" (case-insensitive) and False for \\"false\\" (case-insensitive). Raises ValueError for invalid inputs. if s is None: raise ValueError(\\"None is not a valid input\\") s = s.strip().lower() if s == 'true': return True elif s == 'false': return False elif s == '': raise ValueError(\\"Empty string is not a valid input\\") else: raise ValueError(f\\"Invalid input: {s}\\")"},{"question":"Write a function to find all the unique triplets in a given list of numbers whose sum is zero.","solution":"def three_sum(nums): Returns a list of lists, each containing three numbers that sum up to zero. Args: nums (list): A list of integers. Returns: list: A list of lists containing triplets that sum to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l < r: s = nums[i] + nums[l] + nums[r] if s < 0: l += 1 elif s > 0: r -= 1 else: result.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 return result"},{"question":"Write a function to implement the XOR operation between two binary strings, returning the XOR result as a binary string. Ensure that the function handles binary strings of different lengths.","solution":"def xor_binary_strings(bin_str1, bin_str2): Returns the XOR result of two binary strings as a binary string. If the binary strings are of different lengths, left-pad the shorter one with zeros. # Pad the shorter string with zeros max_len = max(len(bin_str1), len(bin_str2)) bin_str1 = bin_str1.zfill(max_len) bin_str2 = bin_str2.zfill(max_len) # Compute XOR result bit by bit xor_result = ''.join('1' if b1 != b2 else '0' for b1, b2 in zip(bin_str1, bin_str2)) return xor_result"},{"question":"Write a function to implemented a binary search algorithm. Provide a sample input and output for the function. Also, handle the edge cases where the list is empty or the target is not in the list.","solution":"def binary_search(arr, target): Implement a binary search algorithm. :param arr: A sorted list of elements to search. :param target: The element to search for in the list. :return: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to compute the n-th Fibonacci number using an iterative approach. The function should handle large values of n efficiently, avoiding overflow.","solution":"def fibonacci(n): Computes the n-th Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to calculate the number of set bits (also known as the Hamming weight) in the binary representation of a given integer.","solution":"def hamming_weight(n): Returns the number of set bits (1s) in the binary representation of the given integer. :param n: Integer input :return: Number of set bits in the binary representation of n return bin(n).count('1')"},{"question":"Write a function to find the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. Ensure that the function can handle negative numbers and irregular inputs.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The function handles both positive and negative numbers by taking their absolute values. a, b = abs(a), abs(b) while b: a, b = b, a % b return a"},{"question":"Write a function to calculate the sum of all elements in a linked list. The function should be able to handle large numbers by converting the result into a string.","solution":"class ListNode: Class for creating a singly linked list node. def __init__(self, value=0, next=None): self.value = value self.next = next def sum_linked_list(head): Sums all elements in a linked list and returns the sum as a string. :param head: ListNode, the head node of the linked list :return: str, the sum of all elements as a string total_sum = 0 current = head while current is not None: total_sum += current.value current = current.next return str(total_sum)"},{"question":"Write a function to calculate the sum of the first 10 natural numbers (1+2+3+...+10).","solution":"def sum_of_first_10_natural_numbers(): Returns the sum of the first 10 natural numbers. return sum(range(1, 11))"},{"question":"Write a function to generate all the unique pairs of integers (a, b) such that a + b = target_sum. The function should take a target_sum as an input and return a list of tuples, where each tuple represents a unique pair of integers. The function should ensure that each pair is unique, and the integers in the pair should be sorted in ascending order.","solution":"def unique_pairs(target_sum): Generates all unique pairs of integers (a, b) such that a + b = target_sum. Each pair (a, b) is unique and sorted in ascending order. Args: target_sum (int): The target sum for which pairs are to be found. Returns: list of tuple: A list of tuples where each tuple represents a unique pair. pairs = set() for a in range(target_sum // 2 + 1): b = target_sum - a pair = (a, b) if a <= b: pairs.add(pair) return list(pairs)"},{"question":"Write a function to find the maximum sum of a contiguous subarray of size k.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a contiguous subarray of size k. n = len(arr) if n < k or k <= 0: return 0 # Finding the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window from left to right across the array for i in range(k, n): current_sum += arr[i] - arr[i-k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to delete a node from a binary tree in Python. The function should take in the root of the binary tree and the key of the node to be deleted. The function should return the root of the modified tree.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def delete_node(root, key): if root is None: return root if key < root.key: root.left = delete_node(root.left, key) elif key > root.key: root.right = delete_node(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left min_larger_node = find_min(root.right) root.key = min_larger_node.key root.right = delete_node(root.right, min_larger_node.key) return root def find_min(node): current = node while current.left is not None: current = current.left return current"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be able to handle large numbers and should be optimized to avoid unnecessary calculations. Consider using memoization to improve performance for repetitive calculations.","solution":"def factorial(n, memo={}): Returns the factorial of a number n using recursion and memoization. Parameters: n (int): The number to calculate the factorial of Returns: int: Factorial of n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n in memo: return memo[n] if n <= 1: return 1 memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a function to calculate the number of trailing zeros in the factorial of a given number.","solution":"def count_trailing_zeros(n): Returns the number of trailing zeros in the factorial of a given number n. if n < 0: return -1 # Factorial is not defined for negative numbers count = 0 power_of_five = 5 while n >= power_of_five: count += n // power_of_five power_of_five *= 5 return count"},{"question":"Write a function to implement breadth first search (BFS) on a graph. The function takes a graph represented as an adjacency list and a start node, and returns a list of nodes in the order visited by BFS. Assume that all nodes are integers and each node has exactly one entry in the adjacency list and one corresponding leave. Also, do not use any external libraries (such as collections, queue, etc.) for implementing BFS.","solution":"def bfs(graph, start): Implements Breadth First Search (BFS) algorithm. :param graph: A dictionary representing an adjacency list of the graph. :param start: The starting node for BFS. :return: A list of nodes in the order they were visited. visited = [] queue = [start] while queue: current = queue.pop(0) if current not in visited: visited.append(current) queue.extend([node for node in graph[current] if node not in visited]) return visited"},{"question":"Write a function to find the most common element in a list of integers. If there is a tie, return the smallest element among the most common elements.","solution":"def most_common_element(lst): Find the most common element in a list of integers. If there is a tie, return the smallest element among the most common elements. from collections import Counter if not lst: return None count = Counter(lst) most_common_count = max(count.values()) # Finding the smallest element among the tied elements most_common_elements = [num for num in count if count[num] == most_common_count] return min(most_common_elements)"},{"question":"Write a function to return the maximum sum from any triplet in an array. The array can contain both positive and negative integers. However, you cannot use the same index three times in forming a triplet.","solution":"def maximum_triplet_sum(arr): Returns the maximum sum from any triplet in an array. The array can contain both positive and negative integers. if len(arr) < 3: raise ValueError(\\"Array must contain at least three elements\\") arr.sort() # max sum can be from: # 1. The three largest elements max_sum1 = arr[-1] + arr[-2] + arr[-3] # 2. The largest element and the two smallest elements (in case of large negatives) max_sum2 = arr[-1] + arr[0] + arr[1] return max(max_sum1, max_sum2)"},{"question":"Write a function to find the nth Fibonacci number in Python using recursion. What is the time complexity of this approach?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"The index should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # The time complexity of this recursive approach is O(2^n) because each call to fibonacci results in two more calls, leading to an exponential number of calls."},{"question":"Write a function to find an element in a 2D array where the sum of the elements in each row and column is equal to a given constant. The function will return the positions of the 2D array where the condition is met. If no such element exists, the function should return null.","solution":"def find_element_with_sum(matrix, constant): Finds the position in the matrix where the sum of elements in each row and column is equal to the given constant. Returns the position as (row, col) or returns None if no such position exists. def sum_row_or_col(arr): return sum(arr) rows = len(matrix) if rows == 0: return None cols = len(matrix[0]) for i in range(rows): if sum_row_or_col(matrix[i]) != constant: continue for j in range(cols): col_sum = sum(matrix[k][j] for k in range(rows)) if col_sum == constant: return (i, j) return None"},{"question":"Write a function to detect cycles in a directed graph represented using an adjacency list. Detect cycles using Depth First Search (DFS). Your function should return \`True\` if a cycle is detected and \`False\` if not.","solution":"def has_cycle(graph): Determines if there is a cycle in the given directed graph. :param graph: Dictionary representing the adjacency list of the graph :return: True if there is a cycle, otherwise False def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph.get(node, []): if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} for node in graph: if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"Write a function to extract the IDs from an array of user objects.","solution":"def extract_ids(users): Extracts the IDs from an array of user objects. Parameters: users (list): A list of dictionaries, each representing a user object with an 'id' key. Returns: list: A list of IDs extracted from the user objects. return [user['id'] for user in users]"},{"question":"Write a function to invert an integer i.e., if the input is 12345 then the function should return 54321. The function should handle cases where the output might overflow (i.e., for very large numbers), and return a special value when overflow occurs.","solution":"def invert_integer(n): Inverts the digits of the input integer n. If the number is a negative integer, it handles the sign appropriately. Returns a special value (None) when overflow occurs. is_negative = n < 0 n = abs(n) inverted = 0 while n != 0: inverted = inverted * 10 + n % 10 n //= 10 if is_negative: inverted = -inverted # Python handles large integers, but we put a condition to return None if overflow for 32-bit. if inverted >= 2**31 or inverted < -2**31: return None return inverted"},{"question":"Write a function to count the words in a string in Python. myString = \\"This is a sample string to\\"","solution":"def count_words(myString): Counts the number of words in the input string. Args: myString (str): The string to count words in. Returns: int: The number of words in the string. words = myString.split() return len(words)"},{"question":"Write a function to calculate the factorial of a number using recursion. In this function, ensure that it handles cases where the input is a negative number and raise an appropriate exception. Also, ensure that the function can handle large numbers up to the maximum limit of a Python int.","solution":"def factorial(n): Returns the factorial of a number n using recursion. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to accept a string and return the reverse of the string.","solution":"def reverse_string(s): Returns the reverse of the given string. :param s: The input string :return: The reversed string return s[::-1]"},{"question":"Write a function to calculate the factorial of a given number \`n\`. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. It's denoted by \`n!\`. For example, the factorial of 5, written as \`5!\`, is \`5 * 4 * 3 * 2 * 1 = 120\`. By definition, \`0!\` is \`1\`.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to check if a linked list is a palindrome or not using a stack.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def is_palindrome(head): Check if a linked list is a palindrome using a stack. :param head: ListNode, the head of the linked list :return: boolean, True if the linked list is a palindrome, otherwise False stack = [] current = head # Push all values of the linked list to the stack while current: stack.append(current.value) current = current.next current = head # Compare values from the stack with the linked list while current: if current.value != stack.pop(): return False current = current.next return True"},{"question":"Write a function to find the maximum sum of a subarray within a given 1D array. For example, for the array [1, -2, 3, 5], the maximum sum would be 8 (1 + (-2) + 3 + 5), which includes the subarray [3, 5].","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray within a given 1D array. Args: nums (list): List of integers. Returns: int: The maximum sum of a subarray. if not nums: return 0 max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the sum of all elements in a given list using Python. The function should be named \`sum_of_elements\` and take a single parameter, \`lst\`, which is the list of numbers. The function should return the sum of all elements in the list.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the given list. :param lst: List of numbers :return: Sum of all elements in the list return sum(lst)"},{"question":"Write a function to generate the first n rows of Pascal's Triangle. Each row's elements are the result of a binomial coefficient calculation. The triangle should be represented as a list of lists, where each inner list represents a row of the triangle.","solution":"def generate_pascals_triangle(n): Generates the first n rows of Pascal's Triangle. :param n: Number of rows to generate :return: List of lists, where each inner list represents a row in Pascal's Triangle if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Write a function to reverse a string in Python. Your solution should not use slicing, recursion, or any built-in reverse functions directly. You must use a loop to chars and build a new string in reverse order.","solution":"def reverse_string(s): Reverses a given string s using a loop. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a function to calculate the cumulative sum of an integer array and return a new array where each element at index \`i\` is the sum of the elements from index \`0\` to index \`i\` of the input array.","solution":"def cumulative_sum(arr): Returns a new array where each element at index i is the sum of the elements from index 0 to index i of the input array. cum_sum = [] current_sum = 0 for number in arr: current_sum += number cum_sum.append(current_sum) return cum_sum"},{"question":"Write a function to find the product of the first n odd numbers.","solution":"def product_of_first_n_odds(n): Returns the product of the first n odd numbers. product = 1 for i in range(n): odd_number = 2 * i + 1 product *= odd_number return product"},{"question":"Write a function to print all prime numbers less than a given number \`n\`. A prime number is a number that is greater than 1 and has no divisors other than 1 and itself.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to check if a linked list is circular.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def is_circular_linked_list(head): Determines if a linked list is circular. A linked list is circular if there is a node in the list that can be reached again by following the next pointer continuously. :param head: The head node of the linked list :return: True if the linked list is circular, False otherwise if not head: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Write a function to return the nearest smaller number to N using only multiplication or division operations. No other arithmetic operations are allowed.","solution":"def nearest_smaller_number(n): Returns the nearest smaller number to n using only multiplication or division operations. if n <= 1: return 1 # Try to find the largest power of 2 less than n current = 1 while current * 2 < n: current *= 2 return current"},{"question":"Write a function to filter out repeated numbers from an array of integers and return a new array containing only the non-repeated numbers (i.e., numbers that appear exactly once in the original array). The order of the elements in the new array should be the same as in the original array.","solution":"def filter_non_repeated_numbers(arr): Returns a list containing only the non-repeated numbers from the input list 'arr'. A non-repeated number appears exactly once in the input list. Parameters: arr (list): A list of integers Returns: list: A list of integers containing only non-repeated numbers in the same order as in 'arr'. from collections import Counter count = Counter(arr) non_repeated = [num for num in arr if count[num] == 1] return non_repeated"},{"question":"Write a function to count the number of times the character 'a' appears in a given string. For example, the string \\"banana\\" should return 3 because 'a' appears three times.","solution":"def count_a(s): Returns the number of times the character 'a' appears in the given string s. return s.count('a')"},{"question":"Write a function to serialize and deserialize a binary tree.","solution":"from typing import Optional class TreeNode: def __init__(self, val: int = 0, left: 'Optional[TreeNode]' = None, right: 'Optional[TreeNode]' = None): self.val = val self.left = left self.right = right def serialize(root: Optional[TreeNode]) -> str: Encodes a tree to a single string. def helper(node): if not node: return \\"None,\\" return str(node.val) + \\",\\" + helper(node.left) + helper(node.right) return helper(root) def deserialize(data: str) -> Optional[TreeNode]: Decodes your encoded data to tree. def helper(nodes): value = next(nodes) if value == \\"None\\": return None node = TreeNode(int(value)) node.left = helper(nodes) node.right = helper(nodes) return node nodes = iter(data.split(',')) return helper(nodes)"},{"question":"Write a function to find the minimum and maximum values in an array, and the number of zero elements in it.","solution":"def find_min_max_and_zero_count(arr): Returns the minimum and maximum values in an array, and the number of zero elements in it. Parameters: arr (list): A list of numbers. Returns: tuple: A tuple containing the minimum value, maximum value, and the count of zeros in the form (min_value, max_value, zero_count). if not arr: return None, None, 0 min_value = float('inf') max_value = float('-inf') zero_count = 0 for num in arr: if num == 0: zero_count += 1 if num < min_value: min_value = num if num > max_value: max_value = num return min_value, max_value, zero_count"},{"question":"Write a function to find the intersection of two lists. The function should return a list containing the elements that are common to both input lists.","solution":"def intersection(list1, list2): Returns a list containing the elements that are common to both input lists. return list(set(list1) & set(list2))"},{"question":"Write a function to implement a hash map using chaining. If the key for a value needs to be changed, then it needs to be moved to a new hash index while preserving its original value.","solution":"class HashMap: def __init__(self, size=10): self.size = size self.map = [[] for _ in range(self.size)] def _get_hash(self, key): return hash(key) % self.size def set(self, key, value): key_hash = self._get_hash(key) key_value = [key, value] bucket = self.map[key_hash] for pair in bucket: if pair[0] == key: bucket.remove(pair) break bucket.append(key_value) def get(self, key): key_hash = self._get_hash(key) bucket = self.map[key_hash] for pair in bucket: if pair[0] == key: return pair[1] return None def delete(self, key): key_hash = self._get_hash(key) bucket = self.map[key_hash] for pair in bucket: if pair[0] == key: bucket.remove(pair) return True return False def update_key(self, old_key, new_key): value = self.get(old_key) if value is not None: self.delete(old_key) self.set(new_key, value)"},{"question":"Write a function to implement prefix sum for an array efficiently.","solution":"def prefix_sum(arr): Returns the prefix sum array of the given array. Parameters: arr (list of int): The input array for which to compute the prefix sums. Returns: list of int: The prefix sum array. if not arr: return [] prefix_sums = [0] * len(arr) prefix_sums[0] = arr[0] for i in range(1, len(arr)): prefix_sums[i] = prefix_sums[i - 1] + arr[i] return prefix_sums"},{"question":"Write a function to calculate the sum of all numbers in a list that are greater than a specified threshold. Use Recursion.","solution":"def sum_above_threshold(lst, threshold): Returns the sum of all numbers in the list that are greater than the specified threshold using recursion. if not lst: return 0 head, *tail = lst if head > threshold: return head + sum_above_threshold(tail, threshold) else: return sum_above_threshold(tail, threshold)"},{"question":"Write a function to rotate a connected list by k places, where k is non-negative. Assume the list has at least one node. The rotation should be in-place and the new tail should point to the node that was originally at the head.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head # Count the length of the list old_tail = head n = 1 while old_tail.next: old_tail = old_tail.next n += 1 # Make the linked list circular old_tail.next = head # Calculate the new tail position new_tail_pos = n - k % n - 1 new_tail = head for _ in range(new_tail_pos): new_tail = new_tail.next # Calculate the new head position new_head = new_tail.next # Break the circular linked list new_tail.next = None return new_head"},{"question":"Write a function to reverse a string in Python, but the function should reverse the characters of words within the string independently, while maintaining the word order.","solution":"def reverse_words_within_string(sentence): Returns a string in which the characters of each word are reversed independently, while maintaining the original word order. words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function to find the sum of all numbers in an array. The function should return the sum. If the array is empty, the function should return 0. If the array contains negative numbers, the function should still include them in the sum.","solution":"def array_sum(arr): Returns the sum of all numbers in the array. Parameters: arr (list): A list of numbers Returns: int/float: The sum of all numbers in the array return sum(arr)"},{"question":"Write a function to reverse a linked list. Can you explain the steps involved and the solution using a high-level programming language like Python?","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (ListNode): The head of the linked list Returns: ListNode: The new head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to convert a given string to a list of characters. In Python, strings are immutable, thus we can't modify them directly. However, we can create a new list where each character of the string becomes an element in the list.","solution":"def string_to_list(s): Converts a given string to a list of characters. Parameters: s (str): The input string to convert. Returns: list: A list containing each character of the string as an element. return list(s)"},{"question":"Write a function to print all elements of a binary search tree (BST) in an in-order manner. In-order traversal means the nodes are visited in the following order: left subtree, root, right subtree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Perform in-order traversal on a binary search tree and return the list of node values. result = [] def traverse(node): if not node: return traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a function to convert a decimal number to a binary representation and count the number of 1s in the binary representation. For example, given the number 9, the binary representation is 1001, and the function should return 2 since there are two 1s in the binary number.","solution":"def count_ones_in_binary(n): Convert a decimal number to binary representation and count the number of 1s. :param n: The decimal number to be converted. :return: The number of 1s in the binary representation. binary_representation = bin(n)[2:] # Convert to binary and remove '0b' prefix return binary_representation.count('1')"},{"question":"Write a function to reverse the digits of an integer. If reversing the digits causes the integer to overflow (i.e., it exceeds the bounds of a 32-bit signed integer), the function should return 0.","solution":"def reverse_integer(x): Reverses the digits of an integer. Returns 0 if the reversed integer overflows a 32-bit signed integer. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if x < 0 else 1 x *= sign reversed_x = int(str(x)[::-1]) reversed_x *= sign if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Write a function to calculate the total points of a player in a game. To calculate the total points, you need to sum the points from all the rounds a player has played. The rounds are structured as a list of tuples, where each tuple contains two integers: the first integer represents the number of points scored in that round, and the second integer represents the multiplier for that round. For example, \`(10, 2)\` means 10 points were scored and they are doubled (since the multiplier is 2).","solution":"def calculate_total_points(rounds): Calculate the total points of a player based on the rounds. Each round is represented as a tuple (points, multiplier). Args: rounds (list of tuples): List of tuples where each tuple contains (points, multiplier) Returns: int: Total points across all rounds total_points = 0 for points, multiplier in rounds: total_points += points * multiplier return total_points"},{"question":"Write a function to implement the quicksort algorithm. The function should take an array as input and return the sorted array. Can you provide a detailed implementation in Python?","solution":"def quicksort(arr): Sorts the input array using the quicksort algorithm and returns the sorted array. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less_than_pivot = [x for x in arr if x < pivot] equal_to_pivot = [x for x in arr if x == pivot] greater_than_pivot = [x for x in arr if x > pivot] return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)"},{"question":"Write a function to rearrange an array containing only 0's and 1's so that all the 0's come before all the 1's in linear time and the constant space. The function should take an array as its parameter and return the rearranged array.","solution":"def rearrange_zeros_ones(arr): Rearranges an array such that all 0's come before all 1's Returns the rearranged array. left, right = 0, len(arr) - 1 while left < right: while left < right and arr[left] == 0: left += 1 while left < right and arr[right] == 1: right -= 1 if left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function to simulate the Monty Hall problem in Python. The Monty Hall problem is a probability puzzle. In this problem, there are three doors, behind one of which is a car, and behind the other two are goats. The player chooses a door, then the host, who knows what is behind the doors, opens one of the remaining doors to reveal a goat. The player is then given the option to stick with their original choice or switch to the other unopened door. The question is, does switching doors increase the probability of winning the car?","solution":"import random def simulate_monty_hall(num_simulations, switch): Simulate the Monty Hall problem and return the number of wins if the contestant switches or sticks with their choice. Parameters: - num_simulations (int): The number of simulations to run. - switch (bool): If True, the contestant switches doors; if False, the contestant sticks with their original door. Returns: - int: The number of times the contestant wins the car. wins = 0 for _ in range(num_simulations): doors = [\\"goat\\", \\"goat\\", \\"car\\"] random.shuffle(doors) # The contestant's initial choice contestant_choice = random.randint(0, 2) # The host opens a door that the contestant didn't pick, revealing a goat available_doors = [i for i in range(3) if i != contestant_choice and doors[i] == \\"goat\\"] host_opens = random.choice(available_doors) # If the contestant switches, they switch to the other unopened door if switch: contestant_choice = next(i for i in range(3) if i != contestant_choice and i != host_opens) if doors[contestant_choice] == \\"car\\": wins += 1 return wins"},{"question":"Write a function to sort an array in ascending order. There are 240 elements in array and its elements are in the range of [1, 500]. The elements should be sorted in such a way that the frequency of elements remains the same, but the elements themselves should be sorted in ascending order.","solution":"def frequency_sort(nums): Sorts an array in ascending order while keeping the frequency of elements the same. Args: nums (list): A list of integers. Returns: list: Sorted list by elements. # Define the frequency dictionary to count occurrences of each element frequency = {} for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Sort the list by the elements sorted_elements = sorted(frequency.keys()) # Create the sorted list with frequencies maintained sorted_array = [] for element in sorted_elements: sorted_array.extend([element] * frequency[element]) return sorted_array"},{"question":"Write a function to traverse a binary tree using Depth-First Search (DFS) and return the nodes in a depth-first order sequence. Implement the function in Python.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_traversal(root): Traverses the binary tree using Depth-First Search (DFS) and returns a list of nodes in depth-first order sequence. result = [] def dfs(node): if node is None: return result.append(node.value) dfs(node.left) dfs(node.right) dfs(root) return result"},{"question":"Write a function to return the middle element of a singly linked list. If the list has an even number of elements, return the second middle element. If the list is empty, return \`None\`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def middleNode(head: ListNode) -> ListNode: Returns the middle element of a singly linked list. If the list has an even number of elements, returns the second middle element. If the list is empty, returns None. if not head: return None slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to sort a given list using the merge sort algorithm.","solution":"def merge_sort(arr): Sorts a list using the merge sort algorithm and returns the sorted list. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Write a function to calculate the two's complement of a binary number given in string format. The function should handle both positive and negative integers.","solution":"def two_complement(binary_str): Calculates the two's complement of a binary number given as a string. # Check if the binary string is empty if binary_str == \\"\\": return \\"0\\" # Determine if the binary number is negative is_negative = binary_str[0] == '1' # If positive, just return the binary string itself as two's complement for positive is the number itself if not is_negative: return binary_str # If negative, perform the two's complement calculation # Step 1: Invert the bits inverted_bits = ''.join('0' if bit == '1' else '1' for bit in binary_str) # Step 2: Add 1 to the inverted bits two_complement_bits = bin(int(inverted_bits, 2) + 1)[2:] return two_complement_bits.zfill(len(binary_str))"},{"question":"Write a function to create a new empty tree and return its root node.","solution":"class TreeNode: def __init__(self, value=None): self.value = value self.left = None self.right = None def create_empty_tree(): Creates a new empty tree and returns its root node. An empty tree is considered to have a root node with no value. return TreeNode()"},{"question":"Write a function to calculate the sum of a list of integers. The function should return \`None\` if the list is empty.","solution":"def sum_list(int_list): Returns the sum of a list of integers. If the list is empty, returns None. if not int_list: return None return sum(int_list)"},{"question":"Write a function to find the minimum number in an array of integers.","solution":"def find_minimum(arr): Returns the minimum number in an array of integers. if not arr: # Edge case: empty array raise ValueError(\\"Array cannot be empty\\") min_value = arr[0] for num in arr: if num < min_value: min_value = num return min_value"},{"question":"Write a function to calculate the k-th largest element in a list using Python.","solution":"def kth_largest_element(nums, k): Returns the k-th largest element in the list \`nums\`. :param nums: List of integers :param k: An integer k (1 ≤ k ≤ len(nums)) :return: The k-th largest element in nums if not nums or k < 1 or k > len(nums): return None nums.sort(reverse=True) return nums[k-1]"},{"question":"Write a function to reverse a string. The function should handle strings of any length, including empty strings. If the input string is empty, the function should return an empty string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to determine if a given list contains any duplicate elements within a specified distance 'k'.","solution":"def contains_nearby_duplicate(nums, k): Determines if a given list contains any duplicate elements within a specified distance 'k'. Parameters: nums (list): The list of integers. k (int): The distance within which to check for duplicate elements. Returns: bool: True if there are duplicates within the specified distance, False otherwise. num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"Write a function to compare two strings lexicographically. That is, compare the first characters of both strings, then the second characters, and so on. Capital letters should be considered less than lowercase letters. Handle case where the strings may be of unequal lengths.","solution":"def compare_lexicographically(str1, str2): Compare two strings lexicographically. Capital letters are considered less than lowercase letters. Parameters: str1 (str): First string. str2 (str): Second string. Returns: int: -1 if str1 < str2, 1 if str1 > str2, 0 if str1 == str2. for c1, c2 in zip(str1, str2): if c1 < c2: return -1 elif c1 > c2: return 1 # If all characters are the same in the shared length, the longer string is lexicographically greater. if len(str1) < len(str2): return -1 elif len(str1) > len(str2): return 1 else: return 0"},{"question":"Write a function to insert a new element into an array while maintaining the array's ordering.","solution":"def insert_ordered(arr, elem): Inserts a new element into a sorted array while maintaining the array's ordering. Parameters: arr (list): A list of ordered elements. elem (int/float): The element to be inserted into the array. Returns: list: A new list with the element inserted. if not arr: # If array is empty, return a new list with only the new element. return [elem] new_arr = [] inserted = False for item in arr: if not inserted and item > elem: new_arr.append(elem) inserted = True new_arr.append(item) if not inserted: # If the element is larger than all the elements in the array new_arr.append(elem) return new_arr"},{"question":"Write a function to calculate the area and perimeter of a rectangle given its width and height. The function should return a dictionary containing the area and perimeter.","solution":"def rectangle_properties(width, height): Calculates and returns the area and perimeter of a rectangle given its width and height. Args: width (float): The width of the rectangle. height (float): The height of the rectangle. Returns: dict: A dictionary containing the area and perimeter of the rectangle. The keys are 'area' and 'perimeter'. area = width * height perimeter = 2 * (width + height) return {'area': area, 'perimeter': perimeter}"},{"question":"Write a function to convert a decimal number to a binary number and return the result as a string. For example, the decimal number 5 should be converted to \\"101\\" in binary.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. Parameters: n (int): The decimal number to be converted to binary. Returns: str: The binary representation of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a function to count the number of words and characters in a given string.","solution":"def count_words_and_characters(input_string): Returns a tuple (number_of_words, number_of_characters) in the given input string. :param input_string: str, the input string to evaluate :return: tuple, (number_of_words, number_of_characters) words = input_string.split() number_of_words = len(words) number_of_characters = len(input_string) return number_of_words, number_of_characters"},{"question":"Write a function to sort an array of integers using the merge sort algorithm. The function should return the sorted array. The merge sort algorithm is a divide and conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. Please implement this algorithm in Python.","solution":"def merge(arr, l, m, r): Merges two sub-arrays of arr. First sub-array is arr[l..m] Second sub-array is arr[m+1..r] n1 = m - l + 1 n2 = r - m # Create temp arrays L = arr[l:l + n1] R = arr[m + 1:m + 1 + n2] # Merge the temp arrays back into arr[l..r] i = 0 j = 0 k = l while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Copy the remaining elements of L[], if there are any while i < n1: arr[k] = L[i] i += 1 k += 1 # Copy the remaining elements of R[], if there are any while j < n2: arr[k] = R[j] j += 1 k += 1 def merge_sort(arr, l, r): Sorts an array using merge sort algorithm if l < r: # Same as (l+r)//2 but avoids overflow for large l and h m = l + (r - l) // 2 # Sort first and second halves merge_sort(arr, l, m) merge_sort(arr, m+1, r) merge(arr, l, m, r) def sort_array(arr): Public function to sort an array using merge sort if arr is not None: merge_sort(arr, 0, len(arr) - 1) return arr"},{"question":"Write a function to parse a string representing a binary number and return its decimal equivalent. The function should handle both positive and negative binary numbers. For negative numbers, use two's complement representation.","solution":"def parse_binary_to_decimal(binary_str): Parse a string representing a binary number and return its decimal equivalent. Handles both positive and negative binary numbers using two's complement representation. :param binary_str: A string representing a binary number. :return: The decimal equivalent of the binary number. if binary_str[0] == '-': return -parse_binary_to_decimal(binary_str[1:]) # Check if the binary string indicates a negative number in two's complement is_negative = binary_str[0] == '1' and len(binary_str) == 8 if is_negative: # Convert from two's complement binary to decimal inverted_bin_str = ''.join('1' if bit == '0' else '0' for bit in binary_str) decimal_value = int(inverted_bin_str, 2) + 1 return -decimal_value # Convert positive binary to decimal return int(binary_str, 2)"},{"question":"Write a function to reverse a string in Python. You can either do this by creating a new cleaned list using slicing, or by creating a new list by appending each character in reversed order. Type the code below.","solution":"def reverse_string(s): Reverses the input string. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to delete a node from the binary tree. Given the root of the tree and the key to be deleted, delete the node and return the new root.","solution":"class TreeNode: def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def delete_node(root, key): Deletes the node with the specified key from the binary tree rooted at root. Returns the new root of the tree. if root is None: return root if key < root.key: root.left = delete_node(root.left, key) elif key > root.key: root.right = delete_node(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left min_larger_node = get_min(root.right) root.key = min_larger_node.key root.right = delete_node(root.right, root.key) return root def get_min(node): Finds the node with the minimum key in a given binary tree. current = node while current.left is not None: current = current.left return current"},{"question":"Write a function to find the two numbers that appear only once in an array where all other numbers appear exactly twice. Find the solution in linear time complexity and constant space complexity.","solution":"def find_two_single_numbers(nums): Finds two numbers that appear only once in the array where all other numbers appear exactly twice. :param nums: List of integers :return: Tuple of the two integers that appear only once # Step 1: XOR all the numbers together. The result will be the XOR of the two unique numbers. xor_result = 0 for num in nums: xor_result ^= num # Step 2: Find any bit that is set (1) in the xor_result. This bit is different in the two unique numbers. set_bit = 1 while (xor_result & set_bit) == 0: set_bit <<= 1 # Step 3: Divide numbers into two groups based on the set_bit and XOR each group separately. num1, num2 = 0, 0 for num in nums: if (num & set_bit) == 0: num1 ^= num else: num2 ^= num return num1, num2"},{"question":"Write a function to take an integer as input and return the number of digits in it.","solution":"def count_digits(n): Returns the number of digits in the integer n. if n < 0: n = -n return len(str(n))"},{"question":"Write a function to calculate the factorial of a number using a recursive approach. The function should be designed to handle large numbers efficiently using Python's built-in \`int\` type.","solution":"def factorial(n): Returns the factorial of a given number n using a recursive approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to implement a simple square pattern using loops. The function should take three integer parameters: \`n\` for the number of rows, \`m\` for the number of columns, and \`rep\` for the number of times the entire pattern should be repeated. Each integer will be between 1 and 9. The function should print the output in the console.","solution":"def square_pattern(n, m, rep): Prints a square pattern of n rows and m columns, repeated rep times. for _ in range(rep): for i in range(n): print(\\"\\".join([\\"#\\" for _ in range(m)])) if _ < rep - 1: print() # Add a blank line between repetitions"},{"question":"Write a function to find the minimum number of coins required to make up a given amount. Given an array of coin denominations, you can use an unlimited supply of each coin denomination.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make up the given amount. If it is not possible to make the amount with the given coin denominations, return -1. # Initialize DP array with a large number, denoting that initially, we cannot form the amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # Update the DP table for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to find the first n Fibonacci numbers using a generator in Python.","solution":"def fibonacci_generator(n): Generate the first n Fibonacci numbers. :param n: The number of Fibonacci numbers to generate. :return: A generator that yields the first n Fibonacci numbers. a, b = 0, 1 count = 0 while count < n: yield a a, b = b, a + b count += 1"},{"question":"Write a function to convert an integer to its binary representation as a string. The function should also take a parameter for the total number of bits to be represented, and pad the binary string with leading zeros if necessary.","solution":"def int_to_binary(n, bits): Converts an integer to its binary representation as a string of the specified bit length. Pads with leading zeros if necessary. Parameters: n (int): The integer to convert. bits (int): The total number of bits for the binary representation. Returns: str: Binary representation of the integer with leading zeros. binary = bin(n)[2:] # Convert to binary and remove '0b' prefix return binary.zfill(bits)"},{"question":"Write a function to check if a given number is a palindrome. A palindrome is a number that remains the same when its digits are reversed. For example, 121 and 1331 are palindromes. Write a function \`isPalindrome(num)\` that returns \`True\` if \`num\` is a palindrome, and \`False\` otherwise.","solution":"def isPalindrome(num): Returns True if the given number is a palindrome, otherwise returns False. # Convert the number to a string num_str = str(num) # Compare the string with its reverse return num_str == num_str[::-1]"},{"question":"Write a function to compare two strings and return the number of differences between them.","solution":"def string_differences(str1, str2): Returns the number of differences between two strings. Differences are counted by comparing corresponding characters in the strings. If the strings are of different lengths, the additional characters in the longer string are counted as differences. len1, len2 = len(str1), len(str2) min_len = min(len1, len2) differences = sum(1 for i in range(min_len) if str1[i] != str2[i]) differences += abs(len1 - len2) # Account for extra characters in longer string return differences"},{"question":"Write a function to find the path that gives the minimum cost in a graph with weighted edges. You are given a directed graph represented as an adjacency list, where each node is a key with the value being a list of tuples representing the neighboring node and the weight of the edge connecting them. You should use Dijkstra's algorithm to find the minimum cost path from a start node to an end node.","solution":"import heapq def dijkstra(graph, start, end): Uses Dijkstra's algorithm to find the shortest path from start node to end node in a weighted graph. :param graph: Dict where keys are nodes and values are lists of tuples (neighbor, weight) :param start: The start node :param end: The end node :return: The minimum cost path as a list of nodes and the total cost # Priority queue to store (cost, current_node, path_taken) priority_queue = [(0, start, [start])] visited = set() while priority_queue: current_cost, current_node, path = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) # If we reached the end node, return the path and cost if current_node == end: return path, current_cost # Explore neighbors for neighbor, weight in graph.get(current_node, []): if neighbor not in visited: heapq.heappush(priority_queue, (current_cost + weight, neighbor, path + [neighbor])) return None, float('inf') # If no path exists to the end node"},{"question":"Write a function to find the maximum profit from a given array of stock prices. You can only make one transaction (buy one and sell one share of the stock). Your function should return the maximum profit that can be achieved. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. You can only make one transaction (buy and then sell one share of the stock). :param prices: List[int] :return: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to find the maximum number of consecutive zeros in an array. For example, given the array [0,1,0,0,1,0,0,0,1], the function should return 3, since the longest sequence of consecutive zeros is three.","solution":"def max_consecutive_zeros(arr): Returns the maximum number of consecutive zeros in the array. Parameters: arr (list): The input array containing integers. Returns: int: The length of the longest sequence of consecutive zeros. max_zeros = 0 current_zeros = 0 for num in arr: if num == 0: current_zeros += 1 if current_zeros > max_zeros: max_zeros = current_zeros else: current_zeros = 0 return max_zeros"},{"question":"Write a function to generate a random list of integers within a given range [min_val, max_val] of size 'n'.","solution":"import random def generate_random_list(n, min_val, max_val): Generates a random list of integers within a given range [min_val, max_val] of size n. Args: n (int): The size of the list to be generated. min_val (int): The minimum value an element in the list can have. max_val (int): The maximum value an element in the list can have. Returns: list: A list of n random integers within the range [min_val, max_val]. return [random.randint(min_val, max_val) for _ in range(n)]"},{"question":"Write a function to compute the total cost of an order after applying a discount. The function should take three parameters: the price of the item, the quantity ordered, and the discount percentage. The discount percentage is applied to the total cost before tax. The function should return the total cost after applying the discount. If the discount percentage is zero or less, no discount is applied. Additionally, the function should handle cases where the price or quantity is negative or zero and return an appropriate error message.","solution":"def total_cost(price, quantity, discount_percentage): Returns the total cost after applying the discount. Parameters: price (float): Price of the single item. quantity (int): Quantity of the items ordered. discount_percentage (float): Discount percentage to be applied. Returns: float: Total cost after applying discount. str: Error message for invalid input values. if price <= 0: return \\"Error: The price must be a positive number.\\" if quantity <= 0: return \\"Error: The quantity must be a positive number.\\" if discount_percentage < 0: return \\"Error: The discount percentage must be non-negative.\\" total = price * quantity if discount_percentage > 0: discount_amount = total * (discount_percentage / 100) total -= discount_amount return total"},{"question":"Write a function to calculate the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around.","solution":"def max_subarray_sum_circular(arr): Calculates the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around. def kadane(nums): max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(arr) max_wrap = sum(arr) + kadane([-x for x in arr]) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a function to compute the frequency of each character in a given string, then store the results in a dictionary. The function should also remove all characters that occur more than once in the input string.","solution":"def char_frequency(s): Computes the frequency of each character in the given string and returns a dictionary. Additionally removes characters that occur more than once in the original string. Parameters: s (str): Input string to analyze Returns: dict: A dictionary with characters as keys and their frequencies as values. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Remove characters that occur more than once single_occurrences = {char: count for char, count in frequency.items() if count == 1} return single_occurrences"},{"question":"Write a function to insert an element into a sorted array, then sort the array again to maintain the sorted order and return the updated array.","solution":"def insert_and_sort(array, element): Inserts an element into a sorted array and returns the array in sorted order. Parameters: array (list): A list of sorted elements. element (int/float): The element to be inserted. Returns: list: The updated list with the new element inserted and sorted. array.append(element) array.sort() return array"},{"question":"Write a function to sort a list of integers using the quicksort algorithm in Python. Please include a brief explanation of how quicksort works.","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. Parameters: arr (list): A list of integers to sort. Returns: list: A sorted list of integers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] # Choosing the middle element as pivot left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to calculate the sum of all numbers from 1 to n, where n is a positive integer, and the function should running in O(n) time complexity.","solution":"def sum_up_to_n(n): Calculates the sum of all numbers from 1 to n. return sum(range(1, n + 1))"},{"question":"Write a function to find the shortest path from a source vertex to all other vertices in a weighted graph. If there is a negative cycle, the function should return that a negative cycle exists. How can I implement this using Dijkstra's algorithm?","solution":"def bellman_ford(graph, source): Find the shortest path from the source to all vertices in the given graph. If a negative cycle exists, the function will return that a negative cycle exists. :param graph: List of tuples (u, v, w) representing edge from u to v with weight w :param source: The source vertex :return: A dictionary with shortest path distances from the source to each vertex or a statement that a negative cycle exists # Step 1: Initialize distances from source to all other vertices as INFINITE distances = {vertex: float('inf') for vertex in {u for edge in graph for u in edge[:2]}} distances[source] = 0 # Step 2: Relax all edges |V| - 1 times for _ in range(len(distances) - 1): for u, v, w in graph: if distances[u] != float('inf') and distances[u] + w < distances[v]: distances[v] = distances[u] + w # Step 3: Check for negative-weight cycles for u, v, w in graph: if distances[u] != float('inf') and distances[u] + w < distances[v]: return \\"A negative cycle exists\\" return distances"},{"question":"Write a function to convert a given number into a string with commas as thousands separators. For example, if the number is 1234567, the function should return the string \\"1,234,567\\".","solution":"def number_with_commas(number): Converts a given number into a string with commas as thousands separators. Parameters: number (int): The number to be converted. Returns: str: The formatted string with commas as thousands separators. return \\"{:,}\\".format(number)"},{"question":"Write a function to find the maximum sum of a subarray in an integer array. This is known as Kadane's Algorithm. Can you provide a Python implementation?","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in an integer array using Kadane's Algorithm. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Write a function to find all the duplicate elements in an array of integers. The function should take an array of integers as input and return a list of all the duplicate integers found in the array. Additionally, the function should ensure that each duplicate integer is only returned once, regardless of how many times it appears in the array.","solution":"def find_duplicates(arr): Finds all duplicate elements in an array of integers. Parameters: arr (list): A list of integers. Returns: list: A list containing the duplicate integers, each appearing only once. seen = set() duplicates = set() for num in arr: if num in seen: duplicates.add(num) seen.add(num) return list(duplicates)"},{"question":"Write a function to reverse a string in Python without using any built-in functions or slicing methods. Additionally, ensure that the function handles exceptions by returning \`None\` if the input is not a string.","solution":"def reverse_string(s): Reverses the input string s without using built-in functions or slicing methods. If the input is not a string, returns None. if not isinstance(s, str): return None reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to print all the characters in a string. The function should iterate over each character in the string using a for loop and print it out. If the character is the letter 'a', it should print the string \\"Found 'a'\\". If the character is the letter 'n', it should print the string \\"Found 'n'\\". Otherwise, it should continue to the next character.","solution":"def print_characters(s): Prints characters in a string with specific messages for 'a' and 'n'. Parameters: s (str): The input string. for char in s: if char == 'a': print(\\"Found 'a'\\") elif char == 'n': print(\\"Found 'n'\\") else: print(char)"},{"question":"Write a function to find the maximum product of two distinct numbers in an array. For example, for the array [1, 2, 3, 4, 5], the function should return 20 (the product of 4 and 5). Assume the array has at least two integers.","solution":"def max_product(arr): Returns the maximum product of two distinct numbers in an array. Parameters: arr (list): A list of integers with at least two elements. Returns: int: The maximum product of two distinct numbers. if len(arr) < 2: raise ValueError(\\"Array must contain at least two integers.\\") # Find the two largest numbers in the array largest = max(arr[0], arr[1]) second_largest = min(arr[0], arr[1]) for num in arr[2:]: if num > largest: second_largest = largest largest = num elif num > second_largest: second_largest = num return largest * second_largest"},{"question":"Write a function to convert a string to an integer without using the built-in \`parseInt\` function. Implement this in Python.","solution":"def string_to_integer(s): Converts a string to an integer without using the built-in int function. Assumes the string represents a valid integer. Handles optional leading '+' or '-' sign. if not s: raise ValueError(\\"Input string is empty\\") # Handle optional leading sign negative = False start = 0 if s[0] == '-': negative = True start = 1 elif s[0] == '+': start = 1 num = 0 for i in range(start, len(s)): # Check if the character is between '0' and '9' if '0' <= s[i] <= '9': num = num * 10 + (ord(s[i]) - ord('0')) else: raise ValueError(f\\"Invalid character {s[i]} in input string\\") if negative: num = -num return num"},{"question":"Write a function to map two lists into a dictionary. The function should handle lists of different lengths, filling in missing values with a default value.","solution":"def map_lists_to_dict(keys, values, default_value=None): Maps two lists into a dictionary. If the lists are of different lengths, the missing values are filled using the default value. :param keys: List of keys. :param values: List of values. :param default_value: Value to use if a list is shorter than the other. :return: Dictionary mapping keys to values. max_length = max(len(keys), len(values)) keys_extended = keys + [default_value] * (max_length - len(keys)) values_extended = values + [default_value] * (max_length - len(values)) return dict(zip(keys_extended, values_extended))"},{"question":"Write a function to check if a given string contains a substring with a specific condition. The condition is that the substring must contain at least one character from 'a' to 'f' and one character from 'g' to 'l'. The function should return \`True\` if such a substring exists, otherwise \`False\`.","solution":"def contains_specific_substring(s): Checks if the string contains a substring with at least one character from 'a' to 'f' and one character from 'g' to 'l'. has_a_to_f = False has_g_to_l = False for char in s: if 'a' <= char <= 'f': has_a_to_f = True if 'g' <= char <= 'l': has_g_to_l = True if has_a_to_f and has_g_to_l: return True return False"},{"question":"Write a function to parse a date string in the format \\"YYYY-MM-DDTHH:MM:SS ±HHMM\\" and convert it to a datetime object in Python. The function should handle different timezones and convert them to UTC.","solution":"from datetime import datetime import pytz def parse_date_to_utc(date_str): Parses a date string in the format \\"YYYY-MM-DDTHH:MM:SS ±HHMM\\" and converts it to a datetime object in UTC. :param date_str: A date string in the format \\"YYYY-MM-DDTHH:MM:SS ±HHMM\\" :return: A datetime object in UTC timezone # Parse the date string to datetime object including the timezone info local_dt = datetime.strptime(date_str, \\"%Y-%m-%dT%H:%M:%S %z\\") # Convert the datetime to UTC utc_dt = local_dt.astimezone(pytz.utc) return utc_dt"},{"question":"Write a function to reverse a string in Python without using slicing, any built-in Python string method that performs reversal (like \`reverse()\` or \`reversed()\`), or any additional data structures like lists, tuples, or dictionaries.","solution":"def reverse_string(s): Reverses a given string without using slicing, built-in reversal methods, or additional data structures. result = '' length = len(s) for i in range(length - 1, -1, -1): result += s[i] return result"},{"question":"Write a function to check if a string is a valid palindrome. A valid palindrome reads the same backward as forward. For example, \\"level\\" and \\"racecar\\" are palindromes.","solution":"def is_palindrome(s): Returns True if s is a valid palindrome, False otherwise. # Normalize the string by converting to lowercase and removing non-alphanumeric characters normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Write a function to convert a given string to its Pig Latin version. Pig Latin is a language game where words are transformed by moving the first letter to the end and adding 'ay'. If a word starts with a vowel (a, e, i, o, u), add 'way' to the end. For example, \\"hello\\" becomes \\"ellohay\\", and \\"eat\\" becomes \\"eatway\\".","solution":"def to_pig_latin(word): Converts the given word to its Pig Latin version. if len(word) == 0: return word vowels = 'aeiouAEIOU' if word[0] in vowels: return word + 'way' else: return word[1:] + word[0] + 'ay'"},{"question":"Write a function to find the maximum element in an array using recursion.","solution":"def find_max_recursive(arr, n): Returns the maximum element in an array using recursion. :param arr: List of integers :param n: Length of the array segment to consider (start with len(arr) for the complete array) :return: Maximum element in the array # Base case: If the array has only one element, return that element if n == 1: return arr[0] # Recursive case: Compare the last element with the maximum of the previous elements return max(arr[n-1], find_max_recursive(arr, n-1))"},{"question":"Write a function to calculate the nth Fibonacci number in Python using dynamic programming. What is dynamic programming, and how does it solve Fibonacci numbers more efficiently than recursion?","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 # Initialize base cases fib = [0] * (n + 1) fib[1] = 1 # Compute each Fibonacci number uing the already known values of its subproblems for i in range(2, n + 1): fib[i] = fib[i-1] + fib[i-2] return fib[n]"},{"question":"Write a function to reverse a string in Python. The function should handle cases where the input string contains special characters and numbers. For example, the function should reverse a string like \\"Hello, World!123\\" to \\"321!dlroW ,olleH\\".","solution":"def reverse_string(s): Reverses the input string s, including special characters and numbers. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to remove all duplicate elements from a linked list in Python. The function should take a linked list as input and return a new linked list with no duplicates.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Removes all duplicate elements from a linked list. Parameters: head (ListNode): The head of the input linked list. Returns: ListNode: The head of the resultant linked list with no duplicates. if head is None: return head seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head"},{"question":"Write a function to build a binary tree from a level-order traversal string. Each node's left and right children are represented by \\"#\\" if the node does not have a child.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_level_order(level_order): Build a binary tree from a level order traversal string. Args: level_order (str): A string representing the level order traversal of the tree. Returns: TreeNode: The root node of the binary tree. if not level_order: return None levels = level_order.split() root = TreeNode(levels[0]) queue = [root] i = 1 while i < len(levels): current = queue.pop(0) if levels[i] != '#': current.left = TreeNode(levels[i]) queue.append(current.left) i += 1 if i < len(levels) and levels[i] != '#': current.right = TreeNode(levels[i]) queue.append(current.right) i += 1 return root"},{"question":"Write a function to multiply two matrices in Python. Ensure the function handles cases where the matrices are not compatible for multiplication and raises an appropriate exception in such cases.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. :param A: List of lists where each sublist represents a row in matrix A. :param B: List of lists where each sublist represents a row in matrix B. :return: Product of A and B as a new matrix. :raises ValueError: If matrices A and B are not compatible for multiplication. # Validate input dimensions if len(A[0]) != len(B): raise ValueError(\\"Matrices are not compatible for multiplication.\\") # Perform matrix multiplication result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a function to find the maximum sum of sub-arrays of a given size 'k' in an array of integers. The function should return the maximum sum found.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of size k. :param arr: List of integers :param k: Size of subarray :return: Maximum sum of a subarray of size k if not arr or k <= 0 or k > len(arr): return 0 max_sum = float('-inf') current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if i >= k - 1: max_sum = max(max_sum, current_sum) current_sum -= arr[i - (k - 1)] return max_sum"},{"question":"Write a function to check if a given number is a power of four. A number is a power of four if it is a power of two that has an even number of trailing zeros.","solution":"def is_power_of_four(n): Check if the given number is a power of four. Args: n (int): The number to check. Returns: bool: True if n is a power of four, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0 and (n & 0x55555555) != 0"},{"question":"Write a function to determine if a list is nearly sorted. A list is considered nearly sorted if at most one pair of adjacent elements in the list are out of order.","solution":"def is_nearly_sorted(lst): Determines if a list is nearly sorted. A list is considered nearly sorted if at most one pair of adjacent elements in the list are out of order. :param lst: List of elements to check :return: True if the list is nearly sorted, False otherwise if len(lst) <= 1: return True count = 0 for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: count += 1 if count > 1: return False return True"},{"question":"Write a function to find the reverse of a list.","solution":"def reverse_list(lst): Returns a new list which is the reverse of the input list. return lst[::-1]"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Then, use this function to find the factorial of a given number 'n' and print the result.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to generate the first n natural numbers in reverse order.","solution":"def reverse_natural_numbers(n): Generates the first n natural numbers in reverse order. if n <= 0: return [] return list(range(n, 0, -1))"},{"question":"Write a function to merge two sorted linked lists into a single sorted linked list. Assume that both linked lists are initially sorted in ascending order.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists l1 and l2 into a single sorted linked list. Args: l1 : ListNode The head of the first sorted linked list. l2 : ListNode The head of the second sorted linked list. Returns: ListNode The head of the merged sorted linked list. dummy = ListNode() tail = dummy while l1 and l2: if l1.value < l2.value: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next if l1: tail.next = l1 else: tail.next = l2 return dummy.next"},{"question":"Write a function to return a specific subset of rows from a matrix based on given row indices. The function should accept a 2D NumPy array and a list of row indices, and return a new array containing only those rows.","solution":"import numpy as np def subset_rows(matrix, row_indices): Returns a new array containing only the rows from the given matrix specified by the row_indices. Parameters: matrix (np.ndarray): 2D NumPy array from which to select rows. row_indices (list of int): List of indices specifying which rows to select. Returns: np.ndarray: New array containing only the selected rows. return matrix[row_indices]"},{"question":"Write a function to check if a given integer is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not. Implement a function \`is_palindrome(number)\` that returns \`True\` if the number is a palindrome and \`False\` otherwise.","solution":"def is_palindrome(number): Check if a given integer is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not. Args: number (int): The integer to check. Returns: bool: True if the number is a palindrome, False otherwise. str_number = str(number) return str_number == str_number[::-1]"},{"question":"Write a function to calculate the factorial of a number in Python. The function should handle large numbers efficiently and return the result as a string. To achieve this, you need to use Python's built-in \`BigInteger\` type. Additionally, write a check function to verify the correctness of your factorial function with provided data points.","solution":"def factorial(n): Returns the factorial of a number n using Python's BigInteger type. The result is returned as a string. if n < 0: return \\"Undefined\\" if n == 0: return \\"1\\" result = 1 for i in range(2, n + 1): result *= i return str(result)"},{"question":"Write a function to find the smallest number in a given array of integers. The function should be efficient and avoid unnecessary comparisons.","solution":"def find_smallest_number(arr): Returns the smallest number in a given array of integers. Parameters: arr (list): A list of integers. Returns: int: The smallest integer in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") smallest = arr[0] for num in arr[1:]: if num < smallest: smallest = num return smallest"},{"question":"Write a function to check if a number is a Mersenne prime. A Mersenne prime is a prime number that can be written as 2^p - 1 for some integer p. The function should also identify whether the number is a perfect square or a perfect cube. Provide the code in Python.","solution":"import math def is_prime(n): Returns True if n is prime, else False. if n <= 1: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_mersenne_prime(n): Returns a dictionary with the results if n is a Mersenne prime, a perfect square, or a perfect cube. if n < 1: return { \\"mersenne_prime\\": False, \\"perfect_square\\": False, \\"perfect_cube\\": False } # Check if n is a Mersenne prime p = 1 while (2 ** p) - 1 <= n: if (2 ** p) - 1 == n and is_prime(n): mersenne_prime = True break p += 1 else: mersenne_prime = False # Check if n is a perfect square sqrt_n = int(math.isqrt(n)) perfect_square = sqrt_n * sqrt_n == n # Check if n is a perfect cube cbrt_n = round(n ** (1 / 3)) perfect_cube = cbrt_n * cbrt_n * cbrt_n == n return { \\"mersenne_prime\\": mersenne_prime, \\"perfect_square\\": perfect_square, \\"perfect_cube\\": perfect_cube }"},{"question":"Write a function to return the sum of a list of numbers in Python.","solution":"def sum_list(numbers): Returns the sum of a list of numbers. :param numbers: List of numbers. :return: Sum of the numbers. return sum(numbers)"},{"question":"Write a function to calculate the shortest path in a weighted graph using Dijkstra's algorithm. Given a graph represented as an adjacency list where the keys are nodes and their values are dictionaries of neighboring nodes and corresponding edge weights, write a Python function to implement Dijkstra's algorithm and return the shortest path to a target node.","solution":"import heapq def dijkstra(graph, start, target): Perform Dijkstra's algorithm to find the shortest path from start to target in a weighted graph. :param graph: A dictionary representing the weighted graph (adjacency list). :param start: The starting node. :param target: The target node. :return: A tuple with the shortest distance and the path as a list of nodes. # Priority queue to keep track of the shortest distance to each node queue = [(0, start, [])] seen = set() distances = {start: 0} while queue: (current_distance, current_node, path) = heapq.heappop(queue) if current_node in seen: continue path = path + [current_node] seen.add(current_node) if current_node == target: return (current_distance, path) for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor, path)) return float(\\"inf\\"), [] # Example graph representation # graph = { # 'A': {'B': 1, 'C': 4}, # 'B': {'A': 1, 'C': 2, 'D': 5}, # 'C': {'A': 4, 'B': 2, 'D': 1}, # 'D': {'B': 5, 'C': 1}, # } # Use the function like this: # dijkstra(graph, 'A', 'D')"},{"question":"Write a function to determine if a given integer is a perfect square. The function should take an integer \`n\` as input and return \`True\` if \`n\` is a perfect square, and \`False\` otherwise. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared. However, 14 is not a perfect square because there is no integer that when squared equals 14. The function should handle both positive and negative integers, returning \`False\` for negative numbers since they cannot be perfect squares. Additionally, the function should efficiently handle large numbers without significant computational overhead.","solution":"import math def is_perfect_square(n): Determines if a given integer n is a perfect square. Args: n (int): The integer to be checked. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a function to rotate a square matrix.","solution":"def rotate_matrix(matrix): Rotates a square matrix by 90 degrees in a clockwise direction. if not matrix or not matrix[0]: return matrix n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # save top # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top # right <- saved top return matrix"},{"question":"Write a function to implement KMP Knuth-Morris-Pratt algorithm for substring search. The function should take two inputs - the main string and the substring. The function should return the starting index of the substring in the main string if found, otherwise return -1.","solution":"def kmp_search(main_string, substring): Implements the KMP (Knuth-Morris-Pratt) algorithm to search for a substring within a main string. Parameters: main_string (str): The string in which to search. substring (str): The substring to search for. Returns: int: The starting index of the substring if found, otherwise -1. # Function to generate the longest prefix suffix (LPS) array def compute_lps(pattern): lps = [0] * len(pattern) length = 0 # Length of the previous longest prefix suffix i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps # Edge case if substring is empty if not substring: return 0 n = len(main_string) m = len(substring) # Preprocess the substring (pattern) to get the LPS array lps = compute_lps(substring) # Start searching i = 0 # index for main_string j = 0 # index for substring while i < n: if main_string[i] == substring[j]: i += 1 j += 1 if j == m: return i - j # Found, return the starting index elif i < n and main_string[i] != substring[j]: if j != 0: j = lps[j - 1] else: i += 1 return -1"},{"question":"Write a function to generate Fibonacci numbers using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position of the Fibonacci sequence to return. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to compute the first N Fibonacci numbers using an iterative approach. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. The function should return the first N Fibonacci numbers as a list.","solution":"def fibonacci(n): Computes the first N Fibonacci numbers iteratively. :param n: the number of Fibonacci numbers to compute. :return: a list containing the first N Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to calculate the factorial of a number using recursion. In Python, how would you define this function?","solution":"def factorial(n): Calculate the factorial of a number using recursion. Parameters: n (int): The number to calculate the factorial for. Should be a non-negative integer. Returns: int: Factorial of the number n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to print the sum of all elements in an array using Python.","solution":"def sum_array(arr): Returns the sum of all elements in the array arr. return sum(arr)"},{"question":"Write a function to count the number of binary strings of a given length \`n\` that contain at least one '1'. If the length \`n\` is less than or equal to 0, the function should return 0. If \`n\` is 1, the function should return 1.","solution":"def count_binary_strings_with_at_least_one_one(n): Returns the number of binary strings of length n that contain at least one '1'. if n <= 0: return 0 if n == 1: return 1 return 2**n - 1"},{"question":"Write a function to insert a value into a sorted array. The function should ensure that the array remains sorted after the value is inserted.","solution":"def insert_into_sorted_array(arr, value): Inserts a value into a sorted array, maintaining the sorted order. Parameters: arr (list of int/float): A sorted list of integers or floats. value (int/float): The value to insert into the array. Returns: list of int/float: The sorted list after inserting the value. for i in range(len(arr)): if value < arr[i]: return arr[:i] + [value] + arr[i:] return arr + [value]"},{"question":"Write a function to find the maximum depth of a binary tree. How would you approach this problem in Python?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree rooted at \`root\`. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to calculate the factorial of a number. The function should take an integer as input and return the factorial of that number. If the input is less than 0, the function should return -1 to indicate an invalid input. The factorial of 0 is defined to be 1. Use recursion to solve the problem.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is less than 0, returns -1 to indicate an invalid input. if n < 0: return -1 elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to find the nth prime number in Python. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first five prime numbers are 2, 3, 5, 7, and 11.","solution":"def nth_prime(n): Returns the nth prime number. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") primes = [] candidate = 2 while len(primes) < n: for prime in primes: if candidate % prime == 0: break else: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"Write a function to find and list all prime numbers up to a given number \`n\`.","solution":"def find_primes(n): Returns a list of all prime numbers up to n (inclusive). if n < 2: return [] primes = [] for num in range(2, n+1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a function to return the product of all the numbers in the array from start to the end. In case of an empty array or null input, your function should return null.","solution":"def product_of_array(arr): if arr is None or len(arr) == 0: return None product = 1 for num in arr: product *= num return product"},{"question":"Write a function to convert an integer to its binary representation as a string without the '0b' prefix.","solution":"def int_to_binary_string(n): Converts an integer to its binary representation as a string without the '0b' prefix. Parameters: n (int): The integer to convert. Returns: str: The binary representation of the integer without the '0b' prefix. return bin(n)[2:]"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle negative numbers by returning an error message, as factorials for negative numbers are undefined.","solution":"def factorial(n): Returns the factorial of a number n. If n is negative, returns an error message. if n < 0: return \\"Error: Factorial of a negative number is undefined.\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Additionally, provide a mechanism to handle large numbers and potential stack overflow issues by implementing an iterative approach for large inputs.","solution":"def factorial(n): Returns the factorial of a number n using recursion for small inputs and iteration for large inputs to handle potential stack overflow issues. Threshold for switching to iteration is 20. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 if n <= 20: return n * factorial(n - 1) else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to merge K sorted arrays of different sizes, returning the smallest \`k*n\` elements from the combined arrays. Here, \`k\` is the number of arrays and \`n\` is the average size of the arrays. The function should handle cases with arrays of various sizes and different types of data (integer, float, etc.).","solution":"import heapq from typing import List, Union def merge_k_sorted_arrays(arrays: List[List[Union[int, float]]], k: int) -> List[Union[int, float]]: Merge k sorted arrays and return the smallest k*n elements from the combined arrays. Parameters: arrays (List[List[Union[int, float]]]): A list of sorted lists, each containing integers or floats. k (int): Number of arrays. Returns: List[Union[int, float]]: The smallest k*n elements from the combined arrays. # Combine all arrays into one sorted list using a min-heap min_heap = [] for array in arrays: for num in array: heapq.heappush(min_heap, num) # Calculate the number of elements required n = len(arrays) # Since k = number of arrays, if k arrays are passed, len(arrays) should be equal to k. result_size = k * n # Get the smallest k*n elements from the heap result = [] for _ in range(result_size): if min_heap: result.append(heapq.heappop(min_heap)) else: break return result"},{"question":"Write a function to find the maximum sum of elements within any continuous subarray of a given array (both positive and negative numbers). The function should return the maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of elements within any continuous subarray of a given array. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to compute the n-th Fibonacci number efficiently without using recursion.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to find the middle node of a singly linked list. If there are two middle nodes, return the second middle node. The function should be efficient and work in a single pass through the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def middleNode(head): Finds and returns the middle node of a singly linked list. If there are two middle nodes, returns the second middle node. slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to calculate the edit distance between two strings. The edit distance is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.","solution":"def edit_distance(str1, str2): Returns the edit distance between two strings. m = len(str1) n = len(str2) # Create a matrix to store the distances dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the matrix for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, remove all characters of str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a function to generate all permutations of a string. The order of the permutations does not matter.","solution":"def permute(s): Returns all permutations of the given string. if len(s) == 1: return [s] permutations = [] for i, char in enumerate(s): # For each character, find permutations of the string without that character for perm in permute(s[:i] + s[i+1:]): permutations.append(char + perm) return permutations"},{"question":"Write a function to reverse a string in Python, preserving spaces, punctuation, and capitalization. How can this be done efficiently?","solution":"def reverse_string(s): Returns the reversed version of the input string s, preserving spaces, punctuation, and capitalization. return s[::-1]"},{"question":"Write a function to merge two binary trees. If both nodes at the same position are not null, sum up their values. Otherwise, use the non-null node. If both are null, return null.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def merge_trees(t1, t2): if not t1 and not t2: return None if not t1: return t2 if not t2: return t1 merged_root = TreeNode(t1.val + t2.val) merged_root.left = merge_trees(t1.left, t2.left) merged_root.right = merge_trees(t1.right, t2.right) return merged_root"},{"question":"Write a function to check if a given Binary Search Tree (BST) is balanced. A BST is considered balanced if the height difference between the left and right subtree of any node is no more than 1, and both left and right subtrees are also balanced.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Returns true if the binary tree is balanced, false otherwise. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = 1 + max(left_height, right_height) is_current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, is_current_balanced _, balanced = check_height(root) return balanced"},{"question":"Write a function to sort a list of numbers using the Bubble Sort algorithm. The list can contain both positive and negative integers. Your function should return the sorted list.","solution":"def bubble_sort(lst): Sorts a list of numbers using the Bubble Sort algorithm. Args: lst (list): A list of integers (positive, negative, or zero). Returns: list: Sorted list of integers. n = len(lst) for i in range(n): swapped = False for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] swapped = True # If no two elements were swapped by inner loop, then break if not swapped: break return lst"},{"question":"Write a function to calculate factorial in Python, both recursively and iteratively. Also, explain the difference between these two approaches and when to use each in practical scenarios.","solution":"def factorial_recursive(n): Returns the factorial of n using recursion. if n == 0: return 1 return n * factorial_recursive(n - 1) def factorial_iterative(n): Returns the factorial of n using iteration. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to return the nth node from the end of a singly linked list. Suppose the length of the list is not known. The function should have O(n) time complexity and O(1) space complexity. The only access you have to the list are the method call - \`get_next\`, which returns the next node in the list, and \`data\`, which holds the data for the node.","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def get_nth_from_end(head, n): Returns the nth node from the end of a singly linked list. :param head: The head of the singly linked list. :param n: The position from the end to retrieve. :return: The nth node from the end or None if n is out of bounds. first = second = head count = 0 # Move the first pointer n nodes ahead while count < n: if not first: return None # n is greater than the length of the list first = first.next count += 1 # Move both pointers until first reaches end of list while first: first = first.next second = second.next return second"},{"question":"Write a function to perform a depth-first search on a graph represented by an adjacency matrix. The function should take the adjacency matrix and a starting node as input, and return the order in which nodes were visited during the DFS.","solution":"def dfs(adjacency_matrix, start_node): Performs a depth-first search (DFS) on a graph represented by an adjacency matrix. :param adjacency_matrix: List of lists representing the graph's adjacency matrix :param start_node: The starting node for the DFS :return: A list representing the order in which nodes were visited during the DFS number_of_nodes = len(adjacency_matrix) visited = [False] * number_of_nodes result = [] def dfs_visit(node): visited[node] = True result.append(node) for neighbor in range(number_of_nodes): if adjacency_matrix[node][neighbor] == 1 and not visited[neighbor]: dfs_visit(neighbor) dfs_visit(start_node) return result"},{"question":"Write a function to check if a given linked list contains a cycle. If a cycle is detected, return \`True\`; otherwise, return \`False\`. The function should only use O(1) extra space.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head): Checks if a given linked list contains a cycle. Uses O(1) extra space. :param head: ListNode, the head of the linked list :return: boolean. True if a cycle is detected, False otherwise if not head or not head.next: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Write a function to determine if all the values in one dictionary are within a specified range. The function should take three parameters: \`dictionary\` (the dictionary to check), \`lower_bound\` (the minimum allowed value), and \`upper_bound\` (the maximum allowed value). The function should return \`True\` if all values in the dictionary are within the range \`[lower_bound, upper_bound]\`, and \`False\` otherwise. If the dictionary is empty, the function should return \`True\` by default.","solution":"def are_values_within_range(dictionary, lower_bound, upper_bound): Returns True if all values in the dictionary are within the range [lower_bound, upper_bound]. Returns False otherwise. If the dictionary is empty, it returns True. Parameters: dictionary (dict): The dictionary to check. lower_bound (int/float): The minimum allowed value. upper_bound (int/float): The maximum allowed value. Returns: bool: True if all values in the dictionary are within range, False otherwise. for value in dictionary.values(): if value < lower_bound or value > upper_bound: return False return True"},{"question":"Write a function to convert a decimal number to its binary representation as a string. The function should handle numbers in the range of 0 to 1023.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. The function handles numbers in the range of 0 to 1023. :param n: A decimal number (0 <= n <= 1023) :return: Binary representation of n as a string if n < 0 or n > 1023: raise ValueError(\\"Input should be in the range 0 to 1023.\\") return bin(n)[2:]"},{"question":"Write a function to calculate the derivative of a polynomial. The polynomial is represented as a list of coefficients, where the nth element of the list represents the coefficient of the x^n term. The function should return a new list of coefficients representing the derivative of the polynomial.","solution":"def polynomial_derivative(coefficients): Returns the derivative of the polynomial represented by the list of coefficients. The nth element of the input list represents the coefficient of the x^n term. Parameters: coefficients (list): List of coefficients where the nth element is the coefficient of the x^n term. Returns: list: New list of coefficients representing the derivative of the polynomial. if len(coefficients) <= 1: return [] derivative = [i * coefficients[i] for i in range(1, len(coefficients))] return derivative"},{"question":"Write a function to find the sum of two numbers without using the \\"+\\" operator. You can use the bitwise operators to achieve this. Explain your approach and how it works.","solution":"def add_without_plus(a, b): Returns the sum of two integers without using the + operator. MAX_INT = 0x7FFFFFFF MASK = 0xFFFFFFFF while b != 0: # Calculate carry carry = (a & b) & MASK # Calculate sum without carry a = (a ^ b) & MASK # Left shift carry b = (carry << 1) & MASK # Handle negative numbers if a > MAX_INT: a = ~(a ^ MASK) return a"},{"question":"Write a function to identify the longest increasing subsequence (LIS) in a given list of integers. The function should return the LIS as a list of integers. If there are multiple possible answers, return any one of them. The time complexity of the function should be O(n^2).","solution":"def longest_increasing_subsequence(nums): Identifies the longest increasing subsequence (LIS) in the given list of integers. Args: nums (List[int]): The list of integers. Returns: List[int]: The longest increasing subsequence. if not nums: return [] n = len(nums) lis = [[] for _ in range(n)] lis[0].append(nums[0]) for i in range(1, n): for j in range(i): if nums[i] > nums[j] and len(lis[i]) < len(lis[j]) + 1: lis[i] = lis[j][:] lis[i].append(nums[i]) longest_seq = [] for seq in lis: if len(seq) > len(longest_seq): longest_seq = seq return longest_seq"},{"question":"Write a function to check if a string containing only parentheses '()' is valid. The function should return true if the string is valid, and false otherwise. A string is valid if every opening parenthesis '(' has a corresponding closing parenthesis ')' and the pairs of parentheses are properly nested.","solution":"def is_valid_parentheses(s): Check if a string containing only parentheses '()' is valid. A string is considered valid if every opening parenthesis '(' has a corresponding closing parenthesis ')' and the pairs of parentheses are properly nested. :param s: str :return: bool stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack or stack[-1] != '(': return False stack.pop() return not stack"},{"question":"Write a function to generate a list of even Fibonacci numbers within a given limit. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones (0, 1, 1, 2, 3, 5, 8, 13, 21, ...).","solution":"def even_fibonacci(limit): Returns a list of even Fibonacci numbers up to a given limit. a, b = 0, 1 result = [] while a <= limit: if a % 2 == 0: result.append(a) a, b = b, a + b return result"},{"question":"Write a function to check if two strings are anagrams (permutations of each other) by creating a frequency dictionary for each string and comparing them. If they are anagrams, return True; otherwise, return False.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams by comparing their frequency dictionaries. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, otherwise False. if len(str1) != len(str2): return False freq_dict1 = {} freq_dict2 = {} for char in str1: freq_dict1[char] = freq_dict1.get(char, 0) + 1 for char in str2: freq_dict2[char] = freq_dict2.get(char, 0) + 1 return freq_dict1 == freq_dict2"},{"question":"Write a function to evaluate the value of an arithmetic expression represented as a string. The expression contains only non-negative integers, '+', '-', '*', and '/' operators and may contain multiple pairs of parentheses to indicate the precedence of operations. Assume that the division between two integers should truncate toward zero. The function should handle all valid arithmetic expressions and return the evaluated result.","solution":"def evaluate_expression(expression): Evaluates the value of an arithmetic expression represented as a string. The expression contains only non-negative integers, '+', '-', '*', '/' operators and may contain multiple pairs of parentheses to indicate the precedence of operations. The division between two integers is truncated toward zero. def evaluate(tokens): stack = [] num = 0 sign = \\"+\\" while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \\"(\\": num = evaluate(tokens) if not token.isdigit() or not tokens: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack[-1] *= num elif sign == \\"/\\": stack[-1] = int(stack[-1] / num) sign = token num = 0 if token == \\")\\": break return sum(stack) tokens = [] i = 0 while i < len(expression): if expression[i] in \\"0123456789\\": num = expression[i] while i + 1 < len(expression) and expression[i + 1] in \\"0123456789\\": i += 1 num += expression[i] tokens.append(num) else: tokens.append(expression[i]) i += 1 return evaluate(tokens)"},{"question":"Write a function to find the maximum subarray sum in a given array of integers. This function should work efficiently even for large arrays, ideally with a time complexity of O(N). You should explain your solution and provide a code snippet.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array of integers. if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to find the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def find_missing_number(nums): Finds the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n. n = len(nums) total_sum = n * (n + 1) / 2 array_sum = sum(nums) return int(total_sum - array_sum)"},{"question":"Write a function to find the longest word in a given sentence.","solution":"def longest_word(sentence): Returns the longest word in the given sentence. If there are multiple words with the same length, the first one encountered is returned. words = sentence.split() max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Write a function to check if the input is a valid number in scientific notation. The function should return a boolean value indicating whether the input is a valid number in scientific notation or not.","solution":"import re def is_scientific_notation(s): Returns True if the input string s is in valid scientific notation, else False. A valid scientific notation has the form \\"aEb\\" where: - a is a floating-point number (with optional decimal point) - E is 'e' or 'E' - b is an integer which can be positive or negative Example: \\"1.23e10\\", \\"3E-4\\", \\"-2.45e+3\\" are valid. \\"123\\", \\"1.2.3e10\\", \\"12e\\" are not. pattern = re.compile(r'^[-+]?(d+(.d*)?|.d+)([eE][-+]?d+)') return bool(pattern.match(s))"},{"question":"Write a function to reverse a singly linked list in Python. The function should return the head of the reversed list. Also, discuss the time and space complexity of the function.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode - The head of the singly linked list. :return: ListNode - The head of the reversed singly linked list. prev = None curr = head while curr: next_temp = curr.next curr.next = prev prev = curr curr = next_temp return prev # Time complexity: O(n), where n is the number of nodes in the linked list. # Space complexity: O(1), as we are using a constant amount of space."},{"question":"Write a function to reverse the order of elements in a queue. You are not to use any additional data structures like extra lists, etc. You are allowed to use the built-in queue operations.","solution":"from collections import deque def reverse_queue(queue): Reverses the order of elements in the given queue. # base case if len(queue) == 0: return # dequeue current element (from front) elem = queue.popleft() # reverse the remaining queue reverse_queue(queue) # enqueue current element (to rear) queue.append(elem)"},{"question":"Write a function to simulate a dice roll. The function should return a random number between 1 and 6, representing the face of the dice.","solution":"import random def roll_dice(): Returns a random integer between 1 and 6, simulating the roll of a dice. return random.randint(1, 6)"},{"question":"Write a function to convert a given string to reverse case, where all lowercase letters become uppercase and all uppercase letters become lowercase.","solution":"def reverse_case(s): Converts all lowercase letters to uppercase and all uppercase letters to lowercase in the given string. return s.swapcase()"},{"question":"Write a function to swap two numbers without using a temporary variable. However, you can use any arithmetic or logical operations. How would you implement it?","solution":"def swap_numbers(a, b): Swaps two numbers without using a temporary variable. # Using arithmetic operations to swap numbers a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to find the sum of all even numbers in a given list of integers. Here's a code snippet that you can start with.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function to calculate the sum of all elements in a 2D list (list of lists) in Python. The function should handle cases where the 2D list may contain non-numeric values by ignoring them.","solution":"def sum_2d_list(matrix): Returns the sum of all numeric elements in a 2D list. Args: matrix (list of lists): A 2D list that may contain non-numeric elements. Returns: int or float: The sum of all numeric elements in the 2D list. total_sum = 0 for row in matrix: for element in row: if isinstance(element, (int, float)): total_sum += element return total_sum"},{"question":"Write a function to calculate the n-th Fibonacci number using dynamic programming. The function should have a time complexity of O(n).","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n <= 1: return n fib = [0, 1] for i in range(2, n + 1): fib.append(fib[i - 1] + fib[i - 2]) return fib[n]"},{"question":"Write a function to find all permutations of a given string. For example, if the input is \\"abc\\", the function should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"from itertools import permutations def find_permutations(s): Returns all permutations of a given string. return [''.join(p) for p in permutations(s)]"},{"question":"Write a function to find strongly connected components in a directed graph. Implement the function using Kosaraju's algorithm.","solution":"from collections import defaultdict def kosaraju_scc(graph): Returns the list of strongly connected components in the given directed graph using Kosaraju's Algorithm. Parameters: graph (dict): A dictionary representing the directed graph where keys are vertices and values are lists of adjacent vertices. Returns: list: A list of lists where each sublist is a strongly connected component. def dfs(v, graph, visited, stack=None): visited[v] = True for neighbour in graph[v]: if not visited[neighbour]: dfs(neighbour, graph, visited, stack) if stack is not None: stack.append(v) def get_transpose(graph): transposed_graph = defaultdict(list) for v in graph: for neighbour in graph[v]: transposed_graph[neighbour].append(v) return transposed_graph # Step 1: Order vertices by finish time in decreasing order stack = [] visited = {v: False for v in graph} for v in graph: if not visited[v]: dfs(v, graph, visited, stack) # Step 2: Transpose the graph transposed_graph = get_transpose(graph) # Step 3: DFS on transposed graph in the decreasing order of finish time visited = {v: False for v in graph} scc = [] while stack: v = stack.pop() if not visited[v]: component_stack = [] dfs(v, transposed_graph, visited, component_stack) scc.append(component_stack) return scc"},{"question":"Write a function to print the full name of a person with a given first name and last name.","solution":"def get_full_name(first_name, last_name): Returns the full name composed of the given first name and last name. return f\\"{first_name} {last_name}\\""},{"question":"Write a function to find the maximum length of a subarray with a sum equal to a given number \`k\`. The function should take an array of integers and the integer \`k\` as input and return the length of the longest subarray that sums to \`k\`.","solution":"def max_length_subarray_sum_k(arr, k): Find the maximum length of a subarray with a sum equal to k. Args: arr (list of int): The list of integers. k (int): The sum to check for. Returns: int: The maximum length of subarray whose sum is equal to k. sum_map = {} max_len = 0 curr_sum = 0 for i in range(len(arr)): curr_sum += arr[i] if curr_sum == k: max_len = i + 1 if (curr_sum - k) in sum_map: max_len = max(max_len, i - sum_map[curr_sum - k]) if curr_sum not in sum_map: sum_map[curr_sum] = i return max_len"},{"question":"Write a function to create a 2D array of random integers in Python. The function should take the number of rows and columns as parameters and return a 2D array filled with random integers between 0 and 9.","solution":"import random def create_2d_array(rows, cols): Creates a 2D array of random integers between 0 and 9. Args: rows (int): Number of rows in the 2D array. cols (int): Number of columns in the 2D array. Returns: list: 2D array of random integers between 0 and 9. return [[random.randint(0, 9) for _ in range(cols)] for _ in range(rows)]"},{"question":"Write a function to reverse the digits of a signed 32-bit integer. If reversing causes the numerical value to overflow beyond the limits of a 32-bit signed integer, then return 0. The function should handle both positive and negative integers.","solution":"def reverse_signed_32_bit_integer(x): Reverses the digits of a signed 32-bit integer. If the reversed integer overflows, returns 0. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = 1 if x >= 0 else -1 x_abs_str = str(abs(x)) reversed_x_abs_str = x_abs_str[::-1] reversed_x = sign * int(reversed_x_abs_str) if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Write a function to check whether a list of integers is sorted in non-decreasing order and contains no duplicates. There should be no adjacent elements that are the same as the previous ones.","solution":"def is_sorted_no_duplicates(lst): Checks if the given list of integers is sorted in non-decreasing order and contains no duplicates. if not lst: return True for i in range(1, len(lst)): if lst[i] <= lst[i-1]: return False return True"},{"question":"Write a function to perform a merge sort on an array of integers using a bottom-up approach. The function should take an array of integers as input and return a new array that is sorted in ascending order. Additionally, the function should be able to handle arrays with duplicate values.","solution":"def merge_sort_bottom_up(arr): Perform a bottom-up merge sort on an array of integers. :param arr: List of integers to sort :return: New list with sorted integers in ascending order if len(arr) <= 1: return arr width = 1 n = len(arr) while width < n: for i in range(0, n, 2 * width): left = arr[i:i+width] right = arr[i+width:i+2*width] merged = merge(left, right) arr[i:i+2*width] = merged width *= 2 return arr def merge(left, right): Merge two sorted lists into one sorted list. :param left: First sorted list :param right: Second sorted list :return: Merged and sorted list result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result"},{"question":"Write a function to generate all possible subsets of a given set of numbers, including the empty set and the set itself.","solution":"from itertools import chain, combinations def all_subsets(nums): Generate all possible subsets of a given set of numbers. :param nums: List of numbers :return: List of lists, where each list is a subset of the input list return list(chain.from_iterable(combinations(nums, r) for r in range(len(nums) + 1)))"},{"question":"Write a function to count the number of words in a given sentence. The function should return the total number of words.","solution":"def count_words(sentence): Returns the number of words in the given sentence. words = sentence.split() return len(words)"},{"question":"Write a function to find the maximum sum of non-adjacent elements in a given array of integers.","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 if len(nums) == 1: return nums[0] include = 0 exclude = 0 for num in nums: new_exclude = max(exclude, include) include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"Write a function to return an object containing the count of each character in a given string.","solution":"def char_count(s): Returns a dictionary with the count of each character in the string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a function to find the order of magnitude of a given positive number. The function should return the highest power of 10 that is less than or equal to the given number. For example, for the number 1234, the order of magnitude is 1000.","solution":"def order_of_magnitude(n): Returns the highest power of 10 that is less than or equal to the given positive number n. magnitude = 1 while magnitude * 10 <= n: magnitude *= 10 return magnitude"},{"question":"Write a function to merge two sorted arrays of integers into a single sorted array. In Python, how can this be done?","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged_array = [] i = j = 0 # Merge the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function to generate all possible permutations of a given string \`s\` using a backtracking approach in depth-first-search (DFS) and store the result in a list of strings.","solution":"def permute(s): Generates all possible permutations of the given string \`s\`. def dfs(path, used, res): if len(path) == len(s): res.append(\\"\\".join(path)) return for i, char in enumerate(s): if used[i]: continue used[i] = True path.append(char) dfs(path, used, res) path.pop() used[i] = False result = [] dfs([], [False] * len(s), result) return result"},{"question":"Write a function to calculate the total time taken for a task to be completed in a distributed system, considering the tasks are distributed among multiple nodes. Each node processes the tasks independently and the time taken varies. The function should take a list of task processing times for each node as input.","solution":"def total_time(task_times): Calculate the total time taken for a task to be completed in a distributed system. This is determined by the maximum time taken among all nodes. Parameters: task_times (list): A list of integers where each integer represents the time taken by a node to process the task. Returns: int: The total time taken for the task to be completed. if not task_times: return 0 return max(task_times)"},{"question":"Write a function to calculate the average of all numbers in an array of integers except the smallest and the largest two. If the array has less than 4 elements, return an integer with value 0.","solution":"def average_without_extremes(nums): Computes the average of an array of integers excluding the smallest and the largest two numbers. If the array has less than 4 elements, return 0. if len(nums) < 4: return 0 nums.sort() relevant_nums = nums[2:-2] # removes the smallest 2 and largest 2 elements if not relevant_nums: return 0 return sum(relevant_nums) / len(relevant_nums)"},{"question":"Write a function to find the first non-repeating character in a given string. If no such character exists, return 'No unique character found'.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string s. If no such character exists, return 'No unique character found'. count = {} # Count the frequency of each character for char in s: if char in count: count[char] += 1 else: count[char] = 1 # Find the first non-repeating character for char in s: if count[char] == 1: return char return 'No unique character found'"},{"question":"Write a function to find the minimum number of deletions required to make an array sorted.","solution":"def min_deletions_to_sort(arr): Returns the minimum number of deletions required to make the array sorted. n = len(arr) if n <= 1: return 0 # Find the length of the longest increasing subsequence lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The minimum deletions required is the total elements minus the length of LIS length_of_lis = max(lis) return n - length_of_lis"},{"question":"Write a function to reverse the given line of text.","solution":"def reverse_text(line): Returns the reversed version of the given line of text. return line[::-1]"},{"question":"Write a function to encrypt and decrypt messages using the Caesar cipher. The function should take the text and shift count as parameters and return the encrypted or decrypted text.","solution":"def caesar_cipher(text, shift, encrypt=True): Encrypts or decrypts a message using the Caesar cipher. Parameters: text (str): the text to be encrypted or decrypted. shift (int): the number of positions each character in the text is to be moved. encrypt (bool): True for encryption, False for decryption. Defaults to True. Returns: str: the encrypted or decrypted text. if not encrypt: shift = -shift encrypted_text = [] for char in text: if char.isalpha(): ascii_offset = ord('A') if char.isupper() else ord('a') idx = (ord(char) - ascii_offset + shift) % 26 new_char = chr(ascii_offset + idx) encrypted_text.append(new_char) else: encrypted_text.append(char) return \\"\\".join(encrypted_text)"},{"question":"Write a function to return the middle element of array. If the array has an odd length, return the middle element. If the array has an even length, return the middle two elements.","solution":"def middle_element(arr): Returns the middle element of the array. If the array has an odd length, return the single middle element. If the array has an even length, return a tuple containing the middle two elements. n = len(arr) if n == 0: return None mid = n // 2 if n % 2 == 0: return (arr[mid - 1], arr[mid]) else: return arr[mid]"},{"question":"Write a function to count the number of elements in a list and return the count.","solution":"def count_elements(lst): Returns the number of elements in the list. return len(lst)"},{"question":"Write a function to calculate the exponentially weighted moving average (EWMA) for a sequence of values in a list. The function should also be able to handle the calculation for missing values (NaN).","solution":"def calculate_ewma(values, alpha): Calculates the Exponentially Weighted Moving Average (EWMA) for a sequence of values. Args: values (list): A list of numeric values (floats or ints). Can contain NaN values. alpha (float): Smoothing factor between 0 and 1. Returns: list: A list of EWMA values. ewma = [] current_ewma = None for value in values: if value is None: ewma.append(None) else: if current_ewma is None: current_ewma = value else: current_ewma = alpha * value + (1 - alpha) * current_ewma ewma.append(current_ewma) return ewma"},{"question":"Write a function to create a symmetric dense matrix from a vector.","solution":"import numpy as np def create_symmetric_matrix(vector): Creates a symmetric dense matrix from a given one-dimensional vector. The length of the vector should be n*(n+1)/2 for some positive integer n, indicating the number of unique elements in an n x n symmetric matrix. Parameters: vector (list or numpy array): The input vector containing the elements. Returns: numpy array: The resulting symmetric matrix. Raises: ValueError: If the length of vector does not form a valid symmetric matrix. # Calculate the size of the symmetric matrix n_elements = len(vector) n = int((np.sqrt(1 + 8 * n_elements) - 1) / 2) if n * (n + 1) // 2 != n_elements: raise ValueError(\\"The length of the vector does not form a valid symmetric matrix.\\") # Initialize an empty matrix matrix = np.zeros((n, n)) # Fill the upper triangular part of the matrix k = 0 for i in range(n): for j in range(i, n): matrix[i, j] = vector[k] matrix[j, i] = vector[k] k += 1 return matrix"},{"question":"Write a function to check if a string contains only digits. If it does, return true; otherwise, return false.","solution":"def is_digit_only(string): Check if the provided string contains only digits. Args: string (str): Input string to check. Returns: bool: True if the string contains only digits, False otherwise. return string.isdigit()"},{"question":"Write a function to find the next greater element to the left of each element in an integer array. The function should return an array where each entry at index \`i\` contains the next greater element to the left of \`arr[i]\`. If no such element exists, the corresponding entry in the output array should be \`-1\`.","solution":"def next_greater_to_left(arr): Find the next greater element to the left of each element in the given array. Parameters: arr (list of int): The input array of integers. Returns: list of int: An array where each entry at index \`i\` contains the next greater element to the left of \`arr[i]\`. If no such element exists, the entry is \`-1\`. stack = [] result = [] for num in arr: while stack and stack[-1] <= num: stack.pop() if stack: result.append(stack[-1]) else: result.append(-1) stack.append(num) return result"},{"question":"Write a function to find the minimum element in a circularly sorted array. The circularly sorted array means the array is sorted in ascending order and then rotated at some position. For example, [4,5,6,7,0,1,2] is circularly sorted as it was initially [0,1,2,4,5,6,7].","solution":"def find_min_in_circular_sorted_array(arr): Finds the minimum element in a circularly sorted array. Parameters: arr (list): A circularly sorted list of integers. Returns: int: The minimum element in the array. if not arr: raise ValueError(\\"Array is empty\\") left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to check if a given list of numbers contains any pair of numbers that sum up to a specific target. Your function should return True if such a pair exists, and False otherwise. Use the concept of hash set for an efficient solution.","solution":"def has_pair_with_sum(numbers, target): Returns True if there are any two distinct numbers in 'numbers' that add up to 'target'. Otherwise, returns False. number_set = set() for number in numbers: if target - number in number_set: return True number_set.add(number) return False"},{"question":"Write a function to reverse a linked list using recursion in Python. Your function should take the head of the linked list as an argument and return the new head of the reversed linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list_recursively(head): Reverses a linked list using recursion. :param head: The head node of the linked list :return: The new head node of the reversed linked list if head is None or head.next is None: return head new_head = reverse_linked_list_recursively(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function to calculate the factorial of a number using recursion. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. Recursion is when a function directly or indirectly calls itself.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to merge two sorted arrays into one sorted array. The function should take two arrays, \`A\` and \`B\`, as input, and return a new sorted array that contains all elements from both \`A\` and \`B\`. If there are duplicate elements, they should be included in the final array in the order they appear in either \`A\` or \`B\`.","solution":"def merge_sorted_arrays(A, B): Merges two sorted arrays A and B into one sorted array. :param A: List[int] - The first sorted array :param B: List[int] - The second sorted array :return: List[int] - The merged sorted array merged_array = [] i, j = 0, 0 # Traverse both arrays and append smaller element to merged_array while i < len(A) and j < len(B): if A[i] <= B[j]: merged_array.append(A[i]) i += 1 else: merged_array.append(B[j]) j += 1 # Append any remaining elements from A or B while i < len(A): merged_array.append(A[i]) i += 1 while j < len(B): merged_array.append(B[j]) j += 1 return merged_array"},{"question":"Write a function to find the maximum number of items you can carry without exceeding the capacity of a knapsack. This is known as the 0/1 knapsack problem. The function should take a list of item weights, a list of item values, and the capacity of the knapsack as inputs, and return the maximum value that can be obtained without exceeding the capacity.","solution":"def knapsack(weights, values, capacity): Returns the maximum value that can be obtained without exceeding the capacity of the knapsack. :param weights: List of weights of the items :param values: List of values of the items :param capacity: Maximum capacity of the knapsack :return: Maximum value that can be obtained without exceeding the capacity n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a function to solve the knapsack problem using a greedy algorithm. The function should take three parameters: \`weights\`, \`values\`, and \`capacity\`. Each is a list of integers where \`weights\` and \`values\` correspond to the weights and values of the items, respectively, and \`capacity\` is an integer representing the maximum capacity of the knapsack.","solution":"def knapsack_greedy(weights, values, capacity): Solve the knapsack problem using a greedy algorithm. Parameters: weights (list of int): Weights of the items. values (list of int): Values of the items. capacity (int): Maximum capacity of the knapsack. Returns: int: Maximum total value that can be accommodated in the knapsack. n = len(weights) # Calculate value to weight ratio for each item ratios = [(values[i] / weights[i], weights[i], values[i]) for i in range(n)] # Sort items by value to weight ratio in descending order ratios.sort(reverse=True, key=lambda x: x[0]) total_value = 0 for ratio, weight, value in ratios: if capacity >= weight: # Take the whole item capacity -= weight total_value += value else: # Take fraction of the last item that fits total_value += value * (capacity / weight) break return total_value"},{"question":"Write a function to sort an array of integers in ascending order without using the built-in sort function. Use Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to calculate the sum of the squares of all even numbers in a list of integers. Your function should take a list of integers as input and return the sum of squares of the even numbers in the list.","solution":"def sum_of_squares_of_evens(numbers): Returns the sum of the squares of all even numbers in the list. Args: numbers (list): A list of integers. Returns: int: Sum of squares of all even numbers. return sum(x**2 for x in numbers if x % 2 == 0)"},{"question":"Write a function to generate all subsets of a set of integers. The solution should be implemented using recursion.","solution":"def subsets(nums): Return all possible subsets of a list of integers. def recurse(index, path): # If the index reaches the length of nums, add the current subset path to results if index == len(nums): results.append(path) return # Recurse by including the current number recurse(index + 1, path + [nums[index]]) # Recurse by not including the current number recurse(index + 1, path) results = [] recurse(0, []) return results"},{"question":"Write a function to search an element in a linked list recursively. If the element is found, return \`true\`, otherwise, return \`false\`. The linked list is represented by nodes where each node contains data and a pointer to the next node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def search_element_recursively(node, target): Returns true if the target element is found in the linked list, otherwise false. if node is None: return False if node.value == target: return True return search_element_recursively(node.next, target)"},{"question":"Write a function to print the binary representation of a given integer number in Python. The function should return the binary string without the '0b' prefix that Python's built-in functions include.","solution":"def to_binary_string(n): Returns the binary representation of the given integer n without the '0b' prefix. return bin(n)[2:]"},{"question":"Write a function to check if a given string is a valid IPv4 address. The function should return true if the string is a valid IPv4 address, otherwise return false. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots.","solution":"def is_valid_ipv4_address(ip): Returns True if the given string is a valid IPv4 address, otherwise False. parts = ip.split('.') # Check if there are exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part should be a number between 0 and 255 if not part.isdigit() or not 0 <= int(part) <= 255: return False # Check if part does not have leading zeros unless it is '0' if part.startswith('0') and len(part) > 1: return False return True"},{"question":"Write a function to calculate the area of a triangle given the coordinates of its three vertices.","solution":"def triangle_area(x1, y1, x2, y2, x3, y3): Calculate the area of a triangle given the coordinates of its three vertices (x1, y1), (x2, y2), (x3, y3). The formula used is the absolute value of the determinant: Area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) return 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2))"},{"question":"Write a function to determine whether a given string \`s\` is a palindrome. A string is considered a palindrome if it reads the same backward as forward, ignoring cases, spaces, and punctuation. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome.","solution":"import re def is_palindrome(s): Determines if the input string is a palindrome, ignoring cases, spaces, and punctuation. Args: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a function to calculate the number of ways to arrange 'n' distinct items in a circle, considering two arrangements identical if one can be obtained from the other by rotation.","solution":"def circular_permutations(n): Returns the number of distinct ways to arrange 'n' distinct items in a circle. if n <= 0: return 0 elif n == 1: return 1 else: return factorial(n - 1) def factorial(num): Helper function to compute the factorial of a given number. if num <= 1: return 1 else: return num * factorial(num - 1)"},{"question":"Write a function to determine the number of shortest paths from the top-left corner to the bottom-right corner of a grid, where each step can only be towards the right or downwards. The grid may contain obstacles represented by \`1\`s, and empty spaces by \`0\`s. If a cell contains an obstacle, a path cannot pass through it.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique shortest paths from the top-left corner to the bottom-right corner of a grid, where each step can only be towards the right or downwards. \`1\` represents an obstacle and \`0\` represents an empty space. if not grid or grid[0][0] == 1: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = 1 for i in range(rows): for j in range(cols): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"Write a function to calculate the number of prime numbers less than a non-negative integer n using the Sieve of Eratosthenes algorithm. The function should be efficient and handle large inputs.","solution":"def count_primes(n): Returns the number of prime numbers less than a non-negative integer n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n, i): is_prime[j] = False return sum(is_prime)"},{"question":"Write a function to convert a Roman numeral to an integer. The function should take a string as input and return the corresponding integer. The Roman numeral string is given in capital letters (e.g., \\"III\\" for 3, \\"IV\\" for 4, \\"IX\\" for 9, etc.).","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: A string representing the Roman numeral. :return: An integer representation of the Roman numeral. roman_to_int_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } integer_value = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < prev_value: integer_value -= current_value else: integer_value += current_value prev_value = current_value return integer_value"},{"question":"Write a function to find the leftmost character that repeats in a string using a dictionary. How can you optimize this function to improve its performance for longer strings?","solution":"def leftmost_repeating_char(s): Finds the leftmost character that repeats in a string using a dictionary. Returns the character if found, otherwise returns None. char_indices = {} for i, char in enumerate(s): if char in char_indices: return char else: char_indices[char] = i return None"},{"question":"Write a function to implement a basic URL router that can handle routing based on the HTTP method and URL pattern. The router should support multiple routes and return the appropriate handler based on the current request.","solution":"class BasicRouter: def __init__(self): self.routes = {} def add_route(self, method, pattern, handler): Adds a route to the router. if method not in self.routes: self.routes[method] = {} self.routes[method][pattern] = handler def resolve(self, method, url): Resolves the URL to the appropriate handler based on the method. Returns the handler if found, else returns None. if method in self.routes: if url in self.routes[method]: return self.routes[method][url] return None"},{"question":"Write a function to implement the insertion sort algorithm. Insertion sort is a simple sorting algorithm that works by building the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Parameters: arr (list): A list of comparable elements to be sorted. Returns: list: The sorted list. # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, to one position # ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to check if a given number is a square number.","solution":"import math def is_square(n): Check if the given number n is a square number. Args: n (int): The number to check. Returns: bool: True if n is a square number, False otherwise. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a function to transform a string by reversing the case of each character. For example, if the input string is \\"Hello World\\", the function should return \\"hELLO wORLD\\".","solution":"def reverse_case(s): Transforms the input string by reversing the case of each character. Uppercase characters are converted to lowercase and vice versa. return ''.join([c.lower() if c.isupper() else c.upper() for c in s])"},{"question":"Write a function to extract the maximum and minimum values from an array.","solution":"def find_max_min(arr): Returns the maximum and minimum values from the array \`arr\`. Parameters: arr (list): A list of numerical values. Returns: tuple: A tuple containing the maximum and minimum values respectively. if not arr: return (None, None) max_val = max(arr) min_val = min(arr) return (max_val, min_val)"},{"question":"Write a function to find the maximum product of three numbers in a given array of integers. The function should handle both positive and negative numbers, as well as duplicates. The function should return the maximum product possible. If the array contains less than three numbers, return 0.","solution":"def maximum_product(nums): Finds the maximum product of three numbers in the given array of integers. Handles both positive and negative numbers, as well as duplicates. Returns 0 if there are less than three numbers in the array. if len(nums) < 3: return 0 nums.sort() # The maximum product can be obtained in two ways: # 1. The product of the three largest numbers. # 2. The product of the two smallest numbers (which could be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function to remove duplicates from an array. For example, given the array [1, 2, 2, 3, 3, 3], the function should return [1, 2, 3].","solution":"def remove_duplicates(arr): Removes duplicates from an array. Parameters: arr (list): The input list from which duplicates need to be removed. Returns: list: A list with duplicates removed. return list(dict.fromkeys(arr))"},{"question":"Write a function to calculate the sum of an array of integers in Python.","solution":"def sum_array(arr): Returns the sum of an array of integers. Parameters: arr (list): A list of integers. Returns: int: The sum of the elements in the array. return sum(arr)"},{"question":"Write a function to generate all subsequences of a string with removal of consecutive duplicates.","solution":"def remove_consecutive_duplicates(s): Returns a string by removing consecutive duplicates from the input string s. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result) def all_subsequences(s): Returns all unique subsequences of the string s with consecutive duplicates removed. subsequences = set() def generate_subsequences(current, index): if index == len(s): subsequences.add(remove_consecutive_duplicates(current)) return # Exclude the current character generate_subsequences(current, index + 1) # Include the current character generate_subsequences(current + s[index], index + 1) generate_subsequences(\\"\\", 0) return list(subsequences)"},{"question":"Write a function to rotate a matrix of size n x n by 90 degrees in clockwise direction. The function should take a 2D vector as input and return the rotated 2D vector. If the input matrix is empty, return an empty 2D vector.","solution":"def rotate_matrix_90_deg_clockwise(matrix): Rotates a given n x n matrix by 90 degrees in the clockwise direction. :param matrix: List of lists where each sub-list is a row of the matrix :return: Rotated matrix if not matrix or not matrix[0]: return [] n = len(matrix) # Create a new matrix for the rotated version rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function to count the number of 'a' characters in a string and print the result. Create a loop that iterates through each character of the string.","solution":"def count_a_characters(s): Counts the number of 'a' characters in the string s. Parameters: s (str): The input string. Returns: int: The count of 'a' characters in the string. count = 0 for char in s: if char == 'a': count += 1 print(count) return count"},{"question":"Write a function to calculate the factorial of a given number n. The function should handle the case when n is 0 or 1 appropriately and use recursion to compute the factorial for larger values of n.","solution":"def factorial(n): Returns the factorial of n using recursion. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of the given number n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to binary search an array for a given element.","solution":"def binary_search(arr, target): Performs a binary search for the target in the sorted array arr. Returns the index of target if found, else returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to check if a given string of parentheses is balanced. The function should return \`True\` if every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are properly nested. Otherwise, it should return \`False\`.","solution":"def are_parentheses_balanced(s): Checks if the given string of parentheses is balanced. :param s: str, input string containing parentheses :return: bool, True if balanced, otherwise False stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function to remove duplicates from a list while preserving the order of elements as they appeared in the original list. In Python, you can use a list to store that has a property of elements being unique, which is impossible to achieve with a regular list without additional programming. Use a list comprehension to achieve this.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while preserving the order. seen = set() return [x for x in input_list if x not in seen and not seen.add(x)]"},{"question":"Write a function to find the minimum element in a given array using Python. The function should use a for loop or while loop to traverse the array and identify the smallest element. Assume the array will not be empty.","solution":"def find_minimum(arr): Finds the minimum element in a given array. Parameters: arr (list): A list of numeric elements. Returns: The minimum element in the array. minimum = arr[0] for num in arr: if num < minimum: minimum = num return minimum"},{"question":"Write a function to generate the nth Fibonacci sequence number WITHOUT using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth Fibonacci sequence number. a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"Write a function to find the minimum of three numbers. The function should take three integer arguments and return the smallest one. If the smallest number has duplicates, the function should return any one of the duplicates. For example, given the numbers 1, 2, and 3, the function should return 1. If the numbers 4, 2, and 2, the function should return 2. If 5, 5, and 1, the function should return 1.","solution":"def find_minimum_of_three(a, b, c): Returns the minimum of the three given integers. return min(a, b, c)"},{"question":"Write a function to calculate the average of three numbers in Python. This function should take three arguments and return their average.","solution":"def average_of_three(a, b, c): Returns the average of three numbers a, b, and c. return (a + b + c) / 3"},{"question":"Write a function to search through a sorted array and find the index of a specific value using binary search.","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the index of the target value. If the target value is not found, returns -1. :param arr: List of sorted elements. :param target: The value to search for. :return: Index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to convert a list of strings into a single string, separated by commas. If the list is empty, return an empty string.","solution":"def list_to_string(lst): Converts a list of strings into a single string, separated by commas. If the list is empty, returns an empty string. return ','.join(lst)"},{"question":"Write a function to check if a given string is a valid bracket sequence of type '[]' (square brackets). A string is considered a valid bracket sequence if it is composed only of square brackets and the brackets are tightly nested, meaning each opening bracket '[' has a corresponding closing bracket ']' in the correct order.","solution":"def is_valid_bracket_sequence(s: str) -> bool: Checks if the given string is a valid bracket sequence of type '[]'. A string is considered a valid bracket sequence if each opening bracket '[' has a corresponding closing bracket ']' in the correct order. Args: s (str): The string to check. Returns: bool: True if the string is a valid bracket sequence, False otherwise. count = 0 for char in s: if char == '[': count += 1 elif char == ']': count -= 1 if count < 0: return False return count == 0"},{"question":"Write a function to print a chessboard. The function should take in an integer argument \`n\` and print an \`n\` x \`n\` chessboard, where black cells are represented by '*' and white cells are represented by '.'.","solution":"def print_chessboard(n): Print an n x n chessboard where black cells are represented by '*' and white cells are represented by '.'. chessboard = [] for row in range(n): chessboard_row = [] for col in range(n): if (row + col) % 2 == 0: chessboard_row.append('.') else: chessboard_row.append('*') chessboard.append(''.join(chessboard_row)) for row in chessboard: print(row)"},{"question":"Write a function to return the subset of a list that contains only distinct elements.","solution":"def distinct_elements(lst): Returns a list containing only the distinct elements from the input list. return list(set(lst))"},{"question":"Write a function to identify the smallest common multiple (SCM) among three input integers. The SCM is the smallest positive integer that is divisible by each of the integers without leaving a remainder.","solution":"import math def scm(x, y, z): Returns the smallest common multiple of three input integers x, y, and z. def lcm(a, b): return abs(a * b) // math.gcd(a, b) # First find the LCM of x and y, then find the LCM of the result with z lcm_xy = lcm(x, y) lcm_xyz = lcm(lcm_xy, z) return lcm_xyz"},{"question":"Write a function to replace all the vowels in a string with the next consonant in the English alphabet. For example, 'a' should become 'b', 'e' should become 'f', etc. Non-alphabetic characters should remain unchanged.","solution":"def replace_vowels_with_next_consonant(s): Replaces all vowels in the string with the next consonant in the English alphabet. Non-alphabetic characters remain unchanged. Parameters: s (str): The input string. Returns: str: The modified string with vowels replaced. vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'} result = '' for char in s: if char in vowels: result += vowels[char] else: result += char return result"},{"question":"Write a function to calculate the sum of a geometric series. A geometric series is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed, non-zero number called the ratio. The function should take three parameters: the first term of the series (a), the common ratio (r), and the number of terms (n). The function should return the sum of the first n terms of the geometric series.","solution":"def geometric_series_sum(a, r, n): Returns the sum of the first n terms of a geometric series with first term a and common ratio r. if r == 1: return a * n return a * (1 - r ** n) / (1 - r)"},{"question":"Write a function to find the longest subarray with equal number of 0s and 1s in a given binary array.","solution":"def findMaxLength(nums): Finds the longest subarray with equal number of 0s and 1s in a given binary array. count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += -1 if num == 0 else 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Then, write a function to calculate the factorial of a number using an iterative approach in Python.","solution":"def factorial_recursive(n): Returns the factorial of a number using recursion. if n == 0: return 1 else: return n * factorial_recursive(n-1) def factorial_iterative(n): Returns the factorial of a number using an iterative approach. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to print a message to the console.","solution":"def print_message(message): Prints a message to the console. print(message)"},{"question":"Write a function to return a list of n empty lists. \`output = create_empty_lists(3);\` should result in \`output = [[]];\`","solution":"def create_empty_lists(n): Returns a list containing n empty lists. :param n: Number of empty lists to create :type n: int :return: A list with n empty lists :rtype: list return [[] for _ in range(n)]"},{"question":"Write a function to detect the cycle in a linked list using Floyd's Tortoise and Hare Algorithm. If a cycle is detected, return the node where the cycle begins. If no cycle exists, return None.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectCycle(head): Detects cycle in a linked list using Floyd's Tortoise and Hare Algorithm. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The node where the cycle begins, or None if no cycle exists. if not head or not head.next: return None slow, fast = head, head # Detect if a cycle exists while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: return None # Find the node where the cycle begins slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a function to find the maximum number in an array. You should provide the function definition and an explanation of how the function works.","solution":"def find_maximum(arr): Returns the maximum number in an array. Parameters: arr (list): A list of numbers. Returns: number: The maximum number in the array. if not arr: raise ValueError(\\"Array is empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a function to create a binary tree using an array and level order traversal. The function should accept an array representing a binary tree in level order and return the root of the constructed binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def create_binary_tree(arr): if not arr: return None root = TreeNode(arr[0]) queue = [root] i = 1 while i < len(arr): current = queue.pop(0) if i < len(arr) and arr[i] is not None: current.left = TreeNode(arr[i]) queue.append(current.left) i += 1 if i < len(arr) and arr[i] is not None: current.right = TreeNode(arr[i]) queue.append(current.right) i += 1 return root"},{"question":"Write a function to implement the \\"hello world\\" programming concept.","solution":"def hello_world(): Returns the string \\"Hello, World!\\". return \\"Hello, World!\\""},{"question":"Write a function to compute the sum of all positive integers within a given range [a, b], where both a and b are inclusive and a < b. The function should handle large ranges efficiently.","solution":"def sum_of_positive_integers_in_range(a, b): Computes the sum of all positive integers within a given range [a, b], where both a and b are inclusive and a < b. :param a: Lower bound of the range (inclusive, a positive integer). :param b: Upper bound of the range (inclusive, a positive integer). :return: The sum of all positive integers within the range [a, b]. if a > b or a < 1: raise ValueError(\\"Invalid range: a must be less than b and both must be positive integers.\\") # Sum of first n positive integers is n * (n + 1) / 2 sum_b = b * (b + 1) // 2 # Sum of integers from 1 to b sum_a_minus_1 = (a - 1) * a // 2 # Sum of integers from 1 to (a-1) return sum_b - sum_a_minus_1"},{"question":"Write a function to determine whether a given list is a sublist of another list in Python. Consider both lists are not necessarily sorted and may contain duplicate elements.","solution":"def is_sublist(sublist, mainlist): Checks whether 'sublist' is a sublist of 'mainlist'. sublist_len = len(sublist) mainlist_len = len(mainlist) if sublist_len == 0: return True for i in range(mainlist_len - sublist_len + 1): if mainlist[i:i + sublist_len] == sublist: return True return False"},{"question":"Write a function to evaluate the mathematical expression \`a + b * c\` given three integers \`a\`, \`b\`, and \`c\`.","solution":"def evaluate_expression(a, b, c): Evaluates the expression a + b * c. Parameters: a (int): The first integer. b (int): The second integer. c (int): The third integer. Returns: int: The result of the evaluated expression. return a + b * c"},{"question":"Write a function to filter out invalid ISBN-10 numbers from a list of strings, where a valid ISBN-10 must consist of 10 characters long, with the first 9 characters being digits and the last character being either a digit or an 'X' representing the value 10. Also, the check digit must be valid according to the given ISBN-10 calculation method.","solution":"def is_valid_isbn10(isbn): Checks if an ISBN-10 number is valid. if len(isbn) != 10: return False if not isbn[:9].isdigit(): return False if not (isbn[9].isdigit() or isbn[9] == 'X'): return False # calculate the checksum using ISBN-10 validation method total = 0 for i in range(9): total += int(isbn[i]) * (i + 1) if isbn[9] == 'X': total += 10 * 10 else: total += int(isbn[9]) * 10 if total % 11 == 0: return True else: return False def filter_valid_isbn10(isbn_list): Filters out valid ISBN-10 numbers from a list of strings. return [isbn for isbn in isbn_list if is_valid_isbn10(isbn)]"},{"question":"Write a function to check if a given number is a power of two. In this function, you should not use any built-in functions, such as \`log2\`, \`pow\`, etc. You should implement the solution using bitwise operations.","solution":"def is_power_of_two(n): Checks if the given number is a power of two using bitwise operations. Args: n (int): The number to check. Returns: bool: True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to return the previous node of a given node in a singly linked list in Python.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_previous_node(head, target): Returns the previous node of a given node with 'target' value in a singly linked list. :param head: ListNode, the head of the linked list :param target: int, the value of the target node :return: ListNode or None, the previous node of the target node, or None if the target node is not found or it is the first node if not head or head.value == target: return None current = head while current.next: if current.next.value == target: return current current = current.next return None"},{"question":"Write a function to remove all duplicates from an array of integers and return the new length. The function should not use any extra space for another array. The order of elements can be changed.","solution":"def remove_duplicates(nums): Removes duplicates from the array and returns the length of the array with unique elements. Elements order can be changed. if not nums: return 0 unique = set() idx = 0 while idx < len(nums): if nums[idx] in unique: nums.pop(idx) else: unique.add(nums[idx]) idx += 1 return len(nums)"},{"question":"Write a function to calculate all the possible subsets of a given set of numbers. The function should return a list of all subsets. Each subset should be represented as a list. The order of subsets or the order of numbers within a subset does not matter.","solution":"def subsets(nums): Returns all possible subsets of the given set of numbers. result = [[]] for num in nums: result += [curr + [num] for curr in result] return result"},{"question":"Write a function to remove all occurrences of a given value from a list. The function should take a list and a value as input, and return a new list with the given value removed.","solution":"def remove_all_occurrences(lst, value): Removes all occurrences of the specified value from the list. Parameters: lst (list): The list from which the value should be removed. value: The value to remove from the list. Returns: list: A new list with the value removed. return [item for item in lst if item != value]"},{"question":"Write a function to linearly interpolate between two floating-point values. The function should take three parameters: the lower bound \`a\`, the upper bound \`b\`, and the interpolation factor \`f\`. The function should return the linearly interpolated value between \`a\` and \`b\` based on \`f\`.","solution":"def linear_interpolate(a, b, f): Returns the linearly interpolated value between a and b using the factor f. Parameters: a (float): The lower bound. b (float): The upper bound. f (float): The interpolation factor (should be between 0 and 1). Returns: float: The interpolated value. return a + f * (b - a)"},{"question":"Write a function to insert a new key-value pair into a binary search tree (BST). If the key already exists, update its value. Ensure that the function maintains the properties of the binary search tree.","solution":"class TreeNode: def __init__(self, key, value): self.key = key self.value = value self.left = None self.right = None def insert_bst(root, key, value): Inserts a new key-value pair into the BST. If the key already exists, update its value. Maintains the properties of the BST. if root is None: return TreeNode(key, value) if key < root.key: root.left = insert_bst(root.left, key, value) elif key > root.key: root.right = insert_bst(root.right, key, value) else: # key == root.key root.value = value return root"},{"question":"Write a function to find the maximum number of distinct characters in a substring of a given string that can be formed using exactly k characters.","solution":"def max_distinct_characters_in_substring(s, k): Find the maximum number of distinct characters in a substring of a given string \`s\` that can be formed using exactly \`k\` characters. :param s: input string :param k: length of the substring :return: maximum number of distinct characters in such substring if k <= 0 or len(s) < k: return 0 max_distinct = 0 for i in range(len(s) - k + 1): substring = s[i:i + k] distinct_count = len(set(substring)) max_distinct = max(max_distinct, distinct_count) return max_distinct"},{"question":"Write a function to count the occurrences of the letter 'a' in a string. The function should be named \`count_a\` and should take a single parameter, a string \`text\`. The function should return the number of times 'a' appears in the string.","solution":"def count_a(text): Returns the number of occurrences of the letter 'a' in the given string. Parameters: text (str): The input string in which to count occurrences of 'a'. Returns: int: The number of occurrences of 'a' in the input string. return text.count('a')"},{"question":"Write a function to calculate the product of all elements in a given list of integers using Python.","solution":"def product_of_elements(lst): Returns the product of all elements in the given list of integers. If the list is empty, returns 1 (the identity for multiplication). product = 1 for num in lst: product *= num return product"},{"question":"Write a function to compute the nth Fibonacci number without using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to calculate and return the area of a polygon given its vertices. The vertices are provided as a list of tuples, where each tuple represents a point (x, y) in the Cartesian plane. The function should use the Shoelace formula (also known as Gauss's area formula for simple polygons) to calculate the area. The function should return the area as a float. If the list of vertices is empty or contains less than three points, the function should return 0.0.","solution":"def polygon_area(vertices): Calculate the area of a polygon given its vertices using the Shoelace formula. Args: vertices (list of tuples): A list of tuples where each tuple represents a point (x, y). Returns: float: The area of the polygon. Returns 0.0 if the list of vertices is empty or contains less than three points. if len(vertices) < 3: return 0.0 n = len(vertices) area = 0.0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 area -= y1 * x2 return abs(area) / 2.0"},{"question":"Write a function to perform in-order traversal of a binary search tree (BST) and return the elements in a sorted list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def in_order_traversal(root): Perform in-order traversal of a binary search tree (BST) and return the elements in a sorted list. result = [] def traverse(node): if not node: return traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result"},{"question":"Write a function to check if a binary tree is a valid binary search tree (BST). The function should take the root of the tree as input and return a boolean indicating whether the tree is a BST. A binary search tree is defined as a binary tree in which for every node, the values in its left subtree are all less than the node's value, and the values in its right subtree are all greater than the node's value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: Checks if a binary tree is a valid binary search tree. :param TreeNode root: The root of the binary tree. :return: True if the tree is a valid BST, False otherwise. :rtype: bool def validate(node, low=float('-inf'), high=float('inf')): if not node: return True if node.val <= low or node.val >= high: return False return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"Write a function to flatten a multi-dimensional array into a one-dimensional array. The function should handle arrays of arbitrary depth.","solution":"def flatten_array(arr): Flattens a multi-dimensional array into a one-dimensional array. :param arr: List with arbitrary depth. :return: Flattened one-dimensional list. if not isinstance(arr, list): return [arr] flattened_list = [] for element in arr: flattened_list.extend(flatten_array(element)) return flattened_list"},{"question":"Write a function to sort a list of numbers in Python. You should be able to specify the sorting order (ascending or descending). How can I achieve this in Python? Can you provide an example?","solution":"def sort_numbers(numbers, ascending=True): Returns the sorted list of numbers in the specified order. Parameters: numbers (list): List of numbers to sort ascending (bool): If True, sort in ascending order, else sort in descending order Returns: list: Sorted list of numbers return sorted(numbers, reverse=not ascending)"},{"question":"Write a function to count the maximum depth of a binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: Returns the maximum depth of a binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function to find the Lowest Common Ancestor (LCA) in a binary search tree (BST). The function should take two integers representing the values of two nodes and return the value of their LCA. If either of the values is not present in the tree, return -1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_lca_bst(root, n1, n2): Finds the Lowest Common Ancestor (LCA) in a binary search tree. Returns the value of the LCA. If either of the values is not present in the tree, return -1. def node_exists(node, val): if not node: return False if node.val == val: return True elif val < node.val: return node_exists(node.left, val) else: return node_exists(node.right, val) if not node_exists(root, n1) or not node_exists(root, n2): return -1 while root: if n1 < root.val and n2 < root.val: root = root.left elif n1 > root.val and n2 > root.val: root = root.right else: return root.val return -1"},{"question":"Write a function to find the shortest substring of a string that contains all the characters of another string.","solution":"def min_window(s, t): Returns the minimum window substring of s that contains all the characters of t. from collections import Counter if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1] : ans[2] + 1]"},{"question":"Write a function to find the first missing positive integer in an array of integers. The function should return the smallest positive integer that is missing from the array. The array can contain duplicates and negative numbers. The function should be efficient and have a time complexity better than O(n^2).","solution":"def first_missing_positive(nums): Returns the smallest missing positive integer from the list nums. n = len(nums) # Step 1: Replace non-positive numbers and numbers greater than length of array with a positive number out of range for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark the indices corresponding to the existing numbers as negative for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first index which is not marked (still positive) for i in range(n): if nums[i] > 0: return i + 1 # Step 4: If all indices are marked, return n + 1 return n + 1"},{"question":"Write a function to generate the first N Fibonacci numbers in a list. The function should take two parameters: the first parameter 'N' represents the number of Fibonacci numbers to generate, and the second parameter 'initial_value' is an optional parameter that defaults to 0. If 'initial_value' is True, the function should generate N Fibonacci numbers starting from 0 and 1, otherwise, it should start from 1 and 1.","solution":"def fibonacci_sequence(N, initial_value=True): Generate the first N Fibonacci numbers starting either from [0, 1] or [1, 1]. Parameters: N (int): The number of Fibonacci numbers to generate. initial_value (bool): Starting values for the sequence, True for [0, 1] or False for [1, 1]. Returns: list: A list containing the first N Fibonacci numbers. if N <= 0: return [] # Starting points if initial_value: fib_seq = [0, 1] else: fib_seq = [1, 1] while len(fib_seq) < N: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:N]"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number of terms using a recursive approach. The function should return a list containing the Fibonacci sequence.","solution":"def fibonacci_recursive(n): Returns a list containing the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_seq = fibonacci_recursive(n - 1) fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a function to find the area of a circle given its radius. The function should return the area rounded to two decimal places. If the radius is negative, the function should return \`None\`.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius, rounded to two decimal places. If the radius is negative, returns None. if radius < 0: return None area = math.pi * radius ** 2 return round(area, 2)"},{"question":"Write a function to calculate the number of ways to arrange \`n\` distinct objects in a circular permutation. A circular permutation is a linear permutation where the distinction between positions is lost. For example, arranging \`3\` distinct objects (A, B, C) in a circle can be represented as ABC, ACB, BAC, BCA, CAB, CBA, but when considering circular arrangements, ABC and BAC are considered the same.","solution":"def circular_permutations(n): Returns the number of distinct circular permutations of n distinct objects. For n distinct objects in a circle, the number of distinct permutations is given by (n-1)!. if n <= 1: return 1 from math import factorial return factorial(n - 1)"},{"question":"Write a function to calculate the sum of all numbers in a given list using recursion. The function should be called \`sum_list\`.","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list using recursion. if not numbers: return 0 return numbers[0] + sum_list(numbers[1:])"},{"question":"Write a function to generate a random word from a list of words using Python's random library. The function should also allow for specifying the length of the word. If the specified length is 'all', the function should return a random word from the list. If a specific length is provided, the function should return a random word from the list that has the specified length.","solution":"import random def random_word(words, length='all'): Generate a random word from a list of words. If the specified length is 'all', return a random word from the list. If a specific length is provided, return a random word from the list that has the specified length. :param words: list of words :param length: 'all' or an integer specifying the word length :return: randomly selected word if length == 'all': return random.choice(words) else: words_of_given_length = [word for word in words if len(word) == length] if not words_of_given_length: raise ValueError(f\\"No words of length {length} found in the provided list.\\") return random.choice(words_of_given_length)"},{"question":"Write a function to determine the maximum sum of a contiguous subarray within a given one-dimensional array of integers. The function should return the maximum sum possible. If the array contains all negative numbers, the function should return the largest negative number in the array. If the array is empty, the function should return 0.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the given array of integers. If the array is empty, returns 0. If the array contains all negative numbers, returns the largest negative number. if not nums: return 0 max_sum = curr_sum = nums[0] for num in nums[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"Write a function to calculate finding the maximum subarray sum. You are given an integer array \`nums\`, and you need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. The function signature should be \`def maxSubArray(nums):\`.","solution":"def maxSubArray(nums): Finds the contiguous subarray within a one-dimensional array of numbers which has the largest sum. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the maximum difference between any two elements in an array, given that the second element must be to the right of the first.","solution":"def max_difference(arr): Returns the maximum difference between any two elements in arr such that the second element is to the right of the first. If the array has fewer than 2 elements, returns 0. if len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a function to reverse a string in Python. You should ask the user to input the string, then use slicing to reverse the string and print the result.","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Write a function to find a pair of numbers which sum equals to a given number","solution":"def find_pair_with_sum(arr, target_sum): Returns a tuple of the first pair of numbers in the list such that their sum equals the target_sum. If no such pair exists, returns None. seen_numbers = set() for num in arr: complement = target_sum - num if complement in seen_numbers: return (complement, num) seen_numbers.add(num) return None"},{"question":"Write a function to solve the following task: You are given an array of integers. The function should return the missing integer in the array, assuming the array contains integers that should be from 1 to n (n being the length of the array). If no integer is missing, return the next integer after the maximum number in the array.","solution":"def find_missing_integer(arr): Finds the missing integer in the array assuming the array contains integers from 1 to n. If no integer is missing, returns the next integer after the maximum number in the array. Parameters: arr (list): A list of integers. Returns: int: The missing integer or the next integer after the maximum. n = len(arr) expected_set = set(range(1, n + 1)) actual_set = set(arr) missing_elements = expected_set - actual_set if missing_elements: return min(missing_elements) else: return max(arr) + 1"},{"question":"Write a function to count the number of even numbers in an array.","solution":"def count_even_numbers(arr): Returns the count of even numbers in the array. Parameters: arr (list): A list of integers Returns: int: The count of even numbers in the list return sum(1 for x in arr if x % 2 == 0)"},{"question":"Write a function to reverse a string in Python. Can you provide an example of how to call this function with a specific string?","solution":"def reverse_string(s): Reverses the given string s. :param s: str, input string to be reversed :return: str, reversed string return s[::-1] # Example of how to call this function result = reverse_string(\\"hello\\") print(result) # Output: olleh"},{"question":"Write a function to find the sum of all non-negative integers in a given list using a Python list comprehension.","solution":"def sum_non_negative_integers(lst): Returns the sum of all non-negative integers in the given list. return sum([x for x in lst if x >= 0])"},{"question":"Write a function to find the minimum distance between any two points in a given list of 2D points. The function should take a list of tuples, where each tuple represents a point in 2D space (x, y). The function should return the minimum distance as a float.","solution":"import math def minimum_distance(points): Return the minimum distance between any two points in the given list of 2D points. Args: points (list of tuples): A list where each tuple contains two coordinates (x, y). Returns: float: The minimum distance between any two points. if len(points) < 2: return float('inf') min_dist = float('inf') for i in range(len(points) - 1): for j in range(i + 1, len(points)): dist = math.hypot(points[i][0] - points[j][0], points[i][1] - points[j][1]) if dist < min_dist: min_dist = dist return min_dist"},{"question":"Write a function to extract the text from an HTML string using the BeautifulSoup library in Python.","solution":"from bs4 import BeautifulSoup def extract_text_from_html(html_string): Extracts and returns the text content from the given HTML string. Args: html_string (str): A string containing HTML content. Returns: str: The text content extracted from the HTML string. soup = BeautifulSoup(html_string, 'html.parser') return soup.get_text()"},{"question":"Write a function to find the maximum and minimum element in an array using Python. The function should return a tuple containing the maximum and minimum values found in the array. If the array is empty, the function should return \`None\`.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values found in the array. If the array is empty, returns None. if not arr: return None max_val = min_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num elif num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a function to calculate the number of occurrences of a target value in a sorted array. The function should efficiently search the array to find the target value and return its count.","solution":"from bisect import bisect_left, bisect_right def target_occurrences(arr, target): Returns the number of occurrences of the target value in a sorted array. left_index = bisect_left(arr, target) right_index = bisect_right(arr, target) return right_index - left_index"},{"question":"Write a function to reverse a linked list, in-place, in Python. The linked list can be singly or doubly.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list in place. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to determine if a given string is a \\"perfect palindrome\\" or not.","solution":"def is_perfect_palindrome(s): Determines if the given string is a perfect palindrome. A perfect palindrome reads the same forward and backward with exact character matching. return s == s[::-1]"},{"question":"Write a function to calculate the total number of distinct ways to climb a staircase with \`n\` steps. Each time you can either climb 1 or 2 steps.","solution":"def climb_stairs(n): Calculate the total number of distinct ways to climb a staircase with n steps. Each time you can either climb 1 or 2 steps. if n <= 1: return 1 dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a function to flatten a binary tree using a postorder traversal approach. How would you describe the process and the code?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten_postorder(root): Flatten the binary tree to a linked list using postorder traversal. def postorder(node, prev): if not node: return prev prev = postorder(node.right, prev) prev = postorder(node.left, prev) node.right = prev node.left = None return node postorder(root, None)"},{"question":"Write a function to solve a Sudoku puzzle using backtracking.","solution":"def solve_sudoku(board): Solves the given Sudoku puzzle using backtracking. Args: board (list of list of int): A 9x9 grid representing a Sudoku puzzle. Empty cells are represented by 0s. Returns: bool: True if the Sudoku puzzle is solved successfully, False otherwise. def is_valid(board, row, col, num): # Check the row for i in range(9): if board[row][i] == num: return False # Check the column for i in range(9): if board[i][col] == num: return False # Check the 3x3 grid start_row = (row // 3) * 3 start_col = (col // 3) * 3 for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Write a function to calculate the sum of all numbers from 1 to 100 using a loop in Python.","solution":"def sum_1_to_100(): Returns the sum of all numbers from 1 to 100. total = 0 for number in range(1, 101): total += number return total"},{"question":"Write a function to check if a number is positive, negative, or zero using If-Else statements.","solution":"def check_number(n): Checks if a number is positive, negative, or zero. Returns: \\"Positive\\" if n is greater than 0 \\"Negative\\" if n is less than 0 \\"Zero\\" if n is 0 if n > 0: return \\"Positive\\" elif n < 0: return \\"Negative\\" else: return \\"Zero\\""},{"question":"Write a function to parse a given string that represents the date in the format \\"yyyy-MM-dd\\". The function should return the day of the week corresponding to that date.","solution":"import datetime def get_day_of_week(date_string): Returns the day of the week for the given date string in the format 'yyyy-MM-dd'. date_object = datetime.datetime.strptime(date_string, \\"%Y-%m-%d\\") return date_object.strftime(\\"%A\\")"},{"question":"Write a function to calculate the average of a given list of numbers, but exclude any numbers that are divisible by 3.","solution":"def average_excluding_divisible_by_3(numbers): Calculate the average of a given list of numbers, excluding any numbers that are divisible by 3. :param numbers: List of integers :return: The average of the numbers not divisible by 3. filtered_numbers = [num for num in numbers if num % 3 != 0] if not filtered_numbers: return 0 return sum(filtered_numbers) / len(filtered_numbers)"},{"question":"Write a function to calculate the factorial of a given number in Python. The function should be able to handle large numbers efficiently. To achieve this, use Python's built-in support for arbitrary precision integers.","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to generate the nth Fibonacci number using iteration in Python. The function should be efficient and avoid recursion to prevent stack overflow.","solution":"def fibonacci(n): Returns the nth Fibonacci number using iteration. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a function to print the elements of a given array in reverse order. This is a common operation in many programming scenarios, including file handling and recursion-based solutions for data structures. Implement this function in three different ways: using an iterative approach, a recursive approach, and an approach using a stack (without recursion). Choose one language and explain it step-by-step.","solution":"# Iterative approach def reverse_iterative(arr): return arr[::-1] # Recursive approach def reverse_recursive(arr): if len(arr) == 0: return arr return [arr[-1]] + reverse_recursive(arr[:-1]) # Stack approach def reverse_stack(arr): stack = [] for element in arr: stack.append(element) reversed_array = [] while stack: reversed_array.append(stack.pop()) return reversed_array"},{"question":"Write a function to find all cycles in a directed graph using recursion and a depth-first search (DFS) approach.","solution":"def find_cycles_in_graph(graph): Finds all cycles in a directed graph using DFS. :param graph: A dictionary representing a directed graph where each key is a node and its value is a list of nodes it points to. :return: A list of cycles, with each cycle represented by a list of nodes. def dfs(node, visited, stack, path): visited.add(node) stack.add(node) path.append(node) for neighbor in graph.get(node, []): if neighbor not in visited: dfs(neighbor, visited, stack, path) elif neighbor in stack: cycle_start_index = path.index(neighbor) cycles.append(path[cycle_start_index:]) stack.remove(node) path.pop() visited = set() stack = set() cycles = [] for node in graph: if node not in visited: dfs(node, visited, stack, []) return cycles"},{"question":"Write a function to decode a run-length encoded string where the encoding schema is \`[number][char]\`, and the character is repeated \`[number]\` times. For example, the string \`\\"12a3b4c\\"\` would decode to \`\\"aaabbbccc\\"\`.","solution":"import re def decode_run_length(encoded_str): Decodes a run-length encoded string. Args: encoded_str (str): The run-length encoded string. Returns: str: The decoded string. pattern = re.compile(r'(d+)([a-zA-Z])') decoded_str = \\"\\" for match in pattern.findall(encoded_str): count = int(match[0]) char = match[1] decoded_str += char * count return decoded_str"},{"question":"Write a function to calculate the sum of all integers in a given range, including the start and end points. For example, the sum of all integers from 1 to 5 should be 15.","solution":"def sum_in_range(start, end): Returns the sum of all integers from start to end (inclusive). if start > end: start, end = end, start return sum(range(start, end + 1))"},{"question":"Write a function to find the minimum number in a given array.","solution":"def find_minimum(arr): Returns the minimum number in the given array. if not arr: raise ValueError(\\"Array should not be empty\\") return min(arr)"},{"question":"Write a function to find the median of two sorted arrays A and B. Specifically, A and B are arrays of integers, and the function should return the median of the merged, sorted array of A and B.","solution":"def find_median_sorted_arrays(A, B): Finds the median of two sorted arrays A and B. Parameters: A (list[int]): First sorted array. B (list[int]): Second sorted array. Returns: float: The median of the merged, sorted array of A and B. merged = sorted(A + B) n = len(merged) if n % 2 == 1: return float(merged[n // 2]) else: return (merged[n // 2 - 1] + merged[n // 2]) / 2"},{"question":"Write a function to print out the first 1000 numbers in the Fibonacci sequence.","solution":"def fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n numbers in the Fibonacci sequence. if n <= 0: return [] sequence = [] a, b = 0, 1 while len(sequence) < n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to print all the nodes at a given level in a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def print_nodes_at_level(root, level): Prints all the nodes at a given level in a binary tree. if not root or level < 0: return [] result = [] def dfs(node, current_level): if node: if current_level == level: result.append(node.value) else: dfs(node.left, current_level + 1) dfs(node.right, current_level + 1) dfs(root, 0) return result"},{"question":"Write a function to return the last k elements of a given list. If k is greater than the length of the list, return the entire list. If k is negative, return an empty list.","solution":"def last_k_elements(lst, k): Returns the last k elements of the list. If k is greater than the length of the list, returns the entire list. If k is negative, returns an empty list. if k < 0: return [] return lst[-k:] if k <= len(lst) else lst"},{"question":"Write a function to reverse the order of characters in a string without using any built-in functions or slicing.","solution":"def reverse_string(s): Reverses the order of characters in a string without using any built-in functions or slicing. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to reverse a given list of numbers in Python.","solution":"def reverse_list(numbers): Reverses a given list of numbers. Args: numbers (list): A list of numbers to be reversed. Returns: list: A new list with the elements of the original list in reverse order. return numbers[::-1]"},{"question":"Write a function to convert a Roman numeral to an integer. The function should handle all cases, including the subtraction cases like IV or IX.","solution":"def roman_to_int(s): Converts a Roman numeral to an integer. Parameters: s (str): The Roman numeral string. Returns: int: The integer representation of the Roman numeral. roman_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } result = 0 prev_value = 0 for char in reversed(s): current_value = roman_map[char] if current_value < prev_value: result -= current_value else: result += current_value prev_value = current_value return result"},{"question":"Write a function to split a given string into a list of strings where each string is a word from the original sentence.","solution":"def split_sentence(sentence): Splits a given string into a list of strings where each string is a word from the original sentence. return sentence.split()"},{"question":"Write a function to add two polynomials represented by lists of coefficients. Each list contains the coefficients of the polynomial starting from the lowest degree term (constant term). For example, the polynomial 3 + 2x + x^2 is represented as [3, 2, 1].","solution":"def add_polynomials(p1, p2): Adds two polynomials represented by lists of coefficients. Params: p1 - list of integers, coefficients of the first polynomial p2 - list of integers, coefficients of the second polynomial Returns: list of integers, coefficients of the resulting polynomial max_len = max(len(p1), len(p2)) result = [0] * max_len for i in range(max_len): coeff1 = p1[i] if i < len(p1) else 0 coeff2 = p2[i] if i < len(p2) else 0 result[i] = coeff1 + coeff2 return result"},{"question":"Write a function to find the second smallest number in a given list of integers. If the list does not contain at least two unique numbers, the function should return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list does not contain at least two unique numbers, returns None. if not numbers or len(numbers) < 2: return None unique_numbers = list(set(numbers)) # Remove duplicates by converting to set and back to list if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to count the number of words in a given text.","solution":"def count_words(text): Returns the number of words in the given text. A word is defined as a sequence of characters separated by whitespace. return len(text.split())"},{"question":"Write a function to find the median of a given array of integers. The array may contain both positive and negative numbers, and may not be sorted.","solution":"def find_median(arr): Returns the median of the given array of integers. sorted_arr = sorted(arr) n = len(sorted_arr) if n % 2 == 1: return sorted_arr[n // 2] else: mid1, mid2 = n // 2 - 1, n // 2 return (sorted_arr[mid1] + sorted_arr[mid2]) / 2"},{"question":"Write a function to check if a given string is a valid cryptocurrency address, specifically for Bitcoin. Consider the rules for Bitcoin addresses, which can start with '1' or '3' and have from 26 to 35 alphanumeric characters (A-H, J-N, P-Z, 0-9).","solution":"import re def is_valid_bitcoin_address(address): Checks if a given string is a valid Bitcoin address. Parameters: address (str): The Bitcoin address to validate. Returns: bool: True if the address is valid, False otherwise. if not isinstance(address, str): return False # Regular expression for matching Bitcoin addresses pattern = re.compile(r'^[13][a-km-zA-HJ-NP-Z1-9]{25,34}') return bool(pattern.match(address))"},{"question":"Write a function to check if a binary tree is balanced and if for every node in the tree, the height of the left subtree and the height of the right subtree differs by no more than 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determine if the binary tree is balanced. A balanced tree is defined as one in which the heights of the two subtrees of any node never differ by more than one. :param root: TreeNode, root of the binary tree :return: bool, True if the tree is balanced, False otherwise def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_height = 1 + max(left_height, right_height) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balanced _, is_bal = height_and_balance(root) return is_bal"},{"question":"Write a function to calculate the nth Fibonacci number using both memoization and without using memoization. Comment on the differences in performance between the two versions.","solution":"def fibonacci_memo(n, memo=None): Calculate the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo) return memo[n] def fibonacci_plain(n): Calculate the nth Fibonacci number without using memoization. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_plain(n-1) + fibonacci_plain(n-2)"},{"question":"Write a function to calculate the maximum profit from at most two transactions on a given stock price array.","solution":"def maxProfit(prices): Calculate the maximum profit with at most two transactions on a given stock price array. :param prices: List[int], list of stock prices :return: int, the maximum profit if not prices: return 0 # Initialize state variables buy1, buy2 = float('-inf'), float('-inf') sell1, sell2 = 0, 0 # Iterate through each price for price in prices: # Maximum profit if we only make the second sale sell2 = max(sell2, buy2 + price) # Maximum profit if we only make the second buy buy2 = max(buy2, sell1 - price) # Maximum profit if we only make the first sale sell1 = max(sell1, buy1 + price) # Maximum profit if we only make the first buy buy1 = max(buy1, -price) return sell2"},{"question":"Write a function to find max and min from an array in Python. I am looking for an O(n) time complexity solution.","solution":"def find_max_min(arr): Returns a tuple with the maximum and minimum values from the array arr. if not arr: return None, None max_value = min_value = arr[0] for num in arr[1:]: if num > max_value: max_value = num if num < min_value: min_value = num return max_value, min_value"},{"question":"Write a function to determine if a given string s matches a given regular expression, \`p\`. The function should return \`True\` if the string s matches the regular expression p, and \`False\` otherwise.","solution":"import re def is_match(s, p): Determines if the string s matches the regular expression p. Args: s (str): the string to be checked. p (str): the regular expression pattern. Returns: bool: True if the string matches the pattern, False otherwise. pattern = re.fullmatch(p, s) return bool(pattern)"},{"question":"Write a function to calculate the sum of all numbers in an array. In your function, use a for loop to iterate through the array and add each number to a running total. Return the total sum. If the array is empty, return 0.","solution":"def sum_array(numbers): Returns the sum of all numbers in the array. Parameters: numbers (list): List of numbers to sum up. Returns: int/float: Sum of all numbers. total_sum = 0 for number in numbers: total_sum += number return total_sum"},{"question":"Write a function to calculate the sum of all prime numbers within a given range. The range is specified using two integers, \`start\` and \`end\`. The function should return the sum of all prime numbers between \`start\` and \`end\`, inclusive. If there are no prime numbers in the range, the function should return 0.","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_of_primes_in_range(start, end): Returns the sum of all prime numbers between start and end, inclusive. If there are no prime numbers in the range, returns 0. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"Write a function to find the maximum subarray sum in a given 1D array of integers. The function should efficiently compute the sum without using additional memory and should have a time complexity of O(n).","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum for the given 1D array of integers. Uses Kadane's Algorithm which has O(n) time complexity. max_sum = float('-inf') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to reverse the elements of an array in Python. Implement the function without using built-in functions like \`reverse()\` or slicing (\`[::-1]\`). Using a custom algorithm is preferred.","solution":"def reverse_array(arr): Reverses the elements of the array without using built-in functions or slicing. start = 0 end = len(arr) - 1 while start < end: # Swap the elements at start and end arr[start], arr[end] = arr[end], arr[start] # Move towards the middle of the array start += 1 end -= 1 return arr"},{"question":"Write a function to generate all possible permutations of a given list. The function should ensure that no permutation is repeated. Additionally, the function should be able to handle any type of elements in the list, including integers, strings, etc.","solution":"from itertools import permutations def generate_permutations(input_list): Returns all unique permutations of the input_list. return list(permutations(input_list))"},{"question":"Write a function to sort a linked list using Bubble Sort.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def bubble_sort(self): if self.head is None: return end = None while end != self.head: current = self.head while current.next != end: if current.data > current.next.data: # Swap the elements current.data, current.next.data = current.next.data, current.data current = current.next end = current def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Write a function to sort a list of integers in ascending order using the bubble sort algorithm. You should also count and return the number of swaps made during the sorting process.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. Returns the sorted list and the number of swaps made during the sorting process. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the sorted list and the number of swaps. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return arr, swap_count"},{"question":"Write a function to find the maximum number in a list using Python. The function should be able to handle lists containing both integers and floating-point numbers. Additionally, the function should return \`None\` if the list is empty.","solution":"def find_max_number(numbers): Returns the maximum number in a list. If the list is empty, returns None. Handles both integers and floating-point numbers. if not numbers: # Check if the list is empty return None max_num = numbers[0] # Initialize the maximum with the first element for num in numbers: if num > max_num: max_num = num return max_num"},{"question":"Write a function to get the sum of all prime numbers less than a given number \`n\`. However, ensure that your function is optimized for performance. Consider both time and space complexity.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than n. if n < 2: return 0 sieve = [True] * n sieve[0], sieve[1] = False, False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a function to remove all occurrences of a specific value from an array. The function should only modify the original array and not return a new one. It should also handle the case when the value is not present in the array. The function should also handle cases where the value appears multiple times consecutively.","solution":"def remove_all_occurrences(arr, value): Removes all occurrences of the specified value from the array. Parameters: arr (list): The list from which to remove the value value (any): The value to be removed from the list Note: This function modifies the original list and doesn't return a new one. while value in arr: arr.remove(value)"},{"question":"Write a function to check if a string contains a permutation of another string.","solution":"from collections import Counter def check_permutation(s1, s2): Checks if any permutation of s1 is a substring of s2. len_s1 = len(s1) len_s2 = len(s2) if len_s1 > len_s2: return False s1_counter = Counter(s1) window_counter = Counter(s2[:len_s1]) for i in range(len_s2 - len_s1 + 1): if i != 0: # Remove the first character of the previous window window_counter[s2[i-1]] -= 1 if window_counter[s2[i-1]] == 0: del window_counter[s2[i-1]] # Add the new character of the current window window_counter[s2[i+len_s1-1]] += 1 if s1_counter == window_counter: return True return False"},{"question":"Write a function to check if a string is a palindrome (ignoring case and non-alphanumeric characters).","solution":"import re def is_palindrome(s): Check if a string is a palindrome (ignoring case and non-alphanumeric characters). Args: s: str, the string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to check if a linked list forms a palindrome. A linked list is a sequence of elements where each element points to the next element until there is no next element, denoted as \`None\`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Checks if a linked list forms a palindrome. :param ListNode head: The head of the linked list. :return: True if the linked list is a palindrome, False otherwise. :rtype: bool # Step 1: Convert linked list into a list values = [] current = head while current: values.append(current.val) current = current.next # Step 2: Check if the list is a palindrome return values == values[::-1]"},{"question":"Write a function to solve and display the solution to a given Sudoku puzzle.","solution":"def is_valid(board, row, col, num): Check if placing num in board[row][col] is valid according to Sudoku rules. for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num: return False return True def solve_sudoku(board): Solve the given Sudoku puzzle using backtracking. for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False return True def print_board(board): Print the Sudoku board. for row in board: print(\\" \\".join(str(num) for num in row))"},{"question":"Write a function to determine if a given linked list is a palindrome. A palindrome linked list is one that reads the same backward as forward. The function should return \`True\` if the list is a palindrome and \`False\` otherwise. Please provide a complete solution, including the necessary imports, class definitions, and a check function to validate the solution.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head: ListNode) -> bool: # Function to find the end of the first half def end_of_first_half(node): slow = node fast = node while fast.next and fast.next.next: slow = slow.next fast = fast.next.next return slow # Function to reverse the linked list def reverse_list(node): prev = None while node: next_node = node.next node.next = prev prev = node node = next_node return prev if not head: return True # Find the end of the first half and reverse the second half first_half_end = end_of_first_half(head) second_half_start = reverse_list(first_half_end.next) # Check if palindrome first_position = head second_position = second_half_start while second_position: if first_position.val != second_position.val: return False first_position = first_position.next second_position = second_position.next # Restore the list (optional) first_half_end.next = reverse_list(second_half_start) return True"},{"question":"Write a function to reverse a string in Python. Function name should be \`reverse_string\`.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a function to find the third maximum number in an array. If the third maximum does not exist, return the maximum number. If there are only two unique numbers, return the highest number.","solution":"def third_max(nums): Returns the third maximum number in an array. If the third maximum does not exist, return the maximum number. If there are only two unique numbers, return the highest number. nums = set(nums) # Remove duplicates if len(nums) < 3: return max(nums) nums.remove(max(nums)) nums.remove(max(nums)) return max(nums)"},{"question":"Write a function to find the first missing positive integer in an array containing only integers.","solution":"def first_missing_positive(nums): Returns the first missing positive integer in an array containing only integers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function to check if a number is a perfect square. The function should return a Boolean value to indicate whether the provided number is a perfect square or not. Make sure your solution is efficient and handles edge cases appropriately.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Write a function to compute the nth Fibonacci number using a recursive approach. The function should also include a check function to verify the correctness of the solution with provided data points.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) def check_fibonacci(): Verify the correctness of the fibonacci function with provided data points. test_cases = { 0: 0, 1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55 } for n, expected in test_cases.items(): assert fibonacci(n) == expected, f\\"Failed for n={n}\\" return True"},{"question":"Write a function to generate the longest palindromic substring in a given string. For example, for input \\"babad\\", the function should return \\"bab\\" or \\"aba\\" since both are the longest palindromic substrings. The function should be efficient and work for strings of various lengths.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the provided string. n = len(s) if n == 0: return \\"\\" start = 0 end = 0 for i in range(n): len1 = expand_from_center(s, i, i) len2 = expand_from_center(s, i, i + 1) length = max(len1, len2) if length > end - start: start = i - (length - 1) // 2 end = i + length // 2 return s[start:end + 1] def expand_from_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1"},{"question":"Write a function to find the maximum sum of a contiguous subarray and a non-contiguous subarray in an array of integers.","solution":"def max_subarray_sums(arr): Find the maximum sum of both a contiguous subarray and a non-contiguous subarray. :param arr: List of integers :return: Tuple containing the maximum sum of a contiguous subarray and a non-contiguous subarray. if not arr: # Empty array edge case return (0, 0) # Finding the maximum sum of a contiguous subarray using Kadane's algorithm max_contiguous_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_contiguous_sum = max(max_contiguous_sum, current_sum) # Finding the maximum sum of a non-contiguous subarray max_non_contiguous_sum = sum(x for x in arr if x > 0) if max_non_contiguous_sum == 0: # If all elements are negative, choose the maximum single element max_non_contiguous_sum = max(arr) return (max_contiguous_sum, max_non_contiguous_sum)"},{"question":"Write a function to calculate the factorial of a given number using an iterative approach in Python. The function should take an integer as input and return the factorial of that number. Ensure to handle the edge case where the input number is 0, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of a given number using an iterative approach. Params: n (int): The number to calculate the factorial for Returns: int: The factorial of the input number if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to count the number of islands in a 2D grid using DFS.","solution":"def count_islands(grid): Returns the number of islands in a 2D grid using Depth First Search (DFS). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. :param grid: List[List[int]] - a 2D grid map of '1's (land) and '0's (water) :return: int - the number of islands if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0': return grid[i][j] = '0' dfs(grid, i - 1, j) dfs(grid, i + 1, j) dfs(grid, i, j - 1) dfs(grid, i, j + 1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': num_islands += 1 dfs(grid, i, j) return num_islands"},{"question":"Write a function to perform an in-order traversal of a binary tree. What are the step-by-step process to solve this problem?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform in-order traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: The list containing the in-order traversal result. result = [] def helper(node): if node: helper(node.left) result.append(node.val) helper(node.right) helper(root) return result"},{"question":"Write a function to calculate the average of a list of integers, but the function should handle cases where the list might contain non-integer values. The function should ignore non-integer values and calculate the average of only the integers in the list.","solution":"def average_of_integers(lst): Returns the average of a list of integers, ignoring any non-integer values. Args: lst (list): List containing integers and potentially non-integer values. Returns: float: The average of the integer values in the list. If no integers are present, return 0. integers = [x for x in lst if isinstance(x, int)] if len(integers) == 0: return 0 # Avoid division by zero, return 0 when no integers are present return sum(integers) / len(integers)"},{"question":"Write a function to find the maximum value in a binary search tree (BST) and the minimum value in its right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_and_min_in_right_subtree(root): Finds the maximum value in a binary search tree (BST) and the minimum value in its right subtree. Parameters: root (TreeNode): The root of the binary search tree. Returns: Tuple[int, int]: A tuple containing the maximum value in the BST and the minimum value in its right subtree. def find_max(node): while node.right: node = node.right return node.val def find_min(node): while node.left: node = node.left return node.val if not root: return None, None max_value = find_max(root) min_right_value = find_min(root.right) if root.right else None return max_value, min_right_value"},{"question":"Write a function to find the largest, second largest, and third largest numbers in an array of integers.","solution":"def find_top_three_numbers(arr): Returns the largest, second largest, and third largest numbers in an array of integers. # If the array has fewer than 3 elements, return None if len(arr) < 3: return None first, second, third = float('-inf'), float('-inf'), float('-inf') for number in arr: if number > first: third = second second = first first = number elif number > second: third = second second = number elif number > third: third = number return first, second, third"},{"question":"Write a function to find the maximum element in an array. This function should take an array of integers and return the maximum integer in the array.","solution":"def find_maximum(arr): Returns the maximum element in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") max_element = arr[0] for num in arr[1:]: if num > max_element: max_element = num return max_element"},{"question":"Write a function to retrieve the next greater element for every element in the given array \`nums1\`, but only for those elements that have a corresponding entry in \`nums2\`. The next greater element for a given element in \`nums1\` is the first greater element that appears in \`nums2\` to the right of the current element.","solution":"def next_greater_element(nums1, nums2): Find the next greater element for each element in nums1 according to their position in nums2. result = [] for num in nums1: found = False greater = -1 for i in range(nums2.index(num), len(nums2)): if nums2[i] > num: greater = nums2[i] break result.append(greater) return result"},{"question":"Write a function to determine the next big number with the same number of 1-bits (Hamming weight) as the given number. The next number should be greater than the given number. If no such number exists, return -1.","solution":"def next_big_number_with_same_1bits(n): Determines the next big number with the same number of 1-bits (Hamming weight). :param n: Given number :return: Next number with same number of 1-bits, or -1 if no such number exists c = n c0 = c1 = 0 while (c & 1) == 0 and c != 0: c0 += 1 c >>= 1 while (c & 1) == 1: c1 += 1 c >>= 1 if c0 + c1 == 31 or c0 + c1 == 0: return -1 pos = c0 + c1 n |= (1 << pos) n &= ~((1 << pos) - 1) n |= (1 << (c1 - 1)) - 1 return n"},{"question":"Write a function to flatten a 2D array into a 1D array. The 2D array can have multiple levels of nesting at different depths.","solution":"def flatten_2d_array(nested_list): Flattens a 2D nested list into a 1D list. :param nested_list: List[List] - A 2D nested list :return: List - A flattened 1D list flat_list = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Write a function to print all the numbers from 1 to the n in ascending order. If n is less than 1, the function should not output anything.","solution":"def print_numbers_up_to(n): Prints all numbers from 1 to n in ascending order. If n is less than 1, the function does not print anything. if n < 1: return for i in range(1, n + 1): print(i)"},{"question":"Write a function to check if a string s starts with the prefix 'abc' and then follows up with a specific character X. The function should return 'Match' if the string starts with 'abc' followed by X, and 'No Match' otherwise.","solution":"def check_prefix(s, X): Check if the string s starts with the prefix 'abc' followed by the character X. if s.startswith('abc' + X): return 'Match' return 'No Match'"},{"question":"Write a function to print the first n numbers in the Fibonacci sequence using recursion.","solution":"def fibonacci_sequence(n, a=0, b=1, sequence=None): Returns the first n Fibonacci numbers using recursion. :param n: The number of Fibonacci numbers to return. :param a: The first number in the sequence (default is 0). :param b: The second number in the sequence (default is 1). :param sequence: The accumulated sequence (default is None, initialized to empty list). if sequence is None: sequence = [] if n <= 0: return sequence sequence.append(a) return fibonacci_sequence(n-1, b, a+b, sequence)"},{"question":"Write a function to sum up the elements of an array.","solution":"def sum_array(arr): Returns the sum of all elements in the array. return sum(arr)"},{"question":"Write a function to calculate the total salary for an employee based on their hours worked. The function should take the hours worked and the hourly pay rate as inputs. If the employee works overtime (more than 40 hours), the pay rate for those hours is increased by 1.5. The function should return the total salary.","solution":"def calculate_salary(hours_worked, hourly_rate): Calculate the total salary for an employee based on the hours worked and the hourly pay rate. Args: hours_worked (float): The number of hours worked by the employee. hourly_rate (float): The hourly pay rate. Returns: float: The total salary, including overtime payment if applicable. if hours_worked <= 40: return hours_worked * hourly_rate else: regular_hours = 40 overtime_hours = hours_worked - 40 overtime_rate = hourly_rate * 1.5 return (regular_hours * hourly_rate) + (overtime_hours * overtime_rate)"},{"question":"Write a function to calculate the factorial of a number using dynamic programming. The function should take an integer as input and return the factorial of that number.","solution":"def factorial(n): Returns the factorial of the given number n using dynamic programming. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") dp = [1] * (n + 1) for i in range(2, n + 1): dp[i] = dp[i - 1] * i return dp[n]"},{"question":"Write a function to validate if a given integer is a perfect square or not. Write a function: \`def is_perfect_square(n)\`. The function should return \`True\` if \`n\` is a perfect square, otherwise return \`False\`.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = math.isqrt(n) return root * root == n"},{"question":"Write a function to filter and print numbers in the Fibonacci sequence up to a given limit. The function should take an integer \`limit\` as an input and print all numbers in the Fibonacci sequence that are less than or equal to \`limit\`.","solution":"def fibonacci_up_to_limit(limit): Prints all numbers in the Fibonacci sequence up to a given limit. :param limit: The upper limit for the Fibonacci sequence. result = [] a, b = 0, 1 while a <= limit: result.append(a) a, b = b, a + b print(result) return result"},{"question":"Write a function to validate an email address. The function should return \`True\` if the email address is valid and \`False\` otherwise. A valid email address contains the '@' symbol exactly once, and the domain part (after the '@') should contain at least one dot.","solution":"import re def validate_email(email): Validates an email address. An email is considered valid if it contains exactly one '@' symbol, and the domain part (after the '@') contains at least one dot. Parameters: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. # Regular expression pattern for validating an email address pattern = r'^[^@]+@[^@]+.[^@]+' return re.match(pattern, email) is not None"},{"question":"Write a function to convert the string \\"abc\\" to \\"def\\" in place. The string in Python is not mutable, so you cannot change its characters directly.","solution":"def convert_abc_to_def(s): Converts the string \\"abc\\" to \\"def\\" if the input string is \\"abc\\". if s == \\"abc\\": return \\"def\\" return s"},{"question":"Write a function to calculate the factorial of a number using both iterative and recursive approaches in Python. Compare their performance and speed for large numbers.","solution":"import time def factorial_iterative(n): Returns the factorial of a number using an iterative approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of a number using a recursive approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial_recursive(n - 1) def compare_performance(n): Compares the performance and speed of the iterative and recursive factorial functions. start_time = time.time() iterative_result = factorial_iterative(n) iterative_time = time.time() - start_time start_time = time.time() recursive_result = factorial_recursive(n) recursive_time = time.time() - start_time return { \\"iterative_result\\": iterative_result, \\"iterative_time\\": iterative_time, \\"recursive_result\\": recursive_result, \\"recursive_time\\": recursive_time }"},{"question":"Write a function to determine if an array is sorted in non-decreasing order and contains at most one duplicate of any element.","solution":"def is_sorted_and_single_duplicate(arr): Returns True if the array is sorted in non-decreasing order and contains at most one duplicate of any element. n = len(arr) for i in range(1, n): # Check if the array is sorted in non-decreasing order if arr[i-1] > arr[i]: return False # Check if an element contains more than one duplicate element_count = {} for num in arr: if num in element_count: element_count[num] += 1 if element_count[num] > 2: return False else: element_count[num] = 1 return True"},{"question":"Write a function to generate all possible subsets of a given list of integers. Each subset should be represented as a list of integers, and all subsets should be collected in a list of lists.","solution":"from itertools import combinations def generate_subsets(nums): Generate all possible subsets of a given list of integers. Args: nums (list): A list of integers. Returns: list: A list of lists, where each inner list is a subset of nums. subsets = [] for i in range(len(nums) + 1): for combo in combinations(nums, i): subsets.append(list(combo)) return subsets"},{"question":"Write a function to find the bitwise OR of all the elements in a list of integers.","solution":"def bitwise_or_of_list(lst): Returns the bitwise OR of all the elements in the list. Parameters: lst (list of int): A list of integers. Returns: int: The bitwise OR of all the elements in the list. result = 0 for num in lst: result |= num return result"},{"question":"Write a function to check if a given list of integers contains a sequence of consecutive numbers. If so, return True; otherwise, return False.","solution":"def contains_consecutive_sequence(numbers): Check if a given list of integers contains a sequence of consecutive numbers. Args: numbers (list of int): List of integers to check. Returns: bool: True if the list contains consecutive numbers, False otherwise. if not numbers: return False sorted_numbers = sorted(numbers) for i in range(1, len(sorted_numbers)): if sorted_numbers[i] != sorted_numbers[i - 1] + 1: return False return True"},{"question":"Write a function to flatten a nested list structure. The nested list can contain both integers and other nested lists. The function should return a single list containing all the integers in the nested structure.","solution":"def flatten(nested_list): Flattens a nested list of integers. Args: nested_list (list): A list that may contain integers and other lists. Returns: list: A flat list containing all the integers in the nested_list. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a function to remove all the whitespaces from a string.","solution":"def remove_whitespace(s): Removes all whitespaces from the input string s. Parameters: s (str): The input string from which whitespaces are to be removed. Returns: str: The string with all whitespaces removed. return ''.join(s.split())"},{"question":"Write a function to check if the current year is a leap year.","solution":"def is_leap_year(year): Checks if a given year is a leap year. Args: year (int): The year to check. Returns: bool: True if leap year, else False. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Write a function to reverse a linked list in Python. The function should take the head of the linked list as input and return the new head of the reversed linked list. Ensure that your function does not create any new nodes, but only changes the pointers between existing nodes.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list and returns the new head of the reversed list. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev def list_to_linkedlist(elements): Helper function to convert list to a linked list. if not elements: return None head = ListNode(elements[0]) current = head for value in elements[1:]: current.next = ListNode(value) current = current.next return head def linkedlist_to_list(head): Helper function to convert linked list to a list. elements = [] current = head while current: elements.append(current.value) current = current.next return elements"},{"question":"Write a function to calculate the sum of all numbers in a given list. In Python, the built-in function \`sum()\` can be used for this purpose, but let's write a function from scratch. The function should accept a list of integers and return the sum of these integers.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. :param numbers: A list of integers :return: Sum of all integers in the list total = 0 for number in numbers: total += number return total"},{"question":"Write a function to calculate the product of all elements in an array except the element at the current index. This means the output array should not include the value at the current index for each index in the input array.","solution":"def product_except_self(nums): This function returns an array where each element is the product of all the elements of the input array except the one at the current index. if len(nums) == 0: return [] length = len(nums) # Initialize arrays to store the prefix and suffix products prefix_products = [1] * length suffix_products = [1] * length # Fill prefix products - product of all previous numbers for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Fill suffix products - product of all next numbers for i in range(length - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Generate result by multiplying prefix and suffix products result = [1] * length for i in range(length): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Write a function to calculate the sum of all numbers in a list. Here is the code I have written. However, it does not work as expected. Can you help me correct the code?","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the provided list. :param numbers: list of numbers :return: sum of all numbers in the list total = 0 for number in numbers: total += number return total"},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should be able to handle large numbers by using arbitrary precision arithmetic provided by Python's \`decimal\` module.","solution":"from decimal import Decimal, getcontext def factorial(n): Returns the factorial of a given number using recursion. Parameters: n (int): The number for which the factorial is to be computed. Returns: Decimal: The factorial of the number. # Setting the precision to a high value to handle large numbers getcontext().prec = 1000 if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return Decimal(1) else: return Decimal(n) * factorial(n - 1)"},{"question":"Write a function to shuffle a given list of numbers.","solution":"import random def shuffle_list(numbers): Shuffles a given list of numbers and returns the shuffled list. shuffled = numbers[:] # Create a copy of the list to shuffle random.shuffle(shuffled) return shuffled"},{"question":"Write a function to reverse the order of words in a given string \`s\`. Your function should return the string with the words in reverse order. A word is defined as a sequence of characters separated by spaces. For example, if you call \`reverseWords(\\"hello world from Alibaba Cloud\\")\`, it should return \`\\"Cloud Alibaba from world hello\\"\`.","solution":"def reverseWords(s): Returns the string with words in reverse order. words = s.split() return ' '.join(reversed(words))"},{"question":"Write a function to sort an array of strings that contain numbers embedded within them using Python.","solution":"import re def sort_strings_with_numbers(strings): Sorts an array of strings that contain numbers embedded within them. def embedded_number_key(string): # Find all numbers embedded in the string and convert them to integers numbers = list(map(int, re.findall(r'd+', string))) # Use tuple for sorting, with primary by the first number found and secondary for the entire string return (numbers[0] if numbers else 0, string) # Sort strings using the embedded number key return sorted(strings, key=embedded_number_key)"},{"question":"Write a function to calculate the median of an array. The function should take an array of integers as input and return the median as a float. The function should handle both even and odd-sized arrays. If the array is empty, return.float('nan') as the median.","solution":"def median(arr): Returns the median of the given array of integers as a float. Handles both even and odd-sized arrays. If the array is empty, returns float('nan'). if not arr: return float('nan') sorted_arr = sorted(arr) n = len(sorted_arr) mid = n // 2 if n % 2 == 0: # even-sized array return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2.0 else: # odd-sized array return float(sorted_arr[mid])"},{"question":"Write a function to identify the longest prefix which is also a suffix in a given string. The function should take a single string as input and return the length of the longest prefix-suffix or 0 if no such prefix-suffix exists.","solution":"def longest_prefix_suffix(s): Returns the length of the longest prefix which is also a suffix in the given string. n = len(s) lps = [0] * n # lps array to store the longest prefix suffix values for string indices length = 0 # length of the previous longest prefix suffix i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps[-1] if n > 0 else 0"},{"question":"Write a function to generate all combinations of well-formed parentheses for a given number \`n\`. A well-formed string of parentheses is one where every opening parenthesis \`(\` has a corresponding closing parenthesis \`)\` and the pairs of parentheses are properly nested.","solution":"def generate_parentheses(n): Generates all combinations of well-formed parentheses for a given number n. Args: n (int): The number of pairs of parentheses. Returns: List[str]: A list of strings, each string represents a combination of well-formed parentheses. result = [] def backtrack(s=\\"\\", left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \\"(\\", left + 1, right) if right < left: backtrack(s + \\")\\", left, right + 1) backtrack() return result"},{"question":"Write a function to detect a cycle in a linked list. If a cycle is detected, it should return \`True\`, otherwise \`False\`. The linked list is represented by a class \`ListNode\` where each node has an integer value and a reference to the next node.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head): Detects a cycle in a linked list. :param head: ListNode :return: bool - True if there is a cycle, False otherwise slow, fast = head, head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function to generate all possible palindromic partitions of a given string \`s\`. A palindromic partition cuts the string into some substrings which are all palindromes. Return a list of all possible partitions.","solution":"def is_palindrome(s): return s == s[::-1] def palindromic_partition(s): def find_partitions(start, path): if start == len(s): result.append(path[:]) return for end in range(start + 1, len(s) + 1): if is_palindrome(s[start:end]): path.append(s[start:end]) find_partitions(end, path) path.pop() result = [] find_partitions(0, []) return result"},{"question":"Write a function to return the sum of the first 10 terms of the Fibonacci series in Python. The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones. It usually starts with 0 and 1.","solution":"def sum_first_10_fibonacci(): Returns the sum of the first 10 terms of the Fibonacci series. # Starting elements of the Fibonacci series fib = [0, 1] while len(fib) < 10: fib.append(fib[-1] + fib[-2]) return sum(fib)"},{"question":"Write a function to compute the sum of all numbers in a list using a for loop.","solution":"def list_sum(numbers): Computes the sum of all numbers in a list. Args: numbers (list of int/float): List of numbers to sum. Returns: int/float: Sum of all numbers in the list. total = 0 for number in numbers: total += number return total"},{"question":"Write a function to create an n x n matrix filled with elements from 1 to n*n in spiral order.","solution":"def generate_matrix(n): Create an n x n matrix filled with elements from 1 to n*n in spiral order. Parameters: n (int): The size of the matrix. Returns: List[List[int]]: The n x n matrix in spiral order. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Write a function to remove all duplicates from a list of strings while preserving the original order of the list.","solution":"def remove_duplicates(strings): Removes duplicate strings from the list while preserving the original order. Parameters: strings (list): List of strings from which duplicates are to be removed Returns: list: A list with duplicates removed, preserving original order seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Write a function to reverse a group of characters in a string. I am using Python. How can I do this?","solution":"def reverse_group_of_characters(s, group_size): Reverses each group of characters of the specified group_size in the string s. Parameters: s (str): The input string. group_size (int): The size of each group of characters to reverse. Returns: str: The string with each group of characters reversed. if group_size <= 0: return s result = [] for i in range(0, len(s), group_size): group = s[i:i+group_size] result.append(group[::-1]) return ''.join(result)"},{"question":"Write a function to find the second largest element in an array. If the array does not have a second largest element, return the largest element.","solution":"def second_largest(arr): Returns the second largest element in an array. If the array does not have a second largest element, returns the largest element. if len(arr) < 2: return max(arr) if arr else None first, second = float('-inf'), float('-inf') for num in arr: if num > first: second = first first = num elif num > second and num != first: second = num return second if second != float('-inf') else first"},{"question":"Write a function to print a matrix in spiral order.","solution":"def spiral_order(matrix): Returns the elements of a matrix in spiral order. :param matrix: List[List[int]] - A 2D list of integers. :return: List[int] - A list of elements in spiral order. if not matrix or not matrix[0]: return [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 result = [] while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Write a function to find the largest rectangular area in a histogram where the bars in the histogram have equal widths. The function should take an array of integers representing the heights of the histogram bars and return the area of the largest rectangle.","solution":"def largest_rectangle_area(heights): Finds the largest rectangular area in a histogram where the bars have equal widths. Args: heights (list of int): A list of the heights of the histogram bars. Returns: int: The area of the largest rectangle possible in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function to find the minimum number of coins required to make a given sum \`n\`, with coin denominations \`coins = [1, 5, 10, 25]\`. If \`n\` is not achievable with the given coins, return \`-1\`.","solution":"def min_coins(n, coins=[1, 5, 10, 25]): Returns the minimum number of coins required to make the given sum \`n\` with the specified coin denominations. If \`n\` is not achievable, returns -1. # Initializing DP array dp = [float('inf')] * (n + 1) dp[0] = 0 for coin in coins: for x in range(coin, n + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[n] if dp[n] != float('inf') else -1"},{"question":"Write a function to check if a given word is a palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"racecar\\" is a palindrome.","solution":"def is_palindrome(word): Checks if a given word is a palindrome. Args: word (str): The word to check. Returns: bool: True if the word is a palindrome, False otherwise. # Remove any non-alphanumeric characters and convert to lowercase sanitized_word = ''.join(char.lower() for char in word if char.isalnum()) return sanitized_word == sanitized_word[::-1]"},{"question":"Write a function to find the minimum in a row-wise and column-wise sorted 2D array.","solution":"def find_min_in_sorted_2d_array(arr): Given a 2D array that is sorted row-wise and column-wise, finds and returns the minimum value. :param arr: List[List[int]], the 2D array :return: int, the minimum value in the array if not arr or not arr[0]: raise ValueError(\\"The array is empty or not properly structured.\\") # Since the array is sorted row-wise and column-wise, the minimum element is at the top-left corner. return arr[0][0]"},{"question":"Write a function to check if a number is a perfect square. Given a non-negative integer 'num', return True if 'num' is a perfect square; otherwise, return False. A perfect square is an integer that is the square of an integer.","solution":"def is_perfect_square(num): Determines if the given non-negative integer 'num' is a perfect square. :param num: Non-negative integer :return: True if 'num' is a perfect square, otherwise False if num < 0: return False left, right = 0, num while left <= right: mid = (left + right) // 2 square = mid * mid if square == num: return True elif square < num: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a function to determine the number each string array word in an array of words has. Then print the words and their corresponding count.","solution":"def word_counts(words): Given an array of words, returns a dictionary with the words as keys and their counts as values. count_dict = {} for word in words: if word in count_dict: count_dict[word] += 1 else: count_dict[word] = 1 return count_dict"},{"question":"Write a function to count the occurrences of a character in a given string.","solution":"def count_occurrences(s, char): Returns the number of times the character 'char' appears in the string 's'. return s.count(char)"},{"question":"Write a function to check if a given number is a perfect square. If it is, print \\"Perfect square\\", otherwise print \\"Not a perfect square\\".","solution":"def is_perfect_square(n): Checks if a given number n is a perfect square. if n < 0: return \\"Not a perfect square\\" root = int(n**0.5) if root * root == n: return \\"Perfect square\\" else: return \\"Not a perfect square\\""},{"question":"Write a function to generate all the possible combinations of k numbers out of a set of n numbers. The set contains distinct numbers ranging from 1 to n. The solution should provide both the recursive and iterative approaches.","solution":"from itertools import combinations def recursive_combinations(n, k): Generates all possible combinations of k numbers out of the set {1, 2, ..., n} using recursion. result = [] def backtrack(start, path): if len(path) == k: result.append(list(path)) return for i in range(start, n + 1): path.append(i) backtrack(i + 1, path) path.pop() backtrack(1, []) return result def iterative_combinations(n, k): Generates all possible combinations of k numbers out of the set {1, 2, ..., n} using itertools. return list(combinations(range(1, n + 1), k))"},{"question":"Write a function to reverse the order of characters in a given string without using any built-in reverse functions or slicing. Implement this in Python.","solution":"def reverse_string(s): Reverses the order of characters in a given string without using any built-in reverse functions or slicing. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to reverse the order of characters in strings within a list.","solution":"def reverse_strings_in_list(strings): Reverses the order of characters in each string within the given list. Args: strings (list of str): A list of strings. Returns: list of str: A list containing the reversed strings. return [string[::-1] for string in strings]"},{"question":"Write a function to return the n-th Fibonacci number using a non-recursive approach. The function should be efficient and handle large values of n without using excessive memory.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using a non-recursive approach. Efficiently handles large values of n without using excessive memory. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 fib_prev, fib_curr = 0, 1 for _ in range(2, n): fib_prev, fib_curr = fib_curr, fib_prev + fib_curr return fib_curr"},{"question":"Write a function to get the maximum number from a list of integers by using Stack data structure. Without using any built-in sorting functions.","solution":"def get_max_from_stack(numbers): Returns the maximum number from a list of integers using a stack. if len(numbers) == 0: return None stack = [] max_num = float('-inf') # Initialize max_num to the smallest possible value for num in numbers: stack.append(num) while stack: current_num = stack.pop() if current_num > max_num: max_num = current_num return max_num"},{"question":"Write a function to convert a string to a list of integers. The string contains numbers separated by spaces or commas. For example, given the string \\"1,2,3 4,5,6\\", the function should return the list [1, 2, 3, 4, 5, 6].","solution":"def string_to_int_list(s): Convert a string with numbers separated by spaces or commas to a list of integers. # Remove all commas in the string s = s.replace(',', ' ') # Split the string by spaces str_list = s.split() # Convert each element in the list to an integer int_list = [int(num) for num in str_list] return int_list"},{"question":"Write a function to check if a list contains a unique combination of elements. For example, if the list \`[1, 2, 3]\` is given, the combination \`(1, 2, 3)\` should not be repeated in any order.","solution":"def has_unique_combination(lst): Checks if the given list contains unique elements. Parameters: lst (list): The list of elements to check. Returns: bool: True if the list contains unique elements, False otherwise. return len(lst) == len(set(lst))"},{"question":"Write a function to merge two strings, \`s1\` and \`s2\`, such that the characters from both strings are alternately added to the new string. If one string is longer than the other, append the remaining characters to the end of the merged string. For example, merging \\"abc\\" and \\"defg\\" should give \\"adbcefgh\\".","solution":"def merge_strings_alternately(s1, s2): Merges two strings alternately. If one string is longer, appends the remaining characters. Args: s1 (str): The first input string. s2 (str): The second input string. Returns: str: The merged string. merged_string = [] len_s1, len_s2 = len(s1), len(s2) min_len = min(len_s1, len_s2) for i in range(min_len): merged_string.append(s1[i]) merged_string.append(s2[i]) if len_s1 > len_s2: merged_string.extend(s1[min_len:]) elif len_s2 > len_s1: merged_string.extend(s2[min_len:]) return ''.join(merged_string)"},{"question":"Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum and return its sum. You may assume that the array will have at least one number.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray within nums with the largest sum. :param nums: List[int] :return: int max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to print all numbers from 1 to 100 that are divisible by 3.","solution":"def print_numbers_divisible_by_3(): Returns a list of all numbers from 1 to 100 that are divisible by 3. return [number for number in range(1, 101) if number % 3 == 0]"},{"question":"Write a function to calculate the sum of the digits in a given integer. If the sum of the digits is greater than 10, recursively call the function with the sum as the new integer until the sum is less than or equal to 10.","solution":"def sum_of_digits(num): Calculates the sum of the digits in a given integer. If the sum of the digits is greater than 10, recursively calls the function with the sum as the new integer until the sum is less than or equal to 10. def digit_sum(n): return sum(int(digit) for digit in str(n)) result = digit_sum(num) while result > 10: result = digit_sum(result) return result"},{"question":"Write a function to convert a string to a reverse string. For example, if the input is \\"hello\\", the output should be \\"olleh\\".","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to detect if a string is an anagram of a palindrome. Return true if it is, and false otherwise. A palindrome is a string that reads the same backward as forward. An anagram is a permutation of a string.","solution":"def is_anagram_of_palindrome(s): Returns True if the string is an anagram of a palindrome, otherwise False. from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1"},{"question":"Write a function to calculate the factorial of a given number. The function should handle large numbers by using the BigInteger data type to avoid integer overflow issues. To improve performance, remember to use memoization to store previously computed factorials.","solution":"def memoize_factorial(fn): Memoization decorator for the factorial function. cache = {} def memoized_fn(n): if n not in cache: cache[n] = fn(n) return cache[n] return memoized_fn @memoize_factorial def factorial(n): Returns the factorial of the given number n. Uses memoization to store previously computed factorials. if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a function to iterate over the nodes of a linked list and return the value of the last node.","solution":"class Node: def __init__(self, value, next=None): self.value = value self.next = next def get_last_node_value(head): Returns the value of the last node in the linked list. :param head: Node, the head of the linked list :return: value of the last node if head is None: return None current = head while current.next is not None: current = current.next return current.value"},{"question":"Write a function to generate a sequence of numbers from 1 to n, where each number appears only once. The sequence should be returned as a list. If n is less than or equal to 0, the function should return an empty list.","solution":"def generate_sequence(n): Generate a sequence of numbers from 1 to n. If n is less than or equal to 0, return an empty list. if n <= 0: return [] return list(range(1, n + 1))"},{"question":"Write a function to generate all permutations of a given list of numbers.","solution":"from typing import List def generate_permutations(nums: List[int]) -> List[List[int]]: Generates all permutations of a given list of numbers. :param nums: List of numbers to generate permutations for. :return: A list of lists, each inner list being a permutation of the input list. def backtrack(start, end): if start == end: permutations.append(nums[:]) for i in range(start, end): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1, end) nums[start], nums[i] = nums[i], nums[start] permutations = [] backtrack(0, len(nums)) return permutations"},{"question":"Write a function to sort an array of strings based on the length of each string. The strings should be sorted from the shortest to the longest. If two strings have the same length, they should be sorted alphabetically.","solution":"def sort_strings_by_length(strings): Sort an array of strings based on the length of each string. Strings of the same length will be sorted alphabetically. Parameters: strings (list): A list of strings to sort. Returns: list: The sorted list of strings. return sorted(strings, key=lambda x: (len(x), x))"},{"question":"Write a function to detect XML data stored in a file. are there any predefined functions in python to read an xml file and parse its data? yes, yes there are.","solution":"import xml.etree.ElementTree as ET def read_and_parse_xml(file_path): Reads and parses XML data from the given file path. :param file_path: str, path to the XML file :return: ElementTree.Element, the root element of the parsed XML tree try: tree = ET.parse(file_path) root = tree.getroot() return root except ET.ParseError: raise ValueError(\\"The file contains malformed XML.\\") except FileNotFoundError: raise FileNotFoundError(f\\"No such file: '{file_path}'\\")"},{"question":"Write a function to consolidate a list of lists into a single list.","solution":"def consolidate_list_of_lists(list_of_lists): Consolidates a list of lists into a single list. Args: list_of_lists (list of lists): A list where each element is a list. Returns: list: A single list containing all elements from the nested lists. consolidated_list = [] for sublist in list_of_lists: consolidated_list.extend(sublist) return consolidated_list"},{"question":"Write a function to calculate the sum of all prime numbers up to a given number \`n\`. For example, if \`n\` is 10, the prime numbers up to 10 are 2, 3, 5, 7, so the function should return 17.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n): return sum(i for i in range(2, n + 1) if is_prime(i))"},{"question":"Write a function to calculate the Fibonacci sequence up to the nth number using an iterative approach. How can this function be optimized for performance?","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number using an iterative approach. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence"},{"question":"Write a function to find the minimum absolute difference between any two distinct elements in an array, subject to the constraint that the two elements must be at different indices.","solution":"def minimum_absolute_difference(arr): Returns the minimum absolute difference between any two distinct elements in the array. if len(arr) < 2: return 0 # Not enough elements to compare # Sort the array arr.sort() # Initialize the minimum difference as a very large number min_diff = float('inf') # Iterate through the array and find the minimum absolute difference for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Write a function to generate the Fibonacci sequence up to a given number ( n ). The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function to calculate the sum of all numbers in a given list. If the list is empty, the function should return 0.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. If the list is empty, returns 0. return sum(numbers) if numbers else 0"},{"question":"Write a function to find the maximum profit from the given prices of stocks over a period of time. The function should take a list of stock prices and return the maximum profit that can be made by buying and selling stocks at the correct times. Note that you can only make a single buy and sell transaction.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling one stock. :param prices: List of stock prices :return: Maximum profit if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to find all the maximum depth paths in a binary tree. The function should return a list of all such paths. Each path should be represented as a list of node values from the root to the leaf. If there are multiple paths with the same maximum depth, all paths with that depth should be included in the result.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_depth_paths(root): if not root: return [] paths = [] max_depth = 0 def dfs(node, path, depth): nonlocal max_depth if not node: return # Add current node to the path path.append(node.val) # If it's a leaf node, consider this path if not node.left and not node.right: if depth > max_depth: max_depth = depth paths.clear() paths.append(path[:]) elif depth == max_depth: paths.append(path[:]) else: # Explore left and right subtrees dfs(node.left, path, depth + 1) dfs(node.right, path, depth + 1) # Remove current node from path to backtrack path.pop() dfs(root, [], 1) return paths"},{"question":"Write a function to remove all occurrences of a target \`val\` from an integer array \`nums\` in-place and return the new length of the array.","solution":"def remove_element(nums, val): Removes all occurrences of val in nums in-place and returns the new length of the array. i = 0 for j in range(len(nums)): if nums[j] != val: nums[i] = nums[j] i += 1 return i"},{"question":"Write a function to find the maximum sum of non-adjacent elements in a given list of integers.","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of non-adjacent elements in a list of integers. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) prev_one = max(0, nums[0]) prev_two = 0 for num in nums[1:]: current = max(prev_one, prev_two + num) prev_two = prev_one prev_one = current return prev_one"},{"question":"Write a function to print the elements of a 2D list (matrix) in a spiral order.","solution":"def spiral_order(matrix): Returns a list of matrix elements in spiral order. if not matrix: return [] spiral = [] top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): spiral.append(matrix[top][i]) top += 1 # Traverse downwards for i in range(top, bottom + 1): spiral.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): spiral.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): spiral.append(matrix[i][left]) left += 1 return spiral"},{"question":"Write a function to multiply two integers without using the multiplication operator. Recursive approach with a loop concept. How can I achieve this?","solution":"def multiply(a, b): Returns the product of a and b using a recursive approach. Positive case and adjustment for negative numbers are handled separately. # Base Case: when b is 0, the product is 0. if b == 0: return 0 # Handle the case where b is negative if b < 0: return -multiply(a, -b) # Recursive Step: b is positive, sum up 'a' b times return a + multiply(a, b - 1)"},{"question":"Write a function to find the maximum value in a list of integers. If the list is empty, return \`None\`.","solution":"def find_max(values): Returns the maximum value in a list of integers. If the list is empty, returns None. if not values: return None return max(values)"},{"question":"Write a function to find all the unique combinations of a given set of integers that sum up to a given target. Each number in the set can only be used once in the combination. The order of the combinations does not matter, but the order of the numbers within each combination should be in non-decreasing order.","solution":"def unique_combinations(nums, target): def backtrack(start, path, remainder): if remainder == 0: result.append(path) return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue if nums[i] > remainder: break backtrack(i + 1, path + [nums[i]], remainder - nums[i]) nums.sort() result = [] backtrack(0, [], target) return result"},{"question":"Write a function to implement the Caesar cipher in Python. The function should take a string and a shift value as input and return the encrypted string. The Caesar cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. Example: shifting 'A' by 1 would give 'B', shifting 'B' by 1 would give 'C', and so on. Shifts wrap around, so after 'Z', it goes back to 'A', and the same for 'a' to 'z'.","solution":"def caesar_cipher(text, shift): Encrypts the given text using Caesar cipher with the specified shift. Args: text (str): The plaintext to encrypt. shift (int): The number of positions to shift each letter. Returns: str: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(new_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Write a function to generate a vector of length \`n\` with random integers between 1 and 100.","solution":"import random def generate_random_vector(n): Generates a vector of length n with random integers between 1 and 100. Parameters: n (int): Length of the vector. Returns: list: A list of random integers. return [random.randint(1, 100) for _ in range(n)]"},{"question":"Write a function to split an array into two arrays of approximately equal length.","solution":"def split_array(arr): Splits an array into two arrays of approximately equal length. midpoint = len(arr) // 2 return arr[:midpoint], arr[midpoint:]"},{"question":"Write a function to convert a roman numeral to an integer. In this problem, you will be provided with a string that contains a valid roman numeral. Your task is to convert this string into an integer.","solution":"def roman_to_integer(roman): Converts a Roman numeral to an integer. Parameters: roman (str): A string containing a Roman numeral. Returns: int: The integer value of the Roman numeral. roman_numerals = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_numerals[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a function to find the nth element in a Fibonacci sequence using recursion in Python. The Fibonacci sequence is a series where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth element in the Fibonacci sequence using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to shift a given string right by k places. If k is greater than the string's length, it should shift the string right by the remainder of (k % length of the string).","solution":"def shift_string_right(s, k): Shifts a given string 's' right by 'k' places. If 'k' is greater than the length of the string, it shifts the string right by the remainder of (k % length of the string). :param s: String to be shifted :param k: Number of places to shift the string to the right :return: New shifted string if not s: return s k = k % len(s) return s[-k:] + s[:-k]"},{"question":"Write a function to return the maximum of three integers.","solution":"def max_of_three(a, b, c): Returns the maximum of three given integers. return max(a, b, c)"},{"question":"Write a function to calculate the surface area of a sphere given its radius. The function should take one argument, the radius, and return the surface area. Use the formula (4pi r^2) for the surface area of a sphere. Ensure to include the necessary library for mathematical functions and also round the result to two decimal places for better readability.","solution":"import math def sphere_surface_area(radius): Returns the surface area of a sphere given its radius. Parameters: radius (float): the radius of the sphere Returns: float: the surface area of the sphere rounded to two decimal places surface_area = 4 * math.pi * (radius ** 2) return round(surface_area, 2)"},{"question":"Write a function to calculate the sum of two integers without using arithmetic operators in Python.","solution":"def add_without_arithmetic(a, b): Returns the sum of a and b without using arithmetic operators. MAX = 0xFFFFFFFF MIN = 0x80000000 while b != 0: # calculate carry carry = a & b # sum without carry a = (a ^ b) & MAX # shift carry by one to add in next significant digit b = (carry << 1) & MAX # if a is less than minimum signed integer, handle two's complement return a if a <= MAX // 2 else ~(a ^ MAX)"},{"question":"Write a function to check if a given integer is a palindrome without using additional space for data structures like arrays, strings, etc. The function should return true if the integer is a palindrome, and false otherwise.","solution":"def is_palindrome_number(x): Check if a given integer is a palindrome without using additional space for data structures like arrays, strings, etc. A palindrome number is a number that remains the same when its digits are reversed. Parameters: x (int): An integer to check if it is a palindrome. Returns: bool: True if the integer is a palindrome, False otherwise. if x < 0: return False original = x reversed_num = 0 while x > 0: reversed_num = reversed_num * 10 + x % 10 x //= 10 return original == reversed_num"},{"question":"Write a function to find the minimum value in a binary search tree (BST). The function should return the minimum value and a boolean indicating whether the key exists in the tree.","solution":"class TreeNode: def __init__(self, key, left=None, right=None): self.key = key self.left = left self.right = right def find_min_in_bst(root): This function returns a tuple (minimum_value, exists) where minimum_value is the minimum key value in the BST and exists is a boolean indicating whether the tree is non-empty. if root is None: return None, False current = root while current.left is not None: current = current.left return current.key, True"},{"question":"Write a function to summarize a given text using a sentence. The function should take a text input and return a sentence summarizing it. The summary should capture the essence of the text in a single sentence.","solution":"from typing import List import re from collections import Counter import heapq def summarize_text(text: str) -> str: Summarizes the given text into a single sentence. Parameters: text (str): The text to be summarized. Returns: str: A single sentence summarizing the text. def preprocess_text(text: str) -> List[str]: sentences = re.split(r'(?<=[.!?]) +', text) return sentences sentences = preprocess_text(text) words = re.findall(r'w+', text.lower()) word_freq = Counter(words) sentence_scores = {} for sentence in sentences: word_list = re.findall(r'w+', sentence.lower()) score = sum(word_freq[word] for word in word_list) sentence_scores[sentence] = score best_sentence = max(sentences, key=lambda sentence: sentence_scores.get(sentence, 0)) return best_sentence"},{"question":"Write a function to calculate the sum of elements in a list. I want a solution in Python. Can you provide an example?","solution":"def sum_of_elements(lst): Returns the sum of all the elements in the list. Args: lst (list): A list of numbers. Returns: int/float: The sum of the elements. return sum(lst)"},{"question":"Write a function to find a pair of numbers in a given array that add up to a specific target. If such a pair exists, return the indices of the two numbers in the array. If no such pair exists, return -1. Also, the function should print out the indices of the pair if they are found. If not, it should print a message indicating no pair was found.","solution":"def find_pair_with_sum(arr, target): Finds a pair of numbers in the given array that add up to the specific target. If such a pair exists, returns the indices of the two numbers in the array. If no such pair exists, returns -1. Also, prints out the indices of the pair if they are found. If not, prints a message indicating no pair was found. :param arr: List of integers :param target: Integer, the sum target :return: Tuple of indices or -1 if no pair is found num_dict = {} for i, num in enumerate(arr): potential_match = target - num if potential_match in num_dict: print(f\\"Pair found at indices: ({num_dict[potential_match]}, {i})\\") return (num_dict[potential_match], i) num_dict[num] = i print(\\"No pair found\\") return -1"},{"question":"Write a function to find the number of distinct substrings of a string.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a function to check if a given number is a prime number or not. Write the function in Python.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to check if a given integer is a number with alternating bits using Python. The function should return \`True\` if the integer has alternating bits, otherwise \`False\`.","solution":"def has_alternating_bits(n): Returns True if the integer n has alternating bits, otherwise False. prev_bit = n & 1 n >>= 1 while n > 0: current_bit = n & 1 if current_bit == prev_bit: return False prev_bit = current_bit n >>= 1 return True"},{"question":"Write a function to count the number of unique characters in a string, considering case sensitivity. For example, the string \\"abcABC\\" has 5 unique characters.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s, considering case sensitivity. return len(set(s))"},{"question":"Write a function to calculate the sum of odd numbers at even indices in a list.","solution":"def sum_odd_numbers_at_even_indices(lst): Returns the sum of odd numbers at even indices in the list. return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 != 0)"},{"question":"Write a function to print Floyd's Triangle using Python.","solution":"def floyds_triangle(n): Prints Floyd's Triangle with n rows. num = 1 for i in range(1, n+1): row = [] for j in range(1, i+1): row.append(str(num)) num += 1 print(\\" \\".join(row))"},{"question":"Write a function to calculate the sum of all numbers in a nested list. The function should use recursion to solve the problem. Here is the function signature: \`def sum_nested_list(nested_list):\`.","solution":"def sum_nested_list(nested_list): Calculates the sum of all numbers in a nested list using recursion. Args: nested_list (list): A nested list of integers. Returns: int: The sum of all integers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to perform breadth-first search (BFS) on a graph.","solution":"from collections import deque def bfs(graph, start): Perform breadth-first search (BFS) on the graph starting from the node 'start'. Returns the list of nodes in the order they are visited. :param graph: A dictionary representing an adjacency list of the graph :param start: The starting node for BFS :return: List of nodes in the order they are visited visited = [] queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.append(node) neighbours = graph.get(node, []) for neighbour in neighbours: if neighbour not in visited: queue.append(neighbour) return visited"},{"question":"Write a function to find the maximum product of two distinct numbers in a list. The function should take a list of integers as input and return the maximum product. If the list has fewer than two elements, return -1.","solution":"def max_product(lst): Returns the maximum product of two distinct numbers in the list. If the list has fewer than two elements, returns -1. if len(lst) < 2: return -1 lst.sort() # Maximum product can either be the product of two largest positive numbers # or the product of two smallest (most negative) numbers (if list contains negative numbers) return max(lst[0] * lst[1], lst[-1] * lst[-2])"},{"question":"Write a function to traverse a graph using Depth First Search (DFS) and count the number of nodes visited. The graph is represented as an adjacency list.","solution":"def dfs(graph, start): Depth First Search (DFS) traversal of a graph to count the number of nodes visited. :param graph: dict, adjacency list of the graph where keys are nodes and values are lists of neighbors :param start: starting node for DFS :return: number of nodes visited visited = set() def dfs_helper(node): if node not in visited: visited.add(node) for neighbor in graph.get(node, []): dfs_helper(neighbor) dfs_helper(start) return len(visited)"},{"question":"Write a function to write a Unicode string to a text file.","solution":"def write_unicode_to_file(content, file_path): Writes a Unicode string to a text file. :param content: str, the Unicode string to be written to the file :param file_path: str, the path of the file where the string will be written try: with open(file_path, 'w', encoding='utf-8') as file: file.write(content) except Exception as e: raise IOError(f\\"Could not write to file {file_path}: {e}\\")"},{"question":"Write a function to check if a given number \`n\` is a Harshad number. A Harshad number is a number that is divisible by the sum of its digits.","solution":"def is_harshad_number(n): Check if the given number n is a Harshad number. A Harshad number is an integer that is divisible by the sum of its digits. Parameters: n (int): The number to be checked. Returns: bool: True if n is a Harshad number, False otherwise. sum_of_digits = sum(int(digit) for digit in str(n)) return n % sum_of_digits == 0"},{"question":"Write a function to reverse a singly linked list. Try to solve this problem both iteratively and recursively.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_iteratively(head): prev = None curr = head while curr: next_node = curr.next curr.next = prev prev = curr curr = next_node return prev def reverse_recursively(head): if not head or not head.next: return head new_head = reverse_recursively(head.next) head.next.next = head head.next = None return new_head # Helper function to convert list to linked list for testing purposes def list_to_linked_list(lst): dummy = ListNode() curr = dummy for val in lst: curr.next = ListNode(val) curr = curr.next return dummy.next # Helper function to convert linked list to list for testing purposes def linked_list_to_list(head): lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"Write a function to find the inventory list of a product in a generic store. The inventory list is defined as a dictionary containing product IDs as keys and the quantity of each product as values.","solution":"def inventory_list(products): Takes a list of product IDs and returns a dictionary containing the quantity of each product. Parameters: products (list): A list of product IDs. Returns: dict: A dictionary with product IDs as keys and their quantities as values. inventory = {} for product in products: if product in inventory: inventory[product] += 1 else: inventory[product] = 1 return inventory"},{"question":"Write a function to find the maximum and minimum values in a given list of integers.","solution":"def find_max_min(values): Returns the maximum and minimum values from a list of integers. :param values: List of integers. :return: Tuple containing the maximum and minimum values. if not values: return None, None max_value = max(values) min_value = min(values) return max_value, min_value"},{"question":"Write a function to return the minimum number of 2's required to obtain a given number n by summing multiples of 2 and 1. In the worst case, the number of 2's required should be the least.","solution":"def min_twos_to_sum(n): Returns the minimum number of 2's required to obtain a given number n by summing multiples of 2 and 1. if n % 2 == 0: return n // 2 else: return n // 2"},{"question":"Write a function to find the length of a singly linked list using recursion.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def length_of_linked_list(head): Returns the length of a singly linked list using recursion. if head is None: return 0 else: return 1 + length_of_linked_list(head.next)"},{"question":"Write a function to find the maximum value in a unidimensional array (列表) in Python.","solution":"def find_maximum(arr): Returns the maximum value in a one-dimensional array. Parameters: arr (list of int/float): Input list of numbers Returns: int/float: The maximum value in the list if not arr: raise ValueError(\\"Array is empty\\") max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a function to sum up all the numbers in a list. The function should take a list of numbers as input and return the sum. Make sure to handle the case where the list might be empty. If the list is empty, the function should return 0. Please also write a basic test function to verify your solution.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Write a function to process a list of integers and return a new list where each number is the result of dividing the corresponding number in the input list by the sum of all numbers in the list. If the sum of all numbers in the list is zero, the function should return a new list with the same length as the input list, filled with zeros.","solution":"def process_list(nums): Processes a list of integers and returns a new list where each number is the result of dividing the corresponding number in the input list by the sum of all numbers in the list. If the sum of all numbers in the list is zero, returns a list of zeros of the same length. Args: nums (list of int): List of integers to process. Returns: list of float: List of processed numbers. total_sum = sum(nums) if total_sum == 0: return [0] * len(nums) return [num / total_sum for num in nums]"},{"question":"Write a function to find the number of tuples in a list of tuples that contain a specific element. My list is \`list = [(1,2,3),(4,5,6),(7,8,9),(1,10,11),(1,12,13)]\` and I want to find the number of tuples that contain the element \`1\`. How can you do it in Python?","solution":"def count_tuples_with_element(tuples_list, element): Returns the count of tuples in the list that contain the given element. Parameters: tuples_list (list of tuples): The list of tuples to search. element (any type): The element to search for in the tuples. Returns: int: The number of tuples containing the element. return sum(1 for t in tuples_list if element in t) # Example usage: tuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 10, 11), (1, 12, 13)] element = 1 count = count_tuples_with_element(tuples_list, element) print(count) # Output: 3"},{"question":"Write a function to reverse a singly-linked list. Your solution should be in Python and optimized for readability and performance.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverse a singly-linked list. :param head: ListNode, the head of the singly-linked list :return: ListNode, the new head of the reversed singly-linked list prev = None curr = head while curr is not None: next_node = curr.next # temporarily store the next node curr.next = prev # reverse the current node's pointer prev = curr # move the pointer for the reversed list curr = next_node # move to the next node in the original list return prev # prev will be the new head of the reversed list"},{"question":"Write a function to find the length of the longest increasing subsequence (LIS) in an array. The LIS is the longest subsequence that is strictly increasing.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to convert a given string to binary format.","solution":"def string_to_binary(input_string): Converts a given string to its binary format. Parameters: input_string (str): The string to be converted to binary. Returns: str: A string representing the binary format of the input string. return ' '.join(format(ord(char), '08b') for char in input_string)"},{"question":"Write a function to sort an array of integers using the merge sort algorithm and return the sorted array.","solution":"def merge_sort(arr): Sorts an array of integers using the merge sort algorithm and returns the sorted array. Parameters: arr (list): The array of integers to be sorted. Returns: list: The sorted array. if len(arr) <= 1: return arr # Split the array into two halves mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively sort both halves left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merges two sorted arrays into one sorted array. Parameters: left (list): The first sorted array. right (list): The second sorted array. Returns: list: The merged sorted array. sorted_array = [] left_index, right_index = 0, 0 # Merge the two arrays by comparing elements from both arrays. while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_array.append(left[left_index]) left_index += 1 else: sorted_array.append(right[right_index]) right_index += 1 # If there are remaining elements in the left array, add them to the result. while left_index < len(left): sorted_array.append(left[left_index]) left_index += 1 # If there are remaining elements in the right array, add them to the result. while right_index < len(right): sorted_array.append(right[right_index]) right_index += 1 return sorted_array"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Is it possible to calculate the factorial of a negative number using this function?","solution":"def factorial(n): Returns the factorial of n using recursion. If n is negative, raises a ValueError as factorial is not defined for negative numbers. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to determine the exact time it takes for a simple pendulum to swing back and forth. This swing is known as a \\"period\\". The formula to calculate the period of a simple pendulum is T = 2 * pi * sqrt(L / g), where \\"pi\\" is a mathematical constant approximately equal to 3.14159, \\"L\\" is the length of the pendulum in meters, and \\"g\\" is the acceleration due to gravity, approximately 9.8 meters per square second on Earth.","solution":"import math def pendulum_period(L, g=9.8): Returns the period of a simple pendulum with length L meters and gravitational acceleration g meters per square second. return 2 * math.pi * math.sqrt(L / g)"},{"question":"Write a function to convert a nested dictionary into a query string that follows the URL query string format, where each dictionary key value pair is concatenated by \\"&\\" and \\"=\\" respectively. Nested dictionaries should be flattened and their keys should be concatenated with \\".\\"","solution":"def dict_to_query_string(d, parent_key=''): Converts a nested dictionary into a query string, flattening nested dictionaries and concatenating keys with \\".\\". :param d: Dictionary to convert. :param parent_key: The base key for the current level of recursion (used for nested dictionaries). :return: A URL query string representation of the dictionary. parts = [] for key, value in d.items(): full_key = f\\"{parent_key}.{key}\\" if parent_key else key if isinstance(value, dict): parts.extend(dict_to_query_string(value, full_key).split('&')) else: parts.append(f\\"{full_key}={value}\\") return '&'.join(parts)"},{"question":"Write a function to find the most frequent element in an array of integers. If there are multiple elements with the same highest frequency, return all of them in the order they first appear in the array. If the array is empty, return an empty array.","solution":"def most_frequent_elements(arr): Returns the list of the most frequent elements in the order they first appear in the array. :param arr: List of integers :return: List of integers which are the most frequent elements if not arr: return [] from collections import Counter counter = Counter(arr) max_freq = max(counter.values()) most_frequent = [num for num in arr if counter[num] == max_freq] seen = set() result = [] for num in most_frequent: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function to reverse a given integer. If reversing the integer causes it to go outside the 32-bit signed integer range [-231, 231 - 1], then return 0.","solution":"def reverse_integer(x): Reverse digits of an integer. :param x: input integer :return: reversed integer if it is in the 32-bit signed integer range, otherwise 0 sign = -1 if x < 0 else 1 x_abs_str = str(abs(x)) reversed_str = x_abs_str[::-1] reversed_int = int(reversed_str) * sign if reversed_int < -2**31 or reversed_int > 2**31 - 1: return 0 return reversed_int"},{"question":"Write a function to reverse the elements of an array of integers. How would you approach this problem in Python? Could you provide an example implementation?","solution":"def reverse_array(arr): Reverses the elements of an array of integers. return arr[::-1]"},{"question":"Write a function to output the top k most frequent words in a given text. The function should have a time complexity of O(n log k) or less.","solution":"import heapq import collections def top_k_frequent_words(text, k): Returns the top k most frequent words in a given text. Parameters: text (str): The input text. k (int): The number of top frequent words to return. Returns: List[str]: The list of top k frequent words. # Split the text into words and count the frequency of each word words = text.split() word_counts = collections.Counter(words) # Use a heap to get the top k frequent words top_k_words = heapq.nlargest(k, word_counts.keys(), key=word_counts.get) return top_k_words"},{"question":"Write a function to add a new element to a linked list and return the head of the updated list. The new element should be added at the end of the list if it's not already present.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def append_unique(head, data): Adds a new element with 'data' to the end of the linked list if it's not already present. Returns the head of the updated list. if head is None: return Node(data) current = head while current.next is not None: if current.data == data: return head current = current.next # Check the last node data if current.data != data: current.next = Node(data) return head"},{"question":"Write a function to calculate the number of ways to decode a string of digits into English letters, given that '1' corresponds to 'A', '2' to 'B', and so on up to '26' to 'Z'. For example, the string \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). The input string will not contain '0' except for the character \\"00\\" which is invalid in decoding.","solution":"def num_decodings(s): Returns the number of ways to decode a string of digits into English letters. if not s: return 0 if s[0] == '0': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != '0' else 0 for i in range(2, n + 1): single_digit = int(s[i-1]) double_digit = int(s[i-2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i-1] if 10 <= double_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Write a function to construct a binary search tree from a sorted array.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Constructs a binary search tree from a sorted array. :param nums: List[int], sorted array. :return: TreeNode, the root of the binary search tree. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root"},{"question":"Write a function to implement insertion sort on an array. The function should take the array as a parameter and return the sorted array. Additionally, print the array after each insertion to visual the sorting process.","solution":"def insertion_sort(arr): Performs insertion sort on the given array. Prints the array after each insertion step for visualization. Returns the sorted array. n = len(arr) for i in range(1, n): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key print(f\\"Step {i}: {arr}\\") return arr"},{"question":"Write a function to insert a new value into a sorted array while maintaining the sorted order. Assume the array is already sorted in ascending order and you can add a new element at any position such that the new array remains sorted.","solution":"def insert_into_sorted_array(arr, value): Inserts a new value into a sorted array while maintaining the sorted order. Parameters: arr (list): A list of sorted integers. value (int): The new value to be inserted. Returns: list: A new list with the value inserted, maintaining the sorted order. for i in range(len(arr)): if value < arr[i]: return arr[:i] + [value] + arr[i:] return arr + [value]"},{"question":"Write a function to add all the numbers in a list using recursion.","solution":"def add_list(nums): Recursively returns the sum of all numbers in the list \`nums\`. if not nums: return 0 return nums[0] + add_list(nums[1:])"},{"question":"Write a function to calculate the sum of all numbers from 1 to n. Can you provide an example implementation in Python?","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n. return n * (n + 1) / 2"},{"question":"Write a function to implement the Ackermann function in Python.","solution":"def ackermann(m, n): Returns the result of the Ackermann function A(m, n). The function is defined as: A(m, n) = n + 1 if m = 0 A(m - 1, 1) if m > 0 and n = 0 A(m - 1, A(m, n - 1)) if m > 0 and n > 0 if m == 0: return n + 1 elif m > 0 and n == 0: return ackermann(m - 1, 1) elif m > 0 and n > 0: return ackermann(m - 1, ackermann(m, n - 1))"},{"question":"Write a function to encrypt a message using a Caesar cipher with a shift of 3.","solution":"def caesar_cipher_encrypt(message, shift=3): Encrypts the given message using a Caesar cipher with a shift of 3 by default. :param message: str, the message to encrypt :param shift: int, the shift for the Caesar cipher (default is 3) :return: str, the encrypted message encrypted_message = [] for char in message: if char.isalpha(): shift_amount = shift % 26 new_char_code = ord(char) + shift_amount if char.islower(): if new_char_code > ord('z'): new_char_code -= 26 encrypted_message.append(chr(new_char_code)) elif char.isupper(): if new_char_code > ord('Z'): new_char_code -= 26 encrypted_message.append(chr(new_char_code)) else: encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Write a function to convert an integer to a Roman numeral in Python. How can you implement this function?","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Args: num (int): The integer to convert. Must be between 1 and 3999 inclusive. Returns: str: The Roman numeral representation of the integer. if not 1 <= num <= 3999: raise ValueError(\\"The number must be between 1 and 3999 inclusive.\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to convert a given integer to its hexadecimal representation.","solution":"def int_to_hex(num): Converts an integer to its hexadecimal representation. Parameters: num (int): The integer to convert. Returns: str: The hexadecimal representation of the integer. if num == 0: return '0' elif num < 0: return '-' + hex(num)[3:] else: return hex(num)[2:]"},{"question":"Write a function to reverse a string in Python. You should create a function called \`reverse_string\` that takes a string \`input_string\` as an argument. The function should then return a new string that is the reverse of the input string. If the input string is empty or None, the function should return an empty string.","solution":"def reverse_string(input_string): Returns the reversed string of the input_string. If the input_string is empty or None, returns an empty string. if input_string is None: return \\"\\" return input_string[::-1]"},{"question":"Write a function to generate all possible combinations of a given string. For example, if the string is \\"abc\\", the function should return [\\"abc\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"a\\", \\"b\\", \\"c\\"].","solution":"from itertools import combinations def generate_combinations(s): Given a string s, this function generates all possible non-empty combinations of characters in the string and returns them as a list. result = [] for r in range(1, len(s) + 1): result.extend([''.join(comb) for comb in combinations(s, r)]) return result"},{"question":"Write a function to search for a specific value in a 2D array using Python. The function should return the indices of all occurrences of the value in the array.","solution":"def search_2d_array(array, value): Searches for a specific value in a 2D array and returns the indices of all occurrences. Parameters: array (list of list of int): 2D array to search in. value (int): The value to search for. Returns: list of tuple: List of tuples, each containing the row and column index of an occurrence of the value. indices = [] for i, row in enumerate(array): for j, elem in enumerate(row): if elem == value: indices.append((i, j)) return indices"},{"question":"Write a function to return a list of all prime numbers less than a given input n. Use Python.","solution":"def get_primes_less_than(n): Returns a list of all prime numbers less than n. :param n: int, the upper limit (exclusive) to find prime numbers :return: list of int, prime numbers less than n if n <= 2: return [] primes = [True] * n primes[0] = primes[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if primes[i]: for multiple in range(i*i, n, i): primes[multiple] = False return [num for num, is_prime in enumerate(primes) if is_prime]"},{"question":"Write a function to sort an array in a wave-like order. Wave-like order is defined as an array where every pair of adjacent elements are in opposite order. The elements in the resultant array more or less appear in a wave pattern. For example, a wave-like order for an array could be A< B > C< D > E< F > so on. Given an array, sort the array in wave order by swapping the elements as required.","solution":"def sort_in_wave(arr): Sorts the array in a wave-like order where arr[0] >= arr[1] <= arr[2] >= arr[3] .. For example: Given arr = [3, 6, 5, 10, 7, 20], the function returns [6, 3, 10, 5, 20, 7] :param arr: List[int] input array :return: List[int] array sorted in wave order n = len(arr) # Traverse all even indexed elements for i in range(0, n, 2): # If current even element is smaller than the previous odd element, swap them if i > 0 and arr[i] < arr[i-1]: arr[i], arr[i-1] = arr[i-1], arr[i] # If current even element is smaller than the next odd element, swap them if i < n-1 and arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Write a function to determine if there is a cycle in a directed graph using Depth-First Search (DFS). The function should take a graph represented as an adjacency list as input and return True if a cycle exists, otherwise False.","solution":"def has_cycle(graph): Determines if there is a cycle in a directed graph using DFS. Parameters: graph (dict): The adjacency list of the graph. Returns: bool: True if a cycle exists, False otherwise. def dfs(node, visited, rec_stack): # Mark the current node as visited and part of the recursion stack visited.add(node) rec_stack.add(node) # Iterate through all the neighbors of the current node for neighbor in graph.get(node, []): # If the neighbor is not visited, perform DFS on it if neighbor not in visited: if dfs(neighbor, visited, rec_stack): return True # If the neighbor is in the recursion stack, we found a cycle elif neighbor in rec_stack: return True # Remove the current node from the recursion stack rec_stack.remove(node) return False # Use a set to keep track of visited nodes visited = set() # Use a set to keep track of nodes currently in the recursion stack rec_stack = set() # Perform DFS from each node to check for cycles for node in graph.keys(): if node not in visited: if dfs(node, visited, rec_stack): return True return False"},{"question":"Write a function to multiply two numbers \`a\` and \`b\` without using the \`*\` operator.","solution":"def multiply(a, b): Multiply two numbers a and b without using the * operator. result = 0 for _ in range(abs(b)): result += abs(a) if (a < 0 and b > 0) or (a > 0 and b < 0): result = -result return result"},{"question":"Write a function to reverse the bits of a given unsigned integer. For example, if the input integer is 4 (binary 100), the output should be 8 (binary 1000). The function should handle 32-bit integers.","solution":"def reverse_bits(n): Reverses the bits of a given unsigned 32-bit integer. result = 0 for i in range(32): result = (result << 1) | (n & 1) n >>= 1 return result"},{"question":"Write a function to find the smallest value in a given array of integers.","solution":"def find_smallest(arr): Returns the smallest value in a given array of integers. Parameters: arr (list of int): List of integers to search through. Returns: int: The smallest integer in the list. if not arr: raise ValueError(\\"Array cannot be empty\\") smallest = arr[0] for num in arr[1:]: if num < smallest: smallest = num return smallest"},{"question":"Write a function to format a given string according to specific rules.","solution":"def format_string(s): Formats a given string by capitalizing the first letter of each word and replacing spaces with underscores. Parameters: s (str): The string to format. Returns: str: The formatted string. return '_'.join(word.capitalize() for word in s.split())"},{"question":"Write a function to solve the汉zi puzzle (Chinese character puzzle) in Python. The puzzle is represented as a grid of Chinese characters, where each character can be one of the four basic strokes (horizontal, vertical, up diagonal, down diagonal). You need to determine if it's possible to form a continuous line of these strokes from the top-left corner to the bottom-right corner of the grid.","solution":"def solve_puzzle(grid): Solves the 汉zi puzzle by determining if it's possible to form a continuous line of strokes from the top-left corner to the bottom-right corner of the grid. Parameters: grid (List[List[str]]): A 2D grid representing Chinese character strokes. Returns: bool: True if a continuous line from top-left to bottom-right corner is possible, False otherwise. rows, cols = len(grid), len(grid[0]) if not grid or not grid[0]: return False # Directions for horizontal, vertical, up diagonal and down diagonal directions = { '-': [(0, 1)], # Horizontal '|': [(1, 0)], # Vertical '/': [(-1, 1)], # Up diagonal '': [(1, 1)] # Down diagonal } def is_within_bounds(x, y): return 0 <= x < rows and 0 <= y < cols def dfs(x, y, path): if x == rows - 1 and y == cols - 1: return True stroke = grid[x][y] for dx, dy in directions[stroke]: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and (nx, ny) not in path: path.add((nx, ny)) if dfs(nx, ny, path): return True path.remove((nx, ny)) return False return dfs(0, 0, {(0, 0)})"},{"question":"Write a function to convert an delimited string to a python dictionary using the comma as a delimiter. If the string is empty, return an empty dictionary. If the string contains an uneven number of elements (key without a value), the last key should be paired with \`None\`.","solution":"def convert_to_dict(s): Converts a comma delimited string to a dictionary. If the string is empty, returns an empty dictionary. If there's an uneven number of elements, pairs the last key with None. if not s: return {} items = s.split(',') result = {} for i in range(0, len(items), 2): if i + 1 < len(items): result[items[i]] = items[i + 1] else: result[items[i]] = None return result"},{"question":"Write a function to perform a zigzag traversal of a binary tree. The zigzag traversal starts from the root and alternates between left-to-right and right-to-left levels.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def zigzag_level_order(root): Perform a zigzag level order traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: List of lists containing the zigzag level order traversal if not root: return [] results = [] current_level = deque([root]) left_to_right = True while current_level: level_result = deque() for i in range(len(current_level)): node = current_level.popleft() if left_to_right: level_result.append(node.value) else: level_result.appendleft(node.value) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) results.append(list(level_result)) left_to_right = not left_to_right return results"},{"question":"Write a function to calculate the maximum profit from buying and selling a stock given a list of daily stock prices. The function should return the maximum profit possible. If no profit can be made, the function should return 0. Assume you can only buy and sell once.","solution":"def max_profit(prices): Calculate the maximum profit that can be made by buying and selling once. Parameters: prices (list): A list of daily stock prices. Returns: int: The maximum profit possible. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to check if the given number is a perfect square and, if it is, return its square root. If not, return the nearest lower perfect square's square root.","solution":"import math def nearest_lower_perfect_square_sqrt(n): Check if n is a perfect square, and return its square root if it is. If not, return the square root of the nearest lower perfect square. Parameters: n (int): The input number to be checked. Returns: int: The square root of n if it is a perfect square, otherwise the square root of the nearest lower perfect square. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") sqrt_n = int(math.isqrt(n)) if sqrt_n * sqrt_n == n: return sqrt_n else: return sqrt_n"},{"question":"Write a function to determine the minimum number of jumps required to reach the end of an array from the first element. In each jump, you can either move one position to the right or jump to the index of the value at your current position. The minimum number of jumps is the smallest number of jumps needed to travel from index 0 to index n-1.","solution":"def min_jumps(arr): n = len(arr) if n <= 1: return 0 if arr[0] == 0: return float('inf') # cannot move anywhere jumps = [float('inf')] * n # jumps[i] will hold the min jumps required to reach arr[i] jumps[0] = 0 # no jumps needed to reach the first element # traverse the array and calculate the minimum jumps required for each element for i in range(1, n): for j in range(i): if i <= j + arr[j] and jumps[j] != float('inf'): jumps[i] = min(jumps[i], jumps[j] + 1) break return jumps[-1]"},{"question":"Write a function to compute the absolute difference between two numbers.","solution":"def absolute_difference(a, b): Returns the absolute difference between two numbers a and b. return abs(a - b)"},{"question":"Write a function to solve the Maximum Subarray problem using a divide and conquer approach.","solution":"def max_crossing_subarray(arr, left, mid, right): Helper function to find the maximum subarray sum crossing the midpoint. left_sum = float('-inf') max_left = mid total = 0 for i in range(mid, left - 1, -1): total += arr[i] if total > left_sum: left_sum = total max_left = i right_sum = float('-inf') max_right = mid + 1 total = 0 for i in range(mid + 1, right + 1): total += arr[i] if total > right_sum: right_sum = total max_right = i return left_sum + right_sum, max_left, max_right def max_subarray(arr, left, right): Function to find the maximum subarray using divide and conquer approach. if left == right: return arr[left], left, right mid = (left + right) // 2 left_sum, left_low, left_high = max_subarray(arr, left, mid) right_sum, right_low, right_high = max_subarray(arr, mid + 1, right) cross_sum, cross_low, cross_high = max_crossing_subarray(arr, left, mid, right) if left_sum >= right_sum and left_sum >= cross_sum: return left_sum, left_low, left_high elif right_sum >= left_sum and right_sum >= cross_sum: return right_sum, right_low, right_high else: return cross_sum, cross_low, cross_high def find_maximum_subarray(arr): Returns the maximum subarray sum and the indices of the subarray. if not arr: return 0, -1, -1 return max_subarray(arr, 0, len(arr) - 1)"},{"question":"Write a function to print the length of each line in a given string, where lines are separated by newline characters (\`n\`). For instance, given the input string \`\\"HellonWorldn\\"\`, the function should print \`5\` and \`5\`, as these are the lengths of the lines \\"Hello\\" and \\"World\\", respectively.","solution":"def print_line_lengths(text): Prints the length of each line in the given string \`text\`, where lines are separated by newline characters. lines = text.split('n') for line in lines: if line or line == '': print(len(line))"},{"question":"Write a function to calculate the number of ways to partition a given positive integer \`n\` into distinct positive integers. Partition is here defined as the representation of a positive integer as a sum of positive integers where order of numbers does not matter.","solution":"def partition_count(n): Returns the number of ways to partition n into distinct positive integers. # Using a dynamic programming approach to keeping track of partitions into distinct elements dp = [0] * (n + 1) dp[0] = 1 # Base case for i in range(1, n + 1): for j in range(n, i - 1, -1): dp[j] += dp[j - i] return dp[n]"},{"question":"Write a function to find a number pair in an array such that the sum of the pair is equal to the given number. The function should return the indices of the first such pair it finds. If no such pair exists, the function should return null.","solution":"def find_pair_with_sum(nums, target): Finds the first pair of numbers in \`nums\` that add up to \`target\`. Args: nums : list of int - The list of numbers. target : int - The target sum. Returns: tuple : A tuple containing the indices of the first pair that adds up to \`target\`, or None if no such pair exists. num_to_idx = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_idx: return (num_to_idx[complement], i) num_to_idx[num] = i return None"},{"question":"Write a function to convert a JSON object into a dictionary using Python.","solution":"import json def json_to_dict(json_object): Converts a JSON object (in string format) to a dictionary. Parameters: json_object (str): The JSON object as a string. Returns: dict: The corresponding dictionary. return json.loads(json_object)"},{"question":"Write a function to calculate the minimum cost to merge n piles of stones into a single pile. The cost of merging two piles with sizes a and b is defined as a + b. You should return the minimum cost.","solution":"import heapq def min_cost_to_merge_piles(piles): Calculate the minimum cost to merge n piles of stones into a single pile. Parameters: piles (list of int): List containing the sizes of each pile. Returns: int: Minimum cost to merge all piles into one. if not piles: return 0 heapq.heapify(piles) total_cost = 0 while len(piles) > 1: first = heapq.heappop(piles) second = heapq.heappop(piles) cost = first + second total_cost += cost heapq.heappush(piles, cost) return total_cost"},{"question":"Write a function to calculate the binomial coefficient (also known as the \\"n choose k\\" problem), which is the number of ways to choose k elements from a set of n distinct elements without regard to the order of selection. The function should be designed for efficiency and should be able to handle large values of n and k.","solution":"from math import comb def binomial_coefficient(n, k): Computes the binomial coefficient (n choose k) which is the number of ways to choose k elements from a set of n distinct elements. Parameters: n (int): Total number of elements. k (int): Number of elements to choose. Returns: int: The binomial coefficient. return comb(n, k)"},{"question":"Write a function to find the minimum value in an unsorted array using Python. The function should take an array of integers as input and return the minimum value.","solution":"def find_min(arr): Returns the minimum value in an unsorted array. Parameters: arr (list): A list of integers Returns: int: The minimum value in the list if not arr: raise ValueError(\\"Array cannot be empty\\") min_value = arr[0] for num in arr[1:]: if num < min_value: min_value = num return min_value"},{"question":"Write a function to find the product of all elements in an integer array. If the array is empty, the function should return 1 as the product of zero elements is conventionally 1.","solution":"def product_of_array(arr): Returns the product of all elements in the integer array. If the array is empty, returns 1. if not arr: return 1 product = 1 for num in arr: product *= num return product"},{"question":"Write a function to compute the factorial of a given non-negative integer. The function should return the factorial as an integer, and it should handle large numbers efficiently. You may use language-specific optimizations or libraries to handle large integers if available.","solution":"def factorial(n): Computes the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to find the unique characters in a given string. If the string is empty, return an empty string. If the string contains only one character, return that character. Otherwise, return a string composed of unique characters sorted in ascending order. Note that characters should be considered case-sensitive (i.e., 'a' and 'A' are treated differently).","solution":"def unique_characters(s): Returns a string of unique characters in sorted order. If the input string is empty, returns an empty string. If the input string contains only one character, returns that character. if not s: return \\"\\" elif len(s) == 1: return s unique_chars = sorted(set(s)) # Get unique characters and sort them return \\"\\".join(unique_chars)"},{"question":"Write a function to reverse a string in Python without using slicing or built-in functions. For example, if the input string is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Reverses the input string without using slicing or built-in functions. Args: s (str): The input string to reverse. Returns: str: The reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to determine if a given word exists in a 2D char array. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in the word.","solution":"def exist(board, word): Function to determine if a given word exists in a 2D char array. Parameters: board (List[List[str]]): 2D character array word (str): The word to search for Returns: bool: True if the word exists, False otherwise def dfs(board, word, i, j, index): if index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]: return False # Save the current character and mark the current cell as visited temp = board[i][j] board[i][j] = '#' # Explore the neighbors in four possible directions (up, down, left, right) found = (dfs(board, word, i + 1, j, index + 1) or dfs(board, word, i - 1, j, index + 1) or dfs(board, word, i, j + 1, index + 1) or dfs(board, word, i, j - 1, index + 1)) # Restore the character in the current cell board[i][j] = temp return found for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False"},{"question":"Write a function to detect cycles in a directed graph using Depth-First Search (DFS). The graph is represented as an adjacency list using an unordered map where the key is an integer representing a node, and the value is a vector of integers representing the neighbors of that node.","solution":"def has_cycle(graph): Detects cycle in a directed graph using Depth-First Search (DFS). :param graph: Dictionary where the key is an integer representing a node, and the value is a list of integers representing the neighbors of that node. :return: True if there is a cycle, False otherwise. def dfs(node): if node in path: return True if node in visited: return False visited.add(node) path.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True path.remove(node) return False visited = set() path = set() for node in graph: if dfs(node): return True return False"},{"question":"Write a function to take a string as input and return a list of words that are palindromes in the string. A palindrome is a word that reads the same backward as forward, ignoring case and non-alphanumeric characters.","solution":"import re def find_palindromes(text): Return a list of palindromes from the input text. A palindrome is a word that reads the same backward as forward, ignoring case and non-alphanumeric characters. # Normalize the string by converting it to lowercase and removing non-alphanumeric characters text = re.sub(r'[^a-zA-Z0-9s]', '', text).lower() # Split text into words words = text.split() # Identify palindromes palindromes = [word for word in words if word == word[::-1]] return palindromes"},{"question":"Write a function to convert a binary string to an integer. The function should handle both signed and unsigned integers.","solution":"def binary_to_integer(binary_str): Converts a binary string to an integer. The function is capable of handling both signed and unsigned integers. If the binary string starts with '1', it is considered a signed integer using two's complement. If the binary string starts with '0', it is considered an unsigned integer. if binary_str[0] == '0': # unsigned integer return int(binary_str, 2) else: # signed integer # Find the integer representation using two's complement n = len(binary_str) return int(binary_str, 2) - (1 << n)"},{"question":"Write a function to compute the minimum distance a robot needs to travel to visit all the houses on a street. The street is represented as a list of integers where each integer represents the house number, and the robot starts at the first house in the list. The robot can move to the next house or the house two steps ahead. What is the minimum distance the robot needs to travel to visit all the houses? You can assume that the robot will end up at the last house (house n).","solution":"def min_distance(houses): Calculate the minimum distance the robot needs to travel to visit all houses on the street. Args: houses (list of int): List of house numbers on the street. Returns: int: The minimum distance the robot needs to travel. if not houses: return 0 n = len(houses) if n == 1: return 0 # Initial distances: only the start point is 0 distances = [0] # Calculate the distance for every house for i in range(1, n): if i == 1: # For first step, the robot can only come from house 0 distance = abs(houses[i] - houses[i - 1]) else: # The robot can come from the house one step behind or two steps behind distance = min( distances[i - 1] + abs(houses[i] - houses[i - 1]), distances[i - 2] + abs(houses[i] - houses[i - 2]) ) distances.append(distance) return distances[-1]"},{"question":"Write a function to remove duplicates from a linked list. The function should return the head of the modified list. The input linked list is given in the form of a linked list node class with \`val\` as the value and \`next\` as the next node. The function should ensure that no value appears more than once in the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Removes duplicates from an unsorted linked list. if not head: return head seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head"},{"question":"Write a function to reverse an integer in Python. How can I ensure it handles negative numbers and overflows?","solution":"def reverse_integer(n): Reverses the digits of an integer n. Handles negative numbers and checks for overflow. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if n < 0 else 1 n *= sign reversed_n = 0 while n: digit = n % 10 n //= 10 if reversed_n > (INT_MAX - digit) // 10: return 0 # overflow reversed_n = reversed_n * 10 + digit return sign * reversed_n"},{"question":"Write a function to count the total occurrences of a substring, including overlapping ones, in a given string. For example, the function should return 2 for the input string \\"banana\\" and substring \\"ana\\".","solution":"def count_overlapping_substring_occurrences(s, substring): Counts the total occurrences of a substring, including overlapping ones, in a given string. Parameters: s (str): The string in which to search for the substring. substring (str): The substring to search for. Returns: int: The number of times the substring occurs in the string, including overlapping occurrences. count = 0 start = 0 while True: start = s.find(substring, start) if start == -1: break count += 1 start += 1 return count"},{"question":"Write a function to check if a given integer is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not. How can I create a function to check this?","solution":"def is_palindrome(number): Returns True if the input number is a palindrome, else False. A palindrome number is a number that remains the same when its digits are reversed. number_str = str(number) return number_str == number_str[::-1]"},{"question":"Write a function to check if the given string is a palindrome using recursion. A palindrome is a word, phrase, or sequence that reads the same backward as forward, such as \\"radar\\" or \\"noon\\".","solution":"def is_palindrome(s): Checks if the given string s is a palindrome using recursion. # Base case: Single character or empty string is a palindrome if len(s) <= 1: return True # Check first and last characters if s[0] != s[-1]: return False # Recur for the substring without first and last characters return is_palindrome(s[1:-1])"},{"question":"Write a function to find the \\"Kth to last\\" node in a singly linked list. The function should take two arguments: the head of the linked list and the value of K. The function should return the data (value) of the node that is Kth to the last node in the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def kth_to_last(head, k): Returns the value of the kth to last node in the singly linked list. first = head second = head # Move second k steps ahead for _ in range(k): if second is None: return None second = second.next # Move both first and second until second reaches the end while second is not None: first = first.next second = second.next return first.value if first else None"},{"question":"Write a function to find the number of islands in a binary matrix.","solution":"def num_islands(grid): Given a binary matrix, find the number of islands. An island is made up of connected 1's (land) and is surrounded by 0's (water). You can assume that all four edges of the grid are surrounded by water. :param grid: List[List[int]], the binary matrix (0's and 1's). :return: int, the number of islands. if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # Mark as visited # Check all four directions dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: count += 1 dfs(grid, i, j) return count"},{"question":"Write a function to replace spaces in a given string with a specific character or string. For example, if the given string is \\"one two three\\" and the replacement character is \\"-\\", the function should return \\"one-two-three\\".","solution":"def replace_spaces(input_string, replacement): Replaces all spaces in the input_string with the specified replacement character/string. :param input_string: str, the string to process :param replacement: str, the character or string to replace spaces with :return: str, the processed string with spaces replaced return input_string.replace(' ', replacement)"},{"question":"Write a function to check if a Sudoku board is valid.","solution":"from typing import List def is_valid_sudoku(board: List[List[str]]) -> bool: Check if a given 9x9 Sudoku board is valid. A valid Sudoku board (partially filled) will not contain any number more than once in any row, column, or 3x3 sub-grid. def is_valid_unit(unit: List[str]) -> bool: unit = [i for i in unit if i != '.'] return len(unit) == len(set(unit)) def is_valid_row(board: List[List[str]]) -> bool: for row in board: if not is_valid_unit(row): return False return True def is_valid_column(board: List[List[str]]) -> bool: for col in zip(*board): if not is_valid_unit(col): return False return True def is_valid_subgrid(board: List[List[str]]) -> bool: for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_unit(subgrid): return False return True return is_valid_row(board) and is_valid_column(board) and is_valid_subgrid(board)"},{"question":"Write a function to check whether a string is a valid IPv4 address. A valid IPv4 address is defined as a string that consists of four decimal numbers, each number ranging from 0 to 255, separated by dots.","solution":"def is_valid_ipv4(address): Check if the provided string is a valid IPv4 address. parts = address.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if not 0 <= int(part) <= 255: return False if len(part) > 1 and part[0] == '0': # Prevent leading zeroes return False return True"},{"question":"Write a function to append an item to a list.","solution":"def append_item(lst, item): Appends an item to the end of the list. Parameters: lst (list): The list to append the item to. item: The item to append to the list. Returns: list: The list with the appended item. lst.append(item) return lst"},{"question":"Write a function to find the sum of all the numbers in a list that are multiples of 3 or 5, and return that sum.","solution":"def sum_of_multiples(lst): Returns the sum of all numbers in the list that are multiples of 3 or 5. return sum(x for x in lst if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a function to rotate a binary matrix by 90 degrees clockwise. The function should return the rotated matrix.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a binary matrix by 90 degrees clockwise. Parameters: matrix (list of list of int): The binary matrix to rotate. Returns: list of list of int: The rotated binary matrix. rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated_matrix[j][rows - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function to calculate the minimum cost to connect all cities in a graph. The graph is represented as an adjacency matrix where the weight of each edge is given. The function should return the minimum cost required to connect all cities.","solution":"import heapq def minimum_cost_to_connect_all_cities(adj_matrix): Calculate the minimum cost to connect all cities in a graph represented by an adjacency matrix. :param adj_matrix: List[List[int]] - adjacency matrix of the graph :return: int - minimum cost to connect all cities n = len(adj_matrix) if n == 0: return 0 # Initialize min heap and add edges of the first city min_heap = [(0, 0)] visited = set() min_cost = 0 while min_heap and len(visited) < n: cost, city = heapq.heappop(min_heap) if city not in visited: min_cost += cost visited.add(city) for next_city in range(n): if next_city not in visited: heapq.heappush(min_heap, (adj_matrix[city][next_city], next_city)) return min_cost"},{"question":"Write a function to find the length of the longest subarray with the same sum from two given arrays of equal length.","solution":"def longest_common_sum_subarray(arr1, arr2): Finds the length of the longest subarray with the same sum from two given arrays of equal length. Args: arr1: List[int] - First input list. arr2: List[int] - Second input list. Returns: int - Length of the longest subarray with the same sum. n = len(arr1) delta = [0] * n for i in range(n): delta[i] = arr1[i] - arr2[i] prefix_sum_map = {} prefix_sum = 0 max_len = 0 for i in range(n): prefix_sum += delta[i] if prefix_sum == 0: max_len = i + 1 if prefix_sum in prefix_sum_map: max_len = max(max_len, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return max_len"},{"question":"Write a function to sort an array in increasing order using the merge sort algorithm.","solution":"def merge_sort(arr): Sorts an array in increasing order using the merge sort algorithm. :param arr: List of integers to be sorted :return: List of integers sorted in increasing order if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): Merges two sorted lists into one sorted list. :param left: Sorted list of integers :param right: Sorted list of integers :return: Merged sorted list of integers merged = [] while left and right: if left[0] < right[0]: merged.append(left.pop(0)) else: merged.append(right.pop(0)) # If there are remaining elements in left or right, add them to merged merged.extend(left if left else right) return merged"},{"question":"Write a function to calculate the sum of all elements in a 2D list (list of lists) in Python.","solution":"def sum_2d_list(matrix): Returns the sum of all elements in a 2D list. :param matrix: A 2D list of numbers :return: The sum of all elements in the 2D list total_sum = 0 for row in matrix: for element in row: total_sum += element return total_sum"},{"question":"Write a function to find the number of unique characters in a given string. The function should ignore case sensitivity and be efficient in terms of time complexity.","solution":"def unique_char_count(s): Returns the number of unique characters in the given string, ignoring case sensitivity. # Convert the string to lower case and create a set of characters unique_chars = set(s.lower()) # Filter out any non-alphabetic characters unique_chars = {char for char in unique_chars if char.isalpha()} # Return the number of unique characters return len(unique_chars)"},{"question":"Write a function to find the sum of all numbers in a list that are less than a given value. The function should take two parameters: a list of integers and a threshold value, and return the sum of numbers less than the threshold.","solution":"def sum_less_than(numbers, threshold): Returns the sum of all numbers in the list that are less than the threshold. :param numbers: List of integers :param threshold: Integer threshold value :return: Sum of integers less than the threshold return sum(num for num in numbers if num < threshold)"},{"question":"Write a function to remove the nth node from the end of a singly linked list and return its head. For example, given the linked list 1->2->3->4->5 and n = 2, return the linked list as 1->2->3->5.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Remove the nth node from the end of the list and return the head of the modified list. :param head: ListNode, the head of the singly linked list. :param n: int, the position from the end of the node to be removed. :return: ListNode, the head of the modified linked list. dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move first so that there is a gap of n nodes between first and second for _ in range(n + 1): first = first.next # Move both first and second until first reaches the end while first: first = first.next second = second.next # Now second points to the node before the one we want to remove second.next = second.next.next return dummy.next"},{"question":"Write a function to validate IPv4 addresses. The function should return True if the given string is a valid IPv4 address, and False otherwise.","solution":"def is_valid_ipv4_address(ip): Checks if the given string is a valid IPv4 address. parts = ip.split('.') # IPv4 should contain exactly 4 parts separated by '.' if len(parts) != 4: return False for part in parts: # Each part should be a number and in the range 0-255 if not part.isnumeric(): return False num = int(part) if num < 0 or num > 255: return False # Each part should not have leading zeros, except single digit '0' if part != str(num): return False return True"},{"question":"Write a function to read an integer \`x\`, convert it to its binary representation using an array, and return the array. For example, if \`x\` = 5, the function should return the array \`[1, 0, 1]\` since 5 in binary is \`101\`.","solution":"def integer_to_binary_array(x): Converts an integer x to its binary representation and returns it as an array of integers. :param x: Integer to be converted to binary. :return: List of integers representing the binary form of x. if x == 0: return [0] binary_array = [] while x > 0: binary_array.append(x % 2) x = x // 2 binary_array.reverse() return binary_array"},{"question":"Write a function to add two numbers without using the \`+\` operator, and without using the bitwise operators \`&\`, \`|\`, \`^\`, and \`~\`. You can use the \`-\` and \`*\` operators, but no other arithmetic or bitwise operators.","solution":"def add_without_plus(a, b): Adds two numbers without using the + operator. return a - (-b)"},{"question":"Write a function to count the number of digits in a given integer. For example, if the integer is 5678, the function should return 4.","solution":"def count_digits(n): Returns the number of digits in a given integer n. return len(str(abs(n)))"},{"question":"Write a function to calculate the factorial of a number using a stack to implement recursion. Instead of using language-specific recursion stack, you will manually manage a stack using an array. How would you do it?","solution":"def factorial_using_stack(n): Calculates the factorial of a number using a manually managed stack. If the input number is less than 0, it will return None. if n < 0: return None stack = [] result = 1 # Push frame to stack stack.append((n, result)) while stack: current_n, current_result = stack.pop() if current_n == 0 or current_n == 1: result *= current_result else: stack.append((current_n - 1, current_result * current_n)) return result"},{"question":"Write a function to perform arithmetic operations based on an operator sign.","solution":"def arithmetic_operation(a, b, operator): Performs arithmetic operations based on the provided operator. Supported operations are: addition (+), subtraction (-), multiplication (*), and division (/) if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b != 0: return a / b else: raise ValueError(\\"Division by zero is not allowed\\") else: raise ValueError(\\"Unsupported operator. Use one of: '+', '-', '*', '/'\\")"},{"question":"Write a function to print a message to the console in Python.","solution":"def print_message(message): Prints the provided message to the console. Args: message (str): The message to be printed. print(message)"},{"question":"Write a function to find the number of paths from the top-left corner to the bottom-right corner of a grid with obstacles. The grid is represented as a 2D array where \`0\` represents an empty cell and \`1\` represents an obstacle. You may only move right or down in the grid.","solution":"def num_paths_with_obstacles(grid): Returns the number of paths from the top-left corner to the bottom-right corner of a grid with obstacles. The grid is represented as a 2D array where 0 represents an empty cell and 1 represents an obstacle. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Write a function to flatten a nested list of integers in Python. The function should return a single list containing all the integers in the nested list, maintaining their order.","solution":"def flatten(nested_list): Flattens a nested list of integers. Parameters: nested_list (list): A nested list of integers Returns: list: A single flattened list containing all the integers in the nested list, maintaining their order flat_list = [] def _flatten(sublist): for element in sublist: if isinstance(element, list): _flatten(element) else: flat_list.append(element) _flatten(nested_list) return flat_list"},{"question":"Write a function to find the largest of three numbers.","solution":"def largest_of_three(a, b, c): Returns the largest of three numbers. Parameters: a (int or float): First number b (int or float): Second number c (int or float): Third number Returns: int or float: The largest of the three numbers return max(a, b, c)"},{"question":"Write a function to check if a number is primality.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function to determine if a number is a \\"Perfect Number.\\" A Perfect Number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, the first few perfect numbers are 6, 28, 496, and 8128. How can I write a function in Python to check if a number is a perfect number?","solution":"def is_perfect_number(n): Returns True if n is a perfect number, otherwise False. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. if n <= 1: return False divisors_sum = 0 for i in range(1, n//2 + 1): if n % i == 0: divisors_sum += i return divisors_sum == n"},{"question":"Write a function to calculate the minimum number of coins needed to make change for a given amount using a list of coin denominations. You may use each denomination as many times as necessary.","solution":"def min_coins(coins, amount): Calculate the minimum number of coins needed to make change for the given amount using the provided denominations. :param coins: List of coin denominations :param amount: The amount for which change is needed :return: The minimum number of coins needed # Initialize a list to store the minimum coins needed for each amount up to the given amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # No coins needed to make change for 0 amount for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to determine if a given integer is a lucky number. A lucky number is defined as a number whose sum of digits is a multiple of 7. Please provide a solution using Python.","solution":"def is_lucky_number(n): Returns True if the sum of the digits of n is a multiple of 7, False otherwise. digit_sum = sum(int(digit) for digit in str(abs(n))) return digit_sum % 7 == 0"},{"question":"Write a function to compare two version numbers version1 and version2. The function should return 1 if version1 > version2, -1 if version1 < version2, and 0 if version1 == version2.","solution":"def compare_versions(version1, version2): Compares two version numbers. Returns 1 if version1 > version2, -1 if version1 < version2, 0 if version1 == version2. v1_parts = list(map(int, version1.split('.'))) v2_parts = list(map(int, version2.split('.'))) # Pad the shorter version with zeros max_length = max(len(v1_parts), len(v2_parts)) v1_parts.extend([0] * (max_length - len(v1_parts))) v2_parts.extend([0] * (max_length - len(v2_parts))) for v1, v2 in zip(v1_parts, v2_parts): if v1 > v2: return 1 elif v1 < v2: return -1 return 0"},{"question":"Write a function to check if a given string \`s\` is a palindrome. A palindrome is a string that reads the same backward as forward. The function should return \`True\` if the string is a palindrome, and \`False\` otherwise. You should consider only alphanumeric characters and ignore cases.","solution":"def is_palindrome(s): Returns True if the provided string is a palindrome, False otherwise. This function ignores non-alphanumeric characters and case. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list reads the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to calculate all the permutations of a given string and return them as a list of strings. Permutations are different arrangements of all or part of a set of objects, with regard to the order of the arrangement.","solution":"from itertools import permutations def string_permutations(s): Returns all permutations of the given string s. perm = permutations(s) return [''.join(p) for p in perm]"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given array \`arr\` of integers. For example, for the array \`[1, -2, 3, 5, -3, 2]\`, the maximum sum is \`8\` (subarray \`[3, 5, -3, 2]\`).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to find the √ of a number using Newton's method in Python.","solution":"def sqrt_newton_method(x, tolerance=1e-10): Finds the square root of a given number 'x' using Newton's method. :param x: The number to find the square root of :param tolerance: The tolerance level to stop the iteration, defaults to 1e-10 :return: The square root of 'x' if x < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") if x == 0: return 0 guess = x while True: next_guess = 0.5 * (guess + x / guess) if abs(guess - next_guess) < tolerance: return next_guess guess = next_guess"},{"question":"Write a function to calculate the total number of set bits (1s) in a given integer. For example, for the integer 5 (binary 101), the function should return 2, since there are two bits set to 1.","solution":"def count_set_bits(n): Returns the total number of set bits (1s) in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a function to find the number of distinct permutations of a given list of numbers.","solution":"from math import factorial from collections import Counter def num_distinct_permutations(numbers): Returns the number of distinct permutations of a given list of numbers. count = Counter(numbers) denominator = 1 for value in count.values(): denominator *= factorial(value) return factorial(len(numbers)) // denominator"},{"question":"Write a function to modify a given string s to return the shortest string that can be obtained after removing all repetitions of consecutive repeating characters in s. You need to ensure that the resulting string is the shortest possible by removing any sequence of repeating characters of the same kind.","solution":"def remove_consecutive_repetitions(s): Returns the shortest string by removing all sequences of consecutive repeating characters. result = [] for character in s: if result and result[-1] == character: continue result.append(character) return ''.join(result)"},{"question":"Write a function to find the sum of the first \`n\` natural numbers in Python. I'm looking for a solution that is both efficient and easy to understand.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number up to which the sum is calculated Returns: int: The sum of the first n natural numbers return n * (n + 1) // 2"},{"question":"Write a function to count the number of even numbers in a list of integers. Here is the provided list: [2, 3, 4, 5, 6, 7]","solution":"def count_even_numbers(lst): Counts the number of even numbers in a list of integers. Parameters: lst (list of int): The list of integers to check. Returns: int: The number of even numbers in the list. return sum(1 for x in lst if x % 2 == 0)"},{"question":"Write a function to find the intersection of two arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays. # Convert both arrays to sets to remove duplicates and enable set intersection set1 = set(arr1) set2 = set(arr2) # Find the intersection of both sets intersection_set = set1.intersection(set2) # Convert the set back to a list return list(intersection_set)"},{"question":"Write a function to indent a given code block by a specified number of spaces.","solution":"def indent_code_block(code_block, indent_spaces): Indents the given code block by the specified number of spaces. Parameters: code_block (str): The code block to indent. indent_spaces (int): The number of spaces to indent the code block. Returns: str: The indented code block. indent_str = ' ' * indent_spaces indented_lines = [indent_str + line if line.strip() else line for line in code_block.split('n')] return 'n'.join(indented_lines)"},{"question":"Write a function to reverse the order of the elements in a string without using a new string.","solution":"def reverse_string_in_place(string): Reverses the order of the elements in the string in place without using a new string. Note: Since Python strings are immutable, we'll need to first convert the string to a list of characters, perform in-place reversal, and then rejoin the list back into a string. string_list = list(string) left, right = 0, len(string_list) - 1 while left < right: string_list[left], string_list[right] = string_list[right], string_list[left] left += 1 right -= 1 return ''.join(string_list)"},{"question":"Write a function to find the most frequently occurring letter in a given string. If there is more than one letter with the same highest frequency, return all of them as a list. If there are no letters, return an empty list.","solution":"from collections import Counter def most_frequent_letters(s): Returns the most frequently occurring letters in the given string. If there is more than one letter with the same highest frequency, returns all of them as a list. # Filter to include only alphabetic characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] if not filtered_chars: return [] # Count the frequency of each character counter = Counter(filtered_chars) # Find the highest frequency max_freq = max(counter.values()) # Find all characters with the highest frequency most_frequent = [char for char, freq in counter.items() if freq == max_freq] return most_frequent"},{"question":"Write a function to encode a string using Run-Length Encoding (RLE) algorithm. The function should take a string as input and output the encoded string. The encoded string should consist of the count of consecutive occurrences of each character followed by the character itself.","solution":"def run_length_encode(input_string): Encodes the input string using Run-Length Encoding (RLE) algorithm. Parameters: input_string (str): the string to be encoded Returns: str: the run-length encoded string if not input_string: return \\"\\" encoded_string = [] count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: encoded_string.append(f\\"{count}{prev_char}\\") count = 1 prev_char = char # Add the last run encoded_string.append(f\\"{count}{prev_char}\\") return ''.join(encoded_string)"},{"question":"Write a function to parse a CSV file, compute the maximum and minimum values for each column in the CSV, and return the results in a structured data format (like a dictionary in Python). Assume all columns have numerical values.","solution":"import csv def parse_csv(file_path): Parses a CSV file and computes the maximum and minimum values for each column. Parameters: file_path (str): Path to the CSV file. Returns: dict: Dictionary with columns as keys and a tuple of (min, max) as values. with open(file_path, mode='r') as file: csv_reader = csv.DictReader(file) columns = csv_reader.fieldnames values = {col: [] for col in columns} # Collect all values for each column for row in csv_reader: for col in columns: values[col].append(float(row[col])) # Calculate min and max for each column results = {col: (min(values[col]), max(values[col])) for col in columns} return results"},{"question":"Write a function to find the minimum number of coins that you need to make a certain amount of money. You should use the least number of coins to make this change. If it is not possible to make that change, return -1.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make the given amount. If it is not possible to make the amount, returns -1. # Initialize DP array with amount + 1 (representing infinity) dp = [amount + 1] * (amount + 1) dp[0] = 0 # No coins needed to make amount 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a function to find the frequency of each character in a string s.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the string s. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Write a function to convert a binary search tree to its string representation. Here the string representation should be in such a way that the tree could be easily reconstructed. For example, given a binary search tree with nodes [3, 1, 4, null, 2, null, null], the string representation should be '3,1,2,#,#,#,4,#,#'. The root can be any node, and the function should return the string representation of that subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Serializes a binary tree to a string representation. def helper(node): if not node: return \\"#\\" left_serialized = helper(node.left) right_serialized = helper(node.right) return f\\"{node.val},{left_serialized},{right_serialized}\\" return helper(root)"},{"question":"Write a function to return the sum of all even numbers in a list. The function should handle an empty list and correctly identify even numbers from the list.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in a given list. Parameters: - numbers: List of integers. Returns: - Integer sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function to validate if a binary tree is a valid binary search tree (BST). Assume all values in the tree are unique. A binary search tree is defined such that for every node, the values in its left subtree are less than the node's value, and the values in its right subtree are greater than the node's value. Additionally, use recursion and no extra space post order traversal. To validate a BST, the tree must satisfy the BST property for every node with respect to its own left and right children.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(node, low=float('-inf'), high=float('inf')): Validates if a binary tree is a valid binary search tree (BST). :param node: The root node of the binary tree. :param low: Minimum value constraint for the current node. :param high: Maximum value constraint for the current node. :return: True if the tree is a valid BST, False otherwise. if not node: return True if not (low < node.val < high): return False left_valid = is_valid_bst(node.left, low, node.val) right_valid = is_valid_bst(node.right, node.val, high) return left_valid and right_valid"},{"question":"Write a function to parse a given string into an integer. The function should handle both positive and negative numbers, as well as potential leading and trailing spaces. If the string cannot be converted to an integer, the function should return an appropriate error message.","solution":"def parse_integer(s): Parses a given string into an integer, handling positive and negative numbers as well as leading and trailing spaces. Parameters: s (str): The string to parse. Returns: int: The parsed integer. str: An error message if the string cannot be converted to an integer. s = s.strip() # Remove leading and trailing spaces if not s: return \\"Input cannot be empty.\\" # Attempt to convert string to an integer try: return int(s) except ValueError: return \\"Cannot convert to an integer.\\""},{"question":"Write a function to determine if a given integer n is a perfect cube. The function should return True if n is a perfect cube, and False otherwise. A perfect cube is an integer that is the cube of an integer; in other words, it is the result of an integer raised to the power of three. The function should handle both positive and negative integers, as well as zero.","solution":"def is_perfect_cube(n): Determines if the given integer n is a perfect cube. Parameters: n (int): The integer to check. Returns: bool: True if n is a perfect cube, False otherwise. if n < 0: n = -n root = round(n ** (1/3)) return root**3 == n"},{"question":"Write a function to remove all the falsy values from an array. Falsy values include: \`false\`, \`null\`, \`0\`, \`\\"\\"\` (empty string), \`NaN\`, and \`undefined\`.","solution":"def remove_falsy_values(array): Removes all falsy values from the given array. Falsy values include: False, None, 0, \\"\\", and equivalents in Python. return [item for item in array if item] # Note: In Python, \`None\` is equivalent to \`null\` and there's # no direct equivalent to \`undefined\` or \`NaN\` without using numpy."},{"question":"Write a function to check if a string is a permutation of a palindrome. A permutation of a palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, case, and punctuation.","solution":"def is_permutation_of_palindrome(input_str): Checks if the input string is a permutation of a palindrome. A permutation of a palindrome is a string that can be rearranged to form a palindrome. This function ignores spaces, case, and punctuation. # Normalize the string: remove spaces and lowercase input_str = ''.join(filter(str.isalnum, input_str)).lower() # Count frequency of each character char_count = {} for char in input_str: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check that at most one character has an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"Write a function to find the minimum number of operations required to make two strings s1 and s2 of equal length the same. In one operation, you can choose any character from either string and replace it with any other character. The function should take s1 and s2 as input and return the minimum number of operations needed.","solution":"def min_operations_to_make_equal(s1, s2): Returns the minimum number of operations required to make two strings s1 and s2 of equal length the same. if len(s1) != len(s2): raise ValueError(\\"Strings must be of equal length\\") operations = sum(1 for a, b in zip(s1, s2) if a != b) return operations"},{"question":"Write a function to find the length of the longest common subsequence (LCS) between two strings. The function should return the length of the LCS. The LCS problem is a classic computer science problem that is a variation of the longest common substring problem. It is known to have many applications, including DNA sequencing and postal routing.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m = len(str1) n = len(str2) # Create a DP array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for i in range(m + 1)] # Fill dp array in bottom up manner for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n]"},{"question":"Write a function to remove consecutive duplicates from a string in Go.","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicates from a string. :param s: A string from which consecutive duplicates need to be removed :return: A string with consecutive duplicates removed if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a function to check if a given number is a Fibonacci number. A Fibonacci number is an integer that appears in the Fibonacci sequence, where each number after the first two is the sum of the two preceding ones, usually starting with 0 and 1. The Fibonacci sequence is a series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...","solution":"import math def is_fibonacci_number(n): Check if a given number n is a Fibonacci number. if n < 0: return False # A number is a Fibonacci number if and only if one/both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a function to check if an array contains a specific element using recursion.","solution":"def contains(arr, target): Check if target element is present in the array using recursion. Parameters: arr (list): List of elements. target: element to be searched in the list. Returns: bool: True if target is found in list, False otherwise. if not arr: return False # Base case: empty list if arr[0] == target: return True # Base case: target found # Recursive case: check the rest of the list return contains(arr[1:], target)"},{"question":"Write a function to check if the given binary tree is a valid binary search tree (BST). A binary search tree is a data structure that is empty, or it consists of a root node with two disjoint non-empty subtrees: the left subtree and the right subtree, and every node's value is less than the value of all nodes in its right subtree, and greater than the value of all nodes in its left subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): def is_bst(node, left, right): if not node: return True if not (left < node.val < right): return False return is_bst(node.left, left, node.val) and is_bst(node.right, node.val, right) return is_bst(root, float('-inf'), float('inf'))"},{"question":"Write a function to generate the nth Fibonacci number in Python. The function should have a time complexity of O(n).","solution":"def fibonacci(n): Returns the nth Fibonacci number. Args: n (int): The position in the Fibonacci sequence to calculate. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to remove duplicates from a sorted array in-place. The function should return the length of the array after removing duplicates, and the array itself should contain only unique elements. For example, given the input array [1, 1, 2, 2, 3, 4, 4, 5], the function should remove duplicates and return the new array [1, 2, 3, 4, 5] with its length as 5.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the length of the array after removing duplicates. Parameters: nums (list): The sorted list of numbers with potential duplicates. Returns: int: The length of the array after removing duplicates. if not nums: return 0 write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[write_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Write a function to find and return the second largest number in a list of integers. If the list has less than two distinct numbers, return \`None\`.","solution":"def second_largest(nums): Return the second largest number in a list of integers. If the list has less than two distinct numbers, return None. if len(nums) < 2: return None first, second = None, None for num in nums: if num != first: # Ensure distinct numbers if first is None or num > first: first, second = num, first elif second is None or (num > second): second = num return second"},{"question":"Write a function to reverse a string and then find the smallest possible palindrome that can be formed by appending characters to the original string.","solution":"def smallest_palindrome_append(s): Returns the smallest possible palindrome by appending characters to the original string. def is_palindrome(string): return string == string[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[:-1][::-1]"},{"question":"Write a function to return the nth row of Pascal's Triangle. Each element in the row of Pascal's Triangle can be computed as a binomial coefficient. You should use the combination formula C(n, k) = n! / (k! * (n - k)!) to calculate each element, where n is the row number (starting from 1), and k is the element's position in the row. Please note that in Pascal's Triangle, the row and column indices start from 0, and elements of the row should be returned as a list.","solution":"import math def pascal_nth_row(n): Returns the nth row (0-indexed) of Pascal's Triangle. row = [] for k in range(n+1): row.append(math.comb(n, k)) return row"},{"question":"Write a function to find the length of a singly linked list in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def length_of_linked_list(head): Returns the length of the singly linked list. :param head: ListNode starting node of the linked list :return: Length of the linked list length = 0 current = head while current is not None: length += 1 current = current.next return length"},{"question":"Write a function to calculate the square of an integer without using the square function in Python.","solution":"def square(num): Returns the square of the given integer without using the built-in square function. return num * num"},{"question":"Write a function to find the sum of all integers in a nested list. The nested list can contain integers or other nested lists of integers.","solution":"def sum_nested_list(nested_list): Returns the sum of all integers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to extract unique elements from a list of strings. The function should ensure that only elements appear exactly once in the input list and return them in the order of their first occurrence.","solution":"def extract_unique_elements(strings_list): Extracts unique elements from a list of strings where each unique element appears exactly once in the input list, preserving the order of first occurrence. :param strings_list: List of strings :return: List of unique strings seen = set() duplicates = set() unique_list = [] for string in strings_list: if string in seen: duplicates.add(string) seen.add(string) for string in strings_list: if string not in duplicates: unique_list.append(string) return unique_list"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be able to handle both positive integers and zero. If the input is negative, the function should raise an \`IllegalArgumentException\`.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises ValueError for negative inputs. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function to reverse a string in Python without using any built-in string manipulation functions. You should use only loops and basic data structures.","solution":"def reverse_string(s): Reverses a string without using built-in string manipulation functions. Parameters: s (str): The input string to be reversed. Returns: str: The reversed string. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to convert a given binary tree to its string representation. The string should follow a specific format where each node is represented as \\"<root> <left> <right>\\" if it has both left and right children, \\"<root> <left>\\" if it has only a left child, \\"<root> <right>\\" if it has only a right child, and \\"<root>\\" if it has no children. If a node is \`null\`, it should be represented as an empty string.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def tree_to_string(root): Converts the given binary tree to its string representation. if root is None: return \\"\\" result = str(root.value) left_str = tree_to_string(root.left) right_str = tree_to_string(root.right) if left_str or right_str: if left_str: result += \\" \\" + left_str if right_str: result += \\" \\" + right_str return result"},{"question":"Write a function to compute the factorial of a given number using iteration instead of recursion.","solution":"def iterative_factorial(n): Compute the factorial of a given number using iterative approach. Parameters: n (int): The number to compute the factorial of. Returns: int: The factorial of the given number. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function to reverse the characters in a string in place. You should not create a new string; the reversal should be done using a constant amount of extra space. How can I achieve this?","solution":"def reverse_string_in_place(s): Reverses the characters in the string s in place. :param s: list of characters representing the string to be reversed :return: None (the input list is modified in place) left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1"},{"question":"Write a function to find the maximum value in a given list of integers. If the list is empty, return \`None\`. Use recursion to implement this function.","solution":"def find_max_recursive(lst): Returns the maximum value in a given list of integers using recursion. If the list is empty, return None. if not lst: return None if len(lst) == 1: return lst[0] sub_max = find_max_recursive(lst[1:]) return lst[0] if lst[0] > sub_max else sub_max"},{"question":"Write a function to check if a string is a palindrome using a stack data structure. A palindrome is a string that reads the same backward as forward, e.g., 'madam' or 'racecar'.","solution":"def is_palindrome(s): Checks if the given string is a palindrome using a stack data structure. Parameters: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. stack = [] # Push all characters of the string onto the stack for char in s: stack.append(char) # Pop characters from stack and check against the original string for char in s: if char != stack.pop(): return False return True"},{"question":"Write a function to find the sum of all even numbers in an array and return the sum. If there are no even numbers, return 0.","solution":"def sum_of_evens(arr): Returns the sum of all even numbers in the array. If there are no even numbers, returns 0. return sum(x for x in arr if x % 2 == 0)"},{"question":"Write a function to check if an integer n is a perfect square. An integer n is a perfect square if there exists an integer x such that x^2 = n.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False x = int(n ** 0.5) return x * x == n"},{"question":"Write a function to keep logging a message over and over into a file until a given condition is met.","solution":"def log_message(message, filepath, condition): Logs a message into the specified file repeatedly until the condition function returns True. Args: message (str): The message to log. filepath (str): The path to the log file. condition (callable): A function that returns a boolean indicating when to stop logging. Returns: None with open(filepath, 'a') as file: while not condition(): file.write(message + \\"n\\")"},{"question":"Write a function to convert a list of integers to a list of their corresponding hex string representations using recursion.","solution":"def int_list_to_hex_list(int_list): Converts a list of integers to a list of their corresponding hex string representations using recursion. :param int_list: List[int] - input list of integers :return: List[str] - list of hex string representations if not int_list: return [] head = int_list[0] tail = int_list[1:] return [hex(head)] + int_list_to_hex_list(tail)"},{"question":"Write a function to count the number of unique words in a given string. The function should ignore case and punctuation. The return value should be the highest count of unique words found in any substring of the given string of a specified length.","solution":"import string def count_unique_words(s, length): Returns the highest count of unique words found in any substring of the given string of a specified length. The function ignores case and punctuation. def clean_and_split(text): text = text.lower() text = text.translate(str.maketrans('', '', string.punctuation)) return text.split() words = clean_and_split(s) max_unique_count = 0 for i in range(len(words) - length + 1): substring = words[i:i+length] unique_words_count = len(set(substring)) if unique_words_count > max_unique_count: max_unique_count = unique_words_count return max_unique_count"},{"question":"Write a function to check if a string contains only unique characters. For instance, the string \\"anagram\\" would pass this function, as each character in the string is unique. The function should return \`True\` if all characters in the string are unique, and \`False\` otherwise. Your function should be efficient in terms of both time and space complexity.","solution":"def is_unique(string): Returns True if the string contains only unique characters, otherwise False. seen_chars = set() for char in string: if char in seen_chars: return False seen_chars.add(char) return True"},{"question":"Write a function to sort an array of integers using the bubble sort algorithm. The function should take an array of integers as input and return the sorted array. Also, provide a brief explanation of the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of integers using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if any swaps are made in this pass swapped = False # Perform a bubble pass over the list for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater than the next element arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swaps are made, the list is already sorted if not swapped: break return arr"},{"question":"Write a function to merge two sorted arrays into a single sorted array. The function should take two sorted arrays \`arr1\` and \`arr2\` as input and return a new sorted array \`arr3\`.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A new sorted array that contains all elements from arr1 and arr2. index1, index2 = 0, 0 merged_array = [] while index1 < len(arr1) and index2 < len(arr2): if arr1[index1] < arr2[index2]: merged_array.append(arr1[index1]) index1 += 1 else: merged_array.append(arr2[index2]) index2 += 1 while index1 < len(arr1): merged_array.append(arr1[index1]) index1 += 1 while index2 < len(arr2): merged_array.append(arr2[index2]) index2 += 1 return merged_array"},{"question":"Write a function to convert a given time in seconds to a more readable format (hours, minutes, and seconds).","solution":"def convert_seconds(seconds): Converts a given time in seconds to a more readable format (hours, minutes, and seconds). Parameters: seconds (int): time in seconds Returns: tuple: (hours, minutes, seconds) hours = seconds // 3600 seconds %= 3600 minutes = seconds // 60 seconds %= 60 return hours, minutes, seconds"},{"question":"Write a function to check if a given string can form a palindrome using a stack. A palindrome is a string that reads the same backward as forward. You can only pop elements from the stack if the popped element is the same as the next character to be pushed onto the stack. You cannot peek or iterate through the stack in any way.","solution":"from collections import Counter def can_form_palindrome(s): Checks if the given string can form a palindrome using a stack. :param s: Input string :return: True if the string can form a palindrome, else False char_count = Counter(s) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"Write a function to check if a string \`s1\` contains all the characters of string \`s2\` in the given order. For example, \`checkOrder(\\"abcde\\", \\"ace\\")\` should return \`True\` because all characters of \`s2\` appear in \`s1\` in the correct order, but \`checkOrder(\\"abcde\\", \\"aec\\")\` should return \`False\` because the characters do not appear in \`s1\` in the correct order.","solution":"def checkOrder(s1, s2): Checks if all characters of s2 are present in s1 in the given order. Parameters: s1 (str): The string to be checked s2 (str): The string that should appear in order in s1 Returns: bool: True if s2 appears in s1 in order, otherwise False it = iter(s1) return all(char in it for char in s2)"},{"question":"Write a function to identify if an input number is a prime number.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True"},{"question":"Write a function to remove all duplicate occurrences of elements in a list and return a new list with only unique elements.","solution":"def remove_duplicates(lst): Removes all duplicate occurrences of elements in the list and returns a new list with only unique elements. Parameters: lst (list): The list from which duplicates are to be removed. Returns: list: A list with only unique elements. unique_elements = list(dict.fromkeys(lst)) return unique_elements"},{"question":"Write a function to check if two strings are permutations of each other. Permutations are strings that contain the same characters but in a different order. For example, \\"listen\\" and \\"silent\\" are permutations of each other. Note that this comparison is case-sensitive.","solution":"def are_permutations(str1, str2): Checks if two strings are permutations of each other. Case-sensitive comparison. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"Write a function to remove duplicates from a list of integers and return the list with unique elements.","solution":"def remove_duplicates(int_list): Removes duplicates from a list of integers and returns the list with unique elements. return list(set(int_list))"},{"question":"Write a function to implement the Queue Abstract Data Type using two stacks st1 and st2. The queue should support the following operations: enqueue(x), dequeue(), and isEmpty().","solution":"class QueueUsingStacks: def __init__(self): self.st1 = [] self.st2 = [] def enqueue(self, x): # Always push new items onto st1 self.st1.append(x) def dequeue(self): # If both stacks are empty, the queue is empty if not self.st1 and not self.st2: raise IndexError(\\"dequeue from an empty queue\\") # If st2 is empty, pop all elements from st1 and push them onto st2 if not self.st2: while self.st1: self.st2.append(self.st1.pop()) # Pop the element from st2, which is the front element of the queue return self.st2.pop() def isEmpty(self): # The queue is empty if both stacks are empty return not self.st1 and not self.st2"},{"question":"Write a function to check if a binary number is divisible by 5. The function should take an integer \`n\` as input and return \`True\` if \`n\` is divisible by 5 in binary, and \`False\` otherwise. For example, 5 (decimal) is 101 (binary), and 10 (decimal) is 1010 (binary).","solution":"def is_divisible_by_5(n): Returns True if the binary representation of n is divisible by 5, False otherwise. # Convert the integer n to binary binary_representation = bin(n)[2:] # Convert the binary string back to an integer decimal_value = int(binary_representation, 2) # Check if the decimal value is divisible by 5 return decimal_value % 5 == 0"},{"question":"Write a function to determine if a singly linked list has a cycle without using any extra space. How would you approach this problem?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Determines if a singly linked list has a cycle. :param head: ListNode, the head of the singly linked list :return: bool, True if there is a cycle, False otherwise if not head or not head.next: return False slow = head fast = head.next while slow != fast: if not fast or not fast.next: return False slow = slow.next fast = fast.next.next return True"},{"question":"Write a function to find the maximum profit from a list of stock prices, where you can buy and sell at most one share during a given week. You cannot sell a stock before you buy one. The function should return the maximum profit.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. You can buy and sell at most one share during the given period. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a function to reverse the digits of an integer. If reversing the digits causes the integer to go outside the 32-bit signed integer range [-2^31, 2^31 - 1], then return 0. How would you approach this problem?","solution":"def reverse_integer(x): Reverse the digits of an integer. If reversing the digits causes the integer to go outside the 32-bit signed integer range [-2^31, 2^31 - 1], return 0. sign = -1 if x < 0 else 1 x_abs_str = str(abs(x)) reversed_x_str = x_abs_str[::-1] reversed_x = int(reversed_x_str) * sign # Ensure the integer is within the 32-bit signed integer range if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Write a function to calculate the edit distance between two strings. For an example \`sequence1\` = \\"kitten\\" and \`sequence2\` = \\"sitting\\". What is the edit distance between these two strings and how can we modify it to handle cases where \`sequence1\` is much longer than \`sequence2\`? For better performance, we'll use dynamic programming. Please provide a Python implementation and a brief explanation of the approach.","solution":"def edit_distance(sequence1, sequence2): Calculate the edit distance between two strings sequence1 and sequence2 using dynamic programming. Parameters: sequence1 (str): The first string. sequence2 (str): The second string. Returns: int: The edit distance between the two strings. m = len(sequence1) n = len(sequence2) # Create a (m+1) x (n+1) matrix to store the edit distances dp = [[0] * (n+1) for _ in range(m+1)] # Initialize the first row and column of the matrix for i in range(m+1): dp[i][0] = i for j in range(n+1): dp[0][j] = j # Fill in the rest of the matrix for i in range(1, m+1): for j in range(1, n+1): if sequence1[i-1] == sequence2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min( dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1] # Substitution ) + 1 return dp[m][n]"},{"question":"Write a function to calculate the weighted average of a list of numbers, where the weights are provided in a separate list of the same length. If the inputs are not of the same length, the function should raise a ValueError.","solution":"def weighted_average(values, weights): Returns the weighted average of a list of numbers. :param values: List of numeric values :param weights: List of weights corresponding to the values :return: The weighted average of the values :raises ValueError: if the length of the values and weights lists are not the same if len(values) != len(weights): raise ValueError(\\"The length of values and weights must be the same\\") total_weight = sum(weights) weighted_sum = sum(value * weight for value, weight in zip(values, weights)) return weighted_sum / total_weight if total_weight != 0 else 0"},{"question":"Write a function to calculate the factorial of a given number using iterative approach in Python. The function should handle large numbers efficiently by using the \`sys\` module to increase the recursion limit (which is not applicable to iterative solutions in Python, so you don't need to modify the recursion limit). Instead, focus on optimizing the iterative approach. You should also include error handling for non-integer inputs and negative numbers.","solution":"def factorial(num): Returns the factorial of a given non-negative integer num using an iterative approach. Raises a ValueError if num is not an integer or is a negative integer. if not isinstance(num, int): raise ValueError(\\"Input must be an integer.\\") if num < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(2, num + 1): result *= i return result"},{"question":"Write a function to reverse the characters of a string without using any built-in string functions or methods. Additionally, the function should also reverse the order of words in the string. The order of words refers to the sequence of words as in a book.","solution":"def reverse_string_and_words(s): Reverse the characters of a string and also reverse the order of words in the string. # Helper function to reverse the characters in a list inplace def reverse_segment(l, start, end): while start < end: l[start], l[end] = l[end], l[start] start += 1 end -= 1 # Convert the input string into a list of characters for in-place manipulation char_list = list(s) # Reverse entire char list reverse_segment(char_list, 0, len(char_list) - 1) # Reverse each word in the reversed char list start = 0 while start < len(char_list): while start < len(char_list) and char_list[start] == ' ': start += 1 end = start while end < len(char_list) and char_list[end] != ' ': end += 1 reverse_segment(char_list, start, end - 1) start = end # Convert the char list back to a string return ''.join(char_list)"},{"question":"Write a function to calculate the nth Fibonacci number in Python using recursion. The function should handle both positive and negative values of n, with negative values returning -1 as misunderstanding of negative Fibonacci numbers is common.","solution":"def fibonacci(n): Returns the nth Fibonacci number. If n is negative, returns -1. if n < 0: return -1 elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to generate a list of prime numbers between two given numbers. The function should take two parameters: \`start\` and \`end\`, representing the range (inclusive) within which to find prime numbers. The function should return a list of prime numbers found within that range.","solution":"def generate_primes(start, end): Generates a list of prime numbers between start and end (inclusive). Parameters: - start: Integer, start range of numbers to check for primes. - end: Integer, end range of numbers to check for primes. Returns: - A list of prime numbers within the given range. def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return [x for x in range(start, end + 1) if is_prime(x)]"},{"question":"Write a function to find the maximum possible sum of a subarray in a given arran.","solution":"def max_subarray_sum(arr): Returns the maximum possible sum of a subarray in the given array. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to identify the start and end positions of the longest increasing subsequence in a given array.","solution":"def longest_increasing_subsequence(arr): Identify the start and end positions of the longest increasing subsequence in a given array. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the start and end indices of the longest increasing subsequence. if not arr: return (None, None) n = len(arr) lengths = [1] * n previous_index = [-1] * n max_length = 1 max_index = 0 for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 previous_index[i] = j if lengths[i] > max_length: max_length = lengths[i] max_index = i end_index = max_index start_index = max_index while previous_index[start_index] != -1: start_index = previous_index[start_index] return (start_index, end_index)"},{"question":"Write a function to reverse a string in Python. There are many ways to do this, but I am looking for the most efficient method using slicing.","solution":"def reverse_string(s: str) -> str: Returns the reversed version of the given string using slicing. return s[::-1]"},{"question":"Write a function to calculate the factorial of a given number. Ensure that your function handles edge cases such as when the input is negative or zero.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to implement the Bubble Sort algorithm. It should take an array of integers, \\"arr\\", as input, and return the sorted array.","solution":"def bubble_sort(arr): Sorts an array of integers using the bubble sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function to calculate the product of the last digits of two given integers. The function should handle both positive and negative integers seamlessly. Additionally, ensure that the function is thoroughly tested with various inputs to ensure its correctness.","solution":"def product_of_last_digits(a, b): Returns the product of the last digits of two given integers a and b. last_digit_a = abs(a) % 10 last_digit_b = abs(b) % 10 return last_digit_a * last_digit_b # Test function to check detailed functionality def check_last_digit(x): return abs(x) % 10"},{"question":"Write a function to find the highest and lowest elements in a list. In this function, you should not use the built-in max() and min() functions, and you should avoid comparing each element with every other element.","solution":"def find_high_low(numbers): Returns the highest and lowest elements in a list without using max() and min() and without comparing each element with every other element. if not numbers: return None, None highest = lowest = numbers[0] for num in numbers[1:]: if num > highest: highest = num elif num < lowest: lowest = num return highest, lowest"},{"question":"Write a function to rotate an array of n elements to the right by k steps. The function should handle cases where k is larger than n and return the array in its new rotated state.","solution":"def rotate_array(nums, k): Rotates the array nums to the right by k steps. Parameters: nums (List[int]): The list of integers to be rotated. k (int): The number of steps to rotate the array. Returns: List[int]: The rotated list of integers. if not nums: return [] n = len(nums) k %= n # Reverse the whole array nums.reverse() # Reverse the first k elements nums[:k] = reversed(nums[:k]) # Reverse the remaining n - k elements nums[k:] = reversed(nums[k:]) return nums"},{"question":"Write a function to generate the Cartesian product of two sets, set1 and set2.","solution":"def cartesian_product(set1, set2): Generates the Cartesian product of two sets. Args: set1 (set): The first set. set2 (set): The second set. Returns: set: The Cartesian product of set1 and set2. return {(a, b) for a in set1 for b in set2}"},{"question":"Write a function to find the index of the first occurrence of a target value in an array. If the target is not found, return -1. The function should handle the case where the array is empty or the target value is outside the bounds of the array index.","solution":"def find_first_occurrence(arr, target): Returns the index of the first occurrence of target in arr. If the target is not found, returns -1. for i in range(len(arr)): if arr[i] == target: return i return -1"},{"question":"Write a function to find the median of an array of numbers. The function should handle both odd and even lengths of the array. If the array is empty, the function should return None.","solution":"def find_median(arr): Returns the median of the array. If the array is empty, returns None. n = len(arr) if n == 0: return None arr_sorted = sorted(arr) mid = n // 2 if n % 2 == 0: median = (arr_sorted[mid - 1] + arr_sorted[mid]) / 2.0 else: median = arr_sorted[mid] return median"},{"question":"Write a function to compute the symmetric difference of two sets. The symmetric difference of two sets is the set of elements that are in either of the sets but not in their intersection.","solution":"def symmetric_difference(set1, set2): Returns the symmetric difference of two sets. return set1.symmetric_difference(set2)"},{"question":"Write a function to reverse a linked list in place in Python. The linked list is represented using a class \`ListNode\`, where each node contains an integer value and a pointer to the next node. You should reverse the list in-place without using any extra space. Additionally, ensure that the list's final head node points to \`None\`.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next_node = next_node def reverse_linked_list(head): Reverses a linked list in place. :param head: The head node of the linked list :return: The new head of the reversed linked list prev = None current = head while current is not None: next_node = current.next_node current.next_node = prev prev = current current = next_node return prev"},{"question":"Write a function to reverse a string using recursion. The function should handle both uppercase and lowercase letters and spaces.","solution":"def reverse_string(s): Returns the reverse of the string s using recursion. if len(s) == 0: return s return s[-1] + reverse_string(s[:-1])"},{"question":"Write a function to capitalize the first letter of each word in a given string and convert the rest of the letters to lowercase. Then, join them into a single string separated by spaces.","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the string and convert the rest of the letters to lowercase. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should handle the base case where the factorial of 0 is 1. Make sure your function is well-documented and includes error handling for non-integer inputs.","solution":"def factorial(n): Recursive function to calculate the factorial of a number. Parameters: n (int): The number to calculate the factorial for Returns: int: The factorial of the number n Raises: ValueError: If n is not a non-negative integer if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to identify the length of the longest contiguous subarray with all distinct values in a given array of integers.","solution":"def longest_distinct_subarray(arr): Identifies the length of the longest contiguous subarray with all distinct values. :param arr: List of integers. :return: Integer length of the longest contiguous subarray with all distinct values. m = {} max_len = 0 start = 0 for end in range(len(arr)): if arr[end] in m: start = max(start, m[arr[end]] + 1) m[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function to search a given key in a sorted array of integers. Your function should return the index of the key if found, otherwise, return -1. If there are multiple occurrences of the key, return the index of the first occurrence.","solution":"def binary_search(arr, key): Performs binary search to find the key in a sorted array. Parameters: arr (list of int): Sorted array of integers. key (int): The key to search for. Returns: int: The index of the key if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 # Check if key is at mid if arr[mid] == key: # Search backwards to find the first occurrence while mid > 0 and arr[mid - 1] == key: mid -= 1 return mid elif arr[mid] < key: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to select the optimal route for a delivery truck using a given set of delivery points in a city. The function should take a list of delivery points as input and return the shortest route that the delivery truck can follow to complete all deliveries.","solution":"import itertools def calculate_distance(point1, point2): Calculate the Euclidean distance between two points. Each point is represented as a tuple (x, y). return ((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) ** 0.5 def total_route_distance(route): Calculate the total distance of the route. The route is a list of points where each point is a tuple (x, y). distance = 0 for i in range(len(route) - 1): distance += calculate_distance(route[i], route[i + 1]) # Return to starting point distance += calculate_distance(route[-1], route[0]) return distance def optimal_route(delivery_points): Find the optimal route for a delivery truck to complete all deliveries. The delivery points are represented as a list of tuples (x, y). # Generate all possible permutations of the delivery points all_routes = itertools.permutations(delivery_points) # Find the optimal route with the minimum total distance optimal_route = min(all_routes, key=total_route_distance) return optimal_route"},{"question":"Write a function to calculate the square root of a given number using the Newton-Raphson method. The function should take a single argument, the number for which the square root is to be calculated, and use an initial guess of 1.0. Implement a simple loop to iteratively improve the guess until the difference between successive guesses is less than 0.00001.","solution":"def sqrt_newton_raphson(number): Returns the square root of a given number using the Newton-Raphson method. if number < 0: raise ValueError(\\"Cannot compute square root of a negative number\\") guess = 1.0 while True: next_guess = (guess + number / guess) / 2 if abs(next_guess - guess) < 0.00001: return next_guess guess = next_guess"},{"question":"Write a function to check if a given year is a leap year in a leap year calculator. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400.","solution":"def is_leap_year(year): Check if a given year is a leap year. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. Parameters: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function to count the number of unique elements in an array, implementing the Pigeonhole Principle to optimize the solution. The Pigeonhole Principle states that if more than n pigeons are put into n pigeonholes, then at least one pigeonhole must contain more than one pigeon. In this context, the unique elements are the \\"pigeons,\\" and the positions in the array are the \\"pigeonholes.\\"","solution":"def count_unique_elements(arr): Returns the count of unique elements in the array using the Pigeonhole Principle. if not arr: return 0 # Create a set to store unique elements unique_elements = set(arr) # Return the length of the set return len(unique_elements)"},{"question":"Write a function to reverse a given string in Python. The result should be returned in the same data type (string). If the input is not a string, the function should raise a TypeError with the message \\"Input must be a string\\".","solution":"def reverse_string(s): Reverses the given string. Args: s (str): The string to reverse. Returns: str: The reversed string. Raises: TypeError: If the input is not a string. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") return s[::-1]"},{"question":"Write a function to convert the given number into its equivalent Roman numeral representation. The input number is guaranteed to be between 1 and 3999. How would you approach this problem?","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Parameters: num (int): The integer value to convert to Roman numeral. Returns: str: The Roman numeral representation of the given integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function to filter out the even numbers from a list and return the list of odd numbers. You want to do this using list comprehension. If the input list is empty, return an empty list.","solution":"def filter_even_numbers(lst): Filters out the even numbers from a list and returns the list of odd numbers. Parameters: lst (list): A list of integers. Returns: list: A list containing only the odd integers from the input list. return [num for num in lst if num % 2 != 0]"},{"question":"Write a function to calculate the factorial of a given number. The function should handle both positive integers and zero. For simplicity, let's assume that the input will always be a non-negative integer.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to solve the Sudoku puzzle. The function should take a 2D list representing the Sudoku board and return the solved board. The function should follow the standard rules for Sudoku: no row, column, or 3x3 sub-grid can contain duplicate digits from 1 to 9.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. :param board: 2D list representing the Sudoku board with empty cells as 0s :return: Solved 2D list of the Sudoku board if solve(board): return board else: return \\"No solution exists\\" def solve(board): empty = find_empty(board) if not empty: return True # Puzzle solved row, col = empty for num in range(1, 10): if is_valid(board, num, row, col): board[row][col] = num if solve(board): return True board[row][col] = 0 return False def find_empty(board): Finds an empty cell in the Sudoku board. :param board: 2D list representing the Sudoku board :return: Tuple (row, col) of the empty cell, or None if no empty cell exists for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 0: return (i, j) return None def is_valid(board, num, row, col): Checks whether it's valid to place a number in a specific cell. :param board: 2D list representing the Sudoku board :param num: Number to be placed :param row: Row index :param col: Column index :return: True if valid, False otherwise # Check row for j in range(len(board[0])): if board[row][j] == num: return False # Check column for i in range(len(board)): if board[i][col] == num: return False # Check 3x3 sub-grid box_x = col // 3 box_y = row // 3 for i in range(box_y * 3, box_y * 3 + 3): for j in range(box_x * 3, box_x * 3 + 3): if board[i][j] == num: return False return True"},{"question":"Write a function to evaluate the value of a postfix expression with mixed integers and floating-point numbers using stack.","solution":"def evaluate_postfix(expression): Evaluates the value of a postfix expression containing mixed integers and floating-point numbers. stack = [] operators = set(['+', '-', '*', '/']) tokens = expression.split() for token in tokens: if token not in operators: stack.append(float(token)) else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(a / b) return stack[0]"},{"question":"Write a function to calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The function should be named \`gcd\` and should take two parameters, \`a\` and \`b\`. The Euclidean algorithm involves repeated division and taking remainders until the remainder is zero. The last non-zero remainder is the GCD.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Write a function to find the maximum number that can be formed using the digits of the given number and return it as an integer.","solution":"def maximum_number(n: int) -> int: Returns the maximum number that can be formed using the digits of the given number. Parameters: - n (int): The input number. Returns: - int: The maximum number formed from the digits of the input number. # Convert the number to a list of digits digits = list(str(n)) # Sort the digits in descending order digits.sort(reverse=True) # Join the sorted digits to form the maximum number max_number = int(''.join(digits)) return max_number"},{"question":"Write a function to calculate the sum of all digits in a given non-negative integer. For example, the sum of digits in 123 would be 6 (1 + 2 + 3).","solution":"def sum_of_digits(n): Returns the sum of all digits in the given non-negative integer n. return sum(int(digit) for digit in str(n))"},{"question":"Write a function to compute the average of an array of integers. The function should handle cases where the array might be empty. If the array is empty, the function should return 0.0 as an average.","solution":"def average(arr): Returns the average of the array of integers. If the array is empty, returns 0.0. if not arr: return 0.0 return sum(arr) / len(arr)"},{"question":"Write a function to find the multiplication table of a number in Python. The function should take two arguments - the number and the range of the multiplication table (from 1 to the given range).","solution":"def multiplication_table(number, table_range): Returns the multiplication table of \`number\` from 1 to \`table_range\`. Args: - number (int): The number to generate the multiplication table for. - table_range (int): The range of the multiplication table. Returns: - list of tuples: Each tuple contains (i, number * i) for i from 1 to table_range. return [(i, number * i) for i in range(1, table_range + 1)]"},{"question":"Write a function to find the next node in the InOrder Traversal of a Binary Tree for a given node. The function should return \`None\` if there is no such node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None, parent=None): self.value = value self.left = left self.right = right self.parent = parent def find_inorder_successor(node): Returns the in-order successor of the given node in a binary tree. if not node: return None # If the node has a right child, then the successor is the smallest node in node's right subtree if node.right: return get_leftmost_child(node.right) # Otherwise, the successor is one of the ancestors successor = node.parent while successor and node == successor.right: node = successor successor = successor.parent return successor def get_leftmost_child(node): Gets the leftmost child in the subtree rooted at the given node. while node.left: node = node.left return node"},{"question":"Write a function to print all the odd numbers in a list.","solution":"def print_odd_numbers(lst): Prints all the odd numbers in the given list. Parameters: lst (list): A list of integers. odd_numbers = [num for num in lst if num % 2 != 0] for num in odd_numbers: print(num)"},{"question":"Write a function to find the intersection of two arrays efficiently. The function should take two lists of integers as input and return a list containing the unique elements that are present in both arrays. The solution should aim for the highest efficiency, considering both time and space complexity.","solution":"def intersection(arr1, arr2): Returns the list of unique elements that are present in both input lists. set1 = set(arr1) set2 = set(arr2) result = list(set1.intersection(set2)) return result"},{"question":"Write a function to check if a given number is a prime number in Go. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a function to convert a string to a list of integers. How should the function handle non-integer characters?","solution":"def convert_string_to_int_list(s): Converts a string to a list of integers. Non-integer characters are ignored. Parameters: s (str): Input string containing the characters to be converted. Returns: list: List of integers. int_list = [] for char in s: if char.isdigit(): int_list.append(int(char)) return int_list"},{"question":"Write a function to find the total number of unique elements in a given array of integers. The function should be efficient and utilize the properties of sets to ensure minimal space complexity.","solution":"def count_unique_elements(arr): Returns the total number of unique elements in the given array. Parameters: arr (list of int): The array of integers. Returns: int: The number of unique elements in the array. return len(set(arr))"},{"question":"Write a function to find the middle element of a singly linked list. If there are two middle elements, return the second middle element.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_middle_of_linked_list(head): Finds the middle element of a singly linked list. If there are two middle elements, return the second one. Args: head (ListNode): The head of the singly linked list. Returns: int: The value of the middle element. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.val"},{"question":"Write a function to remove all duplicates from an array in-place, ensuring each element appears only once, and return the new length of the array after removal. The function should not use any extra space.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place and returns the length of the array with unique elements. Parameters: nums (list): the input sorted list of integers. Returns: int: the length of the array after duplicate removal. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function to determine if a given array is sorted.","solution":"def is_sorted(arr): Determines if a given array is sorted in non-decreasing order. Parameters: arr (list): A list of elements to check. Returns: bool: True if the array is sorted, False otherwise. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a function to print all even numbers between two input parameters \`a\` and \`b\` inclusively. How can I implement this in Python?","solution":"def print_even_numbers(a, b): Returns a list of all even numbers between a and b inclusively. if a > b: a, b = b, a return [num for num in range(a, b + 1) if num % 2 == 0]"},{"question":"Write a function to find the largest positive integer n such that n ≤ x and n is a perfect square.","solution":"import math def largest_perfect_square(x): Returns the largest positive integer n such that n ≤ x and n is a perfect square. if x < 0: return None largest_square_root = math.isqrt(x) return largest_square_root ** 2"},{"question":"Write a function to reverse the order of words in a string in Python without using any built-in Python string or list functions.","solution":"def reverse_words(s): Reverses the order of words in a given string without using any built-in Python string or list functions. Args: s (str): The input string. Returns: str: The string with the order of words reversed. # Split the string into words without using split words = [] word = '' for char in s: if char != ' ': word += char else: if word: words.append(word) word = '' # Don't forget the last word if word: words.append(word) # Reverse the list of words without using reverse reversed_words = [] for i in range(len(words) - 1, -1, -1): reversed_words.append(words[i]) # Join the reversed list into a string without using join reversed_string = '' first_word = True for word in reversed_words: if first_word: reversed_string += word first_word = False else: reversed_string += ' ' + word return reversed_string"},{"question":"Write a function to sort an array using quicksort algorithm. Explain each step of the algorithm and include a Python code implementation.","solution":"def quicksort(arr): Sorts an array using the quicksort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list of elements. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] # Choosing the middle element as the pivot left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to find all numbers less than \`n\` that can be evenly divided by any number from 1 to itself, but not by any number other than 1 and itself (these are prime numbers). Identify and return a list of all prime numbers less than \`n\`. For example, given \`n = 10\`, the function should return \`[2, 3, 5, 7]\` since these are the prime numbers less than 10.","solution":"def find_primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for i in range(2, n): is_prime = True for j in range(2, int(i ** 0.5) + 1): if i % j == 0: is_prime = False break if is_prime: primes.append(i) return primes"},{"question":"Write a function to count the number of words in a given string. For example, if the input is \\"Hello world\\", the output should be 2.","solution":"def count_words(s): Returns the count of words in the given string. A word is defined as a sequence of characters separated by whitespace. return len(s.split())"},{"question":"Write a function to find the shortest subarray length that sums up to a given target. If no such subarray exists, return -1.","solution":"def shortest_subarray_with_sum(nums, target): Returns the length of the shortest contiguous subarray of which the sum is equal to target. If no such subarray exists, returns -1. n = len(nums) min_len = float('inf') start = 0 curr_sum = 0 for end in range(n): curr_sum += nums[end] while curr_sum >= target: min_len = min(min_len, end - start + 1) curr_sum -= nums[start] start += 1 return min_len if min_len != float('inf') else -1"},{"question":"Write a function to find the nth power of a given number in Python. The function should also handle negative numbers and fractional powers. When the base is negative and the exponent is a non-integer, the function should raise an exception. For example, 2^3 = 8, 3^-2 = 0.111, and 2^0 = 1.","solution":"def power(base, exponent): Returns the power of the base to the exponent. Handles negative numbers and fractional powers. Raises ValueError if base is negative and exponent is a non-integer. if base < 0 and not float(exponent).is_integer(): raise ValueError(\\"Base cannot be negative when the exponent is a non-integer.\\") return base ** exponent"},{"question":"Write a function to count how many times a character appears in a string. The function should take two parameters: the string and the character to be counted.","solution":"def count_char(s, char): Returns the number of times the character 'char' appears in the string 's'. Parameters: s (str): The string to search within. char (str): The character to count. Returns: int: The count of 'char' in 's'. return s.count(char)"},{"question":"Write a function to calculate the Fibonacci sequence in Python. The function should take two parameters: the number of terms in the sequence and the starting points of the sequence. The function should return the Fibonacci sequence as a list.","solution":"def fibonacci_sequence(n, start_points): Generate a Fibonacci sequence with 'n' terms starting from the given 'start_points'. Args: n (int): The number of terms in the sequence. start_points (tuple): A tuple containing two starting numbers of the sequence. Returns: list: A list containing the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [start_points[0]] sequence = list(start_points) for _ in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Write a function to convert a given string to title case.","solution":"def to_title_case(s): Converts a given string to title case, where the first letter of each word is capitalized. Parameters: s (str): The input string. Returns: str: The title-cased string. return s.title()"},{"question":"Write a function to find the largest element in a given list. If the list is empty, the function should return None.","solution":"def find_largest_element(lst): Returns the largest element in the given list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a function to find the shortest path to a given cell in a grid using Dijkstra's algorithm. Given a grid represented as a 2D array and the destination cell as coordinates, return the shortest path length. If the destination cell is unreachable, return -1.","solution":"import heapq def dijkstra_shortest_path(grid, destination): Find the shortest path to a given cell in a grid using Dijkstra's algorithm. :param grid: 2D list of integers representing the grid. :param destination: Tuple of (row, column) representing the destination cell. :return: The shortest path length to the destination cell, or -1 if the cell is unreachable. rows, cols = len(grid), len(grid[0]) dest_row, dest_col = destination if not (0 <= dest_row < rows and 0 <= dest_col < cols): return -1 # Dijkstra's algorithm using a priority queue pq = [(0, 0, 0)] # (distance, row, col) distances = {(0, 0): 0} while pq: current_distance, row, col = heapq.heappop(pq) # If we reached the destination if (row, col) == destination: return current_distance # Explore neighbors for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] != -1: new_distance = current_distance + 1 if new_distance < distances.get((new_row, new_col), float('inf')): distances[(new_row, new_col)] = new_distance heapq.heappush(pq, (new_distance, new_row, new_col)) return -1 # If we exhaust all possibilities and don't reach the destination"},{"question":"Write a function to check if two binary strings \`A\` and \`B\` can be made equal by swapping any subset of their digits. If they can be made equal, return \`\\"YES\\"\`, otherwise return \`\\"NO\\"\`.","solution":"def can_swap_to_equal(A, B): Check if two binary strings A and B can be made equal by swapping any subset of their digits. Parameters: A (str): The first binary string. B (str): The second binary string. Returns: str: \\"YES\\" if A and B can be made equal by swapping any subset of their digits, otherwise \\"NO\\". # Two binary strings can be made equal by swapping digits if and only if they have the same number of '0's and '1's. return \\"YES\\" if sorted(A) == sorted(B) else \\"NO\\""},{"question":"Write a function to solve the nth_GRAY I problem in programming. What is the nth_GRAY I problem, and how can I solve it?","solution":"def nth_gray_code(n): Returns the nth gray code. Parameters: n (int): The input number for which the gray code is to be calculated. Returns: int: The nth gray code. return n ^ (n >> 1)"},{"question":"Write a function to update and return a binary search tree (BST) with a new key. If the key already exists, update its value. If the key does not exist, insert it as a leaf node. The function should also return the updated tree.","solution":"class TreeNode: def __init__(self, key=0, value=0, left=None, right=None): self.key = key self.value = value self.left = left self.right = right def update_bst(root, key, value): Updates the BST with the given key-value pair. If the key already exists, update its value. If it does not exist, insert it as a new leaf node. Args: root (TreeNode): Root of the BST. key: Key to be inserted or updated. value: Value to be associated with the key. Returns: TreeNode: The root of the updated BST. if root is None: return TreeNode(key, value) if key < root.key: root.left = update_bst(root.left, key, value) elif key > root.key: root.right = update_bst(root.right, key, value) else: # key == root.key root.value = value return root"},{"question":"Write a function to generate all the permutations of a given string. permutations must be in lexicographically sorted order.","solution":"from itertools import permutations def generate_permutations(s): Generate all permutations of the input string in lexicographically sorted order. :param s: Input string :return: List of permutations in lexicographical order # Get all permutations using itertools.permutations perms = [''.join(p) for p in permutations(s)] # Remove duplicates by converting to a set and then back to list perms_unique = list(sorted(set(perms))) return perms_unique"},{"question":"Write a function to reverse the order of elements in a given list. You should not use any built-in functions that directly reverse lists, such as \`reverse()\`, \`reversed()\`, or slicing with \`[::-1]\`. Instead, implement the reverse functionality manually using a loop.","solution":"def reverse_list(lst): Reverses the order of elements in the given list. Args: lst (list): The list to reverse. Returns: list: A new list with the elements in reversed order. reversed_lst = [] for i in range(len(lst)-1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a function to queuize the elements of an array in order, removing the first element as you iterate through it.","solution":"def queuize(arr): Yields each element of the array in order while removing them from the front. while arr: yield arr.pop(0)"},{"question":"Write a function to traverse a binary tree level by level, printing each node's value.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Traverse a binary tree level by level, printing each node's value. if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Write a function to find the maximum value in a binary search tree (BST). Please provide the solution in pseudocode.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_in_bst(root): Function to find the maximum value in a binary search tree. Args: root (TreeNode): The root of the binary search tree. Returns: int: The maximum value in the binary search tree or None if the tree is empty. if root is None: return None current = root while current.right: current = current.right return current.value"},{"question":"Write a function to get the Fibonacci sequence up to a given number 'n'. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_sequence(n): Returns a list of Fibonacci sequence up to n. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to reverse a given integer value. For instance, if the input is -123, the reversed value should be -321. How can you efficiently reverse an integer?","solution":"def reverse_integer(n): Returns the reverse of the given integer n. if n < 0: return -int(str(-n)[::-1]) else: return int(str(n)[::-1])"},{"question":"Write a function to find the nth Fibonacci number using memoization to optimize the solution. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n <= 0: return 0 elif n == 1 or n == 2: return 1 if n not in memo: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to convert a given string into a palindrome by appending characters only at the end of the string. The function should return the resulting palindrome and the number of characters added.","solution":"def make_palindrome(s): Converts the given string s into a palindrome by appending characters only at the end. Returns a tuple containing the resulting palindrome and the number of characters added. if s == s[::-1]: return s, 0 for i in range(len(s)): if s[i:] == s[i:][::-1]: break # Characters from the beginning to just before the palindrome suffix need to be added at the end. suffix_to_add = s[:i][::-1] palindrome = s + suffix_to_add return palindrome, len(suffix_to_add)"},{"question":"Write a function to calculate the sum of all numbers in a nested list. The list can contain numbers and other nested lists. How can you solve this using recursion?","solution":"def sum_nested_list(nested_list): Returns the sum of all numbers in a nested list. Args: nested_list (list): A list that can contain integers and other nested lists. Returns: int: The sum of all integers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a function to find the node with the minimum value in a binary search tree (BST). The function should take the root of the BST as input and return the node with the minimum value.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_minimum_value_node(root): This function returns the node with the minimum value in a given binary search tree. current = root # loop down to find the leftmost leaf while current.left is not None: current = current.left return current"},{"question":"Write a function to calculate the nth Fibonacci number in a more efficient way than using recursion, given that the constraint is to avoid stack overflow and excessive computation time. A Fibonacci number is a number in the sequence where each number after the first two is the sum of the two preceding ones. The sequence starts with 0 and 1. For instance, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an efficient iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to determine if a given string is a palindrome. For instance, the string 'racecar' should return True, as it reads the same backward as forward. On the other hand, the string 'hello' should return False. To accomplish this, you'll need to compare characters in the string from both ends moving towards the center. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. import re # Remove non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function to determine if a sequence of integers is strictly monotonically increasing or decreasing.","solution":"def is_strictly_monotonic(arr): Determines if the input sequence of integers is strictly monotonically increasing or decreasing. Parameters: arr (list of int): The sequence of integers to check. Returns: bool: True if the sequence is strictly monotonically increasing or decreasing, False otherwise. if not arr or len(arr) == 1: return True increasing = decreasing = True for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: increasing = False if arr[i] >= arr[i - 1]: decreasing = False if not increasing and not decreasing: return False return increasing or decreasing"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a given 2D array.","solution":"def max_subarray_sum_2d(arr): Find the maximum sum of a contiguous subarray within a given 2D array. Args: arr (list): A 2D list of integers. Returns: int: The maximum sum of a contiguous subarray. def kadane(arr_1d): Helper function to compute the maximum subarray sum for 1D array using Kadane's algorithm. max_ending_here = max_so_far = arr_1d[0] for x in arr_1d[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far if not arr or not arr[0]: return 0 rows = len(arr) cols = len(arr[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += arr[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a function to check if a given linked list is a palindrome. The function should take the head of the linked list as input and return a boolean indicating if the linked list is a palindrome.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Checks if a given linked list is a palindrome. # Find the middle of the linked list using slow and fast pointers slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Compare the first and the reversed second half left, right = head, prev while right: # Only need to compare up to the end of the shorter half (right half here) if left.val != right.val: return False left = left.next right = right.next return True"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number. The function should use recursion to achieve this.","solution":"def fibonacci(n): Returns the fibonacci sequence up to the nth number using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: seq = fibonacci(n - 1) seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Write a function to deduplicate a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def deduplicate_linked_list(head): Removes duplicate values from a sorted linked list. current = head while current and current.next: if current.value == current.next.value: current.next = current.next.next else: current = current.next return head"},{"question":"Write a function to calculate the total sum of all numbers in a list of lists of integers.","solution":"def total_sum(nested_list): Calculates the total sum of all numbers in a list of lists of integers. Parameters: nested_list (list of lists of int): The input list of lists containing integers. Returns: int: The total sum of all integers in the list of lists. total = 0 for sublist in nested_list: total += sum(sublist) return total"},{"question":"Write a function to get the sum of all integers in a list. If the usage of the sum function is detected, the function should return -1 to indicate that it should not be used. If the list is empty, the function should return 0.","solution":"def sum_of_integers(lst): Returns the sum of all integers in a list, or -1 if sum() function is used. import dis # Disassembling the byte code to check for 'sum' usage bytecode = dis.Bytecode(sum_of_integers) for instr in bytecode: if instr.opname == 'LOAD_GLOBAL' and instr.argval == 'sum': return -1 total = 0 for number in lst: total += number return total"},{"question":"Write a function to find the kth smallest element in an unsorted array using the Quickselect algorithm. What is Quickselect, and how does it differ from the QuickSort algorithm?","solution":"def quickselect(arr, k): Find the kth smallest element in an unsorted list using the Quickselect algorithm. Parameters: arr (list): The list from which to find the kth smallest element. k (int): The index (0-based) of the kth smallest element to find. Returns: int: The kth smallest element in the list. def partition(left, right, pivot_index): pivot_value = arr[pivot_index] # Move pivot to end arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 # Move pivot to its final place arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k_smallest): Returns the k-th smallest element of list within left..right if left == right: # If the list contains only one element return arr[left] # Select a pivotIndex between left and right pivot_index = (left + right) // 2 # Partition the array and get the pivot position in sorted array pivot_index = partition(left, right, pivot_index) # The pivot is in its final sorted position if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: # Go left return select(left, pivot_index - 1, k_smallest) else: # Go right return select(pivot_index + 1, right, k_smallest) return select(0, len(arr) - 1, k)"},{"question":"Write a function to check if a string contains only unique characters. What should be the time complexity of the function?","solution":"def has_unique_characters(s): Returns True if the input string s contains only unique characters, False otherwise. return len(set(s)) == len(s) # The time complexity of this function is O(n), where n is the length of the string. # This is because creating a set from the input string s takes O(n) time, and comparing the lengths is O(1)."},{"question":"Write a function to find the maximum sum of a subset of a given array where the sum of the subset is divisible by 10.","solution":"def max_subset_sum_divisible_by_ten(arr): Finds the maximum sum of a subset of the given array where the sum is divisible by 10. n = len(arr) # Initialize a 2D dp array with -inf values dp = [[-float('inf')] * 10 for _ in range(n + 1)] dp[0][0] = 0 for i in range(1, n + 1): num = arr[i - 1] for mod in range(10): dp[i][mod] = max(dp[i - 1][mod], dp[i - 1][(mod - num % 10) % 10] + num) return dp[n][0]"},{"question":"Write a function to determine if a given integer n is a prime number or not. The function should return \`True\` if n is a prime number, otherwise it should return \`False\`. The function should be efficient and consider edge cases such as negative numbers and numbers less than 2. Also, the function should handle large numbers efficiently.","solution":"def is_prime(n): Determines if a given integer n is a prime number. Parameters: n (int): The integer to check. Returns: bool: True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to perform depth-first search (DFS) on a graph. The graph is represented using an adjacency list and may contain cycles. The function should return a boolean indicating whether the graph has a cycle or not. Additionally, the function should return a list of nodes that are part of the cycle if a cycle is detected.","solution":"def dfs(graph): Perform depth-first search (DFS) on the graph to detect cycles. :param graph: Dictionary representing the adjacency list of the graph :return: (bool, list) indicating whether the graph has a cycle and the nodes that are part of the cycle def dfs_visit(node, visited, rec_stack): visited[node] = True rec_stack[node] = True path.append(node) for neighbor in graph[node]: if not visited[neighbor]: if dfs_visit(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: cycle_nodes.extend(path[path.index(neighbor):]) cycle_nodes.append(neighbor) return True rec_stack[node] = False path.pop() return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} cycle_nodes = [] path = [] for node in graph: if not visited[node]: if dfs_visit(node, visited, rec_stack): return True, cycle_nodes return False, cycle_nodes"},{"question":"Write a function to remove duplicates from a sorted array of integers. The function should return the length of the array after removing duplicates and update the array in place to contain only unique elements. The order of the elements should be the same as in the original array.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in place and returns the new length. The array is updated in place to contain only unique elements. if not nums: return 0 # Pointer for the position of the last unique element unique_pos = 0 for i in range(1, len(nums)): if nums[i] != nums[unique_pos]: unique_pos += 1 nums[unique_pos] = nums[i] # Length of unique elements array return unique_pos + 1"},{"question":"Write a function to calculate the sum of the squares of the first n natural numbers. The function should use a loop to achieve this.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. :param n: An integer representing the number of natural numbers to consider. :return: The sum of the squares of the first n natural numbers. total = 0 for i in range(1, n + 1): total += i * i return total"},{"question":"Write a function to find a duplicate number in an array of integers between 1 and n (inclusive), where there is exactly one number in the array appearing twice. The array is in-place and no extra space should be used, except for the stack space.","solution":"def find_duplicate(nums): Find and return the duplicate number in the array, assuming there is exactly one duplicate. The function uses Floyd's Tortoise and Hare (Cycle Detection) algorithm. # Phase 1: Finding the intersection point of the two runners tortoise = hare = nums[0] while True: tortoise = nums[tortoise] hare = nums[nums[hare]] if tortoise == hare: break # Phase 2: Finding the entrance to the cycle (duplicate number) tortoise = nums[0] while tortoise != hare: tortoise = nums[tortoise] hare = nums[hare] return hare"},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should take an integer \`n\` as input and return the factorial of \`n\`. Ensure that your function handles cases where \`n\` is less than or equal to 0 by returning an appropriate message or error.","solution":"def factorial_recursive(n): Returns the factorial of a given number n using recursion. Parameters: n (int): The number to get the factorial of. Must be a non-negative integer. Returns: int: The factorial of n if n is a non-negative integer. str: An error message if n is less than 0. if n < 0: return \\"Error: Input must be a non-negative integer.\\" elif n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"Write a function to identify duplicate characters in a string. The function should return a list of all characters that appear more than once in the string. If there are no duplicate characters, the function should return an empty list. The string can contain both uppercase and lowercase letters, and non-alphabetic characters.","solution":"def find_duplicate_characters(s): Returns a list of all characters that appear more than once in the string s. :param s: Input string :return: List of duplicate characters char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find characters that appear more than once duplicates = [char for char, count in char_count.items() if count > 1] return duplicates"},{"question":"Write a function to convert a string to an integer. Specifically, handle cases where the string might contain leading and trailing spaces, as well as possibly containing extra spaces between words. Also, handle the case where the string might contain digits at the end of the numeric part of the string, and ignore those digits. If the string does not contain a valid number, the function should return 0.","solution":"def string_to_integer(s): Converts a string to an integer, handling leading/trailing spaces and ignoring non-integer parts. s = s.strip() n = len(s) if n == 0: return 0 i = 0 sign = 1 if s[0] == '-': sign = -1 i += 1 elif s[0] == '+': i += 1 result = 0 while i < n and s[i].isdigit(): result = result * 10 + int(s[i]) i += 1 return sign * result"},{"question":"Write a function to print all the multiples of a given number up to a specified limit.","solution":"def multiples(n, limit): Print all multiples of n up to the specified limit. result = [] multiple = n while multiple <= limit: result.append(multiple) multiple += n return result"},{"question":"Write a function to find the closest value to a given target in a sorted array of integers. If there are multiple values equally close, return the smallest one.","solution":"def closest_value(nums, target): Returns the closest value to the given target in a sorted array of integers. If there are multiple values equally close, returns the smallest one. if not nums: raise ValueError(\\"The input array must not be empty\\") closest = nums[0] min_diff = float('inf') for num in nums: diff = abs(num - target) if diff < min_diff or (diff == min_diff and num < closest): min_diff = diff closest = num return closest"},{"question":"Write a function to find the third largest number in an array. If the third largest number does not exist, return the largest number in the array. If the array has only one or two numbers, return the largest number as well.","solution":"def third_largest_number(arr): Returns the third largest number in the array. If the third largest number does not exist, returns the largest number. if len(arr) < 3: return max(arr) sorted_arr = sorted(set(arr), reverse=True) return sorted_arr[2] if len(sorted_arr) >= 3 else sorted_arr[0]"},{"question":"Write a function to check if a number is a valid ISBN-10 number. Here, a ISBN-10 number is a 10-digit number where the last digit can be a character 'X' representing the value 10. The ISBN-10 number must satisfy the formula where the sum of the products of each digit and its position (1-indexed) is divisible by 11.","solution":"def is_valid_isbn_10(isbn): Returns True if the given ISBN-10 number is valid, False otherwise. Args: isbn (str): A string representing the ISBN-10 number. Returns: bool: True if the ISBN-10 number is valid, False otherwise. if len(isbn) != 10: return False total = 0 for i in range(10): if isbn[i] == 'X': digit = 10 elif isbn[i].isdigit(): digit = int(isbn[i]) else: return False total += digit * (i + 1) return total % 11 == 0"},{"question":"Write a function to rotate a linked list to the right by k places. Understand that k could be greater than the length of the list, so you need to implement your solution efficiently and consider such cases.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head # Find the length of the linked list length = 1 current = head while current.next: current = current.next length += 1 # Connect the last node to the head to make it a circular linked list current.next = head # Find the place to break the circle k = k % length steps_to_new_head = length - k new_tail = head for i in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"Write a function to calculate the minimum number of cuts required to partition a given string into palindromic substrings. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome. you can cut the string from any index to any other index (including the whole string as one palindrome).","solution":"def min_cut(s): Returns the minimum number of cuts required to partition the string s into palindromic substrings. n = len(s) # Edge case if n < 2: return 0 is_palindrome = [[False] * n for _ in range(n)] dp = [float('inf')] * n for end in range(n): for start in range(end + 1): if s[start] == s[end] and (end - start <= 2 or is_palindrome[start + 1][end - 1]): is_palindrome[start][end] = True for i in range(n): if is_palindrome[0][i]: dp[i] = 0 else: for j in range(i): if is_palindrome[j + 1][i]: dp[i] = min(dp[i], dp[j] + 1) return dp[-1]"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This function, named \`max_subarray_sum\`, should return the maximum sum of any contiguous subarray within the given array. The function should take the array as an input parameter.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the given one-dimensional array of numbers. max_sum = float('-inf') current_sum = 0 for num in nums: current_sum = max(current_sum + num, num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to convert a given Roman numeral to an integer. Please follow the guidelines provided in the created English question and answer.","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: str, Roman numeral :return: int, integer representation of the Roman numeral roman_dict = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_dict[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Write a function to count the occurrences of all unique characters in a given string and return the counts as a dictionary.","solution":"def count_unique_characters(s): Counts the occurrences of all unique characters in the given string and returns the counts as a dictionary. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a function to find the first unique character in a string.","solution":"def first_unique_char(s): Returns the first unique character in the string s. If there is no unique character, return an empty string. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first unique character for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function to find the maximum difference between two numbers in an array using Python. The function should have a time complexity of O(n).","solution":"def max_difference(arr): Returns the maximum difference between any two elements in the array such that the larger element appears after the smaller element. if len(arr) < 2: return 0 # Not enough elements to find a difference. # Initialize variables to store minimum value and maximum difference. min_value = arr[0] max_diff = 0 for i in range(1, len(arr)): # Calculate the potential new maximum difference. potential_diff = arr[i] - min_value if potential_diff > max_diff: max_diff = potential_diff # Update the minimum value. if arr[i] < min_value: min_value = arr[i] return max_diff"},{"question":"Write a function to determine if a given 3x3 matrix is a magic square. A magic square contains distinct numbers from 1 to 9 and has the same sum in all rows, columns, and diagonals. How can we solve this problem in Python?","solution":"def is_magic_square(matrix): Determines if a given 3x3 matrix is a magic square. A magic square contains distinct numbers from 1 to 9 and has the same sum in all rows, columns, and diagonals. :param matrix: list of lists, representing the 3x3 matrix :return: bool, True if the matrix is a magic square, False otherwise # Check if matrix is 3x3 if len(matrix) != 3 or any(len(row) != 3 for row in matrix): return False # Flatten the matrix numbers = [num for row in matrix for num in row] # Check if it contains distinct numbers from 1 to 9 if sorted(numbers) != list(range(1, 10)): return False # Calculate the magic constant (sum of rows, columns, and diagonals) magic_constant = sum(matrix[0]) # Check rows for row in matrix: if sum(row) != magic_constant: return False # Check columns for col in range(3): if sum(matrix[row][col] for row in range(3)) != magic_constant: return False # Check diagonals if (matrix[0][0] + matrix[1][1] + matrix[2][2] != magic_constant or matrix[0][2] + matrix[1][1] + matrix[2][0] != magic_constant): return False return True"},{"question":"Write a function to calculate the total sales revenue from a list of sales records, where each record is represented as a dictionary with keys 'product_id', 'quantity', and 'price_per_unit'. The function should return the total revenue generated by all the sales records.","solution":"def calculate_total_revenue(sales_records): Calculate the total revenue from a list of sales records. Each sales_record is a dictionary with keys 'product_id', 'quantity', and 'price_per_unit'. The function returns the total revenue generated by all the sales records. Parameters: sales_records (list): A list of dictionaries, where each dictionary represents a sales record. Returns: float: The total revenue. total_revenue = 0 for record in sales_records: total_revenue += record['quantity'] * record['price_per_unit'] return total_revenue"},{"question":"Write a function to check if a given number is a prime number or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function with the signature \`def is_prime(num)\`.","solution":"def is_prime(num): Check if a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Parameters: num (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True"},{"question":"Write a function to find the length of the longest subarray of a given array where the difference between the maximum and minimum elements is strictly greater than \`k\`.","solution":"def max_length_subarray(arr, k): Returns the length of the longest subarray where the difference between the maximum and minimum elements is strictly greater than k. :param arr: List[int] - The input array :param k: int - The integer k :return: int - Length of the longest such subarray n = len(arr) if n == 0: return 0 longest = 0 for start in range(n): min_elem = arr[start] max_elem = arr[start] for end in range(start, n): min_elem = min(min_elem, arr[end]) max_elem = max(max_elem, arr[end]) if max_elem - min_elem > k: longest = max(longest, end - start + 1) return longest"},{"question":"Write a function to print integer arrays. The function should iterate through the array and print each element on the console. How can I achieve this in Python?","solution":"def print_integer_array(arr): Prints each element of an integer array on the console, one element per line. for element in arr: print(element)"},{"question":"Write a function to remove all duplicates from a sorted array and return the length of the array after removing duplicates.","solution":"def remove_duplicates(arr): Removes duplicates from sorted array and returns the new length of the array. Parameters: arr (List[int]): A sorted list of integers Returns: int: The length of the array after removing duplicates if not arr: return 0 # If the array is empty, return 0 # Initialize the index of the next unique element unique_index = 1 for i in range(1, len(arr)): if arr[i] != arr[i - 1]: arr[unique_index] = arr[i] unique_index += 1 return unique_index"},{"question":"Write a function to solve the \\"Longest Palindromic Substring\\" problem using dynamic programming. The function should return the longest palindromic substring in the given string, not the length, and the substring should be in O(n^2) time complexity.","solution":"def longest_palindromic_substring(s): n = len(s) if n == 0: return \\"\\" # dp[i][j] will be True if substring s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] start, max_length = 0, 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for a two character palindrome for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for palindromes of length 3 or more for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"Write a function to parse a given string and extract all words from it. A word is defined as a sequence of one or more characters that are consecutive letters from the English alphabet. The function should return a list of all such words found in the string, in the order they appear.","solution":"import re def extract_words(text): Extracts and returns all words from the given string. A word is defined as consecutive letters from the English alphabet. Parameters: text (str): The input string to parse. Returns: list: A list of extracted words. return re.findall(r'[a-zA-Z]+', text)"},{"question":"Write a function to find the maximum and minimum element in an array of integers without using any built-in functions or methods for sorting and finding the max/min. Also, handle the case when the array is empty.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum elements in an array of integers. If the array is empty, returns (None, None). if not arr: return (None, None) max_elem = arr[0] min_elem = arr[0] for num in arr[1:]: if num > max_elem: max_elem = num if num < min_elem: min_elem = num return (max_elem, min_elem)"},{"question":"Write a function to check if a string contains only unique characters. If it does, return True; otherwise, return False. Ignore case sensitivity and spaces.","solution":"def has_unique_chars(s): Returns True if the string 's' contains only unique characters, ignoring case and spaces. Otherwise, returns False. # Remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Use a set to track unique characters seen = set() for char in s: if char in seen: return False seen.add(char) return True"},{"question":"Write a function to find the number of distinct integers in a list that can be formed by prefixing or suffixing a given string with any subset of alphabets. For example, if the string is \\"abc\\", then \\"a\\", \\"ab\\", \\"abc\\", \\"abcde\\", \\"bc\\", \\"b\\", and \\"c\\" are all valid prefixes or suffixes. The function should return the total count of these distinct integers.","solution":"def count_distinct_integers(string): Returns the number of distinct integers that can be formed by any subset of the string. unique_integers = set() # Generate all possible substrings for i in range(len(string)): for j in range(i + 1, len(string) + 1): substring = string[i:j] # Convert the substring to its integer value and add to the set if substring.isdigit(): unique_integers.add(int(substring)) return len(unique_integers)"},{"question":"Write a function to determine if a binary tree is a complete binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_complete_binary_tree(root): if not root: return True queue = deque([root]) reached_end = False while queue: node = queue.popleft() if not node: reached_end = True else: if reached_end: return False queue.append(node.left) queue.append(node.right) return True"},{"question":"Write a function to calculate the sum of the first N elements in a list.","solution":"def sum_first_n_elements(lst, N): Returns the sum of the first N elements in a list. Parameters: lst (list): The list from which to sum the first N elements. N (int): The number of elements to sum. Returns: int/float: The sum of the first N elements. return sum(lst[:N])"},{"question":"Write a function to generate a list of prime numbers up to a given limit. The function should take an integer as input and return a list of all prime numbers less than or equal to the input number. A prime number is a number that is only divisible by 1 and itself.","solution":"def generate_primes(limit): Generate all prime numbers less than or equal to the given limit. Args: limit (int): The upper limit to generate prime numbers up to (inclusive). Returns: List[int]: A list of prime numbers up to the given limit. if limit < 2: return [] prime_flags = [True] * (limit + 1) prime_flags[0] = prime_flags[1] = False for base in range(2, int(limit**0.5) + 1): if prime_flags[base]: for multiple in range(base * base, limit + 1, base): prime_flags[multiple] = False return [num for num, is_prime in enumerate(prime_flags) if is_prime]"},{"question":"Write a function to remove all duplicate characters from a string in Python, preserving the order of the character first appearance while ensuring the result is minimally sized.","solution":"def remove_duplicates(s): Removes all duplicate characters from a string, preserving the order of the character first appearance. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a function to generate all combinations of a multiset where the sum of elements in each combination equals a given target sum.","solution":"def combination_sum_multiset(multiset, target): Generates all combinations of a multiset where the sum of elements in each combination equals a given target sum. :param multiset: List of integers representing the multiset. :param target: Target sum for the combinations. :return: List of lists containing all combinations that sum to the target. result = [] multiset.sort() def backtrack(start, path, target_sum): if target_sum == 0: result.append(path) return for i in range(start, len(multiset)): if i > start and multiset[i] == multiset[i-1]: continue if multiset[i] > target_sum: break backtrack(i + 1, path + [multiset[i]], target_sum - multiset[i]) backtrack(0, [], target) return result"},{"question":"Write a function to compute the nth element of the Fibonacci sequence using recursion without using any conditional statements (i.e., no if, else statements). Can you solve this in Python?","solution":"def fibonacci(n): Compute the nth Fibonacci number using recursion. return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a function to count the number of positive integers in an array.","solution":"def count_positive_integers(arr): Returns the count of positive integers in the array \`arr\`. return sum(1 for x in arr if x > 0)"},{"question":"Write a function to generate all possible paliindrome combinations of a given string. A palindrome is a word, phrase, number, or other sequences of characters which reads the same forward and backward (ignoring spaces, punctuation, and capitalization).","solution":"def is_palindrome(s): Check if a given string is a palindrome. return s == s[::-1] def generate_palindrome_combinations(s): Generate all possible palindrome combinations of a given string. def backtrack(start, path, result): if start == len(s): result.append(path[:]) return for end in range(start + 1, len(s) + 1): substring = s[start:end] if is_palindrome(substring): path.append(substring) backtrack(end, path, result) path.pop() result = [] backtrack(0, [], result) return result"},{"question":"Write a function to find the largest divisible subset of a given set of integers. These integers are sorted in ascending order first and then divided by three. Some numbers remain after the division, and the function has to return the subset of the original numbers that have no remainders upon division by three. Additionally, the function should return the product of all numbers in this subset.","solution":"def largest_divisible_subset(nums): Finds the largest subset of integers from the input list where each integer is divisible by 3 and returns the subset along with the product of its elements. divisible_subset = [num for num in nums if num % 3 == 0] if not divisible_subset: return [], 0 product = 1 for num in divisible_subset: product *= num return divisible_subset, product"},{"question":"Write a function to compute the nth power of a number using recursion. The function should handle both positive and negative exponents.","solution":"def power(base, exponent): Computes the nth power of a number using recursion. Parameters: base (int/float): the base number exponent (int): the exponent number (can be positive or negative) Returns: int/float: result of raising the base to the exponent # Base case for exponent 0 if exponent == 0: return 1 # Handle negative exponent if exponent < 0: return 1 / power(base, -exponent) # Recursively compute power return base * power(base, exponent - 1)"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Then, use this function to calculate the factorial of 5.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) # Calculating the factorial of 5 factorial_of_5 = factorial(5) factorial_of_5"},{"question":"Write a function to find the maximum subarray sum in an integer array. The function should return the maximum sum of a contiguous subarray within the input array. If the input array is empty, the function should return 0. The function should handle both positive and negative numbers. You can use Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within the given array. Returns the maximum sum. If the array is empty, returns 0. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to reverse each word in a sentence without reversing the order of the words in the sentence.","solution":"def reverse_each_word(sentence): Reverses each word in the given sentence without changing the order of the words. Parameters: - sentence (str): The input sentence containing words to be reversed. Returns: - str: A new sentence with each word reversed but in the original order. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a function to calculate the factorial of a number using recursion. The function should be recursive and should handle to a maximum value of 20 to prevent integer overflow.","solution":"def factorial(n): Returns the factorial of a number using recursion. Handles values up to and including 20. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n > 20: raise ValueError(\\"Input exceeds the maximum allowed value of 20\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to rotate a 2D matrix clockwise by 90 degrees. The function should take a 2D list of integers as an input and return the rotated matrix as a new 2D list.","solution":"def rotate_matrix_90_degrees(matrix): Rotates a 2D matrix clockwise by 90 degrees. Parameters: matrix (list of list of int): The 2D matrix to rotate. Returns: list of list of int: The rotated 2D matrix. return list(map(list, zip(*matrix[::-1])))"},{"question":"Write a function to swap the elements at index \`i\` and \`j\` in a list.","solution":"def swap_elements(lst, i, j): Swaps the elements at indices i and j in the list lst. If i or j are out of bounds, the function does nothing. if not (0 <= i < len(lst) and 0 <= j < len(lst)): return lst # If indices are out of bounds, return the list as is lst[i], lst[j] = lst[j], lst[i] return lst"},{"question":"Write a function to calculate the total number of unique permutations of a given string, considering both lowercase and uppercase letters as distinct. If the string contains duplicate characters, some permutations will be identical. The function should return the total number of unique permutations. For example, for the string \\"abc\\", there are 6 unique permutations: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". If the string contains duplicates, such as \\"aabb\\", it should consider the duplicates, but still count each unique permutation only once.","solution":"from math import factorial from collections import Counter def unique_permutations(s): Returns the total number of unique permutations of the string \`s\`, considering both lowercase and uppercase letters as distinct and accounting for duplicate characters. count = Counter(s) denominator = 1 for v in count.values(): denominator *= factorial(v) return factorial(len(s)) // denominator"},{"question":"Write a function to convert a string to a palindrome by appending the minimum number of characters to the end. To achieve this, the function should find the longest palindromic suffix of the input string and append the reverse of the prefix before the suffix to the end of the string. For example, appending \\"ba\\" to \\"race\\" results in \\"racecar\\".","solution":"def add_min_chars_to_make_palindrome(s): Converts a string to a palindrome by appending the minimum number of characters to the end. Parameters: s (str): input string Returns: str: palindromic string created from input n = len(s) if n == 0: return s # Find the length of the longest palindromic suffix for i in range(n): if s[:n-i] == s[:n-i][::-1]: return s + s[:i][::-1]"},{"question":"Write a function to solve the following problem: Calculate the costs of tickets for movie theaters in a multi-screen cinema.","solution":"def calculate_ticket_cost(ticket_type, num_tickets): Calculate the total cost of movie tickets based on the ticket type and number of tickets. Args: ticket_type (str): The type of ticket. Should be one of 'adult', 'child', 'senior'. num_tickets (int): The number of tickets to be purchased. Returns: float: The total cost of the tickets. prices = { 'adult': 12.0, 'child': 8.0, 'senior': 10.0 } if ticket_type not in prices: raise ValueError(\\"Invalid ticket type supplied.\\") if num_tickets < 0: raise ValueError(\\"Number of tickets cannot be negative.\\") return prices[ticket_type] * num_tickets"},{"question":"Write a function to solve the 0/1 Knapsack problem. The problem can be stated as follows: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. Assume that each item can be taken only once.","solution":"def knapsack(weights, values, capacity): Solves the 0/1 knapsack problem. Parameters: weights: List of weights of the items. values: List of values of the items. capacity: Maximum weight that the knapsack can carry. Returns: The maximum value that can be achieved within the given capacity. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a function to create an HTML table from a given list of dictionaries, where each dictionary represents a row in the table. The keys of the dictionary become the headers of the table. Each value in the dictionary should be a cell in the corresponding row.","solution":"def create_html_table(data): Creates an HTML table from a list of dictionaries. Args: data (list of dict): List where each dictionary represents a row in the table. Returns: str: HTML table as a string. if not data: return \\"<table></table>\\" # Extract headers assuming all dictionaries have the same structure headers = data[0].keys() # Create the opening table tag html = \\"<table>n\\" # Create the header row html += \\" <tr>n\\" for header in headers: html += f\\" <th>{header}</th>n\\" html += \\" </tr>n\\" # Create the table rows for row in data: html += \\" <tr>n\\" for header in headers: html += f\\" <td>{row[header]}</td>n\\" html += \\" </tr>n\\" # Create the closing table tag html += \\"</table>\\" return html"},{"question":"Write a function to reverse a linked list without using recursion. Please provide the code and an explanation of the steps used.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list without using recursion. :param head: The head node of the linked list :return: The new head node of the reversed linked list prev = None current = head while current: next_node = current.next # Save the next node current.next = prev # Reverse the current node's pointer prev = current # Move the prev pointer to current node current = next_node # Move to the next node return prev"},{"question":"Write a function to find the highest product of three numbers in an array. The array can contain both positive and negative numbers.","solution":"def highest_product_of_three(nums): Returns the highest product of any three numbers in the list. if len(nums) < 3: raise ValueError(\\"Less than three integers in the input list\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function to check if a given string can be transformed into a palindrome by removing at most one character from it.","solution":"def valid_palindrome(s): Check if a given string can be transformed into a palindrome by removing at most one character from it. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Write a function to determine the number of possible combinations of two teams of players for a game, given the total number of players. The function should return the result modulo a prime number to handle large numbers efficiently.","solution":"def combinations_of_teams(total_players, prime=1000000007): Returns the number of possible combinations of two teams from total players, with the result modulo a prime number. total_players: int : Total number of players available prime: int : A prime number for modulo operation (default is 1000000007) if total_players < 2: return 0 def factorial(n): if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result = (result * i) % prime return result fact_total = factorial(total_players) fact_two = factorial(2) fact_total_minus_two = factorial(total_players - 2) # Calculate nC2 = total_players! / (2! * (total_players-2)!) combin_count = (fact_total * pow(fact_two, prime - 2, prime) % prime) * pow(fact_total_minus_two, prime - 2, prime) % prime return combin_count"},{"question":"Write a function to check if a given integer is a palindrome without using extra space. The function should have a time complexity of O(n).","solution":"def is_palindrome(num): Checks if the given integer is a palindrome without using extra space. if num < 0: return False original = num reversed_num = 0 while num > 0: digit = num % 10 reversed_num = reversed_num * 10 + digit num //= 10 return original == reversed_num"},{"question":"Write a function to reverse a string without using the built-in reverse function or slicing. Reverse the string using a stack data structure.","solution":"def reverse_string(s): Reverses the input string using a stack data structure. stack = [] # Push all characters of string into the stack for char in s: stack.append(char) # Pop all characters from the stack and append to the result reversed_str = '' while stack: reversed_str += stack.pop() return reversed_str"},{"question":"Write a function to print all even numbers within a given range. The function should take two parameters, \`start\` and \`end\`, and print all even numbers between \`start\` and \`end\` (inclusive) in ascending order.","solution":"def print_even_numbers(start, end): Prints all even numbers between start and end (inclusive). even_numbers = [] for number in range(start, end + 1): if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Write a function to determine if a number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. This function should be efficient and work for large numbers.","solution":"def is_prime(n): Determines if a number n is prime. :param n: An integer number to check for primality. :return: True if n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function to calculate the mean and standard deviation of a set of numbers.","solution":"import math def calculate_mean_and_std(numbers): Returns the mean and standard deviation of a list of numbers. Args: - numbers (list of floats): the list of numbers to analyze. Returns: - (tuple): mean and standard deviation of the list of numbers. if not numbers: return (0, 0) n = len(numbers) mean = sum(numbers) / n variance = sum((x - mean) ** 2 for x in numbers) / n std_dev = math.sqrt(variance) return (mean, std_dev)"},{"question":"Write a function to return the minimum value in a binary search tree (BST). What are the steps to solve this problem?","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_minimum_in_bst(root): Returns the minimum value in a binary search tree. if root is None: return None # Or raise an exception if appropriate current_node = root while current_node.left is not None: # Go to the leftmost node current_node = current_node.left return current_node.val"},{"question":"Write a function to split a string by a given separator and return the resulting list of substrings. However, the function should not include any empty strings in the output list.","solution":"def split_string(s, separator): Splits the string s by the given separator and returns a list of non-empty substrings. Parameters: s (str): The input string to be split. separator (str): The separator by which to split the string. Returns: list: A list of non-empty substrings. return [substring for substring in s.split(separator) if substring]"},{"question":"Write a function to return only the provided \`number\` of words from the end of a string, trunicating the beginning of the string in process, and ensuring that the resulting string ends with a space. The words are separated by spaces, and no whitespace characters other than spaces are used to separate words. The function should handle word sizes and total lengths of up to 1025, and the number range is from 1 to the total number of words in the string. When \`number\` is not a positive whole number, it should return an empty string.","solution":"def get_last_words(text, number): Return the specified number of words from the end of the input string. Each word is separated by a single space. The resulting string should end with a space. Parameters: text (str): The input string containing words separated by spaces number (int): The number of words to return from the end of the string Returns: str: The resulting string containing the specified number of words from the end, ending with a space if not isinstance(number, int) or number < 1: return '' words = text.split() if len(words) == 0: return '' return ' '.join(words[-number:]) + ' ' if words else ''"},{"question":"Write a function to sort an array of numbers using the Quick Sort algorithm.","solution":"def quick_sort(arr): Sorts an array of numbers using the Quick Sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a function to write a text file in Python. The function should take two parameters: \`filename\` and \`content\`. The function should write the \`content\` to the \`filename\` and return \`True\` if the file is successfully written, or \`False\` otherwise. Additionally, handle any potential file handling exceptions that might occur during the write operation.","solution":"def write_to_file(filename, content): Writes content to a file with the given filename. Parameters: filename (str): The name of the file to write to. content (str): The content to write into the file. Returns: bool: True if the file is successfully written, False otherwise. try: with open(filename, 'w') as file: file.write(content) return True except IOError: return False"},{"question":"Write a function to filter records from a dataset based on a specific column value. The function should take a DataFrame and a dictionary as inputs. The dictionary contains column names as keys and values as the target filter values. The function should return a filtered DataFrame containing only the rows where the column value matches the target value.","solution":"import pandas as pd def filter_records(df, filter_dict): Filters records in the DataFrame based on the filter dictionary. Parameters: - df (pd.DataFrame): The input DataFrame. - filter_dict (dict): A dictionary with column names as keys and filter values as values. Returns: - pd.DataFrame: A DataFrame with records that match the filter criteria. for key, value in filter_dict.items(): df = df[df[key] == value] return df"},{"question":"Write a function to calculate the sum of all elements in a 2D list using recursion in Python.","solution":"def sum_2d_list(arr): Returns the sum of all elements in a 2D list using recursion. def sum_list(lst): if not lst: return 0 elif isinstance(lst[0], list): return sum_list(lst[0]) + sum_list(lst[1:]) else: return lst[0] + sum_list(lst[1:]) return sum_list(arr)"},{"question":"Write a function to generate the nth Fibonacci number. The Fibonacci sequence is defined as follows: the first number in the sequence is 0, the second number is 1, and each subsequent number is the sum of the previous two. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, and 5. Write a function named \`fibonacci\` that takes an integer \`n\` and returns the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): the position in the Fibonacci sequence (0-indexed). Returns: int: the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to read a file in binary mode and convert its contents to hexadecimal format. The function should take the file path as a parameter and return a string containing the hexadecimal representation of the file contents. If the file cannot be opened, the function should return an error message. Additionally, the function should handle large files efficiently, using streaming techniques if necessary.","solution":"def file_to_hex(filepath): Reads a file in binary mode and converts its contents to hexadecimal format. Args: filepath (str): The path to the file Returns: str: A string containing the hexadecimal representation of the file contents, or an error message if the file cannot be opened. try: with open(filepath, 'rb') as file: hex_str = \\"\\" while chunk := file.read(4096): hex_str += chunk.hex() return hex_str except IOError: return \\"Error: Cannot open file\\""},{"question":"Write a function to create a binary tree in Python, and a function to check if two binary trees are identical or not. The comparison should be done according to their structure and the values of the nodes.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def is_identical(tree1, tree2): Check if two binary trees are identical. if not tree1 and not tree2: return True if not tree1 or not tree2: return False return (tree1.value == tree2.value and is_identical(tree1.left, tree2.left) and is_identical(tree1.right, tree2.right))"},{"question":"Write a function to reverse a given number and return the reversed number. The function should handle both positive and negative numbers.","solution":"def reverse_number(n): Reverses a given integer number. Parameters: n (int): The integer to be reversed. Returns: int: The reversed integer. # Convert number to string, handle negative sign separately if n < 0: reversed_str = '-' + str(n)[:0:-1] else: reversed_str = str(n)[::-1] # Convert reversed string back to integer return int(reversed_str)"},{"question":"Write a function to calculate the cumulative sum of a list of numbers.","solution":"def cumulative_sum(numbers): Returns the cumulative sum of a list of numbers. Parameters: numbers (list): A list of numbers. Returns: list: A list containing the cumulative sum. cumsum = [] total = 0 for number in numbers: total += number cumsum.append(total) return cumsum"},{"question":"Write a function to find the \\"k-th\\" smallest element in an array. The code needs to be in Python.","solution":"import heapq def kth_smallest(arr, k): Returns the k-th smallest element in the array. :param arr: List of numbers :param k: The rank of the smallest element to find :return: The k-th smallest element if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds of the array length\\") return heapq.nsmallest(k, arr)[-1]"},{"question":"Write a function to convert a given decimal number to its corresponding binary representation as a string.","solution":"def decimal_to_binary(n): Converts a given decimal number to its corresponding binary representation as a string. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a function to find the largest prime number within a given range. The range will be provided as two integers, \`start\` and \`end\`. The function should return the largest prime number within this range, including both endpoints. If there are no prime numbers in the range, the function should return \`None\`.","solution":"import math def is_prime(n): Utility function to check if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_in_range(start, end): Returns the largest prime number within the given range. If no prime number is found, returns None. largest_prime = None for num in range(end, start - 1, -1): if is_prime(num): largest_prime = num break return largest_prime"},{"question":"Write a function to parse and print all the values in a nested dictionary using recursion.","solution":"def parse_and_print_nested_dict(d): Recursively parses and prints all values in a nested dictionary. :param d: Dictionary to parse def recurse(dictionary): for key, value in dictionary.items(): if isinstance(value, dict): recurse(value) else: print(value) recurse(d)"},{"question":"Write a function to convert a given string into its binary representation.","solution":"def string_to_binary(s): Converts a given string into its binary representation. Parameters: s (str): Input string. Returns: str: Binary representation of the input string. return ' '.join(format(ord(char), '08b') for char in s)"},{"question":"Write a function to identify the most frequently occurring element in a list. If there are multiple elements with the same highest frequency, return all of them in a list. The function should handle empty lists gracefully and return an empty list in that case.","solution":"from collections import Counter def most_frequent_elements(lst): Returns a list of the most frequently occurring elements in the input list. If the input list is empty, returns an empty list. If there are multiple elements with the same highest frequency, returns all of them. if not lst: return [] counter = Counter(lst) max_frequency = max(counter.values()) result = [element for element, frequency in counter.items() if frequency == max_frequency] return result"},{"question":"Write a function to reverse a string in Python by iteratively swapping characters.","solution":"def reverse_string(s): Returns the reverse of the input string s by iteratively swapping characters. s_list = list(s) start, end = 0, len(s_list) - 1 while start < end: s_list[start], s_list[end] = s_list[end], s_list[start] start += 1 end -= 1 return ''.join(s_list)"},{"question":"Write a function to return the sum of numbers from 1 to a given number n, but only include numbers that are multiples of either 3 or 5. If the number n is less than 1, the function should return 0.","solution":"def sum_of_multiples(n): Returns the sum of numbers from 1 to n that are multiples of either 3 or 5. If n is less than 1, returns 0. if n < 1: return 0 return sum(i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0)"},{"question":"Write a function to iterate through a list of strings, find the longest palindromic substring in each string, and return a list of these substrings.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindrome substr1 = expand_around_center(s, i, i) if len(substr1) > len(longest): longest = substr1 # Even length palindrome substr2 = expand_around_center(s, i, i + 1) if len(substr2) > len(longest): longest = substr2 return longest def longest_palindromic_substrings(strings): Returns a list of the longest palindromic substrings from each input string. return [longest_palindromic_substring(s) for s in strings]"},{"question":"Write a function to calculate the sum of all even numbers between two given numbers, including the numbers themselves.","solution":"def sum_even_numbers(start, end): Returns the sum of all even numbers between start and end (inclusive). if start > end: start, end = end, start # Start with the smallest even number greater than or equal to 'start' if start % 2 != 0: start += 1 # End with the largest even number less than or equal to 'end' if end % 2 != 0: end -= 1 # Sum of even numbers in arithmetic progression: # n = number of terms n = ((end - start) // 2) + 1 # Using the formula for the sum of an arithmetic series S = n/2 * (a + l) return n * (start + end) // 2"},{"question":"Write a function to calculate the result of a given prefix expression using a stack.","solution":"def evaluate_prefix(expression): Evaluates a given prefix expression using a stack. :param expression: A string containing a prefix expression :return: The result of the evaluation. # Split the expression into tokens tokens = expression.split() # Stack to hold the operands stack = [] # Reverse iterate the tokens for token in reversed(tokens): if token.isdigit() or (token[0] == '-' and token[1:].isdigit()): # Token is an operand stack.append(int(token)) else: # Token is an operator operand1 = stack.pop() operand2 = stack.pop() if token == '+': result = operand1 + operand2 elif token == '-': result = operand1 - operand2 elif token == '*': result = operand1 * operand2 elif token == '/': result = operand1 / operand2 stack.append(result) # The result will be the only value left in the stack return stack[0]"},{"question":"Write a function to parse a JSON string and return a dictionary.","solution":"import json def parse_json(json_string): Parses a JSON string and returns a dictionary. Args: - json_string (str): The JSON string to parse. Returns: - dict: The parsed JSON as a dictionary. return json.loads(json_string)"},{"question":"Write a function to convert a given number of days to years, months, and days. The function should take an integer representing the number of days as input and return a tuple containing the number of years, months, and remaining days.","solution":"def days_to_years_months_days(days): Converts a given number of days into years, months, and remaining days. Parameters: days (int): The number of days to convert Returns: tuple: A tuple containing (years, months, remaining_days) years = days // 365 remaining_days = days % 365 months = remaining_days // 30 remaining_days = remaining_days % 30 return years, months, remaining_days"},{"question":"Write a function to calculate the number of distinct permutations of a string.","solution":"from collections import Counter from math import factorial def distinct_permutations_count(s): Returns the number of distinct permutations of the string s. if not s: return 1 counts = Counter(s) numerator = factorial(len(s)) denominator = 1 for count in counts.values(): denominator *= factorial(count) return numerator // denominator"},{"question":"Write a function to calculate the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, ... Your solution should efficiently handle larger values of \`n\` by using dynamic programming.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the given number \`n\`. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Write a function to reverse a string in Python. How would you implement it and what is the time complexity of the function?","solution":"def reverse_string(s): Reverses the given string. Parameters: s (str): The string to be reversed Returns: str: The reversed string return s[::-1] # Time complexity: O(n), where n is the length of the string"},{"question":"Write a function to implement a REVERSE Polish Notation expression evaluator that solves a mathematical expression.","solution":"def eval_rpn(tokens): Evaluates the value of an arithmetic expression in Reverse Polish Notation (RPN). :param tokens: List of tokens in RPN where each token is either an integer or an operator (+, -, *, /). :return: The evaluation result of the expression. stack = [] for token in tokens: if token in ('+', '-', '*', '/'): b = stack.pop() a = stack.pop() if token == '+': result = a + b elif token == '-': result = a - b elif token == '*': result = a * b elif token == '/': result = int(a / b) # int() to truncate towards zero stack.append(result) else: stack.append(int(token)) return stack[0]"},{"question":"Write a function to check if a given integer is a palindrome (reads the same backward as forward) without converting it to a string. You need to ensure your solution has a time complexity of O(log10(n)) and a space complexity of O(1).","solution":"def is_palindrome(x): Checks if a given integer is a palindrome without converting it to a string. if x < 0: return False if x == 0: return True original = x reversed_num = 0 while x > 0: reversed_num = reversed_num * 10 + x % 10 x = x // 10 return original == reversed_num"},{"question":"Write a function to remove duplicates from an array of integers and return the new array with unique elements preserving the original order.","solution":"def remove_duplicates(arr): Removes duplicates from an array of integers preserving the original order. Arguments: arr -- a list of integers Returns: A new list with unique elements in the order they first appeared in the input list. seen = set() unique_arr = [] for num in arr: if num not in seen: unique_arr.append(num) seen.add(num) return unique_arr"},{"question":"Write a function to find the sum of all integers from 1 to n, but only for multiples of 3 or 5. The function should efficiently use mathematical formulas and/or structures to calculate the sum.","solution":"def sum_multiples_of_3_or_5(n): Returns the sum of all integers from 1 to n that are multiples of 3 or 5. def sum_of_multiples(x): p = n // x return x * (p * (p + 1)) // 2 return sum_of_multiples(3) + sum_of_multiples(5) - sum_of_multiples(15)"},{"question":"Write a function to count the total occurrences of a target value in a flattened two-dimensional array.","solution":"def count_occurrences(array, target): Count the total number of occurrences of the target value in a flattened two-dimensional array. Parameters: array (list of lists): 2D array to be searched target: The value to count occurrences of Returns: int: Number of times the target appears in the array count = 0 for row in array: count += row.count(target) return count"},{"question":"Write a function to calculate the nth Fibonacci number using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function to multiply two integers without using the '+' or '-' operators.","solution":"def multiply(a, b): Returns the product of a and b without using the '+' or '-' operators. result = 0 positive = True if b < 0: b = -b positive = not positive if a < 0: a = -a positive = not positive for _ in range(b): result += a return result if positive else -result"},{"question":"Write a function to convert a string into a list of words, and then convert that list into a string again, but this time with each word capitalized. Finally, return the resulting string.","solution":"def capitalize_words(s): Converts a string into a list of words, then capitalizes each word and returns the string with capitalized words. Parameters: s (str): Input string Returns: str: String with each word capitalized words = s.split() capitalized_words = [word.capitalize() for word in words] result = ' '.join(capitalized_words) return result"},{"question":"Write a function to calculate the factorial of a given number using both iterative and recursive methods. Compare and explain the differences between the two methods in terms of performance, readability, and use cases.","solution":"def factorial_iterative(n): Calculates the factorial of a given number iteratively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Calculates the factorial of a given number recursively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) # Explanation of differences: # 1. Performance: # - Iterative method typically has better performance in terms of speed and memory, # as it uses a simple loop without the overhead of function calls and stack usage. # - Recursive method, especially with large 'n', can lead to stack overflow due to deep # recursion and thus can be slower. # 2. Readability: # - Recursive method can be more readable and reflects the mathematical definition of factorial. # - Iterative method may be straightforward but can be less intuitive compared to recursion. # 3. Use cases: # - Iterative method is preferred when performance and avoiding stack overflow are concerns. # - Recursive method can be used for educational purposes, clear representation of factorial computation, # and in scenarios where recursion fits the problem very well."},{"question":"Write a function to find the nth number that is both a perfect square and a perfect cube. These numbers are known as perfect sixth powers since they are both squares (n^2) and cubes (n^3). For example, the first such number is 1 (1^6), the second is 64 (4^3 = 8^2), and so forth.","solution":"def nth_perfect_sixth_power(n): Returns the nth number that is both a perfect square and a perfect cube (perfect sixth powers). # The first n perfect sixth powers are the perfect squares of 1, 2, 3, ... return (n ** 6)"},{"question":"Write a function to check if a given list contains a specific element. If the element is not found, add it to the list. Identify the function and provide the code in Python.","solution":"def add_if_not_present(lst, element): Check if the element is in the list. If not, add it to the list. Args: lst (list): The list to check. element: The element to check for. Returns: list: Updated list with the element added if it was not present. if element not in lst: lst.append(element) return lst"},{"question":"Write a function to detect the first occurrence of a duplicate in an array of integers where each integer is between 1 and n (inclusive), and the array has a length of n + 1. Assume there is only one duplicate in the array.","solution":"def find_duplicate(nums): This function finds the first occurrence of a duplicate number in a list. The list 'nums' is expected to have a length of n + 1, where each integer is between 1 and n (inclusive). tortoise = nums[0] hare = nums[0] # Phase 1: Finding the intersection point of the cycle while True: tortoise = nums[tortoise] hare = nums[nums[hare]] if tortoise == hare: break # Phase 2: Finding the entrance to the cycle tortoise = nums[0] while tortoise != hare: tortoise = nums[tortoise] hare = nums[hare] return hare"},{"question":"Write a function to find the maximum sum of three distinct numbers in an array. If the array has fewer than three elements, return -1.","solution":"def max_sum_of_three(nums): Returns the maximum sum of three distinct numbers in an array. If the array has fewer than three elements, returns -1. if len(nums) < 3: return -1 nums = sorted(nums, reverse=True) return nums[0] + nums[1] + nums[2]"},{"question":"Write a function to find the shortest paths from a given source node to all other nodes in a weighted graph using Dijkstra's algorithm. The graph is represented by an adjacency list where each node points to a list of tuples representing the neighboring nodes and the corresponding edge weights.","solution":"from heapq import heappop, heappush import sys def dijkstra(graph, start): Finds the shortest paths from the start node to all other nodes in a weighted graph using Dijkstra's algorithm. Parameters: graph (dict): A dictionary where keys are nodes and values are lists of tuples (neighbor, weight). start: The start node. Returns: dict: A dictionary where keys are nodes and values are the shortest path distances from the start node. # Initialize the priority queue pq = [(0, start)] # Initialize distances with infinity distances = {node: sys.maxsize for node in graph} distances[start] = 0 # To keep track of visited nodes visited = set() while pq: current_distance, current_node = heappop(pq) # Skip the node if it is already visited if current_node in visited: continue # Mark the node as visited visited.add(current_node) # Check neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it's better if distance < distances[neighbor]: distances[neighbor] = distance heappush(pq, (distance, neighbor)) return distances"},{"question":"Write a function to count the number of nodes in a binary tree. I would also like to see the code in multiple programming languages if possible.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Returns the number of nodes in a binary tree. if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a function to swap two numbers without using temporary variables. How can you achieve this in different programming languages?","solution":"def swap(a, b): Swaps two numbers without using temporary variables. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a function to check if a given string is a valid palindrome. A valid palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example, \\"A man, a plan, a canal, Panama\\" is a valid palindrome.","solution":"import re def is_palindrome(s): Checks whether the given string s is a valid palindrome. A valid palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a function to find the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n. The array is supposed to contain every number from 0 to n exactly once, except for one number which is missing. Your function should run in linear time and without using extra space.","solution":"def find_missing_number(nums): Finds the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n. n = len(nums) expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Write a function to calculate the sum of all unique elements in an array without using an additional data structure (like a set or hash map).","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the array. sum_unique = 0 # Initialize the sum of unique elements for i in range(len(arr)): is_unique = True # Assume the element is unique for j in range(len(arr)): if i != j and arr[i] == arr[j]: # Check if there is any duplicate is_unique = False break if is_unique: sum_unique += arr[i] # Add the unique element to the sum return sum_unique"},{"question":"Write a function to differentiate between numeric and alphabetic characters in a given string.","solution":"def differentiate_characters(s): Differentiates between numeric and alphabetic characters in a given string. :param s: The input string to differentiate characters in. :return: A dictionary with keys 'numeric' and 'alphabetic' containing lists of numeric and alphabetic characters respectively. result = {'numeric': [], 'alphabetic': []} for char in s: if char.isdigit(): result['numeric'].append(char) elif char.isalpha(): result['alphabetic'].append(char) return result"},{"question":"Write a function to print all permutations of an array using backtracking. What is backtracking, and how does it work in this context?","solution":"def permute(nums): Generates all permutations of the input list nums. :param nums: List of integers to permute :rtype: List[List[int]] def backtrack(start): if start == len(nums) - 1: result.append(nums[:]) return for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start] # Swap backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] # Swap back result = [] backtrack(0) return result"},{"question":"Write a function to determine if a list of numbers is strictly sorted either in ascending or descending order. A number is considered strictly sorted if each element is either strictly greater than or strictly less than its predecessor.","solution":"def is_strictly_sorted(lst): Returns True if the list lst is strictly sorted in either ascending or descending order, otherwise returns False. if len(lst) < 2: return True ascending = all(lst[i] > lst[i-1] for i in range(1, len(lst))) descending = all(lst[i] < lst[i-1] for i in range(1, len(lst))) return ascending or descending"},{"question":"Write a function to solve the leetcode problem 2. Add Two Numbers.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Add two numbers represented by two linked lists and return the sum as a linked list. # Initialize a dummy node to serve as the start of the result linked list dummy_node = ListNode(0) current = dummy_node carry = 0 # Iterate while either list has nodes left, or there is a carry left to process while l1 or l2 or carry: # Retrieve the values from the current nodes of both lists, defaulting to 0 if node is missing val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) # Calculate the sum and the new carry carry, out = divmod(val1 + val2 + carry, 10) # Create a new node with the calculated digit and attach it to the result list current.next = ListNode(out) current = current.next # Move to the next nodes in both input lists, if possible l1 = (l1.next if l1 else None) l2 = (l2.next if l2 else None) # Return the next node after dummy as the head of the result linked list return dummy_node.next"},{"question":"Write a function to clone a linked list with random pointers. Each node in the linked list has a value, a pointer to the next node, and a pointer to a random node that may or may not point to another node within the list.","solution":"class Node: def __init__(self, val, next=None, random=None): self.val = val self.next = next self.random = random def clone_linked_list_with_random_pointers(head): if not head: return None # Creating a mapping from original nodes to their clones mapping = {} # Step 1: Create clone nodes and place them in the mapping current = head while current: clone = Node(current.val) mapping[current] = clone current = current.next # Step 2: Assign next and random pointers using the mapping current = head while current: clone = mapping[current] clone.next = mapping.get(current.next) clone.random = mapping.get(current.random) current = current.next # Return the head of the cloned list return mapping[head]"},{"question":"Write a function to determine the first and last occurrence of a given integer x in a sorted array of integers. If x is not found, return (-1, -1). The function should be named \`find_first_last_occurrence\` and should take three parameters: a sorted array \`arr\`, the length of the array \`n\`, and the integer \`x\`. The function should return a tuple with two values, representing the first and last occurrence of x in the array.","solution":"def find_first_last_occurrence(arr, n, x): Returns the first and last occurrence of x in the sorted array arr. If x is not found, returns (-1, -1). def find_first(arr, n, x): low, high = 0, n - 1 first_occurrence = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: first_occurrence = mid high = mid - 1 elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return first_occurrence def find_last(arr, n, x): low, high = 0, n - 1 last_occurrence = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: last_occurrence = mid low = mid + 1 elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return last_occurrence first = find_first(arr, n, x) last = find_last(arr, n, x) return (first, last)"},{"question":"Write a function to convert a string to an integer without using the built-in \`int()\` function. You should handle both positive and negative numbers, and ignore leading white spaces. If no valid conversion could be performed, return 0.","solution":"def string_to_integer(s): Converts a string to an integer without using the built-in int() function. Handles leading white spaces, optional sign, and returns 0 if no valid conversion can be performed. # Step 1: Removing leading whitespaces s = s.lstrip() # Step 2: Check for empty string if not s: return 0 # Step 3: Checking the sign sign = 1 start = 0 if s[0] == '-': sign = -1 start = 1 elif s[0] == '+': start = 1 # Step 4: Convert the number result = 0 for i in range(start, len(s)): if not s[i].isdigit(): break result = result * 10 + (ord(s[i]) - ord('0')) return sign * result"},{"question":"Write a function to compute the sum of two numbers. The function should return the sum as an integer. The function should also be able to handle floating-point numbers and return the sum with the same precision.","solution":"def sum_numbers(a, b): Returns the sum of a and b. Handles both integer and floating-point numbers. return a + b"},{"question":"Write a function to find the median of a given list of numbers. The list may contain an odd or even number of elements. Ensure that your function is efficient and handles both scenarios correctly.","solution":"def find_median(nums): Returns the median of a given list of numbers. nums.sort() n = len(nums) if n % 2 == 0: # If even, the median is the average of the two middle numbers mid1, mid2 = n//2 - 1, n//2 return (nums[mid1] + nums[mid2]) / 2 else: # If odd, the median is the middle number return nums[n//2]"},{"question":"Write a function to calculate the sum of all numbers in a given list. You should handle possible exceptions like non-numeric values and return an appropriate error message.","solution":"def sum_of_list(numbers): Returns the sum of all numeric values in the list. If the list contains non-numeric values, it returns an error message. try: return sum(numbers) except TypeError: return \\"Error: The list contains non-numeric values.\\""},{"question":"Write a function to assemble three given strings into one sentence, where the strings represent the beginning, middle, and end of the sentence respectively.","solution":"def assemble_sentence(beginning, middle, end): Assembles three given strings into one sentence. Parameters: beginning (str): The beginning part of the sentence. middle (str): The middle part of the sentence. end (str): The end part of the sentence. Returns: str: The complete sentence. return f\\"{beginning} {middle} {end}\\""},{"question":"Write a function to calculate the sum of all numbers in an array without using the built-in \`sum\` function.","solution":"def array_sum(numbers): Calculates the sum of all numbers in an array without using the built-in sum function. Parameters: numbers (list): A list of numbers. Returns: int: The sum of all numbers in the list. total = 0 for number in numbers: total += number return total"},{"question":"Write a function to determine if a function f(x) is an Even Function or an Odd Function. An Even Function has the property f(-x) = f(x) for all x, while an Odd Function has the property f(-x) = -f(x) for all x. Your function should take another function as an argument and return whether the function is Even, Odd, or neither.","solution":"def check_function_type(func): Determine if the given function is Even, Odd, or Neither. Parameters: func (function): The function to check. Returns: str: \\"Even\\" if the function is even, \\"Odd\\" if the function is odd, \\"Neither\\" otherwise. from sympy import symbols x = symbols('x') f_x = func(x) f_neg_x = func(-x) if f_x == f_neg_x: return \\"Even\\" elif f_x == -f_neg_x: return \\"Odd\\" else: return \\"Neither\\""},{"question":"Write a function to identify all unique triples in an array that sum up to zero. The function should return a list of these triples.","solution":"def three_sum(nums): Returns all unique triples in the array that sum up to zero. nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # skip the same result left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: res.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return res"},{"question":"Write a function to print the elements of a linked list in reverse order using recursion.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def print_reverse(head): Recursively prints the elements of a linked list in reverse order. if head is None: return print_reverse(head.next) print(head.data) # Example usage: # head = Node(1) # head.next = Node(2) # head.next.next = Node(3) # print_reverse(head)"},{"question":"Write a function to reverse the order of elements in a linked list using a iterative approach. The function should take the head of the linked list as input and return the head of the reversed linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the order of elements in a linked list using an iterative approach. Args: head (ListNode): The head of the linked list. Returns: ListNode: The head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a function to sort a list of dictionaries based on a given key. The function should handle cases where the key might not exist in all dictionaries in the list and sort those cases where the key exists, placing non-existing cases at the end of the list.","solution":"def sort_dicts_by_key(lst, key): Sorts a list of dictionaries by a given key. Dictionaries without the key are placed at the end of the list. Parameters: lst (list): List of dictionaries to sort. key (str): The key to sort the dictionaries by. Returns: list: Sorted list of dictionaries. # Split the list into those with the key and those without the key with_key = [d for d in lst if key in d] without_key = [d for d in lst if key not in d] # Sort the list with the key with_key_sorted = sorted(with_key, key=lambda x: x[key]) # Combine sorted dictionaries with the key and those without return with_key_sorted + without_key"},{"question":"Write a function to construct a binary tree from a string in the form of \\" preorder-traversal\\". The string will contain node values and identifiers ('#' indicates the end of a node's children). Identify and reconstruct the binary tree such that it faithfully represents the structure as described.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree_from_preorder(preorder): Reconstructs a binary tree from a preorder traversal string. def helper(values): value = next(values) if value == '#': return None node = TreeNode(int(value)) node.left = helper(values) node.right = helper(values) return node values = iter(preorder.split()) return helper(values)"},{"question":"Write a function to calculate and return the first 10 Fibonacci numbers in a list. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_sequence(): Returns the first 10 Fibonacci numbers in a list. fibonacci = [0, 1] while len(fibonacci) < 10: fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci"},{"question":"Write a function to determine if a graph is acyclic (i.e., does not contain any cycles) using Depth-First Search (DFS). The graph will be represented as an adjacency list.","solution":"def is_acyclic(graph): Determines if the given graph is acyclic using DFS. Parameters: graph (dict): The graph represented as an adjacency list where keys are node ids and values are lists of adjacent nodes. Returns: bool: True if the graph is acyclic, False otherwise. def dfs(node, visited, stack): visited.add(node) stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, stack): return True elif neighbor in stack: return True stack.remove(node) return False visited = set() for node in graph: if node not in visited: if dfs(node, visited, set()): return False # The graph contains a cycle return True # No cycles detected"},{"question":"Write a function to find the Longest Common Substring (LCS) between two strings. The LCS is the longest sequence of characters that appear in both strings in the same order but not necessarily contiguous. The function should return the length of the LCS. For example, given strings \\"AGGTAB\\" and \\"GXTXAYB\\", the length of the LCS is 4 (\\"GTAB\\").","solution":"def lcs_length(str1, str2): Finds the length of the Longest Common Substring (LCS) between two strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: int: The length of the LCS. m = len(str1) n = len(str2) # Create a DP table to store lengths of longest common suffixes of substrings. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from the bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function to search for a specific value in a two-dimensional array using a binary search algorithm. The function should return the row and column indices of the value if it is found. If the value is not found, the function should return -1.","solution":"def binary_search_2d(array, target): Searches for a specific value in a 2D array using a binary search algorithm. Return the row and column indices of the value if found, otherwise return -1. :param array: List of lists, where each list is a sorted row. :param target: Value to search for. :return: Tuple of (row_index, col_index) if value is found, otherwise -1. if not array or not array[0]: return -1 rows = len(array) cols = len(array[0]) left = 0 right = rows * cols - 1 while left <= right: mid = (left + right) // 2 mid_value = array[mid // cols][mid % cols] if mid_value == target: return (mid // cols, mid % cols) elif mid_value < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to reverse a list in Python. The function should take a list as input and return the reversed list. Additionally, implement error handling to handle cases where the input is not a list.","solution":"def reverse_list(lst): Reverses the input list. If input is not a list, raises a TypeError. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. Raises: TypeError: If the input is not a list. if not isinstance(lst, list): raise TypeError(\\"The input should be a list\\") return lst[::-1]"},{"question":"Write a function to compute the transpose of a 2D array in Python.","solution":"def transpose(matrix): Returns the transpose of the given 2D matrix. Parameters: matrix (list of list of int): A 2D list of integers representing the matrix to transpose. Returns: list of list of int: The transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Write a function to identify if duplicates exist in an array of numbers. The function should return \`true\` if there are duplicates, otherwise return \`false\`.","solution":"def has_duplicates(arr): Returns True if there are duplicates in the array, otherwise False. return len(arr) != len(set(arr))"},{"question":"Write a function to generate the FizzBuzz sequence up to a given number n.","solution":"def fizzbuzz(n): Generates the FizzBuzz sequence up to n. Parameters: n (int): The upper limit of the FizzBuzz sequence (inclusive). Returns: list: A list of the FizzBuzz sequence. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to find the maximum element in a given sublist of an array.","solution":"def max_in_sublist(arr, start, end): Returns the maximum element in the sublist of arr from start to end (inclusive). :param arr: List of numbers :param start: Start index of sublist (inclusive) :param end: End index of sublist (inclusive) :return: Maximum element in the specified sublist if start < 0 or end >= len(arr) or start > end: raise ValueError(\\"Invalid start or end index\\") return max(arr[start:end+1])"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Also, write a function to check if the result of this factorial function is even or odd using bitwise operation.","solution":"def factorial(n): Returns the factorial of a number n using recursion. if n == 0: return 1 return n * factorial(n - 1) def is_even(number): Returns True if the number is even, False if the number is odd using bitwise operation. return (number & 1) == 0"},{"question":"Write a function to check if a string is a palindrome without using any additional data structures or extra space.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, otherwise returns False. # Two-pointer approach to check for palindrome left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function to invert a binary tree. The function should accept the root of the binary tree as its argument and return the root of the inverted binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): This function inverts a binary tree. :param root: TreeNode, the root of the binary tree :return: TreeNode, the root of the inverted binary tree if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively invert the left and right subtrees invert_tree(root.left) invert_tree(root.right) return root"},{"question":"Write a function to calculate the sum of the first \`n\` Fibonacci numbers using recursion. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, and 5.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers. def fibonacci(k): if k <= 1: return k return fibonacci(k-1) + fibonacci(k-2) total_sum = 0 for i in range(n): total_sum += fibonacci(i) return total_sum"},{"question":"Write a function to rearrange an array such that all even numbers precede all odd numbers, maintaining the original relative order among the even and odd numbers. You should achieve this with O(n) time complexity and O(1) extra space.","solution":"def rearrange_array(arr): Rearranges the array such that all even numbers precede all odd numbers, maintaining the original relative order among the even and odd numbers. Arguments: arr -- list of integers Returns: The rearranged list of integers. n = len(arr) last_even_index = 0 for i in range(n): if arr[i] % 2 == 0: arr.insert(last_even_index, arr.pop(i)) last_even_index += 1 return arr"},{"question":"Write a function to check if a number is a palindrome without converting it to a string.","solution":"def is_palindrome_number(n): Check if a number is a palindrome without converting it to a string. :param n: Integer, the number to check :return: Boolean, True if n is a palindrome, False otherwise if n < 0: return False original = n reversed_num = 0 while n > 0: digit = n % 10 reversed_num = reversed_num * 10 + digit n //= 10 return original == reversed_num"},{"question":"Write a function to calculate the area and circumference of a circle given its radius. The function should return a tuple \`(area, circumference)\` where \`area\` is the area of the circle and \`circumference\` is the circumference of the circle.","solution":"import math def circle_metrics(radius): Returns the area and circumference of a circle given its radius. Parameters: radius (float): The radius of the circle Returns: tuple: A tuple containing the area and circumference of the circle area = math.pi * radius ** 2 circumference = 2 * math.pi * radius return (area, circumference)"},{"question":"Write a function to compute the sum of two numbers and return the result. The function should handle the case where either or both of the inputs are \`None\`.","solution":"def add(a, b): Returns the sum of a and b, if either or both are None, treat them as zero. if a is None: a = 0 if b is None: b = 0 return a + b"},{"question":"Write a function to find all routes from a starting point to the destination based on given directions.","solution":"def find_routes(directions, start, destination): Finds all routes from start to destination based on given directions. Parameters: directions (dict): A dictionary where keys represent locations and values represent lists of next possible locations. start (str): The starting location. destination (str): The destination location. Returns: list: A list of lists, where each sub-list represents a route from start to destination. def dfs(current, path): if current == destination: result.append(path) return for next_location in directions.get(current, []): dfs(next_location, path + [next_location]) result = [] dfs(start, [start]) return result"},{"question":"Write a function to perform a binary search on a sorted list.","solution":"def binary_search(arr, target): Performs a binary search on a sorted list to find the index of the target. Parameters: arr (list): A sorted list of elements. target: The element to search for in the list. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to calculate the sum of all numbers in a list. Jacob remembers that before, he was advised to make the function as generic as possible. He decided to design his function to accept any type of iterable, not just a list.","solution":"def sum_of_iterable(iterable): Returns the sum of all numbers in the given iterable. The function accepts any type of iterable (list, tuple, set, etc.) return sum(iterable)"},{"question":"Write a function to implement a two-way queue and perform push, pop from front and push, pop from back operations.","solution":"class TwoWayQueue: def __init__(self): self.queue = [] def push_front(self, value): Adds an element at the front of the queue. self.queue.insert(0, value) def pop_front(self): Removes and returns the front element of the queue. Returns None if the queue is empty. if self.queue: return self.queue.pop(0) return None def push_back(self, value): Adds an element at the back of the queue. self.queue.append(value) def pop_back(self): Removes and returns the back element of the queue. Returns None if the queue is empty. if self.queue: return self.queue.pop() return None"},{"question":"Write a function to print \\"Hello, World!\\" to the console.","solution":"def hello_world(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\")"},{"question":"Write a function to calculate the number of unique pairs in an array where the sum of each pair equals a specific target value.","solution":"def unique_pairs(arr, target): Returns the number of unique pairs in array 'arr' where the sum of each pair equals 'target'. seen = set() unique_pairs = set() for number in arr: complement = target - number if complement in seen: # To ensure uniqueness of pairs we store pairs in a way (min, max) unique_pairs.add((min(number, complement), max(number, complement))) seen.add(number) return len(unique_pairs)"},{"question":"Write a function to generate the first \`n\` numbers of the Fibonacci sequence, where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should be efficient and avoid using recursion to prevent stack overflow for large \`n\`.","solution":"def fibonacci(n): Generates the first n numbers of the Fibonacci sequence. Parameters: n (int): The number of Fibonacci sequence numbers to generate. Returns: list: A list containing the first n numbers of the Fibonacci sequence. if n == 0: return [] elif n == 1: return [0] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a function to sort a linked list in-place, with the follow-up being to sort the linked list in O(n log n) time using constant space complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort(head): Sorts a linked list in O(n log n) time using constant space complexity. if not head or not head.next: return head # Step 1: Split the list into two halves def split(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None return head, mid # Step 2: Merge two sorted linked lists def merge(list1, list2): dummy = ListNode() tail = dummy while list1 and list2: if list1.val < list2.val: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next tail.next = list1 if list1 else list2 return dummy.next # Step 3: Recursive merge sort function def merge_sort_recursive(head): if not head or not head.next: return head left, right = split(head) left = merge_sort_recursive(left) right = merge_sort_recursive(right) return merge(left, right) return merge_sort_recursive(head)"},{"question":"Write a function to identify the nth smallest element in an array of integers. The function should return the nth smallest element if such an element exists, otherwise, return a custom error message. The function should have a time complexity of O(nlogn) and should not use the sort approach.","solution":"import heapq class ElementNotFoundError(Exception): pass def nth_smallest(arr, n): if n > len(arr) or n < 1: raise ElementNotFoundError(f\\"No {n}th element found in the array\\") # Use a min-heap to find the nth smallest element min_heap = arr[:] heapq.heapify(min_heap) for _ in range(n - 1): heapq.heappop(min_heap) return heapq.heappop(min_heap)"},{"question":"Write a function to find and output the Nth power of a number, where N must be a prime number, using Python.","solution":"def nth_power_prime(base, exponent): Returns the Nth power of a number if N is a prime number. def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True if not is_prime(exponent): raise ValueError(\\"The exponent must be a prime number.\\") return base ** exponent"},{"question":"Write a function to calculate the permutation of a string using character swapping.","solution":"def permute_string(s): Returns all possible permutations of string s using character swapping. def helper(start, end): if start == end: result.append(\\"\\".join(s)) else: for i in range(start, end): s[start], s[i] = s[i], s[start] helper(start + 1, end) s[start], s[i] = s[i], s[start] result = [] s = list(s) helper(0, len(s)) return result"},{"question":"Write a function to check if a given number is a power of two. A power of two is a number that is exactly divisible by two raised to any integer power. For example, 1, 2, 4, 8, 16, etc., are powers of two.","solution":"def is_power_of_two(n): Checks if a given number n is a power of two. :param int n: The number to be checked. :return: True if n is a power of two, False otherwise. :rtype: bool if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to convert a temperature in Celsius to Fahrenheit. Given is the temperature in Celsius. You should return the temperature in Fahrenheit. The formula for converting Celsius to Fahrenheit is \`(Celsius * 9/5) + 32\`.","solution":"def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. Parameters: celsius (float): Temperature in Celsius. Returns: float: Temperature in Fahrenheit. return (celsius * 9/5) + 32"},{"question":"Write a function to find all the elements in an array that appear exactly twice.","solution":"def find_elements_appearing_twice(arr): Returns a list of elements that appear exactly twice in the input list. :param arr: List of elements. :return: List of elements that appear exactly twice. from collections import Counter element_count = Counter(arr) return [element for element, count in element_count.items() if count == 2]"},{"question":"Write a function to check if a two-dimensional array is symmetrical, meaning that it reads the same forwards and backwards both horizontally and vertically. A symmetrical two-dimensional array should be a mirror reflection of itself along both its rows and columns.","solution":"def is_symmetrical(matrix): Check if a two-dimensional array is symmetrical. A symmetrical matrix reads the same forwards and backwards both horizontally and vertically. Parameters: matrix (list of list of int): The input 2D array. Returns: bool: True if the matrix is symmetrical, False otherwise. if not matrix: return True n = len(matrix) # Check if matrix is square for row in matrix: if len(row) != n: return False # Check symmetry for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a function to find the maximum sum of non-adjacent elements in a given array.","solution":"def max_sum_non_adjacent(arr): Returns the maximum sum of non-adjacent elements in the array. if not arr: return 0 if len(arr) == 1: return arr[0] prev_one = 0 prev_two = 0 for num in arr: new_sum = max(prev_one, prev_two + num) prev_two = prev_one prev_one = new_sum return prev_one"},{"question":"Write a function to check if a given number is a perfect square. If so, return the number. Otherwise, return the number multiplied by 2.","solution":"def check_perfect_square(num): Check if a number is a perfect square. If so, return the number. Otherwise, return the number multiplied by 2. if num < 0: return num * 2 root = int(num ** 0.5) if root * root == num: return num else: return num * 2"},{"question":"Write a function to remove duplicates from an array of integers and then sort the array in ascending order.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from the array and returns the sorted array in ascending order. # Remove duplicates by converting the list to a set unique_elements = set(arr) # Convert the set back to a list and sort it sorted_unique_list = sorted(unique_elements) return sorted_unique_list"},{"question":"Write a function to traverse through a binary tree and perform a level-order traversal (Breadth-First Search). Return the result as a list of lists, where each inner list represents the values at that level of the tree.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Perform a level-order traversal (BFS) on a binary tree and return a list of lists, where each inner list contains the node values at that level. if not root: return [] result = [] queue = deque([root]) while queue: level = [] level_length = len(queue) for i in range(level_length): node = queue.popleft() level.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Write a function to convert a list of strings into a single string where each string is separated by a comma and a space.","solution":"def list_to_comma_separated_string(lst): Converts a list of strings into a single string where each string is separated by a comma and a space. Args: lst (list): A list of strings to be converted. Returns: str: A single string with each original string separated by a comma and a space. return ', '.join(lst)"},{"question":"Write a function to search for a specific element in an unsorted array using linear search. The function should return the index of the element if found, otherwise -1.","solution":"def linear_search(arr, element): Performs a linear search for the specified element in the array. Parameters: arr (list): The array to search in. element: The element to search for. Returns: int: The index of the element if found, otherwise -1. for index, item in enumerate(arr): if item == element: return index return -1"},{"question":"Write a function to check if a given string represents a valid integer. A valid integer is defined as a string that may contain leading or trailing spaces, but does not contain any non-digit characters except for an optional leading '+' or '-' sign. Additionally, the string should not be empty after ignoring any leading or trailing spaces.","solution":"def is_valid_integer(s): Check if the given string represents a valid integer. s = s.strip() if not s: return False if s[0] in ['+', '-']: s = s[1:] return s.isdigit()"},{"question":"Write a function to solve the problem of finding the longest increasing subsequence in a given integer array.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the given list of integers. Parameters: nums (List[int]): List of integers. Returns: int: Length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to determine if a given 2D array is a submatrix of another 2D array. The function should take two 2D arrays as input and return \`True\` if the second array is a submatrix of the first, and \`False\` otherwise.","solution":"def is_submatrix(matrix, submatrix): Check if submatrix is a submatrix of matrix. Arguments: matrix -- a 2D list representing the main matrix submatrix -- a 2D list representing the submatrix to check Returns: boolean -- True if submatrix is a submatrix of matrix, False otherwise if not submatrix or not submatrix[0]: return True # If the submatrix is empty, it is trivially a submatrix rows_main = len(matrix) cols_main = len(matrix[0]) rows_sub = len(submatrix) cols_sub = len(submatrix[0]) for i in range(rows_main - rows_sub + 1): for j in range(cols_main - cols_sub + 1): if all(matrix[i + x][j + y] == submatrix[x][y] for x in range(rows_sub) for y in range(cols_sub)): return True return False"},{"question":"Write a function to validate a date in the format \\"YYYY-MM-DD\\". The function should check if the date is valid considering leap years and the number of days in each month. Assume the input date is a string.","solution":"def is_leap_year(year): Check if a year is a leap year. return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) def validate_date(date_str): Validate a date string in the format YYYY-MM-DD. if len(date_str) != 10 or date_str[4] != '-' or date_str[7] != '-': return False try: year = int(date_str[:4]) month = int(date_str[5:7]) day = int(date_str[8:]) except ValueError: return False if month < 1 or month > 12: return False if day < 1: return False # Days in each month days_in_month = [31, 29 if is_leap_year(year) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if day > days_in_month[month - 1]: return False return True"},{"question":"Write a function to convert a string of text to a binary representation. Each character in the string should be converted to its corresponding ASCII value, and then each ASCII value should be converted to binary. The binary representation should be zero-padded to include exactly eight bits for each character. The function should return a string of binary numbers separated by spaces.","solution":"def text_to_binary(text): Converts a string of text to its binary representation. Each character is converted to its ASCII value, and then to an 8-bit binary representation. Each binary number is separated by a space. Args: text (str): The input text string. Returns: str: The binary representation of the text. return ' '.join(format(ord(char), '08b') for char in text)"},{"question":"Write a function to print all integers from 1 to 100 that are multiples of 3 or 5. How can this be solved using a for loop in Python?","solution":"def multiples_of_3_or_5(): Returns a list of all integers from 1 to 100 that are multiples of 3 or 5. result = [] for i in range(1, 101): if i % 3 == 0 or i % 5 == 0: result.append(i) return result"},{"question":"Write a function to sort a list of strings lexicographically and ignore case sensitivity.","solution":"def sort_strings_lexicographically(strings): Sort a list of strings lexicographically ignoring case sensitivity. Parameters: strings (list): A list of strings to be sorted. Returns: list: A new list containing the sorted strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a function to determine if a string contains all unique characters, assuming it is a ASCII characters input, not unicode.","solution":"def is_unique(string): Determine if a string has all unique characters. Args: string (str): The input string containing ASCII characters. Returns: bool: True if all characters in the string are unique, False otherwise. if len(string) > 128: # There are only 128 unique ASCII characters return False char_set = [False] * 128 # A list to check the occurrence of characters for char in string: ascii_value = ord(char) if char_set[ascii_value]: return False char_set[ascii_value] = True return True"},{"question":"Write a function to calculate the sum of all elements in a list using Python. You must not use the built-in sum() function.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. total = 0 for num in lst: total += num return total"},{"question":"Write a function to compute the Levenshtein distance between two strings. The Levenshtein distance is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. This is a common algorithm used in computational linguistics and genetics.","solution":"def levenshtein_distance(s1, s2): Compute the Levenshtein distance between two strings s1 and s2. if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Write a function to determine the frequency of a given integer in a non-empty array of integers. The function should return the count of occurrences of the integer.","solution":"def frequency(arr, num): Returns the frequency of num in the array arr. return arr.count(num)"},{"question":"Write a function to find the maximum sum of a contiguous subarray (sub_sequence) within a given array of integers. This function should return the maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array of integers 'arr'. This is done using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to solve this puzzle involving chessboards. I have a chessboard represented as a 2D string array, where each cell can contain either a '1' (indicating a black square) or a '0' (indicating a white square). I need to determine if it's possible to reach the last square (bottom-right corner) of the chessboard from the starting square (top-left corner) by moving only to adjacent cells (up, down, left, or right). Note that a move is only possible if it lands on a black square.","solution":"def can_reach_end(board): Determines if it's possible to reach the bottom-right corner of the chessboard from the top-left corner by only moving on black squares ('1'). if not board or board[0][0] != '1' or board[-1][-1] != '1': return False rows, cols = len(board), len(board[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): if r == rows - 1 and c == cols - 1: return True visited[r][c] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and board[nr][nc] == '1': if dfs(nr, nc): return True return False return dfs(0, 0)"},{"question":"Write a function to find the median of three numbers. The function should return the median value as a float.","solution":"def median_of_three(a, b, c): Returns the median value of three numbers a, b, and c. numbers = [a, b, c] numbers.sort() return float(numbers[1])"},{"question":"Write a function to calculate the sum of all elements in a list of integers. If the list is empty, the function should return 0. If the list contains only one negative number, it should return that number multiplied by -1 to indicate the count. If the list contains two or more negative numbers, the function should return the sum of the list elements, treating each negative number as if it were its absolute value.","solution":"def custom_sum(lst): Calculate the sum of all elements in a list of integers according to specific rules. If the list is empty, return 0. If the list contains only one negative number, return that number multiplied by -1. If the list contains two or more negative numbers, return the sum of the list elements, treating each negative number as its absolute value. if not lst: return 0 if len(lst) == 1 and lst[0] < 0: return lst[0] * -1 negative_count = sum(1 for x in lst if x < 0) if negative_count >= 2: return sum(abs(x) for x in lst) return sum(lst)"},{"question":"Write a function to reverse a string, but ignore all non-alphabetic characters. Only reverse the alphabetic characters in their order while keeping the position of the non-alphabetic characters unchanged.","solution":"def reverse_only_alphabets(s): Reverse only the alphabetic characters in the input string, ignoring non-alphabetic characters. Parameters: s (str): Input string to reverse alphabetic characters Returns: str: String with reversed alphabetic characters and unchanged non-alphabetic characters # Extract the alphabetic characters and reverse them alphabets = [char for char in s if char.isalpha()] reversed_alphabets = alphabets[::-1] # Rebuild the string while replacing alphabetic characters with their reversed counterparts result = [] alpha_index = 0 for char in s: if char.isalpha(): result.append(reversed_alphabets[alpha_index]) alpha_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Write a function to calculate the sum of sales for each book title in the database. If a book title does not exist in the database, create an entry with a sum of sales of 0.","solution":"def sum_of_sales(sales_data): Returns a dictionary with the sum of sales for each book title. Parameters: sales_data (list): A list of tuples where each tuple contains a book title (str) and the number of sales (int). Returns: dict: A dictionary with book titles as keys and the sum of sales as values. sales_summary = {} for title, sales in sales_data: if title in sales_summary: sales_summary[title] += sales else: sales_summary[title] = sales return sales_summary"},{"question":"Write a function to find the Kth largest element in an array. The function should be \`def kLargest(arr, k)\` and take in an array \`arr\` and an integer \`k\`. The function should return the Kth largest element in the array.","solution":"def kLargest(arr, k): Returns the Kth largest element in the array. if k < 1 or k > len(arr): return None arr.sort(reverse=True) return arr[k-1]"},{"question":"Write a function to find and return the number of 4-clique subsets of a graph in Python? 4-clique is a subset of nodes that every pair of nodes is connected by an edge.","solution":"from itertools import combinations def count_4_cliques(graph): Returns the number of 4-cliques in the given graph. :param graph: A dictionary where keys are node identifiers and values are sets of adjacent nodes. :return: The number of 4-cliques in the graph. def are_all_connected(nodes): for i in range(len(nodes)): for j in range(i + 1, len(nodes)): if nodes[j] not in graph[nodes[i]]: return False return True nodes = list(graph.keys()) count = 0 for comb in combinations(nodes, 4): if are_all_connected(comb): count += 1 return count"},{"question":"Write a function to calculate the maximum product of elements in an array excluding the minimum and maximum values.","solution":"def max_product_excluding_min_max(arr): Returns the maximum product of elements in the array excluding the minimum and maximum values. :param arr: List of integers :return: Maximum product of elements excluding min and max values or None if not possible. if len(arr) < 3: return None min_val = min(arr) max_val = max(arr) filtered_arr = [x for x in arr if x != min_val and x != max_val] if len(filtered_arr) < 2: return None # Sorting the filtered array to get the largest two values filtered_arr.sort(reverse=True) max_product = filtered_arr[0] * filtered_arr[1] return max_product"},{"question":"Write a function to extract the longest word in a sentence using Python. The function should return the longest word found and its length.","solution":"def extract_longest_word(sentence): Extracts the longest word in the given sentence and returns a tuple containing the word and its length. If there are multiple words with the longest length, the first one encountered is returned. words = sentence.split() if not words: return (\\"\\", 0) longest_word = max(words, key=len) return (longest_word, len(longest_word))"},{"question":"Write a function to find the median of an array. What should be considered when the array length is odd versus even?","solution":"def find_median(arr): Returns the median of the array. If the array length is odd, the median is the middle element. If the array length is even, the median is the average of the two middle elements. arr.sort() n = len(arr) if n % 2 == 1: # odd length median = arr[n // 2] else: # even length median = (arr[n // 2 - 1] + arr[n // 2]) / 2 return median"},{"question":"Write a function to extract the elements at even indices from a list and return them.","solution":"def extract_even_indices(lst): Returns a list of elements from the input list that are at even indices. return [lst[i] for i in range(len(lst)) if i % 2 == 0]"},{"question":"Write a function to check if all characters in a string are unique. For example, \\"abc\\" is unique, but \\"aab\\" is not.","solution":"def are_all_characters_unique(s): Returns True if all characters in the string s are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a function to find the number of ways to reach the bottom-right corner of a grid from the top-left corner. The grid can only move either down or right at any point in time.","solution":"def number_of_ways(m, n): Returns the number of ways to reach the bottom-right corner of a m x n grid from the top-left corner. Movement is restricted to only right or down. # Create a 2D dp array dp = [[0 for _ in range(n)] for _ in range(m)] # Set the ways to reach any cell in the first row to 1 for i in range(n): dp[0][i] = 1 # Set the ways to reach any cell in the first column to 1 for i in range(m): dp[i][0] = 1 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Write a function to reverse a list using recursion.","solution":"def reverse_list_recursive(lst): Returns the reverse of the list lst using recursion. if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Write a function to find the longest contiguous substring with at most K distinct characters in a given string.","solution":"def longest_substring_with_k_distinct(s, k): Finds the longest contiguous substring with at most k distinct characters in a given string. :param s: Input string :param k: Maximum number of distinct characters allowed :return: The longest contiguous substring with at most k distinct characters if k == 0 or not s: return \\"\\" left = 0 right = 0 max_len = 0 max_substr = \\"\\" char_map = {} while right < len(s): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 if (right - left + 1) > max_len: max_len = right - left + 1 max_substr = s[left:right + 1] right += 1 return max_substr"},{"question":"Write a function to find the intersection of two lists based on a given list of keys.","solution":"def list_intersection(list1, list2, keys): Finds the intersection of two lists of dictionaries based on given keys. Parameters: list1 (list): The first list of dictionaries. list2 (list): The second list of dictionaries. keys (list): The list of keys to check for intersection. Returns: list: Intersection of the two lists based on the given keys. intersection = [] for dict1 in list1: for dict2 in list2: if all(dict1[key] == dict2[key] for key in keys): intersection.append(dict1) break return intersection"},{"question":"Write a function to input an integer and check if it is a prime number or not.","solution":"def is_prime(n): Returns True if the input integer n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function to find the longest increasing subsequence in an array of integers. The function should return the length of the longest subsequence. A subsequence is considered increasing if each element is greater than the previous element. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], and the function should return 4.","solution":"def longest_increasing_subsequence(arr): Find the length of the longest increasing subsequence in an array. Args: arr (list): List of integers. Returns: int: Length of the longest increasing subsequence. if not arr: return 0 # Create an array to store the length of the LIS ending at each index lis = [1] * len(arr) # Build the lis array for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum value in the lis array return max(lis)"},{"question":"Write a function to calculate the sum of all the multiples of 3 or 5 below 1000. You should also handle potential errors gracefully.","solution":"def sum_of_multiples(limit=1000): Calculate the sum of all the multiples of 3 or 5 below a given limit. The default limit is 1000. :param limit: int, the upper boundary for checking multiples (exclusive) :return: int, the sum of all multiples of 3 or 5 below the given limit # Ensure the limit is a positive integer if not isinstance(limit, int) or limit <= 0: raise ValueError(\\"The limit should be a positive integer.\\") total_sum = 0 for i in range(limit): if i % 3 == 0 or i % 5 == 0: total_sum += i return total_sum"},{"question":"Write a function to find the maximum subarray using Kadane's algorithm and analyze its time complexity.","solution":"def max_subarray_kadane(nums): Finds the maximum sum of a contiguous subarray in the given array using Kadane's algorithm. :param nums: List[int] :return: int if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max # Time Complexity: O(n) where n is the number of elements in the input list."},{"question":"Write a function to find the maximum number in an array. The function should handle any array of integers and return the largest number found. Additionally, the function should throw an exception if the input is not an array or if the array is empty.","solution":"def find_max(arr): Returns the maximum number in the array. Throws ValueError if the input is not an array or if the array is empty. if not isinstance(arr, list): raise ValueError(\\"Input must be an array\\") if len(arr) == 0: raise ValueError(\\"Array is empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a function to generate and print all possible combinations of a given string. The order of characters in each combination is the same as their order in the input string. The function should handle duplicate characters, but each character in a combination should appear only once. For example, if the input string is \\"aab\\", the output should be [\\"aab\\", \\"aba\\", \\"baa\\"].","solution":"from itertools import permutations def unique_combinations(s): Generates all possible unique combinations of the given string while maintaining the original order of characters. Params: s (str): Input string Returns: list: List of unique combinations of the string perm = set(permutations(s)) return [''.join(p) for p in perm]"},{"question":"Write a function to reverse the words in a given string \`str\`. A word is defined as a sequence of characters separated by spaces. The function should ignore leading, trailing, and duplicate spaces between words.","solution":"def reverse_words(s): Reverses the words in a given string \`s\`. Ignores leading, trailing, and duplicate spaces between words. Parameters: s (str): The string to reverse the words for. Returns: str: The string with words reversed. # Split string by spaces, which automatically ignores any leading, trailing, and duplicate spaces words = s.split() # Reverse the list of words and join them with a single space reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a function to perform depth-first search (DFS) on a graph. Given a graph represented as an adjacency list, a source vertex, and a destination vertex, return true if there is a path between the source and destination vertex, and false otherwise.","solution":"def dfs(graph, start, goal): Perform Depth-First Search (DFS) on a graph. :param graph: Dictionary representing the graph as adjacency list :param start: The source vertex :param goal: The destination vertex :return: True if there is a path from start to goal, False otherwise visited = set() def dfs_recursive(vertex): if vertex == goal: return True visited.add(vertex) for neighbor in graph.get(vertex, []): if neighbor not in visited: if dfs_recursive(neighbor): return True return False return dfs_recursive(start)"},{"question":"Write a function to find all positive integer solutions for the equation x + y = k, where k is given as an integer. For example, if k = 5, the function should return solutions like (1, 4), (2, 3), (3, 2), and (4, 1).","solution":"def find_solutions(k): Returns a list of tuples representing all positive integer solutions (x, y) for the equation x + y = k. solutions = [] for x in range(1, k): y = k - x if y > 0: solutions.append((x, y)) return solutions"},{"question":"Write a function to find the length of the longest palindromic substring in a given string. The function should return the length of this substring, not the substring itself.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. if not s: return 0 n = len(s) dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 for k in range(3, n+1): for i in range(n - k + 1): j = i + k - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True start = i max_length = k return max_length"},{"question":"Write a function to find the maximum sum subarray in a given one-dimensional array of numbers. This is a classic problem in computer science known as the Maximum Subarray Problem.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the given array. Parameters: arr (list of int): A one-dimensional array of numbers Returns: int: The maximum sum of the contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to generate all permutations of a given string \`s\` that are palindromes. A palindrome is a sequence of characters that reads the same backward as forward.","solution":"from collections import Counter from itertools import permutations def generate_palindromic_permutations(s): Returns all palindromic permutations of the input string \`s\`. def is_palindrome(s): return s == s[::-1] def can_form_palindrome(s): count = Counter(s) odd_count = sum(1 for value in count.values() if value % 2 != 0) return odd_count <= 1 if not can_form_palindrome(s): return [] palindromic_permutations = set() for perm in permutations(s): perm_str = ''.join(perm) if is_palindrome(perm_str): palindromic_permutations.add(perm_str) return list(palindromic_permutations)"},{"question":"Write a function to reverse a string and then capitalize the first character of the string.","solution":"def reverse_and_capitalize(s): Reverses the input string and capitalizes the first character. reversed_s = s[::-1] return reversed_s.capitalize()"},{"question":"Write a function to convert a given string to a list of characters.","solution":"def string_to_list(s): Converts a given string to a list of characters. return list(s)"},{"question":"Write a function to calculate the factorial of a number in Python. You are not allowed to use recursion in your solution.","solution":"def factorial(n): Returns the factorial of n using an iterative approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to find the minimum number of insertions required to convert a given string into a palindrome.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to convert the given string into a palindrome. def lcs(s1, s2): n = len(s1) dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) return len(s) - lcs_length"},{"question":"Write a function to find the number of 1-bits in the binary representation of an integer n.","solution":"def count_one_bits(n): Returns the number of 1-bits in the binary representation of an integer n. return bin(n).count('1')"},{"question":"Write a function to calculate the sum of numbers in an array. The function should accept an array of integers and an integer representing the size of the array as its parameters. The function should return the sum of all the numbers in the array. If the array is empty, the function should return 0. Additionally, the function should throw an exception if the array size is negative.","solution":"def sum_of_array(arr, size): Returns the sum of numbers in an array. Parameters: arr (list of int): The array of integers. size (int): The size of the array. Returns: int: The sum of all the numbers in the array. Raises: ValueError: If the size is negative. if size < 0: raise ValueError(\\"Size of the array cannot be negative.\\") if size == 0: return 0 return sum(arr[:size])"},{"question":"Write a function to reverse a string in Python. You should not use Python's built-in string slicing method to reverse the string. Instead, implement the reverse method using a loop. Additionally, the function must handle Unicode characters correctly by ensuring they are treated as single units rather than parts of characters.","solution":"def reverse_string(s): Reverses the given string s without using string slicing. Handles Unicode characters correctly. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to calculate the sum of all positive integers in a given array. If the array is empty or contains no positive integers, the function should return 0.","solution":"def sum_positive_integers(arr): Returns the sum of all positive integers in a given array. If the array is empty or contains no positive integers, returns 0. return sum(x for x in arr if x > 0)"},{"question":"Write a function to convert Fahrenheit to Celsius in Python. The function should take one parameter: the temperature in Fahrenheit. It should return the temperature converted to Celsius.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts the temperature from Fahrenheit to Celsius. Parameters: fahrenheit (float): Temperature in Fahrenheit. Returns: float: Temperature in Celsius. celsius = (fahrenheit - 32) * 5.0 / 9.0 return celsius"},{"question":"Write a function to find the product of all elements in a list, but skip any element that is either zero or negative. How can this be done using Python?","solution":"def product_of_positive_numbers(lst): Returns the product of all positive elements in the list. Skips any element that is zero or negative. product = 1 has_positive_number = False for number in lst: if number > 0: product *= number has_positive_number = True return product if has_positive_number else 0"},{"question":"Write a function to find the length of the longest substring without repeating characters in a given string. How would you approach this problem?","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Args: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start_index = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_index: start_index = char_index_map[char] + 1 char_index_map[char] = index longest_length = max(longest_length, index - start_index + 1) return longest_length"},{"question":"Write a function to check if a given string contains only alphanumeric characters and returns \`True\` if it does, otherwise return \`False\`. Additionally, the function should ignore case sensitivity (i.e., treat 'A' and 'a' as the same).","solution":"def is_alphanumeric_ignore_case(s): Checks if a given string contains only alphanumeric characters. Ignores case sensitivity. Parameters: s (str): Input string to check. Returns: bool: True if the string contains only alphanumeric characters, False otherwise. return s.isalnum()"},{"question":"Write a function to check whether a given internet URL is valid.","solution":"import re def is_valid_url(url): Checks whether a given internet URL is valid. regex = re.compile( r'^(https?://)' # http:// or https:// r'((([a-zA-Z0-9]+([a-zA-Z0-9-]+)*.)+[a-zA-Z]{2,})|' # domain... r'((d{1,3}.){3}d{1,3}))' # ...or ipv4 r'(:d+)?' # optional port r'(/[-a-zA-Z0-9@:%._+~#=]*)*' # resource path r'(?[;&a-zA-Z0-9%_.~+=-]*)?' # query string r'(#[-a-zA-Z0-9_]*)?', # fragment re.IGNORECASE ) return re.match(regex, url) is not None"},{"question":"Write a function to calculate the area of a triangle given its base and height. The function should take two parameters: the base (a float) and the height (a float) of the triangle. The function should return the area of the triangle as a float.","solution":"def calculate_triangle_area(base, height): Returns the area of a triangle given its base and height. Parameters: base (float): The base of the triangle. height (float): The height of the triangle. Returns: float: The area of the triangle. return 0.5 * base * height"},{"question":"Write a function to delete a specific node from a singly linked list. The function should take the head of the list and the value of the node to be deleted as inputs and return the head of the modified list. If the node to be deleted is not found, the function should return the original list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def delete_node(head, value): Deletes the first occurrence of a node with the given value from a singly linked list. Parameters: head (ListNode): The head of the singly linked list. value (int): The value of the node to be deleted. Returns: ListNode: The head of the modified list. # If the linked list is empty if not head: return head # If the node to be deleted is the head node if head.value == value: return head.next # Initialize pointers for traversal current = head prev = None # Traverse the list while current: if current.value == value: prev.next = current.next return head prev = current current = current.next # If the value was not found, return the original head return head"},{"question":"Write a function to clone a linked list. The function should take the head of the linked list as input and return the head of the cloned linked list. The cloned linked list should be a deep copy of the original, meaning each node in the new list should refer to new space in memory, different from the nodes in the original list. Assuming the linked list contains only integer values.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def clone_linked_list(head): Clones a given linked list. :param ListNode head: Head of the original linked list. :return: Head of the cloned linked list. :rtype: ListNode if head is None: return None # Dictionary to keep track of old node to new node mapping old_to_new = {} # Create a new head for the cloned list new_head = ListNode(head.val) old_to_new[head] = new_head current_old_node = head current_new_node = new_head while current_old_node is not None: if current_old_node.next and current_old_node.next not in old_to_new: # If the next node exists and is not cloned yet, create a new node for the clone new_node = ListNode(current_old_node.next.val) old_to_new[current_old_node.next] = new_node if current_old_node.next: # Set the next pointer in the cloned list current_new_node.next = old_to_new[current_old_node.next] # Move to the next node in the list current_old_node = current_old_node.next current_new_node = current_new_node.next return new_head"},{"question":"Write a function to find the next greater element for each element in a list. The next greater element for a given element is the first element to its right that is greater than the current element. If no such element exists, return -1 for that position.","solution":"def next_greater_elements(nums): Finds the next greater element for each element in the list. Args: nums (list): List of integers. Returns: list: List of integers representing the next greater element. If no greater element exists, return -1 for that position. res = [-1] * len(nums) stack = [] for i, num in enumerate(nums): while stack and nums[stack[-1]] < num: res[stack.pop()] = num stack.append(i) return res"},{"question":"Write a function to print all natural numbers from 1 to N, where N is passed as a parameter to this function.","solution":"def print_natural_numbers(N): Returns a list of all natural numbers from 1 to N. return list(range(1, N + 1))"},{"question":"Write a function to perform the following operations: (1) This function takes an integer \`n\` as input, (2) The function creates a list of length \`n\`, where each element is a random integer between 1 and 100, inclusive. (3) After creating the list, calculate the sum of all the elements in the list and return this sum.","solution":"import random def sum_of_random_integers(n): Creates a list of length \`n\`, where each element is a random integer between 1 and 100, inclusive. Returns the sum of all the elements in the list. random_integers = [random.randint(1, 100) for _ in range(n)] return sum(random_integers)"},{"question":"Write a function to compute the sum of the \`k\` greatest elements in an array. The array can contain either positive or negative integers, and \`k\` is a non-negative integer less than or equal to the length of the array. If the length of the array is less than \`k\`, return the sum of all elements.","solution":"def sum_k_greatest(nums, k): Returns the sum of the k greatest elements in the array. If the length of the array is less than k, return the sum of all elements. Args: nums (list of int): List of integers. k (int): Non-negative integer specifying the number of greatest elements to sum. Returns: int: Sum of the k greatest elements. if len(nums) <= k: return sum(nums) sorted_nums = sorted(nums, reverse=True) return sum(sorted_nums[:k])"},{"question":"Write a function to find the longest common suffix between two strings and return its length.","solution":"def longest_common_suffix_len(str1, str2): Returns the length of the longest common suffix between two strings. # Start comparing the strings from the end i = 1 while i <= len(str1) and i <= len(str2) and str1[-i] == str2[-i]: i += 1 return i - 1"},{"question":"Write a function to compute the Nth fibonacci number using both iterative and recursive methods. Additionally, provide a brief explanation of the time complexity for each approach.","solution":"def fibonacci_recursive(n): Returns the Nth Fibonacci number using a recursive method. if n <= 0: raise ValueError(\\"N should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) def fibonacci_iterative(n): Returns the Nth Fibonacci number using an iterative method. if n <= 0: raise ValueError(\\"N should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 fib_1, fib_2 = 0, 1 for _ in range(3, n + 1): fib_1, fib_2 = fib_2, fib_1 + fib_2 return fib_2 # Time Complexity: # Recursive approach: O(2^n) - this is due to the exponential growth of function calls. # Iterative approach: O(n) - this is because it runs a loop from 3 to n once."},{"question":"Write a function to reverse a string in Python without using the slicing method. Additionally, handle cases where the input might not be a string by raising an appropriate exception.","solution":"def reverse_string(input_str): Reverses the given string. If the input is not a string, raises a TypeError. Args: input_str (str): The string to be reversed. Returns: str: The reversed string. Raises: TypeError: If the input is not a string. if not isinstance(input_str, str): raise TypeError(\\"Input must be a string\\") reversed_str = \\"\\" for char in input_str: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to print the numbers from 1 to 10 in Python.","solution":"def print_numbers(): Prints the numbers from 1 to 10. for number in range(1, 11): print(number)"},{"question":"Write a function to find the maximum profit that can be made from selling a stock on day \`i\` given a list of integers representing the stock prices on each day. The function should return the maximum profit that can be made by making at most one transaction (i.e., buying and selling the stock once).","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling the stock once. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a function to find the minimum number of jumps to reach the end of an array where each element represents the maximum jump length from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps to reach the end of the array where each element in the array represents the maximum jump length from that position. n = len(arr) if n <= 1: return 0 if arr[0] == 0: return float('inf') # Cannot move anywhere # maxReach stores the maximum index that can be reached maxReach = arr[0] # step stores the number of steps we can still take step = arr[0] # jumps stores the number of jumps necessary to reach that maxReach jumps = 1 for i in range(1, n): if i == n - 1: return jumps maxReach = max(maxReach, i + arr[i]) step -= 1 if step == 0: jumps += 1 if i >= maxReach: return float('inf') step = maxReach - i return jumps"},{"question":"Write a function to calculate the MD5 hash of a given string input. The function should convert the string to bytes before calculating the hash.","solution":"import hashlib def calculate_md5(input_string): Returns the MD5 hash of the given string. Parameters: input_string (str): The string to be hashed. Returns: str: The MD5 hash of the input string. # Convert the string to bytes input_bytes = input_string.encode('utf-8') # Calculate the MD5 hash md5_hash = hashlib.md5(input_bytes).hexdigest() return md5_hash"},{"question":"Write a function to trim leading and trailing whitespaces from a string.","solution":"def trim_whitespace(s): Trims leading and trailing whitespaces from a string. return s.strip()"},{"question":"Write a function to concatenate the values of a dictionary into a single string, separated by a semicolon and a space. If the dictionary is empty, the function should return an empty string.","solution":"def concatenate_dict_values(my_dict): Concatenates the values of a dictionary into a single string, separated by a semicolon and a space. If the dictionary is empty, returns an empty string. if not my_dict: return \\"\\" return \\"; \\".join(str(value) for value in my_dict.values())"},{"question":"Write a function to check whether the given string is a numeric string or not.","solution":"def is_numeric_string(s): Returns True if the given string is a numeric string, otherwise False. A string is considered numeric if all characters are digits. :param s: The input string to check. :return: True if the string is numeric, otherwise False. return s.isdigit()"},{"question":"Write a function to search for a target value in a sorted array and return its index. If the target is not found, return -1. Use binary search to solve this problem.","solution":"def binary_search(arr, target): Perform a binary search for the target in the sorted array arr. Parameters: arr (list): A sorted list of elements. target (int/float/str): The value to search for in the array. Returns: int: The index of the target in the array if found. Otherwise, -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the first missing positive integer in an unsorted integer array. The function should have a time complexity of O(n) and a space complexity of O(1), assuming that the input array is mutable.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an unsorted integer array. n = len(nums) # Place each number in its right place for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first number out of place for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function to find the second largest number in a list of integers. What should be considered for edge cases (like single element list, identical elements, etc.)?","solution":"def second_largest(numbers): Returns the second largest number in a list of integers. If the list is too short or all elements are identical, returns None. if len(numbers) < 2: return None first = second = float('-inf') for n in numbers: if n > first: second = first first = n elif first > n > second: second = n return second if second != float('-inf') else None"},{"question":"Write a function to compute the number of 1 bits in a given integer n. For example, n = 10 has a binary representation of 1010 which has 2 ones.","solution":"def count_ones(n): Returns the count of 1 bits in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a function to find the sum of all numbers in a list using a loop.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list using a loop. total = 0 for number in numbers: total += number return total"},{"question":"Write a function to generate all unique permutations of a string, taking into account cases where the string contains duplicate characters. For example, for the string \\"aab,\\" the function should return \`[\\"aab\\", \\"aba\\", \\"baa\\"]\`.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the string s. Takes into account cases where the string contains duplicate characters. return sorted(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a function to calculate the median of two sorted arrays in O(log(min(m, n))) time complexity, where m and n are the sizes of the two arrays, respectively. How can you ensure the solution is optimal?","solution":"def findMedianSortedArrays(nums1, nums2): Returns the median of the two sorted arrays nums1 and nums2 in O(log(min(m, n))) time complexity. # Ensure nums1 is the smaller array if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j - 1]: # i is too small, must increase it imin = i + 1 elif i > 0 and nums1[i - 1] > nums2[j]: # i is too big, must decrease it imax = i - 1 else: # i is perfect if i == 0: max_of_left = nums2[j - 1] elif j == 0: max_of_left = nums1[i - 1] else: max_of_left = max(nums1[i - 1], nums2[j - 1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"Write a function to find the depth of a binary tree using a breadth-first search (BFS) approach.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth_bfs(root): Returns the maximum depth of a binary tree using BFS approach. if not root: return 0 queue = deque([(root, 1)]) # Queue holds tuples of (node, current_depth) max_depth = 0 while queue: current_node, depth = queue.popleft() max_depth = max(max_depth, depth) # Update max_depth if current_node.left: queue.append((current_node.left, depth + 1)) # Add left child to queue with incremented depth if current_node.right: queue.append((current_node.right, depth + 1)) # Add right child to queue with incremented depth return max_depth"},{"question":"Write a function to calculate the sum of all numbers from 1 to n using recursion. The function should be named \`recursive_sum\` and should take one argument \`n\`, which represents the upper limit of the range to sum.","solution":"def recursive_sum(n): Returns the sum of all numbers from 1 to n using recursion. if n == 1: return 1 else: return n + recursive_sum(n - 1)"},{"question":"Write a function to calculate the sum of all positive integers up to a given number using recursion. The function should be called \`sum_positive_integers\` and it should take an integer \`n\` as its argument. If \`n\` is a positive integer, return the sum of all positive integers up to \`n\`. If \`n\` is not a positive integer, return an error message.","solution":"def sum_positive_integers(n): Calculate the sum of all positive integers up to a given number \`n\` using recursion. Parameters: n (int): The number up to which sum is to be calculated Returns: int or str: Sum of all positive integers up to \`n\` if n is a positive integer, otherwise an error message if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" if n == 1: return 1 else: return n + sum_positive_integers(n - 1)"},{"question":"Write a function to simulate rolling a six-sided dice.","solution":"import random def roll_dice(): Simulates rolling a six-sided dice and returns the result. return random.randint(1, 6)"},{"question":"Write a function to concatenate two strings.","solution":"def concatenate_strings(str1, str2): Concatenates two input strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: A new string which is the concatenation of str1 and str2. return str1 + str2"},{"question":"Write a function to find the shortest path from a given source vertex to all other vertices in a weighted graph. The graph is represented as an adjacency list where each vertex is a key and the value is a list of tuples representing the edge (destination vertex, weight). The function should return a dictionary where keys are the destination vertices and values are the shortest distances from the source vertex to these vertices.","solution":"import heapq def dijkstra(graph, start): Returns the shortest path from a given source vertex to all other vertices in a weighted graph. Parameters: graph (dict): The weighted graph represented as an adjacency list. start (hashable): The source vertex. Returns: dict: The shortest distances from the source vertex to all other vertices. # Priority queue to hold the vertices to explore pq = [(0, start)] # Dictionary to hold the shortest distance to each vertex distances = {vertex: float('inf') for vertex in graph} distances[start] = 0 while pq: current_distance, current_vertex = heapq.heappop(pq) # If the distance in the priority queue is greater than the recorded distance, skip the node if current_distance > distances[current_vertex]: continue # Explore the neighbors of the current vertex for neighbor, weight in graph[current_vertex]: distance = current_distance + weight # Only consider this new path if it's shorter if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"Write a function to print all binary strings of length \`n\` that contain exactly \`k\` ones.","solution":"def generate_binary_strings(n, k): Generates all binary strings of length n with exactly k ones. :param n: Length of the binary string :param k: Number of 1's in the binary string :return: A list of binary strings of length n with exactly k ones result = [] def backtrack(s='', ones=0, zeros=0): # If the current string has the required length and number of ones, add to result if len(s) == n: if ones == k: result.append(s) return # If we can still add more ones if ones < k: backtrack(s + '1', ones + 1, zeros) # If we can still add more zeros if zeros < n - k: backtrack(s + '0', ones, zeros + 1) backtrack() return result"},{"question":"Write a function to identify duplicates in an array of integers and return a new array containing only the integers that appear more than once. If there are no duplicates, the function should return an empty array. The function should be efficient and handle large arrays effectively.","solution":"def find_duplicates(arr): Identifies duplicates in an array of integers and returns a new array containing only the integers that appear more than once. Parameters: arr (list): A list of integers. Returns: list: A list of integers that appear more than once in the input. from collections import Counter counter = Counter(arr) duplicates = [item for item, count in counter.items() if count > 1] return duplicates"},{"question":"Write a function to check if a string is a valid email address. The function should return \`True\` if the email is valid, and \`False\` otherwise. A valid email address follows the format: \`username@domain.extension\`.","solution":"import re def is_valid_email(email): Checks if the input string is a valid email address. A valid email address follows the format: username@domain.extension pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.match(pattern, email) is not None"},{"question":"Write a function to count the number of uppercase and lowercase letters in a given string. The function should return a tuple containing two integers: the first being the count of uppercase letters and the second being the count of lowercase letters.","solution":"def count_upper_lower(s): Returns a tuple containing the count of uppercase and lowercase letters in the given string s. upper_count = 0 lower_count = 0 for char in s: if char.isupper(): upper_count += 1 elif char.islower(): lower_count += 1 return (upper_count, lower_count)"},{"question":"Write a function to calculate the total cost of a shopping list, given the prices of individual items and their quantities.","solution":"def calculate_total_cost(prices, quantities): Calculate the total cost of a shopping list where \`prices\` is a dictionary of item prices and \`quantities\` is a dictionary of item quantities. Args: prices (dict): A dictionary with item names as keys and their respective prices as values. quantities (dict): A dictionary with item names as keys and their respective quantities as values. Returns: float: The total cost of the shopping list. total_cost = 0.0 for item, price in prices.items(): total_cost += price * quantities.get(item, 0) return total_cost"},{"question":"Write a function to sort a list of integers in Python. The function should be able to handle an input list of integers and return a new list that is sorted in ascending order.","solution":"def sort_integers(lst): Sorts a list of integers in ascending order. Parameters: lst (list): A list of integers to be sorted. Returns: list: A new list with the integers sorted in ascending order. return sorted(lst)"},{"question":"Write a function to find the largest product of three numbers in a given list of integers, considering that the list may contain both positive and negative numbers.","solution":"def largest_product_of_three(nums): Returns the largest product of three numbers in the list nums. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function to calculate the sum of all elements in a binary tree using a depth-first search (DFS) approach. The tree is represented using a simple class \`TreeNode\`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_tree(root): Calculate the sum of all elements in a binary tree using DFS. :param root: TreeNode, the root of the binary tree. :return: int, the sum of all elements in the tree. if root is None: return 0 return root.val + sum_of_tree(root.left) + sum_of_tree(root.right)"},{"question":"Write a function to return the first non-repeating character in a string. Write a Python function for this problem.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If no such character exists, returns None. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a function to calculate the binomial coefficient, commonly used in probability and combinatorics. The function should be named \`calculate_combinations\` and should take two parameters: \`n\` (total number of items) and \`k\` (number of items to choose).","solution":"def calculate_combinations(n, k): Returns the binomial coefficient (n choose k). Parameters: n (int): Total number of items k (int): Number of items to choose Returns: int: The binomial coefficient from math import factorial if k > n or n < 0 or k < 0: return 0 return factorial(n) // (factorial(k) * factorial(n - k))"}]`),N={name:"App",components:{PoemCard:I},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},P={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},E=["disabled"],S={key:0},L={key:1};function z(i,e,u,f,s,a){const m=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",P,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),r(v,null,y(a.displayedPoems,(o,p)=>(n(),w(m,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",j,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,E)):l("",!0)])}const D=c(N,[["render",z],["__scopeId","data-v-a832218b"]]),Y=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"grok/10.md","filePath":"grok/10.md"}'),B={name:"grok/10.md"},H=Object.assign(B,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{Y as __pageData,H as default};
