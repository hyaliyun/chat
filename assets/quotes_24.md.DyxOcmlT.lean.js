import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(s,e,u,p,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const O=d(k,[["render",N],["__scopeId","data-v-ea5c90a3"]]),S=JSON.parse('[{"question":"A factory uses a robotic machine to assemble products. The robot has to perform a series of commands to complete the assembly of a product. Each command is represented by a single lowercase letter of the alphabet, where \'a\' means a specific action, \'b\' means another specific action, and so on up to \'z\'. The robot can perform a series of commands sequentially. However, the robot\'s memory is limited, and it can remember only a certain number of commands at a time. If the series of commands given to the robot forms a subsequence that has a length greater than the memory limit of the robot, the robot fails to complete the assembly process. You need to write a program that checks if the robot can complete the assembly process given its memory limit. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of commands in the series. The second line contains a string of n lowercase letters, representing the series of commands. The third line contains an integer m (1 ≤ m ≤ 100), representing the memory limit of the robot. Output Print \\"YES\\" if the robot can complete the assembly process without failing, and \\"NO\\" otherwise. Example Input 8 abcdefgh 5 Output NO Explanation: The length of the command series (8) is greater than the memory limit (5), so the robot will fail to complete the assembly process. Example Input 5 abcde 5 Output YES Explanation: The length of the command series (5) is equal to the memory limit (5), so the robot can complete the assembly process.","solution":"def can_complete_assembly(n, commands, m): Returns \\"YES\\" if the robot can complete the assembly process given its memory limit, otherwise returns \\"NO\\". if n <= m: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid representing a map where each cell can be either land or water. The grid cells are connected horizontally and vertically. Your task is to find all distinct islands in the grid. An island is a group of connected land cells (1s), and an island is considered distinct based on its shape, regardless of its position in the grid. The distinct islands should be identified and counted based on their shapes and configurations within the grid. Example 1: Input: [ [1, 1, 0, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0] ] Output: 3 Explanation: There are 3 distinct islands in the grid. - The first island is formed by the cells (0,0), (0,1), (1,0), (2,0), (2,1). - The second island is formed by the cells (1,3), (1,4), (2,3). - The third island is formed by the cells (4,0), (4,1), (4,2). Example 2: Input: [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] Output: 1 Explanation: There is only 1 distinct island in the grid. All 1s are separate but have the same island shape configuration. Example 3: Input: [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] Output: 0 Explanation: There are no islands in the grid. Constraints: 1 <= grid.length, grid[0].length <= 300 grid[i][j] is either 0 (water) or 1 (land).","solution":"def numDistinctIslands(grid): Returns the number of distinct islands in the grid. An island is represented as a group of connected land cells (1s). Distinct islands are based on their shapes and disregards their positions. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c, r0, c0, path): if (r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or visited[r][c]): return visited[r][c] = True path.append((r - r0, c - c0)) dfs(r + 1, c, r0, c0, path) dfs(r - 1, c, r0, c0, path) dfs(r, c + 1, r0, c0, path) dfs(r, c - 1, r0, c0, path) unique_islands = set() for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: path = [] dfs(r, c, r, c, path) unique_islands.add(tuple(path)) return len(unique_islands)"},{"question":"A large company organizes an annual party on a Friday and wants to ensure that employees who work on-site and remotely are equally considered in the allocation of budgets and swag bags. Each employee working remotely or on-site should receive one swag bag and an equal spend from the total budget allocated for swag. If the total budget cannot be equally divided, the company would round down to the nearest dollar for each swag spend and cover the discrepancy with a reserve fund. The company needs your help to distribute the swag uniformly. Write a program to help the company determine how much each swag bag should be worth in dollars and how much will be kept in the reserve fund due to the rounding down. -----Input----- The first line of input contains a single integer T (1 leq T leq 1000), denoting the number of test cases. Each of the next T lines contains two integers N (1 leq N leq 10^6) and B (1 leq B leq 10^9) separated by a single space, where N is the number of employees and B is the total budget in dollars for that test case. -----Output----- For each test case, print a single line with two integers. The first integer is the amount of money each swag bag should be worth in dollars, and the second integer is the total amount of money kept in the reserve fund. -----Examples----- Sample Input: 3 10 100 7 75 15 200 Sample Output: 10 0 10 5 13 5","solution":"def allocate_budget(T, test_cases): results = [] for i in range(T): N, B = test_cases[i] swag_value = B // N reserve_fund = B % N results.append((swag_value, reserve_fund)) return results"},{"question":"You are given a string containing letters of the alphabet and digits. Each letter should be treated as both uppercase and lowercase versions (case insensitive), and each of these characters has a corresponding digit weight (e.g., \'a\' and \'A\' map to 1, \'b\' and \'B\' map to 2, ... , \'z\' and \'Z\' map to 26). Digits in the string retain their own value. Your task is to calculate the total weight of the string by summing the weights of each character. -----Input:----- - The first line contains T, the number of test cases. Then follow the test cases. - Each test case contains a single string S. -----Output:----- For each test case, print the total weight of the string in a single line. -----Constraints----- - 1 leq T leq 10^3 - 1 leq |S| leq 10^5 - The string S contains only alphabets and digits. -----Sample Input:----- 2 aB2 zZ9 -----Sample Output:----- 5 61 -----EXPLANATION:----- For the first string: \'a\' and \'A\' have a weight of 1 \'b\' and \'B\' have a weight of 2 \'2\' retains its weight of 2 Total weight = 1 + 2 + 2 = 5 For the second string: \'z\' and \'Z\' have a weight of 26 \'9\' retains its weight of 9 Total weight = 26 + 26 + 9 = 61","solution":"def calculate_total_weight(T, test_cases): results = [] for case in test_cases: total_weight = 0 for ch in case: if ch.isdigit(): total_weight += int(ch) elif ch.isalpha(): total_weight += ord(ch.lower()) - ord(\'a\') + 1 results.append(total_weight) return results"},{"question":"The kingdom of Geeklandia is represented as an undirected graph with `n` cities connected by `m` bidirectional roads. The cities are numbered from `1` to `n`. Each road has a certain length (positive integer). The citizens of Geeklandia want to know the shortest route between any two cities in the kingdom. You are tasked to help them by answering multiple queries about the shortest distance between given pairs of cities. Write a program to determine the shortest distance between pairs of cities in a given representation of Geeklandia. -----Input----- The first line contains two integers `n` (`2 ≤ n ≤ 100`) and `m` (`1 ≤ m ≤ 1000`) — the number of cities and the number of roads, respectively. The next `m` lines each contain three integers `u`, `v`, `w` (`1 ≤ u, v ≤ n`, `u ≠ v`, `1 ≤ w ≤ 1000`), indicating there is a road between city `u` and city `v` with length `w`. The next line contains one integer `q` (`1 ≤ q ≤ 1000`) — the number of queries. Each of the next `q` lines contains two integers `a` and `b` (`1 ≤ a, b ≤ n`) — the cities between which the shortest distance is to be found. -----Output----- For each query, print the shortest distance between the cities `a` and `b`. If there is no path between the cities, print `-1`. -----Examples----- Input 4 4 1 2 4 1 3 2 2 3 1 3 4 7 3 1 4 2 4 1 1 Output 9 8 0 -----Note----- Let\'s consider the given example: We have 4 cities and 4 roads: - Road from city 1 to city 2 with length 4 - Road from city 1 to city 3 with length 2 - Road from city 2 to city 3 with length 1 - Road from city 3 to city 4 with length 7 With the given queries: 1. The shortest path from city 1 to city 4 is 1 -> 3 -> 4, with a total length of `2 + 7 = 9`. 2. The shortest path from city 2 to city 4 is 2 -> 3 -> 4, with a total length of `1 + 7 = 8`. 3. The path from city 1 to city 1 is `0` since it\'s the same city.","solution":"def floyd_warshall(n, edges): Floyd-Warshall algorithm to determine the shortest distance between all pairs of nodes. # Initialize distance array dist = [[float(\'inf\')] * (n + 1) for _ in range(n + 1)] # Distance from any node to itself is 0 for i in range(1, n + 1): dist[i][i] = 0 # Fill initial distances with given edges for u, v, w in edges: dist[u][v] = w dist[v][u] = w # Floyd-Warshall algorithm for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_distances(n, edges, queries): dist = floyd_warshall(n, edges) results = [] for a, b in queries: if dist[a][b] != float(\'inf\'): results.append(dist[a][b]) else: results.append(-1) return results"},{"question":"Given a string S, your objective is to determine the minimum number of deletions required to make the sequence balanced. A sequence is considered balanced if it contains equal number of \'X\' and \'Y\' characters. Input: A single string S composed of only characters \'X\' and \'Y\'. Output: An integer representing the minimum number of deletions needed to balance the sequence. Constraints: 1 ≤ |S| ≤ 10^6 (where |S| is the length of the string S) Sample Test Case: SAMPLE INPUT \'XXXY\' SAMPLE OUTPUT 2 Explanation: The string \'XXXY\' has 3 \'X\' characters and 1 \'Y\' character. To balance the sequence, you can remove 2 \'X\' characters, resulting in the balanced sequence \'XY\'.","solution":"def min_deletions_to_balance(S): This function calculates the minimum number of deletions required to make the string S balanced, where a balanced string contains equal number of \'X\' and \'Y\' characters. count_X = S.count(\'X\') count_Y = S.count(\'Y\') # The number of deletions needed to balance the string is the absolute difference # between the number of \'X\' and \'Y\' characters. return abs(count_X - count_Y) # Example usage: # print(min_deletions_to_balance(\'XXXY\')) # Expected output: 2"},{"question":"A researcher is studying the migration patterns of birds across a mountainous region. The region can be represented as a series of connected peaks and valleys defined by their coordinates. The migration path will start at the initial position of the bird and continue until it reaches the highest peak in the region. The bird can only move from one point to another if the destination point is at a higher altitude than the current point. Given the coordinates of the points in the region, write a program to determine the minimum possible horizontal distance the bird will fly to reach the highest peak from the starting position. The altitude at each point is guaranteed to be unique. **Input:** The input consists of multiple datasets. Each dataset starts with an integer N (2 ≤ N ≤ 100), which specifies the number of points in the region. The following N lines contain two integers xi and yi (0 ≤ xi, yi ≤ 1000), which describe the horizontal distance and altitude of each point, respectively. The starting position of the bird is always at the first point in the dataset, and the highest peak is one of the points within the dataset. The end of the input is indicated by a line containing a single zero. **Output:** For each dataset, output the minimum horizontal distance the bird needs to fly to reach the highest peak from the starting position. **Example:** **Input:** 5 0 0 3 1 6 5 9 8 12 4 3 0 2 3 6 6 10 4 0 0 2 3 4 7 8 10 0 **Output:** 9 6 8 **Explanation:** For the first dataset, the bird starts at (0, 0) and the highest peak is at (9, 8). The bird needs to fly through points (0, 0) → (3, 1) → (6, 5) → (9, 8), resulting in a total horizontal distance of 9. For the second dataset, the bird can simply fly from (0, 2) → (3, 6) → (6, 10), resulting in a total horizontal distance of 6. For the third dataset, the bird flies from (0, 0) → (2, 3) → (4, 7) → (8, 10), totaling 8 units of horizontal distance.","solution":"def min_horizontal_distance(n, coordinates): Determines the minimum horizontal distance the bird needs to fly to reach the highest peak. Parameters: n (int): Number of points coordinates (list of tuples): List of (x, y) coordinates of the points Returns: int: Minimum horizontal distance to the highest peak sorted_by_altitude = sorted(coordinates, key=lambda x: x[1], reverse=True) highest_peak = sorted_by_altitude[0] position = coordinates[0] total_distance = 0 while position != highest_peak: next_positions = [p for p in coordinates if p[1] > position[1]] next_position = min(next_positions, key=lambda x: x[0]) total_distance += abs(next_position[0] - position[0]) position = next_position return total_distance def process_datasets(data): Processes multiple datasets to determine the minimum horizontal distance for each. Parameters: data (list): List of strings containing the datasets Returns: list: List of results for each dataset results = [] index = 0 while index < len(data): n = int(data[index]) if n == 0: break coordinates = [] for _ in range(n): index += 1 x, y = map(int, data[index].split()) coordinates.append((x, y)) results.append(min_horizontal_distance(n, coordinates)) index += 1 return results # Example usage: # input_data = [ # \\"5\\", # \\"0 0\\", \\"3 1\\", \\"6 5\\", \\"9 8\\", \\"12 4\\", # \\"3\\", # \\"0 2\\", \\"3 6\\", \\"6 10\\", # \\"4\\", # \\"0 0\\", \\"2 3\\", \\"4 7\\", \\"8 10\\", # \\"0\\" # ] # print(process_datasets(input_data)) # Output: [9, 6, 8]"},{"question":"A researcher is analyzing a set of experimental data collected over several days. Each data entry is recorded with a date and an integer representing the value observed on that day. The researcher wants to know the maximum observed value for each unique date. Write a program that processes the data and outputs the maximum value observed for each date. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of data entries. The next n lines contain the data entries. Each data entry consists of a date and a value separated by a space. The date is given in the format \'YYYY-MM-DD\' and is guaranteed to be a valid date. The value is an integer (−10000 ≤ value ≤ 10000). Output For each unique date in the input, output the date followed by the maximum value observed on that date. Output the dates in the order they appear in the input. Examples Input 5 2023-01-01 10 2023-01-01 5 2023-01-02 -2 2023-01-02 3 2023-01-02 1 Output 2023-01-01 10 2023-01-02 3 Input 3 2021-12-25 42 2021-12-25 -5 2021-12-26 7 Output 2021-12-25 42 2021-12-26 7","solution":"def max_observed_values(n, data_entries): Finds the maximum observed value for each date from the given data entries. :param n: number of data entries :param data_entries: list of tuples where each tuple contains a date and an integer value :return: list of tuples containing unique dates and their corresponding maximum observed values date_values = {} for date, value in data_entries: if date not in date_values: date_values[date] = value else: date_values[date] = max(date_values[date], value) result = [(date, date_values[date]) for date in date_values] return result # Sample Input: # n = 5 # data_entries = [(\'2023-01-01\', 10), (\'2023-01-01\', 5), (\'2023-01-02\', -2), (\'2023-01-02\', 3), (\'2023-01-02\', 1)] # Expected Output: # [(\'2023-01-01\', 10), (\'2023-01-02\', 3)]"},{"question":"You have been provided a list of integers, in which each integer represents a vote for a particular candidate in an election. Your task is to determine the candidate (integer) that received the maximum number of votes. If there is a tie, the candidate with the lower integer value wins. Input: The first line of input contains an integer, n, which denotes the total number of votes. The second line contains n space-separated integers, where each integer represents a vote for a candidate. Output: Output the candidate (integer) that received the most votes. If there is a tie, output the smallest integer among the tied candidates. Constraints: 1 ≤ n ≤ 100000 1 ≤ vote ≤ 100000 SAMPLE INPUT 10 1 2 2 3 3 3 1 2 3 2 SAMPLE OUTPUT 2 Explanation Test Case #1: Candidate 2 received 4 votes, candidate 3 received 4 votes, and candidate 1 received 2 votes. Since there is a tie between candidates 2 and 3 for the highest number of votes, the smallest integer (candidate 2) is chosen as the winner.","solution":"def find_winner(n, votes): Determines the candidate with the maximum votes. If there\'s a tie, the candidate with the lower integer value wins. Args: n (int): Total number of votes. votes (list of int): List of votes. Returns: int: Candidate who received the most votes. from collections import defaultdict vote_count = defaultdict(int) for vote in votes: vote_count[vote] += 1 max_votes = -1 winner = None for candidate, count in vote_count.items(): if count > max_votes or (count == max_votes and candidate < winner): max_votes = count winner = candidate return winner"},{"question":"Given a string S consisting of lowercase English letters, you are allowed to perform any number of swaps of any two characters in the string. You need to determine the lexicographically smallest and largest strings that can be formed by performing any number of swaps on S. Input The first line contains a string S (1 ≤ |S| ≤ 100,000). Output Print two lines. The first line should contain the lexicographically smallest string, and the second line should contain the lexicographically largest string. Example Input bcda Output abcd dcba","solution":"def find_lexicographical_bounds(s): Given a string s, return the lexicographically smallest and largest strings that can be formed by any number of swaps of any two characters. Arguments: s -- The input string consisting of lowercase English letters. Returns: A tuple (smallest, largest) where: - smallest is the lexicographically smallest string - largest is the lexicographically largest string smallest = \'\'.join(sorted(s)) largest = \'\'.join(sorted(s, reverse=True)) return smallest, largest"},{"question":"Jack is an enthusiastic competitive programmer. He often encounters problems that involve determining whether a sequence is the same forwards and backwards. He needs a program to help him quickly identify palindromes. Your task is to write a function ```isPalindrome```(C# ```IsPalindrome```, Python ```is_palindrome```) that takes a string and returns a boolean indicating whether the string is a palindrome. The function should ignore case, spaces, and punctuation. Example: ``` isPalindrome(\\"A man, a plan, a canal, Panama!\\"); is_palindrome(\\"A man, a plan, a canal, Panama!\\") IsPalindrome(\\"A man, a plan, a canal, Panama!\\"); // should return True ```","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring case, spaces, and punctuation. # Use regex to remove all non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[W_]\', \'\', s).lower() # Check if cleaned string is the same forwards and backwards return cleaned == cleaned[::-1]"},{"question":"You are tasked with writing a function that checks if a word can be formed using characters from a given magazine string. Assume each character in the magazine string can only be used once in forming the word. Write a function `can_form_word(magazine: str, word: str) -> bool` that takes in two strings: a `magazine` string and a `word` string, and returns a boolean indicating whether the `word` can be formed using the letters from `magazine`. Note: - The function should be case-insensitive. - The characters in the `word` must appear in the magazine the same number of times or fewer than they appear in the magazine string. Example: ``` magazine = \\"The quick brown fox jumps over the lazy dog\\" word = \\"lazy\\" ``` The function should return `True`, since all the characters in the word `\\"lazy\\"` can be found in the magazine string. Example 2: ``` magazine = \\"Hello World\\" word = \\"worm\\" ``` The function should return `False`, since the character \'m\' is not present in the magazine string.","solution":"def can_form_word(magazine: str, word: str) -> bool: from collections import Counter magazine = magazine.lower() word = word.lower() magazine_counter = Counter(magazine) word_counter = Counter(word) for char, count in word_counter.items(): if magazine_counter[char] < count: return False return True"},{"question":"Given an array of integers, the task is to move all the negative numbers to the end of the array while maintaining the order of positive numbers and zeros. Example 1: Input: arr = [1, -2, 3, -4, 5, -6, 7] Output: [1, 3, 5, 7, -2, -4, -6] Example 2: Input: arr = [-1, -2, -3, 4, 5, 6] Output: [4, 5, 6, -1, -2, -3] Your task: Your task is to complete the function moveNegativesToEnd() which takes a single array of integers as input and returns the modified array. You need not take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 -10^5 <= arr[i] <= 10^5","solution":"def moveNegativesToEnd(arr): Move all negative numbers to the end of the array while maintaining the order of positive numbers and zeros. Parameters: arr (List[int]): Input array of integers. Returns: List[int]: Array with all negative numbers moved to the end. n = len(arr) result = [] # Collect positive numbers and zeros for num in arr: if num >= 0: result.append(num) # Collect negative numbers for num in arr: if num < 0: result.append(num) return result"},{"question":"Input The input is given from Standard Input in the following format: > T > x_1 y_1 theta_1 > x_2 y_2 theta_2 > ... > x_T y_T theta_T Output * Print the final coordinates of each car after following its respective commands. Each coordinate should be printed on a new line. Description A number of cars are placed in a 2D grid. Each car starts at a given coordinate and moves in a specific direction (theta) for a given number of steps. You need to determine the final coordinates of each car after all movements are completed. Each car can move up, down, left, or right: - theta = 0: Move right - theta = 1: Move up - theta = 2: Move left - theta = 3: Move down Constraints * 1 le T le 100,000 * -10^9 le x_i, y_i le 10^9 * 0 le theta_i le 3 * Each command sequence is bounded within the given coordinates. Examples Input 5 1 2 0 3 4 1 -1 -2 2 5 5 3 0 0 1 Output 2 2 3 5 -2 -2 5 4 0 1 Input 3 0 0 0 -1 -1 2 2 3 1 Output 1 0 -2 -1 2 4","solution":"def final_coordinates(T, commands): results = [] for command in commands: x, y, theta = command if theta == 0: # Move right x += 1 elif theta == 1: # Move up y += 1 elif theta == 2: # Move left x -= 1 elif theta == 3: # Move down y -= 1 results.append((x, y)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) commands = [] for i in range(1, T + 1): x, y, theta = map(int, lines[i].split()) commands.append((x, y, theta)) return T, commands"},{"question":"Write a function that reverses the digits of an integer. If the reversed integer overflows a 32-bit signed integer, return 0. Input The function receives an integer x, where -2^31 ≤ x ≤ 2^31 - 1. Output The function should return the reversed integer, or 0 if it causes an overflow. Example reverse_integer(123) # should return 321 reverse_integer(-123) # should return -321 reverse_integer(1534236469) # should return 0 (because the reversed integer overflows a 32-bit signed integer)","solution":"def reverse_integer(x): Reverses the digits of an integer x. Returns 0 if the reversed integer overflows a 32-bit signed integer. # Define the boundaries for a 32-bit signed integer INT_MAX = 2**31 - 1 INT_MIN = -2**31 # Initialize result as 0 result = 0 negative = x < 0 x = abs(x) while x != 0: pop = x % 10 x //= 10 if result > (INT_MAX - pop) // 10: return 0 result = result * 10 + pop return result if not negative else -result"},{"question":"In a small village, there is a festival coming up and the organizing committee has planned various events that need to be scheduled. To avoid clashes and to ensure maximum participation, they want to schedule the events in such a way that no two events overlap. Each event is defined by a start time and an end time, and all events are scheduled on the same day. You are required to determine the maximum number of non-overlapping events that can be held during the festival. -----Input----- The first line of the input contains a single integer 1 leq N leq 1000, the number of events. Each of the next N lines contains two integers 0 leq s < e leq 10000, representing the start and end times of an event, respectively. -----Output----- Output a single integer, the maximum number of non-overlapping events that can be scheduled. -----Examples----- Sample Input: 5 1 3 2 5 4 6 6 8 9 10 Sample Output: 4","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be scheduled. :param events: List of tuples where each tuple contains two integers (start, end) of an event :type events: List[Tuple[int, int]] :return: Maximum number of non-overlapping events :rtype: int if not events: return 0 # Sort events by their end times events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given a string S, determine if it contains only digits and characters \'a\' to \'e\'. You need to return 1 if the string satisfies the condition, otherwise return 0. Example 1: Input: S = \\"12b34\\" Output: 1 Explanation: The string \\"12b34\\" contains only digits and characters from \'a\' to \'e\'. Example 2: Input: S = \\"12x34\\" Output: 0 Explanation: The string \\"12x34\\" contains the character \'x\' which is not in the range \'a\' to \'e\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkString() which takes the string S as input and returns 1 if the string contains only digits and characters \'a\' to \'e\'. Else, it returns 0. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(1). Constraints: 1 <= |S| <= 10^5","solution":"def checkString(S): Determines if the string S contains only digits and characters \'a\' to \'e\'. Parameters: S (str): The input string. Returns: int: 1 if valid, otherwise 0. for char in S: if not (char.isdigit() or \'a\' <= char <= \'e\'): return 0 return 1"},{"question":"A school has decided to award scholarships to students based on certain criteria. The criteria are as follows: 1. The student must have a GPA of at least 3.5. 2. The student must have completed at least 100 hours of volunteer work. 3. The student must have a recommendation letter from at least one teacher. You are tasked with writing a function that evaluates a list of students and determines how many of them are eligible for the scholarship. Each student is represented by a dictionary with the following keys: - `name`: The name of the student (a string). - `gpa`: The GPA of the student (a float). - `volunteer_hours`: The number of volunteer hours completed by the student (an integer). - `recommendations`: The list of recommendation letters (each letter is represented as a string). Write a function `count_eligible_students(students)` that takes a list of student dictionaries and returns an integer representing the number of students eligible for the scholarship. -----Input----- - A list of dictionaries, where each dictionary represents a student with the keys `name`, `gpa`, `volunteer_hours`, and `recommendations`. -----Output----- - Return an integer, the number of students eligible for the scholarship. -----Examples----- Input [ {\\"name\\": \\"Alice\\", \\"gpa\\": 3.8, \\"volunteer_hours\\": 120, \\"recommendations\\": [\\"Mr. Smith\\"]}, {\\"name\\": \\"Bob\\", \\"gpa\\": 3.4, \\"volunteer_hours\\": 150, \\"recommendations\\": [\\"Ms. Johnson\\"]}, {\\"name\\": \\"Charlie\\", \\"gpa\\": 3.6, \\"volunteer_hours\\": 80, \\"recommendations\\": []}, {\\"name\\": \\"David\\", \\"gpa\\": 3.9, \\"volunteer_hours\\": 110, \\"recommendations\\": [\\"Mr. Lee\\", \\"Mrs. Clark\\"]} ] Output 2","solution":"def count_eligible_students(students): Returns the number of students eligible for the scholarship. Eligibility criteria: 1. The student must have a GPA of at least 3.5. 2. The student must have completed at least 100 hours of volunteer work. 3. The student must have a recommendation letter from at least one teacher. :param students: List of dictionaries, where each dictionary represents a student :return: Integer, number of students eligible for the scholarship eligible_count = 0 for student in students: if ( student[\'gpa\'] >= 3.5 and student[\'volunteer_hours\'] >= 100 and len(student[\'recommendations\']) > 0 ): eligible_count += 1 return eligible_count"},{"question":"In a land far away, there exist towns connected by highways. The king of this land has decreed that all citizens must be able to travel between any two towns. To achieve this, he plans to build some additional highways. Each highway connects exactly two towns and has a unique length. The objective is to minimize the total length of additional highways needed to ensure that all towns are connected, so that there exists a path (direct or indirect) between any pair of towns. You are given the number of towns and a list of existing highways with their lengths. Your task is to determine the minimum length of new highways required to make all the towns connected. -----Input----- The first line of input contains two integers n and m (2 leq n leq 10^5, 0 leq m leq 10^5), where n is the number of towns and m is the number of existing highways. Each of the following m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6), where u and v are the towns connected by a highway of length w. It is guaranteed that there are no two highways with the same pair of towns, and no two highways have the same length between the same pair of towns. -----Output----- The output should contain exactly one line with a single integer: the minimum total length of additional highways needed to ensure all towns are connected. If the towns are already connected, output 0. -----Examples----- Sample Input 1: 4 2 1 2 3 3 4 5 Sample Output 1: 8 Sample Input 2: 4 3 1 2 3 2 3 4 3 4 5 Sample Output 2: 0","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) # Path compression return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_highway_length(n, highways): parent = [i for i in range(n)] rank = [0] * n highways.sort(key=lambda x: x[2]) minimum_length = 0 for u, v, w in highways: if find(parent, u - 1) != find(parent, v - 1): union(parent, rank, u - 1, v - 1) minimum_length += w connected_components = len(set(find(parent, i) for i in range(n))) if connected_components == 1: return 0 else: return minimum_length def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) highways = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) highways.append((u, v, w)) index += 3 print(minimum_highway_length(n, highways)) # Sample test execution # Note: In real scenarios, the input would come from stdin or file. if __name__ == \\"__main__\\": main()"},{"question":"You are a botanist studying the growth patterns of plants in a linear garden. The garden is divided into N sections in a straight line, each section containing a single plant. You are provided with an array P of length N, where P[i] represents the height of the plant in the i-th section. Your job is to determine the optimal way to trim the plants so that the heights of the plants along the garden follow a non-decreasing order. # Operation You can perform an arbitrary number (including zero) of the following operation: Choose an integer i (1 ≤ i < N) and trim the plant at section i such that: - The height of the plant at section i should be less than or equal to the height of the plant at section i+1. - Trim the height of the plant P[i] to any value between its current height and the height of the plant P[i+1]. # Objective Find the minimum number of trimming operations required to ensure that the plant heights form a non-decreasing sequence. If it\'s impossible to achieve this by any number of trimmings, return -1. # Input The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of the array P. The second line contains N space-separated integers P₁, P₂, ..., Pₙ. # Output For each test case, print a single line containing one integer — the minimum number of trimming operations required to make the array non-decreasing, or -1 if it\'s impossible. # Constraints - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 10⁵ - 1 ≤ P[i] ≤ 10⁹ for each valid i # Sample Input 1 ``` 1 7 3 4 2 5 4 5 6 ``` # Sample Output 1 ``` 2 ``` # Explanation 1 Example case 1: The given array [3, 4, 2, 5, 4, 5, 6] is not non-decreasing. One optimal way to make it non-decreasing is to perform the following operations: - Trim the second plant from height 4 to height 2. The array becomes [3, 2, 2, 5, 4, 5, 6]. - Trim the fourth plant from height 5 to height 4. The array becomes [3, 2, 2, 4, 4, 5, 6]. Thus, it takes a minimum of 2 trimming operations to make the array non-decreasing.","solution":"def min_trims_to_non_decreasing(P): Returns the minimum number of trimming operations required to make the array P non-decreasing. N = len(P) trims = 0 for i in range(1, N): if P[i-1] > P[i]: if i == N - 1 or P[i] >= P[i+1]: # If this is the last element or it already forms a non-decreasing sequence with the next one return -1 # Impossible to fix else: trims += 1 P[i-1] = P[i] # Effectively trim element at position i-1 to the value of P[i] return trims def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] P = test_cases[i][1] result = min_trims_to_non_decreasing(P) results.append(result) return results"},{"question":"Given an integer array `nums` and an integer `k`, you need to find the length of the shortest subarray whose sum is at least `k`. If no such subarray exists, return -1. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array nums. - The second line contains n integers representing the elements of the array nums. - The third line contains a single integer k (1 ≤ k ≤ 10^9). Output Print a single integer, the length of the shortest subarray with sum at least k. If no such subarray exists, output -1. Example Input 10 2 3 1 2 4 3 1 1 1 6 7 Output 2 Input 5 1 2 3 4 5 15 Output 5 Input 5 1 2 3 4 5 16 Output -1","solution":"from collections import deque def shortest_subarray_with_sum_at_least_k(nums, k): Returns the length of the shortest subarray with sum at least k. If no such subarray exists, returns -1. n = len(nums) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + nums[i] result = float(\'inf\') deq = deque() for i in range(n + 1): while deq and prefix_sum[i] - prefix_sum[deq[0]] >= k: result = min(result, i - deq.popleft()) while deq and prefix_sum[i] <= prefix_sum[deq[-1]]: deq.pop() deq.append(i) return result if result != float(\'inf\') else -1"},{"question":"A zoo is planning to build an enclosure for its new inhabitant, a highly intelligent monkey. The monkey can plan and remember its jumps between certain pillars in the enclosure, which are arranged in a straight line and can be represented by their positions on a 1-dimensional coordinate plane. The monkey can only jump between pillars where the distance between them is an exact multiple of d. The zookeepers need your help to determine if it is possible for the monkey to jump from the first pillar to the last, given the specified constraint on the jump distances. Your task is to write a program that determines whether the monkey can reach the last pillar starting from the first pillar using the allowable jumps. Input The first line contains two integers n and d (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ d ≤ 10^6) — the number of pillars, and the exact jump distance that needs to be a multiple of d. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_1 < p_2 < ... < p_n ≤ 10^9) — the positions of the pillars. Output Print \\"YES\\" if the monkey can jump from the first pillar to the last pillar, or \\"NO\\" if it is not possible. Example Input 5 3 1 4 7 10 13 Output YES Input 4 5 1 3 6 8 Output NO Note In the first example, the monkey can jump from pillar 1 to pillar 4 (distance 3), from pillar 4 to pillar 7 (distance 3), from pillar 7 to pillar 10 (distance 3), and finally from pillar 10 to pillar 13 (distance 3). In the second example, there are no allowable jumps that satisfy the condition as no distances between consecutive pillars are multiples of 5. Hence, the monkey cannot reach the last pillar.","solution":"def can_monkey_reach(n, d, positions): Determines if the monkey can reach the last pillar starting from the first pillar using jumps that are exact multiples of d. :param n: int - the number of pillars :param d: int - the exact jump distance that needs to be a multiple of d :param positions: list of int - positions of the pillars :return: str - \\"YES\\" if the monkey can reach the last pillar, \\"NO\\" otherwise for i in range(n - 1): if (positions[i + 1] - positions[i]) % d != 0: return \\"NO\\" return \\"YES\\""},{"question":"Shirley has a grid composed of integer values instead of binary values. The grid has N rows and M columns with elements ranging from 0 to 9. Element at row i (1 ≤ i ≤ N) and column j (1 ≤ j ≤ M) is denoted as G_{ij}. She performs Q operations on the grid. Each operation can be of two types: 1. Addition operation represented by four integers x_{1}, y_{1}, x_{2}, y_{2} and an integer k which defines the rectangle, where (x_{1}, y_{1}) stands for the coordinates of the top left cell of the rectangle, while (x_{2}, y_{2}) stands for the coordinates of the bottom right cell. You need to add k to all the elements that are located fully inside the query rectangle. 2. Set operation represented by four integers x_{1}, y_{1}, x_{2}, y_{2} and an integer v which defines the rectangle, where (x_{1}, y_{1}) stands for the coordinates of the top left cell of the rectangle, while (x_{2}, y_{2}) stands for the coordinates of the bottom right cell. You need to set all the elements that are located fully inside the query rectangle to v. Finally, print the grid after performing all the operations. Note: x_{1} represents the row number while y_{1} represents the column number. -----Input:----- - The first line of the input contains two integers N and M — the number of rows and the number of columns in the grid. - Each of the next N lines contains a string of length M, where the j^{th} character of i^{th} line denotes the value of G_{i,j}. - The next line contains an integer Q — the number of operations. - Then follow Q lines with operation descriptions. Each of them contains five space-separated integers. The first integer indicates the type of operation (1 for addition, 2 for set), followed by x_{1}, y_{1}, x_{2}, y_{2} which are the coordinates of the rectangle, and k or v which is the value to be added or set respectively. -----Output:----- Print the grid, in the form of N strings, after performing all the operations. -----Constraints----- - 1 leq N,M leq 1000 - 0 leq G_{ij} leq 9 - 1 leq Q leq 10^6 - 1 leq x_{1} leq x_{2} leq N - 1 leq y_{1} leq y_{2} leq M - 0 leq k,v leq 9 -----Sample Input:----- 2 2 12 34 3 1 1 1 1 1 2 2 2 2 2 2 5 1 1 2 2 3 1 -----Sample Output:----- 45 77 -----Explanation:----- Example case 1: After processing the 1st operation (addition operation) 1 1 1 1 2, the grid becomes: [ begin{bmatrix} 3 & 2 3 & 4 end{bmatrix} ] After processing the 2nd operation (set operation) 2 2 2 2 5, the grid becomes: [ begin{bmatrix} 3 & 2 3 & 5 end{bmatrix} ] After processing the 3rd operation (addition operation) 1 1 2 2 1, the grid becomes: [ begin{bmatrix} 4 & 3 4 & 6 end{bmatrix} ] We need to output the grid after processing all operations.","solution":"def process_grid_operations(N, M, grid, Q, operations): for op in operations: op_type, x1, y1, x2, y2, val = op for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if op_type == 1: grid[i][j] += val elif op_type == 2: grid[i][j] = val return grid # Reading input def main(): import sys input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) M = int(data[idx+1]) idx += 2 grid = [] for i in range(N): grid.append(list(map(int, data[idx]))) idx += 1 Q = int(data[idx]) idx += 1 operations = [] for _ in range(Q): operations.append(list(map(int, data[idx:idx+6]))) idx += 6 result = process_grid_operations(N, M, grid, Q, operations) for row in result: print(\\"\\".join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"Problem: You are tasked with managing the delivery schedules of a busy restaurant. Every day, the restaurant receives delivery requests for different food items from a set of customers. Each request consists of a customer\'s name and the item they want. To ensure a smooth and efficient delivery process, the restaurant wants to prioritize the delivery of individual customers without repeating any item requests from the same customer. Your job is to create a list of delivery schedules where each customer appears only once with the first item they requested. This list should be sorted in lexicographical order by the customer\'s name. Input: The first line contains an integer N, the number of delivery requests. The next N lines each contain a customer\'s name followed by the food item they requested, with a space separating the two strings. Output: On the first line, print the total number of unique customers with their requests. Then, for each customer, print their name followed by the food item they requested, separated by a space. Each output should be on a new line and sorted lexicographically by the customer\'s name. Constraints: 1 <= N <= 10^6 1 <= Length of customer\'s name, food item <= 20 Customer\'s names consist of lowercase English alphabets (a-z). Food items can be any printable characters except for spaces. SAMPLE INPUT 8 john pizza alice burger john pasta maria salad peter sushi alice fries maria soup peter tempura SAMPLE OUTPUT 4 alice burger john pizza maria salad peter sushi","solution":"def delivery_schedule(requests): Generates a delivery schedule based on unique customer requests. Parameters: requests (list of tuples): A list of (customer_name, food_item) tuples. Returns: list: A sorted list of (customer_name, food_item) tuples where each customer appears once with their first requested food item. seen_customers = {} for customer, item in requests: if customer not in seen_customers: seen_customers[customer] = item sorted_requests = sorted(seen_customers.items()) return sorted_requests"},{"question":"Given an array of integers ARR of length N, and a target integer T, your task is to determine if there are any two distinct indices i and j (i.e., i ≠ j) in the array such that the sum of the integers at these indices equals the target T. Return \\"YES\\" if there exist such indices, otherwise return \\"NO\\". Input: First line contains an integer N - number of elements in the array. Second line contains N space-separated integers representing the array ARR. Third line contains the integer T - the target sum. Output: Output \\"YES\\" if there exist two distinct indices i and j such that ARR[i] + ARR[j] = T. Otherwise, output \\"NO\\". Constraints: 1 ≤ N ≤ 10^4 -10^4 ≤ ARR[i] ≤ 10^4 -2 * 10^4 ≤ T ≤ 2 * 10^4 Example Input: 5 1 2 3 4 5 9 Example Output: YES Explanation: The integer 4 at index 3 and integer 5 at index 4 sum up to the target T = 9. Therefore, the output is \\"YES\\".","solution":"def has_pair_with_sum(arr, n, t): Determines if there are any two distinct indices i and j in the array such that the sum of the integers at these indices equals the target T. Parameters: arr (list): The list of integers. n (int): The number of elements in the array. t (int): The target sum. Returns: str: \\"YES\\" if such indices exist, otherwise \\"NO\\". seen = set() for num in arr: if t - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Example Usage # N = 5 # ARR = [1, 2, 3, 4, 5] # T = 9 # print(has_pair_with_sum(ARR, N, T)) # Output: YES"},{"question":"Consider a special type of matrix operation where you have to rotate a given NxN matrix by 90 degrees clockwise. Your task is to implement a function that performs this rotation in-place, meaning you cannot use any extra space for another matrix to complete the rotation. Input: The first line of the input contains an integer N, where 1 ≤ N ≤ 1000 and there will be N subsequent lines each containing N integers, representing the NxN matrix. Output: Print the NxN rotated matrix. # Constraints: - 1 ≤ N ≤ 1000 - Each element of the matrix is an integer ranging from -1000 to 1000. # Sample Input: 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Sample Output: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 # Explanation: To rotate the matrix by 90 degrees clockwise: 1. Transpose the matrix. 2. Reverse each row. For the given input matrix: Transpose: 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16 Reverse: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix(matrix): N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i + 1, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse() return matrix def print_matrix(matrix): for row in matrix: print(\' \'.join(map(str, row)))"},{"question":"You are given a string, s, and a list of words, words. The words are all of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. Example 1: Input: s = \\"barfoothefoobarman\\", words = [\\"foo\\", \\"bar\\"] Output: [0, 9] Explanation: Substrings starting at index 0 and 9 are \\"barfoo\\" and \\"foobar\\" respectively. The output order does not matter, returning [9, 0] is fine too. Example 2: Input: s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: [] Explanation: Result is [] because \\"word\\" repeats twice in the list of words but appears only once in the line.","solution":"def find_substring(s, words): from collections import Counter if not s or not words: return [] word_len = len(words[0]) concat_len = word_len * len(words) word_count = Counter(words) result = [] for i in range(len(s) - concat_len + 1): seen_words = [] for j in range(i, i + concat_len, word_len): current_word = s[j:j + word_len] if current_word in word_count: seen_words.append(current_word) else: break if Counter(seen_words) == word_count: result.append(i) return result"},{"question":"A library\'s book return system is facing an issue where it sometimes mistakenly assumes books are returned out of order. Users return books in a sequence, but a book can only be marked as returned if all books with smaller IDs have already been returned. You have been asked to write a program that verifies whether the sequence in which books are returned is valid. -----Input----- The first line contains an integer n (1 leq n leq 1000) representing the number of books being returned. The second line contains n integers a_ i (1 leq a_ i leq n), which represents the sequence in which the books are being returned. -----Output----- Output YES if the sequence is valid, NO otherwise. -----Examples----- Sample Input: 5 1 2 3 4 5 Sample Output: YES Sample Input: 5 1 3 2 5 4 Sample Output: NO","solution":"def is_valid_return_sequence(n, sequence): Verifies if the book return sequence is valid. Parameters: n (int): Number of books being returned. sequence (list of int): Sequence in which the books are being returned. Returns: str: \\"YES\\" if the sequence is valid, \\"NO\\" otherwise. seen = [False] * (n + 1) for book in sequence: if book > 1 and not seen[book - 1]: return \\"NO\\" seen[book] = True return \\"YES\\""},{"question":"Given an integer array A consisting of n elements. You are required to find a subarray that has an even product and return the length of the shortest such subarray. If no such subarray exists, return -1. ------ Input ------ The first line contains an integer T, denoting the number of test cases. Each test case is described by two lines: - The first line contains an integer n, indicating the number of elements in the array A. - The second line contains n space-separated integers representing the array A. ------ Output ------ For each test case, output the length of the shortest subarray whose product is even on a single line. If no such subarray exists, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ A[i] ≤ 10^9 the sum of n over all test cases ≤ 10^6 Subtasks: Subtask #1 (30 points): the sum of n over all test cases ≤ 2000 Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 3 4 1 5 3 7 5 2 4 6 8 10 3 3 7 5 ----- Sample Output 1 ------ -1 1 -1","solution":"def shortest_even_product_subarray_size(arr): Returns the length of the shortest subarray with an even product. If no such subarray exists, returns -1. for i in range(len(arr)): if arr[i] % 2 == 0: return 1 return -1 def process_input(T, test_cases): Processes the input and returns the results for each test case. results = [] for test_case in test_cases: n = test_case[0] arr = test_case[1] result = shortest_even_product_subarray_size(arr) results.append(result) return results"},{"question":"A company has recently implemented a high-tech monitoring system to oversee the productivity of its employees. Each employee works on different projects throughout the day, and the system logs the start and end times of each project. The company wants to analyze the total productive hours of each employee for reporting purposes. Given the log data for an employee\'s workday, compute the total productive hours by removing any overlapping working hours between projects. For example, if an employee worked on project A from 9 AM to 11 AM and on project B from 10 AM to 12 PM, then their total productive time is 3 hours (9 AM to 12 PM). Write a program that takes the log entries for multiple employees and computes the total productive hours for each of them. -----Input----- - The first line contains a single integer, T, the number of employees. - Each of the next T blocks represents log entries for an employee: - The first line of each block contains a single integer, N, the number of log entries for the employee. - The next N lines each contain two integers, S and E, representing the start and end times (in 24-hour format) of a project. -----Output----- - For each employee, output a single integer in a new line: the total productive hours for that employee. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ S < E ≤ 24 - Start and end times are in the same day (from 0 to 24 hrs). -----Example----- Input: 2 3 9 11 10 12 14 16 2 8 12 11 15 Output: 5 7 -----Explanation----- In the first example: Employee 1 has: - Project A from 9 AM to 11 AM -> 2 hours - Project B from 10 AM to 12 PM -> 2 additional hours but overlapping 1 hour with project A, total 1 hour added. - Project C from 2 PM to 4 PM -> 2 hours Total productive hours = 2 + 1 + 2 = 5 hours In the second example: Employee 2 has: - Project A from 8 AM to 12 PM -> 4 hours - Project B from 11 AM to 3 PM -> 4 additional hours but overlapping 1 hour with project A, total 3 hours added. Total productive hours = 4 + 3 = 7 hours","solution":"def total_productive_hours(T, log_entries): Computes total productive hours for each employee. Args: T: int : Number of employees log_entries: list : List of logs per employee Returns: list : Total productive hours for each employee result = [] for logs in log_entries: intervals = [] for s, e in logs: intervals.append((s, e)) # Sort intervals by start time intervals.sort() total_hours = 0 current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # Merge intervals current_end = max(current_end, end) else: # No overlap, account the current interval time to total and start new interval total_hours += current_end - current_start current_start, current_end = start, end # Add the last interval to total total_hours += current_end - current_start result.append(total_hours) return result"},{"question":"# Sum of Primes Create a function that finds the sum of all prime numbers below a given positive integer `n`. Recall that a prime number is a number greater than 1 that has no positive divisors other than 1 and itself. The function should return the sum as an integer. Example ```python sum_of_primes(10) #--> 17 (2 + 3 + 5 + 7) sum_of_primes(20) #--> 77 (2 + 3 + 5 + 7 + 11 + 13 + 17 + 19) sum_of_primes(2) #--> 0 (There are no prime numbers less than 2) sum_of_primes(1) #--> 0 (There are no prime numbers less than 1) ``` Note If the input is less than 2, the function should return 0.","solution":"def is_prime(num): Helper function to determine if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n): Returns the sum of all prime numbers below the given positive integer n. sum_primes = 0 for i in range(2, n): if is_prime(i): sum_primes += i return sum_primes"},{"question":"A company has several employees, and each employee is identified by an ID, which is a unique positive integer. The company wants to arrange employees in a hierarchy based on their IDs such that each employee reports to one and only one manager. The employee with the smallest ID is at the top of the hierarchy, and every other employee\'s manager should have a smaller ID than themselves. Given a list of employee IDs, you need to generate the hierarchy and print the manager-employee relationships. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains a single integer N, the number of employees. The next line contains N unique positive integers representing the employee IDs. Output: For each test case, print the manager-employee relationships for all employees (excluding the top employee who doesn\'t report to anyone). For each employee, print the employee ID followed by their manager\'s ID. Constraints: 1 ≤ T ≤ 50 2 ≤ N ≤ 1000 1 ≤ Employee ID ≤ 100000 SAMPLE INPUT 2 5 4 1 7 3 2 3 10 5 3 SAMPLE OUTPUT 2 1 3 1 4 1 7 1 5 3 10 3","solution":"def generate_hierarchy(test_cases): result = [] for case in test_cases: N, employee_ids = case employee_ids.sort() for i in range(1, N): result.append(f\\"{employee_ids[i]} {employee_ids[0]}\\") return result"},{"question":"You are given two arrays of integers, arr1 and arr2. The goal is to find the number of elements in the first array that are greater than the maximum element of the second array. Example 1: Input: arr1 = [5, 3, 9, 7], arr2 = [6, 4, 8] Output: 2 Explanation: The maximum element of arr2 is 8. The elements in arr1 that are greater than 8 are [9]. Example 2: Input: arr1 = [1, 2, 3, 4], arr2 = [5, 6, 7, 8] Output: 0 Explanation: The maximum element of arr2 is 8. There are no elements in arr1 that are greater than 8. Example 3: Input: arr1 = [10, 15, 20, 25], arr2 = [19, 22, 23] Output: 2 Explanation: The maximum element of arr2 is 23. The elements in arr1 that are greater than 23 are [25]. Your Task: The task is to complete the function countElementsGreater() that takes arr1 and arr2 as parameters and returns the count of elements in arr1 that are greater than the maximum element of arr2. Expected Time Complexity: O(N + M), where N and M are the lengths of arr1 and arr2, respectively. Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(arr1), len(arr2) ≤ 10^6 0 ≤ arr1[i], arr2[i] ≤ 10^9","solution":"def countElementsGreater(arr1, arr2): Counts the number of elements in arr1 that are greater than the maximum element of arr2. Parameters: arr1 (list): First list of integers. arr2 (list): Second list of integers. Returns: int: Number of elements in arr1 greater than the maximum element of arr2. if not arr1 or not arr2: return 0 max_arr2 = max(arr2) count = sum(1 for x in arr1 if x > max_arr2) return count"},{"question":"A group of friends is planning a hiking trip. They want to plan their path so that they cover all checkpoints exactly once. They start at a base camp and end at the summit of the mountain. The hiking trail can be represented as a graph where nodes are checkpoints and edges are paths between the checkpoints. You are given this graph in the form of an adjacency list. A path is said to be an \\"ascending path\\" if for every two consecutive checkpoints (u, v) in the path, u < v. The friends want to determine if it is possible to hike from the base camp (node 1) to the summit (node N) following an ascending path that covers all checkpoints exactly once. ------ Input ------ The first line of input contains two integers N (the number of checkpoints) and M (the number of paths). The next M lines each contain two integers u and v indicating that there is a path between checkpoint u and checkpoint v. The graph is undirected. ------ Output ------ Print \\"Yes\\" if there exists an ascending path that covers all checkpoints exactly once from the base camp (node 1) to the summit (node N), otherwise print \\"No\\". ------ Constraints ------ 1 ≤ N ≤ 100 0 ≤ M ≤ frac{N(N-1)}{2} ------ Sample Input 1 ------ 4 4 1 2 2 3 3 4 1 3 ------ Sample Output 1 ------ Yes ------ Sample Input 2 ------ 4 3 1 2 1 3 2 4 ------ Sample Output 2 ------ No","solution":"def can_hike_ascending_path(N, M, paths): from collections import defaultdict, deque # Build the adjacency list adj_list = defaultdict(list) for u, v in paths: adj_list[u].append(v) adj_list[v].append(u) # Start BFS from the base camp (node 1) queue = deque([(1, [1])]) # Store (current node, path taken) while queue: current_node, path = queue.popleft() if current_node == N and len(path) == N: return \\"Yes\\" for neighbor in adj_list[current_node]: if neighbor > current_node and neighbor not in path: # Ascending path condition queue.append((neighbor, path + [neighbor])) return \\"No\\""},{"question":"Task Write a function that, given a string, returns the longest substring that consists of the same character. Input A string `s`, consisting of lowercase English letters. Output The longest contiguous substring in which all characters are the same. If there are multiple substrings with the same length, return the first one. Example ```python longest_substring(\\"aaabbccddddde\\") => \\"ddddd\\" longest_substring(\\"a\\") => \\"a\\" longest_substring(\\"abc\\") => \\"a\\" longest_substring(\\"bbbaaabb\\") => \\"bbb\\" ```","solution":"def longest_substring(s): Returns the longest contiguous substring of `s` that consists of the same character. If multiple substrings have the same length, the first one is returned. if not s: return \\"\\" max_length = 1 current_length = 1 max_char = s[0] current_char = s[0] for i in range(1, len(s)): if s[i] == current_char: current_length += 1 else: if current_length > max_length: max_length = current_length max_char = current_char current_char = s[i] current_length = 1 # Check the last character sequence if current_length > max_length: max_length = current_length max_char = current_char return max_char * max_length"},{"question":"You are given an array of integers representing the heights of students standing in a row. Mr. Smith, the school gym teacher, wants to arrange them in a new row where each student\'s neighbor either stands to their left or right and is taller than the previous neighbor. Essentially, if a student is standing at index i, then the heights should follow h[i] < h[i+1] when i is an even number, and h[i] > h[i+1] when i is an odd number. Your task is to help Mr. Smith arrange the students\' heights in such a way. If it is not possible to rearrange the array to meet the requirement, return the original array in its current order. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of students. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the students. Output - Print the rearranged array of heights. If it is not possible to rearrange the array, print the original array. Example Input 5 4 3 2 1 6 Output 1 4 2 6 3 Input 6 3 1 2 4 6 5 Output 1 3 2 5 4 6 Note In the first example, one possible rearrangement that satisfies the conditions is [1 4 2 6 3]. In the second example, one possible rearrangement that satisfies the conditions is [1 3 2 5 4 6].","solution":"def arrange_students(heights): n = len(heights) if n == 1: return heights heights.sort() arranged = [0] * n left = 0 right = n - 1 for i in range(n): if i % 2 == 0: arranged[i] = heights[left] left += 1 else: arranged[i] = heights[right] right -= 1 return arranged"},{"question":"Hannah loves playing with sequences, particularly those that involve the Fibonacci sequence. One day, she came up with a new challenge for herself: transforming a number into a sequence of Fibonacci numbers. The Fibonacci sequence is defined as follows: - Fibonacci(1) = 1 - Fibonacci(2) = 1 - Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) for n > 2 Given an integer `N`, Hannah wants to decompose it into the sum of unique Fibonacci numbers. Write a program that finds any set of distinct Fibonacci numbers whose sum is `N`. Input The input consists of a single integer `N` (1 ≤ N ≤ 10^18). Output Output any set of distinct Fibonacci numbers whose sum is `N`. The numbers in the output should be in non-decreasing order. If there are multiple solutions, you can output any of them. If there are no solutions, output \\"Impossible\\". Examples Input 10 Output 1 2 3 5 Input 20 Output 1 2 5 12 Input 19 Output 3 5 11 Note In the first example, 1 + 2 + 3 + 5 = 10, which is the sum of distinct Fibonacci numbers. In the second example, it\'s shown that one possible solution is 1 + 2 + 5 + 12 which sums to 20. The provided solution does not contain the number 8 even though it is a Fibonacci number, and this shows that there might be multiple ways to decompose 20. In the third example, the Fibonacci numbers 3, 5, and 11 sum up to 19. Although other combinations such as 1, 3, 5, and 10 could be valid, just one combination suffices as an answer.","solution":"def fibonacci_sum_decomposition(N): Decompose the integer N into the sum of distinct Fibonacci numbers. Parameters: N (int): The input integer (1 ≤ N ≤ 10^18) Returns: list of int: A list of distinct Fibonacci numbers that sum up to N. if N == 0: return [] # Generate Fibonacci numbers up to N fibs = [1, 2] while fibs[-1] <= N: fibs.append(fibs[-1] + fibs[-2]) # Since the sequence is dynamic, we remove the last element which exceeds N if fibs[-1] > N: fibs.pop() result = [] # Traverse the Fibonacci sequence in reverse order to achieve a greedy solution while N > 0: for fib in reversed(fibs): if fib <= N: result.append(fib) N -= fib break # Output the result in non-decreasing order result.sort() return result"},{"question":"You are given a binary tree. Each node in the binary tree contains a value that is either 0 or 1. Your task is to find the length of the longest path in the tree where the path starts and ends at a node with value 1. The path can traverse any nodes (with values of either 0 or 1), but must start and end at nodes with the value 1. -----Input----- Each input will consist of a single test case. The input will be given in the form of space-separated integers where the first integer denotes the number of nodes n (1 le n le 10^5). The following n integers denote the values of the nodes (all either 0 or 1), and the next n-1 pairs of integers denote the edges of the tree in the form of u v indicating there is an edge between nodes u and v (1-based index). -----Output----- Output a single integer on a line by itself representing the length of the longest path in the tree where the path starts and ends at a node with value 1. If no such path exists, output -1. -----Examples----- Sample Input 1: 5 1 0 1 0 1 1 2 1 3 3 4 3 5 Sample Output 1: 3 Sample Input 2: 3 0 0 1 1 2 2 3 Sample Output 2: 0","solution":"def longest_path_with_ones(n, values, edges): from collections import defaultdict, deque if values.count(1) < 2: return 0 # No path exists if there are less than two nodes with value 1 # Create the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def bfs(start): visited = [-1] * (n + 1) # start with unvisited nodes visited[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if visited[neighbor] == -1: # if not visited visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: farthest_node = neighbor max_distance = visited[neighbor] return (farthest_node, max_distance) # Start BFS from any node that has value 1 to find the farthest one start_node = values.index(1) + 1 # 1-based index farthest_node, _ = bfs(start_node) # Start BFS from the farthest node found to get the longest path farthest_node, longest_path_length = bfs(farthest_node) return longest_path_length # Usage def parse_input(data): lines = data.strip().split(\'n\') n = int(lines[0]) values = list(map(int, lines[1].strip().split())) edges = [tuple(map(int, line.split())) for line in lines[2:]] return n, values, edges"},{"question":"Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order. Return the length of the shortest such subarray. Example 1: Input: nums = [2,6,4,8,10,9,15] Output: 5 Explanation: You need to sort the subarray [6, 4, 8, 10, 9] in ascending order to make the whole array sorted. Example 2: Input: nums = [1,2,3,4] Output: 0 Explanation: The array is already sorted. Example 3: Input: nums = [1,3,2,2,2] Output: 4 Explanation: You need to sort the subarray [3, 2, 2, 2] in ascending order to make the whole array sorted. Constraints: 1 <= nums.length <= 10^4 -10^5 <= nums[i] <= 10^5","solution":"def find_unsorted_subarray(nums): Finds the length of the shortest subarray that, if sorted, results in the entire array being sorted in ascending order. n = len(nums) start, end = -1, -1 max_seen, min_seen = float(\'-inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i if start == -1 and end == -1: return 0 return end - start + 1"},{"question":"A company wants to perform a promotional campaign by giving surprise gifts to its customers. They have a list of customers, each of whom has a unique value of loyalty points associated with them. To make it fair, they decide to distribute the gifts in such a way that they maximize the minimum loyalty points of the customers who receive the gift. Given an array of integers representing loyalty points of customers and an integer K representing the number of gifts, find the maximum value among the minimum loyalty points of the customers who receive the gifts. Each gift can only be given to one customer. Constraints * 1 ≤ K ≤ length of the array * 1 ≤ length of the array ≤ 100,000 * 1 ≤ loyalty points[i] ≤ 10^9 Input Input is given from Standard Input in the following format: N K loyalty_points_1 loyalty_points_2 ... loyalty_points_N Output Print the maximum value among the minimum loyalty points of the customers who receive the gifts. Examples Input 5 3 1 2 3 4 5 Output 3 Input 6 2 10 20 30 40 50 60 Output 50 Input 4 4 4 5 1 3 Output 1","solution":"def max_min_loyalty_points(n, k, loyalty_points): Returns the maximum value among the minimum loyalty points of the customers who receive gifts. Parameters: n (int): Number of customers k (int): Number of gifts loyalty_points (list): List of loyalty points of customers Returns: int: Maximum value among the minimum loyalty points of the customers who receive the gifts loyalty_points.sort(reverse=True) return loyalty_points[k - 1]"},{"question":"A new video game requires players to solve puzzles to progress through levels. One such puzzle involves an NxN grid filled with integers. The goal is to find the maximum sum of any sub-grid of size k x k within the given grid. To solve this puzzle, players need to identify the sub-grid that has the highest sum of its elements. A sub-grid is any contiguous k x k section of the NxN grid. Write a function that, given the NxN grid and the integer k, returns the maximum sum of any k x k sub-grid within the grid. ------ Input Format ------ - The first line contains two integers N and k, where N is the size of the grid and k is the size of the sub-grid. - The next N lines each contain N integers, which represent the elements of the grid. ------ Output Format ------ Output a single integer, the maximum sum of any k x k sub-grid. ------ Constraints ------ 1 leq N leq 1000 1 leq k leq N -10^6 leq Grid elements leq 10^6 ------ Sample Input 1 ------ 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ------ Sample Output 1 ------ 54 ------ Explanation 1 ------ The 2x2 sub-grid with the maximum sum is: 10 11 14 15 Its sum is 10 + 11 + 14 + 15 = 50. However, in example, answer is miscalculated. Correct explanation gives 54 ------ Sample Input 2 ------ 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 ------ Sample Output 2 ------ -5 ------ Explanation 2 ------ The 3x3 sub-grid with the maximum sum is the whole grid: -1 -2 -3 -4 -5 -6 -7 -8 -9 Its sum is -1 + -2 + -3 + -4 + -5 + -6 + -7 + -8 + -9 = -45.","solution":"def max_subgrid_sum(grid, N, k): Returns the maximum sum of any k x k sub-grid within the NxN grid. Parameters: grid (list of list of int): The NxN grid filled with integers. N (int): The size of the grid. k (int): The size of the sub-grid to consider. Returns: int: The maximum sum of any k x k sub-grid. if N == 0 or k > N: return 0 # Create a prefix sum matrix prefix_sum = [[0] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, N + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] max_sum = float(\'-inf\') for i in range(k, N + 1): for j in range(k, N + 1): total = (prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k]) max_sum = max(max_sum, total) return max_sum"},{"question":"You are organizing a marathon event and need to distribute water bottles to different checkpoints evenly. Some checkpoints may have more water bottles than others if they cannot be divided perfectly. Write a function `distribute_water_bottles(total_bottles, checkpoints)` that takes in the total number of water bottles and the number of checkpoints. The function should return an array with the number of water bottles at each checkpoint. Examples: ```python distribute_water_bottles(20, 3) => [7, 7, 6] distribute_water_bottles(8, 5) => [2, 2, 2, 1, 1] distribute_water_bottles(15, 4) => [4, 4, 4, 3] distribute_water_bottles(0, 0) => \\"We need more checkpoints!\\" ``` Note: 1. If the number of checkpoints is zero, return \\"We need more checkpoints!\\". 2. Both total_bottles and checkpoints will always be greater than or equal to 0.","solution":"def distribute_water_bottles(total_bottles, checkpoints): Distributes total_bottles evenly across checkpoints. Returns a list of number of water bottles at each checkpoint. If checkpoints is zero, returns \\"We need more checkpoints!\\". if checkpoints == 0: return \\"We need more checkpoints!\\" base_count = total_bottles // checkpoints remainder = total_bottles % checkpoints distribution = [base_count] * checkpoints for i in range(remainder): distribution[i] += 1 return distribution"},{"question":"Max is playing a game with his friends using an array of numbers. The array contains all integers from 0 to N-1. Max\'s friends perform a series of operations on this array. In each operation, they will select any two distinct indices i and j (i < j) and swap the elements at these positions. Max needs to find out the minimum number of swaps required to sort the array in non-decreasing order. Can you help Max determine the answer? Input Format: The first line contains an integer T, i.e., the number of test cases. Each of the next T lines contains an integer N. Output Format: For each test case, print the minimum number of swaps required to sort the array. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 50 SAMPLE INPUT 2 4 5 SAMPLE OUTPUT 2 4 Explanation For the first test case: Array: [0, 1, 2, 3] After performing 2 swaps, the array can remain sorted: Swap 1: Swap 0 and 1 Swap 2: Swap 0 and 2 Resulting array: [0, 1, 2, 3] For the second test case: Array: [0, 1, 2, 3, 4] After performing 4 swaps, the array is sorted: Swap 1: Swap 0 and 1 Swap 2: Swap 0 and 2 Swap 3: Swap 0 and 3 Swap 4: Swap 0 and 4 Resulting array: [0, 1, 2, 3, 4]","solution":"def minimum_swaps_to_sort(N): Calculate the minimum number of swaps required to sort an array of length N with elements from 0 to N-1 when the elements need to remain in their original order after each swap operation. Parameters: N (int): The length of the array. Returns: int: The minimum number of swaps needed. # The minimum number of swaps to sort an array of length N from [0, N-1] # is always N-1 because the array is already in sorted order. return N - 1 def solve_minimum_swaps(T, test_cases): For each test case, calculate and return the minimum number of swaps required. Parameters: T (int): The number of test cases. test_cases (list of int): Each int is the length of the array for a test case. Returns: list of int: The minimum number of swaps for each test case. results = [] for N in test_cases: results.append(minimum_swaps_to_sort(N)) return results"},{"question":"Given an array of integers, determine if there exists a pair of distinct indices `i` and `j` in the array such that the absolute difference between the elements at these indices is equal to a target value `k`. Examples ``` [1, 5, 3, 4, 2], k = 3 => True (pairs: (1, 4), (5, 2)) [8, 12, 16, 4, 0], k = 8 => True (pair: (8, 16)) [1, 2, 3, 4, 5], k = 7 => False [5, 5, 5, 5, 5], k = 0 => True (pair: (5, 5)) ``` Goal Your task is to develop a function that checks for the presence of such a pair in the given array and returns `True` if it exists and `False` otherwise.","solution":"def has_pair_with_difference(arr, k): Determines if there exists a pair of distinct indices in the array such that the absolute difference between the elements at these indices is equal to a target value k. Parameters: - arr: List[int], the input array of integers - k: int, the target difference value Returns: - bool: True if such a pair exists, False otherwise seen = set() for num in arr: if (num + k) in seen or (num - k) in seen: return True seen.add(num) return False"},{"question":"Sarah is learning about arrays and wants to practice some exercises involving merging two sorted arrays. She has been given two non-decreasing sorted arrays, A and B, and she needs your help to merge them into a single non-decreasing sorted array C. Your task is to write a program that takes the two sorted arrays, merges them into one sorted array, and prints the merged array C. -----Input----- - The first line contains an integer T representing the number of test cases. - Each test case consists of three lines: - The first line contains an integer n, the size of array A. - The second line contains n space-separated integers representing the elements of array A. - The third line contains an integer m, the size of array B. - The fourth line contains m space-separated integers representing the elements of array B. Note that the input arrays are already sorted in non-decreasing order. -----Output----- For each test case, print a single line containing the merged non-decreasing sorted array C. -----Constraints----- - 1 le T le 100 - 1 le n, m le 100 - -10^5 le A[i], B[i] le 10^5 -----Example Input----- 2 3 1 3 5 4 2 4 6 8 2 -1 0 3 -2 -2 2 -----Example Output----- 1 2 3 4 5 6 8 -2 -2 -1 0 2 -----Explanation----- Example case 1: Merging the arrays [1, 3, 5] and [2, 4, 6, 8] results in the array [1, 2, 3, 4, 5, 6, 8]. Example case 2: Merging the arrays [-1, 0] and [-2, -2, 2] results in the array [-2, -2, -1, 0, 2].","solution":"def merge_sorted_arrays(T, test_cases): Merges T pairs of sorted arrays and returns the result for each pair. results = [] for t in range(T): n = test_cases[t][0] A = test_cases[t][1] m = test_cases[t][2] B = test_cases[t][3] # Initialize pointers for both arrays i, j = 0, 0 merged_array = [] # Merge both arrays while i < n and j < m: if A[i] <= B[j]: merged_array.append(A[i]) i += 1 else: merged_array.append(B[j]) j += 1 # Append remaining elements if any while i < n: merged_array.append(A[i]) i += 1 while j < m: merged_array.append(B[j]) j += 1 results.append(merged_array) return results def format_results(results): Format the merged arrays into the desired output format. return [\\" \\".join(map(str, arr)) for arr in results]"},{"question":"You are given a series of N intervals on a number line, each defined by their start and end values. An interval i(1 ≤ i ≤ N) has a starting point l_i and an ending point r_i. Your task is to find the maximum number of non-overlapping intervals that can be selected from the given set. --- Constraints --- - All input values are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ l_i < r_i ≤ 10^9 --- Partial Scores --- - 200 points will be awarded for passing the test set satisfying 1 ≤ N ≤ 400 and 1 ≤ l_i < r_i ≤ 400. --- Input --- The input is given from Standard Input in the following format: ``` N l_1 r_1 l_2 r_2 : l_N r_N ``` --- Output --- Print the maximum number of non-overlapping intervals that can be selected. --- Sample Input --- ``` 3 1 2 2 3 3 4 ``` --- Sample Output --- ``` 3 ``` In this case, all three intervals ([1,2], [2,3], and [3,4]) can be selected as they do not overlap.","solution":"def max_non_overlapping_intervals(intervals): Returns the maximum number of non-overlapping intervals. # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) count = 0 prev_end = -1 for start, end in intervals: if start >= prev_end: count += 1 prev_end = end return count def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) intervals = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)] result = max_non_overlapping_intervals(intervals) print(result)"},{"question":"Given an array of integers, determine whether there is a pair of distinct elements in the array whose product equals a given value. Input The first line of input contains an integer n (2 ≤ n ≤ 100), representing the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Each integer is in the range [-1000, 1000]. The third line contains an integer p (-10^6 ≤ p ≤ 10^6), representing the product value to check. Output Output \\"YES\\" if there exists a pair of distinct elements in the array whose product equals p. Otherwise, output \\"NO\\". Examples Input 5 2 4 6 8 10 16 Output YES Input 4 -1 2 -3 4 -6 Output YES Input 3 1 2 3 7 Output NO","solution":"def has_pair_with_product(arr, p): Determines if there is a pair of distinct elements in the array whose product equals p. Args: arr : list of int : the array of integers. p : int : the product value to check. Returns: str : \\"YES\\" if such a pair exists, otherwise \\"NO\\". n = len(arr) seen = set() for element in arr: if element != 0 and p % element == 0: if (p // element) in seen: return \\"YES\\" seen.add(element) return \\"NO\\""},{"question":"You are tasked with writing a program to analyze the results of a survey. Based on the survey data, you need to identify the top M most frequent responses. Input The first line of the input contains an integer N (1 ≤ N ≤ 10^5) denoting the number of responses. The second line contains N space-separated integers representing the survey responses. Each response is an integer between 1 and 10^6. The third line contains an integer M (1 ≤ M ≤ N) denoting the number of top frequent responses to output. Output Output M space-separated integers representing the M most frequent responses in descending order of frequency. If two responses have the same frequency, the smaller number comes first. Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^6 - 1 ≤ M ≤ N Example Input 1 6 3 3 1 2 2 2 2 Output 1 2 3 Input 2 7 10 10 20 30 20 20 30 3 Output 2 20 10 30 Explanation Test 1: The responses sorted by frequency are: - 2: appears 3 times - 3: appears 2 times - 1: appears 1 time Thus, the top 2 most frequent responses are 2 and 3. Test 2: The responses sorted by frequency are: - 20: appears 3 times - 10: appears 2 times - 30: appears 2 times Thus, the top 3 most frequent responses are 20, 10, and 30.","solution":"from collections import Counter def top_m_frequent_responses(n, responses, m): Returns the top M most frequent responses in descending order of frequency. If two responses have the same frequency, the smaller number comes first. :param n: Number of responses :param responses: List of responses :param m: Number of top frequent responses to return :return: List of M most frequent responses counter = Counter(responses) sorted_responses = sorted(counter.keys(), key=lambda x: (-counter[x], x)) return sorted_responses[:m]"},{"question":"Paul\'s robot factory produces robots of two models: Model A and Model B. Model A robots weigh 4 units and Model B robots weigh 6 units. Paul needs to deliver an exact weight of W units using any combination of these two models. Paul needs your help to determine if it is possible to achieve the exact weight W using a combination of Model A and Model B robots. Formally, Paul wants to know if he can choose two non-negative integers a and b such that the weight of the robots corresponds exactly to W units. Provide an answer for multiple test cases. -----Input----- The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The i-th of the following t lines contains one integer W_{i} (1 ≤ W_{i} ≤ 100) — the exact weight that Paul needs to deliver. -----Output----- Print t lines, in the i-th line output POSSIBLE if Paul can achieve exactly W_{i} units weight. Otherwise, print IMPOSSIBLE. -----Example----- Input 3 8 10 13 Output POSSIBLE POSSIBLE IMPOSSIBLE -----Note----- In the first example, Paul can achieve exactly 8 units by using two Model A robots. In the second example, Paul can use one Model A robot and one Model B robot to make exactly 10 units. In the third example, no combination of Model A and Model B robots can make exactly 13 units.","solution":"def can_deliver_exact_weight(a, b, W): for i in range((W // a) + 1): for j in range((W // b) + 1): if a * i + b * j == W: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\" def solve(t, weights): results = [] for i in range(t): results.append(can_deliver_exact_weight(4, 6, weights[i])) return results"},{"question":"In a distant kingdom, there are n islands connected by m bidirectional bridges. Each bridge has a certain weight which denotes the cost to cross that bridge. The king wants to determine whether it is possible to travel from one specific island to another with a total cost that does not exceed a given value k. Consider the islands numbered from 1 to n. To do this, the king asks you to create a path-checking algorithm to see whether a path exists between any two given islands with a total cost not greater than k. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 105, 0 ≤ m ≤ 105, 1 ≤ k ≤ 109). The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 105), representing a bridge between islands u and v with cost w. Then, the last line contains two integers x and y (1 ≤ x, y ≤ n; x ≠ y), representing the starting island x and the destination island y. Output Output \\"YES\\" if there is a path from island x to island y with a total cost not exceeding k, and \\"NO\\" otherwise. Examples Input 5 6 15 1 2 3 1 3 10 2 4 7 3 4 5 3 5 1 4 5 3 1 5 Output YES Input 4 3 5 1 2 3 2 3 4 3 4 2 1 4 Output NO Note In the first example, the path 1->2->4->5 has a total cost of 3 + 7 + 3 = 13, which is less than or equal to 15. In the second example, the total cost for any path from island 1 to island 4 exceeds 5, hence the output is \\"NO\\".","solution":"from heapq import heappush, heappop import sys def can_travel_within_cost(n, m, k, bridges, start, end): graph = [[] for _ in range(n+1)] for u, v, w in bridges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, start)] # (cost, node) costs = [sys.maxsize] * (n + 1) costs[start] = 0 while pq: current_cost, u = heappop(pq) if current_cost > costs[u]: continue for v, w in graph[u]: new_cost = current_cost + w if new_cost < costs[v] and new_cost <= k: costs[v] = new_cost heappush(pq, (new_cost, v)) return \\"YES\\" if costs[end] <= k else \\"NO\\""},{"question":"Alex is organizing a charity fun run and needs help calculating the best way to divide participants into teams, ensuring that teams are as balanced as possible. Each participant has a specific running skill level, and Alex wants to minimize the difference in total skill level between the teams. To achieve this, he decides to partition the participants into two teams, so that the absolute difference in the sum of skill levels between the two teams is minimized. Input - The first line contains an integer n, representing the number of participants (1 ≤ n ≤ 100). - The second line contains n integers separated by spaces, representing the skill levels of the participants (1 ≤ skill_level ≤ 100). Output - Print a single integer: the minimal possible absolute difference between the total skill levels of the two teams. Example Input 6 3 1 4 2 2 1 Output 1 Explanation In this example, you can partition the participants into two teams with skill levels [3, 1, 1] and [4, 2, 2]. The sums of the skill levels for each team are 5 and 8, respectively, leading to an absolute difference of 3. However, a better partition would be [3, 2, 2] and [1, 4, 1], resulting in team sums of 7 and 6, with an absolute difference of 1. Potential partitions and their differences: - [3, 1, 4], [2, 2, 1] → |8 - 5| = 3 - [3, 2, 2], [1, 4, 1] → |7 - 6| = 1 (optimal) Thus, the minimal possible absolute difference is 1.","solution":"def minimal_possible_difference(n, skill_levels): Returns the minimal possible absolute difference between the total skill levels of the two teams. total_sum = sum(skill_levels) # Initialize a dp array where dp[j] is True if a subset with sum j can be made from the skills dp = [False] * (total_sum + 1) dp[0] = True # Update dp array based on each skill level for skill in skill_levels: for i in range(total_sum, skill - 1, -1): dp[i] = dp[i] or dp[i - skill] # Find the minimal possible difference min_diff = float(\'inf\') for i in range(total_sum // 2 + 1): if dp[i]: min_diff = min(min_diff, total_sum - 2 * i) return min_diff # example usage if __name__ == \\"__main__\\": n = 6 skill_levels = [3, 1, 4, 2, 2, 1] print(minimal_possible_difference(n, skill_levels)) # Output: 1"},{"question":"*You have been tasked with developing a sorting utility for a logistics company. The company deals with multiple deliveries each day, and each delivery can be categorized by its weight. They want a program that reads the weights of all deliveries for a given day and outputs the total weight of the deliveries that are below a specified threshold weight. Write a function that accepts the weights of deliveries and a threshold weight, and returns the total weight of deliveries that are strictly less than the threshold.* # Input Format - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of multiple lines. - The first line of each test case contains an integer N, the number of deliveries. - The second line contains N space-separated integers representing the weights of the deliveries. - The third line contains a single integer K, the threshold weight. # Output Format For each test case, output on a new line, the total weight of the deliveries that are strictly less than the threshold weight K. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ weight ≤ 1000 - 1 ≤ K ≤ 1000 # Sample Input 1 ``` 2 5 50 75 100 120 30 100 4 10 20 30 25 25 ``` # Sample Output 1 ``` 155 30 ``` # Explanation 1 - Test case 1: There are 5 deliveries with weights {50, 75, 100, 120, 30}. The threshold weight is 100. The deliveries that are below the threshold weight are {50, 75, 30}. The total weight of these deliveries is 50+75+30 = 155. - Test case 2: There are 4 deliveries with weights {10, 20, 30, 25}. The threshold weight is 25. The deliveries that are below the threshold weight are {10, 20}. The total weight of these deliveries is 10+20 = 30.","solution":"def total_weight_below_threshold(test_cases): results = [] for case in test_cases: N = case[\'N\'] weights = case[\'weights\'] K = case[\'threshold\'] total_weight = sum(weight for weight in weights if weight < K) results.append(total_weight) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0].strip()) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index].strip()) weights = list(map(int, input_lines[index+1].strip().split())) K = int(input_lines[index+2].strip()) test_cases.append({ \'N\': N, \'weights\': weights, \'threshold\': K }) index += 3 return test_cases"},{"question":"You are given a grid of cells with dimensions n × m (1 ≤ n, m ≤ 50). Each cell in the grid can either be empty (\'.\') or contain a tree (\'T\'). Trees can combine to form a forest if they are adjacent vertically or horizontally. The grid is surrounded by empty cells (i.e., the grid is padded with empty cells on all sides). Your task is to find the number of distinct forests in the grid. Two forests are considered distinct if they are not connected. Input The first line of the input contains two integers n and m. The next n lines each contain m characters, where each character is either \'.\' (for an empty cell) or \'T\' (for a tree). Output Output a single integer representing the number of distinct forests in the grid. Examples Input 4 5 .... .TTT. .T... .... Output 1 Input 4 4 .T.. .... ..T. .TT. Output 3 Note In the first example, all three trees form a single connected forest. In the second example, there are three distinct connected forests: - The tree at position (1,2) - The tree at position (3,3) - The sequence of trees forming a forest from positions (4,2), (4,3), and (3,3).","solution":"def count_forests(n, m, grid): Returns the number of distinct forests in the given grid. if not grid: return 0 def dfs(i, j): if 0 <= i < n and 0 <= j < m and grid[i][j] == \'T\': grid[i][j] = \'.\' # Mark this tree as visited # Explore all possible directions dfs(i+1, j) dfs(i-1, j) dfs(i, j+1) dfs(i, j-1) forest_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'T\': forest_count += 1 dfs(i, j) return forest_count # Example usage # n, m = 4, 5 # grid = [ # [\'.\', \'.\', \'.\', \'.\', \'.\'], # [\'.\', \'T\', \'T\', \'T\', \'.\'], # [\'.\', \'T\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'.\', \'.\'] # ] # print(count_forests(n, m, grid)) # Output: 1 # n, m = 4, 4 # grid = [ # [\'.\', \'T\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'T\', \'.\'], # [\'.\', \'T\', \'T\', \'.\', \'.\'] # ] # print(count_forests(n, m, grid)) # Output: 3"},{"question":"Given an array of integers and a target sum, write a function to find either a pair of distinct indices (i, j) such that `nums[i] + nums[j]` equals the target sum or indicate that no such pair exists. In case there are multiple valid pairs, return any one of them. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: nums[1] + nums[2] = 2 + 4 = 6 Example 3: Input: nums = [3, 3] target = 6 Output: [0, 1] Explanation: nums[0] + nums[1] = 3 + 3 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPair` which takes the array `nums` and the integer `target` as input parameters and returns an array of the pair of indices `[i, j]` if such a pair exists. If no such pair exists, the function should return an empty list `[]`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) (to store the elements in a hash map) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i], target <= 10^9","solution":"def findPair(nums, target): Finds a pair of indices (i, j) such that nums[i] + nums[j] equals the target sum. Returns the pair of indices if such a pair exists, otherwise returns an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You have an equal number of opening and closing parentheses, represented as a string of length `2n`. Your task is to determine if the given string of parentheses is valid. A string is considered valid if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the parentheses are correctly nested. -----Constraints----- - The length of the string `S` is even and between 2 and 100 inclusive. - The string `S` contains only \'(\' and \')\'. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"Yes\\" if the string is valid and \\"No\\" otherwise. -----Sample Input----- (()()) -----Sample Output----- Yes - The provided string starts with an opening parenthesis \'(\', followed by another \'(\', and then a closing \')\'. - The sequence continues with an opening parenthesis \'(\', and is closed properly by the subsequent two closing parentheses \')\'. Thus, the string is correctly nested, and the output is \\"Yes\\". -----Sample Input----- ))( -----Sample Output----- No - The provided string starts with a closing parenthesis \')\', which does not have a corresponding prior opening parenthesis. Thus, the string is not valid as the parentheses are incorrectly nested, and the output is \\"No\\".","solution":"def is_valid_parentheses(s): Check if the parentheses string is valid. Parameters: s (str): A string containing only \'(\' and \')\' with even length. Returns: str: \\"Yes\\" if the string is valid, otherwise \\"No\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return \\"No\\" return \\"Yes\\" if not stack else \\"No\\""},{"question":"A new energy-efficient smart light system has been installed in a large office building. The lights can change their brightness levels to save power when they are not needed. Each light has a unique brightness level, and all lights must be turned on once every day such that no two lights have the same brightness. However, the building management wants to turn on the lights for the minimum amount of time necessary to satisfy the above conditions. -----Input----- The first line contains an integer n which is the number of different brightness levels available. The next line contains n integers—each indicating the duration (in minutes) it takes to set a light for outputting these different brightness levels. You may assume n leq 100000 and each duration is leq 1000000. -----Output----- The output consists of a single integer which is the minimum total duration in minutes to turn on all lights at the different brightness levels. -----Examples----- Sample Input: 5 3 2 5 1 4 Sample Output: 15","solution":"def minimum_total_duration(n, durations): This function takes an integer n and a list of durations. It returns the minimum total duration to turn on all lights at different brightness levels. return sum(durations)"},{"question":"Write a program that reads a list of student names along with their scores in two subjects, and outputs the names sorted by their total scores in descending order. If two students have the same total score, their names should be sorted in alphabetical order. Constraints * 1 leq n leq 100,000 * Each student\'s name consists of alphanumeric characters and has a length of at most 100. * Scores are integers between 0 and 100 inclusive. Input The input is given in the following format. n name_0 ; score1_0 ; score2_0 name_1 ; score1_1 ; score2_1 : name_{n-1} ; score1_{n-1} ; score2_{n-1} In the first line, the number of students n is given. In the following n lines, each student\'s name and their scores in two subjects are given. Output Print the student names in descending order of their total scores. If two students have the same total score, print their names in alphabetical order. Example Input 4 Alice 90 95 Bob 80 85 Charlie 85 90 David 90 95 Output Alice David Charlie Bob","solution":"def sort_students(names_scores): Given a list of tuples containing student names and their scores, returns the list of names sorted by total score in descending order. If two students have the same total score, their names are sorted in alphabetical order. students = [] for ns in names_scores: name, score1, score2 = ns[0], int(ns[1]), int(ns[2]) total_score = score1 + score2 students.append((name, total_score)) students.sort(key=lambda x: (-x[1], x[0])) sorted_names = [student[0] for student in students] return sorted_names def read_input(lines): Reads the input from a list of strings and returns the number of students and their details as a list of tuples. n = int(lines[0]) names_scores = [line.split() for line in lines[1:n+1]] return names_scores"},{"question":"You are given a list of N integers. You need to write a function that rearranges the integers in the list so that every integer appears at most twice, and the order of the integers is maintained as much as possible. If there are more than two occurrences of any integer, keep only the first two occurrences. Your task is to implement this rearrangement and return the modified list. -----Constraints----- - 1 leq N leq 1000 - Each integer in the input list is within the range of -1000 to 1000. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the modified list, where every integer appears at most twice, and the order is maintained as much as possible. -----Sample Input----- 7 1 1 1 2 2 3 4 4 -----Sample Output----- 1 1 2 2 3 4 4 For example, in the input list, the integer 1 appears three times. The function should keep only the first two occurrences and remove the third one. The integer 2 appears twice, so it should be kept as is. The integer 4 also appears twice and should be kept as is. The integer 3 appears only once and should be kept. Thus, the modified list should be: 1 1 2 2 3 4 4.","solution":"def rearrange_list(n, arr): Rearranges the given list such that every integer appears at most twice. Parameters: n (int): The number of elements in the list. arr (list): The list of integers. Returns: list: The modified list where every integer appears at most twice. from collections import Counter count_dict = Counter() result = [] for num in arr: if count_dict[num] < 2: result.append(num) count_dict[num] += 1 return result"},{"question":"Alice is organizing a relay race and needs to prepare a list of distinct starting times for each team. The race track is busy and she wants to avoid overlap, so each team should start at an integer minute and no two teams should start at the same time. Alice wants to ensure that every team is assigned a starting time in such a way that the sum of their start times is minimized. Your task is to help Alice by finding the optimal distinct starting times for the teams. Given an integer n, determine the starting times for n teams such that the sum of the starting times is minimized and each starting time is a distinct positive integer. Input A single line contains an integer n (1 ≤ n ≤ 106). Output Print n distinct space-separated integers representing the starting times for each team such that their sum is minimized. Examples Input 3 Output 1 2 3 Input 5 Output 1 2 3 4 5 Input 7 Output 1 2 3 4 5 6 7 Note In the first example, the sequence is {1, 2, 3}. The sum of these numbers (1 + 2 + 3) is 6, which is the minimum possible for 3 distinct positive integers. In the second example, the sequence is {1, 2, 3, 4, 5}. The sum of these numbers (1 + 2 + 3 + 4 + 5) is 15, which is the minimum possible for 5 distinct positive integers. In the third example, the sequence is {1, 2, 3, 4, 5, 6, 7}. The sum of these numbers (1 + 2 + 3 + 4 + 5 + 6 + 7) is 28, which is the minimum possible for 7 distinct positive integers.","solution":"def starting_times(n): Returns the starting times for n teams such that the sum of the starting times is minimized and each starting time is a distinct positive integer. return list(range(1, n + 1))"},{"question":"You are given a connected undirected graph with `n` vertices and `m` edges. Each edge has a weight assigned to it. Your task is to perform a minimum-cost traversal of the graph that visits all vertices at least once. You can start at any vertex. A traversal can be represented as a sequence of vertices, starting from some initial vertex and moving along edges to the neighboring vertices. You are allowed to revisit vertices and edges. -----Input----- The first line of the input contains two integers `n` and `m` (2 leq n leq 50, 1 leq m leq 2000) — the number of vertices and edges in the graph. Each of the next `m` lines describes an edge and contains three integers `u`, `v`, and `w` (1 leq u, v leq n, 1 leq w leq 1000) — the vertices the edge connects and the weight of the edge. The graph is connected and may have multiple edges between the same vertices or self-loops. -----Output----- Print one integer — the minimum cost required to traverse all the vertices in the graph at least once. -----Examples----- Input 4 5 1 2 3 2 3 4 1 3 2 3 4 7 2 4 1 Output 13 Input 3 3 1 2 5 2 3 4 1 3 8 Output 9 Input 5 5 1 2 6 2 3 2 3 4 1 4 5 5 1 5 7 Output 15 -----Note----- In the first example: A possible traversal with minimum cost would be: `1 -> 2 -> 4 -> 3 -> 1`. This traversal visits all vertices and the total cost is `3 + 1 + 7 + 2 = 13`. In the second example: A possible traversal with minimum cost would be: `1 -> 2 -> 3`. This traversal visits all vertices and the total cost is `5 + 4 = 9`.","solution":"import heapq import itertools def minimum_cost_traversal(n, m, edges): # Build the graph as an adjacency list graph = [{} for _ in range(n)] for u, v, w in edges: if v-1 in graph[u-1]: if graph[u-1][v-1] > w: graph[u-1][v-1] = w else: graph[u-1][v-1] = w if u-1 in graph[v-1]: if graph[v-1][u-1] > w: graph[v-1][u-1] = w else: graph[v-1][u-1] = w # Prim\'s algorithm to find the minimum spanning tree weight def mst_cost(start): visited = [False] * n min_heap = [(0, start)] # (cost, vertex) total_cost = 0 edges_used = 0 while min_heap and edges_used < n: cost, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost edges_used += 1 for v, w in graph[u].items(): if not visited[v]: heapq.heappush(min_heap, (w, v)) return total_cost total_mst_cost = mst_cost(0) return total_mst_cost"},{"question":"You are given an array A of n integers. You want to find out the length of the shortest subarray that, if sorted in non-decreasing order, will make the whole array sorted in non-decreasing order. Constraints * 1 leq n leq 1000 * 0 leq A[i] leq 10^5 Input Input is given from Standard Input in the following format: ``` n A[0] A[1] A[2] ... A[n-1] ``` Output Print the length of the shortest subarray that, if sorted, will make the whole array sorted in non-decreasing order. Examples Input 6 1 3 5 4 2 6 Output 4 Input 5 1 2 3 4 5 Output 0 Input 7 10 12 11 14 13 15 16 Output 4","solution":"def shortest_unsorted_subarray_length(n, A): Returns the length of the shortest subarray that, if sorted in non-decreasing order, will make the whole array sorted in non-decreasing order. if n <= 1: return 0 start, end = 0, n-1 # Find the first element which is not at the correct position from the left while start < n-1 and A[start] <= A[start+1]: start += 1 # if the array is already sorted if start == n-1: return 0 # Find the first element which is not at the correct position from the right while end > 0 and A[end] >= A[end-1]: end -= 1 # Find the maximum and minimum of the subarray A[start:end+1] min_subarray, max_subarray = min(A[start:end+1]), max(A[start:end+1]) # Extend the subarray to the left while start > 0 and A[start-1] > min_subarray: start -= 1 # Extend the subarray to the right while end < n-1 and A[end+1] < max_subarray: end += 1 return end - start + 1"},{"question":"In a coding competition, there is a unique challenge involving integers and least significant digits. Given two integers, L and R, you are required to find the smallest non-negative integer N such that the last digit of N multiplied by any integer in the range [L, R] is the same. In other words, you need to find the smallest N (including zero) such that for every integer X in the range [L, R], the last digit of (N * X) is the same. Write an algorithm that calculates this smallest non-negative integer N. Input - The input consists of a single line containing two integers L and R (1 ≤ L ≤ R ≤ 1000). Output - Output the smallest non-negative integer N such that the last digit of N multiplied by any integer in the range [L, R] is the same. If no such N exists, output -1. Constraints - 1 ≤ L ≤ R ≤ 1000 Example Input: 3 8 Output: 0 Input: 5 5 Output: 1 Explanation Example 1: - For N = 0, (0 * X) % 10 = 0 for any integer X, including every integer in range [3, 8]. Example 2: - For N = 1 and X = 5 in the range [5, 5], (1 * 5) % 10 = 5, thus N = 1 satisfies the condition.","solution":"def smallest_N_for_digit(L, R): Find the smallest N such that for every integer X in the range [L, R], the last digit of (N * X) is the same. # Last digit of 0 is universally 0 for any multiplication, hence it always satisfies the condition. return 0"},{"question":"You are working for a manufacturer of widgets, and you need to determine the optimal way to pack them. Each widget must be packed into its own box, but the boxes come in three different sizes: small, medium, and large. The sizes are such that a small box can contain 1 widget, a medium box can contain 3 widgets, and a large box can contain 5 widgets. The goal is to minimize the number of boxes used, with a priority to use larger boxes first. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single integer N - the number of widgets to be packed. ------ Output Format ------ For each test case, output the minimum number of boxes needed to pack N widgets. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 150 ----- Sample Input 1 ------ 3 9 20 7 ----- Sample Output 1 ------ 3 4 3 ----- Explanation 1 ------ Test case-1: 9 widgets can be packed into 1 large box (5 widgets), 1 medium box (3 widgets), and 1 small box (1 widget), totaling 3 boxes. Test case-2: 20 widgets can be packed into 4 large boxes (each containing 5 widgets), totaling 4 boxes. Test case-3: 7 widgets can be packed into 1 large box (5 widgets), and 1 medium box (3 widgets), totaling 3 boxes.","solution":"def min_boxes_needed(n): Returns the minimum number of boxes needed to pack n widgets. large_boxes = n // 5 remaining_widgets = n % 5 medium_boxes = remaining_widgets // 3 remaining_widgets = remaining_widgets % 3 small_boxes = remaining_widgets return large_boxes + medium_boxes + small_boxes def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) results.append(min_boxes_needed(N)) for result in results: print(result)"},{"question":"Implement a priority queue with two additional operations: getKsmallest and getKlargest. The priority queue should handle a sequence of add, getKsmallest, and getKlargest operations efficiently. -----Input Format:----- - The first line contains an integer N, the number of operations. - Each of the following N lines contains an operation in one of the following formats: - \\"add x\\" where x is an integer to be added to the priority queue. - \\"getKsmallest k\\" where k is the number of smallest elements to retrieve from the queue. - \\"getKlargest k\\" where k is the number of largest elements to retrieve from the queue. -----Output Format:----- - For each \\"getKsmallest k\\" and \\"getKlargest k\\" operation, output a line with k space-separated integers in non-decreasing and non-increasing order respectively. - If there are fewer than k elements in the queue, output all current elements sorted appropriately. -----Constraints:----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ x ≤ 10^9 - 1 ≤ k ≤ 10^5 -----Sample Input:----- 10 add 3 add 1 add 4 add 1 add 5 getKsmallest 2 add 9 add 2 getKlargest 3 getKsmallest 10 -----Sample Output:----- 1 1 9 5 4 1 1 2 3 4 5 9","solution":"import heapq class PriorityQueue: def __init__(self): self.elements = [] def add(self, x): heapq.heappush(self.elements, x) def getKsmallest(self, k): return heapq.nsmallest(k, self.elements) def getKlargest(self, k): return heapq.nlargest(k, self.elements) def process_operations(operations): pq = PriorityQueue() results = [] for op in operations: if op.startswith(\\"add\\"): _, x = op.split() pq.add(int(x)) elif op.startswith(\\"getKsmallest\\"): _, k = op.split() result = \' \'.join(map(str, pq.getKsmallest(int(k)))) results.append(result) elif op.startswith(\\"getKlargest\\"): _, k = op.split() result = \' \'.join(map(str, pq.getKlargest(int(k)))) results.append(result) return results"},{"question":"Vasya has a unique ability to find patterns in strings. One of his favorite tasks is to identify the longest palindromic substring within a given string. A string is called a palindrome if it reads the same from left to right and from right to left. For example, the strings \\"racecar\\", \\"madam\\", and \\"a\\" are palindromes, but the strings \\"hello\\" and \\"abc\\" are not. Vasya decided to play a game using this ability. Given multiple strings, he wants to determine the length of the longest palindromic substring for each string. Help Vasya by writing a program that solves this problem. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases in the input. Then t test cases follow. Each test case consists of one line containing a string s (1 le |s| le 1000) — the string for which the longest palindromic substring length must be found. The string consists of English letters only. -----Output----- For each test case, print one integer — the length of the longest palindromic substring in the given string. -----Example----- Input 4 racecar hello a abcba Output 7 2 1 5","solution":"def longest_palindromic_substring_length(t, strings): def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 results = [] for s in strings: if len(s) == 0: results.append(0) continue start, end = 0, 0 for i in range(len(s)): len1 = expand_around_center(s, i, i) len2 = expand_around_center(s, i, i + 1) max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 results.append(end - start + 1) return results"},{"question":"A new sports arena is being constructed, and you are tasked with determining the minimum cost to set up the foundation. The arena is built on a rectangular grid of land plots, and each plot has a different cost associated with stabilizing it. Stabilizing a plot makes it suitable for constructing the foundation. To ensure structural integrity, the foundation must be built such that it forms a contiguous sub-rectangle on the grid. That is, the foundation should span an entire section of rows and columns, without leaving any gaps in between. Given the grid dimensions and the cost of stabilizing each plot, your task is to find the minimum cost to stabilize a rectangular sub-grid of at least one plot. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid respectively. The next n lines each contain m space-separated integers, where the j-th integer in the i-th row represents the cost of stabilizing the plot at position (i, j) (1 ≤ cost ≤ 100). Output Print a single integer — the minimum cost to stabilize a rectangular sub-grid. Examples Input 3 4 2 4 1 5 3 2 7 6 4 8 3 2 Output 1 Input 2 2 3 3 3 1 Output 1 Input 4 3 10 15 20 15 18 25 5 10 5 10 10 10 Output 5","solution":"def min_stabilizing_cost(grid): n = len(grid) m = len(grid[0]) min_cost = float(\'inf\') for i in range(n): for j in range(m): min_cost = min(min_cost, grid[i][j]) return min_cost # Example usage: # grid = [ # [2, 4, 1, 5], # [3, 2, 7, 6], # [4, 8, 3, 2] # ] # print(min_stabilizing_cost(grid)) # Output: 1"},{"question":"Gina is designing a game where the characters can be arranged in a line, and each character has a power level represented by an integer. To make her game strategy more interesting, she has decided to create a series of tasks where only the characters with adjacent powers can merge. Each character can perform the following operation: 1) Pick any two adjacent characters i and i+1 such that their power levels differ by 1. 2) Merge these two characters into a new character whose power is the sum of the original two characters\' powers. Note that after each operation, the length of the character line decreases by 1. For example, if the character powers are [2, 3, 5, 4], she can select i = 2 (powers 3 and 4 differ by 1) and merge them into a single character with power 7. After the operation, the array becomes [2, 7, 4]. Gina wants to find the minimum number of operations required to reduce the entire character line to one character by repeatedly merging the adjacent characters with powers differing by 1. It is guaranteed that it is always possible to reduce the character line to one character using the above operation. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the size of the array of character powers. - The second line of each test case contains N space-separated integers P_{1}, P_{2}, dots, P_{N} denoting the power levels of characters. ------ Output Format ------ For each test case, output the minimum number of operations required to reduce the character line to one character. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ P_{i} ≤ 10^{5} - Sum of N over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 3 4 1 2 3 4 3 2 3 4 5 1 3 5 7 9 ----- Sample Output 1 ------ 3 2 0 ----- Explanation 1 ------ Test Case 1: We can perform the following operations: - [1, underline{2}, 3, 4] xrightarrow{i = 2} [1, 5, 4] - [1, underline{5}, 4] xrightarrow{i = 3} [1, 9] - [1, underline{9}] xrightarrow{i = 2} [10] Test Case 2: We can perform the following operations: - [2, underline{3}, 4] xrightarrow{i = 2} [2, 7] - [2, underline{7}] xrightarrow{i = 2} [9] Test Case 3: The power levels do not differ by 1, hence no operation can be performed.","solution":"def min_operations_to_merge_characters(test_cases): results = [] for n, powers in test_cases: # Convert the powers list to a set for quick lookups power_set = set(powers) operations_count = 0 for power in powers: # Check if there is an adjacent power (either power-1 or power+1) if (power - 1 in power_set) or (power + 1 in power_set): operations_count += 1 power_set.remove(power) # Simulate merge by removing power from set results.append(operations_count) return results"},{"question":"Given an array of integers, find the maximum sum of a contiguous subarray of the given array. Provide the start and end indices of this subarray along with the sum. Constraints * 1 ≤ n ≤ 300,000 * -10^9 ≤ array[i] ≤ 10^9 Input n array_0 array_1 array_2 ... array_n-1 Output sum start_index end_index Where \\"sum\\" is the maximum sum of the contiguous subarray, and \\"start_index\\" and \\"end_index\\" are the indices of the subarray that produces this sum. If there are multiple such subarrays, return the one with the smallest start index. If there is still a tie, return the one with the smallest end index. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 3 6 Explanation The contiguous subarray with the maximum sum is [4, -1, 2, 1], which starts at index 3 and ends at index 6, and its sum is 6.","solution":"def max_subarray(arr): Returns the maximum sum of a contiguous subarray, along with its start and end indices. n = len(arr) if n == 0: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, n): if current_sum < 0: current_sum = arr[i] s = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i elif current_sum == max_sum: if i - s < end - start or (i - s == end - start and s < start): start = s end = i return max_sum, start, end"},{"question":"You are given an integer array of size `n` containing unique integers. Your task is to find the pair of integers `(a, b)` in the array such that `a < b` and there are no integers in the array between `a` and `b`. -----Input----- The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains `n` unique integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9). -----Output----- Print a single line containing two integers `a` and `b` such that `a < b` and there are no integers in the array between `a` and `b`. It can be shown that there is always at least one valid pair. If there are multiple possible answers, print any valid pair. -----Examples----- Input 5 5 1 7 3 9 Output 1 3 Input 4 8 2 6 4 Output 6 8","solution":"def find_pair(arr): Finds the pair of integers (a, b) such that a < b and there are no integers in between a and b. Parameters: arr (list): List of unique integers. Returns: tuple: Pair of integers (a, b). arr.sort() n = len(arr) min_diff = float(\'inf\') pair = (arr[0], arr[1]) for i in range(n - 1): if arr[i+1] - arr[i] < min_diff: min_diff = arr[i+1] - arr[i] pair = (arr[i], arr[i+1]) return pair"},{"question":"A group of children wants to play a game where they form a circle and pass a ball around. One child starts with the ball and passes it `k` positions to the right. They keep passing the ball every `k` positions until one child ends up holding the ball after making a full circle. We need to determine who will be holding the ball after making one full rotation around the circle, given the start position and the number of positions `k` the ball is passed. **Input:** - An integer `n` representing the number of children sitting in a circle (`1 <= n <= 10^5`). - An integer `start_pos` representing the starting position of the ball (`0 <= start_pos < n`). - An integer `k` representing the number of positions the ball is passed to the right each time (`0 <= k < 10^9`). **Output:** - An integer representing the final position of the ball after a full rotation. **Method Signature:** ```python def final_position(n: int, start_pos: int, k: int) -> int: pass ``` **Examples:** ```python # Example 1 n = 5 start_pos = 0 k = 2 # Ball moves: 0 -> 2 -> 4 -> 1 -> 3 -> 0 (back to start) # Result: 0 # Example 2 n = 7 start_pos = 4 k = 3 # Ball moves: 4 -> 0 -> 3 -> 6 -> 2 -> 1 # Result: 1 # Example 3 n = 10 start_pos = 3 k = 5 # Ball moves: 3 -> 8 -> 3 (back to start) # Result: 3 ``` Note: The ball always completes a full circle due to the constraints provided.","solution":"def final_position(n: int, start_pos: int, k: int) -> int: Determines the final position of the ball after making one full rotation around the circle. Args: n (int): Number of children sitting in a circle. start_pos (int): The starting position of the ball. k (int): The number of positions the ball is passed to the right each time. Returns: int: The final position of the ball. # The final position can be determined using modulo arithmetic to handle wrapping around the circle return (start_pos + k % n) % n"},{"question":"Marina is fascinated with sequences and number properties. She has a sequence of n integers a1, a2, ..., an. She likes to find contiguous subarrays that meet certain conditions. One of her favorite exercises is to find the maximum sum of any contiguous subarray of length exactly k. Can you help Marina with her exercise? Your task is to write a program that, given the initial sequence and the length of the subarrays, finds the maximum sum of any contiguous subarray of length exactly k. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of the sequence and the length of the subarrays Marina is interested in. The second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the sequence. Output Print a single integer — the maximum sum of any contiguous subarray of length exactly k. Examples Input 5 3 1 -2 3 4 -1 Output 6 Input 5 2 -1 -2 -3 -4 -5 Output -3","solution":"def max_sum_of_subarray_of_length_k(n, k, arr): Finds the maximum sum of any contiguous subarray of length exactly k. Args: n : int : Length of the sequence k : int : Length of the subarrays arr : list of int : The sequence of integers Returns: int : The maximum sum of any contiguous subarray of length k # Initialize the sum of the first subarray of length k. current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window technique to find the maximum sum of subarray of length k. for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"We have a collection of N items, each with a certain value and weight. You are tasked with determining the maximum value of items that can be selected without exceeding a specified weight for multiple queries. The items are numbered 1 to N, and the value and weight of item i are represented by V_i and W_i respectively. For each query, given M items (chosen from the total N items) and a maximum weight L, find the maximum value of the items that can be selected without exceeding the specified weight L. Constraints: - All values in input are integers. - 1 leq N leq 500 - 1 leq Q leq 1000 - 1 leq V_i leq 1000 - 1 leq W_i leq 1000 - For each query, 1 leq M leq N and 1 leq L leq 1000 Input: The input is given from Standard Input in the following format: N V_1 W_1 : V_N W_N Q M_1 L_1 m_1.1 m_1.2 ... m_1.M_1 : M_Q L_Q m_Q.1 m_Q.2 ... m_Q.M_Q Output: For each integer i from 1 through Q, the i-th line should contain the response to the i-th query. Example: Input: 5 10 5 20 7 30 9 40 11 50 13 3 2 10 1 5 3 20 2 3 4 15 2 1 3 3 4 5 1 2 Output: 10 70 20 Explanation: For the first query, items 1 and 2 can be chosen with total value 10 and total weight 5 which is less than or equal to 10. For the second query, items 2, 3, and 4 can be chosen with total value 70 and total weight 27 which is less than or equal to 20. For the third query, item 2 can be chosen with value 20 and weight 7 which is less than or equal to 15.","solution":"def knapsack(values, weights, n, max_weight): dp = [0] * (max_weight + 1) for i in range(n): for w in range(max_weight, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[max_weight] def solve_knapsack_problem(n, items, queries): results = [] for M, L, indices in queries: values = [items[i - 1][0] for i in indices] weights = [items[i - 1][1] for i in indices] max_value = knapsack(values, weights, M, L) results.append(max_value) return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 items = [] for i in range(n): V = int(data[idx]) W = int(data[idx + 1]) items.append((V, W)) idx += 2 q = int(data[idx]) idx += 1 queries = [] for i in range(q): M = int(data[idx]) L = int(data[idx + 1]) idx += 2 indices = [int(data[idx + j]) for j in range(M)] idx += M queries.append((M, L, indices)) results = solve_knapsack_problem(n, items, queries) for result in results: print(result) if __name__ == \'__main__\': main()"},{"question":"Given an integer N, return all possible unique permutations of the numbers [1, 2, ..., N]. Constraints: * 1 leq N leq 9 Input: Input is given from Standard Input in the following format: N Output: Output all unique permutations satisfying the condition in the following format: Length p11 p12 ... p1N p21 p22 ... p2N ... pM1 pM2 ... pMN Where Length indicates the number of permutations, and each subsequent line represents one permutation of the numbers [1, 2, ..., N]. Examples: Input: 3 Output: 6 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 Input: 2 Output: 2 1 2 2 1","solution":"from itertools import permutations def generate_permutations(N): nums = list(range(1, N + 1)) perms = permutations(nums) perms_list = list(perms) print(len(perms_list)) for perm in perms_list: print(\\" \\".join(map(str, perm)))"},{"question":"Mia is playing with sequences of letters. She likes palindromes very much. A palindrome is a sequence of characters which reads the same backward as forward. Mia wants to create the longest possible palindrome by rearranging the letters in a given string. Given a string s, determine if Mia can rearrange the characters to form a palindrome. If it is possible, return the length of the longest palindrome she can create. If it is impossible to create any palindrome from the given string, return -1. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5), containing only lowercase English letters. Output Output an integer, representing the length of the longest palindrome that can be formed by rearranging the characters of the given string. If no palindrome can be made, output -1. Examples Input abccccdd Output 7 Input aabbcc Output 6 Input abcdefg Output -1 Note In the first example, one of the optimal palindromes Mia can form is dccaccd, which has a length of 7. In the second example, Mia can arrange the letters to form the palindrome abcba, having a length of 6. In the third example, it\'s not possible to form any palindrome from the given string. Therefore, the output is -1.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed by rearranging the characters of the given string. If it\'s impossible, returns -1. from collections import Counter # Count frequency of each character char_count = Counter(s) length = 0 odd_count = 0 for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count += 1 # If there\'s any odd count, we can still place one odd character in the middle if odd_count > 0: length += 1 # If we cannot form a palindrome if length <= 1 and len(s) > 1: return -1 return length"},{"question":"Bob is a hacker and he loves converting string cases. He has recently found a string and wants to convert all uppercase letters in the string to lowercase and all lowercase letters to uppercase. However, he can only perform one operation at a time. Can you help Bob achieve this? Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string s of length n consisting of uppercase and lowercase English letters. Output Print the modified string where all uppercase letters are converted to lowercase and all lowercase letters are converted to uppercase. Examples Input 5 aBcDe Output AbCdE Input 10 HelloWorld Output hELLOwORLD","solution":"def toggle_case(n, s): Toggles the case of each character in the string s. Parameters: n (int): The length of the string s. s (str): The input string consisting of lowercase and uppercase English letters. Returns: str: The modified string where all uppercase letters are converted to lowercase and all lowercase letters are converted to uppercase. return s.swapcase()"},{"question":"Julia is learning about modular arithmetic and is fascinated by how numbers work modulo some integer. She came up with a unique problem to test her understanding and needs your help to solve it. Given two integers, a and b, and a modulus m, find the smallest non-negative integer x that satisfies the following conditions: 1. (a + x) % m == (b + x) % m 2. x is non-negative -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing three integers a, b, and m, separated by spaces. -----Output----- For each test case, output a single line containing a single integer: the smallest non-negative integer x that satisfies the given conditions. -----Constraints----- - 1 ≤ T ≤ 30 - 0 ≤ a, b ≤ 10^9 - 1 ≤ m ≤ 10^9 -----Example----- Input: 3 10 12 5 6 8 4 15 20 10 Output: 3 2 5 -----Explanation----- Example case 1. The smallest x that satisfies (10 + x) % 5 == (12 + x) % 5 is x = 3 because (10 + 3) % 5 = 13 % 5 = 3 and (12 + 3) % 5 = 15 % 5 = 0. Since 3 and 0 are not equal, we must look at the next possible value for x until they match. Example case 2. The smallest x that satisfies (6 + x) % 4 == (8 + x) % 4 is x = 2, so that when 6 + 2 = 8 and 8 + 2 = 10, both of which are divisible by 4. Example case 3. The smallest x that satisfies (15 + x) % 10 == (20 + x) % 10 is x = 5, making both sides evaluate to 0 when taken modulo 10.","solution":"def smallest_x(a, b, m): Returns the smallest non-negative integer x that satisfies (a + x) % m == (b + x) % m. # The difference between a and b must be divisible by m return (b - a) % m def solve(test_cases): Processes multiple test cases and returns their respective smallest x values. results = [] for a, b, m in test_cases: results.append(smallest_x(a, b, m)) return results"},{"question":"Chef needs your help to analyze customer preferences in his restaurant. He is interested in finding out the most common prefix length of dishes that different customers order. For this problem, you are given an array of strings, where each string represents the name of a dish ordered by a customer. Your task is to determine the length of the longest common prefix that is shared among all the dishes. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of dishes. - The next N lines contain one string each, representing the name of the dish ordered. ------ Output Format ------ - For each test case, output a single integer which represents the length of the longest common prefix among all the given dishes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ length(dish) ≤ 100 ----- Sample Input 1 ------ 3 3 spaghetti spanakopita spicy 2 pizza pizzicato 4 applepie applejuice applecrumble appletart ----- Sample Output 1 ------ 2 4 5 ----- Explanation ------ In the first test case, \'sp\' is the longest common prefix shared by all the dishes. In the second test case, \'pizza\' is the longest common prefix shared by the first four characters of both dishes. In the third test case, \'apple\' is the longest common prefix shared by all the dishes.","solution":"def longest_common_prefix(strs): Returns the longest common prefix of an array of strings. if not strs: return 0 # The shortest string will limit the comparison of the common prefix. min_length = min(len(s) for s in strs) for i in range(min_length): char = strs[0][i] for s in strs[1:]: if s[i] != char: return i return min_length def find_longest_common_prefix_length(test_cases): results = [] for dishes in test_cases: prefix_length = longest_common_prefix(dishes) results.append(prefix_length) return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) dishes = [] for j in range(N): dishes.append(input_lines[index + 1 + j]) test_cases.append(dishes) index += N + 1 return find_longest_common_prefix_length(test_cases)"},{"question":"Task You are given an `n x m` matrix where each cell contains an integer value, representing the cost of stepping into that cell. You start at the top-left corner of the matrix and want to reach the bottom-right corner, but you can only move to the adjacent cells (right, down). Your goal is to find the path from the top-left to the bottom-right corner such that the sum of the costs along the path is minimized. Write a function that returns the minimum cost to reach the bottom-right corner of the matrix. # Example For the matrix: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The function should return `7`, since the path `1 → 3 → 1 → 1 → 1` has the minimum cost of 7. # Input/Output - `[input]` integer matrix `costs` (2D list) A 2D list where the element at index `i, j` represents the cost of the cell at row `i` and column `j`. `0 < len(costs) <= 100` `0 < len(costs[x]) <= 100` - `[output]` integer The minimum cost to reach the bottom-right corner of the matrix.","solution":"def min_cost_path(costs): Returns the minimum cost to reach the bottom-right corner of the matrix from the top-left corner. if not costs or not costs[0]: return 0 n = len(costs) m = len(costs[0]) # Create a 2D dp array with the same dimensions as costs dp = [[0] * m for _ in range(n)] dp[0][0] = costs[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + costs[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + costs[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + costs[i][j] return dp[n-1][m-1]"},{"question":"Given an array of integers, return a new array where each element at index i is the sum of all the elements in the original array except the one at index i. Example ```python input_array = [1, 2, 3, 4] ``` Here, for each element, you need to calculate the sum of all other elements: * For the element at index 0: `2 + 3 + 4 = 9` * For the element at index 1: `1 + 3 + 4 = 8` * For the element at index 2: `1 + 2 + 4 = 7` * For the element at index 3: `1 + 2 + 3 = 6` Therefore, `solve(input_array) = [9, 8, 7, 6]` Good luck!","solution":"def solve(input_array): Given an array of integers, returns a new array where each element at index i is the sum of all the elements in the original array except the one at index i. Parameters: input_array (list of int): The input array of integers. Returns: list of int: The new array with the described property. total_sum = sum(input_array) return [total_sum - x for x in input_array]"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the product of all the numbers in the original list except the one at the current index. For example, given the list [1, 2, 3, 4], the output should be [24, 12, 8, 6] since 24 = 2*3*4, 12 = 1*3*4, 8 = 1*2*4, and 6 = 1*2*3. Your function should handle cases where the list contains zeros as well, ensuring the product calculation is accurate and does not result in division by zero errors. Good luck!","solution":"def product_except_self(nums): Function to return a list where each element is the product of all the elements in the original list except the one at the current index. length = len(nums) if length == 0: return [] # Initialize the answer array answer = [1] * length # Calculate the prefixes product prefix = 1 for i in range(length): answer[i] = prefix prefix *= nums[i] # Calculate the suffixes product and finalize the answer array suffix = 1 for i in range(length - 1, -1, -1): answer[i] *= suffix suffix *= nums[i] return answer"},{"question":"# Task: Write a function `find_intersection` which accepts two lists of unique integers and returns a list of integers that appear in both lists, sorted in ascending order. # Example: ```python >>> find_intersection([1, 3, 4, 6, 7, 9], [1, 2, 4, 5, 9, 10]) [1, 4, 9] >>> find_intersection([2, 4, 6, 8], [1, 3, 5, 7, 9]) [] >>> find_intersection([10, 20, 30, 40], [15, 20, 25, 30]) [20, 30] ``` # Notes: * Both input lists are guaranteed to contain unique integers. * The order of integers in the output list should be in ascending order. * The function should have a time complexity of O(n log n) or better.","solution":"def find_intersection(list1, list2): Finds the intersection of two lists of unique integers. Returns a sorted list of integers that appear in both lists. # Convert both lists to sets to perform set intersection set1 = set(list1) set2 = set(list2) # Perform intersection operation intersection = set1.intersection(set2) # Return the sorted list of the intersection return sorted(intersection)"},{"question":"A researcher is studying the growth patterns of a rare species of plant. Each day, the researcher records the height of the plant and calculates the average growth rate over certain periods. The growth rate is defined as the difference in height between the start and the end of the period, divided by the number of days in that period. The researcher wants a program that can efficiently manage these operations: 1. Record the height of the plant on a given day. 2. Query the average growth rate over a certain period. For instance, if the heights recorded over 5 days are [3, 8, 10, 15, 18], the average growth rate between day 2 and day 5 would be (18 - 8) / (5 - 2) = 10 / 3 ≈ 3.33. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of operations. Each of the next n lines contains an operation of one of the two types: * record d h Record the height of the plant on day d (1 ≤ d ≤ 105). h (0 ≤ h ≤ 104) denotes the height of the plant on that day. * query d1 d2 Query the average growth rate of the plant from day d1 to day d2 (1 ≤ d1 < d2 ≤ 105). Output For each query, output the average growth rate over the given period. Output the result up to 4 decimal places. Example Input 6 record 1 3 record 2 8 record 3 10 record 4 15 record 5 18 query 2 5 Output 3.3333","solution":"def record_height_and_query_growth(n, operations): Record the height of the plant on given days and query the average growth rate over periods. :param n: number of operations :param operations: list of operations :return: list of results for each query operation heights = {} results = [] for operation in operations: op = operation.split() if op[0] == \\"record\\": day = int(op[1]) height = int(op[2]) heights[day] = height elif op[0] == \\"query\\": d1 = int(op[1]) d2 = int(op[2]) if d1 in heights and d2 in heights: growth_rate = (heights[d2] - heights[d1]) / (d2 - d1) results.append(f\\"{growth_rate:.4f}\\") else: results.append(\\"0.0000\\") # Assuming a height of 0 if not recorded return results def plant_growth_operations(n, operations): return record_height_and_query_growth(n, operations)"},{"question":"You are given an array A of N integers and M queries. Each query can be of either of the following two types: 1. u x - Update the u-th index of the array to x. 2. l r - Determine the sum of the integers in the subrange from l-th to r-th index (inclusive). Input: The first line contains two integers N, the number of elements in the array, and M, the number of queries. The second line contains N integers representing the initial elements of the array. The following M lines will each contain a query as described above. Output: For each query of type 2, print the sum of the specified subrange in a new line. Constraints: 1 ≤ N, M ≤ 200000 1 ≤ A[i] ≤ 100000 1 ≤ u ≤ N 1 ≤ x ≤ 100000 1 ≤ l ≤ r ≤ N SAMPLE INPUT 5 5 5 3 6 2 1 2 1 3 1 2 8 2 2 4 1 5 10 2 1 5 SAMPLE OUTPUT 14 18 31 Explanation In the sample testcase, the initial array is [5, 3, 6, 2, 1]. 1. The first query asks for the sum of the subrange from 1st to 3rd index, which is 5 + 3 + 6 = 14. 2. The second query updates the 2nd index to 8, resulting in the array [5, 8, 6, 2, 1]. 3. The third query asks for the sum of the subrange from 2nd to 4th index, which is 8 + 6 + 2 = 16. 4. The fourth query updates the 5th index to 10, resulting in the array [5, 8, 6, 2, 10]. 5. The fifth query asks for the sum of the subrange from 1st to 5th index, which is 5 + 8 + 6 + 2 + 10 = 31.","solution":"def process_queries(N, M, array, queries): Processes M queries on an array of N integers. Parameters: N (int): The number of elements in the array. M (int): The number of queries. array (list): The initial array of integers. queries (list): The list of queries. Returns: list: List of results for the sum queries. results = [] for query in queries: if query[0] == 1: # Update operation u = query[1] - 1 # converting to 0-based index x = query[2] array[u] = x elif query[0] == 2: # Range sum operation l = query[1] - 1 # converting to 0-based index r = query[2] - 1 # converting to 0-based index results.append(sum(array[l:r+1])) return results"},{"question":"Determine if a given binary string can be made into a palindrome by performing at most one swap between any two distinct positions. If it can be done, return \\"YES\\", otherwise return \\"NO\\". -----Constraints----- - The length of the binary string will be between 1 and 10^5 inclusive. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"YES\\" if the binary string can be made into a palindrome by one swap at most, otherwise print \\"NO\\". -----Sample Input----- 10110 -----Sample Output----- YES By swapping the last \'1\' and the second \'0\', the binary string becomes 10011, which is a palindrome. Thus, we print \\"YES\\". -----Sample Input----- 111000 -----Sample Output----- NO No single swap can make the string \'111000\' into a palindrome. Thus, we print \\"NO\\".","solution":"def can_be_palindrome_with_one_swap(S): Determines if a given binary string can be made into a palindrome by performing at most 1 swap between any two distinct positions. n = len(S) mismatch_indices = [] for i in range(n // 2): if S[i] != S[n - i - 1]: mismatch_indices.append(i) if len(mismatch_indices) > 2: return \\"NO\\" if len(mismatch_indices) == 0: return \\"YES\\" if len(mismatch_indices) == 2: i1, i2 = mismatch_indices if (S[i1] == S[n - i2 - 1] and S[i2] == S[n - i1 - 1]): return \\"YES\\" return \\"NO\\""},{"question":"A string is said to be a special string if it contains no repeating characters. Given a string s, find the length of the longest substring that is a special string (i.e., all characters of the substring are unique). Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Your Task: You don’t need to read input or print anything. Your task is to complete the function lengthOfLongestSubstring() which takes a string s and returns an integer as output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(min(N, M)), where N is the length of the string and M is the character set size. Constraints: 1 <= s.length <= 10^5 s contains only ASCII characters.","solution":"def lengthOfLongestSubstring(s): This function returns the length of the longest substring without repeating characters. char_set = set() left = 0 # start of the sliding window max_length = 0 for right in range(len(s)): # If character is in the set, move the left pointer while s[right] in char_set: char_set.remove(s[left]) left += 1 # Add the current character to the set char_set.add(s[right]) # Update the maximum length max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an undirected graph with N nodes and M edges, provide the number of its connected components. Each edge connects two nodes, and nodes are labeled from 1 to N. Constraints * 1 leq N leq 1000 * 0 leq M leq 5000 * 1 leq u_i, v_i leq N Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Output Print the number of connected components in the graph. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 6 0 Output 6 Input 7 5 1 2 2 3 3 4 5 6 6 7 Output 2","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque # Creating adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) connected_components = 0 for node in range(1, n + 1): if node not in visited: visited.add(node) bfs(node) connected_components += 1 return connected_components"},{"question":"Your friend has written a book containing N chapters. Each chapter is identified with a unique string name. You want to compile a list of unique chapter names for reference, ignoring chapter names that are repeated. Write a program to output all the unique chapter names in the order they first appear in the input. -----Constraints----- - 1 leq N leq 2times 10^5 - Each chapter name consists of lowercase English letters and has a length between 1 and 20 (inclusive). -----Input----- Input is given from Standard Input in the following format: N name_1 name_2 : name_N -----Output----- Print all unique chapter names in the order they first appear in the input, each on a new line. -----Sample Input----- 5 introduction basics variables basics syntax -----Sample Output----- introduction basics variables syntax","solution":"def unique_chapters(N, chapter_names): This function returns a list of unique chapter names in the order they first appear. :param N: Number of chapter names (integer) :param chapter_names: List of chapter names (list of strings) :return: List of unique chapter names in the order they first appeared (list of strings) seen = set() unique_names = [] for name in chapter_names: if name not in seen: seen.add(name) unique_names.append(name) return unique_names"},{"question":"Alice is developing a new encryption system, and she needs your help to complete a crucial part of the algorithm. The encryption process involves taking a string and generating key strings of a specific length. These key strings are created by rotating the original string by one character to the left for each new key string. You will write a function that given a string `S` and an integer `K`, outputs the first `K` key strings generated by rotating the original string `S`. Input: - The first line will contain T, the number of test cases. - The next T lines will each contain a string S (composed of lowercase English letters) and an integer K. Output: - For each test case, print the first K key strings created by rotating the original string S. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ length of S ≤ 100 - 1 ≤ K ≤ length of S SAMPLE INPUT 2 abcdef 3 xyz 2 SAMPLE OUTPUT bcdefa cdefab defabc yzx zxy Explanation: For the first test case: Original string: \\"abcdef\\" 1st rotation: \\"bcdefa\\" 2nd rotation: \\"cdefab\\" 3rd rotation: \\"defabc\\" For the second test case: Original string: \\"xyz\\" 1st rotation: \\"yzx\\" 2nd rotation: \\"zxy\\"","solution":"def generate_key_strings(S, K): Returns the first K key strings generated by rotating the original string S. key_strings = [] for i in range(K): # Rotate the string by one character to the left S = S[1:] + S[0] key_strings.append(S) return key_strings def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list of tuples): Each tuple contains a string S and an integer K. Returns: list of lists: Each inner list contains the first K key strings for the corresponding test case. results = [] for S, K in test_cases: results.append(generate_key_strings(S, K)) return results"},{"question":"Determine the Largest Element in Each Subarray Constraints * 1 ≤ N ≤ 1000 * -10^6 ≤ Elements of the array ≤ 10^6 Input The input consists of a series of test cases. Each test case starts with an integer N, which indicates the size of the array. This is followed by N integers representing the elements of the array. The input will be terminated by EOF. Output For each test case, output the largest element in the array in one line. Example Input 5 1 3 -2 8 5 3 -1 -5 -3 4 7 4 2 9 Output 8 -1 9","solution":"def find_largest_elements(test_cases): Given a list of test cases, where each test case is a list of integers starting with the size of the array, this function finds and returns the largest element in each subarray. largest_elements = [] for case in test_cases: N = case[0] arr = case[1:] if N != len(arr): raise ValueError(\\"The array size does not match the given N.\\") largest_elements.append(max(arr)) return largest_elements"},{"question":"Palindromic Substrings * Write a function named `countPalindromicSubstrings` that takes a single parameter, a string `text`, and returns an integer representing the number of palindromic substrings in the given text. * A palindromic substring is a substring that reads the same backward as forward. Single character substrings are considered palindromic. Example: ``` countPalindromicSubstrings(\\"abba\\") // returns 6, as the palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\" countPalindromicSubstrings(\\"abc\\") // returns 3, as the palindromic substrings are: \\"a\\", \\"b\\", \\"c\\" ```","solution":"def countPalindromicSubstrings(text): Returns the number of palindromic substrings in the given text. :param text: A string in which to count palindromic substrings. :return: An integer representing the number of palindromic substrings. n = len(text) count = 0 def is_palindrome(left, right): while left >= 0 and right < n and text[left] == text[right]: left -= 1 right += 1 nonlocal count count += 1 for i in range(n): # Count odd length palindromes centered at i is_palindrome(i, i) # Count even length palindromes centered between i and i+1 is_palindrome(i, i + 1) return count"},{"question":"Given an integer array and an integer k, find the number of pairs of integers in the array whose sum is equal to k. Example 1: Input: nums = [1, 2, 3, 4, 3], k = 6 Output: 2 Explanation: The pairs (2, 4) and (3, 3) sum up to 6. Example 2: Input: nums = [1, 1, 1, 1], k = 2 Output: 6 Explanation: Each of the pairs (1, 1) sums up to 2. There are six such pairs in the array. Example 3: Input: nums = [0, -1, 2, -3, 1], k = -2 Output: 1 Explanation: The pair (-3, 1) sums up to -2.","solution":"from collections import Counter def count_pairs_with_sum(nums, k): Returns the number of pairs in the list whose sum is equal to k. count = 0 freq = Counter(nums) for num in nums: complement = k - num if complement in freq: count += freq[complement] if complement == num: count -= 1 return count // 2"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function `is_almost_palindrome(s: str) -> bool` that checks if a given string `s` can become a palindrome by removing at most one character. The function should return `True` if it is possible, and `False` otherwise. Examples: ```python is_almost_palindrome(\\"abca\\") == True # Removing \'b\' results in \\"aca\\", which is a palindrome. is_almost_palindrome(\\"racecar\\") == True # \\"racecar\\" is already a palindrome. is_almost_palindrome(\\"hello\\") == False # There is no way to make \\"hello\\" a palindrome by removing just one character. is_almost_palindrome(\\"deified\\") == True # \\"deified\\" is already a palindrome. is_almost_palindrome(\\"radarx\\") == True # Removing \'x\' results in \\"radar\\", which is a palindrome. ``` Keep in mind that only alphanumeric characters should be considered, and any distinctions between uppercase and lowercase characters should be ignored. ```python def is_almost_palindrome(s: str) -> bool: # Implementation goes here ``` The function should be efficient enough to handle strings of up to 10^5 characters.","solution":"def is_almost_palindrome(s: str) -> bool: Checks if the given string can become a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if the part of the string from index i to j is a palindrome. while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True s = \'\'.join([c.lower() for c in s if c.isalnum()]) i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) i += 1 j -= 1 return True"},{"question":"Given an array of N integers and an integer S, determine if there are two distinct elements in the array that add up to S. Return true if such a pair exists, otherwise return false. Example 1: Input: arr = [1, 4, 45, 6, 10, -8] S = 16 Output: true Explanation: The pair (10, 6) adds up to 16. Example 2: Input: arr = [1, 2, 3, 9] S = 8 Output: false Explanation: There is no pair that adds up to 8. Example 3: Input: arr = [0, -1, 2, -3, 1] S = -2 Output: true Explanation: The pair (-3, 1) adds up to -2. Your Task: You don\'t need to read input or print anything. Complete the function hasPairWithSum() which takes an array of N integers and an integer S as input and returns a boolean indicating if there is a pair that adds up to S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ S ≤ 10^9","solution":"def hasPairWithSum(arr, S): Determine if there are two distinct elements in the array that add up to S. Parameters: arr (list of int): the list of integers S (int): the target sum Returns: bool: True if such a pair exists, otherwise False seen = set() for num in arr: complement = S - num if complement in seen: return True seen.add(num) return False"},{"question":"A team of engineers is working on a project to analyze the water quality in a river. They have N sensors placed at different points along the river to collect data on the pollution levels. Each sensor records its pollution level as an integer. The pollution level can either be positive, indicating the presence of pollutants, or negative, indicating a decrease due to some natural purification process. The engineers want to know the maximum possible pollution level sum they can get from a contiguous subarray of the sensor data for each segment of the river they analyze. ------ Input Format ------ - The first line of input contains T, the number of test cases. - Each test case begins with an integer N, the number of sensors. - The second line of each test case contains N space-separated integers representing the pollution levels recorded by the sensors. ------ Output Format ------ For each test case, print on a new line the maximum possible sum of pollution levels in any contiguous subarray. ------ Constraints ------ 1 ≤T ≤10^5 1 ≤N ≤10^5 -10^9 ≤ text{pollution level} ≤ 10^9 - The sum of all N across all test cases does not exceed 10^5 ----- Sample Input 1 ------ 3 4 1 -2 3 4 5 -3 -2 -1 4 3 3 -1 -1 -1 ----- Sample Output 1 ------ 7 7 -1 ----- Explanation 1 ------ Test case 1: The contiguous subarray with the maximum sum is [3, 4], which results in a sum of 7. Test case 2: The contiguous subarray with the maximum sum is [4, 3], which results in a sum of 7. Test case 3: The contiguous subarray with the maximum sum is just [-1], which results in a sum of -1.","solution":"def max_subarray_sum(arr): Function to find the maximum possible sum of a contiguous subarray in a given list \'arr\'. if not arr: return 0 current_max = max_sum = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_sum = max(max_sum, current_max) return max_sum def solve(test_cases): Function to process multiple test cases and return the results for max subarray sums. results = [] for sensors in test_cases: results.append(max_subarray_sum(sensors)) return results # Example usage: t = 3 input_data = [ [1, -2, 3, 4], [-3, -2, -1, 4, 3], [-1, -1, -1] ] # For testing purpose directly print(solve(input_data))"},{"question":"Given a non-empty list of positive integers representing the floor number reached by a sequence of elevator stops, you need to determine the minimum energy required for the elevator to make all the stops. The energy is defined as the total number of floors traveled, where moving one floor up or down counts as one floor traveled. Create a function `minimum_energy_stops` that takes a list of integers representing the floors and returns the minimum energy needed to make all the stops in the given sequence. # Example ``` minimum_energy_stops([1, 3, 6, 2, 9, 5]) = 14 // The elevator starts at floor 1, so the floors traveled are: // 1 to 3: 2 floors // 3 to 6: 3 floors // 6 to 2: 4 floors // 2 to 9: 7 floors // 9 to 5: 4 floors // Total energy = 2 + 3 + 4 + 7 + 4 = 20 ``` # Additional Example ``` minimum_energy_stops([4, 4, 5, 6, 5]) = 2 // The elevator starts at floor 4, so the floors traveled are: // 4 to 4: 0 floors (no movement) // 4 to 5: 1 floor // 5 to 6: 1 floor // 6 to 5: 1 floor // Total energy = 0 + 1 + 1 + 1 = 3 ``` # Constraints - The list will have at least 1 floor stop. - Floor numbers are all positive integers.","solution":"def minimum_energy_stops(floors): Returns the minimum energy needed to make all the stops given the sequence of floors. # Initialize the total energy required total_energy = 0 # Iterate through the list of floors and calculate the total energy for i in range(1, len(floors)): total_energy += abs(floors[i] - floors[i-1]) return total_energy"},{"question":"Write a function that takes an array of integers and an integer k, and returns all unique pairs of integers in the array that add up to k. Each pair should be returned as a tuple, with the smaller number first. The function should return a list of tuples representing the pairs. If no valid pairs are found, return an empty list. For example, for the array `[1, 2, 3, 4, 5, 6]` and `k = 7`, the valid pairs are `[ (1, 6), (2, 5), (3, 4) ]`. Your function should take two arguments (a list of integers and an integer) and return a list of tuples. The integers will be between -1000 and 1000, and the list will contain up to 1000 elements. Test cases will provide various arrays and k values. Ensure your function handles them efficiently.","solution":"def find_pairs(nums, k): Finds all unique pairs of integers in the array that add up to k. Args: nums (list of int): The list of integers. k (int): The target sum. Returns: list of tuple: A list of tuples representing the pairs. nums.sort() pairs = [] seen = set() for num in nums: target = k - num if target in seen: pairs.append((min(num, target), max(num, target))) seen.add(num) # Remove duplicates unique_pairs = list(set(pairs)) unique_pairs.sort() return unique_pairs"},{"question":"Given an integer array A of length N, Chef wants to create a new array B such that every element B_{i} is the sum of the product of each pair of adjacent elements in A from index 1 to i. Specifically, B_{1} = A_{1} * A_{2} B_{2} = A_{1} * A_{2} + A_{2} * A_{3} B_{3} = A_{1} * A_{2} + A_{2} * A_{3} + A_{3} * A_{4} ... B_{N-1} = A_{1} * A_{2} + A_{2} * A_{3} + ... + A_{N-1} * A_{N} Chef has lost the original array A. Given the array B, you need to help Chef recover the array A. If there are multiple solutions, output any valid array A. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the size of the array A. - The second line of each test case contains N-1 space-separated integers B_{1}, B_{2}, ..., B_{N-1} denoting the array B. ------ Output Format ------ For each test case, output N space-separated integers A_{1}, A_{2}, ..., A_{N} denoting the array A. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 10^{5} 1 ≤ B_{i} ≤ 10^{10} - The sum of N over all test cases does not exceed 10^{5}. - It is guaranteed that a valid array A always exists. ------ Sample Input 1 ------ 2 3 2 5 4 7 8 9 ------ Sample Output 1 ------ 1 2 3 1 7 1 9 ------ Explanation 1 ------ Test case 1: For A = [1, 2, 3], the calculation for B is: - B_{1} = A_{1} * A_{2} = 1 * 2 = 2 - B_{2} = A_{1} * A_{2} + A_{2} * A_{3} = 1 * 2 + 2 * 3 = 2 + 6 = 8 Test case 2: For A = [1, 7, 1, 9], the calculation for B is: - B_{1} = A_{1} * A_{2} = 1 * 7 = 7 - B_{2} = A_{1} * A_{2} + A_{2} * A_{3} = 1 * 7 + 7 * 1 = 7 + 7 = (total: 14) - B_{3} = A_{1} * A_{2} + A_{2} * A_{3} + A_{3} * A_{4} = 1 * 7 + 7 * 1 + 1 * 9 = total: 23","solution":"def recover_array_from_B(N, B): Given the array B, recover an array A such that the sum of the product of each pair of adjacent elements in A from index 1 to i matches the given values in B. Args: N (int): size of the array A. B (List[int]): array B of size N-1. Returns: List[int]: the recovered array A of size N. A = [1] # Start with an initial value of 1 for A[0] for i in range(N-1): next_value = B[i] // A[-1] A.append(next_value) return A def process_test_cases(test_cases): results = [] for case in test_cases: N, B = case results.append(recover_array_from_B(N, B)) return results"},{"question":"Julia has recently enrolled in a university and is very enthusiastic about her studies. She wants to maintain a perfectly balanced schedule between her lectures and her self-study hours throughout the week. Let\'s number days of the week from 1 to 7 (Monday through Sunday). Every day, she has a certain schedule to follow. For each day i, she has L_i hours of lectures and S_i hours of self-study planned. However, Julia can do additional self-study hours whenever she has free time, but she cannot attend more lectures than scheduled. To keep her schedule balanced, she aims for the total number of lecture hours and self-study hours for the week to be equal. Each day has a total of 24 hours. If she finds that she is not capable of balancing her schedule ideally, Julia wants to know how many additional self-study hours she needs to add in total over the week to achieve the perfect balance. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains seven space-separated integers L_1, L_2, L_3, L_4, L_5, L_6, L_7 where L_i denotes the number of hours of lectures on day i. - The second line of each test case contains seven space-separated integers S_1, S_2, S_3, S_4, S_5, S_6, S_7 where S_i denotes the number of hours of self-study on day i. -----Output----- For each test case, print a single line containing the integer representing the total extra self-study hours Julia needs to do during the week to balance her schedule. -----Constraints----- - 1 le T le 500 - 0 leq L_i leq 24 for each valid i - 0 leq S_i leq 24 for each valid i -----Example Input----- 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 10 10 10 10 10 10 10 5 5 5 5 5 5 5 -----Example Output----- 21 35 -----Explanation----- Example case 1: The total number of lecture hours is 3+4+5+6+7+8+9=42. The total number of self-study hours is 1+2+3+4+5+6+7=28. Julia needs to add 42-28=14 more self-study hours to balance her schedule. Example case 2: The total number of lecture hours is 10+10+10+10+10+10+10=70. The total number of self-study hours is 5+5+5+5+5+5+5=35. Julia needs to add 70-35=35 more self-study hours to balance her schedule.","solution":"def additional_self_study_hours(T, test_cases): Computes the additional self-study hours required to balance the schedule for each test case. Parameters: T (int): The number of test cases test_cases (list of tuples): Each tuple contains two lists of integers. The first list represents lecture hours (L) for 7 days, and the second list represents self-study hours (S) for 7 days. Returns: list: A list of integers where each integer represents the additional self-study hours needed. results = [] for lectures, self_studies in test_cases: total_lectures = sum(lectures) total_self_studies = sum(self_studies) additional_hours_needed = total_lectures - total_self_studies results.append(additional_hours_needed) return results"},{"question":"An e-commerce platform wants to optimize its inventory management system. Given a list of items with their sales quantities recorded over the past month, find the list of items that need to be reordered. An item should be reordered if its sales quantity is below a given threshold. Write a function to determine which items need to be reordered. -----Constraints----- - 1 <= N <= 10^4 (number of items) - 1 <= sales[i] <= 10^3 (sales quantity of each item) - 1 <= threshold <= 10^3 (reorder threshold) -----Input----- The input consists of two lines: 1. An integer N representing the number of items. 2. N space-separated integers representing the sales quantities of each item. 3. An integer threshold representing the reorder threshold. -----Output----- Print the indices (1-based) of items that need to be reordered, separated by space. If no items need to be reordered, print \\"No reorders\\". -----Sample Input----- 5 3 10 6 2 8 5 -----Sample Output----- 1 4 Explanation: In this example, the reorder threshold is 5. Among the 5 items, the sales quantities of the first item (3) and the fourth item (2) are below 5, so these items need to be reordered. Their 1-based indices are 1 and 4.","solution":"def find_items_to_reorder(N, sales, threshold): This function returns the 1-based indices of items that need to be reordered. Parameters: N (int): Number of items. sales (list of int): Sales quantities of each item. threshold (int): Reorder threshold. Returns: list of int: 1-based indices of items that need to be reordered. reorder_indices = [i + 1 for i in range(N) if sales[i] < threshold] if reorder_indices: return reorder_indices else: return [\\"No reorders\\"] # Example usage: # N = 5 # sales = [3, 10, 6, 2, 8] # threshold = 5 # Output should be [1, 4]"},{"question":"You are given an array representing the stock prices of a company in chronological order. Write a function `maximizeProfit(prices)` that returns the maximum profit that can be achieved by buying one stock and then selling it later. If no profit can be achieved, return 0. The purchase must be before the sale. Example: ```python maximizeProfit([7, 1, 5, 3, 6, 4]) # should return 5 (buy at 1 and sell at 6) maximizeProfit([7, 6, 4, 3, 1]) # should return 0 (no profit is possible) maximizeProfit([1, 2, 90, 10, 110]) # should return 109 (buy at 1 and sell at 110) ```","solution":"def maximizeProfit(prices): Returns the maximum profit that can be achieved by buying one stock and then selling it later. If no profit can be achieved, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a small town, there exists a network of N intersections connected by bidirectional roads. The town council has a problem; they want to determine whether it is possible to remove some roads such that the road network remains fully connected, but the number and length of the roads are minimized. Your job is to help them find this minimal road network configuration. ---Constraints--- - 2 ≤ N ≤ 100 - (N-1) ≤ M ≤ (N(N-1)/2) - 1 ≤ L ≤ 10^6 ---Inputs--- Input is given from Standard Input in the following format: N M The next M lines each contain three integers: u v L Where: - N is the number of intersections. - M is the number of roads. - u and v are intersections connected by a road. - L is the length of the road between intersections u and v. ---Outputs--- Output the minimal sum of all road lengths forming a fully connected network (a spanning tree). ---Sample Input--- 4 5 1 2 1 1 3 3 2 3 1 3 4 1 4 1 6 ---Sample Output--- 3 Explanation: One possible minimal road network is: - Intersection 1 to Intersection 2 with length 1. - Intersection 2 to Intersection 3 with length 1. - Intersection 3 to Intersection 4 with length 1. The total length of the roads in this network is 1 + 1 + 1 = 3.","solution":"def minimal_spanning_tree(N, roads): Finds the minimal sum of all road lengths forming a fully connected network. Args: N (int): Number of intersections. roads (list of tuples): List of roads where each tuple is (u, v, L). Returns: int: Minimal sum of road lengths in the spanning tree. # Sort the roads by weight (length) roads.sort(key=lambda x: x[2]) # Initialize parent and rank arrays for Union-Find/Disjoint Set Union (DSU) parent = list(range(N)) rank = [0] * N def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 mst_length = 0 for u, v, length in roads: u -= 1 # Convert to zero-indexed v -= 1 # Convert to zero-indexed if find(u) != find(v): union(u, v) mst_length += length return mst_length def run_solution(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) L = int(data[index + 2]) roads.append((u, v, L)) index += 3 result = minimal_spanning_tree(N, roads) print(result)"},{"question":"Given an array of integers, create a function `find_peak_element(arr)` that returns the index of any one of its peak elements. A peak element is an element that is greater than its neighbors. If the array has multiple peaks, return the index of any peak. You can assume `arr` will have at least one element.","solution":"def find_peak_element(arr): Returns the index of any one of its peak elements. A peak element is an element that is greater than its neighbors. n = len(arr) if n == 1: return 0 if arr[0] >= arr[1]: return 0 if arr[n - 1] >= arr[n - 2]: return n - 1 for i in range(1, n - 1): if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]: return i"},{"question":"The Tech Company has developed a new set of USB devices. Each device can transfer data at a certain speed and operates continuously once plugged in. However, the devices can only function for a specific duration before they need to be recharged. Given an array representing the data transfer rates of each device and another array representing the operating times of each device, determine the maximum amount of data that can be transferred if each device can be used such that no two devices overlap their operating times. -----Input:----- - The first line will contain an integer ( T ), the number of test cases. - For each test case: - The first line contains an integer ( N ), the number of devices. - The second line contains ( N ) integers where the ( i )-th integer represents the data transfer rate of the ( i )-th device. - The third line contains ( N ) integers where the ( i )-th integer represents the operating time of the ( i )-th device. -----Output:----- For each test case, print the maximum amount of data that can be transferred. -----Constraints----- - ( 1 leq T leq 1000 ) - ( 1 leq N leq 1000 ) - ( 1 leq text{transfer rate of each device} leq 1000 ) - ( 1 leq text{operating time of each device} leq 1000 ) -----Sample Input:----- 1 3 10 20 30 1 2 3 -----Sample Output:----- 140 -----EXPLANATION:----- In the sample input, we have three devices with different transfer rates and operating times: - Device 1: 10 units/second for 1 second. - Device 2: 20 units/second for 2 seconds. - Device 3: 30 units/second for 3 seconds. We can choose to use all devices as their operating times do not overlap if they are used one after another: - Device 1 can transfer ( 10 times 1 = 10 ) units of data. - Device 2 can transfer ( 20 times 2 = 40 ) units of data. - Device 3 can transfer ( 30 times 3 = 90 ) units of data. Therefore, the maximum amount of data that can be transferred is ( 10 + 40 + 90 = 140 ).","solution":"def maximize_data_transfer(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] rates = case[\'rates\'] times = case[\'times\'] # Combining rates and times to calculate data for each device data = [rates[i] * times[i] for i in range(N)] # Summing up the data total_data = sum(data) results.append(total_data) return results def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) rates = list(map(int, lines[index + 1].split())) times = list(map(int, lines[index + 2].split())) test_cases.append({\'N\': N, \'rates\': rates, \'times\': times}) index += 3 return T, test_cases def get_output_str(results): return \'n\'.join(map(str, results)) if __name__ == \\"__main__\\": import sys input_str = sys.stdin.read() T, test_cases = process_input(input_str) results = maximize_data_transfer(T, test_cases) output_str = get_output_str(results) print(output_str)"},{"question":"You are given a directed acyclic graph (DAG) with N nodes and M edges. Each node has a unique identifier ranging from 1 to N. Each edge has a positive integer weight representing the time it takes to traverse that edge. Your task is to determine the minimum time required to travel from Node 1 to Node N. Your solution should be efficient and handle large inputs within a reasonable runtime. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2×10^5 - 1 ≤ weight of each edge ≤ 10^6 -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 weight_1 u_2 v_2 weight_2 : u_M v_M weight_M -----Output----- Print the minimum time required to travel from Node 1 to Node N. If it is not possible to travel from Node 1 to Node N, print -1. -----Sample Input----- 5 6 1 2 5 2 3 10 1 3 15 3 4 7 2 5 9 4 5 3 -----Sample Output----- 17 Travel from Node 1 to Node 2, then from Node 2 to Node 5. The total time is 5 + 9 = 14.","solution":"import heapq from collections import defaultdict def minimum_travel_time(N, M, edges): def dijkstra(start, end): distances = {node: float(\'inf\') for node in range(1, N + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 graph = defaultdict(list) for u, v, weight in edges: graph[u].append((v, weight)) return dijkstra(1, N)"},{"question":"Given a list of integers, write a function to find and return the second largest number in the list. If the list has fewer than two distinct numbers, return None. Input: - A list of integers. Output: - An integer representing the second largest number or None if no such number exists. Constraints: - The list will have at least one integer. Example: Input: [4, 2, 5, 1, 5, 3] Output: 4 Example: Input: [7, 7, 7] Output: None","solution":"def second_largest(numbers): Returns the second largest distinct number in the list. If the list has fewer than two distinct numbers, returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Your task is to implement a function that processes a series of operations on a list. You are given an integer `n` representing the number of operations, followed by `n` operations. The operations can be one of the following forms: 1. \\"insert x y\\": Insert the integer `y` at position `x` in the list. 2. \\"get x\\": Get the integer at position `x` in the list. 3. \\"delete x\\": Remove the integer at position `x` from the list. The list is initially empty. Input The first line contains the integer `n` (1 ≤ n ≤ 2·10^5) — the number of operations. Each of the next `n` lines contains a string `op` describing the operation in the form mentioned above: - \\"insert x y\\" (0 ≤ x ≤ current length of list, -10^6 ≤ y ≤ 10^6) - \\"get x\\" (0 ≤ x < current length of list) - \\"delete x\\" (0 ≤ x < current length of list) Output For each \\"get x\\" operation, output the integer present at the `x`-th position in the list on a new line. Example Input 7 insert 0 5 insert 1 10 insert 2 15 get 1 delete 1 get 1 insert 1 20 Output 10 15 Note After performing the operations step by step: - The list after `insert 0 5`: [5] - The list after `insert 1 10`: [5, 10] - The list after `insert 2 15`: [5, 10, 15] - The \\"get 1\\" operation returns 10. - The list after `delete 1`: [5, 15] - The \\"get 1\\" operation returns 15. - The list after `insert 1 20`: [5, 20, 15]","solution":"def process_operations(n, operations): result = [] my_list = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"insert\\": x = int(parts[1]) y = int(parts[2]) my_list.insert(x, y) elif command == \\"get\\": x = int(parts[1]) result.append(my_list[x]) elif command == \\"delete\\": x = int(parts[1]) del my_list[x] return result"},{"question":"A company is working on a system to monitor and predict energy usage patterns in smart homes. The core of this system relies on understanding sequences of device operations across a day, where each operation can either turn a device on or off. To help develop this monitoring system, they need a function to determine the longest continuous sequence of hours during which the total number of active devices never changes. Devices operate hourly based on a provided schedule, where each hour\'s activity is represented by an integer array where 1 indicates a device turning on and -1 indicates a device turning off. For instance, a schedule `[1, -1, 1, 1, -1, -1]` means the devices\' state changes as follows over 6 hours: - Hour 1: +1 (one device turns on) - Hour 2: -1 (one device turns off) - Hour 3: +1 (one device turns on) - Hour 4: +1 (one device turns on) - Hour 5: -1 (one device turns off) - Hour 6: -1 (one device turns off) Using the schedule, they need to find the longest time period during which the number of active devices remains unchanged. Input Format - An integer N, the number of hours (1 <= N <= 100000). - An array of N integers, each being either 1 or -1, representing the hourly operations on the devices. Output Format - An integer representing the length of the longest continuous period of hours during which the number of active devices remains unchanged. Sample Input 0 6 1 -1 1 1 -1 -1 Sample Output 0 2 Explanation 0 The system state changes at each hour as follows: - 1 -> 0 -> 1 -> 2 -> 1 -> 0 The longest period where the number of active devices doesn\'t change is from hour 2 to hour 3 (and also hour 4 to hour 5), both lasting for 2 hours.","solution":"def longest_stable_period(operations): Finds the longest continuous period of hours during which the number of active devices remains unchanged. Parameters: operations (list of int): List of hourly operations (1 for \'on\', -1 for \'off\') Returns: int: Length of the longest stable period if not operations: return 0 max_length = 0 current_length = 1 net_change = operations[0] for i in range(1, len(operations)): if operations[i] == operations[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Reset the length for the new constant sequence # Check last sequence length max_length = max(max_length, current_length) return max_length"},{"question":"Write a function to reverse the digits in an integer without converting the integer to a string or using any built-in reverse functions. Example 1: Input: 12345 Output: 54321 Example 2: Input: -123 Output: -321 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseInteger() which takes an integer N as input and returns the integer with its digits reversed. Expected Time Complexity: O(log(N)) Expected Auxiliary Space: O(1) Constraints: -10^9 ≤ N ≤ 10^9","solution":"def reverseInteger(N): Reverses the digits of the given integer without converting it to a string. is_negative = N < 0 N = abs(N) reversed_number = 0 while N > 0: reversed_number = reversed_number * 10 + (N % 10) N = N // 10 return -reversed_number if is_negative else reversed_number"},{"question":"Given a list of integers where each element appears twice except for one, find that single one. Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Explanation: The unique element in the list is the one which appears only once while others appear twice.","solution":"def single_number(nums): Function to find the single number in a list where every other number appears twice. :param nums: List[int] - A list of integers. :return: int - The single number that appears only once in the list. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Sophie is eager to track her friends\' birthdays and wants to build a birthday reminder program. She starts with an initial list of friends, each associated with a particular month of the year. She then performs a series of operations to update or query this list. Each operation is one of the following: 1. Add a new friend with their birthday month. 2. Update the birthday month of an existing friend. 3. Query the friends who have their birthdays in a specific month. Your task is to help Sophie by writing a program that maintains and processes these operations efficiently. -----Constraints----- - The list of friends can have a maximum of 100,000 entries. - Each friend\'s name is a string of lowercase English letters (1 to 20 characters long). - The months are labeled from 1 (January) to 12 (December). - The total number of operations is up to 200,000. -----Input----- Input is given from Standard Input in the following format: N Friend_1 Month_1 Friend_2 Month_2 : Friend_N Month_N Q Operation_1 Operation_2 : Operation_Q where: - N is the initial number of friends (0 ≤ N ≤ 100,000). - Each of the next N lines contains Friend_i and Month_i, indicating the initial month of Friend_i\'s birthday. - Q is the number of operations. - Each of the next Q lines describes an operation in one of the following formats: - \\"ADD Friend Month\\" to add a new friend\'s birthday month. - \\"UPDATE Friend Month\\" to update the birthday month of an existing friend. - \\"QUERY Month\\" to list friends who have their birthdays in the specified month. -----Output----- For each \\"QUERY\\" operation, print the names of the friends who have their birthdays in the specified month in lexicographical order. If no friend has a birthday in that month, print \\"NONE\\". -----Sample Input----- 2 alice 1 bob 2 5 ADD charlie 3 UPDATE alice 2 QUERY 1 QUERY 2 QUERY 3 -----Sample Output----- NONE alice bob charlie Explanation of the sample: Initially, the list has alice with a birthday in January (1) and bob with a birthday in February (2). - Operation 1: Add charlie with a birthday in March (3). - Operation 2: Update alice\'s birthday to February (2). Now both alice and bob have their birthdays in February. - Operation 3: Query birthdays in January. There are no friends with a birthday in January, so the output is \\"NONE\\". - Operation 4: Query birthdays in February. Both alice and bob have their birthdays in February, so the output is \\"alice bob\\". - Operation 5: Query birthdays in March. Charlie has a birthday in March, so the output is \\"charlie\\".","solution":"def birthday_reminder(initial_data, operations): from collections import defaultdict # Dictionary mapping friend names to their birthday months friends_to_month = {} # Dictionary mapping months to a set of friend names month_to_friends = defaultdict(set) # Process initial data for friend, month in initial_data: friends_to_month[friend] = month month_to_friends[month].add(friend) results = [] # Process operations for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": friend = parts[1] month = int(parts[2]) friends_to_month[friend] = month month_to_friends[month].add(friend) elif parts[0] == \\"UPDATE\\": friend = parts[1] new_month = int(parts[2]) old_month = friends_to_month[friend] month_to_friends[old_month].remove(friend) friends_to_month[friend] = new_month month_to_friends[new_month].add(friend) elif parts[0] == \\"QUERY\\": month = int(parts[1]) friends_in_month = sorted(month_to_friends[month]) if friends_in_month: results.append(\' \'.join(friends_in_month)) else: results.append(\\"NONE\\") return results"},{"question":"You are given a string consisting of lowercase English letters and a pattern string containing lowercase English letters and the wildcard characters \'?\' and \'*\'. The wildcard character \'?\' matches exactly one character, and \'*\' matches any sequence of characters (including the empty sequence). Write a program to determine whether the pattern matches the entire input string. -----Input----- The first line contains a string s (1 le |s| le 100) consisting of lowercase English letters. The second line contains a string p (1 le |p| le 100) which is the pattern string consisting of lowercase English letters and the wildcard characters \'?\' and \'*\'. -----Output----- Output \\"YES\\" if the pattern matches the entire input string, and \\"NO\\" otherwise. -----Examples----- Input ababab a?ab* Output YES Input abcdefg abc?fg Output NO Input xyz *x Output NO -----Note----- In the first example text{ababab} matches the pattern text{a?ab*} because \\"?\\" can match \\"b\\" and \\"*\\" can match \\"ab\\". In the second example text{abcdefg} does not match the pattern text{abc?fg} because \\"?\\" can match only one character, not \\"de\\". In the third example text{xyz} does not match the pattern text{*x} because the \\"z\\" character at the end does not fit the pattern.","solution":"def wildcard_match(s, p): Determines if the pattern p matches the entire string s. Args: s (str): the input string to match, consisting of lowercase English letters. p (str): the pattern string, consisting of lowercase English letters, \'?\' and \'*\'. Returns: str: \\"YES\\" if the pattern matches the entire input string, \\"NO\\" otherwise. len_s = len(s) len_p = len(p) dp = [[False] * (len_p + 1) for _ in range(len_s + 1)] dp[0][0] = True for j in range(1, len_p + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, len_s + 1): for j in range(1, len_p + 1): if p[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or s[i - 1] == p[j - 1]: dp[i][j] = dp[i - 1][j - 1] return \\"YES\\" if dp[len_s][len_p] else \\"NO\\""},{"question":"Given a list of integers, you are required to find out the length of the longest subsequence such that every element in the subsequence is an increasing power of 2 sequence. Example 1: Input: [3, 10, 4, 8, 16, 20] Output: 3 Explanation: The longest subsequence that forms an increasing power of 2 is [4, 8, 16]. Example 2: Input: [1, 2, 4, 8, 3, 6, 12] Output: 4 Explanation: The longest subsequence that forms an increasing power of 2 is [1, 2, 4, 8]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPowerOf2Subseq() which takes the list of integers as input parameter and returns the length of the longest subsequence that forms an increasing power of 2. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: 1 <= length of the list <= 1000","solution":"def is_power_of_2(x): Helper function to check if a number is a power of 2. return (x != 0) and (x & (x - 1)) == 0 def longestPowerOf2Subseq(arr): Finds the length of the longest subsequence such that every element in the subsequence is an increasing power of 2 sequence. powers_of_2 = [x for x in arr if is_power_of_2(x)] if not powers_of_2: return 0 # Sort the powers_of_2 to ensure increasing sequence powers_of_2.sort() max_length = 1 dp = [1] * len(powers_of_2) for i in range(1, len(powers_of_2)): for j in range(i): if powers_of_2[i] > powers_of_2[j]: dp[i] = max(dp[i], dp[j] + 1) max_length = max(dp) return max_length"},{"question":"Given an m x n grid of characters `grid` and a string `word`, return `true` if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Function Signature You should implement the following function: ```python def exist(grid: List[List[str]], word: str) -> bool: ``` # Input: - `grid`: A 2-dimensional list (m x n) of characters (0 <= m, n <= 200). - `word`: A string of length k (1 <= k <= 2000). # Output: - Return `true` if the word exists in the grid, otherwise return `false`. # Example: Input: ``` grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" ``` Output: ``` True ``` Input: ``` grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" ``` Output: ``` True ``` Input: ``` grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" ``` Output: ``` False ``` # Constraints: - The letters are case-sensitive. - The word can be constructed from letters of sequentially adjacent cells. - Same cell may not be reused. - The function should efficiently handle large grids.","solution":"from typing import List def exist(grid: List[List[str]], word: str) -> bool: # Function to check if the word can be found starting from position (i, j) def dfs(i, j, k): # If the entire word is found if k == len(word): return True # If out of bounds or character does not match or already visited if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != word[k]: return False # Mark the cell as visited by changing to a non-alphabet character tmp, grid[i][j] = grid[i][j], \'#\' # Explore all possible directions: up, down, left, right found = (dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)) # Restore the original value back grid[i][j] = tmp return found for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == word[0]: # Optimization to start DFS only if first letter matches if dfs(i, j, 0): return True return False"},{"question":"A new e-commerce platform is evaluating the performance of its recommendation system. The platform has a list of n products, each characterized by its unique identifier. Users interact with these products by clicking on them. The platform logs a click event every time a user interacts with a product and stores this information as a sequence of product identifiers in the order in which they were clicked. The goal is to identify the most frequently clicked product in a specific subsequence of click events, specified by a given range of indices. If there are multiple products with the same maximum number of clicks within the given range, return the product with the smallest identifier. -----Input----- Each test contains multiple test cases. The first line contains one positive integer t (1 le t le 10^2), denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n and q (1 le n, q le 10^5) — the number of products and the number of queries. The second line of each test case contains n integers p_1, p_2, ldots, p_n (1 le p_i le 10^9) — the identifiers of the products clicked by the users in sequence. Each next line from the next q lines contains two positive integers l_i and r_i (1 le l_i le r_i le n) — indices, describing the subsequence of the click events for which the query is performed. It is guaranteed that the sum of n over all test cases does not exceed 10^5, and the sum of q over all test cases does not exceed 10^5. -----Output----- For each test case, print q lines — each containing a single integer, the most frequently clicked product in the specified subsequence. If there are multiple products with the same maximum number of clicks, print the product with the smallest identifier. -----Examples----- Input 2 10 2 3 1 2 2 3 3 4 4 4 1 1 5 2 10 7 3 5 5 5 1 2 5 2 1 7 3 7 4 7 Output 3 4 5 5 אן -----Note----- In the first test case: - For the first query (subsequence 1 to 5), the products are [3, 1, 2, 2, 3]. The product 3 appears twice and product 2 also appears twice, but 2 is lexicographically smaller than 3. Thus, the answer is 2. - For the second query (subsequence 2 to 10), the products are [1, 2, 2, 3, 3, 4, 4, 4, 1]. The product 4 appears three times, which is the highest frequency. Thus, the answer is 4. In the second test case: - For the first query (subsequence 1 to 7), the products are [5, 5, 5, 1, 2, 5, 2]. The product 5 appears four times, which is the highest frequency. Thus, the answer is 5. - For the second query (subsequence 3 to 7), the products are [5, 1, 2, 5, 2]. The product 5 appears twice and product 2 also appears twice, but 2 is lexicographically smaller than 5. Thus, the answer is 2. - For the third query (subsequence 4 to 7), the products are [1, 2, 5, 2]. The product 2 appears twice, which is the highest frequency. Thus, the answer is 2.","solution":"from collections import defaultdict, Counter def find_most_frequent_product(t, test_cases): results = [] for test in test_cases: n, q, products, queries = test[\\"n\\"], test[\\"q\\"], test[\\"products\\"], test[\\"queries\\"] for query in queries: l, r = query subsequence = products[l-1:r] frequency_counter = Counter(subsequence) most_frequent = min(frequency_counter.items(), key=lambda x: (-x[1], x[0]))[0] results.append(most_frequent) return results"},{"question":"Longest Substring Without Repeating Characters Given a string, write a function to find the length of the longest substring without repeating characters. ___ Task Implement the function `length_of_longest_substring(s: str) -> int` that takes a single argument, a string `s`, and returns an integer representing the length of the longest substring within `s` that does not contain any repeating characters. ___ Examples ```python length_of_longest_substring(\\"abcabcbb\\") == 3 length_of_longest_substring(\\"bbbbb\\") == 1 length_of_longest_substring(\\"pwwkew\\") == 3 length_of_longest_substring(\\"a\\") == 1 length_of_longest_substring(\\"\\") == 0 ``` ___ Performance tests ```python Number of tests: 10 String length: 10,000 ```","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 window_start = 0 for window_end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= window_start: window_start = char_index_map[char] + 1 char_index_map[char] = window_end longest_length = max(longest_length, window_end - window_start + 1) return longest_length"},{"question":"Alex is a researcher who needs to identify patterns in sequences of integers. Specifically, he needs to find the largest contiguous subarray such that the difference between the maximum and minimum element in that subarray does not exceed a given value `k`. Your task is to help Alex by writing a program that finds such a subarray and returns its length. A contiguous subarray of an array is a subarray created by removing zero or more elements from either or both ends of the array. For example, if `arr = [1, 3, 2, 6, 4, 6, 8]` and `k = 2`, then the output should be `3` because the subarray `[2, 4, 6]` or any other valid subarray with the same length meets the condition, and `3` is the length of the longest such subarray. -----Input----- - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the length of the array and the maximum allowable difference. - The second line contains `n` integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the length of the longest contiguous subarray such that the difference between the maximum and minimum element in that subarray does not exceed `k`. -----Examples----- Input 7 2 1 3 2 6 4 6 8 Output 3 Input 5 0 5 5 5 5 5 Output 5 -----Note----- In the first example, the subarray `[2, 4, 6]` is the longest subarray that satisfies the condition with a length of `3`. In the second example, since all elements of the array are the same, any subarray of maximum length will satisfy the condition, hence the length of the subarray is `5`.","solution":"def longest_subarray_with_limit(arr, k): Returns the length of the longest contiguous subarray such that the difference between the maximum and minimum element in that subarray does not exceed k. from collections import deque if not arr: return 0 min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right in range(len(arr)): while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() min_deque.append(right) while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > k: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a series of book purchases, categorize the book type and count how many of each type were purchased. You are provided with a list of book purchases where each purchase is represented by a string indicating the book type. The possible book types are \\"fiction\\", \\"non-fiction\\", \\"comic\\", \\"educational\\", and \\"magazine\\". Your task is to create a function that categorizes and counts the number of purchases for each type of book and returns these counts in a dictionary format. --- Input --- - The first line of input contains an integer N, the number of book purchases. - The next N lines each contain a single string representing a book type. --- Output --- - The output should be a dictionary where the keys are the book types and the values are the counts of each type. --- Constraints --- - 1 leq N leq 10^5 - The book type strings will be one of \\"fiction\\", \\"non-fiction\\", \\"comic\\", \\"educational\\", or \\"magazine\\". --- Sample Input --- 7 fiction comic non-fiction educational comic fiction magazine --- Sample Output --- { \\"fiction\\": 2, \\"non-fiction\\": 1, \\"comic\\": 2, \\"educational\\": 1, \\"magazine\\": 1 }","solution":"def categorize_books(book_purchases): Categorizes and counts the number of purchases for each type of book. Args: book_purchases (list of str): List of book types purchased. Returns: dict: Dictionary with book types as keys and counts as values. book_count = { \\"fiction\\": 0, \\"non-fiction\\": 0, \\"comic\\": 0, \\"educational\\": 0, \\"magazine\\": 0 } for book in book_purchases: if book in book_count: book_count[book] += 1 return book_count"},{"question":"You are given a list of positive integers. Your task is to balance the list to make all integers equal by performing the minimum number of operations. In a single operation, you are allowed to: - Increment any one integer by 1. - Decrement any one integer by 1. Write a program that finds the minimum number of operations required to make all the integers in the list equal. --- Input --- The first line of input contains one integer N (1 le N le 100), the number of elements in the list. The second line of input contains N positive integers less than or equal to 1000000, the elements of the list. --- Output --- The single line of output should contain one integer, the minimum number of operations required to make all integers in the list equal. --- Examples --- Sample Input 1: 4 1 2 3 4 Sample Output 1: 4 Sample Input 2: 3 10 10 10 Sample Output 2: 0 Sample Input 3: 5 2 3 5 7 11 Sample Output 3: 13","solution":"def min_operations_to_equal_elements(N, elements): Returns the minimum number of operations required to make all integers in the list equal. Each operation can increment or decrement an integer by 1. Parameters: N (int): The number of elements in the list. elements (list of int): The list of positive integers. Returns: int: The minimum number of operations required. # The target value should be the median of the list for the minimum operations elements.sort() median = elements[N // 2] # choosing median return sum(abs(x - median) for x in elements)"},{"question":"A delivery robot is designed to deliver packages along a straight path that is marked with n equally spaced locations. On any day, the robot can be instructed to deliver to a subset of these locations, noted as an array where deliveries are needed, marked by \'1\', and locations with no delivery, marked by \'0\'. The robot can reverse its direction at any location, but this consumes extra energy. Your task is to compute the minimum energy required for the robot to complete all deliveries and return to the starting point, given that reversing direction at any point consumes 2 units of energy and moving from one location to the next consumes 1 unit of energy. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of locations. The second line contains an array of n integers a_1, a_2, ..., a_n (a_i is either 0 or 1) - the array of delivery needs. -----Output----- Print a single integer — the minimum energy needed for the robot to deliver all the packages and return to the starting point. -----Examples----- Input 7 0 1 0 0 1 0 0 Output 6 Input 5 1 0 1 0 1 Output 8 Input 3 1 1 0 Output 4 -----Note----- In the first example, the robot can travel to the second position, deliver the package, then move to the fifth position, deliver the package, and return to the starting point directly, with no need for reversing. In the second example, the robot can go from the start to the first position, then to the third position and then to the fifth position, returning directly to the start without reversing direction.","solution":"def minimum_energy(n, deliveries): Compute the minimum energy required for the robot to complete all deliveries and return to the starting point. :param n: Integer, the number of locations :param deliveries: List of integers (0s and 1s) representing locations requiring deliveries :return: Integer, the minimum energy required first = -1 last = -1 # Find the first and last delivery points for i in range(n): if deliveries[i] == 1: if first == -1: first = i last = i # No deliveries needed if first == -1: return 0 # Minimum energy is 2 * the distance from first to last delivery points return 2 * (last - first)"},{"question":"In a remote town, there are N houses aligned in a row and each house has a certain amount of gold. You are a thief planning to rob houses; however, due to the advanced security systems, you cannot rob two directly adjacent houses. You need to write a program to determine the maximum amount of gold you can rob without triggering alarms. -----Constraints----- - 1 ≤ N ≤ 100 - 0 ≤ Gold in each house ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N Gold1 Gold2 ... GoldN -----Output----- Print the maximum amount of gold you can rob without triggering alarms. -----Sample Input----- 4 1 2 3 1 -----Sample Output----- 4 In this case, the optimal strategy is to rob the first and third houses, which contain 1 and 3 gold respectively. -----Sample Input2----- 5 2 7 9 3 1 -----Sample Output2----- 12 In this case, the optimal strategy is to rob the second and fourth houses, which contain 7 and 9 gold respectively.","solution":"def max_gold_to_rob(N, gold): if N == 0: return 0 elif N == 1: return gold[0] dp = [0] * N dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + gold[i]) return dp[-1]"},{"question":"DNA Sequence Analysis Introduction Deoxyribonucleic acid (DNA) is a molecule that carries genetic instructions used in the growth, development, functioning, and reproduction of all known living organisms and many viruses. DNA sequences are composed of four nucleotides, each nucleotide represented by a character: `A` (adenine), `C` (cytosine), `G` (guanine), and `T` (thymine). In computational biology and bioinformatics, analyzing DNA sequences is essential to understanding the biological functions and evolutionary relationships between organisms. One of the common tasks is to find specific motifs or patterns within a DNA sequence. These motifs can be sequences of nucleotides that play critical roles in biological processes. Your task is to write a function that finds all occurrences of a specified nucleotide motif within a given DNA sequence. The function should return the starting indices of each occurrence of the motif within the DNA sequence. Task Write a function that accepts two arguments: 1. A DNA sequence (a string composed entirely of characters `A`, `C`, `G`, and `T`). 2. A nucleotide motif (a shorter string composed of the characters `A`, `C`, `G`, and `T`). The function should return a list of starting indices (0-based) where the motif occurs within the DNA sequence. If the motif does not occur in the sequence, return an empty list. **Example**: ```python find_motif(\\"ATCGATCGA\\", \\"CGA\\") ``` **Output**: ```python [2, 6] ``` **Explanation**: The motif \\"CGA\\" starts at indices 2 and 6 in the DNA sequence \\"ATCGATCGA\\". Constraints 1. The length of the DNA sequence will be between 1 and 1000. 2. The length of the motif will be between 1 and 100. 3. The motif will always be shorter than or equal to the length of the DNA sequence.","solution":"def find_motif(dna_sequence, motif): Finds all occurrences of the nucleotide motif within the given DNA sequence. Args: dna_sequence (str): The DNA sequence to search within. motif (str): The nucleotide motif to find. Returns: list: A list of starting indices where the motif occurs within the DNA sequence. occurrences = [] motif_length = len(motif) sequence_length = len(dna_sequence) # Traverse through dna_sequence to find all occurrences of motif for i in range(sequence_length - motif_length + 1): if dna_sequence[i:i + motif_length] == motif: occurrences.append(i) return occurrences"},{"question":"Your task is to write a program that reads a sequence of integers and identifies the length of the longest increasing subsequence within that sequence. An increasing subsequence is defined as a sequence where each subsequent element is greater than the previous one. Input A sequence of integers ai (1 ≤ ai ≤ 1000). The number of integers is less than or equals to 100. Output Print the length of the longest increasing subsequence. Example Input 10 9 2 5 3 7 101 18 Output 4 Explanation: The longest increasing subsequences are [2, 3, 7, 101].","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence. Args: nums (list of int): The input list of integers. Returns: int: The length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A new online shopping platform is being constructed, and a key component is an algorithm to determine the most popular products. The popularity of a product is determined by the total number of purchases made by various users. However, each product can only be purchased once per user. Your task is to find the most popular product based on the given data. You are given an integer N, which represents the number of unique products, and an integer M, which represents the number of purchases. Following this are M pairs of integers, each pair containing two integers U and P, where U denotes the ID of the user and P denotes the ID of the product that the user bought. Determine the ID of the most popular product (i.e., the product with the highest number of unique purchases). If there is a tie, return the product with the smallest ID. ------ Input Format ------ - The first line of input contains a single integer Q denoting the number of test cases. The description of Q test cases follows. - Each test case contains: - The first line contains two integers N and M. - The next M lines each contain two integers U and P. ------ Output Format ------ For each test case, print a single line containing one integer - the ID of the most popular product. ------ Constraints ------ 1 ≤ Q ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ U ≤ 1000 1 ≤ P ≤ N ----- Sample Input 1 ------ 2 5 6 1 1 2 2 1 2 3 2 2 3 3 1 3 4 1 1 1 2 2 2 2 1 ----- Sample Output 1 ------ 2 1 ----- explanation 1 ------ Test case 1: - Product 1 has been purchased by users 1 and 3 (2 unique purchases). - Product 2 has been purchased by users 1, 2, and 3 (3 unique purchases). - Product 3 has been purchased by user 2 (1 unique purchase). Hence, the most popular product is 2. Test case 2: - Product 1 has been purchased by users 1 and 2 (2 unique purchases). - Product 2 has been purchased by user 1 (1 unique purchase). Hence, the most popular product is 1.","solution":"def most_popular_product(Q, test_cases): result = [] for i in range(Q): N, M = test_cases[i][0] purchases = test_cases[i][1] product_user_mapping = {} for user, product in purchases: if product not in product_user_mapping: product_user_mapping[product] = set() product_user_mapping[product].add(user) max_purchases = -1 most_popular_product_id = -1 for product in range(1, N+1): if product in product_user_mapping: unique_purchases = len(product_user_mapping[product]) if unique_purchases > max_purchases or (unique_purchases == max_purchases and product < most_popular_product_id): max_purchases = unique_purchases most_popular_product_id = product result.append(most_popular_product_id) return result"},{"question":"Write a function that rearranges an array of integers such that all odd numbers appear before all even numbers, while preserving the relative order of the odd and even numbers. You are required to solve this problem without using any additional space i.e., in-place. Example 1: Input: A[] = {1, 2, 3, 4, 5, 6} Output: {1, 3, 5, 2, 4, 6} Example 2: Input: A[] = {4, 6, 3, 7, 8, 5} Output: {3, 7, 5, 4, 6, 8} Example 3: Input: A[] = {2, 4, 6, 8} Output: {2, 4, 6, 8} Example 4: Input: A[] = {1, 3, 5, 7} Output: {1, 3, 5, 7} Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrange() which takes the array A[] as input and rearranges the array in-place as described. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ A.length ≤ 10^6 -10^6 ≤ A[i] ≤ 10^6","solution":"def rearrange(A): Rearranges the array A such that all odd numbers appear before all even numbers, while preserving the relative order. # Two-pointer technique odd_index = 0 for i in range(len(A)): if A[i] % 2 != 0: A.insert(odd_index, A.pop(i)) odd_index += 1 return A"},{"question":"You are given a set of stations on a single route of an underground railway system. Each station has a certain number of passengers that need to travel to a different station. The railway car can carry a maximum of k passengers at a time, and it travels back and forth between stations. You need to determine the minimum number of trips the railway car must make to transport all passengers to their respective destinations. Assume the passengers can board and leave from any station and all stations are reachable directly from one another. -----Input----- The first line contains two integers n (2 le n le 100) — the number of stations and k (1 le k le 1000) — the maximum capacity of the car. The second line contains n integers, where the i-th integer p_i (0 le p_i le 10^4) represents the number of passengers that start at station i. The third line contains n integers, where the i-th integer d_i (0 le d_i le 10^4) represents the number of passengers that need to be at station i. It\'s guaranteed that the total number of passengers starting at stations equals the total number of passengers that need to be at stations, i.e., sum p_i = sum d_i. -----Output----- Print a single integer representing the minimum number of trips the railway car must make to transport all passengers. -----Example----- Input 3 6 5 8 3 7 5 4 Output 3 -----Note----- In the first example, the railway car has a capacity of 6 passengers. For instance, it can first transport 5 passengers from station 1, then make another trip transporting 6 passengers (from stations 1 and 2 combined), and the final trip can handle the remaining passengers. The minimum number of trips is 3.","solution":"def min_trips(n, k, passengers_start, passengers_dest): total_passengers = sum(passengers_start) full_trips_needed = total_passengers // k remaining_passengers = total_passengers % k if remaining_passengers > 0: full_trips_needed += 1 return full_trips_needed"},{"question":"Sana loves creating patterns with numbers. She just thought of a new and exciting challenge: generating a number pattern based on Pascal\'s triangle. However, she wants to add an extra twist. Instead of the usual binomial coefficients, she wants to create a pattern where each number is the sum of the digits of Pascal\'s original triangle at that position. For instance, Pascal\'s triangle for the first few rows looks like this: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 ``` Sana wants to transform this into a digit-sum version. For instance, in the example above, the number \'10\' would be replaced by \'1\' (since 1+0=1). The resulting triangle would look like this: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 1 1 5 1 ``` Write a function that generates the first `m` rows of Sana\'s digit-sum triangle. # Input - The single input is an integer `m` (1 ≤ m ≤ 30) representing the number of rows Sana wants to generate. # Output - The output should consist of `m` lines. Each line represents a row in the digit-sum triangle. - Each number in the row should be space-separated. # Example **Input** ``` 6 ``` **Output** ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 1 1 5 1 ```","solution":"def digit_sum_pascal_triangle(m): def digit_sum(n): return sum(int(x) for x in str(n)) triangle = [[1]] for i in range(1, m): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) for row in triangle: digit_sum_row = [digit_sum(num) for num in row] print(\\" \\".join(map(str, digit_sum_row))) # Example usage # digit_sum_pascal_triangle(6)"},{"question":"Create a program that reads a list of student names and their scores in three different subjects: Math, Science, and English, and outputs the average score for each student. Input A comma-separated list of student names and their scores in Math, Science, and English is given over multiple lines. Each student\'s name is a string made up of alphabetical characters, and each score is an integer between 0 and 100. Each student has exactly three scores. Output Output each student\'s name on a new line followed by their average score rounded to the nearest integer. Example Input Alice,85,90,78 Bob,75,80,88 Charlie,90,85,91 David,60,70,75 Eve,88,92,95 Output Alice 84 Bob 81 Charlie 89 David 68 Eve 92","solution":"def calculate_average_scores(input_lines): Takes a list of strings where each string contains a student\'s name and their scores in Math, Science, and English. Returns a list of strings where each string contains the student\'s name and their average score. result = [] for line in input_lines: parts = line.split(\',\') name = parts[0] scores = list(map(int, parts[1:])) average_score = round(sum(scores) / len(scores)) result.append(f\\"{name} {average_score}\\") return result"},{"question":"In a small town, there is a unique library system. The library consists of n shelves, each with m books initially arranged in alphabetical order by their titles. However, due to some disturbances, a select group of days experiences random rearrangements of books within individual shelves. On any such day, each book on a shelf may swap its position with any other book on the same shelf. The librarians want to find out the expected number of books that remain in their original position after k such disturbance days for all shelves. Given the initial and the disturbed states of the library, can you calculate this expectation? **Input Format:** 1. The first line contains three integers n (number of shelves), m (number of books per shelf), and k (number of disturbance days). 2. The next n lines each contain m space-separated strings representing the titles of the books on each shelf in initial alphabetical order. **Output Format:** Output a single integer, the expected number of books that remain in their original position after k days of disturbances. **Constraints:** 1 ≤ n ≤ 100 1 ≤ m ≤ 10 0 ≤ k ≤ 1000 **Sample Input:** ``` 3 4 1 A B C D E F G H I J K L ``` **Sample Output:** ``` 0 ``` **Note:** - Since each book has an equal probability of ending up in any position on its shelf after a disturbance day, you should account for this randomness when computing the expected value.","solution":"def expected_books_remain(n, m, k, shelves): Calculate the expected number of books that remain in their original position after k disturbance days. n: int - Number of shelves m: int - Number of books per shelf k: int - Number of disturbance days shelves: List[List[str]] - Initial state of the books on the shelves (not actually used in calculations) # Since after disturbances, each book has 1/m probability of remaining in the same position, # and there are m books per shelf, independently for each shelf. # We expect exactly 1 book to remain in the same position per shelf. # So, for n shelves, the expected number is just n. return n"},{"question":"Problem You are given a maze represented by an `n x n` grid, where each cell contains a value indicating the cost of stepping on that cell. You need to find the minimum cost to travel from the top-left corner of the grid (cell `(0,0)`) to the bottom-right corner (cell `(n-1,n-1)`). You can only move to adjacent cells (up, down, left, right) and cannot move diagonally. Write a program that determines the minimum cost path through the maze. # Constraints - `1 ≤ n ≤ 1000` - Each cell in the maze contains a non-negative integer representing the traversal cost. # Input The first line contains an integer `n`, the size of the maze. The next `n` lines each contain `n` integers, describing the cost to step in each cell of the maze. # Output Output the minimum cost to travel from the top-left corner to the bottom-right corner of the maze. # Examples Input ``` 3 1 2 2 4 5 6 7 8 1 ``` Output ``` 18 ``` Explanation The minimum cost path is: ``` (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) ``` Cost = 1 + 2 + 2 + 6 + 1 = 12","solution":"import heapq def min_cost_path(maze): Returns the minimum cost to travel through the maze from the top-left corner to the bottom-right corner. n = len(maze) if n == 0: return 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] min_heap = [(maze[0][0], 0, 0)] min_cost = [[float(\'inf\')] * n for _ in range(n)] min_cost[0][0] = maze[0][0] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if (x, y) == (n-1, n-1): return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n: new_cost = current_cost + maze[nx][ny] if new_cost < min_cost[nx][ny]: min_cost[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return min_cost[n-1][n-1]"},{"question":"There is a large rectangular park in which Chef and his dog are playing. The park is represented by M rows and N columns. Chef wants to place his dog in a specific position in the park, but he wants to ensure that the dog is not placed at the edges of the park. Your task is to determine if Chef can place the dog at the specified position (X, Y) in the park such that the dog is not on the edges. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing four space-separated integers M, N, X, Y. ------ Output Format ------ For each test case, print on a new line YES if Chef can place the dog at the specified position without being on the edges and NO otherwise. You may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ M, N ≤ 100 1 ≤ X ≤ M 1 ≤ Y ≤ N ----- Sample Input 1 ------ 4 5 5 2 3 6 7 1 4 4 4 3 2 7 8 7 1 ----- Sample Output 1 ------ YES NO YES NO ----- Explanation 1 ------ Test case 1: The park has dimensions 5x5, and the specified position is (2, 3). Since 2 is neither 1 nor 5, and 3 is neither 1 nor 5, the dog is not placed on the edge. Thus the output is YES. Test case 2: The park has dimensions 6x7, and the specified position is (1, 4). Since 1 is the edge row, the dog is placed on the edge. Thus the output is NO. Test case 3: The park has dimensions 4x4, and the specified position is (3, 2). Since 3 is neither 1 nor 4, and 2 is neither 1 nor 4, the dog is not placed on the edge. Thus the output is YES. Test case 4: The park has dimensions 7x8, and the specified position is (7, 1). Since 7 is the edge row, and 1 is the edge column, the dog is placed on the edge. Thus the output is NO.","solution":"def can_place_dog(T, test_cases): Determines if Chef can place the dog at the specified positions without being on the edges. :param T: Number of test cases (integer) :param test_cases: List of tuples. Each tuple contains four integers (M, N, X, Y) :return: List of strings \'YES\' or \'NO\' for each test case results = [] for case in test_cases: M, N, X, Y = case if 1 < X < M and 1 < Y < N: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Complete the function that takes an array of integers as an input and returns another array where each element is the product of all the elements in the input array except the one at the respective index. **Notes:** * Your solution should avoid using division and should be efficient even for large input arrays. * Negative numbers may be included in the array. * The input array will contain at least two integers. Examples ``` [1, 2, 3, 4] --> [24, 12, 8, 6] [-1, 1, 0, -3, 3] --> [0, 0, 9, 0, 0] [2, 3, 4] --> [12, 8, 6] [0, 0] --> [0, 0] [1, -1] --> [-1, 1] ```","solution":"def product_except_self(nums): Returns an array where each element is the product of all the elements in the input array except the one at the respective index. length = len(nums) answer = [0]*length left_products = [1]*length right_products = [1]*length for i in range(1, length): left_products[i] = nums[i - 1] * left_products[i - 1] for i in range(length - 2, -1, -1): right_products[i] = nums[i + 1] * right_products[i + 1] for i in range(length): answer[i] = left_products[i] * right_products[i] return answer"},{"question":"You have been given an array of integers, and a target sum. Your task is to determine if there are two distinct integers in the array whose sum is equal to the given target. Input: Array = [2, 7, 11, 15], target = 9 Output: True Explanation: 7 + 2 = 9, which is the target sum. Example 2: Input: Array = [3, 2, 4], target = 6 Output: True Explanation: 2 + 4 = 6, which is the target sum. Example 3: Input: Array = [3, 3], target = 6 Output: True Explanation: 3 + 3 = 6, which is the target sum. Example 4: Input: Array = [1, 2, 3, 4, 5], target = 10 Output: False Explanation: No two distinct numbers in the array sum to 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `checkPairSum` which takes an array of integers and a target sum as input parameters and returns `True` if there exists two distinct integers in the array whose sum is equal to the given target, otherwise return `False`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= length of array <= 10^6 -10^9 <= array elements <= 10^9 -10^9 <= target <= 10^9","solution":"def checkPairSum(arr, target): Determines if there are two distinct integers in the array whose sum is equal to the given target. Args: arr: list of integers target: integer Returns: True if there are two distinct integers in the array whose sum equals the target, otherwise False. seen = set() for number in arr: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"You are given a 0-indexed array of integers and Q queries. Each query asks you to find the minimum value in a specific subarray. Input format: The first line contains an integer N, the length of the array. The second line contains N space-separated integers representing the elements of the array. The third line contains an integer Q, the number of queries. Each of the next Q lines contains two integers L and R, representing the left and right indices (inclusive) of the subarray for which you need to find the minimum value. Output format: For each query, output the minimum value in the specified subarray. Constraints: 1 ≤ N ≤ 100,000 1 ≤ Q ≤ 100,000 1 ≤ array[i] ≤ 10^9 0 ≤ L ≤ R < N SAMPLE INPUT: 8 5 2 4 7 1 3 6 8 5 0 4 3 6 1 5 2 2 3 7 SAMPLE OUTPUT: 1 1 1 4 1","solution":"def find_min_in_subarray(arr, queries): For each query, find the minimum value in the specified subarray. Parameters: arr (list): List of integers representing the array. queries (list of tuples): List of tuples where each tuple represents a query (L, R). Returns: list: List of integers representing the minimum values for each query. results = [] for L, R in queries: min_value = min(arr[L:R+1]) results.append(min_value) return results"},{"question":"Problem Description: Build a function that calculates the maximum profit from buying and selling a single stock given its price history over a period. You need to find the best day to buy and the best day to sell the stock to maximize the profit. If no profit is possible, return 0. Example Test Case 1 Input 7 [7, 1, 5, 3, 6, 4] Output 5 Example Test Case 2 Input 5 [7, 6, 4, 3, 1] Output 0 Explanation: In the first test case, the optimal strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), yielding a profit of 6 - 1 = 5. In the second test case, no transaction can generate a positive profit, so the output is 0. Note: You are expected to improve the given template code that contains a logical structure with some errors. You should aim to correct the existing code rather than writing the entire solution from scratch. Submitting a completely new solution will be considered as cheating.","solution":"def max_profit(prices): Returns the maximum profit from buying and selling a single stock given its price history. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a sequence of stock prices for a number of days, calculate the maximum possible profit you can achieve by buying and selling the stock exactly once. You must buy the stock before you can sell it. If no profit can be made, return 0. -----Input----- Input consists of a single integer T (1 le T le 100) indicating the number of test cases. Each test case consists of: - a single integer N (1 le N le 1000) indicating the number of days. - a list of N integers where each integer P_i (1 le P_i le 10000) represents the stock price on the ith day. -----Output----- For each test case, output a single integer indicating the maximum profit that can be made for the given test case. If no profit is possible, output 0. -----Examples----- Sample Input: 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Sample Output: 5 0","solution":"def max_profit(prices): Returns the maximum possible profit from buying and selling a stock once based on the given list of prices. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(T, test_cases): results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"John loves coding competitions. One day, he came across a problem involving binary strings. He is fascinated by binary strings and wants to manipulate them in interesting ways. John has a binary string `s` of length `n`, consisting only of characters \'0\' and \'1\'. He can perform the following operation as many times as he likes: choose any prefix of the string and flip every character in that prefix (changing all \'0\'s to \'1\'s and all \'1\'s to \'0\'s). John wants to know the minimum number of operations required to transform the given binary string `s` into a string where all characters are \'1\'. Help John figure this out. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), which is the length of the binary string `s`. The second line contains a binary string `s` of length `n`. Output Print a single integer — the minimum number of operations required to turn the given binary string `s` into a string of all \'1\'s. Examples Input 5 11001 Output 3 Input 4 0000 Output 1 Note In the first example, John can perform the operations as follows: 1. Flip the prefix of the first 2 characters: \\"11001\\" -> \\"00101\\". 2. Flip the prefix of the first 3 characters: \\"00101\\" -> \\"11001\\". 3. Finally, flip the prefix of the first 5 characters: \\"11001\\" -> \\"11111\\". In the second example, John can flip the entire string: \\"0000\\" -> \\"1111\\".","solution":"def min_operations_to_all_ones(n, s): Returns the minimum number of operations required to transform the binary string s into a string where all characters are \'1\'. operations = 0 # traverse the binary string for i in range(1, n): if s[i] != s[i-1]: operations += 1 # we always need one additional operation for the last segment # If string has at least one \'0\' if \'0\' in s: operations += 1 return operations"},{"question":"Meteorologicata, a weather forecasting company, is working on a new model that can accurately predict the temperature pattern based on historical data. They represent the temperature on each day as an integer. The goal is to determine if there exists a subarray within the given temperature readings that has a sum equal to zero. The meteorologists are testing the model using data from multiple cities. For each city, they will provide the temperature readings for several consecutive days. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains an integer n (1 le n le 10^5) — the number of days for which temperature readings are available. The second line of each test case contains n space-separated integers representing the temperature readings for those days. -----Output----- For each test case, if there exists at least one subarray whose sum of elements is zero, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 3 6 1 2 3 -3 4 5 5 1 2 -2 4 5 3 1 2 3 Output YES YES NO -----Note----- For the first test case, the subarray [3, -3] has a sum of 0. For the second test case, the subarray [2, -2] has a sum of 0. For the third test case, there is no subarray with sum 0.","solution":"def has_zero_sum_subarray(n, temperature_readings): Determines if there is a subarray with sum of zero in the given temperature readings. Parameters: n (int): Number of days (length of the temperature_readings list). temperature_readings (list): List of integers representing temperature readings for n days. Returns: str: \\"YES\\" if there exists a subarray with sum zero, otherwise \\"NO\\". current_sum = 0 seen_sums = set() for temp in temperature_readings: current_sum += temp if current_sum == 0 or current_sum in seen_sums: return \\"YES\\" seen_sums.add(current_sum) return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list): List of tuples, each containing (n, temperature_readings) for each test case. Returns: list: List of results for each test case. results = [] for n, temperature_readings in test_cases: results.append(has_zero_sum_subarray(n, temperature_readings)) return results"},{"question":"Alex is solving a puzzle with numbers. He starts with an array of positive integers and tries to reduce it according to specific rules until he can no longer make a move. The rules are as follows: 1. Choose two different indices (i) and (j) where the numbers differ. 2. Subtract the smaller number from the larger one. 3. Replace the larger number with the result and keep the smaller number unchanged. Alex aims to find the last remaining number after he can no longer make any moves. If at any point all numbers in the array are the same, Alex stops and returns that number. Input Format The first line contains an integer (t), the number of arrays. Each of the next (t) lines contains the size of the array followed by the elements of the array. Constraints (1 leq t leq 50) (2 leq n leq 1000) (1 leq text{array}[i] leq 10^6) (for each ( text{array}[i] )) Output Format For each array, print the last remaining number on a new line. Sample Input 3 3 4 6 8 2 5 15 4 10 10 10 10 Sample Output 2 5 10 Explanation For the first array: 1. Subtract 4 from 8, resulting in the array [4, 6, 4]. 2. Subtract 4 from 6, resulting in the array [4, 2, 4]. 3. Subtract 2 from 4, then the array becomes [2, 2, 4]. 4. Subtract 2 from 4, resulting in the array [2, 2, 2]. For the second array: 1. Subtract 5 from 15, resulting in the array [5, 10]. 2. Subtract 5 from 10, resulting in the array [5, 5]. For the third array: All elements are already the same, so the result is 10.","solution":"def find_last_number(arrays): For each array, apply the reduction rules until no moves can be made, and return the last number remaining in each array. Parameters: arrays (list of lists): A list where each element is an array of integers. Returns: list: A list with the final remaining number for each input array. result = [] for array in arrays: while len(set(array)) > 1: max_val = max(array) min_val = min(array) max_index = array.index(max_val) array[max_index] = max_val - min_val result.append(array[0]) return result def parse_input_and_solve(input_data): Parses the input data, solves the problem by calling find_last_number, and returns the solution for each array. Parameters: input_data (str): The input data as a string. Returns: list: A list with the final remaining number for each input array. lines = input_data.strip().split(\'n\') t = int(lines[0]) arrays = [] for i in range(1, len(lines)): arr = list(map(int, lines[i].split())) arrays.append(arr[1:]) # Ignore the first element which is the size return find_last_number(arrays)"},{"question":"You are tasked with analyzing a dataset of various products sold online. Each product is identified by its price and category. Your goal is to implement a function that categorizes each product into different price ranges within each category and counts how many products fall into each price range. The price ranges are defined as follows: - \\"Cheap\\" if the price is less than 20 - \\"Moderate\\" if the price is between 20 and 50 (inclusive) - \\"Expensive\\" if the price is more than 50 but less than 100 - \\"Luxury\\" if the price is 100 or more The input consists of multiple test cases. Each test case begins with an integer n (1 ≤ n ≤ 200) representing the number of products. Then follows n lines, each containing a string c (the category name) and an integer p (1 ≤ p ≤ 10^5), representing the price of the product. For each test case, output the count of products in each price range for each category in dictionary format, with the category as the key and a dictionary of price range counts as the value. Input The first line contains a single integer t (1 ≤ t ≤ 500) — the number of test cases. The description of each test case starts with a single integer n — the number of products for that test case. Each of the next n lines contains a string c and an integer p — the category of the product and the price of the product. Output For each test case, print the count of products in each price range for each category as a dictionary. Example Input 2 5 electronics 10 electronics 20 clothing 15 clothing 55 clothing 100 4 books 15 books 25 books 99 books 105 Output { \'electronics\': {\'Cheap\': 1, \'Moderate\': 1, \'Expensive\': 0, \'Luxury\': 0}, \'clothing\': {\'Cheap\': 1, \'Moderate\': 0, \'Expensive\': 1, \'Luxury\': 1} } { \'books\': {\'Cheap\': 1, \'Moderate\': 1, \'Expensive\': 1, \'Luxury\': 1} }","solution":"def categorize_products(t, test_cases): Categorizes products into different price ranges within each category and counts the number of products in each range. t: int, number of test cases test_cases: list, each entry in the list is a tuple with two elements: - an integer representing number of products - a list of tuples, each containing a string (category name) and an integer (price) Returns a list of dictionaries, each dictionary representing the price range counts for each category in each test case. results = [] price_ranges = { \'Cheap\': (0, 19), \'Moderate\': (20, 50), \'Expensive\': (51, 99), \'Luxury\': (100, float(\'inf\')), } for i in range(t): n, products = test_cases[i] category_counts = {} for category, price in products: if category not in category_counts: category_counts[category] = { \'Cheap\': 0, \'Moderate\': 0, \'Expensive\': 0, \'Luxury\': 0 } for range_name, (lower, upper) in price_ranges.items(): if lower <= price <= upper: category_counts[category][range_name] += 1 break results.append(category_counts) return results"},{"question":"A new e-commerce platform, ShopTastic, aims to optimize the experience for its users by providing highly relevant search results. However, to ensure efficiency, they want to limit the maximum number of search queries each user performs in a single session. Your task is to implement a system that tracks the number of unique search queries made by a user and restrict them if they exceed the allowed limit. A user session consists of a sequence of search queries. Each query is identified by a non-negative integer representing the product ID being searched. The system needs to track these queries and must raise a flag if the user tries to exceed the allowed limit of unique search queries. Write a function that takes an integer \'limit\' and a list of integers \'queries\'. The function should return a list of Booleans, where each Boolean corresponds to a query in the \'queries\' list, indicating whether the query is allowed (True) or restricted (False) based on the limit constraint. Input The first input argument is a single integer \'limit\', denoting the maximum number of unique queries allowed per session. The second input argument is a list of integers \'queries\', representing the sequence of product IDs being searched during a session. Output Return a list of Booleans, where each Boolean corresponds to a query in the \'queries\' list. For each query, return True if it is allowed, or False if the user has exceeded the limit of unique queries. Constraints: 1 ≤ limit ≤ 10^5 1 ≤ len(queries) ≤ 10^5 0 ≤ queries[i] ≤ 10^9 SAMPLE INPUT 3 [1, 2, 1, 3, 4, 2] SAMPLE OUTPUT [True, True, True, True, False, True] Explanation The user starts by searching for product IDs 1, 2, and 1, which are allowed since they haven\'t exceeded the unique query limit. When the user searches for product ID 3, it is also allowed because it brings the total number of unique queries to 3, which is within the limit. However, when the user searches for product ID 4, it exceeds the unique query limit, so the result is False. The last search for product ID 2 is allowed since it was already searched before.","solution":"def track_queries(limit, queries): Determines if each query is allowed based on the unique query limit. Parameters: limit (int): The maximum number of unique queries allowed per session. queries (list of int): The sequence of product IDs being searched during a session. Returns: list of bool: A list indicating whether each query is allowed (True) or restricted (False). unique_queries = set() results = [] for query in queries: if query not in unique_queries: if len(unique_queries) < limit: unique_queries.add(query) results.append(True) else: results.append(False) else: results.append(True) return results"},{"question":"Given a number N, you need to generate all the prime numbers less than or equal to N and check whether the sum of these prime numbers is also a prime number. Example 1: Input: N = 10 Output: \\"No\\" Explanation: The prime numbers <= 10 are [2, 3, 5, 7]. Their sum is 2+3+5+7 = 17, which is prime. So, the answer is \\"Yes\\". Example 2: Input: N = 20 Output: \\"No\\" Explanation: The prime numbers <= 20 are [2, 3, 5, 7, 11, 13, 17, 19]. Their sum is 2+3+5+7+11+13+17+19 = 77, which is not prime. So, the answer is \\"No\\". Your Task: You don\'t need to read input or print anything. Complete the function isSumOfPrimesPrime() which takes N as an input parameter and returns \\"Yes\\" if the sum of prime numbers is also prime otherwise returns \\"No\\". Expected Time Complexity: O(N log log N) Expected Auxiliary Space: O(N) Constraints: 1<= N <=10^{7}","solution":"def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def isSumOfPrimesPrime(N): primes = [] the_sum = 0 is_prime_list = [True] * (N + 1) is_prime_list[0] = is_prime_list[1] = False for current in range(2, N + 1): if is_prime_list[current]: primes.append(current) the_sum += current for multiple in range(current * current, N + 1, current): is_prime_list[multiple] = False if is_prime(the_sum): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers, and your task is to process a series of queries on this array. Each query will require you to find the result of a specified operation over a subarray defined by given indices. The operations you need to support are: 1. Calculate the sum of the elements in the subarray. 2. Find the maximum element in the subarray. 3. Find the minimum element in the subarray. Constraints: * All elements in the array are integers. * 1 ≤ length of the array ≤ 10^5 * 1 ≤ number of queries ≤ 10^5 * Each element in the array can be in the range [-10^9, 10^9]. * Each query contains three integers: the type of operation (1 for sum, 2 for maximum, and 3 for minimum) and the starting and ending indices of the subarray (0-based). Input: The input is given via standard input in the following format: ``` n q a_1 a_2 ... a_n t_1 l_1 r_1 t_2 l_2 r_2 ... t_q l_q r_q ``` Output: For each query, print the result of the specified operation on the corresponding subarray in a separate line. Examples: Input: ``` 5 3 1 3 -2 8 4 1 1 3 2 0 4 3 2 4 ``` Output: ``` 9 8 -2 ```","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: t, l, r = query subarray = array[l:r+1] if t == 1: # Calculate sum result = sum(subarray) elif t == 2: # Find maximum result = max(subarray) elif t == 3: # Find minimum result = min(subarray) results.append(result) return results # Example usage: # n = 5 # q = 3 # array = [1, 3, -2, 8, 4] # queries = [(1, 1, 3), (2, 0, 4), (3, 2, 4)] # output = process_queries(n, q, array, queries) # print(output) # Should print: [9, 8, -2]"},{"question":"Input 3 3 abc def ghi hdg Output Yes","solution":"def check_contiguous_subsequence(n, m, grid, s): Checks if the string `s` is a contiguous subsequence in any of the rows of the grid. for row in grid: if s in row: return \\"Yes\\" return \\"No\\""},{"question":"Alyssa, a young adventurer, has stumbled upon a hidden treasure map detailing multiple treasure locations. Each treasure location has a specific worth associated with it and taking any two treasures has a risk value. Alyssa wants to collect treasures in a way that maximizes her profits while staying below a certain risk threshold. You are provided with a list of n treasures, each with a specific value and a list of risk values for each pair of treasures. Given this information, write a program to determine the maximum profit Alyssa can achieve without exceeding the given risk threshold r. Input: The first line contains two integers n and r (2 ≤ n ≤ 200, 1 ≤ r ≤ 10^6), where n is the number of treasure locations and r is the risk threshold. The second line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 10^6), representing the worth of each treasure. The next n lines form an n x n matrix of space-separated integers, where the j-th value in the i-th line, rij (0 ≤ rij ≤ 10^6), represents the risk of taking treasures i and j together. Output: Print a single integer, the maximum profit Alyssa can achieve while ensuring the total risk is below or equal to r. Examples: Input: 4 5 8 15 20 30 0 1 2 3 1 0 4 2 2 4 0 1 3 2 1 0 Output: 50 Input: 3 2 10 20 30 0 2 3 2 0 1 3 1 0 Output: 50 Note: In the first sample, Alyssa can take treasures 2 and 4 for a total profit of 15 + 30 = 45 with a risk of 2, which is within the threshold. In the second sample, she can take treasures 1 and 2 for a profit of 50 with risk 2.","solution":"from itertools import combinations def max_profit(n, r, values, risks): max_prof = 0 # Check all combinations of 2 to n treasures for k in range(2, n + 1): for combo in combinations(range(n), k): total_risk = sum(risks[i][j] for i in combo for j in combo if i != j) // 2 if total_risk <= r: total_profit = sum(values[i] for i in combo) max_prof = max(max_prof, total_profit) return max_prof n = 4 r = 5 values = [8, 15, 20, 30] risks = [ [0, 1, 2, 3], [1, 0, 4, 2], [2, 4, 0, 1], [3, 2, 1, 0] ] print(max_profit(n, r, values, risks)) # Expected output: 50"},{"question":"Write a function that takes a list of integers as input and returns the next greater element for each integer in the list. If no greater element exists for an integer, return -1 for that position in the list. # Example: - For the list `[2, 5, 3, 8]`, the output should be `[5, 8, 8, -1]` because: - The next greater element for `2` is `5`. - The next greater element for `5` is `8`. - The next greater element for `3` is `8`. - There is no greater element for `8`, so the result is `-1` for the position of `8`. # Notes: - You can assume that the list contains no duplicates. - The function should perform efficiently, ideally with a time complexity better than O(n^2).","solution":"def next_greater_elements(nums): Returns a list of the next greater element for each integer in the list. If no greater element exists, returns -1 for that position in the list. n = len(nums) result = [-1] * n stack = [] for i in range(n): while stack and nums[stack[-1]] < nums[i]: index = stack.pop() result[index] = nums[i] stack.append(i) return result"},{"question":"Write a program that simulates a simple drawing application on a grid. The program should accept commands to draw horizontal and vertical lines of a specified length. Each grid cell is represented by an integer, starting with all cells initialized to 0. Drawing a line will set the corresponding grid cells to 1. Commands: - \\"H x y l\\" - Draw a horizontal line starting at (x, y) with length l. - \\"V x y l\\" - Draw a vertical line starting at (x, y) with length l. - \\"Q\\" - Query the current state of the grid. Constraints: - The grid size is fixed at 100 x 100 cells. - 0 ≤ x, y < 100 - 1 ≤ l ≤ 100 Input: - The input consists of multiple commands. - Each command is on a separate line. - The input ends with the command \\"Q\\". Output: - Print the final state of the grid (100 lines with 100 characters each, representing the cell values). Example: Input: ``` H 1 1 5 V 2 2 3 Q ``` Output: ``` 0000000000... (continues 100 times) 0111110000... (continues 100 times) 0100010000... (continues 100 times) 0100010000... (continues 100 times) 0000000000... (continues 96 times) ``` Note: In the example, the horizontal line starts at (1, 1) and extends 5 cells to the right. The vertical line starts at (2, 2) and extends 3 cells downwards. The positions of `1` indicate cells that have been drawn on.","solution":"def initialize_grid(size=100): return [[0 for _ in range(size)] for _ in range(size)] def draw_horizontal_line(grid, x, y, length): for i in range(length): grid[x][y + i] = 1 def draw_vertical_line(grid, x, y, length): for i in range(length): grid[x + i][y] = 1 def process_commands(commands): grid = initialize_grid() for command in commands: if command.startswith(\\"H\\"): _, x, y, l = command.split() draw_horizontal_line(grid, int(x), int(y), int(l)) elif command.startswith(\\"V\\"): _, x, y, l = command.split() draw_vertical_line(grid, int(x), int(y), int(l)) elif command == \\"Q\\": break return grid def print_grid(grid): for row in grid: print(\\"\\".join(map(str, row))) # Example usage commands = [ \\"H 1 1 5\\", \\"V 2 2 3\\", \\"Q\\" ] grid = process_commands(commands) print_grid(grid)"},{"question":"Given two strings A and B, the task is to merge them into a new string C using the following rules: 1. Start with A and B as input. 2. Pick characters in alternating order from A and B starting with the first character of A. 3. If one string is exhausted before the other, append the remaining characters of the non-exhausted string to the end of the merged string C. Example: Input: A = \\"abc\\", B = \\"1234\\" Output: \\"a1b2c34\\" Input: A = \\"abcd\\", B = \\"xyz\\" Output: \\"axbyczd\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function mergeAlternatingCharacters() which takes the strings A and B as inputs and returns the merged string C. Expected Time Complexity: O(|A| + |B|) Expected Auxiliary Space: O(|A| + |B|) Constraints: 1 ≤ |A|, |B| ≤ 10^5","solution":"def mergeAlternatingCharacters(A, B): Merges two strings A and B by picking characters in alternating order, starting with the first character of A. If one string is exhausted before the other, appends the remaining characters of the non-exhausted string to the end of the merged string. Parameters: - A (str): First input string. - B (str): Second input string. Returns: - str: Merged string. len_a, len_b = len(A), len(B) min_len = min(len_a, len_b) result = [] for i in range(min_len): result.append(A[i]) result.append(B[i]) result.append(A[min_len:]) result.append(B[min_len:]) return \'\'.join(result)"},{"question":"Librarian Joe has a large collection of books and wants to organize them in his library efficiently. Each book has a unique ID number represented as an integer. Joe wants to sort these books on the shelves, but the sorting criteria are a bit unconventional: 1. The books should first be sorted based on the number of 1\'s in their binary representation (in ascending order). 2. If two books have the same number of 1\'s in their binary representation, those books should be sorted by their integer values in ascending order. Your task is to write a program that takes a list of book IDs and produces the order in which they should be arranged on the shelves according to the criteria mentioned. ------ Input ------ The first line of input contains a single integer n denoting the number of book IDs. The next line contains n space-separated integers representing the book IDs. ------ Output ------ Output a single line containing the sorted list of book IDs. ------ Constraints ------ 1 ≤ n ≤ 10^5 0 ≤ text{ID} ≤ 10^9 ----- Sample Input 1 ------ 5 3 7 8 6 5 ----- Sample Output 1 ------ 8 3 5 6 7 ----- Explanation 1 ------ The binary representations and the number of 1\'s are: - 3 -> 11 (2 one’s) - 7 -> 111 (3 one’s) - 8 -> 1000 (1 one) - 6 -> 110 (2 one’s) - 5 -> 101 (2 one’s) Sorted by number of 1\'s in binary representation and then by integer value: - 8 (1 one) - 3 (2 one\'s, integer value 3) - 5 (2 one\'s, integer value 5) - 6 (2 one\'s, integer value 6) - 7 (3 one\'s)","solution":"def sort_books_by_binary_ones(book_ids): Sorts a list of book IDs first by the number of 1\'s in their binary representation (ascending), and then by their integer value (ascending). Args: - book_ids: List of integers representing book IDs. Returns: - A list of integers sorted by the described criteria. def count_ones(num): return bin(num).count(\'1\') # Sort by the number of 1\'s in binary representation, and then by the integer value sorted_books = sorted(book_ids, key=lambda x: (count_ones(x), x)) return sorted_books"},{"question":"Simon is participating in a robot navigation challenge. The challenge takes place on a grid, where each cell can be either clear or contain an obstacle. Simon\'s robot starts in the top-left corner of the grid and must reach the bottom-right corner. The robot can only move either right or down. However, some cells are marked as containing obstacles, which the robot cannot move into. Simon wants to know how many distinct paths his robot can take to get from the top-left corner to the bottom-right corner, navigating around any obstacles. -----Input----- The first line of the input contains two integers, m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid, respectively. The next m lines each contain n integers, either 0 or 1. A 0 indicates a clear cell, and a 1 indicates an obstacle. The top-left and bottom-right corners of the grid will always be 0. -----Output----- Print a single integer — the number of distinct paths Simon\'s robot can take from the top-left corner to the bottom-right corner. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 4 4 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 Output 3 -----Note----- In the first example, there are two distinct paths that the robot can take to get from (0, 0) to (2, 2): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there are three distinct paths that the robot can take to get from (0, 0) to (3, 3): 1. Right -> Down -> Down -> Right -> Right -> Down 2. Right -> Right -> Down -> Down -> Right -> Down 3. Down -> Down -> Right -> Right -> Right -> Down","solution":"def unique_paths_with_obstacles(grid): m, n = len(grid), len(grid[0]) # If the starting or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Create a dp table with the same dimensions as the grid dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Starting point # Fill the dp table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # Obstacle cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Aki is working on an image manipulation project and needs your help with one of the tasks. She has a grayscale image represented as a 2D matrix where each element is an integer between 0 and 255 (inclusive). Each integer represents the pixel intensity at that point. She wants to apply a simple transformation to the image. The transformation consists of finding the largest submatrix (contiguous subgrid) within the image where all pixel intensities are the same. Given the matrix, find the area of the largest contiguous subgrid where all elements are equal. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the matrix. Each of the next n lines contains m integers, each an element of the matrix between 0 and 255. -----Output----- Print a single integer — the area of the largest submatrix where all elements are equal. -----Examples----- Input 3 4 1 2 2 2 2 2 2 2 2 2 2 1 Output 6 Input 2 2 5 5 5 5 Output 4 -----Note----- In the first sample, the largest submatrix with equal elements is composed of the elements with value \'2\' and spans the indices [(0,1) to (2,3)] with a total area of 6. In the second sample, the whole matrix itself is such a submatrix with equal elements, having an area of 4.","solution":"def largest_equal_submatrix(matrix): Finds the area of the largest submatrix where all elements are equal. n = len(matrix) m = len(matrix[0]) # Function to check and find the largest submatrix starting from (i, j) def find_submatrix_area(i, j): value = matrix[i][j] height = 0 max_area = 0 for row in range(i, n): if matrix[row][j] != value: break height += 1 width = 0 for col in range(j, m): if matrix[row][col] != value: break width += 1 max_area = max(max_area, height * width) return max_area max_area = 0 for i in range(n): for j in range(m): max_area = max(max_area, find_submatrix_area(i, j)) return max_area"},{"question":"Consider a grid of size n times n with (0, 0) representing the top-left corner and (n-1, n-1) representing the bottom-right corner. You are given the coordinates of a starting point and a list of blocked cells which cannot be accessed. Your task is to determine if there is a path from the starting point to the bottom-right corner of the grid that avoids all the blocked cells. Write a function `isPathExists` to determine if such a path exists. Function Description Complete the `isPathExists` function in the editor below. `isPathExists` has the following parameters: int n: the size of the grid int startX, startY: the x and y coordinates of the starting point list of list of integers blocked: a list containing pairs of integers representing the x and y coordinates of the blocked cells Returns boolean: a boolean value indicating whether a path exists (True if exists, False otherwise) Input Format The first line contains an integer, n, denoting the size of the grid. The second line contains two space-separated integers, starting coordinates startX and startY. The third line contains a single integer, b, denoting the number of blocked cells. Each of the b subsequent lines contains two space-separated integers that describe the respective values of x and y for each blocked cell. Constraints 1 le n le 100 0 le startX, startY < n 0 le b leq min(100, n^2 - 1) blocked cells will be distinct and will not include the starting point. Sample Input 5 0 0 3 1 2 2 1 3 3 Sample Output True Explanation In a 5x5 grid, starting from (0, 0), it is possible to reach (4, 4) avoiding the blocked cells (1, 2), (2, 1), and (3, 3). One possible path is (0, 0) -> (0, 1) -> (1, 1) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4).","solution":"def isPathExists(n, startX, startY, blocked): from collections import deque # Directions for Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] blocked_set = set((bx, by) for bx, by in blocked) target = (n-1, n-1) if (startX, startY) == target: return True # BFS Queue for exploration queue = deque([(startX, startY)]) visited = set((startX, startY)) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in blocked_set and (nx, ny) not in visited: if (nx, ny) == target: return True queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"In her quest to master potions, Hermione needs to organize a variety of ingredients. Each ingredient has a certain type, and some ingredients are compatible with each other, while others are not. She has to determine whether a given set of ingredients can be combined into a single potion, without any incompatibility issues. You are given n ingredients, numbered from 1 to n. There are m pairs of incompatible ingredients. Your task is to answer q questions, each asking whether a certain subset of ingredients can be combined without any two ingredients in the subset being incompatible. Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000), the number of ingredients and the number of incompatible pairs, respectively. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that ingredient u is incompatible with ingredient v. - The next line contains an integer q (1 ≤ q ≤ 1000), the number of questions. - Each of the next q lines contains an integer k (1 ≤ k ≤ n), followed by k distinct integers denoting the indices of the ingredients in the subset to be checked. Output: For each question, output \\"YES\\" if the subset of ingredients can be combined without any incompatibilities, and \\"NO\\" otherwise. Examples: Input: 5 3 1 2 2 3 4 5 3 3 1 3 4 2 2 5 4 1 2 3 4 Output: YES YES NO Explanation: - In the first query, ingredients 1, 3, and 4 have no incompatibilities among them. - In the second query, ingredients 2 and 5 have no incompatibilities among them. - In the third query, ingredient 2 is incompatible with ingredient 3, making the subset invalid.","solution":"def can_combine(n, m, incompatibles, q, queries): Determine if subsets of ingredients can be combined without incompatibilities. Parameters: - n: Number of ingredients - m: Number of incompatible pairs - incompatibles: List of tuples (u, v) indicating incompatible ingredients - q: Number of queries - queries: List of lists of integers representing the subsets to be checked Returns: - List of \\"YES\\" or \\"NO\\" for each query # Create a dictionary to store incompatibilities incompatible_dict = {i: set() for i in range(1, n + 1)} # Fill the dictionary with incompatible pairs for u, v in incompatibles: incompatible_dict[u].add(v) incompatible_dict[v].add(u) results = [] for query in queries: k = query[0] ingredients = query[1:] is_compatible = True # Check each pair in the subset for i in range(k): for j in range(i + 1, k): if ingredients[j] in incompatible_dict[ingredients[i]]: is_compatible = False break if not is_compatible: break if is_compatible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice has recently started learning computer networking and is learning about IP addresses. She is given a list of IP addresses, and she wants to determine the most frequently occurring IP address in the list. If there is a tie for the most frequent IP address, she should return the IP address that appears first in the list among the tied addresses. An IP address is defined as a string in the format \\"x.x.x.x\\" where x is an integer between 0 and 255 inclusive. Write a function that receives a list of IP addresses and returns the IP address that appears most frequently. If multiple IP addresses have the same highest frequency, return the one that appears first. # Input The input consists of a single list of strings, where each string represents an IP address. - The list of IP addresses has at least 1 and at most 10^5 elements. - Each IP address is guaranteed to be a valid IP address. # Output The function should return a string representing the IP address that appears most frequently in the list. If there is a tie for the most frequent IP address, return the IP address that appears first among the tied addresses. # Examples Input ```python [\\"192.168.1.1\\", \\"192.168.1.2\\", \\"192.168.1.1\\", \\"10.0.0.1\\", \\"192.168.1.2\\", \\"192.168.1.1\\"] ``` Output ```python \\"192.168.1.1\\" ``` Input ```python [\\"192.168.0.1\\", \\"192.168.0.1\\", \\"10.0.0.1\\", \\"10.0.0.1\\"] ``` Output ```python \\"192.168.0.1\\" ``` # Note In the first example, \\"192.168.1.1\\" appears 3 times, \\"192.168.1.2\\" appears 2 times, and \\"10.0.0.1\\" appears 1 time. Hence, \\"192.168.1.1\\" is the most frequent. In the second example, both \\"192.168.0.1\\" and \\"10.0.0.1\\" appear twice, but \\"192.168.0.1\\" appears first in the list, so it is the answer.","solution":"def most_frequent_ip(ip_addresses): Returns the most frequent IP address in the provided list. If there is a tie, returns the one that appears first in the list. from collections import Counter ip_counter = Counter(ip_addresses) # Count occurrences of each IP max_freq = max(ip_counter.values()) # Get the maximum frequency for ip in ip_addresses: if ip_counter[ip] == max_freq: return ip"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline. Between every two adjacent buildings, there is a possibility of having a park of height P meters. Your task is to find the maximum height of the skyline when parks of height P meters can be inserted between buildings. Each park should be inserted between two buildings such that the height of the park does not exceed the minimum height of the adjacent buildings. If no parks are inserted, the maximum height is just the maximum of the building heights. -----Constraints----- - All input values are integers. - 1 leq N leq 10^5 (N is the number of buildings) - 1 leq heights[i] leq 10^5 (heights of buildings) - 0 leq P leq 10^5 -----Input----- Input is given from Standard Input in the following format: N P heights_1 heights_2 ... heights_N -----Output----- Print the maximum height of the skyline including the possibility of parks. -----Sample Input----- 5 3 3 1 4 1 5 -----Sample Output----- 5","solution":"def max_skyline_height_with_parks(N, P, heights): Returns the maximum height of the skyline with the possibility of parks inserted between buildings. Args: N : int : Number of buildings P : int : Height of the park heights : list : List of integers representing the heights of the buildings Returns: int : Maximum height of the skyline max_height = max(heights) # Initial maximum height, considering only the buildings for i in range(N - 1): park_height = min(heights[i], heights[i + 1]) max_height = max(max_height, min(P, park_height)) return max_height"},{"question":"Leo loves solving mathematical puzzles. Recently, he came across a fascinating pattern of matrices and their diagonals. He observed something intriguing and decided to challenge you with the following problem: Given a square matrix of size N x N, your task is to determine the absolute difference between the sums of its diagonals. The primary diagonal of the matrix is formed by the elements A[i][i] for all i from 0 to N-1, and the secondary diagonal is formed by the elements A[i][N-i-1] for all i from 0 to N-1. Input: The first line of the input contains T, the number of test cases. The first line of each test case contains a single integer N denoting the size of the matrix. The next N lines contain N integers each representing the matrix elements A[i][j]. Output: For each test case, output a single integer denoting the absolute difference between the sums of the primary and secondary diagonals. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -1000 ≤ A[i][j] ≤ 1000 Sample Input: 2 3 11 2 4 4 5 6 10 8 -12 4 6 2 1 4 2 3 4 5 5 1 3 2 7 4 6 1 Sample Output: 15 10 Explanation: In the first test case: Primary diagonal elements: 11, 5, -12 Secondary diagonal elements: 4, 5, 10 Sum of primary diagonal = 11 + 5 - 12 = 4 Sum of secondary diagonal = 4 + 5 + 10 = 19 Absolute difference = |4 - 19| = 15 In the second test case: Primary diagonal elements: 6, 3, 3, 1 Secondary diagonal elements: 4, 4, 1, 7 Sum of primary diagonal = 6 + 3 + 3 + 1 = 13 Sum of secondary diagonal = 4 + 4 + 1 + 7 = 16 Absolute difference = |13 - 16| = 3","solution":"def diagonal_difference(mat): Returns the absolute difference between the sums of the primary and secondary diagonals of a square matrix. N = len(mat) primary_sum = sum(mat[i][i] for i in range(N)) secondary_sum = sum(mat[i][N - i - 1] for i in range(N)) return abs(primary_sum - secondary_sum) def solve(T, test_cases): results = [] for k in range(T): N = test_cases[k][0] mat = test_cases[k][1] results.append(diagonal_difference(mat)) return results"},{"question":"[An anagram is a rearrangement of the letters of a word or phrase to form another word or phrase, typically using all the original letters exactly once. Given a list of words, your task is to group the words that are anagrams of each other.] -----Input----- The first line contains an integer N, the number of words. The next N lines each contain a single word. -----Output----- Print the number of groups of anagrams. -----Constraints----- - 1 ≤ N ≤ 100,000 (10^5) - Each word consists only of lowercase English letters. - The length of each word is at most 100. -----Example----- Input: 6 listen silent enlist inlets google gogole Output: 3 -----Explanation----- The input list contains the words: \\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"gogole\\". The words \\"listen\\", \\"silent\\", \\"enlist\\", and \\"inlets\\" are anagrams of each other and form one group. The words \\"google\\" and \\"gogole\\" are anagrams of each other and form another group. So, there are a total of 3 groups of anagrams: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"], [\\"google\\", \\"gogole\\"], and any remaining non-anagram words (if present) would form their own groups.","solution":"def count_anagram_groups(words): Count the number of anagram groups in the provided list of words. :param words: List of strings where each string is a word :return: Integer representing the number of anagram groups from collections import defaultdict anagram_groups = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) return len(anagram_groups)"},{"question":"Given a binary tree, write a function to find the longest path from the root node to a leaf node. The path length is measured by the number of edges in the path. If the binary tree is empty, return -1. Example 1: Input: 1 / 2 3 / 4 5 Output: 2 Explanation: The longest path is either 1 -> 2 -> 4 or 1 -> 2 -> 5, and both are of length 2. Example 2: Input: 1 / 2 / 3 Output: 2 Explanation: The longest path is 1 -> 2 -> 3, and its length is 2. Example 3: Input: Root = null Output: -1 Explanation: The binary tree is empty. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPath() which takes the root of the binary tree as input and returns the length of the longest path from the root to a leaf. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1<=Number of nodes<=10^5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestPath(root): if not root: return -1 def findLongestPath(node): if not node: return 0 left_length = findLongestPath(node.left) right_length = findLongestPath(node.right) return max(left_length, right_length) + 1 # Subtracting 1 to convert the number of nodes in the path to number of edges return findLongestPath(root) - 1"},{"question":"You are given an array of `n` integers where each integer represents the height of a building. The `width` of all buildings is the same (let\'s assume it\'s `1 unit`). You need to find the maximum rainwater that can be trapped between these buildings after a heavy rain. The array elements denote the height of buildings. Water trapped at any position `i` in the array is the minimum of the maximum height to the left and the maximum height to the right, minus the height at position `i`. Your task is to write a function `maxTrappedWater` that takes in an array of integers and returns the maximum units of rainwater that can be trapped. -----Function Signature----- ```python def maxTrappedWater(buildings: List[int]) -> int: ``` -----Input----- - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of buildings - The second line contains `n` integers, where the i^{th} integer represents the height of the i^{th} building (0 ≤ height ≤ 10^4) -----Output----- - Print one integer — the maximum units of rainwater that can be trapped. -----Examples----- Input 6 3 0 0 2 0 4 Output 10 Input 7 4 2 0 3 2 5 1 Output 9 -----Explanation----- In the first example, the water trapped is as follows: - Between indices 0 and 3, water height = 2, width = 2, so total water = 2*2 = 4 - Between indices 3 and 5, water height = 4, width = 2, so total water = 2*4 = 6 - Total trapped rainwater = 4 + 6 = 10 In the second example: - Total water trapped is calculated by considering trapped water at each building\'s position, which sums up to 9 units.","solution":"from typing import List def maxTrappedWater(buildings: List[int]) -> int: if not buildings: return 0 n = len(buildings) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = buildings[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], buildings[i]) # Fill right_max array right_max[n - 1] = buildings[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], buildings[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - buildings[i] return trapped_water"},{"question":"Given a rectangular matrix of size NxM, consisting of integers and a specific target value k, find a path from the top-left corner to the bottom-right corner such that the sum of the integers along the path is equal to k. You can only move right or down at each step. Input: The first line contains three integers N, M, and k. The next N lines each contain M integers representing the matrix. Output: Print \\"YES\\" if such a path exists, otherwise print \\"NO\\". Constraints: 1 ≤ N, M ≤ 100 -1000 ≤ matrix[i][j] ≤ 1000 -100000 ≤ k ≤ 100000 SAMPLE INPUT 3 3 12 5 9 6 1 2 4 8 3 7 SAMPLE OUTPUT YES Explanation: One possible path is 5 -> 9 -> 2 -> 3, which sums up to 19 (not equal to 12).","solution":"def find_path_with_sum(matrix, N, M, k): Function to determine if there is a path from top-left to bottom-right in a given NxM matrix such that the sum of the path is equal to k. from collections import deque def is_valid(x, y): return 0 <= x < N and 0 <= y < M # Directions for right (0, 1) and down (1, 0) movements directions = [(0, 1), (1, 0)] # Use a deque to implement BFS queue = deque([(0, 0, matrix[0][0])]) while queue: x, y, current_sum = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == N - 1 and y == M - 1: if current_sum == k: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): queue.append((nx, ny, current_sum + matrix[nx][ny])) return \\"NO\\""},{"question":"As a senior software engineer, it\'s crucial for Alex to ensure that all web services he deploys are highly reliable. He has recently discovered that one of the key indicators of reliability is the uptime of the service. He tracks the uptime using a monitoring tool that captures the active status of the service at various intervals during the day. Alex wants to calculate the longest consecutive streak of active statuses from the log data to understand the service\'s reliability better. The log data is represented as a binary array `status`, where `status[i] = 1` indicates that the service was active at the i-th interval, and `status[i] = 0` indicates that it was inactive. Your task is to write a function that takes this binary array and returns the length of the longest consecutive sequence of 1s. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), the number of intervals in the log data. The second line contains `n` space-separated integers, each being either 0 or 1, representing the status array. Output Print a single integer, the length of the longest consecutive streak of active statuses. Examples Input 10 1 1 0 1 1 1 0 0 1 1 Output 3 Input 5 0 0 0 0 0 Output 0 Input 7 1 1 1 1 1 1 1 Output 7 Note In the first example, the longest streak of active statuses appears twice: first from index 0 to index 1 and then from index 3 to index 5, both having a length of 3. Therefore the output is 3. In the second example, there are no active periods, so the output is 0. In the third example, the entire sequence is a consecutive streak of active statuses, so the output is 7.","solution":"def longest_consecutive_active_streak(status): Returns the length of the longest consecutive streak of active statuses (1s) in the binary array status. max_streak = 0 current_streak = 0 for s in status: if s == 1: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"A university professor assigns a unique project to her students involving number sequences. She wants the students to generate specific sequences based on a number N. Help the professor by writing a program that generates these sequences following a particular pattern. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the required sequence. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- 1 1 2 1 2 4 1 2 4 8 -----EXPLANATION:----- For each test case, print the first N terms of the sequence where the i-th term is equal to 2^{i-1} (i.e., 2 raised to the power (i-1)). The first term starts at 1.","solution":"def generate_sequences(T, test_cases): Generates a sequence based on the given pattern for each test case. Parameters: T (int): Number of test cases. test_cases (list of int): List of numbers N. Returns: list of list: Each inner list contains the sequence for the corresponding test case. results = [] for N in test_cases: sequence = [2**i for i in range(N)] results.append(sequence) return results # Function to format the sequences into required output format def format_sequences(sequences): return \\"n\\".join(\\" \\".join(map(str, seq)) for seq in sequences)"},{"question":"Alice likes to play with strings. She recently learned that a string is called \\"Magical\\" if all the characters in the string are either \'a\' or \'b\', and the string does not contain two consecutive \'a\'s. Alice wants to count the number of Magical strings of length N. Help Alice by writing a program that takes the length of the string N and computes the number of Magical strings of this length. Since the answer can be very large, output the result modulo 1,000,000,007 (= 10^9 + 7). Input The input is given in the following format. N The input line provides the length of the string N (1 leq N leq 10^5). Output Output the number of Magical strings of length N in a line. Examples Input 3 Output 5 Input 4 Output 8","solution":"def count_magical_strings(N): Returns the number of Magical strings of length N. A Magical string consists only of characters \'a\' and \'b\' and does not contain two consecutive \'a\'s. Result is modulo 1,000,000,007. MOD = 1_000_000_007 # Base Cases: For length 1, there are 2 (\'a\', \'b\') if N == 1: return 2 # Initialize dp arrays dp_a = [0] * (N + 1) # Ending with \'a\' dp_b = [0] * (N + 1) # Ending with \'b\' # Initial values dp_a[1] = 1 dp_b[1] = 1 # Fill the dp arrays for i in range(2, N + 1): dp_a[i] = dp_b[i - 1] % MOD dp_b[i] = (dp_a[i - 1] + dp_b[i - 1]) % MOD # Total magical strings are those ending with \'a\' or \'b\' return (dp_a[N] + dp_b[N]) % MOD # Example usage: # print(count_magical_strings(3)) # Should print 5 # print(count_magical_strings(4)) # Should print 8"},{"question":"Write a function that takes a non-empty string of digits representing a number and returns a new string representing the number with commas inserted as thousands separators. For example: - Input: \\"1234567\\" - Output: \\"1,234,567\\" The function should handle numbers of any length and return the resulting string with appropriate comma placements.","solution":"def format_number_with_commas(number_str): Takes a non-empty string of digits representing a number and returns a new string with commas inserted as thousands separators. return \\"{:,}\\".format(int(number_str))"},{"question":"A large literature library wants to maintain a catalog of all books. Each book can belong to multiple categories and the library wants to keep track of the catalog efficiently. Your task is to create a system to manage the library\'s book catalog, allowing efficient insertion, deletion, and retrieval of books by their categories. Write a program that supports the following operations: 1. `add_book(book_id, categories)`: Adds a book with `book_id` to the catalog under the specified `categories`. Each book_id is unique. 2. `remove_book(book_id)`: Removes the book with `book_id` from the catalog. 3. `get_books_by_category(category)`: Retrieves a list of book_ids that fall under the given `category`. The book_ids in the result should be sorted in ascending order. Input The input consists of multiple commands in the following format: - `add_book book_id category1 category2 ...` - `remove_book book_id` - `get_books_by_category category` The input is terminated by a line with the single word `end`. Output For each `get_books_by_category category` command, output the list of book_ids in a single line separated by spaces. If no books are found for the specified category, output an empty line. Example Input: ``` add_book 1 fiction mystery add_book 2 science fiction add_book 3 mystery get_books_by_category fiction get_books_by_category mystery remove_book 1 get_books_by_category fiction get_books_by_category mystery end ``` Output: ``` 1 2 1 3 2 3 ``` # Constraints - `1 ≤ book_id ≤ 100000` - Categories are non-empty strings consisting of lowercase English letters and are at most 20 characters long. - The number of categories a book can belong to is at most 10. - While categories list in add_book command might not be sorted, you should output book_ids in sorted order in get_books_by_category command.","solution":"class LibraryCatalog: def __init__(self): self.catalog = {} self.book_categories = {} def add_book(self, book_id, categories): if book_id in self.book_categories: return self.book_categories[book_id] = set(categories) for category in categories: if category not in self.catalog: self.catalog[category] = set() self.catalog[category].add(book_id) def remove_book(self, book_id): if book_id not in self.book_categories: return categories = self.book_categories.pop(book_id) for category in categories: self.catalog[category].remove(book_id) if len(self.catalog[category]) == 0: self.catalog.pop(category) def get_books_by_category(self, category): if category not in self.catalog: return [] return sorted(self.catalog[category]) def process_commands(commands): library = LibraryCatalog() results = [] for command in commands: parts = command.split() if parts[0] == \\"add_book\\": book_id = int(parts[1]) categories = parts[2:] library.add_book(book_id, categories) elif parts[0] == \\"remove_book\\": book_id = int(parts[1]) library.remove_book(book_id) elif parts[0] == \\"get_books_by_category\\": category = parts[1] result = library.get_books_by_category(category) results.append(result) return results # Diagnostic function to simulate inputs and retrieve outputs def simulate_library_operations(input_commands): commands = input_commands.strip().split(\'n\') outputs = process_commands(commands[:-1]) # Exclude the last \\"end\\" command return outputs"},{"question":"Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must solve it without using the division operation and in O(n) time complexity. Input The input contains multiple space-separated integers, representing elements of the array nums where n is the length of the array (2 ≤ n ≤ 100000, -30 ≤ nums[i] ≤ 30). Output Print n integers on a single line, representing the answer array where answer[i] is the product of all elements of nums except nums[i]. Examples Input 1 2 3 4 Output 24 12 8 6 Input -1 1 0 -3 3 Output 0 0 9 0 0 Note In the first example, the product array is [2*3*4, 1*3*4, 1*2*4, 1*2*3] resulting in [24, 12, 8, 6]. In the second example, the product array is [1*0*-3*3, -1*0*-3*3, -1*1*-3*3, -1*1*0*3, -1*1*0*-3] resulting in [0, 0, 9, 0, 0]. The solution must not use the division operation to achieve the desired output.","solution":"def product_except_self(nums): Returns an array such that each element at index i is the product of all the elements of nums except nums[i]. n = len(nums) answer = [1] * n # Step 1: Calculate left products left_product = 1 for i in range(n): answer[i] = left_product left_product *= nums[i] # Step 2: Calculate right products and multiply with the left products right_product = 1 for i in range(n-1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Lila is a biologist studying the growth patterns of certain bacteria. Each day she records the number of bacteria she observes in a petri dish. However, due to the nature of her microscope, she can only observe a limited number of bacteria at once, and she notices patterns where bacteria counts might increase or decrease. Lila wants to identify the maximum possible difference between the number of bacteria observed on two different days throughout her study. Your task is to help Lila by writing a program that computes the maximum difference in bacteria counts over the observation period. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of days Lila observed the bacteria. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the number of bacteria Lila observed on each day. -----Output----- Print a single integer — the maximum possible difference in the number of bacteria observed between two different days. -----Examples----- Input 5 3 8 2 7 10 Output 8 Input 6 1 2 3 4 5 6 Output 5 Input 4 100 150 200 50 Output 150 -----Note----- In the first sample, the maximum difference is between the observed bacteria counts on the first day (3 bacteria) and the fifth day (10 bacteria), resulting in a difference of 7. In the second sample, the maximum difference is 5, which is the difference between the first day (1) and the sixth day (6). In the third sample, the maximum difference is 150, which is the difference between the day with 200 bacteria and the first day with 50 bacteria.","solution":"def max_difference(n, bacteria_counts): Returns the maximum difference in bacteria counts observed between two different days. if n < 2: raise ValueError(\\"The number of days must be at least 2.\\") min_bacteria = bacteria_counts[0] max_bacteria = bacteria_counts[0] for count in bacteria_counts: if count < min_bacteria: min_bacteria = count if count > max_bacteria: max_bacteria = count return max_bacteria - min_bacteria"},{"question":"You walk into a mysterious dungeon with N rooms, connected by magical portals. Each portal allows for unidirectional travel and has a magical cost associated with it. Each room may also have a hidden treasure with a certain value. You want to find the maximum difference between the value of the treasure collected at the ending room and the cost of traveling from the starting room to the ending room while collecting treasures and opening portals as many times as needed. You can start at any room, but once you decide to enter a room and start your journey, you must follow the portals and cannot go back to a previously visited room. Input The first line contains a single integer N - the number of rooms in the dungeon. The second line contains N space-separated integers representing the values of treasures in each of the rooms. Next, there are N lines, each line containing N integers. The j-th integer in the i-th line represents the cost of using the portal from room i to room j. If there is no portal from room i to room j, the cost will be -1. Output Print the maximum difference between the treasure value collected in the ending room and the total cost spent in traveling. Constraints 1 ≤ N ≤ 1000 -1 ≤ Costij ≤ 1000 0 ≤ Treasurei ≤ 1000 Note: - A cost of -1 means there is no portal from room i to room j. - You can choose any room as the starting point, collect the treasure, and continue your journey. - You can collect the treasure of only the starting room and ending room. SAMPLE INPUT 4 3 6 2 8 0 5 -1 10 -1 0 6 2 7 -1 0 3 4 12 -1 0 SAMPLE OUTPUT 9 Explanation One possible path is starting in room 1 (with treasure value 3) and moving to room 2 with a cost of 5. Then directly move to room 4 with a cost of 2. The total cost spent is 7. The ending treasure value is 8. The maximum difference between the treasure collected and the cost is 8 - 7 = 1. A better path is starting in room 2 (with treasure value 6) and moving directly to room 4 with a cost of 2. The maximum difference is 8 - 2 = 6. The optimal solution would involve exploring these paths to achieve the maximum result.","solution":"import heapq def maximum_treasure_difference(N, treasures, costs): max_diff = float(\'-inf\') def dijkstra(start): dist = [float(\'inf\')] * N dist[start] = 0 pq = [(0, start)] while pq: current_cost, current_node = heapq.heappop(pq) if current_cost > dist[current_node]: continue for next_node in range(N): if costs[current_node][next_node] != -1: new_cost = dist[current_node] + costs[current_node][next_node] if new_cost < dist[next_node]: dist[next_node] = new_cost heapq.heappush(pq, (new_cost, next_node)) return dist for start in range(N): dist = dijkstra(start) for end in range(N): if start != end and dist[end] < float(\'inf\'): max_diff = max(max_diff, treasures[end] - dist[end]) return max_diff"},{"question":"Charlie has an array of n integers. He wants to perform a series of operations to make all the elements in the array equal. The operation he can perform consists of selecting two different indices, i and j (1 le i, j le n, i neq j), and either incrementing or decrementing both a_i and a_j by 1. Charlie wants to find out the minimum number of operations required to make all the elements of the array equal. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the minimum number of operations required to make all the elements of the array equal. -----Examples----- Input 4 2 2 3 3 Output 2 Input 3 1 2 3 Output 3 Note: In the first example, you can make all elements equal in the following way: 1. Increment both a_3 and a_4 by 1, resulting in the array [2, 2, 4, 4] 2. Decrement both a_3 and a_4 by 1, resulting in the array [2, 2, 3, 3] In the second example, you can make all elements equal in the following way: 1. Increment both a_1 and a_2 by 1, resulting in the array [2, 3, 3] 2. Decrement both a_2 and a_3 by 1, resulting in the array [2, 2, 2] 3. Increment both a_1 and a_3 by 1, resulting in the array [3, 3, 3]","solution":"def min_operations_to_equal_elements(n, array): sorted_array = sorted(array) median = sorted_array[n // 2] # Using median minimizes the sum of absolute deviations operations = sum(abs(x - median) for x in array) return operations"},{"question":"A store allows its customers to redeem reward points for discounts on their purchases. Customers can redeem points using one of the following schemes: * Scheme A: Redeem X points for a discount of D dollars. * Scheme B: Redeem Y points for a discount of M dollars. * Scheme C: Redeem Z points for a discount of N dollars. Given the total number of points a customer has and the costs of the products they wish to buy, find the maximum amount of discount a customer can get. The customer can use each scheme multiple times, but cannot exceed the total points they have. Additionally, the discount cannot exceed the total cost of the products. Write a function that calculates the maximum discount. # Constraints * All values in input are integers. * 1 ≤ total_points ≤ 10^5 * 1 ≤ product_cost ≤ 10^5 * 1 ≤ X, Y, Z ≤ 10^3 * 1 ≤ D, M, N ≤ 10^4 # Input Input is given from Standard Input in the following format: ``` total_points product_cost X D Y M Z N ``` # Output Print the maximum possible discount the customer can get. # Examples Example 1 Input: ``` 100 50 10 5 20 12 30 20 ``` Output: ``` 50 ``` Explanation: The customer can use Scheme A one time for a discount of 5 dollars (remaining points: 90), but this is not optimal. Using Scheme C three times for a discount of 60 dollars (remaining points: 10) exceeds the product cost. The best is using Scheme C once (30 points for 20 dollars) and Scheme B once (20 points for 12 dollars), and then Scheme A twice (remaining 40 points for 10 dollars), totaling 42 dollars discount, which is the maximum that fits within the product cost. Example 2 Input: ``` 200 100 20 15 30 25 50 45 ``` Output: ``` 100 ``` Explanation: The customer can use Scheme C twice for a discount of 90 dollars (100 remaining points). Then, they can use Scheme B once for a discount of 25 dollars. However, the best they can do is to use the Scheme A three times (remaining points: 140) and Scheme C once (remaining points: 90). The total discount is 100 dollars.","solution":"def max_discount(total_points, product_cost, schemes): Calculates the maximum discount a customer can get based on the given schemes and constraints. Args: total_points (int): The total number of points the customer has. product_cost (int): The total cost of the products the customer wishes to buy. schemes (list of tuples): A list of tuples where each tuple contains two integers (points required, discount). Returns: int: The maximum possible discount the customer can get. # Sort the schemes by the discount per point in descending order schemes = sorted(schemes, key=lambda x: x[1]/x[0], reverse=True) max_discount = 0 for scheme in schemes: points_required, discount = scheme # Calculate how many times we can use this scheme within the remaining points if total_points >= points_required: max_uses = total_points // points_required used_points = max_uses * points_required gained_discount = max_uses * discount # Check if the gained discount exceeds product cost if max_discount + gained_discount > product_cost: gained_discount = product_cost - max_discount used_points = (product_cost - max_discount) * points_required // discount max_discount += gained_discount total_points -= used_points # If we reach the product cost, break out of the loop if max_discount >= product_cost: max_discount = product_cost break return max_discount # Helper function to format input data def parse_input(input_str): lines = input_str.strip().split(\\"n\\") total_points, product_cost = map(int, lines[0].split()) schemes = [tuple(map(int, line.split())) for line in lines[1:]] return total_points, product_cost, schemes"},{"question":"Alex is managing a support system for a software product. The company collects user feedback and each feedback has a severity level and a timestamp. Based on the severity levels, Alex wants to find out how many urgent feedbacks were submitted in the last 24 hours. You are given severity levels and timestamps of user feedbacks. Each feedback is labeled with one of three severity levels: \\"low\\", \\"medium\\", or \\"urgent\\". The timestamps are in the \\"YYYY-MM-DD HH:MM:SS\\" format. Your task is to write a function that takes the current timestamp and a list of feedbacks, and returns the count of \\"urgent\\" feedbacks submitted in the last 24 hours. Input - A string current_time representing the current time in \\"YYYY-MM-DD HH:MM:SS\\" format. - An integer n representing the number of feedbacks (1 ≤ n ≤ 1000). - A list of n feedbacks, each consisting of: - A severity level which is either \\"low\\", \\"medium\\", or \\"urgent\\". - A timestamp in the \\"YYYY-MM-DD HH:MM:SS\\" format, representing the time the feedback was submitted. Output Return an integer representing the count of \\"urgent\\" feedbacks submitted in the last 24 hours from the given current time. Examples Input \\"2023-10-03 14:00:00\\" 4 \\"urgent 2023-10-02 14:01:00\\" \\"low 2023-10-02 13:59:59\\" \\"urgent 2023-10-02 13:00:00\\" \\"medium 2023-10-02 15:00:00\\" Output 2 Explanation In the example, the given current time is \\"2023-10-03 14:00:00\\". - \\"urgent 2023-10-02 14:01:00\\" was submitted 23 hours and 59 minutes ago, within the last 24 hours. - \\"low 2023-10-02 13:59:59\\" was submitted 24 hours and 1 second ago, not within the last 24 hours. - \\"urgent 2023-10-02 13:00:00\\" was submitted 25 hours ago, not within the last 24 hours. - \\"medium 2023-10-02 15:00:00\\" was submitted 23 hours ago, within the last 24 hours. Therefore, there are 2 urgent feedbacks submitted in the last 24 hours.","solution":"from datetime import datetime, timedelta def count_urgent_feedbacks(current_time, feedbacks): Counts the number of urgent feedbacks submitted in the last 24 hours. Args: current_time (str): The current timestamp in \\"YYYY-MM-DD HH:MM:SS\\" format. feedbacks (list): A list of strings, each representing a feedback with severity level and timestamp. Returns: int: The count of urgent feedbacks submitted in the last 24 hours. current_time = datetime.strptime(current_time, \\"%Y-%m-%d %H:%M:%S\\") cutoff_time = current_time - timedelta(hours=24) urgent_count = 0 for feedback in feedbacks: parts = feedback.split(\' \', 1) severity = parts[0] timestamp = datetime.strptime(parts[1], \\"%Y-%m-%d %H:%M:%S\\") if severity == \\"urgent\\" and cutoff_time < timestamp <= current_time: urgent_count += 1 return urgent_count"},{"question":"A courier company needs to optimize its delivery schedule within a city grid layout. The city is represented as an N times N grid where each cell has a certain time cost associated with it. The goal is to find the minimum time cost required to reach from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, N-1) by only moving right or down at each step. Write a function `min_delivery_cost(grid)` that takes a 2D list representing the grid and returns the minimum time cost. # Input - The input is a 2D list `grid` of integers, where `grid[i][j]` represents the time cost to traverse cell `(i, j)`. - The size of the grid `N` is a positive integer, with 1 leq N leq 1000. - Each `grid[i][j]` is a non-negative integer with 0 leq grid[i][j] leq 100. # Output - Return the minimum time cost to reach from the top-left corner to the bottom-right corner of the grid. # Example Example 1 # Input: ``` [[1, 3, 1], [1, 5, 1], [4, 2, 1]] ``` # Output: ``` 7 ``` Example 2 # Input: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` # Output: ``` 21 ``` # Explanation - In the first example, the path with the minimum cost is `(0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)` with a total cost of 1 + 1 + 4 + 2 + 1 = 9. - In the second example, the path with the minimum cost is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)` with a total cost of 1 + 2 + 3 + 6 + 9 = 21.","solution":"def min_delivery_cost(grid): This function calculates the minimum time cost to reach from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) in an N x N grid by only moving right or down. Parameters: grid (list of list of int): 2D list representing the grid with time costs. Returns: int: Minimum time cost to traverse from (0, 0) to (N-1, N-1). N = len(grid) if N == 0: return 0 # Initialize the dp array with the same dimensions as grid dp = [[0]*N for _ in range(N)] # Start from the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1]"},{"question":"A major textile company has developed a unique method of weaving patterns onto fabrics using a specialized loom. Each loom can weave a 2D pattern grid of size M x N, where each cell in the grid can either be filled with thread (represented by 1) or left empty (represented by 0). The company wants to create intricate designs by rotating a pattern to form both the original and rotated versions side by side on the fabric. Write a program that takes a pattern grid, rotates it 90 degrees clockwise, and prints both the original and rotated patterns in a specified format. The rotated pattern should be displayed to the right of the original pattern, with a single space column separator. Ensure that your program correctly aligns the rows for both the original and rotated grids. Input The input consists of multiple datasets, followed by a single line containing two zeros to indicate the end of input. Each dataset is formatted as follows: ``` M N P11 P12 P13 ... P1N P21 P22 P23 ... P2N ... PM1 PM2 PM3 ... PMN ``` M is the number of rows in the pattern grid, and N is the number of columns. Both M and N are positive integers no more than 50. Each Pij represents the cell value (either 0 or 1) in the grid. There will be at least one dataset in the input. Output For each dataset, print the original and the rotated pattern side by side. Between each pair of corresponding rows in the original and rotated patterns, separate the columns of the two patterns with a single space. Example Input ``` 3 3 1 0 1 0 1 0 1 0 1 2 4 1 0 0 1 0 1 1 0 0 0 ``` Output ``` 1 0 1 1 0 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 0 0 1 0 1 1 1 0 ```","solution":"def rotate_pattern(pattern): Rotates the given pattern 90 degrees clockwise. M = len(pattern) N = len(pattern[0]) # Create a new matrix for the rotated pattern rotated = [[0] * M for _ in range(N)] # Fill in the rotated matrix for r in range(M): for c in range(N): rotated[c][M - 1 - r] = pattern[r][c] return rotated def display_patterns(original, rotated): Displays the original and rotated patterns side by side. M = len(original) N = len(rotated) output = [] for r in range(M): original_row = \' \'.join(map(str, original[r])) if r < N: rotated_row = \' \'.join(map(str, rotated[r])) output.append(f\\"{original_row} {rotated_row}\\") else: output.append(original_row) return \'n\'.join(output) def main(input_data): Process input data, rotate patterns and output the results as specified. input_lines = input_data.split(\'n\') index = 0 output = [] while index < len(input_lines): line = input_lines[index].strip() if line == \'0 0\': break M, N = map(int, line.split()) pattern = [] for i in range(M): index += 1 pattern_line = list(map(int, input_lines[index].strip().split())) pattern.append(pattern_line) rotated_pattern = rotate_pattern(pattern) output.append(display_patterns(pattern, rotated_pattern)) index += 1 return \'nn\'.join(output)"},{"question":"Three programmers, Alice, Bob, and Charlie are competing in a code sprint. They are solving problems from an online judge system. Whenever a problem is solved, the problem set updates, and the next problem is selected based on the difficulty score of the problem they just solved. The difficulty score of the problem can range from 1 to 10^6 and it updates according to the rules specified below. Each problem has an initial difficulty score D. If Alice solves the problem, the next problem\'s difficulty score will be twice the current difficulty score (i.e., 2 * D). If Bob solves the problem, the next problem\'s difficulty score will be decreased by 1 (i.e., D - 1). If Charlie solves the problem, the next problem\'s difficulty score will be the floor of half the current difficulty score (i.e., ⌊D / 2⌋). The cycle will continue in the same order (Alice -> Bob -> Charlie) indefinitely. It is given that Bob wants to be the one who solves the last problem of each cycle. Given the initial difficulty score, you need to determine who solves the last problem of each cycle. Input: You will be given t test cases. For each test case you will be given an initial difficulty score D of the problem. Output: For each test case, output the name of the programmer who solves the last problem of the cycle: Alice, Bob, or Charlie. Constraints: 0 < t < 101 1 ≤ D ≤ 10^6 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT Alice Charlie Bob Alice Charlie","solution":"def solve_last_problem(t, difficulties): results = [] for D in difficulties: # The pattern repeats every 3 problems, hence we can use modulo to determine who handles the last problem. if D % 3 == 1: results.append(\\"Alice\\") elif D % 3 == 2: results.append(\\"Charlie\\") else: results.append(\\"Bob\\") return results"},{"question":"Given a 2D grid of size N x M, your task is to determine the number of unique islands. An island is formed by connected groups of \'1\'s (land) on the grid. Connectivity is determined by horizontal or vertical adjacency, i.e., all horizontally or vertically neighboring cells forming a group of \'1\'s make up one unique island. Diagonal adjacency is not allowed. You need to consider multiple test cases. Input First line T, number of test cases. For each test case: - First line N and M (the number of rows and columns of the grid). - Next N lines contain M integers (either 0 or 1), where each line represents a row of the grid. Output For each test case, print the number of unique islands in a new line. Constraints 1 ≤ T ≤ 50 1 ≤ N, M ≤ 1000 SAMPLE INPUT 2 4 5 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 0 3 3 1 0 1 0 1 0 1 0 1 SAMPLE OUTPUT 2 5 Explanation Case 1: The grid has two islands shown below: ``` 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 0 ``` Case 2: The grid has five islands as shown below: ``` 1 0 1 0 1 0 1 0 1 ```","solution":"def dfs(grid, x, y, visited): n = len(grid) m = len(grid[0]) stack = [(x, y)] while stack: cx, cy = stack.pop() if (cx, cy) in visited: continue visited.add((cx, cy)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1 and (nx, ny) not in visited: stack.append((nx, ny)) def num_islands(grid): n = len(grid) m = len(grid[0]) visited = set() islands = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and (i, j) not in visited: dfs(grid, i, j, visited) islands += 1 return islands def find_number_of_islands(test_cases): results = [] for grid in test_cases: results.append(num_islands(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) grid = [list(map(int, lines[index + 1 + i].split())) for i in range(N)] test_cases.append(grid) index += N + 1 return test_cases"},{"question":"You are given a string s, which consists of lowercase alphabets and parentheses. Your task is to remove the minimum number of invalid parentheses to make the input string valid and return all possible results. Note that you need to return all possible results in lexicographical order. A valid string is defined as an empty string, or a substring where each character matches the corresponding closing bracket. Example 1: Input: s = \\"()())()\\" Output: [\\"(())()\\",\\"()()()\\"] Explanation: By removing the extra parentheses, we get two valid strings (())() and ()()(). Example 2: Input: s = \\"(a)())()\\" Output: [\\"(a())()\\",\\"(a)()()\\"] Explanation: By removing the extra parentheses, we get two valid strings (a())() and (a)()(). Your Task: You don\'t need to read the input or print anything. Your task is to complete the function removeInvalidParentheses() which takes a string s and returns a list of all possible results in lexicographical order. Expected Time Complexity: O(2^n) where n is the length of the input string Expected Space Complexity: O(n) Constraints: 1 <= s.length <= 25 s consists of lowercase alphabets and parentheses (\'(\' and \')\').","solution":"def removeInvalidParentheses(s): def is_valid(string): cnt = 0 for char in string: if char == \'(\': cnt += 1 elif char == \')\': cnt -= 1 if cnt < 0: return False return cnt == 0 def backtrack(s, start, l, r): if l == 0 and r == 0: if is_valid(s): result.add(\\"\\".join(s)) return for i in range(start, len(s)): if i != start and s[i] == s[i - 1]: continue if s[i] in (\'(\', \')\'): curr = \\"\\".join(s[:i] + s[i + 1:]) if r > 0 and s[i] == \')\': backtrack(curr, i, l, r - 1) elif l > 0 and s[i] == \'(\': backtrack(curr, i, l - 1, r) l = r = 0 for char in s: if char == \'(\': l += 1 elif char == \')\': if l: l -= 1 else: r += 1 result = set() backtrack(list(s), 0, l, r) return sorted(result)"},{"question":"Chef has decided to conduct a special operation to monitor and ensure the security of various city zones in Gotham. Each zone has a specific level of security, represented by a number. Zones are connected through a network of security paths, forming a complex web of routes. Batman has built a new monitoring system that evaluates the security path between any two zones. To assist in maintaining efficient monitoring and responsiveness, your task is to implement a solution that supports the addition of new zones and execution of monitoring queries on the existing network. ------ Input ------ There is only one test case in each test file. The first line contains two numbers, N and Q, denoting the number of zones and the number of queries, respectively. The second line contains N integers where the ith integer represents the security level of the ith zone. Each of the next N-1 lines contain two numbers u and v, indicating a security path between zone u and zone v. Each of the next Q lines contains a query of one of the following types: - 0 u v: Check if there is any path between zone u and zone v and return \\"YES\\" if such a path exists, otherwise return \\"NO\\". - 1 u level: Update the security level of zone u to the given level. ------ Output ------ For each query of type 0, output a single line containing the result: either \\"YES\\" or \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ Q ≤ 100,000 1 ≤ u, v ≤ N 1 ≤ security level ≤ 10^9 1 ≤ level ≤ 10^9 ------ Sample Input 1 ------ 5 4 7 2 5 3 6 1 2 2 3 3 4 4 5 0 1 5 1 3 10 0 3 2 0 5 1 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Initially, there are 5 zones with security levels 7, 2, 5, 3, and 6, respectively. The initial connections are: 1 - 2 2 - 3 3 - 4 4 - 5 First query: There is a path from zone 1 to zone 5, so the answer is \\"YES\\". Second query: The security level of zone 3 is updated to 10. Third query: There is a path from zone 3 to zone 2 (zones 2 and 3 are directly connected), so the answer is \\"YES\\". Fourth query: The path from zone 5 to zone 1 does not exist after the previous update where the direct path from zone 2 to 3 becomes invalid due to different connectivity implementation, so the answer is \\"NO\\".","solution":"from collections import defaultdict def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def monitor_security(N, queries, updates): parent = {i: i for i in range(1, N + 1)} rank = {i: 0 for i in range(1, N + 1)} adj_list = defaultdict(list) for u, v in updates[\\"edges\\"]: adj_list[u].append(v) adj_list[v].append(u) union(parent, rank, u, v) results = [] for query in queries: q_type, u, v = query if q_type == 0: res = \\"YES\\" if find(parent, u) == find(parent, v) else \\"NO\\" results.append(res) elif q_type == 1: # Perform security level update # This has no effect on the connectivity in our current DSU representation pass return results"},{"question":"Given an array of integers, write a function to find the minimum number of moves required to make all the elements equal. You can only increment or decrement a number by 1 in a single move. Example 1: Input: [1,2,3] Output: 2 Explanation: Only two moves are needed (1 -> 2, 3 -> 2) to make all elements equal to 2. Example 2: Input: [1,10,2,9] Output: 16 Explanation: In 16 moves, all the elements can be made equal to 5. Note: The length of the given array will be in the range [1, 10^4]. The elements of the given array are in the range [-10^4, 10^4].","solution":"def min_moves_to_equal_elements(nums): Returns the minimum number of moves required to make all elements equal. Each move increments or decrements a number by 1. nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"The town of Graphville has a unique transportation system based on a network of paths that connect various landmarks. Unfortunately, over time, some paths have become unfit for travel, and the system is now incomplete and fragmented. The town planner wants to restore connectivity by adding the minimum number of new paths (edges) to the existing network to ensure all landmarks (nodes) are connected. You are tasked with helping the town planner decide the minimum number of new edges required to connect all the landmarks. **Input** The input consists of multiple datasets, each of which is formatted as follows: 1. The first line contains two integers, V and E (1 ≤ V ≤ 100, 0 ≤ E ≤ V*(V-1)/2), where V is the number of landmarks and E is the number of existing paths. 2. The next E lines each contain two integers u and v (1 ≤ u, v ≤ V), indicating that there is a path between landmarks u and v. The end of the input is indicated by a line containing a single pair of zeros. **Output** For each dataset, output a single integer representing the minimum number of new paths required to make all the landmarks connected. **Example** **Input** ``` 5 2 1 2 3 4 4 3 1 2 3 0 ``` **Output** ``` 2 0 ``` **Explanation** - For the first dataset, there are 5 landmarks with only 2 paths connecting (1,2) and (3,4). The minimum number of new paths required to connect all the landmarks is 2 (one possible solution is adding both paths (1,3) and (4,5) to make the network connected). - For the second dataset, all 3 landmarks are already connected through the given paths. Therefore, no new paths are required.","solution":"def find_min_new_edges(V, edges): def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) if V == 0: return 0 visited = [False] * (V + 1) adj_list = [[] for _ in range(V + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) components_count = 0 for i in range(1, V + 1): if not visited[i]: components_count += 1 visited[i] = True dfs(i, visited, adj_list) return max(0, components_count - 1) def minimum_new_edges(datasets): results = [] for V, E, edges in datasets: results.append(find_min_new_edges(V, edges)) return results"},{"question":"Emma loves baking cookies and wants to share them with her friends. She has exactly one cookie per friend, and each cookie must be customized to suit the personal taste of her friend. To make things simpler, Emma decides to create a specific pattern of chocolate chips on each cookie to identify which one belongs to whom. The challenge is to create a unique pattern for each cookie from a given set of patterns. -----Task----- You are given an integer N representing the number of friends (cookies). Each cookie is identified by an integer from 1 to N. You are also given a set of patterns, each represented by a string of length M consisting of characters \'0\' and \'1\'. Your task is to assign a unique pattern to each cookie such that no two cookies have the same pattern. -----Input----- The first line of input contains two space-separated integers N and P, satisfying 1 leq N leq 1000 and N leq P, where N is the number of friends, and P is the number of available patterns. Patterns are guaranteed to be unique. The following P lines each contain a binary string of length M representing a pattern. -----Output----- Output N lines. The i-th line should contain the pattern assigned to the i-th cookie. If there is no valid assignment, output \\"Impossible\\". -----Examples----- Sample Input: 3 4 0110 1001 0011 1100 Sample Output: 0110 1001 0011 Sample Input: 4 4 0110 1001 0011 1100 Sample Output: Impossible","solution":"def assign_patterns(N, P, patterns): Assigns unique patterns to each of the N cookies from the provided pattern list, or returns \'Impossible\' if not enough patterns for unique assignment. Parameters: N (int): The number of cookies (friends). P (int): The number of available patterns. patterns (list of str): A list of binary patterns. Returns: list of str: The list of patterns assigned to each cookie or [\\"Impossible\\"] if assignment is not possible. if N > P: return [\\"Impossible\\"] return patterns[:N]"},{"question":"A group of scientists is studying the temperature variations of a particular region over a certain period. They have temperature readings for every hour over several days and would like to analyze patterns in temperature changes. They measure the temperature variation as the sum of absolute differences in hourly temperature readings over a day. For example, if the temperature readings for a day are [20, 21, 19, 22, 20], then the temperature variation for that day is |21-20| + |19-21| + |22-19| + |20-22| = 1 + 2 + 3 + 2 = 8. The scientists now have temperature readings for multiple days and need a program that computes the temperature variation for each day. Input The input consists of a series of data sets. The first line of each data set contains an integer d (1 ≤ d ≤ 30), where d is the number of days. For the next d blocks, each block starts with an integer h (1 ≤ h ≤ 24), which is the number of temperature readings for the day, followed by h space-separated integers (each in the range -50 to 50), representing the temperature readings of that day. The end of input is indicated by d = 0. This is not part of the data sets and should not be processed. Output For each data set, your program should print the temperature variation for each day in separate lines. Each value should be an integer indicating the sum of absolute differences in hourly temperature readings for that day. Example Input 2 5 20 21 19 22 20 3 15 18 15 0 Output 8 6","solution":"def temperature_variation(datasets): variations = [] for data in datasets: d = data[0] if d == 0: break index = 1 for _ in range(d): h = data[index] readings = data[index + 1:index + 1 + h] variation = sum(abs(readings[i] - readings[i - 1]) for i in range(1, h)) variations.append(variation) index += h + 1 return variations"},{"question":"You are given a string s consisting of lowercase English letters. You need to find the number of substrings of s that are palindromes. -----Input----- The first line contains a string s (1 leq |s| leq 10^5). -----Output----- Print a single integer — the number of substrings of s that are palindromes. -----Example----- Input abba Output 6 -----Note----- In the sample case, the palindromic substrings are: a, b, b, a, bb, and abba.","solution":"def count_palindromic_substrings(s): This function computes the number of palindromic substrings in the given string s. n = len(s) count = 0 # Create a 2D list to store if s[i:j] is a palindrome dp = [[False]*n for _ in range(n)] # Single letter substrings are palindromes for i in range(n): dp[i][i] = True count += 1 # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True count += 1 # Check for substrings of length > 2 for length in range(3, n+1): # length of substring for i in range(n-length+1): j = i+length-1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True count += 1 return count"},{"question":"You are given a binary string `s` consisting of characters \'0\' and \'1\'. We define the \\"maximum 1-burst\\" of a binary string as the length of the longest contiguous substring consisting of only \'1\'s. Your task is to determine the minimum number of flips required to ensure that the \\"maximum 1-burst\\" of the string is less than or equal to a given integer `k`. A \\"flip\\" is defined as changing a character from \'0\' to \'1\' or from \'1\' to \'0\'. -----Input----- The first line contains an integer `t` (1 le t le 10^5), the number of test cases. Each test case is described by two lines: - The first line contains an integer `k` (0 le k le 10^5). - The second line contains string `s (1 le |s| le 10^5), a binary string consisting of characters \'0\' and \'1\'. It is guaranteed that the sum of lengths of `s` over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer: the minimum number of flips required to ensure that the maximum 1-burst in the binary string is at most `k`. -----Examples----- Input 3 1 1110101 2 110011 0 1010101 Output 2 0 4 -----Note----- In the first test case, the original string is \\"1110101\\". The maximum 1-burst is 3, which is greater than `k = 1`. To make the maximum 1-burst <= 1, we can flip the first and second \'1\' to \'0\', resulting in \\"0010101\\". The changes are at indices 0 and 1 (0-based index), which totals 2 flips. In the second test case, the original string is \\"110011\\". The maximum 1-burst is 2, and since `k = 2`, no flips are needed. Therefore, the output is 0. In the third test case, the maximum 1-burst is 1, which is already equal to `k = 0`. Hence, flip all \'1\'s to \'0\'s to make maximum 1-burst 0. The minimum number of flips required is 4 (all occurrences of \'1\' are flipped to \'0\'). Therefore, the output is 4.","solution":"def min_flips(t, test_cases): results = [] for i in range(t): k = test_cases[i][0] s = test_cases[i][1] # Count clusters of \'1\'s in the string clusters = [] count = 0 for char in s: if char == \'1\': count += 1 else: if count > 0: clusters.append(count) count = 0 if count > 0: clusters.append(count) # If the maximum cluster length is already less than or equal to k, # no flips are needed if all(cluster <= k for cluster in clusters): results.append(0) continue # Calculate the number of flips needed flips = 0 for cluster in clusters: if cluster > k: flips += cluster - k results.append(flips) return results"},{"question":"Task Given an array of integers `arr` and an integer `k`, return the k most frequent elements in the array. Your algorithm\'s runtime complexity must be better than O(n log n), where n is the array\'s size. Example 1: Input: `arr = [1,1,1,2,2,3]`, `k = 2` Output: `[1, 2]` Example 2: Input: `arr = [1]`, `k = 1` Output: `[1]` Explanation: - In Example 1, the two most frequent elements are 1 and 2. - In Example 2, the single most frequent element is 1.","solution":"from collections import Counter import heapq def top_k_frequent(arr, k): Returns the k most frequent elements from the array. if k == len(arr): return arr # Build a frequency map count = Counter(arr) # Use a heap to extract the top k frequent elements return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"You are given N points in a 2D plane and you are required to find the maximum distance between any two points among the given N points. The distance between two points (x1, y1) and (x2, y2) can be calculated using the Euclidean distance formula: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Write a program to calculate the maximum distance among the given points. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, denoting the number of points. - The next N lines contain two space-separated integers, where the i-th line represents the coordinates of the i-th point (xi, yi). ------ Output Format ------ For each test case, output in a single line the maximum distance between any two points, rounded to 4 decimal places. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 -10^3 ≤ xi, yi ≤ 10^3 ------ Sample Input 1 ------ 1 3 0 0 0 3 4 0 ------ Sample Output 1 ------ 5.0000 ------ Explanation 1 ------ In the given input, the three points form the vertices of a right triangle. The maximum distance is between the points (0, 3) and (4, 0), calculated as follows: [ text{distance} = sqrt{(4 - 0)^2 + (0 - 3)^2} = sqrt{16 + 9} = sqrt{25} = 5.0000 ]","solution":"import math def max_distance(points): num_points = len(points) max_dist = 0 for i in range(num_points): for j in range(i + 1, num_points): dist = math.sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2) if dist > max_dist: max_dist = dist return max_dist def process_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 results = [] for _ in range(T): N = int(lines[index]) index += 1 points = [] for _ in range(N): x, y = map(int, lines[index].split()) points.append((x, y)) index += 1 result = max_distance(points) results.append(f\\"{result:.4f}\\") return \\"n\\".join(results)"},{"question":"Design a function to find all unique triplets in an array that sum to zero. ``` Given an array nums of n integers, write a function `threeSum`(nums) that finds all unique triplets (a, b, c) in the array such that a + b + c = 0. Note: - The solution set must not contain duplicate triplets. - The order of the triplets in the output does not matter. Example: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, 0, 1], [-1, -1, 2]] Explanation: nums[0] + nums[1] + nums[2] = -1 + 0 + 1 = 0 nums[0] + nums[4] + nums[3] = -1 + -1 + 2 = 0 ``` Challenge: Implement the solution with a time complexity of O(n^2).","solution":"def threeSum(nums): Returns all unique triplets in the array that sum to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicates left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicates left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Given an array of integers, determine the minimum sum of elements in any contiguous subarray of size k. You are provided with a single integer t representing the number of test cases. For each test case, you will receive an integer n, the size of the array, followed by n integers representing the elements of the array, and finally, an integer k representing the size of the subarray. Your task is to find the minimum sum of elements in any contiguous subarray of size k for each test case. Input format: - First line of input will contain the number of test cases t. - For each test case, there will be three lines: - The first line contains an integer, n (size of the array). - The second line contains n space-separated integers, the elements of the array. - The third line contains an integer k, the size of the subarray. Output format: For each test case, output a single integer which is the minimum sum of elements in any contiguous subarray of size k. Constraints: - 1 <= t <= 100 - 1 <= n <= 10000 - -10^5 <= array element <= 10^5 - 1 <= k <= n SAMPLE INPUT 2 5 1 2 3 4 5 2 7 -1 -2 -3 -4 -5 -6 -7 3 SAMPLE OUTPUT 3 -15 Explanation Case 1: The subarrays of size 2 are [1, 2], [2, 3], [3, 4], and [4, 5]. The sums are 3, 5, 7, and 9, respectively. The minimum sum is 3. Case 2: The subarrays of size 3 are [-1, -2, -3], [-2, -3, -4], [-3, -4, -5], [-4, -5, -6], and [-5, -6, -7]. The sums are -6, -9, -12, -15, and -18, respectively. The minimum sum is -18. After analyzing the constraints and edge cases, make sure that the edge cases like when the array length is equal to the size of the subarray k, and if all elements are either positive or negative are also handled accordingly.","solution":"def minimum_sum_of_subarray(n, array, k): Returns the minimum sum of elements in any contiguous subarray of size k. Parameters: n (int): size of the array array (List[int]): the elements of the array k (int): the size of the subarray Returns: int: minimum sum of elements in any contiguous subarray of size k if k > n: raise ValueError(\\"Subarray size k must be less than or equal to the size of the array n.\\") min_sum = float(\'inf\') current_sum = sum(array[:k]) # initial sum of the first k elements min_sum = min(min_sum, current_sum) for i in range(k, n): current_sum += array[i] - array[i - k] min_sum = min(min_sum, current_sum) return min_sum def process_multiple_cases(test_cases): Processes multiple test cases for the minimum_sum_of_subarray function. Parameters: test_cases (List[Tuple[int, List[int], int]]): A list of test cases where each test case is a tuple of (n, array, k). Returns: List[int]: A list of results for each test case. results = [] for n, array, k in test_cases: results.append(minimum_sum_of_subarray(n, array, k)) return results"},{"question":"# The Fibonacci Puzzle Farhan loves playing with Fibonacci sequences. A Fibonacci sequence is defined as follows: the first two terms are 0 and 1, and each subsequent term is the sum of the previous two terms. Given a number N (0 ≤ N ≤ 10^18), determine the smallest Fibonacci number which is greater than or equal to N. Input The first and only line of the input contains an integer N. Output Print the smallest Fibonacci number which is greater than or equal to N. SAMPLE INPUT 15 SAMPLE OUTPUT 21 Explanation The Fibonacci sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, 21... 15 is not a Fibonacci number, but 21 is the smallest Fibonacci number that is greater than 15.","solution":"def smallest_fib_greater_equal(N): Returns the smallest Fibonacci number which is greater than or equal to N. if N == 0: return 0 a, b = 0, 1 while b < N: a, b = b, a + b return b"},{"question":"Given a list of integers, perform the following operations any number of times to find the minimum possible value of the list: 1. Select any integer x in the list and replace it with the floor of its square root, lfloor sqrt{x} rfloor. 2. Select any two distinct integers a and b such that a neq b, remove both from the list, and add their greatest common divisor (GCD), gcd(a, b). Determine the minimum possible value of the list you can achieve after any number of operations. Input Format The first line contains an integer T — the number of test cases. The first line of each test case contains an integer M — the number of integers in the list. The second line of each test case contains M integers, separated by spaces. Constraints 1 leq T leq 10^3 1 leq M leq 10^2 1 leq text{value of each integer} leq 10^6 Output Format For each test case, print a single integer — the minimum possible value of the list you can achieve. Sample Input 2 3 10 25 16 2 4 9 Sample Output 1 1 Explanation For the first test case: 1. Take the integer 10 and replace it with lfloor sqrt{10} rfloor = 3. 2. Now the list is [3, 25, 16]. 3. Take the integer 25 and replace it with lfloor sqrt{25} rfloor = 5. 4. Now the list is [3, 5, 16]. 5. Take the integer 16 and replace it with lfloor sqrt{16} rfloor = 4. 6. Now the list is [3, 5, 4]. 7. Take the GCD of 3 and 4: gcd(3, 4) = 1. Replace both 3 and 4 with 1. The list is now [1, 5]. 8. Take the GCD of 1 and 5: gcd(1, 5) = 1. Replace both 1 and 5 with 1. The list is now [1]. 9. The minimum possible value of the list is 1. For the second test case: 1. Take the GCD of 4 and 9: gcd(4, 9) = 1. Replace both 4 and 9 with 1. The list is now [1]. 2. The minimum possible value of the list is 1.","solution":"import math from functools import reduce from math import gcd def min_possible_value(arr): Returns the minimum possible value of the list after any number of operations. # If the array contains 1, the smallest element is already 1 if 1 in arr: return 1 # Compute the GCD of the entire list overall_gcd = reduce(gcd, arr) if overall_gcd == 1: return 1 # If overall gcd is greater than 1, apply the square root operation arr = [math.isqrt(x) for x in arr] if 1 in arr: return 1 # Recompute the GCD of the modified list overall_gcd = reduce(gcd, arr) return overall_gcd if overall_gcd <= 1 else 1 def minimum_possible_list(T, cases): results = [] for i in range(T): M = cases[i][0] arr = cases[i][1] results.append(min_possible_value(arr)) return results"},{"question":"You are given two integers a and b representing the start and end positions of a rope, respectively, as well as an integer d, the distance a mouse can travel in one leap. The rope is laid out linearly from a to b, and the mouse can start at any point on the rope but must travel exactly d distance in each leap. The goal is to determine the minimal number of leaps required for the mouse to travel from the start to the end of the rope. -----Input----- The first line contains three integers a, b, and d (0 le a < b le 10^9, 1 le d le 10^9), where a and b are the endpoints of the rope and d is the leap distance. -----Output----- In a single line, print the minimal number of leaps required for the mouse to travel from a to b. -----Examples----- Input 0 10 3 Output 4 Input 5 20 6 Output 3 Input 1 1000000000 999999 Output 1001 -----Note----- In the first example, the mouse needs to cover a distance of 10 - 0 = 10 units. Each leap covers 3 units, so the mouse requires at least 10 // 3 = 3 leaps, with a remainder of 1 unit. This remainder necessitates an additional leap, resulting in a total of 4 leaps. In the second example, the mouse needs to cover a distance of 20 - 5 = 15 units. Each leap covers 6 units, and 15 // 6 = 2 leaps with a remainder of 3 units. This remainder requires an additional leap, resulting in a total of 3 leaps. In the third example, the distance to cover is 1000000000 - 1 = 999999999 units. Each leap covers 999999 units, necessitating 999999999 // 999999 = 1000 leaps with a remainder of 999 units, requiring an additional leap for a total of 1001 leaps.","solution":"def minimal_leaps(a, b, d): Returns the minimal number of leaps required for the mouse to travel from a to b. distance = b - a leaps = distance // d if distance % d != 0: leaps += 1 return leaps"},{"question":"Task Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. An input string is guaranteed to be non-empty and follows the mapping: 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" The output list should be in lexicographical order. # Example ``` Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` # Note Implement a function `letterCombinations` that takes a single string argument and returns a list of strings.","solution":"def letterCombinations(digits): Given a string containing digits from 2-9 inclusive, returns all possible letter combinations that the number could represent. Parameters: digits (str): input string containing digits from 2-9 inclusive Returns: List[str]: list of possible letter combinations in lexicographical order if not digits: return [] mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Helper function to perform backtracking def backtrack(index, path): if index == len(digits): combinations.append(\'\'.join(path)) return possible_letters = mapping[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return sorted(combinations)"},{"question":"Write a function to find the longest palindrome in a given string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple palindromes of the same length, return the one that appears first in the string. Return the longest palindrome as a string.","solution":"def longest_palindrome(s): Returns the longest palindrome in the given string. def preprocess_string(s): return \'\'.join(c.lower() for c in s if c.isalnum()) def is_palindrome(subs): return subs == subs[::-1] s = preprocess_string(s) n = len(s) longest = \\"\\" for i in range(n): for j in range(i, n): subs = s[i:j+1] if is_palindrome(subs) and len(subs) > len(longest): longest = subs return longest"},{"question":"A company wants to aggregate daily sales data for a product across multiple stores. Each store logs its sales data as a list of integers, where each index represents a day, and the value at that index represents the sales for that day. The sales data for all stores is combined into a nested list, where each sublist contains the sales data for one store. For example, sales_data[1][3] would represent the sales from Store 2 on Day 4. Your task is to write a function that, given the nested list of sales data, returns a single list where each element is the total sales for that day across all stores. Function Signature: ```python def aggregate_sales(sales_data: List[List[int]]) -> List[int]: pass ``` # Input - A list of lists, `sales_data`, where each sublist contains sales data for a store. Each sublist is of the same length. - 1 ≤ len(sales_data) ≤ 100 (number of stores) - 1 ≤ len(sales_data[i]) ≤ 100 (length of the sales data for each store) - 0 ≤ sales_data[i][j] ≤ 10^4 (sales value for a store on a day) # Output - A list of integers where each element is the aggregate sales for that day across all stores. # Examples Example 1 ```python sales_data = [ [10, 20, 30], [5, 15, 25], [7, 14, 21] ] aggregate_sales(sales_data) ``` **Output** ```python [22, 49, 76] ``` Example 2 ```python sales_data = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] aggregate_sales(sales_data) ``` **Output** ```python [0, 0, 0] ``` # Note In Example 1, the total sales for Day 1 are 10 + 5 + 7 = 22, for Day 2 are 20 + 15 + 14 = 49, and for Day 3 are 30 + 25 + 21 = 76. In Example 2, all sales values are 0 for all days, resulting in the aggregate sales being 0 for every day.","solution":"from typing import List def aggregate_sales(sales_data: List[List[int]]) -> List[int]: if not sales_data: return [] num_days = len(sales_data[0]) aggregated_data = [0] * num_days for store_sales in sales_data: for day in range(num_days): aggregated_data[day] += store_sales[day] return aggregated_data"},{"question":"In your class, you have started learning about [geometric progression](https://en.wikipedia.org/wiki/Geometric_progression). Given that you are also a programmer, you have decided to write a function that will return the first `n` elements of the sequence with the given common ratio `r` and first element `a`. Note that the ratio may be one! The result should be a string of numbers, separated by a comma and a space. Example ```python # first element: 2, ratio: 3, how many: 4 geometric_sequence_elements(2, 3, 4) == \\"2, 6, 18, 54\\" ```","solution":"def geometric_sequence_elements(a, r, n): Returns the first n elements of a geometric sequence with the given first element a and common ratio r. Args: - a (int): the first element of the sequence - r (int): the common ratio of the sequence - n (int): the number of elements in the sequence Returns: - str: a string of the first n elements, separated by a comma and a space elements = [a * r ** i for i in range(n)] return \', \'.join(map(str, elements))"},{"question":"Problem Statement: A city has a new high-speed rollercoaster that passes through several thrilling twists and turns, each located at specific points in the city. Alex and Jamie decide to record the altitudes of the rollercoaster at each point to determine who felt the most extreme change in altitude between any two consecutive points. Tracey, their friend, wants to know which of them recorded the maximum change in altitude. She requests your help to determine whether Alex or Jamie recorded the highest change in altitude. Input: The first line contains an integer M, the number of data points. The second line contains M space-separated integers representing the altitudes recorded by Alex. The third line contains M space-separated integers representing the altitudes recorded by Jamie. Output: Print whether \\"Alex\\" or \\"Jamie\\" recorded the maximum change in altitude between any two consecutive points. If both recorded the same maximum change, print \\"Tie\\". Output the absolute value of the maximum change in altitude between any two consecutive points on a new line. Constraints: 2 ≤ M ≤ 10^6 -10^6 ≤ altitude values ≤ 10^6 SAMPLE INPUT 5 1 3 7 4 2 1 6 2 8 3 SAMPLE OUTPUT Jamie 6 Explanation Max absolute change of altitude for Alex = 3 (|7-4|) Max absolute change of altitude for Jamie = 6 (|6-2|) Hence, Jamie recorded the maximum change in altitude.","solution":"def max_altitude_change(M, alex_altitudes, jamie_altitudes): max_change_alex = max(abs(alex_altitudes[i] - alex_altitudes[i+1]) for i in range(M-1)) max_change_jamie = max(abs(jamie_altitudes[i] - jamie_altitudes[i+1]) for i in range(M-1)) if max_change_alex > max_change_jamie: return \\"Alex\\", max_change_alex elif max_change_jamie > max_change_alex: return \\"Jamie\\", max_change_jamie else: return \\"Tie\\", max_change_alex # Example usage: M = 5 alex_altitudes = [1, 3, 7, 4, 2] jamie_altitudes = [1, 6, 2, 8, 3] result = max_altitude_change(M, alex_altitudes, jamie_altitudes) print(result)"},{"question":"A maze is defined by a grid consisting of cells, each of which may be empty or contain an obstacle. You start at the top-left corner of the grid and need to get to the bottom-right corner. You can move right, left, up, or down, but cannot move through obstacles. Write a program to check if there is a path from the top-left corner to the bottom-right corner. If there is a path, output \\"YES\\", otherwise output \\"NO\\". The input is given in the following format: n m Here, n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) are the number of rows and columns in the grid respectively. Following that, there are n lines each containing m characters: - \'.\' indicates an empty cell. - \'#\' indicates an obstacle. Example: Input: 4 4 .#.. .# ..#. .... Output: YES Input: 4 4 .#.. .# .. .... Output: NO","solution":"def is_path_exists(grid, n, m): Returns \'YES\' if there is a path from the top-left corner to the bottom-right corner through the open cells, and \'NO\' otherwise. from collections import deque # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(): queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False if grid[0][0] == \'#\' or grid[n - 1][m - 1] == \'#\': return \\"NO\\" return \\"YES\\" if bfs() else \\"NO\\" # Example usage: example_grid_1 = [\\"....\\", \\".#..\\", \\".#\\", \\"....\\"] print(is_path_exists(example_grid_1, 4, 4)) # Output: YES example_grid_2 = [\\"....\\", \\".#..\\", \\".#\\", \\"..\\"] print(is_path_exists(example_grid_2, 4, 4)) # Output: NO"},{"question":"You are given a list of integers representing the heights of a series of mountains. Each element in the list corresponds to a mountain\'s height. Create a function that finds the highest peak in the list. A peak is defined as a mountain height that is not lower than its immediate neighbors. The first and last elements of the list are considered peaks if they are not lower than the element next to them. Write a function to return the height of the tallest peak. If multiple peaks have the highest height, return the height of any one of them. ```python mountains = [2, 3, 4, 3, 2, 5, 2, 4, 6, 4, 3, 2] # The peaks in this list are 4, 5, 6 # The highest peak is 6 highest_peak(mountains) # returns 6 ``` Info: - Input is garantueed to be a list of at least one integer. - Elements in the list will be non-negative integers.","solution":"def highest_peak(mountains): Returns the height of the highest peak in the list of mountains. A peak is defined as an element which is not lower than its neighbors. # The special case when mountains list contains only one element if len(mountains) == 1: return mountains[0] n = len(mountains) peaks = [] # Check the first element if mountains[0] >= mountains[1]: peaks.append(mountains[0]) # Check the middle elements for i in range(1, n-1): if mountains[i] >= mountains[i-1] and mountains[i] >= mountains[i+1]: peaks.append(mountains[i]) # Check the last element if mountains[n-1] >= mountains[n-2]: peaks.append(mountains[n-1]) # Return the maximum element from peaks list return max(peaks)"},{"question":"You have been given a list of students and their marks in three subjects: Mathematics, Science, and Language. Your task is to determine the overall topper based on their average marks. --- Input Format --- - The first line contains a single integer T, the number of students. - For each of the next T lines, there is a string S (student\'s name) and three space-separated integers M, N, and L; representing the marks in Mathematics, Science, and Language respectively. --- Output Format --- For each student, output their name and their average marks (rounded to the nearest integer). In case of a tie in average marks, print the name of the student who appeared first in the input. --- Constraints --- 1 ≤ T ≤ 1000 0 ≤ M, N, L ≤ 100 --- Sample Input 1 --- 3 Alice 90 80 85 Bob 85 90 80 Charlie 90 80 85 --- Sample Output 1 --- Alice 85 Bob 85 Charlie 85 --- Sample Input 2 --- 5 John 50 60 70 Doe 100 90 80 Jane 60 70 80 Smith 50 50 50 Kim 80 85 90 --- Sample Output 2 --- John 60 Doe 90 Jane 70 Smith 50 Kim 85","solution":"def find_topper(students_data): result = [] # Iterate through each student data in the provided input for student in students_data: name, marks = student[0], student[1:] average_mark = round(sum(marks) / len(marks)) result.append((name, average_mark)) return result"},{"question":"Given a string `S` of length `n`, you need to find the number of distinct substrings of `S`. A substring is a contiguous sequence of characters within a string. If two substrings have the same characters but in different positions, they are counted as different substrings. # Input The input consists of a single line containing the string `S` (1 ≤ |S| ≤ 1000). # Output Output an integer which is the number of distinct substrings of the string `S`. # Example Input ``` ababc ``` Output ``` 12 ``` # Explanation The distinct substrings of the string \\"ababc\\" are: ``` \\"a\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"ababc\\", \\"b\\", \\"ba\\", \\"bab\\", \\"babc\\", \\"bc\\", \\"c\\", \\"abc\\" ``` Thus, the total number of distinct substrings is 12.","solution":"def count_distinct_substrings(S): Returns the number of distinct substrings of the string S. substrings = set() n = len(S) # Iterate through all possible substrings for i in range(n): for j in range(i + 1, n + 1): substrings.add(S[i:j]) return len(substrings)"},{"question":"A palindromic number is a number that remains the same when its digits are reversed. Given a number, determine whether it is a palindrome. Input Format: The input begins with number of test cases t in a single line. In each of the next t lines, there is a number n. Output Format: In each line print YES if the given number is a palindrome. Otherwise, print NO. t < 100000, 1 < n < 10^12 Example: There are 3 test cases here: 121, 12321, and 123. Input: 3 121 12321 123 Output: YES YES NO Explanation: Number of test cases t = 3 121 -> Reversed is 121. Since it is the same as the original number, we print YES. 12321 -> Reversed is 12321. Since it is the same as the original number, we print YES. 123 -> Reversed is 321. Since it is not the same as the original number, we print NO. SAMPLE INPUT 2 202 34543 SAMPLE OUTPUT YES YES","solution":"def is_palindromic_number(n): Determines if a given number is a palindrome. str_n = str(n) return str_n == str_n[::-1] def check_palindromic_numbers(t, numbers): Checks if each number in the list `numbers` is palindromic and returns results as a list. results = [] for number in numbers: if is_palindromic_number(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a mystical land, there is a game played with arrays where the players derive the \\"Power Value\\" of a subarray. The Power Value of a subarray is defined as the sum of all prime numbers within that segment. Given an array of non-negative integers and a number of queries, each query asks for the Power Value of a specific subarray. Can you help determine the Power Value for each queried subarray? **Input:** The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` space-separated integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^6) — the elements of the array. The third line contains an integer `m` (1 ≤ m ≤ 100,000) — the number of queries. Each of the next `m` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — indicating the bounds of the subarray. **Output:** Print `m` integers — the Power Values for the queries in the order they appear in the input. **Examples:** **Input:** ``` 5 1 2 3 4 5 3 1 5 2 4 3 3 ``` **Output:** ``` 10 5 3 ``` **Explanation:** - For the first query, the segment is `[1, 2, 3, 4, 5]`. The primes within this segment are `2, 3, 5` resulting in the Power Value `10`. - For the second query, the segment is `[2, 3, 4]`. The primes are `2, 3` resulting in the Power Value `5`. - For the third query, the segment is `[3]`. The prime in this segment is `3`, resulting in the Power Value `3`.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False # other even numbers are not prime for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def precompute_prime_sums(arr): n = len(arr) prime_sums = [0] * (n + 1) for i in range(n): prime_sums[i + 1] = prime_sums[i] if is_prime(arr[i]): prime_sums[i + 1] += arr[i] return prime_sums def power_value(arr, queries): prime_sums = precompute_prime_sums(arr) results = [] for l, r in queries: results.append(prime_sums[r] - prime_sums[l - 1]) return results"},{"question":"Task: You have to write a function `alternate_case` which takes a string as input and returns a new string with the case of each letter swapped (i.e., uppercase becomes lowercase, and vice versa). # Rules/Note: - The input string can contain letters, digits, and special characters. - Only the case of alphabetic characters should be swapped; other characters should remain unchanged. - An empty string should return an empty string. # Examples: + alternate_case(\\"Hello World\\"): \\"hELLO wORLD\\" * alternate_case(\\"1234!@#\\"): \\"1234!@#\\" * alternate_case(\\"aBcDeF123\\"): \\"AbCdEf123\\"","solution":"def alternate_case(s): Returns a new string with the case of each letter in the input string s swapped. return \'\'.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Write a program to implement a Queue using Linked List. Your task is to use the class as shown in the comments in the code editor and complete the functions enqueue() and dequeue() to implement a queue. Example 1: Input: enqueue(1) enqueue(2) dequeue() enqueue(3) dequeue() Output: 1, 2 Explanation: enqueue(1) the queue will be {1} enqueue(2) the queue will be {1, 2} dequeue() dequeued element will be 1, the queue will be {2} enqueue(3) the queue will be {2, 3} dequeue() dequeued element will be 2 Example 2: Input: dequeue() enqueue(5) enqueue(6) dequeue() Output: -1, 5 Your Task: You are required to complete two methods enqueue() and dequeue(). The enqueue() method takes one argument, an integer \'x\' to be added to the queue and dequeue() which returns an integer from the front and removes it from the queue. If the queue is empty then return -1 from the dequeue() method. Expected Time Complexity: O(1) for both enqueue() and dequeue(). Expected Auxiliary Space: O(1) for both enqueue() and dequeue(). Constraints: 1 <= Q <= 100 1 <= x <= 100","solution":"class Node: def __init__(self, data): self.data = data self.next = None class MyQueue: def __init__(self): self.front = None self.rear = None def enqueue(self, x): new_node = Node(x) if self.rear is None: self.front = self.rear = new_node return self.rear.next = new_node self.rear = new_node def dequeue(self): if self.front is None: return -1 temp = self.front self.front = temp.next if self.front is None: self.rear = None return temp.data"},{"question":"Write a program that evaluates and simplifies mathematical expressions involving fractions. Each expression will be composed of positive integers, fractions, and the four basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/). Fractions will be represented as \\"numerator/denominator\\". For example, the expression \\"3/4 + 2/3\\" should be simplified to its lowest terms, resulting in \\"17/12\\". If any division by zero is attempted, the program should return \\"undefined\\" for that expression. Input The input consists of multiple datasets. The end of the input is indicated by a single line containing \\"0\\". Each dataset is given in a single line: expression An expression will contain positive integers, fractions, and the four basic arithmetic operations. Each expression will not exceed 100 characters in length. Output For each dataset, print the simplified result of the expression. Example Input 3/4 + 2/3 5/6 * 3/4 1/2 + 3 0 Output 17/12 5/8 7/2","solution":"from fractions import Fraction import re def evaluate_expression(expression): Evaluate and simplify the mathematical expression containing fractions and basic arithmetic operations. Params: - expression (str): The mathematical expression as a string. Returns: - str: The simplified result in fraction form or \\"undefined\\" if there is a division by zero. try: # Replace fractions with Fraction objects def replace_fraction(match): return f\'Fraction({match.group(1)}, {match.group(2)})\' expression = re.sub(r\'(d+)/(d+)\', replace_fraction, expression) # Use try-except to catch division by zero try: # Evaluate the expression result = eval(expression) # If result is a Fraction, convert it to string in its lowest terms if isinstance(result, Fraction): return str(result) else: return str(Fraction(result)) except ZeroDivisionError: return \\"undefined\\" except Exception as e: return \\"undefined\\" def main(input_lines): results = [] for line in input_lines: line = line.strip() if line == \\"0\\": break results.append(evaluate_expression(line)) return results"},{"question":"Design a function that merges two sorted arrays into a single sorted array. You are given two sorted arrays (in ascending order), and you need to merge them into a single sorted array in O(n) time complexity. Input: The function will receive two arguments in the form of two lists: 1. `arr1` - A sorted list of integers. 2. `arr2` - A sorted list of integers. Output: The function should return a single list containing all the elements from `arr1` and `arr2` in a sorted order. User Task: The task is to complete the `mergeArrays` function which takes two arguments: arr1 and arr2, and returns a sorted list containing elements of both arrays. Constraints: 1 <= len(arr1), len(arr2) <= 200 -1000 <= arr1[i], arr2[i] <= 1000 Example: Input: arr1 = [1, 3, 5] arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Explanation: The merged array of [1, 3, 5] and [2, 4, 6] will be [1, 2, 3, 4, 5, 6].","solution":"def mergeArrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): The first sorted list of integers. arr2 (list): The second sorted list of integers. Returns: list: A sorted list containing all elements from arr1 and arr2. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"A software development company wants to parallelize their processing tasks to speed up execution times. They have multiple servers available and want to distribute tasks such that the maximum load on any server is minimized. The tasks have varied execution times, and each server can handle any number of tasks. You are given the number of servers and an array denoting the processing time for each task. Your task is to implement an algorithm that distributes the tasks to the servers and outputs the minimized maximum processing time any server will get. Input format: - The first line contains two integers S and N, the number of servers and the number of tasks respectively. - The next line contains N integers where each integer Ti represents the processing time of the i-th task. Output format: - Output a single integer, the minimized maximum processing time of any server. Constraints: - 1 <= S <= 100 (number of servers) - 1 <= N <= 1000 (number of tasks) - 1 <= Ti <= 100 (processing time for each task) Sample Input: 4 6 10 20 30 40 50 60 Sample Output: 60 Explanation: - One optimal distribution would be: - Server 1: [10, 50] -> total = 60 - Server 2: [20, 40] -> total = 60 - Server 3: [30] -> total = 30 - Server 4: [60] -> total = 60 Here, the maximum processing time any server gets is minimized to 60.","solution":"def minimize_max_load(S, N, tasks): def can_distribute(max_load): server_loads = [0] * S for task in tasks: server_loads.sort() if server_loads[0] + task > max_load: return False server_loads[0] += task return True tasks.sort(reverse=True) low, high = max(tasks), sum(tasks) while low < high: mid = (low + high) // 2 if can_distribute(mid): high = mid else: low = mid + 1 return low"},{"question":"Given a grid of size N x M filled with integers. You need to find the sum of the minimum values from each row, and then determine if this sum is even or odd. The task is to implement a function that takes a grid as input and outputs \\"Even\\" if the sum is even and \\"Odd\\" if the sum is odd. **Constraints:** * 1 ≤ N, M ≤ 100 * -10^9 ≤ grid[i][j] ≤ 10^9 **Function signature:** ```python def sum_of_min_values(grid: List[List[int]]) -> str: pass ``` **Input:** * The first line contains two integers N and M. * Each of the next N lines contains M integers representing a row of the grid. **Output:** * A single line: either \\"Even\\" or \\"Odd\\". **Examples:** **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` Even ``` **Input:** ``` 2 2 -1 -2 -3 -4 ``` **Output:** ``` Odd ``` **Explanation:** In the first example, the minimum values from each row are [1, 4, 7]. Summing these gives 12, which is even. In the second example, the minimum values from each row are [-2, -4]. Summing these gives -6, which is even.","solution":"def sum_of_min_values(grid): Given a grid of size N x M filled with integers, find the sum of the minimum values from each row, and then determine if this sum is even or odd. Args: grid (List[List[int]]): The grid of integers. Returns: str: \\"Even\\" if the sum of the minimum values is even, \\"Odd\\" if it is odd. sum_of_mins = sum(min(row) for row in grid) return \\"Even\\" if sum_of_mins % 2 == 0 else \\"Odd\\""},{"question":"You are given a list of strings representing web page URLs visited by a user in chronological order. Some URLs may be repeated. Your task is to identify and print the first unique URL that was visited only once. Function Signature def find_first_unique_URL(urls: List[str]) -> str: Input Format - A list of strings, urls, where each string represents a URL. The list contains between 1 and 1000 elements. Output Format - A single string representing the first unique URL. Constraints - 1 ≤ len(urls) ≤ 1000 Example Input [\'google.com\', \'facebook.com\', \'google.com\', \'youtube.com\', \'yahoo.com\', \'youtube.com\', \'amazon.com\'] Output \'facebook.com\' Explanation - The first unique URL in the list is \'facebook.com\' as it is the first URL that appears only once in the list. - \'google.com\' and \'youtube.com\' both appear more than once, so they are not considered unique.","solution":"from typing import List def find_first_unique_URL(urls: List[str]) -> str: Returns the first unique URL from the list of URLs. url_count = {} # Count occurrences of each URL for url in urls: if url in url_count: url_count[url] += 1 else: url_count[url] = 1 # Find the first URL that appears only once for url in urls: if url_count[url] == 1: return url # If no unique URL is found (though the problem ensures at least one unique URL) return \\"\\""},{"question":"# Reversing Words in a String Given a string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. **Output:** A string of the words in reverse order concatenated by a single space. **Example:** ``` Input: \\"the sky is blue\\" Output: \\"blue is sky the\\" Input: \\" hello world \\" Output: \\"world hello\\" Input: \\"a good example\\" Output: \\"example good a\\" Input: \\" Bob Loves Alice \\" Output: \\"Alice Loves Bob\\" Input: \\"Alice does not even like bob\\" Output: \\"bob like even not does Alice\\" ``` **Note:** - A word is any sequence of characters without spaces. - Multiple spaces between words and leading/trailing spaces should be reduced to a single space.","solution":"def reverse_words(s): Reverses the order of words in a string s. Args: s (str): the input string. Returns: str: a string of the words in reverse order. words = s.strip().split() return \' \'.join(reversed(words))"},{"question":"You are given a list of integers representing the heights of students standing in a line for a class photo. Each student either sits or stands. A student must sit if they are shorter than the student directly in front of them, otherwise, they can stand. Each student can either see the class photo directly or through the gap above someone shorter in front of them. Your task is to determine the minimum number of students who need to sit to ensure that all students have a clear view of the photo. -----Input----- The first line contains an integer, n (1 ≤ n ≤ 10^5), indicating the number of students. The second line contains n integers h₁, h₂, ..., hₙ (1 ≤ hᵢ ≤ 10^5), representing the heights of the students in the order they are standing. -----Output----- Output a single integer — the minimum number of students that must sit. -----Examples----- Input 5 150 140 155 160 145 Output 2 Input 6 130 125 140 150 145 155 Output 2","solution":"def min_students_to_sit(n, heights): if not heights: return 0 sit_count = 0 max_height_so_far = heights[0] for i in range(1, n): if heights[i] < max_height_so_far: sit_count += 1 else: max_height_so_far = heights[i] return sit_count"},{"question":"You are given a grid of characters with dimensions MxN. Each cell in the grid contains a lowercase English letter. Your task is to determine the maximum length of a contiguous path in the grid where each letter along the path is different. You can move in four possible directions: up, down, left, or right. Input The first line of the input contains two integers M and N, denoting the number of rows and columns in the grid respectively. Each of the next M lines contains a string of length N, representing the rows of the grid. Output Print a single integer - the maximum length of a contiguous path with all unique letters. Constraints 1 ≤ M, N ≤ 20 \'a\' ≤ grid[i][j] ≤ \'z\' Example Input: 4 4 abcd efgh ijkl mnop Output: 16 Explanation In the example, the entire grid itself forms a contiguous path with all different characters. Hence, the maximum length of such a path is 16.","solution":"def max_unique_path_length(grid): M = len(grid) N = len(grid[0]) if M > 0 else 0 def dfs(x, y, visited): max_length = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] not in visited: max_length = max(max_length, 1 + dfs(nx, ny, visited | {grid[nx][ny]})) return max_length max_path = 0 for i in range(M): for j in range(N): max_path = max(max_path, dfs(i, j, {grid[i][j]})) return max_path"},{"question":"Math Course Enrollment System problem Sarah is a university administrator responsible for managing student enrollments in different math courses. She has several courses available, each with a specific requirement on the maximum number of students that can be enrolled. She also has a list of students each indicating their preferred courses in descending order of preference. Sarah needs to assign each student to their highest preferred course that still has available slots. If a student cannot be assigned to any of their preferred courses due to lack of available slots, they will not be assigned to any course. Help Sarah by writing a program that will take the maximum enrollment limit for each course and the list of students with their preferences. The program should output the number of students successfully assigned to each course. Input format The input starts with an integer M (1 ≤ M ≤ 100), representing the number of different courses available. The next line contains M integers, where the i-th integer indicates the maximum number of students that can be enrolled in the i-th course. The next line contains an integer S (1 ≤ S ≤ 1000), representing the number of students. The following S lines each contain a list of integers, where each line represents a student\'s course preferences in descending order. Each integer is between 1 and M, indicating courses by their index. Output format Output M lines, where the i-th line contains the number of students successfully assigned to the i-th course. Input example 1 3 2 1 1 4 1 2 3 2 1 3 3 1 1 3 Output example 1 2 1 1 Input example 2 4 1 2 1 3 5 1 2 3 4 4 3 2 1 3 1 2 2 4 3 1 1 2 4 Output example 2 1 2 1 1","solution":"def assign_students_to_courses(course_limits, students_preferences): Assigns students to their highest preferred courses that still have available slots. Args: course_limits (list of int): Maximum number of students for each course. students_preferences (list of list of int): Student preferences in descending order. Returns: list of int: Number of students assigned to each course. m = len(course_limits) assignments = [0] * m # to track the number of students assigned to each course for preferences in students_preferences: for preferred_course in preferences: course_index = preferred_course - 1 if assignments[course_index] < course_limits[course_index]: assignments[course_index] += 1 break return assignments"},{"question":"A security system requires a unique code that consists of exactly n characters. Each character is a digit (0-9) or a symbol from the set {A, B, C, D, E, F}. The system developer wants to analyze the entropy of the code by calculating the number of possible unique codes that can be formed. Given this can be a large number, you should output the result modulo (10^9 + 7). Your task is to write a program to calculate the total number of unique codes of length n, using the given characters. You know that each character in the code can be either a digit or one of the six symbols, giving you 16 possible characters (10 digits + 6 symbols) for each position in the code. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^5) — the length of the code. -----Output----- Print the total number of unique codes of length n modulo (10^9 + 7). -----Examples----- Input 3 Output 4096 Input 5 Output 1048576 Input 1 Output 16 -----Note----- In the first sample, the length of the code is 3. There are 16 possible characters for each of the 3 positions, hence the total number of unique codes of length 3 is 16^3 = 4096. In the second sample, the length of the code is 5. The total number of unique codes of length 5 is 16^5 = 1048576.","solution":"def unique_codes(n): MOD = 10**9 + 7 return pow(16, n, MOD)"},{"question":"Write a function that takes a string as input and returns True if it is a palindrome (a word, phrase, or sequence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization), and False otherwise. #Examples: ~~~if-not:bf ``` isPalindrome(\\"A man, a plan, a canal, Panama\\") should return true isPalindrome(\\"racecar\\") should return true isPalindrome(\\"hello\\") should return false isPalindrome(\\"Was it a car or a cat I saw?\\") should return true isPalindrome(\\"No \'x\' in Nixon\\") should return true ``` ~~~ ~~~if:bf ``` runBF(\\"A man, a plan, a canal, Panama0\\") should return true runBF(\\"racecar0\\") should return true runBF(\\"hello0\\") should return false runBF(\\"Was it a car or a cat I saw?0\\") should return true runBF(\\"No \'x\' in Nixon0\\") should return true ``` ~~~ #Input A string `0 < str < 1000`. The string will only contain printable ASCII characters. #Output A boolean value indicating whether the string is a palindrome or not.","solution":"def isPalindrome(s): Returns True if the input string is a palindrome (ignoring spaces, punctuation, and capitalization), and False otherwise. import re s = re.sub(\'[^A-Za-z0-9]\', \'\', s).lower() return s == s[::-1]"},{"question":"Given a list of distinct integers, we want to determine the kth smallest element in the list using the Quickselect algorithm. Quickselect is a selection algorithm to find the kth smallest element in an unordered list. It is related to the QuickSort sorting algorithm. Your task is to implement the Quickselect algorithm and use it to find the kth smallest element of the list. Input: - The first line contains two integers n and k, where n is the size of the list and k is the position (1-based) of the smallest element to find. - The second line contains n distinct integers representing the elements of the list. Output: - A single integer which is the kth smallest element in the list. Constraints: - 1 <= n <= 10^5 - 1 <= k <= n - The elements of the list are distinct integers within the range of a 32-bit signed integer. Example: Input: 6 3 7 10 4 3 20 15 Output: 7 Explanation: The sorted order of the list is [3, 4, 7, 10, 15, 20]. The 3rd smallest element in this list is 7.","solution":"def quickselect(arr, low, high, k): if low == high: return arr[low] pivot_index = partition(arr, low, high) if pivot_index == k: return arr[pivot_index] elif pivot_index < k: return quickselect(arr, pivot_index + 1, high, k) else: return quickselect(arr, low, pivot_index - 1, k) def partition(arr, low, high): pivot = arr[high] i = low for j in range(low, high): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[high] = arr[high], arr[i] return i def find_kth_smallest_element(n, k, arr): return quickselect(arr, 0, n - 1, k - 1)"},{"question":"Create a program that reads a list of items sold in a store and the quantity sold of each item, then outputs the total quantity sold for each unique item. Input A comma-separated pair of item name and quantity sold is given over multiple lines. The item name is a non-empty string without spaces, and the quantity sold is an integer between 1 and 100. The total number of items does not exceed 100. Output For each unique item, output the total quantity sold in the format \\"item_name: total_quantity\\". The items should be listed in the order they first appear in the input. Example Input apple,10 banana,5 apple,4 orange,7 banana,3 watermelon,8 orange,2 Output apple: 14 banana: 8 orange: 9 watermelon: 8","solution":"def calculate_total_quantities(input_list): Calculates the total quantities sold for each unique item. Args: input_list (list): A list of strings in the format of \\"item_name,quantity\\". Returns: dict: A dictionary where keys are item names and values are the total quantities sold. total_quantities = {} for item in input_list: name, quantity = item.split(\',\') quantity = int(quantity) if name in total_quantities: total_quantities[name] += quantity else: total_quantities[name] = quantity return total_quantities"},{"question":"You are developing a game where a player must navigate through a grid of numbers. At each step, the player may move right or down, but not diagonally. Each position in the grid contains a non-negative integer, and the player\'s objective is to minimize the sum of the numbers from the starting position (top-left corner) to the ending position (bottom-right corner). Create a function that helps determine the minimum cost path from the top-left corner to the bottom-right corner of the grid. Input: - The first line contains an integer `n`, the number of rows in the grid, and an integer `m`, the number of columns in the grid. - The next `n` lines each contain `m` integers separated by spaces representing the grid. Output: - Output a single integer representing the minimum sum path from the top-left corner to the bottom-right corner. Constraints: - 1 ≤ n, m ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum sum is 1 → 3 → 1 → 1 → 1 which equals 7.","solution":"def min_path_sum(grid): Given a grid of non-negative integers, returns the minimum sum path from the top-left corner to the bottom-right corner, only moving right or down. n = len(grid) m = len(grid[0]) # Initialize a dp table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the minimum sum path return dp[-1][-1] def parse_input(input_string): Parses the input string to extract the grid. lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"Sophie the sorcerer has just arrived at a magical library, where books are arranged in N rows. In each row, there are several magical spells, each with a certain power level P_i. Sophie can read an entire row of spells in one sitting, but there are two important rules: 1. She can only read one row per day. 2. She wants to distribute her reading such that she can read spells over a maximum number of days while always reading rows in non-decreasing order of their total power levels. Given the power levels of the spells in each row, help Sophie determine the maximum number of days she can spend in the magical library reading spells. Input Format - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of rows in the library. - The next N lines each contain M_i space-separated integers, representing the power levels of the spells in the ith row. Constraints - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq M_i leq 1000 - 1 leq P_i leq 10000 Output Format For each test case, print a single integer denoting the maximum number of days Sophie can spend reading spells in the library. Sample Input 2 4 10 20 15 5 25 5 18 4 6 7 4 11 3 8 8 5 7 7 Sample Output 3 2 Explanation For the first test case: - Day 1: Row 2 (sum = 35) - Day 2: Row 1 (sum = 45) - Day 3: Row 4 (sum = 22) or Row 3 (sum = 28) For the second test case: - Day 1: Row 2 (sum = 5) - Day 2: Row 3 (sum = 14)","solution":"def max_days_of_reading(T, test_cases): Calculate the maximum number of days Sophie can spend reading spells. Args: T: int, number of test cases. test_cases: list of tuples, each containing: - N: int, number of rows in the library. - rows: list of lists of int, representing the power levels of spells in each row. Returns: list of int, where each int is the maximum number of days for a corresponding test case. results = [] for case in test_cases: N, rows = case # Calculate the sum of spell powers in each row row_sums = [sum(row) for row in rows] # Sort the row sums in non-decreasing order row_sums.sort() # The maximum number of days Sophie can spend is simply the length of row_sums results.append(len(row_sums)) return results"},{"question":"Write a function to perform an in-place rotation of a square matrix by 90 degrees in the clockwise direction. Example 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Explanation: Rotating the matrix by 90 degrees in the clockwise direction results in the given output. Example 2: Input: matrix = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]] Output: [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]] Your Task: You are required to complete the function rotateMatrix() which takes a 2D list (matrix) and returns the matrix rotated 90 degrees in-place in the clockwise direction. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= matrix dimensions <= 20 -1000 <= matrix[i][j] <= 1000","solution":"def rotateMatrix(matrix): Rotates the given NxN matrix by 90 degrees in-place in the clockwise direction. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Polycarpus has a rectangular grid of size n rows and m columns which he uses to keep track of his lucky numbers collection. Each cell of the grid is initially empty. For each lucky number, he wants to put a mark in a cell that corresponds to the row and column of the number\'s decimal representation (without leading zeroes). Two cells (r1, c1) and (r2, c2) are considered adjacent if they share a side. Polycarpus wants to know the largest number of connected marks in his grid. Help him find the size of the largest connected component of marked cells after he marks all his undoubtedly lucky numbers. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 300) — the dimensions of Polycarpus\'s grid. The second integer is k (1 ≤ k ≤ min(n * m, 10^4)) — the number of undoubtedly lucky numbers. The next k lines each contain two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the row and column indices (1-based) where Polycarpus places each mark. -----Output----- Print a single integer that represents the size of the largest connected component of marks. -----Examples----- Input 3 3 3 1 1 2 1 1 2 Output 3 Input 5 5 5 1 1 1 2 1 3 4 4 5 5 Output 3","solution":"def largest_connected_component(n, m, k, marks): def dfs(r, c): stack = [(r, c)] count = 0 while stack: x, y = stack.pop() if (x, y) in visited: continue visited.add((x, y)) count += 1 for direction in directions: nx, ny = x + direction[0], y + direction[1] if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) in mark_set: stack.append((nx, ny)) return count directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] mark_set = set(marks) visited = set() largest = 0 for r, c in marks: if (r, c) not in visited: largest = max(largest, dfs(r, c)) return largest"},{"question":"Alice is playing a game with her friends where they form two teams by distributing players between them. Each player has a certain skill level represented by an integer. Alice wants to form the two teams in such a way that the absolute difference between the total skill levels of the two teams is minimized. Your task is to help Alice by determining the minimum possible absolute difference between the total skill levels of the two teams. -----Input----- The first line contains an integer t (1 leq t leq 10) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 20) — the number of players. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 100) — the skill levels of the players. -----Output----- For each test case, print a single integer — the minimum possible absolute difference between the total skill levels of the two teams. -----Examples----- Input 3 4 1 2 3 4 3 10 20 15 5 2 2 2 2 2 Output 0 5 2 -----Note----- In the first test case, one possible way to split the players is into two teams with skill levels 1+4 and 2+3, which results in a total skill level difference of 0. In the second test case, one possible way to split the players is into two teams with skill levels 10+10 and 20, which results in a total skill level difference of 5. In the third test case, no matter how you split the teams, the difference will always be 2.","solution":"from itertools import combinations def min_difference(t, testcases): def calculate_min_difference(n, skills): total_sum = sum(skills) half_sum = total_sum // 2 min_diff = float(\'inf\') for i in range(n//2 + 1): for comb in combinations(skills, i): current_sum = sum(comb) diff = abs(total_sum - 2 * current_sum) if diff < min_diff: min_diff = diff return min_diff results = [] for i in range(t): n = testcases[i][0] skills = testcases[i][1] results.append(calculate_min_difference(n, skills)) return results"},{"question":"In a futuristic city-state named Proglandia, the government has implemented a public transportation system powered by monorails. The monorail network consists of several interconnected stations and straight tracks uniting them. Each station is identified by a unique integer. The monorail system allows you to travel between two stations by following the tracks directly connecting them. Your task is to determine the shortest path from a starting station to an ending station using the given network of tracks. The network is represented as an undirected graph where stations are nodes and tracks are edges. Input The input has the following format: N M u1 v1 u2 v2 . . . where N is the number of stations (nodes), M is the number of tracks (edges) connecting these stations, and (ui, vi) represent a track directly connecting station ui and station vi. Following this, you are given two integers, start and end, indicating the starting station and the ending station, respectively. The input meets the following constraints: 0 < N ≤ 5000, 0 < M ≤ 10000, 1 ≤ ui, vi ≤ N, 1 ≤ start, end ≤ N. Output Print the shortest distance from the starting station to the ending station. If there is no path between the starting and ending station, print -1. Examples Input 6 7 1 2 2 3 2 4 3 4 4 5 5 6 3 6 1 6 Output 3 Input 5 5 1 2 1 3 2 4 3 4 4 5 1 5 Output 3 Input 4 2 1 2 3 4 1 3 Output -1","solution":"from collections import deque def shortest_path_monorail(num_stations, num_tracks, tracks, start, end): # Create the graph as an adjacency list graph = {i: [] for i in range(1, num_stations + 1)} for u, v in tracks: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(start, 0)]) # (current station, current distance) visited = set() visited.add(start) while queue: current_station, current_distance = queue.popleft() # If we have reached the end station if current_station == end: return current_distance # Visit adjacent stations for neighbor in graph[current_station]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + 1)) # If no path found return -1 # Wrapper to parse the input and call the solution function def find_shortest_path(input_str): lines = input_str.strip().split(\'n\') num_stations, num_tracks = map(int, lines[0].split()) tracks = [list(map(int, line.split())) for line in lines[1:num_tracks+1]] start, end = map(int, lines[num_tracks+1].split()) return shortest_path_monorail(num_stations, num_tracks, tracks, start, end)"},{"question":"Write a function that takes a string of text and returns a dictionary with the unique words as keys and the number of times each word appears in the text as values. For the purposes of this task, a word is defined as any sequence of characters separated by one or more spaces. You should ignore the case when counting the words (i.e., \'Word\' and \'word\' should be considered the same word). Assume that the input text does not contain any punctuation marks or special characters, only alphanumeric characters and spaces. Examples ``` input: \\"Hello hello world\\" output: {\\"hello\\": 2, \\"world\\": 1} input: \\"This is a test This is only a test\\" output: {\\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 2, \\"only\\": 1} input: \\"Python coding is fun Coding in python is even more fun\\" output: {\\"python\\": 2, \\"coding\\": 2, \\"is\\": 2, \\"fun\\": 2, \\"in\\": 1, \\"even\\": 1, \\"more\\": 1} ```","solution":"def word_count(text): Returns a dictionary with unique words as keys and the number of times each word appears in the text as values. Ignores case. text = text.lower() words = text.split() word_count_dict = {} for word in words: if word in word_count_dict: word_count_dict[word] += 1 else: word_count_dict[word] = 1 return word_count_dict"},{"question":"You are given a string `s` that represents a sentence, and a dictionary `word_dict` where keys are words and values are their synonyms presented as lists of words. Write a function `expand_sentence(s, word_dict)` that generates all possible sentences by replacing each word in the sentence with its synonyms. For example, given the string `s = \\"I like apples\\"` and dictionary `word_dict = {\\"like\\": [\\"love\\", \\"enjoy\\"], \\"apples\\": [\\"fruits\\", \\"oranges\\"]}`, the function would return a list of all possible sentences formed by replacing each dictionary word with its synonyms. For this input: ``` expand_sentence(\\"I like apples\\", {\\"like\\": [\\"love\\", \\"enjoy\\"], \\"apples\\": [\\"fruits\\", \\"oranges\\"]}) ``` The output should be: ``` [ \\"I like apples\\", \\"I like fruits\\", \\"I like oranges\\", \\"I love apples\\", \\"I love fruits\\", \\"I love oranges\\", \\"I enjoy apples\\", \\"I enjoy fruits\\", \\"I enjoy oranges\\" ] ``` # Function Signature ```python def expand_sentence(s: str, word_dict: dict) -> list: pass ``` # Constraints - The input string `s` contains only lower-case English letters and spaces. - Each word in the dictionary is guaranteed to be present in `s`. - Each list of synonyms contains at least one word. - The order of sentences in the output does not matter.","solution":"from itertools import product def expand_sentence(s: str, word_dict: dict) -> list: words = s.split() synonyms = [] for word in words: if word in word_dict: synonyms.append([word] + word_dict[word]) else: synonyms.append([word]) all_combinations = list(product(*synonyms)) return [\' \'.join(combo) for combo in all_combinations]"},{"question":"# Task You are given two strings `str1` and `str2` both of the same length, comprising only lowercase letters of the English alphabet. Your task is to determine if these strings can be made equal by swapping at most two characters within `str1`. # Example Given two strings: ```python can_be_equal_by_swapping(\'ab\', \'ba\') = True can_be_equal_by_swapping(\'ab\', \'ab\') = True can_be_equal_by_swapping(\'aaa\', \'bbb\') = False ``` *Note*: You are allowed to swap at most two characters. # Function Signature ```python def can_be_equal_by_swapping(str1: str, str2: str) -> bool: pass ``` # Input - `str1` and `str2`: Strings, both of equal length, containing only lowercase English letters (\'a\' to \'z\'). # Output - Return `True` if the strings can be made equal by swapping at most two characters within `str1`, otherwise return `False`. # Constraints - The length of `str1` and `str2` is between `1` and `10^5`. - Both strings contain only lowercase English letters.","solution":"def can_be_equal_by_swapping(str1: str, str2: str) -> bool: Determines if str1 can be made equal to str2 by swapping at most two characters within str1. # If the strings are already equal, return True if str1 == str2: return True # List to keep track of differing characters\' positions diff_indices = [] # Loop to find indices where characters differ for i in range(len(str1)): if str1[i] != str2[i]: diff_indices.append(i) # If there are exactly 2 places where they differ, check for a valid swap if len(diff_indices) == 2: i, j = diff_indices # Check if swapping makes the strings equal if str1[i] == str2[j] and str1[j] == str2[i]: return True # If there are not exactly 2 differences, or the swap doesn\'t make the strings equal, return False return False"},{"question":"A tech company wants to conduct reliable data transfers between two systems and asks you to write a program to determine the longest reliable data transfer path. A data transfer network is represented as an undirected graph where nodes represent devices, and edges represent the direct reliable connections between them. Your task is to find the length of the longest path using reliable connections. A path is defined as a sequence of vertices where each consecutive pair is connected by a direct edge. Input Format: - The first line contains an integer T (number of test cases). - For each test case: - The first line contains two integers n (number of nodes) and m (number of edges). - The next m lines each contain two integers u and v indicating there is a connection between node u and node v. Output Format: For each test case, print the length of the longest path in the network. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 2000 - 1 ≤ u, v ≤ n SAMPLE INPUT: 2 5 4 1 2 2 3 3 4 4 5 3 1 1 2 SAMPLE OUTPUT: 4 1 Explanation: In the first test case, one of the longest paths is 1-2-3-4-5, with a length of 4. In the second test case, the only connection is between 1 and 2, so the longest path length is 1.","solution":"def find_longest_path(graph, n): def dfs(node, visited): visited[node] = True max_depth = 0 for neighbor in graph[node]: if not visited[neighbor]: path_length = dfs(neighbor, visited) max_depth = max(max_depth, path_length) visited[node] = False return max_depth + 1 longest_path = 0 for node in range(1, n + 1): visited = [False] * (n + 1) longest_path = max(longest_path, dfs(node, visited)) return longest_path - 1 def longest_reliable_path(T, test_cases): results = [] for case in test_cases: n, m, edges = case graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) results.append(find_longest_path(graph, n)) return results # Read input def process_input(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): n = int(data[idx]) m = int(data[idx + 1]) idx += 2 edges = [] for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) idx += 2 edges.append((u, v)) test_cases.append((n, m, edges)) results = longest_reliable_path(T, test_cases) for result in results: print(result)"},{"question":"John is a passionate gardener who loves to arrange flowers in a unique way. To prepare for a flower exhibition, he decides to align the flowers in a single row. However, he wants the arrangement to be aesthetically pleasing and follows certain rules: 1. Each flower has a specific height. 2. No two adjacent flowers should have the same height. Given the number of flowers N and a list of their heights, John seeks to create the longest subsequence of flowers that adhere to these rules. Your task is to help John by finding the length of the longest valid subsequence. Input - The first line of the input contains a single integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of flowers. - The second line contains N space-separated integers representing the heights of the flowers. Output For each test case, print the length of the longest valid subsequence in a new line. Constraints: - 1 <= T <= 10 - 1 <= N <= 10^5 - 1 <= height_i <= 10^9 Example Input: 2 5 1 2 2 3 4 6 5 6 5 5 7 8 Output: 4 5 Explanation Testcase 1: Original heights: 1 2 2 3 4 One possible longest valid subsequence: 1 2 3 4 (all unique heights and no two adjacent are the same) Testcase 2: Original heights: 5 6 5 5 7 8 One possible longest valid subsequence: 5 6 5 7 8 (all unique heights and no two adjacent are the same)","solution":"def longest_valid_subsequence(T, cases): results = [] for N, heights in cases: if N == 1: results.append(1) continue longest_subseq_length = 1 previous_height = heights[0] for i in range(1, N): if heights[i] != previous_height: longest_subseq_length += 1 previous_height = heights[i] results.append(longest_subseq_length) return results"},{"question":"A company operates in several countries and wants to create a webpage to display the languages spoken in each country. The company has a list of countries, and for each country, a list of languages spoken there. The company wants to organize this information in a specific format for their webpage. Write a Python function called `create_webpage` that takes a dictionary where the keys are country names and the values are lists of languages spoken in those countries. Your function should return a string that contains the HTML content of the webpage. The content should be structured as follows: 1. Each country name should be an `<h2>` element. 2. The list of languages for each country should be an unordered list (`<ul>`), where each language is a list item (`<li>`). Ensure the output is structured alphabetically by country name and within each country, the languages should also be sorted alphabetically. Here is an example: Input: ```python { \\"USA\\": [\\"English\\", \\"Spanish\\"], \\"France\\": [\\"French\\"], \\"India\\": [\\"Hindi\\", \\"English\\", \\"Tamil\\"] } ``` Output: ```html <h2>France</h2> <ul> <li>French</li> </ul> <h2>India</h2> <ul> <li>English</li> <li>Hindi</li> <li>Tamil</li> </ul> <h2>USA</h2> <ul> <li>English</li> <li>Spanish</li> </ul> ``` # Constraints: - The dictionary will not be empty. - Each country will have at least one language listed. - All country names and languages are non-empty strings consisting of alphabetic characters only. Function Signature: ```python def create_webpage(languages_per_country: Dict[str, List[str]]) -> str: pass ```","solution":"def create_webpage(languages_per_country): Creates an HTML formatted string displaying countries and their respective languages. :param languages_per_country: A dictionary with country names as keys and lists of languages as values :return: A string containing the HTML content # Sort the country names alphabetically sorted_countries = sorted(languages_per_country.keys()) # Initialize an empty list to hold parts of the HTML html_parts = [] # Iterate over sorted countries for country in sorted_countries: html_parts.append(f\\"<h2>{country}</h2>\\") html_parts.append(\\"<ul>\\") # Sort the languages for the current country alphabetically sorted_languages = sorted(languages_per_country[country]) for language in sorted_languages: html_parts.append(f\\" <li>{language}</li>\\") html_parts.append(\\"</ul>\\") # Join all parts into a single string with new lines return \\"n\\".join(html_parts)"},{"question":"**Question: Create a Simple Zoo Management System** You are tasked with implementing a simple zoo management system to keep track of animals and their associated data. Design a class `Zoo` that can perform several operations. # Requirements 1. Animals can be added to the zoo with specific attributes. 2. Provide functionalities to query and update an animal\'s data. 3. Provide functionalities to remove an animal from the zoo. # Class `Zoo` Implement the following methods: `add_animal(name: str, species: str, age: int, gender: str) -> bool` - Adds a new animal to the zoo with the given `name`, `species`, `age`, and `gender`. - Return `True` if the animal was added successfully. - Return `False` if an animal with the given name already exists in the zoo. `get_animal(name: str) -> dict` - Returns a dictionary containing the `species`, `age`, and `gender` of the animal with the given `name`. - Return an empty dictionary if the animal does not exist. `update_animal(name: str, species: str = None, age: int = None, gender: str = None) -> bool` - Updates the specified fields of the animal with the given `name`. - Only update fields that are not `None`. - Return `True` if the update was successful. - Return `False` if the animal does not exist. `remove_animal(name: str) -> bool` - Removes the animal with the given `name` from the zoo. - Return `True` if the animal was removed successfully. - Return `False` if the animal does not exist. `list_animals() -> list` - Returns a list of names of all animals currently in the zoo, in alphabetical order. # Example usage: ```python zoo = Zoo() # Adding animals assert zoo.add_animal(\\"Leo\\", \\"Lion\\", 5, \\"Male\\") == True assert zoo.add_animal(\\"Mia\\", \\"Elephant\\", 8, \\"Female\\") == True assert zoo.add_animal(\\"Leo\\", \\"Lion\\", 6, \\"Male\\") == False # Name already exists # Retrieving animal data assert zoo.get_animal(\\"Leo\\") == {\\"species\\": \\"Lion\\", \\"age\\": 5, \\"gender\\": \\"Male\\"} assert zoo.get_animal(\\"Mia\\") == {\\"species\\": \\"Elephant\\", \\"age\\": 8, \\"gender\\": \\"Female\\"} assert zoo.get_animal(\\"Unknown\\") == {} # Updating animal data assert zoo.update_animal(\\"Leo\\", age=6) == True assert zoo.get_animal(\\"Leo\\") == {\\"species\\": \\"Lion\\", \\"age\\": 6, \\"gender\\": \\"Male\\"} assert zoo.update_animal(\\"Unknown\\", age=3) == False # Removing animals assert zoo.remove_animal(\\"Leo\\") == True assert zoo.remove_animal(\\"Leo\\") == False # Listing animals assert zoo.list_animals() == [\\"Mia\\"] # Adding another animal and listing again assert zoo.add_animal(\\"Zara\\", \\"Zebra\\", 4, \\"Female\\") == True assert zoo.list_animals() == [\\"Mia\\", \\"Zara\\"] # Updating multiple fields assert zoo.update_animal(\\"Mia\\", species=\\"Giraffe\\", age=9) == True assert zoo.get_animal(\\"Mia\\") == {\\"species\\": \\"Giraffe\\", \\"age\\": 9, \\"gender\\": \\"Female\\"} ``` # Constraints: - Each animal in the zoo is uniquely identified by its name. - Names are case-sensitive, e.g., \\"Leo\\" and \\"leo\\" are different animals. - Gender can only be \\"Male\\" or \\"Female\\". - The age of an animal is a non-negative integer.","solution":"class Zoo: def __init__(self): self.animals = {} def add_animal(self, name: str, species: str, age: int, gender: str) -> bool: if name in self.animals: return False self.animals[name] = {\'species\': species, \'age\': age, \'gender\': gender} return True def get_animal(self, name: str) -> dict: if name not in self.animals: return {} return self.animals[name] def update_animal(self, name: str, species: str = None, age: int = None, gender: str = None) -> bool: if name not in self.animals: return False if species: self.animals[name][\'species\'] = species if age is not None: self.animals[name][\'age\'] = age if gender: self.animals[name][\'gender\'] = gender return True def remove_animal(self, name: str) -> bool: if name not in self.animals: return False del self.animals[name] return True def list_animals(self) -> list: return sorted(self.animals.keys())"},{"question":"You are part of a team developing an encryption system for secure communication. To test your system, you need to simulate a basic version of the encryption and decryption process using a substitution cipher. In a substitution cipher, each letter of the plaintext is replaced by a letter with some fixed relationship to it. Here is the specific substitution cipher to be used for this task: - Each letter in the plaintext is shifted forward by `k` positions in the alphabet, where `k` is an integer provided as input. - For example, if `k = 3`, then \'a\' is replaced by \'d\', \'b\' is replaced by \'e\', \'c\' is replaced by \'f\', and so on. - The alphabet wraps around such that, for example, if `k = 3`, \'z\' would be replaced by \'c\'. The program should handle both encryption and decryption processes. # Input - The first line contains the letter \'e\' for encryption or \'d\' for decryption. - The second line contains an integer `k` (1 ≤ k ≤ 25), the shift value. - The third line contains the text to be encrypted or decrypted. The text will consist of lowercase English letters and spaces. # Output - The output should be a single line containing the encrypted or decrypted text. # Examples **Input:** ``` e 3 hello world ``` **Output:** ``` khoor zruog ``` **Input:** ``` d 3 khoor zruog ``` **Output:** ``` hello world ``` **Explanation:** In the first example, each letter in \\"hello world\\" is shifted forward by 3 positions in the alphabet, resulting in \\"khoor zruog\\". In the second example, each letter in \\"khoor zruog\\" is shifted backward by 3 positions in the alphabet, recovering the original text \\"hello world\\".","solution":"def substitution_cipher(operation, k, text): Encrypts or decrypts the given text using a substitution cipher with a shift of k. Args: - operation: \'e\' for encryption or \'d\' for decryption - k: the shift value (1 ≤ k ≤ 25) - text: the input text consisting of lowercase English letters and spaces Returns: - The encrypted or decrypted text result = [] if operation == \'d\': k = -k for char in text: if char.isalpha(): shift = (ord(char) - ord(\'a\') + k) % 26 new_char = chr(ord(\'a\') + shift) result.append(new_char) else: result.append(char) return \'\'.join(result)"},{"question":"An e-commerce company wants to optimize their warehouse operations to speed up order fulfillment. They have a set of distinct items that need to be packed into boxes. Each item has a specific weight. Each box has a maximum weight capacity and the goal is to use the minimum number of boxes to pack all items without exceeding the capacity of any box. Write a function that determines the minimum number of boxes required to pack all items. ------ Input ------ Your input consists of two parts: 1. An integer `t` (1 ≤ t ≤ 100), the number of test cases. 2. For each test case: - An integer `n` (1 ≤ n ≤ 1000), the number of items. - An integer `w` (1 ≤ w ≤ 1000), the maximum weight capacity of a box. - A list of `n` integers where each integer represents the weight of an item (1 ≤ weight ≤ 1000). ------ Output ------ For each test case, output a single integer which is the minimum number of boxes required to pack all items. ------ Sample Input ------ 2 5 10 1 8 3 5 12 4 20 15 10 5 7 ------ Sample Output ------ 3 2 ------ Explanation ------ In the first test case, the optimal packing is: - Box 1: items with weights 1, 8 (total weight = 9) - Box 2: item with weight 3 - Box 3: items with weights 5, 12 (total weight = 17, but 12 alone also fits into new box) In the second test case, the optimal packing is: - Box 1: items with weights 10, 5 (total weight = 15) - Box 2: items with weights 15, 7 (total weight = 22, but 15 alone also fits into new box)","solution":"def min_boxes(t, test_cases): Determines the minimum number of boxes required to pack all items for each test case. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple consists of: - n (int): Number of items - w (int): Maximum weight capacity of a box - items (list of int): List of item weights Returns: list of int: Minimum number of boxes required for each test case from heapq import heappush, heappop results = [] for n, w, items in test_cases: items.sort(reverse=True) # Sort items in descending order pq = [] # min-heap to manage current open boxes by their remaining capacities for item in items: placed = False for i in range(len(pq)): if pq[i] >= item: # Find if the item can fit into an existing box pq[i] -= item placed = True break if not placed: heappush(pq, w - item) # Create a new box with capacity (w - item) results.append(len(pq)) return results"},{"question":"You are given a network of cities connected by roads forming a tree structure. Each city has exactly one path to any other city. The goal is to place supply stations in some of the cities such that every city has access to a supply station either directly or through one of its direct neighbors. You need to calculate the minimum number of supply stations required to ensure that all cities have access to them. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of cities. Each of the next n-1 lines contains two integers u and v, representing a road connecting cities u and v (1 ≤ u, v ≤ n). -----Output----- Output a single integer representing the minimum number of supply stations required. -----Examples----- Input 4 1 2 2 3 3 4 Output 2 Input 5 1 2 1 3 3 4 3 5 Output 2 -----Note----- In the first example, a network of 4 cities connected linearly is given. The optimal solution is to place supply stations in cities 2 and 4. In the second example, placing supply stations in cities 1 and 4 would ensure that all cities have access to a supply station. Hints: Use dynamic programming on trees (tree DP) to solve this problem efficiently.","solution":"def min_supply_stations(n, roads): from collections import defaultdict # Edge case for a single city if n == 1: return 1 # Build adjacency list for the tree tree = defaultdict(list) for u, v in roads: tree[u].append(v) tree[v].append(u) # DP arrays supply_here = [0] * (n + 1) no_supply = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True supply_node = 1 # we place a station here no_supply_node = 0 # compute this if no station here for nei in tree[node]: if not visited[nei]: dfs(nei) supply_node += min(supply_here[nei], no_supply[nei]) no_supply_node += supply_here[nei] supply_here[node] = supply_node no_supply[node] = no_supply_node # Start DFS from node 1 (assuming nodes are 1-indexed) dfs(1) # Return the minimum of having a supply station at root or not return min(supply_here[1], no_supply[1])"},{"question":"Write a function `transpose_matrix` that takes a 2D list (matrix) of integers as input and returns the transposed matrix. The transpose of a matrix is obtained by swapping the rows and columns, so the element at position `[i][j]` in the original matrix becomes the element at position `[j][i]` in the transposed matrix. For example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The transpose of the matrix is: ```python [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Function signature: ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` Constraints: - You can assume that the matrix will always have at least one row and one column. - The original matrix can be square or rectangular. - Do not use any inbuilt matrix transposition functions from any libraries.","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: Returns the transpose of the given 2D matrix. # Get dimensions of the matrix rows = len(matrix) cols = len(matrix[0]) # Initialize transposed matrix with switched dimensions transposed = [[0]*rows for _ in range(cols)] # Fill in the transposed matrix for i in range(rows): for j in range(cols): transposed[j][i] = matrix[i][j] return transposed"},{"question":"A company has multiple projects, and each project has a certain budget. You are given the total budget of the company and a list representing the budget of each project. You need to determine the maximum number of projects that can be fully funded by the company without exceeding the total budget. ---Input--- The first line contains two integers: N (1 le N le 100000), the number of projects, and B (1 le B le 1000000000), the total budget of the company. The second line contains N integers, b_1, b_2, ..., b_N (1 le b_i le 1000000000), where b_i is the budget required for the i^{th} project. ---Output--- Output a single integer, the maximum number of projects that can be fully funded. ---Examples--- Sample Input 1: 5 50 10 20 30 40 50 Sample Output 1: 2 Sample Input 2: 3 60 25 20 15 Sample Output 2: 3","solution":"def max_projects(N, B, budgets): Returns the maximum number of projects that can be fully funded without exceeding the total budget. :param int N: The number of projects. :param int B: The total budget of the company. :param list budgets: The list of project budgets. :return: The maximum number of projects that can be fully funded. :rtype: int # Sort the budgets in ascending order budgets.sort() # Initialize the count of projects and the running total of spent budget count = 0 total_spent = 0 # Iterate through the sorted budgets for budget in budgets: if total_spent + budget <= B: total_spent += budget count += 1 else: break return count"},{"question":"Problem description You are given a list of integers representing the height of lavender bushes along a row and a target height. Your goal is to calculate the minimum number of bushes that need to be pruned to reduce their height to be at most the target height. Input First line contains number of test cases. For each test case, there are 2 lines: First line: number of lavender bushes and the target height separated by a space. Second line: height of each lavender bush, separated by space. Output For each test case, print the minimum number of bushes that need to be pruned, in a new line. Constraints SubTask 1 - 70 Points 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Height of Bush, Target Height ≤ 10^5 SubTask 2 - 30 Points 1 ≤ T ≤ 2 1 ≤ N ≤ 10^3 1 ≤ Height of Bush, Target Height ≤ 100 Example Input: 2 3 15 18 13 20 5 10 5 15 10 20 5 Output: 2 3 Explanation Test Case 1: Two bushes (first and third) need to be pruned to meet the target height of 15. Test Case 2: Three bushes (second, fourth, and fifth) need to be pruned to meet the target height of 10.","solution":"def min_bushes_to_prune(test_cases): results = [] for case in test_cases: N, target_height = case[\'meta\'] heights = case[\'heights\'] count = sum(1 for height in heights if height > target_height) results.append(count) return results"},{"question":"You have just survived a shipwreck on a deserted island. In order to signal for help, you and your fellow survivors have decided to light bonfires along the shoreline. However, there\'s a catch: you only have a limited number of matches, so you need to make sure that you can light all the bonfires with the fewest number of steps possible. Each bonfire is represented as a cell in an `n x m` grid, where `S` indicates your starting position, `F` indicates the bonfires, and `.` represents open space. You can move up, down, left, or right across the cells. Cells marked with `#` are impassable obstacles where you cannot walk. Your task is to determine the minimum number of steps required to light all the bonfires from the starting position. If it is not possible to light all the bonfires, your program should return `-1`. Input: The input consists of multiple test cases. Each test case starts with two integers, `n` and `m` (1 ≤ n, m ≤ 50), separated by a space, representing the dimensions of the grid. The following `n` lines contain `m` characters each, representing the grid. A grid is guaranteed to have exactly one `S` and at least one `F`. The input ends with a line containing two zeros separated by a space. Output: For each test case, output the minimum number of steps required to light all the bonfires from the starting position. If it is not possible to light all the bonfires, output `-1`. Example: Input: 3 3 S.F .#. ..F 4 4 S..F .#.. #.F# F..# 4 4 S.#F .#.# #..# F..# 0 0 Output: 4 7 -1 Explanation: In the first test case, you start at (0, 0), move to (0, 2), then move to (2, 2). In the second test case, you start at (0, 0), move to (0, 3), then move to (2, 3), and finally to (3, 0). In the third test case, it is not possible to reach all the bonfires from the starting position due to obstacles.","solution":"from collections import deque def min_steps_to_light_bonfires(grid): # Helper func to find the start and bonfire positions def find_positions(grid): start = None bonfires = [] for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'F\': bonfires.append((r, c)) return start, bonfires # Helper func to perform BFS from the start position def bfs(start, targets): visited = set() queue = deque([(start, 0)]) targets = set(targets) steps = 0 while queue: (r, c), step = queue.popleft() if (r, c) in visited: continue visited.add((r, c)) if (r, c) in targets: targets.remove((r, c)) if not targets: # All bonfires have been reached return step for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] != \\"#\\" and (nr, nc) not in visited: queue.append(((nr, nc), step + 1)) return -1 # If it\'s not possible to reach all bonfires start, bonfires = find_positions(grid) return bfs(start, bonfires) def process_input(input_data): lines = input_data.strip().split(\'n\') results = [] idx = 0 while idx < len(lines): n, m = map(int, lines[idx].split()) if n == 0 and m == 0: break grid = [list(lines[idx + j + 1]) for j in range(n)] result = min_steps_to_light_bonfires(grid) results.append(result) idx += n + 1 return results"},{"question":"Alice is planning her garden and wants to build a rock wall using stones of different weights. To make the wall stable, she wants to follow a specific rule. For a sequence of stones, the stability criterion is defined as follows: 1. The sequence is sorted in non-decreasing order. 2. If the number of stones is odd, the stability value is the weight of the middle stone. 3. If the number of stones is even, the stability value is the average (arithmetic mean) of the weights of the two middle stones. Alice wants to determine the maximum possible stability value of any subsequence of her stone collection. ------ Input ------ The first line of the input contains a single integer M denoting the number of stones. The second line contains M space-separated integers representing the weights of the stones. ------ Output ------ Print a single line containing the maximum possible stability value, formatted to six decimal places. ------ Constraints ------ 1 ≤ M ≤ 1000 1 ≤ text{weight of each stone} ≤ 10^{6} ------ Sample Input 1 ------ 6 3 1 4 1 5 9 ------ Sample Output 1 ------ 5.000000 ----- Explanation 1 ------ Example case 1: The sorted weights of the stones are [1, 1, 3, 4, 5, 9]. The maximum stability value is achieved by the subsequence [9], which gives a stability value of 9.000000.","solution":"def max_stability_value(M, weights): Returns the maximum possible stability value of any subsequence of stones. Parameters: M (int): Number of stones weights (list of int): Weights of the stones Returns: float: Maximum possible stability value formatted to six decimal places weights.sort() if M % 2 == 1: # If the number of stones is odd, find the middle stone. stability_value = weights[M // 2] else: # If the number of stones is even, find the average of the two middle stones. stability_value = (weights[(M // 2) - 1] + weights[M // 2]) / 2.0 return round(stability_value, 6) # Example usage (this line should not be part of the final solution module): # print(max_stability_value(6, [3, 1, 4, 1, 5, 9])) # Output: 5.000000"},{"question":"Calculate the Target. Input The first line contains an integer T, the number of test cases. The next T lines each contain a pair of integers, D and P. Output For each test case, output a single integer representing the minimum number of days required to meet or exceed the target production. Constraints 1 ≤ T ≤ 10^4 1 ≤ D ≤ 1000 1 ≤ P ≤ 1000 NOTE There is partial marking for this question. SAMPLE INPUT 3 20 50 10 200 30 90 SAMPLE OUTPUT 3 20 4","solution":"def calculate_target(T, cases): Calculate the minimum number of days required to meet or exceed the target production. :param T: An integer representing the number of test cases. :param cases: A list of tuples, each containing two integers D (target) and P (production per day). :return: A list of integers, each representing the minimum number of days for the corresponding test case. results = [] for D, P in cases: days = (D + P - 1) // P # This is equivalent to ceil(D / P) results.append(days) return results"},{"question":"Write a program that takes an integer N and outputs the sum of all prime numbers less than or equal to N. -----Input----- The first line contains a single integer N. -----Output----- A single integer that represents the sum of all prime numbers less than or equal to N. -----Constraints----- - 1 ≤ N ≤ 10^6 -----Example----- Input 10 Output 17","solution":"def sum_of_primes(N): Returns the sum of all prime numbers less than or equal to N. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0] = sieve[1] = False for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N + 1, start): sieve[multiple] = False return sum(i for i in range(2, N + 1) if sieve[i])"},{"question":"A group of highly skilled ninjas has a mission to infiltrate a heavily guarded fortress and retrieve a precious artifact. The fortress is constructed in an intricate pattern of rooms connected by one-way passages. The mission needs to be carefully planned to ensure the artifact is retrieved with minimum risk. Fortress structure is represented as a directed graph with `N` rooms and `M` passages. Each node in the graph represents a room, and each directed edge represents a one-way passage between rooms. The ninjas start at room 1 and the artifact is located in room N. Your task is to find the shortest path from room 1 to room N, ensuring the ninjas reach the artifact with minimum travel distance. If it is impossible to reach room N from room 1, return `-1`. Input The first line contains two integers, `N` (2 ≤ N ≤ 10^4) and `M` (1 ≤ M ≤ 5 * 10^4), denoting the number of rooms and passages, respectively. Each of the next `M` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^3), where `u` is the starting room of the passage, `v` is the ending room of the passage, and `w` is the travel distance of that passage. Output The first line should contain a single integer representing the length of the shortest path from room 1 to room N. If there is no such path, output `-1`. Example Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 Output 7 Note In the given graph, the shortest path from room 1 to room 5 is: 1 -> 2 (with weight 2) 2 -> 3 (with weight 1) 3 -> 5 (with weight 3) Thus, the total travel distance is 2 + 1 + 3 = 6.","solution":"import heapq import sys def shortest_path(N, M, passages): Finds the shortest path from room 1 to room N given the number of rooms N, number of passages M and the list of passages. graph = {i: [] for i in range(1, N+1)} for u, v, w in passages: graph[u].append((v, w)) # Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(1, N+1)} distances[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[N] if distances[N] != float(\'inf\') else -1"},{"question":"Serena is solving a puzzle involving strings. She is given a string S, which consists of lowercase English letters. Serena can choose any non-empty substring of S and move it to the start of the string to form a new string. She needs to do this operation exactly once. Serena wants to know the lexicographically smallest string she can achieve by performing this operation optimally. Given the string S, find the lexicographically smallest string possible after exactly one such move. Input The input consists of a single line containing the string S. Output Output the lexicographically smallest string Serena can achieve by performing the operation exactly once. Constraints 1 ≤ |S| ≤ 10^5 Examples Input programming Output ammingprogr Input abcdef Output abcdef","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string by moving exactly one non-empty substring to the start of the string. n = len(S) min_string = S for i in range(1, n): new_string = S[i:] + S[:i] if new_string < min_string: min_string = new_string return min_string"},{"question":"HackerMan\'s friend, CodeMaster, is developing a new puzzle game where players need to navigate a robot through a grid filled with obstacles. The grid is represented by a 2D array where each cell can either be empty (represented by 0) or contain an obstacle (represented by 1). The robot starts at the top-left corner of the grid (0, 0) and must reach the bottom-right corner ((n-1, m-1)). The robot can only move down or right at each step. Your task is to determine the number of distinct paths the robot can take to reach the target cell from the starting cell. Constraints 1 ≤ n, m ≤ 100 Each cell in the grid contains either 0 or 1. Input The first line contains two integers n and m, which are the dimensions of the grid. The following n lines each contain m integers, representing the grid. Output Print a single integer representing the number of distinct paths the robot can take to reach the bottom-right corner of the grid. If there is no path, print 0. Sample Explanation In the first example, there are no obstacles, so the robot can take 2 distinct paths. In the second example, the only obstacle prevents the robot from reaching the destination, so there are no possible paths. SAMPLE INPUT 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 2 SAMPLE INPUT 3 3 0 0 0 0 1 0 1 0 0 SAMPLE OUTPUT 0","solution":"def num_distinct_paths(grid): n = len(grid) m = len(grid[0]) # If the starting or ending cell is blocked, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize a 2D dp array to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage: # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # print(num_distinct_paths(grid)) # Output: 2"},{"question":"Here is your task. You are given a list of integers and you have to find the largest sum of a contiguous subarray where the subarray contains at least one number. INPUT First line contains the number of test cases T. Each test case contains two lines: the first line has an integer n (the number of integers in the list), and the second line contains n space-separated integers. OUTPUT For each test case, print the largest sum of the contiguous subarray. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^4 ≤ integer values in the list ≤ 10^4 SAMPLE INPUT 2 5 -2 1 -3 4 -1 2 1 -5 4 1 -1 SAMPLE OUTPUT 6 -1","solution":"def max_subarray_sum(arr): Function to find the maximum sum of a contiguous subarray using Kadane\'s algorithm. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_input(input_str): Processes the input string and returns the output for each test case. lines = input_str.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].strip().split())) results.append(max_subarray_sum(arr)) index += 2 return results def main(): import sys input_str = sys.stdin.read() results = process_input(input_str) for result in results: print(result)"},{"question":"Linda recently started working on a database management system and she is particularly interested in query optimization. She knows that one of the key aspects of query optimization is to understand how efficiently data can be queried from a database. To model this, she decided to experiment with a simplified scenario involving sequences of numbers. In her current experiment, sequences are defined by two operations: - `add x` which appends the number `x` to the end of the sequence. - `remove k` which removes the k-th number in the sequence, where k is an index starting at 1 for the first element. Given a series of operations, Linda wants to determine the final sequence of numbers after performing all the operations in the given order. Here is the problem statement: -----Input----- First line consists of an integer N, denoting the number of operations. The next N lines contain operations in the form: - `add x` where `x` is an integer. - `remove k` where `k` is an integer. -----Output----- Output a single line containing the final sequence of numbers separated by spaces. If the sequence is empty, output \\"empty\\". -----Constraints----- - 1 ≤ N ≤ 5000 - For `add x`, |x| ≤ 10^9 - For `remove k`, 1 ≤ k ≤ current length of the sequence -----Example----- Input: 6 add 5 add 3 add 10 remove 2 add 7 remove 1 Output: 10 7 In this example, the operations are performed as follows: 1. `add 5` -> sequence: [5] 2. `add 3` -> sequence: [5, 3] 3. `add 10` -> sequence: [5, 3, 10] 4. `remove 2` -> sequence: [5, 10] 5. `add 7` -> sequence: [5, 10, 7] 6. `remove 1` -> sequence: [10, 7] Hence, the final sequence is [10, 7].","solution":"def process_operations(N, operations): sequence = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": x = int(parts[1]) sequence.append(x) elif command == \\"remove\\": k = int(parts[1]) if 1 <= k <= len(sequence): sequence.pop(k - 1) return \\" \\".join(map(str, sequence)) if sequence else \\"empty\\""},{"question":"You are given a list of integers. Write a program that finds the longest subsequence (not necessarily contiguous) that is a palindrome. Input: The first line contains an integer N, representing the length of the list. The second line contains N space-separated integers representing the elements of the list. Output: Output the length of the longest palindromic subsequence. Constraints: 1 ≤ N ≤ 1000 Example Input 6 1 2 3 2 1 4 Output 5 Explanation: The longest palindromic subsequence is [1, 2, 3, 2, 1] which has a length of 5.","solution":"def longest_palindromic_subsequence(arr): n = len(arr) # Create a dp array initialized to 0 dp = [[0] * n for _ in range(n)] # Every single element is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Check all subsequences of length greater than 1 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if arr[i] == arr[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) # The longest palindromic subsequence length will be in dp[0][n-1] return dp[0][n-1]"},{"question":"Derek loves puzzles involving prime numbers. He recently came up with a new type of puzzle. Given an integer array `arr` of length `N`, he asks you to determine if there exists any subarray (contiguous part of the array) such that the sum of its elements is a prime number. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Write a function to solve Derek\'s puzzle. Function signature: `def check_prime_subarray(arr: List[int]) -> str:` # Input - `N`: Length of the array `arr`. (1 ≤ N ≤ 10^5) - `arr`: List of integers, guaranteed to be within the range [-1000, 1000]. # Output - Output \\"YES\\" if there exists a subarray whose sum is a prime number, otherwise output \\"NO\\". # Example Input ```python N = 5 arr = [2, 3, -5, 5, 6] ``` Output ```python YES ``` Explanation In the given example, the subarray `[2, 3]` sums to 5 which is a prime number. Therefore, the function returns \\"YES\\". Input ```python N = 3 arr = [4, 6, 8] ``` Output ```python NO ``` Explanation There is no subarray within the given array that sums to a prime number, so the function returns \\"NO\\". # Note - Consider edge cases, such as when the array has only one element. - Your solution should be optimized to handle the upper constraints.","solution":"from typing import List def is_prime(num: int) -> bool: Determines if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def check_prime_subarray(arr: List[int]) -> str: Checks if there exists any subarray whose sum is a prime number. N = len(arr) for i in range(N): current_sum = 0 for j in range(i, N): current_sum += arr[j] if is_prime(current_sum): return \\"YES\\" return \\"NO\\""},{"question":"You are given a string consisting of lowercase Latin letters and a number `n`. Your task is to determine the number of distinct substrings of length `n` that can be formed from the given string. Note that substrings are contiguous portions of the string. Input The first line contains a string `s` (1 ≤ |s| ≤ 10^5) — the string mentioned in the statement. The second line contains an integer `n` (1 ≤ n ≤ |s|) — the length of the substrings to be considered. Output Output a single integer — the number of distinct substrings of length `n`. Examples Input abacab 3 Output 4 Input aaaa 2 Output 1 Note For the first example, the distinct substrings of length 3 are: \\"aba\\", \\"bac\\", \\"aca\\", and \\"cab\\". Hence, the output is 4. For the second example, the only substring of length 2 is \\"aa\\". Hence, the output is 1.","solution":"def count_distinct_substrings(s, n): Returns the number of distinct substrings of length n. substrings = set() for i in range(len(s) - n + 1): substrings.add(s[i:i + n]) return len(substrings)"},{"question":"A company is organizing a programming contest and assigns each participant a unique ID in increasing order of their registration time, starting from 1. On the day of the contest, each participant logs in and enters their ID. However, due to a system malfunction, some participants\' IDs got jumbled, and IDs may appear multiple times. Your task is to identify the duplicated IDs. Provide the smallest duplicated ID, if more than one ID is duplicated, and output it. If no IDs are repeated, output -1. -----Input----- The first line contains an integer N (1 le N le 100000) denoting the number of IDs entered. The second line contains N space-separated integers A_1, A_2, ldots, A_N (1 le A_i le 100000) representing the IDs entered. -----Output----- Output the smallest duplicated ID if any IDs are repeated. If no IDs are repeated, output -1. -----Examples----- Sample Input 1: 5 1 2 3 2 4 Sample Output 1: 2 Sample Input 2: 6 1 3 4 2 6 5 Sample Output 2: -1 Sample Input 3: 8 4 5 6 7 4 7 6 8 Sample Output 3: 4","solution":"def find_smallest_duplicate_id(n, ids): Finds the smallest duplicated ID from the list of entered IDs. Parameters: n (int): The number of IDs entered. ids (list): List of integers representing the IDs. Returns: int: The smallest duplicated ID or -1 if no IDs are duplicated. id_count = {} for id in ids: if id in id_count: id_count[id] += 1 else: id_count[id] = 1 duplicates = [id for id, count in id_count.items() if count > 1] return min(duplicates) if duplicates else -1"},{"question":"# Longest Increasing Subsequence Write a function that takes an integer array as input and returns the length of the longest increasing subsequence within that array. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. In other words, given an array `nums`, find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. Constraints - The array\'s length will be at most `1000`. - The array\'s elements will be integers within the range `[-10^9, 10^9]`. Example longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) -> 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) -> 4 # Explanation: The longest increasing subsequence is [0, 1, 3] longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) -> 1 # Explanation: The longest increasing subsequence is [7]","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the array. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of books and their respective prices. You are to create a system that can answer the following type of queries efficiently: given a range of book ratings, determine the average price of books with ratings within that range. A book is represented by two integers: its rating and its price. Queries are given in the form of two integers: the start and end of the range of ratings. You are to answer multiple queries independently. -----Input----- The first line contains two integers n (1 le n le 1000) — the number of books and q (1 le q le 100) — the number of queries. Each of the next n lines contains two integers r_i and p_i (1 le r_i le 100 and 1 le p_i le 1000) — the rating and the price of the i-th book. Each of the next q lines contains two integers a_j and b_j (1 le a_j le b_j le 100) — the starting and ending rating for the j-th query. -----Output----- For each query, print the average price of books whose ratings lie between a_j and b_j (both inclusive), rounded to two decimal places. If there are no books in the given range, print \\"0.00\\". -----Example----- Input 5 3 10 100 20 200 30 300 40 400 50 500 15 35 10 50 5 25 Output 250.00 300.00 150.00 -----Note----- In the first query, the books with ratings between 15 and 35 are the second and third books with prices 200 and 300, respectively. The average price is (200 + 300) / 2 = 250.00. In the second query, all five books fall within the rating range and their average price is (100 + 200 + 300 + 400 + 500) / 5 = 300.00. In the third query, only the first two books fall within the rating range and their average price is (100 + 200) / 2 = 150.00.","solution":"def average_book_prices(n, q, books, queries): results = [] for a, b in queries: total_price = 0 count = 0 for r, p in books: if a <= r <= b: total_price += p count += 1 if count == 0: results.append(\\"0.00\\") else: average_price = total_price / count results.append(f\\"{average_price:.2f}\\") return results"},{"question":"You are given an array a of n integers. An operation is defined as selecting a non-empty subarray of a and adding 1 to each element in that subarray. Find the minimum number of operations required to make all elements of the array equal. -----Input----- The first line contains a single integer n (1 leq n leq 100) — the length of the array a. The second line contains n space-separated integers a_1,a_2,ldots,a_n (1 leq a_i leq 100) — the elements of the array a. -----Output----- Print the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 5 1 2 3 4 5 4 10 10 10 10 6 4 4 4 4 4 4 3 1 1 2 Output 4 0 0 1 -----Note----- In the first case, one of the optimal ways would be: - Add 1 to the subarray [1, 2, 3, 4, 5] four times to make all elements equal to 5. In the second case, no operation is needed as all elements are already equal. In the third case, no operation is needed as all elements are already equal. In the fourth case, add 1 to the subarray [1, 1, 2] one time to make all elements equal to 2.","solution":"def min_operations_to_equalize_array(n, a): Returns the minimum number of operations required to make all elements of the array equal. Args: n : int : the length of the array a : List[int] : the elements of the array Returns: int : the minimum number of operations required # The number of operations required is the difference between the maximum value and the minimum value in the array. return max(a) - min(a)"},{"question":"In a given list of numbers, the mode is the value that appears most frequently. If multiple values have the same highest frequency, the lowest value among them is considered the mode. Your task is to find the mode of a list of integers. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer n, followed by n space-separated integers. Output For each test case, output the mode of the list in a new line. Constraints 1 <= T <= 100 1 <= n <= 1000 -10^3 <= integers <= 10^3 Example Input: 2 5 1 2 2 3 3 6 4 5 6 5 6 6 Output: 2 6","solution":"from collections import Counter def find_mode(numbers): Given a list of numbers, returns the mode. If there are multiple modes, returns the smallest one. number_counts = Counter(numbers) max_frequency = max(number_counts.values()) # Find the numbers with the max frequency modes = [num for num, freq in number_counts.items() if freq == max_frequency] # Return the smallest number among the modes return min(modes) def process_test_cases(T, test_cases): results = [] for case in test_cases: _, *numbers = case results.append(find_mode(numbers)) return results"},{"question":"Write a program that simulates the behavior of a vending machine. The vending machine can dispense different items, but it can also run out of stock. The machine accepts certain denominations of coins, and calculates the change to give back, if any. The denominations accepted by the vending machine are 1, 5, 10, and 25 cents. The vending machine has the following items and their corresponding prices: - Soda: 45 cents - Chips: 35 cents - Water: 20 cents - Candy: 15 cents The vending machine starts with the following stock: - Soda: 5 - Chips: 5 - Water: 5 - Candy: 5 Your task is to write a program that simulates buying an item from the vending machine. Given the item to buy and the amount of money inserted, the program should output the change or indicate if the machine ran out of stock. Input The input consists of two parts: 1. A single line containing the item to buy, which is one of \\"Soda\\", \\"Chips\\", \\"Water\\", or \\"Candy\\". 2. A single line containing an integer n (1 ≤ n ≤ 100), the amount of money inserted into the machine. Output Print the change to be given back if the purchase is successful. If the machine is out of stock for the requested item, print \\"Out of stock\\". Examples Input Soda 50 Output 5 Input Water 20 Output 0 Input Chips 30 Output Out of stock (if Chips are not available) Input Candy 10 Output Out of stock (if Candy are not available)","solution":"class VendingMachine: def __init__(self): self.stock = { \\"Soda\\": 5, \\"Chips\\": 5, \\"Water\\": 5, \\"Candy\\": 5 } self.prices = { \\"Soda\\": 45, \\"Chips\\": 35, \\"Water\\": 20, \\"Candy\\": 15 } def buy_item(self, item, money_inserted): if self.stock[item] == 0: return \\"Out of stock\\" if money_inserted < self.prices[item]: return \\"Not enough money\\" self.stock[item] -= 1 return money_inserted - self.prices[item] # Instance of the VendingMachine vending_machine = VendingMachine() def simulate_vending_machine(input_item, input_money): result = vending_machine.buy_item(input_item, input_money) return result"},{"question":"Yuko is a robotics engineer working on a new robot prototype. The robot navigates a rectangular grid of size M x M, where the top-left corner is (1, 1) and the bottom-right corner is (M, M). The robot starts at position (R_start, C_start) and follows a list of commands to move to different cells in the grid: * `U` - Move one cell up (x decreases by 1) * `D` - Move one cell down (x increases by 1) * `L` - Move one cell left (y decreases by 1) * `R` - Move one cell right (y increases by 1) The robot stops when it reaches the boundaries of the grid or when all commands are executed. Your task is to determine the final position of the robot after executing all commands given the grid size, starting position, and the commands. Constraints * 1 <= M <= 200000 * 1 <= R_start, C_start <= M * 1 <= length of commands <= 500000 * The commands consist only of characters `U`, `D`, `L`, and `R`. Input Input is given from Standard Input in the following format: ``` M R_start C_start commands ``` Output Output the final position of the robot in the format: ``` R_final C_final ``` Examples Input ``` 5 3 3 UUDDLLRR ``` Output ``` 3 3 ``` Input ``` 8 1 1 DRRRUUU ``` Output ``` 1 4 ``` Input ``` 10 5 5 LLLLUUUU ``` Output ``` 1 1 ```","solution":"def final_position(M, R_start, C_start, commands): Determine the final position of the robot after executing all commands. Args: M (int): Size of the grid (MxM). R_start (int): Starting row position (1-based). C_start (int): Starting column position (1-based). commands (str): Sequence of commands. Returns: (int, int): Final position of the robot. x, y = R_start, C_start for cmd in commands: if cmd == \'U\' and x > 1: x -= 1 elif cmd == \'D\' and x < M: x += 1 elif cmd == \'L\' and y > 1: y -= 1 elif cmd == \'R\' and y < M: y += 1 return (x, y)"},{"question":"John is setting up a new online learning platform and wants to design a feature to let students solve mathematical expressions. He wants your help to create a function that evaluates simple mathematical expressions containing only non-negative integers, the addition operator `+`, the subtraction operator `-`, and parentheses `()`. The task is to write a function that evaluates these expressions correctly, considering the proper order of operations and parentheses. -----Input----- - A string `expr` representing the mathematical expression. The expression will be a valid expression containing non-negative integers (no leading zeros), the characters `+`, `-`, and parentheses `()`. - The length of `expr` does not exceed 1000 characters. -----Output----- - A single integer representing the result of the evaluated expression. -----Examples----- Input \\"1 + 2\\" Output 3 Input \\"2 - (3 + 4)\\" Output -5 Input \\"5 + (8 - 6) - (3 + 4)\\" Output 0 Input \\"6 - (4 - (2 + 3))\\" Output 7 -----Note----- In the first example, the expression \\"1 + 2\\" evaluates directly to 3. In the second example, the expression \\"2 - (3 + 4)\\" evaluates to 2 - 7, which is -5. In the third example, the expression \\"5 + (8 - 6) - (3 + 4)\\" evaluates to 5 + 2 - 7, which is 0. In the fourth example, the expression \\"6 - (4 - (2 + 3))\\" evaluates to 6 - (4 - 5), which simplifies to 6 - (-1), resulting in 7.","solution":"def evaluate_expression(expr): def helper(s, idx): stack = [] num = 0 sign = 1 while idx < len(s): char = s[idx] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': stack.append(sign * num) num = 0 sign = 1 elif char == \'-\': stack.append(sign * num) num = 0 sign = -1 elif char == \'(\': num, idx = helper(s, idx + 1) elif char == \')\': stack.append(sign * num) return sum(stack), idx idx += 1 stack.append(sign * num) return sum(stack) return helper(expr, 0)"},{"question":"Consider a grid of size (n times m) where each cell contains an integer representing the height of that cell. You start at the top-left cell ((0, 0)) and will perform a series of movements to reach the bottom-right cell ((n-1, m-1)). You can only move to the right or down. Each move has an energy cost equal to the absolute difference in height between the current cell and the destination cell. Write a function to determine the minimum total energy cost required to reach the bottom-right cell from the top-left cell. Example The following grid is based on the listed inputs: [ grid = begin{bmatrix} 1 & 3 & 1 2 & 3 & 2 4 & 5 & 1 end{bmatrix} ] The minimum energy cost path from ((0, 0)) to ((2, 2)) is: ((0,0) rightarrow (0,1) rightarrow (1,1) rightarrow (1,2) rightarrow (2,2)). The total energy cost is: [ |1-3| + |3-3| + |3-2| + |2-1| = 2 + 0 + 1 + 1 = 4 ] Function Description Complete the `minEnergyCost` function in the editor below. `minEnergyCost` has the following parameter(s): - `int grid[n][m]`: a 2D array representing the grid heights. Returns - `int`: the minimum total energy cost to reach the bottom-right cell. Input Format The first line contains two space-separated integers `n` and `m`, the number of rows and columns in the grid. Each of the following `n` lines contains `m` space-separated integers representing the heights of the cells in the grid. Constraints - (1 leq n, m leq 100) - (1 leq grid[i][j] leq 1000) Sample Input 3 3 1 3 1 2 3 2 4 5 1 Sample Output 4 Explanation We perform the following movements: The grid can be visualized as: [ begin{bmatrix} 1 & 3 & 1 2 & 3 & 2 4 & 5 & 1 end{bmatrix} ] Starting from ((0,0)), the minimum energy cost path to ((2,2)) is: [ (0,0) rightarrow (0,1) rightarrow (1,1) rightarrow (1,2) rightarrow (2,2) ] The total energy cost is: [ |1-3| + |3-3| + |3-2| + |2-1| = 2 + 0 + 1 + 1 = 4 ] Hence, the minimum total energy cost to reach the bottom-right cell from the top-left cell is (4).","solution":"def minEnergyCost(grid): n = len(grid) m = len(grid[0]) dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = 0 for i in range(n): for j in range(m): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + abs(grid[i][j] - grid[i-1][j])) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + abs(grid[i][j] - grid[i][j-1])) return dp[n-1][m-1]"},{"question":"Bob is managing his warehouse and he needs your help to optimize the placement of pallets. The warehouse can be visualized as a grid with R rows and C columns. Bob can only place his pallets in specific cells of this grid, which are marked with a \'1\', while the rest of the cells are marked with a \'0\'. Bob wants to ensure that each pallet is placed in such a way that it is reachable from any other pallet by moving left, right, up, or down without passing through a \'0\'. Essentially, all \'1\' cells should form a single connected group. If this is not the case, Bob will have to place additional pallets in some \'0\' cells to make the grid connected. Your task is to find the minimum number of additional pallets (\'1\'s) that Bob needs to place to achieve this. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with two integers R and C, the number of rows and columns in the grid. This is followed by R lines, each containing C integers (either \'0\' or \'1\'), representing the grid. ------ Output ------ For each test case, output a single line with the answer — the minimum number of additional pallets required. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ R, C ≤ 50 ----- Sample Input 1 ------ 2 3 4 0 1 0 0 0 0 0 1 1 0 1 1 2 2 1 0 0 1 ----- Sample Output 1 ------ 2 1 ----- Explanation 1 ------ In the first test case, the initial grid looks like: ``` 0 1 0 0 0 0 0 1 1 0 1 1 ``` Here, we can add \'1\'s at positions (1,1) and (2,3) to connect all existing \'1\'s: ``` 0 1 1 0 0 0 1 1 1 0 1 1 ``` Hence, 2 additional \'1\'s are required. In the second test case, the initial grid looks like: ``` 1 0 0 1 ``` We can add a \'1\' at position (1,0) to connect all existing \'1\'s: ``` 1 0 1 1 ``` Therefore, 1 additional \'1\' is required.","solution":"from collections import deque def min_additional_pallets(grid, R, C): def bfs(start, visited): queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny] and grid[nx][ny] == 1: visited[nx][ny] = True queue.append((nx, ny)) # To mark visited cells visited = [[False] * C for _ in range(R)] # Count the number of connected components of \'1\'s component_count = 0 for i in range(R): for j in range(C): if grid[i][j] == 1 and not visited[i][j]: bfs((i, j), visited) component_count += 1 # If there\'s only one component, no additional pallets are needed if component_count == 1: return 0 # Else we need component_count - 1 additional pallets to connect them return component_count - 1 def solve(test_cases): results = [] for R, C, grid in test_cases: results.append(min_additional_pallets(grid, R, C)) return results"},{"question":"In this task, you will create a function to generate a \\"crossword grid\\". The crossword grid is built based on a given list of words. You will implement four methods with the following functionalities: ```python generate_empty_grid(n: int) -> List[List[str]]: place_word_horizontal(grid: List[List[str]], word: str, row: int, col: int) -> List[List[str]]: place_word_vertical(grid: List[List[str]], word: str, row: int, col: int) -> List[List[str]]: display_grid(grid: List[List[str]]) -> str: ``` 1. `generate_empty_grid(n)`: This method takes an integer `n` and returns an `n x n` 2D list filled with spaces (\' \'). This represents an empty crossword grid of size `n x n`. 2. `place_word_horizontal(grid, word, row, col)`: This method takes a grid, a word, and the starting position (row, col). It places the word horizontally from the specified starting position. You can assume the word will fit in the grid from the given position. 3. `place_word_vertical(grid, word, row, col)`: This method takes a grid, a word, and the starting position (row, col). It places the word vertically from the specified starting position. You can assume the word will fit in the grid from the given position. 4. `display_grid(grid)`: This method takes a grid and returns its string representation, with each row of the grid as a new line in the string. Examples: ```python grid = generate_empty_grid(5) grid = place_word_horizontal(grid, \\"hello\\", 2, 1) grid = place_word_vertical(grid, \\"world\\", 0, 3) print(display_grid(grid)) ``` Output: ``` w o h e l l o r d ``` Additional Requirements: - If a word placement goes out of the grid bounds, it should raise an `IndexError`. - If the grid or word is empty, the `place_word_horizontal` and `place_word_vertical` functions should return the grid unchanged. - Ensure minimal modification to the original grid structure with each method invoked.","solution":"from typing import List def generate_empty_grid(n: int) -> List[List[str]]: Creates an n x n empty grid filled with spaces. return [[\' \' for _ in range(n)] for _ in range(n)] def place_word_horizontal(grid: List[List[str]], word: str, row: int, col: int) -> List[List[str]]: Places a word horizontally in the grid starting at the specified row and column. if not grid or not word: return grid word_length = len(word) if col + word_length > len(grid[0]) or row >= len(grid): raise IndexError(\\"Word placement goes out of the grid bounds\\") for i in range(word_length): grid[row][col + i] = word[i] return grid def place_word_vertical(grid: List[List[str]], word: str, row: int, col: int) -> List[List[str]]: Places a word vertically in the grid starting at the specified row and column. if not grid or not word: return grid word_length = len(word) if row + word_length > len(grid) or col >= len(grid[0]): raise IndexError(\\"Word placement goes out of the grid bounds\\") for i in range(word_length): grid[row + i][col] = word[i] return grid def display_grid(grid: List[List[str]]) -> str: Returns a string representation of the grid, with each row as a new line. return \'n\'.join([\'\'.join(row) for row in grid])"},{"question":"You are tasked with developing an algorithm that can predict the results of a weather phenomenon based on a given set of data. Consider the following problem: You are given n days of weather data, where each day\'s weather is represented by a temperature value. You need to determine the length of the longest continuous subarray of days where the temperature continuously increases before it starts to decrease. For example, if the temperature array is [2, 1, 4, 7, 3, 2, 5], the longest subarray with the specified property is [1, 4, 7, 3, 2], which has length 5. Input Format The input consists of two lines: - The first line contains an integer n, the number of days. - The second line contains n space-separated integers, representing the temperature values for each day. Constraints 1 leq n leq 10^5 -10^4 leq temperature values leq 10^4 Output Format Output a single integer, the length of the longest continuous subarray of days where the temperature values strictly increase and then strictly decrease. Sample Input 7 2 1 4 7 3 2 5 Sample Output 5 Explanation In the given array, the longest subarray with temperatures that first strictly increase and then strictly decrease is [1, 4, 7, 3, 2], with a length of 5.","solution":"def longest_bitonic_subarray_length(n, temperatures): if n < 3: return 0 up = [0] * n down = [0] * n for i in range(1, n): if temperatures[i] > temperatures[i - 1]: up[i] = up[i - 1] + 1 for i in range(n-2, -1, -1): if temperatures[i] > temperatures[i + 1]: down[i] = down[i + 1] + 1 max_len = 0 for i in range(n): if up[i] > 0 and down[i] > 0: max_len = max(max_len, up[i] + down[i] + 1) return max_len"},{"question":"You are given an m x n grid filled with integers. Your task is to find the sum of the minimum elements from each row after you rearrange each row to ensure that the elements are in non-decreasing order. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. Each of the next m lines contains n integers, where the j-th integer in the i-th line denotes the element of the grid located in the i-th row and j-th column. The integers in the grid can be negative or positive and will fit into the range of a 32-bit signed integer. Output Print a single integer — the sum of the minimum elements from each row after rearranging each row in non-decreasing order. Examples Input 3 3 3 1 2 4 5 6 7 8 9 Output 12 Input 2 4 -5 -4 -3 -2 10 20 30 40 Output 5 Input 3 2 -1 3 2 -2 0 1 Output -3","solution":"def sum_of_min_elements(m, n, grid): Returns the sum of the minimum elements from each row after rearranging the row in non-decreasing order. :param m: int, the number of rows in the grid :param n: int, the number of columns in the grid :param grid: List[List[int]], the grid of integers :return: int, the sum of minimal elements from each row # Initialize the sum sum_min_elements = 0 # Iterate through each row in the grid for row in grid: # Sort the row and take the first element (which is the minimum) row_sorted = sorted(row) # Add the minimum element to the sum sum_min_elements += row_sorted[0] return sum_min_elements"},{"question":"Write a function `is_anagram` that takes two strings as input and returns true if one string is an anagram of the other. For example: ``` string word1 = \\"listen\\"; string word2 = \\"silent\\"; is_anagram(word1, word2); // true string word3 = \\"triangle\\"; string word4 = \\"integral\\"; is_anagram(word3, word4); // true string word5 = \\"apple\\"; string word6 = \\"papel\\"; is_anagram(word5, word6); // true string word7 = \\"rat\\"; string word8 = \\"car\\"; is_anagram(word7, word8); // false ``` To solve this problem, you should ignore any differences in character case, and consider only alphanumeric characters. Any spaces or special characters should be ignored. For example, \\"Astronomer\\" and \\"Moon starer\\" should be considered anagrams. In cases where either of the inputs is an empty string, the function should return false.","solution":"def is_anagram(s1, s2): Returns True if s1 and s2 are anagrams, ignoring case, spaces, and non-alphanumeric characters. Returns False otherwise. def clean_string(s): return \'\'.join(c.lower() for c in s if c.isalnum()) cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) if not cleaned_s1 or not cleaned_s2: return False return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"A factory machine has a defective component that processes tasks slower than it should. Each task has a start time and an end time between which it can be processed. The factory wants to identify the number of tasks that overlap with the defective component\'s operational time (i.e., the time during which the component is functioning). Given the operation time of the defective component and a list of tasks with their respective start and end times, write an algorithm to count the number of tasks that overlap with the defective component\'s operational time. -----Input----- The first line contains two integers t_s and t_e — the start and end times of the defective component\'s operation (1 le t_s le t_e le 10^9). The second line contains a single integer n — the number of tasks (1 le n le 100,000). Each of the next n lines contains two integers a_i and b_i — the start and end times of the i^{th} task (1 le a_i le b_i le 10^9). -----Output----- Output a single integer — the number of tasks that overlap with the defective component\'s operational time. -----Example----- Input 5 10 4 2 6 8 12 1 4 9 15 Output 2 -----Note----- Tasks 1 (2 to 6) and 4 (9 to 15) overlap with the defective component\'s operational time (5 to 10). Task 2 starts after and task 3 ends before the operational time, hence they do not overlap.","solution":"def count_overlapping_tasks(t_s, t_e, tasks): Counts the number of tasks that overlap with the defective component\'s operational time. t_s: int, start time of defective component\'s operation t_e: int, end time of defective component\'s operation tasks: list of tuples, each tuple contains start and end time of a task returns: int, number of overlapping tasks overlap_count = 0 for a_i, b_i in tasks: if not (b_i < t_s or a_i > t_e): # Check if the task overlaps with the defective component time overlap_count += 1 return overlap_count"},{"question":"Write a program to analyze a list of words and find all words that can form a palindrome when the order of their characters is reversed. Given a list of words, your task is to determine which words can be rearranged to form a palindrome. Recall that a palindrome is a word that reads the same forwards and backwards. A word can form a palindrome if at most one character appears an odd number of times, and all other characters appear an even number of times. # Input The input consists of a single integer `n` (1 ≤ n ≤ 1000), the number of words, followed by `n` lines each containing a single word. Each word consists of lowercase English letters only. The length of each word will not exceed 100 characters. # Output For each word, output \\"YES\\" if it can be rearranged to form a palindrome, and \\"NO\\" otherwise. Each result should be on a new line. # Sample Input 1 ``` 3 civic ivicc hello ``` # Sample Output 1 ``` YES YES NO ``` # Sample Input 2 ``` 4 abba abcd racecar carerac ``` # Sample Output 2 ``` YES NO YES YES ``` # Explanation In the first sample: - \\"civic\\" is already a palindrome. - \\"ivicc\\" can be rearranged to form \\"civic\\", a palindrome. - \\"hello\\" cannot be rearranged to form any palindrome. In the second sample: - \\"abba\\" is already a palindrome. - \\"abcd\\" cannot be rearranged to form any palindrome. - \\"racecar\\" is already a palindrome. - \\"carerac\\" can be rearranged to form \\"racecar\\", a palindrome.","solution":"def can_form_palindrome(words): Given a list of words, determine if each word can be rearranged to form a palindrome. Args: words (list of str): List of words to be analyzed. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each corresponding word. def is_palindrome_permutation(word): from collections import Counter counts = Counter(word) odd_count = 0 for count in counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return \\"NO\\" return \\"YES\\" results = [] for word in words: results.append(is_palindrome_permutation(word)) return results"},{"question":"A company needs to distribute its workload evenly amongst its employees. You are given an array representing the tasks, where the value at each index denotes the number of hours required to complete the task. The company has `k` employees, and the goal is to assign tasks such that the maximum hours worked by any employee is minimized. You need to write a function to determine this optimal distribution of tasks. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. - The second line contains `n` integers, where the i-th integer represents the number of hours required for the i-th task (1 ≤ hours_i ≤ 10^4). - The third line contains an integer `k` (1 ≤ k ≤ n), the number of employees. Output - Print a single integer, the minimum possible value of the maximum hours worked by any employee after optimally distributing all tasks. Example Input 7 10 7 8 12 6 8 7 3 Output 21 Explanation One optimal way to distribute the tasks is as follows: - Employee 1: Tasks [10, 7, 8] => 25 hours - Employee 2: Tasks [12, 6] => 18 hours - Employee 3: Tasks [8, 7] => 15 hours Here, the maximum hours worked by any employee is 25, but further examination shows that a better distribution is: - Employee 1: Tasks [10, 7] => 17 hours - Employee 2: Tasks [8, 6, 7] => 21 hours - Employee 3: Tasks [12] => 12 hours In this case, the maximum hours worked by any employee is minimized to 21.","solution":"def minimum_maximum_hours(tasks, k): Determines the minimum possible value of the maximum hours worked by any employee after optimally distributing the tasks. :param tasks: List[int] - List of integers where each integer represents the hours needed for a task. :param k: int - The number of employees. :return: int - Minimum possible value of the maximum hours worked by any employee. def can_distribute_tasks(max_hours): current_sum = 0 employees_needed = 1 for task in tasks: if current_sum + task > max_hours: employees_needed += 1 current_sum = task if employees_needed > k: return False else: current_sum += task return True low, high = max(tasks), sum(tasks) result = high while low <= high: mid = (low + high) // 2 if can_distribute_tasks(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are given a binary string S of length N. You are allowed to perform the following operation any number of times: - Select two consecutive same characters (\'00\' or \'11\') and replace them with \'01\' if it was \'00\' and \'10\' if it was \'11\'. Your task is to determine the lexicographically smallest string that can be obtained after performing the above operations any number of times. Input The input consists of a single test case in the following format. N S The first line contains an integer N, which is the length of the binary string (1 leq N leq 1000). The second line contains a binary string S. Output Output the lexicographically smallest string that can be obtained. Examples Input 5 11000 Output 10010 Input 4 1010 Output 1010 Input 6 111111 Output 101010","solution":"def lexicographically_smallest_binary_string(N, S): Given a binary string S of length N, replace every occurrence of \'00\' with \'01\' and every occurrence of \'11\' with \'10\' repeatedly to obtain the lexicographically smallest string. Params: N: int - length of the binary string S: str - binary string of length N Returns: str - lexicographically smallest binary string result = [] i = 0 while i < N: if i+1 < N and S[i] == \'0\' and S[i+1] == \'0\': result.append(\'0\') result.append(\'1\') i += 2 elif i+1 < N and S[i] == \'1\' and S[i+1] == \'1\': result.append(\'1\') result.append(\'0\') i += 2 else: result.append(S[i]) i += 1 return \'\'.join(result)"},{"question":"Tania is planning to organize a toy collection event for children in her neighborhood. The neighborhood consists of n houses arranged in a row, numbered from 1 to n. For the event, Tania plans to deliver toys to specific houses. However, she wants to ensure that every house receives at least one toy. Each toy delivery can only cover consecutive houses in the row. Given the number of houses n, and a list of toy deliveries where each delivery is defined by its start and end house numbers (both inclusive), determine the minimum number of additional deliveries required so that every house receives at least one toy. Input The first line of the input contains two integers n and d (1 ≤ n ≤ 100, 0 ≤ d ≤ 100) where n is the number of houses and d is the number of existing toy deliveries. The next d lines contain two integers si and ei (1 ≤ si, ei ≤ n; si ≤ ei) describing a toy delivery from house si to house ei. Output In the only line of output print the minimum number of additional deliveries required so that every house receives at least one toy. Examples Input 7 3 1 3 4 5 6 7 Output 0 Input 5 2 1 2 4 5 Output 1","solution":"def min_additional_deliveries(n, deliveries): Determine the minimum number of additional deliveries required so that every house receives at least one toy. Parameters: - n: int - Number of houses. - deliveries: List of tuples - Existing toy deliveries. Returns: int - Minimum number of additional deliveries required. covered = [0] * n # Mark the covered houses for (start, end) in deliveries: for i in range(start - 1, end): covered[i] = 1 # Count uncovered houses uncovered_count = covered.count(0) return uncovered_count"},{"question":"Given a string s and a dictionary of words dict, determine if s can be segmented into a sequence of one or more dictionary words. Return all such possible segmentations in any order. Example 1: Input: s = \\"catsanddog\\", dict = [\\"cat\\",\\"cats\\",\\"and\\",\\"sand\\",\\"dog\\"] Output: [\\"cats and dog\\",\\"cat sand dog\\"] Example 2: Input: s = \\"pineapplepenapple\\", dict = [\\"apple\\",\\"pen\\",\\"applepen\\",\\"pine\\",\\"pineapple\\"] Output: [\\"pine apple pen apple\\",\\"pineapple pen apple\\",\\"pine applepen apple\\"] Example 3: Input: s = \\"catsandog\\", dict = [\\"cats\\",\\"dog\\",\\"sand\\",\\"and\\",\\"cat\\"] Output: [] Constraints: 1 <= s.length <= 20 1 <= dict.length <= 1000 1 <= dict[i].length <= 20 All the strings in dict and s are composed of lowercase English letters.","solution":"def word_break_helper(s, word_dict, start, memo): if start in memo: return memo[start] if start == len(s): return [\\"\\"] segmentations = [] for end in range(start + 1, len(s) + 1): word = s[start:end] if word in word_dict: subsequences = word_break_helper(s, word_dict, end, memo) for subsequence in subsequences: if subsequence: segmentations.append(word + \\" \\" + subsequence) else: segmentations.append(word) memo[start] = segmentations return segmentations def word_break(s, word_dict): return word_break_helper(s, set(word_dict), 0, {})"},{"question":"Given a binary tree, your task is to complete the function `leafPathSum` which finds the sum of all root-to-leaf path numbers. Each root-to-leaf path represents a number formed by concatenating the node values along the path. Example 1: Input: 1 / 2 3 Output: 25 Explanation: The root-to-leaf paths are: 1->2 = 12 1->3 = 13 Sum = 12 + 13 = 25 Example 2: Input: 4 / 9 0 / 5 1 Output: 1026 Explanation: The root-to-leaf paths are: 4->9->5 = 495 4->9->1 = 491 4->0 = 40 Sum = 495 + 491 + 40 = 1026 Note: - The number of nodes in the tree is between 1 and 1000. - The value of each node is an integer between 0 and 9 inclusive.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def leafPathSum(root): def helper(node, current_sum): if not node: return 0 current_sum = current_sum * 10 + node.val if not node.left and not node.right: return current_sum return helper(node.left, current_sum) + helper(node.right, current_sum) return helper(root, 0)"},{"question":"You are given two integers, P and Q. Your task is to find the greatest common divisor (GCD) of all integers from P to Q (both inclusive). To clarify, if P = 10 and Q = 15, you need to find the GCD of the numbers 10, 11, 12, 13, 14, and 15. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow. Each test case is described in one line containing two integers: P and Q. -----Output----- For each test case, output a single line containing the GCD of all numbers from P to Q inclusively. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ P ≤ Q ≤ 10^6 -----Example----- Input: 2 10 15 5 5 Output: 1 5 -----Explanation----- Example 1: The numbers between 10 and 15 are [10, 11, 12, 13, 14, 15], and their GCD is 1. Example 2: The numbers between 5 and 5 are just [5], and their GCD is 5.","solution":"import math def gcd_of_range(P, Q): Returns the GCD of all integers from P to Q (both inclusive). if P == Q: return P return 1 # Because if there are at least two different numbers, their GCD will always be 1 def process_test_cases(test_cases): results = [] for P, Q in test_cases: results.append(gcd_of_range(P, Q)) return results"},{"question":"Given an array of integers, you need to perform a sequence of operations to make all the elements in the array equal. In one operation, you can: - Select any two indices i and j such that 1 leq i, j leq N, and i neq j. - Set A[i] = A[j]. Find the minimum number of operations required to make all elements in the array equal. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains two lines of input: - The first line contains a single integer N, the number of elements in the array. - The second line contains N integers A_1, A_2, ..., A_N, the elements of the array. ------ Output ------ For each test case, output in a single line the answer to the problem. ------ Constraints ------ 1 leq T leq 100 2 leq N leq 100 1 leq A[i] leq 10^4 ------ Sample Input 1 ------ 2 4 1 2 3 4 5 10 10 10 10 10 ------ Sample Output 1 ------ 3 0 ------ Explanation 1 ------ Test Case 1: We can choose to change elements to any of the existing ones in the array. For example: - Set A[1] = 2 (cost is 1 operation) - Set A[3] = 2 (cost is 1 operation) - Set A[4] = 2 (cost is 1 operation) Hence, the total number of operations required is 3. Test Case 2: All elements are already the same, so no operations are required.","solution":"def min_operations_to_equal_elements(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] freq = {} for num in A: if num in freq: freq[num] += 1 else: freq[num] = 1 max_freq = max(freq.values()) min_ops = N - max_freq results.append(min_ops) return results"},{"question":"Vasily is playing a game on a rectangular grid with n rows and m columns. Each cell in the grid contains either a \'0\' (an empty cell) or a \'1\' (a filled cell). Vasily can perform the following operation any number of times: choose any two rows in the grid and swap them. Vasily\'s goal is to make all rows of the grid lexicographically ordered in non-decreasing order. A sequence of strings is lexicographically ordered in non-decreasing order if each string in the sequence is not greater than the string that comes after it in the sequence. Write a program to determine if Vasily can achieve his goal. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains exactly m characters (\'0\' or \'1\'), representing the cells in the grid. -----Output----- Print \\"YES\\" (without quotes) if Vasily can achieve his goal, or \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 3 011 101 110 Output YES Input 4 2 10 11 01 00 Output NO -----Note----- In the first example, Vasily can swap the first row with the second row, and then swap the second row with the third row. The resulting grid will be: ``` 101 110 011 ``` Which is lexicographically ordered. In the second example, there is no way to reorder the rows to achieve lexicographical order.","solution":"def can_sort_grid_lexicographically(n, m, grid): Determines if the grid can be sorted lexicographically by swapping rows. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid rows :return: \\"YES\\" if the grid can be sorted lexicographically, \\"NO\\" otherwise # Sort the grid with respect to lexicographic order sorted_grid = sorted(grid) # Compare the sorted grid with the original grid if sorted_grid == grid: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a program that takes an integer `n` as input, finds all the prime numbers less than or equal to `n`, and returns the sum of these prime numbers. A prime number is defined as any number greater than 1 that is not divisible by any number other than 1 and itself. INPUT The first line contains an integer `T` which represents the number of test cases. Each of the next `T` lines contains a single integer `n`. OUTPUT For each test case, output the sum of all prime numbers that are less than or equal to `n`. CONSTRAINTS 1 ≤ T ≤ 1000 1 ≤ n ≤ 100000 SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 17 77 Explanation In the first test case for n = 10, the prime numbers less than or equal to 10 are {2, 3, 5, 7}. Their sum is 17. In the second test case for n = 20, the prime numbers less than or equal to 20 are {2, 3, 5, 7, 11, 13, 17, 19}. Their sum is 77.","solution":"import itertools def sieve_of_eratosthenes(n): Implements the Sieve of Eratosthenes algorithm to find all primes up to and including `n`, and returns a list of these prime numbers. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [] for p in range(2, n + 1): if is_prime[p]: prime_numbers.append(p) return prime_numbers def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to `n`. primes = sieve_of_eratosthenes(n) return sum(primes) def process_input_and_output(input_values): Processes the input list containing test case values and returns the list of corresponding results where each result is the sum of primes up to the provided number. results = [] T = input_values[0] for i in range(1, T + 1): n = input_values[i] results.append(sum_of_primes(n)) return results"},{"question":"Given an integer N, determine whether there are two positive integers (X, Y) such that X^2 + Y^2 = N, and find one such pair if it exists. -----Constraints----- - 1 leq N leq 10^{9} - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: N -----Output----- If there is no pair (X, Y) that satisfies the condition, print -1. If there is such a pair, print X and Y of one such pair with a space in between. If there are multiple such pairs, any of them will be accepted. -----Sample Input----- 25 -----Sample Output----- 3 4 We have 3^2 + 4^2 = 9 + 16 = 25, so (X, Y) = (3, 4) satisfies the condition.","solution":"import math def find_xy(n): Determine whether there are two positive integers (X, Y) such that X^2 + Y^2 = N. Return one such pair if it exists, otherwise return -1. for x in range(1, int(math.isqrt(n)) + 1): y_squared = n - x**2 if y_squared > 0: y = int(math.isqrt(y_squared)) if y**2 == y_squared: return x, y return -1"},{"question":"In a certain string processing system, strings are processed and transformed based on a set of predefined rules. One such rule involves replacing each consecutive sequence of the same character with a single instance of that character followed by the length of the sequence. For example, the string \\"aaabbcccc\\" would become \\"a3b2c4\\". You are tasked with implementing this rule and providing the transformed string as the output. -----Input:----- The input will consist of a single string T (1 ≤ |T| ≤ 100000), where |T| denotes the length of the string. -----Output:----- The output should be a single string representing the transformed version of T according to the rule described. -----Example input:----- aaabbcccc -----Example output:----- a3b2c4","solution":"def transform_string(s): Transforms the input string by replacing each consecutive sequence of the same character with a single instance of that character followed by the length of the sequence. if not s: return \\"\\" result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: result.append(s[i - 1] + str(count)) count = 1 result.append(s[-1] + str(count)) return \\"\\".join(result)"},{"question":"Given an array of unique integers, write a function that returns the largest difference between any two elements where the larger element comes after the smaller one. For example, given the array: ``` [2, 3, 10, 6, 4, 8, 1] ``` The function should return `8` (difference between 10 and 2). Another example: ``` [7, 9, 5, 6, 3, 2] ``` The function should return `2` (difference between 9 and 7). It is guaranteed that the array will contain at least two elements. Your solution should have a linear time complexity, O(n). # Constraints - The array will have at least two elements. - The elements will be unique and the array will contain between 2 and 10,000 elements. - Each element will be an integer in the range [-10,000, 10,000]. # Function Signature ```python def max_difference(arr: List[int]) -> int: pass ``` # Examples ```python assert max_difference([2, 3, 10, 6, 4, 8, 1]) == 8 assert max_difference([7, 9, 5, 6, 3, 2]) == 2 assert max_difference([1, 2, 3, 4, 5]) == 4 ```","solution":"from typing import List def max_difference(arr: List[int]) -> int: Returns the largest difference between any two elements where the larger element comes after the smaller one. if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Given a grid of size N x M, you have to move from the top-left corner to the bottom-right corner. You can move only to the right or down. Because the grid contains some obstacles, it is not always possible to reach the destination. Write a function that counts the number of distinct ways to reach the bottom-right corner from the top-left corner. * Each cell in the grid is either empty (represented by 0) or contains an obstacle (represented by 1). * You can only move right or down to adjacent cells that are empty. * Return the number of distinct ways to reach the bottom-right corner from the top-left corner. Input The first line contains two integers N and M (1 <= N, M <= 1000) – the number of rows and columns in the grid respectively. The next N lines each contain M integers (either 0 or 1), describing the grid. Output Print the number of distinct paths modulo 998,244,353. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def count_paths_with_obstacles(n, m, grid): MOD = 998244353 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1]"},{"question":"You are given a list of integers that represents the heights of a row of trees. The trees are arranged in a straight line and each has a unique height. We want to cut down some of the trees such that the remaining trees form a strictly increasing sequence of heights from left to right. We need to find the minimum number of trees that need to be cut down to achieve this. Constraints: - The number of trees, ( N ), is between 1 and 1000. - Each tree\'s height is a positive integer between 1 and 10000. Input: The input is given from Standard Input in the following format: N h1 h2 h3 ... hN Output: The output should be formatted in the following way: K Where ( K ) is the minimum number of trees that need to be cut down. Examples: Input: 5 3 7 5 6 9 Output: 1 Input: 6 9 8 7 6 5 4 Output: 5","solution":"def min_trees_to_cut(n, heights): Function to find the minimum number of trees to cut such that the heights form a strictly increasing sequence. Args: n (int): Number of trees. heights (list): List of integers representing the heights of trees. Returns: int: Minimum number of trees to cut. # Dynamic programming array to keep the length of longest increasing subsequence ending at each index dp = [1] * n # Compute lengths of longest increasing subsequence for each index for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence longest_increasing_subseq_length = max(dp) # Minimum number of trees to cut is total number of trees minus the length of longest increasing subsequence return n - longest_increasing_subseq_length"},{"question":"A computer networking class is setting up communication between multiple computers. Each computer is assigned a unique ID and needs to interact with every other computer at least once. To ensure efficient communication, each interaction must be logged. Your task is to determine the minimum number of interactions required for all computers to communicate at least once with every other computer. Given an integer n, representing the number of computers, find the minimum number of interactions needed so that every computer communicates with all other computers at least once. Example n = 4 For 4 computers, the interactions would be: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4) Thus, a total of 6 interactions are needed. Function Description Complete the minimumInteractions function in the editor below. It must return an integer representing the minimum number of interactions required. minimumInteractions has the following parameter(s): int n: the number of computers Returns int: the minimum number of interactions required for all computers to communicate with each other Input Format A single integer, n, the number of computers in the network. Constraints 1 ≤ n ≤ 500 Sample Input 4 Sample Output 6 Explanation For the given example of n = 4, the 6 interactions needed for full communication are as follows: 1 communicates with 2, 1 communicates with 3, 1 communicates with 4, 2 communicates with 3, 2 communicates with 4, 3 communicates with 4.","solution":"def minimumInteractions(n): Return the minimum number of interactions required for all computers to communicate with each other. Parameters: n (int): the number of computers Returns: int: the minimum number of interactions required if n <= 1: return 0 return n * (n - 1) // 2"},{"question":"Erik, a software developer, is working on an application that converts numerical identifiers to binary strings for a visualization tool. He needs to process these identifiers and generate a binary representation for each number while maintaining a constant length for the strings by padding with leading zeros if necessary. Your task is to help Erik by writing a function `generate_binary_string` that converts a given numerical identifier to a binary string of a specified length. The function should handle multiple queries efficiently. -----Input----- The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 32), representing the number of numerical identifiers and the length of the binary strings, respectively. The following n lines each contain one integer x_i (0 leq x_i < 2^m), representing a numerical identifier. -----Output----- Print n lines, each line containing a binary string representation of the corresponding identifier, padded with leading zeros to match the specified length m. -----Examples----- Input 3 8 5 18 255 Output 00000101 00010010 11111111 Input 5 4 1 2 3 4 7 Output 0001 0010 0011 0100 0111 Input 2 6 15 32 Output 001111 100000 -----Notes----- For the first example, the binary representation of 5 is \\"101\\", and when padded to 8 bits, it becomes \\"00000101\\". Similarly, the binary representation of 18 is \\"10010\\", which is padded to \\"00010010\\", and the binary representation of 255 is \\"11111111\\", which does not need any padding since it\'s already 8 bits long. For the second example, the binary representations of 1, 2, 3, 4, and 7 are all padded to 4 bits. For the third example, the representation of 15 is \\"1111\\", padded to \\"001111\\", and 32 is \\"100000\\", which requires no padding since it\'s already 6 bits long.","solution":"def generate_binary_strings(n, m, numbers): Converts a list of numerical identifiers to binary strings of a specified length. Parameters: n (int): The number of numerical identifiers. m (int): The length of the binary strings. numbers (list of int): The list of numerical identifiers. Returns: list of str: The list of binary strings. binary_strings = [] for number in numbers: binary_string = format(number, \'0{}b\'.format(m)) binary_strings.append(binary_string) return binary_strings # Example usage: # n = 3, m = 8, numbers = [5, 18, 255] # The output should be: [\'00000101\', \'00010010\', \'11111111\']"},{"question":"ZS the Coder has a matrix of integers with n rows and m columns. He has defined an operation where he can select any submatrix of the original matrix and transpose it. One day, ZS the Coder wondered if he could make all rows of the matrix equal by applying a series of these transposition operations. He wants to know if it\'s possible and, if so, the minimum number of transpositions required. A transposition is defined as selecting any submatrix with rows and columns and exchanging the rows with columns. Given the initial matrix, your task is to help ZS the Coder determine if he can make all rows equal and, if possible, find the minimum number of transpositions required. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the matrix, respectively. The next n lines contain m integers each, representing the matrix. Output If it is possible to make all rows equal, print a single integer — the minimum number of transpositions required. Otherwise, print -1. Examples Input 3 3 1 2 3 3 2 1 1 2 3 Output 1 Input 2 4 1 2 3 4 4 3 2 1 Output -1 Note In the first sample case, ZS the Coder can transpose the last two rows to make the whole matrix: 1 2 3 1 2 3 1 2 3 So the answer is 1. In the second sample case, it is impossible to make all rows equal with any series of transpositions, so the output is -1.","solution":"def min_transpositions_to_equal_rows(matrix): Determines if it is possible to make all rows equal by transposing submatrices, and if so, returns the minimum number of transpositions required. Parameters: matrix (list of list of int): The initial matrix. Returns: int: The minimum number of transpositions required, or -1 if not possible. n = len(matrix) m = len(matrix[0]) # If there\'s only one row, it\'s already the same and requires 0 transpositions if n == 1: return 0 # Treating each row as a tuple, to track row occurrences rows = list(map(tuple, matrix)) from collections import Counter # Counting the frequency of each row row_count = Counter(rows) # If any row appears n times, we\'ve achieved the goal for row in row_count: if row_count[row] == n: return 0 # For each row, try to create such a condition by aggregating frequency # Analysis if we transpose rows max_count = max(row_count.values()) # The minimum number of transpositions required to make all rows equal is # n minus the max frequency count of any single row since we can\'t # achieve more without transforming whole rows. if max_count > 1: return n - max_count # If no such row appears, it\'s impossible return -1"},{"question":"You are given an array of integers where each integer represents the length of a rope. Your task is to tie the ropes together end-to-end to form the longest continuous rope, while ensuring that after cutting exactly one rope, you are left with multiple ropes of equal lengths. Find the minimum possible length for these equal length ropes. Example 1: Input: [4, 3, 2, 5, 6] Output: 4 Explanation: By cutting a rope, such as the one with length 5, into smaller segments, you can have ropes with equal lengths that sum up to 4. Example 2: Input: [8, 1, 7, 3] Output: 7 Explanation: By cutting the rope with length 8 into smaller segments, you can arrange them in such a way that you end up with ropes of equal length 7. Note: The length sum of the given ropes is in the range of 0 to 10^9. The length of the given rope array will not exceed 20.","solution":"from math import gcd from functools import reduce def find_min_equal_rope_length(ropes): Returns the minimum possible length for the equal length ropes after cutting exactly one rope, ensuring that all resultant ropes are of equal length. if not ropes: return 0 total_length = sum(ropes) # Finding the GCD of all rope lengths gives the maximum length of equal segments we can have common_gcd = reduce(gcd, ropes) return common_gcd"},{"question":"Problem description. Sarah loves to create unique arrangements of her favorite books on her bookshelf. She has `n` books and she wants to know in how many different ways she can arrange exactly `k` of them on her shelf. Help Sarah by writing a program to compute the number of ways to choose `k` books from a total of `n` books and arrange them. Input Each input will contain two integers `n` and `k` in two separate lines. There will be a total of 5 sub-tasks. Output For each sub-task, output a single line containing the number of ways to arrange exactly `k` books out of `n` books. Constraints All sub-tasks contain different numbers. 0 ≤ k ≤ n ≤ 20 Example Input: 5 3 Output: 60 Explanation The number of ways to choose 3 books from 5 and arrange them is calculated using permutations: P(5, 3) = 5! / (5-3)!. The result is 5 × 4 × 3 = 60.","solution":"import math def count_book_arrangements(n, k): Returns the number of ways to arrange exactly k books out of n books. if k > n or k < 0 or n < 0: return 0 return math.perm(n, k)"},{"question":"You are given a sequence of integers where each integer appears exactly twice, except for one integer which appears only once. Identify the integer that appears only once in the sequence. Input The first line contains an integer n, the number of integers in the sequence (1 ≤ n ≤ 2 * 10^5). The second line contains n integers separated by spaces, representing the sequence where all integers except one appear exactly twice. The integers are within the range of 1 to 10^9. Output Output the integer that appears only once in the sequence. Note: Your solution should have a time complexity of O(n) and use only O(1) auxiliary space. SAMPLE INPUT 5 2 3 2 3 4 SAMPLE OUTPUT 4","solution":"def find_single_occurrence(nums): Returns the integer that appears only once in the sequence. Args: nums (list of int): The input list of integers where all integers except one appear exactly twice. Returns: int: the integer that appears only once. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Given an array of N integers, perform Q range queries to find the sum of elements in the given range [L, R]. Example: Input: arr = [3, 4, 2, 7, 5, 8, 10, 6] queries = [[0, 3], [2, 5], [0, 7]] Output: 16, 22, 45 Explanation: The sum of elements from index 0 to 3 is 3+4+2+7 = 16. The sum of elements from index 2 to 5 is 2+7+5+8 = 22. The sum of elements from index 0 to 7 is 3+4+2+7+5+8+10+6 = 45. Your Task: You don\'t need to read or print anything. Your task is to complete the function rangeSum() which takes N, arr, and queries as the input parameter and returns a list sums[] where sums[i] stores the sum of elements in the range [L, R] for each query. Expected Time complexity: O(N + Q). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^{4} 1 <= arr[i] <= 10^{5} 1 <= Q <= 100 0 <= L <= R < N","solution":"def rangeSum(N, arr, queries): # Create a prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] result = [] for L, R in queries: sum_range = prefix_sum[R + 1] - prefix_sum[L] result.append(sum_range) return result"},{"question":"Given an array of integers and a threshold value, return the length of the longest subarray whose sum is less than or equal to the threshold. Example: Input: arr = [1, 2, 3, 4, 5] threshold = 8 Output: 3 Explanation: The longest subarray with sum less than or equal to 8 is [1, 2, 3] with the sum of 6. Your Task: You don\'t have to read input or print anything. Your task is to complete the function longestSubarray() which takes an array of integers arr and an integer threshold as input and returns the length of the longest subarray with sum less than or equal to the threshold. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraint: 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^4 1 <= threshold <= 10^9","solution":"def longestSubarray(arr, threshold): Returns the length of the longest subarray with sum less than or equal to the threshold. max_length = 0 current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > threshold: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Problem A company is organizing a corporate training program. The program includes a series of workshops that take place over several weeks. Each workshop is held on a specific day and has a specific duration. The company wants to understand how many overlapping workshops there will be on any given day during the training period. Given a list of tuples where each tuple contains the start day and end day of a workshop (inclusive), determine the maximum number of overlapping workshops that occur on any single day. Constraints The input satisfies the following conditions: * 1 leq start, end leq 10^9 * 1 leq n leq 10^5 * start leq end Input The input is given in the following format: n start_1 end_1 start_2 end_2 dots start_n end_n The first line contains an integer n , the number of workshops. The next n lines each contain two integers start_i and end_i (1-based index), the start and end days of the i^{th} workshop. Output Output a single integer, the maximum number of overlapping workshops on any day during the training period. Examples Input 3 1 5 2 6 3 7 Output 3 Input 4 1 2 2 3 3 4 4 5 Output 2","solution":"def max_overlapping_workshops(n, intervals): events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end + 1, \'end\')) events.sort() current_overlap = 0 max_overlap = 0 for time, event in events: if event == \'start\': current_overlap += 1 if current_overlap > max_overlap: max_overlap = current_overlap else: current_overlap -= 1 return max_overlap"},{"question":"Given an array of integers, find the length of the longest subarray where the difference between the maximum and minimum elements is less than or equal to a given threshold k. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the number of elements in the array and the threshold respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the length of the longest subarray where the difference between the maximum and minimum elements is less than or equal to k. -----Examples----- Input: 5 3 1 3 5 7 9 Output: 2 Input: 5 5 1 3 5 7 9 Output: 3 -----Note----- In the first sample, the longest subarray that satisfies the condition is [3, 5], so the answer is 2. In the second sample, the longest subarray that satisfies the condition is [1, 3, 5], so the answer is 3.","solution":"def longest_subarray_within_threshold(n, k, arr): Returns the length of the longest subarray where the difference between the maximum and minimum elements is ≤ k. if not arr: return 0 start = 0 max_len = 1 min_q = [] max_q = [] for end in range(n): while min_q and arr[min_q[-1]] >= arr[end]: min_q.pop() while max_q and arr[max_q[-1]] <= arr[end]: max_q.pop() min_q.append(end) max_q.append(end) while arr[max_q[0]] - arr[min_q[0]] > k: start += 1 if min_q[0] < start: min_q.pop(0) if max_q[0] < start: max_q.pop(0) max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a land of puzzles, a wizard gives you a unique challenge involving strings and cycles. The wizard provides you with a string `s` consisting of lowercase English letters and an integer `n`. Your task is to perform a cyclic shift `n` times on the string `s` and determine the resulting string. A cyclic shift means moving the last character of the string to the front. For example: - A single cyclic shift on \\"abcde\\" results in \\"eabcd\\". - A second cyclic shift on the result \\"eabcd\\" results in \\"deabc\\". Given the nature of cyclical shifts, multiple shifts may result in the same string as fewer shifts due to the periodic nature of the process. For instance, shifting a string of length 5 by 7 times yields the same result as shifting it by 2 times. Thus the effective number of shifts can be reduced using modulo operation with the length of the string. Your goal is to compute the resulting string after `n` cyclic shifts efficiently, without explicitly performing each shift. -----Input----- The first line of input contains a single string `s` (1 ≤ |s| ≤ 10^5), the string to be shifted. The second line contains an integer `n` (1 ≤ n ≤ 10^18), the number of cyclic shifts to be performed. -----Output----- Print the resulting string after performing `n` cyclic shifts. -----Examples----- Input abcde 2 Output deabc Input helloworld 1000000000000000000 Output helloworld","solution":"def cyclic_shift(s, n): Returns the result string after performing n cyclic shifts on s. length = len(s) n = n % length # Effective number of shifts return s[-n:] + s[:-n]"},{"question":"Given a list of integers, your task is to compute the number of pairs of integers (i, j) where i < j such that their sum is zero. In other words, you need to find the pairs of integers in the list whose elements sum up to zero and make sure you do not count any pair more than once. Input format: - The first line contains an integer, T, denoting the number of test cases. - For each test case: - The first line contains an integer, N, denoting the size of the array. - The next line contains N integers, denoting the elements of the array. Output format: For each test case, print the number of pairs whose sum is zero. Answer to each test case is on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^6 ≤ Ai ≤ 10^6 SAMPLE INPUT: 2 4 -1 1 2 -2 5 3 -3 0 1 -1 SAMPLE OUTPUT: 2 2 Explanation: In the first test case, there are two pairs of integers whose sum is zero: (-1, 1) and (2, -2). In the second test case, there are two pairs of integers whose sum is zero: (3, -3) and (1, -1). The pair (0, 0) is not considered as there is only one 0 in the list.","solution":"def count_zero_sum_pairs(test_cases): results = [] for case in test_cases: n, arr = case count = 0 seen = {} for num in arr: if -num in seen: count += 1 seen[-num] -= 1 if seen[-num] == 0: del seen[-num] else: if num in seen: seen[num] += 1 else: seen[num] = 1 results.append(count) return results # Helper function to parse input def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"You are given an array of n integers and an integer k. You need to find out the smallest subarray that contains at least k distinct integers. If no such subarray exists, return -1. Input The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 100000). The second line contains n space-separated integers representing the array. Output Output a single integer representing the length of the smallest subarray containing at least k distinct integers. If no such subarray exists, print -1. Examples Input 7 3 1 2 4 2 2 3 1 Output 3 Input 5 5 1 2 3 4 5 Output 5 Input 8 4 1 1 1 1 1 1 1 1 Output -1 Note In the first example, the smallest subarray containing at least 3 distinct integers is [2, 4, 2], which has a length of 3. In the second example, the entire array itself contains exactly 5 distinct integers, so the output is 5. In the third example, there are not enough distinct integers to form a subarray containing 4 distinct integers, so the output is -1.","solution":"def smallest_subarray_with_k_distinct(arr, k): from collections import defaultdict n = len(arr) if k > n: return -1 left = 0 right = 0 min_length = n + 1 count_distinct = 0 freq_map = defaultdict(int) while right < n: if freq_map[arr[right]] == 0: count_distinct += 1 freq_map[arr[right]] += 1 right += 1 while count_distinct >= k: min_length = min(min_length, right - left) freq_map[arr[left]] -= 1 if freq_map[arr[left]] == 0: count_distinct -= 1 left += 1 return min_length if min_length <= n else -1"},{"question":"You are given two integers, N and M. Create a function to determine if there exists a sequence of length N that consists of the numbers from 1 to M (inclusive) in such a way that each integer from the range [1, M] appears exactly once in every contiguous subsequence of length M within the sequence. If such a sequence is possible, construct one such sequence. Constraints * 1 ≤ N ≤ 10^6 * 1 ≤ M ≤ N * The sum of N across all test cases does not exceed 10^7. Input The input is given as follows: N M Output If such a sequence does not exist, print `No`. If such a sequence does exist, print `Yes` followed by the sequence of integers. If there are multiple valid sequences, any of them will be accepted. Examples Input 5 3 Output Yes 1 2 3 1 2 Input 4 4 Output Yes 1 2 3 4 Input 3 4 Output No","solution":"def find_sequence(N, M): Determines whether a sequence of length N can be constructed such that every range [1, M] appears exactly once in every contiguous subsequence of length M. Returns \'No\' if it cannot be constructed or the sequence if it is possible. if M > N: return \\"No\\" sequence = [] for i in range(N): sequence.append((i % M) + 1) return f\\"Yesn{\' \'.join(map(str, sequence))}\\""},{"question":"You are helping an archaeologist analyze a sequence of ancient symbols. Each symbol is represented by a unique positive integer. The archaeologist needs to find out how many unique symbols appear in a subsequence of the given sequence. Given an integer array representing the sequence and multiple queries, each of which specifies a range within the array, your task is to determine the number of unique integers in the subsequence defined by the range for each query. Input The first line of input contains two integers n and q, denoting the length of the sequence and the number of queries, respectively. The second line contains n space-separated integers, representing the symbols in the sequence. The next q lines each contain two integers l and r (0-based indices), representing the start and end of the range for each query. Output For each query, print the number of unique symbols in the specified subsequence, each on a new line. Constraints 1 <= n, q <= 100000 1 <= each element <= 1000000000 0 <= l <= r < n Example Input: 7 3 1 2 1 3 2 1 4 0 3 2 5 1 6 Output: 3 2 4 Explanation For the first query (0, 3), the subsequence is [1, 2, 1, 3], which contains 3 unique symbols: 1, 2, and 3. For the second query (2, 5), the subsequence is [1, 3, 2, 1], which contains 2 unique symbols: 1 and 3. For the third query (1, 6), the subsequence is [2, 1, 3, 2, 1, 4], which contains 4 unique symbols: 1, 2, 3, and 4.","solution":"def count_unique_symbols(n, q, sequence, queries): Returns the number of unique symbols in the specified subsequence for each query. Parameters: n (int): Length of the sequence q (int): Number of queries sequence (list): List of integers representing the sequence of symbols queries (list of tuples): Each tuple contains two integers representing the start and end of the range (0-based indices) Returns: list: A list of integers where each integer is the number of unique symbols in the corresponding query range results = [] for l, r in queries: unique_symbols = set(sequence[l:r+1]) results.append(len(unique_symbols)) return results"},{"question":"You are given an array of `n` integers and a sequence of `q` operations. In each operation, you are given an index `i` and a value `v`. You need to update the `i`-th element of the array by adding `v` to it. After performing all the operations, you need to find the sum of elements in the array. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2 · 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains `n` integers `a1, a2, ..., an` — the initial values of the array elements (−10^9 ≤ ai ≤ 10^9). Each of the next `q` lines contains two integers `i` and `v` (1 ≤ i ≤ n, −10^9 ≤ v ≤ 10^9) — the index of the element to be updated and the value to be added to it. Output Output a single integer — the sum of the elements in the array after all the operations. Examples Input 5 3 1 2 3 4 5 2 3 2 -2 5 10 Output 26 Input 4 2 0 0 0 0 1 7 3 -5 Output 2","solution":"def perform_operations(n, q, array, operations): Updates the array based on the operations and returns the sum of the elements of the updated array. :param n: int : Number of elements in the array :param q: int : Number of operations :param array: List[int] : Initial array :param operations: List[Tuple[int, int]] : List of operations where each tuple is (i, v) :return: int : Sum of the array after performing all the operations for i, v in operations: array[i-1] += v # Adjust for 1-indexed to 0-indexed return sum(array)"},{"question":"Harsha is organizing a marathon event in his city. To ensure safety and fun, every participant must follow a specific sequence of tasks at various checkpoint stations. Harsha needs your help to determine the most efficient way to ensure success in the event. The city has N checkpoints, each with a specific task that must be completed before moving to the next checkpoint. Each task has a minimum amount of time required, given in an array `time` of length N, where `time[i]` represents the time required at checkpoint i. Participants must visit checkpoints in increasing order of index and cannot skip any checkpoint. Harsha wants to know the minimum possible time a participant needs to spend to complete tasks at all checkpoints if they start at the first checkpoint. Write a function `minimum_time(n: int, time: List[int]) -> int` that takes the number of checkpoints N and a list of integers `time` representing the time required at each checkpoint, and returns the minimum time required to complete all tasks. # Input - An integer `N` (1 ≤ N ≤ 100,000) - the number of checkpoints. - A list of integers `time` of length `N` (1 ≤ time[i] ≤ 100) - the time required at each checkpoint. # Output - An integer that is the minimum possible time a participant needs to spend to complete tasks at all checkpoints. # Example Input: ``` 5 [2, 1, 3, 2, 4] ``` Output: ``` 12 ``` Explanation: The participant spends 2 units of time at checkpoint 0, 1 unit at checkpoint 1, 3 units at checkpoint 2, 2 units at checkpoint 3, and 4 units at checkpoint 4. The total time spent is 2 + 1 + 3 + 2 + 4 = 12.","solution":"from typing import List def minimum_time(n: int, time: List[int]) -> int: Returns the minimum time required to complete tasks at all checkpoints. Parameters: n (int): Number of checkpoints time (List[int]): Time required at each checkpoint Returns: int: Total minimum time to complete all tasks return sum(time)"},{"question":"A small robot is moving in a 2D grid. The robot starts at the point (0, 0) and can move up, down, left, or right by one unit at a time. You will provide a sequence of commands for the robot, where each command is a single character: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Determine the final position of the robot after executing all the given commands. Input A single string s (1 ≤ |s| ≤ 1000) consisting of the characters \'U\', \'D\', \'L\', \'R\'. Output Two integers representing the final coordinates of the robot after following all the commands. Examples Input UURDDL Output 0 0 Input UUUUDDDDRR Output 2 0","solution":"def final_position(commands): Determines the final position of the robot after executing the commands. Args: commands (str): A string consisting of \'U\', \'D\', \'L\', \'R\' commands. Returns: tuple: Final coordinates (x, y) of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"Anna is studying prime numbers and their interesting properties. She comes across a unique problem related to prime numbers and their divisors. She wants to write a program to solve this problem but needs your help to do so. You need to calculate the sum of all proper divisors of a given integer `n`, where a proper divisor is any divisor of `n` except `n` itself. Additionally, you must determine if this sum is a prime number. Input The first line contains an integer `t` (1 ≤ t ≤ 10^4), the number of test cases. Each of the next `t` lines contains a single integer `n` (2 ≤ n ≤ 10^6). Output For each test case, output a single line with the sum of all proper divisors of `n` and \\"YES\\" if this sum is a prime number, otherwise \\"NO\\". Example Input 3 6 28 9 Output 6 NO 28 NO 4 NO Note For the first test case, the proper divisors of 6 are 1, 2, and 3. Their sum is 6, which is not a prime number. For the second test case, the proper divisors of 28 are 1, 2, 4, 7, and 14. Their sum is 28, which is not a prime number. For the third test case, the proper divisors of 9 are 1 and 3. Their sum is 4, which is not a prime number.","solution":"def sum_of_proper_divisors(n): Calculate the sum of all proper divisors of n. if n <= 1: return 0 divisors_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def process_test_cases(t, test_cases): Process t test cases and return the result for each. results = [] for n in test_cases: sum_divisors = sum_of_proper_divisors(n) if is_prime(sum_divisors): results.append(f\\"{sum_divisors} YES\\") else: results.append(f\\"{sum_divisors} NO\\") return results"},{"question":"**Problem Statement** Henry loves collecting and organizing unique antique items. He has a database of items, where each item is described by a unique identification number and a few characteristics. Henry wants to organize the items into different collections based on their characteristics. In particular, he wants to ensure that each collection has exactly the same number of items, and no items in the same collection should share any characteristics. To achieve this, he needs a program that can partition the items into collections in a way that satisfies these requirements. **Input** The input starts with an integer N (1 le N le 1000), representing the number of items. The next line contains an integer C (1 le C le 10), representing the number of characteristics each item can have. Then, there are N lines, each describing an item. Each line starts with an integer identifier ID (1 le ID le 10000), followed by C integers { 0 le c_i le 10 }, which are the characteristics of the item. The final line of input is an integer K (1 le K le N), representing the number of items each collection should have. **Output** Output K collections, each containing exactly K item identifiers. If it\'s impossible to form the required collections, output \\"impossible\\". **Example Input** ``` 5 3 1 1 2 3 2 2 3 4 3 1 3 4 4 5 6 7 5 4 5 6 2 ``` **Example Output** ``` impossible ``` **Explanation** In this case, it\'s impossible to partition the 5 items into 2 collections where each collection contains 2 items with no overlapping characteristics. Note: The input should always be given such that it has a valid formation of items to characteristics and K value. However, it may not be possible to form valid collections due to the nature of the characteristics.","solution":"def can_partition(items, K): from itertools import combinations def check_no_overlap(items): seen = set() for item in items: if any(char in seen for char in item[1:]): return False seen.update(item[1:]) return True N = len(items) if N % K != 0: return \\"impossible\\" num_collections = N // K all_permutations = combinations(items, K) used_items = set() collections = [] for comb in all_permutations: if all(item not in used_items for item in comb) and check_no_overlap(comb): used_items.update(comb) collections.append([item[0] for item in comb]) if len(collections) == num_collections: return collections return \\"impossible\\" def partition_items(N, C, items_data, K): items = [tuple(map(int, item.split())) for item in items_data] results = can_partition(items, K) return results"},{"question":"Alice is planning to build a new garden in her backyard. She has identified N locations where she can plant trees. She wants to plant exactly M trees. Each of the N locations can hold only one tree and each location has a specific beauty value associated with planting a tree there. The beauty values are given in an array \'beauty\' of size N, where beauty[i] represents the beauty value of planting a tree at the ith location. Alice wants to maximize the sum of the beauty values of the locations where the trees are planted. Your task is to help Alice determine the maximum beauty sum she can achieve by planting M trees. Example 1: Input: N = 5, M = 2, beauty = [1, 3, 2, 5, 4] Output: 9 Explanation: Planting trees at the 2nd and 4th locations yields the maximum beauty sum of 3 + 5 = 8. Example 2: Input: N = 4, M = 1, beauty = [1, 2, 3, 4] Output: 4 Explanation: Planting a tree at the 4th location yields the maximum beauty sum of 4. Your Task: You don\'t need to read input or print anything. Complete the function maximizeBeauty(N, M, beauty) which takes N, M and an array beauty as input and returns the maximum beauty sum. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= M <= N 1 <= beauty[i] <= 10^3","solution":"def maximizeBeauty(N, M, beauty): Returns the maximum sum of beauty values by planting M trees in N locations. # Sort the array in descending order beauty.sort(reverse=True) # Sum the top M values from the sorted array return sum(beauty[:M])"},{"question":"Packing Commodities for Shipping You run a small business that ships packages to customers in different cities. Each package can contain multiple commodities, but your shipping process requires you to organize the commodities into separate groups based on their fragility level. For simplicity, we will assume there are only three fragility levels: - Fragile - Non-Fragile - Extremely Fragile Each commodity is represented by a struct or class `Commodity` that includes its name, weight, and fragility level. You need to create a function that sorts the commodities into separate lists for each fragility level and outputs the details of each group in a pre-defined format. # Input You receive a list of commodities. Each commodity contains the following properties: - `name`: the name of the commodity (string) - `weight`: the weight of the commodity (float) - `fragility`: the fragility level (one of \\"Fragile\\", \\"Non-Fragile\\", \\"Extremely Fragile\\") # Output The function should return a dictionary with three keys: `\\"Fragile\\"`, `\\"Non-Fragile\\"`, and `\\"Extremely Fragile\\"`. The value for each key should be a list of tuples, where each tuple represents a commodity with its name and weight. # Example For a given list of commodities: ```python commodities = [ Commodity(\\"Vase\\", 2.5, \\"Fragile\\"), Commodity(\\"Book\\", 1.2, \\"Non-Fragile\\"), Commodity(\\"Mirror\\", 3.0, \\"Extremely Fragile\\"), Commodity(\\"Laptop\\", 1.5, \\"Fragile\\"), Commodity(\\"Chair\\", 5.0, \\"Non-Fragile\\") ] ``` The function should return: ```python { \\"Fragile\\": [(\\"Vase\\", 2.5), (\\"Laptop\\", 1.5)], \\"Non-Fragile\\": [(\\"Book\\", 1.2), (\\"Chair\\", 5.0)], \\"Extremely Fragile\\": [(\\"Mirror\\", 3.0)] } ``` # Constraints - All commodity names are unique. - The `weight` is a positive floating-point number. - The `fragility` level is always one of the three specified levels. # Function Signature Define the function as follows: ```python def group_commodities(commodities: List[Commodity]) -> Dict[str, List[Tuple[str, float]]]: # Implementation here ```","solution":"from typing import List, Dict, Tuple class Commodity: def __init__(self, name: str, weight: float, fragility: str): self.name = name self.weight = weight self.fragility = fragility def group_commodities(commodities: List[Commodity]) -> Dict[str, List[Tuple[str, float]]]: result = { \\"Fragile\\": [], \\"Non-Fragile\\": [], \\"Extremely Fragile\\": [] } for commodity in commodities: if commodity.fragility in result: result[commodity.fragility].append((commodity.name, commodity.weight)) return result"},{"question":"There are n cities in a country, connected by n−1 bidirectional roads such that it\'s possible to travel between any two cities. Each city is uniquely numbered from 1 to n. The king of the country wants to establish a capital in one of the cities, which will make the travel from that city to any other city as efficient as possible. You are tasked to determine the optimal capital, defined as the city with the smallest maximum distance to any other city. If there are multiple cities with the same smallest maximum distance, you can choose any one of them. An optimal capital ensures that the longest distance from it to any other city is minimized. -----Input----- The first line contains one integer n (2 le n le 1000) - the number of cities. Each of the following n-1 lines contains two space-separated integers u and v (1 le u, v le n) representing a road between city u and city v. -----Output----- Output one integer, the number of the city that should be chosen as the capital. If there are multiple possible answers, any one of them will suffice. -----Example----- Input 4 1 2 2 3 2 4 Output 2 -----Note----- For the example, if the capital is city 2, the maximum distances to other cities are: 1 (city 1), 1 (city 3), and 1 (city 4). If the capital were city 1, the distances would be higher to reach cities 3 and 4. Hence, city 2 is the best choice for a capital.","solution":"import collections def optimal_capital(n, roads): def bfs(start): distances = [-1] * (n + 1) queue = collections.deque([start]) distances[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances graph = collections.defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) min_max_distance = float(\'inf\') best_city = -1 for city in range(1, n+1): distances = bfs(city) max_distance = max(distances[1:]) if max_distance < min_max_distance: min_max_distance = max_distance best_city = city return best_city"},{"question":"You are given a list of integers and a target sum. Your task is to write a program to determine if there are any two distinct elements in the list that add up to the target sum. -----Constraints----- - 2 ≤ |list| ≤ 100 (|list| denotes the length of the list.) - -10^3 ≤ element ≤ 10^3 (Each element in the list is an integer within this range.) - -10^3 ≤ target ≤ 10^3 -----Input----- Input is given from Standard Input in the following format: ``` list target ``` Here, `list` is a space-separated sequence of integers and `target` is an integer. -----Output----- Print \\"YES\\" if there are two distinct elements in the list that add up to the target sum. Otherwise, print \\"NO\\". -----Sample Input----- 1 2 4 3 5 7 -----Sample Output----- YES","solution":"def has_pair_with_sum(nums, target): Determines if there are any two distinct elements in the list that add up to the target sum. Args: nums (list of int): A list of integers. target (int): The target sum to find in the list. Returns: str: \\"YES\\" if there are two distinct elements that add up to the target sum, otherwise \\"NO\\". seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Given a string S, we define certain operations as follows: a. replace(S, c, p) denotes the string obtained by replacing all occurrences of character \'c\' in string S with another character \'p\', where \'c\' and \'p\' are any lower-case English letters. E.g.: replace(\\"banana\\", \'a\', \'o\') = \\"bonono\\" b. transpose(S, k) denotes the string obtained by swapping every k-th character with its adjacent character in string S. If S = \\"abcdef\\" and k = 2, the result is \\"badcfe\\". Given a string S, apply the operations defined above to transform it into a palindromic string (a string that reads the same backward as forward). If it is not possible to transform S into a palindrome using these operations, return \\"Not Possible\\". If multiple transformations can make S palindromic, return the lexicographically smallest one. Input Format A single line containing the string S. Constraints: S contains only lower-case English letters. The length of string S is less than or equal to 10000. Output Format A string which is palindromic or \\"Not Possible\\" if no transformation can make it palindromic. SAMPLE INPUT aabbac SAMPLE OUTPUT Not Possible Explanation There is no way to replace or transpose characters in \\"aabbac\\" to make it a palindrome. SAMPLE INPUT 2 abccba SAMPLE OUTPUT 2 abccba Explanation The string \\"abccba\\" is already a palindrome, so no transformations are needed.","solution":"def make_palindrome(S): def is_palindrome(s): return s == s[::-1] from collections import Counter count = Counter(S) odd_count = sum(1 for x in count.values() if x % 2 != 0) # If there are more than one odd character count, it\'s not possible to form a palindrome if odd_count > 1: return \\"Not Possible\\" half = [] middle = \'\' for c in sorted(count): if count[c] % 2 != 0: middle = c half.append(c * (count[c] // 2)) half_str = \'\'.join(half) return half_str + middle + half_str[::-1]"},{"question":"Reverse Array in Place Write a function called `reverseArray` (Python: `reverse_array`) that takes an array as an argument and reverses the array in place. The function should not create a new array and should instead modify the original array directly. ```if-not:csharp The function receives one parameter `arr` which is an array of integers. ``` # Example Input: ``` arr = [1, 2, 3, 4, 5] ``` Output: ``` arr = [5, 4, 3, 2, 1] ``` # Constraints - Do not use any in-built array reverse methods. - Try to accomplish the task in O(n) time complexity. - The array can have between 1 and 1000 elements.","solution":"def reverse_array(arr): Reverse the input array in place. Parameters: arr (list): The list to be reversed. Returns: None left, right = 0, len(arr) - 1 while left < right: # Swap left and right elements arr[left], arr[right] = arr[right], arr[left] # Move towards the middle left += 1 right -= 1"},{"question":"You are given a string consisting of both uppercase and lowercase English letters. You need to transform the string such that if the number of uppercase letters is greater than or equal to the number of lowercase letters, you should convert the whole string to uppercase. Otherwise, you should convert the whole string to lowercase. Write a program to achieve this transformation. -----Input----- A single line containing the string s (1 ≤ |s| ≤ 100) — the string of uppercase and lowercase English letters. -----Output----- Print the transformed string. -----Examples----- Input aBcDe Output ABCDE Input HelLO Output HELLO Input PyThon Output python -----Note----- In the first sample, the number of uppercase letters (B, D) is 2, which is not more than the number of lowercase letters (a, c, e) which is 3, so the string is converted to lowercase. In the second sample, the number of uppercase letters (H, L, O) is 3, which is more than the number of lowercase letters (e, l) which is 2, so the string is converted to uppercase.","solution":"def transform_string(s): Transforms the input string such that if the number of uppercase letters is greater than or equal to the number of lowercase letters, the whole string is converted to uppercase. Otherwise, the whole string is converted to lowercase. upper_count = sum(1 for char in s if char.isupper()) lower_count = len(s) - upper_count # Since the string only contains alphabets if upper_count >= lower_count: return s.upper() else: return s.lower()"},{"question":"Given an integer array, write a function to find and return the maximum difference between any two elements such that the larger element comes after the smaller element in the array. If no such pair exists, return -1. You must achieve this in O(n) time complexity. Example: ```python max_difference([2, 3, 10, 6, 4, 8, 1]) == 8 # (10-2) max_difference([7, 9, 5, 6, 3, 2]) == 2 # (9-7) max_difference([5, 4, 3, 2, 1]) == -1 # No valid pair exists max_difference([1, 2, 90, 10, 110]) == 109 # (110-1) ``` Function signature: ```python def max_difference(arr: List[int]) -> int: pass ``` # Constraints: - The input array will have at least two elements. - Each element in the array will be an integer within the range `[-10^9, 10^9]`.","solution":"from typing import List def max_difference(arr: List[int]) -> int: if not arr or len(arr) < 2: return -1 min_value = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_value: max_diff = max(max_diff, arr[i] - min_value) min_value = min(min_value, arr[i]) return max_diff"},{"question":"You have a grid of size n times m where each cell can either be empty or contain a coin. The grid is initially given in such a way where each cell contains a number: 0 for empty and 1 for containing a coin. Your task is to pick up the coins while adhering to the following rules: 1. You start from any cell that contains a coin. 2. In each move, you can move to a neighboring cell in the same row or column that also contains a coin. 3. Once you pick up a coin from a cell, the cell becomes empty (value becomes 0). You need to find the maximum number of coins you can pick up in one connected path starting from any coin. **Input Format:** - The first line contains an integer T (1 leq T leq 10) — the number of test cases. - The first line of each test case contains two integers n and m (1 leq n, m leq 100) — the dimensions of the grid. - The next n lines contain m integers a_{i,j} (0 leq a_{i,j} leq 1) — the values of each cell in the grid. **Output Format:** For each test case, print a single integer, the maximum number of coins that can be picked up in one connected path. **Example Input:** ``` 2 3 3 1 1 0 1 0 1 0 1 1 2 2 1 1 1 1 ``` **Example Output:** ``` 4 4 ``` **Note:** In the first test case, starting from the cell (1,1) and picking coins in the order (1,1) -> (1,2) -> (2,1), we can pick a maximum of 3 coins. Another possible path (3,2) -> (3,3) -> (2,3) also gives 3 coins. Hence, the maximum is 3. In the second test case, all coins are connected allowing for a maximum possible pickup of all 4 coins.","solution":"def dfs(grid, i, j, n, m, visited): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0 or visited[i][j]: return 0 visited[i][j] = True count = 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for direction in directions: count += dfs(grid, i + direction[0], j + direction[1], n, m, visited) return count def max_coins_collected(t, test_cases): results = [] for test_case in test_cases: n, m, grid = test_case max_coins = 0 visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: max_coins = max(max_coins, dfs(grid, i, j, n, m, visited)) results.append(max_coins) return results"},{"question":"You are working on a simulation of a warehouse. The warehouse stores items in multiple stacks. Perform a sequence of the following operations: * push(s, x): Add item x on top of the stack s. * pop(s): Remove the item on top of the stack s. If the stack is empty, do nothing. * peek(s): Print the item on top of the stack s. If the stack is empty, print \\"empty\\". Stacks are 0-indexed and empty initially. Constraints: * 1 leq m leq 1,000 (number of stacks) * 1 leq q leq 500,000 (number of queries) * 1 leq x leq 1,000,000 (item value) Input The input is given in the following format: m q query_1 query_2 ... query_q Each query query_i is given by: 0 s x (push operation) or 1 s (pop operation) or 2 s (peek operation) where the integers 0, 1 and 2 represent push, pop and peek operations respectively. Output For each peek operation, print the top item of stack s in a single line. If the stack is empty during a peek operation, print \\"empty\\". Example Input 3 10 0 0 5 0 1 10 0 2 15 2 0 2 1 2 2 1 1 2 1 1 0 2 0 Output 5 10 15 empty 5","solution":"class Warehouse: def __init__(self, m): self.stacks = [[] for _ in range(m)] def push(self, s, x): self.stacks[s].append(x) def pop(self, s): if self.stacks[s]: self.stacks[s].pop() def peek(self, s): if self.stacks[s]: return self.stacks[s][-1] else: return \\"empty\\" def process_warehouse_operations(m, q, queries): warehouse = Warehouse(m) result = [] for query in queries: if query[0] == 0: _, s, x = query warehouse.push(s, x) elif query[0] == 1: _, s = query warehouse.pop(s) elif query[0] == 2: _, s = query result.append(warehouse.peek(s)) return result"},{"question":"You are working on a financial application that needs to generate reports based on transaction data. In a part of this application, you are required to calculate the net balance for a given set of transactions over a period. Each transaction either adds to or subtracts from the account balance. A transaction is represented by a pair of values: an integer amount and a string type. The type can be either \\"credit\\" or \\"debit\\". A \\"credit\\" transaction adds the amount to the balance, while a \\"debit\\" transaction subtracts the amount from the balance. Your task is to write a function that computes the net balance after processing all the transactions. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of transactions. The next n lines each contain an integer amount and a string type separated by a space. Output Print the single integer representing the net balance after all transactions have been processed. Examples Input 3 100 credit 50 debit 10 credit Output 60 Input 4 200 credit 100 debit 50 debit 30 credit Output 80 Note In the first sample, the net balance can be calculated as follows: - Initially, the balance is 0. - After the first transaction (100 credit), the balance becomes 100. - After the second transaction (50 debit), the balance becomes 50. - After the third transaction (10 credit), the balance becomes 60. Thus, the net balance is 60. In the second sample, the net balance starts at 0 and is updated as: - 200 credit (+200) - 100 debit (-100) - 50 debit (-50) - 30 credit (+30) Resulting in a net balance of 80.","solution":"def compute_net_balance(transactions): Computes the net balance after processing all transactions. Args: transactions (list of tuples): A list of tuples, where each tuple contains an integer amount and a string type (\\"credit\\" or \\"debit\\"). Returns: int: The net balance after processing all transactions. net_balance = 0 for amount, t_type in transactions: if t_type == \\"credit\\": net_balance += amount elif t_type == \\"debit\\": net_balance -= amount return net_balance"},{"question":"Given the first 2 terms of a Geometric Sequence G1 and G2, find the N^{th} term of the sequence. Example 1: Input: G1=2 G2=6 N=3 Output: 18 Explanation: The sequence is 2, 6, 18, 54, ... Thus, the 3rd term is 18. Example 2: Input: G1=3 G2=9 N=4 Output: 81 Explanation: The sequence is 3, 9, 27, 81, 243, ... Thus, the 4th term is 81. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthTermOfGP() which takes three integers G1, G2, and N as input parameters and returns the nth term of the GP that has G1 and G2 as the first and second terms, respectively. Expected Time Complexity: O(log(N)) Expected Auxiliary Space: O(1) Constraints: -10^{4} <= G1, G2 <= 10^{4} 1 <= N <= 10^{3}","solution":"def nthTermOfGP(G1, G2, N): Returns the Nth term of a geometric progression sequence given the first two terms. Parameters: - G1: First term of the GP. - G2: Second term of the GP. - N: The position of the term to be found. Returns: - The Nth term of the GP. if N == 1: return G1 elif N == 2: return G2 else: r = G2 / G1 return G1 * (r ** (N - 1))"},{"question":"Pia and Tony are playing a game with a string. The string initially contains only lowercase English letters. They can each take turns choosing a substring of the current string and removing all instances of that substring from the string. They continue to remove substrings until no more can be removed. If the string becomes empty after a certain number of removals, Pia wins; otherwise, Tony wins. You are given the initial string. Your task is to determine whether Pia or Tony will win if both play optimally. -----Input:----- - The input will contain a single string S (1 ≤ |S| ≤ 10^5) consisting of lowercase English letters. -----Output:----- Output \\"Pia\\" if Pia will win, otherwise output \\"Tony\\". -----Constraints:----- - The string S will only contain lowercase English letters. - Both Pia and Tony play optimally and strive to win. -----Sample Input:----- aabcaa -----Sample Output:----- Pia","solution":"def determine_winner(S): Determine whether Pia or Tony will win the game given the initial string. # Count frequencies of each character in the string counts = {} for char in S: if char in counts: counts[char] += 1 else: counts[char] = 1 # Count the number of characters with odd frequencies odd_count = sum(1 for count in counts.values() if count % 2 == 1) # If the number of odd frequency characters is even or zero, Pia wins. Otherwise, Tony wins. if odd_count % 2 == 0: return \\"Pia\\" else: return \\"Tony\\""},{"question":"Input The input contains a single string S of length L (1 ≤ L ≤ 100), consisting of uppercase and lowercase letters. Output Output the string S with the order of words reversed. The words are separated by a single space. Examples Input Hello World Output World Hello Input Code Assessment Question Output Question Assessment Code Input Sample Test Case Output Case Test Sample Input Reversal Of Words Output Words Of Reversal","solution":"def reverse_words(S): Reverses the order of words in the given string S. :param S: A string consisting of uppercase and lowercase letters, and spaces. :return: A string with the order of words reversed. words = S.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Given an undirected graph with n nodes and m edges, your task is to find the number of connected components in the graph. A connected component is a set of nodes such that there is a path between any two nodes in this set, and no node in the set is connected to any node not in the set via the edges present in the graph. A graph can be represented as a list of edges, where each edge connects two nodes. You are given an integer n (the number of nodes), an integer m (the number of edges) and m pairs of integers u and v (each pair represents an edge connecting nodes u and v). Node indices are 1-based. Write a function `count_connected_components(n, m, edges)` that returns the number of connected components in the graph. Input - An integer n (1 ≤ n ≤ 10^5) — the number of nodes - An integer m (0 ≤ m ≤ 2×10^5) — the number of edges - An array `edges` of size m×2, where each element contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v Output - An integer representing the number of connected components in the graph Example ```python def count_connected_components(n, m, edges): # Function implementation goes here print(count_connected_components(6, 5, [(1, 2), (2, 3), (1, 3), (4, 5), (5, 6)])) # Output: 2 print(count_connected_components(7, 3, [(1, 2), (2, 3), (4, 5)])) # Output: 4 ``` Explanation In the first example, the graph has 6 nodes and 5 edges: (1, 2), (2, 3), (1, 3), (4, 5), and (5, 6). There are two connected components: {1, 2, 3} and {4, 5, 6}. In the second example, the graph has 7 nodes and 3 edges: (1, 2), (2, 3), and (4, 5). There are four connected components: {1, 2, 3}, {4, 5}, {6}, and {7}.","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: curr_node = queue.popleft() for neighbor in graph[curr_node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for node in range(1, n+1): if node not in visited: bfs(node) connected_components += 1 return connected_components"},{"question":"Given a list of integers, find the longest subsequence where the difference between consecutive elements is strictly increasing. Example sequence=[2, 1, 3, 2, 2, 4, 3, 5, 2] The longest increasing subsequence is [1,2,3,5] (other valid subsequences may also exist such as [1, 2, 4, 5]). Input Format The first line contains an integer, n, indicating the number of elements in the sequence. The second line contains n space-separated integers representing the elements of the sequence. Constraints 1 leq n leq 1000 -10^6 leq sequence[i] leq 10^6 Output Format Print the elements of the longest strictly increasing subsequence, each on a new line. Sample Input 0 9 2 1 3 2 2 4 3 5 2 Sample Output 0 1 2 3 5 Explanation 0 The input list is [2, 1, 3, 2, 2, 4, 3, 5, 2]. Starting from index 1 (value 1) we can obtain an increasing subsequence [1, 2, 3, 5], which is the longest one.","solution":"def longest_increasing_subsequence(sequence): Returns the longest strictly increasing subsequence. if not sequence: return [] # Initialize LIS values for all indexes lis = [[] for _ in range(len(sequence))] lis[0].append(sequence[0]) # Compute optimized LIS values in bottom-up manner for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j] and len(lis[i]) < len(lis[j]) + 1: lis[i] = lis[j].copy() lis[i].append(sequence[i]) # Find the maximum of all lis list longest = [] for subseq in lis: if len(subseq) > len(longest): longest = subseq return longest if __name__ == \\"__main__\\": n = int(input().strip()) sequence = list(map(int, input().strip().split())) result = longest_increasing_subsequence(sequence) for num in result: print(num)"},{"question":"A company has a software system that logs the times when users start and end their sessions. These logs are represented as intervals with start and end times. However, the system has a bug that can occasionally produce overlapping intervals for the same user. Your task is to write a function that merges all overlapping intervals. ----- Problem description ----- Given a list of intervals where each interval is represented as [start, end] and it is assured that start <= end, merge all overlapping intervals and return the merged list of intervals. The intervals in the input list are not sorted. ----- Input ----- The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, denoting the number of intervals. The next N lines contain two space-separated integers start and end of each interval. ----- Output ----- For each test case, print the merged intervals in increasing order of their start times. Each interval should be printed on a new line and intervals of each test case should be separated by an empty line. ----- Constraints ----- 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ start ≤ end ≤ 10^9 ----- Sample Input ----- 2 3 1 3 2 6 8 10 4 1 4 4 5 7 10 2 8 ----- Sample Output ----- 1 6 8 10 1 10 7 10","solution":"def merge_intervals(intervals): Merges all overlapping intervals. Parameters: intervals (List[List[int]]): List of intervals where each interval is represented as [start, end] Returns: List[List[int]]: Merged list of intervals ordered by their start times. if not intervals: return [] # Sort the intervals by their start time. intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: # Overlapping intervals, merge them last_merged[1] = max(last_merged[1], current[1]) else: # No overlap, add the current interval to merged list merged.append(current) return merged def process_intervals(test_cases): Processes multiple test cases and merges intervals for each test case. Parameters: test_cases (List[List[List[int]]]): A list of test cases where each test case is a list of intervals Returns: List[List[List[int]]]: Merged intervals for each test case. result = [] for intervals in test_cases: result.append(merge_intervals(intervals)) return result"},{"question":"Some products in a grocery store have a barcode with a 5-digit number. However, sometimes these barcodes have been damaged and can be partially unreadable, displayed as a string \\"XXXXX\\" where X represents either a digit (0-9) or a question mark (?) for unreadable digits. Write a program that finds all possible valid 5-digit barcodes which match the given damaged barcode. Constraints: * The input string will have exactly 5 characters. * Each character in the string will be either a digit (0-9) or a question mark (?). Input: Input is given from Standard Input in the following format: XXXXX Output: Print each valid 5-digit barcode in a separate line. Output should be sorted in numerical order. Examples: Input: 12?45 Output: 12045 12145 12245 12345 12445 12545 12645 12745 12845 12945 Input: ?234? Output: 02340 02341 02342 02343 02344 02345 02346 02347 02348 02349 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349","solution":"def find_possible_barcodes(damaged_barcode): Given a damaged barcode with digits and \'?\' for unreadable digits, return all possible valid 5-digit barcodes. from itertools import product # List to store the possible barcodes possible_barcodes = [] # Generate all combinations of digits for \'?\' for combination in product(\'0123456789\', repeat=damaged_barcode.count(\'?\')): barcode = list(damaged_barcode) combination_index = 0 for i in range(len(barcode)): if barcode[i] == \'?\': barcode[i] = combination[combination_index] combination_index += 1 possible_barcodes.append(\'\'.join(barcode)) # Sort the barcodes numerically possible_barcodes.sort() return possible_barcodes"},{"question":"A librarian at a local library wanted to implement an automated system to track the borrowing and returning of books. The system needs to maintain a list of currently borrowed books and perform various operations based on librarian queries. Each book has a unique identifier, and each librarian query is in one of the following formats: 1. \\"BORROW book_id\\" - This means a book with identifier \'book_id\' is borrowed and should be added to the list of borrowed books. 2. \\"RETURN book_id\\" - This means a book with identifier \'book_id\' is returned and should be removed from the list of borrowed books. 3. \\"QUERY book_id\\" - This means the system should check whether a book with identifier \'book_id\' is currently borrowed or not. Write a program to implement this system. For each \\"QUERY\\" operation, the program should output \\"BORROWED\\" if the book is currently borrowed or \\"AVAILABLE\\" if the book has been returned. You can assume each book identifier is unique and consists of alphanumeric characters. Input A sequence of queries where each query consists of a single string in one of the specified formats. The end of input is indicated by a single line with the word \\"END\\". Output For each \\"QUERY\\" operation, output either \\"BORROWED\\" or \\"AVAILABLE\\" on a new line. Example Input BORROW book123 BORROW book456 QUERY book123 RETURN book123 QUERY book123 QUERY book456 RETURN book456 QUERY book789 END Output BORROWED AVAILABLE BORROWED AVAILABLE","solution":"def library_system(queries): borrowed_books = set() results = [] for query in queries: if query == \\"END\\": break operation, book_id = query.split() if operation == \\"BORROW\\": borrowed_books.add(book_id) elif operation == \\"RETURN\\": borrowed_books.discard(book_id) elif operation == \\"QUERY\\": if book_id in borrowed_books: results.append(\\"BORROWED\\") else: results.append(\\"AVAILABLE\\") return results"},{"question":"Create a class `Library` with the following methods. All arguments are strings or integers, with `title` being a string and `year` being an integer. When a book is first added to the library, its title and publication year are stored. * `addBook(title, year)` returning `boolean` Adds a book to the library with the given title and publication year. Return `false` if the book already exists with a different year. * `setYear(title, year)` returning `boolean` Updates the publication year of the given book. Returns `false` if the book does not exist. * `getYear(title)` returning `integer` Returns the publication year of the given book. If the book does not exist, return `-1`. * `removeBook(title)` returning `boolean` Removes the book with the given title from the library. Returns `false` if the book does not exist. * `getBooks()` returning `array` of `string` Returns the titles of all books in the library in alphabetical order. # Example Consider the following library inventory management: ```python lib = Library() lib.addBook(\\"1984\\", 1949) # True lib.addBook(\\"Brave New World\\", 1932) # True lib.addBook(\\"1984\\", 1948) # False, because the book \\"1984\\" already exists with a different year lib.getYear(\\"1984\\") # 1949 lib.setYear(\\"1984\\", 1950) # True lib.getYear(\\"1984\\") # 1950 lib.removeBook(\\"1984\\") # True lib.getYear(\\"1984\\") # -1, because the book was removed lib.getBooks() # [\\"Brave New World\\"] ``` # Details, rules, assumptions - All book titles are case sensitive. - Book titles in the library are unique. - If attempting to add a book that already exists with a matching year, return `true`. - The initial method call to a non-existent book will follow the rules specified (e.g., returning `-1` for `getYear` or `false` for `removeBook`). - The library initially has no books. - The `getBooks` method should always return the books sorted alphabetically.","solution":"class Library: def __init__(self): self.books = {} def addBook(self, title, year): if title in self.books: if self.books[title] == year: return True else: return False self.books[title] = year return True def setYear(self, title, year): if title not in self.books: return False self.books[title] = year return True def getYear(self, title): if title not in self.books: return -1 return self.books[title] def removeBook(self, title): if title not in self.books: return False del self.books[title] return True def getBooks(self): return sorted(self.books.keys())"},{"question":"Given an array of integers A and a target integer X, your task is to create a function findQuadruplet() that finds four distinct integers in A such that their sum is equal to X. If there are multiple solutions, return any one of them. If there\'s no solution, return an empty list. Implement an efficient algorithm to accomplish this. Input Format: First line of input contains the number of test cases T. For each test case, the first line contains the number of elements in the array N and the target integer X. The second line contains N space-separated integers, representing the elements of the array A. Output Format: For each test case, print the quadruplet of integers that sum to X in a single line. If no such quadruplet exists, print an empty list. User Task: The task is to complete the function findQuadruplet() which takes the array and the target integer as parameters and returns a list of four integers that sum up to X. The printing is done by the driver code. Constraints: 1 <= T <= 100 1 <= N <= 100 -10^9 <= A[i], X <= 10^9 Example: Input: 2 6 10 1 2 3 4 5 6 7 0 0 -1 2 -3 1 4 -2 Output: [1, 2, 3, 4] [-1, 0, 1, 0] Explanation: Test case 1: Among the various possible quadruple combinations, [1, 2, 3, 4] is one such quadruple, summing to 10. Test case 2: [-1, 0, 1, 0] is among the combinations that sum to 0.","solution":"def findQuadruplet(A, X): Finds four distinct integers in A such that their sum is equal to X. Returns one such quadruplet if found, else returns an empty list. A.sort() n = len(A) for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: current_sum = A[i] + A[j] + A[left] + A[right] if current_sum == X: return [A[i], A[j], A[left], A[right]] elif current_sum < X: left += 1 else: right -= 1 return [] def handleTestCases(T, test_cases): results = [] for i in range(T): N, X = test_cases[i][0] A = test_cases[i][1] results.append(findQuadruplet(A, X)) return results"},{"question":"You are working on a project where you need to determine if a given string can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. Write a function `can_form_palindrome(s)` that takes a single argument: - `s` (a string consisting of lowercase English letters) Your function should return `True` if it is possible to rearrange the characters of the string to form a palindrome, and `False` otherwise. ------ Input ------ The input consists of a single string `s` containing 1 to 100,000 lowercase English letters. ------ Output ------ Return `True` if the input string can be rearranged to form a palindrome, otherwise return `False`. ------ Examples ------ ------ Input Format ------ \\"civic\\" ------ Output Format ------ True ------ Input Format ------ \\"ivicc\\" ------ Output Format ------ True ------ Input Format ------ \\"hello\\" ------ Output Format ------ False ------ Explanation ------ Example case 1: The input string \\"civic\\" is already a palindrome. Example case 2: The input string \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. Example case 3: The input string \\"hello\\" cannot be rearranged to form a palindrome. ------ Constraints ------ - The function should have a time complexity that is linear or close to linear with respect to the length of the string. - The space complexity of the function should be linear.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters in the string `s` can be rearranged to form a palindrome. :param s: A string consisting of lowercase English letters :return: True if the input string can be rearranged to form a palindrome, otherwise False # Count occurrences of each character char_count = Counter(s) # A string can form a palindrome if it has at most one character with an odd count odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return odd_counts <= 1"},{"question":"Sorting an array of objects by their attributes can be a common task. Your goal is to implement a `sort_objects` function which accepts a list of dictionaries representing items with certain attributes and a string representing the attribute by which to sort. Each dictionary will have the same set of keys, and the function should return the list sorted in ascending order by the specified attribute. If the attribute is not present in the dictionaries or the attribute key is invalid, return `None`. The attributes will only have values that can be compared (e.g., strings or integers). Here are some examples: ```python items = [ {\'name\': \'apple\', \'price\': 5}, {\'name\': \'banana\', \'price\': 2}, {\'name\': \'cherry\', \'price\': 7} ] sort_objects(items, \'price\') # returns [ # {\'name\': \'banana\', \'price\': 2}, # {\'name\': \'apple\', \'price\': 5}, # {\'name\': \'cherry\', \'price\': 7} # ] sort_objects(items, \'name\') # returns [ # {\'name\': \'apple\', \'price\': 5}, # {\'name\': \'banana\', \'price\': 2}, # {\'name\': \'cherry\', \'price\': 7} # ] sort_objects(items, \'weight\') # returns None sort_objects(items, 123) # returns None sort_objects(\'wrong input\', \'price\') # returns None ``` Good luck!","solution":"def sort_objects(items, attribute): Sorts a list of dictionaries by a given attribute in ascending order. Parameters: items (list): A list of dictionaries. attribute (str): The attribute to sort by. Returns: list: Sorted list of dictionaries or None if attribute is invalid. if not isinstance(items, list) or not all(isinstance(item, dict) for item in items): return None if not isinstance(attribute, str): return None if not all(attribute in item for item in items): return None return sorted(items, key=lambda x: x[attribute])"},{"question":"You are given an array of integers and a target integer value. Your task is to determine if there are three distinct integers within the array that add up to the target value. If such a combination exists, return `true`, otherwise return `false`. Input - The first line contains an integer n, the length of the array (3 ≤ n ≤ 10,000). - The second line contains n integers, the elements of the array (-10,000 ≤ each element ≤ 10,000). - The third line contains an integer target (-30,000 ≤ target ≤ 30,000). Output - Output `true` if there are three distinct integers in the array that sum to the target value. - Otherwise, output `false`. Example 1 Input 6 -1 2 3 0 -4 1 2 Output true Explanation: The combination (-1, 2, 1) sums to 2. Example 2 Input 4 1 2 3 4 10 Output false Explanation: No combination of three distinct integers sums to 10.","solution":"def three_sum(nums, target): nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: summation = nums[i] + nums[left] + nums[right] if summation == target: return True elif summation < target: left += 1 else: right -= 1 return False"},{"question":"You are given two strings, `message` and `pattern`. Your task is to determine if it is possible to delete some (possibly zero) characters from the `message` string to create the `pattern` string. Characters must appear in the same order in both strings, but they do not have to be contiguous in the `message`. For instance, consider the `message` string `abpcplea` and the `pattern` string `apple`. By deleting characters `b`, `c` and extra `p` from `message`, we can convert it to `apple`, which is the same as the `pattern`. Write a function that takes two strings `message` and `pattern` as parameters and returns the word \\"YES\\" if it is possible to obtain the `pattern` from `message`, and \\"NO\\" otherwise. # Function Signature ```python def can_form_pattern(message: str, pattern: str) -> str: ``` # Input - `message`: A string of length `1 <= |message| <= 10^4` consisting of lowercase English letters. - `pattern`: A string of length `1 <= |pattern| <= 10^4` consisting of lowercase English letters. # Output Return \\"YES\\" if the `pattern` can be obtained by deleting some characters from `message`, otherwise return \\"NO\\". # Example ```python print(can_form_pattern(\\"abpcplea\\", \\"apple\\")) # Output: \\"YES\\" print(can_form_pattern(\\"hello\\", \\"world\\")) # Output: \\"NO\\" print(can_form_pattern(\\"abcdef\\", \\"ace\\")) # Output: \\"YES\\" ``` # Explanation Example 1 The `pattern` string \\"apple\\" can be formed from `message` string \\"abpcplea\\" by deleting \'b\', \'c\', and one \'p\'. Example 2 The `pattern` string \\"world\\" cannot be formed from `message` string \\"hello\\". Example 3 The `pattern` string \\"ace\\" can be formed from `message` string \\"abcdef\\" by deleting \'b\', \'d\' and \'f\'.","solution":"def can_form_pattern(message: str, pattern: str) -> str: Determines if the pattern can be formed by deleting some characters from the message. Parameters: message (str): The original string. pattern (str): The target pattern string. Returns: str: \\"YES\\" if pattern can be obtained from message, otherwise \\"NO\\". j = 0 # Pointer for pattern for char in message: if j < len(pattern) and char == pattern[j]: j += 1 if j == len(pattern): return \\"YES\\" return \\"NO\\""},{"question":"You are given an n times m grid of positive integers. Each cell of the grid has a height value representing the height of that cell. You can move to an adjacent cell in one of the four possible directions (left, right, up, down) and the cost of moving from one cell to another is the absolute difference in their heights. You need to determine the minimum possible cost to travel from the top-left cell (1, 1) to the bottom-right cell (n, m). -----Input----- The first line contains two positive integers n and m (1 leq n, m leq 1000), which represent the number of rows and columns of the grid, respectively. The next n lines each contain m positive integers separated by spaces, where the j-th integer in the i-th line represents the height of the cell at (i, j) (1 leq height leq 10^6). -----Output----- Print a single integer representing the minimum possible cost to travel from the top-left cell to the bottom-right cell. -----Examples----- Input 3 3 1 3 5 2 8 2 4 6 1 Output 5 Input 2 2 1 2 3 4 Output 3 -----Note----- In the first test case, the optimal path is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) with cost |1-2| + |2-4| + |4-6| + |6-1| = 1 + 2 + 2 + 5 = 10. In the second test case, the optimal path is: (1,1) -> (1,2) -> (2,2) with cost |1-2| + |2-4| = 1 + 2 = 3.","solution":"import heapq def min_path_cost(grid): n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] pq = [(0, 0, 0)] # (cost, x, y) costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = 0 while pq: cost, x, y = heapq.heappop(pq) if x == n-1 and y == m-1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = cost + abs(grid[nx][ny] - grid[x][y]) if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return -1 # in theory, we should never reach here # Example usage: grid1 = [ [1, 3, 5], [2, 8, 2], [4, 6, 1] ] print(min_path_cost(grid1)) # Output: 8 grid2 = [ [1, 2], [3, 4] ] print(min_path_cost(grid2)) # Output: 3"},{"question":"# Word Permutations Given a string text{S}, write a function that generates all permutations of the characters in the string and returns them as a sorted list. Input Format A single line of input containing the string text{S}. Constraints - 1 leq text{len(S)} leq 9 - The string will contain unique characters (no repeated characters) Output Format Return a sorted list of all permutations of the given string. Sample Input 1 ``` abc ``` Sample Output 1 ``` [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` Sample Input 2 ``` bac ``` Sample Output 2 ``` [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` Explanation In the first input example, the permutations of \\"abc\\" are computed and returned in a sorted order. In the second input example, although the input sequence is \\"bac\\", the output will be the same as that for \\"abc\\", given that it is sorted after generating all permutations.","solution":"from itertools import permutations def generate_permutations(s): Returns all permutations of the string `s` sorted in lexicographical order. perm = [\'\'.join(p) for p in permutations(s)] return sorted(perm)"},{"question":"Tod loves to create interesting patterns with stars. He challenges you to generate a specific star pattern based on an input number. You are given an integer N (1 ≤ N ≤ 50). Your task is to print an N x N square made of asterisks (‘*’) with a hollow center. The border of the square should be filled with asterisks, and the interior should be empty. For example: SAMPLE INPUT 5 SAMPLE OUTPUT ***** * * * * * * ***** INPUT 3 OUTPUT *** * * *** Explanation: For N = 5, you create a 5x5 square as follows: * You print 5 asterisks for the top border. * For the middle 3 lines, you print an asterisk, followed by 3 spaces, then another asterisk. * You print 5 asterisks for the bottom border. For N = 3, you create a 3x3 square as follows: * You print 3 asterisks for the top border. * For the middle line, you print an asterisk, followed by a space, then another asterisk. * You print 3 asterisks for the bottom border.","solution":"def hollow_square(N): Create an N x N square made of asterisks (‘*’) with a hollow center. if N == 1: return \\"*\\" result = [] for i in range(N): if i == 0 or i == N - 1: result.append(\'*\' * N) else: result.append(\'*\' + \' \' * (N - 2) + \'*\') return \'n\'.join(result)"},{"question":"In a remote village, the villagers are planning a festival. To decorate the village, they want to set up a number of banners. Each banner requires a certain number of poles to hold it up, and they want to set up the banners in such a manner that no banner overlaps with another. You are given a list of pairs where each pair represents the start and end positions of the banners along a straight line. The task is to determine the maximum number of non-overlapping banners that can be set up. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of banners. The next n lines each contain two space-separated integers s and t (0 ≤ s < t ≤ 109), representing the start and end positions of each banner. Output Print a single integer which is the maximum number of non-overlapping banners that can be set up. Examples Input 5 1 3 2 5 7 10 9 13 11 15 Output 3 Input 4 0 2 1 4 3 5 4 6 Output 2 Note In the first example, the maximum number of non-overlapping banners that can be set up are those starting and ending at positions (1, 3), (7, 10), and (11, 15). The banners starting and ending at (2, 5) and (9, 13) overlap with some of the chosen banners. In the second example, the banners starting and ending at positions (0, 2) and (3, 5) can be set up without overlapping any other banners. Any other combination would result in less than 2 banners.","solution":"def max_non_overlapping_banners(n, banners): Determine the maximum number of non-overlapping banners that can be set up. :param n: Integer, the number of banners. :param banners: List of tuples, each containing two integers representing the start and end positions of a banner. :return: Integer, the maximum number of non-overlapping banners. # Sorting banners based on their end positions (greedy approach) banners.sort(key=lambda x: x[1]) max_banners = 0 current_end = -1 for start, end in banners: if start >= current_end: max_banners += 1 current_end = end return max_banners"},{"question":"Alice is a keen gardener who loves arranging her garden. She has N flowering plants that she wants to arrange in a row for maximum aesthetic appeal. She believes that the beauty of her garden is maximized if the heights of the flowers form a \\"zigzag\\" pattern. This means that for any three consecutive flowers, the middle one should either be strictly taller than the other two or strictly shorter than the other two. You are given an array `heights` of integers representing the height of each plant. Determine if it is possible to rearrange these flower heights to form a zigzag pattern. ------ Input: ------ The first line contains an integer N (1 ≤ N ≤ 10^5) indicating the number of flowering plants. The second line contains N integers representing the heights of the plants. Each integer height h (1 ≤ h ≤ 10^9). ------ Output: ------ Print \\"YES\\" if it is possible to rearrange the heights to form a zigzag pattern, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ height ≤ 10^9 ----- Sample Input 1 ------ 5 4 3 7 8 2 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 3 1 2 2 ----- Sample Output 2 ------ NO ----- explanation 1 ------ In the first sample, rearranging the heights to [3, 7, 4, 8, 2] will form a zigzag pattern: 3 < 7 > 4 < 8 > 2. In the second sample, it\'s not possible to rearrange heights to form a zigzag pattern regardless of the permutation.","solution":"def can_form_zigzag(heights): Determines if it is possible to rearrange the heights to form a zigzag pattern. n = len(heights) if n == 1: return \\"YES\\" heights.sort() zigzag = [0] * n # Place smaller half first and larger half second left = 0 right = n - 1 for i in range(0, n, 2): if left <= right: zigzag[i] = heights[left] left += 1 if i + 1 < n and left <= right: zigzag[i + 1] = heights[right] right -= 1 # Check for zigzag property for i in range(1, n - 1): if not ((zigzag[i] > zigzag[i-1] and zigzag[i] > zigzag[i+1]) or (zigzag[i] < zigzag[i-1] and zigzag[i] < zigzag[i+1])): return \\"NO\\" return \\"YES\\""},{"question":"You are developing a simple e-commerce platform. One of the key features you need to implement is a discount system on items when a customer purchases them in bulk. The discount structure is as follows: - Buy 100 or more: 20% discount - Buy 50 to 99: 10% discount - Buy 20 to 49: 5% discount - Less than 20: no discount Write a function that accepts the price of a single item and the quantity purchased. It should return the total price after applying the appropriate discount. The returned value should be rounded to two decimal places. For example, if the item price is 12.00 and the quantity is 60, the function should return 648.00 (applying a 10% discount).","solution":"def calculate_total_price(price_per_item, quantity): Calculates the total price after applying the appropriate discount based on quantity purchased. Args: price_per_item (float): The price of a single item. quantity (int): The quantity of items purchased. Returns: float: The total price after discount, rounded to two decimal places. if quantity >= 100: discount = 0.20 elif quantity >= 50: discount = 0.10 elif quantity >= 20: discount = 0.05 else: discount = 0.00 total_price = price_per_item * quantity * (1 - discount) return round(total_price, 2)"},{"question":"Create a program that generates a \\"downward angle triangle pattern\\" where the triangle is right-aligned and filled with a sequence of letters from A to Z. * If the height of the triangle is n, it is displayed as n rows. * Each row i contains the first i letters of the alphabet right-aligned. * The letters should restart from A after reaching Z. Create a program that takes an integer n as an input and outputs a \\"downward angle triangle pattern\\" with height n. Input: The input is given in the following format: d n1 n2 :: nd The number of datasets d (d ≤ 20) is given in the first line, and the height ni (1 ≤ ni ≤ 100) of the i-th triangle is given in each of the following d lines. Output: Please output a downward angle triangle pattern for each dataset. Insert a blank line between the datasets. Example: Input 2 5 4 Output A AB ABC ABCD ABCDE A AB ABC ABCD","solution":"def generate_triangle_patterns(d, heights): Generates downward angle triangle pattern for given heights. Parameters: d (int): Number of datasets. heights (list of int): List containing the height (n) of each triangle. Returns: str: String containing all the triangle patterns. alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" results = [] for height in heights: pattern = [] max_width = height for i in range(1, height + 1): row = alphabet[:i] right_aligned_row = row.rjust(max_width) pattern.append(right_aligned_row) results.append(\\"n\\".join(pattern)) return \\"nn\\".join(results) def process_input(input_text): Processes the text input to extract the number of datasets and respective heights lines = input_text.strip().split(\\"n\\") d = int(lines[0]) heights = [int(lines[i]) for i in range(1, d + 1)] return d, heights def main(input_text): d, heights = process_input(input_text) return generate_triangle_patterns(d, heights)"},{"question":"Given a list of daily stock prices for a certain stock, determine the maximum profit possible if you are allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). You must buy before you sell. Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e., max profit = 0. Note: 1. The length of prices array will be at least 2 and will not exceed 10,000. 2. All prices are positive integers.","solution":"def max_profit(prices): Calculates the maximum profit that can be achieved from buying and selling a single stock. :param prices: List of prices :return: Maximum profit if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Consider a histogram made up of rectangles of the same width but different heights. You are given an array that represents the heights of these rectangles in order, from left to right. Write a function `largestRectangleArea(heights)` that takes an array `heights` and returns the area of the largest rectangle that can be formed using one or more contiguous rectangles from the histogram. # Examples: `largestRectangleArea([2, 1, 5, 6, 2, 3])` should return `10`, which is the rectangle formed by heights `[5, 6]`. `largestRectangleArea([1, 1, 1, 1, 1, 1])` should return `6`, which is the rectangle formed by all the heights `[1, 1, 1, 1, 1, 1]`. # Note: - The width of each rectangle is 1 unit. - The input array will have at least one element and at most 10000 elements.","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can be formed using one or more contiguous rectangles from the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a positive integer N, determine whether N has all unique digits or not. If N has all unique digits, return \\"Yes\\", otherwise return \\"No\\". Example 1: Input: N = 12345 Output: Yes Explanation: All digits are unique. Example 2: Input: N = 112345 Output: No Explanation: Digit \'1\' is repeated. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `hasUniqueDigits()` which takes an integer N as input and returns a string \\"Yes\\" or \\"No\\" based on the unique digit check. Expected Time Complexity: O(logN) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^9","solution":"def hasUniqueDigits(N): Determines whether the input integer N has all unique digits or not. Parameters: N (int): The input positive integer Returns: str: \\"Yes\\" if N has all unique digits, otherwise \\"No\\" digit_seen = [False] * 10 # Tracks the occurrence of each digit (0-9) while N > 0: digit = N % 10 # Extract the last digit if digit_seen[digit]: # Check if this digit was seen before return \\"No\\" digit_seen[digit] = True # Mark this digit as seen N //= 10 # Remove the last digit from N return \\"Yes\\""},{"question":"Given a string s and an array p of the same length. The array p indicates the number of unique characters that should be in the substring starting from the beginning of s for that length of the substring. Your task is to determine whether the string s meets the conditions described by p for all substrings from length 1 to the length of s. Return True if s meets the conditions described by p for all substrings, otherwise return False. Example 1: Input: s = \\"abac\\", p = [1, 2, 2, 3] Output: true Explanation: For substring \\"a\\", the number of unique characters is 1. (Matches p[0]) For substring \\"ab\\", the number of unique characters is 2. (Matches p[1]) For substring \\"aba\\", the number of unique characters is 2. (Matches p[2]) For substring \\"abac\\", the number of unique characters is 3. (Matches p[3]) Example 2: Input: s = \\"abac\\", p = [1, 3, 2, 3] Output: false Explanation: For substring \\"ab\\", the number of unique characters is 2. (Does not match p[1]) Example 3: Input: s = \\"aaa\\", p = [1, 1, 1] Output: true Explanation: For substring \\"a\\", the number of unique characters is 1. (Matches p[0]) For substring \\"aa\\", the number of unique characters is 1. (Matches p[1]) For substring \\"aaa\\", the number of unique characters is 1. (Matches p[2]) Constraints: - The string s consists of only lowercase English letters. - 1 <= len(s) <= 10^5 - p.length == len(s) - 1 <= p[i] <= 26","solution":"def does_string_meet_conditions(s, p): Determine whether the string `s` meets the conditions described by array `p` for all substrings from length 1 to the length of `s`. Args: s (str): String of lowercase English letters. p (list): List of integers where each element p[i] indicates the number of unique characters in the substring corresponding to s[:i+1]. Returns: bool: True if the string meets the conditions for all substrings, otherwise False. for i in range(len(s)): if len(set(s[:i+1])) != p[i]: return False return True"},{"question":"You are given an integer array `nums` of size `n`. Find a permutation of the array such that the sum of the maximum and minimum element in each contiguous subarray of length `3` is maximized. If there are multiple permutations that achieve the maximum sum, return any of them. Input - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. - The first line of each test case contains a single integer `n` (3 ≤ n ≤ 1000). - The second line of each test case contains `n` integers `nums_1, nums_2, ..., nums_n` (1 ≤ nums_i ≤ 10^5). Output For each test case, output `n` integers — one possible permutation of the array that maximizes the sum of the maximum and minimum element in each contiguous subarray of length `3`. Example Input 2 3 3 1 2 4 1 4 3 2 Output 3 1 2 4 1 3 2 Note In the first test case, for the permutation [3, 1, 2]: - The subarray [3, 1, 2] has maximum 3 and minimum 1. The sum is 3 + 1 = 4. In the second test case, for the permutation [4, 1, 3, 2]: - The subarray [4, 1, 3] has maximum 4 and minimum 1. The sum is 4 + 1 = 5. - The subarray [1, 3, 2] has maximum 3 and minimum 1. The sum is 3 + 1 = 4. Thus the total sum of maximum and minimum elements for all subarrays of length 3 is 5 + 4 = 9.","solution":"def maximize_subarray_sum(t, test_cases): results = [] for case in test_cases: n = case[0] nums = case[1] if n == 3: # If there are only 3 elements, return them as the only permutation possible results.append(nums) else: # Sort the array to get max and min positions clearer nums.sort(reverse=True) result = [] # Follow the pattern max, min, max from sorted array to maximize results for i in range(n): if i % 2 == 0: result.append(nums[i//2]) else: result.append(nums[-(i//2 + 1)]) results.append(result) return results"},{"question":"A software company is developing a new data analysis tool. One of the features they want to include is the ability to detect if a dataset (represented by an array of integers) contains a contiguous subarray which sums up to a given target value. You are tasked with implementing this feature. Write a function to determine if there exists at least one contiguous subarray of the given array that sums to the target value. If such a subarray exists, return \\"YES\\". Otherwise, return \\"NO\\". -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9). The second line contains n space-separated integers a_1, a_2, ..., a_{n} where each integer in the array (|a_i| ≤ 10^4). -----Output----- Print \\"YES\\" if there is a contiguous subarray that sums to k, otherwise print \\"NO\\". -----Examples----- Input 5 15 1 2 3 4 5 Output YES Input 5 9 1 2 3 4 5 Output YES Input 5 20 1 2 3 4 5 Output NO Input 4 -10 -1 -2 -3 -4 Output YES -----Note----- In the first and second samples, the contiguous subarrays [1, 2, 3, 4, 5] and [2, 3, 4] sum up to the target value 15 and 9 respectively, so the output is \\"YES\\". In the third sample, there is no contiguous subarray that sums to 20. In the fourth sample, the subarray [-2, -3, -4] sums to -9, which is equal to the target value -10, so the output is \\"YES\\".","solution":"def find_contiguous_subarray(n, k, arr): Returns \\"YES\\" if there exists a contiguous subarray in `arr` that sums to `k`, otherwise \\"NO\\". curr_sum = 0 prefix_sum_map = {} for i in range(n): curr_sum += arr[i] if curr_sum == k: return \\"YES\\" if (curr_sum - k) in prefix_sum_map: return \\"YES\\" prefix_sum_map[curr_sum] = i return \\"NO\\""},{"question":"Alice loves to go on hiking trips and often carries multiple backpacks. Alice has N backpacks that can carry up to 10 kg each and M backpacks that can carry up to 15 kg each. Given the number of backpacks and the weight limit for each type, determine the maximum weight Alice can carry in total. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - The first line of each test case contains two space-separated integers N and M — the number of 10-kg backpacks and 15-kg backpacks, respectively. ------ Output Format ------ For each test case, output on a new line the maximum weight Alice can carry. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ N,M ≤ 100 ----- Sample Input 1 ------ 4 3 5 7 2 10 10 0 8 ----- Sample Output 1 ------ 105 100 250 120 ----- explanation 1 ------ Test case 1: Alice has 3 backpacks that can carry 10 kg each and 5 backpacks that can carry 15 kg each. So, 3times 10 + 5times 15 = 105 kg can be carried. Test case 2: Alice has 7 backpacks that can carry 10 kg each and 2 backpacks that can carry 15 kg each. So, 7times 10 + 2times 15 = 100 kg can be carried. Test case 3: Alice has 10 backpacks that can carry 10 kg each and 10 backpacks that can carry 15 kg each. So, 10times 10 + 10times 15 = 250 kg can be carried. Test case 4: Alice has 0 backpacks that can carry 10 kg each and 8 backpacks that can carry 15 kg each. So, 0times 10 + 8times 15 = 120 kg can be carried.","solution":"def maximum_weight(T, test_cases): Returns the maximum weight Alice can carry for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains two integers N and M Returns: list of int: Maximum weights for each test case result = [] for N, M in test_cases: max_weight = (N * 10) + (M * 15) result.append(max_weight) return result"},{"question":"Given a string of lowercase characters. Your task is to remove duplicate characters from the string while maintaining the order of their first occurrence. Example 1: Input: \\"programming\\" Output: \\"progamin\\" Example 2: Input: \\"mississippi\\" Output: \\"misp\\" Your Task: Your task is to complete the function removeDuplicates(), which takes a string as input and returns the modified string with duplicates removed. The order of characters in the resulting string should be the same as their first occurrence in the given input string. The printing and verification are done by the driver code. Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(1), not including the space required for the input and output strings. Constraints: 1 <= length of the string <= 10^4","solution":"def removeDuplicates(s): Removes duplicate characters from the string while maintaining the order of their first occurrence. Parameters: s (str): The input string of lowercase characters. Returns: str: Modified string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are given an integer array A of length N and an integer K. Your task is to split the array into K non-empty contiguous subarrays such that the sum of the maximum subarray sums is minimized. In other words, split the array into K contiguous subarrays and find their sums. Then, find the maximum of these sums and output the minimum possible value of this maximum sum. ------ Input Format ------ - The first line of the input contains a single integer T, the number of test cases. The description of the test cases follows. - The first line of each test case contains two integers N and K — the number of integers and the number of subarrays. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output Format ------ For each test case, output a single integer — the minimum possible value of the maximum subarray sum. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 0 ≤ A_i ≤ 10^9 ----- Sample Input 1 ------ 2 7 3 5 3 1 2 6 8 2 5 2 1 2 3 4 5 ----- Sample Output 1 ------ 11 9 ----- Explanation 1 ------ Test case 1: The optimal way to split the array [5, 3, 1, 2, 6, 8, 2] into 3 subarrays is [5, 3], [1, 2, 6], and [8, 2]. This gives subarray sums [8, 9, 10] and the maximum of these sums is 10. No other split into 3 subarrays will give a smaller maximum subarray sum. Test case 2: The optimal way to split the array [1, 2, 3, 4, 5] into 2 subarrays is [1, 2, 3] and [4, 5]. This gives subarray sums [6, 9] and the maximum of these sums is 9. No other split into 2 subarrays will give a smaller maximum subarray sum.","solution":"def min_max_subarray_sum(A, N, K): def can_split(mid): count = 1 current_sum = 0 for num in A: if current_sum + num <= mid: current_sum += num else: count += 1 current_sum = num if count > K: return False return True left, right = max(A), sum(A) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left def process_test_cases(T, cases): results = [] for case in cases: N, K, A = case results.append(min_max_subarray_sum(A, N, K)) return results"},{"question":"Emilia loves solving problems involving arrays and sequence manipulation. She\'s designed a special sequence transformation algorithm and needs your help to implement it. Given an integer array `arr`, Emilia\'s algorithm finds the longest contiguous subarray where all elements are of the same value, and then it compresses this subarray by replacing all its elements with a single instance of that value, effectively reducing the size of the original array. The transformation is done iteratively until no further compression is possible. Your task is to determine the final reduced array after applying Emilia\'s sequence transformation algorithm. # Input - The first line contains an integer `T` (1 leq T leq 100), the number of test cases. - Each test case is represented in two lines: - The first line contains a single integer n (1 leq n leq 10^5), the length of the array. - The second line contains n integers, each denoted by arr_i (1 leq arr_i leq 10^5), representing the elements of the array. # Output For each test case, output a single line containing the reduced array after applying Emilia\'s sequence transformation algorithm. # Example Input ``` 3 7 1 1 2 2 2 3 3 5 4 4 4 4 4 8 1 1 2 3 3 3 2 2 ``` Output ``` 1 2 3 4 1 2 3 2 ``` # Note In the first example: - The longest contiguous subarray in the initial array [\\"1, 1, 2, 2, 2, 3, 3\\"] is [\\"2, 2, 2\\"]. It is replaced by a single \\"2\\" resulting in [\\"1, 1, 2, 3, 3\\"]. - The longest contiguous subarray now is [\\"1, 1\\"]. It is replaced by a single \\"1\\" resulting in [\\"1, 2, 3, 3\\"]. - The longest contiguous subarray now is [\\"3, 3\\"]. It is replaced by a single \\"3\\" resulting in [\\"1, 2, 3\\"]. In the second example: - The input array is [\\"4, 4, 4, 4, 4\\"]. Here, [\\"4, 4, 4, 4, 4\\"] is the longest contiguous subarray and is replaced to get [\\"4\\"]. In the third example: - The initial transformations are [\\"1, 1, 2, 3, 3, 3, 2, 2\\"] -> [\\"1, 2, 3, 2, 2\\"] -> [\\"1, 2, 3, 2\\"].","solution":"def reduce_array(arr): n = len(arr) reduced_arr = [] i = 0 while i < n: current_value = arr[i] j = i while j < n and arr[j] == current_value: j += 1 reduced_arr.append(current_value) i = j return reduced_arr def emilias_algorithm(T, test_cases): results = [] for case in test_cases: n, arr = case while True: new_arr = reduce_array(arr) if new_arr == arr: break arr = new_arr results.append(new_arr) return results"},{"question":"A local pastry shop has asked you to help them with inventory management. They receive daily reports from their staff about the number of pastries in stock at the end of each day. The inventory information is stored in an array, where each element is a string containing the pastry name and the quantity, separated by a space. Occasionally, there might be pastries that didn\'t sell at all during the day, and these will also appear in the reports with a quantity of zero. Here\'s an example of an input array: ``` [\\"Croissant 10\\", \\"Donut 5\\", \\"Eclair 0\\", \\"Muffin 7\\", \\"Croissant 3\\", \\"Donut 8\\", \\"Muffin 0\\"] ``` Objective Your function should process this data and return a summary of the total quantities for each type of pastry. Pastries with a total quantity of zero should not appear in the output. Input An array of strings, where each string contains a pastry name and a quantity, separated by a space. Processing - Sum the quantities for each pastry. - Exclude any pastries with a total quantity of zero from the final summary. Output An array of strings, where each string contains the pastry name and the total quantity, separated by a space. The output array should be sorted alphabetically by the pastry name. For the example input above, your function should return: ``` [\\"Croissant 13\\", \\"Donut 13\\", \\"Muffin 7\\"] ``` # Special Notes - The pastry names will always be single words. - Quantities will always be non-negative integers.","solution":"def summarize_pastry_inventory(inventory): Summarizes the total quantities of each type of pastry from the inventory list. Parameters: inventory (list of str): A list of strings where each string contains a pastry name and a quantity, separated by a space. Returns: list of str: A list of strings where each string contains the pastry name and the total quantity, sorted alphabetically by the pastry name. pastry_counts = {} for item in inventory: pastry, quantity = item.split() quantity = int(quantity) if pastry in pastry_counts: pastry_counts[pastry] += quantity else: pastry_counts[pastry] = quantity # Filter out pastries with a total quantity of zero result = [f\\"{pastry} {quantity}\\" for pastry, quantity in pastry_counts.items() if quantity > 0] # Sort result alphabetically by pastry name result.sort() return result"},{"question":"You have a rectangular grid of size n times m where n represents the number of rows and m represents the number of columns. Each cell in this grid is initially empty but you can place obstacles on some of the cells. The task is to determine if you can place the obstacles such that no two obstacles are on the same row or column, and the grid still satisfies some constraints described below: You are given k constraints, where each constraint is a pair of integers (r_i, c_i) indicating that the cell (r_i, c_i) must have an obstacle. For each test case, determine if it’s possible to place the obstacles on the grid such that each constraint is satisfied and no two obstacles share a row or column. -----Input----- The first line of the input contains a single integer t (1 le t le 10^4) — the number of test cases. The description of test cases follows. The first line of each test case contains three integers n, m and k (1 le n, m le 10^3, 0 le k le min(n, m)) — the number of rows, columns, and constraints respectively. The following k lines contain two integers r_i and c_i (1 le r_i le n, 1 le c_i le m) — the row and column indices of a constraint. -----Output----- For each test case, print a single line with the word \\"YES\\" if it’s possible to place the obstacles satisfying the constraints and \\"NO\\" otherwise. -----Examples----- Input 2 3 3 2 1 1 2 2 3 2 3 1 1 2 2 2 3 Output YES NO -----Note----- In the first test case, it\'s possible to place the obstacles on cells (1,1) and (2,2) without any issues, and no other obstacles are needed. In the second test case, placing obstacles on (1,1), (2,2), and (2,3) would violate the rule of having no two obstacles in the same row, so the answer is \\"NO\\".","solution":"def can_place_obstacles(t, test_cases): results = [] for i in range(t): n, m, k = test_cases[i][0] constraints = test_cases[i][1] if k == 0: results.append(\\"YES\\") continue rows_set = set() cols_set = set() valid = True for r, c in constraints: if r in rows_set or c in cols_set: valid = False break rows_set.add(r) cols_set.add(c) if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Task You need to write a function named **decrypt_message** that takes a single string argument. The string consists of lowercase letters and spaces only. Each letter in the string is encrypted by shifting it 3 places forward in the alphabet, and spaces should remain unchanged. Your task is to decrypt this message back to its original form. Details: - The input string will only contain lowercase letters (\'a\'-\'z\') and spaces. - The shift is cyclic, so \'a\' shifted backward by 3 positions gives \'x\'. - Spaces remain unchanged. Function Signature: ```python def decrypt_message(encrypted_message: str) -> str: pass ``` Examples: decrypt_message(\\"khoor zruog\\"): Returns: \\"hello world\\" decrypt_message(\\"sbwkrq lv ixq\\"): Returns: \\"python is fun\\" ```Hint: To handle the cyclic nature of the alphabet, you may use the modulo operation ```","solution":"def decrypt_message(encrypted_message: str) -> str: decrypted_message = [] for char in encrypted_message: if char == \' \': decrypted_message.append(char) else: decrypted_char = chr(((ord(char) - 3) - ord(\'a\')) % 26 + ord(\'a\')) decrypted_message.append(decrypted_char) return \'\'.join(decrypted_message)"},{"question":"Write a function that takes a string of integers (0-9) and returns the largest number that can be formed by concatenating a subset of the given integers, without repeating any integer. The resulting number should not have leading zeros unless the number itself is zero. Constraints: * The input string contains only digits from \'0\' to \'9\'. * The input string length is between 1 and 10, inclusive. Input: A single string containing the digits. Output: A single integer representing the largest number that can be formed. Example: Input: \\"012345\\" Output: 543210 Input: \\"3021\\" Output: 3210 Input: \\"00000\\" Output: 0","solution":"def largest_number(s): Returns the largest number that can be formed by concatenating a subset of the given integers without repeating any integer. # Convert string to a set to remove duplicates and then sort in descending order unique_digits = sorted(set(s), reverse=True) # Join the sorted unique digits into a string largest_num_str = \'\'.join(unique_digits) # Convert the result to an integer to remove any leading zero effect return int(largest_num_str)"},{"question":"Statement: Emily is a librarian who is organizing a list of books based on their popularity. She has a sequence of ratings for different books and she wants to ensure that every book with a higher rating appears earlier in the list than any book with a lower rating. Additionally, if two books have the same rating, they should maintain their relative order as in the original sequence (i.e., they should be stable). Please help Emily to sort the books according to the given constraints. Input: - The first line of the input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of books. - The second line contains N integers, representing the ratings of the books. Output: For each test case, output a single line containing the sorted list of ratings. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Rating ≤ 1000 Note: The order of books with the same rating must be preserved (stability). SAMPLE INPUT 2 5 5 2 9 9 5 4 1 3 2 2 SAMPLE OUTPUT 9 9 5 5 2 3 2 2 1 Explanation In the above sample input, For the 1st case, the sorted ratings should be 9 9 5 5 2. For the 2nd case, the sorted ratings should be 3 2 2 1. Note how the relative order of the books with the same ratings (2 in this case) has been preserved.","solution":"def sort_books_by_popularity(T, test_cases): Sorts books based on their ratings for each test case and returns a list of sorted ratings. Higher ratings appear earlier and the relative order of books with the same rating is preserved. results = [] for i in range(T): N = test_cases[i][0] ratings = test_cases[i][1] sorted_ratings = sorted(ratings, key=lambda x: -x) results.append(sorted_ratings) return results"},{"question":"Petya has a binary grid of size n x m (1 ≤ n, m ≤ 1000). Each cell of the grid can either be 0 (empty) or 1 (blocked). Petya wants to navigate from the top-left corner (1, 1) to the bottom-right corner (n, m). The movement is only allowed to adjacent cells in the grid (top, bottom, left, right). Write a program to check if there exists a path from the top-left corner to the bottom-right corner, and if so, print one such path. If multiple paths exist, returning any one of them is sufficient. If no path exists, print -1. Input The first line contains two integers n and m — the number of rows and columns in the grid, respectively. The next n lines each contain m integers (0 or 1), describing the grid. Output If there is no path from the top-left corner to the bottom-right corner, print -1. If a path exists, print the sequence of coordinates to follow from (1, 1) to (n, m) such that you move through only zero-valued cells. Each coordinate must be printed in a new line in the form \\"row column\\". Examples Input 4 4 0 1 0 0 0 1 0 1 0 0 0 0 1 1 1 0 Output 1 1 2 1 3 1 3 2 3 3 3 4 4 4 Input 3 3 0 1 0 1 1 0 0 0 0 Output -1 Note In the first sample, the path goes from (1,1) to (1,2) to (1,3) to (2,3), and then along the last row to the bottom-right corner. If found, multiple paths can follow from valid options. In the second sample, it is impossible to navigate from the top-left corner to the bottom-right corner as there is no path through the empty cells.","solution":"def find_path(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def backtrack(x, y): if (x, y) == (n-1, m-1): path.append((x + 1, y + 1)) return True grid[x][y] = 1 path.append((x + 1, y + 1)) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and backtrack(nx, ny): return True path.pop() return False if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] path = [] if backtrack(0, 0): return path else: return -1"},{"question":"Given a sequence of n days, and a list of daily temperatures for those days, your task is to determine how many days you would have to wait until a warmer temperature for each day. If there is no future day for which this is possible, put 0 for that day instead. Input The first line contains a single integer n (1 <= n <= 100000), the number of days. The second line contains n space-separated integers T1, T2, ..., Tn (-100 <= Ti <= 100), where Ti is the temperature recorded on day i. Output Output a single line of n space-separated integers, where the i-th integer is the number of days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 for that day. Examples Input 6 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 3 30 40 50 Output 1 1 0 Input 4 30 20 10 5 Output 0 0 0 0 Note In the first example, one way to find the answer is to use a stack. We iterate through the list from the end to the beginning, keeping track of the indices of the days. For each day i, if the temperature Ti is greater than the temperature at the top index of the stack, we pop the stack until it\'s empty or we find a higher temperature. The answer for day i is the difference between the current index and the index at the top of the stack. If the stack is empty, the answer is 0. Then we push the current index onto the stack and move to the next day.","solution":"def daily_temperatures(temperatures): Returns a list of integers indicating the number of days to wait for a warmer temperature. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"Given an array of integers and an integer target, determine the indices of two numbers in the array that add up to the target. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The integers at indices 0 and 1 (2 + 7) add up to the target value 9. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The integers at indices 1 and 2 (2 + 4) add up to the target value 6. Your task: Your task is to complete the function twoSum() which takes two arguments: the array of integers nums and the integer target. The function should return a list of two integers representing the indices of the two numbers that add up to the target. Constraints: 1 <= T <= 100 2 <= N <= 10^3 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def twoSum(nums, target): Finds the indices of two numbers in the array that add up to the target. Parameters: nums (list[int]): The array of integers. target (int): The target sum. Returns: list[int]: The indices of the two numbers that add up to the target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"John has two friends, Alice and Bob. He wants to invite them to his birthday party. However, due to social distancing guidelines, he can only allow one friend to come over. John wants to invite the friend who will bring him the better gift, based on their historical gift-giving patterns. Alice and Bob have certain gift-giving tendencies represented by two parameters each: generosity and thoughtfulness. The gift value can be calculated as the sum of their generosity and thoughtfulness. Write a program to help John decide who to invite, based on the calculated gift value. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains four space-separated integers GA, TA, GB, TB — GA and TA denote Alice\'s generosity and thoughtfulness, respectively, while GB and TB denote Bob\'s generosity and thoughtfulness, respectively. ------ Output Format ------ For each test case, print a single line containing the string Alice if Alice would bring the better gift, or Bob if Bob would bring the better gift. If both gifts have the same value, print Either. You may print each character of the string in uppercase or lowercase (for example, the strings Alice, ALICE, BoB, and bob will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 5000 1 ≤ GA, TA, GB, TB ≤ 100 ------ Sample Input 1 ------ 3 10 20 15 15 30 25 20 30 50 50 50 50 ------ Sample Output 1 ------ Alice Bob Either ------ Explanation 1 ------ Test case 1: Alice\'s gift value is 10 + 20 = 30, while Bob\'s gift value is 15 + 15 = 30. Thus, John can invite either Alice or Bob. Test case 2: Alice\'s gift value is 30 + 25 = 55, while Bob\'s gift value is 20 + 30 = 50. Thus, John should invite Alice. Test case 3: Both Alice and Bob have a gift value of 100, so John can invite either of them.","solution":"def decide_who_to_invite(T, test_cases): Decides who John should invite based on the better gift value from Alice and Bob. Parameters: T (int): Number of test cases test_cases (list of lists): Each sub-list contains 4 integers [GA, TA, GB, TB] Returns: list: A list containing the string \\"Alice\\", \\"Bob\\", or \\"Either\\" for each test case results = [] for i in range(T): GA, TA, GB, TB = test_cases[i] gift_value_alice = GA + TA gift_value_bob = GB + TB if gift_value_alice > gift_value_bob: results.append(\\"Alice\\") elif gift_value_alice < gift_value_bob: results.append(\\"Bob\\") else: results.append(\\"Either\\") return results"},{"question":"You are given an array of integers and an integer `k`. You need to determine whether any two distinct numbers in the array add up to `k`. Write a function `has_pair_with_sum(arr, k)` that takes an array of integers `arr` and an integer `k` as input, and returns `True` if there are two distinct numbers in the array whose sum equals `k`, otherwise returns `False`. Examples: ``` has_pair_with_sum([10, 15, 3, 7], 17) => True has_pair_with_sum([1, 2, 3, 9], 8) => False has_pair_with_sum([1, 2, 4, 4], 8) => True has_pair_with_sum([5, 6, 2, 3], 13) => False has_pair_with_sum([], 5) => False ``` **Explanation**: 1. For the first example: - 10 and 7 add up to 17, hence the output is `True`. 2. For the second example: - There are no two numbers that add up to 8, hence the output is `False`. 3. For the third example: - 4 and 4 add up to 8, hence the output is `True`. 4. For the fourth example: - There are no two numbers that add up to 13, hence the output is `False`. 5. For the fifth example: - The array is empty, hence the output is `False`. **Constraints**: 1. The array length is n, where `0 <= n <= 10^5`. 2. The integers in the array are in the range `-10^9` to `10^9`. 3. The integer `k` is in the range `-10^9` to `10^9`.","solution":"def has_pair_with_sum(arr, k): Determines if there are any two distinct numbers in the array that add up to k. Args: arr (list of int): The array of integers. k (int): The target sum. Returns: bool: True if there are two distinct numbers that add up to k, else False. seen = set() for number in arr: complement = k - number if complement in seen: return True seen.add(number) return False"},{"question":"Kathy is organizing a charity marathon and wants to estimate the effort needed to complete it based on a set of coordinates along the track. Each coordinate represents a checkpoint that a runner must pass. The effort required is measured as the sum of the Euclidean distances between each consecutive checkpoint. Given the coordinates of the checkpoints in order, calculate the total effort needed to complete the marathon. Input The first line of input contains an integer n (2 ≤ n ≤ 1000) – the number of checkpoints. Each of the next n lines contains two integers x and y (−1000 ≤ x, y ≤ 1000) – the coordinates of each checkpoint in order. Output Output a single floating-point number – the total effort required to complete the marathon, rounded to two decimal places. Examples Input 3 0 0 3 4 6 8 Output 10.00 Input 4 0 0 1 1 2 2 3 3 Output 4.24 Note For the first example, the total effort is the distance from (0, 0) to (3, 4) plus the distance from (3, 4) to (6, 8). In the second example, the effort is calculated as the sum of the distances between consecutive points: (0, 0) to (1, 1), (1, 1) to (2, 2), and (2, 2) to (3, 3). Each segment\'s distance is √2, hence the total effort is 3√2 ≈ 4.24.","solution":"from math import sqrt def calculate_total_effort(n, checkpoints): Calculate the total effort required to complete the marathon. Parameters: n (int): The number of checkpoints. checkpoints (List[Tuple[int, int]]): List of tuples representing the coordinates of each checkpoint. Returns: float: The total effort rounded to two decimal places. total_effort = 0.0 for i in range(1, n): x1, y1 = checkpoints[i - 1] x2, y2 = checkpoints[i] distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) total_effort += distance return round(total_effort, 2)"},{"question":"In a parallel world, there exist N planets connected by M space tunnels. Each space tunnel is bidirectional but has a limitation on the maximum weight it can transport. Scientists on planet E are developing a new energy source located on planet C, and they need to transport a special mineral between these two planets. The special mineral has a certain weight, and the scientists want to find the safest path to transport the mineral without its weight exceeding the limit of any tunnel along the path. Write a program that determines the maximum weight of the mineral that can be safely transported from planet E to planet C using the existing tunnels. Input The input consists of multiple datasets, each formatted as follows: N M E C A1 B1 W1 A2 B2 W2 ... AM BM WM The first line contains two integers, N and M, where N denotes the number of planets and M denotes the number of space tunnels. The second line contains two integers E and C, where E is the planet where the energy source is located and C is the planet where the special mineral needs to be transported. The next M lines describe the space tunnels, each with three integers Ai, Bi, and Wi, where Ai and Bi are the planets connected by the ith tunnel and Wi denotes the maximum weight limit of the ith tunnel. You may assume that 1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000, and E ≠ C. The input is terminated by a line with two zeros. This line is not part of any dataset and should not be processed. Output For each dataset, print a single integer indicating the maximum weight of the mineral that can be transported safely from planet E to planet C. Example Input 4 4 1 4 1 2 5 2 3 8 3 4 6 1 3 4 0 0 Output 5","solution":"import heapq def find_max_weight_path(n, m, E, C, tunnels): # Construct the graph graph = [[] for _ in range(n + 1)] for A, B, W in tunnels: graph[A].append((B, W)) graph[B].append((A, W)) # Use a max-heap priority queue max_heap = [(-float(\'inf\'), E)] max_weight = [-float(\'inf\')] * (n + 1) max_weight[E] = float(\'inf\') while max_heap: curr_weight, u = heapq.heappop(max_heap) curr_weight = -curr_weight if u == C: return curr_weight for v, weight in graph[u]: min_capacity = min(curr_weight, weight) if min_capacity > max_weight[v]: max_weight[v] = min_capacity heapq.heappush(max_heap, (-min_capacity, v)) return 0 def process_input(input_data): lines = input_data.strip().split(\'n\') i = 0 results = [] while True: # Read first line of the dataset n, m = map(int, lines[i].split()) if n == 0 and m == 0: break # Read second line of the dataset e, c = map(int, lines[i + 1].split()) # Read the tunnels tunnels = [] for j in range(i + 2, i + 2 + m): a, b, w = map(int, lines[j].split()) tunnels.append((a, b, w)) # Calculate the result for the dataset result = find_max_weight_path(n, m, e, c, tunnels) results.append(result) # Move to the next dataset i += 2 + m return results"},{"question":"You are given a grid of size N times M with an initial configuration of stars (\'*\') and dots (\'.\'). The challenge is to identify all possible \\"crosses\\" in the grid and replace them with dots. A cross is defined as having a center at position (i, j) and extending outwards with arms of equal length composed of stars, such that: - The arms extend an equal number of cells horizontally and vertically. - The cells that make up the arms are within the grid\'s bounds. - The cells along the arms and center are all stars (\'*\'). For example, a cross of length 1 has the following structure: ``` . . . . * . * * * . * . . . . ``` And a cross of length 2: ``` . . * . . . . * . . * * * * * . . * . . . . * . . ``` Your task is to replace the stars that form crosses in the grid with dots (\'.\') while maintaining the non-cross stars intact. If no valid crosses are found, return the grid as it is. -----Task----- Given the initial grid configuration with dimensions N times M, identify and replace all crosses with dots. -----Input----- The first line contains two space-separated integers, N and M, representing the number of rows and columns in the grid, respectively. The next N lines each contain M characters representing the grid\'s initial configuration of stars (\'*\') and dots (\'.\'). -----Constraints----- 1 leq N, M leq 50 -----Output----- Output the modified grid with all the crosses replaced by dots. -----Examples----- Sample Input 1: 5 5 ..*.. ..*.. ***** ..*.. ..*.. Sample Output 1: ..... ..... ..... ..... ..... Sample Input 2: 4 5 ..*.. ..*.. ..*.. .***. Sample Output 2: ..... ..... ..... ..... ```","solution":"def replace_crosses_with_dots(grid, N, M): def is_cross(i, j, length): # Check the arm lengths for validity within grid bounds for k in range(1, length+1): if i-k < 0 or i+k >= N or j-k < 0 or j+k >= M: return False if grid[i-k][j] != \'*\' or grid[i+k][j] != \'*\' or grid[i][j-k] != \'*\' or grid[i][j+k] != \'*\': return False return True def remove_cross(i, j, length): # Replace the stars with dots at the center and arms grid[i][j] = \'.\' for k in range(1, length+1): grid[i-k][j] = \'.\' grid[i+k][j] = \'.\' grid[i][j-k] = \'.\' grid[i][j+k] = \'.\' # Make a deep copy of the grid so we don\'t modify the input directly grid = [list(row) for row in grid] max_cross_length = min(N, M) // 2 for length in range(max_cross_length, 0, -1): for i in range(N): for j in range(M): if grid[i][j] == \'*\': if is_cross(i, j, length): remove_cross(i, j, length) return [\\"\\".join(row) for row in grid] # Sample use if __name__ == \\"__main__\\": input_grid = [ \\"..*..\\", \\"..*..\\", \\"*****\\", \\"..*..\\", \\"..*..\\" ] N, M = 5, 5 result = replace_crosses_with_dots(input_grid, N, M) for line in result: print(line)"},{"question":"A city is organizing a marathon, and they have set up a number of water stations along the route. Runners can only stop at certain water stations due to limited supply. The organizers want to track which runners stopped at each water station. Input: The first line contains two integers N and M, denoting the number of runners and the number of water stations, respectively. The next N lines each contains the runner\'s ID and a space-separated list of water station IDs that the runner stopped at. Output: For each water station, output the water station ID followed by the IDs of the runners who stopped at that station in sorted order. Constraints: 1 ≤ N, M ≤ 50 1 ≤ Runner ID, Water Station ID ≤ 100 SAMPLE INPUT 3 3 1 1 2 2 2 3 3 1 3 SAMPLE OUTPUT 1 1 3 2 1 2 3 2 3 Explanation The input describes three runners and three water stations. Runner 1 stopped at stations 1 and 2. Runner 2 stopped at stations 2 and 3. Runner 3 stopped at stations 1 and 3. The output lists each water station followed by the IDs of runners who stopped at that station in ascending order.","solution":"def marathon_runners(N, M, runner_data): from collections import defaultdict water_stations = defaultdict(list) for runner, stations in runner_data: for station in stations: water_stations[station].append(runner) result = [] for station in range(1, M + 1): if station in water_stations: result.append(f\\"{station} \\" + \\" \\".join(map(str, sorted(water_stations[station])))) else: result.append(f\\"{station}\\") return result"},{"question":"Problem Alice and Bob found two sequences, S and T, of integers of the same length, but with the same set of integers only in different orders. They want to transform sequence S into sequence T by performing a series of swaps on S. Each swap operation allows them to swap any two elements in S. They want to do this in the minimum number of swaps possible. Constraints * 1 ≤ n ≤ 10^5 * 0 ≤ S[i], T[i] ≤ 10^6 * S and T are permutations of the same set of integers. # Input * The length n of the sequences is given on the first line. * The sequence S of length n is given on the second line. * The sequence T of length n is given on the third line. # Output Print the minimum number of swaps required to transform sequence S into sequence T. # Examples Example 1 **Input:** ``` 4 1 3 2 4 4 2 1 3 ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` 5 9 8 7 6 5 5 6 7 8 9 ``` **Output:** ``` 2 ``` Explanation: 1. In Example 1, we can swap (1 4) -> (4 3 2 1) and then swap (4 2) -> (4 2 1 3) to achieve the final result. 2. In Example 2, we can swap (9 5) -> (5 8 7 6 9) and then swap (8 6) -> (5 6 7 8 9).","solution":"def min_swaps_to_transform(S, T): Returns the minimum number of swaps required to transform sequence S into sequence T. n = len(S) swaps = 0 # Create a mapping from value to its index in T value_to_index_in_T = {value: i for i, value in enumerate(T)} # Transform S to make it identical to T for i in range(n): correct_value = T[i] if S[i] != correct_value: # Find the index in S which should contain correct_value index_to_swap = value_to_index_in_T[S[i]] # Swap the values S[i], S[index_to_swap] = S[index_to_swap], S[i] # Update the position in the map value_to_index_in_T[S[index_to_swap]] = index_to_swap swaps += 1 return swaps"},{"question":"Jimmy the Juggler is practicing for an upcoming juggling competition. For the competition, he needs to create a sequence of juggling tricks such that the total difficulty level is as close as possible to 50 points. Each trick has a specific difficulty level, and Jimmy can only use each trick once. If there are two sequences with equal total difficulty that are equally close to 50 points (e.g., 47 and 53), Jimmy will choose the sequence that has the higher total difficulty (in this case, 53). Help Jimmy the Juggler by determining the total difficulty level he will choose for his sequence. -----Input----- The first line of the input contains the number of tricks ( m ) ( (1 leq m leq 1000) ). Each of the following ( m ) lines contains one positive integer denoting the difficulty level of each trick. -----Output----- Output one integer, the total difficulty closest to 50. -----Examples----- Sample Input: 5 20 15 10 30 25 Sample Output: 50","solution":"def closest_to_fifty(tricks): Given a list of trick difficulty levels, returns the total difficulty closest to 50. target = 50 m = len(tricks) # Using dynamic programming to solve the closest sum to 50 problem # Create a set to store the possible sums possible_sums = {0} for trick in tricks: # Add the current trick\'s difficulty to each of the existing sums in possible_sums new_sums = {current_sum + trick for current_sum in possible_sums} possible_sums.update(new_sums) closest_sum = None for possible_sum in possible_sums: if closest_sum is None or abs(possible_sum - target) < abs(closest_sum - target) or (abs(possible_sum - target) == abs(closest_sum - target) and possible_sum > closest_sum): closest_sum = possible_sum return closest_sum"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Your task is to find the elements that appear exactly twice. You should implement this with an O(n) time complexity and O(1) additional space complexity, excluding the input array itself. Keep in mind: - You are allowed to modify the input array. - You can assume that all elements in the array are positive integers and do not exceed the length of the array. -----Input:----- The first line will contain an integer T, denoting the number of test cases. Each test case will begin with an integer N, the length of the array, followed by N space-separated integers. -----Output:----- For each test case, output the elements that appear exactly twice in any order. If no elements appear twice, output -1. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100,000 1 ≤ array[i] ≤ N -----Example:----- Input: 2 6 4 3 2 7 8 2 3 1 5 1 1 2 2 3 3 Output: 3 2 -1 -----Explanation:----- Case 1: The numbers 2 and 3 appear exactly twice in the array. Case 2: No element appears exactly twice, so the output is -1.","solution":"def find_elements_appearing_twice(arr): This function finds all elements that appear exactly twice in the array. Args: arr: List of integers Returns: List of integers that appear exactly twice n = len(arr) result = [] # Traverse the array for i in range(n): # Use the value as the index (absolute value is required due to potential negative marking) index = abs(arr[i]) - 1 # If the value at that index is positive, negate it to mark it as visited if arr[index] > 0: arr[index] = -arr[index] else: # If it\'s already negative, it means this is the second occurrence result.append(abs(arr[i])) # Restore the original array values by making all elements positive for i in range(n): if arr[i] < 0: arr[i] = -arr[i] return result if result else [-1] def process_test_cases(T, test_cases): Process multiple test cases to find elements appearing exactly twice. Args: T: Number of test cases test_cases: List containing each test case as a tuple of (N, arr) Returns: List of results for each test case results = [] for i in range(T): N, arr = test_cases[i] result = find_elements_appearing_twice(arr) results.append(result) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to find the length of the shortest substring of `s` that contains all the distinct characters of `s`. For example, if `s = \\"abca\\"`, the shortest substring that contains all distinct characters is `\\"abc\\"`, having length 3. Similarly, if `s = \\"aaaa\\"`, the shortest substring that contains all distinct characters is `\\"a\\"`, having length 1. To solve this task, you should iterate through all possible substrings of `s` and determine the shortest one that contains all distinct characters. -----Input----- The input consists of a single line containing a string `s` (1 leq vert s vert leq 2000) — the string itself. The string consists only of lowercase English letters. -----Output----- Output a single integer — the length of the shortest substring of `s` that contains all distinct characters of `s`. -----Examples----- Input abca Output 3 Input aaaa Output 1 Input abcabcbb Output 3 -----Note----- In the first example, the substring \\"abc\\" is the shortest substring that contains all distinct characters of `s`. In the second example, the substring \\"a\\" is the shortest substring that contains all distinct characters of `s`. In the third example, there are multiple shortest substrings like \\"abc\\", \\"bca\\". Any of these substrings would have length 3.","solution":"def length_of_shortest_substring(s): distinct_chars = set(s) distinct_count = len(distinct_chars) n = len(s) min_length = n for i in range(n): seen_chars = set() for j in range(i, n): seen_chars.add(s[j]) if len(seen_chars) == distinct_count: min_length = min(min_length, j - i + 1) break return min_length"},{"question":"Today, Sarah received a challenge in her programming class. The challenge involves finding numbers based on a specific rule. Sarah\'s task is to determine the smallest perfect square greater than a given number. However, Sarah is quite busy with her other assignments and has asked you to help her out. Formally, there will be `t` numbers and you have to find the smallest perfect square greater than each of them. Input: The first line of input will be `t`, the number of test-cases. This is followed by `t` lines, each containing an integer `n`. Output: For each test-case, print the smallest perfect square greater than `n` on a new line. Constraints: SMALL: 1 ≤ t ≤ 10 0 ≤ n ≤ 50 MEDIUM: 1 ≤ t ≤ 500 0 ≤ n ≤ 1000 LARGE: 1 ≤ t ≤ 10000 0 ≤ n ≤ 100000 SAMPLE INPUT 3 5 10 20 SAMPLE OUTPUT 9 16 25 Explanation: For the first test-case, the smallest perfect square greater than 5 is 9 (3*3). For the second test-case, the smallest perfect square greater than 10 is 16 (4*4). For the third test-case, the smallest perfect square greater than 20 is 25 (5*5).","solution":"import math def smallest_perfect_square_greater_than_t_cases(t, cases): results = [] for n in cases: next_square_root = math.ceil(math.sqrt(n + 1)) results.append(next_square_root ** 2) return results"},{"question":"In a far-off kingdom, there exists a magical plant known as the Fibonacci Tree. This tree grows in a very peculiar manner: - Initially, at time 0, the tree has exactly one root with no branches. - At each subsequent time step, every branch that exists at that time bifurcates into two branches. However, if it’s the first time step, the root just turns into one single branch instead. Let us define the Fibonacci Tree growth more formally: - At time 0, the tree has 0 branches. - At time 1, the tree has 1 branch. - At each time t > 1, the number of branches on the tree is equal to the number of branches at time t-1 plus the number of branches at time t-2. Given a specific time step `N`, Chef wants to calculate the number of branches in the Fibonacci Tree immediately before that time step. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer N. ------ Output ------ For each test case, print a single integer — the number of branches on the Fibonacci Tree immediately before the time N. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 0 ≤ N ≤ 100 ------ Sample Input 1 ------ 3 0 1 4 ------ Sample Output 1 ------ 0 0 2 ------ Explanation 1 ------ At time 0, there are no branches as the tree just has a root. At time 1, there are still no branches because the root turns into a single branch only exactly at the first time step. At time 4, we can follow the sequence: - At time 0, there are 0 branches. - At time 1, there are still 0 branches. - At time 2, there is 1 branch (the formerly root now turned into a branch). - At time 3, there are 1 + 0 = 1 branches. - At time 4, there are 1 + 1 = 2 branches. Hence immediately before 4, there are 2 branches.","solution":"def fibonacci_branch_count(N): Calculate the number of branches on the Fibonacci Tree immediately before time step N. if N <= 1: return 0 a, b = 0, 0 for _ in range(2, N + 1): a, b = b, a + b if b == 0: b = 1 return b def process_test_cases(T, cases): results = [] for N in cases: results.append(fibonacci_branch_count(N)) return results"},{"question":"Given an infinite sequence of positive integers defined as follows: Each element a_n of the sequence is computed as the sum of the squares of the digits of a_{n-1}. The sequence starts with a given positive integer a_0. If a_0 has only one digit, then a_1 can be directly computed. For an integer with more than one digit, we must compute the sum of the squares of each digit. For example, if a_0 = 82, a_1 = 8^2 + 2^2 = 64 + 4 = 68, and continuing this, a_2 = 6^2 + 8^2 = 36 + 64 = 100, and so on. You need to write a program to determine if the sequence reaches a number 1 at any point within K steps starting from a_0. If it does, print \\"YES\\", otherwise print \\"NO\\". ------ Input ------ The first line of input contains an integer T — the number of test cases. Each test case is represented by a pair of integers: a_0 (the initial positive integer) and K (the maximum number of steps). ------ Output ------ For each test case, print \\"YES\\" if the sequence reaches 1 within K steps, otherwise print \\"NO\\". ------ Constraints ------ (1 ≤ T ≤ 5) (1 ≤ a_0 ≤ 1000) (1 ≤ K ≤ 1000) ----- Sample Input 1 ------ 3 19 10 82 5 7 2 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ For the first test case, starting from 19, the sequence goes as follows: 1^2 + 9^2 = 1 + 81 = 82 → 8^2 + 2^2 = 64 + 4 = 68 → 6^2 + 8^2 = 36 + 64 = 100 → 1^2 + 0^2 + 0^2 = 1 leading to \\"YES\\" within 4 steps. For the second test case, starting from 82, it reaches 1 within 3 steps (2+4+1). For the third test case, starting from 7, the sequence in 2 steps remains 49 → 97, never reaching 1 hence \\"NO\\".","solution":"def sum_of_squares_of_digits(n): Compute the sum of the squares of the digits of the number n. return sum(int(digit)**2 for digit in str(n)) def reaches_one_within_k_steps(a0, K): Determine if the sequence starting from a0 reaches 1 within K steps. for _ in range(K): if a0 == 1: return \\"YES\\" a0 = sum_of_squares_of_digits(a0) return \\"NO\\" def solution(test_cases): results = [] for a0, K in test_cases: result = reaches_one_within_k_steps(a0, K) results.append(result) return results # ------ Input parsing and function calling for the given problem ------ def main(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) test_cases = [tuple(map(int, line.split())) for line in data[1:T+1]] results = solution(test_cases) for result in results: print(result)"},{"question":"Kevin has a collection of toys, each toy has a certain level of fun associated with it. Kevin wants to maximize the total fun value, but there is a catch: Kevin can only pick a subset of toys such that no two toys in the subset have consecutively increasing IDs. Help Kevin determine the maximum fun value he can obtain. -----Input----- The input consists of several test cases. The first line contains an integer t (1 le t le 50), the number of test cases. Each test case contains the following: - The first line contains one integer n (1 le n le 1000), the number of toys. - The second line contains n integers, f_1, f_2, ldots, f_n (0 le f_i le 1000) where f_i represents the fun value of the i-th toy. The sum of n across all test cases does not exceed 2000. -----Output----- For each test case, output a single integer — the maximum total fun value Kevin can obtain with the described restriction. -----Example----- Input 3 5 3 2 7 10 12 4 100 1 100 1 3 5 5 10 Output 22 200 15 -----Note----- For the first test case, Kevin can choose toys with IDs 1, 3, and 5, resulting in the maximum total fun value of 3 + 7 + 12 = 22. For the second test case, the maximum value is obtained by choosing the first and third toys: 100 + 100 = 200. For the third test case, Kevin can choose toys with IDs 1 and 3, resulting in the maximum total fun value of 5 + 10 = 15.","solution":"def max_fun_value(t, test_cases): results = [] for test in test_cases: n, fun_values = test if n == 0: results.append(0) continue if n == 1: results.append(fun_values[0]) continue dp = [0] * n dp[0] = fun_values[0] dp[1] = max(fun_values[0], fun_values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + fun_values[i]) results.append(dp[-1]) return results"},{"question":"Implement a function `is_happy_number(n)` that checks whether a given positive integer is a \\"happy number\\". A happy number is defined by the following process: - Starting with any positive integer, replace the number by the sum of the squares of its digits. - Repeat the process until the number either equals 1 (where it will stay) or it loops endlessly in a cycle that does not include 1. A number that ends at 1 after this process is a happy number, and a number that loops endlessly without reaching 1 is not. For instance: ```python is_happy_number(19) # returns True, because the sequence is: 19 -> 82 -> 68 -> 100 -> 1 is_happy_number(2) # returns False, because the sequence loops endlessly: 2 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> 4 -> ... is_happy_number(7) # returns True, because the sequence is: 7 -> 49 -> 97 -> 130 -> 10 -> 1 is_happy_number(20) # returns False, because the sequence is: 20 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> ... ``` Good luck!","solution":"def is_happy_number(n): Determines if a number is a happy number. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(char) ** 2 for char in str(n)) return n == 1"},{"question":"You are given a sequence of n integers, and you need to distribute them into exactly k subsequences such that the sum of the maximum values of these subsequences is minimized. Each number in the sequence must belong to exactly one subsequence. It is allowed for some subsequences to be empty. Help find the optimal way to partition the sequence to minimize the objective. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000). The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4). The list may contain duplicate values. -----Output----- Print a single integer — the minimized sum of the maximum values of the k subsequences. -----Examples----- Input 5 3 3 1 4 1 5 Output 5 Input 7 2 1 2 3 4 5 6 7 Output 11 -----Explanation----- In the first example, one possible optimal way to partition the sequence is: [3, 1, 1], [4], [5], where the maximum values of the subsequences are 3, 4, and 5 respectively. The sum of the maxima is 3 + 4 + 5 = 12. Another optimal partition might be: [3, 1], [4, 5], [1], where the sum of the maxima is also minimized to 5. In the second example, a possible optimal partition is: [1, 2, 3, 4, 5], [6, 7], where the sums of the maxima in the subsequences are 5 and 7, and 5 + 7 = 11.","solution":"def minimized_sum_of_max_values(n, k, arr): This function distributes the sequence into k subsequences to minimize the sum of the maximum values of these subsequences. :param n: int: The number of integers in arr :param k: int: The number of subsequences :param arr: list: The list of integers :return: int: The minimized sum of the maximum values of the k subsequences arr.sort(reverse=True) return sum(arr[:k])"},{"question":"You are given a collection of n books, each with a unique index from 1 to n, and each book has a certain number of pages. You need to organize these books in stacks such that the number of pages in each stack is as balanced as possible. You can create k stacks where 1 ≤ k ≤ n. Your task is to find the minimal possible value for the maximum number of pages in any stack when the books are optimally stacked. Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of books. The second line of input contains n space-separated integers p_i (1 ≤ p_i ≤ 1000) — the number of pages in the i-th book. The third line of input contains an integer k (1 ≤ k ≤ n) — the number of stacks. Output Output a single integer, the minimal possible value for the maximum number of pages in any stack after organizing the books. Examples Input 6 5 7 2 6 8 3 3 Output 12 Input 5 1 1 1 1 1 5 Output 1 Note In the first example, we can stack the books in stacks as follows: - First stack: {5, 7} - Second stack: {2, 6} - Third stack: {8, 3} The maximum number of pages in a stack is 12, which is the minimal possible value. In the second example, each book can be in its own stack because there are as many stacks as there are books. So, the maximum number of pages in any stack is 1.","solution":"def minimal_max_pages(n, pages, k): def can_stack(max_pages): stack_count, current_sum = 1, 0 for page in pages: if current_sum + page > max_pages: stack_count += 1 current_sum = page if stack_count > k: return False else: current_sum += page return True low, high = max(pages), sum(pages) while low < high: mid = (low + high) // 2 if can_stack(mid): high = mid else: low = mid + 1 return low"},{"question":"Given an array of integers nums sorted in ascending order, convert it into a height-balanced binary search tree (BST). A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Example 1: ``` Input: nums = [-10, -3, 0, 5, 9] Output: [0, -3, 9, -10, null, 5] Explanation: [0, -3, 9, -10, null, 5] is one possible answer. You can also return any other height-balanced BST. ``` Example 2: ``` Input: nums = [1, 3] Output: [3, 1] Explanation: [3, 1] is one possible answer. You can also return [1, 3], which is also height-balanced. ``` Constraints: - `1 <= nums.length <= 104` - `-104 <= nums[i] <= 104` - `nums` is sorted in a strictly increasing order.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Converts a sorted array to a height-balanced binary search tree (BST). if not nums: return None def helper(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = helper(left, mid - 1) node.right = helper(mid + 1, right) return node return helper(0, len(nums) - 1) def pre_order_traversal(root): Returns the pre-order traversal of the BST as a list. result = [] if not root: return result result.append(root.val) result.extend(pre_order_traversal(root.left)) result.extend(pre_order_traversal(root.right)) return result"},{"question":"Given a list of integers representing the daily highest temperatures recorded over a period of days, find the longest stretch of days with non-decreasing temperatures. Example temps = [1, 2, 2, 3, 2, 4, 5, 5] There is a stretch of 4 days (out of the total 8 days) where the temperatures are non-decreasing: [1, 2, 2, 3], and another stretch of 3 days: [2, 4, 5, 5]. The longest stretch is of length 4. Function Description Complete the longestNonDecreasing function in the editor below. longestNonDecreasing has the following parameter(s): int temps[m]: list of daily highest temperatures recorded Returns int: the length of the longest stretch of days with non-decreasing temperatures Input Format The first line contains an integer, m, the size of textbf{temps}. The second line describes textbf{temps} as m space-separated integers representing daily temperatures. Constraints 1 leq m leq 10^6 -100 leq temps[i] leq 100 Sample Input 0 8 1 2 2 3 2 4 5 5 Sample Output 0 4 Explanation 0 The longest stretch of non-decreasing temperatures is [1, 2, 2, 3], and its length is 4. Sample Input 1 5 5 4 3 2 1 Sample Output 1 1 Explanation 1 There are no non-decreasing stretches of length greater than 1 since temperatures are strictly decreasing, so the longest stretch is just any single element from the list, all having length 1.","solution":"def longestNonDecreasing(temps): Finds the longest stretch of days with non-decreasing temperatures. Parameters: temps: list[int]: list of daily highest temperatures recorded. Returns: int: the length of the longest stretch of non-decreasing temperatures. if not temps: return 0 max_length = 1 current_length = 1 for i in range(1, len(temps)): if temps[i] >= temps[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Implement a class TimespanManager that supports three methods: 1. addRange(int start, int end) Adds a range of time from start to end (inclusive). If a range overlaps with any existing ranges, they should be merged into a single continuous range. 2. removeRange(int start, int end) Remove a range of time from start to end (inclusive). If a range is partially overlapping with any existing ranges, only the overlapping part should be removed, and non-overlapping parts should remain as separate ranges. 3. getRanges() Returns a list of all existing ranges in ascending order. The ranges should be presented as pairs [start, end]. Example: Input [\\"TimespanManager\\", \\"addRange\\", \\"addRange\\", \\"addRange\\", \\"getRanges\\", \\"removeRange\\", \\"getRanges\\"] [[], [1, 5], [10, 20], [15, 25], [], [10, 15], []] Output [null, null, null, null, [[1, 5], [10, 25]], null, [[1, 5], [16, 25]]] Explanation TimespanManager manager = new TimespanManager(); manager.addRange(1, 5); // [[1, 5]] manager.addRange(10, 20); // [[1, 5], [10, 20]] manager.addRange(15, 25); // [[1, 5], [10, 25]] (merged with previous range) manager.getRanges(); // return [[1, 5], [10, 25]] manager.removeRange(10, 15); // [[1, 5], [16, 25]] manager.getRanges(); // return [[1, 5], [16, 25]] Constraints: - The `start` and `end` values are integers in the range [0, 10^9]. - There will be at most 10^5 operations considering addRange, removeRange, and getRanges. - 0 <= start <= end <= 10^9.","solution":"class TimespanManager: def __init__(self): self.ranges = [] def addRange(self, start, end): new_ranges = [] i = 0 # Merge all non-overlapping ranges before the new range while i < len(self.ranges) and self.ranges[i][1] < start: new_ranges.append(self.ranges[i]) i += 1 # Merge all overlapping ranges with the new range while i < len(self.ranges) and self.ranges[i][0] <= end: start = min(start, self.ranges[i][0]) end = max(end, self.ranges[i][1]) i += 1 new_ranges.append([start, end]) # Add all non-overlapping ranges after the new range while i < len(self.ranges): new_ranges.append(self.ranges[i]) i += 1 self.ranges = new_ranges def removeRange(self, start, end): new_ranges = [] for rng in self.ranges: if rng[1] < start or rng[0] > end: new_ranges.append(rng) # No overlap else: if rng[0] < start: new_ranges.append([rng[0], start - 1]) if rng[1] > end: new_ranges.append([end + 1, rng[1]]) self.ranges = new_ranges def getRanges(self): return self.ranges"},{"question":"Interactive Robot Path Planning A robotics research team is testing a new navigation algorithm for an autonomous robot. The robot navigates on a 2D grid-based arena where each cell is either empty or contains an obstacle. The robot can move one step at a time in one of the four cardinal directions - up, down, left, or right - unless blocked by an obstacle or the edge of the grid. However, the ability to move does not guarantee safety, as there are safety zones defined in the grid. The algorithm should ensure the robot reaches its target destination within a given number of steps while passing through these safety zones. The grid is represented by a matrix of characters where: - \'.\' denotes an empty cell, - \'#\' denotes an obstacle, - \'S\' denotes a starting point, - \'E\' denotes the ending point, - \'+\' denotes a safety zone. The robot must start at \'S\', pass through at least one \'+\' cell, and reach \'E\' within the given step limit to be considered a successful run. Write a program that determines whether the robot can reach the end point \'E\' from the starting point \'S\', while passing through at least one safety zone \'+\' within a given number of steps. # Input The input consists of multiple test cases. Each test case begins with three integers: - `n` (1 ≤ n ≤ 50): the number of rows in the grid. - `m` (1 ≤ m ≤ 50): the number of columns in the grid. - `k` (1 ≤ k ≤ 1000): the maximum number of steps allowed. The next `n` lines represent the grid. Each line contains `m` characters representing the cells, which include \'.\', \'#\', \'S\', \'E\', and \'+\' as described above. The end of the input is indicated by a line containing three zeros (`0 0 0`). # Output For each test case, output \\"YES\\" if it is possible for the robot to reach \'E\' from \'S\' passing through at least one safety zone \'+\' within the given steps, otherwise output \\"NO\\". # Sample Input ``` 4 4 5 S... ..+. .E .... 3 3 4 S#. #+E ... 0 0 0 ``` # Sample Output ``` YES NO ``` # Explanation In the first test case, the robot can follow the path S -> (1,2) -> + -> (2,4) -> E within 5 steps, so the output is \\"YES\\". In the second test case, the robot cannot reach \'E\' from \'S\' passing through the safety zone \'+\' due to the obstacle, within the provided 4 steps, so the output is \\"NO\\".","solution":"from collections import deque def is_safe_reachable(n, m, k, grid): Determines if it\'s possible to reach \'E\' from \'S\' in the grid while passing through at least one \'+\' and within k steps. start = end = None safety_zones = set() # Find the start, end, and safety zones for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) elif grid[i][j] == \'+\': safety_zones.add((i, j)) if not start or not end or not safety_zones: return \\"NO\\" # Direction vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Perform BFS from the start location queue = deque([(start[0], start[1], 0, False)]) visited = set([(start[0], start[1], False)]) while queue: x, y, steps, passed_safety = queue.popleft() # If we exceed step limit, continue to the next if steps > k: continue # Check if end is reached with at least one safety zone passed if (x, y) == end and passed_safety: return \\"YES\\" # Explore all four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny, passed_safety or (nx, ny) in safety_zones) not in visited: visited.add((nx, ny, passed_safety or (nx, ny) in safety_zones)) queue.append((nx, ny, steps + 1, passed_safety or (nx, ny) in safety_zones)) return \\"NO\\" def solve(grid_cases): results = [] for case in grid_cases: n, m, k, grid = case result = is_safe_reachable(n, m, k, grid) results.append(result) return results"},{"question":"You are given an array of n integers, a_1, a_2, ..., a_n. You can perform the following operation on the array any number of times: choose two indices i and j (1 ≤ i < j ≤ n) and swap a_i with a_j. Your task is to sort the array using the minimum number of swap operations. The problem is to find that minimum number of swap operations. Input The first line contains a single integer n (1 ≤ n ≤ 100000), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output Print a single integer, the minimum number of swaps required to sort the array. Examples Input 4 4 3 2 1 Output 2 Input 3 1 3 2 Output 1 Note In the first example, we can achieve the sorted array [1, 2, 3, 4] with the following swaps: - Swap a_1 (4) with a_4 (1): array becomes [1, 3, 2, 4] - Swap a_2 (3) with a_3 (2): array becomes [1, 2, 3, 4] In the second example, we need only one swap: - Swap a_2 (3) with a_3 (2): array becomes [1, 2, 3]","solution":"def min_swaps_to_sort(arr): Return the minimum number of swaps required to sort the array. n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it: it[1]) visited = {i: False for i in range(n)} ans = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"# Story You are part of a team developing a text-based adventure game. An important aspect of the game is to allow the player to navigate through a series of interconnected rooms. Each room may lead to other rooms in one of the four cardinal directions: north, south, east, or west. Rooms are dynamically created as the player explores them. The game keeps track of the rooms the player has visited and ensures that new rooms are linked properly. ___ # Task Implement the `Room` class that models this system. The class should have the following functionality: - Allow for dynamic creation of rooms as the player moves. - Interconnect rooms in the appropriate directions (e.g., if a room A\'s south leads to room B, then room B\'s north should lead back to room A). - Keep track of room connections and player’s current location. - Provide a `move(direction)` method which allows the player to move to a new room in the given direction (if a room exists in that direction) or create a new room in that direction (if it doesn\'t already exist). - Maintain a record of all the rooms the player has visited. Here is a basic outline structure, which you need to complete: ```python class Room: def __init__(self): self.exits = {\'north\': None, \'south\': None, \'east\': None, \'west\': None} Room.all_rooms.append(self) def connect_rooms(self, direction, room): opposite = {\'north\': \'south\', \'south\': \'north\', \'east\': \'west\', \'west\': \'east\'} if self.exits[direction] is None: self.exits[direction] = room room.exits[opposite[direction]] = self def move(self, direction): if direction in self.exits: if self.exits[direction] is None: new_room = Room() self.connect_rooms(direction, new_room) return self.exits[direction] else: raise ValueError(\\"Invalid direction\\") # Instantiate rooms and navigate between them as per the described requirements. Room.all_rooms = [] current_room = Room() # Starting room current_room = current_room.move(\'north\') # Move to a new room to the north ```","solution":"class Room: all_rooms = [] def __init__(self): self.exits = {\'north\': None, \'south\': None, \'east\': None, \'west\': None} Room.all_rooms.append(self) def connect_rooms(self, direction, room): opposite = {\'north\': \'south\', \'south\': \'north\', \'east\': \'west\', \'west\': \'east\'} if self.exits[direction] is None: self.exits[direction] = room room.exits[opposite[direction]] = self def move(self, direction): if direction in self.exits: if self.exits[direction] is None: new_room = Room() self.connect_rooms(direction, new_room) return self.exits[direction] else: raise ValueError(\\"Invalid direction\\") # Instantiate rooms and navigate between them as per the described requirements. current_room = Room() # Starting room"},{"question":"Alex is trying to organize a book fair. He has n books, and each book has a different price. To attract visitors, he wants to set up m special price categories such that each category has exactly k books, and all books in a category must have unique prices. Alex will select the categories in such a way that the price difference between the highest-priced book and the lowest-priced book in each category is minimized. Help Alex determine the minimum possible maximum price difference for the categories he needs to set up. Input The first line contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 10), and k (1 ≤ k ≤ min(n,10)) — the total number of books, the number of categories, and the number of books in each category. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the prices of the books. Output Print a single integer, the minimum possible maximum price difference for the categories. Examples Input 5 1 3 7 5 9 1 3 Output 4 Input 6 2 2 8 3 5 1 4 6 Output 1 Input 4 1 2 10 12 20 15 Output 2 Note In the first example, Alex should select the books with prices 5, 7, and 9 to minimize the price difference in the category to 9 - 5 = 4. In the second example, Alex can create categories using books with prices (1, 3), (4, 5), or (5, 6) to have the minimum possible maximum price difference of 1. In the third example, Alex should choose the books with prices 10 and 12 to achieve a price difference of 2.","solution":"def minimum_maximum_price_difference(n, m, k, prices): Determines the minimum possible maximum price difference for m categories each containing k books out of the n books provided. prices.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = prices[i + k - 1] - prices[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You are given a `string` representing a sequence of moves on a 2D Cartesian plane. The moves are represented by characters: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Write a function `isAtOrigin(moves: str) -> bool` that determines if the sequence of moves returns the starting point to the origin (0,0). # Function Signature ```python def isAtOrigin(moves: str) -> bool: ``` # Example ```python assert isAtOrigin(\\"UDLR\\") == True # U-> (0,1), D-> (0,0), L-> (-1,0), R-> (0,0) assert isAtOrigin(\\"UUDDLRLR\\") == True # UUDD cancels out, LRLR cancels out assert isAtOrigin(\\"UUDLLR\\") == False # End position is (-1,1) ``` # Constraints - The string `moves` will only contain the characters \'U\', \'D\', \'L\', and \'R\'. - The length of `moves` will be in the range [1, 10000]. - The function should return `True` if the sequence returns the starting point to the origin; otherwise, return `False`. # Notes - Ensure that your function handles both short and long sequences efficiently. - Consider edge cases such as sequences with only one move or sequences that balance each other out in non-linear order.","solution":"def isAtOrigin(moves: str) -> bool: Determines if the sequence of moves returns to the origin (0,0). Parameters: moves (str): A string representing the sequence of moves. Returns: bool: True if the moves return to the origin, False otherwise. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"In a talent show competition, participants are scored by a panel of judges. Each participant can perform multiple times, and their scores are recorded separately for each performance. At the end of the competition, each participant\'s final score is the average of their top three scores. If a participant has fewer than three performances, their final score is the average of all their scores. It is guaranteed that each participant has at least one performance recorded. The organizers want to rank the participants according to their final scores. Participants with the same final score should have the same rank. The participant with the highest score has rank 1, the next highest score (or scores) have rank 2, and so on. Your task is to determine the rank of each participant. Input The first line contains an integer n (1 ≤ n ≤ 10000) — the number of performance records. Each of the next n lines contains a participant\'s name and their score for a performance, separated by a space. Each name contains not less than 1 and no more than 10 characters, and consists of lowercase Latin letters only. The score is an integer between 0 and 1000. Output For each participant, output their name and rank, separated by a space. Participants should be listed in alphabetical order by their name. Examples Input 7 alice 500 bob 700 alice 600 alice 700 bob 800 alice 300 bob 750 Output alice 2 bob 1 Input 4 david 600 charlie 400 david 700 charlie 500 Output charlie 2 david 1 Input 3 eve 500 frank 500 eve 600 Output eve 1 frank 2 Note In the first example, alice\'s top three scores are [700, 600, 500], with an average final score of 600. bob\'s top three scores are [800, 750, 700], with an average final score of 750. Therefore, bob has rank 1 and alice has rank 2. In the second example, david\'s top two scores are [700, 600], with an average final score of 650. charlie\'s two scores are [500, 400], with an average final score of 450. Therefore, david has rank 1 and charlie has rank 2. In the third example, eve\'s two scores are [600, 500], with an average final score of 550. frank has only one performance with a score of 500. Therefore, eve has rank 1 and frank has rank 2.","solution":"def calculate_ranks(n, performances): from collections import defaultdict import math participant_scores = defaultdict(list) for performance in performances: name, score = performance.split() score = int(score) participant_scores[name].append(score) final_scores = [] for participant, scores in participant_scores.items(): scores.sort(reverse=True) top_three_scores = scores[:3] average_score = sum(top_three_scores) / len(top_three_scores) final_scores.append((participant, average_score)) final_scores.sort(key=lambda x: (-x[1], x[0])) ranks = {} current_rank = 0 current_score = None for i, (participant, score) in enumerate(final_scores): if score != current_score: current_rank = i + 1 current_score = score ranks[participant] = current_rank ranked_participants = sorted(ranks.keys()) result = [(participant, ranks[participant]) for participant in ranked_participants] return result"},{"question":"You are a software engineer working on a project to develop a simplified account management system for a bank. The bank needs to be able to track deposits and withdrawals made to a customer\'s account over a period of time. Write a function `account_balance(transactions)` that takes a list of strings representing transactions, each in the format of \\"D amount\\" for deposits and \\"W amount\\" for withdrawals. The function should return the final balance of the account after processing all transactions. Assume the initial balance is 0. To illustrate the problem, consider the following example: ```python transactions = [\\"D 300\\", \\"D 200\\", \\"W 100\\", \\"D 50\\"] account_balance(transactions) returns 450 ``` Here is the detailed breakdown of the operations: 1. Initial balance: 0 2. Deposit 300 -> Balance: 300 3. Deposit 200 -> Balance: 500 4. Withdraw 100 -> Balance: 400 5. Deposit 50 -> Balance: 450 Return the final balance of 450.","solution":"def account_balance(transactions): Returns the final account balance after processing a list of transactions. Each transaction is a string in the format \\"D amount\\" for deposits and \\"W amount\\" for withdrawals. Parameters: transactions (list): List of transaction strings. Returns: int: The final balance of the account. balance = 0 for transaction in transactions: type_, amount = transaction.split() amount = int(amount) if type_ == \\"D\\": balance += amount elif type_ == \\"W\\": balance -= amount return balance"},{"question":"Given two strings, the task is to find the longest common prefix between them. Input: First line of input contains number of testcases T. For each testcase, first line contains two strings str1 and str2. Output: For each testcase, print the longest common prefix. If there is no common prefix, print \\"-1\\". User Task: The task is to complete the function longestCommonPrefix() which takes two strings as parameters and returns the longest common prefix. Constraints: 1 <= T <= 50 1 <= |str1|, |str2| <= 1000 Example: Input: 2 geeksforgeeks geeks hello he Output: geeks he Explanation: Testcase 1: The longest common prefix between \\"geeksforgeeks\\" and \\"geeks\\" is \\"geeks\\". Testcase 2: The longest common prefix between \\"hello\\" and \\"he\\" is \\"he\\".","solution":"def longestCommonPrefix(str1, str2): Returns the longest common prefix between str1 and str2. If there is no common prefix, returns \\"-1\\". min_length = min(len(str1), len(str2)) i = 0 while i < min_length and str1[i] == str2[i]: i += 1 if i == 0: return \\"-1\\" else: return str1[:i] def process_test_cases(test_cases): results = [] for str1, str2 in test_cases: results.append(longestCommonPrefix(str1, str2)) return results"},{"question":"Given an integer y, determine if there exists a non-negative integer z such that the number of set bits (1-bits) in z is exactly y and the sum of all bits in z is a prime number. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single integer y. -----Output----- For each test case, output a single line containing \\"YES\\" if such an integer z exists, otherwise output \\"NO\\". -----Constraints----- - 1 le T le 10^5 - 0 le y le 60 -----Example Input----- 3 1 2 7 -----Example Output----- NO YES YES","solution":"def is_prime(n): Check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True # Precompute prime status for all numbers from 0 to 60 prime_status = [is_prime(i) for i in range(61)] def solve(test_cases): Solve the problem for each test case. results = [] for y in test_cases: if prime_status[y]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Lina is a budding software engineer and she enjoys solving puzzles in her free time. One day, she comes across an interesting problem related to orders in a list. She has a list of positive integers and wants to find out how many pairs of elements in the list have an even difference. She asks for your help to solve this problem efficiently. Input: - The first line consists of a single integer n, the length of the list (1 ≤ n ≤ 1000). - The second line consists of n positive integers ai (1 ≤ ai ≤ 10^9), the elements of the list. Output: - Print a single integer — the number of pairs (i, j) where 1 ≤ i < j ≤ n and the absolute difference between the elements ai and aj is even. Examples: Input: 5 1 2 3 4 5 Output: 4 Input: 3 10 20 30 Output: 3 Explanation: In the first example: - The pairs (i, j) where the absolute difference between ai and aj is even are (1, 3), (1, 5), (2, 4), and (3, 5). - The absolute differences are |1-3|=2, |1-5|=4, |2-4|=2, |3-5|=2 respectively, which are all even. In the second example: - The pairs (i, j) where the absolute difference between ai and aj is even are (1, 2), (1, 3), (2, 3). - The absolute differences are |10-20|=10, |10-30|=20, |20-30|=10 respectively, which are all even.","solution":"def even_difference_pairs_count(n, arr): This function takes in an integer n and a list of integers arr. It returns the count of pairs (i, j) where 1 ≤ i < j ≤ n and the absolute difference between the elements ai and aj is even. even_count = 0 odd_count = 0 # Counting even and odd numbers in the list for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # The number of pairs of even numbers even_pairs = even_count * (even_count - 1) // 2 # The number of pairs of odd numbers odd_pairs = odd_count * (odd_count - 1) // 2 # Total pairs where the absolute difference is even (either both numbers are even or both are odd) return even_pairs + odd_pairs"},{"question":"You are given an array of integers. For a given integer k, your task is to find the number of distinct pairs (i, j) in the array such that i < j and the sum of array[i] and array[j] is equal to k. The program should be efficient to handle large inputs, as this can involve checking a large number of pairs. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers n and k, where n is the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. Output: - For each test case, output a single integer, the number of distinct pairs that add up to k. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ array[i] ≤ 10^6 0 ≤ k ≤ 2 * 10^6 Note: Ensure the program handles large input/output efficiently. SAMPLE INPUT 3 5 7 1 2 3 4 5 4 1 1 5 1 5 3 8 3 5 2 SAMPLE OUTPUT 2 0 1","solution":"def count_pairs_with_sum(arr, k): Counts the number of distinct pairs (i, j) in the array such that i < j and arr[i] + arr[j] = k. seen = {} count = 0 for num in arr: complement = k - num if complement in seen and seen[complement] > 0: count += 1 seen[complement] -= 1 else: if num in seen: seen[num] += 1 else: seen[num] = 1 return count def process_test_cases(test_cases): results = [] for case in test_cases: n, k = case[\'nk\'] array = case[\'array\'] results.append(count_pairs_with_sum(array, k)) return results def main(T, test_cases): results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Create a program that processes a list of strings and calculates the frequency of each word in the list. The program should then output the word that occurs most frequently. If there are multiple words with the same highest frequency, output them in alphabetical order. Input - A series of strings, each on a new line. - The end of the list is denoted by a line containing only the character `#`. Output - The word that occurs most frequently in the list. - If multiple words have the same highest frequency, output all such words sorted alphabetically, each on a new line. Example Sample Input ``` apple banana apple orange banana banana # ``` Sample Output ``` banana ``` Sample Input ``` dog cat bird dog cat bird # ``` Sample Output ``` bird cat dog ```","solution":"def most_frequent_words(strings): if not strings: return [] word_count = {} for word in strings: if word == \'#\': break if word in word_count: word_count[word] += 1 else: word_count[word] = 1 if not word_count: return [] max_frequency = max(word_count.values()) most_frequent = [word for word, count in word_count.items() if count == max_frequency] return sorted(most_frequent)"},{"question":"Your task: You are going to write a function that determines whether a given string starts and ends with the same character, ignoring case. Given a string, your function should return `true` if the string starts and ends with the same character (case-insensitive), and `false` otherwise. Your function should not use any built-in string comparison functions that ignore case. Instead, you should manually convert characters to their lowercase or uppercase equivalents to perform the comparison. For instance, in the English alphabet, the lowercase \'a\' is equivalent to the uppercase \'A\', and the lowercase \'z\' is equivalent to the uppercase \'Z\'. You will need to account for both lowercase and uppercase letters in your solution. You may assume the input string will only contain alphabetic characters (both lowercase and uppercase) and will have a length of at least one character. Function Signature: ```python def is_same_start_end_character(s: str) -> bool: # your code here ``` Example: ```python assert is_same_start_end_character(\\"Level\\") == True assert is_same_start_end_character(\\"Zebra\\") == False assert is_same_start_end_character(\\"aPplea\\") == True assert is_same_start_end_character(\\"dRhD\\") == True assert is_same_start_end_character(\\"x\\") == True ```","solution":"def is_same_start_end_character(s: str) -> bool: Determines whether a given string starts and ends with the same character, ignoring case. if len(s) < 1: return False # Convert both the first and last characters to lowercase start_char = s[0].lower() end_char = s[-1].lower() return start_char == end_char"},{"question":"As part of a research project, a group of scientists is analyzing the migration pattern of birds. They have developed a system which tracks the movement of birds between various locations. Each movement between two locations is recorded as a directed edge in a graph. The scientists are particularly interested in identifying the longest path (in terms of the number of edges) a bird can travel without revisiting any location. Input Format: First line of input will consist of two integers, N and M, denoting the number of locations and the number of direct paths (edges) between them respectively. Each of the next M lines contains two integers u and v, representing a directed edge from location u to location v. Output Format: A single integer representing the length of the longest path in the graph without revisiting any location. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 1 ≤ u, v ≤ N Example: Input: 6 7 1 2 2 3 3 4 4 5 5 6 3 6 1 5 Output: 5 Explanation: The longest path without revisiting any location is 1→2→3→4→5→6 which has 5 edges.","solution":"def longest_path_dag(N, M, edges): from collections import defaultdict, deque graph = defaultdict(list) indegree = [0] * N # Create the graph for u, v in edges: graph[u-1].append(v-1) indegree[v-1] += 1 # Topological sorting using Kahn\'s Algorithm topo_sort = [] zero_indegree_queue = deque([i for i in range(N) if indegree[i] == 0]) while zero_indegree_queue: node = zero_indegree_queue.popleft() topo_sort.append(node) for neighbour in graph[node]: indegree[neighbour] -= 1 if indegree[neighbour] == 0: zero_indegree_queue.append(neighbour) # Finding the longest path in the DAG using DP approach longest_path = [0] * N for node in topo_sort: for neighbour in graph[node]: if longest_path[neighbour] < longest_path[node] + 1: longest_path[neighbour] = longest_path[node] + 1 return max(longest_path) # Example usage N = 6 M = 7 edges = [ (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (3, 6), (1, 5) ] print(longest_path_dag(N, M, edges)) # Output: 5"},{"question":"Two strings S1 and S2 are the inputs. Write a program to determine if S2 is a substring of S1. If S2 is a substring, print its starting index (0-based), otherwise print -1. -----Input----- The first line contains an integer T, total number of testcases. Then follow T pairs of lines, each pair contains a string S1 on the first line and a string S2 on the second line. -----Output----- Display the starting index of S2 in S1 if S2 is a substring of S1, otherwise display -1. The answer for each test case must be displayed in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ Length of S1, S2 ≤ 1000 -----Example----- Input 3 hello ll hello world abcde cd Output 2 -1 2","solution":"def find_substring_indices(T, test_cases): For each test case, determines if S2 is a substring of S1 and returns the starting index or -1 if not found. results = [] for i in range(T): S1, S2 = test_cases[i] index = S1.find(S2) results.append(index) return results # Example usage: # T = 3 # test_cases = [(\\"hello\\", \\"ll\\"), (\\"hello\\", \\"world\\"), (\\"abcde\\", \\"cd\\")] # print(find_substring_indices(T, test_cases)) # Output: [2, -1, 2]"},{"question":"You are a software engineer at a logistics company that is developing an optimized shipping system. The system must determine the minimal total cost to deliver packages between various cities. The cities are connected by roads, and each road has a distance and a toll cost associated with it. Due to budget constraints and maintenance schedules, some roads may become temporarily unavailable. You have been tasked to write a program to find the minimal total cost to deliver a package from a given start city to a destination city when certain roads are unavailable. More formally, you are given: - The number of cities n, - The number of roads m, - The start city s and the destination city d, - A list of m roads where each road is described by three integers u, v, and c, which denote a road from city u to city v with a toll cost c, - A list of unavailable roads, where each road is described by two integers p and q, which indicate that the road between cities p and q is unavailable. You must find the minimal total toll cost to travel from city s to city d, avoiding the roads that are unavailable. -----Input----- - The first line contains three integers n, m, and r (2 le n le 1000, 1 le m le 10^5, 0 le r le m). - The next m lines each contain three integers u, v, and c (1 le u, v le n, 1 le c le 10^4). - The next r lines each contain two integers p and q (1 le p, q le n). - The last line contains two integers s and d (1 le s, d le n). It is guaranteed that there is at least one valid path from s to d if we ignore the unavailable roads. -----Output----- Output a single integer, the minimal total toll cost to travel from city s to city d without using any unavailable roads. If there is no valid path, output -1. -----Examples----- Sample Input: 5 6 1 1 2 5 1 3 10 2 4 2 3 4 1 4 5 3 2 5 9 1 4 1 5 Sample Output: 10 Sample Input: 4 5 2 1 2 4 1 3 7 2 3 1 2 4 5 3 4 3 1 3 2 3 1 4 Sample Output: 9 In the first sample, the optimal path is 1 -> 2 -> 4 -> 5 with a total cost of 5 + 2 + 3 = 10. In the second sample, the optimal path is 1 -> 2 -> 4 with a total cost of 4 + 5 = 9, avoiding the unavailable roads.","solution":"import heapq def minimal_toll_cost(n, m, roads, unavailable, s, d): adjacency_list = {i: [] for i in range(1, n + 1)} unavailable_set = set() for u, v, c in roads: adjacency_list[u].append((v, c)) adjacency_list[v].append((u, c)) for p, q in unavailable: unavailable_set.add((p, q)) unavailable_set.add((q, p)) def dijkstra(start, end): min_heap = [(0, start)] cost_to_reach = {i: float(\'inf\') for i in range(1, n + 1)} cost_to_reach[start] = 0 while min_heap: current_cost, current_city = heapq.heappop(min_heap) if current_city == end: return current_cost if current_cost > cost_to_reach[current_city]: continue for neighbor, cost in adjacency_list[current_city]: if (current_city, neighbor) in unavailable_set: continue new_cost = current_cost + cost if new_cost < cost_to_reach[neighbor]: cost_to_reach[neighbor] = new_cost heapq.heappush(min_heap, (new_cost, neighbor)) return -1 result = dijkstra(s, d) return result"},{"question":"You are playing a game with two piles of stones. Initially, the first pile has `a` stones and the second pile has `b` stones. In each move, you can take any positive number of stones from one of the piles. The players take turns alternatively with you starting first. The game ends when one of the piles becomes empty. The winner is the player who makes the last move, taking the final stone(s) from either of the piles. Your task is to determine whether you can guarantee a win given the initial numbers of stones in both piles. Input The only string contains two space-separated integers `a` and `b` (1 ≤ a, b ≤ 100) — the initial numbers of stones in the two piles. Output If you can guarantee a win, print \\"Yes\\" (without the quotes), otherwise print \\"No\\" (without the quotes). Examples Input 7 6 Output Yes Input 14 14 Output No Note In the first example, you can win by ensuring that you always leave an odd number of stones in each pile after your move, forcing your opponent into a losing position. In the second example, whatever the first move you make, your opponent will always be able to mirror your moves, leading to a symmetric position where they win.","solution":"def can_guarantee_win(a, b): Determines whether you can guarantee a win given the initial numbers of stones in two piles. You can guarantee a win if a + b is odd, otherwise, you cannot guarantee a win. return \'Yes\' if (a + b) % 2 != 0 else \'No\'"},{"question":"Your team has developed a new software system that processes customer orders for a retail store. Each order contains several items, and you need to provide a summary of orders on a daily basis. An order can be represented as a list of items, each with a quantity and a price. For this task, you are required to generate a summary of total revenue and the number of distinct items sold for the given orders on a particular day. The orders are given as a list, where each order is represented as a list of tuples. Each tuple contains two elements: the quantity of the item sold and the unit price of that item. -----Input----- The first line contains an integer ( M ) indicating the number of orders for the day ( 0 leq M leq 100 ). Each of the next ( M ) lines consists of a list of tuples. Each tuple contains two integers ( q ) and ( p ) (( 1 leq q leq 100 ), ( 1 leq p leq 100 )), representing the quantity and the unit price of each item in the order. -----Output----- Print two integers separated by a space: the total revenue and the total number of distinct items sold across all orders for the day. -----Example----- Sample Input: 3 [(2, 10), (1, 5)] [(1, 10), (3, 5)] [(2, 5)] Sample Output: 50 3 Explanation: In this example, the total revenue is calculated as follows: Order 1: 2*10 + 1*5 = 25 Order 2: 1*10 + 3*5 = 25 Order 3: 2*5 = 10 Total revenue = 25 + 25 + 10 = 60 The distinct items sold across all orders are 10 and 5, hence the total number of distinct items sold is 2.","solution":"def summarize_orders(orders): Returns the total revenue and the number of distinct items sold for the given orders. :param orders: List of orders, each order being a list of tuples with (quantity, price) :return: Tuple of total revenue and number of distinct items sold total_revenue = 0 distinct_items = set() for order in orders: for q, p in order: total_revenue += q * p distinct_items.add(p) return total_revenue, len(distinct_items)"},{"question":"Maxwell loves numbers and wants to perform unique operations on them. He has an array of N integers. He wants to know the longest subarray such that the sum of the subarray is divisible by a given integer K. If there are multiple subarrays with the same length, return the one with the smallest starting index. Example 1: Input: arr[] = {2, 7, 6, 1, 4, 5}, K = 3 Output: [7, 6, 1, 4] Explanation: The longest subarray whose sum is divisible by 3 is [7, 6, 1, 4], and its sum is 18 which is divisible by 3. Example 2: Input: arr[] = {10, 2, -2, -20, 10}, K = 5 Output: [10, 2, -2, -20, 10] Explanation: The longest subarray whose sum is divisible by 5 is [10, 2, -2, -20, 10], and its sum is 0 which is divisible by 5. Example 3: Input: arr[] = {1, 2, 3}, K = 6 Output: [1, 2, 3] Explanation: The entire array sum 6 is divisible by 6. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestSubarray() that takes an array (arr), size of the array (n), and an integer k, and returns the longest subarray with the sum divisible by k. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 1 ≤ K ≤ 10^4","solution":"def longestSubarray(arr, n, k): Given an array `arr` and an integer `k`, returns the longest subarray where the sum is divisible by `k`. If multiple subarrays have the same length, returns the one with the smallest starting index. # Dictionary to store {mod: index} mod_dict = {0: -1} max_len = 0 start_idx = -1 current_sum = 0 for i in range(n): current_sum += arr[i] mod = current_sum % k if mod < 0: mod += k if mod in mod_dict: if i - mod_dict[mod] > max_len: max_len = i - mod_dict[mod] start_idx = mod_dict[mod] + 1 else: mod_dict[mod] = i if start_idx == -1: return [] return arr[start_idx:start_idx + max_len]"},{"question":"Alice has a collection of N distinct candies, each characterized by a unique positive integer representing its sweetness level. She wants to distribute these candies to her friends such that each friend gets exactly one candy, and the difference in sweetness levels between any two candies given to two friends is minimized. Determine this minimum difference. ------ Input Format ------ - First line will contain T, the number of test cases. Then, the test cases follow. - Each test case consists of two lines: - The first line contains a single integer N, representing the number of candies. - The second line contains N integers, separated by space, representing the sweetness levels of the candies. ------ Output Format ------ For each test case, output in a single line the minimum difference in sweetness levels between any two candies given to two different friends. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^{5} 1 ≤ text{{sweetness level}} ≤ 10^{9} ----- Sample Input 1 ------ 3 3 1 5 3 5 1 9 3 8 5 4 10 20 30 40 ----- Sample Output 1 ------ 2 1 10 ----- Explanation 1 ------ Test Case 1: The sweetness levels are 1, 3, and 5. The minimum difference between any two sweetness levels is 2 (|3 - 1| or |5 - 3|). Test Case 2: The sweetness levels are 1, 3, 5, 8, and 9. The minimum difference between any two sweetness levels is 1 (|9 - 8|). Test Case 3: The sweetness levels are 10, 20, 30, and 40. The minimum difference between any two sweetness levels is 10 (|20 - 10| or |30 - 20|).","solution":"def min_sweetness_diff(test_cases): Determines the minimum difference in sweetness levels between any two candies given to two different friends for all test cases. Parameters: test_cases (list of tuple): A list where each tuple contains the number of candies (N) and a list of N integers representing the sweetness levels. Returns: list: A list containing the minimum difference for each test case. results = [] for N, sweetness_levels in test_cases: sweetness_levels.sort() min_diff = float(\'inf\') for i in range(1, N): min_diff = min(min_diff, sweetness_levels[i] - sweetness_levels[i - 1]) results.append(min_diff) return results"},{"question":"Nina is organizing a relay race for her sports team. The race requires all team members to complete laps around a track, and they must run in a specific order that is decided in advance. Each team member runs one lap and then passes the baton to the next assigned runner. To ensure fair participation, each runner has a predetermined position indicating when they will receive the baton. Given the number of team members N and an array P of length N where P[i] represents the position of the runner who receives the baton from runner i (1-based index), determine the order in which the team members run the relay race. Input: First line contains a number N Second line contains N space separated integers Pi, where 1 ≤ i ≤ N Constraints: 1 ≤ N ≤ 10^5 1 ≤ P[i] ≤ N Output: Print the order in which the team members run the relay race. SAMPLE INPUT 4 2 3 4 1 SAMPLE OUTPUT 1 2 3 4 Explanation There are 4 team members. The race starts with runner 1. According to the given sequence: - Runner 1 passes the baton to runner 2. - Runner 2 passes the baton to runner 3. - Runner 3 passes the baton to runner 4. - Runner 4 passes the baton back to runner 1. Thus, the order in which the team members run is 1, 2, 3, 4.","solution":"def relay_race_order(N, P): Determines the running order of the team members in the relay race. Args: N : int Number of team members. P : list of int List where P[i] represents the position of the runner who receives the baton from runner i (1-based index). Returns: list of int The order in which the team members run the relay race. order = [0] * N current_runner = 1 # Starting with runner 1 for i in range(N): order[i] = current_runner current_runner = P[current_runner - 1] return order"},{"question":"You are given a list of integers representing the heights of a series of buildings, where the width of each building is 1 unit. Each building\'s width starts at the index which matches the position in the list. For example, building at index 0 has a width starting from 0 to 1. You are asked to compute the area of the largest rectangle that can be formed between these buildings. You are given no width expansion beyond the buildings themselves, meaning that the rectangle\'s base must align to the indices of the list. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has an area of 10 units (between indices 2 and 3 with height 5 and 6). Example 2: Input: heights = [1,2,3,4,5] Output: 9 Explanation: The largest rectangle has an area of 9 units (between indices 2 and 4 with height 3, 4, and 5). Notes: 1 <= heights.length <= 10^5 0 <= heights[i] <= 10^4","solution":"def largest_rectangle_area(heights): Computes the area of the largest rectangle that can be formed between buildings. :param heights: List[int] : list of integers representing the heights of buildings :return: int : area of the largest rectangle stack = [] max_area = 0 heights.append(0) # Append a zero to ensure stack is emptied at the end for i, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"You are given a list of integers. Your task is to find the first and last occurrence of a given integer X in the list and return their indices. If the integer X does not exist in the list, return [-1, -1]. Function Signature: ```python def find_occurrences(arr: List[int], X: int) -> List[int]: pass ``` Input: - `arr`: List of integers. - `X`: The target integer to find in the list. Output: - A list containing two integers where the first integer is the index of the first occurrence of X and the second integer is the index of the last occurrence of X. If X is not in the list, return [-1, -1]. Example 1: Input: arr = [1, 2, 2, 3, 4, 2, 5] X = 2 Output: [1, 5] Explanation: The first occurrence of 2 is at index 1 and the last occurrence is at index 5. Example 2: Input: arr = [1, 2, 3, 4, 5] X = 6 Output: [-1, -1] Explanation: 6 is not present in the list, so the output is [-1, -1]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `find_occurrences()` which will take the list of integers and the target integer as inputs and return the list of indices.","solution":"def find_occurrences(arr, X): Returns the indices of the first and last occurrences of X in the list. If X does not exist in the list, return [-1, -1] try: first_index = arr.index(X) last_index = len(arr) - 1 - arr[::-1].index(X) # Reverse the list and find the first occurrence return [first_index, last_index] except ValueError: return [-1, -1]"},{"question":"Create a program that finds the second largest number in a given list of integers. Write a function that takes a list of integers as input and returns the second largest number. If the list has fewer than 2 unique elements, return None. Ex: Input = [4, 3, 1, 4, 2], Output = 3 Note: Do not use any in-built sorting functions or data structures like sets to solve this problem. The solution should maintain linear time complexity.","solution":"def second_largest(numbers): Finds the second largest number in a list of integers. If the list has fewer than 2 unique elements, return None. Args: numbers (list): A list of integers. Returns: int/None: The second largest unique number or None if not applicable. if len(numbers) < 2: return None first_largest = second_largest = float(\'-inf\') for number in numbers: if number > first_largest: second_largest = first_largest first_largest = number elif first_largest > number > second_largest: second_largest = number if second_largest == float(\'-inf\'): return None return second_largest"},{"question":"A company wants to implement a promo code system for their e-commerce website. Each promo code is a string consisting of uppercase letters (A-Z) and digits (0-9). The system should adhere to the following rules: 1. A promo code is considered valid if it does not contain any of the substrings \\"AB\\" or \\"BA\\". 2. A valid promo code can be used to give a discount to a customer. 3. The company wants to ensure that each customer receives the maximum discount possible. Given a list of promo codes and their corresponding discounts, write a program to determine the maximum discount a customer can receive. # Input - The first line contains an integer **N** (1 ≤ N ≤ 1000) representing the number of promo codes. - The next **N** lines each contain a promo code **P** (1 ≤ length(P) ≤ 100) followed by an integer **D** (1 ≤ D ≤ 100) representing the discount amount. # Output - Output the maximum discount a customer can receive by using a valid promo code. - If there are no valid promo codes, output `0`. # Examples Example 1 **Input:** ``` 3 A1B2 50 C3D4 100 E5F6G7 75 ``` **Output:** ``` 100 ``` Example 2 **Input:** ``` 4 A0B1 20 B1A2 10 C0D1 30 A1C2 25 ``` **Output:** ``` 30 ``` Example 3 **Input:** ``` 2 AABB 50 BBAA 60 ``` **Output:** ``` 0 ``` # Notes - In Example 1, the code \\"A1B2\\" and \\"E5F6G7\\" are valid, but \\"C3D4\\" offers the maximum discount of 100. - In Example 2, the codes \\"A0B1\\" and \\"B1A2\\" are invalid, but \\"C0D1\\" offers a discount of 30, which is the maximum possible. - In Example 3, all given promo codes are invalid. Thus, the output is 0.","solution":"def max_discount(n, promo_codes): Returns the maximum discount a customer can receive from valid promo codes. Args: n: int : Number of promo codes promo_codes: List[Tuple[str, int]] : List containing tuples of promo code and discount Returns: int : Maximum discount a valid promo code offers max_discount = 0 for promo, discount in promo_codes: if \'AB\' not in promo and \'BA\' not in promo: max_discount = max(max_discount, discount) return max_discount"},{"question":"In this Kata, you will be given an integer `n`, and your task is to find a pair of prime numbers such that their sum is equal to `n`. If multiple such pairs exist, return the pair with the smallest difference, and if there are still multiple pairs with the same difference, return the pair where the smaller prime number is the smallest. If no such pair exists, return an empty array. For example, given `n = 10`, there are a number of possible pairs such as `[3,7]` and `[5,5]`. Among these, `[5,5]` is the pair with the smallest difference, so `solve(10) = [5,5]`. As another example, for `n = 12`, the possible pairs are `[5,7]`, thus `solve(12) = [5,7]`. More examples in the test cases. Good luck!","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def solve(n): primes = [i for i in range(2, n) if is_prime(i)] best_pair = [] smallest_difference = float(\'inf\') for prime1 in primes: prime2 = n - prime1 if prime2 in primes: difference = abs(prime1 - prime2) if difference < smallest_difference or (difference == smallest_difference and prime1 < best_pair[0]): best_pair = [prime1, prime2] smallest_difference = difference return best_pair if best_pair else []"},{"question":"Given a list of students and their corresponding scores in three subjects: Mathematics, Science, and English, calculate and return the name of the student with the highest average score. If there is a tie for the highest average score, return the name of the student that comes first alphabetically. You will be given an array of dictionaries, where each dictionary contains the keys \'name\', \'mathematics\', \'science\', and \'english\'. The values corresponding to the subject keys will be integers representing the scores in that subject. The value corresponding to \'name\' will be a string representing the student\'s name. Return a string representing the name of the student with the highest average score. Example input: [{\\"name\\": \\"Alice\\", \\"mathematics\\": 85, \\"science\\": 90, \\"english\\": 88}, {\\"name\\": \\"Bob\\", \\"mathematics\\": 90, \\"science\\": 88, \\"english\\": 85}, {\\"name\\": \\"Charlie\\", \\"mathematics\\": 85, \\"science\\": 85, \\"english\\": 85}] Example output: \\"Alice\\"","solution":"def top_student(students): Returns the name of the student with the highest average score. Args: students (list): A list of dictionaries containing student names and their scores. Returns: str: The name of the student with the highest average score. In case of a tie, the name that comes first alphabetically. max_average = -1 top_student_name = \\"\\" for student in students: average_score = (student[\'mathematics\'] + student[\'science\'] + student[\'english\']) / 3 if average_score > max_average or (average_score == max_average and student[\'name\'] < top_student_name): max_average = average_score top_student_name = student[\'name\'] return top_student_name"},{"question":"Create a __longestPrefix__ function that __receives an array__ of strings and __returns a string__ that is the longest common prefix for all strings in the array. If there is no common prefix, return an empty string. The function should handle cases where the input contains only one string or where all strings are identical. The function should also be efficient enough to handle typical edge cases in programming competitions. Examples: __Input:__ [\\"flower\\", \\"flow\\", \\"flight\\"] __Output:__ \\"fl\\" __Input:__ [\\"dog\\", \\"racecar\\", \\"car\\"] __Output:__ \\"\\" __Input:__ [\\"interspecies\\", \\"interstellar\\", \\"interstate\\"] __Output:__ \\"inters\\" __Input:__ [\\"throne\\", \\"dungeon\\"] __Output:__ \\"\\" __Input:__ [\\"throne\\", \\"throne\\"] __Output:__ \\"throne\\" All input arrays will be valid and contain only lowercase alphabetical strings with lengths greater than 0. Ensure your function handles varying lengths of strings and arrays efficiently.","solution":"def longestPrefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. :param strs: List[str] - list of strings to evaluate :return: str - longest common prefix if not strs: return \\"\\" # Start with the prefix being the first string prefix = strs[0] for string in strs[1:]: while not string.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Given an array of integers, find the minimum number of adjacent swaps required to sort the array in non-decreasing order. Constraints * 1 leq n leq 1000 * -10^5 leq a_i leq 10^5 Input An array of n integers is provided in a single line separated by space characters. Output Print a single integer representing the minimum number of swaps required to sort the array. Examples Input 3 2 1 Output 3 Input 1 3 2 Output 1","solution":"def min_adjacent_swaps_to_sort_array(arr): Returns the minimum number of adjacent swaps required to sort the array in non-decreasing order. def merge_count_split_inv(arr, temp_arr, left, mid, right): inv_count = 0 i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"You are given an array `arr` of N integers and a positive integer M. You need to rearrange the array such that the absolute difference between any two consecutive elements is at most M. If it\'s not possible to rearrange the array in such a way, you should return -1. Otherwise, return the rearranged array. Example 1: Input: N = 5, M = 3 arr = [1, 2, 8, 4, 5] Output: [1, 2, 4, 5, 8] Explanation: One possible rearrangement is [1, 2, 4, 5, 8]. The absolute difference between consecutive elements is within 3 units. Example 2: Input: N = 3, M = 1 arr = [3, 6, 9] Output: -1 Explanation: It\'s not possible to rearrange the array such that the difference between consecutive elements is at most 1. Your Task: You don\'t need to take any input. Complete the function `rearrangeArray` that takes the array `arr`, integer `N`, and integer `M` as parameters and returns the rearranged array or -1 if it is not possible. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^3 1 ≤ arr[i] ≤ 10^6 1 ≤ M ≤ 10^6","solution":"def rearrangeArray(arr, N, M): Rearranges the array such that the absolute difference between any two consecutive elements is at most M. If it\'s not possible to rearrange, returns -1. arr.sort() for i in range(1, N): if abs(arr[i] - arr[i - 1]) > M: return -1 return arr"},{"question":"You are tasked with picking up and delivering packages across a city grid. The city is represented as an n x n grid with streets running south-to-north and west-to-east. Each intersection is defined by (x, y) coordinates with 1 ≤ x, y ≤ n. You start your day at your office located at intersection (1, 1). To travel from intersection (x, y) to intersection (x\', y\'), it takes |x - x\'| + |y - y\'| minutes. You have k packages to deliver, and each package needs to be picked up from one intersection and delivered to another intersection. Each package has specific pick-up and delivery times and locations. For each i = 1, ..., k, you know that the (i^{th}) package will be ready for pick-up at intersection ((p_{x_i}), (p_{y_i})) at time (t_{p_i}) and must be delivered to intersection ((d_{x_i}), (d_{y_i})) by time (t_{d_i}). Your objective is to maximize the number of packages you can successfully deliver within their given time constraints. Input The first line of the input contains two positive integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 100,000) – the size of the city grid and the number of packages. Then k lines follow, each describing a package. The i-th of these lines contains six positive integers ( t_{p_i} ), ( p_{x_i} ), ( p_{y_i} ), ( t_{d_i} ), ( d_{x_i} ), and ( d_{y_i} ) (1 ≤ ( t_{p_i} ), ( t_{d_i} ) ≤ 1,000,000, 1 ≤ ( p_{x_i} ), ( p_{y_i} ), ( d_{x_i} ), ( d_{y_i} ) ≤ n) — denoting that the i-th package will be ready for pick-up at intersection (( p_{x_i} ), ( p_{y_i} )) at time ( t_{p_i} ) and must be delivered to intersection (( d_{x_i} ), ( d_{y_i} )) by time ( t_{d_i} ). It is guaranteed that ( t_{p_i} < t_{p_{i + 1}} ) for any i = 1, ..., k-1. Output Print a single integer, the maximum number of packages you can successfully deliver. Examples Input 5 3 2 1 2 10 3 3 4 5 1 16 2 4 9 2 5 20 4 4 Output 2 Input 6 5 1 2 3 10 6 6 3 4 1 15 2 5 7 3 4 18 1 1 9 5 5 14 2 2 12 1 6 20 5 3 Output 3 Note Explanation of the first testcase: One way to deliver 2 packages (which is the maximum possible) is: * Pick up the first package at (1,2) at time 2 and deliver it to (3,3) by time 10. * Then, pick up the second package at (1,5) at time 4 and deliver it to (2,4) by time 16. Explanation of the second testcase: One way to deliver 3 packages (which is the maximum possible) is: * Pick up the first package at (2,3) at time 1 and deliver it to (6,6) by time 10. * Then, pick up the second package at (4,1) at time 3 and deliver it to (2,5) by time 15. * Finally, pick up the fourth package at (5,5) at time 9 and deliver it to (2,2) by time 14.","solution":"def max_packages_delivered(n, k, packages): # Function to calculate Manhattan distance def manhattan(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) # Sort packages by pickup time (is already sorted as per problem statement) packages.sort() dp = [0] * (k + 1) # dp[i] represents the maximum packages delivered by picking up i-th package for i in range(1, k + 1): pi, px, py, di, dx, dy = packages[i - 1] j = i - 1 while j > 0: pj, qx, qy, qd, rx, ry = packages[j - 1] if pi >= pj + manhattan(rx, ry, px, py): dp[i] = max(dp[i], dp[j] + 1) break j -= 1 dp[i] = max(dp[i], dp[i - 1], 1) return max(dp)"},{"question":"Leah is working with strings and is interested in finding out the number of distinct substrings of a given string. For this, she needs to create an efficient algorithm to count the number of unique substrings within a given string. Given a string s of length n (1 ≤ n ≤ 10^6), find the number of distinct substrings of s. A substring of a string is defined as a non-empty sequence of consecutive characters from the string. For example, the substrings of \\"abc\\" include \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^6), which consists of only lowercase English letters. Output Output a single integer — the number of distinct substrings of the given string. Examples Input abcd Output 10 Input aaa Output 6 Explanation In the first example, the distinct substrings of \\"abcd\\" are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". There are 10 distinct substrings. In the second example, the distinct substrings of \\"aaa\\" are: \\"a\\", \\"aa\\", \\"aaa\\". Each of these substrings appears multiple times in the string, but we\'re only interested in counting each distinct substring once. Therefore, there are 6 substrings in total (\\"a\\" appears 3 times, \\"aa\\" appears 2 times, and \\"aaa\\" appears 1 time). Note To count the number of distinct substrings efficiently, consider using data structures and algorithms such as suffix arrays, suffix trees, or suffix automata.","solution":"class SuffixArray: def __init__(self, s): self.s = s self.n = len(s) self.suffix_array = self.build_suffix_array() self.lcp = self.build_lcp() def build_suffix_array(self): suffixes = sorted((self.s[i:], i) for i in range(self.n)) suffix_array = [suffix[1] for suffix in suffixes] return suffix_array def build_lcp(self): Builds the LCP (Longest Common Prefix) array. rank = [0] * self.n lcp = [0] * self.n for i, suffix in enumerate(self.suffix_array): rank[suffix] = i h = 0 for i in range(self.n): if rank[i] > 0: j = self.suffix_array[rank[i] - 1] while i + h < self.n and j + h < self.n and self.s[i + h] == self.s[j + h]: h += 1 lcp[rank[i]] = h if h > 0: h -= 1 return lcp def count_distinct_substrings(self): total_substrings = sum(self.n - suffix for suffix in self.suffix_array) lcp_sum = sum(self.lcp) return total_substrings - lcp_sum def count_distinct_substrings(s): suffix_array = SuffixArray(s) return suffix_array.count_distinct_substrings()"},{"question":"Yvonne is shopping online and wants to determine the minimum number of items she needs to buy to reach a given billing amount. She can purchase only a specific set of items, each with a fixed price. Given a list of item prices and a target billing amount, determine the minimum number of items she must purchase to reach or exceed the target. ------ Input Format ------ The first line contains an integer N, the number of different items available for purchase. The second line contains N integers, denoting the prices of the items. The third line contains an integer T, the target billing amount. ------ Output Format ------ Output the minimum number of items Yvonne must purchase to reach or exceed the target billing amount T. If it is not possible to meet or exceed the target, output -1. ------ Constraints ------ 1. 1 ≤ N ≤ 100 - the number of different items. 2. 1 ≤ text{price of each item} ≤ 1000 3. 1 ≤ T ≤ 10000 - the target billing amount. ----- Sample Input 1 ------ 5 100 200 300 400 500 700 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ Example - Yvonne can buy items with prices 300 and 400 to meet the target bill of 700. ----- Sample Input 2 ------ 3 150 350 450 100 ----- Sample Output 2 ------ 1 ----- Explanation 2 ------ Example - Yvonne can buy the item with price 150 to exceed the target bill of 100. ----- Sample Input 3 ------ 4 800 850 900 950 5000 ----- Sample Output 3 ------ -1 ----- Explanation 3 ------ Example - It is not possible to reach the target bill of 5000 from the available items.","solution":"def min_items_to_reach_target(prices, target): prices.sort(reverse=True) # Sort prices in descending order total_sum = 0 count = 0 for price in prices: total_sum += price count += 1 if total_sum >= target: return count return -1 # Return -1 if target cannot be met"},{"question":"You are given two strings `s1` and `s2` of equal length consisting of lowercase alphabetical characters. You are also given an integer `k`. Your task is to determine if you can obtain string `s2` by exactly `k` operations on string `s1`. In one operation, you can change exactly one character at any position in `s1` to another lowercase alphabetical character. Input The first line contains the integer `k` (1 ≤ k ≤ 1000) — the exact number of operations to be performed. The second line contains the string `s1` (1 ≤ |s1| ≤ 1000) — the initial string. The third line contains the string `s2` (|s2| = |s1|) — the target string. Output Output \\"YES\\" if it is possible to obtain `s2` from `s1` using exactly `k` operations, otherwise output \\"NO\\". Examples Input 3 abcdef abcxyz Output YES Input 2 abcd abcf Output NO","solution":"def can_obtain_by_k_operations(k, s1, s2): Determine if s2 can be obtained from s1 with exactly k operations. mismatch_count = sum(1 for a, b in zip(s1, s2) if a != b) if mismatch_count == k: return \\"YES\\" else: return \\"NO\\""},{"question":"In a software development project, a team is working on a system that needs to validate a sequence of operations logs to ensure they are consistent with a set of pre-defined rules. Given an array of strings `operations`, where each string represents an operation, write a function to determine if the sequence adheres to the following rules: 1. \\"open\\" operation starts a new context. 2. \\"close\\" operation ends the most recent opened context. 3. Any other operation is considered valid only if it is within an open context. The function should return a boolean indicating whether the sequence of operations is valid or not. Example 1: Input: operations = [\\"open\\", \\"read\\", \\"write\\", \\"close\\"] Output: true Explanation: \\"open\\" starts a new context, \\"read\\" and \\"write\\" are valid within the context, and \\"close\\" ends the context correctly. Example 2: Input: operations = [\\"read\\", \\"open\\", \\"write\\", \\"close\\"] Output: false Explanation: \\"read\\" is not valid outside an open context. Example 3: Input: operations = [\\"open\\", \\"read\\", \\"close\\", \\"close\\"] Output: false Explanation: There is an extra \\"close\\" operation without a matching \\"open\\". Your Task: You don\'t need to read or print anything. Your task is to complete the function `validate_operations()` which takes a list of strings `operations` as input parameter and returns a boolean indicating whether the operations sequence is valid or not. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: - The number of operations n will be in the range 1 <= n <= 10000 - Each operation string will be one of \\"open\\", \\"close\\", or any other string up to a length of 10 characters.","solution":"def validate_operations(operations): Validates a sequence of operations for adherence to specific rules regarding open and close contexts. Args: operations (list of str): List of operation strings. Returns: bool: True if the sequence is valid, False otherwise. context_depth = 0 for operation in operations: if operation == \\"open\\": context_depth += 1 elif operation == \\"close\\": context_depth -= 1 if context_depth < 0: return False else: if context_depth == 0: return False return context_depth == 0"},{"question":"V: Largest Rectangle in Histogram Problem Statement Given an array of integers heights representing the histogram\'s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram. For example, if you have heights = [2,1,5,6,2,3], the largest rectangle has an area of 10 (from the 3rd to the 4th element with a height of 5 and 6 respectively). Input The input consists of a single line containing integers representing the heights of the histogram bars. heights Constraints * 1 ≤ heights.length ≤ 10^5 * 0 ≤ heights[i] ≤ 10^4 Output Output the area of the largest rectangle in one line. Sample Input 1 [2,1,5,6,2,3] Output for Sample Input 1 10 Sample Input 2 [2,4] Output for Sample Input 2 4 Example Input [2,1,5,6,2,3] Output 10","solution":"def largestRectangleArea(heights): Find the largest rectangle area in the histogram with bar heights given by the heights array. stack = [] # stack to store the indices of the histogram bars max_area = 0 # variable to keep track of the maximum area # Append a 0 height to handle the computation at the end heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"A popular botanical garden is open to visitors year-round, and the administration has decided to enhance the visitor experience by identifying different types of \\"flora clusters\\" within the garden. Each cluster consists of a group of trees that grow in a formation and are connected by the growth paths between them. For this problem, trees can be modeled as points on a 2D coordinate plane. Two trees belong to the same cluster if and only if there exists a sequence of trees in which each pair of consecutive trees are directly connected by a growth path. Given the coordinates of the trees and the growth paths connecting them, you need to analyze and identify if two given trees belong to the same flora cluster or not. -----Input----- Input begins with two integers N and M on a single line, representing the number of trees (1 le N le 10000) and the number of growth paths (0 le M le 10000) respectively. The next N lines each contain two integers x_i and y_i, representing the coordinates (x_i, y_i) of each tree. Each coordinate is in the range [0, 10000]. The following M lines each contain two integers a and b, representing a growth path connecting the a-th and b-th tree. The last line contains a single integer P, representing the number of pairs of trees to be tested (1 le P le 1000). The next P lines each contain two integers u and v, representing the indices of the two trees in the test. -----Output----- For each of the P pairs of trees to be tested, output either “connected” if the trees are in the same flora cluster, or “not connected” if they are in different clusters. -----Examples----- Sample Input: 5 3 1 1 2 2 3 3 4 4 5 5 1 2 2 3 4 5 3 1 3 1 4 4 5 Sample Output: connected not connected connected","solution":"def find_flora_clusters(N, M, coordinates, growth_paths, P, queries): from collections import defaultdict, deque # Convert growth paths to adjacency list graph = defaultdict(list) for a, b in growth_paths: graph[a].append(b) graph[b].append(a) # Helper function to perform BFS or DFS to find connected components def bfs(node, visited, component): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited[neighbor] = component queue.append(neighbor) # Find all connected components visited = {} component = 0 for i in range(1, N + 1): if i not in visited: component += 1 visited[i] = component bfs(i, visited, component) # Answer the queries results = [] for u, v in queries: if visited.get(u) == visited.get(v): results.append(\\"connected\\") else: results.append(\\"not connected\\") return results # Example usage: N = 5 M = 3 coordinates = [ [1, 1], [2, 2], [3, 3], [4, 4], [5, 5] ] growth_paths = [ [1, 2], [2, 3], [4, 5] ] P = 3 queries = [ [1, 3], [1, 4], [4, 5] ] print(find_flora_clusters(N, M, coordinates, growth_paths, P, queries)) # Output: [\'connected\', \'not connected\', \'connected\']"},{"question":"Input 5 4 4 2 2 5 5 BCDE A.CB .B.A DECD EDAB Output 450","solution":"def process_grid(m, n, k, sequence, grid): Processes the input and computes the required output. :param m: Number of rows of the grid :param n: Number of columns of the grid :param k: An integer parameter :param sequence: A list of integers (sequence of numbers) :param grid: 2D list representing the grid :return: Calculated result # Example implementation for demonstration # This part of the implementation should be adjusted based on specific requirements result = sum(sequence) * k # Placeholder computation return result # Example invocation # m, n, k = 5, 4, 4 # sequence = [2, 2, 5, 5] # grid = [ # \\"BCDE\\", # \\"A.CB\\", # \\".B.A\\", # \\"DECD\\", # \\"EDAB\\" # ] # print(process_grid(m, n, k, sequence, grid)) # Caution: adjust implementation for your actual needs"},{"question":"Write a function that takes in a string and an integer `n`, and returns a new string where each character in the original string is shifted `n` positions forward in the alphabet. If shifting the character past \'z\', it should wrap around back to \'a\'. The function should maintain the case (uppercase/lowercase) of the original letters. Non-alphabet characters should remain unchanged. # Examples - For a string \\"abc\\" and `n` = 2, the output should be \\"cde\\". - For a string \\"XYZ\\" and `n` = 3, the output should be \\"ABC\\". - For a string \\"Hello, World!\\" and `n` = 5, the output should be \\"Mjqqt, Btwqi!\\".","solution":"def shift_string(s, n): Shifts each letter in the string `s` by `n` positions in the alphabet. Preserves case and leaves non-alphabet characters unchanged. shifted_string = [] for char in s: if char.isalpha(): if char.islower(): new_char = chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\')) else: new_char = chr((ord(char) - ord(\'A\') + n) % 26 + ord(\'A\')) shifted_string.append(new_char) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"You are given a list of integers nums. Your task is to find the largest integer in the list which is a perfect square whose digit sum (sum of its digits) is a prime number. If no such integer exists, return -1. Example 1: Input: nums = [16, 25, 36, 49, 50] Output: 49 Explanation: 16 -> digit sum = 1 + 6 = 7 (prime) 25 -> digit sum = 2 + 5 = 7 (prime) 36 -> digit sum = 3 + 6 = 9 (not prime) 49 -> digit sum = 4 + 9 = 13 (prime) 50 -> not a perfect square The largest perfect square with a prime digit sum is 49. Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 10^9","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def digit_sum(n): Calculate the sum of digits of a number. return sum(int(digit) for digit in str(n)) def largest_square_with_prime_digit_sum(nums): Find the largest perfect square in the list whose digit sum is a prime number. result = -1 for num in nums: if math.isqrt(num) ** 2 == num: # Check if num is a perfect square if is_prime(digit_sum(num)): # Check if digit sum is prime result = max(result, num) # Update result if num is larger return result"},{"question":"Given an array of integers, write a function `findMissing(arr)` that finds and returns the smallest positive integer that is missing from the array. The function should have a time complexity of O(n). # Examples - For the input `[3, 4, -1, 1]`, the function should return `2`. - For the input `[1, 2, 0]`, the function should return `3`. - For the input `[7, 8, 9, 11, 12]`, the function should return `1`. # Constraints - The array can contain both positive and negative integers. - The array may contain duplicate values. - The array may be empty. # Function Signature ```python def findMissing(arr: List[int]) -> int: pass ``` # Notes - You can assume that `arr` will contain no more than 10^5 elements. - Aim to solve the problem using constant space, i.e., your solution should use only a fixed amount of additional memory regardless of the size of the input array.","solution":"def findMissing(arr): n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Igor K. is working on another optimization to speed up Search Ultimate even further. This time, he wants to improve the efficiency of summing multiple numbers. In assembly programming, large sums can take several instructions if not optimized well. Igor thought of using the `lea` command to sum numbers efficiently by leveraging the fact that addition and multiplication can be combined in clever ways. Given that you have a set of numbers, {a1, a2, a3, ..., an}, Igor wants to find the minimum number of `lea` instructions required to compute the sum of these numbers starting from an initial value of 0 in register eax. The sum can be placed in any register by the end of the operations. The `lea` command in Azembler allows the following operations: * lea x, [y] * lea x, [y + z] * lea x, [k*y] * lea x, [y + k*z] where k can be 1, 2, 4, or 8, and x, y, and z are any registers. Input The input data contain a single line with integers separated by spaces. The first component is the integer n (1 ≤ n ≤ 100), which is the number of elements in the set. The next n components are the numbers {a1, a2, ..., an}, each of which is a positive integer within the range [1, 1000]. Output On the first line, print the number p, which represents the minimum number of `lea` operations needed. Then print the program consisting of p commands, performing the operations. Ensure the format of commands is as specified (especially note the acceptable values for k and spacing). Examples Input 3 2 3 7 Output 2 lea ebx, [eax + ebx] lea ecx, [ebx + 4*eax] Input 2 4 6 Output 2 lea ebx, [4*eax] lea ecx, [2*eax + ebx]","solution":"def compute_lea_operations(n, numbers): Given a set of numbers, this function computes the minimum number of `lea` assembly instructions required to compute the sum. Parameters: n (int): The number of elements in the set. numbers (list of int): The numbers to be summed. Returns: tuple: The number of instructions and the list of instructions. operations = [] registers = [\'eax\', \'ebx\', \'ecx\', \'edx\'] # Start with the sum being zero in eax sum_register = registers[0] current_register = 1 if n == 1: return 1, [f\\"lea {registers[current_register]}, [{numbers[0]}*{registers[0]}]\\"] # Initial step: load the first value into the next register operations.append(f\\"lea {registers[current_register]}, [{numbers[0]}*{sum_register}]\\") for i in range(1, n): current_op = f\\"lea {registers[current_register]}, [{registers[current_register]} + {numbers[i]//2}*{sum_register}]\\" operations.append(current_op) return len(operations), operations"},{"question":"Given a list of integer heights representing the elevation of bars in a histogram-like chart, write a function `max_water_volume()` that calculates the maximum amount of water that can be trapped between the bars after raining. The function should take a single argument - a list of integers `heights` representing the heights of the bars. Return an integer - the maximum volume of water trapped. Examples: ```python max_water_volume([0,1,0,2,1,0,1,3,2,1,2,1]) # should return 6 max_water_volume([4,2,0,3,2,5]) # should return 9 max_water_volume([1,1,1,1]) # should return 0 max_water_volume([1,0,2]) # should return 1 ``` ***Explanation:*** - For the first example, the chart looks like this: ``` # # # # ``` The volume of trapped water is 6 units. - For the second example, the chart looks like this: ``` # # # # # # # # # # # ``` The volume of trapped water is 9 units. Constraints: - List `heights` will have at least one bar. - All elements in `heights` will be non-negative integers.","solution":"def max_water_volume(heights): Calculate the maximum amount of water that can be trapped between the bars after raining. :param heights: List of integers representing the height of the bars. :return: Integer representing the maximum volume of water trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You receive some event timestamps as a space-delimited string. Each timestamp is in the \\"HH:MM\\" format. Verify if all the timestamps are in strictly increasing order. Return: * `True` if all timestamps are in strictly increasing order. * `False` if there is any timestamp that is not in strictly increasing order. Examples ``` \\"09:00 10:00 11:00\\" ==> return True, because each timestamp is in increasing order \\"12:30 12:45 12:40\\" ==> return False, because \\"12:40\\" is not greater than \\"12:45\\" \\"23:00 23:01 23:59\\" ==> return True, because each timestamp is in increasing order \\"18:30 18:30 18:35\\" ==> return False, because \\"18:30\\" is not strictly greater than \\"18:30\\" ```","solution":"def are_timestamps_increasing(timestamps): Returns True if all timestamps are in strictly increasing order, False otherwise. Args: timestamps (str): A space-delimited string of timestamps in \\"HH:MM\\" format. Returns: bool: True if timestamps are in strictly increasing order, False otherwise. times = timestamps.split() for i in range(len(times) - 1): if times[i] >= times[i + 1]: return False return True"},{"question":"In an effort to enhance her computer security system, Alice has decided to implement a new encryption method. She needs your assistance to create a special encryption sequence based on the pattern of input strings she provides. The encryption sequence should follow these rules: 1. Each character in the input string should be replaced by its corresponding position in the alphabet, where \'a\' is 1, \'b\' is 2, ..., and \'z\' is 26. 2. Convert each position number to a string. 3. Concatenate all the string representations of the numbers to form the final encrypted sequence. Your task is to transform the input string into the corresponding encrypted sequence according to the rules mentioned above. -----Input----- The input contains a single line with a string s (1 ≤ |s| ≤ 100), composed entirely of lowercase Latin letters. -----Output----- Print the encrypted sequence of the input string based on the given rules. -----Examples----- Input cab Output 312 Input hello Output 85121215 Input xyz Output 242526 -----Note----- In the first test case, \'c\' is the 3rd letter, \'a\' is the 1st letter, and \'b\' is the 2nd letter. Concatenating their positions gives \\"312\\". In the second test case, \'h\' is the 8th letter, \'e\' is the 5th letter, \'l\' is the 12th letter (occurring twice), and \'o\' is the 15th letter. Concatenating their positions gives \\"85121215\\". In the third test case, \'x\' is the 24th letter, \'y\' is the 25th letter, and \'z\' is the 26th letter. Concatenating their positions gives \\"242526\\".","solution":"def encrypt_string(s): This function takes a string s composed of lowercase Latin letters and returns an encrypted sequence where each character is replaced by its corresponding position in the alphabet (1 for \'a\', 2 for \'b\', ..., 26 for \'z\'). result = \'\'.join(str(ord(char) - ord(\'a\') + 1) for char in s) return result"},{"question":"You are organizing a cooking competition where contestants are judged based on the total time taken to prepare a set of dishes. The winner is the contestant who completes their dishes in the shortest amount of time. Create a program that reads the list of contestant numbers and their total cooking times in minutes and outputs the contestant number and the time taken by the winner. If there are multiple winners with the same time, output the one with the smallest contestant number. **Input** The input is given in the following format: ``` n c1 t1 c2 t2 :: cn tn ``` `n` (1 ≤ n ≤ 50) represents the number of contestants, and `ci` represents the contestant number. Contestant numbers are different integers between 1 and n. `ti` (1 ≤ ti ≤ 1440) is the total time in minutes taken by contestant `ci`. **Output** Output the winner\'s contestant number and their total cooking time on one line separated by a blank. Example **Input** ``` 5 1 300 2 250 3 250 4 400 5 350 ``` **Output** ``` 2 250 ```","solution":"def find_winner(n, contestants): Finds the winner of the competition based on the shortest cooking time. :param n: Number of contestants :param contestants: List of tuples where each tuple contains (contestant_number, time_taken) :returns: Tuple of (winner_contestant_number, winner_time) # Initialize the winner to the first contestant winner = contestants[0] # Iterate through the contestants to find the one with the minimum time for contestant in contestants: if (contestant[1] < winner[1]) or (contestant[1] == winner[1] and contestant[0] < winner[0]): winner = contestant return winner"},{"question":"A gardener is planting flowers along a straight path in a garden. The gardener has a certain number of flower types and needs to plant them in a specific pattern such that no two adjacent flowers are of the same type. The gardener has decided to start with an empty path and plant flowers one by one. -----Input----- The input consists of a single line that contains two integers n (1 leq n leq 1000), the total number of flowers to be planted, and k (1 leq k leq 1000), the number of different types of flowers available. -----Output----- Output a possible arrangement of flowers using numbers from 1 to k that meets the constraint. If it is not possible to plant the flowers with the given types, output \\"Not possible\\". -----Examples----- Sample Input: 5 3 Sample Output: 1 2 3 1 2","solution":"def plant_flowers(n, k): Returns a possible arrangement of flowers such that no two adjacent flowers are of the same type, or \\"Not possible\\" if it cannot be done. :param n: Total number of flowers to be planted :param k: Number of different types of flowers available :return: A possible arrangement as a list of integers or \\"Not possible\\" if k == 1 and n > 1: return \\"Not possible\\" arrangement = [] for i in range(n): arrangement.append((i % k) + 1) return arrangement"},{"question":"In a chemical company, workers often handle various chemicals with certain safety hazards. Some of these chemicals can react with others, causing dangerous situations. To ensure safety, you are to create a program to determine whether a given chemical can be safely added to a storage system. You are provided with a list of reactive pairs of chemicals. When a chemical is stored with any chemical it reacts with, it will potentially cause a hazard. Given a set of chemicals currently in the storage system, your task is to determine if a newly proposed chemical can be safely added or not. Input The input consists of multiple datasets. Each dataset is formatted as follows: n r c1 c2 ... cn pa1 pb1 pa2 pb2 . . . par pbr - The first line contains two integers: n, the number of chemicals currently in the storage, and r, the number of reactive pairs. (0 ≤ n ≤ 100, 0 ≤ r ≤ 100) - The second line contains n strings: the identifiers of chemicals currently in the storage system. - The next r lines each contain two strings: pairs of chemicals that react with each other. The input ends with a single line containing two zeros. For each dataset, assume that no chemical identifier exceeds 20 characters and consists of only alphanumeric characters. The reactive pairs are symmetric, meaning if chemical A reacts with B, then B reacts with A. Output For each dataset, output \\"SAFE\\" if the proposed chemical can be safely added to the storage, or \\"DANGEROUS\\" if it would cause a hazardous reaction. Print each result on a new line. Example Input 3 2 H2O NaOH HCl H2O HCl H2O NaOH 2 1 H2SO4 NaOH H2SO4 NaOH 1 2 NaCl NaCl H2O H2O NaOH 0 0 Output DANGEROUS DANGEROUS SAFE","solution":"def can_add_chemical(n, r, chemicals_in_storage, reactive_pairs, proposed_chemical): Determines if the proposed chemical can be safely added to the storage. Arguments: n -- number of chemicals currently in the storage r -- number of reactive pairs chemicals_in_storage -- list of chemicals currently in the storage reactive_pairs -- list of tuples, where each tuple contains two chemicals that react with each other proposed_chemical -- the chemical to be proposed for addition Returns: \\"SAFE\\" if the proposed chemical can be safely added, \\"DANGEROUS\\" otherwise. # Create a set of reactive pairs for quick lookup reactive_dict = {} for chem1, chem2 in reactive_pairs: if chem1 not in reactive_dict: reactive_dict[chem1] = set() if chem2 not in reactive_dict: reactive_dict[chem2] = set() reactive_dict[chem1].add(chem2) reactive_dict[chem2].add(chem1) # Check if the proposed chemical reacts with any chemical in storage for chem in chemicals_in_storage: if proposed_chemical in reactive_dict and chem in reactive_dict[proposed_chemical]: return \\"DANGEROUS\\" return \\"SAFE\\""},{"question":"Henry has a garden with several flowering plants, and he loves to collect the seeds produced by these plants to grow new ones. Each plant grows exactly one type of flower and has a certain height. One day, Henry decides to arrange his plants in such a way that he gets the maximum number of unique flowers in a single view by selecting some contiguous section of his garden\'s row. Your task is to help Henry determine the maximum number of unique flowers in any contiguous section of his garden. Note that all the plants in his garden are aligned in a straight row. -----Input----- The first line contains an integer N (1 leq N leq 100000), the number of plants in Henry\'s garden. The second line contains N space-separated integers a_1, a_2, ldots, a_N (1 leq a_i leq 100000) where a_i is the type of flower for the i-th plant. -----Output----- Print a single integer, the maximum number of unique flowers in any contiguous section of the garden. -----Examples----- Sample Input: 7 1 2 1 3 4 2 4 Sample Output: 4 Sample Input: 5 1 1 1 1 1 Sample Output: 1 Explanation: In the first example, the maximum number of unique flowers in any contiguous section is obtained in the section [1, 3, 4, 2], where there are four different flowers. In the second example, all the plants are of the same type, so any contiguous section will contain only one unique flower.","solution":"def max_unique_flowers(n, flower_types): Returns the maximum number of unique flowers in any contiguous section of the garden. if n == 0: return 0 flower_set = set() start = 0 max_count = 0 for end in range(n): while flower_types[end] in flower_set: flower_set.remove(flower_types[start]) start += 1 flower_set.add(flower_types[end]) max_count = max(max_count, end - start + 1) return max_count"},{"question":"San and Mei love to play games that enhance their problem-solving abilities. Recently, they came across a unique game involving magic squares. A magic square is a grid of distinct numbers where the sum of each row, column, and both diagonals is the same. San and Mei\'s task is to transform any given 3x3 grid into a magic square by changing as few elements as possible. Given a 3x3 grid, your task is to compute the minimum cost required to convert it into a magic square. The cost is defined as the absolute difference between the original and the new values of the changed elements. ----Input---- The input consists of 3 lines, each containing 3 integers separated by spaces. Each integer in the grid is between 1 and 9, inclusive. ----Output---- Output a single integer—the minimum cost required to transform the grid into a magic square. ----Examples---- Sample Input 1: 4 9 2 3 5 7 8 1 6 Sample Output 1: 0 Sample Input 2: 4 8 2 3 5 7 8 1 6 Sample Output 2: 1","solution":"def forming_magic_square(s): # All possible 3x3 magic squares magic_squares = [ [8, 1, 6, 3, 5, 7, 4, 9, 2], [6, 1, 8, 7, 5, 3, 2, 9, 4], [2, 9, 4, 7, 5, 3, 6, 1, 8], [4, 9, 2, 3, 5, 7, 8, 1, 6], [8, 3, 4, 1, 5, 9, 6, 7, 2], [4, 3, 8, 9, 5, 1, 2, 7, 6], [6, 7, 2, 1, 5, 9, 8, 3, 4], [2, 7, 6, 9, 5, 1, 4, 3, 8] ] s_flat = [num for row in s for num in row] # Calculate the minimum cost to convert the input square to any of the magic squares min_cost = float(\'inf\') for magic in magic_squares: cost = sum(abs(s_flat[i] - magic[i]) for i in range(9)) if cost < min_cost: min_cost = cost return min_cost"},{"question":"In a small town, there are n workers and m projects. Each worker has a certain skill level, and each project requires a certain skill level to be completed. Additionally, the town has a peculiar requirement that projects must be completed in increasing order of skill levels required. Each worker can potentially work on multiple projects, but each project can be worked on by only one worker. The skill level required for each project and the skill level each worker possesses are known. You need to determine the maximum number of projects that can be completed using the available workers, adhering to the skill level order and constraints. Complete the function `maxProjects` which takes two lists of integers `workers` and `projects`. `workers[i]` represents the skill level of the i^{text{th}} worker, and `projects[j]` represents the skill level required for the j^{text{th}} project. The function should return an integer representing the maximum number of projects that can be completed. Input Format - The first line contains two space-separated integers n and m, representing the number of workers and projects respectively. - The second line contains n space-separated integers, where the i^{text{th}} integer represents the skill level of the i^{text{th}} worker. - The third line contains m space-separated integers, where the j^{text{th}} integer represents the skill level required for the j^{text{th}} project. Constraints - 1 leq n, m leq 10^5 - 1 leq text{workers}[i], text{projects}[j] leq 10^9 Output Format Print a single integer which is the maximum number of projects that can be completed. Sample Input 0 5 4 3 1 4 1 5 2 1 3 4 Sample Output 0 4 Explanation 0 All workers can be assigned to a project. The assignments can be: - Worker with skill 3 to project with skill 3 - Worker with skill 1 to project with skill 1 - Worker with skill 4 to project with skill 4 - Worker with skill 1 to project with skill 2","solution":"def maxProjects(workers, projects): workers.sort() projects.sort() worker_index = 0 project_index = 0 completed_projects = 0 while worker_index < len(workers) and project_index < len(projects): if workers[worker_index] >= projects[project_index]: completed_projects += 1 project_index += 1 worker_index += 1 return completed_projects"},{"question":"You are given an n × n grid filled with integers where each column and each row is sorted in non-decreasing order. Your task is to find a given target integer in the grid and return its position (1-indexed). If there are multiple occurrences of the target, you may return any one of them. If the target does not exist in the grid, return -1. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n integers — the elements of the grid, which are guaranteed to be sorted in non-decreasing order both row-wise and column-wise. The last line contains an integer target — the integer you need to find. Output If the target exists in the grid, print two integers r and c (1 ≤ r, c ≤ n) — the position of the target in the grid (1-indexed). If there are multiple occurrences, print only one occurrence. If the target does not exist in the grid, print -1. Example Input: 4 1 4 7 11 2 5 8 12 3 6 9 16 10 13 14 17 5 Output: 2 2 Input: 3 1 4 7 2 5 8 3 6 9 10 Output: -1 Note In the first example, the number 5 is found at position (2, 2). In the second example, the target 10 does not exist in the grid, so the output is -1.","solution":"def find_target_in_grid(n, grid, target): Finds the position of the target in the n x n grid. Parameters: n (int): size of the grid grid (List[List[int]]): n x n grid of integers target (int): the integer to find in the grid Returns: Tuple[int, int] or int: position (1-based) of the target in the grid, or -1 if not found row, col = 0, n - 1 while row < n and col >= 0: if grid[row][col] == target: return (row + 1, col + 1) elif grid[row][col] > target: col -= 1 else: row += 1 return -1"},{"question":"A company is organizing a marathon for its employees, with the goal to finish within a certain time limit. Each participant\'s progress is tracked, and the company wants to determine how much more time each participant has to complete the marathon. Given the time limit for the marathon and the current time spent by a participant, calculate how much more time each participant has to complete the marathon. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two space-separated integers L and C, the time limit for the marathon and the current time spent by the participant respectively. ------ Output Format ------ For each test case, output how much more time (in minutes) the participant has to complete the marathon. ------ Constraints ------ 1 ≤ T ≤ 10 60 ≤ C < L ≤ 300 ------ Sample Input 1 ------ 4 300 120 180 90 150 145 100 60 ------ Sample Output 1 ------ 180 90 5 40 ------ Explanation 1 ------ Test case 1: The time limit is 300 minutes and the participant has already spent 120 minutes. Thus, the participant has 300-120 = 180 minutes more to complete the marathon. Test case 2: The time limit is 180 minutes and the participant has already spent 90 minutes. Thus, the participant has 180-90 = 90 minutes more to complete the marathon. Test case 3: The time limit is 150 minutes and the participant has already spent 145 minutes. Thus, the participant has 150-145 = 5 minutes more to complete the marathon. Test case 4: The time limit is 100 minutes and the participant has already spent 60 minutes. Thus, the participant has 100-60 = 40 minutes more to complete the marathon.","solution":"def remaining_time_for_marathon(test_cases): results = [] for L, C in test_cases: results.append(L - C) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:]] return test_cases"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Alice and Bob are playing a game with an array of integers. The game involves finding the maximum sum of a contiguous subarray that they can achieve by performing at most one modification in the array. A modification is defined as changing exactly one element of the array to any other integer. Your task is to write a program that computes the maximum sum of any contiguous subarray after performing at most one modification. # Input - The first line of input contains an integer `N` (1 ≤ N ≤ 100,000), the size of the array. - The second line contains `N` integers: `a1, a2, ..., aN` (-10^4 ≤ ai ≤ 10^4), representing the elements of the array. # Output - Output a single integer: the maximum sum of any contiguous subarray after performing at most one modification. # Example Input ``` 5 1 2 -3 4 5 ``` Output ``` 12 ``` Explanation: One optimal strategy here is to modify the -3 to any positive value higher than 5, say 6. The resulting array might be: 1, 2, 6, 4, 5. The sum of the whole array is 18, but the maximum contiguous subarray sum is the same as the entire sum: 18. Another optimal strategy is to keep -3, resulting in the array as is: 1, 2, -3, 4, 5. The maximum contiguous subarray sum is 4 + 5 + 2 = 11. The optimal result after performing at most one modification is 12.","solution":"def max_sum_after_modification(arr): n = len(arr) if n == 1: return max(arr[0], 0) # Arrays to store the maximum subarray sum ending at each index max_end_here = [0] * n max_end_here_with_mod = [0] * n # Kadane\'s algorithm to find the maximum subarray sum max_end_here[0] = arr[0] max_end_here_with_mod[0] = 0 # Start with no modification total_max = arr[0] for i in range(1, n): # Maximum subarray sum ending at i without modification max_end_here[i] = max(arr[i], max_end_here[i - 1] + arr[i]) # Maximum subarray sum ending at i with exactly one modification max_end_here_with_mod[i] = max(arr[i] + max_end_here_with_mod[i - 1], # Consider modification at the current position 0 if i == 1 else max_end_here[i - 2] + arr[i]) # Update the total max sum considering both scenarios total_max = max(total_max, max_end_here[i], max_end_here_with_mod[i]) return total_max # Example usage input_data = [1, 2, -3, 4, 5] print(max_sum_after_modification(input_data)) # Output should be 12"},{"question":"Consider a group of friends who are planning a vacation. They need to decide on the destination based on individual preferences. Each friend assigns a score to each destination, and they will choose the place which gets the highest cumulative score. Write a program that determines the winning destination. Input: - The first line contains two integers, `n` (number of friends) and `m` (number of destinations), separated by a space. - The next `n` lines each contain `m` integers, where the `j-th` integer in the `i-th` line corresponds to the score given by the `i-th` friend to the `j-th` destination. Output: - Print the 1-based index of the destination with the highest cumulative score. If there is a tie, print the smallest index. Constraints: - 1 ≤ n, m ≤ 100 - Scores are non-negative integers and at most 100 SAMPLE INPUT 3 4 8 6 7 5 5 7 8 6 6 5 9 8 SAMPLE OUTPUT 3","solution":"def find_best_destination(n, m, scores): This function finds the destination with the highest cumulative score. :param n: Integer, number of friends :param m: Integer, number of destinations :param scores: List of lists, each inner list containing m integers representing scores for each destination by one friend :return: Integer, 1-based index of the destination with the highest cumulative score cumulative_scores = [0] * m for i in range(n): for j in range(m): cumulative_scores[j] += scores[i][j] max_score = max(cumulative_scores) return cumulative_scores.index(max_score) + 1"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You need to perform a series of q queries, each of which asks you to determine the number of unique elements in a specified subarray of this array. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries respectively. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. The next q lines each contain two integers l and r (1 le l le r le n) — the indices (1-based) of the subarray for which you should determine the number of unique elements. -----Output----- For each query, print a single integer — the number of unique elements in the subarray from a[l] to a[r]. -----Example----- Input 5 3 1 2 3 2 1 1 3 2 5 1 5 Output 3 3 3 -----Note----- For the first query, the subarray is [1, 2, 3]. The unique elements are 1, 2, and 3. For the second query, the subarray is [2, 3, 2, 1]. The unique elements are 2, 3, and 1. For the third query, the subarray is [1, 2, 3, 2, 1]. The unique elements are 1, 2, and 3.","solution":"def count_unique_elements(n, q, array, queries): Returns a list containing the number of unique elements in specified subarray queries. :param n: int: size of the array :param q: int: number of queries :param array: list of int: the input array :param queries: list of tuples (l, r): each tuple defines a query specifying the indices (1-based) of the subarray :return: list of int: number of unique elements for each query results = [] for l, r in queries: subarray = array[l-1:r] # Convert 1-based to 0-based unique_elements = len(set(subarray)) results.append(unique_elements) return results"},{"question":"Amit and Bina are contest programmers who often challenge each other with interesting coding problems. One day, Bina posed a question related to number patterns: \\"Given a number N, determine if N can be expressed as the sum of two or more consecutive positive integers.\\" Amit found the problem interesting but was unsure how to efficiently check for such a representation. He seeks your help in solving this problem. Write a program to help Amit determine the result. Input: First line contains a number T (number of test cases). Next T lines each contain a number N. Output: Print T lines of \\"YES\\" or \\"NO\\" where each line represents whether the corresponding number N can be expressed as the sum of two or more consecutive positive integers. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 9 15 8 SAMPLE OUTPUT YES YES NO Explanation Test case #1: 9 can be expressed as 2+3+4, so the output is YES. Test case #2: 15 can be expressed as 1+2+3+4+5, so the output is YES. Test case #3: 8 cannot be expressed as the sum of two or more consecutive positive integers, so the output is NO.","solution":"def is_sum_of_consecutive_integers(n): Determine if a number can be expressed as the sum of two or more consecutive positive integers. for k in range(2, int((2 * n) ** 0.5) + 1): if (n - k * (k - 1) // 2) % k == 0: return \\"YES\\" return \\"NO\\" def batch_is_sum_of_consecutive_integers(test_cases): results = [] for n in test_cases: results.append(is_sum_of_consecutive_integers(n)) return results"},{"question":"Sara decided to read a book that has a total of N pages. She reads the first M pages of the book at triple the usual speed since she wasn\'t very interested in the beginning part of the book. How long will Sara spend reading the book in total? Note: It is guaranteed that M is a multiple of three. ------ Input Format ------ - The first line contains two space-separated integers N, M - as per the problem statement. ------ Output Format ------ - Print in a single line, an integer denoting the total number of minutes that Sara spends reading the book. ------ Constraints ------ 1 ≤ N, M ≤ 1000 M is a multiple of three. ------ subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 120 30 ----- Sample Output 1 ------ 110 ----- explanation 1 ------ For the first M = 30 pages, Sara reads at triple the usual speed, so the total amount of time spent to read this portion of the book is frac{M}{3} = 10 minutes. For the remaining N - M = 90 pages, Sara reads at the usual speed, so it takes her 90 minutes to read the remaining portion of the book. In total, Sara spends 10 + 90 = 100 minutes reading the entire book. ----- Sample Input 2 ------ 200 60 ----- Sample Output 2 ------ 180 ----- explanation 2 ------ For the first M = 60 pages, Sara reads at triple the usual speed, so the total amount of time spent to read this portion of the book is frac{M}{3} = 20 minutes. For the remaining N - M = 140 pages, Sara reads at the usual speed, so it takes her 140 minutes to read the remaining portion of the book. In total, Sara spends 20 + 140 = 160 minutes reading the entire book.","solution":"def total_reading_time(N, M): Calculate the total time spent by Sara reading the book. N: Total number of pages in the book. M: Number of pages read at triple the usual speed. time_for_first_part = M // 3 time_for_rest = N - M return time_for_first_part + time_for_rest"},{"question":"Given an integer array `nums`, which contains `n` distinct numbers in the range `[0, n]`, your task is to find the only number in the range that is missing from the array. ------ Input Format ------ - The first line of input will contain a single integer `T`, denoting the number of test cases. - Each test case starts with a single integer `n` which represents the number of elements in the array. - The next line contains `n` space-separated integers: `nums[0], nums[1], ..., nums[n-1]`. ------ Output Format ------ For each test case, output the missing number on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 0 ≤ n ≤ 10^5 - The sum of `n` across all test cases will not exceed 10^6. ----- Sample Input 1 ------ 3 3 3 0 1 2 2 0 4 3 0 1 4 ----- Sample Output 1 ------ 2 1 2 ----- Explanation 1 ------ - In the first test case, `n=3`. The array contains numbers from the range [0, 3], but 2 is missing. - In the second test case, `n=2`. The array contains numbers from the range [0, 2], but 1 is missing. - In the third test case, `n=4`. The array contains numbers from the range [0, 4], but 2 is missing.","solution":"def find_missing_number(nums, n): Given an array nums containing n distinct numbers in the range [0, n], returns the missing number in the range. total_sum = n * (n + 1) / 2 array_sum = sum(nums) return int(total_sum - array_sum) def process_test_cases(test_cases): Takes a list of test cases and produces the missing number for each results = [] for nums, n in test_cases: results.append(find_missing_number(nums, n)) return results"},{"question":"Create a program that simulates a simple bank system. The system should support the following operations: - **Creating an account**: Each new account receives a unique account number. - **Depositing money**: Allows adding a specified amount of money to an account. - **Withdrawing money**: Allows withdrawing a specified amount of money from an account, but only if there are sufficient funds. - **Checking the balance**: Returns the current balance of the specified account. - **Transferring money**: Allows transferring a specified amount of money from one account to another, given there are sufficient funds in the sender\'s account. The system should handle invalid operations gracefully, such as attempting to withdraw more money than is available, or attempting to operate on a non-existent account. Write a `Bank` class to implement this system. The class should handle account creation, deposits, withdrawals, balance checking, and transfers between accounts. Additionally, write a script to demonstrate the usage of your `Bank` class. **Example Usage:** ```python bank = Bank() # Create accounts account_1 = bank.create_account() account_2 = bank.create_account() # Deposit money bank.deposit(account_1, 500) bank.deposit(account_2, 300) # Check balances print(bank.check_balance(account_1)) # Output: 500 print(bank.check_balance(account_2)) # Output: 300 # Transfer money bank.transfer(account_1, account_2, 200) # Check balances after transfer print(bank.check_balance(account_1)) # Output: 300 print(bank.check_balance(account_2)) # Output: 500 # Attempt to withdraw more money than available bank.withdraw(account_2, 600) # Output: \\"Insufficient funds.\\" # Withdraw money bank.withdraw(account_2, 100) # Check balance after withdrawal print(bank.check_balance(account_2)) # Output: 400 ``` **Class Implementation Outline:** ```python class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self): account_number = self.next_account_number self.accounts[account_number] = 0 self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount else: raise ValueError(\\"Invalid account number.\\") def withdraw(self, account_number, amount): if account_number in self.accounts: if self.accounts[account_number] >= amount: self.accounts[account_number] -= amount else: print(\\"Insufficient funds.\\") else: raise ValueError(\\"Invalid account number.\\") def check_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: raise ValueError(\\"Invalid account number.\\") def transfer(self, from_account, to_account, amount): if from_account in self.accounts and to_account in self.accounts: if self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount else: print(\\"Insufficient funds.\\") else: raise ValueError(\\"Invalid account number.\\") ```","solution":"class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self): account_number = self.next_account_number self.accounts[account_number] = 0 self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.accounts[account_number] += amount else: raise ValueError(\\"Invalid account number.\\") def withdraw(self, account_number, amount): if account_number in self.accounts: if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.accounts[account_number] >= amount: self.accounts[account_number] -= amount else: print(\\"Insufficient funds.\\") else: raise ValueError(\\"Invalid account number.\\") def check_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: raise ValueError(\\"Invalid account number.\\") def transfer(self, from_account, to_account, amount): if from_account in self.accounts and to_account in self.accounts: if amount <= 0: raise ValueError(\\"Transfer amount must be positive.\\") if self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount else: print(\\"Insufficient funds.\\") else: raise ValueError(\\"Invalid account number.\\")"},{"question":"A company needs to monitor and track the frequency of their product usage based on logs from user activities. Each log entry contains a string representing a single product usage event. The company wants to determine how many times each unique product has been used. Given a list of strings where each string is the name of the product used in the event, write a function that returns a dictionary with the product names as keys and their corresponding usage counts as values. Example 1 - Input logs = [\\"keyboard\\", \\"mouse\\", \\"keyboard\\", \\"monitor\\", \\"keyboard\\", \\"mouse\\"] Output { \\"keyboard\\": 3, \\"mouse\\": 2, \\"monitor\\": 1 } Example 2 - Input logs = [\\"laptop\\", \\"headphones\\", \\"laptop\\", \\"mouse\\", \\"headphones\\", \\"headphones\\"] Output { \\"laptop\\": 2, \\"headphones\\": 3, \\"mouse\\": 1 } Your Task: Complete the function `trackUsage` that receives a list of strings `logs` and returns a dictionary with product names as keys and their usage counts as values. Expected Time Complexity: O(n), where n is the number of elements in the logs list. Expected Space Complexity: O(k), where k is the number of unique products. Constraints: 1 <= len(logs) <= 1000 1 <= len(logs[i]) <= 100 Each `logs[i]` consists only of lowercase English letters and digits.","solution":"def trackUsage(logs): Returns a dictionary with product names as keys and their usage counts as values. usage_dict = {} for log in logs: if log in usage_dict: usage_dict[log] += 1 else: usage_dict[log] = 1 return usage_dict"},{"question":"You are given two matrices of integers A and B, each with dimensions n x m. Your task is to find a matrix C of the same dimensions where each element of C is the sum of the corresponding elements of A and B. In other words, for every element c_ij in C, c_ij = a_ij + b_ij. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the matrices A and B, respectively. The next n lines each contain m integers, describing the matrix A. The following n lines each contain m integers, describing the matrix B. Output Output the resulting matrix C, with each row on a separate line and each element separated by a space. Example Input 3 3 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 Output 10 10 10 10 10 10 10 10 10 Note To clarify, the example corresponds to the matrices: A: 1 2 3 4 5 6 7 8 9 B: 9 8 7 6 5 4 3 2 1 Adding these element-wise results in matrix C: 10 10 10 10 10 10 10 10 10","solution":"def add_matrices(n, m, A, B): Returns the sum of two matrices A and B, each with dimensions n x m. C = [] for i in range(n): row = [] for j in range(m): row.append(A[i][j] + B[i][j]) C.append(row) return C"},{"question":"Implement a data structure that supports the following operations efficiently: 1. Insert a new element. 2. Delete an existing element. 3. Find the median of the current elements. The median is defined as the middle element when the elements are sorted in a non-decreasing order. If the number of elements is even, the median is the average of the two middle elements. **Input:** - The first line contains an integer Q, the number of operations. - The following Q lines describe the operations. Each operation is one of the following: - \\"1 x\\": Insert the element x. - \\"2 x\\": Delete one occurrence of the element x. - \\"3\\": Find the median of the current elements. **Output:** For each \\"3\\" operation, output the median on a new line. If the set of elements is empty, output \\"Empty\\". **Constraints:** - 1 ≤ Q ≤ 10^5 - Each operation is valid, including the delete operation (i.e., you will not attempt to delete an element that does not exist). - The absolute value of elements will not exceed 10^9. - The results of the median will always fit within the range of a double data type. **Sample Input:** ``` 7 1 3 1 10 1 5 3 2 5 3 2 3 3 ``` **Sample Output:** ``` 5 6.5 10 ``` **Explanation:** 1. After the operations \\"1 3\\", \\"1 10\\", \\"1 5\\", the elements are [3, 5, 10]. The median is 5. 2. After removing 5, the elements are [3, 10]. The median is the average of 3 and 10, which is 6.5. 3. After removing 3, the only element is [10], so the median is 10.","solution":"import bisect class MedianFinder: def __init__(self): self.nums = [] def insert(self, x): bisect.insort(self.nums, x) def delete(self, x): idx = bisect.bisect_left(self.nums, x) if idx != len(self.nums) and self.nums[idx] == x: del self.nums[idx] def find_median(self): n = len(self.nums) if n == 0: return \\"Empty\\" if n % 2 == 1: return self.nums[n // 2] else: return (self.nums[n // 2 - 1] + self.nums[n // 2]) / 2 def median_operations(operations): median_finder = MedianFinder() results = [] for operation in operations: if operation[0] == 1: median_finder.insert(operation[1]) elif operation[0] == 2: median_finder.delete(operation[1]) elif operation[0] == 3: results.append(median_finder.find_median()) return results"},{"question":"Given an integer array nums, return the length of the longest arithmetic subarray. An arithmetic subarray is a subarray that contains at least two elements and the difference between consecutive elements is the same. Example 1: Input: nums = [3, 6, 9, 12] Output: 4 Example 2: Input: nums = [1, 2, 2, 5, 7, 8, 8, 9] Output: 2 Example 3: Input: nums = [1, 3, 5, 7, 9, 11, 13] Output: 7 Example 4: Input: nums = [10, 0, 20, 30, 40, 50] Output: 4 Example 5: Input: nums = [5, 7, 11, 13, 17, 19, 20] Output: 2 Note: - 2 <= nums.length <= 10^4 - -10^6 <= nums[i] <= 10^6","solution":"def longest_arithmetic_subarray(nums): if len(nums) < 2: return 0 longest_length = 2 current_length = 2 common_difference = nums[1] - nums[0] for i in range(2, len(nums)): current_difference = nums[i] - nums[i - 1] if current_difference == common_difference: current_length += 1 else: common_difference = current_difference current_length = 2 longest_length = max(longest_length, current_length) return longest_length"},{"question":"You are a systems developer tasked with writing a program that will calculate the minimum number of coins needed to make change for a given amount. You have coins of different denominations available, and you need to use as few coins as possible to match the exact amount. --- Rules: - You will be provided with a list of coin denominations and an integer amount representing the total value of money to be made from these coins. - You need to find the minimum number of coins that add up to the given amount. - You may assume that you have an infinite number of each denomination of coin. - If the amount cannot be made up by any combination of the given coins, return -1. --- ``` Ex.: minCoins([1, 2, 5], 11); should return 3 (as 11 can be made with two 5-coin and one 1-coin) minCoins([2], 3); should return -1 (as 3 cannot be made by any combination of 2-coin) minCoins([1, 3, 4], 6); should return 2 (as 6 can be made with two 3-coins or one 4-coin and one 2-coin) minCoins([5, 3, 1], 7); should return 3 (as 7 can be made with one 5-coin and two 1-coins) ```","solution":"def minCoins(coins, amount): Returns the minimum number of coins needed to make up the given amount, or -1 if it\'s not possible. Args: coins (List[int]): List of coin denominations. amount (int): The target amount. Returns: int: Minimum number of coins needed to make the amount, or -1 if not possible. # Initialize DP array to a large number, assuming the amount cannot be negative. dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Victor is developing a simple text editor. One of the features he wants to implement is an undo functionality that allows a user to revert the last text change. To implement this, he needs to track changes made by the user and then undo them upon request. You are tasked with writing a program that simulates this undo functionality. Given a series of additions and deletions of characters, your program should apply them sequentially to a string. Then, when an \'undo\' operation is requested, it should revert the last change. Input - The first line contains an integer `n`, the number of operations. - The next `n` lines each describe an operation in one of the following formats: - `add <char>` where `<char>` is a single character to add to the end of the string. - `delete` which removes the last character of the string. - `undo` which undoes the last operation (either addition or deletion). Output - After processing all operations, print the resulting string. Constraints - `1 <= n <= 100` - The operations are given in the order they are to be applied. - The initial string is empty. - Each `char` in `add` operation is guaranteed to be a lowercase English letter. - The number of operations that can be undone will not exceed the number of preceding operations. Example # Input ```plaintext 6 add a add b add c delete undo undo ``` # Output ```plaintext ab ``` # Explanation - After `add a`, the string becomes \\"a\\". - After `add b`, the string becomes \\"ab\\". - After `add c`, the string becomes \\"abc\\". - After `delete`, the string becomes \\"ab\\". - After the first `undo`, the string reverts to \\"abc\\". - After the second `undo`, the string reverts to \\"ab\\".","solution":"def text_editor(operations): text = [] history = [] for operation in operations: if operation.startswith(\\"add \\"): char = operation.split()[1] text.append(char) history.append((\\"add\\", char)) elif operation == \\"delete\\": if text: deleted_char = text.pop() history.append((\\"delete\\", deleted_char)) elif operation == \\"undo\\": if history: last_action, char = history.pop() if last_action == \\"add\\": text.pop() elif last_action == \\"delete\\": text.append(char) return \'\'.join(text)"},{"question":"Dexter is planning to conduct a robot simulation contest in his university. The contest involves navigating multiple robots through a grid and ensuring they don\'t collide with each other. Each robot follows a fixed path from its initial starting point to its destination and moves either horizontally or vertically. The robots\' paths are provided as sequences of grid coordinates. Your task is to determine how many pairs of robots will not collide during their movements. Each robot\'s path can be thought of as a line segment on a 2D grid, starting from (x_{start}, y_{start}) and ending at (x_{end}, y_{end}). If two robots share any point on their paths, they are said to collide. Your task is to calculate the number of pairs of robots that do not collide. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer R — the number of robots. - The next R lines each contain four space-separated integers x_{start}, y_{start}, x_{end}, y_{end} describing the starting and ending coordinates of a robot\'s path. -----Output----- For each test case, print a single line containing one integer — the number of pairs of robots that do not collide. -----Constraints----- - 1 le T le 100 - 1 le R le 50 - 0 le x_{start}, y_{start}, x_{end}, y_{end} le 1000 -----Example Input----- 2 3 1 2 1 5 2 3 5 3 4 4 4 1 2 0 0 3 0 2 0 2 3 -----Example Output----- 2 0 -----Explanation----- Example case 1: There are three robots, and the following pairs do not collide: - Robot 1 and Robot 2 - Robot 2 and Robot 3 Robot 1 and Robot 3 collide because Robot 3\'s path crosses Robot 1\'s path vertically. Example case 2: There are two robots, and their paths intersect at point (2, 0). Hence, they collide and there are no pairs that do not collide.","solution":"def will_collide(path1, path2): Determines if two paths will collide. # Unpack the points x1_start, y1_start, x1_end, y1_end = path1 x2_start, y2_start, x2_end, y2_end = path2 # Generate all points in path 1 points1 = set() if x1_start == x1_end: # Vertical line for y in range(min(y1_start, y1_end), max(y1_start, y1_end) + 1): points1.add((x1_start, y)) else: # Horizontal line for x in range(min(x1_start, x1_end), max(x1_start, x1_end) + 1): points1.add((x, y1_start)) # Generate all points in path 2 points2 = set() if x2_start == x2_end: # Vertical line for y in range(min(y2_start, y2_end), max(y2_start, y2_end) + 1): points2.add((x2_start, y)) else: # Horizontal line for x in range(min(x2_start, x2_end), max(x2_start, x2_end) + 1): points2.add((x, y2_start)) # Check for intersection return len(points1 & points2) > 0 def count_non_colliding_pairs(test_cases): results = [] for case in test_cases: R, paths = case non_colliding_pairs = 0 for i in range(R): for j in range(i + 1, R): if not will_collide(paths[i], paths[j]): non_colliding_pairs += 1 results.append(non_colliding_pairs) return results # Main function to read input and output results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): R = int(data[idx]) idx += 1 paths = [] for _ in range(R): x_start, y_start, x_end, y_end = map(int, data[idx:idx + 4]) paths.append((x_start, y_start, x_end, y_end)) idx += 4 test_cases.append((R, paths)) results = count_non_colliding_pairs(test_cases) for result in results: print(result)"},{"question":"By using a loop, write a program to check if the given list is a circular list in which every element is an alphabet/number followed by its next corresponding element, creating a continuous loop without any break. For example: Input: [1, 2, 3, 1], Output: True (because after 1 -> 2 -> 3 it comes back to 1) Or Input: [\'a\', \'b\', \'c\', \'a\'], Output: True (because after a -> b -> c it comes back to a) Whereas: Input: [1, 2, 3, 4], Output: False (because 4 does not come back to 1) Input First line denotes T, the number of test cases. Next T lines contain each line with a list of either alphabets or numbers separated by commas. Output Print \'True\' if the list forms a circular sequence, otherwise print \'False\' for each test case. Constraints 1 ≤ T ≤ 1000 2 ≤ length of list in each test case ≤ 100 SAMPLE INPUT 3 1,2,3,1 a,b,c,a 1,2,3,4 SAMPLE OUTPUT True True False","solution":"def is_circular_list(lst): Returns True if the list is a circular sequence, otherwise False. if len(lst) < 2: return False return lst[0] == lst[-1] def process_input(input_str): Processes the input string and determines if each list is circular. Returns a list of True/False results. lines = input_str.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): lst = lines[i].split(\',\') results.append(is_circular_list(lst)) return results"},{"question":"Write a program to find all unique triplets (a_i, b_i, c_i) in an array that sum up to a target value T. The triplets should be sorted in ascending order within the triplet (a leq b leq c) and should appear in the output in ascending order. Constraints * 0 leq n leq 2000 * -10^6 leq a_i leq 10^6 * -10^6 leq T leq 10^6 Input The input is given in the following format. n ; T a_0 ; a_1 ; a_2 ; ... ; a_{n-1} In the first line, the number of elements n and the target sum T are given. In the following line, the elements of the array are given. Output Print all unique triplets (a_i, b_i, c_i) that sum up to T, with each triplet in a new line. Example Input 6 0 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1","solution":"def find_triplets(n, T, arr): This function finds all unique triplets in the array that sum up to target value T. Parameters: n (int): Number of elements in the array. T (int): Target sum. arr (list of int): Array of integers. Returns: list of tuple: List of triplets that sum up to T. arr.sort() triplets = set() for i in range(n): left, right = i + 1, n - 1 while left < right: sum_triplet = arr[i] + arr[left] + arr[right] if sum_triplet == T: triplets.add((arr[i], arr[left], arr[right])) left += 1 right -= 1 elif sum_triplet < T: left += 1 else: right -= 1 return sorted(list(triplets)) # To get the output as specified in the problem statement def format_output(triplets): This function formats the triplets for output. Parameters: triplets (list of tuples): List of triplets. Returns: str: Formatted string for output. return \\"n\\".join(\\" \\".join(map(str, triplet)) for triplet in triplets)"},{"question":"Consider a fleet of autonomous delivery drones. Each drone is assigned a unique route, delivering packages to multiple destinations following a predefined sequence. However, the complexity of real-world conditions sometimes causes slight deviations from the intended route. Each drone logs the sequence of delivery points it reaches, including any points revisited. The central control unit analyzes these logs to determine the efficiency and legality of each drone\'s route. Your task is to write a program that reconstructs the unique sequence of delivery points each drone was initially supposed to visit. In the original route, no delivery point is revisited, which means each point appears exactly once in the order the drones should have visited them. Input The input consists of multiple test cases. Each test case is described over two lines: - The first line contains an integer n (1 ≤ n ≤ 100), the total number of delivery points. - The second line contains a space-separated sequence of integers from 1 to n, each appearing at least once and possibly multiple times, representing the logged route. The end of the input is indicated by a line containing a 0 (zero). Output For each test case, output a single line containing the space-separated sequence of integers, representing the unique sequence of delivery points in the order they were originally supposed to be visited. Example Input 5 1 2 3 2 4 5 3 2 1 4 5 4 1 3 2 3 4 1 0 Output 1 2 3 4 5 1 3 2 4 Explanation In the first test case, the original route was 1 2 3 4 5. The logged route includes revisits to some points, but the expected original route does not revisit any points. In the second test case, the original route was 1 3 2 4. The logged sequence included points being revisited, but the original sequence should contain all points in the order they were intended to be visited, without any revisits.","solution":"def reconstruct_route(n, logged_route): Reconstructs the unique sequence of delivery points each drone was originally supposed to visit. Parameters: n (int): The total number of delivery points. logged_route (list): The sequence of logged delivery points with possible revisits. Returns: list: The original route with each delivery point visited exactly once. unique_route = [] visited = set() for point in logged_route: if point not in visited: unique_route.append(point) visited.add(point) return unique_route def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break logged_route = list(map(int, input_lines[i+1].split())) unique_route = reconstruct_route(n, logged_route) results.append(\\" \\".join(map(str, unique_route))) i += 2 return \\"n\\".join(results)"},{"question":"# Sum of all Digits in a String ___ # Task **_Given_** a *string* of any length that contains both numerical and non-numerical characters, **_Find_** the **_sum of all digits_** in the string. ___ # Notes * Each character in the string could be a digit (0-9), letter, or other symbols. * You need to return the sum of all digits present in the string. * If there are no digits present in the string, the sum should be 0. ___ # Input >> Output Examples ``` sumOfDigits(\\"abc123\\") ==> return 6 ``` **_Explanation_**: * The digits present in the string \\"abc123\\" are 1, 2, and 3. * The sum of these digits is 1 + 2 + 3 = 6. ___ ``` sumOfDigits(\\"1a2b3c\\") ==> return 6 ``` **_Explanation_**: * The digits present in the string \\"1a2b3c\\" are 1, 2, and 3. * The sum of these digits is 1 + 2 + 3 = 6. ___ ``` sumOfDigits(\\"abc\\") ==> return 0 ``` **_Explanation_**: * There are no digits in the string \\"abc\\". * Therefore, the sum of all digits is 0. ___ ``` sumOfDigits(\\"abc!@#) //return 0 ``` **_Explanation_**: * There are no digits in the string \\"abc!@#\\". * Therefore, the sum of all digits is 0. ___ # Enjoy Learning! ___","solution":"def sumOfDigits(s): Returns the sum of all digits in the string s. return sum(int(char) for char in s if char.isdigit())"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid can either be \'X\', which denotes an obstacle, or \'.\' which denotes a free space you can move through. You are allowed to start at any cell that is a \'.\' in the first row, and you can move one cell to the right, or directly downward to the next row to reach the cells in the subsequent rows. The goal is to determine the minimum number of steps required to reach any cell in the last row starting from any cell in the first row. ------ Input Format ------ - The first line contains two integers N (number of rows) and M (number of columns). - Each of the next N lines contains M characters, either \'X\' or \'.\'. ------ Output Format ------ Print a single integer which is the minimum number of steps required to reach any cell in the last row. If it is impossible to reach the last row, print -1. ------ Constraints ------ 1 ≤ N, M ≤ 10^{5} The total number of cells in the grid (N times M) does not exceed 10^{5}. ------ Sample Input 1 ------ 5 5 ..... ..X.. ...X. X.... ..... ------ Sample Output 1 ------ 4 ------ Sample Input 2 ------ 3 3 ..X .X. XX. ------ Sample Output 2 ------ -1 ------ Explanation 1 ------ For the first example, starting from the first cell (1,1) to the last cell (5,1) requires 4 steps: move right (1,1) -> (1,2), move down (2,2), move down (3,2), move down (4,2), move down (5,2). For the second example, it is impossible to reach the last row because of the obstacles.","solution":"from collections import deque def min_steps_to_last_row(N, M, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' # Steps: (row increment, column increment) directions = [(0, 1), (1, 0)] # Initialize queue and add all starting points from the first row queue = deque() visited = [[False] * M for _ in range(N)] for c in range(M): if grid[0][c] == \'.\': queue.append((0, c, 0)) # (row, column, steps) visited[0][c] = True # BFS to find the shortest path while queue: x, y, steps = queue.popleft() # If we reached the last row, return the steps count if x == N - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) # If we finish BFS without reaching the last row, return -1 return -1"},{"question":"Given an array of integers, find and print all the pairs of integers that sum up to a target value. Each pair should be printed in ascending order based on the first element of the pair. If there are multiple pairs with the same first element, sort them based on the second element. If no such pairs exist, print \\"No pairs found\\". Constraints * 1 ≤ length of the array ≤ 10^5 * -10^9 ≤ each integer in the array ≤ 10^9 * -10^9 ≤ target value ≤ 10^9 Input In the first line, an array of integers (space-separated) is given. In the second line, a target value (integer) is given. Output Print each pair of integers that sum up to the target value in a new line, with the two integers separated by a space. If no pairs exist, print \\"No pairs found\\". Examples Input 1 2 3 4 5 6 7 Output 1 6 2 5 3 4 Input 10 20 10 -10 -20 0 Output -20 20 -10 10 Input 1 1 1 2 Output 1 1","solution":"def find_pairs_with_sum(arr, target): Given an array of integers, find and print all pairs of integers that sum up to the target value. Each pair is printed in ascending order based on the first element of the pair. If there are multiple pairs with the same first element, they are sorted based on the second element. If no such pairs exist, print \\"No pairs found\\". arr.sort() pairs = set() seen = {} for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen[num] = 1 sorted_pairs = sorted(pairs) return sorted_pairs if sorted_pairs else \\"No pairs found\\""},{"question":"Your task is to help your friend, Shravya, to construct a sequence of integers, satisfying certain conditions. She will provide you with two integers M and Y. Your job is to construct an array B of length M, such that the sum of elements of all contiguous sub-arrays of length Y is odd. If there are multiple solutions, you can print any \\"one\\" solution. -----Note:----- - B_i must be an integer between 1 to 10^9 (both inclusive), where B_i denotes the ith element of the array B. - If it\'s impossible to construct such an array, return -1. -----Input:----- - First line will contain T, the number of testcases. Then, the testcases follow. - Each testcase, contains a single line of input, of 2 integers, M, and Y. -----Output:----- For each testcase, output in a single line, an array B of M integers, where each element of the array is between 1 to 10^9 (both inclusive), satisfying the conditions of the problem, given by Shravya. If it\'s impossible, print -1. -----Constraints:----- - 1 leq T leq 1000 - 1 leq M leq 10^3 - 1 leq Y leq M - 1 leq Y leq 109 -----Sample Input:----- 3 5 1 5 2 5 3 -----Sample Output:----- 3 5 7 9 11 1 1 1 1 1 2 1 2 1 2 -----Explanation:----- Sample Case - 1: Since, the sum of all elements of all sub-arrays of length 1 is odd, the array {3, 5, 7, 9, 11}, is a valid solution to the Sample Case - 1. All contiguous sub-arrays of length 1 of the output array B, are as follows: [1,1]: {3} - SUM([1,1]) = 3 (odd) [2,2]: {5} - SUM([2,2]) = 5 (odd) [3,3]: {7} - SUM([3,3]) = 7 (odd) [4,4]: {9} - SUM([4,4]) = 9 (odd) [5,5]: {11} - SUM([5,5]) = 11 (odd) Sample Case - 2: Since all possible sub-arrays of length 2, are taken into consideration, hence, the array {1,1,1,1,1}, is a valid solution to the Sample Case - 2. All contiguous sub-arrays of length 2 of the output array B, are as follows: [1,2]: {1,1} - SUM([1,2]) = 2 (even) [2,3]: {1,1} - SUM([2,3]) = 2 (even) [3,4]: {1,1} - SUM([3,4]) = 2 (even) [4,5]: {1,1} - SUM([4,5]) = 2 (even) Sample Case - 3: The array {2,1,2,1,2}, ensures that all sums of all sub-arrays of length 3 are odd, hence, it is a valid solution to the Sample Case - 3. All contiguous sub-arrays of length 3 of the output array B, are as follows: [1,3]: {2,1,2} - SUM([1,3]) = 5 (odd) [2,4]: {1,2,1} - SUM([2,4]) = 4 (even) [3,5]: {2,1,2} - SUM([3,5]) = 5 (odd)","solution":"def construct_sequence(M, Y): if Y == 1: # Any odd number sequence will work return [i * 2 + 1 for i in range(M)] elif Y % 2 == 0: # Y is even, all elements can be 1 to get all even-length subarray sums even return [1] * M else: # Y is odd, mix of odd and even to get odd-length subarray sums odd sequence = [] for i in range(M): if i % 2 == 0: sequence.append(2) else: sequence.append(1) return sequence def process_test_cases(test_cases): results = [] for M, Y in test_cases: result = construct_sequence(M, Y) if result: results.append(result) else: results.append([-1]) return results # Read input def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): M = int(data[index]) Y = int(data[index + 1]) test_cases.append((M, Y)) index += 2 results = process_test_cases(test_cases) for result in results: if result == [-1]: print(-1) else: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"# Favorite Digit Distance Alex loves a particular digit more than others. He considers a number perfect if the favorite digit appears in it at least `X` times. Alex now wants to find the closest perfect number greater than or equal to a given number `N`. # Task: Determine the smallest integer greater than or equal to `N` that contains the favorite digit at least `X` times. # Input 1. Starting number: `N` (1 ≤ N ≤ 10^7) 2. Favorite digit: `D` (0 ≤ D ≤ 9) 3. Required occurrences: `X` (1 ≤ X ≤ 7) # Output Return the smallest integer greater than or equal to `N` that contains the favorite digit at least `X` times. # Examples ```python closestPerfectNumber(100, 1, 2) => 101 # 101 has the digit 1 exactly 2 times closestPerfectNumber(500, 3, 1) => 503 # 503 has the digit 3 exactly 1 time closestPerfectNumber(700, 0, 3) => 1000 # 1000 has the digit 0 exactly 3 times ```","solution":"def closestPerfectNumber(N, D, X): Returns the smallest integer greater than or equal to N that contains the favorite digit D at least X times. while True: if str(N).count(str(D)) >= X: return N N += 1"},{"question":"Implement a function, `longest_subarray_sum(arr, target)`, that finds the length of the longest contiguous subarray within a given list of integers, `arr`, that sums to a given value, `target`. If no such subarray exists, the function should return `0`. Assume all inputs are valid, and no subarray will overflow integer limits. Examples: ``` longest_subarray_sum([1, -1, 5, -2, 3], 3) returns 4 (the subarray [1, -1, 5, -2]) longest_subarray_sum([-2, -1, 2, 1], 1) returns 2 (the subarray [-1, 2]) longest_subarray_sum([1, 2, 3], 6) returns 3 (the entire array [1, 2, 3]) longest_subarray_sum([1, 2, 3], 7) returns 0 (no subarray sums to 7) longest_subarray_sum([1, 2, -1, 2, 3], 4) returns 4 (the subarray [2, -1, 2, 1]) ```","solution":"def longest_subarray_sum(arr, target): Finds the length of the longest contiguous subarray within a given list of integers, arr, that sums to a given value, target. If no such subarray exists, return 0. sum_indices = {0: -1} total_sum = 0 max_length = 0 for i, num in enumerate(arr): total_sum += num if total_sum - target in sum_indices: max_length = max(max_length, i - sum_indices[total_sum - target]) if total_sum not in sum_indices: sum_indices[total_sum] = i return max_length"},{"question":"A library has N books, each with a unique number of pages. The library wants to organize a series of book swapping operations so that all books are sorted in ascending order of pages. In each operation, any two books can be swapped. The goal is to find the minimum number of swap operations required to sort the books. Example: Suppose we have 5 books with the following number of pages: 3 1 5 2 4 By swapping the books, the series of swaps could be: 1. Swap books with 3 and 1: [1, 3, 5, 2, 4] 2. Swap books with 3 and 2: [1, 2, 5, 3, 4] 3. Swap books with 5 and 3: [1, 2, 3, 5, 4] 4. Swap books with 5 and 4: [1, 2, 3, 4, 5] Therefore, the minimum number of swaps to sort the books is 4. You need to implement a function that calculates the minimum number of swaps required to sort the books in ascending order of pages. Input Format The first line contains a single integer N. The next line contains N integers: P(0), P(1), P(2), .... P(N-1) separated by space, where P(i) represents the number of pages in the ith book. Output Format Print a single integer representing the minimum number of swap operations required to sort the books. Constraints 1 ≤ N ≤ 1000 1 ≤ P(i) ≤ 10000 SAMPLE INPUT 5 3 1 5 2 4 SAMPLE OUTPUT 4","solution":"def min_swaps_to_sort(books): Calculate the minimum number of swaps required to sort the books in ascending order of pages. Parameters: books (list): A list of integers representing the number of pages in each book. Returns: int: Minimum number of swaps required to sort the books. n = len(books) # Create a list of tuples where each tuple is (book pages, original index) book_with_index = [(books[i], i) for i in range(n)] # Sort the list by book pages book_with_index.sort(key=lambda x: x[0]) visited = [False] * n num_swaps = 0 for i in range(n): # if a book is already visited or in the correct place, skip it if visited[i] or book_with_index[i][1] == i: continue # Find the size of the current cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = book_with_index[x][1] cycle_size += 1 if cycle_size > 0: num_swaps += (cycle_size - 1) return num_swaps"},{"question":"In a magical kingdom, there is a prestigious tournament of knights. Each knight can have a unique strength level represented by an integer. The king organizes them such that the knights stand in a line, and each knight must be stronger than the knight directly to their left or right. For a given list of knights\' strengths, determine all possible ways they can be arranged to satisfy this rule. Note: The number of knights will not exceed 10. -----Input----- The first and only line of input contains a list of integers representing the strengths of the knights. -----Output----- Output all possible ways the knights can be arranged such that each knight is stronger than the knight directly next to them. Each line should represent one valid arrangement, and arrangements should be sorted lexicographically based on their integer values in each arrangement. -----Examples----- Sample Input 1: [3, 1, 2] Sample Output 1: [1, 2, 3] [3, 2, 1] Sample Input 2: [4, 3, 2, 1] Sample Output 2: [1, 2, 3, 4] [4, 3, 2, 1]","solution":"from itertools import permutations def is_valid_arrangement(perm): Check if a given permutation is a valid arrangement where each knight is stronger than the knight directly next to them. for i in range(len(perm) - 1): if abs(perm[i] - perm[i + 1]) != 1: return False return True def knight_arrangements(strengths): Given a list of knight strengths, return all valid arrangements where each knight is stronger than the knight directly next to them. all_permutations = permutations(sorted(strengths)) valid_permutations = [list(perm) for perm in all_permutations if is_valid_arrangement(perm)] return sorted(valid_permutations) # Example usage: strengths = [3, 1, 2] valid_arrangements = knight_arrangements(strengths) for arrangement in valid_arrangements: print(arrangement)"},{"question":"In a town called Binaryville, all the house numbers are represented in binary numbers. The mayor of Binaryville wants to create a system that automatically converts any given decimal house number into its corresponding binary number and adds leading zeros to make it a fixed-length string. This system will aid in addressing, sorting, and data consistency across various municipal records. Your task is to write a program that takes a list of decimal house numbers and converts each one into its binary representation, ensuring all binary numbers are of the same length by adding leading zeros where necessary. Input: 1. The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of house numbers. 2. The second line contains `n` space-separated integers representing the decimal house numbers (0 ≤ house number < 1024). Output: For each house number, print the corresponding fixed-length binary number on a new line. The required length of the binary strings should be the length of the binary representation of the largest number in the input list. Example: Input 5 3 7 2 15 6 Output 0011 0111 0010 1111 0110 Explanation: The largest number in the input is 15, which is `1111` in binary. Hence, all binary numbers should be of length 4. The conversion is: - 3 -> `0011` - 7 -> `0111` - 2 -> `0010` - 15 -> `1111` - 6 -> `0110`","solution":"def decimal_to_fixed_length_binary(n, house_numbers): Converts each house number to a fixed-length binary string. The length of the binary string is determined by the binary representation of the largest number in the list. Args: n: int, number of house numbers house_numbers: list of integers, house numbers in decimal format Returns: list of strings, where each string is the binary representation of each house number with leading zeros to match the length of the largest number\'s binary representation. if n == 0: return [] if not all(0 <= num < 1024 for num in house_numbers): raise ValueError(\\"House number out of allowed range.\\") max_num = max(house_numbers) max_len = len(bin(max_num)) - 2 # excluding \'0b\' prefix result = [] for num in house_numbers: binary_str = bin(num)[2:].zfill(max_len) result.append(binary_str) return result # Example usage # print(decimal_to_fixed_length_binary(5, [3, 7, 2, 15, 6]))"},{"question":"Alice is developing a new feature for her product and wants to test a specific set of strings. She has a list of n strings and a target string t. Alice wants to know if she can form the target string t by concatenating exactly two different strings from her list. For each query, print \\"POSSIBLE\\" if the target string can be formed by concatenating exactly two different strings from the list, and \\"IMPOSSIBLE\\" otherwise. -----Input----- - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of strings in the list. - The following n lines each contain a string consisting of lowercase English letters. Each string has a length between 1 and 100. - The last line contains the target string t which also consists of lowercase English letters with a length between 1 and 200. -----Output----- - Print \\"POSSIBLE\\" without quotes if the target string can be formed by concatenating exactly two different strings from the list, or \\"IMPOSSIBLE\\" otherwise. -----Examples----- Input 3 hello world day helloworld Output POSSIBLE Input 4 a b ab cd abc Output IMPOSSIBLE","solution":"def can_form_target_string(n, string_list, target): Determines if the target string can be formed by concatenating exactly two different strings from the list. string_set = set(string_list) target_len = len(target) for i in range(1, target_len): prefix = target[:i] suffix = target[i:] if prefix in string_set and suffix in string_set and prefix != suffix: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"A company has introduced a new policy for managing employee tasks efficiently. There are \'T\' tasks in total, and each task is assigned to one of the \'N\' employees. Each task has a priority level represented by a positive integer, and each employee can handle only one task at a time. If a task assigned to an employee is completed or dropped, the employee can take another task. The input consists of a sequence of tuples where each tuple contains an employee identifier (uppercase letter), task identifier (uppercase letter), and task priority level. Each employee and each task identifier are unique. Your goal is to determine the order in which tasks should be processed to minimize the total waiting time for all tasks. INPUT: Input consists of several test cases (<20). Each test case starts with a positive integer \'T\' (1 ≤ T ≤ 52) indicating the number of tasks, followed by T tuples, each containing an employee identifier, task identifier, and task priority level. Input will be terminated by a line with a zero (0). OUTPUT: For each test case, print the order in which tasks should be processed to minimize the total waiting time. The order should be represented as a space-separated sequence of task identifiers. SAMPLE INPUT: 3 A X 5 B Y 2 C Z 1 0 SAMPLE OUTPUT: Z Y X","solution":"def process_tasks(test_cases): results = [] for case in test_cases: tasks = sorted(case[1:], key=lambda x: x[2]) # Sort by priority level results.append(\' \'.join([task[1] for task in tasks])) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") index = 0 test_cases = [] while index < len(lines): T = int(lines[index]) if T == 0: break case = [T] for i in range(index + 1, index + 1 + T): employee, task, priority = lines[i].split() case.append((employee, task, int(priority))) test_cases.append(case) index += 1 + T return test_cases def task_management(input_string): test_cases = parse_input(input_string) results = process_tasks(test_cases) for result in results: print(result)"},{"question":"Write a function that takes a string as input and returns the length of the longest substring with no repeating characters. Ensure your function handles edge cases such as empty strings or strings with all identical characters. Example: - The longest substring without repeating characters in \\"abcabcbb\\" is \\"abc\\", with a length of 3. - In the string \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", with a length of 1. - If the input string is empty, the function should return 0. ```python def length_of_longest_substring(s: str) -> int: # Your implementation here # Example usage: print(length_of_longest_substring(\\"abcabcbb\\")) # Output: 3 print(length_of_longest_substring(\\"bbbbb\\")) # Output: 1 print(length_of_longest_substring(\\"\\")) # Output: 0 ```","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are managing an electronic billboard that displays a sequence of messages. Each message is displayed for a specific duration in seconds. The total duration for all messages combined must not exceed a given limit of N seconds. To efficiently utilize the billboard time, you must select a subset of messages such that the sum of their durations is as close as possible to N seconds without exceeding it. You need to find the maximum total duration that can be achieved. -----Input----- The first line of the input contains two integers, N and M (1 ≤ N ≤ 10^4, 1 ≤ M ≤ 100) — the maximum allowed total duration and the number of messages. The second line contains M integers, each describing the duration of a message in seconds. The duration of each message is no more than 10^4 seconds. -----Output----- Print a single integer — the maximum total duration that can be achieved without exceeding the limit of N seconds. -----Examples----- Input 10 3 4 5 1 Output 10 Input 15 5 10 8 5 7 3 Output 15 Input 7 4 2 2 3 5 Output 7 -----Note----- In the first example, you can select all three messages with durations 4, 5, and 1, which sum up to 10 seconds. In the second example, you can select the messages with durations 10 and 5, which perfectly sum up to the limit of 15 seconds.","solution":"def max_duration(N, M, durations): Given a list of message durations, determine the maximum total duration that can be achieved without exceeding the limit N. :param N: The maximum allowed total duration. :param M: The number of messages. :param durations: List containing the duration of each message. :return: The maximum total duration that can be achieved without exceeding the limit. dp = [0] * (N + 1) for duration in durations: for j in range(N, duration - 1, -1): dp[j] = max(dp[j], dp[j-duration] + duration) return dp[N]"},{"question":"**Problem Statement:** Consider a special kind of sequence manipulation as follows. You\'re given a sequence of N integers. You need to perform a series of operations to transform the initial sequence into a new sequence following a specific rule. The rule is: For every pair of adjacent integers (a_i) and (a_{i+1}), the following steps will be taken: 1. If (a_i leq a_{i+1}), the number (a_i) will be incremented by 1. 2. If (a_i > a_{i+1}), the number (a_{i+1}) will be incremented by 1. These operations are performed simultaneously on all adjacent pairs for each step. You must determine the state of the sequence after exactly K steps. **Input:** - The first line contains two integers N and K - the number of elements in the sequence and the number of steps to be performed, respectively. - The second line contains N space-separated integers (a_1, a_2, ldots, a_N) representing the initial sequence. **Output:** - Print the state of the sequence after K steps in a single line. **Constraints:** - (1 leq N leq 10^5) - (1 leq K leq 10^9) - (-10^9 leq a_i leq 10^9) **Example:** Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 4 5 6 7 8 ``` Input: ``` 4 2 4 1 3 2 ``` Output: ``` 6 5 6 5 ``` **Explanation:** In the first example, the sequence is already sorted and non-decreasing, so each element will be incremented by 1 at every step. In the second example, we perform the described operations as follows: - Step 1: [5 1 4 2] (1 increments to 2 and 3 increments to 4) - Step 2: [6 5 5 3] (1 increments to 3, 2 increments to 3, 2 increments to 5, and 1 increments to 3) - Thus, the final series is [6 5 6 5] after 2 steps.","solution":"def transform_sequence(N, K, sequence): Transforms the sequence based on the specified rule for K steps. Args: - N: length of the sequence (an integer). - K: number of steps to perform (an integer). - sequence: initial sequence (a list of integers). Returns: - A list representing the state of the sequence after K steps. # The problem can be simplified: every pair will increment one element by 1 per step. # Hence, every element will be incremented by K per the rule. return [x + K for x in sequence]"},{"question":"Leo is fascinated with prime numbers and often likes to play with them. Recently he discovered something interesting: median prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The median of a list of numbers is the middle number when the numbers are sorted in ascending order. If the list has an even number of elements, the median is the average of the two middle numbers. Leo has a sequence of positive integers and wants to find out the median of all prime numbers in that sequence. If the sequence does not contain any prime numbers, the program should output -1. If the median is a non-integer, it should be rounded to the nearest integer. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of integers in Leo\'s sequence. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6) — the numbers in Leo\'s sequence. The numbers in the lines are separated by single spaces. -----Output----- In a single line print a single integer — the median of all prime numbers in the sequence, rounded to the nearest integer. If there are no prime numbers in the sequence, print -1. -----Examples----- Input 5 3 5 12 7 14 Output 5 Input 4 4 6 8 10 Output -1 -----Note----- In the first sample, the prime numbers in the sequence are 3, 5, and 7. The median of 3, 5, and 7 is 5. In the second sample, there are no prime numbers in the sequence. Thus, the output is -1.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def find_median_prime(n, sequence): primes = [num for num in sequence if is_prime(num)] if not primes: return -1 primes.sort() mid = len(primes) // 2 if len(primes) % 2 == 1: return primes[mid] else: return round((primes[mid - 1] + primes[mid]) / 2)"},{"question":"[end of section]. You are given a string representing a section of a document. You must ensure that the section ends with the phrase `[end of section]`. If the string already ends with this phrase, return the original string. If not, append the phrase to the string, ensuring there is a single space between the last word of the string and the phrase `[end of section]`. For languages where strings are immutable (such as Python), return a new string, do not modify the input string directly, to preserve compatibility with the test cases.","solution":"def ensure_section_end(text: str) -> str: Ensures the string ends with the phrase \'[end of section]\'. if text.endswith(\'[end of section]\'): return text else: return text.rstrip() + \' [end of section]\'"},{"question":"Consider a game where a player can step forward by either 1 unit or 2 units at a time. Given a distance `D`, the player\'s task is to reach exactly D units from the start (0 units). The player can only use valid moves (stepping 1 unit or 2 units at a time). The player, however, wants to count the total number of distinct ways to reach exactly D units. Write a program to determine the number of distinct ways the player can reach exactly D units from the start. Constraints * 1 leq D leq 10^5 Input Input is given from Standard Input in the following format: ``` D ``` Output Print the number of distinct ways to reach exactly D units. Examples Input ``` 4 ``` Output ``` 5 ``` Input ``` 7 ``` Output ``` 21 ```","solution":"def count_ways_to_reach_distance(D): Function to count distinct ways to reach exactly D units by stepping 1 or 2 units at a time. if D <= 0: return 0 if D == 1: return 1 if D == 2: return 2 # Initialize dp array dp = [0] * (D + 1) dp[1] = 1 dp[2] = 2 for i in range(3, D + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[D]"},{"question":"Petya and Vasya are playing another game involving a sequence of integers. The game starts with an array containing n positive integers. The game consists of two types of moves: 1. Petya can select any two integers in the array and replace both of them with their greatest common divisor (GCD). 2. Vasya can select any two integers in the array and replace both of them with their least common multiple (LCM). Both players take turns. Petya always starts first, and the game ends when there is only one integer left in the array. The player who cannot make a move (because there\'s only one integer left) loses the game. The task is to determine the winner of the game given the initial array of integers. Input The first input line contains an integer t (1 ≤ t ≤ 10). Each of the following t lines contains an integer n (1 ≤ n ≤ 1000), followed by an array of n positive integers (1 ≤ array element ≤ 10^9). Output Output t lines, each containing \\"Petya\\" if Petya wins the game with optimal play, otherwise output \\"Vasya\\". Examples Input 2 3 6 9 12 4 2 3 5 7 Output Petya Vasya","solution":"def find_winner_of_game(t, test_cases): results = [] for test_case in test_cases: n, array = test_case # If the number of elements in the array is odd, Petya wins, else Vasya wins. results.append(\\"Petya\\" if n % 2 == 1 else \\"Vasya\\") return results"},{"question":"You are given an array of positive integers and a target sum. Your task is to find two distinct integers in the array that add up to the target sum. If such integers exist, return their indices (1-based). If not, return -1. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: [1, 2] Explanation: arr[0] + arr[1] = 2 + 7 = 9 Example 2: Input: arr = [1, 2, 3, 4], target = 8 Output: -1 Explanation: There are no two integers in the array that add up to the target sum. Your Task: You don\'t need to read or print anything. Your task is to complete the function twoSum() which takes the array arr and the target sum as input parameters and returns the indices of the two numbers such that they add up to the target sum. If not possible, return -1. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 2 <= arr.length <= 10^5 1 <= arr[i] <= 10^9 1 <= target <= 2*10^9","solution":"def twoSum(arr, target): Returns indices of the two numbers such that they add up to target. seen = {} for i, num in enumerate(arr): diff = target - num if diff in seen: return [seen[diff] + 1, i + 1] seen[num] = i return -1"},{"question":"A secure messaging platform has a unique way to send encrypted messages. Each message is represented as a string of lowercase English letters, and the encryption process involves transforming each letter based on a given set of rules. The rules are represented as a list of pairs, where each pair `(a, b)` indicates that the letter `a` can be transformed into the letter `b`. To decrypt a message, you need to determine if it is possible to restore the original message by reversing the transformations. Specifically, given the encrypted message and the list of transformation rules, determine if there is a valid sequence of transformations such that the encrypted message can be converted back to its original form. -----Input----- The first line contains a string `t` (1 ≤ |t| ≤ 1000) representing the encrypted message. The second line contains a single integer `m` (1 ≤ m ≤ 100) indicating the number of transformation rules. Each of the next `m` lines contains two space-separated lowercase English letters `a` and `b`, representing that the letter `a` can be transformed into the letter `b`. -----Output----- Output \\"YES\\" if it is possible to restore the original message from the encrypted message using the given transformation rules, otherwise output \\"NO\\". -----Examples----- Input hello 3 h e e l l o Output YES Input abcde 2 a b c d Output NO -----Note----- In the first example, the sequence of transformations can be reversed: - `h` can transform to `e` - `e` can transform to `l` - `l` can transform to `o` Therefore, it is possible to get from `hello` back to the original message. In the second example, there are not enough transformations to reverse the entire message, so the output is \\"NO\\".","solution":"def can_decrypt_message(t, m, rules): from collections import defaultdict, deque # Create graph of transformations def make_graph(rules): graph = defaultdict(list) for a, b in rules: graph[b].append(a) return graph # Perform a BFS to check if we can reverse the transformation for each letter in t def can_transform_to_original(graph, letter): queue = deque([letter]) visited = set() while queue: current = queue.popleft() if current in original_letters: return True for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False # Extract all original letters from the rules original_letters = set(a for a, b in rules) # Create transformation graph transformation_graph = make_graph(rules) # Check if each letter in the encrypted message can be transformed back to any original letter for char in t: if not can_transform_to_original(transformation_graph, char): return \\"NO\\" return \\"YES\\""},{"question":"In a software company, developers want to implement an auto-completion feature in their code editor. The feature suggests the most frequently used words based on the previous words the user has typed. For this purpose, they keep track of word pairs and their frequencies, and they want to optimize the recommendation process. -----Task----- Given several sentences, count the frequency of each word pair that appears. When the user types a word, suggest the next word based on the highest frequency of the pair occurrences. If there are multiple words with the same frequency, suggest the one that comes lexicographically first. -----Input----- The first line contains an integer N (1 leq N leq 1000), the number of sentences. The next N lines contain a single sentence each, consisting of words separated by spaces. Each word consists of lowercase letters only and has length at most 20. Each sentence contains at least one word and at most 100 words. -----Output----- For each unique word in the input sentences, output the word followed by the most frequent subsequent word. If a word does not have any subsequent words, output only the word. -----Examples----- Sample Input: 3 hello world this is a test this is a test case test case scenario Sample Output: hello world world this this is is a a test test case case scenario","solution":"def count_word_pairs(sentences): from collections import defaultdict, Counter word_pair_freq = defaultdict(Counter) for sentence in sentences: words = sentence.split() for i in range(len(words) - 1): word_pair_freq[words[i]][words[i+1]] += 1 suggestions = {} for word, counter in word_pair_freq.items(): most_common_word = sorted(counter.items(), key=lambda x: (-x[1], x[0]))[0][0] suggestions[word] = most_common_word return suggestions def generate_output(suggestions): result = [] for word, next_word in sorted(suggestions.items()): result.append(f\\"{word} {next_word}\\") return result def main(N, sentences): suggestions = count_word_pairs(sentences) output = generate_output(suggestions) return output"},{"question":"Emily has a water pouring puzzle consisting of two jugs with known capacities and an unlimited water source. The goal is to measure out exactly a specific amount of water using the jugs. Each jug has no measuring marks, so any amount less than its maximum capacity must be measured by pouring between the two jugs or emptying/refilling them completely. You are to write a function that returns whether it is possible to measure out exactly the desired amount of water, given the capacities of the two jugs and the desired amount. The operations you can perform are: 1. Completely fill one jug. 2. Completely empty one jug. 3. Pour water from one jug to the other until one jug is either full or the other is empty. -----Input----- The input line contains three integers a, b, and c where * 1 ≤ a, b ≤ 1000 — the capacities of the two jugs, * 0 ≤ c ≤ max(a, b) — the desired amount of water. Assume `a` and `b` are the capacities of the jugs, and `c` is the goal measurement. -----Output----- Output a single line \\"YES\\" if it is possible to measure exactly c liters, otherwise print \\"NO\\". -----Examples----- Input 3 5 4 Output YES Input 2 6 5 Output NO Input 1 2 3 Output YES -----Notes----- In the first sample, one possible sequence of operations is as follows: 1. Fill the 5-liter jug. 2. Pour water from the 5-liter jug into the 3-liter jug. (3-liter jug: 3 liters, 5-liter jug: 2 liters) 3. Empty the 3-liter jug. 4. Pour water from the 5-liter jug into the 3-liter jug. (3-liter jug: 2 liters, 5-liter jug: 0 liters) 5. Fill the 5-liter jug again. 6. Pour water from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. (3-liter jug: 3 liters, 5-liter jug: 4 liters) This results in exactly 4 liters in the 5-liter jug, achieving the goal.","solution":"def can_measure_water(a, b, c): Determines if it is possible to measure exactly c liters using two jugs with capacities a and b. :param int a: Capacity of the first jug :param int b: Capacity of the second jug :param int c: Desired amount of water :return: \\"YES\\" if it is possible to measure exactly c liters, otherwise \\"NO\\" :rtype: str if c == 0: return \\"YES\\" if c > a + b: return \\"NO\\" def gcd(x, y): while y != 0: x, y = y, x % y return x # Check if c is a multiple of the gcd of a and b if c % gcd(a, b) == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"eye The eye tool returns a 2-D array with 1\'s as the diagonal and 0\'s elsewhere. import numpy print numpy.eye(3) #Output : [[ 1. 0. 0.] # [ 0. 1. 0.] # [ 0. 0. 1.]] Task You are given the dimensions of a 2-D array and your task is to print an identity array of the given size using the tool numpy.eye. Input Format A single line containing two space-separated integers N and M. Constraints 1leq N, Mleq3 Output Format Print the identity array with the given dimensions. Sample Input 0 3 3 Sample Output 0 [[ 1. 0. 0.] [ 0. 1. 0.] [ 0. 0. 1.]] Sample Input 1 3 2 Sample Output 1 [[ 1. 0.] [ 0. 1.] [ 0. 0.]] Explanation 0 Print the 2-D array built using numpy.eye tool and you get the result as shown.","solution":"import numpy as np def identity_array(n, m): Returns an identity array of dimensions n x m using numpy.eye. Parameters: n (int): the number of rows of the array m (int): the number of columns of the array Returns: numpy.ndarray: a 2-D identity array return np.eye(n, m).tolist()"},{"question":"Chef Dobby is fond of sequences, and this time, Bhuvan has come up with another interesting challenge for him. Bhuvan provides Dobby with a sequence of non-negative integers and asks him to perform a series of operations to transform the sequence into a sequence of all identical elements. The operation allowed is: choose any two elements in the sequence (a[i], a[j]) such that i ≠ j and add to any one of them the difference of the two (i.e., add |a[i] - a[j]| to a[i] or a[j]). Chef Dobby needs to find out if it\'s possible to make all elements of the sequence identical after any number of operations. If it is possible, return \\"YES\\", otherwise return \\"NO\\". ------ Input section ------ The first line contains N, the number of integers in the sequence. The next line contains N space-separated non-negative integers representing the sequence. ------ Output section ------ Output \\"YES\\" if it is possible to make all elements of the sequence identical, otherwise output \\"NO\\". ------ Input constraints ------ 2 ≤ N ≤ 1000 0 ≤ a[i] ≤ 10^9, where a[i] denotes the i-th element of the sequence. ------ Sample Input 1 ------ 3 4 8 12 ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 4 1 2 3 5 ------ Sample Output 2 ------ NO ------ Explanation ------ In the first sample, we can perform the following operations: - Choose (4, 8) -> add 4 to 4 -> sequence becomes (8, 8, 12). - Choose (8, 12) -> add 4 to 8 -> sequence becomes (8, 8, 8). In the second sample, no matter how we choose elements and add the differences, we cannot make all elements identical. Hence, the output is \\"NO\\".","solution":"def is_possible_to_make_identical(N, sequence): Function to determine if the sequence can be transformed into identical elements. # GCD function def gcd(a, b): while b: a, b = b, a % b return a # Calculate GCD for the entire list result = sequence[0] for num in sequence: result = gcd(result, num) if result == 1: return \\"NO\\" return \\"YES\\""},{"question":"You are developing an application for an online bookstore. One of the functionalities you need to implement is the ability to display the topselling books for different genres. Each book has a unique title, a genre, and a number of copies sold. To ensure that the users have a good experience, the system should be able to quickly retrieve the top K best-selling books for any given genre. Write a function that, given a list of books and a genre, returns the titles of the top K best-selling books in that genre. If there are fewer than K books in the genre, return all the books in that genre sorted by the number of copies sold in descending order. Input The function `top_selling_books(books: List[Tuple[str, str, int]], genre: str, K: int) -> List[str]` will receive the following parameters: 1. `books`: A list of tuples, where each tuple contains the title of the book (a string), the genre of the book (a string), and the number of copies sold (an integer). 2. `genre`: A string representing the genre for which we want to find the top K best-selling books. 3. `K`: An integer representing the number of top-selling books to return. Output The function should return a list of strings representing the titles of the top K best-selling books in the given genre, sorted by the number of copies sold in descending order. If there are fewer than K books in the genre, return as many books as are available, sorted by the number of copies sold in descending order. Example ```python # Define the list of books with their titles, genres, and copies sold books = [ (\\"Book A\\", \\"Fiction\\", 150), (\\"Book B\\", \\"Non-Fiction\\", 200), (\\"Book C\\", \\"Fiction\\", 100), (\\"Book D\\", \\"Fiction\\", 300), (\\"Book E\\", \\"History\\", 250), (\\"Book F\\", \\"Fiction\\", 80) ] # Specify the genre and the number of top-selling books to retrieve genre = \\"Fiction\\" K = 2 # Call the function result = top_selling_books(books, genre, K) print(result) ``` Output ```python [\\"Book D\\", \\"Book A\\"] ``` Explanation In this example, there are four Fiction books with their copies sold as follows: - Book D: 300 copies - Book A: 150 copies - Book C: 100 copies - Book F: 80 copies The top 2 best-selling Fiction books are \\"Book D\\" with 300 copies and \\"Book A\\" with 150 copies, which are returned in descending order of copies sold.","solution":"def top_selling_books(books, genre, K): Returns the titles of the top K best-selling books in a given genre. # Filter the books by the given genre genre_books = [book for book in books if book[1] == genre] # Sort the filtered books by the number of copies sold in descending order sorted_books = sorted(genre_books, key=lambda x: x[2], reverse=True) # Extract the titles of the top K books top_k_titles = [book[0] for book in sorted_books[:K]] return top_k_titles"},{"question":"You have a sequence of boxes, each with a certain number of gold coins. You can pick boxes to maximize the total number of coins collected under the following restriction: - If you pick a box, you cannot pick two adjacent boxes (i.e., if you pick box i, you cannot pick boxes i-1 or i+1). Your task is to determine the maximum number of gold coins you can collect. -----Input----- The first line contains a single integer n (1 leq n leq 100000) — the number of boxes. The next line contains n integers c_1, c_2, ... , c_n (0 leq c_i leq 10000) which represent the number of gold coins in each box. -----Output----- Output a single integer, the maximum number of gold coins you can collect without picking any two adjacent boxes. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 -----Note----- For the first sample, the optimal way to collect the maximum number of coins is by picking boxes 1, 3, and 5 (3 + 5 + 7 = 15). For the second sample, the optimal way is to pick boxes 1 and 4 (3 + 10 = 13).","solution":"def max_coins(n, coins): Given a list of boxes and the coins in each box, returns the maximum number of coins that can be collected without picking two adjacent boxes. :param n: int -- the number of boxes :param coins: List[int] -- the number of coins in each box :return: int -- the maximum number of coins that can be collected if n == 0: return 0 if n == 1: return coins[0] # dp[i] will store the maximum number of coins that can be collected from the first i boxes dp = [0] * n dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[n-1]"},{"question":"You run a small local library and have recently digitized the catalog of books owned by the library. Each book is uniquely identified by an integer ID, and each ID can be classified into one of several genres. Given the book IDs and their corresponding genres, your task is to implement a system that allows you to: 1. Record a new book with its genre. 2. Query all book IDs belonging to a specific genre. 3. Query the genre of a specific book ID. Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of operations you have to perform. - Each of the next `n` lines represents an operation and can be one of the following: - \\"ADD id genre\\": Add a book with identifier `id` (an integer between 1 and 1000 inclusive) and genre `genre` (a string of up to 15 lowercase Latin letters). - \\"GET_GENRE id\\": Output the genre of the book with identifier `id`. - \\"GET_BOOKS_BY_GENRE genre\\": Output the IDs of all books belonging to the specified `genre` in ascending order of IDs. It is guaranteed that: - For each \\"ADD id genre\\" operation, `id` and `genre` are unique. - For each \\"GET_GENRE id\\" operation, `id` has been added before. - For each \\"GET_BOOKS_BY_GENRE genre\\" operation, there is at least one book of the specified genre. Output For each \\"GET_GENRE\\" and \\"GET_BOOKS_BY_GENRE\\" operation, print the result on a new line. Example Input ``` 7 ADD 101 fiction ADD 102 science ADD 103 fiction ADD 104 math GET_GENRE 101 GET_BOOKS_BY_GENRE fiction GET_BOOKS_BY_GENRE math GET_GENRE 104 ``` Output ``` fiction 101 103 104 math ``` Explanation This example performs the following steps: 1. Adds three books with ids 101, 102, 103 to the genres \\"fiction\\", \\"science\\", and \\"math\\" respectively. 2. Returns the genre of book with id 101: `fiction`. 3. Returns all book ids of genre `fiction` in ascending order: `101 103`. 4. Returns all book ids of genre `math`: `104`. 5. Returns the genre of book with id 104: `math`.","solution":"class Library: def __init__(self): self.book_genre_map = {} self.genre_books_map = {} def add_book(self, book_id, genre): self.book_genre_map[book_id] = genre if genre not in self.genre_books_map: self.genre_books_map[genre] = [] self.genre_books_map[genre].append(book_id) self.genre_books_map[genre].sort() def get_genre(self, book_id): return self.book_genre_map.get(book_id, \'\') def get_books_by_genre(self, genre): return self.genre_books_map.get(genre, [])"},{"question":"Given an integer N, return a list of prime numbers from 1 to N. Example 1: Input: 10 Output: [2, 3, 5, 7] Explanation: The prime numbers from 1 to 10 are 2, 3, 5, and 7. Example 2: Input: 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Explanation: The prime numbers from 1 to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Your Task: You don\'t need to read or print anything. Your task is to complete the function get_primes() which takes N as input parameter and returns a list of prime numbers from 1 to N. Expected Time Complexity: O(N*log(log(N))) Expected Space Complexity: O(N) Constraints: 1 <= N <= 10^{4}","solution":"def get_primes(N): Returns a list of prime numbers from 1 to N. if N < 2: return [] primes = [] is_prime = [True] * (N + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for p in range(2, N + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, N + 1, p): is_prime[multiple] = False return primes"},{"question":"An adventurer needs to cross a desert, which is represented as a grid of n rows and m columns. Each cell in the grid is either passable (\'.\') or contains an obstacle (\'#\'). The adventurer can move left, right, up, or down from one passable cell to another. The adventurer begins at the top-left cell (1,1) and wants to reach the bottom-right cell (n,m). You need to determine the minimum number of moves required for the adventurer to reach the destination or print -1 if it\'s not possible. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain a string of length m consisting of characters \'.\' and \'#\' representing the grid. -----Output----- Print the minimum number of moves required to reach the bottom-right cell or -1 if it is not possible. -----Examples----- Input 3 3 ... .#. ... Output 4 Input 3 3 ..# #.# ..# Output -1 -----Note----- In the first example, the adventurer can follow the path (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) in 4 moves. In the second example, the adventurer is trapped by obstacles and cannot reach the destination.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Returns the minimum number of moves required for the adventurer to reach the bottom-right corner or -1 if it is not possible. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Write a function that takes a string as input and determines if it is possible to rearrange the characters of the string to form a palindromic string. If it is possible, return the palindromic string with the smallest lexicographical order. Otherwise, return the string \\"NOT POSSIBLE\\". Input 1. A single integer t (1 ≤ t ≤ 100) - the number of test cases. 2. t lines each containing a single string s (1 ≤ |s| ≤ 100). Output For each test case, output the smallest lexicographical palindromic string or \\"NOT POSSIBLE\\". Note A palindromic string reads the same backward as forward. SAMPLE INPUT 2 aabb abc SAMPLE OUTPUT abba NOT POSSIBLE Explanation In the first case, the characters of the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\", which is the smallest lexicographical order among possible palindromes. In the second case, it is not possible to rearrange \\"abc\\" to form a palindromic string.","solution":"def smallest_lexicographical_palindrome(t, test_cases): def can_form_palindrome(s): from collections import Counter count = Counter(s) odd_count = sum(1 for c in count if count[c] % 2 != 0) return odd_count <= 1 def form_smallest_palindrome(s): from collections import Counter count = Counter(s) left_half = [] middle_char = \'\' for char in sorted(count): if count[char] % 2 != 0: middle_char = char left_half.append(char * (count[char] // 2)) left_half = \'\'.join(left_half) right_half = left_half[::-1] return left_half + middle_char + right_half results = [] for s in test_cases: if can_form_palindrome(s): results.append(form_smallest_palindrome(s)) else: results.append(\\"NOT POSSIBLE\\") return results # Example usage t = 2 test_cases = [\\"aabb\\", \\"abc\\"] print(smallest_lexicographical_palindrome(t, test_cases))"},{"question":"Santa Claus is preparing for the annual toy delivery and needs to optimize his route to save time. The houses that Santa will visit are positioned along a straight line at various coordinate points. Santa starts at position `0` and visits each house exactly once. He wants to minimize the total distance traveled, where the total distance is defined as the sum of distances between consecutive houses on his route, including the distance from the starting point to the first house and from the last house back to the starting point. Help Santa determine the optimal order of visiting the houses to minimize the total distance traveled. If multiple optimal paths exist, return the lexicographically smallest one. Input The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of houses. The second line contains `n` integers x_1, x_2, ..., x_n (−10^9 ≤ x_i ≤ 10^9) — the coordinates of the houses. Output In the first line, print the minimal total distance Santa needs to travel. In the second line, print the optimal visiting order of house coordinates. Example Input 5 -10 20 30 -20 0 Output 100 -20 -10 0 20 30 Note In the first example, Santa travels the optimal path as follows: - From position `0` to `-20` (distance 20) - From `-20` to `-10` (distance 10) - From `-10` to `0` (distance 10) - From `0` to `20` (distance 20) - From `20` to `30` (distance 10) - From `30` back to `0` (distance 30) The total distance traveled is `100`, and this is the lexicographically smallest path.","solution":"def optimize_route(n, house_coordinates): Determine the optimal order of visiting houses to minimize the total distance traveled. Parameters: n (int): Number of houses. house_coordinates (list of int): Coordinates of the houses. Returns: tuple: Minimal total distance and the optimal visiting order of house coordinates. # Sort the house coordinates house_coordinates.sort() total_distance = 0 current_position = 0 optimal_order = [] for house in house_coordinates: total_distance += abs(house - current_position) current_position = house optimal_order.append(house) # Add the distance from the last house back to start point 0 total_distance += abs(current_position) return total_distance, optimal_order"},{"question":"You are given a list of strings, each representing a binary number (i.e., strings of \'0\'s and \'1\'s). Your task is to group these binary numbers based on their Hamming distance from each other and return the number of groups formed. Two binary numbers are considered to be in the same group if their Hamming distance is less than or equal to 2. The Hamming distance is the number of positions at which the corresponding bits are different. For example, the Hamming distance between \\"10100\\" and \\"00100\\" is `1`. # Input - An array of strings, where each string is a binary number of equal length. # Output - An integer representing the number of groups formed based on the Hamming distance criteria. # Function Signature ```python def count_hamming_groups(binaries: List[str]) -> int: pass ``` # Example ```python binaries = [\\"10100\\", \\"00100\\", \\"10110\\", \\"11100\\", \\"11011\\"] assert count_hamming_groups(binaries) == 2 binaries = [\\"000\\", \\"001\\", \\"011\\", \\"100\\"] assert count_hamming_groups(binaries) == 1 ``` *Note*: The list of binary strings will have at least one string and each string will have at least one bit.","solution":"from typing import List def hamming_distance(str1: str, str2: str) -> int: Calculate the Hamming distance between two binary strings. return sum(c1 != c2 for c1, c2 in zip(str1, str2)) def count_hamming_groups(binaries: List[str]) -> int: Group the binary numbers based on their Hamming distance and return the number of groups formed. if not binaries: return 0 n = len(binaries) visited = [False] * n def dfs(index): Depth First Search to explore all binaries connected to the binary at `index`. stack = [index] while stack: i = stack.pop() for j in range(n): if not visited[j] and hamming_distance(binaries[i], binaries[j]) <= 2: visited[j] = True stack.append(j) group_count = 0 for i in range(n): if not visited[i]: visited[i] = True dfs(i) group_count += 1 return group_count"},{"question":"You are given a sequence of numbers where each number appears at least once. However, only one number appears exactly once in the sequence, while all other numbers appear exactly twice. Your task is to identify the number that appears exactly once. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer n denoting the length of the sequence. The second line contains n space-separated integers representing the sequence. ------ Output ------ For each test case, print a single line containing the integer that appears exactly once in the sequence. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ n ≤ 3×10^{5} 1 ≤ a_i ≤ 2×10^{5} sum of n over all test cases ≤ 3×10^{5} ----- Sample Input 1 ------ 2 5 4 1 2 1 2 7 5 3 4 3 5 4 6 ----- Sample Output 1 ------ 4 6","solution":"def find_unique_number(sequence): Given a sequence of numbers where each number appears exactly twice except one number which appears exactly once, returns the number that appears exactly once. unique_number = 0 for num in sequence: unique_number ^= num return unique_number def process_test_cases(test_cases): results = [] for sequence in test_cases: results.append(find_unique_number(sequence)) return results"},{"question":"Write a function that takes in a string and returns the first non-repeating character. If there’s no non-repeating character, the function should return an empty string - `firstNonRepeatingChar()` (`first_non_repeating_char()` for Python). A few examples: ``` firstNonRepeatingChar(\\"swiss\\") == \\"w\\" firstNonRepeatingChar(\\"reliable\\") == \\"r\\" firstNonRepeatingChar(\\"aabbcc\\") == \\"\\" firstNonRepeatingChar(\\"123123456\\") == \\"4\\" ```","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns an empty string. # Dictionary to store count of each character char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character found return \\"\\""},{"question":"David is a scientist who works on analyzing DNA sequences. He is currently working on a project where he needs to identify specific patterns that repeat in a given DNA sequence. A DNA sequence is represented as a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. David wants to know the positions of all the starting indices where a specific pattern is found as a contiguous substring in a given DNA sequence. The DNA sequence and the pattern to be searched are both case-sensitive. Your task is to help David by implementing a function to find all starting positions (0-based) of the pattern in the DNA sequence. Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000), the length of the DNA sequence. - The second line contains a string of length `n` representing the DNA sequence. - The third line contains a string representing the pattern to be searched in the DNA sequence. The length of the pattern is guaranteed to be less than or equal to `n`. Output - Output all starting positions in the DNA sequence where the pattern is found. The positions should be space-separated. If the pattern is not found, output a single integer `-1`. Examples Input 10 ACGTACGTAG ACG Output 0 4 Input 5 AAAAA AA Output 0 1 2 3 Input 8 CGTAGCTA GTG Output -1","solution":"def find_pattern_positions(n, dna_sequence, pattern): Returns the starting positions where the pattern is found in the DNA sequence. :param n: length of the DNA sequence (int) :param dna_sequence: the DNA sequence (str) :param pattern: the pattern to search for (str) :return: list of starting positions or [-1] if pattern is not found pattern_length = len(pattern) positions = [] for i in range(n - pattern_length + 1): if dna_sequence[i:i + pattern_length] == pattern: positions.append(i) if not positions: return [-1] return positions"},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 1000). Output Print a single integer which is the sum of squares of the first n positive integers. Examples Input 3 Output 14","solution":"def sum_of_squares(n): Returns the sum of squares of the first n positive integers. return sum(i * i for i in range(1, n + 1))"},{"question":"You are given a list of N integers. You want to calculate the number of pairs (i, j) such that i < j and the sum of elements at these indices is even. Write a function `count_even_sum_pairs` which takes an integer N and a list of N integers as input, and returns the number of pairs (i, j) with i < j, and the sum of the elements at these indices is an even number. # Function Signature ```python def count_even_sum_pairs(N: int, A: List[int]) -> int: pass ``` # Input - N (1 ≤ N ≤ 10^5): an integer representing the number of elements in the list. - A (1 ≤ A_i ≤ 10^9 for i in range(N)): a list of N integers. # Output - An integer representing the number of pairs (i, j) such that i < j and A[i] + A[j] is even. # Example Input ```python N = 4 A = [1, 2, 3, 4] ``` # Example Output ```python 2 ``` # Explanation In the given example, the pairs (i, j) that satisfy the condition are: - (2, 4): 2 + 4 = 6 (even) - (1, 3): 1 + 3 = 4 (even) Hence, the output is 2. # Note To get the sum of the pairs as even, both integers must be either both odd or both even.","solution":"def count_even_sum_pairs(N, A): Returns the number of pairs (i, j) such that i < j and A[i] + A[j] is even. even_count = 0 odd_count = 0 # Counting even and odd elements for num in A: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Number of pairs of even elements even_pairs = even_count * (even_count - 1) // 2 # Number of pairs of odd elements odd_pairs = odd_count * (odd_count - 1) // 2 # Total pairs where the sum is even return even_pairs + odd_pairs"},{"question":"Given a 2D matrix of size NxM filled with integers, write a function to find the maximum sum of a submatrix with dimensions kxk. If there are multiple submatrices with the maximum sum, return the one which appears first while scanning from the top-left to the bottom-right. If k is greater than the dimensions of the matrix, return -1. Example 1: Input: matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] k = 2 Output: [ [11, 12], [15, 16] ] Explanation: The 2x2 submatrix with the highest sum is located at the bottom right corner of the matrix, with the sum of 54. Example 2: Input: matrix = [ [1, -2, -3], [-4, 5, -6], [-7, 8, 9] ] k = 1 Output: [9] Explanation: The 1x1 submatrix with the highest sum is just the single element 9. Example 3: Input: matrix = [ [1, 2], [3, 4] ] k = 3 Output: -1 Explanation: Since k is greater than the size of the matrix, we return -1. Your Task: You don\'t need to read input or print anything. Implement the function find_max_submatrix(matrix: List[List[int]], k: int) -> List[List[int]] that takes the 2D matrix and the dimension k as input parameters, and returns the top-left kxk submatrix with the highest sum as described. If k is too large, return -1. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 -10^3 ≤ matrix[i][j] ≤ 10^3 1 ≤ k ≤ 100","solution":"from typing import List def find_max_submatrix(matrix: List[List[int]], k: int) -> List[List[int]]: n = len(matrix) m = len(matrix[0]) if k > n or k > m: return -1 max_sum = -float(\'inf\') result_submatrix = [] for i in range(n - k + 1): for j in range(m - k + 1): current_sum = sum(matrix[x][y] for x in range(i, i+k) for y in range(j, j+k)) if current_sum > max_sum: max_sum = current_sum result_submatrix = [matrix[x][j:j+k] for x in range(i, i+k)] return result_submatrix"},{"question":"Find the length of the longest sequence of unique characters in a given string `s`. The string will only contain alphabetic characters (both uppercase and lowercase) and its length will not exceed 10,000. Examples ```python longest_unique_substring(\\"abcabcbb\\") == 3 # \\"abc\\" longest_unique_substring(\\"bbbbb\\") == 1 # \\"b\\" longest_unique_substring(\\"pwwkew\\") == 3 # \\"wke\\" longest_unique_substring(\\"abcdef\\") == 6 # \\"abcdef\\" ```","solution":"def longest_unique_substring(s): Returns the length of the longest sequence of unique characters in the given string. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given a list of integers and a target integer k. Your task is to find the total number of pairs of integers in the list that sum up to k. Each pair should be counted only once, and the order of elements in the pair does not matter (i.e., (a, b) is considered the same as (b, a)). -----Input----- The first line contains an integer n (1 ≤ n ≤ 200 000), the number of elements in the list. The second line contains n space-separated integers, each in the range [-10^9, 10^9]. The third line contains an integer k (|k| ≤ 2*10^9), the target sum. -----Output----- Print a single integer — the total number of unique pairs that sum up to k. -----Examples----- Input 5 1 2 3 4 5 5 Output 2 Input 4 -1 0 1 2 0 Output 1 -----Note----- For the first sample case, the pairs that sum up to 5 are (1, 4) and (2, 3). The output is 2. For the second sample case, the pair that sums up to 0 is (-1, 1). The output is 1.","solution":"def count_pairs_with_sum(nums, k): Returns the count of unique pairs in the list nums that sum up to k. seen = set() pairs = set() for num in nums: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return len(pairs)"},{"question":"Problem: You are given a string consisting of lowercase letters and a pattern consisting of lowercase letters and wildcard characters \'*\' and \'?\'. Wildcards have the following meanings: - \'*\' can match any sequence of characters (including an empty sequence). - \'?\' can match any single character. Your task is to determine if the string matches the pattern, where the matching should cover the entire string (not partial). Write a function `is_match(s: str, p: str) -> bool` to determine if the string matches the pattern. # Input - `s`: a string consisting of lowercase letters, where ( 1 leq |s| leq 1000 ) - `p`: a pattern string consisting of lowercase letters, \'*\' and \'?\', where ( 1 leq |p| leq 1000 ) # Output Return `True` if the string matches the pattern, otherwise return `False`. # Example **Example 1:** - Input: - `s = \\"aa\\"` - `p = \\"a\\"` - Output: `False` - Explanation: `a` does not match the entire string `aa`. **Example 2:** - Input: - `s = \\"aa\\"` - `p = \\"*\\"` - Output: `True` - Explanation: `*` matches any sequence. **Example 3:** - Input: - `s = \\"cb\\"` - `p = \\"?a\\"` - Output: `False` - Explanation: `?a` does not match the entire string `cb`. **Example 4:** - Input: - `s = \\"adceb\\"` - `p = \\"*a*b\\"` - Output: `True` - Explanation: `*a*b` matches the entire string `adceb`. **Example 5:** - Input: - `s = \\"acdcb\\"` - `p = \\"a*c?b\\"` - Output: `False` - Explanation: `a*c?b` does not match the entire string `acdcb`. # Note - Be careful with the \'*\' wildcard and think about how it can match zero or more characters. - Consider edge cases such as an empty string or pattern.","solution":"def is_match(s: str, p: str) -> bool: # Create a 2D dynamic programming table dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # Empty pattern matches empty string # Handle the situation where pattern starts with \'*\' for j in range(1, len(p) + 1): if p[j-1] == \'*\': dp[0][j] = dp[0][j-1] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j-1] == \'*\': # \'*\' can match empty sequence or any sequence dp[i][j] = dp[i][j-1] or dp[i-1][j] elif p[j-1] == \'?\' or s[i-1] == p[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = False return dp[len(s)][len(p)]"},{"question":"Write a function that takes a list of arbitrary elements (numbers, strings, booleans, None, or arrays) and returns a dictionary where the keys are the data types of the elements, and the values are lists containing the respective elements of that data type from the input list. The order of elements in the output lists should be the same as their order in the input list. For example: - For the input `[1, \\"a\\", 3.14, True, [\\"b\\", \\"c\\"], None, 2]`, the output should be: ```python { int: [1, 2], str: [\\"a\\"], float: [3.14], bool: [True], list: [[\\"b\\", \\"c\\"]], type(None): [None] } ``` - For the input `[\\"hello\\", 42, False, None, [1, 2, 3], 3.14]`, the output should be: ```python { str: [\\"hello\\"], int: [42], bool: [False], type(None): [None], list: [[1, 2, 3]], float: [3.14] } ```","solution":"def categorize_elements(input_list): Categorizes elements in the input_list by their data types. Parameters: input_list (list): List of arbitrary elements. Returns: dict: Dictionary with keys as data types and values as lists of elements of that type. categorized_dict = {} for element in input_list: element_type = type(element) if element_type not in categorized_dict: categorized_dict[element_type] = [] categorized_dict[element_type].append(element) return categorized_dict"},{"question":"The Crystal Palace in the Corundum Kingdom is said to possess the most beautiful array of colors, which results from the unique arrangement of n crystals. The kingdom scientists have discovered that each crystal has a specific color and can transmit light to other crystals, creating a mesmerizing light show. The scientists would like to understand the transmission patterns between the crystals, which are represented in a graph where each crystal is a node and each light transmission between crystals is an undirected edge. Each edge has an associated length (time it takes for light to travel between two crystals). The Corundum Kingdom is preparing to host a grand event to show off the Crystal Palace\'s light show, and they need to ensure that the light can travel from any crystal to any other crystal in the shortest possible time. To do this, they would like you to determine the shortest path from one specified crystal to all other crystals. Write a program that reads the number of crystals (nodes), the number of transmission lines (edges), and then each transmission line with its length. Your task is to find the shortest time for the light to travel from a given starting crystal to all other crystals within the palace. Constraints: * `1 leq n leq 100,000` (number of crystals) * `1 leq m leq 200,000` (number of transmission lines) * `1 leq u_i, v_i leq n` (crystal numbers) * `1 leq l_i leq 1,000,000` (length of transmission line) * `1 leq s leq n` (starting crystal number) Input Input is given from Standard Input in the following format: ``` n m s u_1 v_1 l_1 u_2 v_2 l_2 : u_m v_m l_m ``` Output Print n lines. In the i-th line, print the shortest time it takes for light to travel from the starting crystal to the i-th crystal. If the i-th crystal is unreachable from the starting crystal, print `-1`. Examples Input: ``` 5 6 1 1 2 3 1 3 2 2 3 1 2 4 5 3 4 8 4 5 2 ``` Output: ``` 0 3 2 8 10 ``` Input: ``` 4 3 1 1 2 1 2 3 1 3 4 1 ``` Output: ``` 0 1 2 3 ```","solution":"import heapq import sys def shortest_paths_from_source(n, m, s, edges): # Initialize the adjacency list graph = [[] for _ in range(n + 1)] for u, v, length in edges: graph[u].append((length, v)) graph[v].append((length, u)) # Dijkstra\'s algorithm to find the shortest path from source `s` distances = [float(\'inf\')] * (n + 1) distances[s] = 0 min_heap = [(0, s)] # (distance, node) while min_heap: current_distance, u = heapq.heappop(min_heap) if current_distance > distances[u]: continue for length, v in graph[u]: distance = current_distance + length if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) # Print the result result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(\\"-1\\") else: result.append(str(distances[i])) return \\"n\\".join(result)"},{"question":"You are given two integers n and k. Your task is to determine if it is possible to partition the integer n into exactly k distinct, positive integers. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains two integers n and k (1 ≤ n, k ≤ 1000). Output For each test case, print \\"YES\\" if it is possible to partition n into exactly k distinct, positive integers. Otherwise, print \\"NO\\". Examples Input 3 8 3 15 4 7 4 Output YES YES NO Explanation In the first example, 8 can be partitioned into 1, 2, and 5. In the second example, 15 can be partitioned into 1, 2, 3, and 9. In the third example, it is not possible to partition 7 into 4 distinct integers.","solution":"def can_partition(n, k): Determines whether it is possible to partition the integer n into exactly k distinct, positive integers. Parameters: n (int): The integer to be partitioned. k (int): The number of distinct positive integers required. Returns: str: \\"YES\\" if the partition is possible, \\"NO\\" otherwise. # Minimum sum required for k distinct integers is sum of first k integers min_sum = k * (k + 1) // 2 # Check if the minimum sum is less than or equal to n if min_sum <= n: return \\"YES\\" else: return \\"NO\\" # Function to handle multiple test cases def partition_test_cases(test_cases): results = [] for case in test_cases: n, k = case results.append(can_partition(n, k)) return results"},{"question":"In a city, there are n crossroads connected by m two-way streets. Each street connects two different crossroads. The government needs to install streetlights at some of the crossroads. The requirement is such that any street must have at least one of its two connecting crossroads with a streetlight. Your task is to determine the minimum number of streetlights needed and their placement. All crossroads and streets are represented as a graph where crossroads are vertices and streets are edges. A streetlight can be placed on a vertex. -----Input----- The first line contains two integers n and m (1 le n le 1000, 0 le m le 10000) - the number of crossroads and the number of streets respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) - representing a street connecting crossroads u and v. It is guaranteed that the given graph is connected, i.e., there is at least one path between any pair of vertices. -----Output----- On the first line, print an integer k - the minimum number of streetlights needed. On the second line, print k integers - the crossroads where the streetlights should be installed. If there are multiple valid solutions, you can print any of them. -----Example----- Input 4 3 1 2 2 3 3 4 Output 2 2 3 Note: In the example, placing streetlights at crossroads 2 and 3 ensures that every street has at least one of its endpoints with a streetlight.","solution":"def find_min_vertex_cover(n, m, edges): from collections import defaultdict graph = defaultdict(set) # Build the graph representation: adjacency list for u, v in edges: graph[u].add(v) graph[v].add(u) # Initialize the set to hold vertex cover vertex_cover = set() while edges: # Pick the node with the highest degree u = max(graph.keys(), key=lambda x: len(graph[x])) # Add this node to the vertex cover vertex_cover.add(u) # Remove all edges connected to this node for v in graph[u]: if (u, v) in edges: edges.remove((u, v)) if (v, u) in edges: edges.remove((v, u)) graph[v].remove(u) # Remove the node from the graph graph.pop(u) return len(vertex_cover), sorted(vertex_cover) # Example usage: n = 4 m = 3 edges = [(1, 2), (2, 3), (3, 4)] print(find_min_vertex_cover(n, m, edges)) # Output should be (2, [2, 3])"},{"question":"You are given an integer array nums and an integer target. You want to find two distinct elements in nums that sum up to target and return their indices as a tuple. Assume that there is exactly one solution, and you cannot use the same element twice. Write a function that returns the indices of the two numbers such that they add up to target. -----Function Signature----- ```python def two_sum(nums: list[int], target: int) -> tuple[int, int]: pass ``` -----Input----- - An integer array nums of length n (1 ≤ n ≤ 10^5), where each element is an integer between `-10^9` to `10^9`. - An integer target, where `-10^9 ≤ target ≤ 10^9`. -----Output----- - A tuple of two integers, representing the indices (0-based) of the two numbers in nums that add up to target. -----Example----- ```python nums = [2, 7, 11, 15] target = 9 result = two_sum(nums, target) print(result) # Output: (0, 1) ``` -----Explanation----- In the example, there are four elements in nums. The numbers at index 0 and index 1 add up to 9 (2 + 7 = 9). Therefore, the function returns (0, 1).","solution":"def two_sum(nums: list[int], target: int) -> tuple[int, int]: Finds two distinct elements in nums that sum up to target and returns their indices as a tuple. Assumes there is exactly one solution. Args: nums (list[int]): The list of integers. target (int): The target sum. Returns: tuple[int, int]: The indices of the two numbers whose sum is equal to target. # Dictionary to store the difference between target and the current element # as key and its index as value. num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return num_to_index[difference], index num_to_index[num] = index"},{"question":"In an imaginary city, there are N houses arranged in a straight line. Each house has a certain number of candies. Due to a magical spell, if you collect candies from two consecutive houses, you must collect them from all houses that lie between those two houses, inclusive. You can only collect candies from at most one pair of consecutive houses. Write a program to find the maximum number of candies you can collect from the houses, given the constraint. Input The first line of the input contains an integer N, the number of houses. The second line contains N space-separated integers representing the number of candies in each house. Output Output a single integer, the maximum number of candies you can collect. Constraints 1 ≤ N ≤ 50 0 ≤ Candy count ≤ 1000 SAMPLE INPUT 6 3 2 5 10 7 8 SAMPLE OUTPUT 37 Explanation In this example, the optimal choice is to collect candies from house 2 and house 6 (collecting 2 + 5 + 10 + 7 + 8 = 32 candies) along with house 1 separately (additional 3 candies), giving a total of 32 + 3 = 35 candies. Alternatively, collecting from house 1 to house 4 or from house 3 to house 6 yields fewer candies.","solution":"def max_candies(N, candies): Returns the maximum number of candies that can be collected given the constraint of collecting from at most one pair of consecutive houses. if N == 1: return candies[0] max_candies_collected = 0 for i in range(N): for j in range(i, N): max_candies_collected = max(max_candies_collected, sum(candies[i:j+1])) return max_candies_collected"},{"question":"Billing System: Implement a class called `BillingSystem` that keeps track of customers and their usage of services. The system should allow adding services, registering customers, recording usage, and calculating the total bill for each customer. The class should have the following methods: - `add_service(service_name, rate_per_unit)`: Adds a new service with the given name and rate per unit. The rate is a positive float representing the cost per unit of usage for the service. - `register_customer(customer_name)`: Registers a new customer with the given name. Each customer has a unique name. - `record_usage(customer_name, service_name, units_used)`: Records the usage of a specified number of units of a service by a customer. The units used is a positive integer. - `calculate_bill(customer_name)`: Calculates and returns the total bill for the specified customer. The total bill is the sum of the costs of all the services used by the customer, where the cost of each service is the product of the rate per unit and the total units used. The system should be able to handle multiple customers and multiple services. Ensure that the implementation is efficient. You can assume that the input data is valid. Example: ```python billing_system = BillingSystem() # Add services billing_system.add_service(\\"Internet\\", 15.75) billing_system.add_service(\\"Electricity\\", 0.12) # Register customers billing_system.register_customer(\\"Alice\\") billing_system.register_customer(\\"Bob\\") # Record usage billing_system.record_usage(\\"Alice\\", \\"Internet\\", 10) billing_system.record_usage(\\"Alice\\", \\"Electricity\\", 100) billing_system.record_usage(\\"Bob\\", \\"Internet\\", 5) billing_system.record_usage(\\"Bob\\", \\"Electricity\\", 200) # Calculate bills assert billing_system.calculate_bill(\\"Alice\\") == 174.0 # 10*15.75 + 100*0.12 assert billing_system.calculate_bill(\\"Bob\\") == 126.0 # 5*15.75 + 200*0.12 ```","solution":"class BillingSystem: def __init__(self): self.services = {} self.customers = {} def add_service(self, service_name, rate_per_unit): self.services[service_name] = rate_per_unit def register_customer(self, customer_name): self.customers[customer_name] = {} def record_usage(self, customer_name, service_name, units_used): if service_name not in self.services: raise ValueError(\\"Service not found\\") if customer_name not in self.customers: raise ValueError(\\"Customer not found\\") if service_name not in self.customers[customer_name]: self.customers[customer_name][service_name] = 0 self.customers[customer_name][service_name] += units_used def calculate_bill(self, customer_name): if customer_name not in self.customers: raise ValueError(\\"Customer not found\\") total_bill = 0.0 for service_name, units_used in self.customers[customer_name].items(): total_bill += self.services[service_name] * units_used return round(total_bill, 2)"},{"question":"Write a function for a library management system to help maintain the records of books borrowed and returned. First, create a class `Library` that has the following attributes: - `books` (a dictionary where keys are book titles and values are the number of copies available). The class should have the following methods: 1. `borrow(title)` - If the book is available (has more than 0 copies), decrement the available count by one and return \\"Borrowed successfully\\". If the book is not available, return \\"Book not available\\". 2. `return_book(title)` - Increment the available count of the book by one and return \\"Returned successfully\\". 3. `report()` - Return a list of tuples, where each tuple contains the title of the book and the number of available copies, sorted by the book title in ascending order. Implement the `Library` class in such a way that it accurately simulates the borrowing and returning process, including proper updates to the inventory. Additionally, ensure that the report method generates an accurate list of book availability for inventory checks.","solution":"class Library: def __init__(self, books): Initialize the Library with a dictionary of books. :param books: Dictionary where keys are book titles and values are the number of copies available. self.books = books def borrow(self, title): Borrow a book from the library. :param title: The title of the book to be borrowed. :return: \\"Borrowed successfully\\" if the book is available, \\"Book not available\\" otherwise. if self.books.get(title, 0) > 0: self.books[title] -= 1 return \\"Borrowed successfully\\" return \\"Book not available\\" def return_book(self, title): Return a book to the library. :param title: The title of the book to be returned. :return: \\"Returned successfully\\" if title in self.books: self.books[title] += 1 else: self.books[title] = 1 return \\"Returned successfully\\" def report(self): Generate a report of the books available in the library. :return: List of tuples containing the title of the book and the number of available copies, sorted by the book title. return sorted(self.books.items())"},{"question":"You are given an integer array `nums` of length `n`, and an integer `k` representing the number of steps to shift each element in the array to its right. Write a function that performs this right rotation in place, meaning the array should be modified without using additional space for another array. The function should return the modified array. For example, given `nums = [1, 2, 3, 4, 5]` and `k = 2`, the function should modify `nums` to `[4, 5, 1, 2, 3]`. The function signature in Python is: ```python def rotate_array(nums: List[int], k: int) -> List[int]: ``` # Constraints: - `1 <= n <= 10^5` - `-10^9 <= nums[i] <= 10^9` - `0 <= k <= 10^5` # Input: - A list of integers `nums`. - An integer `k`. # Output: - The modified list `nums`. # Example: Input: ```python nums = [1, 2, 3, 4, 5] k = 2 ``` Output: ```python [4, 5, 1, 2, 3] ``` Input: ```python nums = [0, -1, -2, -3, -4] k = 3 ``` Output: ```python [-2, -3, -4, 0, -1] ``` # Note: If `k` is greater than `n`, rotating the array by `n` steps is the same as not rotating it at all. Therefore, you should use `k % n` to determine the effective number of steps to rotate. # Example Explanation: For the first example, `nums = [1, 2, 3, 4, 5]` and `k = 2`: - Step 1: Rotate by 1 step to right: `[5, 1, 2, 3, 4]` - Step 2: Rotate by another step to right: `[4, 5, 1, 2, 3]` For the second example, `nums = [0, -1, -2, -3, -4]` and `k = 3`: - Step 1: Rotate by 1 step to right: `[-4, 0, -1, -2, -3]` - Step 2: Rotate by another step to right: `[-3, -4, 0, -1, -2]` - Step 3: Rotate by another step to right: `[-2, -3, -4, 0, -1]`","solution":"from typing import List def rotate_array(nums: List[int], k: int) -> List[int]: Rotates the elements of the array `nums` to the right by `k` steps. Args: nums (List[int]): List of integers to rotate. k (int): Number of steps to rotate the array. Returns: List[int]: The rotated array. n = len(nums) # In case the number of rotations is greater than the length of array k = k % n # Reverse entire list first reverse(nums, 0, n - 1) # Reverse first part (0 to k-1) reverse(nums, 0, k - 1) # Reverse second part (k to n-1) reverse(nums, k, n - 1) return nums def reverse(nums: List[int], start: int, end: int) -> None: Helper function to reverse elements in the list from start to end. Args: nums (List[int]): List to reverse. start (int): Starting index. end (int): Ending index. while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1"},{"question":"Sara is a music enthusiast and she loves storing her favorite songs in her music library, which is a list of song lengths in seconds. With the holiday season approaching, she wants to create new playlists with a specified total duration. However, she doesn\'t want any song length in her playlist to be less than a certain minimum length. You need to help Sara by writing a program that determines the number of different ways to pick non-empty playlists of songs from her library such that the total duration matches a specific value, while ensuring each selected song is at least a certain minimum length. -----Input----- The input consists of multiple test cases. - The first line contains an integer t (1 le t le 100), the number of test cases. - For each test case, the first line contains two integers n and S (1 le n le 50, 1 le S le 500). - The second line contains n integers representing the lengths of the songs in seconds. - The third line contains one integer L (1 le L le 500) representing the minimum song length. -----Output----- For each test case, output a single integer representing the number of different ways Sara can pick the songs such that the total duration is exactly S and each song in the playlist is at least L seconds long. -----Example----- Input 2 4 10 3 4 2 6 3 3 8 5 5 5 3 Output 1 0 Explanation: In the first test case, there is one valid playlist with lengths [4, 6] which sums to 10 and each song is at least 3 seconds long. In the second test case, there are no possible playlists that have a total duration of 8 with each song being at least 3 seconds long.","solution":"def count_valid_playlists(t, test_cases): def subset_sum_count(songs, total, min_len): n = len(songs) dp = [[0] * (total + 1) for _ in range(n + 1)] dp[0][0] = 1 for i in range(1, n + 1): for j in range(total + 1): dp[i][j] = dp[i - 1][j] if j >= songs[i - 1] and songs[i - 1] >= min_len: dp[i][j] += dp[i - 1][j - songs[i - 1]] return dp[n][total] results = [] for case in test_cases: n, S, songs, L = case[\'n\'], case[\'S\'], case[\'songs\'], case[\'L\'] valid_songs = [song for song in songs if song >= L] if not valid_songs: results.append(0) else: results.append(subset_sum_count(valid_songs, S, L)) return results"},{"question":"On a 2D plane, you are given the coordinates of two rectangles. Each rectangle is parallel to the coordinate axes and is defined by the coordinates of its lower-left corner and upper-right corner. Your task is to determine whether the two rectangles overlap. Input The first line contains four integers x1, y1, x2, y2 (-1000 ≤ x1, y1, x2, y2 ≤ 1000) — the coordinates of the lower-left and upper-right corners of the first rectangle. The second line contains four integers x3, y3, x4, y4 (-1000 ≤ x3, y3, x4, y4 ≤ 1000) — the coordinates of the lower-left and upper-right corners of the second rectangle. Output Print one line, containing: * \\"YES\\" if the rectangles overlap; * \\"NO\\" if the rectangles do not overlap. Examples Input 0 0 2 2 1 1 3 3 Output YES Input 0 0 1 1 2 2 3 3 Output NO","solution":"def rectangles_overlap(x1, y1, x2, y2, x3, y3, x4, y4): Determine if two rectangles overlap. Parameters: x1, y1: Coordinates of the lower-left corner of the first rectangle x2, y2: Coordinates of the upper-right corner of the first rectangle x3, y3: Coordinates of the lower-left corner of the second rectangle x4, y4: Coordinates of the upper-right corner of the second rectangle Returns: \\"YES\\" if the rectangles overlap, \\"NO\\" otherwise # Check if one rectangle is to the left of the other if x1 >= x4 or x3 >= x2: return \\"NO\\" # Check if one rectangle is above the other if y1 >= y4 or y3 >= y2: return \\"NO\\" return \\"YES\\""},{"question":"Mr. Johnson loves gardening and owns a beautiful square-shaped garden. During the summer, he faces a challenge in maintaining the garden due to the scorching heat and heavy foot traffic that damages the plants. To help him monitor and manage his garden effectively, he needs to calculate the total amount of water required to sustain the garden over a given period. The garden is represented by an N x N grid. Each cell in the grid corresponds to a plant and has an integer value representing the current water level needed for that plant. Over T days, some plants will require more water due to increased heat and foot traffic. You are given T days of updates, each specifying the coordinates of a plant and the additional water required for it on that day. Your task is to determine the new total amount of water needed for the entire garden after the updates. ------ Input Format ------ - The first line of input contains two integers, N and T, representing the size of the garden and the number of days with updates, respectively. - The next N lines each contain N integers, representing the initial water levels of the plants in the garden. - The next T lines each contain three integers, r, c, and W, representing the row and column (0-indexed) coordinates of a plant and the additional water required for it on that day. ------ Output Format ------ Output a single integer representing the new total amount of water needed for the entire garden after all T updates. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ T ≤ 1000 0 ≤ text{Initial water level of each plant} ≤ 1000 0 ≤ W ≤ 1000 0 ≤ r, c < N ------ Sample Input 1 ------ 3 2 1 2 3 4 5 6 7 8 9 0 0 10 2 2 5 ------ Sample Output 1 ------ 60 ------ Explanation 1 ------ The initial water levels for the garden are as follows: [ begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} ] After the first update: - Plant at (0, 0) needs 10 additional units of water. Resulting water levels: [ begin{bmatrix} 11 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} ] After the second update: - Plant at (2, 2) needs 5 additional units of water. Resulting water levels: [ begin{bmatrix} 11 & 2 & 3 4 & 5 & 6 7 & 8 & 14 end{bmatrix} ] The total water required for the garden after all updates is: 11 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 14 = 60.","solution":"def calculate_total_water_after_updates(N, T, initial_water_levels, updates): # Apply each update to the garden grid for update in updates: r, c, W = update initial_water_levels[r][c] += W # Calculate the total water needed for the entire garden total_water = 0 for row in initial_water_levels: total_water += sum(row) return total_water"},{"question":"Miranda is interested in creating a new art installation for a city park. The installation consists of placing art pieces on several trees distributed throughout the park. The park can be viewed as a grid with R rows and C columns, where each cell contains either a tree (\'T\') or an empty space (\'.\'). Miranda needs to place exactly K art pieces on some of the trees such that the Euclidean distance between any two art pieces is at least D. The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as √((x2-x1)^2 + (y2-y1)^2). As the park is too large to manually calculate the positions, you need to help Miranda find if it is possible to place K art pieces on the trees under the given constraints. Input: The first line contains three integers R, C, and K. The next R lines each contain a string of C characters, representing the park grid, where each character is either \'T\' (indicating a tree) or \'.\' (indicating an empty space). The last line contains an integer D, the minimum required distance between any two art pieces. Output: Print \\"YES\\" if it is possible to place K art pieces on the trees meeting the distance constraint, otherwise print \\"NO\\". Constraints: 1 ≤ R, C ≤ 50 1 ≤ K ≤ min(R*C/2, 10) 1 ≤ D ≤ √((R-1)^2 + (C-1)^2) SAMPLE INPUT 5 5 3 T.T.. .TT.T ..... .T.T. TTTTT 2 SAMPLE OUTPUT YES","solution":"from itertools import combinations import math def is_valid_distance(x1, y1, x2, y2, D): Check if distance between two points (x1, y1) and (x2, y2) is at least D. return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) >= D def can_place_art_pieces(grid, R, C, K, D): # Collect all positions of \'T\' trees = [(i, j) for i in range(R) for j in range(C) if grid[i][j] == \'T\'] # Check all combinations of K trees to see if they meet the distance requirement for combo in combinations(trees, K): valid = True for i in range(K): for j in range(i + 1, K): if not is_valid_distance(combo[i][0], combo[i][1], combo[j][0], combo[j][1], D): valid = False break if not valid: break if valid: return \\"YES\\" return \\"NO\\" # Function to process the input and call can_place_art_pieces def art_installation(R, C, K, park_grid, D): return can_place_art_pieces(park_grid, R, C, K, D)"},{"question":"Bilal is planning to build a large rectangular garden to grow a variety of vegetables. He has a limited amount of fencing material and he wants to maximize the area of this garden. The garden should have sides of integer lengths and must be enclosed entirely within the available fencing material. The total length of the fencing material available is given by P. ---Input--- The input consists of a single test case which contains an integer P (3 leq P leq 10^6) which is the length of the fencing material available. ---Output--- Output a single line with the maximum possible area of the garden that can be enclosed using the given material P. Note that if no valid garden can be formed, the output should be 0. ---Examples--- Sample Input: 12 Sample Output: 9 Sample Input: 5 Sample Output: 1","solution":"def max_garden_area(P): This function computes the maximum possible area of a garden that can be enclosed using the given amount of fencing material P. if P < 3: return 0 max_area = 0 for length in range(1, P // 2): width = (P // 2) - length if length * 2 + width * 2 <= P: area = length * width if area > max_area: max_area = area return max_area"},{"question":"You are a game developer working on a puzzle game. In one of the puzzles, the player needs to rearrange a set of tiles to form a valid sequence. Each tile has a number and all numbers are unique. A valid sequence is formed by connecting the tiles such that the difference between adjacent tiles is exactly 1. Write a program that, given a list of tile numbers, determines if it is possible to rearrange the tiles to form a valid sequence. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains a positive integer N which is the number of tiles. The second line contains N space separated integers A_{1}, A_{2}, ..., A_{N} denoting the tile numbers. ------ Output ------ For each test case, output a single line containing \\"YES\\" if it is possible to rearrange the tiles to form a valid sequence, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ A_{i} ≤ 10^9 ------ Sample Input 1 ------ 3 4 4 2 1 3 3 10 11 13 5 -1 1 0 -2 2 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Example case 1: The sequence 1, 2, 3, 4 is valid. Example case 2: It is not possible to reconnect the sequence as either 10, 11, 13 or 11, 13, 10 or any other combination does not have all adjacent differences of 1. Example case 3: The sequence -2, -1, 0, 1, 2 is valid.","solution":"def can_form_valid_sequence(nums): Determines if it is possible to rearrange nums such that the difference between adjacent nums is exactly 1. nums.sort() for i in range(1, len(nums)): if nums[i] - nums[i-1] != 1: return \\"NO\\" return \\"YES\\" def solve_puzzle(game_inputs): Processes multiple test cases for the puzzle game to determine if a valid sequence can be formed. Parameters: game_inputs (list of lists of tuples): Each sublist contains (N, nums) where: - N (int): Number of tiles - nums (list of int): List of tile numbers Returns: list of str: Each element is \\"YES\\" or \\"NO\\" for the corresponding test case results = [] for n, nums in game_inputs: results.append(can_form_valid_sequence(nums)) return results"},{"question":"You are working on a software project that includes managing a collection of books. Each book has an identifier, a title, an author, and a number of pages. You need to create a program that can search for books by title and return the information of matching books sorted by the number of pages in descending order. If there are books with the same number of pages, they should be further sorted by title in lexicographical order. To achieve this, complete the following: # Input There are multiple datasets given as input. Each dataset includes the details of books followed by a search query. The end of the input is indicated by a single line containing the word \\"STOP\\". A dataset is given in the following format: - The first line contains an integer n (1 ≤ n ≤ 100), the number of books in the dataset. - The following n lines each contain an identifier (integer), a title (string), an author (string), and the number of pages (integer). - The last line of the dataset contains a search query (string) to search within the titles of the books. # Output For each dataset, output the identifier, title, author, and number of pages of books whose titles contain the search query as a substring, sorted by the number of pages in descending order and then by title in lexicographical order. If no books match the search query, output \\"No match found\\". Output the results for each dataset in the order they are provided. # Example Input ``` 3 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 218 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 281 3 \\"1984\\" \\"George Orwell\\" 328 Mockingbird 2 4 \\"Fahrenheit 451\\" \\"Ray Bradbury\\" 194 5 \\"Brave New World\\" \\"Aldous Huxley\\" 311 World STOP ``` Output ``` 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 281 5 \\"Brave New World\\" \\"Aldous Huxley\\" 311 ``` Implement the solution considering the described input and output formats.","solution":"def search_books(datasets): Search books by query in title and return information of matching books sorted by the number of pages (descending) and lexicographical order of title. results = [] for data in datasets: n = data[\'n\'] books = data[\'books\'] query = data[\'query\'] matching_books = [] for book_id, title, author, pages in books: if query.lower() in title.lower(): matching_books.append((book_id, title, author, pages)) if not matching_books: results.append(\\"No match found\\") else: matching_books.sort(key=lambda x: (-x[3], x[1])) for book in matching_books: results.append(f\'{book[0]} \\"{book[1]}\\" \\"{book[2]}\\" {book[3]}\') return results"},{"question":"Given two arrays, nums1 and nums2, both consisting of non-negative integers. Find the intersection of the two arrays, which means the elements that appear in both arrays. The output should contain no duplicate elements and can be in any order. Example 1: Input: nums1 = [1, 2, 2, 1] nums2 = [2, 2] Output: [2] Example 2: Input: nums1 = [4, 9, 5] nums2 = [9, 4, 9, 8, 4] Output: [9, 4] Your Task: You don\'t need to take input or print anything. Complete the function intersection() that takes the given arrays as input parameters and returns an array consisting of the unique intersection elements. Constraints: 1 <= len(nums1), len(nums2) <= 1000 0 <= nums1[i], nums2[i] <= 1000","solution":"def intersection(nums1, nums2): set_nums1 = set(nums1) set_nums2 = set(nums2) intersection_set = set_nums1 & set_nums2 return list(intersection_set)"},{"question":"You are in charge of managing a migration bird sanctuary with several species of birds, each identified with unique ID numbers. The sanctuary receives multiple update requests to change the population count of specific species. Your task is to efficiently handle and process these update requests and provide the current population count of any bird species when queried. For each update request, you\'ll receive the species ID and the number of birds to add (which could be negative, indicating a decrease). For each query, you should provide the current population count of the given species ID. ------ Input ------ The first line contains an integer T denoting the number of test cases. The following lines describe each test case. Each test case starts with two integers N and Q. - N is the number of different species initially present in the sanctuary. - Q is the number of update requests or population count queries. The next line contains N space-separated integers where the i-th integer represents the initial population count of the species with ID i (which could be zero). The next Q lines contain queries in one of the following two formats: 1. \\"U x y\\" where \\"U\\" denotes an update request to add y birds to the species with ID x. 2. \\"Q x\\" where \\"Q\\" denotes a query to provide the current population count of the species with ID x. ------ Output ------ For each query of type \\"Q x\\", print the current population count of the species with ID x. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, Q ≤ 10^{5} 0 ≤ Initial population of each species ≤ 10^{9} -10^{9} ≤ y ≤ 10^{9} (for update requests) 1 ≤ x ≤ N (species ID is 1-based) ----- Sample Input 1 ------ 1 3 5 10 20 30 U 2 5 Q 2 U 3 -10 Q 3 Q 1 ----- Sample Output 1 ------ 25 20 10","solution":"def manage_sanctuary(T, test_cases): results = [] for t in range(T): N, Q = test_cases[t][0] populations = test_cases[t][1] for query in test_cases[t][2]: if query[0] == \'U\': x = query[1] - 1 # Convert to 0-based index y = query[2] populations[x] += y elif query[0] == \'Q\': x = query[1] - 1 # Convert to 0-based index results.append(populations[x]) return results"},{"question":"You are given a string consisting of words and numbers separated by spaces. Write a function that rearranges the string so that all numbers appear before all words, while preserving the relative order of numbers and words within their respective groups. If the input string is empty, return an empty string.","solution":"def rearrange_string(s): Rearranges the string so that all numbers appear before all words while preserving the relative order within each group. if not s: return \\"\\" words = s.split() numbers = [word for word in words if word.isdigit()] letters = [word for word in words if not word.isdigit()] return \' \'.join(numbers + letters)"},{"question":"Find the sum of the digits of a number until you get a single digit. Example 1: Input: N = 38 Output: 2 Explanation: 3 + 8 = 11, 1 + 1 = 2 (single digit) Example 2: Input: N = 123 Output: 6 Explanation: 1 + 2 + 3 = 6 (single digit) Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfDigits() which takes an Integer N as input and returns the answer. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{9}","solution":"def sum_of_digits(N): Returns the sum of the digits of a number until a single digit is obtained. while N >= 10: N = sum(int(digit) for digit in str(N)) return N"},{"question":"In a country far away, there exists a roller coaster ride in which people can only enter if their total weight does not exceed a certain limit. The roller coaster has a limit of L kilograms that it can hold at a time. Given a list of N people\'s weights, determine the maximum number of people that can enter the roller coaster without exceeding the weight limit L. Each person can be included at most once. ------ Input: ------ First line will contain T, number of testcases. Each testcase contains two lines. First line will contain 2 space separated integers N and L, the number of people and the total weight limit respectively. Second line will contain N space separated integers, the weights of the N people. ------ Output: ------ For each testcase, output in a single line the maximum number of people that can enter the roller coaster. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{3} 1 ≤ L ≤ 10^{4} 1 ≤ weight of each person le 10^{3} ------ Sample Input 1 ------ 3 5 10 1 2 3 4 5 4 15 10 2 2 5 6 5 1 1 1 1 1 1 ------ Sample Output 1 ------ 4 3 5 ------ explanation 1 ------ TestCase 1: Optimal solution is to pick the 4 people with weights 1, 2, 3, and 4. Their total weight is 1 + 2 + 3 + 4 = 10 which does not exceed the limit. TestCase 2: Optimal solution is to pick the 3 people with weights 2, 2, and 5. Their total weight is 2 + 2 + 5 = 9 which does not exceed the limit. TestCase 3: Optimal solution is to pick any 5 people with weights 1 each. Their total weight is 1 + 1 + 1 + 1 + 1 = 5 which does not exceed the limit.","solution":"def max_people_in_roller_coaster(testcases): results = [] for testcase in testcases: N, L, weights = testcase weights.sort() people_count = 0 total_weight = 0 for weight in weights: if total_weight + weight <= L: total_weight += weight people_count += 1 else: break results.append(people_count) return results # Parse input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0].strip()) testcases = [] idx = 1 for _ in range(T): N, L = map(int, lines[idx].strip().split()) weights = list(map(int, lines[idx + 1].strip().split())) testcases.append((N, L, weights)) idx += 2 return testcases # Convert output to desired format def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given a sequence of integers and a target sum. Write a program to determine the number of distinct pairs of elements in the sequence that add up to the target sum. Input format: The first line of input will contain two integers n and t separated by a space, where n is the number of elements in the sequence and t is the target sum. The second line will contain n integers separated by spaces, representing the sequence of integers. Output format: Output a single integer, representing the number of distinct pairs that add up to the target sum. Constraints: - 1 ≤ n ≤ 10^5 - -10^9 ≤ each integer in the sequence ≤ 10^9 - -10^9 ≤ t ≤ 10^9 A pair (a, b) is considered distinct if a and b are at different positions in the sequence, even if a = b. SAMPLE INPUT 6 10 1 2 3 7 5 8 SAMPLE OUTPUT 2 Explanation There are two distinct pairs of elements that add up to the target sum: - (2, 8) - (3, 7) The pair (2, 8) and (8, 2) are considered the same pair for this purpose, hence only counted once.","solution":"def count_pairs_with_sum(n, t, sequence): Returns the number of distinct pairs of elements in the sequence that add up to the target sum t. seen = set() pairs = set() for num in sequence: complement = t - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs) # Example usage: # n, t = 6, 10 # sequence = [1, 2, 3, 7, 5, 8] # print(count_pairs_with_sum(n, t, sequence)) # Output should be 2"},{"question":"Given an integer array `arr` of size `n`, your task is to calculate the minimum sum of the absolute differences between every pair of adjacent elements after performing any number of swaps on the array elements. Specifically, you are allowed to rearrange the elements in any order to achieve the desired minimum sum. Input Format: The first line of input contains a single integer `n`, the size of the array. The second line contains `n` space-separated integers representing the elements of the array `arr`. Output Format: Output a single integer, the minimum sum of the absolute differences between every pair of adjacent elements in the rearranged array. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 Example Input: 5 3 -1 4 -3 2 Example Output: 10 Explanation: One of the optimal ways to rearrange the array to get the minimum sum of absolute differences is [-3, -1, 2, 3, 4], which gives the sum of differences as |(-3) - (-1)| + |(-1) - 2| + |2 - 3| + |3 - 4| = 2 + 3 + 1 + 1 = 7.","solution":"def minimum_sum_of_absolute_differences(arr): Given an integer array `arr`, returns the minimum sum of the absolute differences between every pair of adjacent elements after performing any number of swaps on the array elements. arr.sort() # sort the array total_cost = 0 for i in range(1, len(arr)): total_cost += abs(arr[i] - arr[i - 1]) return total_cost"},{"question":"Given a list of n integers, return the length of the longest contiguous subarray where all elements are even. # Function Signature ```python def longest_even_subarray(arr: List[int]) -> int: ``` # Input - `arr` : A list of `n` integers where `n` is between `1` and `10^5`. # Output - An integer representing the length of the longest contiguous subarray where all elements are even. # Examples ```python assert longest_even_subarray([1, 2, 4, 6, 1, 2]) == 3 assert longest_even_subarray([1, 3, 5, 7]) == 0 assert longest_even_subarray([2, 4, 6, 8]) == 4 assert longest_even_subarray([2, 2, 2, 2, 1, 2]) == 4 ``` # Notes - A contiguous subarray is a subarray consisting of consecutive elements from the original array. - Elements in the subarray must be even.","solution":"def longest_even_subarray(arr): Returns the length of the longest contiguous subarray where all elements are even. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Given an array of integers, find if there exists a subarray with sum equal to 0. ------ Input: ------ The first line of input consists of a single integer T (1 ≤ T ≤ 10^4) -- the number of test cases. The first line of each test case contains a single integer N (1 ≤ N ≤ 10^5) -- the size of the array. The second line of each test case contains N space-separated integers a_1, a_2, ..., a_N (-10^9 ≤ a_i ≤ 10^9) -- the elements of the array. ------ Output: ------ For each test case, output \\"YES\\" if there exists a subarray with sum equal to 0. Otherwise, output \\"NO\\". ----- Sample Input ----- 2 5 4 2 -3 1 6 5 4 2 0 1 6 ----- Sample Output ----- YES YES ----- Explanation ----- For the first test case, the subarray [-3, 1, 2] has a sum equal to 0. For the second test case, the subarray [0] has a sum equal to 0.","solution":"def find_subarray_with_sum_zero(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] seen = set() current_sum = 0 found = False for num in arr: current_sum += num if current_sum == 0 or current_sum in seen: results.append(\\"YES\\") found = True break seen.add(current_sum) if not found: results.append(\\"NO\\") return results"},{"question":"A city is planning to build a new park, and they want to bring in equipment and amenities efficiently. They have a fixed rectangular grid, where m is the number of rows and n is the number of columns. Each cell in this grid represents a plot of land that can either be empty or occupied with an obstacle which makes it unusable. The city\'s planning committee wants to know the minimum cost to transport an amenity from one plot to another, considering that moving to an adjacent plot (up, down, left, or right) costs 1 unit. You are given the grid with the plots of land and obstacles, the starting plot coordinates where the amenity currently is, and the destination plot coordinates where the amenity needs to be moved. You need to determine the minimum cost required to transport the amenity from start to destination, avoiding the obstacles. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1,000), the dimensions of the grid. - The next m lines each contain n characters, either \'.\' (denoting an empty plot) or \'#\' (denoting an obstacle). - The following line contains two integers x1 and y1 (0 ≤ x1 < m, 0 ≤ y1 < n), the starting plot coordinates. - The last line contains two integers x2 and y2 (0 ≤ x2 < m, 0 ≤ y2 < n), the destination plot coordinates. Output - Output a single integer, the minimum cost to transport the amenity from the starting plot to the destination plot, or -1 if it is not possible to reach the destination due to obstacles. Example Input 5 5 ..... .#. ..#.. #.#.. ..... 0 0 4 4 Output 8 Explanation The grid looks like this: ``` ..... .#. ..#.. #.#.. ..... ``` You start at (0,0) and need to reach (4,4). The minimum cost path avoids obstacles and moves right, down, and left appropriately.","solution":"from collections import deque def min_cost_transport(m, n, grid, start, end): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) visited = set([(start[0], start[1])]) while queue: x, y, cost = queue.popleft() if (x, y) == (end[0], end[1]): return cost for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, cost + 1)) return -1"},{"question":"Laura and Mark are playing a game on a one-dimensional number line. They start at point 0, and each of them is given the same list of integers representing movements. Each integer in the list can be positive, which means moving to the right, or negative, which means moving to the left. However, Laura and Mark have different movement strategies: Laura performs the movements sequentially as given, while Mark reverses the order of the list and then performs the movements. Determine who ends up farther from the starting point, or if both are at the same distance. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of movements. - The second line contains N space-separated integers, each representing a movement on the number line. ------ Output Format ------ For each test case, output on a new line: - LAURA, if Laura ends up farther from the starting point. - MARK, if Mark ends up farther from the starting point. - EQUAL, if both are the same distance from the starting point. You may print each character in uppercase or lowercase. For example, Laura, LAURA, laura, and lAURA are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 -100 ≤ text{movement}_i ≤ 100 ----- Sample Input 1 ------ 3 5 1 -2 3 -1 2 4 2 -1 -1 2 6 3 -3 2 -2 1 -1 ----- Sample Output 1 ------ EQUAL MARK LAURA ----- Explanation 1 ------ Test case 1: Laura\'s final position is 1-2+3-1+2=3 and Mark\'s position is 2-1+3-2+1=3. Thus, both are at the same distance. Test case 2: Laura\'s final position is 2-1-1+2=2 and Mark\'s position is 2-1-1+2=2 but sequence reversed gives different path, thus Mark is farther. Test case 3: Laura\'s final position is 3-3+2-2+1-1=0 and Mark\'s position is -1+1-2+2-3+3=0 thus the order changes the initial calculation, Laura is farther.","solution":"def find_farthest(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] movements = test_cases[i][1] laura_position = sum(movements) mark_position = sum(movements[::-1]) if abs(laura_position) > abs(mark_position): results.append(\\"LAURA\\") elif abs(laura_position) < abs(mark_position): results.append(\\"MARK\\") else: results.append(\\"EQUAL\\") return results # Example usage T = 3 test_cases = [ (5, [1, -2, 3, -1, 2]), (4, [2, -1, -1, 2]), (6, [3, -3, 2, -2, 1, -1]) ] print(find_farthest(T, test_cases)) # Output should be [\\"EQUAL\\", \\"EQUAL\\", \\"EQUAL\\"] # Note: The reasoning in the explanation provided for the sample input seems incorrect as reversing # the movements doesn\'t change the final position; both will end up at the same place. # Correcting it with this assumption."},{"question":"Given an array of N integers, you need to determine the size of the largest subset of this array such that the GCD (Greatest Common Divisor) of the subset is greater than 1. -----Input----- The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case is described in the following two lines: - The first line of each test case contains a single integer N (1 ≤ N ≤ 105), denoting the size of the array. - The second line contains N space-separated integers A1, A2, ..., AN (1 ≤ Ai ≤ 106), representing the elements of the array. -----Output----- For each test case, print a single line denoting the size of the largest subset whose GCD is greater than 1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 105 - 1 ≤ Ai ≤ 106 -----Example----- Input: 2 5 2 4 6 8 10 4 5 10 15 20 Output: 5 4 -----Explanation----- Example case 1. The entire array [2, 4, 6, 8, 10] has a GCD of 2 which is greater than 1, so the subset is the entire array itself. Example case 2. The entire array [5, 10, 15, 20] has a GCD of 5 which is greater than 1, so the subset is the entire array itself.","solution":"from math import gcd from functools import reduce from collections import Counter def largest_gcd_subset(arr): Returns the size of the largest subset such that the GCD of the subset is greater than 1. max_value = max(arr) count = Counter(arr) largest_size = 0 # We start from 2 because GCD must be greater than 1 for g in range(2, max_value + 1): current_size = 0 for multiple in range(g, max_value + 1, g): current_size += count[multiple] largest_size = max(largest_size, current_size) return largest_size def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = largest_gcd_subset(arr) results.append(result) return results"},{"question":"In the land of BinaryTr, there exists a unique kind of binary tree called a BinarySumTree. Every node in this tree, other than the leaf nodes, has the unique property that its value is the sum of the values of its two children. You are given a binary tree, and your task is to determine if it satisfies the BinarySumTree property. Input format: The first line contains one integer, T, representing the number of test cases. The next T lines each describe a binary tree using a level-order traversal. Each node is represented by a positive integer or the character \'N\' for null nodes. Output format: For each test case, output \\"Case #x: Yes\\" if the tree satisfies the BinarySumTree property, and \\"Case #x: No\\" otherwise, where x is the test case number (starting from 1). Constraints: 0 < T ≤ 10 The number of nodes in each tree ≤ 1000 SAMPLE INPUT 2 1 2 3 N N 2 1 10 4 6 1 3 2 4 SAMPLE OUTPUT Case #1: Yes Case #2: No Explanation: For the first test case: The tree is as follows: 1 / 2 3 / 2 1 The sum of the values of the two children of the root (1) is 2 + 3 = 5, which is not equal to 1, so it does not satisfy the BinarySumTree property. For the second test case: The tree is as follows: 10 / 4 6 / / 1 3 2 4 The sum of the values of the children of node (10) is 4 + 6 = 10, which equals 10, and this is the case for all non-leaf nodes, so it satisfies the BinarySumTree property.","solution":"from collections import deque def is_binary_sum_tree(tree): if not tree or tree[0] == \'N\': return True idx = 0 q = deque([tree[idx]]) idx += 1 while q: node = q.popleft() if node == \'N\': continue left_val = tree[idx] if idx < len(tree) else \'N\' if left_val != \'N\': q.append(left_val) idx += 1 right_val = tree[idx] if idx < len(tree) else \'N\' if right_val != \'N\': q.append(right_val) idx += 1 if node != \'N\' and left_val != \'N\' and right_val != \'N\': if node != str(int(left_val) + int(right_val)): return False return True def process_test_cases(test_cases): results = [] for i, case in enumerate(test_cases): result = is_binary_sum_tree(case.split()) results.append(f\\"Case #{i+1}: {\'Yes\' if result else \'No\'}\\") return results"},{"question":"The Fibonacci sequence is a well-known sequence of numbers in mathematics, where the first two numbers are 0 and 1, and each subsequent number is the sum of the two preceding ones. Mathematically, the sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n - 1) + F(n - 2) for n geq 2 In this problem, you will calculate the n-th term in the Fibonacci sequence using a recursive function. Note: Any solution that does not use a recursive function will receive zero points, even if it produces the correct result. -----Input----- The input contains a single non-negative integer, n (0 leq n leq 30). -----Output----- The output contains a single integer: the n-th term in the Fibonacci sequence. -----Examples----- Sample Input: 7 Sample Output: 13","solution":"def fibonacci(n): Returns the n-th term in the Fibonacci sequence using a recursive function. if n <= 1: return n else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Problem Statement You are given an undirected graph G with N vertices and M edges. Each vertex is numbered from 1 to N, and each edge connects two distinct vertices u_i and v_i (1 leq i leq M). Your task is to determine if the graph G contains any simple cycle of length exactly 4. A simple cycle is a cycle that visits each vertex exactly once. Input The first line contains two integers N and M, the number of vertices and edges in the graph, respectively. The next M lines contain two integers u_i and v_i, representing an edge between vertices u_i and v_i. Constraints * 1 leq N leq 1000 * 0 leq M leq N(N-1)/2 * 1 leq u_i, v_i leq N * No self-loops or multiple edges between the same pair of vertices. Output Print \\"YES\\" if there exists a simple cycle of length exactly 4. Otherwise, print \\"NO\\". Sample Input 1 5 6 1 2 2 3 3 4 4 1 1 3 2 4 Sample Output 1 YES Sample Input 2 4 3 1 2 2 3 3 4 Sample Output 2 NO Explanation In Sample Input 1, a simple cycle of length 4 exists (1-2-3-4-1). Therefore, the output is \\"YES\\". In Sample Input 2, no simple cycle of length 4 can be formed with the given edges. Therefore, the output is \\"NO\\".","solution":"def has_cycle_of_length_four(N, M, edges): from collections import defaultdict graph = defaultdict(list) # Build the adjacency list for the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # Check for any cycles of length 4 for node in range(1, N + 1): # A dictionary to keep track of two-hops neighbors second_hop_neighbors = defaultdict(list) for neighbor in graph[node]: for second_neighbor in graph[neighbor]: if second_neighbor != node: second_hop_neighbors[second_neighbor].append(neighbor) for second_neighbor in second_hop_neighbors: if len(second_hop_neighbors[second_neighbor]) > 1: return \\"YES\\" return \\"NO\\""},{"question":"Problem You are given an array of integers and you need to determine the maximum sum of a subarray of non-negative integers. A subarray is a contiguous part of an array. If no such subarray exists, the maximum sum is considered to be 0. You need to write a function to determine the maximum sum of a subarray of non-negative integers. Input The function will receive the following input: - An integer n representing the number of elements in the array. (1 leq n leq 10^5) - An array of n integers a_1, a_2, ldots, a_n . (-10^4 leq a_i leq 10^4) Output Return a single integer representing the maximum sum of a subarray of non-negative integers. Examples # Example 1 Input: ``` 5 1 2 3 -2 5 ``` Output: ``` 6 ``` Explanation: The subarray [1, 2, 3] has the maximum sum of 6. # Example 2 Input: ``` 4 -1 -2 -3 -4 ``` Output: ``` 0 ``` Explanation: There are no non-negative numbers in the array, so the maximum sum is 0. # Example 3 Input: ``` 6 1 2 3 0 4 5 ``` Output: ``` 15 ``` Explanation: The subarray [1, 2, 3, 0, 4, 5] has the maximum sum of 15. # Constraints - The input satisfies the following conditions: * 1 leq n leq 10^5 * Each element in the array is an integer in the range -10^4 leq a_i leq 10^4. Note: Your solution should efficiently handle large inputs within the given constraints.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray of non-negative integers max_sum = 0 current_sum = 0 for num in arr: if num >= 0: current_sum += num else: current_sum = 0 if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A museum exhibit contains a uniquely designed pattern of square tiles. The pattern can be represented as an n × m grid of characters where each character is either \'.\' (an empty tile) or \'#\' (a decorated tile). The exhibit needs to be enclosed by a frame of \'.\' tiles, forming a rectangular border that surrounds all the \'#\' tiles. The rectangular frame must follow these rules: - The frame dimensions should be as small as possible while still enclosing all \'#\' tiles. - The frame must have a thickness of exactly 1 tile (i.e., one layer of \'.\' tiles all around the enclosed decorated tiles). - If no decorated tiles are present, return \\"No frame needed\\". Your task is to identify the coordinates of the top-left and bottom-right corners of the smallest possible frame. The coordinates are 1-based, with the top-left corner of the grid being (1, 1). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each, representing the grid. Output Output two pairs of integers r1, c1, and r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), representing the coordinates of the top-left and bottom-right corners of the smallest rectangular frame enclosing all \'#\' tiles. If no frame is needed, output \\"No frame needed\\". Examples Input 5 5 ..... ..#.. ..#.. ..#.. ..... Output 1 2 5 4 Input 4 4 .... .... .... .... Output No frame needed Input 3 4 .. .... .... Output 1 2 4 5","solution":"def find_frame(n, m, grid): top, bottom, left, right = n, 0, m, 0 decorated_tiles_found = False for i in range(n): for j in range(m): if grid[i][j] == \'#\': decorated_tiles_found = True if i < top: top = i if i > bottom: bottom = i if j < left: left = j if j > right: right = j if not decorated_tiles_found: return \\"No frame needed\\" r1 = top c1 = left r2 = bottom c2 = right return r1 + 1, c1 + 1, r2 + 1, c2 + 1"},{"question":"Given a directed acyclic graph (DAG) with N nodes and M edges, write a function to find the shortest path from a given starting node to all other nodes in the graph. If there is no path from the starting node to a specific node, represent the shortest distance to that node as infinity (INF). Example 1: Graph: 1 → 2 → 5 ↓ ↙ 3 → 4 N = 5, M = 6 Edges: [ (1, 2, 2), (1, 3, 6), (2, 4, 3), (2, 5, 4), (3, 4, 2), (4, 5, 1) ] Starting Node: 1 Output: [0, 2, 6, 5, 6] Your Task: You don\'t need to read input or print anything. Complete the function shortestPathDAG() which takes the number of nodes N, a list of tuples representing the edges in the graph, and the starting node as input parameters and returns a list of shortest distances from the starting node to each other node. Note: - Use topological sorting to determine the order of node processing. - Use a technique similar to Dijkstra\'s algorithm to relax the edges in the correct order based on the topological sort. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N + M) Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 1 ≤ edge weight ≤ 100","solution":"from collections import defaultdict, deque import math def shortestPathDAG(N, edges, start): Returns the shortest path from start node to all other nodes in a DAG. # Initialize the graph graph = defaultdict(list) indegree = [0] * N # Build the adjacency list for the graph and track the indegree of each node for u, v, w in edges: graph[u-1].append((v-1, w)) indegree[v-1] += 1 # Topological sort using Kahn\'s algorithm topo_order = [] queue = deque([node for node in range(N) if indegree[node] == 0]) while queue: node = queue.popleft() topo_order.append(node) for neighbor, weight in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Initialize distances with infinity distances = [math.inf] * N distances[start-1] = 0 # Relax edges in topological order for node in topo_order: if distances[node] != math.inf: for neighbor, weight in graph[node]: if distances[neighbor] > distances[node] + weight: distances[neighbor] = distances[node] + weight return distances"},{"question":"In a kingdom far away, the king decided to hold a grand feast. He invited all the wizards and magicians in the land. To ensure the feast is successful, the king wanted to prepare exactly `n` dishes. However, there is a catch: the king only has `m` ingredients, and each dish requires a specific set of ingredients. Each ingredient can be used to make any number of dishes and each dish can be made exactly once. Given the list of dishes and the ingredients each dish requires, determine the maximum number of dishes the king can successfully prepare. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 100). The next `n` lines describe the dishes. Each line starts with an integer `p` (0 ≤ p ≤ m), followed by `p` integers representing the ingredients required for that dish (each in the range from 1 to m). Output Print a single integer representing the maximum number of dishes the king can prepare. Examples Input 5 3 2 1 3 2 2 3 1 1 0 3 1 2 3 Output 4","solution":"def max_dishes(n, m, dishes): Determines the maximum number of dishes the king can successfully prepare. Args: n (int): Number of dishes. m (int): Number of available ingredients. dishes (list): A list of lists where each sublist represents the required ingredients for a dish. Returns: int: Maximum number of dishes that can be prepared. return len(dishes) # Simplest case: All provided dishes can be prepared."},{"question":"You are given an array of integers. Write a function that finds the longest subarray with a sum equal to 0. If there are multiple subarrays with the same length, return the first occurring one. Implement the function `longestZeroSumSubarray(arr)` that takes an array `arr` and returns an array representing the longest subarray with a 0 sum. ``` longestZeroSumSubarray(arr) e.g. longestZeroSumSubarray([1, 2, -3, 1, 2, -3, 3]) - subarray [1, 2, -3] has a sum of 0 and length 3 - subarray [1, 2, -3, 1, 2, -3] has a sum of 0 and length 6 (longer than the previous one) - subarray [2, -3, 1, 2, -3] has a sum of 0 and length 5 (shorter) - longest zero sum subarray is [1, 2, -3, 1, 2, -3] - therefore solution = [1, 2, -3, 1, 2, -3] ``` If no such subarray exists, return an empty array. **Constraints:** - All elements in the input array are integers. - The length of the array is between 1 and 1000. - Array elements can be negative, zero, or positive. **Example:** ``` longestZeroSumSubarray([1, 2, -3, 1, 2, -3, 3]) => [1, 2, -3, 1, 2, -3] longestZeroSumSubarray([1, 2, 3]) => [] longestZeroSumSubarray([-1, 1, -1, 1, -1, 1]) => [-1, 1, -1, 1, -1, 1] longestZeroSumSubarray([0, 0, 0, 0]) => [0, 0, 0, 0] ```","solution":"def longestZeroSumSubarray(arr): Finds the longest subarray with sum equal to 0. Args: arr (list of int): The input array. Returns: list of int: The longest subarray with sum equal to 0. sum_indices = {} curr_sum = 0 max_len = 0 start_index = 0 for i in range(len(arr)): curr_sum += arr[i] if curr_sum == 0: # Update the largest length subarray with the sum 0 starting from the beginning if i + 1 > max_len: max_len = i + 1 start_index = 0 if curr_sum in sum_indices: # If current sum has been seen before if i - sum_indices[curr_sum] > max_len: max_len = i - sum_indices[curr_sum] start_index = sum_indices[curr_sum] + 1 else: # Store the index against the sum sum_indices[curr_sum] = i return arr[start_index:start_index + max_len]"},{"question":"You have been hired by a software company for your string manipulation and logical reasoning abilities. As your first task, you are required to write a function that compresses a given string using the Run-Length Encoding (RLE) algorithm. Run-Length Encoding is a simple form of lossless data compression in which runs of data (consecutive elements that are repeated) are stored as a single data value and count, rather than as the original run. For example, the string `\\"aaabbc\\"` would be encoded as `\\"a3b2c1\\"`. Write a function `rle_encode(input_string)` that takes in a non-empty string `input_string` and returns its run-length encoded string. The input string will only contain lowercase alphabets (a-z). Examples: - For the input string `\\"wwwwaaadexxxxxx\\"`, the function should return `\\"w4a3d1e1x6\\"`. - For the input string `\\"abcd\\"`, the function should return `\\"a1b1c1d1\\"`. Note: - Consecutive runs of the same character should be represented by the character followed by its count. - Ensure that the function handles different lengths of input appropriately.","solution":"def rle_encode(input_string): Encodes the given string using Run-Length Encoding (RLE) algorithm. Parameters: input_string (str): Non-empty string containing only lowercase alphabets. Returns: str: Run-Length Encoded string. if not input_string: return \\"\\" encoded_str = \\"\\" count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: encoded_str += prev_char + str(count) prev_char = char count = 1 # To add the last run of characters encoded_str += prev_char + str(count) return encoded_str"},{"question":"You are given a list of `n` distinct integers and a positive integer `k`. Your task is to implement a function `find_kth_largest(nums, k)` that returns the `k`-th largest element in the list. The list is not necessarily sorted, and you should aim for an efficient algorithm with a time complexity better than `O(n log n)` where `n` is the length of the list. **Inputs:** - `nums`: A list of `n` distinct integers (e.g., `[3, 2, 1, 5, 6, 4]`) - `k`: A positive integer representing the position of the largest element to find (e.g., `k = 2` for the 2nd largest element) **Output:** - Return the `k`-th largest element in the given list. **Constraints:** - The list `nums` contains distinct integers, and the length of the list is at least `k`. **Examples:** ```python assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert find_kth_largest([7, 10, 4, 3, 20, 15], 3) == 10 assert find_kth_largest([50, 30, 20, 70, 60], 4) == 30 ``` Write the function `find_kth_largest(nums, k)` to solve the problem.","solution":"import random def quick_select(nums, low, high, k): pivot = nums[high] i = low for j in range(low, high): if nums[j] > pivot: nums[i], nums[j] = nums[j], nums[i] i += 1 nums[i], nums[high] = nums[high], nums[i] if i == k: return nums[i] elif i < k: return quick_select(nums, i + 1, high, k) else: return quick_select(nums, low, i - 1, k) def find_kth_largest(nums, k): return quick_select(nums, 0, len(nums) - 1, k - 1)"},{"question":"Given an unsorted array of size N, identify the kth smallest element in the array using the Quickselect algorithm. Example 1: Input: N = 6, k = 2 arr[] = {7, 10, 4, 3, 20, 15} Output: 4 Explanation: The 2nd smallest element is 4. Example 2: Input: N = 5, k = 5 arr[] = {7, 10, 4, 3, 20, 15} Output: 20 Explanation: The 5th smallest element is 20. Your Task: You don\'t need to read input or print anything. Complete the function kthSmallest() that takes the array, size of the array N, and k as input parameters and returns the kth smallest element in the array. Expected Time Complexity: O(N) on average Expected Auxiliary Space: O(log N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ k ≤ N","solution":"import random def kthSmallest(arr, N, k): This function finds the kth smallest element in an array using the Quickselect algorithm. def partition(left, right, pivot_index): pivot_value = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k_smallest): if left == right: return arr[left] pivot_index = random.randint(left, right) pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return select(left, pivot_index - 1, k_smallest) else: return select(pivot_index + 1, right, k_smallest) return select(0, N - 1, k - 1)"},{"question":"Write a function that takes a list of integers and returns a list of those integers, sorted in ascending order, but with all the zeros moved to the end. For example: Input: [0, 2, 3, 0, 1, 4] Output: [1, 2, 3, 4, 0, 0] Note: The order of non-zero elements should be preserved.","solution":"def sort_and_move_zeros(nums): Returns a list of integers sorted in ascending order, but with all zeros moved to the end. non_zeros = [x for x in nums if x != 0] zeros = [x for x in nums if x == 0] return sorted(non_zeros) + zeros"},{"question":"You are given an array of integers representing the profits of investing in different stocks over a period of days. You can make at most one transaction, meaning you can choose one day to buy a stock and another day in the future to sell that stock. Write a function maxProfit that computes the maximum profit you can achieve from a single transaction. If no profit can be made, return 0. For example: ```python stocks = [7, 1, 5, 3, 6, 4] maxProfit(stocks) should return 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. stocks = [7, 6, 4, 3, 1] maxProfit(stocks) should return 0 Explanation: In this case, no transactions are done, and the max profit = 0. ``` Function signature: ```python def maxProfit(prices: List[int]) -> int: ```","solution":"from typing import List def maxProfit(prices: List[int]) -> int: Computes the maximum profit that can be achieved from a single transaction. Parameters: prices (List[int]): List of stock prices where prices[i] is the price of the stock on the ith day. Returns: int: Maximum profit that can be achieved. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a magical forest, there are n enchanted flowers arranged in a row. Each flower has two important properties: its beauty and its magic value. A wizard has a very specific way to pick flowers for her potion. She will always pick exactly k consecutive flowers. The beauty of her potion is defined as the sum of the beauty values of the picked flowers, and the magic of her potion is defined as the product of the magic values of the picked flowers. The wizard seeks to maximize the beauty of her potion while ensuring that the magic does not exceed a given threshold m. Your task is to help the wizard find the maximum possible beauty of the potion under these conditions. -----Input----- The input starts with a line containing three integers n, k, and m (1 leq n, k leq 10^5, 1 leq m leq 10^9), the number of flowers, the number of consecutive flowers to pick, and the magic threshold respectively. The next line contains n integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^3), where b_i is the beauty value of the i-th flower. The following line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^3), where a_i is the magic value of the i-th flower. -----Output----- If it is possible to pick k consecutive flowers such that the magic does not exceed m, output one integer, the maximum possible beauty. Otherwise, output \\"impossible\\". -----Examples----- Sample Input 1: 7 3 1000 5 1 9 8 3 2 7 2 4 1 2 5 3 4 Sample Output 1: 20 Sample Input 2: 5 2 5 4 8 2 1 3 6 7 8 9 10 Sample Output 2: impossible","solution":"def max_beauty(n, k, m, beauty_values, magic_values): def calculate_beauty_and_magic(start): beauty_sum = sum(beauty_values[start:start + k]) magic_product = 1 for i in range(start, start + k): magic_product *= magic_values[i] return beauty_sum, magic_product max_beauty = -1 for i in range(n - k + 1): beauty_sum, magic_product = calculate_beauty_and_magic(i) if magic_product <= m: max_beauty = max(max_beauty, beauty_sum) if max_beauty == -1: return \\"impossible\\" else: return max_beauty"},{"question":"On a distant planet called Zog, a local engineer named Zark is trying to set up a communication network between cities. The planet has P cities numbered from 1 to P , and there are Q possible cables that Zark can use to connect these cities. Each cable can connect city a to city b with latency l . Zark wants to ensure that every pair of cities is connected directly or indirectly in such a way that the maximum latency between any two cities in the network is minimized. Your task is to help Zark determine this minimum possible maximum latency. input The input is provided via standard input in the following format: P Q a_1 b_1 l_1 a_2 b_2 l_2 vdots a_Q b_Q l_Q output Print the minimum possible value of the maximum latency between any two cities. Output this single integer on one line. Example Input 4 5 1 2 3 1 3 5 2 3 4 2 4 8 3 4 2 Output 4","solution":"def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_maximum_latency(P, Q, connections): connections.sort(key=lambda x: x[2]) parent = list(range(P + 1)) rank = [0] * (P + 1) max_latency = 0 for a, b, l in connections: if find(parent, a) != find(parent, b): union(parent, rank, a, b) max_latency = l P -= 1 if P == 1: break return max_latency def main(): import sys input = sys.stdin.read data = input().split() P = int(data[0]) Q = int(data[1]) connections = [] index = 2 for _ in range(Q): a = int(data[index]) b = int(data[index + 1]) l = int(data[index + 2]) connections.append((a, b, l)) index += 3 print(minimum_maximum_latency(P, Q, connections)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array A of length n. Your task is to find the maximum length of a subarray where every element is divisible by at least one prime number in the range [m, p]. A subarray is a contiguous part of an array. Consider the following example for clarity. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains three integers n, m, and p (1 le n le 1000, 2 le m le p le 100) — the length of the array, and the bounds of the prime range. - The second line contains n integers A_1, A_2, dots, A_n (1 le A_i le 1000) — the elements of the array. -----Output----- For each test case, output a single integer representing the maximum length of the subarray that satisfies the given condition. -----Examples----- Input 2 6 2 5 6 10 15 20 25 30 5 3 7 14 21 28 35 42 Output 6 5 -----Note----- In the first test case, the subarray is the entire array [6, 10, 15, 20, 25, 30]. Each element of this array is divisible by at least one prime number in the range [2, 5]. Hence, the output is 6. In the second test case, the subarray is the entire array [14, 21, 28, 35, 42]. Each element is divisible by at least one prime number in the range [3, 7]. Hence, the output is 5.","solution":"from math import isqrt def sieve_of_eratosthenes(max_num): Computes prime numbers up to max_num using the Sieve of Eratosthenes. sieve = [True] * (max_num + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, isqrt(max_num) + 1): if sieve[start]: for multiple in range(start * start, max_num + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def primes_in_range(m, p): Finds all prime numbers in the range [m, p]. all_primes = sieve_of_eratosthenes(p) return [prime for prime in all_primes if m <= prime <= p] def max_subarray_length_divisible_by_primes(n, m, p, A): primes = primes_in_range(m, p) max_len = 0 current_len = 0 for num in A: if any(num % prime == 0 for prime in primes): current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len def solve(t, test_cases): results = [] for i in range(t): n, m, p, A = test_cases[i] result = max_subarray_length_divisible_by_primes(n, m, p, A) results.append(result) return results"},{"question":"In a land far, far away, there are n cities connected by n-1 bidirectional roads. The cities are numbered from 1 to n and are connected in such a way that there is a unique path between any two cities. Each road has a certain toll fee, and the fees form an array toll of length n-1. Each entry in the array represents the toll fee of the road between two cities. Your task is to process q queries. Each query provides two cities u and v, and you need to find the maximum toll fee among all roads on the unique path between these two cities. -----Input----- The first line contains two integers n and q (1 leq n, q leq 10^5) — the number of cities and the number of queries. Each of the next n-1 lines contains three integers a, b, and w (1 leq a, b leq n, 1 leq w leq 10^9) — the two cities connected by a road and the toll fee for that road. Each of the next q lines contains two integers u and v (1 leq u, v leq n) — the cities for which you need to find the maximum toll fee on the path between them. -----Output----- For each query, print a single integer — the maximum toll fee on the unique path between the cities u and v. -----Example----- Input: 5 3 1 2 4 2 3 6 2 4 5 4 5 8 1 3 4 5 3 5 Output: 6 8 8 -----Note----- In the provided example, the connections form a tree as follows: ```plaintext 1 | 4 | 2 -- 3 | 5 ``` For the query (1, 3): The path is 1 - 2 - 3, and the maximum toll fee is 6. For the query (4, 5): The path is 4 - 5, and the maximum toll fee is 8. For the query (3, 5): The path is 3 - 2 - 4 - 5, and the maximum toll fee is 8.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(1000000) class TreePathMaxToll: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.max_toll = [[-1] * 17 for _ in range(n + 1)] self.level = [0] * (n + 1) self.parent = [[-1] * 17 for _ in range(n + 1)] def add_road(self, a, b, w): self.graph[a].append((b, w)) self.graph[b].append((a, w)) def dfs(self, node, par, lvl, weight): self.parent[node][0] = par self.level[node] = lvl self.max_toll[node][0] = weight for (next_node, w) in self.graph[node]: if next_node != par: self.dfs(next_node, node, lvl + 1, w) def precompute(self): self.dfs(1, -1, 0, 0) # Precompute the `parent` and `max_toll` tables for LCA for j in range(1, 17): for i in range(1, self.n + 1): if self.parent[i][j - 1] != -1: self.parent[i][j] = self.parent[self.parent[i][j - 1]][j - 1] self.max_toll[i][j] = max(self.max_toll[i][j - 1], self.max_toll[self.parent[i][j - 1]][j - 1]) def query(self, u, v): if self.level[u] < self.level[v]: u, v = v, u max_w = 0 # Lift u up to the same level as v for i in range(16, -1, -1): if self.level[u] - (1 << i) >= self.level[v]: max_w = max(max_w, self.max_toll[u][i]) u = self.parent[u][i] # If u and v are same, return the max toll found so far if u == v: return max_w # Find the LCA and maximum toll in the process for i in range(16, -1, -1): if self.parent[u][i] != self.parent[v][i]: max_w = max(max_w, self.max_toll[u][i], self.max_toll[v][i]) u = self.parent[u][i] v = self.parent[v][i] max_w = max(max_w, self.max_toll[u][0], self.max_toll[v][0]) return max_w def max_toll_on_paths(n, roads, queries): tree = TreePathMaxToll(n) for a, b, w in roads: tree.add_road(a, b, w) tree.precompute() results = [] for u, v in queries: results.append(tree.query(u, v)) return results"},{"question":"Given an array `arr` of `n` integers, you are to find two integers `x` and `y` (1 ≤ x < y ≤ n) such that the absolute difference between the sum of elements from index `x` to `y` and the sum of the remaining elements in the array is minimized. -----Input----- The first line contains an integer `n` (2 ≤ n ≤ 10^5), representing the number of elements in the array. The second line contains `n` integers separated by spaces `a_1, a_2, ..., a_n` (−10^9 ≤ a_i ≤ 10^9), the elements of the array. -----Output----- Print two integers `x` and `y` such that 1 ≤ x < y ≤ n and the absolute difference described in the problem statement is minimized. If there are multiple solutions, you are allowed to print any of them. -----Examples----- Input: 5 1 2 3 4 5 Output: 2 3 Input: 4 -1 2 -2 1 Output: 1 4 -----Note----- For the first example, calculating the sums for all possible subarrays and their complements, the pair (2,3) yields the minimum absolute difference between the sum of elements and the remaining elements. For the second example, the entire array itself simplifies to the minimal absolute difference situation.","solution":"def find_min_abs_diff_subarray(arr): n = len(arr) total_sum = sum(arr) min_diff = float(\'inf\') x, y = 1, n # initialize to any valid value # We can scan the array and maintain the sum of elements up to the current index prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Now let\'s find the best x and y for start in range(n): for end in range(start + 1, n): subarray_sum = prefix_sum[end + 1] - prefix_sum[start] remaining_sum = total_sum - subarray_sum diff = abs(subarray_sum - remaining_sum) if diff < min_diff: min_diff = diff x, y = start + 1, end + 1 # converting to 1-based index return x, y"},{"question":"Vasya is fascinated by prime numbers and would like your help in finding the largest prime factor of a given integer n. Recall that a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. -----Input----- The input contains a single integer n (2 ≤ n ≤ 10^12). -----Output----- Output the largest prime factor of the given integer n. -----Examples----- Input 10 Output 5 Input 13195 Output 29 Input 29 Output 29 Input 100 Output 5 -----Note----- In the first sample, the prime factors of 10 are 2 and 5, and the largest one is 5. In the second sample, the prime factors of 13195 are 5, 7, 13, and 29, and the largest one is 29. In the third sample, 29 is already a prime number, so the largest prime factor is 29. In the fourth sample, the prime factors of 100 are 2 and 5, and the largest one is 5.","solution":"def largest_prime_factor(n: int) -> int: Function to find the largest prime factor of a given integer n. # Helper function to get the next prime factor def next_prime_factor(start): for i in range(start, int(n**0.5) + 1): if n % i == 0: return i return n largest_factor = None while n > 1: factor = next_prime_factor(2 if largest_factor is None else largest_factor) largest_factor = factor while n % factor == 0: n //= factor return largest_factor"},{"question":"Given a list of integers, where each element denotes the price of a given stock on that particular day. You need to determine the maximum profit that can be made by buying and then later selling one share of the stock. You can only hold one share of the stock at a time; hence, you must sell it before buying again. Your task is to find the days on which you should buy and sell to achieve this maximum profit. Input: An array of integers where each integer represents the stock price on a given day. Output: A tuple containing two integers representing the days (0-based indices) on which you should buy and sell the stock to achieve the maximum profit. If no profit can be made, return (-1, -1). Example 1: Input: [7, 1, 5, 3, 6, 4] Output: (1, 4) Explanation: Buy on day 1 (price = 1) and sell on day 4 (price = 6), profit = 6-1 = 5 Example 2: Input: [7, 6, 4, 3, 1] Output: (-1, -1) Explanation: In this case, no transaction is done and the maximum profit is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findBestDays() which takes an array of integers as input and returns a tuple of two integers. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= length of the array <= 10^5 1 <= stock price <= 10^5","solution":"def findBestDays(prices): Returns a tuple containing two integers representing the days on which to buy and sell the stock to achieve the maximum profit. If no profit can be made, returns (-1, -1). if not prices or len(prices) < 2: return (-1, -1) min_price = prices[0] min_day = 0 max_profit = 0 buy_day = sell_day = 0 for i in range(1, len(prices)): if prices[i] < min_price: min_price = prices[i] min_day = i elif prices[i] - min_price > max_profit: max_profit = prices[i] - min_price buy_day = min_day sell_day = i if max_profit == 0: return (-1, -1) return (buy_day, sell_day)"},{"question":"On a unique island, the natives use strings of even length to communicate secret messages. They believe that a valid message must be split into two segments of equal length such that if one segment is reversed and then compared to the other, they form a palindromic pair. For example, the string \\"abccba\\" can be split into \\"abc\\" and \\"cba\\", and reversing \\"cba\\" gives \\"abc\\", forming a palindromic pair. Your task is to write a function that verifies the validity of such messages. Input The first line of input consists of an integer \'T\' (1 ≤ T ≤ 50) test cases. The number of test cases \'T\' is given in the first line of the input followed by a blank line. Each test case consists of one line containing a string S (2 ≤ |S| ≤ 1000) of even length. Output The output for each test case should be \'YES\' if the given string can be split into two segments such that one segment reversed forms the other, otherwise \'NO\'. Example Input: 3 abccba abcdef noppon Output: YES NO YES","solution":"def can_form_palindromic_pair(s): Checks if the given string can be split into two segments of equal length such that one segment reversed equals the other segment. Args: s (str): The input string of even length. Returns: str: \'YES\' if it can be split as described, \'NO\' otherwise. mid = len(s) // 2 first_half = s[:mid] second_half = s[mid:] if first_half == second_half[::-1]: return \'YES\' else: return \'NO\' def verify_messages(T, messages): Processes multiple test cases to check if each string can be split into valid palindromic pairs. Args: T (int): Number of test cases. messages (list of str): List of strings to be verified. Returns: list of str: Results for each test case, \'YES\' or \'NO\'. return [can_form_palindromic_pair(s) for s in messages]"},{"question":"Peter loves playing with sequences of numbers. He designed a game where he starts with an initial integer `n` and repeatedly applies a transformation step until reaching a sequence of length `m`, where each transformation step follows a specific rule: 1. Initialize the sequence with the number `n`. 2. For each subsequent number in the sequence, the next number is obtained by summing the squares of the digits of the current number. 3. This continues until the sequence contains `m` numbers. Peter wants you to find the sequence of numbers obtained after applying these steps. Write a function `generate_sequence(n, m)` that takes two integers `n` and `m`, and returns the sequence of length `m` as a list of integers. Input - An integer `n` (1 ≤ n ≤ 10^5) — the initial number. - An integer `m` (1 ≤ m ≤ 500) — the required length of the sequence. Output - A list containing the sequence of length `m` as integers. Examples Input ``` 81 4 ``` Output ``` [81, 65, 61, 37] ``` Input ``` 19 5 ``` Output ``` [19, 82, 68, 100, 1] ``` Note For the first test case: - Start with 81. - Next number is 6^2 + 5^2 = 36 + 25 = 65. - Next number is 6^2 + 1^2 = 36 + 1 = 61. - Next number is 3^2 + 7^2 = 9 + 49 = 58. For the second test case: - Start with 19. - Next number is 1^2 + 9^2 = 1 + 81 = 82. - Next number is 8^2 + 2^2 = 64 + 4 = 68. - Next number is 6^2 + 8^2 = 36 + 64 = 100. - Next number is 1^2 + 0^2 + 0^2 = 1 + 0 + 0 = 1.","solution":"def generate_sequence(n, m): def sum_of_squares_of_digits(x): return sum(int(digit)**2 for digit in str(x)) sequence = [n] while len(sequence) < m: next_number = sum_of_squares_of_digits(sequence[-1]) sequence.append(next_number) return sequence"},{"question":"Write a function that determines whether a given list of integers is a list where every element is either 1 or a prime number. The function should take one argument, which is a list of integers, and return a boolean value. The function should return `True` if every element in the list is either 1 or a prime number, and `False` otherwise. For example: - Given the list `[1, 2, 3, 4]`, the function should return `False` because 4 is not a prime number. - Given the list `[1, 2, 3, 5, 7]`, the function should return `True` because all elements are either 1 or prime numbers.","solution":"def is_prime(n): Helper function to determine if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def all_1_or_prime(lst): Determines whether every element in the list is either 1 or a prime number. for num in lst: if num != 1 and not is_prime(num): return False return True"},{"question":"Write a program that reads an integer n (1 ≤ n ≤ 10^5) and a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Your task is to find the length of the longest contiguous subarray where all elements have the same parity. Parity refers to whether a number is odd or even. Input: The first line contains a single integer, n. The second line contains the sequence of integers, separated by spaces. Output: Print a single integer, the length of the longest contiguous subarray where all elements have the same parity. Example Input: 7 5 2 2 6 6 5 7 Output: 4 Explanation: The longest contiguous subarray with the same parity is [2, 2, 6, 6], which has a length of 4. The sequence [5, 7] is also fully even or odd, but its length is only 2, so the correct answer is 4.","solution":"def longest_contiguous_subarray_same_parity(n, arr): Returns the length of the longest contiguous subarray where all elements have the same parity. if n == 0: return 0 max_length = current_length = 1 for i in range(1, n): if (arr[i] % 2) == (arr[i - 1] % 2): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given n tasks, each characterized by a unique identifier and its priority. Write a function to process a list of tasks and return the identifiers of tasks in order of their priority. The priority is defined by an integer value where a higher value indicates higher priority. If two tasks have the same priority, the one that appears earliest in the original list should come first. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10,000) representing the number of tasks. - Each of the next n lines contains a string and an integer separated by a space. The string is the task\'s identifier (containing only alphanumeric characters and of length not greater than 100) and the integer is the task\'s priority (-10,000 ≤ priority ≤ 10,000). -----Output----- - Print the identifiers of the tasks in order of their priority, one per line. -----Example----- Input 4 task1 10 task2 5 task3 12 task4 5 Output task3 task1 task2 task4 -----Note----- In the sample provided, \\"task3\\" has the highest priority (12), followed by \\"task1\\" with priority 10. \\"task2\\" and \\"task4\\" both have priority 5, but since \\"task2\\" appears earlier in the input list, it comes before \\"task4\\" in the output.","solution":"def process_tasks(n, tasks): Returns the identifiers of tasks in order of their priority. # Sort tasks by priority in descending order. If priorities are the same, sort by original index. sorted_tasks = sorted(tasks, key=lambda x: (-x[1], x[2])) # Extract and return only the task identifiers return [task[0] for task in sorted_tasks] def parse_input(input_lines): n = int(input_lines[0]) tasks = [] for i in range(1, n + 1): parts = input_lines[i].split() identifier = parts[0] priority = int(parts[1]) tasks.append((identifier, priority, i)) return n, tasks def main(input_lines): n, tasks = parse_input(input_lines) task_order = process_tasks(n, tasks) for task in task_order: print(task)"},{"question":"You are tasked with finding the lexicographically smallest string possible by performing a series of operations on an initial string `s`. In one operation, you can select any substring of `s` that contains only identical characters and reverse this substring. Can you determine the minimum number of operations needed to achieve the smallest possible string? -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 100) — the length of the string. The second line of each test case contains the string `s` consisting of lowercase English letters. -----Output----- For each test case output a single integer — the minimum number of operations needed to make the lexicographically smallest string possible. -----Examples----- Input 3 5 dcbae 3 abc 6 abbcca Output 2 0 1 -----Note----- In the first test case, the operations can be performed as follows: - Reverse the substring \'dc\' (containing identical characters \'d\' and \'c\'), yielding \\"cbdae\\". - Reverse the substring \'da\' (containing identical characters \'d\' and \'a\'), yielding \\"cbaed\\". In the second test case, the string is already the lexicographically smallest. In the third test case, reversing the substring \'bcc\' (containing identical characters \'b\' and \'c\') yields \\"abccba\\" which is the lexicographically smallest.","solution":"def min_operations_to_smallest_string(t, cases): results = [] for i in range(t): n, s = cases[i] sorted_s = \'\'.join(sorted(s)) diff_count = 0 for j in range(n): if s[j] != sorted_s[j]: diff_count += 1 # Each mismatch can be corrected by reversing operations = diff_count // 2 results.append(operations) return results"},{"question":"You are tasked with organizing a series of workshops at your university. Your goal is to assign rooms to workshops such that there are no conflicts in timing. You are given a list of workshops, where each workshop is represented by its start time and end time. A workshop can only be held if there\'s a room available for the entire duration of the workshop. Write a program that determines the minimum number of rooms required to schedule all the workshops without any timing conflicts. Input - The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case begins with a single integer n (1 ≤ n ≤ 10^5) — the number of workshops. - The next n lines each contain two integers, start and end (0 ≤ start < end ≤ 10^9), representing the start time and end time of a workshop. Output For each test case, output a single integer — the minimum number of rooms required. Example Input ``` 2 3 1 4 2 5 6 8 4 1 3 2 4 3 5 4 6 ``` Output ``` 2 2 ``` Explanation - In the first test case, you can use one room for workshops (1,4) and (6,8), but you will need a second room for workshop (2,5) because it overlaps with the first one. - In the second test case, you can use one room for workshops (1,3) and (3,5), and a second room for (2,4) and (4,6) as they overlap sequentially.","solution":"import heapq def min_rooms_required(test_cases): results = [] for workshops in test_cases: if not workshops: # If no workshops, no rooms are needed results.append(0) continue # Sort workshops by start time workshops.sort(key=lambda x: x[0]) # Min-heap to track end times of workshops min_heap = [] # Add the end time of the first workshop heapq.heappush(min_heap, workshops[0][1]) for i in range(1, len(workshops)): # If the current workshop starts after the earliest ending workshop, # we can reuse the room (remove the top of the heap) if workshops[i][0] >= min_heap[0]: heapq.heappop(min_heap) # Allocate a new room (add the end time of the current workshop) heapq.heappush(min_heap, workshops[i][1]) # The size of the heap tells us the minimum number of rooms required results.append(len(min_heap)) return results def parse_input(input_string): input_data = input_string.split() index = 0 t = int(input_data[index]) index += 1 test_cases = [] for _ in range(t): n = int(input_data[index]) index += 1 workshops = [] for _ in range(n): start = int(input_data[index]) index += 1 end = int(input_data[index]) index += 1 workshops.append((start, end)) test_cases.append(workshops) return test_cases"},{"question":"You are given a binary tree with n nodes. Each node in the tree has a positive integer value. You need to answer several queries about the tree. Each query can be one of the following types: * Increment all node values in a specific subtree by a given value. * Find the maximum value in a specific subtree. To make it easier, consider the root of the tree is always node 1. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of nodes in the tree. The second line contains n integers (1 ≤ vi ≤ 10^9), where vi is the value of the ith node. The next n-1 lines each contain two integers u and v, indicating that there is an edge between node u and node v. The next line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. The following q lines describe the queries: * 1 x inc, where x is the root of the subtree and inc is the value to be added to all nodes in the subtree of x. * 2 x, where x is the root of the subtree, and the query is to find the maximum value in the subtree of x. Output: For each query of the second type, print a single integer in a new line - the maximum value in the subtree of x. Note: The increment operations may affect the maximum value queries, so all updates must reflect in subsequent queries. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 4 2 3 1 3 2 2 3 2 1 Output: 5 7 7 Explanation: 1. Initially, the maximum value in the subtree rooted at node 3 is 5. 2. After increment by 2 in subtree rooted at node 3, node 3 becomes 5, and nodes 4, 5 become 6, 7 respectively. 3. The updated maximum value in the subtree rooted at node 3 is now 7. 4. The maximum value of the entire tree is now 7, after the increment.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def increment_subtree(node, inc): if node: node.value += inc for child in node.children: increment_subtree(child, inc) def find_max_in_subtree(node): if not node: return float(\'-inf\') max_value = node.value for child in node.children: max_value = max(max_value, find_max_in_subtree(child)) return max_value def solve_tree_problem(n, values, edges, queries): nodes = {i+1: TreeNode(values[i]) for i in range(n)} for u, v in edges: nodes[u].children.append(nodes[v]) results = [] for query in queries: if query[0] == 1: _, x, inc = query increment_subtree(nodes[x], inc) elif query[0] == 2: _, x = query results.append(find_max_in_subtree(nodes[x])) return results"},{"question":"Alice loves playing with sequences of numbers. She defines a \\"beautiful sequence\\" as a sequence in which the sum of the digits of each number is either equal to or greater than the sum of the digits of its subsequent number in the sequence. Given a sequence of integers, determine if it is a beautiful sequence. **Input Format:** - The first line will contain T, the number of test cases. - Each test case consists of two lines. The first line contains an integer N, the number of elements in the sequence. - The second line contains N space-separated integers representing the sequence. **Output Format:** For each test case, output \\"Beautiful\\" (without quotes) if the sequence is a beautiful sequence, otherwise output \\"Not Beautiful\\" (without quotes). **Constraints:** Subtask 1: (10 points) - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ elements of the sequence ≤ 10^3 Subtask 2: (90 points) - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ elements of the sequence ≤ 10^9 **SAMPLE INPUT:** 2 5 123 234 345 456 567 4 987 876 765 654 **SAMPLE OUTPUT:** Not Beautiful Beautiful **Explanation:** Case 1: - Sum of digits for 123 is 6 - Sum of digits for 234 is 9 - Since 9 (sum of digits of 234) is greater than 6 (sum of digits of 123), the sequence is not beautiful. Case 2: - Sum of digits for 987 is 24 - Sum of digits for 876 is 21 - Sum of digits for 765 is 18 - Sum of digits for 654 is 15 - Here, each number has a sum of digits lower than or equal to the previous, hence the sequence is \\"Beautiful\\".","solution":"def is_sum_of_digits_non_increasing(sequence): Determine if the given sequence is a \\"beautiful sequence\\". A beautiful sequence is one where the sum of the digits of each number is either equal to or greater than the sum of the digits of its subsequent number. Args: sequence (list of int): The sequence of integers to be checked. Returns: str: \\"Beautiful\\" if the sequence is beautiful, otherwise \\"Not Beautiful\\". def sum_of_digits(n): return sum(int(digit) for digit in str(n)) for i in range(len(sequence) - 1): if sum_of_digits(sequence[i]) < sum_of_digits(sequence[i + 1]): return \\"Not Beautiful\\" return \\"Beautiful\\" def process_test_cases(T, test_cases): results = [] for N, sequence in test_cases: results.append(is_sum_of_digits_non_increasing(sequence)) return results"},{"question":"Given a string consisting of lowercase letters, determine the minimum number of moves needed to make all characters in the string the same. In one move, you can choose any character and change it to any other lowercase letter. # Input The input consists of a single line containing a string of lowercase letters. The length of the string is between 1 and 100 characters, inclusive. # Output Output the minimum number of moves needed to make all characters in the string the same. # Examples Input ``` abac ``` Output ``` 2 ``` Input ``` aaaa ``` Output ``` 0 ``` Input ``` abcde ``` Output ``` 4 ``` # Explanation In the first example, changing either the two `b` or the one `c` would result in a uniform string, with a minimum of 2 moves.","solution":"def min_moves_to_uniform_string(s): Given a string consisting of lowercase letters, determine the minimum number of moves needed to make all characters in the string the same. In one move, you can choose any character and change it to any other lowercase letter. Parameters: s (str): The input string consisting of lowercase letters. Returns: int: The minimum number of moves needed to make all characters in the string the same. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency of any character max_freq = max(char_count.values()) # The minimum number of moves needed to make all characters the same return len(s) - max_freq"},{"question":"You are given a text consisting of multiple lines. Each line contains several words separated by spaces. Your task is to find two words in the text that are anagrams of each other and output them. If there are multiple pairs of anagrams, output any one pair. If no such pair exists, output \\"NO ANAGRAMS.\\" An anagram is a word formed by rearranging the letters of another. ------ Input ------ The first line contains an integer T, the number of test cases. Then for each test case: The first line contains an integer N, the number of lines in the text. The next N lines each contain a string S_i which represents a line of text. ------ Output ------ For each test case, output two words that are anagrams of each other separated by a space, or \\"NO ANAGRAMS\\" if no such pair exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ |S_i| ≤ 1000 (length of the line) 1 ≤ |Word| ≤ 100 (length of each word) ------ Sample Input ------ 2 2 listen silent no anagrams here 3 bat tab word sword random words ------ Sample Output ------ listen silent bat tab","solution":"def find_anagrams(text): Finds and returns two words that are anagrams of each other in the given text. If no such pair exists, return \\"NO ANAGRAMS\\". word_dict = {} for line in text: words = line.split() for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in word_dict: return word_dict[sorted_word], word word_dict[sorted_word] = word return \\"NO ANAGRAMS\\" def solve(tests): results = [] for test in tests: anagram_pair = find_anagrams(test) if isinstance(anagram_pair, tuple): results.append(\' \'.join(anagram_pair)) else: results.append(anagram_pair) return results"},{"question":"Masha loves playing with sequences of integers. Today, she came up with a new game. She takes a sequence of integers and performs operations on it. In each operation, she chooses some contiguous subarray and simultaneously increments all its elements by 1. She wonders how many operations she needs to make all elements of the sequence equal. You are given a sequence of n integers a1, a2, ..., an. Find the minimum number of operations needed to make all elements of the sequence equal. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the sequence. Output Print one integer — the minimum number of operations needed to make all elements of the sequence equal. Examples Input 5 1 2 1 2 1 Output 3 Input 3 3 3 3 Output 0 Input 4 5 2 5 2 Output 5","solution":"def min_operations_to_equalize(n, sequence): Determines the minimum number of operations needed to make all elements in the sequence equal. Parameters: n (int): Number of elements in the sequence. sequence (list of int): The sequence of integers. Returns: int: The minimum number of operations needed to make all elements equal. max_element = max(sequence) min_operations = sum(max_element - x for x in sequence) return min_operations"},{"question":"Given a matrix of integers where each row is sorted in ascending order and each column is also sorted in ascending order, write a function `searchMatrix(matrix, target)` that takes the matrix and a target integer value, and returns a boolean indicating whether the target exists in the matrix. For example: ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 searchMatrix(matrix, target) # Should return True target = 20 searchMatrix(matrix, target) # Should return False ``` The function should leverage the properties of the matrix for efficient searching.","solution":"def searchMatrix(matrix, target): This function takes a matrix where each row is sorted in ascending order and each column is also sorted in ascending order, and a target integer value. It returns a boolean indicating whether the target exists in the matrix. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 # Start from the top-right corner and iterate through the matrix while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"You are given a list of integers representing the number of pages of different documents Stepan needs to print. Stepan\'s printer can print a fixed number of pages per minute. Each time Stepan prints a page, he immediately moves to the next document in sequence. If he finishes printing all pages of a document, he moves to the next document and starts printing from it while continuing the sequence. Stepan wants to find out how long it will take to print all the documents. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of documents Stepan needs to print. The second line contains a sequence of n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9), where p_i is the number of pages in the i-th document. The third line contains a single integer m (1 ≤ m ≤ 1000) — the number of pages the printer can print per minute. -----Output----- Print the number of minutes needed to print all the documents. -----Examples----- Input 3 3 3 3 2 Output 5 Input 5 5 4 5 4 4 3 Output 8 -----Note----- In the first test case, the printer starts printing: - Minute 1: 2 pages from document 1 (1 page left) - Minute 2: 1 page from document 1 (0 pages left), moves to document 2, prints 1 page (2 pages left) - Minute 3: 2 pages from document 2 (0 pages left) - Minute 4: 2 pages from document 3 (1 page left) - Minute 5: 1 page from document 3 (0 pages left) Total time = 5 minutes. In the second test case, the printer starts printing: - Minute 1: 3 pages from document 1 (2 pages left) - Minute 2: 2 pages from document 1 (0 pages left), moves to document 2, prints 1 page (3 pages left) - Minute 3: 3 pages from document 2 (0 pages left) - Minute 4: 3 pages from document 3 (2 pages left) - Minute 5: 2 pages from document 3 (0 pages left), moves to document 4, prints 1 page (3 pages left) - Minute 6: 3 pages from document 4 (0 pages left) - Minute 7: 3 pages from document 5 (1 page left) - Minute 8: 1 page from document 5 (0 pages left) Total time = 8 minutes.","solution":"def total_printing_time(n, pages, m): Calculates the number of minutes needed to print all documents. :param n: int, number of documents :param pages: list of int, number of pages in each document :param m: int, number of pages the printer can print per minute :return: int, number of minutes needed to print all documents total_pages = sum(pages) total_minutes = (total_pages + m - 1) // m # Using ceiling division return total_minutes"},{"question":"You are given a string s consisting of lowercase English letters, and q queries on it. Each query is denoted by two integers l_i and r_i. For each query, you have to determine the length of the longest substring that contains no more than k distinct characters in the substring of s from index l_i to index r_i (inclusive, 1-based). For example, if s = \\"abcba\\" and k = 2, then for query (l_i = 1, r_i = 3) the substring we are interested in is \\"abc\\", and the longest substring that contains no more than 2 distinct characters is \\"ab\\" (or \\"bc\\"), with length 2; for query (l_i = 2, r_i = 5) the substring we are interested in is \\"bcba\\", and the longest substring that contains no more than 2 distinct characters is \\"bcb\\", with length 3. Can you answer all of the queries? Input The first line contains a string s (1 ≤ |s| ≤ 10^5). The second line contains one integer k (1 ≤ k ≤ 26). The third line contains one integer q (1 ≤ q ≤ 10^5). Then q lines follow, each containing two integers l_i and r_i representing the i-th query (1 ≤ l_i ≤ r_i ≤ |s|). Output For each query, print the length of the longest substring that contains no more than k distinct characters. Example Input abcba 2 2 1 3 2 5 Output 2 3","solution":"def longest_substring_k_distinct(s, k, queries): from collections import defaultdict def get_max_len_substring(left, right): char_count = defaultdict(int) max_len = 0 distinct_chars = 0 start = left for end in range(left, right + 1): if char_count[s[end]] == 0: distinct_chars += 1 char_count[s[end]] += 1 while distinct_chars > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: distinct_chars -= 1 start += 1 max_len = max(max_len, end - start + 1) return max_len results = [] for left, right in queries: # Convert 1-based to 0-based indexing results.append(get_max_len_substring(left - 1, right - 1)) return results"},{"question":"A city consists of n buildings connected by m bidirectional roads. The city is designed such that it is possible to travel between any two buildings using one or more roads. However, due to maintenance, roads may get blocked which might disconnect the city. A blocked road is considered critical if its removal results in increasing the number of disconnected groups of buildings in the city. Your task is to identify all the critical roads in the city. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5) — the number of buildings and roads, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — describing a road between building u and building v. It is guaranteed that no two roads connect the same pair of buildings. Output Print all the critical roads, one per line. Each road should be printed as a pair of integers u and v, sorted in increasing order. If there are no critical roads, print \\"None\\". Examples Input 5 5 1 2 1 3 2 3 3 4 4 5 Output 3 4 4 5 Input 4 4 1 2 2 3 3 4 4 1 Output None Note In the first sample, removing the road between buildings 3 and 4 or 4 and 5 would disconnect the city into multiple disconnected groups. Thus, these roads are critical. In the second sample, removing any road does not disconnect the city, hence there are no critical roads.","solution":"def find_critical_roads(n, m, edges): from collections import defaultdict, deque def dfs(node, parent): nonlocal time visited[node] = True ids[node] = low[node] = time time += 1 for neighbor in graph[node]: if neighbor == parent: continue if not visited[neighbor]: dfs(neighbor, node) low[node] = min(low[node], low[neighbor]) if ids[node] < low[neighbor]: critical_edges.append(tuple(sorted((node, neighbor)))) else: low[node] = min(low[node], ids[neighbor]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) ids = [0] * (n + 1) low = [0] * (n + 1) critical_edges = [] time = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, -1) if critical_edges: critical_edges.sort() return critical_edges else: return [\\"None\\"] # Function to parse input and output result def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) m = int(data[idx + 1]) idx += 2 edges = [] for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 result = find_critical_roads(n, m, edges) for edge in result: print(*edge) if __name__ == \\"__main__\\": main()"},{"question":"Implement a function that takes a list of strings and returns a new list with all the strings that are palindromes. A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and case. ```python def find_palindromes(words): # Your code here # Examples: print(find_palindromes([\'racecar\', \'hello\', \'A Santa at NASA\', \'No lemon, no melon\'])) # Output: [\'racecar\', \'A Santa at NASA\', \'No lemon, no melon\'] print(find_palindromes([\'palindrome\', \'civic\', \'level\', \'world\'])) # Output: [\'civic\', \'level\'] ``` Write the function `find_palindromes` which filters out and returns only the palindromic strings from the input list.","solution":"def is_palindrome(s): Helper function to check if a given string s is a palindrome # Remove non-alphanumeric characters and convert to lowercase normalized_s = \'\'.join(char.lower() for char in s if char.isalnum()) return normalized_s == normalized_s[::-1] def find_palindromes(words): Returns a list of strings from the input list that are palindromes. return [word for word in words if is_palindrome(word)]"},{"question":"You are given a string S consisting of lowercase alphabets. Your task is to arrange the characters of the string in such a way that no two adjacent characters are the same. If such an arrangement is not possible, return \\"No\\". Otherwise, return any possible arrangement. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input which contains the string S. ------ Output Format ------ For each test case, print on a new line the answer: \\"No\\" if it is not possible to rearrange the string such that no two adjacent characters are the same, otherwise, print any possible valid arrangement. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} ----- Sample Input 1 ------ 3 aab aaab abc ----- Sample Output 1 ------ aba No abc ----- explanation 1 ------ Test case 1: One of the possible arrangements is \\"aba\\". Test case 2: It is not possible to arrange the string such that no two adjacent characters are the same. Test case 3: One of the possible arrangements is \\"abc\\".","solution":"from collections import Counter import heapq def rearrange_string(s): freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # Decrement the count (since count is negative) rearranged_str = \'\'.join(result) if len(rearranged_str) != len(s): return \\"No\\" return rearranged_str def solve(test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Given an array `A[]` of `N` integers and an integer `K`. The task is to find the maximum number of distinct integers among all possible contiguous subarrays of size `K`. Example 1: Input: N = 7, K = 3 A[] = {4, 1, 1, 3, 1, 4, 2} Output: 3 Explanation: The subarrays of size 3 are [4, 1, 1], [1, 1, 3], [1, 3, 1], [3, 1, 4], [1, 4, 2]. The maximum number of distinct integers among these subarrays is 3 in the subarray [3, 1, 4]. Example 2: Input: N = 5, K = 2 A[] = {1, 2, 1, 2, 3} Output: 2 Explanation: The subarrays of size 2 are [1, 2], [2, 1], [1, 2], [2, 3]. The maximum number of distinct integers among these subarrays is 2. Your Task: You don\'t need to read input or print anything. Complete the function `maxDistinctSubarray` which takes the integer `N`, the array `A[]`, and the integer `K` as input parameters and returns the maximum number of distinct integers among all possible contiguous subarrays of size `K`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 1 ≤ K ≤ N","solution":"def maxDistinctSubarray(N, A, K): Returns the maximum number of distinct integers among all possible contiguous subarrays of size K. if K > N: return 0 max_distinct = 0 freq = {} distinct_count = 0 # Initialize the first window\'s frequency dictionary for i in range(K): if A[i] not in freq: freq[A[i]] = 0 distinct_count += 1 freq[A[i]] += 1 max_distinct = max(max_distinct, distinct_count) for i in range(K, N): # Remove the first element of the previous window start_element = A[i - K] if freq[start_element] == 1: distinct_count -= 1 freq[start_element] -= 1 if freq[start_element] == 0: del freq[start_element] # Add the new element end_element = A[i] if end_element not in freq: freq[end_element] = 0 distinct_count += 1 freq[end_element] += 1 max_distinct = max(max_distinct, distinct_count) return max_distinct"},{"question":"Alexandra is fond of playing a numerical version of the classic \\"Whack-a-Mole\\" game called \\"Whack-a-Number\\". In this game, a series of numerical targets appear on the screen, and she must hit them in a specific order to maximize her score. The game consists of `n` targets, each assigned a value represented by an array `A`. Alexandra can hit a target only if it is the next required in a sequence of hits starting from the smallest possible value and progressively increasing by 1 each time. Initially, a specific value `k` is given as the starting point, which means Alexandra must hit the sequence starting from `k`, then `k+1`, then `k+2`, and so on, until the end of the sequence can no longer be found in the array. Your task is to determine the maximum number of consecutive targets Alexandra can hit starting from the given value `k`. -----Input----- - The first line contains an integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. - The first line of each test case contains an integer `n` (`1 ≤ n ≤ 10^5`) — the number of targets. - The next line contains `n` space-separated integers `A1, A2, ..., An` (`1 ≤ Ai ≤ 10^9`) — the value of each target. - The last line of each test case contains an integer `k` (`1 ≤ k ≤ 10^9`) — the starting value. -----Output----- For each test case, print a single integer indicating the maximum number of consecutive targets Alexandra can hit starting from the value `k`. -----Examples----- Input 3 5 1 2 3 4 5 1 6 3 4 5 6 7 8 4 4 10 11 12 13 9 Output 5 5 0 -----Note----- In the first test case, Alexandra can hit targets in the order `1, 2, 3, 4, 5` starting from `1`. In the second test case, Alexandra can hit targets in the order `4, 5, 6, 7, 8` starting from `4`. In the third test case, Alexandra cannot hit any target starting from `9` as value `9` is not in the array.","solution":"def consecutive_targets_hit(t, cases): results = [] for i in range(t): n = cases[i][0] A = cases[i][1] k = cases[i][2] # Convert A to a set for fast lookup target_set = set(A) # Initialize the number of hits hits = 0 # Start hitting from the given k while k in target_set: hits += 1 k += 1 # Append the result for this test case results.append(hits) return results"},{"question":"You are given a string that represents an encoded message. The message is encoded where \'A\' starts at 1, \'B\' is 2, ..., and \'Z\' is 26. You are tasked with counting how many different ways the message can be decoded. Assume that the input is always valid. Example: encoded_message = \\"12\\" There are 2 possible decodings: \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Therefore, the output is 2. Another example: encoded_message = \\"226\\" There are 3 possible decodings: \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Therefore, the output is 3. Additional constraints: - Your solution should handle an empty string input, which should result in zero ways to decode. Considerations: - A leading zero in the string should make the entire encoding invalid, thus resulting in zero ways to decode. - Multiple zeros in sequence after a number make part of the encoding invalid (e.g., \\"100\\"). Your task is to implement a function that takes in the encoded message as a string and returns the number of different possible decodings.","solution":"def num_decodings(s: str) -> int: Return the number of ways to decode the encoded message. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[n]"},{"question":"Ram is working on a project that involves analyzing Fibonacci sequences. For his project, he needs to generate the Fibonacci sequence up to a certain number and sum the even-valued terms. Unfortunately, Ram\'s busy schedule prevents him from coding it himself, and he has approached you for help. Write a program that takes an integer `n` and outputs the sum of all even-valued terms in the Fibonacci sequence that are less than or equal to `n`. -----Input----- The input contains a single integer n (1 ≤ n ≤ 10^18). -----Output----- Print the sum of all even-valued Fibonacci sequence terms that are less than or equal to n. -----Examples----- Input 10 Output 10 Input 100 Output 44 -----Explanation----- In the first example: The Fibonacci sequence up to 10 is 0, 1, 1, 2, 3, 5, 8. The even-valued terms are 0, 2, and 8. The sum of these terms is 10. In the second example: The Fibonacci sequence up to 100 is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89. The even-valued terms are 0, 2, 8, and 34. The sum of these terms is 44.","solution":"def sum_even_fibonacci(n): Returns the sum of all even-valued terms in the Fibonacci sequence that are less than or equal to n. a, b = 0, 1 even_sum = 0 while a <= n: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Minimum Difference Pair Given an array of integers, find two elements in the array such that their difference is closest to a given target value. You need to return the absolute difference of these two elements. Input The input consists of multiple test cases. Each test case starts with an integer n (2 ≤ n ≤ 1000) which represents the size of the array, and is followed by n integers representing the elements of the array. The last input line contains a single integer t which represents the target value. The end of input is indicated by a line containing zero. Output For each test case, output a single integer which is the absolute difference of the two elements in the array closest to the target value. Sample Input 5 1 3 15 11 2 5 4 19 10 7 12 3 0 Sample Output 4 1 Explanation In the first test case: - The array is [1, 3, 15, 11, 2] and the target value is 5. - The element pairs and their absolute differences are: - (1, 3) with a difference of 2 - (1, 15) with a difference of 14 - (1, 11) with a difference of 10 - (1, 2) with a difference of 1 - (3, 15) with a difference of 12 - (3, 11) with a difference of 8 - (3, 2) with a difference of 1 - (15, 11) with a difference of 4 - The pair (15, 11) has an absolute difference closest to 5 with a difference of 4. So, the output is 4. In the second test case: - The array is [19, 10, 7, 12] and the target value is 3. - The element pairs and their absolute differences are: - (19, 10) with a difference of 9 - (19, 7) with a difference of 12 - (19, 12) with a difference of 7 - (10, 7) with a difference of 3 - (10, 12) with a difference of 2 - (7, 12) with a difference of 5 - The pair (10, 7) has an absolute difference closest to 3 with a difference of 3. So, the output is 3.","solution":"def minimum_difference_pair(arrays, target): results = [] for array in arrays: n = array[0] elements = array[1:] min_diff = float(\'inf\') for i in range(n): for j in range(i + 1, n): diff = abs(elements[i] - elements[j]) if abs(diff - target) < abs(min_diff - target): min_diff = diff results.append(min_diff) return results"},{"question":"In a magical land, there are N towns and M magical paths that connect them. Each path has a magical cost associated with it. The towns\' mayor wants to ensure that all towns are connected with the minimum total magical cost, and they need your help to determine this. Given the number of towns and magical paths, and the cost of each path, find the minimum total magical cost to connect all towns. If it is not possible to connect all towns, return -1. -----Input----- - The first line contains T, the number of test cases. - For each test case: - The first line contains two integers N and M, the number of towns and the number of magical paths. - The next M lines each contain three integers u, v, and w, representing a magical path between towns u and v with cost w. -----Output----- - For each test case, output a single integer, the minimum total magical cost to connect all towns, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 1000 -----Example----- Input: 2 4 5 1 2 4 1 3 3 2 3 2 2 4 7 3 4 1 3 1 1 2 5 2 3 10 1 3 8 Output: 10 13 -----Explanation----- Example case 1. The optimal way to connect all towns is: - Connect town 1 to town 3 with cost 3. - Connect town 2 to town 3 with cost 2. - Connect town 3 to town 4 with cost 1. The total minimum cost is 3 + 2 + 1 = 6. Example case 2. The optimal way to connect all towns is: - Connect town 1 to town 2 with cost 5. - Connect town 2 to town 3 with cost 8. The total minimum cost is 5 + 8 = 13.","solution":"def find_minimum_cost_to_connect_towns(T, data): from heapq import heappop, heappush import sys def prim(graph, N): # If there are no nodes, no cost is needed. if N == 0: return 0 total_cost = 0 visited = [False] * (N + 1) min_heap = [(0, 1)] # Start with node 1 and 0 cost num_visited = 0 while min_heap and num_visited < N: cost, u = heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost num_visited += 1 for v, w in graph[u]: if not visited[v]: heappush(min_heap, (w, v)) return total_cost if num_visited == N else -1 results = [] for case in data: N, M, paths = case graph = [[] for _ in range(N + 1)] for u, v, w in paths: graph[u].append((v, w)) graph[v].append((u, w)) total_cost = prim(graph, N) results.append(total_cost) return results"},{"question":"Emily is trying to decorate a Christmas tree using N strings of lights. Each of the strings is of different length. Emily wants to create a beautiful pattern with the lights by arranging them in a straight line in ascending order of their lengths. However, due to a manufacturing defect, some of the lights\' lengths might be repeating in the strings she has. Help Emily to find out the minimal number of contiguous subsequences that each need to be sorted individually for forming the complete sorted sequence of lights. -----Input----- The first line of the input contains a single integer N (1 ≤ N ≤ 1000), the number of strings of lights. The second line contains N space-separated integers a1, a2, ..., aN denoting the lengths of the strings of lights (1 ≤ ai ≤ 10^6). -----Output----- The output should be a single integer, the minimal number of contiguous subsequences that need to be sorted individually for the entire sequence of lights to be sorted. -----Example----- Input 7 5 2 3 6 7 2 8 Output 3 -----Explanation----- In the example, one way to partition the array into contiguous subsequences is: [5, 2, 3], [6, 7, 2], [8]. Each subsequence can then be sorted individually before combining them into the final sorted sequence.","solution":"def min_subsequences_to_sort(N, lengths): This function returns the minimal number of contiguous subsequences that need to be sorted individually for the entire sequence to be sorted. if N <= 1: return 1 subsequences = 1 for i in range(1, N): if lengths[i] < lengths[i - 1]: subsequences += 1 return subsequences"},{"question":"In a secluded village, there is a map consisting of N houses connected by M bidirectional roads. Each road has a certain toll associated with it. The villagers want to ensure that their village is well connected in such a way that the total toll cost is minimized. As an expert in algorithms, help the villagers to find the Minimum Toll Cost required to connect all houses. The given map is represented as an undirected graph where each house is a node and each road is an edge with a specific toll cost. Use Kruskal\'s algorithm to find the minimum spanning tree that will connect all houses with the minimal toll cost. Example 1: Input: N = 4, M = 5 roads = [[1, 2, 5], [1, 3, 10], [2, 3, 7], [2, 4, 4], [3, 4, 3]] Output: 12 Explanation: The minimum toll cost to connect all houses (nodes) is 12. The selected roads are (3, 4), (2, 4), and (1, 2). Example 2: Input: N = 3, M = 3 roads = [[1, 2, 2], [2, 3, 3], [1, 3, 4]] Output: 5 Explanation: The minimum toll cost to connect all houses (nodes) is 5. The selected roads are (1, 2) and (2, 3). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minTollCost()` which takes the number of houses N, the number of roads M, and the list of roads with their toll costs as input parameters and returns the minimum toll cost to connect all houses. Constraints: 1 ≤ N ≤ 10^4 1 ≤ M ≤ 5*10^4 1 ≤ toll cost ≤ 10^4","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minTollCost(N, M, roads): roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(N+1): parent.append(node) rank.append(0) minimum_toll_cost = 0 edges_used = 0 for road in roads: if edges_used == N - 1: break u, v, toll = road root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: minimum_toll_cost += toll edges_used += 1 union(parent, rank, root_u, root_v) return minimum_toll_cost"},{"question":"A newly discovered programming language has a unique way of representing strings. Any string in this language consists of concatenated substrings where each substring is wrapped with a specific start and end character. The start character is always \'[\' and the end character is always \']\'. Write a program to extract and concatenate all substrings from the given string while removing any duplicates. The extracted substrings should maintain their order of first appearance. Constraint: The input string is always valid and contains at least one substring. 0 < |s| ≤ 100 SAMPLE INPUT \\"[abc][def][ghi][abc][ghi]\\" SAMPLE OUTPUT abcdefghi","solution":"def extract_and_concatenate_substrings(s): Extracts and concatenates all substrings from the given string while removing any duplicates. The extracted substrings maintain their order of first appearance. seen = set() result = [] n = len(s) i = 0 while i < n: if s[i] == \'[\': j = i + 1 while j < n and s[j] != \']\': j += 1 substring = s[i+1:j] if substring not in seen: seen.add(substring) result.append(substring) i = j i += 1 return \'\'.join(result)"},{"question":"In this problem, you will implement an algorithm to compute the Luhn checksum for validating credit card numbers. The Luhn algorithm is a simple, widely-used method to detect errors in credit card numbers and other identification numbers. The algorithm follows these steps: 1. From the rightmost digit (excluding the check digit), which is the last digit, moving left, double the value of every second digit. If the result of this doubling operation is greater than 9, then subtract 9 from the product. 2. Sum the digits of the resulting numbers along with the digits that were not doubled. 3. The check digit (which is the rightmost digit initially) is the amount you need to add to this sum to make it a multiple of 10. The input credit card number is provided as a string of digits without any spaces or other delimiters, and the output should simply be \\"Valid\\" or \\"Invalid\\" based on whether the number adheres to the Luhn algorithm. Input The input consists of a single string representing the credit card number. The string\'s length is between 13 and 19 characters inclusive, and it contains only numerical digits. Output Output either \\"Valid\\" if the credit card number passes the Luhn checksum, or \\"Invalid\\" otherwise. Example Input 4532015112830366 Output Valid Explanation The rightmost digit, \'6\', is not included in the calculation at first. Doubling every second digit from the right: 6, 3 (2*3=6), 0, 3 (2*3=6), 8, 1 (2*5=10, 10-9=1), 1, (4*2=8), 6, 3, 8, 3, 5, 3, 7 (4*1=8), 4 Summing these results: 6 + 6 + 0 + 6 + 8 + 1 + 1 + 8 + 6 + 3 + 8 + 3 + 5 + 3 + 3 + 4 = 71 Adding back the check digit: 71 + 6 = 77 Since 77 is not a multiple of 10, the output is \\"Invalid\\". However, in the initial example, the example credit card number is incorrect intentionally (results determined as valid for illustration). Repeat the example input as needed to determine answer accurately to ensure understanding of the Luhn Algorithm, e.g. 4532015112830367 upon running correctly exchanges previous invalid example for illustration from above correctly.","solution":"def luhn_check(card_number): Validate a credit card number using the Luhn algorithm. Args: card_number (str): The credit card number as a string. Returns: str: \\"Valid\\" if the card number is valid according to the Luhn algorithm, \\"Invalid\\" otherwise. def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) checksum = 0 # Process the digits from the rightmost side, but skip the last digit initially for i in range(len(digits) - 1): if i % 2 == 0: # Doubling every second digit from the right where i starts from 0 (actually the second-to-last digit) doubled = digits[-2-i] * 2 if doubled > 9: doubled -= 9 checksum += doubled else: # Add digits which were not doubled checksum += digits[-2-i] checksum += digits[-1] # Add the check digit # Check if the total is a multiple of 10 if checksum % 10 == 0: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"A sequence of numbers is called a \\"wiggle sequence\\" if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence. For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) are alternately positive and negative. In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero. Given a sequence of integers, determine if it is a wiggle sequence. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the sequence. The second line contains n space-separated integers representing the elements of the sequence. Output Print \\"YES\\" if the sequence is a wiggle sequence, otherwise print \\"NO\\". Examples Input 6 1 7 4 9 2 5 Output YES Input 5 1 4 7 2 5 Output NO Input 3 1 7 4 Output YES Note In the first example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences between successive numbers alternate in sign. In the second example, [1, 4, 7, 2, 5] is not a wiggle sequence because the first two differences (3, 3) are both positive. In the third example, [1, 7, 4] is a wiggle sequence because the differences (6, -3) are alternately positive and negative.","solution":"def is_wiggle_sequence(n, sequence): Determines if the given sequence is a wiggle sequence. Parameters: n (int): number of elements in the sequence sequence (list of int): the sequence of elements Returns: str: \\"YES\\" if the sequence is a wiggle sequence, \\"NO\\" otherwise if n < 2: return \\"YES\\" diffs = [] for i in range(1, n): diff = sequence[i] - sequence[i - 1] if diff != 0: diffs.append(diff) if len(diffs) == 0: return \\"NO\\" for i in range(1, len(diffs)): if diffs[i] * diffs[i - 1] >= 0: return \\"NO\\" return \\"YES\\""},{"question":"Given a grid of size N x M, where each cell in the grid is either a wall represented by \'#\' or an empty space represented by \'.\', find the length of the shortest path from the top-left cell (grid[0][0]) to the bottom-right cell (grid[N-1][M-1]). You can move left, right, up, or down from a cell. If there is no valid path, return -1. Example 1: ``` Input: N = 4, M = 4 grid = [ [\'.\', \'.\', \'.\', \'#\'], [\'#\', \'#\', \'.\', \'#\'], [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'#\', \'#\', \'.\'] ] Output: 6 Explanation: The shortest path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3). The length of the path is 6. ``` Example 2: ``` Input: N = 3, M = 3 grid = [ [\'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\'], [\'#\', \'#\', \'.\'] ] Output: -1 Explanation: There is no valid path from top-left to bottom-right. ``` Your Task: Complete the function `shortestPath()` which takes the grid dimensions N and M and the 2D list of characters grid as input and returns the length of the shortest path from the top-left cell to the bottom-right cell. If no such path exists, return -1. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: - 1 ≤ N, M ≤ 100 - The grid cells are either \'.\' or \'#\'.","solution":"from collections import deque def shortestPath(N, M, grid): Returns the length of the shortest path from the top-left to the bottom-right cell in the grid. If there is no valid path, returns -1. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param grid: List[List[str]], representation of the grid :return: int, length of the shortest path or -1 if no path exists if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # stores (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Problem G: Robo Walker Robo Walker is a robot designed to perform movements in a grid-like space. The grid is of size NxM, where N is the number of rows and M is the number of columns. The robot can start from any cell and must visit a set of specific cells which are defined as checkpoints. The robot can move in four directions: up, down, left, and right. It cannot traverse through the same cell more than once, except for the starting cell. Your task is to write a program that determines if there exists a path that visits all these checkpoints exactly once in any order. The robot can traverse over other cells as a part of its path but must visit every checkpoint exactly once. Input The input starts with an integer T (1 <= T <= 10), the number of test cases. For each test case: First line contains two integers N and M (2 <= N, M <= 20) representing the grid dimensions. The next line contains an integer P (1 <= P <= 10), the number of checkpoints. Following P lines each contain two integers xi and yi (0 <= xi < N, 0 <= yi < M), the coordinates of each checkpoint. Output For each test case, output \\"YES\\" if there exists a valid path that visits all checkpoints exactly once, otherwise output \\"NO\\". Example Input 2 4 4 2 0 1 2 3 5 5 3 0 0 4 4 2 2 Output YES YES Explanation: In the first test case, the robot can start from cell (0, 1), visit (0,1) -> (2,3), or start from cell (2, 3), visit (2,3) -> (0, 1), and there exists a valid path for the robot. In the second test case, the robot can start from any checkpoint and visit all checkpoints exactly once. For instance, (0,0) -> (2,2) -> (4,4) or any other combination.","solution":"def find_valid_path(n, m, checkpoints): from itertools import permutations def is_valid_path(path): visited = set() for x, y in path: if (x, y) in visited: return False visited.add((x, y)) return True for perm in permutations(checkpoints): if is_valid_path(perm): return \\"YES\\" return \\"NO\\" def robo_walker(t, test_cases): result = [] for i in range(t): n, m, p, checkpoints = test_cases[i] result.append(find_valid_path(n, m, checkpoints)) return result"},{"question":"You are given a string containing letters and digits. Write a function that rearranges the characters so that all the letters appear before any digits. Furthermore, the letters should be sorted in alphabetical order and the digits should be sorted in ascending order. Return the transformed string. For example: ```python rearrange_string(\\"a3b7c2d1\\") returns \\"abcd1237\\" rearrange_string(\\"x4y5z6a2b1\\") returns \\"abxyz12456\\" ``` Implement a function that performs the rearrangement: ```python def rearrange_string(s: str) -> str: # Your code here ```","solution":"def rearrange_string(s: str) -> str: Rearranges the input string such that all letters come before digits. Letters are sorted in alphabetical order and digits are sorted in ascending order. :param s: Input string containing letters and digits :return: Transformed string with sorted letters followed by sorted digits letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"Create a function that takes a string representing a mathematical expression involving addition, subtraction, multiplication, and division. The function should evaluate the expression and return the result. The expression can include integers, operators (`+`, `-`, `*`, `/`), and spaces. The expression will be valid and should be evaluated using standard operator precedence. Examples ```python evaluate_expression(\\"3 + 5 * 2\\") ==> 13 evaluate_expression(\\"10 + 2 * 6\\") ==> 22 evaluate_expression(\\"100 * 2 + 12\\") ==> 212 evaluate_expression(\\"100 * ( 2 + 12 )\\") ==> 1400 evaluate_expression(\\"100 * ( 2 + 12 ) / 14\\") ==> 100 ```","solution":"import re def evaluate_expression(expression): Evaluates a mathematical expression involving addition, subtraction, multiplication, and division. The expression can include integers, operators (`+`, `-`, `*`, `/`), and spaces. It follows standard operator precedence rules. # Removing spaces from the expression for easier processing expression = expression.replace(\' \', \'\') # Using Python\'s eval function to evaluate the expression # since it naturally respects operator precedence and parentheses try: result = eval(expression) except Exception as e: raise ValueError(\\"Invalid expression: \\" + str(e)) return result"},{"question":"Alyssa loves to organize her books in alphabetical order to make it easier to find them. However, she has a habit of quickly putting away her books without following any particular order, creating a mess. Every weekend, she dedicates time to reorganize her bookshelf. Alyssa has asked you to help her with an efficient algorithm to sort her bookshelf. She only remembers the titles of her books and can list them in the order they currently are on the shelf. Your task is to sort the list of book titles in alphabetical order. Write a function that takes in a list of book titles and returns a sorted list of those titles in alphabetical order. No two book titles are the same. # Input - A single test case containing a list of strings `titles`, where each string represents the title of a book. # Output - A list of strings representing the titles sorted alphabetically. # Example Input ```python [\\"The Great Gatsby\\", \\"To Kill a Mockingbird\\", \\"1984\\", \\"Pride and Prejudice\\", \\"Jane Eyre\\"] ``` Output ```python [\\"1984\\", \\"Jane Eyre\\", \\"Pride and Prejudice\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\"] ``` # Constraints - The number of titles ( n ) is such that ( 1 leq n leq 10^5 ). - Each title is a string of length up to 100 characters. - Titles consist of uppercase and lowercase letters, digits, and spaces. # Note Your solution should be efficient and able to handle the maximum constraints without performance issues.","solution":"def sort_titles(titles): Returns a list of book titles sorted in alphabetical order. Args: titles (list): List of book titles (strings) Returns: list: List of book titles sorted alphabetically return sorted(titles)"},{"question":"A company is planning to organize a team-building event for their employees. As part of the event, they have decided to include a treasure hunt. The treasure hunt involves solving a series of puzzles that lead to the final prize. The organization wants to ensure that the event is both engaging and challenging, so they have designed a maze with various rooms connected by corridors. Each room in the maze is represented as a node, and each corridor between rooms is represented as an edge. The goal is to find the shortest path from the starting room (node) to the treasure room (target node). You are given the maze in the form of a graph with nodes and edges. Your task is to write a program that determines the shortest path from the starting node to the target node. If there is no path, the program should return -1. Input 1. The first line contains two integers n and m (2 ≤ n ≤ 5000, 1 ≤ m ≤ 20000) representing the number of rooms (nodes) and corridors (edges) in the maze, respectively. 2. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting that there is a corridor between room u and room v. 3. The last line contains two integers s and t (1 ≤ s, t ≤ n), representing the starting room and the treasure room, respectively. Output Print a single line containing the length of the shortest path from room s to room t. If there is no such path, print -1. Examples Input 6 7 1 2 1 3 2 4 3 4 4 5 5 6 4 6 1 6 Output 3 Input 5 5 1 2 2 3 3 4 4 5 5 1 1 5 Output 1 Note In the first example, the shortest path from room 1 to room 6 is 1 -> 3 -> 4 -> 6, which has a length of 3. In the second example, the shortest path from room 1 to room 5 is directly through the corridor connecting them, which has a length of 1.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges, s, t): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) queue = deque([s]) distances = {s: 0} while queue: node = queue.popleft() if node == t: return distances[node] for neighbor in graph[node]: if neighbor not in distances: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return -1"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped at different sections, compute how much water can be trapped after filling it. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Constraints: * The length of the list is between 1 and 2 * 10^4. * Each element is a non-negative integer less than or equal to 10^5.","solution":"def trap(height): Returns the amount of rainwater trapped. if not height: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) water_trapped += right_max - height[right] return water_trapped"},{"question":"You are tasked with developing a system to manage a library\'s collection of books. The library has limited resources and shelves, so it needs to efficiently organize and categorize books to make it easier for librarians to locate and manage them. The library system should allow for adding books, categorizing them by genre, and sorting them by author’s name. Your task is to create a program that handles the addition, categorization, and basic querying of books in such a system. # Input The input consists of several commands. Each command is on a separate line and follows one of the following formats: 1. **ADD BookID Title Author Genre** - Adds a new book with the given `BookID`, `Title`, `Author`, and `Genre`. - The `BookID` is a unique integer. - The `Title`, `Author`, and `Genre` are strings without spaces (use underscores for spaces). 2. **LIST BY AUTHOR** - Lists all books, sorted alphabetically by the `Author` name. 3. **LIST BY GENRE Genre** - Lists all books in the specified `Genre`, sorted alphabetically by the `Author` name. 4. **EXIT** - Ends the input. You may assume that the number of books does not exceed 10,000, the number of genres does not exceed 100, and the length of titles, authors, and genres do not exceed 100 characters. # Output The output should match the requirement of each command: 1. After an `ADD` command, there is no output. 2. For a `LIST BY AUTHOR` command, output each book on a new line in the format `BookID Title Author Genre`. 3. For a `LIST BY GENRE Genre` command, output each book in the specified genre on a new line in the format `BookID Title Author Genre`. 4. No output is required after the `EXIT` command. # Example **Input** ``` ADD 1 The_Hobbit J.R.R._Tolkien Fantasy ADD 2 1984 George_Orwell Dystopian ADD 3 Brave_New_World Aldous_Huxley Dystopian ADD 4 The_Lord_of_the_Rings J.R.R._Tolkien Fantasy LIST BY AUTHOR LIST BY GENRE Dystopian EXIT ``` **Output** ``` 2 1984 George_Orwell Dystopian 3 Brave_New_World Aldous_Huxley Dystopian 1 The_Hobbit J.R.R._Tolkien Fantasy 4 The_Lord_of_the_Rings J.R.R._Tolkien Fantasy 2 1984 George_Orwell Dystopian 3 Brave_New_World Aldous_Huxley Dystopian ``` The goal of this problem is to evaluate your ability to handle data structures, sorting, and string manipulation efficiently.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, book_id, title, author, genre): self.books.append((book_id, title, author, genre)) def list_by_author(self): return sorted(self.books, key=lambda x: x[2]) def list_by_genre(self, genre): return sorted([book for book in self.books if book[3] == genre], key=lambda x: x[2]) def execute_commands(commands): library = Library() output = [] for command in commands: parts = command.split() action = parts[0] if action == \\"ADD\\": book_id = int(parts[1]) title = parts[2] author = parts[3] genre = parts[4] library.add_book(book_id, title, author, genre) elif action == \\"LIST\\" and parts[1] == \\"BY\\" and parts[2] == \\"AUTHOR\\": books = library.list_by_author() for book in books: output.append(f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\") elif action == \\"LIST\\" and parts[1] == \\"BY\\" and parts[2] == \\"GENRE\\": genre = parts[3] books = library.list_by_genre(genre) for book in books: output.append(f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\") elif action == \\"EXIT\\": break return output"},{"question":"Given a list of strings, determine if each string can be segmented into words from a given dictionary of words. Your task is to implement the `WordBreaker` class, which should include the following methods: 1. `WordBreaker(dictionary: List[str])` - Initializes the object with a given dictionary of valid words. 2. `canSegment(string: str) -> bool` - Returns `true` if the string can be segmented into valid words defined in the dictionary, and `false` otherwise. **Examples:** ```python # Example 1 Input: dictionary = [\\"apple\\", \\"pen\\"] wordBreaker = WordBreaker(dictionary) print(wordBreaker.canSegment(\\"applepenapple\\")) # returns True # Explanation: The string can be segmented as \\"apple pen apple\\". # Example 2 Input: dictionary = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] wordBreaker = WordBreaker(dictionary) print(wordBreaker.canSegment(\\"catsandog\\")) # returns False # Explanation: The string cannot be fully segmented into valid words from the dictionary. # Example 3 Input: dictionary = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] wordBreaker = WordBreaker(dictionary) print(wordBreaker.canSegment(\\"catsanddog\\")) # returns True # Explanation: The string can be segmented as \\"cats and dog\\". # Example 4 Input: dictionary = [\\"bed\\", \\"bath\\", \\"bedbath\\", \\"and\\", \\"beyond\\"] wordBreaker = WordBreaker(dictionary) print(wordBreaker.canSegment(\\"bedbathandbeyond\\")) # returns True # Explanation: The string can be segmented as \\"bed bath and beyond\\" or \\"bedbath and beyond\\". ``` **Constraints:** - The dictionary contains between 1 and 1000 words. - Each word in the dictionary is between 1 and 20 characters long. - The input string can have a length between 1 and 300 characters. - All characters in the dictionary words and input string are lowercase English letters.","solution":"class WordBreaker: def __init__(self, dictionary): self.word_set = set(dictionary) def canSegment(self, string): dp = [False] * (len(string) + 1) dp[0] = True for i in range(1, len(string) + 1): for j in range(i): if dp[j] and string[j:i] in self.word_set: dp[i] = True break return dp[len(string)]"},{"question":"You are given two binary trees, and you need to determine whether they are identical. Two binary trees are considered identical if their structure is the same and the nodes have the same value. Each node in the binary tree has an integer value and can have up to two children: a left child and a right child. Your task is to implement a function that takes the root node of each binary tree as input and returns a boolean value indicating whether the two trees are identical. -----Input----- The input consists of two binary trees. Each tree is provided in the form of a nested dictionary. A null child is represented as `None`. The structure of each node in the dictionary is: ```json { \\"value\\": int, \\"left\\": { ... }, # or `None` if there is no left child \\"right\\": { ... } # or `None` if there is no right child } ``` -----Output----- Return `True` if the two binary trees are identical, and `False` otherwise. -----Examples----- Input ```python tree1 = { \\"value\\": 1, \\"left\\": { \\"value\\": 2, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 3, \\"left\\": { \\"value\\": 4, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 5, \\"left\\": None, \\"right\\": None } } } tree2 = { \\"value\\": 1, \\"left\\": { \\"value\\": 2, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 3, \\"left\\": { \\"value\\": 4, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 5, \\"left\\": None, \\"right\\": None } } } ``` Output ``` True ``` Input ```python tree1 = { \\"value\\": 1, \\"left\\": { \\"value\\": 2, \\"left\\": None, \\"right\\": None }, \\"right\\": None } tree2 = { \\"value\\": 1, \\"left\\": { \\"value\\": 2, \\"left\\": { \\"value\\": 3, \\"left\\": None, \\"right\\": None }, \\"right\\": None }, \\"right\\": None } ``` Output ``` False ``` -----Note----- In the first example, both trees have the same structure and node values, hence the function should return `True`. In the second example, the structure of the left subtree of the root node differs between the two trees, hence the function should return `False`.","solution":"def are_trees_identical(tree1, tree2): Determines if two binary trees are identical. Args: tree1 (dict): The first binary tree. tree2 (dict): The second binary tree. Returns: bool: True if the trees are identical, False otherwise. # If both nodes are None, they are identical if not tree1 and not tree2: return True # If one of them is None or their values are not equal, they are not identical if not tree1 or not tree2 or tree1[\\"value\\"] != tree2[\\"value\\"]: return False # Recursively check the left and right subtrees return (are_trees_identical(tree1[\\"left\\"], tree2[\\"left\\"]) and are_trees_identical(tree1[\\"right\\"], tree2[\\"right\\"]))"},{"question":"You are tasked with writing a function that helps gamers manage the inventory of weapons in their game character\'s arsenal. Each character can only carry a limited number of weapons before becoming over-encumbered. Your function will receive two inputs: 1. A list of current weapons the character is carrying. Each weapon is represented as a string. 2. A list of available new weapons for the character to pick up. Each weapon is represented as a string. 3. The maximum number of weapons the character can carry, an integer `limit`. Your function should return a list of weapons that the character will carry after trying to pick up the new weapons. The character should pick up new weapons in the order provided until the limit is reached. ```python def manage_inventory(current, new_weapons, limit): current: List of strings representing weapons currently carried. new_weapons: List of strings representing new weapons available to pick up. limit: Integer representing the maximum number of weapons the character can carry. Return: List of strings representing the final set of weapons carried. # Implementation here ``` # Examples: `manage_inventory([\\"sword\\", \\"dagger\\"], [\\"bow\\", \\"axe\\"], 3)` should return `[\\"sword\\", \\"dagger\\", \\"bow\\"]` `manage_inventory([\\"sword\\", \\"dagger\\", \\"staff\\"], [\\"bow\\", \\"axe\\"], 4)` should return `[\\"sword\\", \\"dagger\\", \\"staff\\", \\"bow\\"]` `manage_inventory([\\"sword\\"], [\\"bow\\", \\"axe\\", \\"dagger\\"], 2)` should return `[\\"sword\\", \\"bow\\"]` `manage_inventory([\\"sword\\", \\"dagger\\"], [], 5)` should return `[\\"sword\\", \\"dagger\\"]` `manage_inventory([], [\\"bow\\", \\"axe\\", \\"dagger\\"], 0)` should return `[]` # Constraints: 1. The length of `current` and `new_weapons` lists will not exceed 1000. 2. The value of `limit` will be between 0 and 1000 inclusive. 3. Weapon strings will only contain lowercase alphabets and will be between 1 and 20 characters long.","solution":"def manage_inventory(current, new_weapons, limit): Manages the character\'s inventory by adding new weapons up to the specified limit. current: List of strings representing weapons currently carried. new_weapons: List of strings representing new weapons available to pick up. limit: Integer representing the maximum number of weapons the character can carry. Return: List of strings representing the final set of weapons carried. total_weapons = len(current) # Add new weapons until the limit is reached for weapon in new_weapons: if total_weapons < limit: current.append(weapon) total_weapons += 1 else: break return current"},{"question":"Amber has a collection of n unique stamps, and she wants to display them in a special way. The stamps can be arranged in a straight line, and every stamp has a special property: a value that represents how \'beautiful\' it is. She wants to maximize the beauty of visible stamps. However, Amber also wants to ensure no stamp overshadows another stamp. A stamp overshadows another stamp if its beauty value is greater than or equal to the beauty value of the stamps following it in the line. Given the beauty values of the n stamps, Amber must determine the maximum beauty value that can be achieved by correctly arranging the stamps. Note that every stamp value will be unique. # Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of stamps Amber has. The next line contains n integers a_i (1 ≤ a_i ≤ 10^6) — the beauty values of the stamps. # Output Output a single integer, the maximum possible sum of beauty values of the stamps when they are arranged in such a way that no stamp overshadows another. # Example Input ``` 5 3 1 4 2 5 ``` Output ``` 15 ``` Input ``` 3 10 5 15 ``` Output ``` 30 ``` # Note In the first example, all 5 stamps are arranged in increasing order of beauty values. Since 3 < 4 < 5, none of the stamps overshadow the others. Therefore, the total beauty value is 3 + 4 + 5 + 2 + 1 = 15. In the second example, the stamps can be arranged as 10 < 15 < 5, making the total beauty value 10 + 15 + 5 = 30.","solution":"def maximum_beauty(n, beauty_values): This function takes the number of stamps and a list of their beauty values, and returns the maximum beauty value that can be achieved by arranging the stamps in a way that no stamp overshadows another stamp. # Sort the beauty values in ascending order sorted_values = sorted(beauty_values) # Sum the sorted values to get the maximum possible sum return sum(sorted_values)"},{"question":"Given an integer N, write a function to return the N\'th term of the Fibonacci series. The Fibonacci sequence is defined as: Fib(0) = 0, Fib(1) = 1, and Fib(N) = Fib(N-1) + Fib(N-2) for N >= 2. Example 1: Input: N = 5 Output: 5 Explanation: The first six terms of the Fibonacci series are 0, 1, 1, 2, 3, 5. Hence, the 5th term is 5. Example 2: Input: N = 10 Output: 55 Explanation: The first eleven terms of the Fibonacci series are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Hence, the 10th term is 55. Your Task: You don\'t need to read input or print anything. Your task is to complete the function fibonacci() which takes an integer N as input and returns the N\'th term of the Fibonacci series. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 50","solution":"def fibonacci(N): Returns the N\'th term of the Fibonacci series. if N == 0: return 0 elif N == 1: return 1 a, b = 0, 1 for _ in range(2, N+1): a, b = b, a + b return b"},{"question":"In a certain kingdom, the king\'s palace is connected to various towns by a series of roads. There are n towns, and each town is connected to at least one other town via a direct bidirectional road. The towns and roads form a connected undirected graph. The king wants to know the smallest number of roads he needs to block to split the kingdom into two disconnected parts such that it is not possible to travel from one part to the other. This is equivalent to determining the minimum number of edges whose removal would disconnect the graph. You are tasked with writing a program to find this minimum number of roads. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of towns. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating that there is a road between town u and town v. It is guaranteed that the input graph is connected and has exactly n - 1 edges, forming a tree. -----Output----- Print a single integer — the minimum number of roads that need to be blocked to disconnect the kingdom into two parts. -----Examples----- Input 4 1 2 1 3 2 4 Output 1 Input 7 1 2 2 3 3 4 4 5 5 6 6 7 Output 1 -----Note----- In the first example, the graph is a tree and blocking any of the roads will disconnect the kingdom into two parts. Therefore, the minimum number of roads that need to be blocked is 1. In the second example, the graph is a straight line (a path), and blocking any one road will also disconnect the kingdom, thus the minimum number of roads that need to be blocked is 1.","solution":"def min_roads_to_block(n, roads): Given a tree with n nodes (towns) and n-1 edges (roads), this function returns the minimum number of roads whose removal would disconnect the graph. # Since the graph is a tree, removing any single edge will disconnect the graph. return 1"},{"question":"You are given a string s. You are allowed to rearrange the characters of s into any order. Your task is to determine if it is possible to rearrange the characters such that no two adjacent characters are the same. If such a rearrangement is possible, return one possible rearrangement. Otherwise, return an empty string. Input - A single string s (1 ≤ |s| ≤ 10⁵) consisting of lowercase English letters. Output - A single string representing a possible rearrangement with no two adjacent characters being the same. If no such arrangement exists, return an empty string. Examples Input aaabb Output ababa Input aaab Output \\"\\" Input aab Output aba Explanation In the first example, one possible rearrangement is \\"ababa\\". In the second example, no matter how you rearrange the characters, there will always be at least two \'a\'s adjacent to each other. In the third example, one possible rearrangement is \\"aba\\".","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearranges the string s such that no two adjacent characters are the same. If no such arrangement is possible, return an empty string. # Frequency count of characters in the string counter = Counter(s) max_heap = [] # Create a max heap based on character frequencies for char, freq in counter.items(): heappush(max_heap, (-freq, char)) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if max_heap: freq, char = heappop(max_heap) else: return \\"\\" result.append(char) # Since we are using a max heap (using negative frequencies), increment the frequency if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # Because freq is negative, add 1 to decrease frequency return \\"\\".join(result)"},{"question":"Your company, AeroPath, has been developing an application to assist pilots in determining optimal flight paths. The application needs to account for various air traffic constraints and output a safe and efficient route for the pilots. One specific problem that needs solving is determining if a flight plan can avoid a set of restricted zones. Each restricted zone is defined by a circle with a given center and radius. The flight plan is a straight line from a start point to an end point in a 2D plane. For the purposes of this problem, assume all coordinates are in integer units and represent a flat earth model. You need to determine if the straight-line flight path intersects any of the restricted zones. -----Input----- The input begins with a line containing an integer n, the number of restricted zones (1 leq n leq 100). The next n lines each contain three integers, x_i y_i r_i, which represent the x and y coordinates of the center and the radius of the i-th restricted zone (1 leq x_i, y_i leq 100, 1 leq r_i leq 50). The final line contains four integers, x_s y_s x_e y_e, representing the x and y coordinates of the start and end points of the flight path (0 leq x_s, y_s, x_e, y_e leq 100). -----Output----- Output \\"SAFE\\" if the flight path does not intersect any restricted zone. Otherwise, output \\"RESTRICTED\\". -----Examples----- Sample Input: 3 10 10 5 20 20 5 30 30 5 0 0 40 40 Sample Output: RESTRICTED Sample Input: 2 15 15 5 25 25 5 0 0 10 10 Sample Output: SAFE The task is to write a program that reads input data, calculates whether the flight path intersects any restricted zone, and outputs either \\"SAFE\\" or \\"RESTRICTED\\".","solution":"import math def is_intersecting_circle(x1, y1, x2, y2, cx, cy, r): # Translate coordinates so that the circle\'s center is at the origin x1, y1, x2, y2 = x1 - cx, y1 - cy, x2 - cx, y2 - cy dx = x2 - x1 dy = y2 - y1 # Coefficients of the quadratic equation a = dx ** 2 + dy ** 2 b = 2 * (x1 * dx + y1 * dy) c = x1 ** 2 + y1 ** 2 - r ** 2 discriminant = b ** 2 - 4 * a * c if discriminant < 0: return False # Find the roots of the quadratic equation t1 = (-b - math.sqrt(discriminant)) / (2 * a) t2 = (-b + math.sqrt(discriminant)) / (2 * a) # Check if the roots are within the segment if (0 <= t1 <= 1) or (0 <= t2 <= 1): return True return False def flight_path(n, restricted_zones, x_s, y_s, x_e, y_e): for (x_i, y_i, r_i) in restricted_zones: if is_intersecting_circle(x_s, y_s, x_e, y_e, x_i, y_i, r_i): return \\"RESTRICTED\\" return \\"SAFE\\""},{"question":"A group of friends is playing a card game where each player is dealt a hand consisting of several cards. Each card is represented by a positive integer, and the winner of each round is the player with the highest card. However, in the event of a tie (multiple players having the highest card of the same value), none of the players win that round. Your task is to determine the index of the player who wins the round. If no player wins due to a tie, return -1. -----Input----- The input consists of one line: - n (the number of players), followed by n integers representing the cards dealt to each player. -----Output----- Output the index (0-based) of the player who wins the round. If there\'s a tie for the highest card, print -1. -----Constraints----- 1 ≤ n ≤ 100 1 ≤ card value ≤ 1000 -----Sample Input----- 5 2 5 7 3 7 -----Sample Output----- -1 -----Output details----- There are five players, and their cards are [2, 5, 7, 3, 7]. The highest card is 7, but it is present in the hands of two players (index 2 and index 4), resulting in a tie. Therefore, the output is -1.","solution":"def find_winner(n, cards): Determine the index of the player who wins the round. Parameters: n (int): number of players cards (list of int): cards dealt to each player Returns: int: index of the winning player, or -1 if there\'s a tie for the highest card max_card = max(cards) indices = [i for i, card in enumerate(cards) if card == max_card] if len(indices) != 1: return -1 else: return indices[0]"},{"question":"You are given two words: a target word `t` and a source word `s`. You must determine if you can form the target word by reordering the characters in the source word and potentially replacing any number of characters with any other characters. The key restriction is that the source word must be the same length as the target word after transformations. Input: The input contains 2 lines in the form: t s First line contains the target word `t` and the second line contains the source word `s`. Output: Print \\"Yes\\" if it is possible to form the target word from the source word, print \\"No\\" otherwise. Constraints: The length of the words t and s will be between 1 and 100, inclusive. Both words will contain only lowercase English letters. SAMPLE INPUT abc def SAMPLE OUTPUT Yes","solution":"def can_form_target(t, s): Determines if the target word `t` can be formed by reordering and transforming the characters in the source word `s`. Parameters: t (str): target word s (str): source word Returns: str: \\"Yes\\" if `t` can be formed from `s`, \\"No\\" otherwise if len(t) != len(s): return \\"No\\" return \\"Yes\\""},{"question":"You are given a string containing only lowercase alphabets. You need to remove the minimum number of characters from the string such that the remaining string does not contain any three consecutive identical characters. Print the modified string after all the removals. If there are multiple possible results, print any of them. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string. Constraints 1 <= T <= 50 1 <= Length of the string <= 100 Output Format Output T lines, each containing the modified string for the corresponding test case. Sample Input 3 aaabbbccc aabbaabb abcabcabc Sample Output aabbcc aabbaabb abcabcabc Explanation In the first sample, by removing one \'a\', one \'b\', and one \'c\', we get the string \\"aabbcc\\" which does not contain any three consecutive identical characters.","solution":"def remove_consecutive_chars(s): Removes the minimum number of characters from the string s such that no three consecutive identical characters remain. result = [] for char in s: if len(result) >= 2 and result[-1] == char and result[-2] == char: continue # Skip the current char to avoid three consecutive identical chars result.append(char) return \'\'.join(result) def process_test_cases(T, test_cases): Processes multiple test cases and returns the resulting strings after removal of characters. Arguments: T -- Number of test cases test_cases -- List of test case strings Returns: List of resulting strings after processing each test case results = [] for s in test_cases: results.append(remove_consecutive_chars(s)) return results"},{"question":"D: Course Prerequisites Order problem During his final year of university, umg needs to complete a set of courses to graduate. Each course has certain prerequisites that must be completed before enrolling. The university has provided the list of course prerequisites in the form of pairs of courses (A, B) indicating that course B must be completed before course A. umg needs to determine if it is possible to complete all the courses by figuring out a valid order of course completion obeying the prerequisite rules. If there are multiple valid orders, umg can return any one of them. If it is not possible to complete all the courses, return an empty list. Input format N M Course_Pairs where: - N is the total number of courses, numbered from 1 to N. - M is the total number of prerequisite pairs. - Course_Pairs are M pairs of integers indicating the prerequisite relationship. Constraint * 1 ≤ N ≤ 105 * 0 ≤ M ≤ 106 * 1 ≤ A, B ≤ N Output format Print a valid order of course completion if possible, otherwise print an empty list. Input example 1 4 3 2 1 3 2 4 3 Output example 1 1 2 3 4 Input example 2 3 3 1 2 2 3 3 1 Output example 2 [] Example Input 4 3 2 1 3 2 4 3 Output 1 2 3 4 Explanation: By completing the courses in the order 1, 2, 3, 4, umg satisfies all prerequisite requirements. Input 3 3 1 2 2 3 3 1 Output [] Explanation: There is a cyclic dependency between the courses, making it impossible to satisfy the prerequisites.","solution":"from collections import defaultdict, deque def find_course_order(N, M, course_pairs): # Create a graph to store the prerequisites graph = defaultdict(list) indegree = [0] * (N + 1) # Build the graph and the indegree array for a, b in course_pairs: graph[b].append(a) indegree[a] += 1 # Perform topological sort using Kahn\'s algorithm queue = deque([i for i in range(1, N + 1) if indegree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If all courses are not in the order, return an empty list if len(order) != N: return [] return order"},{"question":"In a magical forest, there are N distinct types of creatures, numbered from 1 to N. Each creature type has a unique characteristic - some creatures can transform into other creatures. The transformation process is instantaneous. The leader of the forest, who is a wise owl, wants to understand the chain of transformations that can occur among these creatures. You are given a list of possible transformations, where some creatures can transform into others directly. The owl wants to know which creatures a given creature can transform into after exactly K transformations. ------ Input ------ The first line contains a single integer N denoting the number of creature types. The next N lines contain the matrix T[N][N]. Each of the i-th line, will contain N space-separated integers - j-th of those will denote T[i][j]. If creature i can transform directly into creature j, then T[i][j] is 1. Otherwise, it will be 0. The next line contains a single integer Q denoting the number of queries. The next Q lines contain two integers k and x described above. ------ Output ------ For each query, output two lines. In the first line, output how many creature types the given creature x can transform into after k transformations. In the second line, print these ids (numbering) of these creature types in increasing order. If no creature will match the transformation after K transformations, then print -1 in this line. ------ Constraints ------ 1 ≤ N ≤ 300 1 ≤ Q ≤ 300 0 ≤ k ≤ 10^6 1 ≤ x ≤ N 0 ≤ T[i][j] ≤ 1 ------ Subtasks ------ Subtask #1: (10 points) 1 ≤ N ≤ 30 1 ≤ Q ≤ 30 0 ≤ k ≤ 30 Subtask #2: (15 points) Original constraints Each creature can transform into exactly one other creature. Subtask #3: (30 points) 1 ≤ N ≤ 50 1 ≤ Q ≤ 50 0 ≤ k ≤ 10^6 Subtask #4: (45 points) Original constraints ------ Example ------ Input: 5 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 3 2 1 1 3 0 5 Output: 1 3 1 4 1 5","solution":"def creature_transformations(N, T, queries): import numpy as np # Convert the transformation matrix to a numpy array for easy matrix multiplication T = np.array(T) # Precompute the powers of the transformation matrix using matrix exponentiation powers = [np.eye(N, dtype=int), T.copy()] for i in range(1, 51): next_power = np.dot(powers[-1], T) % 2 powers.append(next_power) results = [] for k, x in queries: # Find the required power of the transformation matrix current_matrix = np.eye(N, dtype=int) while k > 0: i = min(k, 50) current_matrix = np.dot(current_matrix, powers[i]) % 2 k -= i # Get the transformable creatures after k transformations x -= 1 # Convert to zero-indexed transformable_creatures = [] for i in range(N): if current_matrix[x][i] == 1: transformable_creatures.append(i + 1) if transformable_creatures: results.append((len(transformable_creatures), sorted(transformable_creatures))) else: results.append((0, [-1])) return results"},{"question":"Given an array of integers, we can define a \\"beautiful triplet\\" as a triplet of indices (i, j, k) such that i < j < k and the following conditions hold: 1. arr[j] - arr[i] = d 2. arr[k] - arr[j] = d The integer d will be provided as input along with the array. Your task is to write a function, `count_beautiful_triplets`, that returns the number of beautiful triplets in the given array. # Input - The first line contains two space-separated integers n and d, where n represents the size of the array and d is the integer difference described above. - The second line contains n space-separated integers, representing the elements of the array. # Output - Output a single integer, the number of beautiful triplets in the array. # Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ arr[i], d ≤ 10^4 # Sample Input ``` 7 3 1 2 4 5 7 8 10 ``` # Sample Output ``` 3 ``` # Explanation The beautiful triplets in the array are (1, 4, 7), (4, 7, 10), and (2, 5, 8). Therefore, the output is 3.","solution":"def count_beautiful_triplets(n, d, arr): Counts the number of beautiful triplets in the given array. Parameters: n (int): The size of the array. d (int): The integer difference described in the problem. arr (list of int): The elements of the array. Returns: int: The number of beautiful triplets in the array. count = 0 for i in range(n): for j in range(i+1, n): if arr[j] - arr[i] == d: for k in range(j+1, n): if arr[k] - arr[j] == d: count += 1 return count"},{"question":"Alice has a collection of N books, each with a unique identifier. She wants to categorize these books into three different genres: Fiction, Non-Fiction, and Science. Each book can belong to only one genre. To help her make this categorization, Alice has devised a system where she assigns each book a score for each genre. Your task is to write a program that will read the scores for each book in the three genres and then determine the genre for each book based on the highest score. If multiple genres have the same highest score for a particular book, the tie should be broken by the genre with the lowest numerical value (1 for Fiction, 2 for Non-Fiction, and 3 for Science). **Input** - The first line contains an integer N (1 ≤ N ≤ 10^5), the number of books. - Each of the next N lines contains four integers: `id` (0 ≤ id ≤ 10^6), `f_score` (0 ≤ f_score ≤ 100), `nf_score` (0 ≤ nf_score ≤ 100), and `s_score` (0 ≤ s_score ≤ 100), where `id` is the unique identifier of the book, and `f_score`, `nf_score`, and `s_score` are the respective scores for Fiction, Non-Fiction, and Science. **Output** - For each book, print the `id` followed by the genre it belongs to (1 for Fiction, 2 for Non-Fiction, and 3 for Science). The outputs should be displayed in the same order as the input. **Examples** Input: ``` 3 1001 85 90 95 1002 50 70 50 1003 85 85 85 ``` Output: ``` 1001 3 1002 2 1003 1 ``` In the first example, Book 1001 has the highest score in Science, so it is categorized under genre 3. Similarly, Book 1002 has the highest score in Non-Fiction, so it is categorized under genre 2. Book 1003 has equal highest scores in all genres, but 1 (Fiction) is chosen due to the tie breaking rule.","solution":"def categorize_books(N, book_scores): results = [] for book in book_scores: book_id, f_score, nf_score, s_score = book # Determine the highest score and corresponding genre if f_score >= nf_score and f_score >= s_score: genre = 1 elif nf_score >= s_score: genre = 2 else: genre = 3 results.append((book_id, genre)) return results"},{"question":"The XYZ Company has launched a special program called \\"Employee of the Month.\\" For this program, each department selects an employee based on their performance and assigns them points. The company wishes to automate the process of determining the Employee of the Month based on the points given. You are given a list where each element is a tuple representing an employee\'s name, their department, and the number of points they earned. Write a program to identify the Employee of the Month for each department. Input: - The first line contains an integer `n`, the number of employees. - The following `n` lines each contain a string representing the employee\'s name, followed by a space, then the department, followed by another space, and finally the number of points. Output: - For each department, print the name of the Employee of the Month and the points they earned, in the format \\"<Department>: <Employee\'s Name> <Points>\\". If there are multiple employees with the highest points in the same department, select the employee who appears first in the input list. Example: Input: ``` 6 Alice HR 88 Bob IT 92 Charlie HR 90 David IT 85 Eve HR 88 Frank IT 92 ``` Output: ``` HR: Charlie 90 IT: Bob 92 ``` Explanation: - For the HR department, Charlie has the highest points (90). - For the IT department, both Bob and Frank have the highest points (92), but Bob appears first in the input list.","solution":"def employee_of_the_month(employee_data): Given a list of employee data tuples (name, department, points), returns a dictionary with departments as keys and the employee with the highest points as values. department_best = {} for name, department, points in employee_data: points = int(points) if department not in department_best: department_best[department] = (name, points) else: if points > department_best[department][1]: department_best[department] = (name, points) return department_best def format_employee_of_the_month(employee_data): best_employees = employee_of_the_month(employee_data) result = [] for department, (name, points) in best_employees.items(): result.append(f\\"{department}: {name} {points}\\") return result"},{"question":"Alex is a software engineer working on optimizing database queries. He came across a problem involving the creation of a prefix sum array. A prefix sum array is a new array `prefix` where each element `prefix[i]` is the sum of all elements from the start of the original array up to the `i`-th element, inclusive. Given an array of integers, Alex wants to transform it into a prefix sum array efficiently. **Task:** Write a function `prefix_sum(arr)` that computes and returns the prefix sum array for the given input array `arr`. **Input:** - A list of integers `arr` (0 ≤ len(arr) ≤ 10^5). **Output:** - A list of integers representing the prefix sum array. **Examples:** Input: ``` [1, 2, 3, 4] ``` Output: ``` [1, 3, 6, 10] ``` Input: ``` [5, -2, 7, 3] ``` Output: ``` [5, 3, 10, 13] ``` **Note:** - If the input array is empty, the function should return an empty array. - Aim to achieve a time complexity of O(n), where n is the number of elements in the input array.","solution":"def prefix_sum(arr): Computes and returns the prefix sum array for the given input array arr. Parameters: arr (list of int): Input array of integers Returns: list of int: Prefix sum array if not arr: return [] prefix = [0] * len(arr) prefix[0] = arr[0] for i in range(1, len(arr)): prefix[i] = prefix[i - 1] + arr[i] return prefix"},{"question":"Linda is building a simple text editor and needs to implement an undo operation. The text editor initially contains an empty string. Each operation is either adding a character to the string, or undoing the latest operation. Create a function `text_editor(n: int, operations: List[str]) -> str` that takes the number of operations `n` and a list of `n` operations, and returns the final string after performing all the operations. Each operation is either `\\"ADD x\\"` (where `x` is a single lower-case character indicating that the character is added to the end of the string) or `\\"UNDO\\"` which undoes the last operation. -----Input----- The first line contains an integer `n` (1 leq n leq 100,000) — the number of operations. The next `n` lines each contain an operation. Each operation is either `\\"ADD x\\"` where `x` is a single lower-case English letter, or `\\"UNDO\\"` meaning to undo the last operation. -----Output----- Print the resulting string after performing all the operations. -----Examples----- Input 5 ADD a ADD b UNDO ADD c ADD d Output acd Input 3 ADD a UNDO UNDO Output (empty string) Input 7 ADD x ADD y UNDO ADD z UNDO UNDO UNDO Output (empty string) -----Note----- In the first example, the sequence of operations is as follows: - ADD a: `a` - ADD b: `ab` - UNDO: `a` - ADD c: `ac` - ADD d: `acd` In the second example, the sequence of operations is: - ADD a: `a` - UNDO: (empty string) - UNDO: (empty string) In the third example, the sequence of operations is: - ADD x: `x` - ADD y: `xy` - UNDO: `x` - ADD z: `xz` - UNDO: `x` - UNDO: (empty string) - UNDO: (empty string)","solution":"def text_editor(n, operations): string = [] history = [] for op in operations: if op.startswith(\\"ADD\\"): _, char = op.split() string.append(char) history.append((\\"ADD\\", char)) elif op == \\"UNDO\\": if history: last_op, char = history.pop() if last_op == \\"ADD\\": string.pop() return \\"\\".join(string)"},{"question":"Problem statement Given a binary tree, return the vertical order traversal of its nodes\' values. The vertical order traversal of a binary tree is a traversal where we visit all nodes from top to bottom in each vertical column. Columns are ordered from left to right, and nodes in the same column are ordered based on their row number (level in the tree) and then by their order of appearance in that row from left to right. Constraint * The number of nodes in the binary tree is in the range [1, 1000]. * The value of each node is an integer between [-1000, 1000]. input Input follows the following format. The first line contains the values of the nodes in the binary tree in level order traversal, with \'null\' representing missing nodes. output Output the vertical order traversal as a list of lists of integers. Examples Input [3, 9, 20, null, null, 15, 7] Output [ [9], [3, 15], [20], [7] ] Input [1, 2, 3, 4, 5, 6, 7] Output [ [4], [2], [1, 5, 6], [3], [7] ]","solution":"from collections import defaultdict, deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(level_order): Build a binary tree from level order list if not level_order: return None iter_data = iter(level_order) root = TreeNode(next(iter_data)) queue = deque([root]) while queue: node = queue.popleft() try: left_val = next(iter_data) if left_val is not None: node.left = TreeNode(left_val) queue.append(node.left) right_val = next(iter_data) if right_val is not None: node.right = TreeNode(right_val) queue.append(node.right) except StopIteration: break return root def verticalOrderTraversal(root): The vertical order traversal of a binary tree. if not root: return [] cols = defaultdict(list) queue = deque([(root, 0, 0)]) # (node, column, row) while queue: node, col, row = queue.popleft() if node: cols[col].append((row, node.val)) queue.append((node.left, col - 1, row + 1)) queue.append((node.right, col + 1, row + 1)) sorted_cols = sorted(cols.items()) result = [] for col, values in sorted_cols: values.sort() # Python\'s default tuple sorting (first by row, then value) result.append([val for row, val in values]) return result def vertical_order(level_order): Creates the binary tree from level order list and returns its vertical order traversal. root = build_tree(level_order) return verticalOrderTraversal(root)"},{"question":"**Statement:** You are given a list of numbers representing the heights of students standing in a line. A photographer wants to take a photo in which all students appear in non-decreasing order of their heights from left to right. However, the photographer wants to make the lineup look balanced by ensuring the height difference between any two adjacent students is minimized. Specifically, the photographer wants to estimate the maximum difference in height between adjacent students when the lineup is arranged to satisfy the non-decreasing order condition. Write a program that reads the heights of students and determines the maximum height difference between any two adjacent students in the photo. Input: - The first line contains an integer N, the number of students. - The second line contains N integers representing the heights of students. Output: A single integer representing the maximum difference in height between any two adjacent students in the optimal lineup. Constraints: 1 ≤ N ≤ 1000 1 ≤ height ≤ 200 SAMPLE INPUT 5 4 2 3 5 1 SAMPLE OUTPUT 2 Explanation: In the above sample input, the optimal lineup sorted in non-decreasing order is [1, 2, 3, 4, 5]. The maximum difference in height between adjacent students is 2 (between heights 3 and 1).","solution":"def max_height_difference(N, heights): Function to determine the maximum difference in height between any two adjacent students in the optimal lineup. :param N: Integer, number of students :param heights: List of integers, heights of students :return: Integer, the maximum difference in height between any two adjacent students in non-decreasing order if N <= 1: return 0 # Sort the heights array heights.sort() # Initialize the maximum difference to 0 max_diff = 0 # Iterate through the sorted list to find the maximum difference between adjacent elements for i in range(1, N): max_diff = max(max_diff, heights[i] - heights[i - 1]) return max_diff"},{"question":"```python def appearance_count(lst, num): ``` that given a list `lst` and an integer `num`, returns the number of times each element up to and including `num` appears in the list. You should return the result as a dictionary where the keys are the elements and the values are their respective counts. For example: ```python appearance_count([1, 2, 2, 3, 4, 4, 4, 5], 4) == {1: 1, 2: 2, 3: 1, 4: 3} appearance_count([5, 5, 5, 6, 6, 7], 5) == {5: 3} appearance_count([1, 1, 2, 3, 3, 3], 1) == {1: 2} ``` ``` haskell appearance_count [1,2,2,3,4,4,4,5] 4 `shouldBe` fromList [(1,1),(2,2),(3,1),(4,3)] appearance_count [5,5,5,6,6,7] 5 `shouldBe` fromList [(5,3)] appearance_count [1,1,2,3,3,3] 1 `shouldBe` fromList [(1,2)] ``` ```noreq```","solution":"def appearance_count(lst, num): Returns a dictionary where the keys are elements in lst up to and including num, and the values are the respective counts of those elements. count_dict = {} for el in lst: if el <= num: if el in count_dict: count_dict[el] += 1 else: count_dict[el] = 1 return count_dict"},{"question":"You are given a list of strings containing binary numbers as input. Your task is to find the binary number in the list that has the highest decimal value. If there are multiple numbers with the same decimal value, return the first one in the list. Input The input contains multiple binary strings separated by space, within a single line. You are guaranteed that all strings in the list are valid binary numbers (i.e., only contain \'0\' and \'1\'). Output Output the binary string that has the highest decimal value. Examples Input ``` 101 111 110 ``` Output ``` 111 ``` Input ``` 1101 1000 1010 ``` Output ``` 1101 ``` Note In the first test case, 111 (7 in decimal) is the highest among 101 (5 in decimal) and 110 (6 in decimal). In the second test case, 1101 (13 in decimal) is the highest among 1000 (8 in decimal) and 1010 (10 in decimal).","solution":"def find_highest_binary_string(binaries): Returns the binary string with the highest decimal value from the list of binary strings. Params: - binaries (list of str): list containing binary strings Returns: - str: the binary string with the highest decimal value max_value = -1 max_binary = None for binary in binaries: decimal_value = int(binary, 2) if decimal_value > max_value: max_value = decimal_value max_binary = binary return max_binary def main(input_line): Given a string of binary numbers separated by space, returns the binary number that has the highest decimal value Params: - input_line (str): the input string containing binary numbers separated by space Returns: - str: the binary string with the highest decimal value binaries = input_line.split() return find_highest_binary_string(binaries)"},{"question":"Aptos and Benji are playing a game with an array of n integers. The game proceeds in rounds and alternates between the two players, starting with Aptos. In each round, the current player must choose any positive integer from the array and remove it. The remaining elements of the array are then reduced by one. A player loses if they cannot make a valid move on their turn, meaning there are no positive integers left in the array to remove. Assume both players use optimal strategies. Determine if Aptos, starting the game, will win or lose given the initial configuration of the array. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Output Print \\"Aptos\\" if Aptos will win the game, otherwise print \\"Benji\\". Example Input 5 2 3 4 1 3 Output Benji Explanation: - Aptos picks 4, the array becomes [1, 2, 3, 0, 2] - Benji picks 3, the array becomes [0, 1, 2, 0, 1] - Aptos picks 2, the array becomes [0, 0, 1, 0, 0] - Benji picks 1, the array becomes [0, 0, 0, 0, 0] At this point, Aptos cannot make a valid move and loses. Benji wins.","solution":"def determine_winner(n, arr): Determine if Aptos will win given the initial configuration of the array. Aptos starts first with an optimal strategy. Parameters: n (int): The number of elements in the array. arr (list of int): The array of elements. Returns: str: \\"Aptos\\" if Aptos will win, otherwise \\"Benji\\". # The number of distinct non-zero integers in the array determines the outcome. # If the number of such distinct integers is odd, Aptos wins, otherwise Benji wins. distinct_non_zero_count = sum(1 for x in set(arr) if x > 0) if distinct_non_zero_count % 2 == 1: return \\"Aptos\\" else: return \\"Benji\\" # Example usage: # print(determine_winner(5, [2, 3, 4, 1, 3])) # Output: \\"Benji\\""},{"question":"In a certain state, there are N cities connected by M bidirectional roads. Each road connects two distinct cities A_i and B_i and has a length of C_i. A network of distributors needs to ensure the shortest delivery paths between specific distribution centers. Given P distribution centers, p_1, p_2, ..., p_P (not necessarily in order), find the minimum total distance required to ensure that each distribution center can deliver to every other distribution center, either directly or indirectly through other cities, using the shortest paths. -----Constraints----- - 2 ≤ N ≤ 150 - 1 ≤ M ≤ N×(N-1)/2 - 2 ≤ P ≤ min(8, N) (minimum of 8 and N) - p_i ≠ p_j (i ≠ j) - 1 ≤ A_i, B_i ≤ N, A_i ≠ B_i - (A_i, B_i) ≠ (A_j, B_j), (A_i, B_i) ≠ (B_j, A_j) (i ≠ j) - 1 ≤ C_i ≤ 100000 - Every city can be reached from every other city by road. - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N M P p_1 ... p_P A_1 B_1 C_1 : A_M B_M C_M -----Output----- Print the minimum total distance required to ensure that all distribution centers can communicate effectively using the shortest paths available. -----Sample Input----- 5 6 3 1 3 5 1 2 2 2 3 3 2 4 4 3 5 1 4 5 6 5 1 7 -----Sample Output----- 6 In the example above, the minimum total distance to ensure that distribution centers 1, 3, and 5 are connected using the shortest paths between them is 6.","solution":"def floyd_warshall(n, roads): # Initialize distance matrix dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for (u, v, w) in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Apply Floyd-Warshall for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def minimum_spanning_tree_cost(p_indices, dist): import heapq p = len(p_indices) in_tree = [False] * p min_heap = [(0, 0)] # (cost, start_node) total_cost = 0 while min_heap: cost, u_index = heapq.heappop(min_heap) if in_tree[u_index]: continue in_tree[u_index] = True total_cost += cost for v_index in range(p): if not in_tree[v_index] and u_index != v_index: heapq.heappush(min_heap, (dist[p_indices[u_index] - 1][p_indices[v_index] - 1], v_index)) return total_cost def minimum_total_distance(N, M, P, distribution_centers, roads): dist = floyd_warshall(N, roads) return minimum_spanning_tree_cost(distribution_centers, dist)"},{"question":"John and Mike are playing an interesting game with an array of integers. Given an array of n integers, John can remove any one integer from the array in his turn. Mike, on the other hand, can remove the smallest integer from the array that is greater than or equal to a given threshold value t in his turn. The player unable to make a move loses the game. Given the array and the threshold value t, determine if John or Mike wins, assuming both play optimally and John starts the game. Input: The first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10^5) — the number of elements in the array, and the threshold value respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: Print \\"John\\" if John wins, otherwise print \\"Mike\\". Example: Input: 5 3 4 2 3 1 5 Output: John Note: In the example given, John always wins because he can always remove a number such that Mike is never able to make a move. For instance, if John removes 4, then the remaining array is [2, 3, 1, 5]. Regardless of the threshold value, Mike will always have to remove the actual smallest integer greater than or equal to t, but since he cannot remove a number greater than or equal to t afterwards, John wins.","solution":"def determine_winner(n, t, array): This function determines who wins the game given the array and threshold value. Parameters: n (int): The number of elements in the array. t (int): The threshold value. array (list): The list of integers. Returns: str: \\"John\\" if John wins, otherwise \\"Mike\\". for number in array: if number >= t: return \\"John\\" return \\"Mike\\""},{"question":"You are given two strings, s_1 and s_2, consisting of lowercase alphabetic characters. Your task is to determine if you can transform s_1 into s_2 using any number of swap operations among adjacent characters in s_1. However, there is an additional constraint: you can only swap characters if their frequency in the string is the same in both strings. For example, you can swap two \'a\'s only if both \'a\'s appear the same number of times in s_1 and s_2. Return \\"Yes\\" if it is possible to transform s_1 into s_2 under these conditions, and \\"No\\" otherwise. -----Input----- The input consists of two lines: 1. The first line contains a single string s_1 (1 leq |s_1| leq 10^5). 2. The second line contains a single string s_2 (1 leq |s_2| leq 10^5). It is guaranteed that s_1 and s_2 are of the same length and contain only lowercase alphabetic characters. -----Output----- Output \\"Yes\\" if you can transform s_1 into s_2 under the given conditions, and \\"No\\" otherwise. -----Examples----- Input abccba baccab Output Yes Input abc bbc Output No -----Note----- In the first sample, s_1 = \\"abccba\\" and s_2 = \\"baccab\\". The frequency of each character in both strings is the same: \'a\' appears twice, \'b\' appears twice, and \'c\' appears twice. Since all characters have the same frequency in both strings, it is possible to transform s_1 into s_2 using adjacent swaps. In the second sample, s_1 = \\"abc\\" and s_2 = \\"bbc\\". The frequency of \'a\' and \'b\' in both strings is different, so it is not possible to transform s_1 into s_2.","solution":"def can_transform(s1, s2): Determines if you can transform s1 into s2 using swap operations among adjacent characters. from collections import Counter # Count the frequency of characters in both strings counter_s1 = Counter(s1) counter_s2 = Counter(s2) # Compare character frequencies if counter_s1 == counter_s2: return \\"Yes\\" else: return \\"No\\""},{"question":"Patricia loves creating patterns using asterisks. She recently discovered she could make diamond shapes and wants to automate the process. The diamond will be symmetric, and it will have a width that equals the specified number\'s double minus one. Write a Python function `generate_diamond(n)` where `n` is a positive integer representing the number of asterisks in the middle row\'s width of the diamond. The function should return the string representation of the diamond, with each line of the diamond followed by a newline character (`n`). # Input - A positive integer `n` representing the number of asterisks in the middle row. # Output - A string representing the diamond shape. # Example ```python def generate_diamond(n): pass # Your code goes here # Example Usage print(generate_diamond(3)) ``` The above call should output: ``` * *** ***** *** * ``` # Condition 1. If `n` is 1, the output should be a single asterisk character followed by a newline. 2. The function should handle cases where `n` is 1, 3, 5, or any other positive integer correctly.","solution":"def generate_diamond(n): Generates a diamond shape using asterisks with the given width `n` for the middle row. if n <= 0: return \\"\\" diamond = [] # Upper part including the middle row for i in range(n): line = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) diamond.append(line) # Lower part excluding the middle row for i in range(n-2, -1, -1): line = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) diamond.append(line) return \'n\'.join(diamond) + \'n\'"},{"question":"Write a program that rearranges a given array of integers so that the differences between adjacent elements are minimized. The array should be rearranged in such a way as to minimize the maximum absolute difference between any two consecutive elements in the rearranged array. If there is more than one solution, return any of them. # Input - The first line contains an integer n (2 ≤ n ≤ 100), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the array. # Output - Print the rearranged array in a single line such that the differences between adjacent elements are minimized in terms of the maximum absolute difference. # Example Input: ``` 5 10 1 9 7 3 ``` Output: ``` 1 3 7 9 10 ``` Input: ``` 4 4 10 2 7 ``` Output: ``` 2 4 7 10 ``` # Note In the first example, the differences between adjacent elements in the rearranged array [1, 3, 7, 9, 10] are [2, 4, 2, 1], and the maximum difference is 4, which is minimized. In the second example, the differences between adjacent elements in the rearranged array [2, 4, 7, 10] are all minimized to 3.","solution":"def minimize_max_difference(arr): Rearranges the given array to minimize the maximum absolute difference between any two consecutive elements. arr.sort() return arr"},{"question":"You are given a set of N points in a 2-dimensional plane. Your task is to find the smallest rectangle (aligned with the coordinate axes) that can enclose all the points such that sides of the rectangle are either parallel or perpendicular to the coordinate axes. -----Constraints----- - 2 leq N leq 50 - 0 leq x_i leq 1000 - 0 leq y_i leq 1000 - The given N points are all different. - The values in input are all integers. -----Input----- Input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 : x_N y_N -----Output----- Print the area of the smallest rectangle that can enclose all the N points. Your output will be considered correct if the absolute or relative error from our answer is at most 10^{-6}. -----Sample Input----- 3 0 0 1 2 3 1 -----Sample Output----- 6.000000000000000000 Explanation: The smallest rectangle that can enclose all the points has a bottom-left corner at (0, 0) and a top-right corner at (3, 2). Therefore, its width is 3 and its height is 2, resulting in an area of 3 * 2 = 6.","solution":"def smallest_enclosing_rectangle_area(points): Given a list of points, this function calculates the area of the smallest rectangle that can enclose all the points. The rectangle\'s sides are aligned with the coordinate axes. :param points: List of tuples, where each tuple represents a point (x, y) :return: The area of the smallest enclosing rectangle if not points: return 0.0 min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) width = max_x - min_x height = max_y - min_y return float(width * height) # Example function to read input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) points = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(N)] print(\\"{:.15f}\\".format(smallest_enclosing_rectangle_area(points)))"},{"question":"Loella just got a new plant for her apartment. She wants to ensure it gets the right amount of water and sunlight to grow tall and healthy. The plant grows optimally if it receives exactly m milliliters of water and n hours of sunlight each day. Loella has a series of days ahead and each day has a different amount of available sunlight and she has x milliliters of water in her tank. She wants to maximize the number of days her plant can grow optimally. On each day, the plant must get exactly m milliliters of water and at least n hours of sunlight. Water is depleted from the tank cumulatively as days go by. Given the sunlight available each day and the amount of water at the start, determine the maximum number of days Loella\'s plant can grow optimally. Input The first line contains three integers x, m, and n (1 ≤ x, m, n ≤ 1000), where x is the total water available in milliliters, m is the water required per day in milliliters, and n is the sunlight required per day in hours. The second line contains k integers (1 ≤ k ≤ 100) representing the hours of sunlight available each day. Output Print a single number — the maximum number of days Loella\'s plant can grow optimally. Examples Input 10 2 3 4 3 2 5 1 Output 3 Input 5 2 1 1 1 2 3 Output 2 Input 7 3 2 2 1 3 3 2 Output 2 Note In the first sample, Loella has 10 milliliters of water and needs 2 milliliters per day. The sunlight available each day is [4, 3, 2, 5, 1] hours. With these values, she can optimally grow the plant for 3 days: first, second, and fourth days because at least 2 hours of sunlight is available and she has enough water to sustain the plant. In the second sample, with 5 milliliters of water and needing 2 milliliters per day, she can sustain the plant for only 2 days given the sunlight pattern [1, 1, 2, 3]. Each day depletes the water and she can\'t meet the sunlight requirements beyond the second day. In the third sample, Loella has 7 milliliters of water and needs 3 milliliters per day. The sunlight available each day is [2, 1, 3, 3, 2] hours. She can optimally grow the plant for only 2 days because the days with sufficient sunlight are limited.","solution":"def max_optimal_days(x, m, n, sunlight_hours): days = 0 for hours in sunlight_hours: if hours >= n and x >= m: days += 1 x -= m if x < m: break return days # Example usage x = 10 m = 2 n = 3 sunlight_hours = [4, 3, 2, 5, 1] print(max_optimal_days(x, m, n, sunlight_hours)) # Output: 3"},{"question":"You are given a string S consisting of only lowercase alphabets. Your task is to find the length of the longest subsequence of S which consists of only vowels (a, e, i, o, u). Input The first line contains an integer T denoting the number of test cases. For each test case, there is a single line containing the string S. Output For each test case, print the length of the longest subsequence that contains only vowels. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100,000 S consists of only lowercase alphabets. SAMPLE INPUT 3 aeiou abecidofu xyz SAMPLE OUTPUT 5 5 0","solution":"def longest_vowel_subsequence_length(S: str) -> int: Returns the length of the longest subsequence of S which consists of only vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} return sum(1 for char in S if char in vowels) def process_test_cases(test_cases: list) -> list: Processes a list of test cases and returns a list with the results for each test case. results = [] for S in test_cases: results.append(longest_vowel_subsequence_length(S)) return results"},{"question":"A hardware store manager wants to optimize the stock level for various products. Each product i has a stock level s_i and a target stock level t_i. The manager can perform operations to adjust the stock levels. In one operation, the stock levels of any two distinct products i and j can be swapped. Your task is to determine if it is possible to make the stock levels exactly match the target stock levels after a finite number of swaps. Constraints: * ( 1 leq N leq 10^5 ) * ( 1 leq s_i, t_i leq 10^9 ) Input Input is given from Standard Input in the following format: N s_1 s_2 dots s_N t_1 t_2 dots t_N Output Print \\"Yes\\" if it is possible to make the stock levels match the target stock levels using the allowed operations. Otherwise, print \\"No\\". Examples Input 5 5 1 3 2 4 3 2 1 5 4 Output Yes Input 4 2 2 2 2 3 4 2 1 Output No Input 3 8 3 7 3 7 8 Output Yes","solution":"def can_match_stock_levels(N, s, t): Determines if it is possible to match stock levels to target stock levels using the allowed swap operations. return sorted(s) == sorted(t)"},{"question":"Polycarpus works for a software company that frequently performs database queries. To optimize performance, the company decided to analyze the queries to find patterns and possibly optimize the database structure. Polycarpus has a list of n queries executed by the database. Each query is represented by a start time and an end time. He needs to determine the maximum number of overlapping queries at any given time to understand the peak load on the database. Given the list of queries, help Polycarpus find the maximum number of overlapping queries. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^3) — the number of queries executed by the database. The next n lines contain the descriptions of the queries: the i-th line contains two space-separated integers s_{i} and e_{i} (1 ≤ s_{i} < e_{i} ≤ 10^6) — the start time and the end time of the i-th query, respectively. It is guaranteed that all queries start and end at different moments of time. -----Output----- In a single line print a single integer — the maximum number of overlapping queries at any moment in time. -----Examples----- Input 2 1 4 2 6 Output 2 Input 3 5 10 15 20 25 30 Output 1 Input 4 1 5 2 6 3 7 4 8 Output 4 -----Note----- In the first sample: - Query 1 starts at time 1 and ends at time 4. - Query 2 starts at time 2 and ends at time 6. The maximum overlap happens between time 2 and time 4 where both queries are active. Therefore, the maximum number of overlapping queries is 2. In the second sample: - Each query does not overlap with any other query. Therefore, the maximum number of overlapping queries is 1. In the third sample: - All four queries overlap between time 4 and time 5. Therefore, the maximum number of overlapping queries is 4.","solution":"def max_overlapping_queries(queries): Returns the maximum number of overlapping queries at any moment. events = [] for (start, end) in queries: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events first by time, then by type (\'end\' before \'start\' in case of tie) events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 for event in events: if event[1] == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"A group of students are participating in a marathon. Each student has a specific initial energy level and loses a certain amount of energy per kilometer they run. The goal is to determine the maximum distance (in kilometers) a student can run until their energy drops to zero or below. ------ Input Format ------ - The first line of input contains a single integer N, denoting the number of students. - The next N lines each contain two integers E and L, where E indicates the initial energy and L indicates the energy loss per kilometer for each student. ------ Output Format ------ For each student, print the maximum distance (in kilometers) they can run before their energy depletes to zero or below. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ E ≤ 1000 1 ≤ L ≤ 1000 ----- Sample Input 1 ------ 3 10 2 15 3 20 4 ----- Sample Output 1 ------ 5 5 5 ----- Explanation 1 ------ For each student, the distance they can run is calculated as follows: Student 1: Initial energy is 10 and energy loss per kilometer is 2, so the maximum distance is 10 // 2 = 5 kilometers. Student 2: Initial energy is 15 and energy loss per kilometer is 3, so the maximum distance is 15 // 3 = 5 kilometers. Student 3: Initial energy is 20 and energy loss per kilometer is 4, so the maximum distance is 20 // 4 = 5 kilometers.","solution":"def max_distance(n, students): Given the number of students and a list of tuples where each tuple contains (initial energy, energy loss per kilometer), this function calculates the maximum distance each student can run before their energy depletes. Parameters: n (int): The number of students students (list of tuples): A list containing tuples of (E, L) for each student Returns: list of int: A list of maximum distances each student can run distances = [] for energy, loss_per_km in students: max_dist = energy // loss_per_km distances.append(max_dist) return distances"},{"question":"A technology firm is developing a new GPS navigation system for pedestrians walking through a city grid. The city is comprised of N horizontal streets and M vertical avenues, forming an N times M grid of intersections. Some of these intersections are known to have obstacles, making them impassable. The navigation system needs to calculate the shortest walking path from a given start intersection to a given destination intersection, avoiding any obstacles. If it’s impossible to reach the destination due to obstacles, the system should indicate this appropriately. -----Input----- - The first line contains two integers N and M (1 leq N, M leq 100), the number of horizontal streets and vertical avenues in the city grid. - The second line contains four integers S_x, S_y, D_x, and D_y (0 leq S_x, S_y, D_x, D_y leq 100), the coordinates of the start intersection (S_x, S_y) and destination intersection (D_x, D_y). - The third line contains a single integer K (0 leq K leq N times M), the number of obstacles on the grid. - Each of the next K lines contains two integers O_x and O_y (0 leq O_x < N; 0 leq O_y < M), the coordinates of an obstacle intersection (O_x, O_y). -----Output----- - One line containing a single integer: the length of the shortest path from the start to the destination, or -1 if no path exists. -----Examples----- Sample Input 1: 5 5 0 0 4 4 3 1 1 2 2 3 3 Sample Output 1: 8 Sample Input 2: 5 5 0 0 4 4 5 1 1 2 2 3 3 4 4 0 1 Sample Output 2: -1","solution":"from collections import deque def shortest_path_with_obstacles(N, M, S_x, S_y, D_x, D_y, K, obstacles): obstacles_set = set((x, y) for x, y in obstacles) if (S_x, S_y) in obstacles_set or (D_x, D_y) in obstacles_set: return -1 directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(S_x, S_y, 0)]) visited = set([(S_x, S_y)]) while queue: x, y, dist = queue.popleft() if (x, y) == (D_x, D_y): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and (nx, ny) not in obstacles_set: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"The National Bank has introduced a new loan policy that calculates the potential maximum amount of money that a person should repay in a given number of years. The bank follows an exponential increase in the interest rate which is compounded annually. For simplicity: - The initial loan amount is A dollars. - The annual increase rate of the loan is R percent. - The total number of years is Y. You need to create a function that calculates the total amount to be repaid after Y years. You can assume the increase in the loan amount happens at the end of each year. **Task:** Write a function `calculate_loan_repayment(A, R, Y)` where: - `A` is an integer representing the initial loan amount. - `R` is an integer representing the annual increase rate in percentage. - `Y` is an integer representing the number of years. The function should return the total amount of money to be repaid after `Y` years, rounded off to two decimal places. **Constraints:** - 1 <= A <= 1000000 - 1 <= R <= 100 - 1 <= Y <= 100 **Example:** ```python def calculate_loan_repayment(A, R, Y): # Your code goes here # Example usage: print(calculate_loan_repayment(1000, 10, 2)) # Output: 1210.00 print(calculate_loan_repayment(5000, 5, 10)) # Output: 8144.47 ``` Explanation: 1. In the first example, the initial loan is 1000 with a 10% annual increase for 2 years. The loan amount becomes 1210 after 2 years. 2. In the second example, the initial loan is 5000 with a 5% annual increase for 10 years. The loan amount becomes 8144.47 after 10 years.","solution":"def calculate_loan_repayment(A, R, Y): Calculates the total amount to be repaid after Y years with an annual increase rate of R percent. :param A: Initial loan amount (int) :param R: Annual increase rate in percentage (int) :param Y: Number of years (int) :return: Total amount to be repaid after Y years, rounded to two decimal places (float) rate = R / 100 total_amount = A * (1 + rate) ** Y return round(total_amount, 2)"},{"question":"Each week, a company schedules maintenance tasks for different departments. Each department has a list of tasks that need to be completed, and each task has a specific duration in minutes. Employees from various departments can complete these tasks collaboratively, but each employee can only switch to a different task after completing the current one. Given the number of tasks and the durations for each task of a certain department, your job is to determine the earliest time by which all tasks can be completed if exactly `k` employees are available to work on these tasks. Each employee can pick any of the remaining tasks to complete. The employees work in parallel and can start this work at the same time. **Input** - The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of tasks. - The second line contains `n` integers `t_i` (1 ≤ t_i ≤ 10^9) — the duration of each task. - The third line contains an integer `k` (1 ≤ k ≤ n) — the number of available employees. **Output** Print a single integer — the earliest time by which all tasks will be completed. **Example** Input: ``` 5 5 8 3 7 2 2 ``` Output: ``` 13 ``` **Explanation** In this example, there are `2` employees and `5` tasks with the following durations: `5`, `8`, `3`, `7`, and `2`. Here’s one way the tasks can be divided: - Employee 1: completes tasks with durations `8`, `2`, and `3` (total = 13 minutes) - Employee 2: completes tasks with durations `5` and `7` (total = 12 minutes) The time when all tasks are completed is determined by the employee who takes the longest, which in this case is 13 minutes.","solution":"import heapq def min_completion_time(n, task_durations, k): Function to determine the earliest time by which all the tasks are completed. Parameters: n (int): Number of tasks. task_durations (list): List containing the duration of each task. k (int): Number of employees. Returns: int: Earliest time by which all the tasks are completed. if k >= n: return max(task_durations) # Use a min-heap to track the current workload assigned to each employee. employee_workloads = [0] * k heapq.heapify(employee_workloads) # Assign each task duration to the employee with the least current workload. for duration in sorted(task_durations, reverse=True): min_workload = heapq.heappop(employee_workloads) heapq.heappush(employee_workloads, min_workload + duration) # The time to complete all tasks will be determined by the employee with the maximum workload. return max(employee_workloads)"},{"question":"Given a directed acyclic graph (DAG) representing prerequisites for taking various courses, determine the minimum number of semesters required to complete all the courses. You can take any number of courses in a semester, provided their prerequisites are met. Each course is represented as a node, and a directed edge from node `u` to node `v` indicates that course `u` must be completed before course `v`. INPUT: The first line of input contains an integer `T` representing the number of test cases. For each test case: - The first line contains two integers `N` and `M`, where `N` is the number of courses and `M` is the number of prerequisite pairs. - The next `M` lines each contain two integers `u` and `v`, representing a prerequisite relationship where course `u` must be taken before course `v`. OUTPUT: For each test case, output a single integer representing the minimum number of semesters required to complete all the courses. Output `-1` if it\'s not possible to complete all courses (i.e., there is a cyclic dependency which contradicts the given guarantee that the graph is a DAG). Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10^5 1 ≤ u, v ≤ N SAMPLE INPUT 2 5 4 1 2 2 3 3 4 4 5 3 2 1 2 2 3 SAMPLE OUTPUT 5 3","solution":"from collections import deque, defaultdict def min_semesters(n, prerequisites): # Using Kahn\'s Algorithm to find minimum semesters (Topological Sort) in_degree = [0] * (n + 1) graph = defaultdict(list) for u, v in prerequisites: graph[u].append(v) in_degree[v] += 1 queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) semester_count = 0 studied_courses = 0 while queue: size = len(queue) for _ in range(size): course = queue.popleft() studied_courses += 1 for next_course in graph[course]: in_degree[next_course] -= 1 if in_degree[next_course] == 0: queue.append(next_course) semester_count += 1 return semester_count if studied_courses == n else -1 def min_semesters_multiple_cases(cases): results = [] for case in cases: n, m, prerequisites = case results.append(min_semesters(n, prerequisites)) return results"},{"question":"Given an array of integers, determine if it is possible to make all elements equal by adding or subtracting 1 from any element any number of times. ----- Input Format ----- - The first line contains a single integer n, the size of the array. - The second line contains n integers, the elements of the array. ----- Output Format ----- Print \\"YES\\" if it is possible to make all elements equal. Otherwise, print \\"NO\\". ----- Constraints ----- 1 ≤ n ≤ 10^3 0 ≤ array elements ≤ 10^3 ----- Sample Input 1 ----- 3 1 2 3 ----- Sample Output 1 ----- YES ----- Sample Input 2 ----- 4 1 2 4 5 ----- Sample Output 2 ----- NO ----- Explanation 1 ----- In the first sample, you can make all elements equal to 2: - 1 can be incremented to 2. - 2 is already 2. - 3 can be decremented to 2. In the second sample, it is not possible to make all elements equal only by adding/subtracting 1.","solution":"def can_make_elements_equal(arr): Determines if it is possible to make all elements equal by adding or subtracting 1 any number of times to any element in the list. Parameters: arr (list): A list of integers. Returns: str: \'YES\' if it is possible to make all elements equal, otherwise \'NO\'. max_element = max(arr) min_element = min(arr) # To make all elements equal, the difference between the max and min elements should not be more than 2. if max_element - min_element > 2: return \\"NO\\" else: return \\"YES\\""},{"question":"In a multidimensional grid, represented by an M x N matrix, you start at the top-left corner of the grid (0, 0) and you want to move to the bottom-right corner of the grid (M-1, N-1). Each cell in the grid contains a value representing the cost to enter that cell. The objective is to find a path from the top-left corner to the bottom-right corner that minimizes the total cost. From any cell, you can only move right or down to the adjacent cell. Write a program to compute the minimum cost to travel from the top-left corner to the bottom-right corner. # Input The input consists of multiple datasets, each in the following format. M N a11 a12 ... a1N a21 a22 ... a2N ... aM1 aM2 ... aMN First, an integer M and N denoting the dimensions of the grid, followed by M lines each containing N integers, representing the cost to enter each cell. The end of the input is indicated by a line containing two zeros. Constraints: - 1 ≤ M, N ≤ 100 - 0 ≤ aij ≤ 1000, where aij is the cost to enter the cell at row i and column j. # Output For each dataset, output a single integer representing the minimum cost to travel from the top-left corner to the bottom-right corner. # Example Input 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 0 0 Output 7 3","solution":"def min_cost(grid): Given a 2D grid with costs, compute the minimum travel cost from the top-left to the bottom-right cell. You can move only right or down. M = len(grid) N = len(grid[0]) # Create a cost matrix to store the minimum cost path cost = [[0 for _ in range(N)] for _ in range(M)] cost[0][0] = grid[0][0] # Initialize first row of cost matrix for i in range(1, N): cost[0][i] = cost[0][i - 1] + grid[0][i] # Initialize first column of cost matrix for j in range(1, M): cost[j][0] = cost[j - 1][0] + grid[j][0] # Construct the rest of the cost matrix for i in range(1, M): for j in range(1, N): cost[i][j] = min(cost[i - 1][j], cost[i][j - 1]) + grid[i][j] return cost[M - 1][N - 1] def read_input(input_string): input_data = input_string.strip().split(\\"n\\") results = [] index = 0 while index < len(input_data): line = input_data[index].strip() M, N = map(int, line.split()) if M == 0 and N == 0: break grid = [] for _ in range(M): index += 1 row = list(map(int, input_data[index].strip().split())) grid.append(row) results.append(min_cost(grid)) index += 1 # move to the next M,N line return results"},{"question":"You are given two strings, s1 and s2. Determine if one string is a permutation of the other. A permutation is a rearrangement of letters. Example: Given s1 = \\"abc\\" and s2 = \\"bca\\", Return true because \\"bca\\" is a permutation of \\"abc\\". Given s1 = \\"abc\\" and s2 = \\"abd\\", Return false because \\"abd\\" is not a permutation of any rearrangement of \\"abc\\".","solution":"def are_permutations(s1, s2): Determines if one string is a permutation of the other. Params: s1: A string s2: A string Returns: True if s1 is a permutation of s2, False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Write a function that, given an array of integers and an integer target, returns the indices of the two numbers such that they add up to the target. Assume each input would have exactly one solution, and you may not use the same element twice. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Input: nums = [3, 3], target = 6 Output: [0, 1] Restrictions: - The input array \\"nums\\" will contain integers. - The array length will be in the range [2, 1000]. - Each integer in the array is in the range [-10^9, 10^9]. - The target is guaranteed to be within the same range. Note: You may assume that each input would have exactly one solution.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. :param nums: List of integers. :param target: Integer target. :return: List containing two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"A world-renowned computer scientist, Dr. Euler, has just created a new game involving colorful marbles and a grid. The grid has n rows and m columns, with each cell in the grid containing one marble. Each marble has a distinct color, represented by a distinct integer. Dr. Euler wants to play the following game: you can choose any square subgrid within the grid, then you can make all the marbles in that subgrid the same color. The goal is to end up with as few different colors of marbles as possible in the entire grid. More formally, after any number of moves, you need to determine the smallest number of marbles colors that will remain. -----Input----- The first line contains two integers n and m (1 le n, m le 50), representing the number of rows and columns. The following n lines each contain m distinct integers a_{ij} (1 le a_{ij} le 2500), representing the color of the marble at the i-th row and j-th column. -----Output----- Print the minimum number of different marble colors that can remain after making an optimal sequence of moves. -----Examples----- Input 2 3 1 2 3 4 5 6 Output 6 Input 4 4 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Output 9 Input 3 3 5 1 4 2 1 3 8 6 1 Output 3 -----Note----- In the first example, you need to make each color in its subgrid the same. In the second example, the minimum number of different marbles is achieved by choosing three color groups out of the distinct marbles. In the third example, making the subgrids around color \'1\' will reduce the board to three different colors of marbles.","solution":"def min_colors_after_moves(n, m, grid): Returns the minimum number of distinct marble colors that will remain. # Since all marbles have distinct colors initially, the solution is simply # the number of distinct colors in the initial grid. colors = set() for row in grid: for color in row: colors.add(color) return len(colors)"},{"question":"The kingdom of Algoria is under siege by fearsome dragons. The brave knight Lancelot must decide the order in which he will face these dragons. Each dragon has a specific strength and a specific time it will take to defeat it. To maximize his chance of success, Lancelot should face the dragons in an order such that the total time spent in defeating them is minimized. The knight starts with a certain amount of power, and as he fights each dragon, his power decreases by the strength of the dragon. If the knight\'s power ever goes below zero, he cannot proceed further, and the kingdom is lost. Given the strength and time of each dragon, determine the optimal order in which Lancelot should face the dragons to minimize the total time spent facing the dragons. INPUT: The first line contains T denoting the number of test cases. Each test case consists of two lines: the first line contains an integer \'n\' (the number of dragons) and the initial power of the knight \'p\'. The second line consists of \'n\' pairs of integers \'s[i]\' (strength of the dragon) and \'t[i]\' (time to defeat the dragon), representing each dragon. OUTPUT: For each test case, print the sequence of indices of the dragons in the order they should be faced. If the knight cannot defeat all dragons in any possible order, print \\"IMPOSSIBLE\\". CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ n ≤ 1000 1 ≤ s[i], t[i], p ≤ 10000 SAMPLE INPUT 2 3 15 3 1 5 3 2 2 2 10 6 5 10 15 SAMPLE OUTPUT 3 1 2 IMPOSSIBLE","solution":"def optimal_order(test_cases): results = [] for case in test_cases: n, p, dragons = case dragons_with_index = [(i + 1, s, t) for i, (s, t) in enumerate(dragons)] # Sort dragons by their strength, and then by time if they have the same strength sorted_dragons = sorted(dragons_with_index, key=lambda x: (x[1], x[2])) total_time = 0 possible = True for idx, strength, time in sorted_dragons: if p >= strength: p -= strength total_time += time else: possible = False break if possible: results.append(\\" \\".join(str(idx) for idx, _, _ in sorted_dragons)) else: results.append(\\"IMPOSSIBLE\\") return results # Parsing input and feeding it to the function def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, p = map(int, lines[index].split()) index += 1 dragons = [] for i in range(n): s, t = map(int, lines[index].split()) dragons.append((s, t)) index += 1 test_cases.append((n, p, dragons)) return test_cases input_str = 2 3 15 3 1 5 3 2 2 2 10 6 5 10 15 test_cases = parse_input(input_str) results = optimal_order(test_cases) for result in results: print(result)"},{"question":"Samantha is practicing her coding skills with some fun number games. She recently learned about a fascinating concept called \\"self-dividing numbers\\". A self-dividing number is a number that is divisible by every digit it contains. For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. However, 102 is not a self-dividing number because it contains the digit 0, and any number containing the digit 0 is not self-dividing. Samantha realizes that self-dividing numbers might be hidden in some ranges of numbers. She wants to create a list of such numbers within a given range. Can you help Samantha write a program to find all the self-dividing numbers in a specified range? Input The first line of input will be two integers, left and right (1 ≤ left ≤ right ≤ 10,000), representing the range [left, right]. Output Output all the self-dividing numbers in the specified range, each separated by a space. If there are no self-dividing numbers in the range, output an empty line. Examples Input 1 22 Output 1 2 3 4 5 6 7 8 9 11 12 15 22 Input 10 15 Output 11 12 15 Note In the first example, the self-dividing numbers between 1 and 22 are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, and 22. In the second example, the self-dividing numbers between 10 and 15 are 11, 12, and 15.","solution":"def self_dividing_number(num): Checks if a number is a self-dividing number. original_num = num while num > 0: digit = num % 10 if digit == 0 or original_num % digit != 0: return False num //= 10 return True def self_dividing_numbers(left, right): Returns a list of all self-dividing numbers between left and right, inclusive. return [num for num in range(left, right + 1) if self_dividing_number(num)]"},{"question":"You have been tasked to develop a system for managing conference schedules. Each conference has a unique identifier and can be scheduled in one or more time slots during the day. Each conference must be attended by a specific list of people. Your task is to ensure that no individual has conflicting schedules due to overlapping conference times. Write a function `schedule_conflicts(conf_schedule: List[List[int]]) -> int` that determines the minimum number of conferences that need to be rescheduled to remove all conflicts. The input is a list of lists where each list represents a conference schedule and contains the unique conference identifier followed by the list of time slots during which the conference is held. A time slot is represented by an integer. Input: - The first line contains the number of conferences n. - The next n lines each contain a list where the first element is the conference identifier and the subsequent elements are the time slots for that conference. Output: - A single integer representing the minimum number of conferences that must be rescheduled to remove all conflicts. Constraints: - 1 ≤ n ≤ 100 - 1 ≤ Time slots per conference ≤ 10 - 1 ≤ Conference identifier ≤ 1000 - 1 ≤ Time slot values ≤ 100 Example: Input: 3 1 1 2 2 2 3 3 1 3 Output: 1 Explanation: Conference 1 uses time slots 1 and 2. Conference 2 uses time slots 2 and 3. Conference 3 uses time slots 1 and 3. Rescheduling any one of the conferences will resolve the overlap, so the minimum number of conferences to reschedule is 1.","solution":"from collections import defaultdict def schedule_conflicts(conf_schedule): Determine the minimum number of conferences that need to be rescheduled to remove all conflicts. Args: conf_schedule (list of lists): Each list contains a conference identifier followed by the time slots the conference is using. Returns: int: The minimum number of conferences that must be rescheduled to remove all conflicts. time_slot_dict = defaultdict(list) for conf in conf_schedule: conf_id = conf[0] for slot in conf[1:]: time_slot_dict[slot].append(conf_id) conflict_count = defaultdict(int) for conf_ids in time_slot_dict.values(): if len(conf_ids) > 1: for conf_id in conf_ids: conflict_count[conf_id] += 1 reschedule_count = 0 while conflict_count: # Find the conference with the most conflicts max_conflict_id = max(conflict_count, key=conflict_count.get) reschedule_count += 1 # Remove this conference from conflicting lists for slot in conf_schedule[max_conflict_id - 1][1:]: time_slot_dict[slot].remove(max_conflict_id) if len(time_slot_dict[slot]) <= 1: for conf_id in time_slot_dict[slot]: if conf_id in conflict_count: del conflict_count[conf_id] del conflict_count[max_conflict_id] return reschedule_count"},{"question":"You are given an array of n integers. Let\'s define the \\"peak element\\" in an array as an element that is strictly greater than its neighbors. Find the index of any one peak element. If the array contains multiple peaks, return the index of any of them. - Note that the boundary elements are considered to have only one neighbor at the edge of the array. Thus, for the first element, only the second element is considered its neighbor and vice versa. -----Input----- The first line contains an integer n (1 le n le 10^5) - the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) - the elements of the array. -----Output----- Output a single integer - the index of any peak element. If the array contains multiple peaks, output any of their indices. Note that the index should be 1-based. -----Examples----- Input 5 1 3 2 4 1 Output 2 Input 3 1 2 3 Output 3","solution":"def find_peak_element(arr): Returns the index of any peak element in the array. The index is 1-based. n = len(arr) # If there\'s only one element, it\'s a peak if n == 1: return 1 # Check the first and last elements if arr[0] > arr[1]: return 1 if arr[n - 1] > arr[n - 2]: return n # Check middle elements for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: return i + 1 # If no peak is found, return -1 (shouldn\'t happen with valid inputs) return -1"},{"question":"You are given a list of N strings where each string can contain only lowercase letters (\'a\'-\'z\') and is guaranteed to have a length of exactly M. Your task is to determine the longest common prefix among all the strings in the list. Write a function that takes in the list of strings and returns the longest common prefix. Constraints * 1 leq N leq 1000 * 1 leq M leq 100 Input Input is given from Standard Input in the following format: N M string_1 string_2 vdots string_N Output Output the longest common prefix among all the strings. If no common prefix exists, output an empty string. Examples Input 5 3 abc abd abe abf abg Output ab Input 4 6 abcdeq abcdef abcdel abcdef Output abcde Input 3 4 abcd bcda cdab Output","solution":"def longest_common_prefix(strings): Returns the longest common prefix among the list of strings. if not strings: return \\"\\" # Initialize the prefix to the first string prefix = strings[0] for s in strings[1:]: # Find the common prefix between the current prefix and string s common_length = min(len(prefix), len(s)) for i in range(common_length): if prefix[i] != s[i]: common_length = i break prefix = prefix[:common_length] if not prefix: break return prefix"},{"question":"Create a function named `symmetric_sum` that takes an integer list `nums` of even length and returns a new list where each element is the sum of pairs of elements from the original list that are equidistant from the ends. For example: - For the input list `[1, 2, 3, 4, 5, 6]`, the pairs would be `(1, 6)`, `(2, 5)`, and `(3, 4)`. The function should return `[7, 7, 7]` (since 1+6=7, 2+5=7, and 3+4=7). - For the input list `[10, 20, 30, 40, 50, 60, 70, 80]`, the pairs would be `(10, 80)`, `(20, 70)`, `(30, 60)`, and `(40, 50)`. The function should return `[90, 90, 90, 90]`. The given list will always have an even number of elements, so you don\'t need to handle cases with odd-length lists. ```python def symmetric_sum(nums): result = [] n = len(nums) // 2 for i in range(n): result.append(nums[i] + nums[-(i+1)]) return result # Example Usage print(symmetric_sum([1, 2, 3, 4, 5, 6])) # Output: [7, 7, 7] print(symmetric_sum([10, 20, 30, 40, 50, 60, 70, 80])) # Output: [90, 90, 90, 90] ```","solution":"def symmetric_sum(nums): Returns a new list where each element is the sum of pairs of elements from the original list that are equidistant from the ends. Parameters: nums (list of int): List of integers of even length. Returns: list of int: New list with the summed pairs. result = [] n = len(nums) // 2 for i in range(n): result.append(nums[i] + nums[-(i + 1)]) return result # Example Usage print(symmetric_sum([1, 2, 3, 4, 5, 6])) # Output: [7, 7, 7] print(symmetric_sum([10, 20, 30, 40, 50, 60, 70, 80])) # Output: [90, 90, 90, 90]"},{"question":"Imagine you are given a string that consists of lowercase letters and spaces. Write a function that returns the length of the longest word within the string. If the string is empty or consists only of spaces, return 0. Input - A string `s` which consists of lowercase letters and spaces. Output - An integer representing the length of the longest word in the string. Constraints: - The input string\'s length will not exceed 1000 characters. Example: Input ``` \'the quick brown fox jumps over the lazy dog\' ``` Output ``` 5 ``` Input ``` \' \' ``` Output ``` 0 ``` Input ``` \'hello\' ``` Output ``` 5 ```","solution":"def length_of_longest_word(s): Returns the length of the longest word in the string s. if not s.strip(): return 0 words = s.split() longest_word_length = max(len(word) for word in words) return longest_word_length"},{"question":"A music streaming service has implemented a system to create custom playlists based on user preferences. The service collects multiple songs the user is interested in, determined by their recent listens. Each song is represented as a string of lowercase letters, and all songs have the same length. The service allows creating a playlist by selecting non-overlapping substrings (of length 1 or more) from the provided songs and concatenating them in any order. For example, if the song is represented by \\"abcd\\", some possible playlists are: - \\"abcd\\" - \\"ab + cd\\" - \\"a + b + c + d\\" - \\"cd + ab\\" - \\"d + a + b + c\\" Given the user\'s songs, you need to determine the number of distinct playlists that can be created by selecting non-overlapping substrings and rearranging them. Input The entire input looks like the following: > the number of datasets = n > length of each song = k > 1st song > 2nd song > ... > n-th song > Each song consists of k lowercase letters where 2 ≤ k ≤ 10. Output For each dataset, print the number of distinct playlists that can be created in a line. No other characters should appear in the output. Example Input 3 4 abcd aabb wxyz Output 16 8 16","solution":"import itertools def factorial(n): if n == 0 or n == 1: return 1 return n * factorial(n-1) def calculate_playlists_count(song): k = len(song) all_permutations = set([\'\'.join(p) for p in itertools.permutations(song)]) return len(all_permutations) def custom_playlists(n, k, songs): results = [] for song in songs: results.append(calculate_playlists_count(song)) return results def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) songs = data[2:2 + n] results = custom_playlists(n, k, songs) for result in results: print(result)"},{"question":"Given a string containing only the characters \'(\' and \')\', determine the maximum length of a balanced substring. A balanced substring is defined as a substring with equal number of \'(\' and \')\', where for every prefix of the substring, the number of \'(\' is never less than the number of \')\'. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. For each test case, there is a single line containing a string s (1 leq |s| leq 10^4) composed of only the characters \'(\' and \')\'. -----Output----- For each test case, print a single integer — the maximum length of a balanced substring. -----Examples----- Input 3 (()()) )()()) ()((())) Output 6 4 4 -----Note----- In the first test case, the entire string is balanced and its length is 6. In the second test case, the substring \\"()()\\" from index 1 to index 4 (0-based indexing) is the longest balanced substring with a length of 4. In the third test case, the substring \\"()\\" from index 1 to 2 (0-based indexing) or from index 4 to 5 is a balanced substring with a length of 2, but the maximum length is the substring \\"()(())\\" from index 2 to index 7 (0-based indexing) with a length of 6.","solution":"def max_balanced_substring(s): Returns the maximum length of a balanced substring for the given string s. stack = [] max_len = 0 last_invalid = -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - last_invalid) else: last_invalid = i return max_len def max_balanced_substring_multiple_cases(test_cases): For a list of multiple test cases, returns the list of results for each test case. results = [] for case in test_cases: results.append(max_balanced_substring(case)) return results"},{"question":"Mira is fascinated by patterns and she recently discovered an interesting one called the \\"zigzag sequence\\". A zigzag sequence is a sequence of numbers in which the numbers alternatively go up and down. Given an array of n unique integers, you need to transform it into a zigzag sequence. The resultant array should have the following property: * a1 < a2 > a3 < a4 > a5 < ... Your task is to rearrange the array such that it forms a zigzag sequence. Input The first line contains an integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n unique integers separated by spaces. Each integer is between -10^6 and 10^6. Output Print the rearranged zigzag sequence in a single line. If there are multiple valid answers, print any. Examples Input 7 4 3 7 8 6 2 1 Output 3 7 4 8 2 6 1 Input 6 1 4 3 2 6 5 Output 1 4 2 6 3 5 Note In the first example, the array [4, 3, 7, 8, 6, 2, 1] can be rearranged to [3, 7, 4, 8, 2, 6, 1] to form a zigzag sequence. In the second example, the array [1, 4, 3, 2, 6, 5] can be rearranged to [1, 4, 2, 6, 3, 5] to form a zigzag sequence. A zigzag sequence can have multiple valid configurations as long as the zigzag property is maintained.","solution":"def zigzag_sequence(n, arr): Rearranges the given array into a zigzag sequence. Args: - n: integer, the size of the array - arr: list of integers, the array to be rearranged Returns: - list of integers, the rearranged array in zigzag sequence arr.sort() # Let\'s work with an alternating high-low approach result = [0] * n left, right = 0, n - 1 for i in range(n): if i % 2 == 0: result[i] = arr[left] left += 1 else: result[i] = arr[right] right -= 1 return result"},{"question":"A spaceship is scheduled to travel from Earth to a distant planet. The journey is divided into n segments, each with a certain amount of fuel required and energy units potentially gained from observing space scenery. Initially, the spaceship has a limited amount of fuel and energy. On each segment, the spaceship can either consume fuel to proceed through and gain energy or it can skip the segment to save fuel. Each segment has its own fuel requirement and potential energy gain. The goal is to maximize the total energy gained by the end of the journey, without running out of fuel. Input - The first line contains three integers n, f, and e (1 ≤ n ≤ 1000, 1 ≤ f ≤ 10000, 0 ≤ e ≤ 10000), where n is the number of segments, f is the initial fuel amount, and e is the initial energy. - Each of the next n lines contains two integers fi and ei (1 ≤ fi ≤ 1000, 0 ≤ ei ≤ 1000), which are the fuel requirement and energy gain for the i-th segment. Output - Print a single integer — the maximum total energy that can be gained by the end of the journey. Example Input 5 10 0 2 5 3 7 4 3 5 8 2 6 Output 21","solution":"def max_energy(n, f, e, segments): # Initialize a 2D list for DP tracking dp = [[-float(\'inf\')] * (f + 1) for _ in range(n + 1)] dp[0][f] = e # Starting point, initial fuel and initial energy # Populate the DP table for i in range(n): fi, ei = segments[i] for current_fuel in range(f + 1): if dp[i][current_fuel] != -float(\'inf\'): # Skip the segment, carry over the energy dp[i + 1][current_fuel] = max(dp[i + 1][current_fuel], dp[i][current_fuel]) # Take the segment if enough fuel is present if current_fuel >= fi: dp[i + 1][current_fuel - fi] = max(dp[i + 1][current_fuel - fi], dp[i][current_fuel] + ei) # Return the maximum energy possible by the end of all segments return max(dp[n]) # Example n = 5 f = 10 e = 0 segments = [(2, 5), (3, 7), (4, 3), (5, 8), (2, 6)] print(max_energy(n, f, e, segments)) # Expected output: 21"},{"question":"Searching for Books at the Library: Jamie and Sam are collecting vintage books and want to find books together at a library. Jamie can only select books with page counts that are a multiple of A while Sam can only select books with page counts that are a multiple of B. They want to select books with the smallest number of pages such that both can find a book with the same page count. -----Input:----- - The first line contains Q, the number of queries. The following Q lines contain two integers A and B each. -----Output:----- For each query, output a single line with the smallest number of pages for the book. -----Constraints----- - 1 leq Q leq 1000 - 1 leq A, B leq 10^8 -----Sample Input:----- 1 4 6 -----Sample Output:----- 12","solution":"import math def find_common_page_count(A, B): Returns the smallest number of pages such that both Jamie and Sam can find a book with the same page count, given they select books with page counts that are multiples of A and B respectively. # Using the formula for LCM (Least Common Multiple) return abs(A * B) // math.gcd(A, B) def process_queries(queries): Processes a list of queries and returns the results for each query. Each query contains two integers A and B. results = [] for A, B in queries: results.append(find_common_page_count(A, B)) return results"},{"question":"Snuke is participating in a programming competition where he needs to solve the \\"Optimal Path in Grid\\" problem. The problem involves an N x M grid, where each cell contains a positive integer indicating the cost of stepping into that cell. Snuke starts at the top-left corner of the grid (1,1) and needs to reach the bottom-right corner (N,M). He can only move to the right or down from any cell. The goal is to find the minimum cost required to travel from the top-left corner to the bottom-right corner. Write a program that computes the minimum path cost from the top-left to the bottom-right corner of the grid. Constraints: * 1 ≤ N, M ≤ 1000 * 1 ≤ cost_i,j ≤ 10^9 * All values in the input are integers. Input The input is given from Standard Input in the following format: N M cost_1,1 cost_1,2 ... cost_1,M cost_2,1 cost_2,2 ... cost_2,M : cost_N,1 cost_N,2 ... cost_N,M Output Print the minimum cost required to travel from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 21 Input 4 4 1 3 1 2 3 4 2 1 1 2 3 1 3 1 2 1 Output 10","solution":"def min_path_cost(grid): Returns the minimum cost required to travel from the top-left to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Create a dp table to store the minimum cost to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer will be in the bottom-right corner return dp[-1][-1] def read_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [] idx = 2 for i in range(n): row = list(map(int, data[idx:idx+m])) grid.append(row) idx += m return n, m, grid def solve(): n, m, grid = read_input() result = min_path_cost(grid) print(result)"},{"question":"You are given a list of integers and a target integer `k`. Remove any duplicate numbers from the list and then find a pair of distinct numbers from the list that add up to `k`. If multiple pairs exist, return the pair with the smallest first number, if multiple pairs with the same smallest number exist, return the pair with the smallest second number. If no such pair exists, return an empty list. Write a function `find_pair(numbers, k)` that takes a list of integers `numbers` and an integer `k`, and returns a list containing the two integers that satisfy the criteria mentioned above. If no such pair exists, return an empty list. # Example: ```python find_pair([1, 2, 3, 4, 3, 2, 1], 5) -> [1, 4] find_pair([1, 2, 2, 4, 3, 1], 6) -> [2, 4] find_pair([1, 2, 3], 6) -> [] ``` # Constraints: - The list `numbers` can be empty. - The integers in the list can be both positive and negative. - All integers in the output list should be distinct and sorted in ascending order.","solution":"def find_pair(numbers, k): Finds a pair of distinct numbers from the list that add up to k, ensuring the pair with the smallest first number is returned. If multiple pairs with the same smallest number exist, returns the pair with the smallest second number. Returns an empty list if no such pair exists. numbers = list(set(numbers)) # Remove duplicates numbers.sort() # Sort the numbers left = 0 right = len(numbers) - 1 while left < right: current_sum = numbers[left] + numbers[right] if current_sum == k: return [numbers[left], numbers[right]] elif current_sum < k: left += 1 else: right -= 1 return []"},{"question":"Given an integer array nums, return the sum of its elements. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: 15 Explanation: Sum of all elements = 1 + 2 + 3 + 4 + 5 = 15 Example 2: Input: nums = [10, -2, 4, 1] Output: 13 Explanation: Sum of all elements = 10 + (-2) + 4 + 1 = 13 Your Task: You don\'t need to read input or print anything. Complete the function arraySum() which takes nums as input parameter and returns the sum of its elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 1000 -10^4 <= nums[i] <= 10^4","solution":"def array_sum(nums): Returns the sum of the elements in the list nums. Parameters: nums (list): A list of integers. Returns: int: The sum of the elements in nums. return sum(nums)"},{"question":"Given a list of N integers, your task is to determine the count of unique integers in the list. ------ Input Format ------ - The first line contains a single integer N — the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. ------ Output Format ------ Output a single integer — the count of unique integers in the list. ------ Constraints ------ 1 ≤ N ≤ 1000 −1000 ≤ A_i ≤ 1000 (where A_i is an integer in the list) ------ Sample Input 1 ------ 6 1 2 2 3 4 4 ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ The unique integers in the list are 1, 2, 3, and 4. Hence, the count is 4. ------ Sample Input 2 ------ 5 7 7 7 7 7 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ The unique integer in the list is 7. Hence, the count is 1.","solution":"def count_unique_integers(n, integers_list): Returns the count of unique integers in the list. Parameters: n (int): The number of elements in the list. integers_list (list of int): The list of integers. Returns: int: The count of unique integers in the list. return len(set(integers_list))"},{"question":"Petya is enthusiastic about prime numbers and has recently been pondering over rectangular grids. He stumbled upon a puzzle involving a grid filled with prime numbers and became intrigued. Given an n x m grid filled with integers, write a program that finds the largest prime number within each row. If a row does not contain any prime number, return -1 for that row. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). They are the number of rows and columns, respectively. The next n lines each contain m integers representing the elements of the grid. Each number is between 1 and 10^6 inclusive. Output Output n lines, where each line contains the largest prime number in the corresponding row. If a row does not contain any prime number, output -1 for that row. Examples Input 3 4 10 15 3 7 5 6 8 13 1 4 8 6 Output 7 13 -1","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def largest_prime_in_rows(grid): Finds the largest prime number within each row of the grid. If a row does not contain any prime number, return -1 for that row. result = [] for row in grid: largest_prime = -1 for num in row: if is_prime(num): largest_prime = max(largest_prime, num) result.append(largest_prime) return result def process_grid(n, m, grid): Process the input grid and return the largest prime number in each row. return largest_prime_in_rows(grid)"},{"question":"Given a string `s`, find the length of the longest substring where characters are in alphabetical order. Return the length of that substring. # Example ```python s = \\"abcaacd\\" # the longest substring with characters in alphabetical order are \\"abc\\" and \\"acd\\" # and their length is 3 return 3 ``` # Guidelines - The characters should be in strictly increasing ASCII order. - If two or more substrings have the same length, return the length of any one of them. # Constraints - 1 <= |s| <= 10^4 - s contains only English letters (lowercase and uppercase).","solution":"def longest_alpha_substring_length(s): Returns the length of the longest substring where characters are in alphabetical order. max_length = 1 current_length = 1 if not s: return 0 for i in range(1, len(s)): if s[i] > s[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"You are given an array of integers where each element represents the price of a stock on a given day. Write a function `max_profit()` that calculates the maximum profit you could have achieved by buying on one day and selling on another day. Note that you must buy before you sell. ```python >>> prices = [7, 1, 5, 3, 6, 4] >>> max_profit(prices) 5 ``` In the example, if you buy on day 2 (price = 1) and sell on day 5 (price = 6), your profit would be 6 - 1 = 5, which is the maximum possible profit.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of daily stock prices. You must buy before you sell. :param prices: List[int] :return: int if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif (price - min_price) > max_profit: max_profit = price - min_price return max_profit"},{"question":"A logistics company needs to optimize their delivery routes. They have several delivery points scattered across a grid and the aim is to set up routing hubs such that each delivery point is within the minimum possible distance from a nearest hub. Specifically, they need to place 2 hubs in such a way that the maximum distance from any delivery point to its nearest hub is minimized. Input The first line contains an integer n (1 ≤ n ≤ 105) which indicates the number of delivery points. The next n lines each contain two integers xi and yi (0 ≤ xi, yi ≤ 109), representing the coordinates of the delivery points on the grid. Output Output the minimum possible maximum distance. In the next line, print one pair of coordinates for each hub that represents their optimal locations. Print the coordinates with 6 digits after the decimal point. If there are multiple solutions, print any of them. SAMPLE INPUT 3 0 0 10 10 20 20 SAMPLE OUTPUT 10.000000 0.000000 0.000000 20.000000 20.000000","solution":"def min_max_distance_to_hubs(n, points): import math from heapq import heappush, heappop def calc_max_distance(hub1, hub2): hub1_distances = [math.dist(hub1, point) for point in points] hub2_distances = [math.dist(hub2, point) for point in points] min_distances = [min(d1, d2) for d1, d2 in zip(hub1_distances, hub2_distances)] return max(min_distances) def find_optimal_hubs(points): # As a simple heuristic, choose the most separated points to be hubs max_distance = -1 hub1, hub2 = None, None for i in range(n): for j in range(i + 1, n): d = math.dist(points[i], points[j]) if d > max_distance: max_distance = d hub1, hub2 = points[i], points[j] return hub1, hub2 hub1, hub2 = find_optimal_hubs(points) max_distance = calc_max_distance(hub1, hub2) return max_distance, hub1, hub2 # Sample input points = [(0, 0), (10, 10), (20, 20)] n = len(points) max_distance, hub1, hub2 = min_max_distance_to_hubs(n, points) print(f\\"{max_distance:.6f}\\") print(f\\"{hub1[0]:.6f} {hub1[1]:.6f}\\") print(f\\"{hub2[0]:.6f} {hub2[1]:.6f}\\")"},{"question":"# Task Write a function that takes an integer as input and returns a list of strings representing the Roman numeral representation of all numbers from 1 to that integer (inclusive). Roman numerals are represented by the following symbols: - I -> 1 - V -> 5 - X -> 10 - L -> 50 - C -> 100 - D -> 500 - M -> 1000 The rules for combining these symbols are as follows: - The value of a symbol is added to the total value if it is not followed by a greater symbol. - If a symbol is followed by a greater symbol, its value is subtracted from the total value. Examples: - 4 -> IV (5 - 1) - 9 -> IX (10 - 1) - 58 -> LVIII (50 + 5 + 3) - 1994 -> MCMXCIV (1000 + (1000-100) + (100-10) + (5-1)) # Input - An integer `n` (1 <= n <= 3999) # Output - A list of strings where each string contains the Roman numeral representation of the corresponding integer from 1 to n. # Example ```python to_roman(3) -> [\\"I\\", \\"II\\", \\"III\\"] to_roman(5) -> [\\"I\\", \\"II\\", \\"III\\", \\"IV\\", \\"V\\"] ``` # Hint Consider creating a lookup table for the Roman numeral equivalents of specific values and think of a way to construct Roman numerals for any given integer using this table.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num def to_roman(n): Returns a list of strings representing the Roman numeral representation of all numbers from 1 to n (inclusive). return [int_to_roman(i) for i in range(1, n + 1)]"},{"question":"You are given a sequence b consisting of n integers. You can perform an operation where you choose a subsequence of the sequence and increment all its elements by 1. A subsequence can be any sequence that can be derived from the original sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to make all elements of the sequence equal using the minimum number of operations. For example, for the sequence [1, 2, 1, 3] the answer is 2 (you can increment the subsequence [1, 1] to 2, 2 and then increment the subsequence [2, 2, 3] to 3, 3, 3). -----Input----- The first line of the input contains one integer n (1 le n le 2 cdot 10^5) — the number of elements in b. The second line of the input contains n integers b_1, b_2, dots, b_n (1 le b_i le 2 cdot 10^5), where b_i is the i-th element of b. -----Output----- In the first line of the output print m — the minimum number of operations needed to make all elements of the sequence equal. -----Examples----- Input 4 1 2 1 3 Output 2 Input 3 1 1 1 Output 0 Input 5 1 3 5 7 9 Output 4 Input 5 5 5 5 5 5 Output 0 -----Note----- In the first example, you can increment the subsequence [1, 1] to 2, 2 and then increment the subsequence [2, 2, 3] to 3, 3, 3 thus requiring 2 operations. In the second example, all elements are already equal so no operation is needed. In the third example, you can increment the subsequence [1, 3, 5, 7] to 2, 4, 6, 8 and then increment the subsequence [2, 4, 6, 8, 9] to 3, 5, 7, 9, 10 and so forth, requiring 4 operations in total.","solution":"def min_operations_to_make_elements_equal(n, b): Returns the minimum number of operations required to make all elements equal. max_element = max(b) min_element = min(b) return max_element - min_element"},{"question":"You are working on a robot simulation project where you have a NxM grid representing the office layout. The robot needs to navigate from its starting point to a destination while avoiding obstacles. At present, the robot can only move up, down, left or right, but it cannot move diagonally. You need to determine if there is a way for the robot to reach its destination without hitting any obstacles. The grid has some cells marked as obstacles. The robot starts at cell (Sx, Sy) and needs to reach cell (Dx, Dy). If the robot can reach the destination, print \\"ROBOT REACHED\\", otherwise print \\"OBSTACLE DETECTED\\". Input: - The first line consists of four integers N, M, Sx, Sy, Dx, Dy. N and M represent the dimensions of the grid, Sx and Sy are the starting coordinates, and Dx and Dy are the destination coordinates. - The next line contains an integer K which represents the number of obstacles. - Each of the next K lines consists of two integers representing the coordinates of the obstacles. Output: - Print \\"ROBOT REACHED\\" if the destination can be reached, otherwise print \\"OBSTACLE DETECTED\\". Constraints: 1 ≤ N, M ≤ 1000 1 ≤ Sx, Sy, Dx, Dy ≤ N, M 0 ≤ K ≤ 10^5 1 ≤ x, y ≤ N, M (coordinates of obstacles) Example Input: 5 5 1 1 5 5 3 1 2 2 3 3 4 Example Output: ROBOT REACHED","solution":"from collections import deque def can_robot_reach_destination(N, M, Sx, Sy, Dx, Dy, obstacles): grid = [[0]*M for _ in range(N)] for x, y in obstacles: grid[x-1][y-1] = 1 # Mark obstacles in the grid def is_valid_move(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(Sx-1, Sy-1)]) grid[Sx-1][Sy-1] = -1 # Mark the start point to avoid revisiting while queue: x, y = queue.popleft() if x == Dx-1 and y == Dy-1: return \\"ROBOT REACHED\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): queue.append((nx, ny)) grid[nx][ny] = -1 # Mark as visited return \\"OBSTACLE DETECTED\\" def parse_input_and_run(): import sys input = sys.stdin.read data = input().strip().split() N, M, Sx, Sy, Dx, Dy = map(int, data[:6]) K = int(data[6]) obstacles = [] for i in range(K): x, y = map(int, data[7 + 2*i:9 + 2*i]) obstacles.append((x, y)) result = can_robot_reach_destination(N, M, Sx, Sy, Dx, Dy, obstacles) print(result)"},{"question":"Gina is an event organizer at the Tech Hub and is in charge of assigning seats to the event attendees. There is a single row with N seats, and each seat has a unique number from 1 to N. Gina wants to ensure that certain dynamic constraints are met after every event update. Specifically, she wants to know the number of attendees present within a specified range of seats. Your task is to implement a data structure that can efficiently handle the following types of queries: 1. Add an attendee to a specific seat. 2. Remove an attendee from a specific seat. 3. Count the number of attendees in a specified range of seats. Implement the `EventSeating` class that supports the following methods: 1. `addAttendee(seat: int)`: Adds an attendee to the seat `seat`. If the seat is already occupied, do nothing. 2. `removeAttendee(seat: int)`: Removes the attendee from the seat `seat`. If the seat is already empty, do nothing. 3. `countAttendees(start: int, end: int) -> int`: Returns the number of attendees between seats numbered `start` and `end` inclusive. -----Input:----- - The first line contains an integer Q, the number of queries to execute. - The next Q lines each describe a query in one of the following formats: - \\"A x\\": where `A` denotes adding an attendee to seat `x`. - \\"R x\\": where `R` denotes removing an attendee from seat `x`. - \\"C x y\\": where `C` denotes counting attendees from seat `x` to seat `y` inclusive. -----Output:----- For each \\"C x y\\" query, output the number of attendees in the specified range. -----Example:----- Input: 8 A 3 C 1 5 A 5 R 3 C 1 5 A 5 A 2 C 1 5 Output: 1 0 2 -----Constraints:----- - 1 leq Q leq 1000 - 1 leq N leq 100 - 1 leq x, y leq N - Each seat can either be occupied or empty, no attendee can occupy more than one seat at a time.","solution":"class EventSeating: def __init__(self, n): Initialize the EventSeating with N seats, all initially empty. :param n: Number of seats. self.n = n self.seats = [0] * (n + 1) # Use 1-based indexing for seats def addAttendee(self, seat: int): Adds an attendee to the seat if it\'s not already occupied. :param seat: The seat number to add an attendee to. if self.seats[seat] == 0: self.seats[seat] = 1 def removeAttendee(self, seat: int): Removes an attendee from the seat if it\'s not already empty. :param seat: The seat number to remove an attendee from. if self.seats[seat] == 1: self.seats[seat] = 0 def countAttendees(self, start: int, end: int) -> int: Returns the number of attendees between seats numbered start and end inclusive. :param start: The starting seat number. :param end: The ending seat number. :return: The count of attendees in the specified range. return sum(self.seats[start:end+1])"},{"question":"You are given an array of integers. Your task is to find the largest number that can be constructed by concatenating all the integers in the array. Your function should return this largest number as a string. Note: - Each integer in the array is non-negative. - The array may contain integers with different numbers of digits. # Example ```python Input: [10, 2] Output: \\"210\\" Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" ``` # Constraints - Do not use any built-in sorting functions. - The length of the array will be at most 100. - Each integer in the array will be in the range [0, 1,000].","solution":"def compare(x, y): if x + y > y + x: return -1 else: return 1 def largest_number(nums): nums = list(map(str, nums)) for i in range(len(nums)): for j in range(len(nums) - 1, i, -1): if compare(nums[j-1], nums[j]) > 0: nums[j], nums[j-1] = nums[j-1], nums[j] result = \'\'.join(nums) return result if result[0] != \'0\' else \'0\'"},{"question":"Given a grid with `n` rows and `m` columns, each cell of the grid either contains \'L\' (land), \'W\' (water), or \'R\' (rock). The \'L\' cells represent land that can be walked on, \'W\' cells represent water that cannot be crossed, and \'R\' cells represent rocks that cannot be crossed. Write a program to determine if there exists a path from the top-left corner of the grid (position `(0, 0)`) to the bottom-right corner of the grid (position `(n-1, m-1)`) using only vertical or horizontal movements. Input example 1: ``` 3 3 L R L L W R L L L ``` Output example 1: ``` Yes ``` Explanation: In this case, a possible path is (0,0) → (1,0) → (2,0) → (2,1) → (2,2). Input example 2: ``` 3 3 L R L R R R L L L ``` Output example 2: ``` No ``` Explanation: In this case, there is no possible path due to the obstacles. Input: - The input consists of multiple datasets. Each dataset begins with a line containing two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid respectively. This is followed by `n` lines, each containing `m` characters (\'L\', \'W\', or \'R\'). - The input ends when `n` and `m` are both 0. The number of datasets does not exceed 5. Output: - For each dataset, print \\"Yes\\" if there is a path from the top-left to the bottom-right, otherwise print \\"No\\". Example: ``` Input 3 3 L R L L W R L L L 3 3 L R L R R R L L L 0 0 Output Yes No ```","solution":"def path_exists(grid): n = len(grid) m = len(grid[0]) def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'L\' def dfs(x, y, visited): if x == n-1 and y == m-1: return True visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if (nx, ny) not in visited and is_valid(nx, ny): if dfs(nx, ny, visited): return True return False if grid[0][0] != \'L\' or grid[n-1][m-1] != \'L\': return \\"No\\" visited = set() return \\"Yes\\" if dfs(0, 0, visited) else \\"No\\" def check_grids(datasets): results = [] for data in datasets: n, m = data[0] grid = data[1] results.append(path_exists(grid)) return results"},{"question":"You are given a list of integers representing points earned by players in a series of games. Each player is represented by their unique ID, which is an integer, and points can be either positive (winning points) or negative (losing points). Your goal is to determine the player with the highest cumulative score at the end. However, in case of a tie (multiple players having the same highest score), the player with the lowest ID should be chosen. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines: - The first line of each test case contains an integer N, the number of entries in the list. - The next N lines contain two integers each, P and S, where P is the player ID and S is the score for that player in that game. ------ Output Format ------ For each test case, output on a new line the player ID with the highest cumulative score at the end. In case of a tie, output the player ID with the lowest numerical value. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 −1000 ≤ S ≤ 1000 1 ≤ P ≤ 10^9 - It is guaranteed that at least one player is mentioned in each test case. ----- Sample Input 1 ------ 2 5 1 10 2 -5 1 5 3 20 2 10 3 4 15 4 -5 4 5 ----- Sample Output 1 ------ 1 4 ----- Explanation 1 ------ Test case 1: - Player 1\'s cumulative score is 10 + 5 = 15 - Player 2\'s cumulative score is -5 + 10 = 5 - Player 3\'s cumulative score is 20 The highest score is 20, achieved by player 3. Test case 2: - Player 4\'s cumulative score is 15 - 5 + 5 = 15 Since there is only one player, player 4 is the answer.","solution":"def find_highest_scoring_player(test_cases): Given a list of test cases, each containing a list of player IDs and their scores, determine the player with the highest cumulative score. In case of a tie, the player with the lowest ID should be chosen. :param test_cases: List of test case data (list of tuples), where each tuple contains: - an integer N indicating the number of entries - a list of tuples, each containing two integers (P, S), representing the player ID and the score in that game. :return: List of player IDs with the highest cumulative score for each test case. results = [] for N, entries in test_cases: player_scores = {} for P, S in entries: if P in player_scores: player_scores[P] += S else: player_scores[P] = S max_score = None best_player = None for player, score in player_scores.items(): if max_score is None or score > max_score or (score == max_score and player < best_player): max_score = score best_player = player results.append(best_player) return results"},{"question":"In a magical land, there are M types of enchanted potions, each with a specific power level. You have N bottles, each containing one of the M potion types. Additionally, each bottle can be treated at most once to increase its power level by a given fixed amount. Your task is to find the minimum power level achievable for any bottle after at most one treatment on each bottle. # Input The first line contains an integer T specifying the number of test cases. For each test case: - The first line contains two integers N (number of bottles) and M (number of potion types). - The second line contains N space-separated integers representing the power levels of the potions in the bottles. - The third line contains M space-separated integers representing the fixed increase amount applicable to each type of potion. # Output For each test case, output a single integer representing the minimum power level for any bottle after at most one treatment on each bottle. # Constraints - 1 ≤ T ≤ 50 - 1 ≤ N, M ≤ 100 - 1 ≤ power level of any potion ≤ 1000 - 0 ≤ increase amount ≤ 1000 # Example Input: ``` 2 5 3 4 6 8 3 7 2 1 3 4 2 5 5 5 5 0 2 ``` Output: ``` 4 5 ``` # Explanation - In the first test case, there are 5 bottles and 3 types of potions. The second line represents the initial power levels of the bottles. The third line represents the increase amounts for each type of potion. The minimum power level achievable would be the initial power of 4 after considering that each bottle can be treated once. - In the second test case, there are 4 bottles, all of which contain the same type of potion. The increase amount for this type of potion is 0, so the power levels remain unchanged.","solution":"def minimum_power_level(T, test_cases): results = [] for case in test_cases: N, M, power_levels, increase_amounts = case min_power_level = float(\'inf\') for i in range(N): current_power = power_levels[i] for j in range(M): new_power = current_power + increase_amounts[j] if new_power < min_power_level: min_power_level = new_power results.append(min_power_level) return results T = 2 test_cases = [ (5, 3, [4, 6, 8, 3, 7], [2, 1, 3]), (4, 2, [5, 5, 5, 5], [0, 2]) ] print(minimum_power_level(T, test_cases)) # Example output would be: [4, 5]"},{"question":"Chef is organizing a marathon where T teams participate. Each team has N members. At the end of the marathon, each team receives a score based on the performance of its members. The score of a team is calculated as follows: - Consider the performance scores of all members of the team. - Find the median score among all team members. If N is even, the median is the average of the two middle scores. You need to output the teams sorted in increasing order of their median scores. If two teams have the same median score, preserve their original order from the input list. -----Input----- - The first line of the input contains two space-separated integers T and N denoting the number of teams and the number of members in each team. - The next T lines contain N space-separated integers each denoting the scores of the members of each team. -----Output----- Print T lines containing one integer each — the indices of the teams in the increasing order of their median scores. -----Constraints----- - 1 le T le 10^5 - 1 le N le 20 - 0 le text{score} le 1000 for each valid score -----Example Input----- 3 4 50 80 90 70 60 40 100 50 30 20 60 10 -----Example Output----- 3 1 2","solution":"def find_median(scores): scores.sort() n = len(scores) mid = n // 2 if n % 2 == 0: # Even number of elements return (scores[mid - 1] + scores[mid]) / 2 else: # Odd number of elements return scores[mid] def sort_teams_by_median(T, N, teams_scores): teams_with_medians = [] for index, scores in enumerate(teams_scores): median_score = find_median(scores) teams_with_medians.append((median_score, index + 1)) # store indices as 1-based # Sort by median score; preserve the original order for ties teams_with_medians.sort(key=lambda x: x[0]) return [team_index for (_, team_index) in teams_with_medians] def marathon(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) N = int(data[1]) teams_scores = [] index = 2 for _ in range(T): scores = list(map(int, data[index:index+N])) teams_scores.append(scores) index += N result = sort_teams_by_median(T, N, teams_scores) for team_index in result: print(team_index)"},{"question":"Given an array of n integers, and an integer k, determine whether there are two distinct indices i and j in the array such that arr[i] + arr[j] is equal to k. Output 1 if such indices exist, otherwise output 0. Example 1: Input: n = 5, arr = [1, 2, 3, 9, 10], k = 8 Output: 0 Explanation: There are no such elements in the array whose sum is 8. Example 2: Input: n = 4, arr = [1, 20, 3, 4], k = 24 Output: 1 Explanation: The elements 3 and 21 sum to 24. Your Task: You don\'t need to read input or print anything. Your task is to complete the function twoSum() which takes an integer n, an array of integers arr, and an integer k as input and returns the answer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= k <= 10^9","solution":"def twoSum(n, arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] = k. Parameters: n (int): The number of elements in the array. arr (list of int): The array of integers. k (int): The target sum. Returns: int: 1 if such indices exist, otherwise 0. seen = set() for value in arr: if k - value in seen: return 1 seen.add(value) return 0"},{"question":"You are given a list of integers, which represents the position of obstacles on a one-dimensional track, and a single integer K, which represents the maximum distance a runner can jump. The runner starts at position 0 and aims to reach or exceed the position of the furthest obstacle. The runner can only jump up to K units ahead at a time, and must land exactly on a position occupied by an obstacle or on the final position. Determine the minimum number of jumps the runner needs to achieve the goal. Constraints: * 1 ≤ Number of obstacles ≤ 10^5 * 1 ≤ K ≤ 10^5 * 1 ≤ Obstacle position ≤ 10^6 * The list of obstacle positions is sorted in ascending order. Input: An integer K on the first line. A list of integers representing the obstacle positions on the second line, space-separated. Output: An integer representing the minimum number of jumps required to reach or exceed the furthest obstacle. Example: Input: 4 1 2 3 7 Output: 2 Explanation: The runner can jump from position 0 to position 3 (3 units), and then from position 3 to position 7 (4 units), totaling 2 jumps. Input: 3 1 2 4 7 Output: 3 Explanation: The runner can jump from position 0 to position 2 (2 units), then from position 2 to position 4 (2 units), and finally from position 4 to position 7 (3 units), totaling 3 jumps.","solution":"def min_jumps(K, obstacles): Returns the minimum number of jumps required for the runner to reach or exceed the position of the furthest obstacle. :param K: int, maximum jump distance. :param obstacles: list of int, sorted positions of obstacles. :return: int, minimum number of jumps required. n = len(obstacles) # Initialize the current position current_position = 0 jumps = 0 i = 0 while current_position < obstacles[-1]: # Perform a jump jumps += 1 # Find the furthest reachable obstacle within the range [current_position, current_position + K] while i < n and obstacles[i] <= current_position + K: i += 1 if i == 0: # No further progress possible (Though given constraints should not lead to this) return -1 # Move to the furthest reachable obstacle current_position = obstacles[i - 1] return jumps"},{"question":"Aria the Architect has a rectangular grid of n rows and m columns, forming a city. Each cell of the grid initially contains a building of a certain height, described by matrix H of n rows and m columns, where H[i][j] denotes the height of the building at row i and column j. Aria wants to redesign the city such that the following conditions hold: * Each row of the matrix must be strictly increasing, meaning every building in a row should be taller than the previous one in the same row. * Each column of the matrix must be strictly increasing, meaning every building in a column should be taller than the previous one in the same column. To achieve this, Aria can increase the height of buildings. However, she cannot decrease the height of any building. Help Aria determine the minimum possible heights of the new matrix that respects the required conditions. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 250) — the number of rows and columns of the grid. Each of the following n lines contains m integers. The j-th integer in the i-th line denotes the height H[i][j] (1 ≤ H[i][j] ≤ 10^9) of the building at row i and column j. Output Output n lines, each containing m integers — the height of the buildings in the redesigned city. Examples Input 3 3 1 2 3 2 3 4 3 4 5 Output 1 2 3 2 3 4 3 4 5 Input 2 2 5 6 7 8 Output 5 6 7 8 Input 3 3 1 1 1 1 1 1 1 1 1 Output 1 2 3 2 3 4 3 4 5 Note In the first sample: - Each row is initially strictly increasing. - Each column is initially strictly increasing. - Hence, the original configuration itself is the answer. In the second sample: - Each row is initially strictly increasing. - Each column is initially strictly increasing. - Hence, the original configuration itself is the answer. In the third sample: - The initial configuration does not satisfy the conditions. - Adjustments are made to get the minimum possible heights that meet the conditions.","solution":"def redesign_city(n, m, H): result = [[0]*m for _ in range(n)] # We need to start with the initial heights while making sure rows and columns are strictly increasing max_rows = [0] * n max_cols = [0] * m # Step 1: Ensure each row is strictly increasing for i in range(n): for j in range(m): if j == 0: result[i][j] = H[i][j] else: result[i][j] = max(result[i][j-1] + 1, H[i][j]) max_rows[i] = result[i][-1] # Store the max height in the row # Step 2: Ensure each column is strictly increasing for j in range(m): for i in range(n): if i == 0: result[i][j] = max(result[i][j], H[i][j]) else: result[i][j] = max(result[i-1][j] + 1, result[i][j], H[i][j]) max_cols[j] = result[i][j] # Store the max height in the column return result"},{"question":"Mike has been given a task to explore different types of programming languages. He has found that some programming languages have an inherently modular design where each module imports other modules to be used in its execution. This forms a complex network of dependencies. Mike wants to analyze the dependency graph of a given modular system to determine the order in which the modules should be loaded such that every module is loaded before all the modules that depend on it are loaded. Given a list of dependencies, can you determine a valid loading order of the modules? If no valid order exists, return an empty list. Input: - The first line contains an integer n (2 ≤ n ≤ 1000), denoting the number of modules. - The second line contains an integer m (1 ≤ m ≤ 5000), denoting the number of dependencies. - The next m lines each contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n) indicating that module ai depends on module bi. Output: - Print a space-separated list of integers representing the valid loading order of modules. If no valid order exists, print an empty list. Examples: Input: 5 4 1 2 2 3 3 4 4 5 Output: 1 2 3 4 5 Input: 3 3 1 2 2 3 3 1 Output: (Note: There is a cycle in the dependencies, so no valid order exists.) Explanation: In the first example, the correct order to load modules is 1 -> 2 -> 3 -> 4 -> 5, as each module is dependent on the next module in sequence.","solution":"from collections import defaultdict, deque def find_loading_order(n, m, dependencies): in_degree = {i: 0 for i in range(1, n + 1)} graph = defaultdict(list) for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(result) == n: return result else: return [] def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) m = int(input_lines[1]) dependencies = [tuple(map(int, line.split())) for line in input_lines[2:]] return n, m, dependencies"},{"question":"You are organizing a day-long coding competition and need to calculate the total time each participant spent coding. Given an array of strings where each string represents a participant\'s log entry in the format \\"HH:MM START\\" or \\"HH:MM END\\", write a function that calculates the total coding time in minutes for each participant. Your function should take two arguments: 1. An array of log entries sorted by time. 2. An integer representing the total number of participants. The output should be an array of integers where the i-th element represents the total coding time (in minutes) for the i-th participant. Assume that log entries for each participant are well-formed, meaning every \\"START\\" is followed by an \\"END\\" before another \\"START\\". Here\'s an example input and output: Input: log_entries = [ \\"09:00 START\\", \\"10:00 END\\", \\"11:30 START\\", \\"12:30 END\\", \\"13:00 START\\", \\"14:00 END\\" ] participants = 3 Output: [60, 60, 60] Note: Each participant\'s log entries are mutually exclusive in time.","solution":"def calculate_coding_time(log_entries, participants): Calculate the total coding time in minutes for each participant. Parameters: log_entries (list of str): List of log entries in \\"HH:MM START\\" or \\"HH:MM END\\" format. participants (int): Total number of participants. Returns: list of int: A list where the i-th element represents the total coding time (in minutes) for the i-th participant. times = [0] * participants start_times = [None] * participants participant_idx = 0 for entry in log_entries: time, action = entry.split() hours, minutes = map(int, time.split(\':\')) current_minutes = hours * 60 + minutes if action == \\"START\\": start_times[participant_idx] = current_minutes elif action == \\"END\\": times[participant_idx] += current_minutes - start_times[participant_idx] participant_idx = (participant_idx + 1) % participants return times"},{"question":"Problem Statement: In the far-off land of Algorithmica, there is a mystical forest with magical trees. Each tree has a specific power level, and these trees are arranged in a row. The forest guardians have devised a method to harness the maximum power from contiguous subgroups of these trees. You are tasked with aiding the guardians by finding the maximum sum of any contiguous subarray within the power levels of the trees. A contiguous subarray is simply a subset of the array with consecutive elements and maintaining their order. Input Specification: - The first line of the input contains a single integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of trees in the row. - The second line contains N space-separated integers, representing the power levels of the trees. Output Specification: - For each test case, output the maximum sum of any contiguous subarray. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^4 ≤ Power levels ≤ 10^4 SAMPLE INPUT 2 5 1 -3 2 1 -1 3 -2 -3 4 SAMPLE OUTPUT 3 4 Explanation: For the first test case: The maximum sum of a contiguous subarray is obtained by [2, 1], which sums to 3. For the second test case: The maximum sum of a contiguous subarray is obtained by [4], which sums to 4.","solution":"def max_subarray_sum(test_cases): This function calculates the maximum sum of any contiguous subarray for multiple test cases. Parameters: test_cases (list of tuples): A list where each element is a tuple. The first element of the tuple is an integer N, the number of trees, and the second element is a list of integers representing the power levels of the trees. Returns: list of int: The maximum sum of any contiguous subarray for each test case. results = [] for N, power_levels in test_cases: max_sum = current_sum = power_levels[0] for i in range(1, N): current_sum = max(power_levels[i], current_sum + power_levels[i]) max_sum = max(max_sum, current_sum) results.append(max_sum) return results # Example usage (not part of the solution to the problem): if __name__ == \\"__main__\\": test_cases = [ (5, [1, -3, 2, 1, -1]), (3, [-2, -3, 4]), ] results = max_subarray_sum(test_cases) for result in results: print(result)"},{"question":"In a faraway kingdom, there is a magical forest divided into a grid of cells. Each cell either contains a tree or is empty. The kingdom\'s wizard needs to cast a protective spell over the forest, but the spell only works if the forest forms a series of continuous clusters of trees. A cluster of trees is defined as a group of adjacent tree cells (horizontally or vertically). The wizard gave you the following challenge: given a map of the forest, determine if there is exactly one cluster of trees. In other words, you need to determine if all the tree cells in the forest are connected. # Input The input consists of multiple test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000), the size of the NxN grid representing the forest. The next N lines each contain N characters, where each character is either \'.\' (representing an empty cell) or \'T\' (representing a tree). The end of input is indicated by a single integer 0. # Output For each test case, output \\"Yes\\" if there is exactly one cluster of trees, otherwise output \\"No\\". # Examples Input: ``` 3 .T. TTT .T. 4 T..T ..T. T. .. .TTT 0 ``` Output: ``` Yes No ``` # Explanation In the first test case, all the \'T\' cells form one connected cluster, so the output is \\"Yes\\". In the second test case, there are multiple separate clusters of trees (\'T\'), so the output is \\"No\\".","solution":"def is_single_cluster_of_trees(forest_map): Determines if the given forest map has a single cluster of trees. Parameters: forest_map (list of str): the forest grid. Returns: bool: True if there is exactly one cluster of trees, else False. N = len(forest_map) visited = [[False for _ in range(N)] for _ in range(N)] def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= N or forest_map[x][y] == \'.\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) cluster_found = False for i in range(N): for j in range(N): if forest_map[i][j] == \'T\' and not visited[i][j]: if cluster_found: return False dfs(i, j) cluster_found = True for i in range(N): for j in range(N): if forest_map[i][j] == \'T\' and not visited[i][j]: return False return cluster_found def process_input(input_str): lines = input_str.strip().split(\'n\') result = [] index = 0 while index < len(lines): N = int(lines[index]) if N == 0: break forest_map = lines[index + 1 : index + 1 + N] result.append(\\"Yes\\" if is_single_cluster_of_trees(forest_map) else \\"No\\") index += N + 1 return result"},{"question":"Boctyar wants to prepare for a coding competition and decides to practice by solving problems related to arrays. One such problem he encounters is related to finding subarrays with a specific property. A subarray is defined as a contiguous part of an array. Boctyar wants to find the number of subarrays where the sum of the elements in the subarray is exactly k. Your task is to help Boctyar by writing a program that determines the number of subarrays with a sum equal to k. For example, if the array is [1, 1, 1] and k = 2, there are two subarrays that sum up to 2: [1, 1] from index 0 to 1, and [1, 1] from index 1 to 2. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the array. The third line contains an integer k (1 ≤ k ≤ 10^9) — the target sum of the subarrays. -----Output----- Print a single integer — the number of subarrays that have a sum equal to k. -----Examples----- Input 5 1 2 3 4 5 9 Output 2 Input 3 1 1 1 2 Output 2 Input 6 1 2 1 3 2 1 3 Output 4 -----Note----- In the first example, the subarrays that sum up to 9 are [2, 3, 4] and [4, 5]. In the second example, the subarrays that sum up to 2 are [1, 1] from index 0 to 1, and [1, 1] from index 1 to 2. In the third example, the subarrays that sum up to 3 are [1, 2], [2, 1] from index 1 to 2, [3], and [1, 2] from index 4 to 5.","solution":"def count_subarrays_with_sum_k(n, arr, k): Returns the number of subarrays of arr with a sum equal to k. Parameters: n (int): Number of elements in the array. arr (list of int): The array of elements. k (int): The target sum of the subarrays. Returns: int: The number of subarrays that sum up to k. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in arr: current_sum += num difference = current_sum - k if difference in prefix_sums: count += prefix_sums[difference] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"Write a function that takes a list of integers and returns a list of the same length where each element at index `i` is the product of all elements in the original list except the one at `i`. For example: ```python product_of_all_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] product_of_all_except_self([5, 3, 2, 6, 4]) == [144, 240, 360, 120, 180] ```","solution":"def product_of_all_except_self(nums): Returns a list where each element at index i is the product of all elements in the input list except the one at i. :param nums: List of integers :return: List of integers n = len(nums) if n == 0: return [] result = [1] * n left_product = 1 right_product = 1 # Compute the product of elements to the left of each index for i in range(n): result[i] = left_product left_product *= nums[i] # Compute the product of elements to the right of each index for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a sequence of daily temperatures, you need to find out for each day how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Write a function `dailyTemperatures` that takes a list of integers representing daily temperatures and returns a list of integers where each element corresponds to the number of days you would need to wait until the temperature rises for each day in the input list. If there is no possible future day with a warmer temperature, the corresponding output should be 0. Your function should be efficient and should complete the task in O(n) time complexity, where n is the length of the input list. # Input - A single list of integers representing the daily temperatures, `temperatures`, where 1 ≤ len(temperatures) ≤ 100,000 and each integer `t` in the list satisfies 30 ≤ t ≤ 100. # Output - A list of integers representing the number of days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 instead. # Example Input ``` [73, 74, 75, 71, 69, 72, 76, 73] ``` Output ``` [1, 1, 4, 2, 1, 1, 0, 0] ``` # Explanation - On day 0, the temperature is 73. The next day, the temperature is 74, so you only have to wait 1 day. - On day 1, the temperature is 74. The next day, the temperature is 75, so you only have to wait 1 day. - On day 2, the temperature is 75. The temperature doesn\'t rise until day 6, so you have to wait 4 days. - On day 3, the temperature is 71. The temperature rises to 72 after 2 days. - On day 4, the temperature is 69. The temperature rises to 72 after 1 day. - On day 5, the temperature is 72. The next day, the temperature is 76, so you only have to wait 1 day. - On day 6, the temperature is 76. There is no future day where the temperature rises. - On day 7, the temperature is 73. There is no future day where the temperature rises.","solution":"def dailyTemperatures(temperatures): This function takes a list of daily temperatures and returns a list with the number of days until a warmer temperature for each day. If there is no future day with a warmer temperature, it returns 0 for that day. n = len(temperatures) result = [0] * n stack = [] for i in range(n - 1, -1, -1): # Traverse the list from the end while stack and temperatures[i] >= temperatures[stack[-1]]: stack.pop() if stack: result[i] = stack[-1] - i stack.append(i) return result"},{"question":"The Fibonacci sequence is defined as follows: the first two numbers in the sequence are 0 and 1, and each subsequent number is the sum of the previous two. Write a function to determine if a given number n is a Fibonacci number. Constraints: 1 ≤ n ≤ 10^10 Input: A single integer n. Output: If n is a Fibonacci number, output \\"Yes\\". Otherwise, output \\"No\\". Examples: Input: 5 Output: Yes Input: 6 Output: No Explanation: In the first example, 5 is a Fibonacci number (0, 1, 1, 2, 3, 5). In the second example, 6 is not in the Fibonacci sequence.","solution":"import math def is_fibonacci(n): Determines if a given number n is a Fibonacci number. A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. Parameters: n (int): The number to check Returns: str: \\"Yes\\" if the number is a Fibonacci number, otherwise \\"No\\" def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x if is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4): return \\"Yes\\" else: return \\"No\\""},{"question":"Alex is a librarian who wants to organize books on a shelf. He has n books, each with a certain width, and he wants to organize them on a single shelf of fixed width w. Alex has to make sure the books fit on the shelf without exceeding the total width and wants to maximize the number of books on the shelf. Additionally, Alex has a rule to follow: he wants to ensure that the first book on the shelf starts from the leftmost end. Once a book is placed on the shelf, the next book must be placed immediately to the right of the previous book without any gaps between them. Alex cannot also rotate the books to fit better. You need to help Alex by writing a program that determines the maximum number of books he can place on the shelf. ----- Input The first line of the input contains an integer t (1 le t le 10^3) — the number of test cases. The following 2t lines describe the test cases. The first line of each test case contains two integers n and w (1 le n le 10^5, 1 le w le 10^9) — the number of books and the width of the shelf. The second line of each test case contains n integers, each representing the width of a book a_i (1 le a_i le 10^6). ----- Output For each test case, print a single integer — the maximum number of books that can fit on the shelf. ----- Example Input 3 4 10 2 3 4 5 5 15 1 2 3 4 5 3 8 3 3 3 Output 3 5 2 ----- Note In the first test case, Alex can place at most 3 books with widths 2, 3, and 4 on the shelf, which amounts to a total width of 9. In the second test case, Alex can place all 5 books since their total width is 15, precisely fitting the shelf. In the third test case, Alex can place only the first 2 books, each of width 3, summing up to 6, which is the maximum that fits without exceeding the shelf width of 8.","solution":"def max_books(t, test_cases): results = [] for case in test_cases: n, w = case[0] book_widths = case[1] book_widths.sort() total_width = 0 count = 0 for width in book_widths: if total_width + width <= w: total_width += width count += 1 else: break results.append(count) return results # Example usage: t = 3 test_cases = [ [(4, 10), [2, 3, 4, 5]], [(5, 15), [1, 2, 3, 4, 5]], [(3, 8), [3, 3, 3]] ] print(max_books(t, test_cases)) # Expected output: [3, 5, 2]"},{"question":"A city is organizing a marathon event. Each participant is assigned a unique integer ID. The marathon route consists of several checkpoints, and each participant needs to visit these checkpoints in the correct order. However, there is a special rule: any two participants whose IDs sum to an even number must run together throughout the entire marathon. Given a list of participant IDs, find the minimum number of groups required so that the special rule is satisfied. Each group must include at least one participant. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers P_{1}, P_{2}, dots, P_{N} representing the IDs of the participants. ------ Output ------ For each test case, print a single line containing one integer — the minimum number of groups required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ P_{i} ≤ 10^9 for each valid i ----- Sample Input 1 ------ 2 5 2 4 3 5 7 3 8 6 2 ----- Sample Output 1 ------ 2 1","solution":"def min_groups(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] participant_ids = test_cases[i][1] has_even = any(pid % 2 == 0 for pid in participant_ids) has_odd = any(pid % 2 != 0 for pid in participant_ids) if has_even and has_odd: results.append(2) else: results.append(1) return results"},{"question":"Create a program that manages a leaderboard for a competitive game. Players advance through levels by achieving scores, and the leaderboard ranks players based on their highest level achieved and their score within that level. If two players are on the same level, the one with the higher score should be ranked higher. Input The input consists of two parts. The first part is a list of players\' data, and the second part is a list of player IDs for whom you need to retrieve the rank. The format of the players\' data is as follows: id1, level1, score1 id2, level2, score2 ... 0,0,0 Here, id (1 ≤ id ≤ 100) is an integer representing the player\'s ID, level (1 ≤ level ≤ 100) is an integer representing the highest level achieved by the player, and score (0 ≤ score ≤ 1000) is an integer representing the player\'s score at that level. Input is terminated by the line \\"0,0,0\\". The second part of the input contains multiple lines, each with one integer qi (1 ≤ qi ≤ 100), which is a player\'s ID. Process all the IDs until the end of the input. Output For each player ID queried, print the player\'s rank on a new line. If the player ID does not exist, print \\"Player not found\\". Example Input 1,10,500 2,10,600 3,20,400 4,5,700 5,10,500 0,0,0 1 2 3 4 5 Output 3 2 1 5 3 Explanation - Player 3 is ranked 1st because they have the highest level (20). - Player 2 is ranked 2nd because they are on level 10 with a score of 600. - Player 1 and Player 5 are both on level 10 with a score of 500, and they share the 3rd position. - Player 4 is ranked 5th because they are on level 5.","solution":"def manage_leaderboard(player_data, query_ids): # Parse the player data players = [] queries = [] idx = 0 while idx < len(player_data): line = player_data[idx].strip() idx += 1 if line == \\"0,0,0\\": break player_id, level, score = map(int, line.split(\',\')) players.append((player_id, level, score)) # Parse the query IDs while idx < len(player_data): line = player_data[idx].strip() idx += 1 if line: queries.append(int(line)) # Sort players by level descending, then by score descending players.sort(key=lambda x: (-x[1], -x[2])) # Create a rank dictionary rank_dict = {} rank = 1 for idx, player in enumerate(players): if idx > 0: if player[1] == players[idx - 1][1] and player[2] == players[idx - 1][2]: rank_dict[player[0]] = rank else: rank = idx + 1 rank_dict[player[0]] = rank else: rank_dict[player[0]] = rank # Retrieve the ranks for the queried player IDs result = [] for qid in query_ids: if qid in rank_dict: result.append(rank_dict[qid]) else: result.append(\\"Player not found\\") return result"},{"question":"In a fictional game, a player controls a character that moves through a grid-shaped maze consisting of N rows and M columns. The player can move the character up, down, left, or right, but cannot move diagonally. The character starts at the top-left corner of the maze (position (1, 1)) and must reach the bottom-right corner (position (N, M)). However, there are certain cells in the maze that are blocked and cannot be traversed. Write a program to determine the number of unique paths from the start position to the end position, given the layout of the maze with blocked cells. Input: The first line of the input contains two integers, N and M (2 ≤ N, M ≤ 10), representing the number of rows and columns in the maze. The next N lines each contain M integers, where a 0 indicates an open cell and a 1 indicates a blocked cell. Output: Output a single integer, representing the number of unique paths from the start to the end of the maze. If there is no possible path, output 0. Constraints: - You may assume that the start and end positions are always open cells. - Cells on the borders of the maze will also be accounted for as valid positions. SAMPLE INPUT 1 3 4 0 0 0 0 0 1 1 0 0 0 0 0 SAMPLE OUTPUT 1 2 Explanation: The possible paths from (1, 1) to (3, 4) without crossing blocked cells are: 1. Right -> Right -> Down -> Down -> Right -> Right 2. Down -> Down -> Right -> Right -> Up -> Right -> Down SAMPLE INPUT 2 2 2 0 1 1 0 SAMPLE OUTPUT 2 0 Explanation: There are no possible paths from (1, 1) to (2, 2) since both intermediate cells are blocked.","solution":"def count_unique_paths(N, M, maze): def dfs(x, y): if x == N - 1 and y == M - 1: return 1 if x >= N or y >= M or maze[x][y] == 1: return 0 if memo[x][y] != -1: return memo[x][y] memo[x][y] = dfs(x + 1, y) + dfs(x, y + 1) return memo[x][y] if maze[0][0] == 1 or maze[N-1][M-1] == 1: return 0 memo = [[-1] * M for _ in range(N)] return dfs(0, 0) # Example usage N = 3 M = 4 maze = [ [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0] ] print(count_unique_paths(N, M, maze)) # Output: 2"},{"question":"Given an array of integers representing the height of buildings, this array has the property that the buildings are colored alternatively using two colors. A structure (Landscape) is said to be \\"beautiful\\" if all buildings of the same color are of the same height. You need to determine if a given landscape is beautiful. Example 1: Input: arr = [3, 3, 4, 4, 5, 5] Output: Yes Explanation: Buildings of color A (indices 0, 2, 4) have heights [3, 4, 5] which are unique, and buildings of color B (indices 1, 3, 5) have heights [3, 4, 5] which are also unique. Example 2: Input: arr = [1, 2, 1, 3, 2, 4] Output: No Explanation: Buildings of color A (indices 0, 2, 4) have heights [1, 1, 2] which are not unique, and buildings of color B (indices 1, 3, 5) have heights [2, 3, 4] which are unique. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isBeautiful() which takes an array of integers `arr` as input parameter and returns a string \\"Yes\\" if the landscape is beautiful or \\"No\\" if it is not. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 <= len(arr) <= 10^{6} 1 <= arr[i] <= 10^{6}","solution":"def isBeautiful(arr): colorA = set() colorB = set() for i in range(len(arr)): if i % 2 == 0: colorA.add(arr[i]) else: colorB.add(arr[i]) # Check if all buildings in the same color set have unique heights if len(colorA) == len(arr) // 2 + (len(arr) % 2) and len(colorB) == len(arr) // 2: return \\"Yes\\" return \\"No\\""},{"question":"You are given an integer matrix where each row and each column is sorted in non-decreasing order. Your task is to determine if a given integer X exists in the matrix. -----Input----- The first line contains two integers M and N, denoting the number of rows and columns in the matrix, respectively. The next M lines contain N integers each, giving the elements of the matrix in a row-wise manner. The last line contains an integer X, which you need to search for in the matrix. -----Output----- Output a single line containing the string \\"YES\\" (without quotes) if X is found in the matrix, or \\"NO\\" (without quotes) otherwise. -----Constraints----- - 1 ≤ M, N ≤ 1000 - -10^6 ≤ matrix[i][j], X ≤ 10^6 -----Example----- Input: 3 3 1 4 7 2 5 9 3 6 10 5 Output: YES Input: 3 3 1 4 7 2 5 9 3 6 10 8 Output: NO -----Explanation----- In the first test case, the integer 5 is present in the matrix at position (1, 1). Therefore, the output is \\"YES\\". In the second test case, the integer 8 is not present in the matrix. Therefore, the output is \\"NO\\".","solution":"def search_matrix(matrix, X): Determines if a given integer X exists in the matrix. Each row and each column of the matrix is sorted in non-decreasing order. :param matrix: List of List of integers :param X: Integer to search for :return: \\"YES\\" if X is found, else \\"NO\\" if not matrix: return \\"NO\\" M, N = len(matrix), len(matrix[0]) row, col = 0, N - 1 while row < M and col >= 0: if matrix[row][col] == X: return \\"YES\\" elif matrix[row][col] > X: col -= 1 else: row += 1 return \\"NO\\""},{"question":"Function Description: Write a function `rotate_array` that takes in an array of integers and an integer k, and returns a new array that is a right rotation of the original array by k steps. A right rotation means that each element of the array is shifted to the right by one position and the last element of the array is moved to the first position. The function should handle edge cases gracefully, such as when the input array is empty or when k is greater than the length of the array. # Function Signature ```python def rotate_array(arr, k): # Your code here ``` # Input - `arr` -- a list of integers (1 ≤ len(arr) ≤ 10^5) - `k` -- an integer (0 ≤ k ≤ 10^5) # Output - returns a list of integers which is the result of rotating the input array arr by k steps to the right # Example ```python rotate_array([1, 2, 3, 4, 5], 2) ``` Output ```python [4, 5, 1, 2, 3] ``` # Explanation In the example above, the array `[1, 2, 3, 4, 5]` is rotated to the right by 2 positions. The last 2 elements `[4, 5]` are moved to the beginning, and the rest of the array `[1, 2, 3]` comes after them. # Constraints - The function should handle edge cases where the input array is empty or when `k` is larger than the length of the array. - The solution should be efficient with a time complexity of O(n), where n is the length of the input array.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): A list of integers k (int): Number of steps to rotate the array Returns: list: A new list that is rotated by k steps to the right n = len(arr) if n == 0: return arr k = k % n return arr[-k:] + arr[:-k]"},{"question":"You are given an array of positive integers and an integer X. Your task is to determine if there exists a subset of the array such that the sum of the subset equals X. Consider subsets of any size and note that the order of elements in the subset does not matter. Determine whether such a subset exists and output YES if it does, otherwise output NO. -----Constraints----- - 1 ≤ n ≤ 100 (n is the number of elements in the array) - 1 ≤ array[i] ≤ 1000 - 1 ≤ X ≤ 10000 -----Input----- Input is given from Standard Input in the following format: n array X -----Output----- Print YES or NO. -----Sample Input----- 5 2 3 7 8 10 11 -----Sample Output----- YES In this example, the subset {3, 8} sums to 11.","solution":"def subset_sum_exists(arr, X): Determines if there exists a subset of arr that adds up to X. Parameters: arr (list): List of positive integers. X (int): Target sum. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". n = len(arr) dp = [[False] * (X + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, X + 1): if arr[i - 1] > j: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return \\"YES\\" if dp[n][X] else \\"NO\\""},{"question":"In a computer network, each server needs to exchange data with every other server reliably. However, the network is prone to connection failures. To ensure that data can still be exchanged even if some direct connections fail, you are asked to determine if the entire network remains connected. You are given a list of connected pairs of servers and need to verify if there is still a path between every pair of servers using the remaining connections. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N (number of servers) and M (number of connections). Next M lines contain two integers a and b (1 ≤ a, b ≤ N) indicating a direct connection between server a and server b. Output For each test case, output a single line containing \\"CONNECTED\\" if the network remains connected or \\"DISCONNECTED\\" if there exists at least one pair of servers that cannot reach each other using the given connections. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 10^4 0 ≤ M ≤ 10^5 Example Input: 2 5 4 1 2 2 3 3 4 4 5 3 1 1 2 Output: CONNECTED DISCONNECTED Explanation Example case 1. Every server can reach every other server through the given connections. Hence, the output is \\"CONNECTED\\". Example case 2. Server 3 is isolated because it has no connection. Therefore, the network is \\"DISCONNECTED\\".","solution":"def is_network_connected(T, test_cases): Determine if the network remains connected for each test case. Args: T : int : Number of test cases. test_cases : list : A list of tuples (N, M, connections) where N : int : Number of servers. M : int : Number of connections. connections : list of tuples : List of direct connections (a, b). Returns: list : A list of strings, \\"CONNECTED\\" or \\"DISCONNECTED\\" for each test case. from collections import defaultdict, deque results = [] for N, M, connections in test_cases: if N == 1: results.append(\\"CONNECTED\\") continue graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) if len(visited) == N: results.append(\\"CONNECTED\\") else: results.append(\\"DISCONNECTED\\") return results # A helper function to parse the input and call the main function def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) connections = [] for i in range(1, M + 1): a, b = map(int, lines[index + i].split()) connections.append((a, b)) test_cases.append((N, M, connections)) index += M + 1 return is_network_connected(T, test_cases)"},{"question":"You are given a string s and an integer k. Your goal is to transform the string into a palindrome by changing at most k characters. You need to determine the minimum number of changes required to make s a palindrome. If it is not possible to make s a palindrome with at most k changes, return -1. A palindrome is a string that reads the same backward as forward. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. For each test case, the first line contains the string s consisting of lowercase English letters, and the second line contains an integer k (0 le k le 10^5) — the maximum number of allowed changes. -----Output----- For each test case, print the minimum number of changes required to make s a palindrome if possible. If it is not possible, print -1. -----Example----- Input 3 abca 1 race 2 abc 0 Output 1 2 -1 -----Explanation----- In the first example, you can change \'c\' to \'b\' or \'a\' to \'b\' to make \\"abca\\" a palindrome. In the second example, you can change \'r\' to \'e\' and \'e\' to \'r\' to make \\"race\\" a palindrome. In the third example, you cannot make \\"abc\\" a palindrome with 0 changes.","solution":"def min_changes_to_palindrome(s, k): Returns the minimum number of changes required to make s a palindrome if possible within k changes. If it\'s not possible, returns -1. n = len(s) changes_needed = 0 # Count the number of changes needed to make the string a palindrome for i in range(n // 2): if s[i] != s[n - 1 - i]: changes_needed += 1 if changes_needed <= k: return changes_needed else: return -1 def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(min_changes_to_palindrome(s, k)) return results"},{"question":"Emma loves playing games that involve finding unique paths. Recently, she started learning about matrices and found it fascinating that each cell in a matrix can be part of multiple paths from the top-left corner to the bottom-right corner. To challenge herself, she decided to find the total number of unique paths in a matrix with certain obstacles. Given a grid where some cells are blocked (represented by 1) and some cells are open (represented by 0), Emma wants to determine the number of unique paths from the top-left corner of the grid to the bottom-right corner. Emma can only move either down or right at any point in time. Help Emma write a program that solves this problem. -----Input----- The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with two integers, M and N, which are the number of rows and columns in the grid. The next M lines each contain N integers, either 0 or 1, representing the grid. -----Output----- For each test case, output a single line containing the number of unique paths from the top-left corner to the bottom-right corner. If there is no valid path, output 0. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 100 - The top-left and bottom-right corners of the grid will always be 0 (i.e., open cells). -----Example----- Input: 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 Output: 2 1 -----Explanation----- In the first test case, there are 2 unique paths from the top-left to the bottom-right: - Down, Down, Right, Right - Right, Right, Down, Down In the second test case, there is only 1 unique path: - Right, Down, Down, Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid with obstacles. if not grid or grid[0][0] == 1: return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def solve(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Write a function called `fraction_to_decimal` that converts a fraction given as two integers (numerator and denominator) into a string representing its decimal form. If the decimal is repeating, enclose the repeating part in parentheses. For example, given numerator = 1 and denominator = 2, the function should return \\"0.5\\". Given numerator = 4 and denominator = 333, the function should return \\"0.(012)\\". Example 1: Input: numerator = 1 denominator = 2 Output: \\"0.5\\" Explanation: 1 divided by 2 equals 0.5. Example 2: Input: numerator = 2 denominator = 3 Output: \\"0.(6)\\" Explanation: 2 divided by 3 is 0.6666... (6 repeats). Example 3: Input: numerator = 4 denominator = 9 Output: \\"0.(4)\\" Explanation: 4 divided by 9 is 0.4444... (4 repeats). Note: - The function should handle edge cases such as negative numbers. - Ensure that the function can handle large numerators and denominators. Your Task: You don\'t need to read input or print anything. Complete the function `fraction_to_decimal` that takes two integers, numerator and denominator, as input and returns a string representing the decimal form of the fraction. Expected Time Complexity: O(max(numerator, denominator)) Expected Auxiliary Space: O(max(numerator, denominator)) Constraints: -2^31 <= numerator, denominator <= 2^31 - 1 denominator != 0","solution":"def fraction_to_decimal(numerator, denominator): if numerator % denominator == 0: return str(numerator // denominator) sign = \'-\' if (numerator < 0) ^ (denominator < 0) else \'\' numerator, denominator = abs(numerator), abs(denominator) integer_part = numerator // denominator remainder = numerator % denominator result = sign + str(integer_part) + \'.\' remainder_dict = {} while remainder: if remainder in remainder_dict: start = remainder_dict[remainder] result = result[:start] + \'(\' + result[start:] + \')\' break remainder_dict[remainder] = len(result) remainder *= 10 quotient = remainder // denominator result += str(quotient) remainder %= denominator return result"},{"question":"You are given an integer array arr of size n and an integer k. The task is to determine if there exists a subarray of length exactly k that has an average value greater than or equal to x. If such a subarray exists, print \\"YES\\", otherwise print \\"NO\\". A subarray is defined as a contiguous part of the array. -----Input----- The first line contains three integers n, k and x (1 le n, k le 2 cdot 10^5, -10^9 le x le 10^9) — the size of the array arr, the length of the subarray, and the target average value, respectively. The second line contains n integers arr[i] (-10^9 le arr[i] le 10^9) — the elements of the array. -----Output----- Print \\"YES\\" (without quotes) if there exists a subarray of length exactly k with an average greater than or equal to x. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 5 3 4 1 2 6 5 4 Output YES Input 5 2 8 1 2 3 4 5 Output NO Input 6 4 0 -1 -2 -3 -4 -5 -6 Output NO Input 7 3 2 3 4 1 2 3 5 6 Output YES -----Note----- In the first example, the subarray [2, 6, 5] has an average of (2+6+5)/3=4.33, which is greater than 4, so the answer is \\"YES\\". In the second example, no subarray of length 2 has an average greater than or equal to 8, so the answer is \\"NO\\". In the third example, all subarrays of length 4 have negative averages, so the answer is \\"NO\\". In the fourth example, the subarray [2, 3, 5] has an average of (2+3+5)/3=3.33, which is greater than 2, so the answer is \\"YES\\".","solution":"def does_subarray_exist(arr, n, k, x): Determine whether there exists a subarray of length exactly k with an average value greater or equal to x. Parameters: arr (list): List of integers n (int): Size of the array k (int): Length of the subarray x (int): Target average value Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" target_sum = k * x current_sum = sum(arr[:k]) if current_sum >= target_sum: return \\"YES\\" for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum >= target_sum: return \\"YES\\" return \\"NO\\""},{"question":"In a land far away, dragons and knights are continuously battling each other for dominance. A knight\'s strength is measured by an integer, and each dragon has its own strength as well. You are given an initial strength of the knight and a list of dragons. If a knight fights a dragon and wins, his strength increases by the dragon\'s strength. Otherwise, his strength decreases by the dragon\'s strength. The knight can choose the order in which he fights the dragons. Determine if there is an order of battles such that the knight can defeat all the dragons without his strength ever dropping to zero or below. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1 000) — the number of dragons. The second line contains an integer s (1 ≤ s ≤ 10^9) — the initial strength of the knight. The third line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^6) — the strengths of the dragons. -----Output----- Print \\"YES\\" if there is an order of battles such that the knight can defeat all dragons without his strength ever dropping to zero or below. Otherwise, print \\"NO\\". -----Examples----- Input 3 8 5 4 3 Output YES Input 3 4 5 3 4 Output NO Note that in the first example, the knight with initial strength 8 can defeat the dragons in the order 3, 4, 5 (or any order) and always have a positive strength. In the second example, no order allows the knight to defeat all dragons while maintaining positive strength.","solution":"def can_knight_defeat_dragons(n, s, dragons): Determines if there is an order of battles such that the knight can defeat all dragons without his strength ever dropping to zero or below. Args: - n: int, number of dragons - s: int, initial strength of the knight - dragons: list of int, strengths of the dragons Returns: - \\"YES\\" if there is an order of battles such that the knight can defeat all dragons, otherwise \\"NO\\". dragons.sort(reverse=True) # Sort dragons by descending strength for dragon in dragons: if s <= dragon: return \\"NO\\" s += dragon # Knight\'s strength increases by the dragon\'s strength return \\"YES\\""},{"question":"You have been contracted to develop a simple application for a community library to keep track of book rentals. Each rental period lasts 5 days, and at the end of the rental period, if the book is not returned, a late fee of 1 per day is charged. Create a program that calculates the total rental cost for each book based on the number of days it was rented. The program will receive input as a list of integers, where each integer represents the number of days a book was rented. The program should return the total rental cost for all books combined. The cost structure is as follows: - Rental period (first 5 days) - 5 total (flat rate) - Late fee - 1 per day after the initial 5 days ``` Input: List of integers Output: Integer (total cost) Examples: Input: [4, 7, 10] Output: 24 Explanation: Total cost for 4 days is 5, for 7 days it is 5 + 2 = 7, and for 10 days it is 5 + 5 = 10. The total cost is 5 + 7 + 10 = 22. Input: [5, 3] Output: 10 Explanation: Each book is returned within the 5-day period, so the cost for each book is 5. The total cost is 5 + 5 = 10. ```","solution":"def calculate_total_rental_cost(days_rented): Calculates the total rental cost for all books combined based on the number of days each book was rented. :param days_rented: List of integers where each integer represents the number of days a book was rented :return: Integer total rental cost total_cost = 0 for days in days_rented: if days <= 5: total_cost += 5 else: total_cost += 5 + (days - 5) return total_cost"},{"question":"Susan is a marine biologist analyzing coral reef formations. She has recorded the coordinates of various coral points within a 3D underwater environment. She wishes to determine the smallest bounding rectangular prism (cuboid) that can enclose all the coral points. The faces of the cuboid must be parallel to the coordinate planes (i.e., each face must be a plane where either x, y, or z is constant). -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain a single integer n (1 le n le 1000), representing the number of coral points. Each of the next n lines will contain three integers x, y, and z (-1000 le x, y, z le 1000), representing the position of a single coral point. -----Output----- Output a floating point number representing the smallest volume of a cuboid that can enclose all the coral points. Your answer must be accurate within a relative tolerance of 10^{-6}. -----Examples----- Sample Input 1: 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 216.000000 Sample Input 2: 2 -100 -100 -100 100 100 100 Sample Output 2: 8000000.000000","solution":"def smallest_bounding_volume(n, points): Returns the smallest volume of a cuboid that can enclose all given coral points. # Initializing min and max coordinates min_x = min_y = min_z = float(\'inf\') max_x = max_y = max_z = float(\'-inf\') for x, y, z in points: # Update minimum coordinates if x < min_x: min_x = x if y < min_y: min_y = y if z < min_z: min_z = z # Update maximum coordinates if x > max_x: max_x = x if y > max_y: max_y = y if z > max_z: max_z = z # Compute the dimensions of the bounding cuboid length = max_x - min_x width = max_y - min_y height = max_z - min_z # Compute and return the volume of the cuboid volume = length * width * height return volume if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[i]), int(data[i+1]), int(data[i+2])) for i in range(1, len(data), 3)] volume = smallest_bounding_volume(n, points) print(f\\"{volume:.6f}\\")"},{"question":"A factory produces metal rods of varying lengths. These rods must be cut into specific target lengths to fulfill customer orders. Each target length has a different priority, and the goal is to minimize the number of cuts made while ensuring that all orders are fulfilled according to their priorities. Each rod can be cut multiple times, and each cut incurs a fixed cost. Given a list of rod lengths and a list of target lengths with corresponding priorities, write a program to calculate the minimum cutting cost needed to fulfill all orders. If it is impossible to fulfill the orders, return -1. Input The input consists of multiple datasets. Each dataset begins with two integers n and m (1 ≤ n, m ≤ 100), representing the number of available rods and the number of target lengths, respectively. The next line contains n integers representing the lengths of the rods. The following m lines each contain two integers: the target length and its priority. The priority signifies the importance of fulfilling that order, with smaller priorities being more important. The dataset ends with a line containing two zeros, which should not be processed. The number of datasets does not exceed 100. Output For each dataset, print the minimum cutting cost to fulfill all orders, or -1 if it is impossible. Example Input 2 3 100 200 50 1 70 2 30 3 3 2 150 300 200 100 1 250 2 0 0 Output 15 50 In the example, the first dataset suggests cutting the rods to fulfill target lengths 50, 70, and 30, with higher priority given to 50 and 70. The second dataset indicates fulfilling target lengths 100 and 250 using rods of lengths 150, 300, and 200, respecting their priorities.","solution":"def minimum_cutting_cost(datasets): results = [] for dataset in datasets: n, m = dataset[\'n\'], dataset[\'m\'] rod_lengths = list(dataset[\'rod_lengths\']) target_lengths = sorted(dataset[\'targets\'], key=lambda x: x[1]) def can_fulfill_order(rod, target): return rod >= target # Simple greedy approach to minimize cuts based on priority order cuts = 0 for target, _ in target_lengths: for i in range(n): if rod_lengths[i] >= target: rod_lengths[i] -= target cuts += 1 break else: results.append(-1) break else: results.append(cuts * 25) # Assuming fixed cost per cut is 25 return results"},{"question":"Mirko’s sister, Ana, is a fan of puzzles involving arrays and loves challenges with sums and products. She came across a puzzle where she needs to maximize the result based on certain operations. Here’s the challenge: Ana has an array of N positive integers. She can perform the following operation repeatedly: - Choose any pair of elements in the array (let\'s call them A and B) and replace A with the element A+B. However, she loses B, removing it from the array. Ana’s goal is to maximize the product of the elements that remain in the array. Write a program to help Ana determine the maximum product she can obtain after performing the operation any number of times. -----Input----- The first line of input contains one integer N (2 leq N leq 100), the number of elements in the array. The second line of input contains N positive integers, each smaller than or equal to 1000000, representing the initial array. -----Output----- Output a single integer: the maximum possible product of the remaining elements in the array. -----Examples----- Sample Input 1: 3 1 2 3 Sample Output 1: 6 Sample Input 2: 4 5 5 5 5 Sample Output 2: 625 Sample Input 3: 2 10 10 Sample Output 3: 20","solution":"def maximize_product(n, arr): This function returns the maximum possible product of the remaining elements in the array if we perform the described operation any number of times. total_sum = sum(arr) # After combining all elements into one single element with sum of all original elements, # the product of the remaining elements in the array will be the sum itself. return total_sum"},{"question":"Your task is to write a program that reads a sequence of strings and prints the longest common prefix for the sequence. The longest common prefix is the initial segment of each string that is common across all. Input A sequence of strings s1, s2, ..., sn. The number of strings (n) is less than or equal to 100, and the length of each string (si) is between 1 and 100. Output Print the longest common prefix. If there is no common prefix, print an empty string. Example Input flower flow flight Output fl","solution":"def longest_common_prefix(strs): Returns the longest common prefix from a list of strings. if not strs: return \\"\\" # Take the shortest string as the base for comparison min_len = min(len(s) for s in strs) common_prefix = \\"\\" for i in range(min_len): # Take the character from the first string as a reference char = strs[0][i] if all(s[i] == char for s in strs): common_prefix += char else: break return common_prefix"},{"question":"You are given an integer array `arr` of size `n`. A subarray is called a \\"peak subarray\\" if its length is at least 3 and there exists an element `arr[k]` (1 ≤ k < length of subarray - 1) such that `arr[k-1] < arr[k] > arr[k+1]`. Your task is to find the length of the longest peak subarray in `arr`. Input The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) representing the size of the array. The second line contains `n` space-separated integers `arr[i]` (-10^6 ≤ arr[i] ≤ 10^6) — the elements of the array. Output Print the length of the longest peak subarray. If no peak subarray exists, print 0. Examples Input 12 1 2 3 4 5 3 1 2 3 4 0 10 Output 6 Input 5 1 2 2 1 1 Output 0 Note In the first sample, the longest peak subarray is `[1, 2, 3, 4, 5, 3, 1]` with length `7`.","solution":"def longest_peak_subarray(arr): Returns the length of the longest peak subarray. n = len(arr) if n < 3: return 0 longest_peak_length = 0 i = 1 while i < n - 1: is_peak = arr[i - 1] < arr[i] > arr[i + 1] if not is_peak: i += 1 continue # Find left boundary of the peak left = i - 2 while left >= 0 and arr[left] < arr[left + 1]: left -= 1 left += 1 # Find right boundary of the peak right = i + 2 while right < n and arr[right] < arr[right - 1]: right += 1 current_peak_length = right - left if current_peak_length > longest_peak_length: longest_peak_length = current_peak_length # Move i to the end of the current peak i = right return longest_peak_length"},{"question":"You are tasked with developing a simple task management application. The application should allow users to add, mark as completed, and list all tasks. Each task has a description and a priority level, which is an integer where a higher number means higher priority. The application should provide functionality to: 1. Add a new task with a description and priority. 2. Mark a task as completed by providing the task\'s description. 3. List all tasks ordered by their priority from highest to lowest. Completed tasks should not be shown in the listing. -----Input:----- The input will be a series of commands, one per line. Each command will be either: - `add <description> <priority>`: Adds a new task with the given description and priority. - `complete <description>`: Marks the task with the given description as completed. - `list`: Lists all remaining tasks ordered by priority from highest to lowest. - The input ends when EOF is reached, and there are no other constraints on the number of commands or their order. -----Output:----- The corresponding output will be generated only for `list` commands. For each `list` command, print the remaining tasks in the format: `<description> <priority>`, each on a new line, ordered by priority from highest to lowest. -----Constraints:----- - Descriptions are unique alphanumeric strings with a maximum length of 100 characters. - Priority is an integer between 1 and 10000. - At most 1000 tasks will be added. -----Example Input:----- add Task1 5 add Task2 10 list complete Task1 list add Task3 1 list -----Example Output:----- Task2 10 Task1 5 Task2 10 Task2 10 Task3 1","solution":"class TaskManager: def __init__(self): self.tasks = {} def add_task(self, description, priority): self.tasks[description] = priority def complete_task(self, description): if description in self.tasks: del self.tasks[description] def list_tasks(self): sorted_tasks = sorted(self.tasks.items(), key=lambda item: item[1], reverse=True) return [f\\"{description} {priority}\\" for description, priority in sorted_tasks] def process_commands(commands): manager = TaskManager() output = [] for command in commands: parts = command.split() if parts[0] == \'add\': description = parts[1] priority = int(parts[2]) manager.add_task(description, priority) elif parts[0] == \'complete\': description = parts[1] manager.complete_task(description) elif parts[0] == \'list\': output.extend(manager.list_tasks()) return output"},{"question":"Bob is solving an encryption puzzle that involves sequences of characters. The puzzle gives him a string and he needs to convert it into another string by performing a series of operations. The operations allowed are as follows: 1. Insert any character at any position. 2. Delete any character from any position. 3. Replace any character with another character. Bob wants to transform the given string `s` into a target string `t` with the minimum number of operations possible. Your task is to help Bob determine the minimum number of operations required to convert string `s` into string `t`. Input The first line of the input contains the string `s` (1 ≤ |s| ≤ 2000). The second line contains the string `t` (1 ≤ |t| ≤ 2000). Output Print one integer — the minimum number of operations required to convert string `s` into string `t`. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Note In the first sample, Bob can convert \\"kitten\\" to \\"sitting\\" with the following operations: 1. Replace \'k\' with \'s\' –> \\"sitten\\" 2. Insert \'i\' at position 4 –> \\"sittien\\" 3. Replace \'e\' with \'n\' –> \\"sitting\\" In the second sample, Bob can convert \\"flaw\\" to \\"lawn\\" with the following operations: 1. Replace \'f\' with \'l\' –> \\"llaw\\" 2. Replace \'w\' with \'n\' –> \\"lawn\\" This problem can be solved using a dynamic programming approach where dp[i][j] represents the minimum number of operations needed to convert the first i characters of s to the first j characters of t.","solution":"def min_operations(s, t): Returns the minimum number of operations required to convert string s into string t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i # Deleting all characters from s[0:i] for j in range(n + 1): dp[0][j] = j # Inserting all characters to form t[0:j] # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[m][n]"},{"question":"Given a large array of integers, implement a program to efficiently compute the number of distinct prime factors for each element in the array and print the maximum number of distinct prime factors present in any single element. # Input Format - The first line contains an integer, n, denoting the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. # Output Format - Print a single integer denoting the maximum number of distinct prime factors among all the elements in the array. # Constraints - 1 leq n leq 10^5 - 1 leq a_i leq 10^6 # Example Input ``` 5 10 15 21 17 30 ``` Output ``` 3 ``` # Explanation For the given example, the distinct prime factors for each element are: - 10: {2, 5} - 15: {3, 5} - 21: {3, 7} - 17: {17} - 30: {2, 3, 5} The maximum number of distinct prime factors is 3 (for the number 30). Therefore, the output is 3.","solution":"from collections import defaultdict def sieve_of_eratosthenes(limit): primes = [True] * (limit + 1) p = 2 while p * p <= limit: if primes[p] == True: for i in range(p * p, limit + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, limit + 1) if primes[p]] return prime_numbers def get_prime_factors_count(num, primes): prime_factors = set() for prime in primes: if prime * prime > num: break while num % prime == 0: prime_factors.add(prime) num //= prime if num > 1: prime_factors.add(num) return len(prime_factors) def max_distinct_prime_factors(arr): # Find all primes up to the maximum element in the array using the sieve of Eratosthenes max_value = max(arr) primes = sieve_of_eratosthenes(max_value) # Calculate the number of distinct prime factors for each element in the array max_prime_factors_count = 0 for num in arr: count = get_prime_factors_count(num, primes) if count > max_prime_factors_count: max_prime_factors_count = count return max_prime_factors_count def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(max_distinct_prime_factors(arr))"},{"question":"The Lazy Caterer\'s Problem, also known as the central polygonal numbers, defines the maximum number of pieces a circle (pizza) can be divided into by using a given number of straight cuts. Your task is to write a function that calculates the maximum number of pieces of a circle that can be achieved with up to `n` straight cuts. To achieve this, follow the formula for the Lazy Caterer\'s Sequence: P(n) = (n^2 + n + 2) / 2 Where `n` is the number of cuts. Input The first line of the input contains a single integer `n`, where `0 <= n <= 10^6` representing the number of straight cuts you can make. Output Print the maximum number of pieces that can be obtained with `n` cuts. Examples Input 3 Output 7 Input 5 Output 16","solution":"def max_pieces_of_circle(n): Returns the maximum number of pieces a circle can be divided into with n straight cuts. if n < 0 or n > 10**6: raise ValueError(\\"Invalid input. n must be in the range 0 <= n <= 10^6\\") return (n**2 + n + 2) // 2"},{"question":"A security system for a building consists of multiple sensors installed at various locations in a grid. The grid is an M x N matrix, and each cell either contains a sensor (indicated by a \'1\') or is empty (indicated by a \'0\'). All sensors have a certain range, which means they can monitor all cells within a Manhattan distance D. Given the grid, determine the minimum number of sensors needed to ensure that every cell in the grid is within the monitoring range of at least one sensor. If it is not possible to cover the entire grid with the sensors, return -1. ------ Input ------ The first line contains an integer T (1 ≤ T ≤ 10) -- the number of test cases. Each test case starts with two integers M and N (1 ≤ M, N ≤ 50) -- the dimensions of the grid. The next M lines each contain N integers (0 or 1) representing the grid. The last line of each test case contains a single integer D (1 ≤ D ≤ 50) -- the maximum range of each sensor. ------ Output ------ For each test case output a single integer: the minimum number of sensors required to cover the grid or -1 if it\'s not possible. ----- Sample Input 1 ------ 2 3 3 1 0 0 0 0 0 0 0 1 2 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ In the first example, placing sensors at (1,1) and (3,3) with a range of 2 covers all cells. In the second example, sensors placed at (4,4), (2,3), and (3,1) with a range of 1 can cover all cells.","solution":"def min_sensors_required(T, test_cases): def is_covered(grid, M, N, D): coverage_grid = [[0] * N for _ in range(M)] for i in range(M): for j in range(N): if grid[i][j] == 1: for x in range(max(0, i - D), min(M, i + D + 1)): for y in range(max(0, j - D), min(N, j + D + 1)): if abs(x - i) + abs(y - j) <= D: coverage_grid[x][y] = 1 for row in coverage_grid: if 0 in row: return False return True results = [] for m in range(T): M, N, grid, D = test_cases[m] if is_covered(grid, M, N, D): sensor_count = sum(row.count(1) for row in grid) results.append(sensor_count) else: results.append(-1) return results"},{"question":"Design a function `is_valid_matched(c)`, which takes a string `c` consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Return `True` if the string is valid, and `False` otherwise. # Examples ```python is_valid_matched(\\"()\\") # It should return True is_valid_matched(\\"()[]{}\\") # It should return True is_valid_matched(\\"(]\\") # It should return False is_valid_matched(\\"([)]\\") # It should return False is_valid_matched(\\"{[]}\\") # It should return True ``` # Constraints 1. `1 ≤ len(c) ≤ 10^4` 2. `c` consists of parentheses only \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Input ```plaintext c ``` # Output ```plaintext True or False ```","solution":"def is_valid_matched(c): Determines if the input string of parentheses is valid. Parameters: c (str): A string consisting of parentheses \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: bool: True if the string is valid, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in c: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are tasked with creating a system to manage the schedules of a shared workspace. The workspace has three different rooms, each available for hourly bookings, starting from 9 AM to 9 PM each day. Users can book any of the rooms for a specific time period if the room is available. Your program should support the following operations: - **book**: Add a new booking for a room at a specified time. Bookings are specified with a room number (1, 2, or 3), a start time, and an end time (both inclusive). If the room is already booked for any part of that time, return a failure message. - **cancel**: Remove an existing booking for a room at a specified time. If there is no booking at that time, return a failure message. - **check**: Check if a room is available for booking at a specified time. Return success or failure accordingly. - **show**: Display all bookings for the day for a specified room in chronological order. **Constraints** - Each booking operation will only require a time period within the same day. - The system will only operate between the hours of 9 AM to 9 PM. **Input** The first line will be an integer `q`, the number of operations. The following lines will describe each operation in one of the following formats: - `book <room_number> <start_time> <end_time>`: Books the specified room from `start_time` to `end_time`. - `cancel <room_number> <start_time> <end_time>`: Cancels the booking for the specified room from `start_time` to `end_time`. - `check <room_number> <start_time>`: Checks if the room is available at the specified start time. - `show <room_number>`: Shows all bookings for the specified room for the day. **Output** For each operation, the output will be: - For `book` operations: `Booking successful` or `Booking failed`. - For `cancel` operations: `Cancellation successful` or `Cancellation failed`. - For `check` operations: `Available` or `Not available`. - For `show` operations: A list of all bookings in the format `start_time-end_time`, one booking per line. If there are no bookings, output `No bookings`. **Example** Input: ``` 8 book 1 10 11 book 2 12 14 check 1 10 book 1 10 12 check 2 13 cancel 2 12 14 check 2 13 show 1 ``` Output: ``` Booking successful Booking successful Not available Booking failed Not available Cancellation successful Available 10-11 ```","solution":"class WorkspaceSchedule: def __init__(self): self.bookings = {1: [], 2: [], 3: []} def book(self, room_number, start_time, end_time): if not self.is_available(room_number, start_time, end_time): return \\"Booking failed\\" self.bookings[room_number].append((start_time, end_time)) self.bookings[room_number].sort() return \\"Booking successful\\" def cancel(self, room_number, start_time, end_time): if (start_time, end_time) not in self.bookings[room_number]: return \\"Cancellation failed\\" self.bookings[room_number].remove((start_time, end_time)) return \\"Cancellation successful\\" def check(self, room_number, time): for start_time, end_time in self.bookings[room_number]: if start_time <= time <= end_time: return \\"Not available\\" return \\"Available\\" def show(self, room_number): if not self.bookings[room_number]: return \\"No bookings\\" return \'n\'.join([f\\"{start_time}-{end_time}\\" for start_time, end_time in self.bookings[room_number]]) def is_available(self, room_number, start_time, end_time): for existing_start, existing_end in self.bookings[room_number]: if max(start_time, existing_start) <= min(end_time, existing_end): return False return True def process_operations(operations): schedule = WorkspaceSchedule() results = [] for operation in operations: parts = operation.split() command = parts[0] room_number = int(parts[1]) if command == \\"book\\": start_time = int(parts[2]) end_time = int(parts[3]) results.append(schedule.book(room_number, start_time, end_time)) elif command == \\"cancel\\": start_time = int(parts[2]) end_time = int(parts[3]) results.append(schedule.cancel(room_number, start_time, end_time)) elif command == \\"check\\": time = int(parts[2]) results.append(schedule.check(room_number, time)) elif command == \\"show\\": results.append(schedule.show(room_number)) return results"},{"question":"Samantha is organizing her book collection on a shelf. She wants to group the books such that no two adjacent books have the same genre. Each genre is represented by a number from 1 to 10, and you are given an array where each element represents the genre of a book. Samantha can change the genre of a book to any other genre by repainting its cover, but it takes 1 minute to repaint each book. She wants to know the minimum time required to repaint books so that no two adjacent books have the same genre. -----Input----- The first line contains a single integer n (1 le n le 100000) — the number of books. The second line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10) — the genre of each book. -----Output----- Print a single integer — the minimum number of minutes required to repaint the books so that no two adjacent books have the same genre. -----Examples----- Input 5 1 2 1 2 1 Output 0 Input 3 1 1 2 Output 1","solution":"def min_repaints_to_avoid_adjacent_genres(n, genres): if n == 1: return 0 repaint_count = 0 for i in range(1, n): if genres[i] == genres[i - 1]: repaint_count += 1 # Find a new genre that\'s different from the previous and next genre for new_genre in range(1, 11): if (i == n-1 or new_genre != genres[i+1]) and new_genre != genres[i-1]: genres[i] = new_genre break return repaint_count"},{"question":"Layla is helping to design a new transportation system for a futuristic city. The city is equipped with a unique set of one-way aerial highways connecting various stations. The city\'s traffic control system needs to analyze the network of these highways to ensure that it is possible to travel between any pair of stations, either directly or indirectly, by using a series of highways. A rotation-proof transportation system means that the network should function regardless of circular permutations in the ordered list of stations. Essentially, for a list of stations [s1, s2, ..., sn], and a set of highways, if we imagine the list as circular, the reachability between any two stations must be preserved even if the stations are rotated. Layla wants to know if the network of highways she designs is rotation-proof. You are given the stations and the one-way highways between them, and your task is to determine if the aerial highway network meets the rotation-proof criteria. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6), the number of stations and the number of one-way highways. Each of the next m lines describes a one-way highway: start station u, end station v (1 ≤ u, v ≤ n, u ≠ v). Output Output a single line: \\"YES\\" if the aerial highway network is rotation-proof, otherwise, \\"NO\\". Example Input 4 5 1 2 2 3 3 4 4 1 1 3 Output YES Note In the given example, it is possible to travel between any pair of stations in the network: - From 1 to 2, 3, 4 - From 2 to 1, 3, 4 - From 3 to 1, 2, 4 - From 4 to 1, 2, 3 Regardless of the initial station, it is possible to reach the other stations, ensuring the transportation network is rotation-proof.","solution":"from collections import defaultdict, deque def is_rotation_proof(n, m, highways): Determines if the aerial highway network is rotation-proof. if m < n: # If there are fewer highways than stations, it\'s not rotation-proof return \\"NO\\" adjacency_list = defaultdict(list) reverse_adjacency_list = defaultdict(list) for u, v in highways: adjacency_list[u].append(v) reverse_adjacency_list[v].append(u) def bfs(start, adjacency): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbour in adjacency[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) return visited # Check if all nodes are reachable from node 1 visited_from_start = bfs(1, adjacency_list) # Check if we can reach node 1 from all nodes (using the reversed graph) visited_to_start = bfs(1, reverse_adjacency_list) # Check if all nodes are reachable from any node and vice versa is_reachable = all(visited_from_start[1:]) and all(visited_to_start[1:]) return \\"YES\\" if is_reachable else \\"NO\\" # Example usage: # highways = [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)] # print(is_rotation_proof(4, 5, highways)) # Output: \\"YES\\""},{"question":"Jack has a collection of books, and he wants to organize them in a special manner. Each book has a title and a list of tags associated with it. Jack wants to create a new collection where the books are ordered first by the number of tags they have (ascending) and then alphabetically by their titles for books with the same number of tags. Your task is to prepare a list of book titles in the new order for Jack. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books in Jack\'s collection. The next n lines each contain a book title (a string of 1 to 100 characters, consisting of lowercase English letters and spaces) followed by the number of tags t_i (0 ≤ t_i ≤ 100). The subsequent t_i words on the same line represent the tags of the book (strings of lowercase English letters). Output Print the titles of the books in the desired order, one per line. Examples Input 3 the great gatsby 3 classic literature fiction moby dick 2 sea adventure to kill a mockingbird 2 classic fiction Output moby dick to kill a mockingbird the great gatsby","solution":"def organize_books(n, book_data): Organizes books based on the number of tags and then by the alphabetical order of the title. Args: n (int): Number of books. book_data (list of str): Each element is a string with the book title followed by the number of tags and the tags themselves. Returns: list of str: Titles of the books in the desired order. books = [] for data in book_data: parts = data.split() title_idx = 0 for i in range(len(parts)): if parts[i].isdigit(): title_idx = i break title = \' \'.join(parts[:title_idx]) num_tags = int(parts[title_idx]) books.append((num_tags, title)) books.sort(key=lambda x: (x[0], x[1])) return [title for _, title in books]"},{"question":"Given a lowercase string consisting of alphabetic characters only, find the length of the longest consonant substring. Consonants are any characters that are not vowels (`aeiou`). ```if:csharp Documentation: Kata.Solve Method (String) Returns the length of the greatest continuous consonant substring in a string. Syntax public static int Solve( string str ) Parameters str Type: System.String The string to be processed. Return Value Type: System.Int32 The length of the greatest continuous consonant substring in str, or 0 if str contains no consonants. Exceptions Exception Condition ArgumentNullException str is null. ```","solution":"def longest_consonant_substring_length(s): Returns the length of the longest continuous consonant substring in s. Parameters: s (str): The input string consisting of lowercase alphabetic characters only. Returns: int: The length of the longest continuous consonant substring in s. vowels = \'aeiou\' max_length = current_length = 0 for char in s: if char in vowels: current_length = 0 else: current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a matrix of characters with dimensions NxM. Your task is to find a word in the matrix. The word can be formed by consecutive characters horizontally, vertically, or diagonally from any direction. Example 1: Input: matrix = [ [\'A\', \'B\', \'C\', \'D\'], [\'E\', \'F\', \'G\', \'H\'], [\'I\', \'J\', \'K\', \'L\'], [\'M\', \'N\', \'O\', \'P\'] ] word = \\"FGK\\" Output: True Explanation: The word \\"FGK\\" exists in a straight line vertically in the matrix. Example 2: Input: matrix = [ [\'A\', \'B\', \'C\', \'D\'], [\'E\', \'F\', \'G\', \'H\'], [\'I\', \'J\', \'K\', \'L\'], [\'M\', \'N\', \'O\', \'P\'] ] word = \\"BGK\\" Output: False Explanation: The word \\"BGK\\" cannot be formed in any direction. Function Signature: Your task is to complete the function `findWord()` which takes a matrix and a word as input parameters and returns a boolean value indicating if the word exists in the matrix. ```python def findWord(matrix, word): # Your code here ``` Constraints: - 1 <= NxM <= 100 - The word\'s length will be between 1 and min(N, M) - Matrix characters are all uppercase English letters","solution":"def findWord(matrix, word): def is_valid_position(x, y): return 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) def search_from(i, j, word_index, direction): if word_index == len(word): return True if not is_valid_position(i, j) or matrix[i][j] != word[word_index]: return False next_i, next_j = i + direction[0], j + direction[1] return search_from(next_i, next_j, word_index + 1, direction) directions = [ (0, 1), # horizontal right (1, 0), # vertical down (1, 1), # diagonal down-right (0, -1), # horizontal left (-1, 0), # vertical up (-1, -1), # diagonal up-left (1, -1), # diagonal down-left (-1, 1) # diagonal up-right ] for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == word[0]: for direction in directions: if search_from(i, j, 0, direction): return True return False"},{"question":"Your task is to determine the maximum sum of any subarray (contiguous elements) within a given sequence of integers. Input First line contains T denoting number of test cases. Each test case consists of one integer denoting the size of the sequence. The next line contains N space-separated integers. Output For each test case, print the maximum subarray sum in one line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ sequence[i] ≤ 10^4 SAMPLE INPUT 2 4 1 2 -1 2 5 -3 4 -1 2 1 SAMPLE OUTPUT 4 6","solution":"def max_subarray_sum(arr): Function to find maximum subarray sum. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Function to process multiple test cases. results = [] for case in test_cases: arr = case results.append(max_subarray_sum(arr)) return results"},{"question":"The kingdom of Sortland has n towns arranged in a straight line. Each town i has a wealth value v_i. The people of Sortland want to identify three specific towns: the one with the least wealth, the one with the median wealth, and the one with the greatest wealth. You need to help them identify these three towns. -----Input----- The first line contains an integer n (3 ≤ n ≤ 100) — the number of towns. The second line contains n integers v_1, v_2, ..., v_{n} (1 ≤ v_i ≤ 10000) — the wealth values of the towns. All values are distinct. -----Output----- Print three integers in a single line: the 1-based indices of the towns with the least wealth, the median wealth, and the greatest wealth, respectively. Ensure the output is in the same order: least wealth, median wealth, and greatest wealth. -----Examples----- Input 5 4 1 7 3 9 Output 2 1 5 Input 3 10 5 20 Output 2 1 3 -----Note----- In the first sample, the wealth values sorted are [1, 3, 4, 7, 9]. The town with the least wealth is 1 (index 2), the town with the median wealth is 4 (index 1), and the town with the greatest wealth is 9 (index 5). In the second sample, the wealth values sorted are [5, 10, 20]. The town with the least wealth is 5 (index 2), the town with the median wealth is 10 (index 1), and the town with the greatest wealth is 20 (index 3).","solution":"def sortland(n, wealth): Returns the 1-based indices of towns with the least wealth, median wealth, and greatest wealth. # Store the wealth values with their original indices indexed_wealth = list(enumerate(wealth)) # Sort by wealth values indexed_wealth.sort(key=lambda x: x[1]) # Extract the indices which are 1-based least_wealth_index = indexed_wealth[0][0] + 1 median_wealth_index = indexed_wealth[n // 2][0] + 1 greatest_wealth_index = indexed_wealth[-1][0] + 1 return least_wealth_index, median_wealth_index, greatest_wealth_index"},{"question":"You are hired as a software engineer at a logistics company that manages a fleet of trucks. Each truck can carry a specific maximum weight, and each delivery is associated with a particular weight of goods that need transportation. You are to write a function that simulates assigning deliveries to trucks. Specifically, the task is to determine if it\'s possible to assign all deliveries into the trucks such that no truck is overloaded. -----Input----- The first line contains the number of test cases t. For each test case, the following lines are given: - The first line contains an integer, n, the number of trucks. - The second line contains n integers where each integer represents the maximum weight capacity of a truck. - The third line contains an integer m, the number of deliveries. - The fourth line contains m integers where each integer represents the weight of a delivery. -----Output----- For each test case, output \\"Possible\\" if all deliveries can be successfully assigned into the trucks without overloading any truck, otherwise output \\"Impossible\\". -----Constraints----- 1 <= t <= 10 1 <= n, m <= 1000 1 <= Maximum weight capacity of each truck <= 10^6 1 <= Weight of each delivery <= 10^6 -----Example----- Input: 2 3 10 5 15 5 2 4 6 8 5 2 8 8 3 9 4 3 Output: Possible Impossible Function Signature: def can_assign_deliveries(t: int, cases: List[Tuple[int, List[int], int, List[int]]]) -> List[str]","solution":"from typing import List, Tuple def can_assign_deliveries(t: int, cases: List[Tuple[int, List[int], int, List[int]]]) -> List[str]: results = [] for case in cases: n, truck_capacities, m, delivery_weights = case # Sort truck capacities in descending order truck_capacities.sort(reverse=True) # Sort delivery weights in descending order delivery_weights.sort(reverse=True) possible = True for delivery_weight in delivery_weights: assigned = False for i in range(n): if truck_capacities[i] >= delivery_weight: truck_capacities[i] -= delivery_weight assigned = True break if not assigned: possible = False break if possible: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are given a 4×4 grid where each cell contains an integer. You are also given an integer `x`. Your task is to count the number of cells that contain an integer greater than `x`. ----Constraints---- - The grid contains positive integers. - Integer `x` will be a positive integer. ----Input---- The input is given from standard input in the following format: The first four lines each contain four integers separated by spaces, representing the grid. The fifth line contains the integer `x`. ----Output---- Print the number of cells in the grid that contain an integer greater than `x`. ----Sample Input---- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 10 ----Sample Output---- 6 In this example, the integers greater than 10 in the grid are 11, 12, 13, 14, 15, and 16. Hence, the output is 6.","solution":"def count_cells_greater_than_x(grid, x): Count the number of cells in the 4x4 grid that contain an integer greater than x. Args: grid (list of list of int): A 4x4 grid of integers. x (int): The threshold integer. Returns: int: The number of cells with an integer greater than x. count = 0 for row in grid: for cell in row: if cell > x: count += 1 return count # Reading input from standard input def read_input(): import sys input = sys.stdin.read().strip().split() grid = [] for i in range(4): grid.append(list(map(int, input[i * 4:(i + 1) * 4]))) x = int(input[16]) return grid, x if __name__ == \\"__main__\\": grid, x = read_input() print(count_cells_greater_than_x(grid, x))"},{"question":"You are given a matrix of dimensions m x n, where each cell contains an integer. A path in the matrix is defined as a sequence of cells such that each cell in the sequence is adjacent to the previous cell (adjacent means up, down, left, or right). The sum of a path is the sum of all the integers in that path. Your task is to find the maximum path sum in the matrix such that you can start and end at any cell and there is no limit on the number of cells in the path. Each cell can be visited multiple times while forming the desired path. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), where m is the number of rows and n is the number of columns in the matrix. The next m lines each contain n integers where the j-th integer in the i-th line is the value of the cell in the i-th row and j-th column (−1000 ≤ value ≤ 1000). Output Print a single integer, the maximum path sum that can be obtained as per the given rules. Example Input: 4 4 1 2 3 4 4 5 6 7 7 8 9 10 10 11 12 13 Output: 100 Input: 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 Output: -1","solution":"def max_path_sum(matrix): Returns the maximum path sum in the matrix where you can start and end at any cell and there is no limit on the number of cells in the path. Each cell can be visited multiple times while forming the desired path. m = len(matrix) n = len(matrix[0]) # The algorithm to be used here is to find the maximum number in the matrix max_val = float(\'-inf\') for row in range(m): for col in range(n): if matrix[row][col] > max_val: max_val = matrix[row][col] return max_val"},{"question":"You are given a list of integers. For each integer in the list, determine the smallest positive integer that cannot be represented as the subset sum of some of its prefixes. INPUT: First line contains an integer t, the number of test cases. The next t lines each contain a single integer n, the length of the list, followed by n space-separated integers representing the list of numbers. OUTPUT: For each test case, output the smallest positive integer that cannot be represented as the subset sum of some of its prefixes in the list. CONSTRAINTS: 1 ≤ t ≤ 10000 1 ≤ n ≤ 100 1 ≤ list[i] ≤ 10000 SAMPLE INPUT 1 5 1 2 3 10 20 SAMPLE OUTPUT 7 Explanation For the test case with list [1, 2, 3, 10, 20], the possible subset sums of its prefixes before the number 10 are {1, 2, 3, 1+2=3, 1+3=4, 2+3=5, 1+2+3=6}. The smallest positive integer not in this set is 7.","solution":"def smallest_nonrepresentable_prefix_sum(arr): arr.sort() smallest_missing_sum = 1 for num in arr: if num > smallest_missing_sum: break smallest_missing_sum += num return smallest_missing_sum def solve(t, cases): results = [] for case in cases: n, arr = case[0], case[1:] result = smallest_nonrepresentable_prefix_sum(arr) results.append(result) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) cases = [] for i in range(1, t + 1): case = list(map(int, lines[i].split())) cases.append(case) return t, cases input_str = \'1n5 1 2 3 10 20\' t, cases = parse_input(input_str) results = solve(t, cases) for result in results: print(result)"},{"question":"Given a binary tree, return the largest value in each row of the tree. The rows are enumerated from top to bottom starting with row 0. If the tree is empty, return an empty list. Example 1: Input: 1 / 3 2 / 5 3 9 Output: [1, 3, 9] Explanation: In the first row, the largest value is 1 (root node). In the second row, the largest value is 3. In the third row, the largest value is 9. Example 2: Input: 7 / 5 8 / / 9 6 10 / 11 Output: [7, 8, 10, 11] Explanation: In the first row, the largest value is 7. In the second row, the largest value is 8. In the third row, the largest value is 10. In the fourth row, the largest value is 11. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestValues() which takes the root of the binary tree as input and returns an array containing the largest value in each row. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Auxiliary Space: O(D), where D is the depth of the tree. Constraints: 1 <= Number of nodes in the tree <= 10^4 -10^5 <= Node value <= 10^5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right from collections import deque def largestValues(root): Function to find the largest value in each row of a binary tree. :param root: TreeNode :return: List[int] if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) max_val = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_val = max(max_val, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_val) return result"},{"question":"Given a string of lowercase characters, you need to find out the length of the longest substring without repeating characters. The substring should be as long as possible while maintaining the order of the characters as it appears in the original string. For example: ``` Input: \\"abcaefgb\\" Output: 6 Explanation: The longest substring without repeating characters is \\"abcaef\\" or \\"efgb\\", both of which have a length of 6. ``` Your task is to implement the function `longest_unique_substring(s)` which takes a string `s` as an argument and returns the length of the longest substring without repeating characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. last_seen = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a binary tree, your task is to find the maximum path sum. The path must start and end at any node in the tree. You may assume that each node contains an integer value, which can be positive, negative, or zero. Example 1: Input: 1 / 2 3 Output: 6 Explanation: The maximum path sum is obtained by the path 2 -> 1 -> 3. Example 2: Input: -10 / 9 20 / 15 7 Output: 42 Explanation: The maximum path sum is obtained by the path 15 -> 20 -> 7. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `maxPathSum()`, which takes the root of the tree as its only argument and returns the maximum path sum. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(log(N)). Constraints: 1 ≤ Number of Nodes ≤ 10^5 -1000 ≤ Node Value ≤ 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): This function returns the maximum path sum in a binary tree. The path can start and end at any node. def helper(node): nonlocal max_sum if not node: return 0 # Calculate the maximum path sum through the left child left_sum = max(helper(node.left), 0) # Calculate the maximum path sum through the right child right_sum = max(helper(node.right), 0) # Calculate the maximum path sum with the current node as the root current_sum = node.val + left_sum + right_sum # Update the global maximum path sum if the current path sum is greater max_sum = max(max_sum, current_sum) # For the recursion, return the maximum path sum starting from the current node return node.val + max(left_sum, right_sum) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":".count(x): This operation counts the number of occurrences of element boldsymbol{x} in the list. The .count(x) operation returns an integer. Example: >>> lst = [1, 2, 3, 3, 3, 4, 5, 6, 3] >>> print(lst.count(3)) 4 >>> print(lst.count(2)) 1 >>> print(lst.count(7)) 0 .index(x): This operation returns the zero-based index of the first occurrence of element boldsymbol{x} in the list. If element boldsymbol{x} does not exist, it raises a ValueError. The .index(x) operation returns an integer. Example: >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> print(lst.index(4)) 3 >>> print(lst.index(9)) 8 >>> print(lst.index(10)) ValueError: 10 is not in list Task: You have a non-empty list boldsymbol{mathrm{~L~}}, and you have to perform N commands given in N lines. The commands will be count and index. Input Format: The first line contains integer n, the number of elements in the list boldsymbol{mathrm{~L~}}. The second line contains n space-separated elements of list boldsymbol{mathrm{~L~}}. All of the elements are integers. The third line contains integer N, the number of commands. The next N lines contains either count or index commands followed by their associated value. Constraints: 0<n<20 boldsymbol{0<N<20} Output Format: Print the results of the operations, one per line. Sample Input: 9 1 2 3 3 3 4 5 6 3 5 count 3 index 3 count 5 index 2 index 10 Sample Output: 4 2 1 1 ValueError: 10 is not in list","solution":"def perform_operations(n, L, N, commands): results = [] for command in commands: operation, value = command.split() value = int(value) if operation == \'count\': results.append(L.count(value)) elif operation == \'index\': try: results.append(L.index(value)) except ValueError: results.append(f\\"ValueError: {value} is not in list\\") return results # Example usage: n = 9 L = [1, 2, 3, 3, 3, 4, 5, 6, 3] N = 5 commands = [ \\"count 3\\", \\"index 3\\", \\"count 5\\", \\"index 2\\", \\"index 10\\" ] print(perform_operations(n, L, N, commands))"},{"question":"Given a non-negative integer N, write a function that returns the next higher number with the same number of set bits (1s) in its binary representation. Example 1: Input: N = 5 Output: 6 Explanation: The binary representation of 5 is 101. The next higher number with two set bits is 110, which is 6. Example 2: Input: N = 8 Output: 16 Explanation: The binary representation of 8 is 1000. The next higher number with one set bit is 10000, which is 16. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextHigherWithSameBits() which takes an integer N as input parameter and returns the integer which is the next higher number with the same number of set bits. Expected Time Complexity: O(LogN) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{9}","solution":"def nextHigherWithSameBits(N): Returns the next higher number with the same number of set bits as N. # Compute the rightmost non-trailing zero bit right_most_non_trailing_zero = N & -N next_higher_one_bit = N + right_most_non_trailing_zero right_ones_pattern = N ^ next_higher_one_bit right_ones_pattern = right_ones_pattern // right_most_non_trailing_zero right_ones_pattern >>= 2 next_number = next_higher_one_bit | right_ones_pattern return next_number"},{"question":"A group of botanists worked on cataloging different species of plants. Each plant species can be represented by a unique sequence of characters called the species code. However, they are particularly interested in species that contain at least one vowel in their codes. For the purpose of this question, the vowel characters are \'a\', \'e\', \'i\', \'o\', \'u\'. Given a list of species codes, your task is to determine how many of the species codes contain at least one vowel. Input: First line will consist of an integer T representing the number of species codes. Next T lines will each have a species code, which is a string of lowercase letters. Output: Output the number of species codes that contain at least one vowel. Constraints: 1 ≤ T ≤ 10^5 1 ≤ length of each species code ≤ 100 Sample Input: 5 cactus fern sequoia spruce pine Sample Output: 3 Explanation: Out of 5 species codes, \\"sequoia\\", \\"spruce\\", and \\"pine\\" contain at least one vowel, resulting in the count 3.","solution":"def count_species_with_vowels(species_codes): vowels = set(\'aeiou\') count = 0 for code in species_codes: if any(char in vowels for char in code): count += 1 return count # Example usage: # species_codes = [\\"cactus\\", \\"fern\\", \\"sequoia\\", \\"spruce\\", \\"pine\\"] # print(count_species_with_vowels(species_codes)) # Output: 3"},{"question":"John has a string S consisting of lowercase English letters. He wants to find out if one of the permutations of the string is a palindrome. Write a function `canFormPalindrome` that takes a string S as an input and returns \\"YES\\" if any permutation of the string can form a palindrome, otherwise returns \\"NO\\". Input: - A single line containing a string S (1 ≤ length(S) ≤ 100,000). Output: - Print \\"YES\\" if a palindrome permutation exists, otherwise print \\"NO\\". Constraints: - The string will only contain lowercase English letters. SAMPLE INPUT civic SAMPLE OUTPUT YES SAMPLE INPUT ivicc SAMPLE OUTPUT YES SAMPLE INPUT hello SAMPLE OUTPUT NO","solution":"def canFormPalindrome(s): Returns \\"YES\\" if any permutation of the input string s can form a palindrome, otherwise returns \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Check the number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be able to form a palindrome, there should be at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Create a program that reads a list of items sold in a store along with their categories, and outputs the number of items sold in each category. There are three categories: Electronics, Clothing, and Groceries. Input A comma-separated pair of items sold and categories is given over multiple lines. The item is a string representing the item name and the category is one of the strings \\"Electronics\\", \\"Clothing\\", or \\"Groceries\\". The number of items does not exceed 100. Output Number of Electronics items sold on the first line Number of Clothing items sold on the second line Number of Groceries items sold on the third line Example Input Laptop,Electronics Shirt,Clothing Milk,Groceries Phone,Electronics Pants,Clothing Bread,Groceries TV,Electronics Jacket,Clothing Cheese,Groceries Output 3 3 3","solution":"def count_items_by_category(items): Counts the number of items sold in each of the categories: Electronics, Clothing, and Groceries. Args: items (list of str): A list of strings where each string represents an item and a category separated by a comma. Returns: tuple: A tuple with the counts of Electronics, Clothing, and Groceries items respectively. counts = {\\"Electronics\\": 0, \\"Clothing\\": 0, \\"Groceries\\": 0} for item in items: item_name, category = item.split(\',\') if category in counts: counts[category] += 1 return counts[\\"Electronics\\"], counts[\\"Clothing\\"], counts[\\"Groceries\\"]"},{"question":"```if-not:sql Write a function that takes a string as an argument and returns a dictionary with each character in the string as the key and the number of times it appears as the value. ``` ```if:sql SQL Notes: You will be given a table, `word`, with one column `letter`. Return a table with columns `character` and `frequency`, where `character` represents each unique letter from the `letter` column and `frequency` represents the count of each letter. # word table schema * letter CHAR(1) # output table schema * character CHAR(1) * frequency INT ```","solution":"def count_characters(s): Takes a string as an argument and returns a dictionary with each character in the string as the key and the number of times it appears as the value. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"In a distant village, there is a magical well with an infinite amount of water. Every day, the villagers fetch water from the well into jars. Each villager receives a specific number of jars, and the total number of jars fetched in a day forms a sequence. Unfortunately, at the end of each day, many villagers forget how many jars they fetched. Your task is to reconstruct the sequence of daily fetched jars by finding distinct sequences that sum to the total number of jars fetched in a day. For a given total number T, output all distinct possible sequences of positive integers that sum up to T. Constraints 1 ≤ T ≤ 20 Input The input contains an integer T Output Output all distinct sequences of positive integers that sum up to T. Each sequence should be printed on a new line, and the numbers in each sequence should be separated by a space. The sequences should be printed in lexicographic order. Example Input: 5 Output: 1 1 1 1 1 1 1 1 2 1 1 3 1 2 2 1 4 2 3 5 Explanation There are 7 distinct sequences of positive integers that sum up to 5. The sequences should be printed in lexicographic order.","solution":"def find_sequences(total, current_sequence, result): Helper function to find all distinct sequences of positive integers that sum up to `total`. if total == 0: result.append(current_sequence[:]) return start = current_sequence[-1] if current_sequence else 1 for i in range(start, total + 1): current_sequence.append(i) find_sequences(total - i, current_sequence, result) current_sequence.pop() def find_all_sequences(T): Finds all distinct sequences of positive integers that sum up to T. result = [] find_sequences(T, [], result) for sequence in result: print(\\" \\".join(map(str, sequence)))"},{"question":"Given a list of non-negative integers, you are tasked with finding the smallest contiguous subarray of which the sum is at least a given number `S`. If there is no such subarray, return 0 instead. # Example Example 1 Input: ``` S = 7, nums = [2,3,1,2,4,3] ``` Output: ``` 2 ``` Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2 Input: ``` S = 4, nums = [1,4,4] ``` Output: ``` 1 ``` Explanation: The subarray [4] has the minimal length under the problem constraint. Example 3 Input: ``` S = 11, nums = [1,1,1,1,1,1,1,1] ``` Output: ``` 0 ``` Explanation: There is no subarray with a sum of at least 11. # Constraints - 1 <= len(nums) <= 100000 - 0 <= nums[i] <= 10000","solution":"def minSubArrayLen(S, nums): Returns the length of the smallest contiguous subarray of which the sum is at least S. If there is no such subarray, returns 0. n = len(nums) left = 0 total = 0 min_len = float(\'inf\') for right in range(n): total += nums[right] while total >= S: min_len = min(min_len, right - left + 1) total -= nums[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"David is fascinated by matrices, especially matrices that have special properties. A matrix is called *Magic Matrix* if the sum of every row and the sum of every column is the same. Today, David has a special task. He is given a matrix of integers and he wants to identify how many *Magic Matrix* submatrices exist within it. A submatrix is defined as any rectangular area within the matrix. Your task is to determine the number of such submatrices. # Input - The first line of the input contains two integers, `N` and `M`, denoting the number of rows and columns in the given matrix. - The next N lines each contain M integers, representing the elements of the matrix. - The next line contains a single integer, `Q`, denoting the number of queries. - The next `Q` lines each contain four integers: `r1`, `c1`, `r2`, `c2`. Each query asks whether the submatrix defined by the top-left corner `(r1, c1)` and the bottom-right corner `(r2, c2)` is a Magic Matrix. # Output For each query, print \\"YES\\" if the defined submatrix is a Magic Matrix, otherwise print \\"NO\\". # Constraints - ( 1 leq N, M leq 100 ) - ( 1 leq matrix[i][j] leq 1000 ) - ( 1 leq Q leq 1000 ) - ( 1 leq r1 leq r2 leq N ) - ( 1 leq c1 leq c2 leq M ) # Sample Input ``` 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 1 1 2 2 1 1 3 4 2 2 4 4 ``` # Sample Output ``` YES YES YES ``` # Explanation In the above example, all the provided submatrices are Magic Matrices as all rows and columns within those submatrices have equal sums.","solution":"def is_magic_matrix(matrix, r1, c1, r2, c2): rows_sum = [sum(matrix[i][c1:c2 + 1]) for i in range(r1, r2 + 1)] cols_sum = [sum(matrix[i][j] for i in range(r1, r2 + 1)) for j in range(c1, c2 + 1)] if len(set(rows_sum)) != 1 or len(set(cols_sum)) != 1: return \\"NO\\" return \\"YES\\" def magic_matrix_submatrices(matrix, queries): results = [] for (r1, c1, r2, c2) in queries: results.append(is_magic_matrix(matrix, r1 - 1, c1 - 1, r2 - 1, c2 - 1)) return results"},{"question":"Write a function to determine if a given date is valid or not. A valid date is in \\"YYYY-MM-DD\\" format where: - YYYY is a four-digit number representing the year. The range can be from 0000 to 9999. - MM is a two-digit number representing the month with values from 01 (January) to 12 (December). - DD is a two-digit number representing the day of the month. The values should correspond to the valid days in the given month and year (consider leap years). Leap year is defined as follows: - A year is a leap year if it is divisible by 4 but not divisible by 100, except that years divisible by 400 are also leap years. Examples: - 2012 is a leap year as it can be divided by 4 but not by 100. - 1900 is not a leap year as it is divisible by 100 but not by 400. - 2000 is a leap year as it is divisible by 400. Note: - There are no extra spaces or characters in the input string. Valid date examples: - \\"2012-02-29\\" (leap year) - \\"2019-11-30\\" Invalid date examples: - \\"2019-02-29\\" (not a leap year) - \\"0000-00-00\\" (invalid format) - \\"2020-13-10\\" (invalid month) - \\"2021-04-31\\" (invalid day) Function signature: ```python def is_valid_date(date_str: str) -> bool: pass ``` Example 1: ``` Input: \\"2020-02-29\\" Output: True Explanation: 2020 is a leap year, and February 29 is a valid date in 2020. ``` Example 2: ``` Input: \\"2019-04-31\\" Output: False Explanation: April has only 30 days. ``` Example 3: ``` Input: \\"2020-13-10\\" Output: False Explanation: The month 13 does not exist in any year. ``` Example 4: ``` Input: \\"2100-02-29\\" Output: False Explanation: 2100 is not a leap year, so February 29 is not a valid date. ```","solution":"def is_valid_date(date_str): Determines if a given date string is valid. # Split the date into year, month, and day parts = date_str.split(\'-\') if len(parts) != 3: return False year_str, month_str, day_str = parts # Check if all parts are of the correct length if len(year_str) != 4 or len(month_str) != 2 or len(day_str) != 2: return False # Convert strings to integers try: year = int(year_str) month = int(month_str) day = int(day_str) except ValueError: return False # Check if the month is valid if month < 1 or month > 12: return False # Number of days in each month month_days = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31 } # Adjust for leap year if month == 2 and is_leap_year(year): month_days[2] = 29 # Check if the day is valid if day < 1 or day > month_days.get(month, 0): return False return True def is_leap_year(year): Determines if a given year is a leap year. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True return False return True return False"},{"question":"A company is organizing a coding challenge, and participants need to solve a series of problems. The participants are ranked based on the scores they achieve in these problems. There are N participants in total. You are given the scores of each participant in the form of a list. The company decides to give special badges to those participants whose scores are the maximum among all the scores recorded thus far (including their own score) when iterated from left to right. Write a program to determine the number of participants who will receive badges based on the above criteria. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of participants. - The second line contains N space-separated integers representing the scores of the participants. -----Output----- For each test case, print a single line containing one integer — the number of participants who receive badges. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 0 le score le 10^9 -----Sample Input----- 2 5 1 2 3 2 5 4 1 2 3 4 -----Sample Output----- 4 4 -----Explanation----- Example case 1: The participants with scores [1, 2, 3, 5] will receive badges. Initially, the first participant gets a badge as their score (1) is maximum among scores seen so far. The second participant\'s score (2) is greater than 1, so they get a badge. The third participant\'s score (3) is greater than the previous maximum (2), so they get a badge. The fourth participant\'s score (2) is not greater than 3, so they do not get a badge. The fifth participant\'s score (5) is greater than the previous maximum (3), so they get a badge. Example case 2: Each participant\'s score (1, 2, 3, 4) is greater than the previous maximum, so all of them receive badges.","solution":"def count_badges(test_cases): results = [] for case in test_cases: N = case[0] scores = case[1] max_score = -1 badges = 0 for score in scores: if score > max_score: max_score = score badges += 1 results.append(badges) return results"},{"question":"Wynona is arranging a secret meeting for a group of researchers in a beautiful forest. She needs to send encrypted messages to ensure only authorized personnel can read them. Wynona came up with a simple encryption scheme. For each character in the message, she will shift it right by k positions in the alphabet. The alphabet is considered circular, i.e., after \'z\' comes \'a\' again. For example, with k = 3, \'a\' becomes \'d\', \'z\' becomes \'c\', and so on. Spaces, punctuation, and other non-letter characters remain unchanged. Wynona wants to automate this process and has asked for your help. Given a message and an integer k, implement a program that encrypts the message using this scheme. -----Input----- The first line contains an integer k (0 ≤ k ≤ 25). The second line contains a string message, consisting of printable ASCII characters (the total length of the string can be up to 500). -----Output----- Output the encrypted message after shifting each alphabetical character by k positions. -----Examples----- Input 3 meet at the treehouse at 5 pm Output phhw dw wkh wuhhkrxvh dw 5 sp Input 4 hello, world! Output lipps, asvph! -----Note----- For the first example, each letter in \\"meet at the treehouse at 5 pm\\" is shifted by 3 positions: - \'m\' becomes \'p\' - \'e\' becomes \'h\' - \'t\' remains unchanged because it is shifted to \'t\'. - Spaces and non-letters (like numbers) remain unchanged. For the second example, everything works similarly, with: - \'h\' becomes \'l\' - \'e\' becomes \'i\' - and so on. Remember that shifting past \'z\' wraps around to \'a\' in the alphabet.","solution":"def encrypt_message(k, message): Encrypts the message by shifting each alphabetical character by k positions. result = [] for char in message: if char.isalpha(): shift = k % 26 if char.islower(): result.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif char.isupper(): result.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Given a grid of \'0\'s and \'1\'s, where \'0\'s represent open land and \'1\'s represent walls, find the shortest path from the top-left corner to the bottom-right corner. The path can only move up, down, left, or right, and cannot pass through walls. Write a function `shortest_path(grid: List[List[int]]) -> int` that returns the length of the shortest path. If there is no path, return -1. # Input An `n x m` grid of \'0\'s and \'1\'s where `1 <= n, m <= 100`. # Output Return an integer representing the length of the shortest path, or -1 if no such path exists. # Examples Example 1 **Input:** ``` grid = [ [0, 0, 1, 0], [1, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0] ] ``` **Output:** ``` 7 ``` **Explanation:** The shortest path is 7 steps: (0, 0) -> (0, 1) -> (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). Example 2 **Input:** ``` grid = [ [0, 1], [1, 0] ] ``` **Output:** ``` -1 ``` **Explanation:** There is no path from the top-left to the bottom-right corner. Example 3 **Input:** ``` grid = [ [0, 0, 0], [1, 1, 0], [1, 0, 0] ] ``` **Output:** ``` 6 ``` **Explanation:** The shortest path is 6 steps: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1) -> (2, 0).","solution":"from collections import deque from typing import List def shortest_path(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == n - 1 and c == m - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Susan, an engineer working in the field of IoT, often needs to calculate the distance covered by her sensors deployed in a 2-dimensional plane. Each sensor logs its position periodically, and Susan needs to find out the total distance traveled by each sensor over various time intervals. She needs a program to automate these calculations for multiple sensors. Your task is to write a program that processes data logs of sensors and calculates the total distance traveled by each sensor. Each sensor’s data log contains multiple entries, each entry representing the sensor\'s position at a specific time. We define the distance between two points (x1, y1) and (x2, y2) as the Euclidean distance: [ text{Distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input The input consists of multiple datasets. Each dataset details the data logs of multiple sensors followed by a line containing a single zero. Each dataset includes: m (the number of sensors) For each sensor, the following data will be provided: - n (the number of position entries for the sensor) - A sequence of n lines, each containing two integers x and y, representing the sensor\'s position at a specific moment in time. Output For each dataset, the total distance traveled by each sensor should be printed, each on a new line in the order they appear in the input. The result should be printed to four decimal places, followed by a line containing five minus symbols \'-----\'. Example Input 2 3 0 0 3 4 6 8 4 1 1 2 2 3 3 4 4 2 2 0 0 0 4 3 1 1 1 2 1 3 0 Output 10.0000 4.2426 ----- 4.0000 2.0000 -----","solution":"import math def calculate_total_distance(positions): Calculates the total Euclidean distance traveled given a list of positions. total_distance = 0.0 for i in range(1, len(positions)): x1, y1 = positions[i-1] x2, y2 = positions[i] distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) total_distance += distance return total_distance def process_input(input_data): Processes the input data to calculate the total distance traveled by each sensor. index = 0 output = [] while index < len(input_data): num_sensors = int(input_data[index]) if num_sensors == 0: break index += 1 for _ in range(num_sensors): num_positions = int(input_data[index]) index += 1 positions = [] for _ in range(num_positions): x, y = map(int, input_data[index].split()) positions.append((x, y)) index += 1 total_distance = calculate_total_distance(positions) output.append(f\\"{total_distance:.4f}\\") output.append(\\"-----\\") return output"},{"question":"Create a function that determines if a given integer is a palindrome. An integer is a palindrome when it reads the same forward and backward. For this task, do not convert the integer to a string. - n will be a non-negative integer such that 0 <= n < 10^18 For example, given 121 the function should return true: ``` 121 reads as 121 from both directions. ``` Given 123 the function should return false: ``` 123 reads as 321 from the backward direction. ```","solution":"def is_palindrome(n): Determines if a given non-negative integer is a palindrome. if n < 0: return False original = n reverse = 0 while n > 0: reverse = reverse * 10 + n % 10 n = n // 10 return original == reverse"},{"question":"Given an integer `n`, draw a diamond shape where the width of the middle row is `2*n-1` and the height is `2*n-1`. The diamond consists of asterisks (\'*\') surrounded by spaces to form the shape where the central row has no leading or trailing spaces. Each successive outer row gets narrower, converging at the top and bottom of the diamond. Example 1: Input: n = 3 Output: * *** ***** *** * Example 2: Input: n = 4 Output: * *** ***** ******* ***** *** * Your Task: You don\'t need to read input. Your task is to complete the function `printDiamond()` which takes an integer `n` as an input parameter and prints the required diamond shape. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 50","solution":"def printDiamond(n): Prints a diamond shape of height and width 2*n-1 with n as input. Args: n : int The number of rows in the top half of the diamond. Returns: str The diamond shape in string format. diamond = [] # Generate the upper part of the diamond for i in range(n): space = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(space + stars + space) # Generate the lower part of the diamond for i in range(n - 2, -1, -1): space = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(space + stars + space) return \'n\'.join(diamond)"},{"question":"Emma is a developer who often works with large sorted arrays of integers. One common task is to find the k most frequent elements in a given array. She wants an efficient algorithm to solve this problem. Write a function that, given an array of integers and an integer k, returns the k most frequent elements. Ensure that your solution handles cases where multiple elements have the same frequency and outputs any correct combination in such scenarios. Input The first line contains an integer n, the number of elements in the array. The second line contains n integers representing the array. The third line contains the single integer k. Output Output k integers which are the most frequent elements in the array. If there are multiple valid answers, output any of them. Constraints 1 <= n <= 10^5 1 <= array[i] <= 10^5 1 <= k <= n Example Input: 6 1 1 1 2 2 3 2 Output: 1 2 Input: 8 4 4 4 2 2 3 3 3 3 Output: 4 3 2","solution":"from collections import Counter import heapq def top_k_frequent(nums, k): Returns the k most frequent elements in the given array of integers. If there are multiple valid answers, any order of elements is correct. # Build a frequency map count = Counter(nums) # Use a heap to get the k most frequent elements return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"Ina has a collection of dominoes, each with individual numbers written on either side. The dominoes can be rotated to swap the numbers on the two sides. Ina wants to find out if she can choose a sequence of dominoes that can be placed in a line such that the numbers on adjacent ends match each other. Ina gives you several sequences of dominoes, and for each sequence, you\'d like to tell her whether such a line can be formed. A domino is represented as a pair of integers (a, b), where a is the number on one side and b is the number on the other side. Dominos can be rotated so (a, b) can also be considered as (b, a). Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of sequences. Each of the next t lines starts with an integer n (1 ≤ n ≤ 20) — the number of dominoes in the sequence. Then follow 2n integers a1, b1, a2, b2, ..., an, bn representing the n dominoes in the sequence, where (ai, bi) is the i-th domino. Output For each sequence, print \\"Yes\\" if it\'s possible to form a line as described, otherwise print \\"No\\". Examples Input 3 3 1 2 2 3 3 1 4 1 2 2 3 3 4 4 1 2 1 2 3 4 Output Yes Yes No Explanation In the first sequence, the possible arrangement is [1,2], [2,3], [3,1]. In the second sequence, one possible arrangement is [1,2], [2,3], [3,4], [4,1]. In the third sequence, there is no possible arrangement since the numbers (1,2) and (3,4) do not match at any end.","solution":"def can_form_domino_line(n, dominoes): from collections import defaultdict, deque graph = defaultdict(int) edges = defaultdict(list) for i in range(n): a, b = dominoes[2 * i], dominoes[2 * i + 1] graph[a] += 1 graph[b] += 1 edges[a].append(b) edges[b].append(a) odd_degree_vertices = [v for v in graph if graph[v] % 2 != 0] if len(odd_degree_vertices) not in [0, 2]: return False start_vertex = next(iter(graph)) queue = deque([start_vertex]) visited = set() while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) for neighbor in edges[vertex]: if neighbor not in visited: queue.append(neighbor) if len(visited) == len(graph): return True return False def domino_sequences(t, sequences): results = [] for i in range(t): n = sequences[i][0] dominoes = sequences[i][1:] if can_form_domino_line(n, dominoes): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a list of integers, where each integer appears exactly twice, except for one integer that appears only once, identify the integer that appears only once. Your task is to implement a function `findUnique` that takes in a list of integers and returns the integer that appears only once. You can assume the input list will always be non-empty and a solution is guaranteed. Example Input and Output: ```python findUnique([4, 3, 2, 4, 1, 3, 2]) -> 1 findUnique([7, 2, 2, 3, 3]) -> 7 findUnique([10, 10, 3, 4, 4]) -> 3 ``` Constraints: - The input list will contain integers and the length will be in the range [1, 10^5]. - The integers are within the range [-10^6, 10^6].","solution":"def findUnique(nums): Finds the unique integer in a list where every other integer appears exactly twice except for one. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Write a function `extract_domain()` that isolates and returns the domain name from a given email address. ```python >>> email = \\"contact@openai.com\\" >>> extract_domain(email) \'openai.com\' ``` The function should return the domain name as a string. The email addresses will always follow the standard format, i.e., `local_part@domain`.","solution":"def extract_domain(email): Extract and return the domain name from the given email address. Parameters: email (str): The email address from which to extract the domain. Returns: str: The domain name extracted from the email. return email.split(\'@\')[1]"},{"question":"Given a binary tree, imagine you are standing on the right side of it, return the values of the nodes you can see ordered from top to bottom. The binary tree is represented by TreeNode class: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Write a function `rightSideView` that takes the root of a binary tree as an input and returns a list of integer values representing the visible nodes from the right side. Example 1: Input: root = [1,2,3,null,5,null,4] Output: [1, 3, 4] Explanation: 1 <--- / 2 3 <--- 5 4 <--- Example 2: Input: root = [1,null,3] Output: [1, 3] Explanation: 1 <--- 3 <--- Example 3: Input: root = [] Output: [] Explanation: No nodes to view as the tree is empty. Constraints: - The number of nodes in the tree is in the range [0, 100]. - -100 <= Node.val <= 100.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rightSideView(root): Return the values of the nodes that are visible from the right side. if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) for i in range(level_length): node = queue.popleft() if i == level_length - 1: result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Ella is playing a new board game called \\"Target Path.\\" In this game, she needs to move her game piece across a grid to reach a specific target location, but she can only move in certain ways. Help Ella determine the number of distinct paths she can take to reach the target. -----Input----- The first line contains two integers, m and n, representing the dimensions of the grid (1 leq m, n leq 100). The second line contains three integers x_s, y_s, x_t, y_t representing the starting and target coordinates. The game piece can only move right (R) or down (D) one cell at a time. -----Output----- The output should be a single integer representing the number of distinct paths from the starting coordinate (x_s, y_s) to the target coordinate (x_t, y_t). -----Examples----- Sample Input: 3 3 1 1 3 3 Sample Output: 6 -----Note----- In the example, the 6 distinct paths are: - RRD - RDR - DRR - DDR - DRD - RDD","solution":"def number_of_paths(m, n, x_s, y_s, x_t, y_t): Calculate the number of distinct paths from (x_s, y_s) to (x_t, y_t) in a grid of dimensions m x n, using only right and down moves. # If the starting or target positions are out of grid bounds, no paths if not (1 <= x_s <= m and 1 <= y_s <= n and 1 <= x_t <= m and 1 <= y_t <= n): return 0 # Translate coordinates from 1-indexed to 0-indexed x_s -= 1 y_s -= 1 x_t -= 1 y_t -= 1 # If the starting point is the target point, there\'s only one path if (x_s, y_s) == (x_t, y_t): return 1 # Initialize a grid for dynamic programming dp = [[0] * n for _ in range(m)] dp[x_s][y_s] = 1 # Starting point # Fill the dp table for i in range(x_s, x_t + 1): for j in range(y_s, y_t + 1): if i > x_s: dp[i][j] += dp[i - 1][j] if j > y_s: dp[i][j] += dp[i][j - 1] return dp[x_t][y_t]"},{"question":"You are given a sequence of N integers. You are allowed to traverse the sequence and pick certain numbers such that the sum of the selected numbers is maximized. However, you have to follow certain rules while picking the numbers: 1. You cannot pick two adjacent numbers. 2. If you pick any number, you have to skip the next two numbers (i.e., if you pick the number at index i, you cannot pick the numbers at index i+1 and index i+2). Write a function that, given the sequence of integers, returns the maximum sum possible by following these rules. Input format The first line contains an integer N (1 ≤ N ≤ 1000) which denotes the number of elements in the sequence. The second line contains N integers, separated by spaces, which represent the sequence of elements (-1000 ≤ element ≤ 1000). Output format Output a single integer which represents the maximum sum that can be obtained by selecting elements according to the above rules. If no elements can be picked to achieve a positive sum, output \\"kusoge\\". Input example 1 5 3 2 5 10 7 Output example 1 15 Input example 2 4 -1 -2 4 -5 Output example 2 4 Input example 3 3 -10 -20 -30 Output example 3 kusoge Example Input 5 3 2 5 10 7 Output 15","solution":"def max_sum_sequence(n, sequence): if n == 0: return \\"kusoge\\" # Initialize the max sums for each position with \\"kusoge\\" case for negative sums dp = [-float(\'inf\')] * n # Base cases for i in range(n): if sequence[i] > 0: dp[i] = sequence[i] break else: return \\"kusoge\\" # If there is no positive number, return \\"kusoge\\" # Fill the dp array considering the given constraints for i in range(1, n): if sequence[i] > 0: dp[i] = max(dp[i], sequence[i]) if i > 1: dp[i] = max(dp[i], dp[i - 2] + sequence[i]) if i > 2: dp[i] = max(dp[i], dp[i - 3] + sequence[i]) # Find the maximum sum in dp array max_sum = max(dp) return max_sum if max_sum > 0 else \\"kusoge\\""},{"question":"A library has a system to manage book loans and returns. Each book in the library has a unique identifier (ID), and there can be multiple copies of the same book (i.e., multiple books can have the same title and author but different IDs). To simplify tracking, the library wants to implement a basic system to check the availability of a book and keep track of which books are loaned out and returned. The system should maintain a record of all book IDs currently loaned out and allow checking the availability status of any book ID. If a book ID is loaned out, it is considered unavailable; otherwise, it is available. Task Write a class `Library` that has the following methods: 1. `loan_book(book_id: int) -> bool`: Loans out the book with the given `book_id`. If the book is already loaned out, return `False`; otherwise, loan out the book and return `True`. 2. `return_book(book_id: int) -> bool`: Returns the book with the given `book_id`. If the book is not currently loaned out, return `False`; otherwise, mark the book as returned and return `True`. 3. `is_available(book_id: int) -> bool`: Checks if the book with the given `book_id` is available. Return `True` if it is available, and `False` if it is loaned out. Example ```python library = Library() print(library.loan_book(1)) # Output: True print(library.is_available(1)) # Output: False print(library.loan_book(1)) # Output: False print(library.return_book(1)) # Output: True print(library.is_available(1)) # Output: True print(library.return_book(1)) # Output: False ``` Assumptions: - Book IDs are positive integers. - There are no duplicate book IDs in the system. - The system starts with no books loaned out.","solution":"class Library: def __init__(self): self.loaned_books = set() def loan_book(self, book_id: int) -> bool: if book_id in self.loaned_books: return False self.loaned_books.add(book_id) return True def return_book(self, book_id: int) -> bool: if book_id not in self.loaned_books: return False self.loaned_books.remove(book_id) return True def is_available(self, book_id: int) -> bool: return book_id not in self.loaned_books"},{"question":"# The Story: Anita is a librarian who needs your help to organize a huge stack of books by their identifiers. Each book has a unique identifier number. To make her task easier, she wants you to sort a list of these book identifiers. The catch is, she wants to maintain a special order: Any number that is a perfect square should come before others, while the rest should be sorted normally after the perfect squares. # Task Overview: You have to write a function that accepts a list of integers representing book identifiers. Your function should return a new list with the perfect squares coming first (maintaining their order among themselves) followed by the non-perfect squares sorted in ascending order. # Usage Examples: ```python def organize_books(book_ids): # Your code here print(organize_books([16, 3, 4, 10, 25, 2])) # Output: [16, 25, 2, 3, 4, 10] print(organize_books([1, 7, 9, 12, 15, 20])) # Output: [1, 9, 7, 12, 15, 20] ``` # Note: - A perfect square is a number that can be expressed as the product of an integer with itself (e.g., 1, 4, 9, 16, ...). - Ensure the relative order of the perfect squares remains the same as in the input list. - Non-perfect squares should be sorted in ascending order in the final list.","solution":"import math def is_perfect_square(n): Check if a number is a perfect square. root = int(math.sqrt(n)) return n == root * root def organize_books(book_ids): Organize the book identifiers such that perfect squares come first, followed by non-perfect squares sorted in ascending order. perfect_squares = [x for x in book_ids if is_perfect_square(x)] non_perfect_squares = sorted([x for x in book_ids if not is_perfect_square(x)]) return perfect_squares + non_perfect_squares"},{"question":"Design a function that simulates a basic calculator capable of performing addition, subtraction, multiplication, and division. Your function should take three parameters: the first operand (a float), the operator (a string: \'+\', \'-\', \'*\', or \'/\'), and the second operand (a float). Based on the operator, return the result of the operation as a float. Ensure to handle division by zero appropriately by returning \'None\' in such cases. Example Input ```python calculator(6, \'/\', 3) ``` Output ```python 2.0 ```","solution":"def calculator(a, operator, b): Returns the result of a basic arithmetic operation between two floats. Parameters: a (float): The first operand. operator (str): The operator (\'+\', \'-\', \'*\', \'/\'). b (float): The second operand. Returns: float: The result of the operation, or None if division by zero occurs. if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': if b == 0: return None return a / b else: raise ValueError(\\"Invalid operator\\")"},{"question":"Given a list of integers, your task is to write a function that checks if the list represents a strictly increasing sequence. A sequence is strictly increasing if each element is greater than its preceding element. Your function should return `true` if the sequence is strictly increasing and `false` otherwise. Example 1: Input: [1, 3, 5, 7, 9] Output: true Explanation: The sequence 1, 3, 5, 7, 9 is strictly increasing since every element is greater than the previous one. Example 2: Input: [2, 2, 3, 4, 5] Output: false Explanation: The sequence 2, 2, 3, 4, 5 is not strictly increasing because the second element is not greater than the first. Example 3: Input: [5, 4, 3, 2, 1] Output: false Explanation: The sequence 5, 4, 3, 2, 1 is not strictly increasing because every element is not greater than its preceding element. Your Task: This is a function problem. You only need to complete the function `isStrictlyIncreasing()` that takes a list of integers as a parameter and returns a boolean value `true` if the sequence is strictly increasing else returns `false`. The printing is done automatically by the driver code. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(list) ≤ 100000 -10^9 ≤ list[i] ≤ 10^9","solution":"def isStrictlyIncreasing(sequence): Check if the given sequence is strictly increasing. Parameters: sequence (list): A list of integers Returns: bool: True if the sequence is strictly increasing, False otherwise for i in range(1, len(sequence)): if sequence[i] <= sequence[i - 1]: return False return True"},{"question":"Given an integer N, write a function to find the smallest prime number greater than N. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: N = 10 Output: 11 Explanation: The prime numbers greater than 10 are 11, 13, 17, etc. Therefore, the smallest prime greater than 10 is 11. Example 2: Input: N = 31 Output: 37 Explanation: The prime numbers greater than 31 are 37, 41, 43, etc. Therefore, the smallest prime greater than 31 is 37. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextPrime() which takes N as input and returns the smallest prime number greater than N. Expected Time Complexity: O(N log log N) for generating primes Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{6}","solution":"def is_prime(x): Helper function to check if a number is prime. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def next_prime(N): Function to find the smallest prime number greater than N. candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"You are given a list of n integers, and two integers a and b. Determine the number of non-contiguous subsequences of the list such that the sum of the subsequence elements is divisible by b, and the length of the subsequence is at least a. Input The first line contains three integers n, a, and b (1 ≤ n ≤ 50, 1 ≤ a ≤ n, 1 ≤ b ≤ 1000) — the number of elements in the list, the minimum subsequence length, and the divisor, respectively. The second line contains n integers arr1, arr2, ..., arrn (1 ≤ arri ≤ 1000) — the elements of the list. Output Print the number of non-contiguous subsequences that satisfy the conditions. Examples Input 5 2 3 3 6 5 8 2 Output 5 Input 4 1 2 2 4 6 8 Output 15 Note In the first example, the list is [3, 6, 5, 8, 2]. The valid subsequences are: [3, 6], [3, 5, 8], [3, 8, 2], [6, 8], and [5, 8, 2]. There are five such subsequences. In the second example, the list is [2, 4, 6, 8]. As the minimum subsequence length is 1, we count all individual elements and all possible non-contiguous subsequences whose sum is divisible by 2. There are fifteen such subsequences.","solution":"from itertools import combinations def count_divisible_subsequences(n, a, b, arr): count = 0 for length in range(a, n+1): for subsequence in combinations(arr, length): if sum(subsequence) % b == 0: count += 1 return count"},{"question":"-----General Statement:----- Given a string of text, determine if it contains at least one vowel, and if so, count the number of distinct vowels present. -----Input:----- The input consists of a single string of text which may contain upper and lower case letters, spaces, and punctuation. The length of the string is between 1 and 1000 characters. -----Output:----- The output should indicate if the text contains at least one vowel. If it does, output the number of distinct vowels found in the text. If it does not, output a message indicating no vowels were found. The output should follow the exact format of the sample output provided below. -----Assumptions:----- - Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' and can be either in upper or lower case. - The distinction between vowels is case-insensitive (For example: \'A\' and \'a\' are considered the same vowel). -----Sample Input:----- Hello World! Ths s smpl txt. -----Sample Output:----- Contains 2 distinct vowels. No vowels found. -----Discussion:----- Count the vowels in a case-insensitive manner, keeping track of distinct vowels encountered in the input string.","solution":"def count_distinct_vowels(text): Determines if the text contains at least one vowel and counts the number of distinct vowels. vowels = set(\\"aeiou\\") found_vowels = set() for char in text.lower(): if char in vowels: found_vowels.add(char) if found_vowels: return f\\"Contains {len(found_vowels)} distinct vowels.\\" else: return \\"No vowels found.\\""},{"question":"Write a function `find_even_index` that takes a list of integers as input and returns the index where the sum of integers to the left of the index is equal to the sum of integers to the right of the index. If no such index exists, return -1. #Examples ```python find_even_index([1,2,3,4,3,2,1]) returns 3 # (1+2+3 == 3+2+1) find_even_index([1,100,50,-51,1,1]) returns 1 # (1 == 50-51+1+1) find_even_index([1,2,3,4,5,6]) returns -1 # no such index find_even_index([20,10,30,10,10,15,35]) returns 3 # (20+10+30 == 10+15+35) ``` #Notes - The input list will always be a valid list of length greater than or equal to 1.","solution":"def find_even_index(arr): Find an index in the list where the sum of the integers to the left is equal to the sum of the integers to the right. :param arr: List of integers :return: Index if such a point exists, -1 otherwise for i in range(len(arr)): if sum(arr[:i]) == sum(arr[i+1:]): return i return -1"},{"question":"Given a string, determine if all characters of the string are unique. You need to implement a function ```all_unique_characters()``` that receives a string and returns ```True``` if all characters of the string are unique, and ```False``` if there is any character repeated. For example, given the string: ``` \\"abcdefghijk\\" ``` All characters are unique, so the function should return: ``` True ``` For the string: ``` \\"hello\\" ``` The character \\"l\\" is repeated, so the function should return: ``` False ``` Your solution should have a time complexity of O(n), where n is the length of the input string. Considerations: - The string will only contain alphanumeric characters (lowercase, uppercase, and digits). - The maximum length of the string will be 1000 characters.","solution":"def all_unique_characters(s): Determines if all characters in the string are unique. Args: s (str): The input string. Returns: bool: True if all characters are unique, False otherwise. char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"The year is 3022 and the world is now governed by a robotic council. Communication between the robots happens through secure encrypted messages. Each robot is identified by a unique ID, represented by an alphanumeric string. Every robot can send a message to any other robot. Each message has a priority level associated with it, denoted by an integer. The priority levels help in determining which messages should be processed first. The system logs for each hour consist of several lines, each with the format: `<sender_id> <receiver_id> <priority_level>`. The logs are collected in chronological order. Your task is to determine the highest priority message exchange for a given robot within a specific hour. Input: - The first line contains t, the number of test cases. - For each test case: - The first line contains a unique identifier `robot_id`, an integer `n`, the number of messages, and an integer `h`, the hour. - The next `n` lines contain a message log entry in the format described above. Output: - For each test case, output the details of the highest priority message involving the given robot during the specified hour in the format: `<sender_id> <receiver_id> <priority_level>`. - If there are multiple messages with the same highest priority, return the one that appeared earliest in the logs. - If there are no messages involving the specified robot within the hour, output \\"No messages\\". Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 1000 - All message details contain valid alphanumeric strings for IDs and integers for priority levels. SAMPLE INPUT 2 robot007 3 5 robotA robotB 4 robotB robot007 10 robot007 robotC 8 alpha 2 2 alpha beta 5 gamma alpha 3 SAMPLE OUTPUT robotB robot007 10 alpha beta 5 Explanation: 1st test case: Highest priority message for robot007 is the one with priority 10 from robotB to robot007. 2nd test case: Highest priority message for alpha is the one with priority 5 from alpha to beta.","solution":"def highest_priority_message(logs, robot_id, hour): Finds the highest priority message for the given robot_id within the specified hour. Parameters: logs (list): List of message logs as tuples (sender_id, receiver_id, priority_level). robot_id (str): The robot\'s unique identifier. hour (int): The hour during which the messages were sent. Returns: tuple: The details of the highest priority message (sender_id, receiver_id, priority_level) or \\"No messages\\". highest_priority = -1 best_message = \\"No messages\\" for log in logs: sender_id, receiver_id, priority_level = log # Check if the log involves the specified robot and is in the required hour if robot_id == sender_id or robot_id == receiver_id: if priority_level > highest_priority: highest_priority = priority_level best_message = log return best_message def process_test_case(test_case): robot_id, n, h, *logs = test_case n = int(n) h = int(h) log_details = [tuple(log.split()) for log in logs] for i in range(n): log_details[i] = (log_details[i][0], log_details[i][1], int(log_details[i][2])) result = highest_priority_message(log_details, robot_id, h) if result == \\"No messages\\": return result else: return \\" \\".join(str(x) for x in result) def process_logs(input_data): Processes the input data to find the highest priority message for each test case. Parameters: input_data (str): The input data as described in the question. Returns: list: List of results for each test case. lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 results = [] for _ in range(t): test_case = [] robot_id, n, h = lines[index].split() test_case.append(robot_id) test_case.append(n) test_case.append(h) for _ in range(int(n)): index += 1 test_case.append(lines[index]) index += 1 results.append(process_test_case(test_case)) return results"},{"question":"You are given a string containing a series of nested parentheses that may be valid or invalid. Your task is to determine the maximum depth of valid nested parentheses within the string and return it. If the string contains any invalid closing parentheses bug, return -1. For instance: 1. In the string `\\"(1+(2*3)+((8)/4))+1\\"`, the maximum depth is `3`. 2. In the string `\\"(1)+((2))+(((3)))\\"`, the maximum depth is `3`. 3. In the string `\\"(1+[(2)]/3)\\"`, even though it\'s a valid string, the brackets `[` and `]` should be considered as invalid input and the function should return `-1`. 4. In the string `\\"1+(2*3)/(2-1)\\"`, the maximum depth is `1`. 5. In the string `\\"1)\\"`, the function should return `-1` as it is an invalid closing parentheses bug. Your function ```max_valid_depth()``` should take a string and return the maximum depth of valid nested parentheses in the string. Examples: ``` max_valid_depth(\\"(1+(2*3)+((8)/4))+1\\") == 3 max_valid_depth(\\"(1)+((2))+(((3)))\\") == 3 max_valid_depth(\\"(1+[(2)]/3)\\") == -1 max_valid_depth(\\"1+(2*3)/(2-1)\\") == 1 max_valid_depth(\\"1)\\") == -1 ``` Note: - You are not to consider cases with square brackets or any other characters other than parentheses, if found, the function should return -1. - Strings should only include numbers 0-9, `+`, `-`, `/`, `*`, `(`, and `)`, anything else should be flagged as invalid input and the function should return -1.","solution":"def max_valid_depth(s): Returns the maximum depth of valid nested parentheses in the string s. If the string contains invalid closing parentheses or invalid characters, return -1. valid_chars = set(\\"0123456789+-*/()\\") for char in s: if char not in valid_chars: return -1 max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 if current_depth < 0: return -1 if current_depth != 0: return -1 return max_depth"},{"question":"There are N persons, each with a unique identifier from 1 to N. They are attending a meeting and each person can shake hands with exactly one other person. The pairs of handshakes are given in the form of M pairs (x_i, y_i), which denotes that person x_i and person y_i shake hands. The organizer wants to identify groups of people who are interconnected through these handshakes. In each group, any person should be able to indirectly or directly reach every other person in the same group. Your task is to find out how many such groups are formed by the given handshakes. Constraints * 1 ≦ N ≦ 1000 * 0 ≦ M ≦ 10000 * 1 ≦ x_i, y_i ≦ N Input The input is given from Standard Input in the following format: ``` N M x_1 y_1 x_2 y_2 : x_M y_M ``` Output Print the number of interconnected groups formed by the handshakes. Examples Input ``` 5 3 1 2 2 3 4 5 ``` Output ``` 2 ``` Input ``` 6 4 1 2 2 3 3 4 5 6 ``` Output ``` 2 ``` Input ``` 4 0 ``` Output ``` 4 ```","solution":"def find_groups(N, M, handshakes): from collections import defaultdict # Initialize adjacency list for the graph graph = defaultdict(list) # Construct the graph for x, y in handshakes: graph[x].append(y) graph[y].append(x) def bfs(node, visited): queue = [node] while queue: current = queue.pop(0) for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (N + 1) groups = 0 # Iterate through each person for person in range(1, N + 1): if not visited[person]: # If the person has not been visited, it means this is # a new group, so we perform a BFS to mark all reachable nodes groups += 1 visited[person] = True bfs(person, visited) return groups # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) handshakes = [(int(data[i*2+2]), int(data[i*2+3])) for i in range(M)] print(find_groups(N, M, handshakes))"},{"question":"Given an integer array A of size n, check if there exists a contiguous subarray whose length is at least m and whose sum is exactly k. You need to answer q such queries. For each query, return YES if such a subarray exists, otherwise return NO. Example A=[1,2,3,4,5] For query m=2, k=9, a valid subarray is [4, 5] whose sum is 9. Return YES. For query m=3, k=6, a valid subarray is [1, 2, 3] whose sum is 6 and length is 3. Return YES. For query m=2, k=12, there is no such subarray whose sum is 12. Return NO. Function Description Complete the `subarrayExists` function in the editor below. It should return an array of strings, either YES or NO for each query. `subarrayExists` has the following parameter(s): - int q: the number of queries - int A[n]: an array of integers - list( (int m, int k) ): a list of tuples where each tuple contains integers m and k Returns - string[]: an array of strings, either YES or NO for each query Input Format The first line contains an integer q, the number of queries. The second line contains n, the size of the array A. The third line contains n space-separated integers A[i]. The next q lines contain two space-separated integers m and k, the length of the subarray and the target sum for each query. Constraints 1leq qleq10 1leq nleq10^5 1leq mleq n 1leq text{sum(A[i])}leq10^9 -10^6leq A[i]leq10^6 Sample Input ``` 3 5 1 2 3 4 5 2 9 3 6 2 12 ``` Sample Output ``` YES YES NO ``` Explanation There are three queries: 1. For m=2, k=9: The subarray [4, 5] meets the conditions; its sum is 9. 2. For m=3, k=6: The subarray [1, 2, 3] meets the conditions; its sum is 6. 3. For m=2, k=12: No subarray of length 2 has a sum of 12.","solution":"def subarrayExists(q, A, queries): results = [] n = len(A) for m, k in queries: found = False current_sum = sum(A[:m]) if current_sum == k: results.append(\\"YES\\") continue for i in range(m, n): current_sum += A[i] - A[i - m] if current_sum == k: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You\'ve been hired to develop a basic file handling utility that processes log files. The task is to remove duplicate entries and preserve the order of the first occurrences of each log entry. A log file contains multiple lines, each representing a log entry. The file can have duplicate log entries across different lines which need to be cleaned up. Write a program that reads from a log file and outputs the same log file but without duplicate entries. -----Input----- The first line contains the integer n (1 ≤ n ≤ 1000) — the number of lines in the log file. The next n lines each contain one log entry, which is a string of ASCII characters (1 ≤ length of each log entry ≤ 100). -----Output----- Output the cleaned log file, where duplicate entries have been removed while preserving the order of their first occurrence. -----Examples----- Input 6 Started processing Started processing Completed processing Database connection established Started processing Database connection closed Output Started processing Completed processing Database connection established Database connection closed -----Note----- In the example, the log file originally contains 6 lines, some of which are duplicates. The cleaned log file should remove redundant entries and output each unique log entry maintaining their first appearance order.","solution":"def remove_duplicate_logs(logs): Removes duplicate log entries from the list while maintaining the order of their first occurrence. seen = set() unique_logs = [] for log in logs: if log not in seen: unique_logs.append(log) seen.add(log) return unique_logs def process_log_file(log_file_content): Processes the log file contents. The first line contains the number of lines n, followed by the log entries. Returns the cleaned log file without duplicates. lines = log_file_content.strip().split(\'n\') n = int(lines[0]) logs = lines[1:n+1] cleaned_logs = remove_duplicate_logs(logs) return \'n\'.join(cleaned_logs)"},{"question":"Zoey is fascinated by string transformations. A string transformation problem involves transforming a given source string into a target string using a defined set of operations. The allowed operations include: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. Given a source string and a target string, determine the minimum number of operations required to transform the source string into the target string. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the length of the source string and m is the length of the target string. The second line contains the source string of length n. The third line contains the target string of length m. Output Print a single integer: the minimum number of operations required to transform the source string into the target string. Examples Input 5 6 kitten sitting Output 3 Input 3 2 abc ac Output 1","solution":"def min_operations_to_transform(source, target): n = len(source) m = len(target) # Create a DP array to store the edit distance dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the base cases for i in range(n + 1): dp[i][0] = i # if target is empty, remove all characters from source for j in range(m + 1): dp[0][j] = j # if source is empty, insert all characters of target # Fill the DP array according to the operations allowed for i in range(1, n + 1): for j in range(1, m + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[n][m] # Example usage: print(min_operations_to_transform(\\"kitten\\", \\"sitting\\")) # Output: 3 print(min_operations_to_transform(\\"abc\\", \\"ac\\")) # Output: 1"},{"question":"Given a list of integers, you need to group them into increasing sequences while preserving the original order. Each number should only appear in one sequence, and each sequence should be as long as possible with strictly increasing elements. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains an integer N, the length of the list. - The second line contains N space-separated integers forming the list. -----Output:----- For each test case, output the increasing sequences in separate lines. Each sequence should be space-separated. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 - Each integer in the list will be between 1 and 1000 -----Sample Input:----- 2 6 1 2 3 1 2 3 7 5 6 3 4 7 8 9 -----Sample Output:----- 1 2 3 1 2 3 5 6 3 4 7 8 9 -----EXPLANATION:----- In the first test case, the input list `1 2 3 1 2 3` forms two sequences: `1 2 3` and another `1 2 3`. In the second test case, `5 6 3 4 7 8 9` forms the sequences: `5 6` and `3 4 7 8 9`.","solution":"def increasing_sequences(test_cases): Given a list of integers, group them into increasing sequences while preserving the original order. Each number should only appear in one sequence, and each sequence should be as long as possible with strictly increasing elements. Parameters: test_cases (list of tuples): Each tuple contains an integer N and a list of N integers. Returns: list of lists: Each list contains the increasing sequences for the corresponding test case. results = [] for n, arr in test_cases: sequences = [] current_sequence = [] for i in range(n): if not current_sequence or arr[i] > current_sequence[-1]: current_sequence.append(arr[i]) else: sequences.append(current_sequence) current_sequence = [arr[i]] if current_sequence: sequences.append(current_sequence) results.append(sequences) return results"},{"question":"Given a string of lowercase letters, you are tasked with determining if it is possible to create a palindrome by rearranging some (or all) of the characters and inserting them into the string, such that the final string is a palindrome. You are allowed to add characters to the string but cannot remove any characters. -----Input----- The first line contains one integer n (1 le n leq 1000) — the length of string s. The second line contains the string s (|s| = n) consisting only of lowercase English letters. -----Output----- Print YES if it\'s possible to rearrange and insert characters to form a palindrome string. Otherwise, print NO. -----Examples----- Input 4 aabb Output YES Input 5 abcde Output NO -----Note----- In the first example, the string \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome. Therefore, the output is YES. In the second example, no rearrangement or addition of characters can form a palindrome; thus, the output is NO.","solution":"def can_form_palindrome(n, s): Determines if it\'s possible to rearrange and insert characters into the string `s` so that the final string is a palindrome. from collections import Counter count = Counter(s) odd_counts = sum(1 for v in count.values() if v % 2 != 0) if odd_counts > 1: # More than one character has an odd count means it can\'t be a palindrome return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, write a program to rearrange the list such that all elements that are divisible by a given number d appear at the beginning of the list, and the remaining elements appear at the end. The order of the elements within these groups should remain the same as in the original list. Input First line contains an integer t (number of test cases). For each test case, the first line contains two integers n and d, where n is the number of elements in the list, and d is the divisor. The second line contains n space-separated integers representing the list. Output For each test case, output the rearranged list in a single line. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 10^5 1 ≤ d ≤ 10^5 1 ≤ list elements ≤ 10^5 SAMPLE INPUT 2 5 3 1 2 3 4 5 6 2 12 3 10 8 6 5 SAMPLE OUTPUT 3 1 2 4 5 12 10 8 6 3 5","solution":"def rearrange_list(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] lst = test_cases[i][1] divisible = [x for x in lst if x % d == 0] not_divisible = [x for x in lst if x % d != 0] results.append(divisible + not_divisible) return results"},{"question":"A farmer is transporting a certain amount of grain from his barn to the market. The road to the market is divided into several segments, each with a certain condition that affects his travel efficiency. The farmer can choose to carry either 1, 2, or 3 unit distances at a time. However, his travel efficiency varies: each segment can either drain his energy, boost his energy, or leave it unchanged. You need to help the farmer determine the number of possible ways to complete his journey to the market given the conditions of each segment. Input: The first line contains the number of test cases, T. Each of the following T test cases consist of two lines. The first line contains the number of segments, N. The second line contains N integers representing the condition of each segment: -1 for an energy-draining segment, 0 for a neutral segment, and 1 for an energy-boosting segment. Output: For each test case, output the total number of possible ways to complete the journey. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 SAMPLE INPUT 2 4 0 0 1 -1 3 0 1 1 SAMPLE OUTPUT 7 4 Explanation For the first test case, there are 4 segments with the conditions [0, 0, 1, -1]. The farmer can complete his journey in 7 possible ways by making use of different valid segment distances. For the second test case, there are 3 segments, and the possible ways to complete the journey are 4.","solution":"def count_ways(segments): N = len(segments) dp = [0] * (N + 1) dp[0] = 1 for i in range(1, N + 1): for step in range(1, 4): if i - step >= 0: dp[i] += dp[i - step] return dp[N] def total_ways(T, cases): results = [] for i in range(T): N = cases[i][0] segments = cases[i][1] results.append(count_ways(segments)) return results"},{"question":"A company\'s IT department needs to allocate a certain number of hours of compute time on their servers to various employees working on multiple projects. Each employee has a list of projects they are currently working on, along with the number of hours they need to complete each project. However, the IT department has a limited number of compute hours that they can distribute across all projects in the company. Each employee can opt to work on some of their projects partially (completing only a portion of a project if they\'re not allocated enough hours for full completion). Given the total number of available compute hours, the goal is to find a way to distribute the hours such that the number of completely finished projects is maximized. -----Input----- The first line contains an integer T, denoting the number of test cases. Each test case starts with two integers N and C, where N is the number of employees and C is the total number of compute hours available. The next N lines describe the projects of each employee. Each line starts with an integer P indicating the number of projects the employee has, followed by P integers representing the number of hours required for each project. -----Output----- For each test case, print the maximum number of completely finished projects that can be achieved with the given number of compute hours. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100 - 1 ≤ P ≤ 50 - 1 ≤ Hours per project ≤ 1000 - 1 ≤ C ≤ 10000 -----Example----- Input: 2 3 10 2 4 6 3 1 2 3 1 7 2 15 2 6 9 2 5 10 Output: 4 2 -----Explanation----- Example case 1: The IT department can allocate 4 hours to the first project of the first employee and 6 hours to the second project of the first employee. Hence, both projects are completed. The second employee\'s three projects require 1, 2, and 3 hours respectively; all of them can be completed with the remaining compute hours, making a total of 5 completed projects. However, since the total compute hours cannot exceed 10, one project must be left incomplete. So, maximum is 4. Example case 2: The IT department can allocate 6 hours to the first project of the first employee and 9 hours to the second project. Since both projects can be completed, making a total of 2 completed projects, the final answer is 2.","solution":"def max_finished_projects(T, test_cases): results = [] for test_case in test_cases: N, C, employees_projects = test_case all_projects = [] for projects in employees_projects: all_projects.extend(projects) all_projects.sort() completed_projects = 0 for hours in all_projects: if C >= hours: C -= hours completed_projects += 1 else: break results.append(completed_projects) return results"},{"question":"In an effort to enhance financial security, a bank has decided to implement a simple encryption mechanism in its online transaction system. Whenever a customer performs a transaction, the transaction amount, represented as an integer, is encrypted using the following rules: 1. The last digit of the amount is multiplied by 2. 2. The second last digit of the amount is multiplied by 3. 3. The third last digit of the amount is multiplied by 4. 4. This pattern continues, with the n-th last digit being multiplied by (n+1). The customer wants to know the final encrypted amount. -----Input----- Input to the program consists of a single line containing an integer amount (where 0 <= amount <= 10^6). -----Output----- Output should consist of a single line containing the encrypted amount as an integer. -----Example----- Input: 12345 Output: 164锟�","solution":"def encrypt_amount(amount): Encrypt the given amount using the specified rules. amount_str = str(amount) encrypted_amount = 0 for i, digit in enumerate(reversed(amount_str)): encrypted_amount += (i + 2) * int(digit) return encrypted_amount"},{"question":"# Task You are given a list of tasks to complete. Each task has a duration and a deadline by which it should be finished. Given the starting time of each task, you need to determine whether all the tasks can be completed within their respective deadlines if they are executed in the given order. - Each task starts exactly when the previous one finishes. - If a task finishes exactly at its deadline time, it is considered as completed within the deadline. Return \\"Yes\\" if all tasks can be completed within their timelines, otherwise return \\"No\\". # Example For `tasks = [(3, 5), (2, 8), (1, 10)]`, the output should be `Yes`. For `tasks = [(2, 2), (1, 3), (4, 6)]`, the output should be `No`. # Input/Output - `[input]` list of tuples `tasks` A list of tuples where each tuple contains two integers `(duration, deadline)`. Constraints: 1 ≤ len(tasks) ≤ 50, 1 ≤ duration, deadline ≤ 100. - `[output]` a string Return \\"Yes\\" if all tasks can be completed within their deadlines, otherwise return \\"No\\".","solution":"def can_complete_tasks(tasks): Determines if all tasks can be completed within their respective deadlines. Args: tasks (list of tuples): List of tuples where each tuple contains two integers (duration, deadline). Returns: str: \\"Yes\\" if all tasks can be completed within their deadlines, otherwise \\"No\\". current_time = 0 for duration, deadline in tasks: current_time += duration if current_time > deadline: return \\"No\\" return \\"Yes\\""},{"question":"Memory Game You are developing a memory game where players need to find pairs of matching cards. Each card has a unique identifier, and there are exactly two cards with each identifier. The game is represented as a 2D grid where each cell contains a card. A player can flip a card to reveal its identifier. If the player selects two cards with the same identifier, they are removed from the grid. The goal is to determine if it is possible to remove all pairs of cards from the grid. You need to implement a function `canRemoveAllPairs(grid)` that takes a 2D list of integers `grid` and returns `True` if it is possible to remove all pairs of cards, or `False` otherwise. # Input - `grid` (2D list of integers): The grid where `grid[i][j]` is the identifier of the card at row `i` and column `j`. - Each identifier appears exactly twice in the grid. - The dimensions of the grid (number of rows and columns) are not fixed and can vary. # Output - A boolean value: `True` if it is possible to remove all pairs, `False` otherwise. # Example **Input** ``` grid = [[1, 2, 3], [1, 2, 3]] ``` **Output** ``` True ``` **Input** ``` grid = [[1, 2, 2], [1, 3, 3]] ``` **Output** ``` True ``` **Input** ``` grid = [[1, 2, 3], [4, 5, 6]] ``` **Output** ``` False ``` # Constraints - The grid size will not exceed 100x100. - Each card identifier in the grid is a positive integer that appears exactly twice.","solution":"from collections import defaultdict def canRemoveAllPairs(grid): Determines if it is possible to remove all pairs of cards from the grid. Each identifier appears exactly twice in the grid. Args: grid (2D list of integers): The grid where each cell contains a card identifier. Returns: bool: True if it is possible to remove all pairs of cards, False otherwise. # Dictionary to count occurrences of each identifier count_dict = defaultdict(int) for row in grid: for card in row: count_dict[card] += 1 # Check if each card identifier appears exactly twice for count in count_dict.values(): if count != 2: return False return True"},{"question":"Farmer John owns a farm with N fields connected by M bidirectional paths. Each field grows a different type of crop, represented by an integer from 1 to N. Farmer John wants to create groups of fields where each group forms a connected subgraph of fields, and the total number of unique crops in each group is maximized. Farmer John can only combine fields directly connected by paths and cannot skip any intermediate fields between two fields in a group. Help Farmer John determine the maximum possible number of unique crops he can gather in any single group of connected fields. Input Format The first line contains two space-separated integers, N (the number of fields) and M (the number of paths). Each of the next M lines contains two space-separated integers, A_i and B_i, representing a bidirectional path between fields A_i and B_i. The next line contains N space-separated integers, where the i^{th} integer indicates the type of crop grown in field i. Constraints 2 leq N leq 10^5 1 leq M leq 2 cdot 10^5 Each path connects two distinct fields. No two paths connect the same pair of fields. Output Format Print a single integer representing the maximum number of unique crops that can be gathered in any group of connected fields. Sample Input 6 5 1 2 2 3 3 4 4 5 5 6 1 2 3 4 5 6 Sample Output 6 Explanation In this example, all fields are connected in a chain, providing farmer John with a single group containing all six unique crops. Sample Input 2 7 6 1 2 2 3 1 4 4 5 5 6 6 7 1 2 3 1 4 5 6 Sample Output 2 6 Explanation 2 Here, the group consisting of fields {4, 1, 2, 3} has 3 unique crops (1, 2, 3), while the group {5, 6, 7} has 4 unique crops (1, 4, 5, 6). So, the maximum number of unique crops that can be gathered is 6.","solution":"from collections import defaultdict, deque def max_unique_crops(N, M, connections, crops): # Build adjacency list representation of the graph graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Function to perform a BFS and return the set of unique crops in the component def bfs(field): unique_crops = set() queue = deque([field]) visited.add(field) while queue: current = queue.popleft() unique_crops.add(crops[current - 1]) for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return unique_crops visited = set() max_unique = 0 # Traverse all fields to find all connected components for field in range(1, N + 1): if field not in visited: unique_crops_in_component = bfs(field) max_unique = max(max_unique, len(unique_crops_in_component)) return max_unique"},{"question":"You are a team lead at a software development firm. Today, one of your junior developers asked for your help with optimizing a piece of code. The code deals with processing customer orders. Part of the functionality involves analyzing the order log to identify which product was the most popular in each given time window. You are given a list of product orders, where each order records the product ID and the time of purchase. Given multiple time windows, you need to determine the product ID that appears most frequently within each time window. If multiple products have the same frequency, return the product with the smallest numerical ID. Input First line of the input contains T (1 ≤ T ≤ 10) denoting the number of test cases. T test cases follow. For each test case, the first line contains two integers \'N\' (1 ≤ N ≤ 1000) and \'Q\' (1 ≤ Q ≤ 100), representing the number of orders and the number of queries respectively. Next line contains \'N\' space-separated integers, where the i-th integer Pi (1 ≤ Pi ≤ 1000) indicates the product ID of the i-th order sorted by the time of purchase. The following Q lines each contain two space-separated integers \'L\' and \'R\' (1 ≤ L ≤ R ≤ N), representing the start and end times of the time window. Output For each query, output the product ID that is most frequently ordered in the corresponding time window. If there is a tie, choose the product with the smallest ID. SAMPLE INPUT 2 10 3 1 1 2 2 3 3 4 4 4 4 1 5 2 8 4 10 7 2 1 2 2 3 3 3 1 2 5 1 7 SAMPLE OUTPUT 1 2 4 2 3 Explanation In the first test case: - For the time window [1, 5], the products ordered are [1, 1, 2, 2, 3]. Product 1 appears most frequently (twice). - For the time window [2, 8], the products ordered are [1, 2, 2, 3, 3, 4, 4]. Products 2 and 3 both appear twice, but product 2 has a smaller ID. - For the time window [4, 10], the products ordered are [2, 3, 3, 4, 4, 4, 4]. Product 4 appears most frequently (four times). In the second test case: - For the time window [2, 5], the products ordered are [2, 2, 3, 3]. Products 2 and 3 both appear twice, but product 2 has a smaller ID. - For the time window [1, 7], the products ordered are [1, 2, 2, 3, 3, 3, 1]. Product 3 appears most frequently (three times).","solution":"def most_frequent_product_in_windows(T, test_cases): results = [] for case in test_cases: N, Q = case[\'N\'], case[\'Q\'] products = case[\'products\'] queries = case[\'queries\'] for L, R in queries: window = products[L-1:R] frequency = {} for product in window: if product not in frequency: frequency[product] = 0 frequency[product] += 1 max_frequency = max(frequency.values()) most_frequent_product = min([product for product, count in frequency.items() if count == max_frequency]) results.append(most_frequent_product) return results"},{"question":"You are part of a research team studying the behavior of molecules in a container. Each molecule is represented by a point in a 2D plane, and molecules interact with one another through a process called \\"magnetic bonding.\\" Two molecules will form a magnetic bond if they are within a certain distance, d, from each other. Your task is to create a computer program to determine the number of unique molecules that can be bonded together starting from a specific molecule through direct and indirect bonds. Two molecules are indirectly bonded if they can be connected through a series of direct bonds. **Input** The input consists of multiple datasets. Each dataset is formatted as follows: > n d > x1 y1 > x2 y2 > ... > xn yn The first line of a dataset contains two integers, n (the number of molecules) and d (the bonding distance). n is positive and does not exceed 100. d is a positive integer less than 100. The next n lines each contain two decimal numbers representing the x- and y-coordinates of a molecule in the 2D plane. Each number is given with 3 digits after the decimal point. Values are separated by a space character. The end of the input is indicated by a line containing \\"0 0\\". **Output** For each dataset, output the number of unique molecules that can be bonded together starting from the first molecule listed in the dataset through direct and indirect bonds. Print each result on a new line. **Example** Input > 3 10 > 1.000 1.000 > 2.000 2.000 > 15.000 15.000 > 5 7 > 3.000 3.000 > 10.000 10.000 > 3.500 4.000 > 17.000 17.000 > 1.000 1.500 > 0 0 Output 2 3 **Explanation** For the first dataset: - The first molecule at (1.000, 1.000) can bond directly with the second molecule at (2.000, 2.000). - The third molecule at (15.000, 15.000) is too far from the others to form a bond. - Hence, only 2 molecules are bonded together starting from the first molecule. For the second dataset: - The first molecule at (3.000, 3.000) can bond directly with the third molecule at (3.500, 4.000) since they are within a distance of 7. - The third molecule can bond with the fifth molecule at (1.000, 1.500). - Hence, 3 molecules are bonded together starting from the first molecule.","solution":"import math def euclidean_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) def find_bonded_molecules(n, d, molecules): bonded = [False] * n queue = [0] bonded[0] = True count = 1 while queue: current = queue.pop(0) for i in range(n): if not bonded[i] and euclidean_distance(molecules[current][0], molecules[current][1], molecules[i][0], molecules[i][1]) <= d: queue.append(i) bonded[i] = True count += 1 return count def process_input(input_str): datasets = input_str.strip().split(\\"n\\") results = [] index = 0 while index < len(datasets): n, d = map(int, datasets[index].split()) if n == 0 and d == 0: break molecules = [] for i in range(n): index += 1 x, y = map(float, datasets[index].split()) molecules.append((x, y)) results.append(find_bonded_molecules(n, d, molecules)) index += 1 return results"},{"question":"Frank has been assigned to sort out the books in the university library. The library has a large collection of books each identified by a unique ID. Due to some issues with the previous logging method, a few books\' IDs have gone missing. Frank is required to find out which book IDs are missing from the provided list of IDs. The library\'s system logs the IDs of the books in numerical order from 1 to n. Given the list of logged book IDs, help Frank generate the list of missing book IDs. Input: The first line contains an integer T, the number of test cases. The first line of each test case contains a single integer n, the total number of books that should be logged. The second line of each test case contains n-1 integers representing the logged book IDs. Output: For each test case, output the missing book ID. Constraints: 0 < T ≤ 10000 1 ≤ n ≤ 1000 Sample Input: 2 5 1 2 3 5 4 3 1 4 Sample Output: 4 2 Explanation: In the first test case, the total number of books is 5, but the list only contains IDs [1, 2, 3, 5]. The missing ID is 4. In the second test case, the total number of books is 4, and the list contains IDs [3, 1, 4]. The missing ID is 2.","solution":"def find_missing_book_id(n, logged_ids): This function returns the missing book ID given the total number of books (n) and the list of logged book IDs. total_sum = n * (n + 1) // 2 # Sum of first n natural numbers logged_sum = sum(logged_ids) return total_sum - logged_sum def process_test_cases(test_cases): This function processes multiple test cases and returns a list of missing book IDs. results = [] for case in test_cases: n, logged_ids = case missing_id = find_missing_book_id(n, logged_ids) results.append(missing_id) return results"},{"question":"Stefan is organizing a competition where participants need to discover a hidden message within a binary string (a string consisting of the characters \'0\' and \'1\'). This hidden message has an interesting property: it contains the maximum number of \'1\'s among all the subsequences that can be formed from the binary string. A subsequence is a sequence derived by deleting any number of characters from the original string without reordering the remaining characters. Stefan has a list of binary strings given to him, and he needs a way to quickly determine the maximum possible number of \'1\'s that appear in any subsequence of each binary string. Your task is to write a function that takes a list of binary strings and returns a list containing the maximum number of \'1\'s in any subsequence for each binary string. -----Input----- The input consists of a single integer n (1 leq n leq 1000), followed by n lines. Each of the next n lines contains a binary string s_i (1 leq |s_i| leq 10^5). -----Output----- Display n integers, each representing the maximum number of \'1\'s in any subsequence of the corresponding binary string from the input. -----Examples----- Sample Input 1: 3 110101 10101 11111 Sample Output 1: 4 3 5 Sample Input 2: 2 1000 0000 Sample Output 2: 1 0","solution":"def max_num_of_ones(binary_strings): Given a list of binary strings, returns a list containing the maximum number of \'1\'s in any subsequence for each binary string. Parameters: binary_strings (list[str]): List of binary strings Returns: list[int]: List of integers representing the maximum number of \'1\'s in any subsequence return [binary_string.count(\'1\') for binary_string in binary_strings]"},{"question":"You are given an array of integers and a target integer. Your task is to find whether there exist two distinct indices `i` and `j` in the array such that the absolute difference between the integers at these indices is equal to the target integer. If such indices exist, return `\\"Yes\\"`, otherwise return `\\"No\\"`. For example: ```python check_difference([5, 20, 3, 2, 50, 80], 78) = \\"Yes\\" # 80 - 2 = 78 check_difference([90, 70, 20, 80, 50], 45) = \\"No\\" # No pair with difference 45 ``` More examples in the test cases. Good luck! If you enjoy this question, please try [Pair with Given Difference II](https://www.codewars.com/kata/5a3140e7f28b82b1e40000b4)","solution":"def check_difference(arr, target): Checks for the existence of two distinct indices i and j in the array such that the absolute difference between elements at these indices is equal to the target. # Use a set for efficient look-up of seen elements seen = set() for num in arr: if (num + target) in seen or (num - target) in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"Let\'s consider an N x N grid where N is an even integer. You need to paint some of the squares such that the grid is split into two distinct regions, each containing exactly half of the total squares. A region is defined as a group of connected squares where a square is connected to its adjacent squares (up, down, left, right). Every square in the grid is either painted (part of a region) or not painted (not part of any region). Write a function that determines if it is possible to paint the grid in such a way. If it\'s possible, return one valid configuration. Otherwise, return \\"Not possible\\". Input The input is given as a single integer N (where 2 ≤ N ≤ 50) representing the size of the grid. Output Output should be \\"Not possible\\" if there\'s no valid configuration. If a valid configuration exists, output an N x N grid, where squares from the two regions are represented by \'1\' and \'2\' respectively, and unpainted squares are represented by \'0\'. Examples Input 2 Output 1 2 2 1 Input 4 Output 1 1 2 2 1 1 2 2 2 2 1 1 2 2 1 1 Input 3 Output Not possible","solution":"def paint_grid(N): Determines if it is possible to paint the grid into two distinct regions. Returns a valid configuration or \\"Not possible\\" if not feasible. if N % 2 != 0: return \\"Not possible\\" grid = [[0] * N for _ in range(N)] # Fill the grid with alternating pattern to ensure two equal regions for i in range(N): for j in range(N): if (i + j) % 2 == 0: grid[i][j] = 1 else: grid[i][j] = 2 return grid"},{"question":"<!-- Problem F --> Warehouse Path Planning In a warehouse, there is an n×n grid representing a floor, where each cell in the grid is either empty or contains an obstacle. The warehouse manager needs a program to find the shortest path from the entrance to the exit while avoiding obstacles. If no path exists, the program should indicate that as well. The entrance is located at the top-left corner of the grid (0,0) and the exit is at the bottom-right corner (n-1,n-1). The path can only be constructed using moves to the adjacent cells which are up, down, left, or right within the grid boundaries. Input The input consists of multiple datasets. Each dataset starts with a line containing an integer n (2 ≤ n ≤ 20), representing the size of the grid. The following n lines each contain n characters, either \'.\' (indicating an empty cell) or \'X\' (indicating an obstacle). The end of the input is marked by a line containing a zero. Output For each dataset, output an integer representing the length of the shortest path from the entrance to the exit. If no path exists, output `-1`. Sample Input 5 ..... .X.X. ...X. .X.X. ..... 5 XXX.. X..XX .X..X X...X ..... 0 Output 8 -1 Example Input 5 ..... .X.X. ...X. .X.X. ..... 5 XXX.. X..XX .X..X X...X ..... 0 Output 8 -1","solution":"from collections import deque def shortest_path(grid): n = len(grid) if grid[0][0] == \'X\' or grid[n-1][n-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() if r == n-1 and c == n-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1 def solve(inputs): results = [] idx = 0 while idx < len(inputs): n = int(inputs[idx]) if n == 0: break grid = inputs[idx + 1: idx + 1 + n] results.append(shortest_path(grid)) idx += n + 1 return results"},{"question":"In a popular card game, players score points by assembling a hand of five cards with maximum numeric value. Each card has a numeric value ranging from 1 to 10. Given the number of cards each player draws and the numeric values of those cards, determine the player\'s final score by picking the highest five card values possible. If a player draws fewer than five cards, the final score is the sum of all their cards. -----Input:----- - First line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of cards drawn by the player. - The second line contains N integers separated by spaces, representing the numeric values of the cards drawn. -----Output:----- - For each test case, output a single integer representing the player\'s final score. -----Constraints:----- - 1 leq T leq 10^4 - 1 leq N leq 100 - 1 leq text{card_value} leq 10 -----Sample Input:----- 3 7 2 9 4 8 5 6 10 4 7 1 5 3 5 6 6 6 6 6 -----Sample Output:----- 38 16 30 -----EXPLANATION:----- In the first test case, the player draws 7 cards and picks the highest five values (10, 9, 8, 6, 5) for a total score of 38. In the second test case, the player draws only 4 cards, so the score is the sum of all four cards: 7 + 1 + 5 + 3 = 16. In the third test case, the player draws exactly 5 cards with identical values, so the score is simply 6 * 5 = 30.","solution":"def calculate_score(T, test_cases): Calculates the player\'s final score for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains (N, cards) where N is the number of cards drawn and cards is a list of integers representing the card values. Returns: list of int: Final scores for each test case. results = [] for N, cards in test_cases: if N <= 5: results.append(sum(cards)) else: cards_sorted = sorted(cards, reverse=True) results.append(sum(cards_sorted[:5])) return results"},{"question":"Detect and Replace Most Spammed Words Background Story You are working as a developer for a popular social media platform and have been tasked with curbing the spread of spam messages. Spamming is a prevalent issue, and certain words are spammed more frequently than others. Your goal is to sanitize user messages by detecting and masking the most frequently spammed words. Task Write a function `sanitizeMessage` that receives two arguments: a string `message` representing the user\'s message, and a list `spamWords` containing the most spammed words. The function should modify the message by replacing any occurrence of a word in `spamWords` with a sequence of asterisks (*) that have the same length as the spam word. # Example: ```python def sanitizeMessage(message, spamWords): # Function code here # Example usage: message = \\"This product is amazing and you can buy it now at a discount!\\" spamWords = [\\"product\\", \\"buy\\", \\"discount\\"] sanitized_message = sanitizeMessage(message, spamWords) print(sanitized_message) # Output: \\"This ******* is amazing and you can *** it now at a ********!\\" ``` # Guidelines: 1. The function should detect and replace whole words only. Partial matches within other words should not be replaced. For example, the spam word \\"buy\\" should not replace the \\"buy\\" in \\"buyer\\". 2. The replacement should be case-sensitive. That means if \\"Product\\" is in `spamWords`, it should not replace \\"product\\". 3. Use regular expressions to detect and replace the spam words efficiently. 4. The function should work correctly regardless of the punctuation or special characters in the message. For example, if the message is \\"Buy now!\\" and \\"buy\\" is a spam word, the function should output \\"*** now!\\". Enjoy :D","solution":"import re def sanitizeMessage(message, spamWords): Replaces spam words in the message with asterisks. Args: message (str): The user\'s message. spamWords (list): A list of spam words to be masked. Returns: str: The sanitized message with spam words replaced by asterisks. for spamWord in spamWords: # Regular expression to match the whole word message = re.sub(rf\'b{spamWord}b\', \'*\' * len(spamWord), message) return message"},{"question":"Given a square grid of size N x N, each cell can have a value of either \'0\' or \'1\'. You need to identify the number of distinct islands in the grid. An island is a group of \'1\'s connected vertically or horizontally. Two islands are considered distinct if there is at least one cell in one island that isn\'t in the other. Constraints * 1 leq N leq 1 000 Input Input is given from Standard Input in the following format: N grid Here, N is an integer, and grid is an N x N matrix where each element is either \'0\' or \'1\'. Output Output the number of distinct islands. Examples Input 5 11000 11000 00100 00011 00001 Output 3 Input 3 111 000 111 Output 2 Input 4 0000 0000 0000 0000 Output 0 Input 4 1111 1111 1111 1111 Output 1","solution":"def num_distinct_islands(n, grid): def dfs(x, y, visited, grid, n): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < n and not visited[cx][cy] and grid[cx][cy] == \'1\': visited[cx][cy] = True stack.extend([(cx+1, cy), (cx-1, cy), (cx, cy+1), (cx, cy-1)]) visited = [[False] * n for _ in range(n)] num_islands = 0 for i in range(n): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: num_islands += 1 dfs(i, j, visited, grid, n) return num_islands"},{"question":"Given an array of N integers, find a triplet (i, j, k) such that: * 0 ≤ i < j < k < N * The sum of elements in the triplet (array[i] + array[j] + array[k]) is the maximum possible. If there are multiple triplets with the same maximum sum, any of them will be accepted. # Constraints * 3 ≤ N ≤ 3000 * -10^9 ≤ array[i] ≤ 10^9 # Input The input is given from Standard Input in the following format: ``` N array[0] array[1] ... array[N-1] ``` # Output Print three integers i, j, k such that the sum of array[i] + array[j] + array[k] is the maximum possible. If multiple such triplets exist, print any of them. # Example Input ``` 5 2 6 1 4 9 ``` Output ``` 1 3 4 ``` Input ``` 4 -1 -2 -3 -4 ``` Output ``` 0 1 2 ``` # Note In the first example, the triplet (6, 4, 9) has the maximum sum which is 19. Hence, the indices are 1, 3, and 4. In the second example, the triplet (-1, -2, -3) has the maximum sum which is -6. Hence, the indices are 0, 1, and 2.","solution":"def find_max_sum_triplet(arr): Returns the indices i, j, k such that: - 0 ≤ i < j < k < len(arr) - The sum of elements in the triplet (arr[i] + arr[j] + arr[k]) is the maximum possible. Parameters: arr (list): List of integers. Returns: tuple: A tuple containing three integers (i, j, k). N = len(arr) if N < 3: return (None, None, None) max_sum = float(\'-inf\') triplet = (-1, -1, -1) for i in range(N-2): for j in range(i+1, N-1): for k in range(j+1, N): current_sum = arr[i] + arr[j] + arr[k] if current_sum > max_sum: max_sum = current_sum triplet = (i, j, k) return triplet"},{"question":"You are given a grid with dimensions n times m and an initial configuration of some cells being alive and others being dead. The grid evolves in iterations according to the rules of Conway\'s Game of Life: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors remains alive. 3. Any live cell with more than three live neighbors dies (overcrowding). 4. Any dead cell with exactly three live neighbors becomes alive (reproduction). Your task is to determine the number of live cells after k iterations. The neighbors of a cell in position (i, j) include the cells in the positions (i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j), and (i+1, j+1), provided these positions lie within the boundaries of the grid. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 50) — the number of test cases. Then t test cases follow. For each test case, the first line contains three integers n, m, and k (1 le n, m le 100; 0 le k le 10^9) — the dimensions of the grid and the number of iterations, respectively. Each of the next n lines contains m characters, where each character is either \'.\' (denoting a dead cell) or \'*\' (denoting a live cell). It is guaranteed that t le 50 and the total number of characters in all grids combined does not exceed 50 cdot 100 cdot 100 = 500000. -----Output----- For each test case, print the answer: the number of live cells present after k iterations. -----Example----- Input 2 3 3 1 .*. *.* .*. 3 4 2 .... .*** .... Output 4 3 -----Note----- For the first test case: Initial grid: .*. *.* .*. After 1 iteration: ... .**. .... Number of live cells after 1 iteration: 4 For the second test case: Initial grid: .... .*** .... After 1 iteration: ..*. ..*. ..*. After 2 iterations: .... .***. .... Number of live cells after 2 iterations: 3","solution":"def game_of_life(n, m, k, grid): def count_alive_neighbors(i, j): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'*\': count += 1 return count def next_state(): new_grid = [[\'.\' for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): alive_neighbors = count_alive_neighbors(i, j) if grid[i][j] == \'*\' and alive_neighbors in [2, 3]: new_grid[i][j] = \'*\' elif grid[i][j] == \'.\' and alive_neighbors == 3: new_grid[i][j] = \'*\' return new_grid for _ in range(k): grid = next_state() return sum(row.count(\'*\') for row in grid) def conways_game_of_life(t, test_cases): results = [] for test_case in test_cases: n, m, k, grid = test_case results.append(game_of_life(n, m, k, grid)) return results"},{"question":"Design an algorithm that counts how many distinct pairs (i, j) there are in an array where the sum of the two numbers is equal to a given target integer. A pair (i, j) is considered distinct if i is not equal to j and i < j. Implement a function `count_pairs(arr, target)` that takes in an array of integers `arr` and an integer `target`, and returns the number of distinct pairs that add up to the target. -----Input----- The function takes in two parameters: 1. `arr`: A list of integers where the length `n` of the list is in the range 1 ≤ n ≤ 10^5 and the elements of the list are in the range -10^9 ≤ arr[i] ≤ 10^9. 2. `target`: An integer that represents the required sum. -----Output----- The function should return a single integer representing the number of distinct pairs such that their sum is equal to the given target. -----Examples----- Input arr = [1, 5, 7, -1, 5] target = 6 Output 3 Input arr = [1, 1, 1, 1] target = 2 Output 6 Input arr = [3, 5, 2, -4, 8, 11] target = 7 Output 2 -----Note----- In the first example, the distinct pairs are (1, 5), (7, -1), and (1, 5). In the second example, every pair of 1\'s adds up to 2: (1,1), (1,1), (1,1), totaling 6 pairs. In the third example, the distinct pairs are (3, 4) and (5, 2).","solution":"def count_pairs(arr, target): Count the number of distinct pairs (i, j) in the array such that the sum of the two numbers equals the target. seen = {} count = 0 for num in arr: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Palindrome Substring Count Problem Statement Given a string S, you need to count the number of substrings that are palindromes. A substring is defined as any continuous segment of characters within the string. A palindrome is a sequence of characters that reads the same forward and backward. Constraints * 1 ≤ |S| ≤ 10^3 Input The input consists of a single string S. Output Output a single integer representing the number of palindrome substrings in the given string. Examples Input ababa Output 9 Input abcd Output 4","solution":"def count_palindromic_substrings(S): Count the number of palindromic substrings in a given string S. n = len(S) count = 0 # Function to expand around the center and count palindromes def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count"},{"question":"You are given a string S of length N consisting of lowercase English alphabets. You are allowed to perform the following operation on S any number of times: Select any two adjacent characters in the string and swap them if they are not in lexicographical order. Determine whether it is possible to sort the string S in lexicographical order using the above operation. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input. - The line contains the string S. ------ Output Format ------ For each test case, output on a new line, YES, if it is possible to sort the string S using any number of operations and NO otherwise. You can print each character in uppercase or lowercase. For example, YES, yes, Yes, and yES are all identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} S consists of lowercase English alphabets only. - The sum of N over all test cases won\'t exceed 10^{5}. ----- Sample Input 1 ------ 3 dcba abdc mnop ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ Test case 1: We can swap \'d\' and \'c\', resulting in \'cdba\'. Then swap \'c\' and \'b\', resulting in \'bcda\'. Lastly, swap \'b\' and \'a\' to get \'abcd\'. Test case 2: We can swap \'b\' and \'d\', resulting in \'adbc\'. Then swap \'d\' and \'c\', resulting in \'abcd\'. Test case 3: The string is already sorted in lexicographical order. Thus, no operations are needed.","solution":"def can_sort_string(T, test_cases): results = [] for S in test_cases: if sorted(S) == list(S): results.append(\\"YES\\") else: results.append(\\"YES\\") # Here we always return YES because we can always sort the array by the operations allowed. return results"},{"question":"Emma is organizing a sports event in her school. She wants to distribute the participants into different teams. Each participant has a specific skill level represented by an integer. Emma wants to form teams such that each team has exactly K participants and the difference in skill levels between the highest and lowest skill level in each team is minimized. Help Emma to determine this minimum possible difference. -----Input:----- The first line of input contains two integers N and K (1 ≤ K ≤ N ≤ 100000) where N is the number of participants and K is the size of each team. The second line contains N integers, representing the skill levels of each participant. -----Output:----- Print a single integer ― the minimum possible difference in skill levels between the highest and lowest skill level in any valid team. -----Constraints:----- - 1 leq K leq N leq 100000 - 1 leq text{Skill Levels} leq 10^9 -----Sample Input:----- 6 3 10 20 30 40 50 60 -----Sample Output:----- 20 -----EXPLANATION:----- To form the teams with minimum possible difference between the highest and lowest skill levels, the teams can be: - {10, 20, 30} with difference 20 (30 - 10) - {20, 30, 40} with difference 20 (40 - 20) - {30, 40, 50} with difference 20 (50 - 30) - {40, 50, 60} with difference 20 (60 - 40) Thus, the minimum possible difference is 20.","solution":"def minimum_skill_difference(N, K, skill_levels): Returns the minimum possible difference in skill levels between the highest and lowest skill levels in any valid team of size K. Parameters: N (int): The number of participants. K (int): The size of each team. skill_levels (list of int): The skill levels of the participants. Returns: int: The minimum possible difference in skill levels. # Sort the skill levels first skill_levels.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Iterate through the sorted skill levels to find the minimum difference for any team of size K for i in range(N - K + 1): diff = skill_levels[i + K - 1] - skill_levels[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Company XYZ is conducting an organizational survey and needs to analyze the preferences of their employees. Each employee is given a form with K distinct positive integers (1 to K) and they are required to rank these numbers from 1 to K. The company wants to know how many employees have identical ranking preferences. Write a function that takes an integer N (number of employees) and a list of N lists (each containing K unique integers representing the ranked preferences) as input, and returns the number of groups of employees who have identical ranking preferences. Input & Output: The first line of input contains an integer N. The next N lines, each containing a list of K unique integers separated by spaces. The output should be the number of groups of employees with identical lists. Constraints: 1 ≤ N ≤ 10^4 1 ≤ K ≤ 10 Sample Input: 5 1 2 3 4 5 2 3 4 5 1 1 2 3 4 5 5 4 3 2 1 2 3 4 5 1 Sample Output: 2 Explanation: In the given sample, there are two groups of employees with identical preferences: - Two employees ranked their preferences as [1, 2, 3, 4, 5] - Two employees ranked their preferences as [2, 3, 4, 5, 1] Hence, the output is 2.","solution":"from collections import Counter def count_identical_rankings(N, preferences): Returns the number of groups of employees who have identical ranking preferences. Args: N (int): Number of employees preferences (list of list of int): A list of N lists, each containing K unique integers. Returns: int: The number of groups of employees with identical preferences. # Count occurrences of each ranking preference preference_count = Counter(tuple(pref) for pref in preferences) # Count the number of groups with more than one employee identical_groups = sum(1 for count in preference_count.values() if count > 1) return identical_groups"},{"question":"A drone delivery company wants to optimize their flight routes. Each route is defined by starting and ending coordinates in a 2D plane, and the company has a list of such routes they need to analyze. Two routes are considered redundant if their paths overlap completely or partially. Your task is to find the number of unique, non-overlapping routes the company has after removing the redundant ones. Each route is described by its starting and ending coordinates, and the routes are represented by line segments in a 2D plane. Two routes overlap if they share any portion of the line segment; touching at endpoints does not count as overlapping. Write a program that takes a list of routes and outputs the number of unique, non-overlapping routes. Constraints: - 1 ≤ N ≤ 10^4, where N is the number of routes. - Coordinates of the routes are integers in the range -10^6 to 10^6. Input: The input consists of: 1. An integer N - the number of routes. 2. 4N space-separated integers where every four integers represent the coordinates of a route: x1 y1 x2 y2 (starting point x1, y1 and ending point x2, y2 for each route). Output: An integer representing the number of unique, non-overlapping routes. Example: Input: 5 0 0 2 2 3 3 5 5 0 0 2 2 6 6 8 8 1 1 4 4 Output: 3 Explanation: The routes (0, 0) to (2, 2) and (0, 0) to (2, 2) are redundant. The route (1,1) to (4,4) overlaps with (0, 0) to (2,2). Thus, the unique non-overlapping routes are (0, 0) to (2, 2), (3, 3) to (5, 5), and (6, 6) to (8, 8). --- This example demonstrates understanding of handling geometric overlaps and efficiently dealing with large inputs.","solution":"def find_unique_routes(routes): def on_segment(p, q, r): Check if point q lies on line segment pr if q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1]): return True return False def orientation(p, q, r): Find the orientation of the ordered triple (p, q, r). 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 return 1 if val > 0 else 2 def do_intersect(p1, q1, p2, q2): Check if line segment \'p1q1\' and \'p2q2\' intersect. o1 = orientation(p1, q1, p2) o2 = orientation(p1, q1, q2) o3 = orientation(p2, q2, p1) o4 = orientation(p2, q2, q1) if o1 != o2 and o3 != o4: return True if o1 == 0 and on_segment(p1, p2, q1): return True if o2 == 0 and on_segment(p1, q2, q1): return True if o3 == 0 and on_segment(p2, p1, q2): return True if o4 == 0 and on_segment(p2, q1, q2): return True return False unique_routes = [] for route in routes: (x1, y1, x2, y2) = route p1, q1 = (x1, y1), (x2, y2) is_unique = True for u_route in unique_routes: (ux1, uy1, ux2, uy2) = u_route up1, uq1 = (ux1, uy1), (ux2, uy2) if do_intersect(p1, q1, up1, uq1): is_unique = False break if is_unique: unique_routes.append(route) return len(unique_routes) # Parsing input def number_of_unique_routes(N, coordinates): routes = [(coordinates[i], coordinates[i+1], coordinates[i+2], coordinates[i+3]) for i in range(0, 4*N, 4)] return find_unique_routes(routes)"},{"question":"Consider a 2D grid with R rows and C columns where each cell can either be passable (.) or impassable (#). The goal is to find the minimum number of steps required to travel from the top-left corner of the grid (0,0) to the bottom-right corner (R-1,C-1), staying within the bounds of the grid. You can move one step in one of the four directions - up, down, left, or right. If it\'s not possible to reach the bottom-right corner, return -1. -----Constraints----- - 1 leq R, C leq 100 - Each cell in the grid is either \'.\' or \'#\'. -----Input----- Input is given from Standard Input in the following format: R C grid[1] grid[2] : grid[R] Each row of the grid is represented as a string containing R characters (either \'.\' or \'#\'). -----Output----- Print the minimum number of steps required to travel from the top-left to the bottom-right corner. If it\'s not possible, print -1. -----Sample Input----- 5 5 ..... .#... .#.#. ...#. .#... -----Sample Output----- 8 Explanation: The grid is as follows: ..... .#... .#.#. ...#. .#... The optimal path is: (0,0) → (0,1) → (0,2) → (0,3) → (1,3) → (2,3) → (3,3) → (3,4) → (4,4) Alternatively, if there were no possible path: -----Sample Input----- 3 3 ... # ..# -----Sample Output----- -1 Explanation: In this case, it is impossible to reach the bottom-right corner because the middle row completely blocks any passage.","solution":"from collections import deque def min_steps_to_reach_end(R, C, grid): # Directions array for moving in 4 possible directions (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # To keep track of visited cells visited = [[False] * C for _ in range(R)] # Initialize the queue with the starting position (top-left corner) queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True # Start BFS from the top-left corner while queue: r, c, steps = queue.popleft() # If we have reached the bottom-right corner, return the number of steps if r == R - 1 and c == C - 1: return steps # Explore the 4 possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) # If there is no path to the bottom-right corner, return -1 return -1 # Function to take input and call the function def main(): import sys input = sys.stdin.read data = input().strip().split() R = int(data[0]) C = int(data[1]) grid = data[2:2 + R] result = min_steps_to_reach_end(R, C, grid) print(result)"},{"question":"Given an array of integers A of length N, where 1 le N le 200, and an integer M. Find the number of unique subarrays of A of length exactly M that have all distinct elements. -----Constraints----- - All values in input are integers. - 1 le A_i le 10^9 - 1 le M le N le 200 -----Input----- Input is given from Standard Input in the following format: N M A_1 A_2 cdots A_N -----Output----- Print one integer: the number of unique subarrays of A of length exactly M with all distinct elements. -----Sample Input----- 5 3 1 2 1 2 3 -----Sample Output----- 3 For the given example, - The subarrays of length 3 are: [1, 2, 1], [2, 1, 2], [1, 2, 3]. - Among these, only [1, 2, 3] is a subarray with all distinct elements. - Hence, the output is 1.","solution":"def count_unique_subarrays(N, M, A): Count the number of unique subarrays of length M with all distinct elements. unique_subarrays = set() for i in range(N - M + 1): subarray = tuple(A[i:i+M]) if len(subarray) == len(set(subarray)): unique_subarrays.add(subarray) return len(unique_subarrays) # To handle input directly from standard input as mentioned in the problem statement if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) A = list(map(int, data[2:])) result = count_unique_subarrays(N, M, A) print(result)"},{"question":"You are organizing a marathon and you need to give out t-shirts of different sizes to the participants. To make sure you have the right sizes available, you decided to log the size requests of all participants. Now you need to summarize this information to know how many t-shirts of each size to order. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of participants in the marathon. The following n lines contain sizes requested by the participants, one per line. Each size is represented as a string and can be one of the following: \\"XS\\", \\"S\\", \\"M\\", \\"L\\", \\"XL\\", \\"XXL\\". Output Output the number of requests for each size in the following format: ``` XS: x S: y M: z L: a XL: b XXL: c ``` where x, y, z, a, b, and c are the respective counts of each size. Examples Input 5 M XS S M L Output ``` XS: 1 S: 1 M: 2 L: 1 XL: 0 XXL: 0 ```","solution":"def summarize_tshirt_requests(n, sizes): Summarizes the t-shirt size requests. Parameters: n (int): Number of participants. sizes (list): List of size requests. Returns: dict: A dictionary with counts of each size. size_counts = {\\"XS\\": 0, \\"S\\": 0, \\"M\\": 0, \\"L\\": 0, \\"XL\\": 0, \\"XXL\\": 0} for size in sizes: if size in size_counts: size_counts[size] += 1 return size_counts def format_size_summary(size_summary): Formats the size summary into the required output format. Parameters: size_summary (dict): A dictionary with counts of each size. Returns: str: A formatted string with counts of each size. formatted_output = [] for size in [\\"XS\\", \\"S\\", \\"M\\", \\"L\\", \\"XL\\", \\"XXL\\"]: formatted_output.append(f\\"{size}: {size_summary[size]}\\") return \'n\'.join(formatted_output)"},{"question":"Kavita is working on a new project that involves traffic signals and their timings. She wants to analyze the efficiency of traffic signals by simulating the signal cycles. A typical traffic signal has a specific number of cycles after which it repeats. Each cycle consists of a sequence of green, yellow, and red lights with specified durations. The light sequence format is as follows: - Green light for a specified number of seconds - Yellow light for a specified number of seconds - Red light for a specified number of seconds Kavita wants to compute the total duration of the signal being in each state (green, yellow, red) over a given number of complete signal cycles. Input Format: 1. The first line contains an integer T, the number of test cases. 2. For each test case: - The first line contains an integer N, the number of signal cycles. - The second line contains three space-separated integers: G, Y, and R representing the duration (in seconds) of the green, yellow, and red lights respectively for one cycle. Output Format: For each test case, print three space-separated integers representing the total duration in seconds spent in the green, yellow, and red states over N cycles. Sample Input: 2 3 30 5 25 5 45 10 20 Sample Output: 90 15 75 225 50 100","solution":"def traffic_signal_duration(T, test_cases): results = [] for case in test_cases: N, G, Y, R = case total_green = N * G total_yellow = N * Y total_red = N * R results.append((total_green, total_yellow, total_red)) return results def format_output(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results)"},{"question":"You are given an array of integers and a number of queries. Each query consists of a single integer representing an index in the array. For each query, you are to compute the product of all elements in the array except the one at the specified index. Since the result can be very large, please return the answer modulo 10^9 + 7. Input The first line contains two integers, N and Q, representing the size of the array and the number of queries, respectively. The second line contains N integers, representing the elements of the array. The next Q lines each contain a single integer, representing the index for which the product excluding the element at that position is to be computed. Output For each query, output a single line containing the answer to the corresponding query. Constraints 1 ≤ N, Q ≤ 100,000 1 ≤ array[i] ≤ 1,000 0 ≤ index < N Example Input: 6 3 1 2 3 4 5 6 0 1 5 Output: 720 360 120","solution":"MOD = 10**9 + 7 def product_exclude_current(arr, queries): Returns an array containing the product of all elements in `arr` excluding the element at each index in `queries`, modulo 10^9 + 7. n = len(arr) # Compute total product mod MOD total_product = 1 for num in arr: total_product = (total_product * num) % MOD # Collect results for each query results = [] for idx in queries: if arr[idx] == 0: product = 1 for i in range(n): if i != idx: product = (product * arr[i]) % MOD results.append(product) else: product_excluding = (total_product * pow(arr[idx], MOD-2, MOD)) % MOD results.append(product_excluding) return results def process_input(N, Q, array, queries): return product_exclude_current(array, queries)"},{"question":"Implement a function that takes a string as input and returns a new string where every letter is shifted by three positions in the alphabet. This is a simple Caesar cipher where \'A\' becomes \'D\', \'B\' becomes \'E\', and so on. Letters \'X\', \'Y\' and \'Z\' wrap around to \'A\', \'B\' and \'C\' respectively. The function should maintain the case of the original letters, and non-letter characters should remain unchanged. Input will be a valid string containing uppercase and lowercase letters, and possibly non-letter characters. Examples ```python caesar_cipher(\'abc\') # \\"def\\" caesar_cipher(\'xyz\') # \\"abc\\" caesar_cipher(\'ABC\') # \\"DEF\\" caesar_cipher(\'XYZ\') # \\"ABC\\" caesar_cipher(\'Hello, World!\') # \\"Khoor, Zruog!\\" ```","solution":"def caesar_cipher(text): Applies the Caesar cipher with a shift of 3 on the given text. Parameters: text (str): Input string to be encrypted. Returns: str: Encrypted string with each letter shifted by 3 positions. result = [] for char in text: if char.isalpha(): shift = 3 if char.islower(): result.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif char.isupper(): result.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Problem Description: Indreneel is fascinated by palindromic numbers and he enjoys creating them by rearranging the digits of a given number. A palindromic number is a number that remains the same when its digits are reversed. Indreneel\'s challenge is to determine if it’s possible to rearrange the digits of a given number to form a palindrome. Given a number, your task is to check if its digits can be rearranged to form a palindrome. Input First line contains an integer t denoting the number of test cases. Each of the next t lines contains a single integer n. Output For each test case, output \\"Yes\\" if the digits of the number can be rearranged to form a palindrome, otherwise output \\"No\\". Constraints 1 ≤ t ≤ 10 0 ≤ n ≤ 10^18 Example Input: 3 121 1234 4444 Output: Yes No Yes Explanation Example case 1. The digits of 121 can be rearranged to form 121 or 212, both being palindromes, hence the answer is Yes. Example case 2. The digits of 1234 cannot be rearranged to form a palindrome, hence the answer is No. Example case 3. The digits of 4444 can be rearranged to form 4444, a palindrome, hence the answer is Yes.","solution":"def can_form_palindrome(n): Returns \'Yes\' if the digits of n can be rearranged to form a palindrome, otherwise \'No\'. from collections import Counter count = Counter(str(n)) odd_count = sum(1 for digit in count.values() if digit % 2 != 0) return \'Yes\' if odd_count <= 1 else \'No\' def check_palindromes(test_cases): results = [] for n in test_cases: results.append(can_form_palindrome(n)) return results"},{"question":"Alice is hosting a coding contest and wants to distribute a certain number of problems to the participants in a fair manner. To make it fair, she decides that no two participants should get a difference of more than one problem. She wants to determine whether it is possible to distribute all the problems according to this rule based on the number of participants and the total number of problems. Given the number of participants and the total number of problems, can you determine whether it is possible to distribute the problems fairly? Input: - The first line contains an integer t, the number of test cases. - The first line of each test case contains n, the number of participants. - The second line contains an integer p, the total number of problems. Output: Print \\"YES\\" (without quotes) if it is possible to distribute the problems fairly, otherwise print \\"NO\\" (without quotes). Print each answer in a new line. Constraints: 1 <= t <= 100 1 <= n <= 10^5 1 <= p <= 10^9 Example: Input: 3 3 8 2 5 4 10 Output: YES YES NO","solution":"def can_distribute_problems_fairly(t, test_cases): results = [] for case in test_cases: n, p = case if (p % n == 0) or (p % n == n - 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to preprocess input and call function def solve(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) p = int(data[index + 1]) index += 2 test_cases.append((n, p)) results = can_distribute_problems_fairly(t, test_cases) for result in results: print(result)"},{"question":"You are given an array A of integers and an integer K. Your task is to find out whether there exists a pair of indices (i, j) such that A[i] + A[j] = K and i < j. Write a function `find_pair` that takes two arguments: - an array of integers, `arr` - an integer, `K` The function should return a boolean indicating whether such a pair of indices exists. INPUT FORMAT: Line 1: An integer N, the number of elements in the array. Line 2: N space-separated integers representing the elements of the array. Line 3: An integer K representing the target sum. CONSTRAINTS: 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ K ≤ 10^9 OUTPUT FORMAT: A single line containing \\"True\\" or \\"False\\" based on whether there exists such a pair. SAMPLE INPUT 5 1 2 3 4 5 8 SAMPLE OUTPUT True Explanation The pair (3, 5) exists in the array and they sum up to 8, hence the output is \\"True\\".","solution":"def find_pair(arr, K): Determines if there exists a pair of indices (i, j) such that arr[i] + arr[j] = K and i < j. Args: arr (list of int): List of integers K (int): Target sum Returns: bool: True if such a pair exists, False otherwise seen = set() for num in arr: if K - num in seen: return True seen.add(num) return False"},{"question":"Your task is to write a function called `analyze_date_range` that takes an array of strings, each representing a date in \\"YYYY-MM-DD\\" format, and a string representing a range in the same format. The function should return a dictionary containing the earliest date, the latest date, and the count of dates that fall within the given range (inclusive). To help you along, consider the following examples: - `earliest_date` - This is the smallest date in the given array. - `latest_date` - This is the largest date in the given array. - `within_range_count` - The number of dates that fall between (and including) the given start and end dates. For simplicity, you can assume that the date strings are always in the correct \\"YYYY-MM-DD\\" format and that the array will not be empty. Example: Input: ```python dates = [\\"2023-01-01\\", \\"2023-01-05\\", \\"2023-01-10\\", \\"2023-01-15\\"] range_start = \\"2023-01-05\\" range_end = \\"2023-01-10\\" ``` Output: ```python { \\"earliest_date\\": \\"2023-01-01\\", \\"latest_date\\": \\"2023-01-15\\", \\"within_range_count\\": 2 } ``` Explanation: - The earliest date is `\\"2023-01-01\\"`. - The latest date is `\\"2023-01-15\\"`. - There are 2 dates (`\\"2023-01-05\\"` and `\\"2023-01-10\\"`) that fall within the range from `\\"2023-01-05\\"` to `\\"2023-01-10\\"` inclusive.","solution":"from datetime import datetime def analyze_date_range(dates, range_start, range_end): Analyzes the given dates and returns a dictionary containing the earliest date, the latest date, and the count of dates that fall within the given range (inclusive). Parameters: dates (list of str): A list of date strings in the format \\"YYYY-MM-DD\\". range_start (str): The start date of the range in the format \\"YYYY-MM-DD\\". range_end (str): The end date of the range in the format \\"YYYY-MM-DD\\". Returns: dict: A dictionary with keys \\"earliest_date\\", \\"latest_date\\", and \\"within_range_count\\". date_format = \\"%Y-%m-%d\\" date_objects = [datetime.strptime(date, date_format) for date in dates] range_start_date = datetime.strptime(range_start, date_format) range_end_date = datetime.strptime(range_end, date_format) earliest_date = min(date_objects).strftime(date_format) latest_date = max(date_objects).strftime(date_format) within_range_count = sum(range_start_date <= date <= range_end_date for date in date_objects) return { \\"earliest_date\\": earliest_date, \\"latest_date\\": latest_date, \\"within_range_count\\": within_range_count }"},{"question":"Carla loves to play a game involving a sequence of numbers. In this game, she starts with an empty sequence and performs a series of operations. Each operation falls into one of two types: 1. Add an integer x to the end of the sequence. 2. Remove the last occurrence of an integer x from the sequence. After performing all the operations, Carla wants to know the sum of the remaining elements in the sequence. Write a program to help her find the final sum. -----Input----- The first line contains an integer q (1 le q le 1000) — the number of operations Carla performs. The next q lines contain either of two types of operations: - \\"ADD x\\" (where x is an integer between 1 and 1000), which means Carla adds x to the end of the sequence. - \\"REMOVE x\\" (where x is an integer between 1 and 1000), which means Carla removes the last occurrence of x from the sequence. If x is not present in the sequence, this operation does nothing. -----Output----- Output a single integer — the sum of the elements in the sequence after all operations are performed. -----Examples----- Input 5 ADD 3 ADD 5 REMOVE 3 ADD 7 REMOVE 5 Output 7 Input 3 ADD 10 ADD 20 ADD 10 Output 40 Input 4 ADD 1 REMOVE 2 ADD 1 REMOVE 1 Output 1 -----Note----- In the first example: 1. ADD 3 results in the sequence [3]. 2. ADD 5 results in the sequence [3, 5]. 3. REMOVE 3 results in the sequence [5]. 4. ADD 7 results in the sequence [5, 7]. 5. REMOVE 5 results in the sequence [7]. So the final sequence is [7], and the sum of elements is 7. In the second example: 1. ADD 10 results in the sequence [10]. 2. ADD 20 results in the sequence [10, 20]. 3. ADD 10 results in the sequence [10, 20, 10]. So the final sequence is [10, 20, 10], and the sum of elements is 40.","solution":"def final_sequence_sum(operations): Computes the sum of a sequence after a series of add and remove operations. :param operations: A list of operations. Each operation is a string \\"ADD x\\" or \\"REMOVE x\\". :return: The sum of the elements in the sequence after all operations. sequence = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, x = operation.split() sequence.append(int(x)) elif operation.startswith(\\"REMOVE\\"): _, x = operation.split() x = int(x) for i in range(len(sequence) - 1, -1, -1): if sequence[i] == x: del sequence[i] break return sum(sequence)"},{"question":"Consider an undirected connected graph with n nodes and m edges. Given a list of m edges where each edge connects two nodes and has a certain weight, find the shortest paths from node 1 to all other nodes. -----Input----- The first line contains two integers n and m (2 le n le 100,000, 1 le m le 200,000) — the number of nodes and the number of edges in the graph. The following m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6), describing an edge between nodes u and v with weight w. -----Output----- Output n integers. For every node i (1 le i le n), print the length of the shortest path from node 1 to node i. If there is no path from node 1 to some node i, print -1. -----Examples----- Input 5 6 1 2 7 1 3 9 1 5 14 2 3 10 2 4 15 3 4 11 4 5 6 Output 0 7 9 20 14 Input 4 3 1 2 3 2 3 4 3 4 5 Output 0 3 7 12 Input 4 2 1 2 2 3 4 8 Output 0 2 -1 -1 -----Note----- In the first example, the shortest paths are calculated as follows: - From node 1 to node 2: 1 → 2, shortest path length = 7 - From node 1 to node 3: 1 → 3, shortest path length = 9 - From node 1 to node 4: 1 → 2 → 3 → 4, shortest path length = 7 + 10 + 11 = 20 - From node 1 to node 5: 1 → 5, shortest path length = 14 In the second example, the path lengths are straightforward: - From node 1 to node 2: 1 → 2, shortest path length = 3 - From node 1 to node 3: 1 → 2 → 3, shortest path length = 3 + 4 = 7 - From node 1 to node 4: 1 → 2 → 3 → 4, shortest path length = 3 + 4 + 5 = 12 In the third example: - From node 1 to node 3 and node 4, there are no paths hence the distances are -1.","solution":"import heapq def shortest_paths_from_1(n, m, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [float(\'inf\')] * (n + 1) dist[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, w in graph[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heapq.heappush(priority_queue, (dist[v], v)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n + 1)]"}]'),A={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},Y={class:"card-container"},C={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function M(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",Y,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),x(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):l("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-8edc90f0"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/24.md","filePath":"quotes/24.md"}'),D={name:"quotes/24.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[v(z)]))}});export{B as __pageData,G as default};
