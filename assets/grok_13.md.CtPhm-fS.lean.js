import{_ as f,o as n,c as r,a as t,m as d,t as h,C as g,M as _,U as b,f as l,F as y,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},R={class:"review-title"},W={class:"review-content"};function F(i,e,u,m,s,o){return n(),r("div",k,[t("div",T,[t("div",R,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",W,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(h(u.poem.solution),1)])])])}const N=f(q,[["render",F],["__scopeId","data-v-29e47fa3"]]),A=JSON.parse(`[{"question":"Write a python function to insert a digit into a given position in an integer. Assume the position is a 1-indexed position (i.e., the first digit's position is 1). The digit should be inserted to the left of the specified position.","solution":"def insert_digit(number, digit, position): Inserts the specified digit into the given position (1-indexed) in the number. Parameters: number (int): The original number. digit (int): The digit to be inserted. position (int): The 1-indexed position where the digit will be inserted. Returns: int: The new number with the digit inserted. num_str = str(number) # If the position is greater than the length of the number, append the digit at the end if position > len(num_str): num_str += str(digit) else: num_str = num_str[:position-1] + str(digit) + num_str[position-1:] return int(num_str)"},{"question":"Write a python function to find the sum of all even numbers in a given range of numbers. For example, if the input is 10, the function should return 30 because 2 + 4 + 6 + 8 + 10 = 30. If the input is 15, the function should return 56 because 2 + 4 + 6 + 8 + 10 + 12 + 14 = 56. Your function should work for any non-negative integer.","solution":"def sum_of_evens(n): Returns the sum of all even numbers from 1 to n (inclusive). :param n: The upper range of numbers to consider (inclusive). :type n: int :return: The sum of all even numbers from 1 to n. :rtype: int return sum(i for i in range(2, n + 1, 2))"},{"question":"Write a python function to find the product of elements in all subsets of a set except the empty set.","solution":"from itertools import chain, combinations def all_subsets_product_except_empty_set(s): Returns the product of elements in all subsets of a set except the empty set. def product(lst): result = 1 for x in lst: result *= x return result # Get all subsets all_subsets = chain.from_iterable(combinations(s, r) for r in range(1, len(s)+1)) # Calculate product of all subsets total_product = 0 for subset in all_subsets: total_product += product(subset) return total_product"},{"question":"Write a python function to find the intersection of two sets without using the built-in \`intersection\` method or the \`&\` operator.","solution":"def set_intersection(set1, set2): Returns the intersection of two sets without using the built-in intersection method or the & operator. result = set() for element in set1: if element in set2: result.add(element) return result"},{"question":"Write a python function to calculate and return the nth Fibonacci number using recursion, considering memoization to optimize performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion and memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to calculate the minimum number of operations required to make an array elements sum even by adding 1 or subtracting 1 from each element of the array.","solution":"def min_operations_to_even_sum(arr): Returns the minimum number of operations required to make the sum of the array even by adding 1 or subtracting 1 from each element of the array. :param arr: List[int] - An array of integers :return: int - Minimum number of operations to make the sum even # Calculate the sum of the array total_sum = sum(arr) # If the sum is already even, no operations are needed if total_sum % 2 == 0: return 0 else: # If the sum is odd, it takes exactly 1 operation to make it even return 1"},{"question":"Write a python function to find and add up the numbers between 2 to n (inclusive). The code should be efficient and clean.","solution":"def sum_of_numbers(n): Finds and returns the sum of numbers from 2 to n (inclusive). Parameters: n (int): The upper limit of the range. Returns: int: The sum of numbers from 2 to n. if n < 2: return 0 return sum(range(2, n + 1))"},{"question":"Write a python function to find the number of unique integers in an array. For example, in the array [1, 2, 2, 3], there are 3 unique integers, since 1, 2, and 3 are all distinct.","solution":"def count_unique_integers(arr): Returns the number of unique integers in the array. return len(set(arr))"},{"question":"Write a python function to replace all occurrences of a specific character in a string with a new character. The function should take three parameters: the original string, the character to be replaced, and the new character. The function should return the modified string.","solution":"def replace_char(original_string, old_char, new_char): Replaces all occurrences of old_char in original_string with new_char. :param original_string: The original string where replacements are to be made. :param old_char: The character to be replaced. :param new_char: The character to replace old_char with. :return: The modified string with all occurrences of old_char replaced by new_char. return original_string.replace(old_char, new_char)"},{"question":"Write a python function to find the number of possible paths in a binary matrix where the path can only move right or down and ends at a given point in the matrix. The binary matrix represents obstacles, where 0 is an obstacle and 1 is an empty cell you can walk on.","solution":"def num_paths(matrix, end_row, end_col): Returns the number of possible paths in a binary matrix from (0,0) to (end_row, end_col) where 0 represents an obstacle and 1 represents an empty cell. if not matrix or matrix[0][0] == 0 or matrix[end_row][end_col] == 0: return 0 rows = len(matrix) cols = len(matrix[0]) dp = [[0 for _ in range(cols)] for _ in range(rows)] dp[0][0] = 1 for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[end_row][end_col]"},{"question":"Write a python function to remove duplicates from a sorted array and return the new length. The order of elements should be maintained.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array and returns the new length. The order of elements is maintained. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a python function to return all the keys that have the minimum value in a dictionary.","solution":"def keys_with_min_value(d): Returns all keys that have the minimum value in the dictionary d. if not d: return [] min_value = min(d.values()) return [k for k, v in d.items() if v == min_value]"},{"question":"Write a python function to find the average of the first N natural numbers and return it.","solution":"def average_of_first_n_natural_numbers(N): Returns the average of the first N natural numbers. if N <= 0: raise ValueError(\\"N should be a positive integer\\") sum_of_numbers = N * (N + 1) / 2 average = sum_of_numbers / N return average"},{"question":"Write a python function to find the maximum sum of numbers in a program given a list of integers. The function should be able to handle both positive and negative integers and return the maximum sum possible by any contiguous subarray within the list.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given list of integers. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the maximum profit from buying and selling stocks given a list of stock prices.","solution":"def max_profit(prices): Returns the maximum profit from buying and selling stocks given a list of stock prices. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to find the smallest number that is evenly divisible by all numbers from 1 to n. What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?","solution":"def gcd(a, b): Calculate the Greatest Common Divisor of a and b. while b: a, b = b, a % b return a def lcm(a, b): Calculate the Least Common Multiple of a and b. return a * b // gcd(a, b) def smallest_multiple(n): Returns the smallest number that is evenly divisible by all numbers from 1 to n. result = 1 for i in range(1, n + 1): result = lcm(result, i) return result # Find the smallest number that is evenly divisible by all of the numbers from 1 to 20. number = smallest_multiple(20) print(number)"},{"question":"Write a python function to replace all the numbers in a string with their corresponding English word equivalents. For example, if the input is \\"I have 2 apples and 3 oranges\\", the output should be \\"I have two apples and three oranges\\".","solution":"def number_to_words(s): Replace all numbers in a string with their English word equivalents. number_words = { \\"0\\": \\"zero\\", \\"1\\": \\"one\\", \\"2\\": \\"two\\", \\"3\\": \\"three\\", \\"4\\": \\"four\\", \\"5\\": \\"five\\", \\"6\\": \\"six\\", \\"7\\": \\"seven\\", \\"8\\": \\"eight\\", \\"9\\": \\"nine\\" } result = [] for char in s: if char.isdigit(): result.append(number_words[char]) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find the number of days in a given year.","solution":"def number_of_days_in_year(year): Returns the number of days in the given year. # Check if the year is a leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 366 else: return 365"},{"question":"Write a python function to implement the simple Caesar cipher encryption and decryption.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the text using Caesar Cipher with the given shift. encrypted_text = [] for char in text: if char.isupper(): encrypted_text.append(chr((ord(char) + shift - 65) % 26 + 65)) elif char.islower(): encrypted_text.append(chr((ord(char) + shift - 97) % 26 + 97)) else: encrypted_text.append(char) return ''.join(encrypted_text) def caesar_cipher_decrypt(text, shift): Decrypts the text using Caesar Cipher with the given shift. return caesar_cipher_encrypt(text, -shift)"},{"question":"Write a python function to find the sum of all positive numbers in a list.","solution":"def sum_positive_numbers(numbers): Returns the sum of all positive numbers in the list. return sum(x for x in numbers if x > 0)"},{"question":"Write a python function to remove duplicates from a list of integers. The function should maintain the order of the unique elements as they appear in the original list. Use list comprehension and any built-in functions necessary to achieve this.","solution":"def remove_duplicates(lst): Removes duplicates from a list of integers while maintaining the order of unique elements. seen = set() return [x for x in lst if not (x in seen or seen.add(x))]"},{"question":"Write a python function to remove all characters in a string except a specified set of characters.","solution":"def remove_except_set(s, allowed_chars): Removes all characters from the string \`s\` except those specified in the \`allowed_chars\` set. Parameters: s (str): The input string. allowed_chars (set): A set of characters that should not be removed from the string. Returns: str: A new string with only the allowed characters. return ''.join(c for c in s if c in allowed_chars)"},{"question":"Write a python function to compute the sum of the first n odd numbers. What is the function definition?","solution":"def sum_of_first_n_odd_numbers(n): Returns the sum of the first n odd numbers. return n * n"},{"question":"Write a python function to check if a number is divisible by both 4 and 6.","solution":"def is_divisible_by_4_and_6(number): Returns True if number is divisible by both 4 and 6, False otherwise. return number % 4 == 0 and number % 6 == 0"},{"question":"Write a python function to get the second maximum value present in the list.","solution":"def second_max(numbers): Returns the second maximum value from the list of numbers. If the list contains fewer than two distinct numbers, returns None. if len(numbers) < 2: return None first_max = second_max = float('-inf') for number in numbers: if number > first_max: second_max, first_max = first_max, number elif first_max > number > second_max: second_max = number return second_max if second_max != float('-inf') else None"},{"question":"Write a python function to find the average of a list of numbers, but only count the numbers that are greater than 10.","solution":"def average_above_ten(numbers): Returns the average (mean) of numbers in the list that are greater than 10. If no numbers are greater than 10, returns None. filtered_numbers = [num for num in numbers if num > 10] if not filtered_numbers: return None return sum(filtered_numbers) / len(filtered_numbers)"},{"question":"Write a python function to find the maximum number in a list. You should consider edge cases for an empty list and a list with a single element.","solution":"def find_maximum(numbers): Returns the maximum number in a list. If the list is empty, returns None. If the list has one element, returns that element. if not numbers: return None max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Write a python function to find the element that appears only once in a sorted array. All other elements appear exactly twice. Write a function named \`find_unique_element\` that takes a sorted list as input and returns the element that appears only once.","solution":"def find_unique_element(arr): Given a sorted array where every element appears twice except for one element that appears only once, find that single element. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if mid % 2 == 1: mid -= 1 if arr[mid] == arr[mid + 1]: left = mid + 2 else: right = mid return arr[left]"},{"question":"Write a python function to calculate the sum of all numbers in a list, but exclude any numbers that contain the digit 9.","solution":"def sum_excluding_nines(lst): Calculate the sum of all numbers in a list, excluding any numbers that contain the digit 9. Parameters: lst (list of int): List of integers to be processed. Returns: int: Sum of numbers excluding those that contain the digit 9. return sum(num for num in lst if '9' not in str(num))"},{"question":"Write a python function to find the sum of all numbers in a list that are divisible by a given divisor.","solution":"def sum_divisible_by(nums, divisor): Returns the sum of all numbers in the list that are divisible by the given divisor. return sum(n for n in nums if n % divisor == 0)"},{"question":"Write a python function to find the single number in a list where every other element appears twice.","solution":"def single_number(nums): Finds the single number in a list where every other element appears twice. Args: nums (list): List of integers Returns: int: The single number unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Write a python function to find the duplicate number in an array of integers where one number is repeated exactly once, and all other numbers are unique. The array will contain integers in the range from 0 to n-1, where n is the length of the array. The function should return the duplicate number if it exists, otherwise return -1.","solution":"def find_duplicate(nums): Finds the duplicate number in an array of integers where one number is repeated exactly once, and all other numbers are unique. Parameters: nums (list): The input list of integers. Returns: int: The duplicate number if it exists, otherwise -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a python function to remove all odd numbers from a list and return the new list. The function should be named \`remove_odds\` and take a list as an input parameter. The returned list should only contain even numbers. Additionally, the function should be implemented efficiently and use list comprehension for its operation.","solution":"def remove_odds(lst): Removes all odd numbers from the list and returns a new list containing only even numbers. Parameters: lst (list): The input list containing integers. Returns: list: A new list containing only even integers from the input list. return [num for num in lst if num % 2 == 0]"},{"question":"Write a python function to sort a list of tuples by the second item in each tuple. If two tuples have the same second item, sort them by the first item in ascending order. You should use a lambda function for sorting.","solution":"def sort_tuples_by_second(tuples_list): Sorts a list of tuples by the second item in each tuple. If two tuples have the same second item, sorts them by the first item in ascending order. Parameters: tuples_list (list): A list of tuples. Returns: list: A sorted list of tuples. return sorted(tuples_list, key=lambda x: (x[1], x[0]))"},{"question":"Write a python function to check if the parentheses in a given string are balanced. A string with balanced parentheses means that each opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\" and the pairs are correctly nested.","solution":"def is_balanced_parentheses(s): Check if the parentheses in the input string are balanced. Args: s (str): Input string containing parentheses Returns: bool: True if parentheses are balanced, False otherwise stack = [] for char in s: if char == \\"(\\": stack.append(char) elif char == \\")\\": if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to estimate the area of a circle given its radius. The function should accept the radius as an argument and return the area of the circle.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to find the longest palindromic substring in a given string \`s\`. If there are multiple palindromic substrings of the same maximum length, return the one that appears first in the string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in a given string \`s\`. If there are multiple palindromic substrings of the same maximum length, returns the one that appears first in the string. n = len(s) if n == 0: return \\"\\" # Start by assuming the longest palindrome is the first character start = 0 max_length = 1 for i in range(1, n): # Look for even length palindromes centered at i-1 and i low, high = i-1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Look for odd length palindromes centered at i low, high = i-1, i+1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a python function to take an input list of integers along with the maximum size of the resulting subarray. The function should return all possible subarrays of the input list that have at most the maximum size specified.","solution":"def generate_subarrays(arr, max_size): Generates all possible subarrays of the input list that have at most the specified maximum size. Parameters: arr (list of int): The input list of integers. max_size (int): The maximum size of the resulting subarrays. Returns: list of list of int: A list containing all possible subarrays with size at most max_size. subarrays = [] for start in range(len(arr)): for end in range(start, min(start + max_size, len(arr))): subarrays.append(arr[start:end + 1]) return subarrays"},{"question":"Write a python function to detect if a given string contains only lowercase letters followed by an optional group of digits, and the whole should start with the letter 'a'.","solution":"import re def is_valid_string(s): Checks if the given string contains only lowercase letters followed by an optional group of digits, and the whole should start with the letter 'a'. pattern = r'^a[a-z]*d*' return bool(re.match(pattern, s))"},{"question":"Write a python function to find the nth Fibonacci number using dynamic programming. Dynamic programming is an optimization technique that solves problems by breaking them down into simpler subproblems and storing the results of these subproblems to avoid redundant calculations.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to remove all duplicates from a sorted list.","solution":"def remove_duplicates_from_sorted_list(sorted_list): Removes all duplicates from a sorted list. Parameters: sorted_list (list): A sorted list from which to remove duplicates. Returns: list: A new list with duplicates removed. if not sorted_list: return [] unique_list = [sorted_list[0]] for item in sorted_list[1:]: if item != unique_list[-1]: unique_list.append(item) return unique_list"},{"question":"Write a python function to check if a given number is a palindrome number using the while loop.","solution":"def is_palindrome_number(num): Checks if a given number is a palindrome. A number is a palindrome if it reads the same forward and backward. if num < 0: return False # Negative numbers are not considered palindromes original_num = num reversed_num = 0 while num > 0: digit = num % 10 reversed_num = reversed_num * 10 + digit num = num // 10 return original_num == reversed_num"},{"question":"Write a python function to find the the nth fibonacci number. The solution should be efficient and optimal for large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an efficient approach. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the index of the first occurrence of the character 'x' in a given string. If 'x' is not found in the string, the function should return -1.","solution":"def find_first_x(s): Returns the index of the first occurrence of the character 'x' in the given string. If 'x' is not found, returns -1. return s.find('x')"},{"question":"Write a python function to calculate the sum of an array of integers. The function should take an array of integers as input and return the sum of the integers in the array.","solution":"def sum_array(arr): Returns the sum of the integers in the array. Parameters: arr (list of int): The array of integers to sum up. Returns: int: The sum of the integers in the array. return sum(arr)"},{"question":"Write a python function to sort an array of integers in descending order. The function should take an array of integers as input and return the sorted array.","solution":"def sort_descending(arr): Sorts the array of integers in descending order. Args: arr (list of int): List of integers to be sorted. Returns: list of int: Sorted list of integers in descending order. return sorted(arr, reverse=True)"},{"question":"Write a python function to filter and return a list of only the even numbers from a given list using a list comprehension. The input list could contain any integers, both positive and negative.","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the given list. Parameters: numbers (list): List of integers Returns: list: List containing only even integers return [num for num in numbers if num % 2 == 0]"},{"question":"Write a python function to sort and remove duplicates from a list. The function should return the new sorted list without duplicates, keeping the original list unchanged.","solution":"def sort_and_remove_duplicates(original_list): Returns a new sorted list with duplicates removed from the original list. The original list remains unchanged. return sorted(set(original_list))"},{"question":"Write a python function to find the maximum sum of a contiguous sub-array within a 1D array of numbers. The function should be named \`max_subarray_sum\` and should accept a single parameter, a list of integers. The function should return the maximum sum of any contiguous sub-array within the list.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous sub-array within a 1D array of numbers. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if two numbers are relatively prime (in other words, if their greatest common divisor is 1).","solution":"from math import gcd def are_relatively_prime(a, b): Returns True if a and b are relatively prime (i.e., GCD(a, b) is 1), False otherwise. return gcd(a, b) == 1"},{"question":"Write a python function to find the maximum sum of a subarray using Kadane's algorithm. Your function should accept a list of integers and return the maximum sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray using Kadane's Algorithm. :param nums: List of integers :return: Maximum sum of a subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to merge sorted lists","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements from list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements from list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to print the unique elements of an array in the order of their first occurrence in the array. The function should also count the number of unique elements.","solution":"def unique_elements(arr): Returns a list of unique elements in the order of their first occurrence in the array and the count of unique elements. Parameters: arr (list): Input list of elements. Returns: tuple: A list of unique elements and the count of unique elements. seen = set() unique = [] for item in arr: if item not in seen: unique.append(item) seen.add(item) return unique, len(unique)"},{"question":"Write a python function to broadcast a 2D array to a larger 3D array. The broadcasted 3D array should have the same values as the original 2D array for each slice in the third dimension. The last two dimensions of the 3D array should be square matrices whose size is determined by the input parameter \`matrix_size\`.","solution":"import numpy as np def broadcast_to_3d(array_2d, matrix_size): Broadcasts a 2D array to a 3D array. Parameters: array_2d (numpy.ndarray): The 2D array to be broadcasted. matrix_size (int): The size of the square matrix for the last two dimensions. Returns: numpy.ndarray: The broadcasted 3D array. if not isinstance(array_2d, np.ndarray) or array_2d.ndim != 2: raise ValueError(\\"Input must be a 2D numpy array\\") if matrix_size <= 0 or not isinstance(matrix_size, int): raise ValueError(\\"matrix_size must be a positive integer\\") broadcasted_3d = np.tile(array_2d, (matrix_size, 1, 1)) return broadcasted_3d"},{"question":"Write a python function to return the most frequent number in a given list. If there is a tie, return all the numbers with the highest frequency in a sorted manner.","solution":"from collections import Counter def most_frequent(numbers): Returns the most frequent number in the list. If there is a tie, it returns all the numbers with the highest frequency in a sorted manner. :param numbers: list of integers :return: a single integer or a list of integers if not numbers: return [] count = Counter(numbers) max_freq = max(count.values()) most_freq_numbers = [num for num, freq in count.items() if freq == max_freq] return sorted(most_freq_numbers)"},{"question":"Write a python function to determine if a number is prime using caching. The function should use Python's built-in \`functools.lru_cache\` decorator to remember previous results for efficiency. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Cache results of previous computations to avoid re-computing for the same number multiple times.","solution":"from functools import lru_cache @lru_cache(maxsize=None) def is_prime(n): Determine if a number is prime. Cache results of previous computations to avoid re-computing for the same number multiple times. Args: - n (int): The number to check for primality. Returns: - bool: True if n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to sort a list of dictionary objects by a specified key in ascending order. The function should return the sorted list.","solution":"def sort_dict_list_by_key(lst, key): Sorts a list of dictionary objects by a specified key in ascending order. Parameters: lst (list): List of dictionaries to be sorted. key (str): The key to sort the dictionaries by. Returns: list: Sorted list of dictionaries by the specified key. return sorted(lst, key=lambda x: x[key])"},{"question":"Write a python function to count the number of matching elements between two lists and store the indices of matching elements in a dictionary.","solution":"def count_and_store_matches(list1, list2): Count the number of matching elements between two lists and store the indices of matching elements in a dictionary. :param list1: First list of elements :param list2: Second list of elements :return: A tuple with the count of matching elements and a dictionary with indices matching_elements_count = 0 index_dict = {} for i, item in enumerate(list1): if item in list2: matching_elements_count += 1 if item not in index_dict: index_dict[item] = [] index_dict[item].append(i) return matching_elements_count, index_dict"},{"question":"Write a python function to implement a basic calculator that can perform addition, subtraction, multiplication, and division, and also throw exceptions for invalid inputs.","solution":"def calculator(op, a, b): Performs basic arithmetic operations based on the given operator. :param op: A string representing the operation ('+', '-', '*', '/') :param a: The first operand, must be a number :param b: The second operand, must be a number :return: The result of the arithmetic operation :raises ValueError: If an invalid operator is provided or division by zero is attempted :raises TypeError: If non-numeric inputs are provided if not isinstance(a, (int, float)) or not isinstance(b, (int, float)): raise TypeError(\\"Operands must be numbers\\") if op == '+': return a + b elif op == '-': return a - b elif op == '*': return a * b elif op == '/': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operator\\")"},{"question":"Write a python function to find the sum of all nodes in a binary tree. The binary tree is represented as a dictionary where a key is a node value and its value is a pair containing its left and right children.","solution":"def sum_of_nodes(tree): Returns the sum of all nodes in a binary tree represented as a dictionary. The dictionary's keys are node values, and each value is a tuple representing the left and right children. def helper(node): if node is None: return 0 left_child, right_child = tree.get(node, (None, None)) return node + helper(left_child) + helper(right_child) if not tree: return 0 # Assuming the root of the tree is always the first key in the dictionary root = next(iter(tree)) return helper(root)"},{"question":"Write a python function to find and return the second largest number in the list. If the list is empty, the function should return \`None\`. If the list has only one number, it should also return \`None\`. Otherwise, it should return the second largest number in the list.","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list is empty or contains only one number, returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif number > second and number != first: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to check if a dictionary with keys as strings and values as integers satisfies the condition that the sum of any two distinct keys' values is not equal to any other key's value.","solution":"def is_valid_dictionary(d): Checks if the dictionary satisfies the condition that the sum of any two distinct keys' values is not equal to any other key's value. Parameters: - d (dict): A dictionary with keys as strings and values as integers Returns: - bool: True if the dictionary satisfies the condition, False otherwise values = d.values() value_set = set(values) for key1 in d: for key2 in d: if key1 != key2: sum_val = d[key1] + d[key2] if sum_val in value_set: return False return True"},{"question":"Write a python function to calculate the factorial of a number. Additionally, write a main function that continuously prompts the user for input and computes the factorial until the user decides to stop by entering 'q'.","solution":"def factorial(n): Returns the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result def main(): Continuously prompts the user for input and computes the factorial until the user decides to stop by entering 'q'. while True: user_input = input(\\"Enter a number to compute its factorial (or 'q' to quit): \\") if user_input.lower() == 'q': break try: number = int(user_input) print(f\\"The factorial of {number} is {factorial(number)}\\") except ValueError: print(\\"Invalid input, please enter a valid integer or 'q' to quit.\\")"},{"question":"Write a python function to check if a given string is a valid Roman numeral. The function should return \`True\` if the string is a valid Roman numeral, and \`False\` otherwise. Roman numerals are represented by I, V, X, L, C, D, and M, with the values 1, 5, 10, 50, 100, 500, and 1000 respectively. Rules for Roman numerals include that repeated characters can only appear three times consecutively, and subtractive combinations like IV (4) and IX (9) are allowed.","solution":"import re def is_valid_roman_numeral(s): Check if a given string is a valid Roman numeral. Parameters: s (str): The string to check. Returns: bool: True if the string is a valid Roman numeral, False otherwise. # Regular expression pattern for a valid Roman numeral roman_pattern = r'^(?=[MDCLXVI])M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})' return bool(re.match(roman_pattern, s))"},{"question":"Write a python function to find the length of the last word in a string.","solution":"def length_of_last_word(s): Returns the length of the last word in the string s. A word is defined as a maximal substring consisting of non-space characters only. # Trim any trailing spaces from the string s = s.rstrip() # Split the string into words words = s.split(' ') # Return the length of the last word return len(words[-1])"},{"question":"Write a python function to determine if a list of integers is sorted in non-decreasing order. A non-decreasing order means that each number in the list is less than or equal to the next number. The function should return True if the list is sorted in non-decreasing order, and False otherwise.","solution":"def is_sorted_non_decreasing(lst): Returns True if the list of integers 'lst' is sorted in non-decreasing order, else returns False. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a python function to print out the longest increasing subsequence of a given list of numbers. An increasing subsequence is a sequence of numbers where each subsequent number is greater than the one preceding it.","solution":"def longest_increasing_subsequence(nums): Returns the longest increasing subsequence of a given list of numbers. if not nums: return [] n = len(nums) lis = [[] for _ in range(n)] lis[0].append(nums[0]) for i in range(1, n): for j in range(i): if nums[i] > nums[j] and len(lis[i]) < len(lis[j]) + 1: lis[i] = lis[j].copy() lis[i].append(nums[i]) max_lis = [] for subseq in lis: if len(subseq) > len(max_lis): max_lis = subseq return max_lis"},{"question":"Write a python function to detect the presence of a cycle in an undirected graph represented by an adjacency list. You should use the Kruskal's Union-Find algorithm to detect cycles.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) # Path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 else: # If they are already in the same set, there is a cycle return True return False def has_cycle(graph): Check if an undirected graph contains a cycle using Kruskal's Union-Find algorithm. Args: graph (dict): An adjacency list representation of the graph. Returns: bool: True if the graph contains a cycle, False otherwise. edges = [] for node in graph: for neighbor in graph[node]: if node < neighbor: # To avoid duplicate edges (undirected graph) edges.append((node, neighbor)) uf = UnionFind(len(graph)) for u, v in edges: if uf.union(u, v): return True return False"},{"question":"Write a python function to find the non-duplicate number in a list where every other number appears twice.","solution":"def find_non_duplicate(nums): Returns the non-duplicate number from a list where every other number appears twice. result = 0 for num in nums: result ^= num return result"},{"question":"Write a python function to reverse words in a string. A word is defined as a sequence of non-space characters. The input string may contain leading, trailing, and multiple consecutive spaces between words.","solution":"def reverse_words(s): Reverses the words in a given string s. A word is defined as a sequence of non-space characters. :param s: The input string potentially containing leading, trailing, and multiple consecutive spaces between words. :type s: str :return: A string with the words in reversed order. :rtype: str words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to word count in a text. Here's the guideline","solution":"def word_count(text): Returns the number of words in the input text. A word is defined as a sequence of characters separated by spaces. if not text: return 0 words = text.split() return len(words)"},{"question":"Write a python function to determine if a given list of integers contains a triplet (a, b, c) such that \`a + b == c\`. The function should return \`True\` if such a triplet exists, and \`False\` otherwise.","solution":"def has_triplet_with_sum(lst): Determines if a list contains a triplet (a, b, c) such that a + b == c. Parameters: lst (list): A list of integers. Returns: bool: True if such a triplet exists, False otherwise. length = len(lst) if length < 3: return False lst.sort() for i in range(length): for j in range(i + 1, length): sum_ab = lst[i] + lst[j] if sum_ab in lst: return True return False"},{"question":"Write a python function to find the maximum difference between two elements in a list, where the larger element appears after the smaller element.","solution":"def max_difference(arr): Finds the maximum difference between two elements in a list such that the larger element appears after the smaller element. Args: arr (list): A list of integers. Returns: int: The maximum difference or 0 if no such pair exists. if len(arr) < 2: return 0 # Not enough elements for comparison max_diff = 0 min_element = arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a python function to determine if a given 4-digit number is a palindrome or not. A palindrome is a number that remains the same when its digits are reversed. For example, 12321 is a palindrome, but 1234 is not.","solution":"def is_palindrome(number): Determines if a given 4-digit number is a palindrome. A palindrome is a number that remains the same when its digits are reversed. Parameters: number (int): A 4-digit integer Returns: bool: True if the number is a palindrome, False otherwise number_str = str(number) return number_str == number_str[::-1]"},{"question":"Write a python function to generate all possible paths from the top-left corner to the bottom-right corner in a 2D grid. You can only move either down or right at any point in time.","solution":"def generate_paths(m, n): Generates all possible paths from the top-left corner to the bottom-right corner of an m x n grid. You can only move either down or right at any point in time. Args: m (int): number of rows. n (int): number of columns. Returns: List[str]: All possible paths represented as strings of 'D' (down) and 'R' (right). def backtrack(path, i, j): if i == m - 1 and j == n - 1: paths.append(path) return if i < m - 1: backtrack(path + 'D', i + 1, j) if j < n - 1: backtrack(path + 'R', i, j + 1) paths = [] backtrack(\\"\\", 0, 0) return paths"},{"question":"Write a python function to check if a given graph is directed or not. Provide an explanation of your code and the assumptions made.","solution":"def is_directed_graph(adjacency_matrix): Determines if a given graph is directed. :param adjacency_matrix: 2D list representing the adjacency matrix of the graph :return: True if the graph is directed, else False n = len(adjacency_matrix) for i in range(n): for j in range(n): if adjacency_matrix[i][j] != adjacency_matrix[j][i]: return True return False"},{"question":"Write a python function to reverse a string. For example, \\"hello\\" becomes \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to transform a list of integers into a list of their squares.","solution":"def square_list(numbers): Returns a list containing the squares of the integers in the input list. :param numbers: A list of integers. :return: A list of integers where each integer is the square of the corresponding input integer. return [x**2 for x in numbers]"},{"question":"Write a python function to find the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. The robot can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. The robot can only move either down or right at any point in time. # Initialize a 2D list with dimensions (m x n) with all elements set to 1 dp = [[1]*n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to find the count of numbers within a given range that are both divisible by 3 and 5, and also calculate their sum.","solution":"def count_and_sum_divisible_by_3_and_5(start, end): Returns a tuple containing the count of numbers divisible by both 3 and 5 within the given range [start, end] and their sum. count = 0 total_sum = 0 for num in range(start, end + 1): if num % 3 == 0 and num % 5 == 0: count += 1 total_sum += num return (count, total_sum)"},{"question":"Write a python function to do an in-place rotation of an array to the left by one position. You are not allowed to use extra space for this operation.","solution":"def rotate_left(arr): Rotates the given array to the left by one position in-place. :param arr: List of elements to be rotated. :return: None if not arr: return first_element = arr[0] for i in range(1, len(arr)): arr[i - 1] = arr[i] arr[-1] = first_element"},{"question":"Write a python function to return the middle number from a list of numbers. If the list has an odd length, return the middle number. If the list has an even length, return the average of the two middle numbers. If the list is empty, return None.","solution":"def middle_number(numbers): Returns the middle number from a list of numbers. If the list has an odd length, the middle number is returned. If the list has an even length, the average of the two middle numbers is returned. If the list is empty, return None. if not numbers: return None n = len(numbers) mid = n // 2 if n % 2 == 1: return numbers[mid] else: return (numbers[mid - 1] + numbers[mid]) / 2"},{"question":"Write a python function to find the length of the longest subarray with elements in non-decreasing order.","solution":"def longest_non_decreasing_subarray(arr): Returns the length of the longest subarray with elements in non-decreasing order. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] >= arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a python function to return the minimum value in a given list of integers using recursion.","solution":"def find_minimum(arr): Returns the minimum value in a given list of integers using recursion. # Base case: if the list has only one element, return that element if len(arr) == 1: return arr[0] # Recursive case: return the smaller of the first element and the minimum of the rest return min(arr[0], find_minimum(arr[1:]))"},{"question":"Write a python function to calculate the binomial coefficient for given n and k.","solution":"def binomial_coefficient(n, k): Returns the binomial coefficient for given n and k. if k < 0 or k > n: return 0 if k == 0 or k == n: return 1 k = min(k, n - k) # Take advantage of symmetry c = 1 for i in range(k): c = c * (n - i) // (i + 1) return c"},{"question":"Write a python function to count the number of unique characters that appear in a string. The function should be case-sensitive, meaning that 'A' and 'a' would be considered two different characters.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. The function is case-sensitive. return len(set(s))"},{"question":"Write a python function to return the first n elements from a list using recursion. If n is greater than the length of the list, return the entire list.","solution":"def first_n_elements(lst, n): Returns the first n elements from a list using recursion. If n is greater than the length of the list, returns the entire list. Parameters: - lst (list): The input list. - n (int): The number of elements to return. Returns: - list: A list containing the first n elements. if n <= 0 or not lst: return [] return [lst[0]] + first_n_elements(lst[1:], n-1)"},{"question":"Write a python function to find the maximum and minimum length of words in a string.","solution":"def find_max_min_length_words(s): Returns the maximum and minimum length of words in the string s as a tuple (max_len, min_len). if not s: # If the string is empty return (0, 0) words = s.split() word_lengths = [len(word) for word in words] max_len = max(word_lengths) min_len = min(word_lengths) return (max_len, min_len)"},{"question":"Write a python function to print all the prime numbers between 1 to 25","solution":"def print_primes(): Returns a list of all prime numbers between 1 and 25. primes = [] for num in range(2, 26): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to find the maximum depth of a binary tree. The binary tree is given in the form of a string in the format \\"1(2(4,5),3(6,7))\\", where '1' is the root, '2' and '3' are its children, '4' and '5' are the children of '2', and '6' and '7' are the children of '3'. The string represents a binary tree in the pre-order traversal format.","solution":"def max_depth(tree_str): Given a binary tree in string format, returns the maximum depth. tree_str: str : The string representation of the binary tree in pre-order traversal format. return: int : The maximum depth of the binary tree. max_depth_count = 0 current_depth = 0 for char in tree_str: if char == '(': current_depth += 1 max_depth_count = max(max_depth_count, current_depth) elif char == ')': current_depth -= 1 return max_depth_count"},{"question":"Write a python function to simulate rolling a dice. The function should return a random number between 1 and 6, inclusive.","solution":"import random def roll_dice(): Simulate rolling a dice, returning a random number between 1 and 6, inclusive. return random.randint(1, 6)"},{"question":"Write a python function to remove duplicate characters from a string and return the resulting string.","solution":"def remove_duplicate_characters(s): Remove duplicate characters from the string s and return the resulting string. The order of characters should be preserved. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the length of the largest subarray with a sum equals to a given target. If no such subarray exists, return -1.","solution":"def max_length_subarray_with_sum(nums, target): Returns the length of the largest subarray with a sum equal to the target. If no such subarray exists, returns -1. sum_indices = {} current_sum = 0 max_len = -1 for i, num in enumerate(nums): current_sum += num if current_sum == target: max_len = i + 1 if (current_sum - target) in sum_indices: max_len = max(max_len, i - sum_indices[current_sum - target]) if current_sum not in sum_indices: sum_indices[current_sum] = i return max_len"},{"question":"Write a python function to calculate and return the mean and median of a list of numbers. The function should handle both even and odd lengths of the list. Additionally, the function should sort the list before calculating the median.","solution":"def calculate_mean_median(numbers): Returns the mean and median of a list of numbers. :param numbers: list of numbers :return: (mean, median) if not numbers: raise ValueError(\\"The list of numbers is empty\\") n = len(numbers) mean = sum(numbers) / n sorted_numbers = sorted(numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 return mean, median"},{"question":"Write a python function to create a frequency distribution table of characters in a given sentence. The frequency distribution table should be a dictionary where the keys are the characters and their values are the counts of each character in the sentence.","solution":"def character_frequency_distribution(sentence): Creates a frequency distribution table of characters in a given sentence. Parameters: sentence (str): The sentence for which to create the frequency distribution table. Returns: dict: A dictionary where keys are characters and values are their counts in the sentence. frequency_distribution = {} for char in sentence: if char in frequency_distribution: frequency_distribution[char] += 1 else: frequency_distribution[char] = 1 return frequency_distribution"},{"question":"Write a python function to find the maximum element in a list. The function must handle both integer and floating point numbers. Additionally, if a list is empty, the function should return \`None\`.","solution":"def find_max_element(lst): Returns the maximum element in a list. Handles both integer and floating point numbers. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to calculate the sum, difference, product and quotient of two numbers.","solution":"def calculate_operations(a, b): Returns a dictionary with the sum, difference, product, and quotient of a and b. return { \\"sum\\": a + b, \\"difference\\": a - b, \\"product\\": a * b, \\"quotient\\": a / b if b != 0 else None # Return None if b is zero to avoid division by zero error }"},{"question":"Write a python function to get the ASCII value of a character.","solution":"def get_ascii_value(character): Returns the ASCII value of the given character. Parameters: character (str): A single character whose ASCII value is to be found. Returns: int: ASCII value of the character. return ord(character)"},{"question":"Write a python function to find and return the unique elements in a list.","solution":"def find_unique_elements(lst): Returns a list of unique elements in the given list. return list(set(lst))"},{"question":"Write a python function to convert a list of numbers into a list of their ASCII character representations. You should consider only the first 256 possible ASCII characters.","solution":"def numbers_to_ascii(lst): Converts a list of numbers into a list of their ASCII character representations. Only the first 256 possible ASCII characters are considered. Parameters: lst (List[int]): List of integers. Returns: List[str]: List of ASCII character representations for given integers in list. return [chr(num) if 0 <= num < 256 else '?' for num in lst]"},{"question":"Write a python function to calculate the Fibonacci sequence up to a given number of terms. The function should taken two arguments, the first one is the number of terms and the second is a boolean value indicating whether to print the sequence or not.","solution":"def fibonacci_sequence(terms, print_sequence=False): Return the Fibonacci sequence up to the given number of terms. Parameters: terms (int): Number of terms in the Fibonacci sequence. print_sequence (bool): Whether to print the sequence or not. Returns: list: A list containing the Fibonacci sequence up to the given number of terms. if terms <= 0: return [] fib_sequence = [0] if terms == 1 else [0, 1] while len(fib_sequence) < terms: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) if print_sequence: print(fib_sequence) return fib_sequence"},{"question":"Write a python function to get a random sample with or without replacement from a list. You can use the random module from Python.","solution":"import random def get_random_sample(data, sample_size, replace=True): Returns a random sample from the data list. Parameters: - data: The input list from which to sample. - sample_size: The size of the sample to be drawn. - replace: Whether sampling is with replacement (default is True). Returns: A list containing the random sample. if replace: return [random.choice(data) for _ in range(sample_size)] else: return random.sample(data, sample_size)"},{"question":"Write a python function to find integer solutions to the equation Ax^2 + Bxy + Cy^2 + Dx + Ey + F = 0 where A, B, C, D, E, F are given constants.","solution":"def find_integer_solutions(A, B, C, D, E, F, x_range=(-100, 100), y_range=(-100, 100)): Finds all integer solutions (x, y) to the equation Ax^2 + Bxy + Cy^2 + Dx + Ey + F = 0 within the specified ranges for x and y. Parameters: A, B, C, D, E, F: coefficients of the equation. x_range: a tuple (min_x, max_x) to specify the range of x values to check. y_range: a tuple (min_y, max_y) to specify the range of y values to check. Returns: A list of tuples [(x1, y1), (x2, y2), ...] with integer solutions. solutions = [] for x in range(x_range[0], x_range[1] + 1): for y in range(y_range[0], y_range[1] + 1): if A * x**2 + B * x * y + C * y**2 + D * x + E * y + F == 0: solutions.append((x, y)) return solutions"},{"question":"Write a python function to return the number of bits required to flip to convert integer A to integer B. For example, if A = 5 and B = 8, then the binary representation of 5 is 101 and that of 8 is 1000. Thus, to convert 5 to 8, we need to flip 2 bits. So the function should return 2.","solution":"def count_bits_to_flip(a, b): Returns the number of bits required to flip to convert integer a to integer b. xor = a ^ b count = 0 while xor: count += xor & 1 xor >>= 1 return count"},{"question":"Write a python function to reverse a string, and use it to reverse the string \\"Hello World!\\".","solution":"def reverse_string(s): Reverses the input string s. return s[::-1] # Example usage: reversed_example = reverse_string(\\"Hello World!\\")"},{"question":"Write a python function to check if a number is a palindrome. What is a palindrome number?","solution":"def is_palindrome(number): Returns True if the given number is a palindrome, False otherwise. str_number = str(number) return str_number == str_number[::-1]"},{"question":"Write a python function to remove duplicates from a list. If there are duplicates, keep the one that appears latest in the list. If the list is empty, return an empty list. If the list contains only unique elements, return the list as is.","solution":"def remove_duplicates(lst): Removes duplicates from a list, keeping only the latest occurrence of each element. Parameters: lst (list): The input list from which to remove duplicates. Returns: list: A list with duplicates removed, maintaining the latest occurrence of each element. seen = {} for item in reversed(lst): if item not in seen: seen[item] = True return list(reversed(seen.keys()))"},{"question":"Write a python function to find the kth smallest element in an array. The function should have a time complexity of O(n log k).","solution":"import heapq def kth_smallest_element(arr, k): Returns the k-th smallest element in an array. Parameters: arr (list): List of integers. k (int): The position of the smallest element to find (1-based index). Returns: int: The k-th smallest element. if k < 1 or k > len(arr): raise ValueError(\\"k is out of the range of the list\\") # Use a max-heap to keep track of the k smallest elements max_heap = [-x for x in arr[:k]] heapq.heapify(max_heap) for num in arr[k:]: if -num > max_heap[0]: heapq.heappop(max_heap) heapq.heappush(max_heap, -num) return -max_heap[0]"},{"question":"Write a python function to find all anagrams of a word and return them as a list. The function should take a single string as input and return a list of all anagrams found in a provided list of words.","solution":"def find_anagrams(word, word_list): Returns a list of anagrams of the given word from the provided word list. :param word: A string whose anagrams are to be found. :param word_list: A list of words to search for anagrams. :return: A list of anagrams found in the word_list. sorted_word = sorted(word) return [w for w in word_list if sorted(w) == sorted_word]"},{"question":"Write a python function to concatenate two strings and then reverse the resulting string.","solution":"def concatenate_and_reverse(str1, str2): Concatenates two strings and then reverses the resulting string. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated and reversed string. concatenated_str = str1 + str2 reversed_str = concatenated_str[::-1] return reversed_str"},{"question":"Write a python function to print a pattern of a right-angled triangle with a given number of rows.","solution":"def print_triangle(rows): Prints a right-angled triangle pattern with the given number of rows. Each row contains increasing number of stars starting from 1 on the first row. Parameters: rows (int): number of rows in the triangle for i in range(1, rows + 1): print('*' * i)"},{"question":"Write a python function to multiply two matrices A and B where A and B are two-dimensional lists.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A (list of list of int/float): The first matrix. B (list of list of int/float): The second matrix. Returns: list of list of int/float: The result of multiplying A with B. # Get the dimensions of A and B rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Ensure A's columns equal B's rows for multiplication if cols_A != rows_B: raise ValueError(\\"Cannot multiply matrices: A's columns must be equal to B's rows\\") # Initialize result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to convert a given binary string to its equivalent decimal number. Ensure that the function handles both positive and negative binary strings.","solution":"def binary_to_decimal(binary_str): Converts a binary string (positive or negative) to its equivalent decimal number. Parameters: binary_str (str): A binary string, which can be negative. Returns: int: The decimal representation of the binary string. if binary_str[0] == '-': return -int(binary_str[1:], 2) return int(binary_str, 2)"},{"question":"Write a python function to solve a Sudoku puzzle. The function takes a 2D list representing the Sudoku grid and solves it using backtracking. The function should return \`True\` if the puzzle is solved and \`False\` if it's not solvable. The empty cells are represented by \`0\`.","solution":"def solve_sudoku(board): Solves the given Sudoku puzzle using backtracking. :param board: 2D list representing the Sudoku grid, where empty cells are represented by 0 :return: True if the puzzle is solvable, False otherwise def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[row // 3 * 3 + i // 3][col // 3 * 3 + i % 3] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Write a python function to return the Binary Equivalent of a given decimal number. The function should accept an integer value and return a string.","solution":"def decimal_to_binary(decimal): Returns the binary equivalent of the given decimal number. Parameters: decimal (int): The decimal number to convert to binary. Returns: str: The binary representation of the decimal number. if decimal == 0: return '0' binary = '' while decimal > 0: binary = str(decimal % 2) + binary decimal //= 2 return binary"},{"question":"Write a python function to calculate the factorial of a number using both iterative and recursive methods and compare their performance for large numbers. Analyze the trade-offs between the two methods.","solution":"import time def factorial_iterative(n): Calculate the factorial of a number iteratively. result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Calculate the factorial of a number recursively. if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) def compare_performance(n): Compare the performance of iterative and recursive methods for large numbers. start_iterative = time.time() factorial_iterative(n) end_iterative = time.time() start_recursive = time.time() factorial_recursive(n) end_recursive = time.time() iterative_time = end_iterative - start_iterative recursive_time = end_recursive - start_recursive return iterative_time, recursive_time def analyze_tradeoffs(iterative_time, recursive_time): Analyze the trade-offs between iterative and recursive methods. return { \\"Iterative Time\\": iterative_time, \\"Recursive Time\\": recursive_time, \\"Recommendation\\": ( \\"Iterative is generally better for large numbers due to less overhead\\" if iterative_time < recursive_time else \\"Recursive is competitive but might hit recursion limits\\" ) }"},{"question":"Write a python function to find the maximum occurrence of a character in a string and return the character along with its frequency.","solution":"def max_occurrence_char(s): Returns the character with the maximum occurrence in the string s along with its frequency. Parameters: s (str): The input string Returns: tuple: (character, frequency) with maximum occurrence from collections import Counter counter = Counter(s) if not counter: return None, 0 max_char = max(counter, key=counter.get) return max_char, counter[max_char]"},{"question":"Write a python function to reverse a string in-place using pointers.","solution":"def reverse_string(s): Reverses a string in-place using pointers. s = list(s) left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s)"},{"question":"Write a python function to generate prime numbers and store them in a list for numbers from 1 to n. How can we optimize the code to improve its performance?","solution":"def generate_primes(n): Generates prime numbers from 1 to n and returns them as a list. This solution uses the Sieve of Eratosthenes algorithm for better performance. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False primes = [num for num in range(2, n + 1) if sieve[num]] return primes"},{"question":"Write a python function to detect whether a file is a text file or not.","solution":"import mimetypes def is_text_file(file_path): Detects whether a file is a text file or not based on its MIME type. :param file_path: The path to the file to be checked. :return: True if the file is a text file, False otherwise. mime_type, _ = mimetypes.guess_type(file_path) return mime_type is not None and mime_type.startswith('text/')"},{"question":"Write a python function to convert a string to a float. You need to handle the case where the string cannot be converted to a float. For this case, return the string \\"Invalid input\\".","solution":"def string_to_float(s): Converts a string s to a float. Returns 'Invalid input' if the conversion fails. try: return float(s) except ValueError: return \\"Invalid input\\""},{"question":"Write a python function to find the 2's complement of an n-bit binary number represented as a string.","solution":"def twos_complement(binary_str, n): Returns the 2's complement of an n-bit binary number represented as a string. if len(binary_str) != n: raise ValueError(\\"The length of the binary string should be equal to n\\") inverted_bits = ''.join('1' if bit == '0' else '0' for bit in binary_str) # Convert to integer, add 1, and convert back to n-bit binary inverted_bits_int = int(inverted_bits, 2) twos_complement_int = inverted_bits_int + 1 twos_complement_bin = format(twos_complement_int, f'0{n}b') # Handle overflow for n-bit binary representation if len(twos_complement_bin) > n: twos_complement_bin = twos_complement_bin[-n:] return twos_complement_bin"},{"question":"Write a python function to take a list as a parameter, and it should return True if the list is sorted in ascending order and False otherwise. Additionally, the function should handle lists of integers and floating-point numbers.","solution":"def is_sorted(lst): Returns True if the list is sorted in ascending order, False otherwise. Handles lists of integers and floating-point numbers. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a python function to print all distinct elements in a list.","solution":"def print_distinct_elements(lst): Prints all distinct elements in a list. distinct_elements = set(lst) for element in distinct_elements: print(element) return distinct_elements"},{"question":"Write a python function to validate if a given string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. Write the function using recursion.","solution":"def is_palindrome(s): Check if a string is a palindrome using recursion. :param s: input string :return: True if the string is a palindrome, False otherwise # Helper function to perform the recursion def check_palindrome(s, left, right): if left >= right: return True if s[left] != s[right]: return False return check_palindrome(s, left + 1, right - 1) s = ''.join(filter(str.isalnum, s)).lower() # ignore non-alphanumeric characters and lowercase input return check_palindrome(s, 0, len(s) - 1)"},{"question":"Write a python function to calculate the maximum profit that can be achieved from the sale of a given number of product items over a fixed period. The profit can be calculated using the given matrix of item costs and their corresponding prices. The function should also take into account a specific demand allocation that dictates how many items of each type should be sold daily.","solution":"def max_profit(costs, prices, demands): Calculates the maximum profit that can be achieved. Parameters: costs (list): A list of item costs. prices (list): A list of item prices. demands (list): A list of daily demands for items. Returns: int: Maximum profit. if not (len(costs) == len(prices) == len(demands)): raise ValueError(\\"Lengths of costs, prices, and demands lists must be the same\\") max_profit = 0 for cost, price, demand in zip(costs, prices, demands): daily_profit_per_item = price - cost max_profit += daily_profit_per_item * demand return max_profit"},{"question":"Write a python function to calculate the sum of elements in an array. What steps should I take to debug this function if it's not giving me accurate results?","solution":"def sum_of_elements(array): Returns the sum of elements in an array. Parameters: array (list): A list of numeric elements to be summed. Returns: int/float: Sum of the array elements. return sum(array)"},{"question":"Write a python function to parse a CSV file and read its contents line by line, printing each line to the console. The function should handle cases where the CSV may contain quotation marks and commas within fields that are not part of quoted fields.","solution":"import csv def read_csv(file_path): Reads a CSV file and prints its contents line by line. Arguments: file_path -- path to the CSV file with open(file_path, mode='r', newline='', encoding='utf-8') as file: reader = csv.reader(file) for line in reader: print(line)"},{"question":"Write a python function to merge two sorted lists into one sorted list without using any extra space. The lists should be sorted in ascending order.","solution":"def merge_sorted_lists(a, b): Merges two sorted lists into one sorted list without using extra space. :param a: List[int], first sorted list :param b: List[int], second sorted list :return: List[int], merged sorted list i, j = 0, 0 merged = [] while i < len(a) and j < len(b): if a[i] <= b[j]: merged.append(a[i]) i += 1 else: merged.append(b[j]) j += 1 while i < len(a): merged.append(a[i]) i += 1 while j < len(b): merged.append(b[j]) j += 1 a[:] = merged[:len(a)] b[:] = merged[len(a):] return merged"},{"question":"Write a python function to find the two numbers that appear only once in the array with all other numbers appearing twice. Your solution should use constant space complexity and linear time complexity.","solution":"def find_two_single_numbers(nums): Finds the two numbers that appear only once in the array. All other numbers appear exactly twice. Uses constant space and linear time. # Step 1: XOR all numbers to get XOR of the two single numbers xor = 0 for num in nums: xor ^= num # Step 2: Find a set bit (any set bit) in the xor result set_bit = xor & -xor # This isolates the rightmost set bit # Step 3: Partition the array based on the set bit and XOR within each partition num1, num2 = 0, 0 for num in nums: if num & set_bit: num1 ^= num else: num2 ^= num return num1, num2"},{"question":"Write a python function to count the number of occurrences of a given element in a list. For example, if the list is \`[1, 2, 3, 2, 4, 2, 5]\` and the element to count is \`2\`, the function should return \`3\` because the number \`2\` appears \`3\` times in the list.","solution":"def count_occurrences(lst, element): Counts the number of occurrences of a given element in a list. Args: lst (list): The list in which to count occurrences. element : The element to count in the list. Returns: int: The number of occurrences of the element in the list. return lst.count(element)"},{"question":"Write a python function to swap the maximum and minimum values in a list. If the list is empty or has only one element, return the list as is.","solution":"def swap_max_min(lst): Swaps the maximum and minimum values in the list. If the list is empty or has only one element, returns the list as is. if len(lst) <= 1: return lst max_index = lst.index(max(lst)) min_index = lst.index(min(lst)) # Swap the values at max_index and min_index lst[max_index], lst[min_index] = lst[min_index], lst[max_index] return lst"},{"question":"Write a python function to find the smallest subarray with sum at least \`K\`.","solution":"def smallest_subarray_with_sum_at_least_k(nums, K): Finds the length of the smallest contiguous subarray with sum at least K. :param nums: List of integers :param K: Integer, the target sum :return: Length of the smallest subarray with sum at least K. Returns 0 if no such subarray exists. n = len(nums) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= K: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float('inf') else 0"},{"question":"Write a python function to reformat a given sentence so that every word in the sentence starts with a capital letter. The function should take a single string parameter, and return the reformatted sentence. Ensure all spaces in the sentence are preserved, and punctuation remains attached to the end of the word it modifies.","solution":"def capitalize_sentence(sentence): Returns a sentence where the first letter of each word is capitalized. Punctuation remains attached to the word it modifies. return ' '.join(word.capitalize() for word in sentence.split(' '))"},{"question":"Write a python function to get the longest increasing subsequence from a given list of integers using dynamic programming. The function should return the longest increasing subsequence as a list.","solution":"def longest_increasing_subsequence(arr): Finds the longest increasing subsequence in the given list of integers using dynamic programming. :param arr: List of integers :return: The longest increasing subsequence as a list if not arr: return [] n = len(arr) # dp[i] will store the length of the longest increasing subsequence ending at index i. dp = [1] * n # predecessor[i] will store the index of the previous element in the longest increasing subsequence ending at index i. predecessor = [-1] * n # Build the dp and predecessor arrays for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 predecessor[i] = j # Find the index of the maximum value in dp max_index = 0 for i in range(1, n): if dp[i] > dp[max_index]: max_index = i # Reconstruct the longest increasing subsequence lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = predecessor[max_index] # Return the reversed lis return lis[::-1]"},{"question":"Write a python function to check if the current time matches the given time (in 24-hour format). The function should return True if the current time matches, and False otherwise. It should handle any errors or exceptions.","solution":"from datetime import datetime def is_current_time_match(given_time: str) -> bool: Checks if the current time matches the given time (in 24-hour format). Args: given_time (str): The time to match in 'HH:MM' or 'HH:MM:SS' 24-hour format. Returns: bool: True if the current time matches, False otherwise. try: # Get the current time current_time = datetime.now().time() # Parse the given time string if len(given_time) == 5: # 'HH:MM' format parsed_time = datetime.strptime(given_time, \\"%H:%M\\").time() elif len(given_time) == 8: # 'HH:MM:SS' format parsed_time = datetime.strptime(given_time, \\"%H:%M:%S\\").time() else: return False # Compare the parsed time with the current time return current_time.hour == parsed_time.hour and current_time.minute == parsed_time.minute and (parsed_time.second == 0 or current_time.second == parsed_time.second) except Exception: return False"},{"question":"Write a python function to return the first \\"n\\" Fibonacci numbers.","solution":"def fibonacci(n): Returns the first \\"n\\" Fibonacci numbers. Parameters: n (int): The number of terms in the Fibonacci sequence to return. Returns: list: A list containing the first \\"n\\" Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to check if a string contains at least one numeric character (digit).","solution":"def contains_digit(s): Returns True if the string s contains at least one numeric character, otherwise False. return any(char.isdigit() for char in s)"},{"question":"Write a python function to reverse the input string and return the reversed string. The function should also handle large strings efficiently.","solution":"def reverse_string(s): Returns the reversed version of the input string. :param s: str :return: str return s[::-1]"},{"question":"Write a python function to convert a decimal number to binary using stack data structure.","solution":"def decimal_to_binary(n): Convert a decimal number to binary using a stack data structure. Args: n : int The decimal number to be converted to binary. Returns: str The binary representation of the decimal number. if n == 0: return \\"0\\" stack = [] while n > 0: remainder = n % 2 stack.append(remainder) n = n // 2 binary_representation = \\"\\" while stack: binary_representation += str(stack.pop()) return binary_representation"},{"question":"Write a python function to find the maximum of two numbers. You should document the function and ensure it adheres to PEP 8 guidelines.","solution":"def find_max(a, b): Returns the maximum of two numbers. Args: a (int, float): The first number. b (int, float): The second number. Returns: int, float: The maximum of the two numbers. return a if a > b else b"},{"question":"Write a python function to reverse the order of the characters in a given string. The function should be able to handle strings of any length.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to calculate the factorial of a non-negative integer \`n\`.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to count the number of distinct words in a file.","solution":"def count_distinct_words(file_path): Counts the number of distinct words in the specified file. Args: file_path (str): Path to the file. Returns: int: The number of distinct words in the file. with open(file_path, 'r') as file: content = file.read() words = content.split() return len(set(words))"},{"question":"Write a python function to calculate the sum of the series 1/1^2 + 1/2^2 + 1/3^2 + ... + 1/n^2","solution":"def sum_series(n): Returns the sum of the series 1/1^2 + 1/2^2 + 1/3^2 + ... + 1/n^2. Parameters: n (int): The last term's denominator in the series. Returns: float: The sum of the series up to 1/n^2. result = 0 for i in range(1, n + 1): result += 1 / (i ** 2) return result"},{"question":"Write a python function to solve the eight queens problem.","solution":"def solve_n_queens(n=8): def is_valid(board, row, col): # Check this column for i in range(row): if board[i] == col: return False # Check the diagonal for i in range(row): if abs(board[i] - col) == abs(i - row): return False return True def solve(board, row, solutions): if row == n: solutions.append(board[:]) return for col in range(n): if is_valid(board, row, col): board[row] = col solve(board, row + 1, solutions) board[row] = -1 board = [-1] * n solutions = [] solve(board, 0, solutions) return solutions def format_solution(solution): n = len(solution) formatted_solution = [] for row in solution: line = '.' * row + 'Q' + '.' * (n - row - 1) formatted_solution.append(line) return formatted_solution # Example to see the formatted solutions # solutions = solve_n_queens() # for sol in solutions: # for line in format_solution(sol): # print(line) # print()"},{"question":"Write a python function to flatten a multi-level linked list where each node in the list can have a next and a child pointer.","solution":"class Node: def __init__(self, val): self.val = val self.next = None self.child = None def flatten(head): if not head: return None pseudo_head = Node(0) prev = pseudo_head stack = [head] while stack: curr = stack.pop() prev.next = curr curr.prev = prev # if we have next node, push to stack if curr.next: stack.append(curr.next) # if we have child node, push to stack and remove the child link if curr.child: stack.append(curr.child) curr.child = None prev = curr pseudo_head.next.prev = None return pseudo_head.next"},{"question":"Write a python function to implement a stack using array.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): Adds an item to the top of the stack. self.stack.append(item) def pop(self): Removes and returns the top item from the stack. Raises IndexError if the stack is empty. if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.stack.pop() def peek(self): Returns the top item from the stack without removing it. Raises IndexError if the stack is empty. if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.stack[-1] def is_empty(self): Checks if the stack is empty. return len(self.stack) == 0 def size(self): Returns the number of items in the stack. return len(self.stack)"},{"question":"Write a python function to count the occurrences of a substring within a given string, considering case-insensitivity.","solution":"def count_substring(main_string, sub_string): Returns the count of occurrences of sub_string (case-insensitive) in main_string. main_string = main_string.lower() sub_string = sub_string.lower() return main_string.count(sub_string)"},{"question":"Write a python function to check whether all elements in a list are strings.","solution":"def are_all_strings(lst): Returns True if all elements in the list are strings, otherwise returns False. return all(isinstance(item, str) for item in lst)"},{"question":"Write a python function to calculate the sum of all numbers from 1 to n using recursion. The function should be called \`recursive_sum\` and take a single integer argument \`n\`. Ensure that your function handles the base case and the recursive case correctly.","solution":"def recursive_sum(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 0: return 0 # Base case: if n is less than or equal to 0, the sum is 0 else: return n + recursive_sum(n - 1) # Recursive case: sum n with the sum of numbers from 1 to (n-1)"},{"question":"Write a python function to return the nth root of a number using the bisection method. The function should have the parameters: base, target and precision. The function should return the nth root of the base number so that the absolute difference between the target and the nth root of the base number is less than or equal to the precision.","solution":"def nth_root_bisection(base, target, precision): Returns the nth root of the base using the bisection method with given precision. Parameters: - base: The number whose nth root is to be found. - target: The degree of the root (e.g., 2 for square root, 3 for cube root, etc.). - precision: The desired precision level for the result. Returns: - The nth root of the base such that the absolute difference between the target and the nth root of the base number is less than or equal to the precision. if base == 0: return 0 # Handle negative base and even target which is invalid if base < 0 and target % 2 == 0: return None low = min(0, base) high = max(1, base) guess = (low + high) / 2 while abs(guess**target - base) > precision: if guess**target < base: low = guess else: high = guess guess = (low + high) / 2 return guess"},{"question":"Write a python function to read a line of characters using \`input\` and then write that line to a file named 'my_file.txt' in append mode. The function should check if the file 'my_file.txt' exists before attempting to write to it. If it does not exist, the function should create the file before writing.","solution":"def read_and_write_line(): Reads a line of input from the user and writes it to a file 'my_file.txt' in append mode. Creates the file if it does not exist. # Read input line from the user user_input = input(\\"Enter a line to write to 'my_file.txt': \\") # Open the file in append mode, which creates the file if it doesn't exist with open('my_file.txt', 'a') as file: file.write(user_input + 'n')"},{"question":"Write a python function to count the number of occurrences of a substring within a string, considering overlapping occurrences as well. For example, the string \\"abababa\\" contains 3 occurrences of the substring \\"aba\\" when counting overlaps.","solution":"def count_overlapping_occurrences(s, sub): Returns the count of overlapping occurrences of substring \`sub\` in string \`s\`. count = start = 0 while True: start = s.find(sub, start) if start == -1: return count count += 1 start += 1"},{"question":"Write a python function to find the first repeated character in a string. If no character is repeated, return the character '0'.","solution":"def first_repeated_character(s): Finds the first repeated character in a string. If no character is repeated, returns '0'. Parameters: s (str): The input string Returns: char: The first repeated character or '0' if no repeated character is found seen = set() for char in s: if char in seen: return char seen.add(char) return '0'"},{"question":"Write a python function to find the minimum element in an array using recursion.","solution":"def find_minimum(arr, n): Recursive function to find the minimum element in an array. Parameters: arr (list): The array of numbers. n (int): The number of elements to consider from the start. Returns: int: The minimum element in the array. if n == 1: return arr[0] else: return min(arr[n-1], find_minimum(arr, n-1))"},{"question":"Write a python function to find the maximum profit that can be earned by cutting a rod of length n inches into smaller pieces and selling the pieces.","solution":"def rod_cutting(prices, n): Function to find the maximum profit that can be earned by cutting a rod of length n inches. :param prices: List of prices where prices[i] is the price of a rod of length i+1. :param n: Length of the rod. :return: Maximum profit that can be earned. # Initialize the array to store maximum profit for each length max_profit = [0] * (n + 1) # Build the max_profit array in a bottom-up manner for i in range(1, n + 1): max_val = float('-inf') for j in range(i): max_val = max(max_val, prices[j] + max_profit[i - j - 1]) max_profit[i] = max_val return max_profit[n]"},{"question":"Write a python function to find the next day of a given date in the format 'YYYY-MM-DD'.","solution":"from datetime import datetime, timedelta def next_day(date_str): Returns the next day of the given date in 'YYYY-MM-DD' format. date_format = \\"%Y-%m-%d\\" date_obj = datetime.strptime(date_str, date_format) next_date_obj = date_obj + timedelta(days=1) return next_date_obj.strftime(date_format)"},{"question":"Write a python function to implement a Binary Search algorithm. Binary Search is a search algorithm that finds the position of a target value within a sorted array. The main idea of Binary Search is to divide the array into halves repeatedly until the target value is found or the search area is empty.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the position of the target value. :param arr: List[int] - A sorted list of integers. :param target: int - The target value to search for. :return: int - The index of the target value or -1 if the target is not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the first character that appears twice in the string and return its index. If no repeated characters are found, return -1.","solution":"def first_repeated_char_index(s): Returns the index of the first character that appears twice in the string. If no repeated characters are found, returns -1. seen = {} for index, char in enumerate(s): if char in seen: return index seen[char] = True return -1"},{"question":"Write a python function to read a file and return a list of lines.","solution":"def read_file_to_list(filename): Reads a file and returns a list of lines. Parameters: filename (str): The name or path of the file to read. Returns: list: A list of lines from the file. with open(filename, 'r') as file: lines = file.readlines() return [line.rstrip('n') for line in lines]"},{"question":"Write a python function to merge k sorted lists of integers. The function should accept a list of lists called \`lists\`, where each inner list is sorted in ascending order, and return a single list that is the result of merging all the input lists. The time complexity of the solution should be O(N log K), where N is the total number of integers across all lists and K is the number of lists.","solution":"import heapq from typing import List def merge_k_sorted_lists(lists: List[List[int]]) -> List[int]: Merges k sorted lists into a single sorted list. Parameters: lists (List[List[int]]): A list of k sorted lists Returns: List[int]: A single list that is the result of merging all the input lists if not lists: return [] min_heap = [] for i in range(len(lists)): if lists[i]: heapq.heappush(min_heap, (lists[i][0], i, 0)) result = [] while min_heap: val, list_idx, element_idx = heapq.heappop(min_heap) result.append(val) if element_idx + 1 < len(lists[list_idx]): heapq.heappush(min_heap, (lists[list_idx][element_idx + 1], list_idx, element_idx + 1)) return result"},{"question":"Write a python function to find all subsets of a given set of integers, including the empty set and the set itself.","solution":"def find_subsets(s): Returns all subsets of the given set of integers s. result = [[]] for num in s: result += [curr + [num] for curr in result] return result"},{"question":"Write a python function to rotate an array to the right by k steps. You are given an array \`nums\` and an integer \`k\`, where \`k\` is non-negative. The function should return the rotated array.","solution":"def rotate_array(nums, k): Rotates the array nums to the right by k steps. Args: nums (list): A list of integers. k (int): A non-negative integer representing steps to rotate. Returns: list: Rotated array. if not nums: return [] n = len(nums) k = k % n # In case k is greater than length of nums return nums[-k:] + nums[:-k] if k else nums"},{"question":"Write a python function to calculate and return the area of a regular polygon given the number of sides and the length of each side.","solution":"import math def area_of_regular_polygon(number_of_sides, side_length): Calculate the area of a regular polygon. Parameters: number_of_sides (int): Number of sides of the polygon side_length (float): Length of each side Returns: float: Area of the regular polygon if number_of_sides < 3 or side_length <= 0: raise ValueError(\\"number_of_sides must be >= 3 and side_length must be > 0\\") apothem = side_length / (2 * math.tan(math.pi / number_of_sides)) perimeter = number_of_sides * side_length area = (perimeter * apothem) / 2 return area"},{"question":"Write a python function to extract all the words from a given string that have a length of at least 3 characters.","solution":"def extract_long_words(s): Returns a list of words from the given string \`s\` that have a length of at least 3 characters. return [word for word in s.split() if len(word) >= 3]"},{"question":"Write a python function to generate the prime factors of a given number and return them in a list. The function should be efficient and handle large numbers.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a python function to find the closest number from a list of numbers that is less than a given number n. The function should return -1 if no such number is found.","solution":"def closest_less_than(numbers, n): Finds the closest number from a list of numbers that is less than a given number n. Returns -1 if no such number is found. closest = -1 for num in numbers: if num < n and (closest == -1 or n - num < n - closest): closest = num return closest"},{"question":"Write a python function to create a new string formed by repeating the given string n times.","solution":"def repeat_string(s, n): Returns a new string formed by repeating the given string s, n times. return s * n"},{"question":"Write a python function to calculate the sum of the first n natural numbers. How would you approach this problem?","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. :param n: The number of natural numbers to sum. :return: The sum of the first n natural numbers. if n < 1: raise ValueError(\\"n must be a positive integer\\") return n * (n + 1) // 2"},{"question":"Write a python function to find the nth prime number. What's the first prime number after 1000?","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nth_prime(n): Finds the nth prime number. count = 0 num = 1 while count < n: num += 1 if is_prime(num): count += 1 return num def first_prime_after_1000(): Returns the first prime number after 1000. num = 1001 while not is_prime(num): num += 1 return num"},{"question":"Write a python function to convert a string to a complex number if possible, or return the original string if it's not a valid complex number.","solution":"def to_complex_number(s): Converts a string to a complex number if possible, otherwise returns the original string. try: return complex(s) except ValueError: return s"},{"question":"Write a python function to modify the original list in-place to replace all values that are multiples of 5 with their cube.","solution":"def cube_multiples_of_5(lst): Modifies the list in-place to replace all values that are multiples of 5 with their cube. Parameters: lst (list): A list of integers Returns: None for i in range(len(lst)): if lst[i] % 5 == 0: lst[i] = lst[i] ** 3"},{"question":"Write a python function to return a list of all numbers in a given list that are multiples of a specified number. Then, extend the function to iterate over a range and find all multiples of the specified number within that range.","solution":"def find_multiples(numbers_list, multiple_of): Returns all numbers in the given list that are multiples of a specified number. :param numbers_list: List of integers :param multiple_of: Integer, the number to be multiple of :return: List of integers that are multiples of 'multiple_of' return [num for num in numbers_list if num % multiple_of == 0] def find_multiples_in_range(start, end, multiple_of): Returns all multiples of a specified number within a specified range [start, end]. :param start: Integer, start of the range (inclusive) :param end: Integer, end of the range (inclusive) :param multiple_of: Integer, the number to be multiple of :return: List of integers that are multiples of 'multiple_of' within the range return [num for num in range(start, end + 1) if num % multiple_of == 0]"},{"question":"Write a python function to find the largest number in an array using recursion.","solution":"def find_largest(arr): Finds the largest number in an array using recursion. # Base case: if the array has only one element if len(arr) == 1: return arr[0] # Recursively find the largest in the rest of the array max_of_rest = find_largest(arr[1:]) # Return the larger between the first element and the max of the rest if arr[0] > max_of_rest: return arr[0] else: return max_of_rest"},{"question":"Write a python function to find the smallest number in a list. If the list is empty, return \`None\`.","solution":"def find_smallest_number(lst): Returns the smallest number in a list. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a python function to convert an integer to a its binary representation as a string. The function should take an integer as an argument and return a string representation of its binary form.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. if n < 0: raise ValueError(\\"The function does not support negative integers.\\") return bin(n)[2:]"},{"question":"Write a python function to determine if a given integer is a power of two using bitwise operations. Bitwise operations are a way to manipulate integers at the bit level.","solution":"def is_power_of_two(n): Determines if a given integer n is a power of two using bitwise operations. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to calculate the minimum number of coins required to sum up to a given amount. The total amount and the list of coin denominations are provided as inputs to the function. The function should return the minimum number of coins required to make up the total amount. If it is not possible to form the total amount with the given coin denominations, the function should return -1.","solution":"def min_coins(amount, coins): Returns the minimum number of coins required to make up a given amount using the provided denominations. If it is not possible, return -1. dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): if dp[x - coin] != float('inf'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to compute the sum of the elements in a list using a loop. Ensure the function takes a list of integers as input and returns the sum of all elements.","solution":"def sum_of_elements(lst): Returns the sum of the elements in a list. total = 0 for element in lst: total += element return total"},{"question":"Write a python function to return the maximum profit that can be made from a single buy and sell of stocks given the daily prices of the stock. The function should take a list of integers representing the stock prices on consecutive days.","solution":"def max_profit(prices): Returns the maximum profit that can be made from a single buy and sell of stocks. :param prices: List[int] :return: int if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a python function to check if a number is a palindrome number without using any additional data structures. You should also ensure that the function works correctly for both positive and negative numbers.","solution":"def is_palindrome_number(n): Checks if the given number \`n\` is a palindrome. This function works for both positive and negative numbers. Args: n (int): The number to check. Returns: bool: True if the number is a palindrome, False otherwise. if n < 0: return False # Negative numbers cannot be palindromes original = n reversed_num = 0 while n > 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 return original == reversed_num"},{"question":"Write a python function to print a Floyd's triangle for a given number of rows.","solution":"def floyd_triangle(num_rows): Prints Floyd's triangle for a given number of rows. Args: num_rows (int): The number of rows for the triangle. Returns: list: A list of lists where each inner list represents a row in Floyd's triangle. result = [] current_value = 1 for i in range(1, num_rows + 1): row = [] for j in range(1, i + 1): row.append(current_value) current_value += 1 result.append(row) return result"},{"question":"Write a python function to calculate the factorial of a given non-negative integer \`n\`. If \`n\`, is negative, the function should raise a \`ValueError\`.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n in (0, 1): return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find the sum of n natural numbers. The function should use recursion to calculate the sum.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. if n <= 0: return 0 else: return n + sum_natural_numbers(n - 1)"},{"question":"Write a python function to find the second smallest number in a list. The list does not necessarily contain distinct numbers.","solution":"def second_smallest(numbers): Returns the second smallest number in a list. Assumes the list has at least two distinct numbers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers\\") first, second = float('inf'), float('inf') for number in numbers: if number < first: first, second = number, first elif first < number < second: second = number if second == float('inf'): raise ValueError(\\"List must contain at least two distinct numbers\\") return second"},{"question":"Write a python function to find the maximum value in a list of numbers. If the list is empty, return \`None\`. How would you implement this function?","solution":"def find_maximum(nums): Returns the maximum value in a list of numbers. If the list is empty, return None. if not nums: return None return max(nums)"},{"question":"Write a python function to find the maximum sum subarray among all the subarrays. This function should use the Kadane's algorithm for efficiency.","solution":"def max_subarray_sum(nums): Returns the maximum sum subarray among all the subarrays using Kadane's algorithm. max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to reverse the contents of a list in-place. What does in-place mean in this context?","solution":"def reverse_list_in_place(lst): Reverses the contents of a list in-place. Parameters: lst (list): The list to be reversed. Returns: None left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to search for a target value in a 2D matrix where each row and each column is sorted in ascending order. The function should return \`True\` if the target is found, otherwise \`False\`.","solution":"def search_matrix(matrix, target): Search for a target value in a 2D matrix where each row and each column is sorted in ascending order. Args: matrix (List[List[int]]): The 2D matrix. target (int): The target value to search for. Returns: bool: True if the target is found, False otherwise. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 # Start from the top-right corner while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 # Move left else: row += 1 # Move down return False"},{"question":"Write a python function to find the frequency of each word in a given string, and return the result as a dictionary where the keys are words and the values are their respective frequencies.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the given string s. Parameters: s (str): The input string Returns: dict: A dictionary with words as keys and their frequencies as values words = s.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to check if a linked list is a palindrome. A linked list is a linear data structure where each element is a separate object (called a node) storing its data (or value) and a reference (link) to the next element.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Check if a singly linked list is a palindrome. # Helper function to reverse the linked list. def reverse_list(head): prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev # Find the middle of the linked list slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list second_half = reverse_list(slow) first_half = head # Check if the first half and the reversed second half are the same while second_half: if second_half.val != first_half.val: return False second_half = second_half.next first_half = first_half.next return True"},{"question":"Write a python function to solve a linear equation in one variable (e.g., 3x + 5 = 11). The function should take three parameters: the coefficient of x (a), the constant term (b), and the result of the equation (c). The function should return the value of x that solves the equation. If the equation has no solution or infinitely many solutions, the function should return an appropriate message.","solution":"def solve_linear_equation(a, b, c): Solves the linear equation of the form ax + b = c for x. Parameters: a (float): The coefficient of x. b (float): The constant term. c (float): The result of the equation. Returns: float or str: The value of x that solves the equation or an appropriate message if no solution or infinitely many solutions. if a == 0: if b == c: return \\"Infinitely many solutions\\" else: return \\"No solution\\" else: x = (c - b) / a return x"},{"question":"Write a python function to calculate the average of elements in a list.","solution":"def average(lst): Returns the average of elements in the list. :param lst: List of numbers :return: Average of the numbers in the list if not lst: return 0 return sum(lst) / len(lst)"},{"question":"Write a python function to create a table of contents (TOC) for a given markdown text. The function should understand headers (Markdown headings) and map them to their depths (1 for \`#\`, 2 for \`\`, etc.) in the TOC. The TOC should be returned as a string formatted as a markdown list, where levels correspond to the markdown header depths.","solution":"def generate_toc(markdown_text): Generates a table of contents for the given markdown text. Args: markdown_text (str): The input markdown text. Returns: str: The table of contents formatted as a markdown list. toc_lines = [] for line in markdown_text.split('n'): if line.startswith('#'): header_depth = len(line.split(' ')[0]) header_title = line.strip('#').strip() toc_line = ' ' * (header_depth - 1) + f'- {header_title}' toc_lines.append(toc_line) return 'n'.join(toc_lines)"},{"question":"Write a python function to calculate the factorial of a number using tail recursion. Tail recursion is a special form of recursion where the recursive call is the last operation in the function. Python does not optimize tail recursion by default, but for the sake of this exercise, let's explore how it would look.","solution":"def factorial_tail_recursive(n, accumulator=1): Returns the factorial of n using tail recursion. Args: n : int : the number to calculate the factorial of accumulator : int : the accumulator to hold the intermediate results, default is 1 Returns: int : factorial of n if n == 0: return accumulator else: return factorial_tail_recursive(n - 1, n * accumulator)"},{"question":"Write a python function to generate all subsets of a list recursively. Each subset should be represented as a list. If the input list is empty, return an empty list. If the input list has one or more elements, return all possible subsets of the list, including the empty set and the set itself.","solution":"def generate_subsets(lst): Recursively produces all subsets of a given list. if not lst: return [[]] first_element = lst[0] rest_subsets = generate_subsets(lst[1:]) all_subsets = [] for subset in rest_subsets: all_subsets.append(subset) all_subsets.append([first_element] + subset) return all_subsets"},{"question":"Write a python function to find the kth smallest element in a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root, k): Returns the kth smallest element in a binary search tree. :param root: TreeNode, the root of the binary search tree :param k: int, the k-th position :return: int, the k-th smallest element in the binary search tree def in_order_traversal(node): if not node: return [] return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right) # Perform in-order traversal to get elements in sorted order sorted_elements = in_order_traversal(root) return sorted_elements[k-1] # k-1 because lists are 0-indexed"},{"question":"Write a python function to insert an element into a sorted list while maintaining the sorted order. The function should take three parameters: the sorted list, the element to be inserted, and the index where the element should be inserted in order to maintain the sorted order.","solution":"def insert_into_sorted_list(sorted_list, element, index): Inserts an element into a sorted list at the given index while maintaining the sorted order. Parameters: sorted_list (list): The list which is already sorted. element: The element to be inserted. index (int): The index where the element should be inserted. Returns: list: The sorted list with the element inserted. if not (0 <= index <= len(sorted_list)): raise ValueError(\\"Index out of range\\") new_list = sorted_list[:index] + [element] + sorted_list[index:] return new_list"},{"question":"Write a python function to validate an email address using regular expressions.","solution":"import re def validate_email(email): Validates if the provided email address is valid using regular expression. # Regular expression for validating an Email pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' if re.match(pattern, email): return True else: return False"},{"question":"Write a python function to generate a random password of a given length containing uppercase letters, lowercase letters, digits, and special characters.","solution":"import random import string def generate_password(length): Generates a random password of a given length containing uppercase letters, lowercase letters, digits, and special characters. if length < 4: raise ValueError(\\"Password length should be at least 4 to include all character types.\\") all_chars = string.ascii_letters + string.digits + string.punctuation password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(string.punctuation) ] password += random.choices(all_chars, k=length-4) random.shuffle(password) return ''.join(password)"},{"question":"Write a python function to return the last three characters from a given string. If a string is shorter than 3 characters, return the entire string.","solution":"def last_three_characters(s): Returns the last three characters of a given string. If the string is shorter than 3 characters, returns the entire string. Parameters: s (str): The input string. Returns: str: The last three characters of the string or the entire string if it's shorter than 3 characters. return s[-3:] if len(s) >= 3 else s"},{"question":"Write a python function to find the elements which appear at least K times in a string.","solution":"def elements_at_least_k_times(input_str, k): Finds the elements which appear at least K times in the input string. Args: input_str (str): The input string. k (int): The minimum number of times an element should appear. Returns: List[str]: List of elements that appear at least K times. from collections import Counter counter = Counter(input_str) result = [char for char, count in counter.items() if count >= k] return result"},{"question":"Write a python function to count the number of unique triplets in an array which gives the sum of zero. The array can contain both positive and negative numbers.","solution":"def count_zero_sum_triplets(arr): Returns the number of unique triplets in the array which sum to zero. arr.sort() n = len(arr) triplets_count = 0 for i in range(n-2): if i > 0 and arr[i] == arr[i-1]: continue left, right = i+1, n-1 while left < right: sum_triplet = arr[i] + arr[left] + arr[right] if sum_triplet == 0: triplets_count += 1 left += 1 while left < right and arr[left] == arr[left - 1]: left += 1 right -= 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif sum_triplet < 0: left += 1 else: right -= 1 return triplets_count"},{"question":"Write a python function to implement Dijkstra's algorithm. Dijkstra's algorithm is used for finding the shortest path between nodes in a graph, which may represent, for example, road networks. The function should take at least three parameters: the graph (in the form of an adjacency matrix), the starting vertex, and the destination vertex. The function should return the shortest distance from the starting vertex to the destination vertex and the path taken to reach it.","solution":"import heapq def dijkstra(graph, start_vertex, destination_vertex): Finds the shortest path using Dijkstra's algorithm. Parameters: - graph: 2D list representing the adjacency matrix of the graph - start_vertex: the starting vertex as an integer - destination_vertex: the destination vertex as an integer Returns: - (distance, path): tuple containing the shortest distance and the path taken as a list of vertices num_vertices = len(graph) distances = [float('inf')] * num_vertices distances[start_vertex] = 0 priority_queue = [(0, start_vertex)] predecessors = [None] * num_vertices while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == destination_vertex: path = [] while current_vertex is not None: path.insert(0, current_vertex) current_vertex = predecessors[current_vertex] return current_distance, path if current_distance > distances[current_vertex]: continue for neighbor, weight in enumerate(graph[current_vertex]): if weight > 0: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance predecessors[neighbor] = current_vertex heapq.heappush(priority_queue, (distance, neighbor)) return float('inf'), []"},{"question":"Write a python function to generate all possible palindromes from a given string. The function should return a list of strings, where each string is a unique palindrome that can be formed from the input string.","solution":"from itertools import permutations def generate_palindromes(s): Generates all unique palindromes that can be formed by the characters in the input string s. unique_palindromes = set() for p in permutations(s): joined_p = ''.join(p) if joined_p == joined_p[::-1]: unique_palindromes.add(joined_p) return list(unique_palindromes)"},{"question":"Write a python function to take a single integer n and return the sum of first n even numbers. The function should be designed to handle user inputs.","solution":"def sum_of_n_even_numbers(n): Returns the sum of the first n even numbers. Parameters: n (int): The number of even numbers to sum. Returns: int: The sum of the first n even numbers. return n * (n + 1)"},{"question":"Write a python function to calculate the factorial of a number and then square the result. The function should take an integer as input and return the squared factorial of the number. For example, if the input is 5, the function should calculate the factorial of 5 which is 120 and then return the square of 120, which is 14400.","solution":"def squared_factorial(n): Returns the square of the factorial of n. def factorial(num): if num == 0 or num == 1: return 1 result = 1 for i in range(2, num + 1): result *= i return result factorial_result = factorial(n) return factorial_result ** 2"},{"question":"Write a python function to remove duplicate values from a list while preserving the original order of elements. If there are multiple occurrences of a value, keep only the first instance.","solution":"def remove_duplicates(lst): Removes duplicate values from the list while preserving the original order. Only the first instance of each value is kept. Args: lst (list): The input list from which duplicates need to be removed. Returns: list: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to replace all the digits in the string with '#' symbol.","solution":"import re def replace_digits_with_hash(s): Replaces all digits in the given string with '#' symbol. Args: s (str): The input string. Returns: str: The modified string with digits replaced by '#'. return re.sub(r'd', '#', s)"},{"question":"Write a python function to sort a list in decreasing order using the Merge Sort algorithm. You are not allowed to use Python's built-in sorting functions or libraries.","solution":"def merge_sort_desc(arr): Sorts the list in decreasing order using the Merge Sort algorithm. if len(arr) <= 1: return arr def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] > right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result mid = len(arr) // 2 left = merge_sort_desc(arr[:mid]) right = merge_sort_desc(arr[mid:]) return merge(left, right)"},{"question":"Write a python function to solve a given Binary Search Tree (BST) to the minimum distance between two nodes. The function should take the root of the BST as input and return the minimum distance between any two nodes in the tree. The function has a time complexity of O(n).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_diff_in_bst(root): Function to find the minimum distance between any two nodes in a BST. def inorder_traversal(node): return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else [] vals = inorder_traversal(root) min_diff = float('inf') for i in range(1, len(vals)): min_diff = min(min_diff, vals[i] - vals[i - 1]) return min_diff"},{"question":"Write a python function to apply the inverse action to a specific range in a list based on the indices provided in a separate list. UB means \\"Up to But Not Including\\".","solution":"def reverse_subrange(lst, start, end): Reverses the elements of lst in the range (start to end-1). Parameters: lst (List): The list of elements. start (int): The start index of the subrange to reverse. end (int): The end index of the subrange to reverse (UB, Up to But Not Including). Returns: List: The list after the inversion of the specified subrange. if start < end and start >= 0 and end <= len(lst): lst[start:end] = lst[start:end][::-1] return lst"},{"question":"Write a python function to find the substring between two strings. For example, given strings \\"start\\" and \\"end\\", find the substring between them in the string \\"startexampleend\\". If \\"start\\" or \\"end\\" is not found in the orignal string, return an empty string. Make sure your function handles cases when the start string is followed by the end string immediately (e.g., \\"startend\\").","solution":"def find_substring_between(original, start, end): Returns the substring found between the start and end strings in the given original string. If the start or end strings are not found, returns an empty string. try: start_index = original.index(start) + len(start) end_index = original.index(end, start_index) return original[start_index:end_index] except ValueError: return \\"\\""},{"question":"Write a python function to detect and return the longest word in a string that contains only uppercase letters. If there are multiple words of the same maximum length, return the first one found. If no uppercase words are found, return \`None\`.","solution":"def longest_uppercase_word(s): Returns the longest uppercase word in the string. If there are multiple words with the same length, returns the first one found. If no uppercase words are found, returns None. words = s.split() longest_word = None max_length = 0 for word in words: if word.isupper() and len(word) > max_length: longest_word = word max_length = len(word) return longest_word"},{"question":"Write a python function to check if a string consists only of vowels. The string could contain both uppercase and lowercase letters.","solution":"def is_all_vowels(s): Checks if the input string consists only of vowels (both uppercase and lowercase). Parameters: s (str): The string to check Returns: bool: True if the string consists only of vowels, False otherwise vowels = set('aeiouAEIOU') return all(char in vowels for char in s)"},{"question":"Write a python function to print the first n Fibonacci numbers. The function should be implemented using a generator function for efficiency. A generator function is a special type of function that returns an iterable sequence of results on-the-fly, without building up the entire sequence in memory at once. This is particularly useful for large sequences where storing all elements would be inefficient or impossible.","solution":"def fibonacci(n): Generates the first n Fibonacci numbers using a generator. a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b # Example usage of the function # for num in fibonacci(10): # print(num)"},{"question":"Write a python function to determine if a given tree is height-balanced. An AVL tree is a self-balancing binary search tree where the difference between the heights of the left and right subtree of every node is at most one.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Returns True if the given tree is height-balanced (AVL tree), False otherwise. def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_height = 1 + max(left_height, right_height) current_balance = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balance _, balance = height_and_balance(root) return balance"},{"question":"Write a python function to invert a given list of integers. The function should take a list of integers as input and return a new list containing the elements in reverse order.","solution":"def invert_list(lst): Returns a new list that is the reverse of the input list. return lst[::-1]"},{"question":"Write a python function to find and return the sum of all even and odd numbers in a list. The function should return a tuple containing the sum of even numbers and the sum of odd numbers, respectively.","solution":"def sum_even_odd(numbers): Returns a tuple of the sum of even numbers and the sum of odd numbers from the provided list. Parameters: numbers (list of int): List of integers to be summed. Returns: tuple: (sum of even numbers, sum of odd numbers) even_sum = sum(num for num in numbers if num % 2 == 0) odd_sum = sum(num for num in numbers if num % 2 != 0) return even_sum, odd_sum"},{"question":"Write a python function to find the good pairs of an array. A good pair is defined as (arr[i], arr[j]) where i < j and arr[i] == arr[j].","solution":"def find_good_pairs(arr): Returns the number of good pairs in the array. A good pair is defined as (arr[i], arr[j]) where i < j and arr[i] == arr[j]. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] == arr[j]: count += 1 return count"},{"question":"Write a python function to find the number of even and odd digits in a given number.","solution":"def count_even_odd_digits(number): Returns the number of even and odd digits in the given number. Parameters: number (int): The given number to count digits from Returns: tuple: A tuple where the first element is the count of even digits and the second element is the count of odd digits number_str = str(abs(number)) # Convert to string to handle digits easily, use abs to ignore negative sign even_count = 0 odd_count = 0 for digit in number_str: if int(digit) % 2 == 0: even_count += 1 else: odd_count += 1 return even_count, odd_count"},{"question":"Write a python function to find the maximum of three numbers a, b, and c.","solution":"def max_of_three(a, b, c): Returns the maximum of three numbers a, b, and c. return max(a, b, c)"},{"question":"Write a python function to find the minimum number of swaps required to sort an array based on the elements' values.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} answer = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 if cycle_size > 0: answer += (cycle_size - 1) return answer"},{"question":"Write a python function to print \\"hello world!\\" and return the string \\"success\\".","solution":"def hello_world(): Prints \\"hello world!\\" and returns the string \\"success\\". print(\\"hello world!\\") return \\"success\\""},{"question":"Write a python function to generate Pascal's Triangle up to a given number of rows. The function should return a list of lists where each inner list represents a row of Pascal's Triangle.","solution":"def generate_pascals_triangle(num_rows): Generate Pascal's Triangle up to a given number of rows. :param num_rows: Number of rows in the Pascal's Triangle :return: A list of lists where each inner list represents a row of Pascal's Triangle if num_rows <= 0: return [] triangle = [[1]] for i in range(1, num_rows): previous_row = triangle[-1] current_row = [1] for j in range(1, i): current_row.append(previous_row[j - 1] + previous_row[j]) current_row.append(1) triangle.append(current_row) return triangle"},{"question":"Write a python function to find the closest pairs from a given list of tuples, where the distance is calculated based on Euclidean distance formula. The list of tuples represents points in a two-dimensional space.","solution":"import math def euclidean_distance(point1, point2): Calculate the Euclidean distance between two points. Each point is represented by a tuple (x, y). return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def closest_pairs(points): Find the closest pair of points in a given list of tuples using the Euclidean distance formula. min_distance = float('inf') pair = None n = len(points) for i in range(n): for j in range(i + 1, n): distance = euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance pair = (points[i], points[j]) return pair"},{"question":"Write a python function to convert an integer to a binary string. The function should handle both positive and negative integers, and correctly represent the two's complement binary representation of negative numbers.","solution":"def int_to_binary_string(n, bits=32): Converts an integer to a binary string in two's complement representation. :param n: The integer to be converted. :param bits: The bit width for the representation. :return: The binary string representation of the integer. if n >= 0: return format(n, '0{}b'.format(bits)) else: return format((1 << bits) + n, '0{}b'.format(bits))"},{"question":"Write a python function to find all the prime numbers between 1 to 100.","solution":"def find_primes_1_to_100(): Returns a list of all prime numbers between 1 and 100. primes = [] for num in range(2, 101): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to calculate the number of islands in a 2D grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water.","solution":"def num_islands(grid): Returns the number of islands in a 2D grid where '1' represents land and '0' represents water. if not grid: return 0 rows, cols = len(grid), len(grid[0]) num_islands = 0 def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == '0': return grid[r][c] = '0' # mark the cell as visited dfs(r-1, c) dfs(r+1, c) dfs(r, c-1) dfs(r, c+1) for r in range(rows): for c in range(cols): if grid[r][c] == '1': num_islands += 1 dfs(r, c) return num_islands"},{"question":"Write a python function to find the length of the longest subsequence in a string where the subsequence is a palindrome. A subsequence does not need to be contiguous.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. A subsequence does not need to be contiguous. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Write a python function to find the average of a list of numbers. What should be the function signature and how should it handle an empty list?","solution":"def average(numbers): Returns the average of a list of numbers. Parameters: numbers (list of float): The list of numbers to calculate the average of. Returns: float: The average of the numbers in the list. Returns None if the list is empty. if not numbers: # Check if the list is empty return None return sum(numbers) / len(numbers)"},{"question":"Write a python function to return the middle element of a list. If the list has an even number of elements, return the lower middle element. For example, for the list [1, 2, 3, 4, 5], the function should return 3. For the list [1, 2, 3, 4, 5, 6], the function should return 3.","solution":"def middle_element(lst): Return the middle element of a list. If the list has an even number of elements, return the lower middle element. Parameters: lst (list): The list from which to find the middle element. Returns: int/float: The middle element of the list. n = len(lst) # Calculate the lower middle index middle_index = (n - 1) // 2 return lst[middle_index]"},{"question":"Write a python function to find the intersection between two sets and print the result.","solution":"def intersection(set1, set2): Returns the intersection of two sets. return set1.intersection(set2)"},{"question":"Write a python function to sort an array using the Bubble Sort algorithm and measure the time taken to sort it. You should use the \`time\` module to measure the time.","solution":"import time def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm and measures the time taken to sort it. Returns the sorted array and the time taken. n = len(arr) start_time = time.time() for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] end_time = time.time() time_taken = end_time - start_time return arr, time_taken"},{"question":"Write a python function to find the largest and second largest element in an array. If the array has less than two elements, return \`None\` for that value.","solution":"def largest_and_second_largest(arr): Returns the largest and second largest elements in the array. If the array has less than two elements, return \`None\` for those values. if len(arr) < 2: return (None, None) first, second = float('-inf'), float('-inf') for num in arr: if num > first: second = first first = num elif num > second and num != first: second = num if second == float('-inf'): second = None return (first, second)"},{"question":"Write a python function to find the total number of vowels in the string given as input. The vowels are defined as 'a', 'e', 'i', 'o', 'u', and they can be both in upper and lower case. How can this be achieved in python?","solution":"def count_vowels(input_string): Returns the total number of vowels in the input string. Vowels are considered to be 'a', 'e', 'i', 'o', 'u' in both upper and lower case. vowels = \\"aeiouAEIOU\\" return sum(1 for char in input_string if char in vowels)"},{"question":"Write a python function to remove repeated characters in a string and maintain their original order.","solution":"def remove_repeated_characters(s): Removes repeated characters from the string s and maintains their original order in the output. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to generate all possible subsets of a given set of numbers. This function should also handle the case when the set is empty and return an empty list within a list. For example, if the input is [1,2,3], the output should be [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], []].","solution":"from itertools import chain, combinations def generate_subsets(nums): Generate all possible subsets of a given set of numbers. Parameters: nums (list): List of numbers Returns: List of lists: All subsets of the input list of numbers return list(chain.from_iterable(combinations(nums, r) for r in range(len(nums) + 1)))"},{"question":"Write a python function to find the longest palindromic substring in a given string. Additionally, explain the approach you used to derive the solution.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string \`s\`. n = len(s) if n == 0: return \\"\\" dp = [[False]*n for _ in range(n)] start = 0 max_length = 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for sub-string of length 2. for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths longer than 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Write a python function to search for a specific element in a given array using the binary search algorithm. If the element is found return the index of the element, otherwise return -1. Binary search can only be used on sorted arrays.","solution":"def binary_search(arr, target): Perform binary search to find the index of target in arr. Parameters: arr (list): A sorted list of elements to search. target: The element to search for in the list. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to delete all occurrences of an element in a list.","solution":"def delete_all_occurrences(lst, element): Returns a new list with all occurrences of the specified element removed. Parameters: lst (list): The list from which to remove elements. element (any): The element to remove from the list. Returns: list: A new list with the element removed. return [x for x in lst if x != element]"},{"question":"Write a python function to find the next greater element to the right for each element in an array of integers. Replace elements that do not have a greater element to the right with -1.","solution":"def next_greater_elements(arr): Finds the next greater element to the right for each element in the array. Elements that do not have a greater element to the right are replaced with -1. Parameters: arr (list): A list of integers. Returns: list: A list of integers where each element is replaced by the next greater element to the right. if not arr: return [] result = [-1] * len(arr) stack = [] for i in range(len(arr) - 1, -1, -1): while stack and stack[-1] <= arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"Write a python function to take a list of dictionaries as input and return a dictionary where the keys are the values of the key 'id' in the original dictionaries and the values are the remaining dictionaries. The example input and output are given below.","solution":"def transform_list_of_dicts(input_list): Transforms a list of dictionaries into a dictionary where the keys are the values of the 'id' keys of the input dictionaries and the values are the remaining dictionaries with 'id' key removed. output_dict = {} for item in input_list: if 'id' in item: key = item['id'] new_value = {k: v for k, v in item.items() if k != 'id'} output_dict[key] = new_value return output_dict"},{"question":"Write a python function to print the Fibonacci sequence up to a given number \`n\`. The function should return a list containing the Fibonacci sequence up to the \`n\`th number. For example, if \`n\` is 5, the function should return \`[0, 1, 1, 2, 3, 5]\`.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the n-th number. if n == 0: return [0] elif n == 1: return [0, 1] fib_sequence = [0, 1] while len(fib_sequence) <= n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to calculate the number of digits in an integer \`n\`. The function should take an integer \`n\` as input and return the number of digits.","solution":"def count_digits(n): Returns the number of digits in an integer n. # Handle negative numbers by converting them to positive if n < 0: n = -n # If n is 0, it has 1 digit if n == 0: return 1 count = 0 while n > 0: n //= 10 count += 1 return count"},{"question":"Write a python function to calculate the number of days between two given dates. You can use Python's built-in datetime module to handle date operations.","solution":"from datetime import datetime def days_between_dates(date1, date2): Calculate the number of days between two dates. Parameters: date1 (str): The first date in the format 'YYYY-MM-DD'. date2 (str): The second date in the format 'YYYY-MM-DD'. Returns: int: The number of days between the two dates. d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') delta = d2 - d1 return abs(delta.days)"},{"question":"Write a python function to check if a given number is a prime number or not. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to generate a bar chart of the first 10 factorials from 0! to 9! using matplotlib. Additionally, the chart should display the factorial values on the y-axis and the corresponding index (0 through 9) on the x-axis.","solution":"import matplotlib.pyplot as plt import math def plot_factorials(): Generates a bar chart of the first 10 factorials from 0! to 9! using matplotlib. Displays the factorial values on the y-axis and the corresponding index (0 through 9) on the x-axis. # Generate the first 10 factorials factorials = [math.factorial(i) for i in range(10)] # Create the indices for the x-axis indices = list(range(10)) # Plot the bar chart plt.bar(indices, factorials) # Set chart title and labels plt.title('Factorials from 0! to 9!') plt.xlabel('Index') plt.ylabel('Factorial Value') # Show the plot plt.show()"},{"question":"Write a python function to generate a Fibonacci sequence up to the n-th term. The function should use recursion.","solution":"def fibonacci(n): Returns the n-th term of the Fibonacci sequence using recursion. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to sort an array using the quicksort algorithm. Пример: Для входного массива [10, 7, 8, 9, 1, 5] результат будет [1, 5, 7, 8, 9, 10].","solution":"def quicksort(arr): Implements the quicksort algorithm to sort an array. Parameters: arr (list): a list of elements to be sorted. Returns: list: sorted list of elements. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to find the longest common subsequence (LCS) between two strings using dynamic programming.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between two strings str1 and str2 using dynamic programming. m = len(str1) n = len(str2) # Create a 2D array to store the length of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from the bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the LCS is in the bottom-right cell return dp[m][n]"},{"question":"Write a python function to check if the parentheses in the given string are balanced or not. If they are balanced, the function should return True, otherwise False. The string will only contain '(' and ')'.","solution":"def are_parentheses_balanced(s): Returns True if the parentheses in the given string are balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to calculate the modular exponentiation of a number in a given modulo.","solution":"def modular_exponentiation(base, exponent, modulo): Calculate the modular exponentiation of a number. Given base^exponent % modulo, it returns the result. Parameters: - base (int): The base number. - exponent (int): The exponent. - modulo (int): The modulo. Returns: int: The result of (base^exponent) % modulo. if modulo == 1: return 0 result = 1 base = base % modulo while exponent > 0: if exponent % 2 == 1: # If exponent is odd, multiply base with the result result = (result * base) % modulo exponent = exponent >> 1 # Exponent = exponent // 2 base = (base * base) % modulo # Change base to base^2 % modulo return result"},{"question":"Write a python function to find the index of the first item in a list that is larger than its preceding item. Return the index of the found item, or -1 if no such item exists in the list.","solution":"def find_first_larger_index(lst): Returns the index of the first item in the list that is larger than its preceding item. If no such item exists, returns -1. for i in range(1, len(lst)): if lst[i] > lst[i - 1]: return i return -1"},{"question":"Write a python function to reverse a stack without using any extra space. The stack is represented as a list, and the function should modify the original stack in place.","solution":"def reverse_stack(stack): Reverses the given stack in place without using any extra space. Args: stack (list): The stack to be reversed. if len(stack) == 0: return # Helper function to insert an element at the bottom of the stack def insert_at_bottom(stack, item): if len(stack) == 0: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp)"},{"question":"Write a python function to sort an array in ascending order using the selection sort algorithm.","solution":"def selection_sort(arr): Sorts an array in ascending order using the selection sort algorithm. :param arr: List of elements to be sorted :return: The sorted list n = len(arr) for i in range(n): # Find the index of the minimum element in the remaining unsorted section min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element of the unsorted section arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to perform matrix multiplication. I need guidance on how to structure and logic for the function.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A (list of list of int): Matrix A of size m x n. B (list of list of int): Matrix B of size n x p. Returns: list of list of int: Resultant matrix of size m x p after multiplying A with B. Raises: ValueError: If the number of columns in A is not equal to the number of rows in B. # Number of rows in A m = len(A) # Number of columns in A n = len(A[0]) # Number of rows in B if len(B) != n: raise ValueError(\\"Number of columns in A must be equal to number of rows in B\\") # Number of columns in B p = len(B[0]) # Resultant matrix of size m x p with all elements initialized to 0 result = [[0 for _ in range(p)] for _ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to find the maximum subarray sum that starts from index 0. In this problem, a subarray is defined as a contiguous part of the array.","solution":"def max_subarray_sum_from_start(arr): Finds the maximum subarray sum that starts from index 0. Parameters: arr (list): List of integers. Returns: int: Maximum subarray sum starting from index 0. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum += num if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a python function to rotate an n x n 2D array by 90 degrees clockwise. The function should take a single parameter: the array to be rotated. The function should return the new array after rotation.","solution":"def rotate_2d_array(matrix): Rotates an n x n 2D array by 90 degrees clockwise. :param matrix: List[List[int]] - a 2D list representing the n x n matrix :return: List[List[int]] - the rotated matrix n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - 1 - i] = matrix[i][j] return result"},{"question":"Write a python function to find the maximum temperature in the given list of temperatures.","solution":"def max_temperature(temperatures): Returns the maximum temperature in the list of temperatures. Parameters: temperatures (list of int/float): List containing temperature values. Returns: int/float: The maximum temperature in the list. if not temperatures: return None return max(temperatures)"},{"question":"Write a python function to find and return the duplicate character in a given string. The function should take a string as input and return the first duplicate character found in the string. If no duplicate character is found, the function should return None.","solution":"def find_first_duplicate(s): Returns the first duplicate character in the given string. If no duplicate character is found, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to search for a target value in an array sorted in non-decreasing order. If the target is found, return its index; otherwise, return -1. The function should handle the case where the array contains duplicates.","solution":"def binary_search(arr, target): Perform binary search to find the target in a sorted array. Returns the index of the target if found; otherwise, returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to extract specific elements from a list based on certain conditions. The function should take a list of numbers and an integer k as input. It should return a new list containing elements from the original list that are greater than the k-th smallest element in the original list.","solution":"def extract_elements_greater_than_kth_smallest(nums, k): Returns a new list containing elements from the original list that are greater than the k-th smallest element in the original list. :param nums: List of numbers. :param k: Position (1-based) indicating the k-th smallest element. :return: List of numbers greater than the k-th smallest element. if not nums or k < 1 or k > len(nums): return [] # Find the k-th smallest element sorted_nums = sorted(nums) kth_smallest = sorted_nums[k-1] # Filter and return elements greater than k-th smallest element return [num for num in nums if num > kth_smallest]"},{"question":"Write a python function to return the nth Fibonacci number. The Fibonacci sequence is defined as \`F(n) = F(n-1) + F(n-2)\` with seed values \`F(0) = 0\` and \`F(1) = 1\`. Solve this problem using recursion. If the nth term is not within the first 20 terms, return \`-1\`.","solution":"def fibonacci(n): Returns the nth Fibonacci number if n is within the first 20 terms. If n is not within the first 20 terms, returns -1. if n >= 20: return -1 if n == 0: return 0 if n == 1: return 1 return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to retrieve an element from a list using a specified index. If the index is out of bounds, return \\"Index out of bounds\\". If the index is valid, return the element at that index.","solution":"def retrieve_element(lst, index): Retrieves an element from a list using a specified index. If the index is out of bounds, returns \\"Index out of bounds\\". If the index is valid, returns the element at that index. :param lst: list of elements :param index: specified index :return: element at the specified index or \\"Index out of bounds\\" if index < 0 or index >= len(lst): return \\"Index out of bounds\\" return lst[index]"},{"question":"Write a python function to convert a given number to its binary representation. The binary representation should start with \\"0b\\". If the number is negative, the binary representation should start with \\"-0b\\".","solution":"def to_binary(n): Converts a given integer to its binary representation. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n >= 0: return f\\"0b{bin(n)[2:]}\\" else: return f\\"-0b{bin(n)[3:]}\\""},{"question":"Write a python function to get the maximum number of positive integers from a list of integers that sum up to a given integer. If it is not possible to get the maximum number of positive integers, return 0. The integers in the list can be duplicated, and the order doesn't matter.","solution":"def max_positive_integers_sum(nums, target): Finds the maximum number of positive integers from the list that sum up to the target. If it's not possible, return 0. Parameters: nums (list): List of integers target (int): Target sum Returns: int: Maximum number of positive integers that sum up to the target or 0 if not possible nums = [num for num in nums if num > 0] nums.sort(reverse=True) current_sum = 0 count = 0 for num in nums: if current_sum + num <= target: current_sum += num count += 1 if current_sum == target: return count return 0"},{"question":"Write a python function to calculate the Manhattan distance between two points in a 2D plane.","solution":"def manhattan_distance(point1, point2): Returns the Manhattan distance between two points in a 2D plane. Parameters: point1 (tuple): The first point as a tuple of two integers (x1, y1). point2 (tuple): The second point as a tuple of two integers (x2, y2). Returns: int: The Manhattan distance between point1 and point2. return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])"},{"question":"Write a python function to find the minimum number (\`min_num\`) and maximum number (\`max_num\`) in a list of numbers, and return them as a tuple.","solution":"def find_min_max(numbers): Returns the minimum and maximum number in the list as a tuple (min_num, max_num). if not numbers: raise ValueError(\\"The list must not be empty.\\") min_num = float('inf') max_num = float('-inf') for number in numbers: if number < min_num: min_num = number if number > max_num: max_num = number return min_num, max_num"},{"question":"Write a python function to determine whether a given integer is sparse or not. An integer is sparse if there are no two adjacent 1's in its binary representation.","solution":"def is_sparse(n): Determines whether a given integer is sparse. An integer is sparse if there are no two adjacent 1's in its binary representation. Parameters: n (int): The integer to be checked. Returns: bool: True if the integer is sparse, False otherwise. return (n & (n >> 1)) == 0"},{"question":"Write a python function to remove duplicates from a list of tuples. The function should return a list of tuples without duplicates, preserving the original order of tuples.","solution":"def remove_duplicates(tuples_list): Removes duplicate tuples from a list, preserving the original order. Args: tuples_list (list of tuple): The list from which to remove duplicates. Returns: list of tuple: A list without duplicate tuples. seen = set() result = [] for item in tuples_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to check if a string contains only digits. You should write the function in two different ways - using isdigit() method and also using regex.","solution":"import re def is_only_digits_isdigit(s): Check if the string s contains only digits using isdigit() method. :param s: String to check :return: True if s contains only digits, False otherwise return s.isdigit() def is_only_digits_regex(s): Check if the string s contains only digits using regex. :param s: String to check :return: True if s contains only digits, False otherwise return bool(re.fullmatch(r'd+', s))"},{"question":"Write a python function to swap the first and last elements in a list. If the list is empty or contains only one element, return the list unchanged.","solution":"def swap_first_last(lst): Swaps the first and last elements of the list. If the list is empty or contains only one element, return the list unchanged. if len(lst) <= 1: return lst lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Write a python function to print the number of distinct characters in a given string..For example, the string \\"hello world\\" has 7 distinct characters: \\"h\\", \\"e\\", \\"l\\", \\"o\\", \\" \\", \\"w\\", \\"r\\", \\"d\\".","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the given string s. return len(set(s))"},{"question":"Write a python function to convert a decimal number to a fraction in its simplest form.","solution":"from fractions import Fraction def decimal_to_fraction(decimal): Converts a decimal number to a fraction in its simplest form. Parameters: decimal (float): The decimal number to convert. Returns: str: The fraction in its simplest form as a string. fraction = Fraction(decimal).limit_denominator() return f\\"{fraction.numerator}/{fraction.denominator}\\""},{"question":"Write a python function to determine if two given arrays are the same or not. Here, the arrays are formed of integers, and the order of the integers matters.","solution":"def are_arrays_equal(arr1, arr2): Returns True if the two given arrays are the same, otherwise False. if len(arr1) != len(arr2): return False for i in range(len(arr1)): if arr1[i] != arr2[i]: return False return True"},{"question":"Write a python function to find the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. The function should use iteration rather than recursion to avoid performance issues with large numbers.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to calculate the factorial of a given number using recursion. The function is supposed to handle integer inputs only, and you need to validate the input type. If the input is not an integer, the function should raise a ValueError indicating that only integer inputs are allowed. If the input is negative, the function should raise a ValueError indicating that only non-negative numbers are allowed.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Parameters: n (int): The number to calculate the factorial for. Returns: int: The factorial of the input number. Raises: ValueError: If the input is not a non-negative integer. if not isinstance(n, int): raise ValueError(\\"Only integer inputs are allowed.\\") if n < 0: raise ValueError(\\"Only non-negative numbers are allowed.\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to solve a problem that computes the number of integer solutions to the equation ax + by = c, where a, b, and c are integers.","solution":"def integer_solutions_count(a, b, c): Determines the number of integer solutions to the equation ax + by = c. Args: a (int): coefficient of x b (int): coefficient of y c (int): constant term Returns: int: number of integer solutions to the equation ax + by = c from math import gcd # Equation has integer solutions if and only if gcd(a, b) divides c if gcd(a, b) == 0: return 0 if c != 0 else float('inf') # Special case when a and b are both zero if c % gcd(a, b) == 0: return float('inf') # Infinitely many solutions return 0 # No integer solutions"},{"question":"Write a python function to merge two sorted lists into a single sorted list using the merge process of merge sort.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: The merged sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smaller element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, add them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, add them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to calculate the number of ways to climb a staircase with \`n\` steps. The climber can ascend either 1 or 2 steps at a time. Use dynamic programming to solve this problem efficiently.","solution":"def climb_stairs(n): Calculate number of ways to climb a staircase with n steps using dynamic programming. Parameters: n (int): The number of steps in the staircase. Returns: int: The number of ways to climb the staircase. if n <= 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a python function to enable or disable a type of firewall rule, given a rule name and a boolean value representing the desired state (True for enabled, False for disabled).","solution":"class Firewall: def __init__(self): self.rules = {} def set_rule_state(self, rule_name, state): Enable or disable a firewall rule based on the provided state. Parameters: rule_name (str): The name of the rule to be updated. state (bool): The desired state of the rule (True for enabled, False for disabled). self.rules[rule_name] = state def get_rule_state(self, rule_name): Get the state of a firewall rule. Parameters: rule_name (str): The name of the rule to be checked. Returns: bool: The state of the rule (True if enabled, False if disabled), None if rule does not exist. return self.rules.get(rule_name)"},{"question":"Write a python function to traverse a binary tree in a depth-first manner. Please traverse the tree in preorder, inorder and postorder.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def preorder_traversal(root): Traverses the binary tree in preorder (root, left, right) and returns the values as a list. if root is None: return [] return [root.value] + preorder_traversal(root.left) + preorder_traversal(root.right) def inorder_traversal(root): Traverses the binary tree in inorder (left, root, right) and returns the values as a list. if root is None: return [] return inorder_traversal(root.left) + [root.value] + inorder_traversal(root.right) def postorder_traversal(root): Traverses the binary tree in postorder (left, right, root) and returns the values as a list. if root is None: return [] return postorder_traversal(root.left) + postorder_traversal(root.right) + [root.value]"},{"question":"Write a python function to calculate the salary based on a commission rate and a number of sales. The commission rate should be a percentage, and the number of sales can be any positive number.","solution":"def calculate_salary(base_salary, commission_rate, number_of_sales): Calculate the total salary based on base salary, commission rate, and number of sales. Parameters: base_salary (float): The base salary amount. commission_rate (float): The commission rate as a percentage. number_of_sales (float): The number of sales made. Returns: float: The total salary. commission = (commission_rate / 100) * number_of_sales total_salary = base_salary + commission return total_salary"},{"question":"Write a python function to check if a given string is alphanumeric-only (contains either alphabets or numbers but not both). The function should return \`True\` if the string is alphanumeric-only, and \`False\` otherwise.","solution":"def is_alphanumeric_only(s): Returns True if the string contains only alphabets or only numbers, but not both. Otherwise, returns False. if s.isalpha() or s.isdigit(): return True return False"},{"question":"Write a python function to remove the duplicate elements from a list. You can use any data structure of your choice. Python supports multiple data structures such as list, tuple, set, dictionary, etc. You are not allowed to use any in-built functions such as list(set(list_name)) or any other built-in Python functions for this task. Additionally, the function should maintain the order of elements as they appear in the input list.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the list while maintaining the order of elements. :param input_list: List of elements which may contain duplicates. :return: A new list with duplicates removed. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to add all elements in a list and return the sum. The list will contain either integers or floats. Make sure your function handles both cases correctly and provides an appropriate error message if the list contains non-numeric elements.","solution":"def sum_list_elements(numbers): Returns the sum of all numeric elements in the list. Raises a ValueError if the list contains non-numeric elements. if not all(isinstance(x, (int, float)) for x in numbers): raise ValueError(\\"All elements in the list must be numeric.\\") return sum(numbers)"},{"question":"Write a python function to rotate an array to the right by k steps. The rotation is done in-place, hence modifying the original array.","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps in-place. n = len(nums) k = k % n # In case k is greater than n nums[:] = nums[-k:] + nums[:-k]"},{"question":"Write a python function to convert time from 24 hours format to 12 hours format. The function should take a string in the format 'HH:MM' as input and return a string in the format 'HH:MM AM/PM'.","solution":"def convert_time_24_to_12(time_str): Converts time from 24-hour format to 12-hour format. Parameters: time_str (str): Time in the format 'HH:MM' Returns: str: Time in the format 'HH:MM AM/PM' hours, minutes = map(int, time_str.split(':')) if hours == 0: return f\\"12:{minutes:02d} AM\\" elif hours < 12: return f\\"{hours}:{minutes:02d} AM\\" elif hours == 12: return f\\"12:{minutes:02d} PM\\" else: return f\\"{hours-12}:{minutes:02d} PM\\""},{"question":"Write a python function to output all factors of a given number.","solution":"def factors(n): Returns a list of all factors of n. result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to extract unique words from a text and store them in a dictionary where the key is the unique word and the value is the number of times the word occurs in the text.","solution":"def extract_unique_words(text): Extract unique words from a text and store them in a dictionary where the key is the unique word and the value is the number of times the word occurs in the text. Arguments: text -- the text to extract words from (string) Returns: A dictionary with unique words as keys and their occurrences as values. words = text.split() word_count = {} for word in words: word = word.lower() word = ''.join(filter(str.isalnum, word)) # Remove punctuation if word: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a python function to create a frequency dictionary of a list of strings using a dictionary comprehension.","solution":"def frequency_dict(strings): Returns a frequency dictionary for a list of strings. :param strings: List of strings :return: Dictionary with string frequencies return {string: strings.count(string) for string in strings}"},{"question":"Write a python function to parse a YAML file and generate a Python dictionary equivalent to the YAML's structure.","solution":"import yaml def parse_yaml(yaml_str): Parses a YAML string and returns a corresponding Python dictionary. Parameters: yaml_str (str): A string containing YAML. Returns: dict: A dictionary representing the YAML structure. return yaml.safe_load(yaml_str)"},{"question":"Write a python function to generate the first n Fibonacci numbers and return them as a list. The function should use recursion to generate Fibonacci numbers and handle the base cases of n = 0 and n = 1 correctly.","solution":"def fibonacci_recursive(n): Generates the first n Fibonacci numbers using recursion and returns them as a list. if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] def fib_recursive_helper(fib_list, count): if count == n: return fib_list next_fib = fib_list[-1] + fib_list[-2] fib_list.append(next_fib) return fib_recursive_helper(fib_list, count + 1) initial_list = [0, 1] return fib_recursive_helper(initial_list, 2)"},{"question":"Write a python function to find the minimum distance between two nodes in a binary tree. The binary tree is represented as a nested dictionary where the keys are integers representing the nodes and the values are tuples containing the left child and right child node keys, respectively. For example, the dictionary \`{0: (1, 2), 1: (3, None), 2: (None, 4)}\` represents a binary tree with node 0 as the root, node 1 as the left child of node 0, node 2 as the right child of node 0, node 3 as the left child of node 1, and node 4 as the right child of node 2.","solution":"def find_min_distance(tree, start, end): Finds the minimum distance between two nodes in a binary tree. :param tree: Dictionary representing the binary tree. :param start: The starting node. :param end: The ending node. :return: The minimum distance between the two nodes. def bfs_distance(tree, start, end): from collections import deque queue = deque([(start, 0)]) visited = set() while queue: node, depth = queue.popleft() if node == end: return depth if node not in visited: visited.add(node) left, right = tree.get(node, (None, None)) if left is not None: queue.append((left, depth + 1)) if right is not None: queue.append((right, depth + 1)) return float('inf') return bfs_distance(tree, start, end)"},{"question":"Write a python function to find the first n prime numbers.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def first_n_primes(n): Returns a list of the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to compare two strings and return the count of positions at which the corresponding characters are different.","solution":"def count_diff_positions(str1, str2): Compares two strings and returns the count of positions at which the corresponding characters are different. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: int: The count of differing positions. if len(str1) != len(str2): raise ValueError(\\"Strings must be of the same length\\") return sum(1 for a, b in zip(str1, str2) if a != b)"},{"question":"Write a python function to calculate and print the square root of a number.","solution":"import math def calculate_square_root(n): Calculates and returns the square root of n. If n is negative, returns None since a square root is not defined for negative numbers in the real number system. if n < 0: return None return math.sqrt(n)"},{"question":"Write a python function to read a file named 'data.txt' and return the content as a string.","solution":"def read_file(file_path): Reads a file and returns its content as a string. Parameters: file_path (str): The path to the file to be read. Returns: str: The content of the file as a string. with open(file_path, 'r') as file: return file.read()"},{"question":"Write a python function to find the maximum sum of a subarray within a given array. This problem is known as the Kadane's Algorithm problem. Please provide a step-by-step explanation and the code.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray within the given array using Kadane's Algorithm. Parameters: nums (list of int): The input array of integers. Returns: int: The maximum sum of a subarray. if not nums: return 0 max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to solve the following problem: Given two integers num1 and num2, return the number of steps required to make both integers zero. In one step, you can choose any integer from num1 or num2 and subtract 1 from it. If both numbers become zero at the same time, the count should still be one step.","solution":"def steps_to_zero(num1, num2): Returns the number of steps required to make both integers zero. Each step consists of subtracting 1 from either num1 or num2. return max(num1, num2)"},{"question":"Write a python function to return the nth Fibonacci number using recursion. The nth Fibonacci number is defined as the sum of the two preceding ones, usually starting with 0 and 1. For example, the sequence starts like this: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers \`nums\` using Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray using Kadane's Algorithm. :param nums: List[int] - A list of integers :return: int - The maximum sum of the contiguous subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find pairs with given sum in array without using extra space.","solution":"def find_pairs_with_sum(arr, target_sum): Finds all pairs in the array that sum up to the target_sum without using extra space. Parameters: arr (list): List of integers. target_sum (int): Target sum to find pairs for. Returns: list: List of tuples where each tuple contains a pair of numbers that sum up to the target_sum. pairs = [] arr.sort() left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target_sum: pairs.append((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target_sum: left += 1 else: right -= 1 return pairs"},{"question":"Write a python function to calculate the sum of all elements in a given list of integers. If the list is empty, the function should return 0.","solution":"def sum_of_list(lst): Returns the sum of all elements in the given list of integers. If the list is empty, returns 0. Parameters: lst (list): A list of integers. Returns: int: The sum of the elements in the list. return sum(lst)"},{"question":"Write a python function to reverse the order of elements in a queue without destroying it.","solution":"from queue import Queue def reverse_queue(queue): Reverses the order of elements in a given queue without destroying it. stack = [] # Dequeue all elements from the queue and push them onto the stack while not queue.empty(): element = queue.get() stack.append(element) # Enqueue elements back to the queue, which are now reversed while stack: element = stack.pop() queue.put(element) return queue"},{"question":"Write a python function to generate all possible subarrays of a given array. A subarray is a contiguous part of an array.","solution":"def generate_subarrays(arr): Generates all possible subarrays of a given array. Args: arr (list): The input array. Returns: list: A list of subarrays. n = len(arr) subarrays = [] for start in range(n): for end in range(start + 1, n + 1): subarrays.append(arr[start:end]) return subarrays"},{"question":"Write a python function to return the longest string of consecutive letters in a string. For instance, given the string \\"abcpqrstu\\", the function should return \\"pqrstu\\". If multiple such sequences exist, return the first one found. If there are no consecutive letters, return an empty string.","solution":"def longest_consecutive_letters(input_string): Returns the longest substring of consecutive letters in input_string. Parameters: input_string (str): The input string to search for consecutive letters in. Returns: str: The longest substring of consecutive letters. if not input_string: return \\"\\" max_len = 1 current_len = 1 longest_substring = input_string[0] current_substring = input_string[0] for i in range(1, len(input_string)): if ord(input_string[i]) - ord(input_string[i - 1]) == 1: current_len += 1 current_substring += input_string[i] if current_len > max_len: max_len = current_len longest_substring = current_substring else: current_len = 1 current_substring = input_string[i] return longest_substring"},{"question":"Write a python function to count how many numbers in a given list are odd. If the list can be divided into exactly two equal parts, return the count of odd numbers in the first half of the list. Otherwise, return the count of odd numbers in the entire list.","solution":"def count_odd_numbers(nums): Returns the count of odd numbers in a given list. If the list can be divided into exactly two equal parts, returns the count of odd numbers in the first half of the list. Otherwise, returns the count of odd numbers in the entire list. def is_odd(num): return num % 2 != 0 n = len(nums) if n % 2 == 0: # List can be divided into two equal parts first_half = nums[:n//2] return sum(1 for x in first_half if is_odd(x)) else: # List cannot be divided into two equal parts return sum(1 for x in nums if is_odd(x))"},{"question":"Write a python function to find all the roots of a polynomial equation using the Newton's method.","solution":"import sympy as sp def find_roots(f_expr, x0, tolerance=1e-7, max_iters=1000): Finds a root of the polynomial f using Newton's method starting from x0. Parameters: f_expr (sympy.Expr): The polynomial expression. x0 (float): Initial guess for the root. tolerance (float): The tolerance for convergence. max_iters (int): Maximum number of iterations. Returns: float: The root of the polynomial. x = sp.symbols('x') f = sp.lambdify(x, f_expr, 'numpy') f_prime = sp.lambdify(x, sp.diff(f_expr, x), 'numpy') for _ in range(max_iters): y = f(x0) y_prime = f_prime(x0) if abs(y_prime) < tolerance: # Avoid division by zero. raise ValueError(\\"Derivative too small; try another starting point.\\") x1 = x0 - y / y_prime if abs(x1 - x0) < tolerance: return x1 x0 = x1 raise ValueError(\\"Exceeded maximum iterations without convergence.\\") def find_all_roots(f_expr, inits, tolerance=1e-7, max_iters=1000): Finds all roots of the polynomial f using Newton's method for multiple initial guesses. Parameters: f_expr (sympy.Expr): The polynomial expression. inits (list): List of initial guesses for the roots. tolerance (float): The tolerance for convergence. max_iters (int): Maximum number of iterations. Returns: list: A list of unique roots of the polynomial. roots = set() for x0 in inits: try: root = find_roots(f_expr, x0, tolerance, max_iters) # Unique roots within tolerance if not any(abs(root - r) < tolerance for r in roots): roots.add(root) except ValueError: continue return list(roots)"},{"question":"Write a python function to count the number of unique elements in an array using a set.","solution":"def count_unique_elements(arr): Returns the count of unique elements in the array using a set. unique_elements = set(arr) return len(unique_elements)"},{"question":"Write a python function to remove duplicates from a list of numbers while preserving the order of the remaining elements. You are not allowed to use any additional data structures like sets or dictionaries.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the order. Parameters: lst (list): A list of numbers. Returns: list: A list with duplicates removed, preserving the original order. seen = [] result = [] for item in lst: if item not in seen: seen.append(item) result.append(item) return result"},{"question":"Write a python function to find the python version of the current script.","solution":"import sys def get_python_version(): Returns the Python version used to run the script. return sys.version"},{"question":"Write a python function to implement the Binary Search algorithm on a sorted array.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target element. If the target is not found, return -1. :param arr: A list of sorted elements :param target: The element to be searched for :return: The index of the target in the array if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to create a 3x3 matrix with all elements initialized to 0.","solution":"def create_zero_matrix(): Creates a 3x3 matrix with all elements initialized to 0. Returns: list of list: A 3x3 matrix with all elements set to 0. return [[0 for _ in range(3)] for _ in range(3)]"},{"question":"Write a python function to classify the iris dataset based on the features - sepal length and sepal width. Implement the RandomForestClassifier from sklearn. Ensure your function returns the accuracy of the classifier.","solution":"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score def classify_iris_dataset(): # Load the iris dataset iris = load_iris() X = iris.data[:, :2] # Using only sepal length and sepal width y = iris.target # Split the dataset into training (70%) and testing (30%) sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Create the RandomForestClassifier clf = RandomForestClassifier(n_estimators=100, random_state=42) # Train the classifier clf.fit(X_train, y_train) # Predict the labels for the testing set y_pred = clf.predict(X_test) # Calculate the accuracy accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Write a python function to calculate the sum of squares of all even numbers in a given list. The function should take a list of integers as input and return the sum of squares of only those which are even.","solution":"def sum_of_squares_of_even_numbers(lst): Returns the sum of squares of all even numbers in the given list. Parameters: lst (list): A list of integers Returns: int: The sum of squares of all even numbers return sum(x**2 for x in lst if x % 2 == 0)"},{"question":"Write a python function to filter all the numbers from a list that are greater than or equal to 10 and are even.","solution":"def filter_even_greater_than_ten(numbers): Filters numbers from the list that are greater than or equal to 10 and are even. Parameters: numbers (list): A list of integers. Returns: list: A list of integers that are even and greater than or equal to 10. return [num for num in numbers if num >= 10 and num % 2 == 0]"},{"question":"Write a python function to find the single number in a list of integers where every other number appears exactly twice.","solution":"def single_number(nums): Finds the single number in a list where every other number appears exactly twice. Args: nums (list): A list of integers where every integer except one appears exactly twice. Returns: int: The single number that appears only once. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Write a python function to filter out vowels from a string. The function should return a new string containing only consonants from the original string.","solution":"def filter_vowels(input_string): Filters out vowels from the input string. Parameters: input_string (str): The string to filter. Returns: str: A new string without vowels. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Write a python function to return a list of all the two-dimensional lists that are a combination of two one-dimensional lists.","solution":"def combine_lists(list1, list2): Combines two one-dimensional lists into a list of all possible two-dimensional lists with the first list as the first row and the second list as the second row. list1: First list of elements list2: Second list of elements return: List containing all possible two-dimensional lists. return [[list1, list2]]"},{"question":"Write a python function to find all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Make sure your function takes an integer \`n\` as an argument and returns a list of all prime numbers up to \`n\`.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(2, n + 1) if is_prime[i]]"},{"question":"Write a python function to check whether a binary tree is symmetric.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Check whether a binary tree is symmetric. :param root: TreeNode :return: bool if root is None: return True return is_mirror(root.left, root.right) def is_mirror(left, right): Helper function to check if two trees are mirror images. :param left: TreeNode :param right: TreeNode :return: bool if left is None and right is None: return True if left is None or right is None: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left))"},{"question":"Write a python function to check if a given string contains all the English alphabets (a-z) at least once.","solution":"def is_pangram(s): Returns True if the string \`s\` contains all the English alphabets (a-z). Otherwise, returns False. s = s.lower() alphabet = set('abcdefghijklmnopqrstuvwxyz') return set(s).issuperset(alphabet)"},{"question":"Write a python function to find the first missing positive number in an unsorted integer array. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def first_missing_positive(nums): Returns the first missing positive number from an unsorted integer array. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to generate the nth Fibonacci number. The function should calculate this using an iterative approach.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to reverse each word in a sentence without changing the order of words. For example, if the input is \\"Hello world\\", the output should be \\"olleH dlrow\\".","solution":"def reverse_each_word(sentence): Reverses each word in a sentence without changing the order of words. Args: sentence (str): The input sentence with words to be reversed. Returns: str: The sentence with each word reversed, maintaining the original word order. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a python function to check if a given linked list is a palindrome. You may not modify the linked list and must use O(n) time complexity and O(1) space complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Checks if a given linked list is a palindrome. Args: head (ListNode): The head node of the linked list Returns: bool: True if the linked list is a palindrome, False otherwise if not head or not head.next: return True # Find the middle of the linked list using fast and slow pointers slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the list prev, curr = None, slow while curr: next_node = curr.next curr.next = prev prev = curr curr = next_node # Check palindrome first_half, second_half = head, prev while second_half: if first_half.val != second_half.val: return False first_half = first_half.next second_half = second_half.next return True"},{"question":"Write a python function to determine if a given list contains any duplicates. Also, return a dictionary where the keys are the elements that have duplicates and their values are lists of their indices.","solution":"def find_duplicates(arr): Determines if a given list contains any duplicates and returns a dictionary where the keys are elements that have duplicates and their values are lists of their indices. Parameters: arr (list): The list to be checked for duplicates. Returns: bool, dict: A boolean indicating if there are duplicates and a dictionary of duplicates with their indices. from collections import defaultdict duplicates = defaultdict(list) has_duplicates = False for index, value in enumerate(arr): duplicates[value].append(index) result = {key: val for key, val in duplicates.items() if len(val) > 1} if result: has_duplicates = True return has_duplicates, result"},{"question":"Write a python function to find the maximum subarray sum. The maximum subarray sum is the sum of a contiguous subarray within a one-dimensional array of numbers that has the largest sum. To solve this, you can use Kadane's algorithm, which is efficient and has a linear time complexity.","solution":"def max_subarray_sum(nums): Returns the sum of the maximum subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the minimum garden-plot configuration that minimizes the maximum height of the current garden as compared to its leftmost garden. The function should handle edge cases and return the correct solution.","solution":"def minimize_max_height(garden_heights): This function receives a list of garden heights (garden_heights) and returns the minimum garden-plot configuration that minimizes the maximum height of the current garden as compared to its leftmost garden. if not garden_heights: return [] min_max_height = [] n = len(garden_heights) # Iterate over all possible configurations for i in range(n): max_height = max(garden_heights[:i+1]) min_max_height.append(max_height) return min_max_height"},{"question":"Write a python function to perform linear search on a list. The function should take a list of integers and a target value as inputs, and return the index of the target in the list if it exists, or -1 if it does not.","solution":"def linear_search(arr, target): Performs linear search on the given list for the target value. Parameters: arr (list): The list of integers to search. target (int): The target integer value to search for. Returns: int: The index of the target in the list if found, otherwise -1. for i in range(len(arr)): if arr[i] == target: return i return -1"},{"question":"Write a python function to solve Floyd's Triangle problem.","solution":"def floyds_triangle(n): Returns Floyd's Triangle with n rows. Arguments: n : int : Number of rows for the triangle Returns: list of list of int : Floyd's Triangle result = [] number = 1 for i in range(1, n + 1): row = [] for j in range(i): row.append(number) number += 1 result.append(row) return result"},{"question":"Write a python function to calculate the sum of multiple lists of numbers. The function should take any number of lists as arguments and return a list where each element is the sum of the corresponding elements from each list.","solution":"def sum_of_lists(*lists): Returns a list where each element is the sum of the corresponding elements from each input list. If the lists are of different lengths, the function treats the missing values as 0. if not lists: return [] max_length = max([len(lst) for lst in lists]) result = [] for i in range(max_length): element_sum = sum(lst[i] if i < len(lst) else 0 for lst in lists) result.append(element_sum) return result"},{"question":"Write a python function to find the factorial of a given number. The function should be able to handle large numbers efficiently and should return the result as a string.","solution":"def factorial(n): Returns the factorial of a given number n as a string. Handles large numbers effectively by using iterative approach. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") result = 1 for i in range(2, n + 1): result *= i return str(result)"},{"question":"Write a python function to find the minimum difference between two adjacent elements in an array.","solution":"def min_adjacent_difference(arr): Returns the minimum difference between two adjacent elements in an array. Parameters: arr (list): A list of integers. Returns: int: The minimum adjacent difference in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") min_diff = float('inf') for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Write a python function to find the median of a list of numbers. Implement the function from scratch without using any built-in functions for calculating the median except for \`sorted()\`. The function should handle both even and odd lengths of the list.","solution":"def find_median(numbers): Returns the median of a list of numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) mid = n // 2 if n % 2 == 0: # Even number of elements median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2.0 else: # Odd number of elements median = sorted_numbers[mid] return median"},{"question":"Write a python function to find the first and last occurrence of a target element in a sorted array. If the element is not found, return -1 for both positions. If there are multiple occurrences, return the first and the last index of the target element. Example array: [1,2,3,4,4,4,5,6], target = 4","solution":"def find_first_and_last(arr, target): Returns the first and last occurrence of target in sorted array arr. If target is not found, returns -1, -1. def find_first(arr, target): low, high = 0, len(arr) - 1 first_occurrence = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: first_occurrence = mid high = mid - 1 elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return first_occurrence def find_last(arr, target): low, high = 0, len(arr) - 1 last_occurrence = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: last_occurrence = mid low = mid + 1 elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return last_occurrence first = find_first(arr, target) last = find_last(arr, target) return first, last"},{"question":"Write a python function to find the maximum number of distinct elements in an array after removing at most one duplicate element.","solution":"def max_distinct_elements(arr): Returns the maximum number of distinct elements in an array after removing at most one duplicate element. from collections import Counter # Count frequency of each element freq = Counter(arr) # Count the number of distinct elements distinct_count = len(freq) # If there's a duplicate element, removing one will increase the distinct count by 1 if any(count > 1 for count in freq.values()): return distinct_count + 1 return distinct_count"},{"question":"Write a python function to parse an HTML document and extract all the anchor tags (\`<a>\` tags) that are pointing to external URLs. An external URL is identified by having \`http:\` or \`https:\` as its protocol. The function should return a list of all such anchor tags.","solution":"from bs4 import BeautifulSoup def extract_external_links(html_doc): Extracts all the anchor tags from the HTML document that point to external URLs. Parameters: html_doc (str): A string representation of the HTML document. Returns: list: A list of all anchor tags with external URLs. soup = BeautifulSoup(html_doc, 'html.parser') external_links = [] for link in soup.find_all('a', href=True): href = link['href'] if href.startswith('http:') or href.startswith('https:'): external_links.append(link) return external_links"},{"question":"Write a python function to find all possible paths in a grid from the top-left corner to the bottom-right corner. You can move only down or right at any point in time.","solution":"def find_paths(grid): Find all possible paths in a grid from the top-left corner to the bottom-right corner. You can move only down or right at any point in time. def dfs(x, y, path): if x == len(grid) - 1 and y == len(grid[0]) - 1: paths.append(path) return # Move right if y + 1 < len(grid[0]): dfs(x, y + 1, path + [(x, y + 1)]) # Move down if x + 1 < len(grid): dfs(x + 1, y, path + [(x + 1, y)]) paths = [] if not grid or not grid[0]: return paths dfs(0, 0, [(0, 0)]) return paths"},{"question":"Write a python function to count the number of duplicates in a list of strings, considering strings with identical characters but in different orders as duplicates. For example, 'abc' and 'bca' should be counted as a duplicate pair.","solution":"def count_duplicates(strings): Counts the number of duplicate strings in the list, considering strings with identical characters but in different orders as duplicates. :param strings: List of strings :return: Number of duplicate strings from collections import Counter # Normalize the strings by sorting the characters within each string normalized_strings = [''.join(sorted(string)) for string in strings] counts = Counter(normalized_strings) # Count duplicates duplicates = sum(count - 1 for count in counts.values() if count > 1) return duplicates"},{"question":"Write a python function to calculate the sum of all elements in a list of numbers, but only for those numbers that are greater than a specified threshold.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all elements in \`numbers\` that are greater than \`threshold\`. return sum(num for num in numbers if num > threshold)"},{"question":"Write a python function to print all the Fibonacci numbers up to a given number n.","solution":"def fibonacci_up_to(n): Returns a list of all Fibonacci numbers up to and including n. if n < 0: return [] fib_list = [0, 1] while True: next_fib = fib_list[-1] + fib_list[-2] if next_fib > n: break fib_list.append(next_fib) return fib_list if n > 0 else [0]"},{"question":"Write a python function to check if a number is a power of two. Return True if it is, and False if it is not.","solution":"def is_power_of_two(n): Return True if n is a power of two, otherwise return False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a python function to format a given string to a date in the format \\"YYYY-MM-DD\\". Assume that the input string is in the format \\"Month Day, Year\\" (e.g., \\"January 1, 2023\\").","solution":"from datetime import datetime def format_date(date_string): Formats a date string from 'Month Day, Year' to 'YYYY-MM-DD'. Parameters: date_string (str): A string representing the date in the format 'Month Day, Year'. Returns: str: The formatted date string in the format 'YYYY-MM-DD'. date_obj = datetime.strptime(date_string, '%B %d, %Y') return date_obj.strftime('%Y-%m-%d')"},{"question":"Write a python function to calculate the sum of all the nodes in a binary search tree. In your implementation, the function should be iterative, not recursive. The function should take the root node of the binary search tree as its input.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def sum_of_bst_nodes(root): Returns the sum of all the nodes' values in a binary search tree. The implementation is iterative. if root is None: return 0 total_sum = 0 stack = [root] while stack: current = stack.pop() total_sum += current.value if current.right: stack.append(current.right) if current.left: stack.append(current.left) return total_sum"},{"question":"Write a python function to print the first N powers of a given number k, where N is specified by the user. The function should take three arguments: the base number k, the number of powers N, and the output file name. The function should print the result to the console and write it to the specified output file as well.","solution":"def print_powers(k, N, output_file): Prints the first N powers of the number k to the console and writes them to the specified output file. results = [k**i for i in range(1, N+1)] # Print to console for result in results: print(result) # Write to file with open(output_file, 'w') as file: for result in results: file.write(f\\"{result}n\\")"},{"question":"Write a python function to find the length of a substring within a string.","solution":"def substring_length(string, substring): Returns the length of the substring if it is found within the string. If the substring is not found, returns 0. if substring in string: return len(substring) return 0"},{"question":"Write a python function to generate all possible combinations of a given set of numbers in lexicographical order. For example, for the set {1, 2, 3}, the combinations should be: [[]], [[1]], [[2]], [[3]], [[1, 2]], [[1, 3]], [[2, 3]], [[1, 2, 3]].","solution":"from itertools import combinations def generate_combinations(arr): Generates all possible combinations of the elements in the given array in lexicographical order. The combinations include the empty set. Parameters: arr (list): A list of elements for which to generate the combinations. Returns: list: A list of lists, where each list is a combination of elements from the input list. arr = sorted(arr) result = [[]] for i in range(1, len(arr) + 1): for combo in combinations(arr, i): result.append(list(combo)) return result"},{"question":"Write a python function to perform mathematical operations (add, subtract, multiply, divide). The function should take three parameters: two numbers and an operator. It should return the result of the operation. If the operator is not one of the four valid ones (+, -, *, /), the function should raise a ValueError.","solution":"def calculate(num1, num2, operator): Performs basic mathematical operations based on the operator provided. Parameters: num1 (float): The first number. num2 (float): The second number. operator (str): The operator as a string ('+', '-', '*', '/'). Returns: float: The result of the operation. Raises: ValueError: If the operator is not one of the valid ones. if operator == '+': return num1 + num2 elif operator == '-': return num1 - num2 elif operator == '*': return num1 * num2 elif operator == '/': if num2 == 0: raise ValueError(\\"Division by zero is not allowed\\") return num1 / num2 else: raise ValueError(\\"Invalid operator. Valid operators are: '+', '-', '*', '/'\\")"},{"question":"Write a python function to find the longest expression that are enclosed by parentheses.","solution":"def longest_enclosed_expression(s): Returns the longest expression that is enclosed by parentheses in the input string s. max_length = 0 max_expr = \\"\\" stack = [] for i, char in enumerate(s): if char == '(': stack.append(i) elif char == ')' and stack: start = stack.pop() length = i - start + 1 if length > max_length: max_length = length max_expr = s[start+1:i] return max_expr"},{"question":"Write a python function to find the maximum profit that can be made from buying and selling stocks on different days. The function should take a list of integers representing the stock prices on consecutive days and return the maximum profit that can be achieved. Assume you can only complete at most one transaction: buy on one day and sell on another day after the buy day. If no profit can be made, return 0.","solution":"def max_profit(prices): Computes the maximum profit that can be made from buying and selling stocks on different days. :param prices: List[int], a list of integers representing the stock prices on consecutive days :return: int, the maximum profit that can be achieved, or 0 if no profit can be made if not prices or len(prices) < 2: return 0 min_price = float('inf') max_prof = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_prof: max_prof = price - min_price return max_prof"},{"question":"Write a python function to return the two most frequently occurring elements from a list. If the there are less than two elements with the same frequency, return all elements of maximum frequency.","solution":"from collections import Counter def two_most_frequent_elements(lst): Returns the two most frequently occurring elements from the given list. If there are less than two distinct elements with the maximum frequency, returns all elements with the maximum frequency. if not lst: return [] frequency = Counter(lst) most_common = frequency.most_common() if len(most_common) == 1: return [most_common[0][0]] first, second = most_common[0], most_common[1] if first[1] == second[1]: return [el for el, count in most_common if count == first[1]] else: return [first[0], second[0]]"},{"question":"Write a python function to reverse a string provided by the user. However, instead of reversing the string characters, reverse the order of words in the string.","solution":"def reverse_words(sentence): Reverses the order of words in the sentence. Args: sentence (str): The input string with words. Returns: str: A string with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"Write a python function to check if all digits in a number are either strictly increasing or strictly decreasing.","solution":"def is_strictly_monotonic(num): Check if all digits in the number are either strictly increasing or strictly decreasing. :param num: The input number :return: True if the digits are strictly increasing or strictly decreasing, False otherwise digits = [int(d) for d in str(num)] if len(digits) <= 1: return True # Single digit numbers are considered strictly monotonic increasing = all(x < y for x, y in zip(digits, digits[1:])) decreasing = all(x > y for x, y in zip(digits, digits[1:])) return increasing or decreasing"},{"question":"Write a python function to find the first occurrence of a pattern in a string using the Knuth-Morris-Pratt (KMP) algorithm. The function should return the index of the first occurrence of the pattern or -1 if the pattern is not found.","solution":"def compute_lps(pattern): Computes the Longest Proper Prefix which is also suffix array for the pattern. lps = [0] * len(pattern) length = 0 # length of the previous longest prefix suffix i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps def kmp_search(text, pattern): Finds the first occurrence of the pattern in the text using the KMP algorithm. Returns the index of the first occurrence of the pattern or -1 if the pattern is not found. if not pattern: return 0 # An empty pattern is found at the beginning of any text lps = compute_lps(pattern) i = 0 # index for text j = 0 # index for pattern while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): return i - j # found pattern at index (i-j) elif i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return -1 # pattern not found"},{"question":"Write a python function to calculate the sum of all even numbers and the product of all odd numbers in a list, then return a tuple containing these two values as the sum of even numbers and the product of odd numbers. For example, given the list [2, 3, 4, 5, 6], the function should return (12, 15), where 12 is the sum of 2, 4, 6 and 15 is the product of 3, 5.","solution":"def even_sum_odd_product(lst): Returns a tuple containing the sum of all even numbers and the product of all odd numbers in the input list 'lst'. even_sum = 0 odd_product = 1 has_odd = False # Flag to check if there is at least one odd number for num in lst: if num % 2 == 0: even_sum += num else: has_odd = True odd_product *= num if not has_odd: odd_product = 0 # If there are no odd numbers, the product should be 0 return (even_sum, odd_product)"},{"question":"Write a python function to find the missing number in a given array that contains a range of consecutive integers. The missing number is between 1 and the length of the array + 1.","solution":"def find_missing_number(arr): Finds the missing number in the array that contains a range of consecutive integers. Args: arr (list of int): List of integers in a range with one missing number. Returns: int: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a python function to find a majority element in an array. Return the majority element if it exists, otherwise return None. A majority element is the one that appears more than half times in the array.","solution":"def find_majority_element(arr): Function to find the majority element in an array. Returns the majority element if it exists, otherwise returns None. if not arr: return None count = {} majority_count = len(arr) // 2 for num in arr: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > majority_count: return num return None"},{"question":"Write a python function to get all the possible subsets of a set.","solution":"from itertools import chain, combinations def get_subsets(s): Returns all possible subsets of set s. return list(chain.from_iterable(combinations(s, r) for r in range(len(s) + 1)))"},{"question":"Write a python function to return the factorial of a non-negative integer n. The function should compute the factorial iteratively, using 1 as the base case.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. The factorial is computed iteratively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the frequency of each character in a given string, ignoring case sensitivity and non-alphabetic characters.","solution":"import string def char_frequency(s): Find the frequency of each character in a given string, ignoring case sensitivity and non-alphabetic characters. Parameters: s (str): The input string. Returns: dict: A dictionary where the keys are characters and the values are their frequencies. frequency = {} # Convert the string to lower case and filter out non-alphabet characters s = (char.lower() for char in s if char.isalpha()) # Count the frequency of each character for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a python function to find the maximum difference between two elements in an array such that the larger element comes after the smaller element. For example, for the array [7, 9, 5, 6, 3, 2], the maximum difference is 9 - 2 = 7.","solution":"def max_difference(arr): Finds the maximum difference between two elements in an array such that the larger element comes after the smaller element. Parameters: arr (list): A list of integers Returns: int: The maximum difference, or -1 if the array has less than 2 elements. if len(arr) < 2: return -1 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a python function to determine if a number is even or odd. The function should return True if the number is even, otherwise it should return False. Additionally, the function should be capable of handling negative numbers as well.","solution":"def is_even(number): Returns True if the number is even, otherwise returns False. return number % 2 == 0"},{"question":"Write a python function to calculate the factorial of a given number and test it with 3 and 5.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find the minimum number that can be obtained from a list of digits where each digit can be repeated no more than k times. For example, given a list [5, 2, 2, 2, 8], and k = 2, the minimum number without repeating any digit more than k times is 258.","solution":"def min_number_from_digits(digits, k): Given a list of digits and a maximum repetition limit k, return the smallest number that can be formed without repeating any digit more than k times. from collections import Counter count = Counter(digits) valid_digits = [] for digit, freq in sorted(count.items()): valid_digits.extend([digit] * min(freq, k)) return int(''.join(map(str, valid_digits)))"},{"question":"Write a python function to find the longest palindromic substring in a given string. For example, for the string \\"babad\\", the function should return \\"bab\\" or \\"aba\\" because \\"bab\\" and \\"aba\\" are the longest palindromic substrings. In case of multiple substrings having the same maximum length, return the first one found.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. If there are multiple substrings with the same maximum length, return the first one found. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd-length palindromes (single character center) expand_around_center(i, i) # Even-length palindromes (two character center) expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Write a python function to sort a list of lists by the second element of each sublist.","solution":"def sort_by_second_element(lst): Sorts a list of lists by the second element of each sublist. Args: lst (list): A list of lists, where each sublist contains at least two elements. Returns: list: A new list of lists sorted by the second element of each sublist. return sorted(lst, key=lambda x: x[1])"},{"question":"Write a python function to find the second maximum number in a list. The function should handle lists with duplicate values and ensure the second maximum is not equal to the maximum.","solution":"def second_maximum(lst): Returns the second maximum number in the list. if len(lst) < 2: raise ValueError(\\"List must contain at least two distinct elements.\\") first_max = second_max = float('-inf') for num in lst: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num if second_max == float('-inf'): raise ValueError(\\"List does not contain enough distinct elements.\\") return second_max"},{"question":"Write a python function to calculate the Fibonacci sequence up to n numbers and return it in a list. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n numbers in a list. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to find the intersection of two \`numpy\` arrays without using the built-in \`np.intersect1d\` function. The function should take two \`numpy\` arrays as input and return a \`numpy\` array containing the common elements of the input arrays.","solution":"import numpy as np def numpy_intersection(arr1, arr2): Returns the intersection of two numpy arrays without using np.intersect1d. Parameters: arr1 (np.ndarray): First array. arr2 (np.ndarray): Second array. Returns: np.ndarray: Array containing the common elements of arr1 and arr2. set1 = set(arr1) set2 = set(arr2) intersection = set1 & set2 return np.array(list(intersection))"},{"question":"Write a python function to find the closest value to a target value in a list of numbers. If there are multiple values equally close to the target, return the smallest one.","solution":"def closest_value(nums, target): Returns the closest value to the target from the list of numbers. If there are multiple values equally close, returns the smallest one. if not nums: return None # Return None if the list is empty closest = nums[0] closest_diff = abs(target - nums[0]) for num in nums: diff = abs(target - num) if diff < closest_diff or (diff == closest_diff and num < closest): closest = num closest_diff = diff return closest"},{"question":"Write a python function to implement the quicksort algorithm. Explain the algorithm and provide the code.","solution":"def quicksort(arr): Sorts an array using the quicksort algorithm. if len(arr) <= 1: return arr # Base case: a list of zero or one elements is already sorted pivot = arr[len(arr) // 2] # Choose pivot element left = [x for x in arr if x < pivot] # Elements less than pivot middle = [x for x in arr if x == pivot] # Elements equal to pivot right = [x for x in arr if x > pivot] # Elements greater than pivot return quicksort(left) + middle + quicksort(right) # Recursive call"},{"question":"Write a python function to determine the maximum profit from buying and selling stocks. You can complete as many transactions as you like, but you must sell the stock before you buy again. The function should take a list of prices and return the maximum profit.","solution":"def max_profit(prices): Function to calculate the maximum profit from buying and selling stocks. You can complete as many transactions as you like, but you must sell before you buy again. Args: prices (list): A list of prices where prices[i] is the price of a given stock on day i. Returns: int: The maximum profit achievable. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Write a python function to find and return the maximum number in a list of integers. If the list is empty, the function should return None. Use Pythonic ways to achieve this.","solution":"def find_maximum(numbers): Returns the maximum number in the list. If the list is empty, returns None. :param numbers: List of integers :return: Maximum integer or None if list is empty return max(numbers) if numbers else None"},{"question":"Write a python function to convert a string into an integer. How would you handle errors? What would be a potential issue with using the \`int()\` function directly on a user-input string?","solution":"def safe_str_to_int(s): Converts a string to an integer safely. Parameters: s (str): The string to convert. Returns: int or None: Returns the integer representation of the string, or None if the conversion fails. try: return int(s) except ValueError: return None"},{"question":"Write a python function to reverse a string input by the user and print it.","solution":"def reverse_string(input_string): Returns the reverse of the given input string. return input_string[::-1]"},{"question":"Write a python function to shuffle a list.","solution":"import random def shuffle_list(lst): Returns a shuffled version of the input list. shuffled_lst = lst[:] random.shuffle(shuffled_lst) return shuffled_lst"},{"question":"Write a python function to check if a given list is monotonically increasing or decreasing. A list is considered monotonically increasing if each element is greater than or equal to the previous element and decreasing if each element is less than or equal to the previous element.","solution":"def is_monotonic(lst): Check if a given list is monotonically increasing or decreasing. Args: lst (list): The list to check. Returns: bool: True if the list is either monotonically increasing or decreasing, False otherwise. if not lst: return True # An empty list is considered monotonic increasing = all(x <= y for x, y in zip(lst, lst[1:])) decreasing = all(x >= y for x, y in zip(lst, lst[1:])) return increasing or decreasing"},{"question":"Write a python function to check if the input string is a valid IPv4 or IPv6 address.","solution":"import re def is_valid_ip(ip): Checks if the input string is a valid IPv4 or IPv6 address. # Regex for validating an IPv4 address ipv4_pattern = re.compile(r'^(d{1,3}.){3}d{1,3}') # Regex for validating an IPv6 address ipv6_pattern = re.compile(r'^([da-fA-F]{1,4}:){7}[da-fA-F]{1,4}') if ipv4_pattern.match(ip): # Check if all segments are between 0 and 255 segments = ip.split('.') return all(0 <= int(segment) <= 255 for segment in segments) elif ipv6_pattern.match(ip): return True else: return False"},{"question":"Write a python function to find the minimum element in a list without using built-in functions like min() and sort().","solution":"def find_min(lst): Returns the minimum element in a list without using built-in functions like min() and sort(). if not lst: raise ValueError(\\"List is empty\\") min_val = lst[0] for num in lst[1:]: if num < min_val: min_val = num return min_val"},{"question":"Write a python function to find the number of '1's in the binary representation of a given number n and return as an answer.","solution":"def count_ones_in_binary(n): Returns the number of '1's in the binary representation of n. return bin(n).count('1')"},{"question":"Write a python function to find the minimum length of a substring that, when replaced, can convert the whole string to a binary number. The binary number must have no consecutive ones.","solution":"def min_length_no_consecutive_ones(s): Returns the minimum length of a substring that needs to be replaced to convert the entire string into a binary string with no consecutive ones. max_consecutive_ones = 0 current_ones = 0 for char in s: if char == '1': current_ones += 1 if current_ones > max_consecutive_ones: max_consecutive_ones = current_ones else: current_ones = 0 return max_consecutive_ones"},{"question":"Write a python function to find the maximum product of any triplet in an array. The array can contain both positive and negative numbers.","solution":"def max_product_of_triplet(arr): Returns the maximum product of any triplet in the array. arr.sort() # Maximum of the three largest numbers and the largest product of two smallest numbers and the largest number return max(arr[-1]*arr[-2]*arr[-3], arr[0]*arr[1]*arr[-1])"},{"question":"Write a python function to check if a string s contains only digits.","solution":"def is_digit_only(s): Returns True if the string s contains only digits, False otherwise. return s.isdigit()"},{"question":"Write a python function to find the number of integers in a given range [left, right] that are divisible by a given divisor.","solution":"def count_divisibles(left, right, divisor): Returns the count of integers in the range [left, right] that are divisible by the given divisor. if divisor == 0: raise ValueError(\\"Divisor cannot be zero\\") range_count = (right // divisor) - ((left - 1) // divisor) return range_count"},{"question":"Write a python function to implement a simple version of the card game \\"Blackjack\\". The function should take two lists of integers representing the player's and dealer's cards, and return the result of the game as a string (\\"Player wins\\", \\"Dealer wins\\", or \\"Tie\\").","solution":"def blackjack(player_cards, dealer_cards): Implements a simple version of the card game \\"Blackjack\\". Args: - player_cards: List of integers representing the player's cards. - dealer_cards: List of integers representing the dealer's cards. Returns: - String: \\"Player wins\\", \\"Dealer wins\\", or \\"Tie\\". def calculate_score(cards): score = sum(cards) if score > 21: return 0 # Bust return score player_score = calculate_score(player_cards) dealer_score = calculate_score(dealer_cards) if player_score > dealer_score: return \\"Player wins\\" elif dealer_score > player_score: return \\"Dealer wins\\" else: return \\"Tie\\""},{"question":"Write a python function to calculate the sum of the first \`n\` terms of a geometric series. The function should take two parameters: \`a\` (the first term) and \`r\` (the common ratio). If \`r\` is 1, the function should return \`n*a\` to handle the special case. Otherwise, it should use the geometric series formula: \`a * (1 - r^n) / (1 - r)\`.","solution":"def geometric_series_sum(a, r, n): Returns the sum of the first \`n\` terms of a geometric series. :param a: The first term of the series :param r: The common ratio of the series :param n: The number of terms to sum up :return: The sum of the first \`n\` terms if r == 1: return n * a else: return a * (1 - r**n) / (1 - r)"},{"question":"Write a python function to reverse a string in Python. For example, the string \\"Python\\" would become \\"nohtyP\\".","solution":"def reverse_string(s): Reverses the input string. Args: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a python function to that returns two sorted lists given a list of pairs. The first list should contain all the first elements of the pairs, and the second list should contain all the second elements.","solution":"def sort_pairs(pairs): Returns two sorted lists given a list of pairs. The first list contains all the first elements of the pairs, and the second list contains all the second elements. first_elements = [pair[0] for pair in pairs] second_elements = [pair[1] for pair in pairs] first_elements.sort() second_elements.sort() return first_elements, second_elements"},{"question":"Write a python function to find the largest item in a list using recursion.","solution":"def find_largest_recursive(lst): Returns the largest item in a list using recursion. if len(lst) == 1: return lst[0] else: largest_of_rest = find_largest_recursive(lst[1:]) return lst[0] if lst[0] > largest_of_rest else largest_of_rest"},{"question":"Write a python function to generate all the possible subsets of an array. How can this be done using recursion?","solution":"def generate_subsets(array): Generates all possible subsets of the array using recursion. def backtrack(start, path): result.append(path) for i in range(start, len(array)): backtrack(i + 1, path + [array[i]]) result = [] backtrack(0, []) return result"},{"question":"Write a python function to get the number of distinct paths from (1, 1) to (n, m) in a grid of size n x m, where we can only move either down or right. The function should also handle constraints such as obstacles in the grid.","solution":"def num_paths_with_obstacles(grid): Returns the number of distinct paths from (1, 1) to (n, m) in a grid, where we can only move either down or right and the grid might contain obstacles. An obstacle is represented by 1, and free space is represented by 0. if not grid or grid[0][0] == 1: return 0 n, m = len(grid), len(grid[0]) dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n-1][m-1]"},{"question":"Write a python function to generate all prime numbers up to a given number \`n\`. The function should return a list of these prime numbers.","solution":"def generate_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes"},{"question":"Write a python function to implement a simple linear regression model However, your function should not use any built-in libraries (like numpy or sklearn) for linear regression calculations. Your function should take two arrays as input (one for independent variables and one for the dependent variable) and then calculate the coefficients (slope and intercept) of the linear regression line.","solution":"def simple_linear_regression(x, y): Performs a simple linear regression on two arrays: x (independent variable) and y (dependent variable). Returns the slope and intercept of the regression line. if len(x) != len(y): raise ValueError(\\"The arrays x and y must have the same length.\\") n = len(x) sum_x = sum(x) sum_y = sum(y) sum_xy = sum(xi * yi for xi, yi in zip(x, y)) sum_x_squared = sum(xi ** 2 for xi in x) # Calculating the slope (m) and intercept (b) m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x ** 2) b = (sum_y - m * sum_x) / n return m, b"},{"question":"Write a python function to check if a given number is a perfect square without using the \`**\` operator or the built-in \`sqrt\` function.","solution":"def is_perfect_square(num): Checks if a given number is a perfect square without using ** operator or sqrt function. Args: num (int): The number to be checked. Returns: bool: True if num is a perfect square, False otherwise. if num < 0: return False x = num while x * x > num: x = (x + num // x) // 2 return x * x == num"},{"question":"Write a python function to remove the first and last characters of a given string. If the string has less than or equal to two characters, return an empty string.","solution":"def remove_first_and_last_char(s): Removes the first and last characters of the input string. If the string has less than or equal to two characters, returns an empty string. if len(s) <= 2: return \\"\\" return s[1:-1]"},{"question":"Write a python function to check if the parentheses in the given string match in number and they follow the correct order. For example, the string '({[()()]})' should return True, while the string ')(' should return False.","solution":"def is_valid_parentheses(s): Check if the parentheses in the given string match in number and follow the correct order. :param s: String containing parentheses. :return: True if the parentheses are valid, False otherwise. stack = [] parentheses_map = {')': '(', '}': '{', ']': '['} for char in s: if char in parentheses_map.values(): stack.append(char) elif char in parentheses_map: if stack == [] or parentheses_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write a python function to detect if a linked list is a palindrome. The function is called \`is_palindrome\` and takes a linked list as a parameter. The linked list should be represented as a class with methods to insert an element at the end of the list and a method to print the list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): if not self.head: self.head = Node(data) else: current = self.head while current.next: current = current.next current.next = Node(data) def is_palindrome(self): # Create a list to store the elements of the linked list lst = [] current = self.head while current: lst.append(current.data) current = current.next # Check if the list is equal to its reverse return lst == lst[::-1] def __str__(self): result = [] current = self.head while current: result.append(str(current.data)) current = current.next return \\"->\\".join(result)"},{"question":"Write a python function to find the kth smallest element in a binary search tree. Can you also discuss the properties of a Binary Search Tree that make this operation efficient??","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root, k): Returns the kth smallest element in the BST. def inorder_traversal(node): if not node: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) elements = inorder_traversal(root) return elements[k-1]"},{"question":"Write a python function to remove the nth element from a list and return the modified list.","solution":"def remove_nth_element(lst, n): Removes the nth element from the list and returns the modified list. # Check if n is within the valid range if n < 0 or n >= len(lst): raise IndexError(\\"Index out of range\\") return lst[:n] + lst[n+1:]"},{"question":"Write a python function to reverse a string without using the slicing method. You should only use a loop to reverse the string.","solution":"def reverse_string(s): Reverses a given string using a loop. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to find the common characters between two strings.","solution":"def common_characters(str1, str2): Returns a string containing the common characters between str1 and str2. The result includes each common character only once, even if they occur multiple times in str1 and str2. return ''.join(sorted(set(str1) & set(str2)))"},{"question":"Write a python function to calculate the number of vowels in a given string. The function should be case-insensitive, meaning it should treat uppercase and lowercase letters equally.","solution":"def count_vowels(s): Returns the number of vowels in the given string. This function is case-insensitive. Parameters: s (str): The input string Returns: int: The number of vowels in the input string vowels = set(\\"aeiou\\") return sum(1 for char in s.lower() if char in vowels)"},{"question":"Write a python function to find whether a number is prime or not. Return True if the number is prime, otherwise return False. The function should handle numbers up to 10^6 efficiently.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to create a new json array from a list of tuples","solution":"import json def list_of_tuples_to_json_array(list_of_tuples): Converts a list of tuples into a JSON array. Each tuple should contain exactly two elements: a key and a value. Parameters: list_of_tuples (list): A list of tuples, where each tuple contains exactly two elements. Returns: str: A string representing the JSON array. if not all(len(t) == 2 for t in list_of_tuples): raise ValueError(\\"Each tuple must contain exactly two elements.\\") json_array = [{\\"key\\": t[0], \\"value\\": t[1]} for t in list_of_tuples] return json.dumps(json_array)"},{"question":"Write a python function to find the length of the longest repeating subsequence in a given string.","solution":"def longest_repeating_subsequence(s): Finds the length of the longest repeating subsequence in a given string. n = len(s) # Create and initialize DP table dp = [[0 for j in range(n+1)] for i in range(n+1)] # Fill dp table for i in range(1, n+1): for j in range(1, n+1): # If characters match and indexes are not the same if s[i-1] == s[j-1] and i != j: dp[i][j] = 1 + dp[i-1][j-1] else: dp[i][j] = max(dp[i][j-1], dp[i-1][j]) return dp[n][n]"},{"question":"Write a python function to calculate the total sales revenue for a list of item sales. Each item's sale is represented as a tuple containing the item's price and the quantity sold. The function should return the total revenue generated from all items.","solution":"def total_sales_revenue(sales): Calculate the total sales revenue for a list of item sales. Parameters: sales (list of tuples): Each tuple contains the item's price and quantity sold. Returns: float: The total revenue generated from all items. return sum(price * quantity for price, quantity in sales)"},{"question":"Write a python function to that converts a decimal number into a binary number given as a string. The function should handle cases where the decimal number is not an integer and output a string with a fractional part.","solution":"def decimal_to_binary(decimal_number): Converts a given decimal number into a binary number represented as a string. Handles both integer and fractional parts of the decimal number. if not isinstance(decimal_number, (int, float)): raise ValueError(\\"Input must be an integer or a float number\\") if isinstance(decimal_number, int): return bin(decimal_number)[2:] # Process the integer part integer_part = int(decimal_number) fractional_part = decimal_number - integer_part binary_integer = bin(integer_part)[2:] # Process the fractional part binary_fraction = [] while fractional_part and len(binary_fraction) <= 20: # Limit to 20 places for practicality fractional_part *= 2 digit = int(fractional_part) binary_fraction.append(str(digit)) fractional_part -= digit return binary_integer + ('.' + ''.join(binary_fraction) if binary_fraction else '')"},{"question":"Write a python function to crop an image to a specified dimensions (height and width), assuming the original image's dimensions are larger than the desired dimensions. The function should take the image path, and the target dimensions as inputs, and return the cropped image.","solution":"from PIL import Image def crop_image(image_path, target_width, target_height): Crops an image to the specified width and height. :param image_path: The path of the image to be cropped. :param target_width: The desired width of the cropped image. :param target_height: The desired height of the cropped image. :return: The cropped image. image = Image.open(image_path) width, height = image.size # Ensure target dimensions are smaller than the original image dimensions if target_width > width or target_height > height: raise ValueError(\\"Target dimensions must be smaller than the original image dimensions.\\") # Calculate the coordinates to crop the image left = (width - target_width) // 2 upper = (height - target_height) // 2 right = left + target_width lower = upper + target_height # Crop and return the image cropped_image = image.crop((left, upper, right, lower)) return cropped_image"},{"question":"Write a python function to find the kth largest number in an unsorted array using the quickselect algorithm with a time complexity of O(n).","solution":"import random def partition(arr, left, right, pivot_index): pivot_value = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def quickselect(arr, left, right, k): if left == right: return arr[left] pivot_index = random.randint(left, right) pivot_index = partition(arr, left, right, pivot_index) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, left, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, right, k) def find_kth_largest(nums, k): Return the k-th largest element in an array using the quickselect algorithm. size = len(nums) return quickselect(nums, 0, size - 1, size - k)"},{"question":"Write a python function to convert a list of strings into a dictionary where the keys are the strings and the values are their corresponding indices in the list. If a string appears more than once in the list, store an empty list as its value. If the list is empty, return an empty dictionary.","solution":"def list_to_dict(lst): Converts a list of strings into a dictionary where the keys are the strings and the values are their corresponding indices in the list. If a string appears more than once in the list, store an empty list as its value. If the list is empty, return an empty dictionary. result = {} for i, s in enumerate(lst): if s in result: result[s] = [] else: result[s] = [i] return {k: v if v != [] else [] for k, v in result.items()}"},{"question":"Write a python function to read a CSV file and return the first n rows.","solution":"import csv def read_csv_first_n_rows(filepath, n): Reads the first n rows of a csv file. Args: filepath (str): The path to the csv file. n (int): The number of rows to read. Returns: list: A list of dictionaries containing the first n rows of the csv file. rows = [] with open(filepath, newline='') as csvfile: reader = csv.DictReader(csvfile) for i, row in enumerate(reader): if i >= n: break rows.append(row) return rows"},{"question":"Write a python function to print all possible combinations of k numbers chosen from a set of n numbers (1, 2, 3, ..., n).","solution":"from itertools import combinations def combination_of_numbers(n, k): Returns all possible combinations of k numbers chosen from the set {1, 2, ..., n}. Parameters: n (int): The upper limit of the set. k (int): The number of elements to choose. Returns: List[Tuple[int]]: A list of tuples, where each tuple contains a combination of k elements. return list(combinations(range(1, n + 1), k))"},{"question":"Write a python function to perform string matching using KMP algorithm. The function should take two strings as input and return the starting index of the first occurrence of the pattern within the given string. If the pattern is not found, return -1.","solution":"def kmp_search(text, pattern): Perform string matching using the KMP algorithm. Parameters: - text (str): The text string to search within. - pattern (str): The pattern string to search for. Returns: - int: The starting index of the first occurrence of the pattern within the text. Returns -1 if the pattern is not found. def compute_lps_array(pattern): length = 0 lps = [0] * len(pattern) i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps if not pattern: return 0 lps = compute_lps_array(pattern) i = 0 # index for text j = 0 # index for pattern while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): return i - j elif i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return -1"},{"question":"Write a python function to find the most frequent element in an array. If there are multiple elements with the same maximum frequency, return all such elements. If the array is empty, return \\"Array is empty.\\"","solution":"from collections import Counter def most_frequent_element(arr): Returns the most frequent elements in an array. If multiple elements have the same highest frequency, return all such elements. If the array is empty, return \\"Array is empty.\\" if not arr: return \\"Array is empty.\\" counter = Counter(arr) max_frequency = max(counter.values()) most_frequent = [item for item, count in counter.items() if count == max_frequency] return most_frequent"},{"question":"Write a python function to extract emails from a given text file. The text files are in a directory named \\"Emails\\" in the user's home directory. The function should return a list of all emails found.","solution":"import os import re def extract_emails_from_file(file_path): Extracts emails from a given text file. Parameters: - file_path: str, the path to the text file. Returns: - List[str], a list of emails found in the text file. with open(file_path, 'r', encoding='utf-8') as file: content = file.read() # Regular expression to find emails email_pattern = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' emails = re.findall(email_pattern, content) return emails def extract_emails_from_directory(directory_path): Extracts emails from all text files in a given directory. Parameters: - directory_path: str, the path to the directory containing text files. Returns: - List[str], a list of all emails found in the directory. all_emails = [] for root, dirs, files in os.walk(directory_path): for file in files: if file.endswith('.txt'): file_path = os.path.join(root, file) emails = extract_emails_from_file(file_path) all_emails.extend(emails) return all_emails"},{"question":"Write a python function to check if a list has duplicate elements. If it does, return the duplicate element and its first occurrence index. If not, return -1.","solution":"def find_duplicate(lst): Checks if the list has a duplicate element. If it does, returns the duplicate element and its first occurrence index. If not, returns -1. Parameters: lst (list): The input list to check for duplicates. Returns: tuple or int: (duplicate_element, index) if duplicate is found, otherwise -1. seen = {} for index, element in enumerate(lst): if element in seen: return (element, seen[element]) seen[element] = index return -1"},{"question":"Write a python function to find the maximum of two numbers (a and b). If either number is negative, the function should return a predefined error message. If the numbers are equal, it should return a message saying \\"Numbers are equal\\". Otherwise, return the maximum number.","solution":"def find_max(a, b): Returns the maximum of two numbers (a, b). If either number is negative, returns a predefined error message. If the numbers are equal, returns a message saying \\"Numbers are equal\\". if a < 0 or b < 0: return \\"Error: Negative numbers are not allowed\\" if a == b: return \\"Numbers are equal\\" return max(a, b)"},{"question":"Write a python function to reverse the words in a given sentence, preserving the spaces between words.","solution":"def reverse_words(sentence): Reverses the words in the given sentence, preserving the spaces between words. words = sentence.split() reversed_sentence = \\" \\".join(words[::-1]) return reversed_sentence"},{"question":"Write a python function to take a list of numbers and return a list with each number squared. For example, if the input is [1, 2, 3, 4], the output should be [1, 4, 9, 16].","solution":"def square_numbers(numbers): Returns a list with each number squared. Args: numbers (list): A list of numbers. Returns: list: A list with each number squared. return [number ** 2 for number in numbers]"},{"question":"Write a python function to evaluate postfix notation (also known as Reverse Polish Notation). Postfix notation is a way of writing expressions in which the operator is placed after the operands. For example, the infix expression (3 + 4) * 5 would be written as 3 4 + 5 * in postfix notation.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression. Parameters: expression (str): A string containing a postfix expression with space-separated tokens. Returns: int: The result of the postfix evaluation. stack = [] for token in expression.split(): if token.isnumeric() or (token[0] == '-' and token[1:].isnumeric()): stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == '+': stack.append(operand1 + operand2) elif token == '-': stack.append(operand1 - operand2) elif token == '*': stack.append(operand1 * operand2) elif token == '/': stack.append(int(operand1 / operand2)) # ensure integer division else: raise ValueError(f\\"Unsupported operator: {token}\\") return stack.pop()"},{"question":"Write a python function to implement the阵地守卫问题. This problem involves placing the minimum number of guards in a 2D grid to watch over all cells. Each guard can see all cells in the same row and column as long as there are no obstacles (e.g., other guards) in the way. The function should return the minimum number of guards needed to watch over the entire grid. The input is a 2D list representing the grid, where empty cells are represented by 0 and cells with obstacles are represented by 1.","solution":"def min_guards(grid): Returns the minimum number of guards needed to watch over the entire grid. Each guard can see all cells in the same row and column as long as there are no obstacles (other guards) in the way. :param grid: List[List[int]], a 2D grid where 0 indicates an empty cell and 1 indicates an obstacle :return: int, minimum number of guards needed if not grid: return 0 rows, cols = len(grid), len(grid[0]) row_guard = [False] * rows col_guard = [False] * cols for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Obstacle found row_guard[r] = True col_guard[c] = True guards_needed = max(sum(row_guard), sum(col_guard)) return guards_needed"},{"question":"Write a python function to return sum of all numbers in a list with hackers eye! :D , which means the function should ignore even numbers, and only sum the odd numbers geometrically. The geometric sum should follow the formula: a + ar + ar^2 + ar^3 + ... + ar^(n-1)","solution":"def odd_geometric_sum(lst, r=2): Returns the geometric sum of all odd numbers in the list. The geometric sum is calculated using the formula: a + ar + ar^2 + ar^3 + ... + ar^(n-1) Where: - a is the first odd number - r is the common ratio (default is 2) - n is the number of odd numbers odd_numbers = [num for num in lst if num % 2 != 0] if not odd_numbers: return 0 a = odd_numbers[0] n = len(odd_numbers) # Geometric sum formula for n terms: a * (1 - r^n) / (1 - r) geometric_sum = a * (1 - r ** n) / (1 - r) return geometric_sum"},{"question":"Write a python function to merge two lists, sort them in ascending order, and remove any duplicates. The function should return the merged and sorted list without duplicates. Also, explain the time complexity of the function.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists, sorts them in ascending order, and removes duplicates. Parameters: list1 (list): First list to be merged. list2 (list): Second list to be merged. Returns: list: Merged, sorted list without duplicates. # Merge the two lists merged_list = list1 + list2 # Remove duplicates by converting to a set and back to a list merged_list = list(set(merged_list)) # Sort the list in ascending order merged_list.sort() return merged_list # Time Complexity: # Converting the list to a set removes duplicates in O(n) time where n is the combined length of the lists. # Sorting the list takes O(n log n) time. # Therefore, the overall time complexity is O(n log n)."},{"question":"Write a python function to filter out all the rows in a pandas dataframe where any of the values in the row are missing (NA). Return only those rows where all values are defined.","solution":"import pandas as pd def filter_complete_rows(df): Filters out all the rows in the dataframe where any of the values in the row are missing (NA). Returns only those rows where all values are defined. return df.dropna()"},{"question":"Write a python function to reverse a string in-place. What does \\"in-place\\" mean in this context?","solution":"def reverse_string(s): Reverses the input string s. Since strings in Python are immutable, this function simulates in-place reversal using a list. # Convert the string to a list of characters char_list = list(s) # Initialize two pointers left, right = 0, len(char_list) - 1 # Swap the characters while the left pointer is less than the right pointer while left < right: char_list[left], char_list[right] = char_list[right], char_list[left] left += 1 right -= 1 # Convert the list of characters back to a string and return it return ''.join(char_list)"},{"question":"Write a python function to reverse a list in-place without using any extra space. The function should take an array and its size as inputs and return the reversed array.","solution":"def reverse_list_in_place(arr): Reverses the given list in-place without using any extra space. Args: arr (list): The list to be reversed Returns: list: The reversed list left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a python function to solve the N-Queens puzzle using backtracking. The function should take an integer \`n\` as input and return all possible configurations of the Queen's positions.","solution":"def solve_n_queens(n): def is_valid(board, row, col): # Check this column for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(row, board): if row == n: result.append(board[:]) return for col in range(n): if is_valid(board, row, col): board[row] = col solve(row + 1, board) board[row] = -1 result = [] solve(0, [-1] * n) return result def generate_board(configuration): n = len(configuration) board = [] for i in range(n): row = '.' * configuration[i] + 'Q' + '.' * (n - configuration[i] - 1) board.append(row) return board def solve_n_queens_boards(n): configurations = solve_n_queens(n) return [generate_board(config) for config in configurations]"},{"question":"Write a python function to find all prime factors of a given number. Here is the definition of a prime factor: A prime factor is a factor that is a prime number.","solution":"def prime_factors(n): Returns a list of all prime factors of a given number n. factors = [] # Start dividing by the smallest prime number 2 div = 2 while n > 1: while n % div == 0: factors.append(div) n //= div div += 1 return factors"},{"question":"Write a python function to find the nth smallest element in an array.","solution":"def nth_smallest_element(arr, n): Returns the nth smallest element in the array. If n is out of bounds, raise an IndexError. if n <= 0 or n > len(arr): raise IndexError(\\"n is out of bounds.\\") sorted_array = sorted(arr) return sorted_array[n - 1]"},{"question":"Write a python function to reverse a list of numbers without using any built-in functions or additional memory. The solution should run in linear time.","solution":"def reverse_list(lst): Reverses the given list of numbers in place without using additional memory. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. start, end = 0, len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 return lst"},{"question":"Write a python function to print the size of a given list. The function should take a list as an argument and return the number of elements in the list. In addition, if the list is empty, the function should return 0.","solution":"def list_size(lst): Returns the number of elements in the list. If the list is empty, returns 0. return len(lst)"},{"question":"Write a python function to find a substring that forms a palindrome when reversed.","solution":"def find_palindromic_substring(s): This function finds a substring within the input string \`s\` that forms a palindrome when reversed. n = len(s) if n == 0: return \\"\\" longest_palindrome = \\"\\" for i in range(n): for j in range(i+1, n+1): substring = s[i:j] if substring == substring[::-1]: if len(substring) > len(longest_palindrome): longest_palindrome = substring return longest_palindrome"},{"question":"Write a python function to find the maximum sum of a subarray that has exactly k elements.","solution":"def max_sum_subarray_k_elements(arr, k): Returns the maximum sum of a subarray with exactly k elements. Parameters: arr (list): List of integers. k (int): Number of elements in the subarray. Returns: int: Maximum sum of the subarray with exactly k elements. if len(arr) < k: return None # If the array has fewer than k elements, return None. # Compute the sum of the first k elements max_sum = sum(arr[:k]) current_sum = max_sum # Use sliding window to find the maximum sum of any k consecutive elements for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to calculate the transpose of a given matrix. The function should take a 2D list (list of lists) as input and return the transpose of the matrix.","solution":"def transpose(matrix): Returns the transpose of a given 2D list (matrix). return [list(row) for row in zip(*matrix)]"},{"question":"Write a python function to print the elements of an array in reverse order.","solution":"def print_reverse(arr): Prints the elements of an array in reverse order. reversed_arr = arr[::-1] for item in reversed_arr: print(item)"},{"question":"Write a python function to check if a given string is a valid email address or not. The function should return True if the string is a valid email address, and False otherwise. An email address is valid if it contains exactly one \\"@\\" symbol and the hostname part should contain at least one \\".\\" symbol.","solution":"import re def is_valid_email(email): Returns True if the input string is a valid email address, otherwise returns False. An email address is considered valid if it contains exactly one \\"@\\" and the hostname part contains at least one \\".\\" symbol. pattern = r'^[^@]+@[^@]+.[^@]+' return bool(re.match(pattern, email))"},{"question":"Write a python function to detect and remove duplicate rows from a 2D numpy array. The function should take a 2D numpy array as input and return a new 2D numpy array with duplicate rows removed, preserving the original order of the unique rows.","solution":"import numpy as np def remove_duplicate_rows(arr): Removes duplicate rows from a 2D numpy array, preserving the original order of the unique rows. Parameters: arr (numpy.ndarray): A 2D numpy array. Returns: numpy.ndarray: A new 2D numpy array with duplicate rows removed. unique_rows, indices = np.unique(arr, axis=0, return_index=True) sorted_indices = np.sort(indices) return arr[sorted_indices]"},{"question":"Write a python function to replace all non-alphanumeric characters with a space in the given string.","solution":"import re def replace_non_alphanumeric_with_space(input_string): Replaces all non-alphanumeric characters in the given string with a space. Parameters: input_string (str): The input string that may contain non-alphanumeric characters. Returns: str: The processed string with all non-alphanumeric characters replaced by a space. return re.sub(r'[^a-zA-Z0-9]', ' ', input_string)"},{"question":"Write a python function to find all possible subsets of a given set of distinct integers. The function should return a list of lists, where each inner list represents a possible subset. The function should handle any set of integers efficiently.","solution":"def find_subsets(nums): Returns all possible subsets of a given set of distinct integers. subsets = [[]] for num in nums: subsets += [current + [num] for current in subsets] return subsets"},{"question":"Write a python function to replace every character in a string with the next character in the ASCII table.","solution":"def shift_characters(input_string): Replace every character in the input_string with the next character in the ASCII table. return ''.join(chr(ord(char) + 1) for char in input_string)"},{"question":"Write a python function to create a dictionary from two lists, where the first list contains keys and the second list contains corresponding values. If a key does not have a corresponding value, the value should be set to \`None\`. If a value does not have a corresponding key, the key-value pair should be omitted.","solution":"def create_dict_from_lists(keys, values): Create a dictionary from two lists, keys and values. If a key does not have a corresponding value, set the value to None. If a value does not have a corresponding key, omit that value. :param keys: List of keys :param values: List of values :return: Dictionary mapping keys to values result = {keys[i]: values[i] if i < len(values) else None for i in range(len(keys))} return result"},{"question":"Write a python function to find the maximum value in an integer list without using the built-in max() function.","solution":"def find_max(lst): Returns the maximum value in a list of integers. if not lst: raise ValueError(\\"The list is empty\\") max_value = lst[0] for num in lst[1:]: if num > max_value: max_value = num return max_value"},{"question":"Write a python function to sort an array in-place using both merge sort and quick sort. Both sorting algorithms should return the sorted array.","solution":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr def quick_sort(arr): _quick_sort(arr, 0, len(arr) - 1) return arr def _quick_sort(arr, low, high): if low < high: pi = partition(arr, low, high) _quick_sort(arr, low, pi - 1) _quick_sort(arr, pi + 1, high) def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Write a python function to generate all possible combinations of a given list's elements.","solution":"from itertools import combinations def generate_combinations(lst): Returns a list of all possible combinations of the elements of the input list. Each combination is itself a list. all_combinations = [] for r in range(1, len(lst) + 1): for comb in combinations(lst, r): all_combinations.append(list(comb)) return all_combinations"},{"question":"Write a python function to convert the given decimal number into binary and then XOR it with another given binary number. The function should take the decimal number and the binary number as input and return the result of the XOR operation.","solution":"def decimal_to_binary_xor(decimal_num, binary_num): Converts the given decimal number to binary string, then XORs it with the provided binary number. Returns the result as a binary string. :param decimal_num: An integer in decimal format. :param binary_num: A string representing a binary number (e.g., \\"1010\\"). :return: A binary string representing the result of the XOR operation. # Convert decimal number to binary string (without '0b' prefix) binary_of_decimal = bin(decimal_num)[2:] # Pad the binary string to match the lengths of the two binary strings max_length = max(len(binary_of_decimal), len(binary_num)) binary_of_decimal = binary_of_decimal.zfill(max_length) binary_num = binary_num.zfill(max_length) # Perform XOR operation xor_result = ''.join(['1' if binary_of_decimal[i] != binary_num[i] else '0' for i in range(max_length)]) return xor_result"},{"question":"Write a python function to count the occurrences of the word \\"hello\\" in a given string, treating \\"hello\\" as a case-insensitive word. Additionally, return the number of words in the string. The function should be able to handle multiple occurrences of \\"hello\\" within the same word or as a substring. For example, \\"helloworld\\" should count as one occurrence of \\"hello\\".","solution":"def count_hello_and_words(text): Counts the occurrences of the word 'hello' in the given string (case-insensitive), and returns the number of words in the string. Args: text (str): The input string. Returns: tuple: A tuple containing two elements: - int: The number of occurrences of 'hello'. - int: The number of words in the input string. # Normalize the text to lowercase lower_text = text.lower() # Count occurrences of \\"hello\\" hello_count = lower_text.count('hello') # Split the text into words and count the number of words words = text.split() word_count = len(words) return hello_count, word_count"},{"question":"Write a python function to finds the number of even and odd integers in a given list.","solution":"def count_even_odd(numbers): Returns the counts of even and odd integers in the given list. Parameters: numbers (list): List of integers. Returns: tuple: A tuple where the first element is the count of even numbers, and the second element is the count of odd numbers. even_count = 0 odd_count = 0 for number in numbers: if number % 2 == 0: even_count += 1 else: odd_count += 1 return (even_count, odd_count)"},{"question":"Write a python function to calculate the Hamming Distance between two DNA strings. The Hamming distance is the number of positions at which the corresponding symbols are different.","solution":"def hamming_distance(dna1, dna2): Calculate the Hamming Distance between two DNA strings. The Hamming distance is the number of positions at which the corresponding symbols are different. :param dna1: First DNA string :param dna2: Second DNA string :return: Hamming distance (int) if len(dna1) != len(dna2): raise ValueError(\\"DNA strings must be of equal length\\") return sum(1 for a, b in zip(dna1, dna2) if a != b)"},{"question":"Write a python function to implement a circular linked list using a Node class. Then, implement methods to append, delete, and traverse the list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node self.head.next = self.head else: curr = self.head while curr.next != self.head: curr = curr.next curr.next = new_node new_node.next = self.head def delete(self, key): if self.head: if self.head.data == key: if self.head.next == self.head: # Only one element self.head = None else: curr = self.head while curr.next != self.head: curr = curr.next curr.next = self.head.next self.head = self.head.next else: prev = None curr = self.head while curr.next != self.head: if curr.data == key: break prev = curr curr = curr.next if curr.data == key: prev.next = curr.next def traverse(self): elements = [] if self.head: curr = self.head while True: elements.append(curr.data) curr = curr.next if curr == self.head: break return elements"},{"question":"Write a python function to print all the even numbers between 1 and 100 using a loop.","solution":"def print_even_numbers(): Prints all the even numbers between 1 and 100. even_numbers = [] for i in range(1, 101): if i % 2 == 0: even_numbers.append(i) return even_numbers"},{"question":"Write a python function to find the product of all the prime numbers in a given list.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def product_of_primes(nums): Returns the product of all the prime numbers in the given list. If there are no prime numbers, returns 1. product = 1 has_prime = False for num in nums: if is_prime(num): product *= num has_prime = True return product if has_prime else 1"},{"question":"Write a python function to find the number of unique elements in an array of integers.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the given array of integers. return len(set(arr))"},{"question":"Write a python function to solve the following problem: \\"Find the maximum sum of a contiguous subarray of size k in a given list of integers.\\"","solution":"def max_sum_subarray(arr, k): Find the maximum sum of a contiguous subarray of size k in the given list of integers. :param arr: List of integers :param k: Size of the subarray :return: Maximum sum of a contiguous subarray of size k if not arr or k <= 0 or k > len(arr): return 0 max_sum = window_sum = sum(arr[:k]) for i in range(k, len(arr)): window_sum += arr[i] - arr[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Write a python function to reverse the elements of a tuple.","solution":"def reverse_tuple(tpl): Returns a tuple with the elements of the input tuple reversed. return tpl[::-1]"},{"question":"Write a python function to sort a list of integers in ascending order. The function should return the sorted list. Ensure that your function handles the case when the input list is empty or contains only one element, as both these cases should return the input list.","solution":"def sort_list(lst): Sorts a list of integers in ascending order. :param lst: List of integers to be sorted. :return: Sorted list of integers. return sorted(lst)"},{"question":"Write a python function to find all the 2D vectors in a 2D grid which sum up to a zero. The function should take two arguments: the grid and the size of the grid (which is both rows and columns).","solution":"def find_zero_sum_vectors(grid, size): Returns all 2D vectors in the given 2D grid which sum up to zero. Args: grid (list of list of int): 2D grid of integers size (int): The number of rows and columns in the grid Returns: list of tuples: Each tuple represents a pair of coordinates whose elements sum to zero zero_sum_vectors = [] for i in range(size): for j in range(size): for k in range(i, size): for l in range(j if i == k else 0, size): if (i != k or j != l) and (grid[i][j] + grid[k][l] == 0): zero_sum_vectors.append(((i, j), (k, l))) return zero_sum_vectors"},{"question":"Write a python function to determine if a given string is a valid IPv4 address. An IPv4 address consists of four octets, where each octet is represented by a decimal number ranging from 0 to 255. The octets are separated by periods.","solution":"def is_valid_ipv4_address(ip: str) -> bool: Determine if the given string is a valid IPv4 address. An IPv4 address consists of four octets where each octet is a decimal number ranging from 0 to 255. Arguments: ip -- string containing the IPv4 address Returns: True if the string is a valid IPv4 address, False otherwise octets = ip.split('.') # IPv4 address must have exactly four octets if len(octets) != 4: return False for octet in octets: # Each octet must be a number if not octet.isdigit(): return False # Convert string to integer num = int(octet) # Each octet must be in the range 0-255 if num < 0 or num > 255: return False # Leading zeros are not allowed, except for the number '0' itself if octet != '0' and octet.startswith('0'): return False return True"},{"question":"Write a python function to find the sum of all numbers in a nested list using recursion. The nested list may contain integers, floats, or other nested lists.","solution":"def sum_nested_list(nested_list): Returns the sum of all numbers in a nested list. The nested list may contain integers, floats, or other nested lists. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a python function to return the product of the last digits of two given numbers. How to achieve this?","solution":"def product_of_last_digits(a, b): Returns the product of the last digits of two given numbers. Parameters: a (int): First number b (int): Second number Returns: int: Product of the last digits of a and b last_digit_a = abs(a) % 10 last_digit_b = abs(b) % 10 return last_digit_a * last_digit_b"},{"question":"Write a python function to split a list into all possible subsets, considering all elements can appear in any subset.","solution":"import itertools def get_all_subsets(lst): Returns all possible subsets of the input list. subsets = [] for i in range(len(lst) + 1): subsets.extend(itertools.combinations(lst, i)) return subsets"},{"question":"Write a python function to find the maximum sum of a contiguous subarray in an array of integers. You should return the maximum sum possible.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in the array 'arr'. if not arr: return 0 max_so_far = arr[0] current_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"Write a python function to find the minimum number of moves required to make all array elements same by incrementing or decrementing by 1","solution":"def min_moves_to_equal_elements(arr): Returns the minimum number of moves required to make all array elements the same by incrementing or decrementing by 1. arr.sort() median = arr[len(arr) // 2] # Finding the median moves = sum(abs(x - median) for x in arr) return moves"},{"question":"Write a python function to find the minimum and maximum values in a list of integers without using built-in max() and min() functions. Also, consider cases where the list might have duplicate values.","solution":"def find_min_max(nums): Returns a tuple containing the minimum and maximum values in a list of integers. if not nums: raise ValueError(\\"The list should not be empty.\\") min_val = nums[0] max_val = nums[0] for num in nums[1:]: if num < min_val: min_val = num if num > max_val: max_val = num return min_val, max_val"},{"question":"Write a python function to generate the shortest palindrome by appending characters to the end of the given string. The resulting string should be a palindrome.","solution":"def shortest_palindrome(s): Returns the shortest palindrome by appending characters to the end of the given string. def is_palindrome(check_s): return check_s == check_s[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[::-1] # Example usage # print(shortest_palindrome(\\"abcd\\")) # Output: \\"abcdcba\\" # print(shortest_palindrome(\\"aace\\")) # Output: \\"aacecaa\\""},{"question":"Write a python function to find and return the middle element of a list. If the list has an odd number of elements, return the middle one. If the list has an even number of elements, return the two middle elements as a list.","solution":"def find_middle_element(lst): Returns the middle element(s) of the list. If the list has an odd number of elements, return the middle one. If the list has an even number of elements, return the two middle elements as a list. n = len(lst) if n == 0: return None middle = n // 2 if n % 2 == 1: return lst[middle] else: return [lst[middle - 1], lst[middle]]"},{"question":"Write a python function to check if a number is a power of four. A number is a power of four if it can be expressed as 4^x for some integer x. For example, 1, 4, 16, 64 are powers of four, while 2, 3, 5, 8 are not.","solution":"def is_power_of_four(n): Returns True if n is a power of four, otherwise False. if n <= 0: return False while n % 4 == 0: n //= 4 return n == 1"},{"question":"Write a python function to swap two numbers without using a temporary variable. You need to provide the solution in version 3.6 or later of Python.","solution":"def swap_numbers(a, b): Swap two numbers without using a temporary variable. :param a: First number :param b: Second number :return: Tuple of swapped numbers (new_a, new_b) a, b = b, a return a, b"},{"question":"Write a python function to calculate the sum of all elements in a 2D list (also known as a matrix).","solution":"def sum_2d_matrix(matrix): Returns the sum of all elements in a 2D list (matrix). total_sum = 0 for row in matrix: for element in row: total_sum += element return total_sum"},{"question":"Write a python function to generate a list of numbers from 1 to n, where n is a positive integer provided by the user. The function should also return the sum of all the numbers in the list. If the user provides a non-positive integer as input, the function should return an appropriate error message.","solution":"def generate_list_and_sum(n): Generates a list of numbers from 1 to n and returns the list along with the sum of the numbers. If n is not a positive integer, returns an error message. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer\\" num_list = list(range(1, n + 1)) total_sum = sum(num_list) return num_list, total_sum"},{"question":"Write a python function to check if a string contains only numeric characters.","solution":"def is_numeric(s): Checks if the string s contains only numeric characters. return s.isdigit()"},{"question":"Write a python function to find the minimum number of steps to reach the end of an array where each element represents the maximum jump length from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps to reach the end of the array. :param arr: List of integers where each element represents the maximum jump length from that position. :return: Integer representing the minimum number of jumps to reach the end of the array. n = len(arr) if n <= 1: return 0 if arr[0] == 0: return -1 jumps = 0 current_end = 0 farthest = 0 for i in range(n-1): farthest = max(farthest, i + arr[i]) if i == current_end: current_end = farthest jumps += 1 if current_end >= n - 1: break return jumps if current_end >= n - 1 else -1"},{"question":"Write a python function to count the number of misplaced elements in a list. A misplaced element is defined as an element that is not in the same position as it would be if the list were sorted. For example, in the list [3, 1, 2], the elements 3 and 2 are misplaced because they are in positions 1 and 2 respectively, while they would be in positions 2 and 1 respectively if the list were sorted.","solution":"def count_misplaced_elements(lst): Returns the number of misplaced elements in a list. A misplaced element is defined as an element that is not in the same position as it would be if the list were sorted. sorted_lst = sorted(lst) return sum(1 for i in range(len(lst)) if lst[i] != sorted_lst[i])"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has been wrapped around. The array is circular in nature, meaning the subarray can start at the beginning of the array and wrap around to the end.","solution":"def max_circular_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within a circular array. Args: arr (list): The list of numbers. Returns: int: Maximum subarray sum in the circular array. def kadane(arr): Standard Kadane's algorithm to find max subarray sum max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(arr) max_wrap = sum(arr) for i in range(len(arr)): arr[i] = -arr[i] max_wrap = max_wrap + kadane(arr) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a python function to reverse a list without using any additional data structures. The function should achieve this by swapping elements in place.","solution":"def reverse_list(lst): Reverses the list in place by swapping elements. :param lst: List to be reversed :return: The reversed list left = 0 right = len(lst) - 1 while left < right: # Swap the elements at left and right lst[left], lst[right] = lst[right], lst[left] # Move towards the middle left += 1 right -= 1 return lst"},{"question":"Write a python function to find the missing number in an array of numbers containing N elements. The array is an unsorted sequence of integers from 1 to N, with exactly one number missing.","solution":"def find_missing_number(arr): Finds the missing number in an array of numbers from 1 to N with one number missing. :param arr: List[int] - list of numbers :return: int - the missing number n = len(arr) + 1 total_sum = n * (n + 1) // 2 # Sum of the first n natural numbers actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a python function to implement a modified binary search algorithm for a sorted array of integers. This modified algorithm will find the first occurrence of a target value in the array. If the target value is not found, return -1.","solution":"def modified_binary_search(arr, target): Implements a modified binary search to find the first occurrence of a target value in a sorted array. Parameters: arr (list of int): A sorted list of integers. target (int): The target value to find. Returns: int: The index of the first occurrence of the target value in the array or -1 if not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: result = mid right = mid - 1 # Look on the left side for the first occurrence elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a python function to find the longest common suffix among a list of strings. If there is no common suffix, return an empty string. The function should be named \`longest_common_suffix\` and should take a list of strings as input.","solution":"def longest_common_suffix(strings): Returns the longest common suffix among a list of strings. If no common suffix exists, returns an empty string. if not strings: return \\"\\" # Reverse all strings in the list reversed_strings = [s[::-1] for s in strings] # Find the longest common prefix of the reversed strings shortest_reversed = min(reversed_strings, key=len) for i, char in enumerate(shortest_reversed): for other_string in reversed_strings: if other_string[i] != char: common_suffix_reversed = shortest_reversed[:i] return common_suffix_reversed[::-1] return shortest_reversed[::-1]"},{"question":"Write a python function to reverse the characters in a word.","solution":"def reverse_word(word): Returns the reverse of the given word. Parameters: word (str): The word to be reversed. Returns: str: The reversed word. return word[::-1]"},{"question":"Write a python function to calculate the total cost of items in a shopping cart. Each item in the cart is represented as a dictionary with keys 'name', 'quantity', and 'price_per_unit'. The function should return the total cost of all items in the cart.","solution":"def calculate_total_cost(cart): Calculates the total cost of items in a shopping cart. Parameters: cart (list of dict): A list of dictionaries where each dictionary represents an item with 'name' (str), 'quantity' (int), and 'price_per_unit' (float). Returns: float: The total cost of all items in the cart. total_cost = 0.0 for item in cart: total_cost += item['quantity'] * item['price_per_unit'] return total_cost"},{"question":"Write a python function to calculate the frequency of elements in a list using a hash map (dictionary in Python). The function should return a dictionary where the keys are the elements from the list and the values are the counts of their occurrences.","solution":"def calculate_frequency(lst): Returns the frequency of elements in the list as a dictionary. Parameters: lst (list): The list of elements to calculate the frequency for. Returns: dict: A dictionary with elements as keys and their frequency as values. frequency_dict = {} for item in lst: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 return frequency_dict"},{"question":"Write a python function to check the given binary tree is a binary search tree (BST). In a binary search tree, for every node, all elements in the left subtree are less than the node’s value, and all elements in the right subtree are greater. Also, the maximum element in the left subtree is less than the node’s value, and the minimum element in the right subtree is greater.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Function to check if a given binary tree is a binary search tree (BST). def validate(node, low=float('-inf'), high=float('inf')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"Write a python function to determine if a given string is a valid base-3 number. A valid base-3 number consists only of the digits '0', '1', and '2'. Your function should return \`True\` if the string is a valid base-3 number, and \`False\` otherwise.","solution":"def is_valid_base3_number(s): Returns True if the string 's' represents a valid base-3 number, False otherwise. A valid base-3 number can only contain the digits '0', '1', and '2'. if not s: # An empty string is not a valid base-3 number return False for char in s: if char not in '012': return False return True"},{"question":"Write a python function to sort a list of integers in ascending order using the bubble sort algorithm. Implement the function and then compare it with the built-in list.sort() function to check for correctness. Your function should handle lists of any length.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def is_sorted(arr): Helper function to check if a list is sorted in ascending order. return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"},{"question":"Write a python function to retrieve the latest news articles from a given news source URL and store them in an XML file. How can this be achieved using the \`requests\` and \`lxml\` libraries in Python?","solution":"import requests from lxml import etree import os def fetch_and_store_latest_news(url, xml_path): Fetches the latest news articles from given news source URL and stores them in an XML file. Args: - url (str): The URL of the news source. - xml_path (str): The path where the XML file will be saved. Returns: - str: A confirmation message that news articles have been saved. response = requests.get(url) if response.status_code != 200: return f\\"Failed to retrieve news articles. Status code: {response.status_code}\\" # Parse the response content tree = etree.HTML(response.content) # Assuming articles are in <article> tags: articles = tree.findall(\\".//article\\") # Adjust the XPath according to the actual structure # Create XML structure root = etree.Element(\\"news\\") for article in articles: news_item = etree.SubElement(root, \\"item\\") # Assuming there are <title> and <link> inside <article> title = article.find(\\".//title\\") link = article.find(\\".//a[@href]\\") if title is not None: title_elem = etree.SubElement(news_item, \\"title\\") title_elem.text = title.text if link is not None: link_elem = etree.SubElement(news_item, \\"link\\") link_elem.text = link.attrib['href'] # Write to XML file tree = etree.ElementTree(root) with open(xml_path, \\"wb\\") as f: tree.write(f, pretty_print=True, xml_declaration=True, encoding=\\"utf-8\\") return f\\"News articles have been saved to {xml_path}\\""},{"question":"Write a python function to find the most common element in a list. If there are multiple elements with the same highest frequency, return all of them as a list. Consider the function should handle an empty list and return an empty list in such a case.","solution":"from collections import Counter from typing import List, Union def most_common_elements(lst: List[int]) -> List[int]: Finds the most common element(s) in a list. If there are multiple elements with the same highest frequency, returns all of them as a list. Parameters: lst (List[int]): The input list. Returns: List[int]: A list of the most common element(s). if not lst: return [] counter = Counter(lst) max_count = max(counter.values()) return [element for element, count in counter.items() if count == max_count]"},{"question":"Write a python function to find the intersection of two arrays. The function should return a new array containing all unique elements that are present in both input arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays as a list of unique elements. # Convert both lists to sets to find unique elements and then perform intersection set1, set2 = set(arr1), set(arr2) intersected_set = set1.intersection(set2) # Convert the set back to a list before returning return list(intersected_set)"},{"question":"Write a python function to return the square of a number.","solution":"def square(number): Returns the square of the given number. return number ** 2"},{"question":"Write a python function to create a new list that contains only the elements that are present in both input lists, maintaining the order of their first appearance in the first list.","solution":"def intersect_lists(list1, list2): Returns a new list that contains only the elements that are present in both input lists, maintaining the order of their first appearance in the first list. Args: list1: The first list of elements. list2: The second list of elements. Returns: A list containing the intersection of list1 and list2, in the order of their first appearance in list1. return [item for item in list1 if item in list2]"},{"question":"Write a python function to check if a given binary string has more zeros than ones.","solution":"def has_more_zeros_than_ones(binary_string): Returns True if the given binary string has more zeros than ones, False otherwise. count_zeros = binary_string.count('0') count_ones = binary_string.count('1') return count_zeros > count_ones"},{"question":"Write a python function to filter out country codes that are not present in Europe from a list of country codes.","solution":"def filter_european_country_codes(country_codes): Filters out country codes that are not present in Europe. Args: country_codes (list): List of country codes (strings). Returns: list: List of country codes present in Europe. european_country_codes = { 'AL', 'AD', 'AM', 'AT', 'AZ', 'BY', 'BE', 'BA', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'GE', 'DE', 'GR', 'HU', 'IS', 'IE', 'IT', 'KZ', 'LV', 'LI', 'LT', 'LU', 'MT', 'MD', 'MC', 'ME', 'NL', 'MK', 'NO', 'PL', 'PT', 'RO', 'RU', 'SM', 'RS', 'SK', 'SI', 'ES', 'SE', 'CH', 'TR', 'UA', 'GB', 'VA' } return [code for code in country_codes if code in european_country_codes]"},{"question":"Write a python function to check if all numbers in a list are unique, without using any additional data structures.","solution":"def all_unique(lst): Checks if all numbers in a list are unique, without using any additional data structures. Parameters: lst (list): List of numbers to check. Returns: bool: True if all numbers are unique, False otherwise. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] == lst[j]: return False return True"},{"question":"Write a python function to print all the prime numbers between 100 and 200.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def primes_between_100_and_200(): Returns a list of all prime numbers between 100 and 200. primes = [] for num in range(100, 201): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to print all the elements of a given list that are of the integer type.","solution":"def print_integers(lst): Prints all elements of a given list that are of the integer type. for element in lst: if isinstance(element, int): print(element)"},{"question":"Write a python function to convert a given string into a list of substrings based on a delimiter. The delimiter can be a single character or a string. The function should handle both cases.","solution":"def split_string(s, delimiter): Splits the given string \`s\` into a list of substrings based on the provided \`delimiter\`. Args: s (str): The string to be split. delimiter (str): The delimiter to split the string by. Returns: List[str]: A list of substrings. return s.split(delimiter)"},{"question":"Write a python function to get the maximum number of products from a given list of products, where each product is represented as a dictionary with keys 'name', 'price', and 'quantity'. The function should consider the price and quantity together to determine which product is more valuable.","solution":"def get_most_valuable_product(products): Returns the most valuable product from a list of products. Each product is represented as a dictionary with keys 'name', 'price', and 'quantity'. The 'value' of the product is calculated as price * quantity. :param products: List of dictionaries containing product information. :return: Dictionary of the most valuable product. if not products: return None # Calculate value for each product and find the product with the maximum value max_value = 0 most_valuable_product = None for product in products: value = product['price'] * product['quantity'] if value > max_value: max_value = value most_valuable_product = product return most_valuable_product"},{"question":"Write a python function to find the maximum number of unique paths from the top-left corner to the bottom-right corner in a grid. You can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Returns the maximum number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. Movement is restricted to either right or down at any point in time. if m <= 0 or n <= 0: return 0 # Create a 2D list to store the number of unique paths to each cell dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from cell (1,1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner will have the answer return dp[m - 1][n - 1]"},{"question":"Write a python function to find the most frequent element in an array. If there is more than one such element, return all of them. Consider the array contains integers.","solution":"from collections import Counter def most_frequent_elements(arr): Returns the most frequent elements in the array. If there is more than one such element, returns all of them as a list. if not arr: return [] counter = Counter(arr) max_frequency = max(counter.values()) return [element for element, frequency in counter.items() if frequency == max_frequency]"},{"question":"Write a python function to find the number of vowels in a string. How can we do this efficiently?","solution":"def count_vowels(s): Returns the number of vowels in the given string s. This function considers both uppercase and lowercase vowels. vowels = set(\\"aeiouAEIOU\\") count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a python function to calculate the factorial of a number using recursion, and then use it to calculate the factorial of 5.","solution":"def factorial(n): Returns the factorial of a number n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1) # Calculate the factorial of 5 using the defined function factorial_of_5 = factorial(5)"},{"question":"Write a python function to determine if the first non-space character of a string is an alphabetical character and not followed by another alphabetical character or a digit.","solution":"def is_first_alpha_and_not_followed_by_alpha_or_digit(s): Determines if the first non-space character of a string is an alphabetical character and not followed by another alphabetical character or a digit. :param s: The input string :return: True if the condition is met, False otherwise # Strip leading spaces s = s.lstrip() if not s: return False # Check if the first character is an alphabetical character if s[0].isalpha(): # Check if there is a next character and if it is alphanumeric if len(s) > 1 and (s[1].isalpha() or s[1].isdigit()): return False return True return False"},{"question":"Write a python function to print the 2nd smallest number from a given list of integers.","solution":"def second_smallest(numbers): Returns the second smallest number from a given list of integers. If the list has fewer than 2 unique elements, a ValueError is raised. if len(numbers) < 2: raise ValueError(\\"List must have at least two unique elements\\") unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must have at least two unique elements\\") unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to implement linear search algorithm. The function should take an array of integers and a target integer to find in the array using linear search. Return the index of the target if found, otherwise return -1.","solution":"def linear_search(arr, target): Performs a linear search for the target in the given array. Parameters: arr (list of int): The list of integers in which to search. target (int): The integer to search for. Returns: int: The index of the target if found, otherwise -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Write a python function to find the nth Fibonacci number. Provide the code and explain the logic behind it.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to create a directed graph.","solution":"class DirectedGraph: def __init__(self): self.graph = {} def add_vertex(self, vertex): if vertex not in self.graph: self.graph[vertex] = [] def add_edge(self, start, end): if start in self.graph and end in self.graph: self.graph[start].append(end) else: raise ValueError(\\"One or both vertices not found in graph\\") def get_vertices(self): return list(self.graph.keys()) def get_edges(self): edges = [] for vertex in self.graph: for neighbor in self.graph[vertex]: edges.append((vertex, neighbor)) return edges def get_neighbors(self, vertex): if vertex in self.graph: return self.graph[vertex] else: raise ValueError(\\"Vertex not found in graph\\")"},{"question":"Write a python function to convert the first and last character of a given string to upper case. If the string length is less than 2, return the string as is.","solution":"def capitalize_first_last(s): Converts the first and last character of a given string to upper case. If the string length is less than 2, returns the string as is. Parameters: s (str): The input string Returns: str: The modified string with first and last characters in upper case if len(s) < 2: return s return s[0].upper() + s[1:-1] + s[-1].upper()"},{"question":"Write a python function to print the first k natural numbers.","solution":"def print_first_k_natural_numbers(k): Prints the first k natural numbers starting from 1. for i in range(1, k + 1): print(i)"},{"question":"Write a python function to create and return a list that contains all possible combinations of two lists elements.","solution":"from itertools import product def list_combinations(list1, list2): Returns a list of all possible combinations of the elements of list1 and list2. Args: list1: First input list. list2: Second input list. Returns: List of tuples with all possible combinations of elements from list1 and list2. return [combo for combo in product(list1, list2)]"},{"question":"Write a python function to find the shortest path between two nodes in a graph using Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start, end): Finds the shortest path between two nodes in a graph using Dijkstra's algorithm. :param graph: A dictionary where keys are nodes and values are lists of tuples (neighbor, weight) :param start: The starting node :param end: The ending node :return: The cost of the shortest path and the path itself as a list of nodes queue = [(0, start, [])] seen = set() min_dist = {start: 0} while queue: (cost, node, path) = heapq.heappop(queue) if node in seen: continue path = path + [node] seen.add(node) if node == end: return (cost, path) for neighbor, weight in graph.get(node, []): if neighbor in seen: continue prev_cost = min_dist.get(neighbor, float('inf')) new_cost = cost + weight if new_cost < prev_cost: min_dist[neighbor] = new_cost heapq.heappush(queue, (new_cost, neighbor, path)) return (float('inf'), []) # If there is no path from start to end # Example usage (can be removed or commented for final submission): # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)] # } # print(dijkstra(graph, 'A', 'D')) # Output: (4, ['A', 'B', 'C', 'D'])"},{"question":"Write a python function to merge two binary trees. The merging rule is that if two nodes overlap, then sum their values. If only one node exists, then just take that node. Return the new tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def merge_trees(t1, t2): Merge two binary trees. :param t1: TreeNode, root of the first tree :param t2: TreeNode, root of the second tree :return: TreeNode, root of the merged tree if not t1: return t2 if not t2: return t1 t1.val += t2.val t1.left = merge_trees(t1.left, t2.left) t1.right = merge_trees(t1.right, t2.right) return t1"},{"question":"Write a python function to find the two numbers in a list such that their sum is equal to a given number.","solution":"def find_two_sum(numbers, target): Finds two numbers in the list such that their sum is equal to target. :param numbers: List of integers. :param target: The target sum. :return: A tuple of the two numbers that add up to the target sum. num_dict = {} for num in numbers: complement = target - num if complement in num_dict: return (complement, num) num_dict[num] = True return None"},{"question":"Write a python function to detect loops in a linked list. If a loop is detected, return the node where the loop starts. Otherwise, return None. You can use the Floyd's Tortoise and Hare algorithm to solve this.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_loop(head): Detects if there's a loop in a linked list. If a loop exists, returns the node where the loop starts. Otherwise, returns None. Uses Floyd's Tortoise and Hare algorithm. if not head or not head.next: return None slow, fast = head, head # First phase to determine if there is a cycle. while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If the loop doesn't exist if not fast or not fast.next: return None # Second phase to find the entry point of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a python function to find the pair of elements in a list whose product is the largest in the list and return their indices.","solution":"def max_product_pair_indices(lst): Returns the indices of the pair of elements in the list whose product is the largest. if len(lst) < 2: raise ValueError(\\"List must contain at least two elements\\") max_product = float('-inf') index1, index2 = -1, -1 for i in range(len(lst)): for j in range(i + 1, len(lst)): product = lst[i] * lst[j] if product > max_product: max_product = product index1, index2 = i, j return index1, index2"},{"question":"Write a python function to find the result of exponentiation of a base and an exponent without using any built-in python function for that task.","solution":"def exponentiation(base, exponent): Calculates base raised to the power of exponent without using built-in functions. Parameters: base (int or float): The base number. exponent (int): The exponent number. Should be a non-negative integer. Returns: int or float: The result of base raised to the power of exponent. if exponent == 0: return 1 result = 1 for _ in range(exponent): result *= base return result"},{"question":"Write a python function to merge two sorted lists into a single sorted list. The newly formed list should be a flattened list that incorporates elements from both input lists while maintaining their sorted order.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A single merged and sorted list. # Initialize the pointers and the merged list i, j = 0, 0 merged_list = [] # Traverse both lists and insert smaller element from list1 or list2 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Collect remaining elements of list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Collect remaining elements of list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to find the index of the first occurrence of a target value in a sorted array. If the target is not found, return -1. Implement this without using built-in functions or the index() method.","solution":"def find_first_occurrence(arr, target): Returns the index of the first occurrence of the target value in a sorted array. If the target value is not found, returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: # Check if it's the first occurrence if mid == 0 or arr[mid - 1] != target: return mid else: right = mid - 1 elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the index of the maximum value in a list of numbers. If multiple maximum values exist, return the index of the first occurrence. If the list is empty, return -1.","solution":"def index_of_max_value(numbers): Returns the index of the maximum value in the list of numbers. If multiple maximum values exist, return the index of the first occurrence. If the list is empty, return -1. if not numbers: return -1 max_index = 0 max_value = numbers[0] for i in range(1, len(numbers)): if numbers[i] > max_value: max_value = numbers[i] max_index = i return max_index"},{"question":"Write a python function to convert a list of integers to a list of their squared values.","solution":"def square_list(int_list): Converts a list of integers to a list of their squared values. Args: int_list (list of int): A list of integers. Returns: list of int: A list containing the squared values of the input list. return [x**2 for x in int_list]"},{"question":"Write a python function to check if a number is prime or not. Your function should take an integer as input and return a boolean value (True or False) indicating whether the number is prime or not. You need to consider the edge case where the input number could be less than or equal to 1 as these are not prime numbers.","solution":"def is_prime(n): Check if a number is a prime number. Args: n (int): The number to be checked. Returns: bool: True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to read a file and print its contents. The function should handle file opening errors gracefully and also provide an option to control whether the file should be read in binary or text mode.","solution":"def read_file(filepath, binary_mode=False): Reads the contents of a file and returns it. Parameters: filepath (str): Path to the file. binary_mode (bool): If True, reads the file in binary mode, otherwise in text mode. Returns: str or bytes: Contents of the file. mode = 'rb' if binary_mode else 'r' try: with open(filepath, mode) as file: return file.read() except FileNotFoundError: return \\"File not found.\\" except PermissionError: return \\"Permission denied.\\" except Exception as e: return f\\"An error occurred: {e}\\""},{"question":"Write a python function to find the sum of all unique elements in a list. For instance, if the list contains squares of numbers from 1 to 5, like [1, 4, 9, 16, 25], the function should return the sum of these unique elements.","solution":"def sum_of_unique_elements(elements): Returns the sum of all unique elements in the list. :param elements: List of integers :return: Sum of unique integers unique_elements = set(elements) return sum(unique_elements)"},{"question":"Write a python function to check if the given list is in躺在床上模式 or not. In躺在床上模式, all the elements of the list are equal. For example, the list [2,2,2,2] is in 座地生根模式.","solution":"def check_equal_elements(lst): This function checks if all elements in the given list are equal. Parameters: lst (list): The list to be checked. Returns: bool: True if all elements are equal, False otherwise. if not lst: # An empty list can be considered as having equal elements. return True return all(x == lst[0] for x in lst)"},{"question":"Write a python function to calculate the number of working days between two dates, excluding weekends and optionally excluding public holidays.","solution":"import datetime def count_working_days(start_date, end_date, holidays=None): Calculate the number of working days between two dates, excluding weekends and optionally excluding public holidays. Parameters: - start_date: datetime.date, the start date - end_date: datetime.date, the end date - holidays: set of datetime.date, dates to be excluded as holidays (default None) Returns: - int, the number of working days if holidays is None: holidays = set() if start_date > end_date: return 0 working_days = 0 current_date = start_date while current_date <= end_date: if current_date.weekday() < 5 and current_date not in holidays: working_days += 1 current_date += datetime.timedelta(days=1) return working_days"},{"question":"Write a python function to remove duplicates from a list of numbers and return a new list. The function needs to be efficient and handle large lists.","solution":"def remove_duplicates(numbers): Returns a new list with duplicates removed from the original list of numbers. return list(set(numbers))"},{"question":"Write a python function to find the number of unique elements in a list. You should ignore duplicates.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the list. return len(set(lst))"},{"question":"Write a python function to reverse the string s, but only reverse the letters in it, while maintaining the positions of spaces and other characters unchanged.","solution":"def reverse_only_letters(s): Reverse the letters in the string \`s\` but keep the positions of spaces and other non-letter characters unchanged. letters = [c for c in s if c.isalpha()] result = [] letter_index = len(letters) - 1 for c in s: if c.isalpha(): result.append(letters[letter_index]) letter_index -= 1 else: result.append(c) return ''.join(result)"},{"question":"Write a python function to reverse the keys and values in a dictionary. If the value is not hashable, convert it to a string before reversing. Also, ensure that the original keys and values are preserved and the reversed dictionary does not lose any information.","solution":"def reverse_dictionary(input_dict): Reverses the keys and values in a dictionary. If the value is not hashable, it converts the value to a string before reversing. :param input_dict: Dictionary to be reversed :return: Reversed dictionary reversed_dict = {} for key, value in input_dict.items(): # If the value is not hashable, convert it to string if not isinstance(value, (int, float, str, tuple, frozenset)): value = str(value) reversed_dict[value] = key return reversed_dict"},{"question":"Write a python function to find all the numbers from 1 to 100 that are divisible by both 3 and 5.","solution":"def find_numbers_divisible_by_3_and_5(): Returns a list of numbers from 1 to 100 that are divisible by both 3 and 5. return [number for number in range(1, 101) if number % 3 == 0 and number % 5 == 0]"},{"question":"Write a python function to find the unique elements in a list. It should take a list as input and return a list containing only the unique elements, preserving their order in the original list.","solution":"def unique_elements(lst): Returns a list of unique elements from the input list, preserving the order of their first occurrence. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Write a python function to find the maximum element in a binary search tree (BST) using recursion. The function should return the value of the maximum element found.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_max_in_bst(root): This function returns the maximum element in a binary search tree. if root is None: return float('-inf') if root.right is None: return root.value return find_max_in_bst(root.right)"},{"question":"Write a python function to reverse a string in O(n) time complexity without using any built-in functions.","solution":"def reverse_string(s): Returns the reversed string of s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to solve a puzzle where you have to find the minimum path sum from the top-left corner to the bottom-right corner of a grid. You can only move either down or right at any point in time.","solution":"def min_path_sum(grid): Find the minimum path sum from top-left to bottom-right of a grid. Args: grid (List[List[int]]): 2D grid of non-negative integers. Returns: int: Minimum path sum. if not grid or not grid[0]: return 0 rows, columns = len(grid), len(grid[0]) # Initialize the dp matrix same as grid dp = [[0] * columns for _ in range(rows)] # Set the initial position dp[0][0] = grid[0][0] # Fill the first row by accumulating values from left to right for i in range(1, columns): dp[0][i] = dp[0][i - 1] + grid[0][i] # Fill the first column by accumulating values from top to bottom for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp matrix for i in range(1, rows): for j in range(1, columns): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The answer is in the bottom-right corner return dp[rows - 1][columns - 1]"},{"question":"Write a python function to return the index of the first occurrence of a specific target value in a sorted array of integers, searching from left to right.","solution":"def find_first_occurrence(arr, target): Returns the index of the first occurrence of target in sorted array arr. If target is not found, returns -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 # Check if mid is the first occurrence of target if (mid == 0 or arr[mid-1] < target) and arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a python function to create a new list with elements from two given lists multiplied with a given multiplier.","solution":"def multiply_lists_with_multiplier(list1, list2, multiplier): Multiplies elements from two given lists element-wise and then with a given multiplier. Args: list1: List of integers or floats. list2: List of integers or floats. multiplier: Integer or float to multiply the result of element-wise products. Returns: A new list with multiplied elements. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") return [(a * b) * multiplier for a, b in zip(list1, list2)]"},{"question":"Write a python function to find the common multiples of three numbers (x, y, and z) within a specified range (m, n). The function should return a list of these common multiples.","solution":"def common_multiples(x, y, z, m, n): Returns a list of common multiples of x, y, and z within the range [m, n]. Parameters: x, y, z (int): The numbers whose common multiples are to be found. m, n (int): The range within which to search for common multiples. Returns: list: A list of common multiples of x, y, and z within the range [m, n]. common_mults = [] for i in range(m, n+1): if i % x == 0 and i % y == 0 and i % z == 0: common_mults.append(i) return common_mults"},{"question":"Write a python function to find the Largest Sum Subarray (also known as Kadane's Algorithm).","solution":"def largest_sum_subarray(arr): Returns the largest sum of a contiguous subarray using Kadane's Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to merge two sorted linked list using non-recurssive method.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_two_sorted_linked_lists(l1, l2): Merges two sorted linked lists and returns the merged sorted linked list. prehead = ListNode(-1) prev = prehead while l1 and l2: if l1.value <= l2.value: prev.next = l1 l1 = l1.next else: prev.next = l2 l2 = l2.next prev = prev.next # At least one of l1 and l2 can still have remaining nodes, add them prev.next = l1 if l1 is not None else l2 return prehead.next"},{"question":"Write a python function to find the unique elements in two lists. The function should return a tuple containing two lists: the first list contains elements that are unique to the first list, and the second list contains elements that are unique to the second list.","solution":"def find_unique_elements(list1, list2): Returns a tuple containing two lists: the first list contains elements that are unique to the first list, and the second list contains elements that are unique to the second list. :param list1: First list of elements :param list2: Second list of elements :return: Tuple of two lists (unique to list1, unique to list2) set1 = set(list1) set2 = set(list2) unique_to_list1 = list(set1 - set2) unique_to_list2 = list(set2 - set1) return (unique_to_list1, unique_to_list2)"},{"question":"Write a python function to make the output text bold in markdown format.","solution":"def make_bold(text): Returns the input text in bold markdown format. return f\\"**{text}**\\""},{"question":"Write a python function to find the greatest integer in a list.","solution":"def find_greatest_integer(numbers): Returns the greatest integer in a list of integers. Args: numbers (list of int): List of integers. Returns: int: The greatest integer in the list. if not numbers: raise ValueError(\\"The list is empty\\") greatest = numbers[0] for number in numbers: if number > greatest: greatest = number return greatest"},{"question":"Write a python function to generateParenthesis(n) that generates all combinations of well-formed parentheses for n pairs of parentheses.","solution":"def generateParenthesis(n): Generates all combinations of well-formed parentheses for n pairs. def backtrack(S, left, right): if len(S) == 2 * n: result.append(\\"\\".join(S)) return if left < n: S.append(\\"(\\") backtrack(S, left+1, right) S.pop() if right < left: S.append(\\")\\") backtrack(S, left, right+1) S.pop() result = [] backtrack([], 0, 0) return result"},{"question":"Write a python function to find all the prime factors of a number n, where n is a positive integer.","solution":"def prime_factors(n): Returns a list of all prime factors of a given number n. factors = [] # Divide by 2 to handle even numbers separately while n % 2 == 0: factors.append(2) n //= 2 # Check odd factors from 3 onwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # If n is prime and greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a python function to find the median of two sorted arrays without merging them. The function should be efficient and work in O(log(min(n,m))) time complexity.","solution":"def findMedianSortedArrays(nums1, nums2): Returns the median of two sorted arrays. A, B = nums1, nums2 total = len(A) + len(B) half = total // 2 if len(A) > len(B): A, B = B, A l, r = 0, len(A) - 1 while True: i = (l + r) // 2 j = half - i - 2 Aleft = A[i] if i >= 0 else float(\\"-infinity\\") Aright = A[i + 1] if (i + 1) < len(A) else float(\\"infinity\\") Bleft = B[j] if j >= 0 else float(\\"-infinity\\") Bright = B[j + 1] if (j + 1) < len(B) else float(\\"infinity\\") if Aleft <= Bright and Bleft <= Aright: if total % 2: return min(Aright, Bright) return (max(Aleft, Bleft) + min(Aright, Bright)) / 2 elif Aleft > Bright: r = i - 1 else: l = i + 1"},{"question":"Write a python function to create a dictionary that stores the frequency of a given list of elements.","solution":"def frequency_dict(elements): Returns a dictionary where keys are elements from the input list and values are their respective frequencies. :param elements: List of elements :return: Dictionary with element frequencies freq_dict = {} for element in elements: if element in freq_dict: freq_dict[element] += 1 else: freq_dict[element] = 1 return freq_dict"},{"question":"Write a python function to calculate the factorial of a given number n using recursion and memoization to improve efficiency. Memoization helps in avoiding the repeated calculation of already computed factorials.","solution":"def factorial(n, memo={}): Returns the factorial of the given number n using recursion and memoization. :param n: The number to calculate the factorial for :param memo: A dictionary to store previously calculated factorials :return: The factorial of n if n in memo: return memo[n] if n == 0 or n == 1: return 1 memo[n] = n * factorial(n-1, memo) return memo[n]"},{"question":"Write a python function to sort a list of tuples by the second item. However, if the second item is the same, the function should sort by the first item. If there are still ties, sort by the third item, and so on. You may use built in functions to achieve this result.","solution":"def sort_tuples(tuples): Sorts a list of tuples by the second item. If there's a tie, it sorts by the first item, and if there are still ties, it sorts by the subsequent items. return sorted(tuples, key=lambda x: x[1:]+x[:1])"},{"question":"Write a python function to replace a character in a string with another character. The function should take three parameters: the original string, the character to be replaced, and the new character.","solution":"def replace_char(original_string, old_char, new_char): Replaces all occurrences of old_char with new_char in the original_string. Parameters: - original_string (str): The string to modify. - old_char (str): The character to be replaced. - new_char (str): The new character to replace with. Returns: - str: The modified string with old_char replaced by new_char. return original_string.replace(old_char, new_char)"},{"question":"Write a python function to create a balanced binary search tree (BST) from a sorted array.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Converts a sorted array to a balanced binary search tree (BST). :param nums: List[int] - A sorted array :return: TreeNode - The root of the balanced BST if not nums: return None def helper(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = helper(left, mid - 1) node.right = helper(mid + 1, right) return node return helper(0, len(nums) - 1)"},{"question":"Write a python function to reverse a list of integers. How could you call that function and print the result?","solution":"def reverse_list(lst): Returns the reverse of the given list of integers. return lst[::-1] # Example usage: # reversed_list = reverse_list([1, 2, 3, 4, 5]) # print(reversed_list) # Output: [5, 4, 3, 2, 1]"},{"question":"Write a python function to calculate the average of a list of numbers. Please include proper error handling for cases where the list might be empty.","solution":"def average(numbers): Returns the average of a list of numbers. If the list is empty, raises a ValueError. if not numbers: raise ValueError(\\"The list is empty\\") return sum(numbers) / len(numbers)"},{"question":"Write a python function to convert an integer to its hexadecimal representation without using the built-in hex() function. You should handle both positive and negative integers, and ensure the hexadecimal is represented with two digits for each byte.","solution":"def int_to_hex(num): Converts an integer to its hexadecimal representation. If the integer is negative, it is converted to the two's complement hexadecimal notation. if num == 0: return \\"0x0\\" elif num > 0: hex_str = hex(num)[2:].upper() return \\"0x\\" + hex_str else: # For negative numbers, calculate two's complement # Assuming we're dealing with 32-bit integers num = (1 << 32) + num hex_str = hex(num)[2:].upper() return \\"0x\\" + hex_str"},{"question":"Write a python function to return a list of even numbers from a given list of integers using list comprehension.","solution":"def get_even_numbers(int_list): Returns a list of even numbers from a given list of integers. return [num for num in int_list if num % 2 == 0]"},{"question":"Write a python function to check if the input list is empty or not","solution":"def is_list_empty(input_list): Returns True if the input list is empty, otherwise False. return len(input_list) == 0"},{"question":"Write a python function to reverse an integer number. The function should handle the case where reversing the number results in an integer overflow. If overflow is detected, the function should return 0. Assume that the input is a 32-bit signed integer.","solution":"def reverse_integer(x): Reverses an integer. Returns 0 if reversing the integer results in overflow (outside the 32-bit signed integer range). INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_number = 0 while x_abs != 0: pop = x_abs % 10 x_abs //= 10 if reversed_number > (INT_MAX - pop) // 10: return 0 # Overflow reversed_number = reversed_number * 10 + pop return sign * reversed_number"},{"question":"Write a python function to reverse the order of elements in a list. The list can contain both integers and strings. Also, the function should check if the element is a palindrome before reversing. A palindrome is a sequence that reads the same backward as forward.","solution":"def reverse_and_check_palindrome(lst): Reverses the order of elements in the list if the elements are all palindromes. Parameters: lst (list): A list of integers and strings. Returns: list: The reversed list if all elements are palindromes, otherwise the original list. def is_palindrome(e): s = str(e) return s == s[::-1] if all(is_palindrome(e) for e in lst): return lst[::-1] else: return lst"},{"question":"Write a python function to convert a given string to camelCase format. The string may contain spaces, underscores, or hyphens. For example, convert_string_to_camel_case(\\"hello world\\") should return \\"helloWorld\\".","solution":"def convert_string_to_camel_case(s): Converts a given string to camelCase format. The string may contain spaces, underscores, or hyphens. :param s: str - The input string to be converted. :return: str - The camelCase formatted string. # Split the string based on spaces, underscores, or hyphens words = s.replace('_', ' ').replace('-', ' ').split() # Capitalize the first letter of each word except the first one and join them camel_case = words[0].lower() + ''.join(word.capitalize() for word in words[1:]) return camel_case"},{"question":"Write a python function to find the second largest and second smallest numbers in an array.","solution":"def second_largest_smallest(nums): Returns a tuple containing the second largest and second smallest numbers in the array nums. If nums has fewer than 2 unique elements, return (None, None). if len(set(nums)) < 2: return (None, None) unique_nums = list(set(nums)) unique_nums.sort() second_smallest = unique_nums[1] second_largest = unique_nums[-2] return (second_smallest, second_largest)"},{"question":"Write a python function to find the minimum value in a given list of numbers using a for loop.","solution":"def find_minimum(numbers): Returns the minimum value in a given list of numbers. If the list is empty, return None. if not numbers: return None min_val = numbers[0] for number in numbers: if number < min_val: min_val = number return min_val"},{"question":"Write a python function to count the number of distinct triples in the list \`a\` such that the sum of elements in each triple is greater than a constant integer \`k\`. For example, if \`a = [1, 2, 3, 4, 5]\` and \`k = 4\`, the function should return \`4\` because there are four triples with sums greater than 4 (\`(1, 2, 3)\`, \`(1, 2, 4)\`, \`(1, 3, 4)\`, \`(2, 3, 4)\`).","solution":"def count_triples(a, k): Returns the number of distinct triples (i, j, l) in the list a such that the sum of a[i], a[j], and a[l] is greater than k. count = 0 n = len(a) # Sort the array to simplify checking triplet sums a.sort() # Iterate over possible triplet combinations for i in range(n-2): for j in range(i+1, n-1): for l in range(j+1, n): if a[i] + a[j] + a[l] > k: count += 1 return count"},{"question":"Write a python function to find the maximum number in a given list. However, if the list is empty, the function should return \`None\`. If the list contains non-numeric values, the function should raise a \`TypeError\`.","solution":"def find_max(lst): Returns the maximum number in a given list. If the list is empty, returns None. If the list contains non-numeric values, raises a TypeError. if not lst: return None if not all(isinstance(x, (int, float)) for x in lst): raise TypeError(\\"All elements in the list must be numeric\\") return max(lst)"},{"question":"Write a python function to multiply two large numbers using Karatsuba algorithm.","solution":"def karatsuba_multiply(x, y): Multiplies two integers using the Karatsuba algorithm. # Base case if x < 10 or y < 10: return x * y # Calculate the size of the numbers m = min(len(str(x)), len(str(y))) // 2 # Split the digit sequences about the middle high1, low1 = divmod(x, 10**m) high2, low2 = divmod(y, 10**m) # 3 recursive calls made to numbers approximately half the size z0 = karatsuba_multiply(low1, low2) z1 = karatsuba_multiply((low1 + high1), (low2 + high2)) z2 = karatsuba_multiply(high1, high2) return (z2 * 10**(2*m)) + ((z1 - z2 - z0) * 10**m) + z0"},{"question":"Write a python function to identify the first occurrence of a substring within a string and return its index. If the substring is not found, return -1.","solution":"def find_substring(main_str, sub_str): Finds the first occurrence of the substring sub_str in the string main_str. Returns the index of the first occurrence, or -1 if the substring is not found. return main_str.find(sub_str)"},{"question":"Write a python function to find the length of the maximum palindromic substring. A palindromic substring is a string that remains the same when read forward and backward. For example, in the string \\"babad\\", the longest palindromic substrings are \\"bab\\" and \\"aba\\", each of length 3.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string. n = len(s) if n == 0: return 0 # Table to store results of subproblems dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"Write a python function to find a local minimum value in a list. A local minimum is an element that is less than or equal to its neighbors (if they exist). If there are multiple local minimums, return the first one you find.","solution":"def find_local_minimum(arr): Returns the first local minimum value in a list. A local minimum is defined as an element which is less than or equal to its neighbors (if they exist). :param arr: List of integers :return: The first local minimum value found, or None if no local minimum exists n = len(arr) if n == 0: return None elif n == 1: return arr[0] # Check the first and last elements separately if arr[0] <= arr[1]: return arr[0] if arr[n-1] <= arr[n-2]: return arr[n-1] # Check the rest of the elements for i in range(1, n-1): if arr[i] <= arr[i-1] and arr[i] <= arr[i+1]: return arr[i] return None"},{"question":"Write a python function to find all the duplicates in a given list of integers. The function should return a list of all duplicates found, ensuring each duplicate is listed only once, regardless of its frequency in the original list.","solution":"def find_duplicates(nums): Returns a list of all duplicates found in the input list \`nums\`, listed only once. Parameters: nums (list of int): The list of integers to check for duplicates. Returns: list of int: A list of duplicates. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a python function to generate all prime numbers less than a given number n using the Sieve of Eratosthenes method.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than the given number n using the Sieve of Eratosthenes method. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [number for number, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to sort a list of integers in Ascending Order using the Quick Sort Algorithm. The function should also print the sorted array.","solution":"def quick_sort(arr): Sorts a list of integers in ascending order using the Quick Sort algorithm. Prints the sorted array. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] sorted_array = quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot) return sorted_array def sort_and_print(arr): sorted_arr = quick_sort(arr) print(sorted_arr) return sorted_arr"},{"question":"Write a python function to convert an integer to its binary representation as a string. The binary string should be prefixed with '0b'. For example, the integer 5 should be converted to '0b101'.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string prefixed with '0b'. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer prefixed with '0b'. return bin(n)"},{"question":"Write a python function to perform vertical concatenation of two numpy matrices A and B, without using the \`numpy.vstack()\` function. You should also ensure the function checks if the matrices have the same number of columns. If not, raise a ValueError.","solution":"import numpy as np def vertical_concatenate(A, B): Vertically concatenates two numpy matrices A and B without using numpy.vstack(). Parameters: A (numpy.ndarray): The first matrix to concatenate. B (numpy.ndarray): The second matrix to concatenate. Returns: numpy.ndarray: The vertically concatenated matrix. Raises: ValueError: If the matrices A and B do not have the same number of columns. if A.shape[1] != B.shape[1]: raise ValueError(\\"Matrices A and B must have the same number of columns\\") return np.concatenate((A, B), axis=0)"},{"question":"Write a python function to generate all possible subsets of a given list without duplicates. For example, given the list \`[1, 2, 2]\`, it should return \`[[1], [2], [1, 2], [2, 2], [1, 2, 2]]\`.","solution":"from itertools import combinations def generate_subsets(lst): Generate all possible subsets of a given list without duplicates. For example, given the list [1, 2, 2], it should return [[1], [2], [1, 2], [2, 2], [1, 2, 2]]. Parameters: lst (list): The input list with potential duplicate elements Returns: list: A list of all possible subsets without duplicates result = set() for r in range(1, len(lst) + 1): for subset in combinations(lst, r): result.add(tuple(sorted(subset))) return [list(subset) for subset in result]"},{"question":"Write a python function to convert a decimal number to a Roman numeral.","solution":"def decimal_to_roman(num): Converts a decimal number to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Write a python function to find the shortest subarray that needs to be sorted to make the whole array sorted.","solution":"def find_unsorted_subarray(nums): Returns the shortest subarray that needs to be sorted in place so that the whole array becomes sorted. If the entire array is already sorted, the function returns an empty list. :param nums: List[int] - The input array of integers. :return: List[int] - The subarray that needs to be sorted. n = len(nums) if n <= 1: return [] start, end = 0, -1 max_seen, min_seen = float('-inf'), float('inf') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i return nums[start:end+1] if end != -1 else []"},{"question":"Write a python function to find the minimum number of coins required to make a given amount. You can use unlimited coins of different denominations. For example, for amount = 11 and denominations = [1, 2, 5], you can use [5, 5, 1] which requires three coins.","solution":"def min_coins(amount, denominations): Find the minimum number of coins required to make the given amount. :param amount: The amount of money we need to make. :param denominations: The list of coin denominations we can use. :return: The minimum number of coins required to make the given amount. # Using a large value to initialize the dp array max_value = amount + 1 dp = [max_value] * (amount + 1) dp[0] = 0 # Base case: No coins are needed to make amount 0 for coin in denominations: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If the amount is not achievable return -1 return dp[amount] if dp[amount] != max_value else -1"},{"question":"Write a python function to reverse a sentence using stack data structure. Please provide a code snippet.","solution":"def reverse_sentence(sentence): Reverses the words in a sentence using a stack data structure. # Split the sentence into words words = sentence.split() # Initialize the stack stack = [] # Push all words to the stack for word in words: stack.append(word) # Pop all words from the stack and form the reversed sentence reversed_words = [] while stack: reversed_words.append(stack.pop()) # Join the reversed words into a sentence reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Write a python function to detect if a string is a palindrome using stack and print the output accordingly.","solution":"def is_palindrome_with_stack(s): Checks if the given string is a palindrome using a stack. A palindrome is a string that reads the same forward and backward. :param s: string to check. :return: True if the string is a palindrome, False otherwise. stack = [] string_length = len(s) # Push all characters of string into the stack for char in s: stack.append(char) # Pop all characters from the stack and build the reversed string reversed_s = ''.join(stack.pop() for _ in range(string_length)) return s == reversed_s"},{"question":"Write a python function to calculate the total cost of items in a shopping cart.","solution":"def total_cost(cart): Calculate the total cost of items in the shopping cart. Parameters: cart (list of dicts): A list of dictionaries where each dictionary represents an item with 'price' (float) and 'quantity' (int) keys. Returns: float: The total cost of the items in the cart. return sum(item['price'] * item['quantity'] for item in cart)"},{"question":"Write a python function to remove Empty List from List. Given a list, write a function that returns a new list with all the empty lists removed. Consider both direct and nested empty lists.","solution":"def remove_empty_lists(lst): Removes all empty lists from the input list, considering both direct and nested empty lists. if not isinstance(lst, list): return lst return [remove_empty_lists(i) for i in lst if not (isinstance(i, list) and not i)]"},{"question":"Write a python function to fetch the highest salary from a dictionary of employees.","solution":"def highest_salary(employee_salaries): Returns the highest salary from a dictionary of employees. :param employee_salaries: dict, where keys are employee names and values are their salaries :return: float, the highest salary if not employee_salaries: return 0 return max(employee_salaries.values())"},{"question":"Write a python function to convert an integer to its binary representation using recursion.","solution":"def int_to_binary(n): Convert an integer to its binary representation using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return \\"0\\" if n == 1: return \\"1\\" return int_to_binary(n // 2) + str(n % 2)"},{"question":"Write a python function to reverse a given list without using slicing or any built-in reverse functions. The function should modify the list in place and return the reversed list. Additionally, the function should handle cases where the input list might be empty.","solution":"def reverse_list(lst): Reverses a given list in place without using slicing or built-in reverse functions. n = len(lst) for i in range(n // 2): lst[i], lst[n - i - 1] = lst[n - i - 1], lst[i] return lst"},{"question":"Write a python function to identify the missing number in an array of distinct numbers ranging from 0 to n. The function should use constant space and linear time complexity.","solution":"def find_missing_number(arr): Find the missing number in an array containing distinct numbers from 0 to n. Args: arr (list): A list of distinct numbers from 0 to n with one number missing. Returns: int: The missing number. n = len(arr) total = n * (n + 1) // 2 sum_of_arr = sum(arr) return total - sum_of_arr"},{"question":"Write a python function to return the length of the longest substring with at most k distinct characters in a string. For example, given the string \\"eceba\\" and k = 2, the function should return 3, as the substring \\"ece\\" has the longest length with at most 2 distinct characters.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. :param s: The input string :param k: The maximum number of distinct characters allowed in the substring :return: The length of the longest substring with at most k distinct characters if k == 0 or not s: return 0 left, max_length = 0, 0 char_frequency = {} for right in range(len(s)): char_frequency[s[right]] = char_frequency.get(s[right], 0) + 1 # Shrink the window until we have at most 'k' distinct characters while len(char_frequency) > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a python function to implement a simple sieve of Eratosthenes, which is used to find all prime numbers less than n.","solution":"def sieve_of_eratosthenes(n): Return a list of all prime numbers less than n using the sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to replace a substring in a given string with another substring. The function should take three parameters: the original string, the substring to be replaced, and the new substring to replace it with. The function should return the modified string.","solution":"def replace_substring(original_string, to_replace, new_substring): Replaces all occurrences of 'to_replace' in 'original_string' with 'new_substring'. Parameters: original_string (str): The original string. to_replace (str): The substring to be replaced. new_substring (str): The substring to replace with. Returns: str: The modified string with replacements. return original_string.replace(to_replace, new_substring)"},{"question":"Write a python function to generate and return a list of all possible permutations of a given list. The function should also include an option to return permutations of a specific length if provided. Here's a function signature: \`generate_permutations(lst, length=None)\`.","solution":"from itertools import permutations def generate_permutations(lst, length=None): Generate and return all possible permutations of a given list. Optionally, return permutations of a specific length if provided. :param lst: List of elements to generate permutations from :param length: Length of permutations to generate (default is None, meaning full length) :return: List of tuples, where each tuple is a permutation of the input list if length is None: length = len(lst) return list(permutations(lst, length))"},{"question":"Write a python function to check if a given number is a perfect square. The function should return \`True\` if the number is a perfect square, otherwise return \`False\`. Assume the input number is a non-negative integer. You should not use Python's built-in \`sqrt\` function to solve this problem.","solution":"def is_perfect_square(n): Checks if the given non-negative integer n is a perfect square. :param n: non-negative integer :return: True if n is a perfect square, otherwise False if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return True i = 1 while i * i <= n: if i * i == n: return True i += 1 return False"},{"question":"Write a python function to compute the edit distance between two strings, where the only allowed operations are insertions, deletions, and substitutions.","solution":"def edit_distance(s1, s2): Computes the edit distance between two strings s1 and s2. Edit distance is defined as the minimum number of insertions, deletions, or substitutions required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Substitution return dp[m][n]"},{"question":"Write a python function to calculate the factorial of a number \`n\`. If the input is not a non-negative integer, an appropriate error message should be returned.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is not a non-negative integer, returns an appropriate error message. if not isinstance(n, int) or n < 0: return \\"Error: Input must be a non-negative integer.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to check if a string contains all unique characters. Consider both cases for letters and numbers. The function should ignore spaces.","solution":"def is_unique(s): Check if a string contains all unique characters. Ignores spaces. Args: s (str): The string to check. Returns: bool: True if all characters are unique, False otherwise. clean_string = s.replace(\\" \\", \\"\\") char_set = set() for char in clean_string: if char in char_set: return False char_set.add(char) return True"},{"question":"Write a python function to find the second maximum element in a list of numbers. If the list does not have enough elements to find a second maximum, return \`None\`.","solution":"def second_max(nums): Returns the second maximum element in the list of numbers. If the list does not have enough elements to find a second maximum, return None. if len(nums) < 2: return None first_max, second_max = float('-inf'), float('-inf') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max and num != first_max: second_max = num return second_max if second_max != float('-inf') else None"},{"question":"Write a python function to find the maximum product of any two numbers in an array. The array can contain both positive and negative numbers. What are some corner cases to consider?","solution":"def max_product_of_two(arr): Returns the maximum product of any two numbers in an array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a python function to return the minimum number in a list of numbers using recursion.","solution":"def find_minimum(lst): Returns the minimum number in a list using recursion. # Base case: if the list has only one element, return that element if len(lst) == 1: return lst[0] # Recursive case: compare the first element with the minimum of the rest of the list rest_min = find_minimum(lst[1:]) return lst[0] if lst[0] < rest_min else rest_min"},{"question":"Write a python function to find the missing number in a sequence of integers from 1 to n.","solution":"def find_missing_number(arr): Finds the missing number in a sequence of integers from 1 to n. Parameters: arr (list of int): A list of integers containing the sequence from 1 to n with one number missing. Returns: int: The missing number in the sequence. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a python function to find the second largest element in a list. If the list is empty or only contains one unique element, the function should return \`None\`.","solution":"def second_largest(nums): Returns the second largest element in a list of numbers. If the list is empty or only contains one unique element, returns None. if not nums or len(set(nums)) == 1: return None unique_nums = list(set(nums)) unique_nums.sort(reverse=True) return unique_nums[1] if len(unique_nums) > 1 else None"},{"question":"Write a python function to print all the prime numbers up to a given number n, where n is a positive integer. The function should return a list of all the prime numbers found.","solution":"def primes_up_to_n(n): Returns a list of all prime numbers up to and including n. Parameters: n (int): The upper limit integer to find prime numbers up to. Returns: list: A list of prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to print the numbers from 1 to 10 on separate lines.","solution":"def print_numbers(): Prints numbers from 1 to 10, each on a new line. for i in range(1, 11): print(i)"},{"question":"Write a python function to calculate the frequency of each character in a given string. Should the function ignore case sensitivity and consider spaces and punctuation as characters?","solution":"from collections import Counter def char_frequency(input_string): Calculate the frequency of each character in a given string, ignoring case sensitivity. Spaces and punctuation are considered. input_string = input_string.lower() return dict(Counter(input_string))"},{"question":"Write a python function to find the maximum subarray product in an array that contains both positive and negative integers. The subarray must include at least one number.","solution":"def max_subarray_product(nums): Returns the maximum product of a subarray in the given list of integers. The subarray must contain at least one number. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a python function to find the number of times a substring appears in a given string. You need to handle overlapping occurrences as well. For example, \`find_substring(\\"ababab\\", \\"ab\\")\` should return 3, as \\"ab\\" appears three times in \\"ababab\\", including overlaps.","solution":"def find_substring(s, substring): Returns the number of times the substring appears in the string s, including overlapping occurrences. count = start = 0 while start < len(s): pos = s.find(substring, start) if pos != -1: count += 1 start = pos + 1 else: break return count"},{"question":"Write a python function to calculate the nth Fibonacci number using memoization. Memoization is a technique where we store the results of expensive function calls and return the cached result when the same inputs occur again.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization. if memo is None: memo = {} # Base cases if n == 0: return 0 if n == 1: return 1 # Check if value is already computed if n in memo: return memo[n] # Compute the nth Fibonacci number recursively memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to generate the Unix timestamp for the next day at the start of the day (00:00:00).","solution":"from datetime import datetime, timedelta def next_day_start_timestamp(): Returns the Unix timestamp for the next day at the start of the day (00:00:00). now = datetime.now() next_day_start = datetime(now.year, now.month, now.day) + timedelta(days=1) timestamp = int(next_day_start.timestamp()) return timestamp"},{"question":"Write a python function to check if all elements in a given list of lists (nested list) are integers.","solution":"def are_all_elements_integers(nested_list): Checks if all elements in a nested list are integers. Arguments: nested_list -- a list of lists containing elements to be checked Returns: True if all elements are integers, False otherwise. for sublist in nested_list: if not all(isinstance(item, int) for item in sublist): return False return True"},{"question":"Write a python function to find the number of consecutive duplicates in a list.","solution":"def count_consecutive_duplicates(lst): Returns the number of consecutive duplicate elements in the list. Args: lst (list): List of elements to be checked for consecutive duplicates. Returns: int: Count of consecutive duplicate elements. if not lst: return 0 count = 0 previous_element = lst[0] for element in lst[1:]: if element == previous_element: count += 1 previous_element = element return count"},{"question":"Write a python function to find the maximum of three numbers. Please provide a detailed explanation of your approach.","solution":"def find_max_of_three(a, b, c): Returns the maximum of three numbers. The function compares three numbers and returns the highest. It uses simple comparison operators to determine which number is the largest. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a python function to find the maximum value in a list of dictionaries, where each dictionary has a single key-value pair. The key is a string, and the value is a numeric type (either integer or float). The function should return the maximum numeric value among the keys. If the list is empty, the function should raise a ValueError with the message \\"No data points to compare.\\"","solution":"def find_max_value(dicts_list): Finds the maximum numeric value in a list of dictionaries, where each dictionary has a single key-value pair. Args: dicts_list: List of dictionaries with single key-value pairs. Returns: The maximum numeric value among the values. Raises: ValueError: If the list is empty. if not dicts_list: raise ValueError(\\"No data points to compare.\\") max_value = float('-inf') for d in dicts_list: value = list(d.values())[0] if value > max_value: max_value = value return max_value"},{"question":"Write a python function to find the lowest common ancestor of a binary tree. The lowest common ancestor (LCA) is the lowest node in a tree that has both left and right children. To find the LCA, we need to traverse the tree and check if the current node is the LCA of the two children. If it is, then return the current node. If not, then continue to traverse the tree. The LCA does not necessarily have to be a leaf node, it could be any node that has both left and right children. If one of the nodes that are searched for is not present in the tree, then the LCA does not exist.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_LCA(root, p, q): Find the lowest common ancestor (LCA) of two nodes p and q in a binary tree rooted at 'root'. # Base case if not root or root == p or root == q: return root # Search left and right subtrees left = find_LCA(root.left, p, q) right = find_LCA(root.right, p, q) # If both left and right are not null, p and q are found in different subtrees if left and right: return root # Otherwise, return the non-null child, as LCA would be in that subtree return left if left else right"},{"question":"Write a python function to generate Pascal's Triangle. The function should take one argument, the number of rows, and return the Pascal's Triangle as a 2D list.","solution":"def generate_pascals_triangle(num_rows): Generates Pascal's Triangle up to the given number of rows. Args: num_rows (int): Number of rows of Pascal's Triangle to generate. Returns: list: A list of lists representing Pascal's Triangle. triangle = [] for i in range(num_rows): # Each row starts with the value 1 row = [1] * (i + 1) # Compute the values for the middle elements of the row (if any) for j in range(1, i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] # Add the computed row to the triangle triangle.append(row) return triangle"},{"question":"Write a python function to sort a list of dictionaries by a specific key using bubble sort.","solution":"def bubble_sort_dicts(arr, key): Sorts a list of dictionaries by a specific key using bubble sort. Parameters: arr (list): List of dictionaries to be sorted. key (str): The key to sort the dictionaries by. Returns: list: The sorted list of dictionaries. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j][key] > arr[j+1][key]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to generate prime numbers up to a given number n. Use the Sieve of Eratosthenes algorithm for this.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including \`n\` using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a list of boolean values representing primality of each number is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers # Implement the Sieve of Eratosthenes p = 2 while p * p <= n: if is_prime[p]: # Mark multiples of p as False indicating they are not primes for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Generate the list of primes primes = [i for i in range(n + 1) if is_prime[i]] return primes"},{"question":"Write a python function to solve a given 2D array which is not necessarily square, meaning it may have a different number of rows and columns. The function should return an array that includes all the elements from the original array but arranged in a specific pattern. The pattern is a spiral order starting from the top-left corner toward the center going clockwise.","solution":"def spiralOrder(matrix): Returns the elements of the 2D array in spiral order. if not matrix or not matrix[0]: return [] result = [] while matrix: # Add the first row result += matrix.pop(0) if matrix and matrix[0]: # Add the last element of each remaining row for row in matrix: result.append(row.pop()) if matrix: # Add the last row in reverse order result += matrix.pop()[::-1] if matrix and matrix[0]: # Add the first element of each remaining row in reverse order for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Write a python function to reverse a list without using any built-in functions or slicing techniques. The list can contain repeating elements and integers as elements.","solution":"def reverse_list(lst): Returns a reversed list without using any built-in functions or slicing techniques. reversed_list = [] for i in range(len(lst) - 1, -1, -1): reversed_list.append(lst[i]) return reversed_list"},{"question":"Write a python function to convert a list of string numbers to a list of integers.","solution":"def convert_str_list_to_int_list(str_list): Converts a list of string numbers to a list of integers. Args: str_list (list of str): List containing numbers as strings. Returns: list of int: List containing the numbers as integers. return [int(num) for num in str_list]"},{"question":"Write a python function to identify the most frequent element in a list. If there is a tie, return all elements that appear most frequently. For example, given the list \`[1, 2, 2, 3, 3, 3]\`, the function should return \`[3]\` since it appears the most frequently. If there is a tie, like in the list \`[1, 2, 2, 3, 3, 1]\`, return \`[1, 2, 3]\`.","solution":"from collections import Counter def most_frequent_elements(lst): Returns a list of the most frequent elements in lst. If there is a tie, return all elements that appear most frequently. if not lst: return [] count = Counter(lst) max_frequency = max(count.values()) return [elem for elem, freq in count.items() if freq == max_frequency]"},{"question":"Write a python function to find the minimum value in a list. The function should return the minimum value found in the list.","solution":"def find_minimum_value(numbers): Returns the minimum value in the list of numbers. :param numbers: List of numbers :return: Minimum value in the list if not numbers: raise ValueError(\\"List is empty\\") min_value = numbers[0] for num in numbers[1:]: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to find if a binary string has alternating characters or not.","solution":"def has_alternating_characters(binary_string): Returns True if the binary string has alternating characters (i.e., no two adjacent characters are the same), otherwise returns False. for i in range(1, len(binary_string)): if binary_string[i] == binary_string[i - 1]: return False return True"},{"question":"Write a python function to convert a given string to binary. You should also handle possible exceptions that may arise when the function is used incorrectly (e.g., non-binary strings).","solution":"def string_to_binary(input_string): Converts a given string to its binary representation. Each character in the string is represented by its ASCII value in binary. Parameters: input_string (str): The string to convert to binary. Returns: str: The binary representation of the input string. Raises: ValueError: If the input is not a string. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") binary_string = ' '.join(format(ord(char), '08b') for char in input_string) return binary_string"},{"question":"Write a python function to reverse the characters of a string in a stack-based manner.","solution":"def reverse_string_stack(s): Reverses the characters of a string using a stack-based approach. :param s: String to be reversed :return: Reversed string stack = list(s) reversed_s = '' while stack: reversed_s += stack.pop() return reversed_s"},{"question":"Write a python function to count the number of characters in a string without considering the case sensitivity.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. Case insensitive. s = s.lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to reverse the words in a sentence. The function should take a single string argument and return the string with the words in reverse order. If a punctuation mark (.,!?') is used at the end of a word, it should remain attached to the word.","solution":"def reverse_words(sentence): Reverses the words in a given sentence. Words retain any punctuation marks that were originally at the end. Parameters: sentence (str): The sentence to reverse words in. Returns: str: The sentence with words reversed. words = sentence.split() reversed_words = ' '.join(words[::-1]) return reversed_words"},{"question":"Write a python function to find the first character in a string that appears more than once. If all characters are unique, return -1.","solution":"def first_repeated_character(s): Finds the first character in the string that appears more than once. Returns the character if found; otherwise, returns -1. char_count = {} for char in s: if char in char_count: return char else: char_count[char] = 1 return -1"},{"question":"Write a python function to separate even numbers from a list and place them before odd numbers.","solution":"def separate_even_odd(numbers): Separates even numbers from a list and places them before odd numbers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"Write a python function to remove duplicates from an unsorted linked list. You should not use any additional storage, and the function should return the head of the modified list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(head): Remove duplicates from an unsorted linked list. :param head: ListNode, the head of the linked list :return: ListNode, the head of the linked list after duplicates are removed if not head: return head current = head while current: runner = current while runner.next: if runner.next.value == current.value: runner.next = runner.next.next else: runner = runner.next current = current.next return head def linked_list_to_list(head): Helper function to convert linked list to Python list for easier testing result = [] while head: result.append(head.value) head = head.next return result def list_to_linked_list(elements): Helper function to convert a Python list to linked list for easier testing if not elements: return None head = ListNode(elements[0]) current = head for value in elements[1:]: current.next = ListNode(value) current = current.next return head"},{"question":"Write a python function to find all occurrences of a substring in a given string and return them as a list of indices. The function should handle slicing of the input string, tuples, and raise appropriate exceptions for invalid inputs.","solution":"def find_substring_occurrences(main_string, substring): Find all occurrences of a substring in a given string. Parameters: main_string (str): The main string to search within. substring (str): The substring to search for. Returns: List[int]: A list of starting indices where substring is found in main_string. if not isinstance(main_string, str) or not isinstance(substring, str): raise TypeError(\\"Both main_string and substring must be strings.\\") if not main_string or not substring: raise ValueError(\\"Both main_string and substring cannot be empty.\\") indices = [] index = main_string.find(substring) while index != -1: indices.append(index) index = main_string.find(substring, index + 1) return indices"},{"question":"Write a python function to partition a string into n equal parts, and return a list containing the parts. If the length of the string is not divisible by n, the last part should have the remaining characters. For example, if the string is 'abcdef' and n=2, the function should return ['ab', 'cdef'].","solution":"def partition_string(s, n): Partitions the string s into n equal parts. If the string length is not divisible by n, the last part will have the remaining characters. Parameters: - s: The input string. - n: The number of parts to divide the string into. Returns: A list containing n parts of the string. length = len(s) part_size = length // n parts = [] for i in range(n-1): parts.append(s[i * part_size : (i + 1) * part_size]) parts.append(s[(n-1) * part_size :]) return parts"},{"question":"Write a python function to find the number of ways to assign a given number to an array with length n such that the sum of the array is a specific target value.","solution":"def ways_to_assign_sum(num, n, target): Returns the number of ways to assign \`num\` to an array of length \`n\` such that the sum of the array is \`target\`. if num <= 0 or n <= 0 or target <= 0: return 0 dp = [0] * (target + 1) dp[0] = 1 for _ in range(n): for t in range(target, num - 1, -1): dp[t] += dp[t - num] return dp[target]"},{"question":"Write a python function to trim leading and trailing whitespaces from a string.","solution":"def trim_whitespaces(input_string): Returns the input string with leading and trailing whitespaces removed. return input_string.strip()"},{"question":"Write a python function to find the first n elements in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first 5 elements of the Fibonacci sequence are 0, 1, 1, 2, 3. The function should take an integer n as an input and return a list containing the first n elements of the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. :param n: An integer indicating the number of elements to be returned. :return: A list containing the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to return the sum of all positive integers smaller than a given integer n and divisible by neither 3 nor 5.","solution":"def sum_of_integers(n): Returns the sum of all positive integers smaller than n and divisible by neither 3 nor 5. return sum(i for i in range(1, n) if i % 3 != 0 and i % 5 != 0)"},{"question":"Write a python function to find the nth perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors excluding itself. For example, 6 is a perfect number because 6 = 1 + 2 + 3. The first four perfect numbers are 6, 28, 496, and 8128.","solution":"def nth_perfect_number(n): Returns the nth perfect number. def is_perfect(num): Checks if a number is a perfect number. sum_divisors = sum(i for i in range(1, num) if num % i == 0) return sum_divisors == num perfect_numbers = [] candidate = 1 while len(perfect_numbers) < n: if is_perfect(candidate): perfect_numbers.append(candidate) candidate += 1 return perfect_numbers[-1]"},{"question":"Write a python function to return the most frequent element in an array. If there are multiple elements with the same highest frequency, return all such elements in a list.","solution":"from collections import Counter def most_frequent_element(arr): Returns the most frequent element(s) in the array. If there are multiple elements with the same frequency, it returns all such elements in a list. if not arr: return [] frequency = Counter(arr) max_freq = max(frequency.values()) most_frequent = [item for item, count in frequency.items() if count == max_freq] if len(most_frequent) == 1: return most_frequent[0] else: return most_frequent"},{"question":"Write a python function to find the greatest common divisor (GCD) of two numbers. You can use the Euclidean algorithm for this task.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Write a python function to generate a regular pyramid pattern of stars. The function should accept a positive integer \`n\` as an argument. The pyramid should have \`n\` lines in total. The first line should contain 1 star, the second line should contain 3 stars, and so on, increasing by 2 stars each line until the last line contains the maximum number of stars.","solution":"def generate_pyramid(n): Generates a pyramid pattern of stars. :param n: Number of lines in the pyramid. :return: A list of strings, each string representing a line in the pyramid. pyramid = [] for i in range(n): stars = '*' * (2*i + 1) spaces = ' ' * (n - i - 1) pyramid.append(spaces + stars + spaces) return pyramid"},{"question":"Write a python function to reverse a string using slicing. Then write a test function that checks the correctness of the reverse function. Ensure to test with multiple scenarios such as strings of odd lengths, even lengths, and strings with special characters.","solution":"def reverse_string(s): Returns the reversed string using slicing. return s[::-1]"},{"question":"Write a python function to find out the number of sub-arrays that have a sum equal to a given value.","solution":"def subarray_sum(nums, k): Returns the number of sub-arrays that sum up to k. :param nums: List of integers :param k: An integer representing the target sum :return: Number of sub-arrays with sum equal to k count = 0 current_sum = 0 sum_dict = {0: 1} for num in nums: current_sum += num if current_sum - k in sum_dict: count += sum_dict[current_sum - k] sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1 return count"},{"question":"Write a python function to find the intersection of two arrays using list comprehension and the count method.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays using list comprehension and the count method. return [item for item in arr1 if arr2.count(item) > 0]"},{"question":"Write a python function to find the maximum sum subarray of a given array. I want to understand the logic behind the solution and the steps involved in writing it.","solution":"def max_sum_subarray(arr): Returns the maximum sum subarray of the given array. if not arr: return 0, [] max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if current_sum + arr[i] > arr[i]: current_sum += arr[i] else: current_sum = arr[i] s = i if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, arr[start:end+1]"},{"question":"Write a python function to generate all prime numbers up to a given number.","solution":"def generate_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, n + 1): if is_prime[i]: primes.append(i) for multiple in range(i * 2, n + 1, i): is_prime[multiple] = False return primes"},{"question":"Write a python function to calculate the average of a list of numbers. Here's an example of how to use the function: \`calculate_average([10, 20, 30, 40, 50])\`","solution":"def calculate_average(numbers): Returns the average of a list of numbers. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a python function to extract the data from the given text that are between the delimiters \\"<\\" and \\">\\". These delimiters are used in HTML tags.","solution":"import re def extract_data(text): Extracts data that are between the delimiters \\"<\\" and \\">\\" in the given text. Args: text (str): The input string containing text with delimiters. Returns: list: A list of strings, each string is the data between \\"<\\" and \\">\\". return re.findall(r'<(.*?)>', text)"},{"question":"Write a python function to determine if a point (x, y) is within a boundary defined by a polygon with vertices given in a list of tuples (x0, y0), (x1, y1), ..., (xn, yn). The function should return True if the point is inside the polygon, False otherwise. The input includes the point(x, y) and a list of tuples polygon ([(x0, y0), (x1, y1), ..., (xn, yn)]). The point and all vertices of the polygon are integers. The boundary of the polygon is inclusive - a point on the boundary counts as inside.","solution":"import matplotlib.path as mplPath import numpy as np def is_point_in_polygon(x, y, polygon): Determines if a point (x, y) is inside the boundary of a polygon. Parameters: x (int): x-coordinate of the point. y (int): y-coordinate of the point. polygon (list of tuples): List of (x, y) pairs representing the vertices of the polygon. Returns: bool: True if the point is inside the polygon or on the boundary, False otherwise. # Create a matplotlib path object from the polygon vertices path = mplPath.Path(np.array(polygon)) # Returns True if point is inside or on the boundary of the polygon return path.contains_point((x, y), radius=1e-9)"},{"question":"Write a python function to reverse the words in a sentence in place. For example, if the input is \\"hello world\\", the output should be \\"world hello\\". The function should reverse each word in the sentence and then reverse the entire sentence.","solution":"def reverse_words_in_sentence(sentence): Reverses the words in a given sentence in place. :param sentence: A string representing the sentence to be reversed. :return: A string with the words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to simulate the process of opening a new tab in a browser and navigating to a URL, but with a twist: if the URL contains the word \\"error\\" anywhere in it, the tab should not navigate to the URL and instead print an error message. How can you implement this behavior in Python?","solution":"class Browser: def __init__(self): self.tabs = [] def open_new_tab(self, url): Opens a new tab with the given URL. If the URL contains the word 'error', it prints an error message and does not navigate to the URL. if 'error' in url: print(f\\"Error: The URL '{url}' contains 'error' and cannot be opened.\\") return False self.tabs.append(url) print(f\\"Navigated to {url}\\") return True"},{"question":"Write a python function to simulate a simple bank account. The account should have a balance, and methods to deposit and withdraw funds. Additionally, the account should track the transaction history.","solution":"class BankAccount: def __init__(self): self.balance = 0 self.transactions = [] def deposit(self, amount): if amount <= 0: return \\"Deposit amount must be positive.\\" self.balance += amount self.transactions.append(f\\"Deposited {amount}\\") return f\\"Deposited {amount}\\" def withdraw(self, amount): if amount <= 0: return \\"Withdrawal amount must be positive.\\" if amount > self.balance: return \\"Insufficient funds.\\" self.balance -= amount self.transactions.append(f\\"Withdrew {amount}\\") return f\\"Withdrew {amount}\\" def get_balance(self): return self.balance def get_transactions(self): return self.transactions"},{"question":"Write a python function to find the maximum sum of a subset of non-adjacent elements.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of a subset of non-adjacent elements from the list nums. if not nums: return 0 elif len(nums) == 1: return nums[0] incl = nums[0] excl = 0 for i in range(1, len(nums)): new_excl = max(incl, excl) incl = excl + nums[i] excl = new_excl return max(incl, excl)"},{"question":"Write a python function to implement a basic feed-forward neural network from scratch using numpy. The function should take parameters for the number of input features, number of hidden layers, number of neurons in hidden layers, and number of output classes.","solution":"import numpy as np def sigmoid(x): return 1 / (1 + np.exp(-x)) def feed_forward_nn(input_features, hidden_layers, hidden_neurons, output_classes): np.random.seed(0) # Initialize weights and biases for the input to first hidden layer weights_hidden = [np.random.randn(input_features, hidden_neurons)] biases_hidden = [np.random.randn(hidden_neurons)] # Initialize weights and biases for subsequent hidden layers for _ in range(1, hidden_layers): weights_hidden.append(np.random.randn(hidden_neurons, hidden_neurons)) biases_hidden.append(np.random.randn(hidden_neurons)) # Initialize weights and biases for the hidden layer to output layer weights_output = np.random.randn(hidden_neurons, output_classes) biases_output = np.random.randn(output_classes) def nn_feed_forward(X): # Pass through hidden layers activation = X for w, b in zip(weights_hidden, biases_hidden): activation = sigmoid(np.dot(activation, w) + b) # Pass through output layer output = sigmoid(np.dot(activation, weights_output) + biases_output) return output return nn_feed_forward"},{"question":"Write a python function to find the the minimum and maximum element in a list using a recursive approach.","solution":"def find_min_max_recursive(lst, min_val=float('inf'), max_val=float('-inf')): Returns the minimum and maximum value in a list using a recursive approach. Parameters: lst (list): The list of elements to find the minimum and maximum of. min_val (float, optional): The current minimum value found during recursion. max_val (float, optional): The current maximum value found during recursion. Returns: tuple: A tuple containing the minimum and maximum value. if not lst: return min_val, max_val current = lst[0] min_val = min(current, min_val) max_val = max(current, max_val) return find_min_max_recursive(lst[1:], min_val, max_val)"},{"question":"Write a python function to reverse the content of strings inside a list. Each string's content should be reversed without altering the order of the strings in the list. Return the modified list with the reversed strings. Ensure the function handles cases where the list might contain non-string elements by ignoring them and only reversing the strings.","solution":"def reverse_strings_in_list(strings): Reverses the content of each string in the list without altering the order of strings in the list. Non-string elements are ignored and retained as is. Parameters: strings (list): The list containing elements to be processed. Returns: list: A list with reversed strings and unaltered non-string elements. return [s[::-1] if isinstance(s, str) else s for s in strings]"},{"question":"Write a python function to reverse the order of elements in a list and then reverse each element in the reversed list. The function should handle both integers and strings. For example, given the list \`[1, 2, 'a', 'b']\`, the function should return \`['b', 'a', 2, 1]\`.","solution":"def reverse_and_reverse_elements(lst): Reverse the order of elements in the list and then reverse each element in the reversed list. return [str(elem)[::-1] for elem in lst[::-1]]"},{"question":"Write a python function to swap two numbers without using a temporary variable. You must use arithmetic operations for swapping.","solution":"def swap_numbers(a, b): Swaps two numbers using arithmetic operations and returns the swapped values. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a python function to count the number of times each letter appears in a string and return this as a dictionary. The function should be case-insensitive and ignore any non-alphabetic characters.","solution":"import re from collections import defaultdict def count_letters(s): Counts the number of times each letter appears in a string. Args: s (str): The input string. Returns: dict: A dictionary with letters as keys and their counts as values. s = s.lower() letter_counts = defaultdict(int) for char in s: if char.isalpha(): letter_counts[char] += 1 return dict(letter_counts)"},{"question":"Write a python function to determine the number of times a particular element appears in a list.","solution":"def count_occurrences(lst, element): Returns the number of times element appears in the list lst. return lst.count(element)"},{"question":"Write a python function to calculate the sum of the squares of the first \`n\` natural numbers. The function should use recursion and not any iterative constructs like loops.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers using recursion. if n <= 0: return 0 return n * n + sum_of_squares(n - 1)"},{"question":"Write a python function to read a file and count the number of lines.","solution":"def count_lines_in_file(file_path): Counts and returns the number of lines in the provided file. Parameters: file_path (str): The path to the file. Returns: int: The number of lines in the file. with open(file_path, 'r') as file: return sum(1 for line in file)"},{"question":"Write a python function to multiply all elements in a list by a given number. The function should take two parameters: a list of numbers (\`nums\`) and an integer (\`multiplier\`). The function should return a new list with each element of the original list multiplied by the given number.","solution":"def multiply_elements(nums, multiplier): Multiplies all elements in a list by a given number. Parameters: nums (list): List of numbers. multiplier (int): Number to multiply each element by. Returns: list: New list with each element multiplied by the given number. return [num * multiplier for num in nums]"},{"question":"Write a python function to find the unique elements in a given list and return them in the order they first appear. If there are multiple occurrences of an element, it should only appear once in the output list.","solution":"def find_unique_elements(lst): Returns a list of unique elements in the order they first appear in the input list. Args: lst (list): The input list from which to find unique elements. Returns: list: A list of unique elements in the original order. seen = set() unique = [] for element in lst: if element not in seen: unique.append(element) seen.add(element) return unique"},{"question":"Write a python function to check if a given number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. How can we optimize this function for larger numbers?","solution":"def is_prime(n): Checks if a given number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. :param n: An integer, the number to check :return: True if the number is prime, otherwise False if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to multiply two large numbers represented by their digits in a list.","solution":"def multiply_large_numbers(num1, num2): Multiplies two large numbers represented as lists of their digits. Args: num1: List[int] - The first number represented as a list of digits. num2: List[int] - The second number represented as a list of digits. Returns: List[int] - The product of the two numbers represented as a list of digits. # Convert the lists of digits to string numbers str_num1 = ''.join(map(str, num1)) str_num2 = ''.join(map(str, num2)) # Convert the string numbers to integers and multiply product = int(str_num1) * int(str_num2) # Convert the product back to a list of digits return [int(digit) for digit in str(product)]"},{"question":"Write a python function to check if número is a palindrome or not. A diferencia de un número, una palabra o frase se considera palíndromo si lee igual de izquierda a derecha que de derecha a izquierda, descartando espacios, comas, signos de puntuación, etc.","solution":"def is_palindrome_phrase(phrase): Checks if a given phrase is a palindrome, ignoring spaces, punctuation, and case. Args: phrase (str): The phrase to check. Returns: bool: True if the phrase is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_phrase = ''.join(char.lower() for char in phrase if char.isalnum()) # Check if the cleaned phrase is the same forwards and backwards return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"Write a python function to print all elements of an array in reverse order. How would you call this function and provide input/output examples?","solution":"def print_reverse(arr): Prints all elements of an array in reverse order. for element in reversed(arr): print(element)"},{"question":"Write a python function to reverse a string without using any slicing or built-in reverse methods. Your function should maintain the original case of the letters and handle special characters and numbers.","solution":"def reverse_string(s): Reverses the input string without using slicing or built-in reverse methods. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to create a program that will accept a sentence as input and return a dictionary with the frequency of each word in the sentence.","solution":"def word_frequency(sentence): Returns a dictionary with the frequency of each word in the sentence. Parameters: sentence (str): The input sentence. Returns: dict: A dictionary with words as keys and their frequencies as values. words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to extract the first 'n' characters from a given string. If the string is shorter than 'n', return the entire string.","solution":"def extract_first_n_characters(s, n): Returns the first 'n' characters from the given string 's'. If 's' is shorter than 'n', returns the entire string. return s[:n]"},{"question":"Write a python function to compute the minimum value in a given list of numbers using recursion.","solution":"def find_minimum(nums): Returns the minimum value in a list of numbers using recursion. # Base case: if the list has only one element, return that element if len(nums) == 1: return nums[0] # Recursive case: compare the first element with the minimum of the rest of the list return min(nums[0], find_minimum(nums[1:]))"},{"question":"Write a python function to remove all the duplicate values from a given list while maintaining their order.","solution":"def remove_duplicates(input_list): Removes all duplicate values from the given list while maintaining their order. Args: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed, preserving the original order. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to encode a string to Base64.","solution":"import base64 def encode_to_base64(input_string): Encodes the given string to Base64. Parameters: input_string (str): The string to be encoded. Returns: str: The Base64-encoded string. # Convert the string to bytes bytes_input = input_string.encode('utf-8') # Encode the bytes to Base64 base64_bytes = base64.b64encode(bytes_input) # Convert Base64 bytes back to a string base64_string = base64_bytes.decode('utf-8') return base64_string"},{"question":"Write a python function to check whether two strings are isomorphic. Two strings are isomorphic if the characters in the first string can be replaced to get the second string. For example, \\"paper\\" and \\"title\\" are isomorphic because we can map 'p' to 't', 'a' to 'i', 'e' to 'l', 'r' to 'e', and 'p' to 's'. Given two strings \`str1\` and \`str2\`, return \`true\` if \`str1\` and \`str2\` are isomorphic, and \`false\` otherwise.","solution":"def is_isomorphic(str1, str2): Returns True if str1 and str2 are isomorphic, False otherwise. if len(str1) != len(str2): return False mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if char1 in mapping_str1_to_str2: if mapping_str1_to_str2[char1] != char2: return False if char2 in mapping_str2_to_str1: if mapping_str2_to_str1[char2] != char1: return False mapping_str1_to_str2[char1] = char2 mapping_str2_to_str1[char2] = char1 return True"},{"question":"Write a python function to find the median of an array in an efficient way. The array length is always an odd number.","solution":"def find_median(arr): Finds the median of an array with an odd length. # Sort the array sorted_arr = sorted(arr) # Find the middle index mid_index = len(sorted_arr) // 2 # Return the median return sorted_arr[mid_index]"},{"question":"Write a python function to find the number of distinct maximal indices for an array of integers, where the maximum element in the array appears.","solution":"def count_maximal_indices(arr): Returns the number of distinct maximal indices for an array of integers, where the maximum element in the array appears. if not arr: return 0 max_value = max(arr) count = arr.count(max_value) return count"},{"question":"Write a python function to check if all values in a given dictionary are equal.","solution":"def are_all_values_equal(dictionary): Checks if all values in the given dictionary are equal. Parameters: dictionary (dict): The dictionary to check. Returns: bool: True if all values are equal, False otherwise. values = list(dictionary.values()) if not values: return True first_value = values[0] return all(value == first_value for value in values)"},{"question":"Write a python function to convert a sorted list, represented as a linked list, into a balanced binary search tree (BST). The function should take the head of the linked list as input and return the root of the BST.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedListToBST(head: ListNode) -> TreeNode: def findSize(head: ListNode) -> int: pointer = head size = 0 while pointer: size += 1 pointer = pointer.next return size def convertListToBST(left: int, right: int) -> TreeNode: nonlocal head if left > right: return None mid = (left + right) // 2 left_child = convertListToBST(left, mid - 1) node = TreeNode(head.val) node.left = left_child head = head.next node.right = convertListToBST(mid + 1, right) return node size = findSize(head) return convertListToBST(0, size - 1)"},{"question":"Write a python function to detect overlapping intervals.","solution":"def has_overlapping_intervals(intervals): Given a list of intervals, determine if any of them overlap. An interval is represented as a tuple (start, end). :param intervals: List of tuples, where each tuple represents an interval (start, end). :return: True if any intervals overlap, False otherwise. # First, sort the intervals by their starting values intervals.sort(key=lambda x: x[0]) # Compare each interval with the next one to check for overlap for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return True return False"},{"question":"Write a python function to search a specific element in a rotated array. The array is sorted in ascending order and then rotated at some pivot. For example, \`[0,1,2,4,5,6,7]\` might become \`[4,5,6,7,0,1,2]\`","solution":"def search_rotated_array(nums, target): Searches for a target element in a rotated sorted array. Args: nums : List[int] : Rotated sorted array target : int : Element to search Returns: int : Index of the target element, -1 if not found left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Check if the left side is sorted if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # Right side must be sorted else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the largest number among three input numbers.","solution":"def find_largest(a, b, c): Returns the largest number among the three input numbers a, b, and c. return max(a, b, c)"},{"question":"Write a python function to find the missing number in an array of integers. The array contains numbers from 0 to n with exactly one number missing. The function should ideally be efficient and use minimal time and space complexity.","solution":"def find_missing_number(arr): Finds the missing number in the array containing numbers from 0 to n with exactly one number missing. Parameters: arr (List[int]): The input array of integers with one number missing. Returns: int: The missing number. n = len(arr) total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a python function to generate all possible subsets of a set. The function should be recursive and should work for sets of any size.","solution":"def generate_subsets(s): Generates all possible subsets of a set. def subsets_helper(current, index): if index == len(s): results.append(current) return subsets_helper(current, index + 1) subsets_helper(current + [s[index]], index + 1) results = [] subsets_helper([], 0) return results"},{"question":"Write a python function to find the minimum element in a list. You should not use any built-in functions like min() or sort(). Implement your function iteratively.","solution":"def find_minimum(lst): Returns the minimum element in the list. if not lst: raise ValueError(\\"List is empty\\") minimum = lst[0] for num in lst[1:]: if num < minimum: minimum = num return minimum"},{"question":"Write a python function to extract and print the nth element from an array. If the index is out of range, return an error message.","solution":"def extract_nth_element(arr, n): Extracts and returns the nth element from the array. If n is out of range, returns an error message. if n < 0 or n >= len(arr): return \\"Index out of range\\" return arr[n]"},{"question":"Write a python function to find the symmetric difference between two sets.","solution":"def symmetric_difference(set1, set2): Returns the symmetric difference between two sets. return set1 ^ set2"},{"question":"Write a python function to simulate a rotating carousel. The carousel has 'n' seats, and there are 'm' passengers numbered from 1 to m. The passengers are initially seated equally spaced around the carousel. One passenger should be rotated to their immediate right neighbor every second. If a passenger is already at the last seat, they should stay there and not be rotated. The function should return the final positioning of the passengers as a list of lists, where each inner list represents the positions of passengers after 'k' seconds, with 'k' varying from 0 to m-1.","solution":"def rotate_carousel(n, m): Simulates the rotation of the carousel with \`n\` seats and \`m\` passengers. Parameters: n (int): Number of seats. m (int): Number of passengers. Returns: List[List[int]]: Final positioning of the passengers after each second. positions = [[i % n + 1 for i in range(m)]] for k in range(1, m): new_positions = positions[-1].copy() for i in range(m): if new_positions[i] < n: new_positions[i] += 1 positions.append(new_positions) return positions"},{"question":"Write a python function to check if all the characters in a string are unique using a dictionary. How can this be done in an optimized way?","solution":"def are_all_characters_unique(s): Returns True if all characters in the string are unique, otherwise False. char_dict = {} for char in s: if char in char_dict: return False char_dict[char] = True return True"},{"question":"Write a python function to perform linear regression on a dataset using the Scikit-Learn library.","solution":"from sklearn.linear_model import LinearRegression import numpy as np def perform_linear_regression(X, y): Performs linear regression on the provided dataset. Parameters: X (array-like): Feature matrix of shape (n_samples, n_features) y (array-like): Target vector of shape (n_samples,) Returns: dict: A dictionary with keys 'coef' and 'intercept' representing the coefficients and intercept of the linear regression model. model = LinearRegression() model.fit(X, y) return {'coef': model.coef_, 'intercept': model.intercept_}"},{"question":"Write a python function to reverse the words in a string, without reversing the letters of the words. The function should handle leading, trailing, and duplicate spaces.","solution":"def reverse_words(sentence): Reverse the words in the sentence without reversing the letters of the words. It also handles leading, trailing, and duplicate spaces. words = sentence.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a python function to count the occurrences of a specific character in a string. The function should take two parameters: a string and a character, and return the number of times the character occurs in the string.","solution":"def count_character_occurrences(s, char): Returns the number of times 'char' occurs in the string 's'. Parameters: s (str): The string in which to count occurrences of the character. char (str): The character to count in the string. Returns: int: The count of occurrences of the character in the string. return s.count(char)"},{"question":"Write a python function to print the all possible combinations of characters from a string.","solution":"import itertools def all_combinations(s): Returns all possible non-empty combinations of characters from the given string. if not s: return [] combinations = [] for i in range(1, len(s) + 1): for combo in itertools.combinations(s, i): combinations.append(''.join(combo)) return combinations"},{"question":"Write a python function to print numbers from 1 to 100 that are divisible by either 3 or 5.","solution":"def numbers_divisible_by_3_or_5(): Prints numbers from 1 to 100 that are divisible by either 3 or 5. for i in range(1, 101): if i % 3 == 0 or i % 5 == 0: print(i)"},{"question":"Write a python function to perform a breadth-first traversal (BFS) on a binary search tree (BST).","solution":"from collections import deque class TreeNode: def __init__(self, key): self.left = None self.right = None self.value = key def breadth_first_traversal(root): Perform a breadth-first traversal of a binary search tree. :param root: TreeNode, the root of the binary search tree :return: List[int], the list of values in breadth-first order if root is None: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Write a python function to check if a given string is a valid email address. A valid email address should follow these rules: it must contain exactly one \\"@\\" symbol, exactly one \\".\\" symbol, and the \\".\\" symbol must appear after the \\"@\\" symbol.","solution":"def is_valid_email(email): Check if a given string is a valid email address. A valid email address must contain exactly one \\"@\\" symbol, exactly one \\".\\" symbol, and the \\".\\" symbol must appear after the \\"@\\" symbol. if email.count('@') != 1: return False if email.count('.') != 1: return False at_index = email.index('@') dot_index = email.index('.') if at_index > dot_index: return False return True"},{"question":"Write a python function to return the count of all unique permutations of a string. Consider all cases, including duplicates in the string. For example, give the string \\"abca\\", the function should return 24 but if you give the string \\"abc\\", the function should return 6.","solution":"from math import factorial from collections import Counter def unique_permutations_count(s): Returns the count of all unique permutations of the string s. freq = Counter(s) denom = 1 for count in freq.values(): denom *= factorial(count) return factorial(len(s)) // denom"},{"question":"Write a python function to calculate the SHA-256 hash of a given string. Here is the function signature: \`def calculate_sha256(input_string: str) -> str\`.","solution":"import hashlib def calculate_sha256(input_string: str) -> str: Returns the SHA-256 hash of the input string. Parameters: input_string (str): The input string to hash. Returns: str: The SHA-256 hash of the input string represented as a hexadecimal string. sha256_hash = hashlib.sha256(input_string.encode()).hexdigest() return sha256_hash"},{"question":"Write a python function to calculate the sum of all odd numbers less than a given number n.","solution":"def sum_of_odds_less_than(n): Calculates the sum of all odd numbers less than a given number n. Parameters: n (int): The number up to which to sum odd numbers. Returns: int: The sum of all odd numbers less than n. return sum(i for i in range(1, n) if i % 2 != 0)"},{"question":"Write a python function to remove duplicate characters from a string.","solution":"def remove_duplicates(input_string): Removes duplicate characters from the input string while preserving the order of characters. It returns a string with unique characters only. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to generate all possible subsets of a given set. Here, a set is a collection of distinct elements. A subset can include any number of elements (including no elements or the entire set). Your function should return a list of lists, where each inner list represents a unique subset of the given set.","solution":"from itertools import chain, combinations def generate_subsets(input_set): Generates all possible subsets of a given set. :param input_set: A list of distinct elements. :return: A list of lists, each representing a unique subset of the input set. return list(chain.from_iterable(combinations(input_set, r) for r in range(len(input_set) + 1)))"},{"question":"Write a python function to generate the maximum number from a list of integers using recursion.","solution":"def find_max_recursive(numbers): Find the maximum number in a list of integers using recursion. Parameters: numbers (list of int): The list of integers to find the maximum from Returns: int: The maximum number in the list if len(numbers) == 1: return numbers[0] else: max_of_rest = find_max_recursive(numbers[1:]) return numbers[0] if numbers[0] > max_of_rest else max_of_rest"},{"question":"Write a python function to get all permutations of a given list.","solution":"from itertools import permutations def get_permutations(lst): Returns all permutations of a given list. Parameters: lst (list): The list for which permutations are to be found. Returns: list: A list of tuples, each containing a permutation of the input list. return list(permutations(lst))"},{"question":"Write a python function to find all substrings of a given string. The function should take a single argument, a string, and return a list of all possible substrings of the string, ordered from shortest to longest.","solution":"def find_all_substrings(s): Returns a list of all possible substrings of the given string, ordered from shortest to longest. substrings = [] n = len(s) for length in range(1, n + 1): # Start from length 1 to n for start in range(n - length + 1): # The start position ranges from 0 to (n-length) substrings.append(s[start:start + length]) return substrings"},{"question":"Write a python function to find the minimum value in a list of numbers. What should the function be named and what parameters should it take?","solution":"def find_min(numbers): Returns the minimum value in a list of numbers. :param numbers: List of numbers :return: Minimum value in the list if not numbers: # Handle empty list case return None min_value = numbers[0] for num in numbers: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to find the product of all numbers in a list. If the list is empty, the function should return 1.","solution":"def product_of_list(numbers): Returns the product of all numbers in the list. If the list is empty, returns 1. if not numbers: return 1 product = 1 for number in numbers: product *= number return product"},{"question":"Write a python function to print \\"Hello, World!\\" and ask the user for their name, storing it in a variable called \`username\`, and then print a personalized greeting. For example, if the user enters \\"Alice\\", the program should say, \\"Hello, Alice!\\"","solution":"def greet_user(): Prints \\"Hello, World!\\" and asks the user for their name, then prints a personalized greeting. print(\\"Hello, World!\\") username = input(\\"What is your name? \\") print(f\\"Hello, {username}!\\")"},{"question":"Write a python function to return the element that appears in a sorted array more than 50% of the time. If no such element exists, return None.","solution":"def majority_element(arr): Returns the element that appears more than 50% of the time in a sorted array. If no such element exists, return None. n = len(arr) if n == 0: return None candidate = arr[n // 2] count = arr.count(candidate) if count > n // 2: return candidate else: return None"},{"question":"Write a python function to parse and extract all email addresses from the given text. The function should return a list of unique email addresses found.","solution":"import re from typing import List def extract_emails(text: str) -> List[str]: Extract and return a list of unique email addresses from the given text. # Regular expression pattern for matching email addresses email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' # Find all matches in the text emails = re.findall(email_pattern, text) # Return a list of unique email addresses return list(set(emails))"},{"question":"Write a python function to print the first N natural numbers that are powers of two, i.e., 2^k for k in [0, N).","solution":"def powers_of_two(n): Returns the first N natural numbers that are powers of two. Parameters: n (int): The number of powers of two to return Returns: list: A list containing the first N powers of two. return [2**k for k in range(n)]"},{"question":"Write a python function to return all possible subsets of a set. For example, if the set is {1, 2}, the function should return [{}, {1}, {2}, {1, 2}].","solution":"def all_subsets(input_set): Returns all possible subsets of a given set. Parameters: input_set (set): The input set for which subsets need to be generated. Returns: list: A list of sets representing all possible subsets. input_list = list(input_set) subsets = [] n = len(input_list) # There are 2^n possible subsets. for i in range(2 ** n): subset = set() for j in range(n): if i & (1 << j): subset.add(input_list[j]) subsets.append(subset) return subsets"},{"question":"Write a python function to check if a number is prime and also find its largest divisor other than 1 and itself.","solution":"def is_prime_and_largest_divisor(n): Checks if the number n is prime and finds its largest divisor other than 1 and itself. Returns a tuple (is_prime, largest_divisor) where: - is_prime is a boolean indicating if n is prime. - largest_divisor is the largest divisor of n other than 1 and n itself. If n is prime, largest_divisor is None. if n <= 1: return (False, None) is_prime = True largest_divisor = None for i in range(2, int(n ** 0.5) + 1): if n % i == 0: is_prime = False largest_divisor = n // i break if is_prime: return (True, None) else: return (False, largest_divisor)"},{"question":"Write a python function to remove duplicates from a list while preserving the order of elements. You are not allowed to use any additional data structures. How can you achieve this with O(n) time complexity?","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of elements. Parameters: lst (list): The list from which to remove duplicates. Returns: list: A new list containing the elements from lst without duplicates. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to solve the following problem: Given a sorted linked list, delete all duplicates such that each element appears only once. The function should return the head of the modified linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_duplicates(head): Removes duplicates from a sorted linked list. :param head: ListNode, the head of the sorted linked list :return: ListNode, the head of the modified linked list with duplicates removed current = head while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head def list_to_linked_list(elements): Helper function to convert a list to a linked list. :param elements: List[int], list of elements to be converted :return: ListNode, the head of the new linked list dummy = ListNode(0) current = dummy for element in elements: current.next = ListNode(element) current = current.next return dummy.next def linked_list_to_list(head): Helper function to convert a linked list to a list. :param head: ListNode, the head of the linked list :return: List[int], the list of elements in the linked list elements = [] current = head while current: elements.append(current.val) current = current.next return elements"},{"question":"Write a python function to reverse a string in place. How to do this efficiently without using additional space?","solution":"def reverse_string_in_place(s): Reverses a string in place. Args: s (list): List of characters. Modifies the list in place without returning. left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1"},{"question":"Write a python function to find the maximum difference between two elements in a list such that the second element comes after the first element.","solution":"def max_difference(arr): Returns the maximum difference between two elements in the list such that the second element comes after the first element. if len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a python function to get the most frequent number from a given list of integers. If there are multiple numbers with the same highest frequency, return the smallest one. If the list is empty or there are no integers in the list, return \`None\`.","solution":"def most_frequent_number(nums): Returns the most frequent number from a given list of integers. If there are multiple numbers with the same highest frequency, returns the smallest one. If the list is empty or there are no integers in the list, returns None. if not nums: return None frequency = {} for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Find the number with the highest frequency most_frequent = None max_freq = 0 for num, freq in frequency.items(): if freq > max_freq or (freq == max_freq and num < most_frequent): most_frequent = num max_freq = freq return most_frequent"},{"question":"Write a python function to check whether the intersection of two lists results in an empty set or not.","solution":"def is_intersection_empty(list1, list2): Checks whether the intersection of two lists results in an empty set. :param list1: First list :param list2: Second list :return: True if the intersection is empty, False otherwise return len(set(list1) & set(list2)) == 0"},{"question":"Write a python function to count the unique list items.","solution":"def count_unique_items(lst): Returns the count of unique items in the list. return len(set(lst))"},{"question":"Write a python function to find all possible combinations of k numbers out of n to form a combination sum. The function should return all unique combinations in which the numbers sum up to the target. The same number may be chosen multiple times. The order of the combinations in the output does not matter.","solution":"def combination_sum(n, k, target): Returns all unique combinations of k numbers out of 1 to n that sum up to the target. Each number in the combination can be used multiple times. def backtrack(start, path, remaining_target): if len(path) == k: if remaining_target == 0: result.append(path[:]) # Make a deep copy of the path return for i in range(start, n + 1): if i > remaining_target: # Early stopping break path.append(i) backtrack(i, path, remaining_target - i) path.pop() result = [] backtrack(1, [], target) return result"},{"question":"Write a python function to find the number of ways to tile a 2 x N board with 2 x 1 dominoes.","solution":"def num_ways_to_tile(n): Returns the number of ways to tile a 2 x N board with 2 x 1 dominoes. if n == 0: return 1 if n == 1: return 1 # Initialize the base cases dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 # Fill the dp array using the relation dp[i] = dp[i-1] + dp[i-2] for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a python function to calculate the frequency of each word in a string.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the string s. from collections import Counter words = s.split() frequency = Counter(words) return dict(frequency)"},{"question":"Write a python function to find the length of the longest sub-string with all distinct characters for a given string.","solution":"def longest_unique_substring(s): Returns the length of the longest sub-string with all distinct characters. start = 0 max_length = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length"},{"question":"Write a python function to find the number of distinct values in a given list.","solution":"def count_distinct_values(lst): Returns the number of distinct values in the given list. return len(set(lst))"},{"question":"Write a python function to calculate the product of the first N natural numbers.","solution":"def product_of_first_n_natural_numbers(n): Returns the product of the first n natural numbers. Parameters: n (int): The number of natural numbers to consider. Returns: int: The product of the first n natural numbers. if n < 1: return 0 product = 1 for i in range(1, n + 1): product *= i return product"},{"question":"Write a python function to rotate an array to the right by k steps. For example, with k = 3, [1,2,3,4,5,6] should become [4,5,6,1,2,3].","solution":"def rotate_array(nums, k): Rotate the array to the right by k steps. :param nums: List[int] - The list of numbers to be rotated :param k: int - The number of steps to rotate the array :return: List[int] - The rotated array if not nums or k <= 0: return nums n = len(nums) k = k % n # In case k is greater than the length of the list return nums[-k:] + nums[:-k]"},{"question":"Write a python function to extract all the paragraphs from a given HTML string. A paragraph is defined as a sequence of words separated by spaces and enclosed within \`<p>\` tags. For example, \`<p>This is a paragraph.</p>\`.","solution":"from bs4 import BeautifulSoup def extract_paragraphs(html_string): Extracts all paragraphs from the given HTML string. Parameters: html_string (str): A string containing HTML content. Returns: list: A list of paragraphs extracted from the HTML content. soup = BeautifulSoup(html_string, 'html.parser') paragraphs = [] for p in soup.find_all('p'): paragraphs.append(p.get_text()) return paragraphs"},{"question":"Write a python function to find the first character that does not appear in the rest of the string and return its index. If no such character exists, return -1. For example, for the string \\"alphabet\\", the first non-repeating character is 'l', which has an index of 4.","solution":"def first_non_repeating_character(s): Find the index of the first non-repeating character in a string. If no such character exists, return -1. char_count = {} # Count the occurrences of each character for i, char in enumerate(s): if char in char_count: char_count[char]['count'] += 1 else: char_count[char] = {'count': 1, 'index': i} # Find the first character with a count of 1 for char_info in char_count.values(): if char_info['count'] == 1: return char_info['index'] return -1"},{"question":"Write a python function to reverse a linked list in-place without using any extra space. The function should take the head of the linked list as input and return the head of the reversed linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the linked list in-place and returns the new head. :param head: ListNode :return: ListNode prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the longest palindromic substring in a given string. If there are multiple substrings of the same length, return the first one you find. If there are no palindromic substrings, return an empty string.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string. :param s: Input string :return: Longest palindromic substring if not s: return \\"\\" n = len(s) start = 0 end = 0 def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): l1, r1 = expand_around_center(i, i) l2, r2 = expand_around_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"Write a python function to calculate the sum of squares from 1 to n.","solution":"def sum_of_squares(n): Returns the sum of squares from 1 to n. return sum(i*i for i in range(1, n+1))"},{"question":"Write a python function to predict the next number in a sequence of numbers.","solution":"def predict_next_number(sequence): Predicts the next number in a numerical sequence based on simple differences. Assumes the sequence is arithmetic or follows a detectable pattern in differences. Parameters: sequence (list): A list of numbers representing the sequence. Returns: int/float: The next number in the sequence. if not sequence or len(sequence) < 2: raise ValueError(\\"The sequence must contain at least two numbers.\\") # Calculate the differences between consecutive elements differences = [sequence[i + 1] - sequence[i] for i in range(len(sequence) - 1)] # Check if differences form an arithmetic sequence if all(difference == differences[0] for difference in differences): return sequence[-1] + differences[0] raise ValueError(\\"The sequence does not follow a simple arithmetic progression.\\")"},{"question":"Write a python function to convert a given string to a list of words using Python's built-in string split method.","solution":"def string_to_word_list(s): Converts a given string to a list of words using Python's built-in string split method. Parameters: s (str): Input string to be converted. Returns: list: A list of words. return s.split()"},{"question":"Write a python function to batch download files from a list of URLs.","solution":"import os import requests def batch_download(url_list, save_dir): Downloads files from a list of URLs and saves them to the specified directory. Parameters: - url_list: List of URLs (str) to download from. - save_dir: Directory (str) where files will be saved. Returns: - A list of file paths for each successfully downloaded file. - Raises ValueError if url_list is not a list or if any URL is invalid. if not isinstance(url_list, list): raise ValueError(\\"url_list must be a list of URLs.\\") if not os.path.exists(save_dir): os.makedirs(save_dir) downloaded_files = [] for url in url_list: if not isinstance(url, str): raise ValueError(f\\"Invalid URL: {url}\\") try: response = requests.get(url) response.raise_for_status() file_name = os.path.basename(url) file_path = os.path.join(save_dir, file_name) with open(file_path, 'wb') as file: file.write(response.content) downloaded_files.append(file_path) except requests.RequestException as e: print(f\\"Failed to download {url}: {e}\\") return downloaded_files"},{"question":"Write a python function to transform a given list of numbers into a string representation where each number is separated by a comma and a space.","solution":"def list_to_string(numbers): Transforms a given list of numbers into a string representation where each number is separated by a comma and a space. return ', '.join(map(str, numbers))"},{"question":"Write a python function to calculate the sum of the numbers in the upper half of a 2D list (also known as a matrix), assuming the list is a square matrix. How can this function handle an even-sized matrix as well?","solution":"def sum_upper_half(matrix): Calculate the sum of the numbers in the upper half of a square matrix, inclusive of the diagonal. Arguments: matrix -- 2D list (square matrix) Returns: int -- the sum of the numbers in the upper half of the matrix if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input must be a non-empty square matrix\\") n = len(matrix) total = 0 for i in range(n): for j in range(i, n): total += matrix[i][j] return total"},{"question":"Write a python function to find the minimum value in an array using a for loop.","solution":"def find_minimum(arr): Returns the minimum value in the array using a for loop. Parameters: arr (list): A list of numbers. Returns: number: The minimum value in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") min_value = arr[0] for num in arr: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to find the first and last occurrence of a given element in a list. If the element is not found, return \`-1\` for both indices.","solution":"def find_first_and_last_occurrence(lst, element): Returns the first and last occurrence indices of an element in a list. If the element is not found, returns -1 for both indices. first_occurrence = -1 last_occurrence = -1 for index, value in enumerate(lst): if value == element: if first_occurrence == -1: first_occurrence = index last_occurrence = index return first_occurrence, last_occurrence"},{"question":"Write a python function to count the number of times a given string appears in a list of strings using recursion.","solution":"def count_occurrences(lst, target, index=0): Counts the number of times the target string appears in the list lst using recursion. Parameters: lst (list): List of strings to search within. target (str): String to count in the list. index (int): Current index in the list (used for recursion). Returns: int: The number of occurrences of the target string in the list. if index == len(lst): return 0 elif lst[index] == target: return 1 + count_occurrences(lst, target, index + 1) else: return count_occurrences(lst, target, index + 1)"},{"question":"Write a python function to validate a string can be converted to an integer. The function should check if the string is a valid integer representation (including negative numbers and leading/trailing spaces) and return \`True\` if it is, and \`False\` otherwise.","solution":"def is_valid_integer(s): Returns True if the string can be converted to an integer, including negative numbers and strings with leading/trailing spaces. Returns False otherwise. s = s.strip() if s == '': return False if s[0] in ('-', '+'): return s[1:].isdigit() return s.isdigit()"},{"question":"Write a python function to check if one string is a rotation of another. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\".","solution":"def is_rotation(s1, s2): Check if s2 is a rotation of s1. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a python function to remove all duplicates from a list \`nums\` of integers and return the length of the new list.","solution":"def remove_duplicates(nums): Removes all duplicates from a list of integers and returns the length of the new list. :param nums: List of integers :return: Length of the list after removing duplicates nums = list(set(nums)) # Convert list to set to remove duplicates, then back to list return len(nums)"},{"question":"Write a python function to generate a Fibonacci series up to a given number n. The function should return a list containing the Fibonacci series up to the nth number.","solution":"def fibonacci_series(n): Returns the Fibonacci series up to the nth number as a list. Parameters: n (int): The number of elements in the Fibonacci series. Returns: List: A list containing the Fibonacci series up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_series = [0, 1] for i in range(2, n): next_fib = fib_series[i-1] + fib_series[i-2] fib_series.append(next_fib) return fib_series"},{"question":"Write a python function to find the nth digit of a given array after performing bitwise XOR on two arrays and then converting the result to a binary string. Suppose the resulting binary string is very long and is truncated after a certain number of digits. The goal is to determine the nth digit in the original binary string BEFORE the truncation.","solution":"def find_nth_digit(arr1, arr2, n): This function performs bitwise XOR on two arrays, converts the result to a binary string, and returns the nth digit of this binary string. Parameters: arr1 (list): First list of integers. arr2 (list): Second list of integers. n (int): The 1-based index of the digit to find in the binary string. Returns: str: The nth digit in the binary string. if len(arr1) != len(arr2): raise ValueError(\\"The input arrays must have the same length.\\") xor_result = [a ^ b for a, b in zip(arr1, arr2)] binary_str = ''.join(format(x, 'b') for x in xor_result) if n < 1 or n > len(binary_str): raise ValueError(\\"The value of n is out of the bounds of the binary string.\\") return binary_str[n - 1]"},{"question":"Write a python function to return an integer that represents the sum of the digits of a given integer. For example, if the integer is 123, the function should return 6, which is the sum of the digits 1 + 2 + 3.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer. :param n: Integer input whose digits' sum needs to be calculated. :return: Sum of digits of the input integer. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Write a python function to return the minimum element in the binary search tree. The binary search tree (BST) is defined by a class \`TreeNode\` where each node has properties \`value\`, \`left\`, and \`right\`. The tree is guaranteed to have at least one node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_min_in_bst(root: TreeNode) -> int: Returns the minimum element in the binary search tree. :param root: TreeNode, the root of the BST :return: int, the minimum value in the BST current = root while current.left is not None: current = current.left return current.value"},{"question":"Write a python function to get an input string \`s\` and an integer \`k\`, and return a modified string where every \`k\`-th character (1-indexed) is replaced with its uppercase version. For example, if \`s = \\"hello world\\"\` and \`k = 3\`, the output should be \`\\"helLo worlD\\"\`.","solution":"def uppercase_kth_character(s, k): Returns a modified string where every k-th character (1-indexed) is replaced with its uppercase version. :param s: Input string. :param k: The position interval for characters to be replaced with uppercase. :return: Modified string. if k <= 0 or not s: raise ValueError(\\"k must be a positive integer and s cannot be empty\\") # Convert string to list for mutable operations s_list = list(s) # Iterate over the string using 0-based index (1-indexed for k) for i in range(k-1, len(s), k): s_list[i] = s_list[i].upper() # Convert list back to string return ''.join(s_list)"},{"question":"Write a python function to find the number of contiguous subarrays within a given array that have a sum exactly equal to a given target sum.","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays that have a sum exactly equal to k. :param nums: List[int] - list of integers :param k: int - target sum :return: int - count of subarrays with sum equal to k count, current_sum = 0, 0 previous_sums = {0: 1} for num in nums: current_sum += num if current_sum - k in previous_sums: count += previous_sums[current_sum - k] if current_sum in previous_sums: previous_sums[current_sum] += 1 else: previous_sums[current_sum] = 1 return count"},{"question":"Write a python function to identify if a given list is sorted in ascending order. The function should return a boolean value. If the list is sorted in ascending order, the function should return True. Otherwise, it should return False.","solution":"def is_sorted_ascending(lst): Returns True if the list is sorted in ascending order; otherwise, returns False. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a python function to remove the last character from a given string. If the string is empty or has only one character, it should return an empty string.","solution":"def remove_last_char(s): Removes the last character from the given string. If the string is empty or has only one character, returns an empty string. if len(s) <= 1: return \\"\\" return s[:-1]"},{"question":"Write a python function to check if a given list of numbers is sorted in ascending order and contains no duplicate numbers. Additionally, the function should return the position of the first duplicate number if found.","solution":"def is_sorted_unique(lst): Check if a given list is sorted in ascending order and contains no duplicate numbers. Returns a tuple (bool, first_duplicate_position). If the list is sorted and unique, returns (True, None). If the list is not sorted or contains duplicates, returns (False, position_of_first_duplicate). for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False, None if lst[i] == lst[i + 1]: return False, i + 1 return True, None"},{"question":"Write a python function to calculate the factorial of a number using a loop. You should also handle the case where the user inputs a negative number, as the factorial function is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to create a list of even numbers from a given list using list comprehension.","solution":"def get_even_numbers(num_list): Returns a list of even numbers from the given list using list comprehension. return [num for num in num_list if num % 2 == 0]"},{"question":"Write a python function to reverse the order of characters within each word of a given sentence. Here is the code I wrote, but it doesn't work as intended.","solution":"def reverse_words_in_sentence(sentence): Reverses the order of characters within each word of a given sentence. Parameters: - sentence (str): The input sentence to process. Returns: - str: The processed sentence with each word's characters reversed. words = sentence.split(\\" \\") reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"Write a python function to return the sum of the digits in an integer","solution":"def sum_of_digits(number): Returns the sum of the digits in an integer. return sum(int(digit) for digit in str(abs(number)))"},{"question":"Write a python function to calculate the sum of even numbers in a list. You need to use list comprehension and the modulo operator (\`%\`) to identify even numbers.","solution":"def sum_of_even_numbers(lst): Returns the sum of even numbers in the provided list. Even numbers are identified using modulo operator (%). return sum([num for num in lst if num % 2 == 0])"},{"question":"Write a python function to split a string based on multiple delimiters, such as a comma, semicolon, or a space. The function should also ignore leading and trailing spaces around the segments after splitting.","solution":"import re def split_string(input_string): Splits the input string based on multiple delimiters (comma, semicolon, space) and trims leading and trailing white spaces from the segments after splitting. # Define the regular expression pattern for multiple delimiters pattern = r'[,s;]+' # Split the string based on the pattern and remove empty strings segments = [segment.strip() for segment in re.split(pattern, input_string) if segment.strip()] return segments"},{"question":"Write a python function to find the minimum value in a given list of numbers. The function should return the minimum value found.","solution":"def find_minimum(lst): Returns the minimum value in a given list of numbers. if not lst: raise ValueError(\\"List is empty\\") return min(lst)"},{"question":"Write a python function to find the binary representation of an integer. The function should handle large integers and return the binary representation as a string.","solution":"def int_to_binary(n): Returns the binary representation of an integer as a string. if n == 0: return \\"0b0\\" elif n < 0: return \\"-0b\\" + bin(-n)[2:] else: return \\"0b\\" + bin(n)[2:]"},{"question":"Write a python function to convert a given number from base-10 to a specified base \`n\`, where \`n\` is any integer from 2 to 9. If the base is less than 2 or greater than 9, the function should return \\"Error: Base must be between 2 and 9\\".","solution":"def to_base_n(num, base): Convert a given number from base-10 to a specified base \`n\`, where \`n\` is any integer from 2 to 9. Parameters: num (int): The base-10 number to convert. base (int): The base to convert to. Returns: str: The string representation of the number in the specified base \`n\`, or \\"Error: Base must be between 2 and 9\\" if the base is not within the valid range. if base < 2 or base > 9: return \\"Error: Base must be between 2 and 9\\" if num == 0: return \\"0\\" result = [] while num > 0: result.append(str(num % base)) num = num // base return ''.join(result[::-1])"},{"question":"Write a python function to sort a tuple of tuples based on the nth element of each inner tuple. The function should take two parameters: a tuple of tuples and an integer n, representing the nth element to sort by.","solution":"def sort_tuple_of_tuples(data, n): Sorts a tuple of tuples based on the nth element of each inner tuple. Parameters: data (tuple of tuples): The tuple of tuples to be sorted. n (int): The index of the element to sort by. Returns: tuple of tuples: The sorted tuple of tuples. return tuple(sorted(data, key=lambda x: x[n]))"},{"question":"Write a python function to calculate the median of a series of numbers, ensuring it works for any list of integers or floating-point numbers. The function should include error handling for non-list or non-numeric types in the input list.","solution":"def calculate_median(numbers): Returns the median of a list of numbers. The list can include integers and floating-point numbers. Error handling is included for non-list inputs or non-numeric types within the list. if not isinstance(numbers, list): raise TypeError(\\"Input should be a list of numbers.\\") if not all(isinstance(n, (int, float)) for n in numbers): raise ValueError(\\"All elements in the list should be integers or floating-point numbers.\\") sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n == 0: raise ValueError(\\"The list is empty.\\") mid = n // 2 if n % 2 == 0: median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2.0 else: median = sorted_numbers[mid] return median"},{"question":"Write a python function to find the binary representation of a decimal number without leading zeros.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation without leading zeros. Parameters: n (int): Decimal number to be converted. Returns: str: Binary representation of the decimal number without leading zeros. if n == 0: return \\"0\\" binary_representation = \\"\\" while n > 0: binary_representation = str(n % 2) + binary_representation n = n // 2 return binary_representation"},{"question":"Write a python function to remove duplicates from a list of strings and return the unique strings in sorted order. What's the expected output of this function if it's given the following input list: ['banana', 'apple', 'cherry', 'apple', 'banana']?","solution":"def remove_duplicates_and_sort(strings): Removes duplicates from a list of strings and returns the unique strings in sorted order. Parameters: strings (list of str): The list of strings from which to remove duplicates. Returns: list of str: Sorted list of unique strings. return sorted(set(strings)) # Example input example_input = ['banana', 'apple', 'cherry', 'apple', 'banana'] # Expected output: ['apple', 'banana', 'cherry'] print(remove_duplicates_and_sort(example_input)) # ['apple', 'banana', 'cherry']"},{"question":"Write a python function to flatten a nested list. The function should take a list that may contain integers, strings, other lists, and dictionaries as elements, and return a flat list with no nested structures. Non-iterable elements should remain unchanged. Dictionaries will be unpacked into a sequence of key-value pairs, where each pair is represented as a tuple (key, value). The function should also handle the case where the input is a single non-iterable value and not a list.","solution":"def is_non_iterable(element): Check if the element is non-iterable (besides strings). return isinstance(element, (int, float, complex, bool, bytes, type(None))) def flatten(nested_list): Flattens a nested list. Non-iterable elements are left unchanged. Dictionaries are unpacked into tuples of (key, value) pairs. if is_non_iterable(nested_list) or isinstance(nested_list, str): return [nested_list] flattened_list = [] stack = [nested_list] while stack: current = stack.pop() if isinstance(current, dict): for key, value in current.items(): flattened_list.append((key, value)) elif isinstance(current, list): for item in reversed(current): stack.append(item) else: flattened_list.append(current) return flattened_list"},{"question":"Write a python function to sort an array of integers in ascending order using the method of Insertion Sort. Here is the array: \`[37, 5, 12, 42, 31, 4, 19, 15]\`. The output should be \`[4, 5, 12, 15, 19, 31, 37, 42]\`.","solution":"def insertion_sort(arr): Sort an array of integers in ascending order using the method of Insertion Sort. :param arr: List of integers to be sorted. :return: Sorted list of integers in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1] that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr # Example usage example_array = [37, 5, 12, 42, 31, 4, 19, 15] sorted_array = insertion_sort(example_array) print(sorted_array) # Output should be [4, 5, 12, 15, 19, 31, 37, 42]"},{"question":"Write a python function to reverse the order of the elements in a list in place. The function should also handle the case where the list is empty or contains only one element.","solution":"def reverse_list_in_place(lst): Reverses the order of the elements in the list in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst"},{"question":"Write a python function to parse the given HTTP request and extract the method, path, and headers from the request.","solution":"def parse_http_request(request): Parses an HTTP request and extracts the method, path, and headers. Parameters: request (str): The raw HTTP request string. Returns: tuple: A tuple containing the method (str), path (str), and headers (dict). lines = request.split('n') method, path, _ = lines[0].split() headers = {} for line in lines[1:]: if ': ' in line: key, value = line.split(': ', 1) headers[key] = value return method, path, headers"},{"question":"Write a python function to count the number of times a given number can be divided by 2 without leaving any remainder.","solution":"def count_divisions_by_two(n): Returns the number of times a given number n can be divided by 2 without leaving a remainder. count = 0 while n % 2 == 0 and n != 0: n = n // 2 count += 1 return count"},{"question":"Write a python function to find the average of every number that appears more than once in the list. If there are not any numbers that appear more than once, the function should return \`None\`.","solution":"def average_of_repeats(numbers): Returns the average of numbers that appear more than once in the list. If no numbers appear more than once, returns None. from collections import Counter count_dict = Counter(numbers) repeated_numbers = [num for num, count in count_dict.items() if count > 1] if not repeated_numbers: return None return sum(repeated_numbers) / len(repeated_numbers)"},{"question":"Write a python function to find the nth Fibonacci number. The function should return the nth Fibonacci number. If the input number is less than 0, the function should return None.","solution":"def fibonacci(n): Returns the nth Fibonacci number. If n is less than 0, the function returns None. if n < 0: return None elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to determine if a given number is prime or not, and iterate over all the numbers from 1 to 100 to print whether each number is prime or not.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def print_prime_status_up_to_100(): Prints whether each number from 1 to 100 is prime or not. for i in range(1, 101): status = \\"Prime\\" if is_prime(i) else \\"Not Prime\\" print(f\\"{i}: {status}\\") # To call the function and print the prime status of numbers from 1 to 100 print_prime_status_up_to_100()"},{"question":"Write a python function to check the validity of a given string to make it a palindrome. A string is considered a palindrome if it reads the same backwards as forwards, ignoring spaces and case. For example, \\"A man a plan a canal Panama\\" should be considered a palindrome.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. A string is considered a palindrome if it reads the same backwards as forwards, ignoring spaces and case. # Remove spaces and convert to lower case cleaned_s = ''.join(s.split()).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find and return the second smallest number in a list. If the list contains duplicate numbers, they should count as one number.","solution":"def second_smallest(numbers): Returns the second smallest number in a list. Duplicate numbers count as one number. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to find all duplicates in an array. The function should return a list of all duplicate values. If there are no duplicates, the function should return an empty list.","solution":"def find_duplicates(nums): Returns a list of all duplicate values in the input list nums. If there are no duplicates, returns an empty list. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a python function to extract and print each line that contains a specific keyword from a given file.","solution":"def extract_lines_with_keyword(filepath, keyword): Extracts and prints each line that contains a specific keyword from a given file. Args: filepath (str): The path to the file. keyword (str): The keyword to search for in the file. Returns: list: A list of lines containing the keyword. lines_with_keyword = [] with open(filepath, 'r') as file: for line in file: if keyword in line: lines_with_keyword.append(line.strip()) return lines_with_keyword"},{"question":"Write a python function to find the maximum sum of a subarray. Given an array of integers, this function should return the maximum sum of a subarray within the given array, where a subarray is a contiguous segment of the array. For instance, given the list \`[1, -3, 2, 1, -1]\`, the function should return \`3\`, which is the sum of the subarray \`[2, 1]\`.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the given array. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to return the most common element that has a frequency higher than 50%.","solution":"def most_common_element(arr): Returns the most common element in the array if its frequency is higher than 50%. :param arr: List of elements :return: The most common element if its frequency is higher than 50%, otherwise None from collections import Counter if not arr: return None count = Counter(arr) n = len(arr) for element, frequency in count.items(): if frequency > n / 2: return element return None"},{"question":"Write a python function to find the minimum number of cuts required to partition a given string into palindromic substrings.","solution":"def min_cut_palindrome_partition(s): Returns the minimum number of cuts required to partition a given string into palindromic substrings. n = len(s) if n == 0: return 0 # Create a dp array to store the minimum cuts required for each substring cuts = [0] * n # Create a 2D array to check if substring s[i:j+1] is a palindrome pal = [[False] * n for _ in range(n)] for j in range(n): min_cut = j # Maximum cuts required for substring s[0:j+1] would be j (cut each character individually) for i in range(j + 1): if s[i] == s[j] and (j - i < 2 or pal[i + 1][j - 1]): pal[i][j] = True # If the whole substring s[0:j+1] is palindrome, no cuts are needed min_cut = 0 if i == 0 else min(min_cut, cuts[i - 1] + 1) cuts[j] = min_cut return cuts[-1]"},{"question":"Write a python function to return the first character of the last word in the sentence.","solution":"def first_char_of_last_word(sentence): Returns the first character of the last word in the sentence. if not sentence.strip(): return None # Return None if the sentence is empty or contains only whitespace words = sentence.split() last_word = words[-1] return last_word[0]"},{"question":"Write a python function to generate a random password of a given length. The password should contain a mix of uppercase letters, lowercase letters, digits, and special characters. Additionally, the function should ensure that the password does not contain sequences of three consecutive repeated characters.","solution":"import random import string def generate_random_password(length): Generate a random password of a given length. The password contains a mix of uppercase letters, lowercase letters, digits, and special characters, and does not contain sequences of three consecutive repeated characters. if length < 4: raise ValueError(\\"Password length should be at least 4.\\") # Define possible characters all_characters = string.ascii_letters + string.digits + string.punctuation while True: password = [] # Ensure the password has at least one of each type of character password.append(random.choice(string.ascii_uppercase)) password.append(random.choice(string.ascii_lowercase)) password.append(random.choice(string.digits)) password.append(random.choice(string.punctuation)) # Fill the rest of the password length with random choices remaining_length = length - 4 password += random.choices(all_characters, k=remaining_length) # Shuffle to make the order random random.shuffle(password) # Convert list to string password = ''.join(password) # Check for three consecutive repeated characters if not any(password[i] == password[i+1] == password[i+2] for i in range(length - 2)): return password"},{"question":"Write a python function to find the sum of digits of a number until the sum is a single digit number.","solution":"def sum_of_digits_until_single_digit(number): Returns the sum of digits of a number until the sum is a single digit number. while number >= 10: number = sum(int(digit) for digit in str(number)) return number"},{"question":"Write a python function to remove duplicates from a list and return a new list with unique elements. The function should not use Python's built-in set and list data structures. You need to implement a doubly linked list to store the unique elements and a hash map to facilitate lookup.","solution":"class ListNode: def __init__(self, value=None): self.value = value self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, value): new_node = ListNode(value) if not self.head: # if list is empty self.head = self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def to_list(self): result = [] current = self.head while current: result.append(current.value) current = current.next return result def remove_duplicates(input_list): Removes duplicates from the input list and returns a new list. This implementation uses a doubly linked list to store unique elements and a hash map (dictionary) to facilitate quick lookup. dll = DoublyLinkedList() seen = {} for item in input_list: if item not in seen: dll.append(item) seen[item] = True return dll.to_list()"},{"question":"Write a python function to print all numbers between 10 and 50 that are divisible by 3.","solution":"def print_divisible_by_three(): Prints all numbers between 10 and 50 that are divisible by 3. result = [i for i in range(10, 51) if i % 3 == 0] print(result) return result"},{"question":"Write a python function to count the number of words in a string sentence. The function should consider words as any sequence of characters separated by spaces.","solution":"def count_words(sentence): Returns the number of words in the given sentence. if not isinstance(sentence, str): raise ValueError(\\"Input must be a string\\") words = sentence.split() return len(words)"},{"question":"Write a python function to find the maximum and minimum number in a given list of numbers and return both of them as a tuple.","solution":"def find_max_min(numbers): Returns a tuple containing the maximum and minimum numbers in a given list. If the list is empty, returns None. Parameters: numbers (list): List of numbers Returns: tuple: (max_number, min_number) if not numbers: return None return (max(numbers), min(numbers))"},{"question":"Write a python function to merge two lists while maintaining the order of elements from both lists.","solution":"def merge_lists(list1, list2): Merges two lists while maintaining the order of elements from both lists. merged_list = [] i, j = 0, 0 len1, len2 = len(list1), len(list2) while i < len1 and j < len2: merged_list.append(list1[i]) merged_list.append(list2[j]) i += 1 j += 1 while i < len1: merged_list.append(list1[i]) i += 1 while j < len2: merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to validate a given date in the format \`YYYY-MM-DD\`. The function should return \`True\` if the date is valid and \`False\` if the date is invalid. Consider leap years and the correct number of days in each month.","solution":"import datetime def validate_date(date_str): Validate a given date in the format YYYY-MM-DD. Args: date_str (str): The date string to validate. Returns: bool: True if the date is valid, False otherwise. try: datetime.datetime.strptime(date_str, '%Y-%m-%d') return True except ValueError: return False"},{"question":"Write a python function to remove duplicates from a given list of integers, and return the list with duplicates removed, maintaining the original order of the elements. You should use only a single iteration over the list, O(n) complexity, and no extra space for another list.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list of integers while maintaining the original order and using only a single iteration over the list. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Write a python function to determine the number of occurrences of each word in a string and return a dictionary with words as keys and their counts as values.","solution":"def count_word_occurrences(text): Determines the number of occurrences of each word in a string. :param text: A string containing words. :return: A dictionary with words as keys and their counts as values. from collections import Counter words = text.split() word_counts = Counter(words) return dict(word_counts)"},{"question":"Write a python function to print all the fibonacci numbers less than 'n'","solution":"def fibonacci_less_than(n): Prints all the Fibonacci numbers less than n. a, b = 0, 1 fibonacci_numbers = [] while a < n: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers"},{"question":"Write a python function to take an integer as input and calculate and return the sum of all its digits.","solution":"def sum_of_digits(n): Returns the sum of all digits of the input number n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Write a python function to find the maximum difference between two numbers in a list, where the smaller number comes before the larger number.","solution":"def max_difference(arr): Returns the maximum difference between two numbers in a list where the smaller number comes before the larger number. :param arr: List of integers :return: Integer representing the maximum difference if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for num in arr[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"Write a python function to perform insertion sort on a list.","solution":"def insertion_sort(arr): Sorts a list using the insertion sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0...i-1], that are greater than key, # to one position ahead of their current position. while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to check if a number is a prime number. If the input number is not an integer, the function should return a custom error message. Additionally, if the number is less than 2, return another custom error message. How can you utilize \`assert\` statements to validate the correctness of your function?","solution":"def is_prime(number): Returns True if the number is prime, otherwise False. If the number is not an integer, raises a ValueError. If the number is less than 2, raises a ValueError. if not isinstance(number, int): raise ValueError(\\"Input must be an integer.\\") if number < 2: raise ValueError(\\"Number must be greater than or equal to 2 to be considered for prime.\\") for i in range(2, int(number**0.5) + 1): if number % i == 0: return False return True"},{"question":"Write a python function to find the largest sum of non-adjacent numbers in a list. The function should take a list of integers as input and return the maximum sum of any two non-adjacent numbers in the list.","solution":"def largest_sum_non_adjacent(nums): Returns the largest sum of non-adjacent numbers in the given list. if not nums: return 0 elif len(nums) <= 2: return max(nums, default=0) incl = 0 # Sum including the current element excl = 0 # Sum excluding the current element for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a python function to validate the input type and value of a variable. The function will take the name of the variable, the value to check, and the expected data type as arguments. If the value matches the expected data type, the function should return True; otherwise, it should return False.","solution":"def validate_variable(var_name, value, expected_type): Validates the type of a variable's value. Parameters: var_name (str): The name of the variable. value: The value to be checked. expected_type (type): The expected data type of the value. Returns: bool: True if value matches the expected type, False otherwise. return isinstance(value, expected_type)"},{"question":"Write a python function to generate a list of first N prime numbers. Can you do it without using any in-built functions that check if a number is prime?","solution":"def generate_primes(N): Generate a list of the first N prime numbers. :param N: Number of prime numbers to generate :return: List of the first N prime numbers if N < 1: return [] primes = [] num = 2 # First prime number while len(primes) < N: is_prime = True for p in primes: if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes"},{"question":"Write a python function to calculate the number of 32-bit binary numbers that have exactly three 1's in their binary representation.","solution":"import math def count_32bit_binaries_with_3_ones(): Returns the number of 32-bit binary numbers that have exactly three 1's in their binary representation. return math.comb(32, 3)"},{"question":"Write a python function to sort a given list of dates in the format '%Y-%m-%d'. The function should return the sorted list.","solution":"from datetime import datetime def sort_dates(date_list): Sorts a given list of dates in the format '%Y-%m-%d'. :param date_list: List of dates as strings in the format '%Y-%m-%d' :return: Sorted list of dates as strings date_objects = [datetime.strptime(date, '%Y-%m-%d') for date in date_list] sorted_date_objects = sorted(date_objects) sorted_dates = [date.strftime('%Y-%m-%d') for date in sorted_date_objects] return sorted_dates"},{"question":"Write a python function to return the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0, and 1. How can I implement this?","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is defined as: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 Args: n (int): the position in the Fibonacci sequence Returns: int: the nth Fibonacci number if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to find the maximum value that can be formed by any of the substrings of a given string. The value is defined as the difference between the ASCII value of the maximum character and the ASCII value of the minimum character in the substring.","solution":"def max_substring_value(s): Finds the maximum value that can be formed by any of the substrings of a given string. The value is defined as the difference between the ASCII value of the maximum character and the ASCII value of the minimum character in the substring. :param s: String input :return: Integer representing the maximum value if not s: return 0 max_val = 0 for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] max_char = max(substring) min_char = min(substring) current_val = ord(max_char) - ord(min_char) max_val = max(max_val, current_val) return max_val"},{"question":"Write a python function to check if a given list of integers is monotonically increasing or decreasing. A list is monotonically increasing if for all i <= j, list[i] <= list[j]. Similarly, a list is monotonically decreasing if for all i <= j, list[i] >= list[j].","solution":"def is_monotonic(lst): Check if the list of integers is monotonically increasing or decreasing. A list is monotonically increasing if for all i <= j, lst[i] <= lst[j]. Similarly, a list is monotonically decreasing if for all i <= j, lst[i] >= lst[j]. Args: lst (list): A list of integers. Returns: bool: True if the list is monotonically increasing or decreasing, False otherwise. if not lst: return True is_increasing = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) is_decreasing = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1)) return is_increasing or is_decreasing"},{"question":"Write a python function to break a list into sublists of a given size. For example, if the list is \`[1, 2, 3, 4, 5, 6]\` and the sublist size is 2, the function should return \`[[1, 2], [3, 4], [5, 6]]\`.","solution":"def chunk_list(lst, chunk_size): Breaks a list into sublists of a given size. Parameters: lst (list): The list to be chunked. chunk_size (int): The size of each chunk. Returns: list: A list of sublists, each of the specified chunk size. if chunk_size <= 0: raise ValueError(\\"chunk_size should be greater than 0\\") return [lst[i:i+chunk_size] for i in range(0, len(lst), chunk_size)]"},{"question":"Write a python function to create a list of squares of the first N natural numbers, where N is passed as an integer to the function.","solution":"def squares_of_first_n_natural_numbers(N): Returns a list of squares of the first N natural numbers. Parameters: N (int): The number of first natural numbers to square. Returns: list: A list containing the squares of the first N natural numbers. return [i**2 for i in range(1, N+1)]"},{"question":"Write a python function to find the first unique character in a string. If all characters are repeated, return -1.","solution":"def first_unique_char(s): Returns the first unique character in the string s. If all characters are repeated, returns -1. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a python function to find the second largest element in a list of integers. If the list contains less than two distinct elements, return None.","solution":"def second_largest(numbers): Returns the second largest element in the list of integers. If the list contains less than two distinct elements, return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Write a python function to solve the following problem: given two arrays x and y both with the same length, calculate the quantity of indices i and j such that i != j and x[i] = y[j].","solution":"def count_indices_pairs(x, y): Given two arrays x and y of the same length, calculate the quantity of indices i and j such that i != j and x[i] = y[j]. count = 0 length = len(x) for i in range(length): for j in range(length): if i != j and x[i] == y[j]: count += 1 return count"},{"question":"Write a python function to find the sum of all even numbers and all odd numbers in a given list. Return the sums in a dictionary format.","solution":"def sum_even_odd(numbers): Returns a dictionary with the sum of all even numbers and all odd numbers in the given list. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with keys \\"even\\" and \\"odd\\" and their corresponding sums as values. sums = {'even': 0, 'odd': 0} for number in numbers: if number % 2 == 0: sums['even'] += number else: sums['odd'] += number return sums"},{"question":"Write a python function to perform binary search using recursion to find the target value in a sorted array.","solution":"def binary_search_recursive(arr, target, left=0, right=None): Perform binary search using recursion to find the target value in a sorted array. Parameters: arr (list of int): Sorted list of integers. target (int): The value to search for. left (int): The starting index of the subarray to be searched. right (int): The ending index of the subarray to be searched. Returns: int: The index of the target if found, otherwise -1. if right is None: right = len(arr) - 1 if left > right: return -1 mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: return binary_search_recursive(arr, target, mid + 1, right) else: return binary_search_recursive(arr, target, left, mid - 1)"},{"question":"Write a python function to merge two sorted arrays into one sorted array. The function should take two lists of integers as input and return a single list containing all elements from both lists, sorted in ascending order. The function should not modify the input lists.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: A single sorted array containing all elements from both input arrays. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Add the remaining elements from both arrays while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a python function to check if a given number is perfect or not. Write a script to test the function and print all perfect numbers between a user-input range.","solution":"def is_perfect_number(n): Check if the given number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors excluding itself. if n < 2: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n def find_perfect_numbers_in_range(start, end): Find all perfect numbers in the given range [start, end]. return [n for n in range(start, end + 1) if is_perfect_number(n)]"},{"question":"Write a python function to format a large number into a comma-separated string.","solution":"def format_number(number): Formats a large number into a comma-separated string. return \\"{:,}\\".format(number)"},{"question":"Write a python function to find the common elements in three arrays.","solution":"def find_common_elements(arr1, arr2, arr3): Returns a list of common elements in three arrays. return list(set(arr1) & set(arr2) & set(arr3))"},{"question":"Write a python function to calculate the area of a circle given its radius. Your function should be named \`calculate_circle_area\` and it should take a single argument \`radius\`. The radius should be a non-negative number. If the radius is negative, the function should return \`None\`.","solution":"import math def calculate_circle_area(radius): Calculate the area of a circle given its radius. Parameters: radius (float): The radius of the circle, must be a non-negative number. Returns: float: The area of the circle if radius is non-negative, None otherwise. if radius < 0: return None return math.pi * radius ** 2"},{"question":"Write a python function to solve the following coding problem.","solution":"def multiply_elements(lst, factor): Multiplies each element in the list by the given factor and returns a new list. Parameters: lst (list): List of integers to be multiplied. factor (int): The factor by which to multiply each element. Returns: list: A new list with the multiplied elements. return [x * factor for x in lst]"},{"question":"Write a python function to find the second highest number in a list. If the list has less than two elements, return \`None\`.","solution":"def second_highest(nums): Returns the second highest number in a list. If the list has less than two elements, returns None. if len(nums) < 2: return None first = second = float('-inf') for number in nums: if number > first: first, second = number, first elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to solve 8 puzzle problem.","solution":"import heapq class PuzzleState: def __init__(self, board, moves=0, previous=None): self.board = board self.moves = moves self.previous = previous self.blank_pos = board.index(0) def __lt__(self, other): return self.total_cost() < other.total_cost() def is_goal(self): return self.board == [1, 2, 3, 4, 5, 6, 7, 8, 0] def neighbors(self): neighbors = [] x, y = divmod(self.blank_pos, 3) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < 3 and 0 <= ny < 3: new_blank_pos = nx * 3 + ny new_board = self.board[:] new_board[self.blank_pos], new_board[new_blank_pos] = new_board[new_blank_pos], new_board[self.blank_pos] neighbors.append(PuzzleState(new_board, self.moves + 1, self)) return neighbors def heuristic(self): distance = 0 for i in range(1, 9): x1, y1 = divmod(self.board.index(i), 3) x2, y2 = divmod(i - 1, 3) distance += abs(x1 - x2) + abs(y1 - y2) return distance def total_cost(self): return self.moves + self.heuristic() def solution_path(self): path = [] current = self while current is not None: path.append(current.board) current = current.previous return path[::-1] def solve_8_puzzle(initial_board): initial_state = PuzzleState(initial_board) if initial_state.is_goal(): return initial_state.solution_path() frontier = [] heapq.heappush(frontier, initial_state) explored = set() while frontier: state = heapq.heappop(frontier) if state.is_goal(): return state.solution_path() explored.add(tuple(state.board)) for neighbor in state.neighbors(): if tuple(neighbor.board) not in explored: heapq.heappush(frontier, neighbor) return None"},{"question":"Write a python function to solve the 8 queen问题, which requires placing 8 queens on an 8x8 chessboard such that no two queens threaten each other. A queen threatens another if it is on the same row, column, or diagonal.","solution":"def solve_n_queens(n=8): Solves the n-queens problem. Args: n: The size of the chessboard and the number of queens to place. Default is 8. Returns: A list of solutions. Each solution is a list of length n, where the i-th index represents the column position of the queen in the i-th row. def is_safe(board, row, col): # Check this column on upper side for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(board, row, solutions): if row == n: solutions.append(board[:]) return for col in range(n): if is_safe(board, row, col): board[row] = col solve(board, row + 1, solutions) board[row] = -1 # Reset row, backtrack solutions = [] solve([-1] * n, 0, solutions) return solutions"},{"question":"Write a python function to translate a given string to the first manner of Pig Latin. In Pig Latin, if a word starts with a vowel, add \\"way\\" to the end of the word. If a word starts with a consonant, move the first consonant to the end of the word and then add \\"ay\\". For example, 'apple' would become 'appleway' and 'banana' would become 'ananabay'.","solution":"def pig_latin(word): Translates a given string to Pig Latin. If a word starts with a vowel, add \\"way\\" to the end of the word. If a word starts with a consonant, move the first consonant to the end of the word and then add \\"ay\\". vowels = 'AEIOUaeiou' if word[0] in vowels: return word + 'way' else: return word[1:] + word[0] + 'ay'"},{"question":"Write a python function to determine if a given integer is a \\"Harshad Number\\". A Harshad Number is an integer that is divisible by the sum of its digits.","solution":"def is_harshad_number(n): Determines if a given integer is a Harshad Number. A Harshad Number is an integer that is divisible by the sum of its digits. Parameters: n (int): The number to be checked. Returns: bool: True if n is a Harshad Number, False otherwise. sum_of_digits = sum(int(digit) for digit in str(n)) return n % sum_of_digits == 0"},{"question":"Write a python function to rearrange a linked list so that all elements less than a given pivot value appear before the pivot, and all elements greater than the pivot value appear after it. The relative order of elements less than or greater than the pivot should be preserved.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rearrange_linked_list(head, pivot): if head is None: return None less_head = ListNode(0) greater_head = ListNode(0) less = less_head greater = greater_head current = head while current: if current.val < pivot: less.next = current less = less.next else: greater.next = current greater = greater.next current = current.next less.next = greater_head.next greater.next = None return less_head.next"},{"question":"Write a python function to find the n-th Fibonacci number using dynamic programming","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"The input should be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 fib = [0] * (n + 1) fib[1] = 0 fib[2] = 1 for i in range(3, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to check if a given number is divisible by 3 or 5 and return a string. If the number is divisible by 3, return \\"Fizz\\". If it's divisible by 5, return \\"Buzz\\". If it's divisible by both, return \\"FizzBuzz\\". If it's not divisible by either, return the number itself as a string. Additionally, the function should handle negative numbers and zeros.","solution":"def fizzbuzz(n): Returns \\"Fizz\\" if n is divisible by 3, \\"Buzz\\" if n is divisible by 5, \\"FizzBuzz\\" if n is divisible by both 3 and 5, otherwise the number itself as a string. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return str(n)"},{"question":"Write a python function to check if a given number is within a specific range and if it is a multiple of another number. This function should return True if both conditions are met, and False otherwise.","solution":"def is_within_range_and_multiple(number, range_start, range_end, multiple): Checks if the given number is within the range [range_start, range_end] and if it is a multiple of the specified 'multiple'. Parameters: - number: The number to check. - range_start: The beginning of the range (inclusive). - range_end: The end of the range (inclusive). - multiple: The number that 'number' should be a multiple of. Returns: - True if the number is within range and a multiple of 'multiple', False otherwise. if range_start <= number <= range_end and number % multiple == 0: return True return False"},{"question":"Write a python function to find the nth Fibonacci number using matrix exponentiation.","solution":"def fib_matrix_exponentiation(n): Returns the nth Fibonacci number using matrix exponentiation. if n <= 0: return 0 elif n == 1: return 1 # The transformation matrix for the Fibonacci sequence F = [[1, 1], [1, 0]] # Perform exponentiation to get F^(n-1) def matrix_power(matrix, power): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while power > 0: if power % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) power //= 2 return result def matrix_multiply(A, B): return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] F_n = matrix_power(F, n-1) return F_n[0][0]"},{"question":"Write a python function to implement Dijkstra's algorithm for finding the shortest path in a weighted graph. The function should take the number of vertices (n), the adjacency matrix, the source vertex, and return the shortest distances from the source to all other vertices.","solution":"import sys def dijkstra(n, adj_matrix, src): Implements Dijkstra's algorithm for finding the shortest path in a weighted graph. Parameters: n (int): Number of vertices. adj_matrix (list of list of int): The adjacency matrix representing the graph. src (int): The source vertex. Returns: dist (list of int): The shortest distances from the source to all other vertices. dist = [sys.maxsize] * n dist[src] = 0 visited = [False] * n for _ in range(n): # Find the vertex with minimum distance value, from the set of vertices not yet processed min_distance = sys.maxsize min_index = -1 for v in range(n): if not visited[v] and dist[v] < min_distance: min_distance = dist[v] min_index = v # Mark the picked vertex as processed u = min_index visited[u] = True # Update dist value of the adjacent vertices of the picked vertex. for v in range(n): if (adj_matrix[u][v] > 0 and not visited[v] and dist[u] + adj_matrix[u][v] < dist[v]): dist[v] = dist[u] + adj_matrix[u][v] return dist"},{"question":"Write a python function to get the first N prime numbers using the Sieve of Eratosthenes method.","solution":"def sieve_of_eratosthenes(n): Returns the first N prime numbers using the Sieve of Eratosthenes method. if n < 1: return [] primes = [] limit = 100 while len(primes) < n: sieve = [True] * limit sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] limit *= 2 return primes[:n]"},{"question":"Write a python function to filter a list of integers, removing any numbers that are multiples of 3.","solution":"def filter_multiples_of_three(numbers): Returns a list of integers where all multiples of 3 have been removed. Parameters: numbers (list): The list of integers. Returns: list: A list of integers not being multiples of 3. return [num for num in numbers if num % 3 != 0]"},{"question":"Write a python function to find the number of days in a month using the datetime module.","solution":"import datetime def number_of_days_in_month(year, month): Returns the number of days in a specific month of a given year. next_month = month % 12 + 1 next_month_year = year + (month // 12) first_day_of_next_month = datetime.date(next_month_year, next_month, 1) last_day_of_this_month = first_day_of_next_month - datetime.timedelta(days=1) return last_day_of_this_month.day"},{"question":"Write a python function to check whether the given string is a palindrome ignoring case sensitivity. A palindrome is a word that reads the same backward as forward, such as 'Madam' or 'racecar'. Consider only字母 and digits in the string, ignoring all other characters.","solution":"import re def is_palindrome(s): Check if the given string is a palindrome ignoring case and non-alphanumeric characters. s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return s == s[::-1]"},{"question":"Write a python function to convert a list of dictionaries into a dictionary of dictionaries. The key in the output dictionary will be the 'id' from each dictionary in the input list. The value will be another dictionary containing the 'name' and 'value' from each corresponding dictionary in the input list. If an 'id' is repeated in the input list, the corresponding entry in the output dictionary should contain a list of dictionaries, where each dictionary contains the 'name' and 'value' for that 'id'.","solution":"def convert_list_to_dict(input_list): Converts a list of dictionaries into a dictionary of dictionaries. The key in the output dictionary will be the 'id' from each dictionary in the input list. The value will be another dictionary containing the 'name' and 'value' from each corresponding dictionary in the input list. If an 'id' is repeated, the corresponding entry in the output dictionary will contain a list of dictionaries. :param input_list: List of dictionaries, each containing 'id', 'name', and 'value' keys. :return: Dictionary of dictionaries. result = {} for item in input_list: item_id = item[\\"id\\"] name_value_dict = {\\"name\\": item[\\"name\\"], \\"value\\": item[\\"value\\"]} if item_id in result: if isinstance(result[item_id], list): result[item_id].append(name_value_dict) else: result[item_id] = [result[item_id], name_value_dict] else: result[item_id] = name_value_dict return result"},{"question":"Write a python function to find the missing numbers in a list of integers between 1 and n. The function should take a single list of integers as input and return a list of missing numbers in ascending order.","solution":"def find_missing_numbers(nums): Returns a list of missing numbers in ascending order from the input list of integers. The integers are within the range of 1 and the maximum number in the list. Parameters: nums (list of int): The input list of integers. Returns: list of int: A list of missing numbers. if not nums: return [] n = max(nums) full_set = set(range(1, n + 1)) nums_set = set(nums) missing_numbers = list(full_set - nums_set) return sorted(missing_numbers)"},{"question":"Write a python function to count the number of occurrences of the substring \\"cat\\" in a string.","solution":"def count_cat_occurrences(s): Returns the number of occurrences of the substring 'cat' in the string s. return s.count('cat')"},{"question":"Write a python function to remove duplicates from a list. Ensure that the order of the original list is preserved. If there is already an existing function that achieves this in your version of Python, try not to use it. You can use other built-in functions and data structures if necessary.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the order. Parameters: lst (list): The list from which to remove duplicates. Returns: list: A list with duplicates removed, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the number of positive integers in a given list.","solution":"def count_positive_integers(lst): Returns the number of positive integers in the given list. return sum(1 for x in lst if x > 0)"},{"question":"Write a python function to find the second largest number in a list. The function should be named \`findSecondLargest\`. The function should take a list of integers as input and return the second largest integer in the list. Assume that the list will have at least two distinct elements.","solution":"def findSecondLargest(numbers): Finds the second largest number in a list of integers. Parameters: numbers (list of int): A list of integers which contains at least two distinct elements. Returns: int: The second largest integer in the list. first_largest = second_largest = float('-inf') for number in numbers: if number > first_largest: second_largest = first_largest first_largest = number elif first_largest > number > second_largest: second_largest = number return second_largest"},{"question":"Write a python function to check if two strings are anagrams or not. Two strings are anagrams if they have the same number of each character in them, regardless of the order of the characters. For example, \\"listen\\" and \\"silent\\" are anagrams. Your function should return a boolean value indicating whether the two strings are anagrams.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, else False. # Solution approach: If sorted versions of the strings are equal, they are anagrams. return sorted(str1) == sorted(str2)"},{"question":"Write a python function to calculate the sum of all even numbers between 1 to 100 without using any loops and using list comprehension and the sum() function.","solution":"def sum_of_evens(): Returns the sum of all even numbers between 1 to 100 inclusive. return sum([x for x in range(1, 101) if x % 2 == 0])"},{"question":"Write a python function to find the center of gravity (centroid) of a polygon. The function should take a list of tuples as input, where each tuple represents a point in 2D space. The coordinates are provided as (x, y). The function should return the centroid of the polygon as a tuple (x, y).","solution":"def polygon_centroid(vertices): Calculate the centroid (center of gravity) of a polygon given its vertices. :param vertices: List of tuples, where each tuple is a point (x, y) of the polygon :return: Tuple (x, y) representing the centroid of the polygon if not vertices: return (0, 0) x_sum = sum(vertex[0] for vertex in vertices) y_sum = sum(vertex[1] for vertex in vertices) n = len(vertices) centroid_x = x_sum / n centroid_y = y_sum / n return (centroid_x, centroid_y)"},{"question":"Write a python function to check if a string is a permutation of a palindrome. A string is considered a palindrome permutation if it can be rearranged to form a palindrome. For example, \\"Tact Coa\\" is a permutation of a palindrome because \\"Tact Coa\\" can be permuted to \\"taco cat\\" or \\"atco eta\\". Note: Ignore case sensitivity and non-alphanumeric characters should be ignored.","solution":"def is_palindrome_permutation(s): Check if the string \`s\` is a permutation of a palindrome. Ignore case and non-alphanumeric characters. # Normalize the string to lower case and remove non-alphanumeric characters sanitized_str = ''.join(char.lower() for char in s if char.isalnum()) # Create a set to track characters with odd counts char_set = set() for char in sanitized_str: if char in char_set: char_set.remove(char) else: char_set.add(char) # String can have at most one character with an odd count to be a palindrome permutation return len(char_set) <= 1"},{"question":"Write a python function to count the number of occurrences of a given string within another string, ignoring case sensitivity.","solution":"def count_occurrences(substring, string): Returns the count of occurrences of substring within string, ignoring case sensitivity. Args: substring (str): The substring to search for within the string. string (str): The string in which to search for the substring. Returns: int: The count of occurrences of the substring within the string. return string.lower().count(substring.lower())"},{"question":"Write a python function to find the number of connected components in an undirected graph using the Union-Find (Disjoint Set Union) data structure.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def count_components(n, edges): Returns the number of connected components in an undirected graph. Parameters: n (int): number of nodes in the graph edges (List[List[int]]): edges in the graph Returns: int: number of connected components uf = UnionFind(n) for u, v in edges: uf.union(u, v) # Count unique root parents unique_roots = set(uf.find(i) for i in range(n)) return len(unique_roots)"},{"question":"Write a python function to find the minimum number of coins required to make a certain amount of money. You are given an unlimited supply of coins of denominations d1, d2, and d3. For example, if the denominations are [1, 3, 4] and the target amount is 7, the minimum number of coins needed to make 7 is 2 (3+4).","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make the given amount. :param coins: List of coin denominations. :param amount: Target amount. :return: Minimum number of coins required to make the amount or -1 if it's not possible. # Initialize dp array with infinity and 0 at the 0th index dp = [float('inf')] * (amount + 1) dp[0] = 0 # Update dp array for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to check if two input strings are anagrams of each other. Two strings are considered anagrams if they can be formed by rearranging the letters of the other string, ignoring spaces and case sensitivity.","solution":"def are_anagrams(str1, str2): Check if the two input strings are anagrams of each other. :param str1: The first string. :param str2: The second string. :return: True if the strings are anagrams, False otherwise. # Remove spaces and convert to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Check if sorted characters of both strings are equal return sorted(str1) == sorted(str2)"},{"question":"Write a python function to detect a cycle in an undirected graph using DFS. The graph will be represented as an adjacency list.","solution":"def detect_cycle(graph): Detects a cycle in an undirected graph using DFS. :param graph: Dict representing an adjacency list of the graph. :return: True if there's a cycle, False otherwise. def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False visited = set() for node in graph: if node not in visited: if dfs(node, None): return True return False"},{"question":"Write a python function to find the intersection of two lists, ensuring that the resulting list contains unique elements only.","solution":"def list_intersection(list1, list2): Returns a list of unique elements that are common to both list1 and list2. return list(set(list1) & set(list2))"},{"question":"Write a python function to reverse a string without using slicing or built-in string reversal methods. Additionally, the function should handle strings with special characters and numbers.","solution":"def reverse_string(s): Returns the reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to find the longest palindrome in a given string. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, e.g., madam, racecar).","solution":"def longest_palindrome(s): Returns the longest palindrome in a given string s. n = len(s) if n == 0: return \\"\\" longest = \\"\\" def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] for i in range(n): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Write a python function to find the highest frequency character in a string. If the string is empty, the function should return an empty string.","solution":"def highest_frequency_char(string): Returns the highest frequency character in the given string. If the string is empty, returns an empty string. if not string: return \\"\\" freq_dict = {} for char in string: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 highest_freq = max(freq_dict.values()) for char, freq in freq_dict.items(): if freq == highest_freq: return char"},{"question":"Write a python function to count the frequency of each word in a text. The function should ignore case sensitivity and punctuation. Here is the code solution. Replace the placeholder with the correct python code.","solution":"import re from collections import Counter def word_frequency(text): Returns a dictionary with the frequency of each word in the input text. The function ignores case sensitivity and punctuation. text = text.lower() # Convert text to lowercase to ignore case sensitivity words = re.findall(r'bw+b', text) # Find all words, ignoring punctuation return dict(Counter(words))"},{"question":"Write a python function to check if the number of keys with integer values is greater than the number of keys with string values in a given dictionary.","solution":"def compare_key_values(data): Checks if the number of keys with integer values is greater than the number of keys with string values in a given dictionary. Args: - data (dict): The input dictionary to check. Returns: - bool: True if keys with integer values are greater, otherwise False. int_count = sum(1 for value in data.values() if isinstance(value, int)) str_count = sum(1 for value in data.values() if isinstance(value, str)) return int_count > str_count"},{"question":"Write a python function to get the filename with extension and directory path from a full path. You can assume the full path is given as a string.","solution":"import os def split_path(full_path): Splits the full path into the directory path and the filename with extension. Args: full_path (str): The full path to split. Returns: tuple: A tuple containing the directory path and the filename with extension. directory_path, filename = os.path.split(full_path) return directory_path, filename"},{"question":"Write a python function to evaluate an expression entered by the user. Assume the expression is well-formed, and use Python's built-in \`eval()\` function to evaluate it. Ensure that the code is clean and handles any potential errors.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string using Python's eval() function. Parameters: expression (str): A well-formed mathematical expression as a string. Returns: result: The result of the evaluated expression. try: result = eval(expression) return result except Exception as e: return str(e)"},{"question":"Write a python function to compute the factorial of a given number n using recursive approach. The function should handle the case where n is 0 or less and return an appropriate error message.","solution":"def factorial(n): Computes the factorial of a given number n using a recursive approach. Handles the case where n is 0 or less and returns an appropriate error message. if n < 0: return \\"Error: Factorial of a negative number is not defined.\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to implement selection sort.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i + 1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to find the index of the maximum value in a given list.","solution":"def index_of_max(lst): Returns the index of the maximum value in the given list. If the list is empty, returns None. if not lst: return None max_index = 0 for i in range(1, len(lst)): if lst[i] > lst[max_index]: max_index = i return max_index"},{"question":"Write a python function to find the next greater element of each element in the array.","solution":"def next_greater_elements(arr): Returns a list of the next greater element for each element in the array. If there is no greater element, returns -1 for that position. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] stack.append(i) return result"},{"question":"Write a python function to determine if a number is an abundant number. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. For example, 12 is an abundant number because 1 + 2 + 3 + 4 + 6 = 16 which is greater than 12.","solution":"def is_abundant_number(n): Returns True if \`n\` is an abundant number, otherwise False. An abundant number is a number for which the sum of its proper divisors is greater than the number itself. if n <= 0: return False divisors_sum = sum([i for i in range(1, n) if n % i == 0]) return divisors_sum > n"},{"question":"Write a python function to update the details in a given dictionary. Specifically, the function should add a new key-value pair to the dictionary if the key does not exist, or update the value of an existing key if it does. The function should return the updated dictionary.","solution":"def update_dictionary(details, key, value): Updates the details dictionary by adding a new key-value pair if the key does not exist, or updating the value of an existing key if it does. :param details: dict - The dictionary to update. :param key: Key to add or update in the dictionary. :param value: Value to set for the specified key. :return: dict - The updated dictionary. details[key] = value return details"},{"question":"Write a python function to find the sum of the first 1000 natural numbers that have an odd number of divisors.","solution":"def sum_of_numbers_with_odd_divisors(limit=1000): Returns the sum of the first 1000 natural numbers that have an odd number of divisors. def has_odd_number_of_divisors(n): return int(n**0.5)**2 == n count = 0 total_sum = 0 num = 1 while count < limit: if has_odd_number_of_divisors(num): total_sum += num count += 1 num += 1 return total_sum"},{"question":"Write a python function to print the numbers from 1 to 10 in reverse order using a loop and a condition check.","solution":"def print_reverse_1_to_10(): Prints the numbers from 1 to 10 in reverse order. for i in range(10, 0, -1): print(i)"},{"question":"Write a python function to calculate the factorial of a given number \`n\`. The function should handle both positive integers and zero. Additionally, ensure that the function can handle large numbers using Python's built-in data types.","solution":"def factorial(n): Returns the factorial of a given number n. :param n: An integer whose factorial is to be found. :return: An integer which is the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the largest sum of contiguous subarray within a 2D array, following LeetCode problem 213. House Robber II.","solution":"def largest_contiguous_sum_2d(array): Function to find the largest sum of contiguous subarray within a 2D array. if not array or not array[0]: return 0 rows, cols = len(array), len(array[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += array[i][right] current_max = max_sum_1d(temp) max_sum = max(max_sum, current_max) return max_sum def max_sum_1d(array): Helper function to find the largest sum of contiguous subarray within a 1D array. max_sum = current_sum = array[0] for num in array[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to get substring from a given string.","solution":"def get_substring(s, start, end): Returns the substring from the given string s starting at index start and ending at index end. return s[start:end]"},{"question":"Write a python function to sort a list of integers in place using the quicksort algorithm. The function should take a list of integers and return the sorted list.","solution":"def quicksort(arr): Sorts a list of integers in place using the quicksort algorithm. def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort_recursive(low, high): if low < high: pi = partition(low, high) quick_sort_recursive(low, pi - 1) quick_sort_recursive(pi + 1, high) quick_sort_recursive(0, len(arr) - 1) return arr"},{"question":"Write a python function to find the closest pair in a list","solution":"def find_closest_pair(numbers): Returns the closest pair of numbers in the list in terms of absolute difference. Parameters: numbers (List[int]): A list of integers. Returns: Tuple: The closest pair of numbers. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two elements\\") numbers.sort() min_difference = float('inf') closest_pair = (None, None) for i in range(len(numbers) - 1): current_diff = abs(numbers[i] - numbers[i + 1]) if current_diff < min_difference: min_difference = current_diff closest_pair = (numbers[i], numbers[i + 1]) return closest_pair"},{"question":"Write a python function to reverse the order of characters in a string. For example, if the input string is \\"hello\\", the output should be \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to calculate the sum of the first n natural numbers using a loop. Also, provide a brief explanation of your code.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers using a loop. Args: n (int): The number of natural numbers to sum up. Returns: int: The sum of the first n natural numbers. total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Write a python function to solve the coin change problem using dynamic programming. The problem is to find the minimum number of coins required to make up a given amount.","solution":"def coinChange(coins, amount): Finds the minimum number of coins needed to make up the given amount. Parameters: coins (list of int): List of coin denominations. amount (int): Target amount. Returns: int: Minimum number of coins needed to make up the amount, or -1 if it is not possible. # Initialize a list for minimum coins needed to make each amount from 0 to amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 # Loop over all amounts from 1 to amount for a in range(1, amount + 1): # Loop over each coin for coin in coins: if coin <= a: dp[a] = min(dp[a], dp[a - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to find the maximum length of a contiguous subarray with all unique characters.","solution":"def max_unique_subarray_length(s): Finds the maximum length of a contiguous subarray with all unique characters. :param s: Input string :return: Maximum length of a contiguous subarray with all unique characters char_index = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a python function to check if the given input is a valid hexadecimal color code.","solution":"import re def is_valid_hex_color(hex_color): Returns True if hex_color is a valid hexadecimal color code, else False. A valid hexadecimal color code starts with '#' followed by exactly six hex digits. if not isinstance(hex_color, str): return False pattern = r'^#[0-9A-Fa-f]{6}' return bool(re.match(pattern, hex_color))"},{"question":"Write a python function to find the maximum sum of a sublist which forms a contiguous subarray within a given array of integers. The function should handle both positive and negative numbers efficiently.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a sublist which forms a contiguous subarray within the given array. Uses Kadane's algorithm for efficient computation. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to determine the count of unique elements in a given list.怎么用Python写一个函数来确定给定列表中唯一元素的个数？","solution":"def count_unique_elements(lst): Returns the count of unique elements in the given list. return len(set(lst))"},{"question":"Write a python function to simulate the board game \\"Deuces Wild,\\" a pinochle variant where the deck is composed of two full decks of cards (60 cards in total), and wild cards are treated as deuces (2s). The function should deal cards to a specified number of players and simulate a round of bidding where players bid on trumps and the bid with the highest total wins. The function should return the total bid of the winner.","solution":"import random from collections import Counter def create_deck(): Creates a deck of cards, doubling to make 120 cards (two full decks). suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'] ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace'] deck = [(rank, suit) for rank in ranks for suit in suits] return deck * 2 # Two full decks def deal_cards(deck, num_players): Shuffles the deck and deals cards to the specified number of players. random.shuffle(deck) hand_size = len(deck) // num_players hands = [deck[i * hand_size:(i + 1) * hand_size] for i in range(num_players)] return hands def simulate_bidding(hands): Simulates a round of bidding where each player bids a random number between 5 and 25. Returns the winning bid total. bids = {i: random.randint(5, 25) for i in range(len(hands))} winner = max(bids, key=bids.get) return bids[winner] def deuces_wild(num_players): Simulates the Deuces Wild game with the given number of players. deck = create_deck() hands = deal_cards(deck, num_players) winning_bid = simulate_bidding(hands) return winning_bid"},{"question":"Write a python function to find the maximum depth (or longest path) of a binary tree. The binary tree is represented using a nested list where each element is either a list representing a tree node or a value representing the node's value.","solution":"def max_depth(tree): Returns the maximum depth of the binary tree represented as a nested list. if isinstance(tree, list) and len(tree) > 0: return 1 + max(max_depth(child) for child in tree) return 0"},{"question":"Write a python function to find the reverse of a string. A reverse of a string is a new string that contains the same characters in the reverse order. For example, the reverse of the string \\"hello\\" is \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to reverse the order of words in a string, but keep the words in their reversed order inside the word.","solution":"def reverse_words_in_string(s): Reverses the order of words in a string, but keeps the words themselves in reversed order. Parameters: s (str): The input string. Returns: str: The string with words reversed and the order of words reversed. words = s.split() reversed_words = [word[::-1] for word in words] reversed_sentence = ' '.join(reversed_words[::-1]) return reversed_sentence"},{"question":"Write a python function to print the sum of the first n natural numbers","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Write a python function to check if a string is a palindrome, meaning it reads the same backward as forward. The function should ignore spaces and case sensitivity.","solution":"def is_palindrome(s: str) -> bool: Check if a string is a palindrome, ignoring spaces and case sensitivity. Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the smallest common multiple (SCM) or least common multiple (LCM) of two numbers. The function should take two integers as input and return the LCM of these integers.","solution":"import math def lcm(a, b): Returns the least common multiple (LCM) of two integers a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a python function to partition a linked list around a given value x, such that all nodes less than x come before all nodes greater than or equal to x in the new linked list. The relative order of the nodes less than x should remain the same as in the original list, and the same with nodes greater than or equal to x.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def partition(head, x): Partition a linked list around a value x. Args: head (ListNode): The head of the linked list x (int): The partition value Returns: ListNode: The head of the new partitioned linked list lesser_head = lesser_tail = ListNode(0) # Dummy node for lesser values greater_head = greater_tail = ListNode(0) # Dummy node for greater or equal values current = head while current: if current.value < x: lesser_tail.next = current lesser_tail = lesser_tail.next else: greater_tail.next = current greater_tail = greater_tail.next current = current.next greater_tail.next = None # End the greater list lesser_tail.next = greater_head.next # Combine lists return lesser_head.next"},{"question":"Write a python function to convert a string to an integer. Handle the case where the string is not a valid integer.","solution":"def string_to_int(s): Converts a string to an integer. If the string is not a valid integer, returns None. :param s: The string to convert. :return: The converted integer or None if the string is not valid. try: return int(s) except ValueError: return None"},{"question":"Write a python function to reverse the characters of a string without using any built-in functions.","solution":"def reverse_string(s): Reverse the characters of a string without using any built-in functions. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to check if a given number is prime. The function should also return the list of factors if the number is not prime.","solution":"def is_prime(n): Check if a number n is prime. If not prime, return the list of its factors. Parameters: n (int): The number to check. Returns: tuple: bool: True if n is prime, False otherwise. list: Empty list if n is prime, list of factors if not prime. if n <= 1: return (False, []) if n == 2: return (True, []) factors = [] for i in range(2, int(n**0.5) + 1): if n % i == 0: factors.append(i) if i != n // i: factors.append(n // i) is_prime_number = len(factors) == 0 return (is_prime_number, [] if is_prime_number else sorted(factors))"},{"question":"Write a python function to determine if a given string s is a valid palindrome ignoring case and non-alphanumeric characters.","solution":"def is_palindrome(s): Checks if the given string is a valid palindrome, ignoring case and non-alphanumeric characters. Args: s (str): the input string Returns: bool: True if the string is a palindrome, False otherwise # Filter only alphanumeric characters and convert to lower case clean_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equivalent to its reverse return clean_str == clean_str[::-1]"},{"question":"Write a python function to find the deepest level in a binary tree.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, x): self.val = x self.left = None self.right = None def find_deepest_level(root): Finds the deepest level in a binary tree. :param root: TreeNode, the root of the binary tree. :return: int, the deepest level (0-based indexing) in the binary tree. if not root: return -1 # An empty tree has a depth of -1 def dfs(node, level): if not node: return level - 1 return max(dfs(node.left, level + 1), dfs(node.right, level + 1)) return dfs(root, 0)"},{"question":"Write a python function to solve the Sliding Window Maximum problem. The function should take an array as input and return a list of maximum values for each subarray of size 'k'.","solution":"from collections import deque def sliding_window_maximum(nums, k): Returns a list of the maximum values in each sliding window of size k. if not nums or k == 0: return [] deq = deque() result = [] for i in range(len(nums)): # Remove elements not within the window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements not useful while deq and nums[deq[-1]] < nums[i]: deq.pop() deq.append(i) # Start adding maximum values to result if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Write a python function to find the largest rectangular area made of 1*1 square blocks. Given an integer N which allows us to construct an N*N grid, calculate the largest rectangular area that can be formed by any number of horizontal and vertical cuts in the grid.","solution":"def largest_rectangular_area(N): Returns the largest rectangular area that can be formed in an N x N grid. return N * N"},{"question":"Write a python function to remove duplicates from a list of numbers. The function should preserve the original order of the numbers.","solution":"def remove_duplicates(numbers): Removes duplicates from the list while preserving the original order. Parameters: numbers (list): A list of numbers. Returns: list: A list with duplicates removed, preserving the original order. seen = set() result = [] for num in numbers: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a python function to get the school's final grade from a list of grades as a float. The final grade is the average of the highest and lowest grades in the list, ignoring any grades that are less than 50. If the list is empty or all grades are less than 50, return \`None\`.","solution":"def final_grade(grades): Returns the average of the highest and lowest grades above 50 in the list. If the list is empty or all grades are less than 50, return None. # Filter grades to only include those that are 50 or above valid_grades = [grade for grade in grades if grade >= 50] if not valid_grades: return None # Find the highest and lowest of the valid grades highest_grade = max(valid_grades) lowest_grade = min(valid_grades) # Return the average of the highest and lowest valid grades return (highest_grade + lowest_grade) / 2"},{"question":"Write a python function to find the minimum element in a stack in constant time (O(1)).","solution":"class MinStack: Stack with a function to retrieve the minimum element in constant time. def __init__(self): Initialize the stack and an auxiliary stack to keep track of minimum values. self.stack = [] self.min_stack = [] def push(self, x): Push an element onto the stack and update the auxiliary stack with the new minimum. self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self): Pop the top element from the stack. Also update the auxiliary stack if needed. if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() return self.stack.pop() return None def top(self): Get the top element of the stack. return self.stack[-1] if self.stack else None def get_min(self): Retrieve the minimum element in the stack in constant time. return self.min_stack[-1] if self.min_stack else None"},{"question":"Write a python function to remove duplicates from a list. How can you also preserve the order of elements while removing duplicates?","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of elements. :param lst: List of elements possibly containing duplicates. :return: List with duplicates removed and original order preserved. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the second minimum element in an array. If the array has less than 2 elements, return \`None\`.","solution":"def second_minimum(arr): Returns the second minimum element in the array. If the array has less than 2 elements, return None. if len(arr) < 2: return None first_min = float('inf') second_min = float('inf') for num in arr: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num return second_min if second_min != float('inf') else None"},{"question":"Write a python function to convert a linked list to a binary tree, and then add an element to the binary tree, making sure the tree remains balanced.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def sorted_list_to_bst(head): Converts a sorted linked list to a balanced binary search tree. def find_size(head): size = 0 while head: size += 1 head = head.next return size def convert(size): nonlocal head if size <= 0: return None left = convert(size // 2) node = TreeNode(head.value) node.left = left head = head.next node.right = convert(size - size // 2 - 1) return node size = find_size(head) return convert(size) def insert_into_bst(root, value): Inserts a value into the binary search tree while keeping it balanced. if not root: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def balance_bst(root): Balances a binary search tree. values = [] def inorder_traversal(node): if not node: return inorder_traversal(node.left) values.append(node.value) inorder_traversal(node.right) def sorted_array_to_bst(start, end): if start > end: return None mid = (start + end) // 2 node = TreeNode(values[mid]) node.left = sorted_array_to_bst(start, mid - 1) node.right = sorted_array_to_bst(mid + 1, end) return node inorder_traversal(root) return sorted_array_to_bst(0, len(values) - 1) def linked_list_to_balanced_bst_with_insertion(head, value): root = sorted_list_to_bst(head) root = insert_into_bst(root, value) return balance_bst(root)"},{"question":"Write a python function to merge two dictionaries recursively, combining values from both dictionaries into a single dictionary. If keys overlap, the value from the second dictionary should be used, and if the values are dictionaries themselves, a recursive merge should be performed.","solution":"def merge_dicts_recursive(dict1, dict2): Recursively merges two dictionaries. If a key is present in both dictionaries, and the values are dictionaries themselves, they are merged recursively. Otherwise, the value from dict2 is used. Parameters: dict1 (dict): The first dictionary to merge. dict2 (dict): The second dictionary to merge. Returns: dict: The merged dictionary. result = dict1.copy() # Start with the keys and values of dict1 for k, v in dict2.items(): if k in result and isinstance(result[k], dict) and isinstance(v, dict): result[k] = merge_dicts_recursive(result[k], v) else: result[k] = v return result"},{"question":"Write a python function to calculate the total number of possible binary sequences of length n that can be formed using the characters '0' and '1', where no two consecutive '1's can appear.","solution":"def count_sequences(n): Returns the number of binary sequences of length n with no consecutive '1's. if n == 0: return 1 if n == 1: return 2 # Use dynamic programming to find the count dp = [0] * (n + 1) dp[0] = 1 # Empty sequence dp[1] = 2 # \\"0\\", \\"1\\" for i in range(2, n + 1): dp[i] = dp[i-1] + dp[i-2] return dp[n]"},{"question":"Write a python function to remove all duplicates from a given linked list and return the head of the modified list. The linked list is stored in reverse order, i.e., the most significant digit comes first.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def remove_duplicates(head): Removes duplicates from the linked list stored in reverse order. :param head: ListNode, the head of the linked list. :return: ListNode, the head of the modified list. if not head: return head seen = set() current = head prev = None while current: if current.val in seen: prev.next = current.next else: seen.add(current.val) prev = current current = current.next return head"},{"question":"Write a python function to find the first singular node in a double-linked list.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None def find_first_singular_node(head): Returns the first singular node in a double-linked list. A singular node is defined as one that either has no previous node or no next node. current = head while current is not None: if current.prev is None or current.next is None: return current current = current.next return None"},{"question":"Write a python function to find the area of a circle using the formula A = πr², where r is the radius of the circle.","solution":"import math def area_of_circle(radius): Returns the area of a circle with the given radius. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius * radius"},{"question":"Write a python function to determine if it is possible to replace any number of elements in the list with their corresponding positions to make the list monotonic non-decreasing or non-increasing.","solution":"def is_possible_to_make_monotonic(arr): Returns True if it is possible to replace any number of elements in the list with their positions to make the list either monotonic non-decreasing or non-increasing. Otherwise, returns False. n = len(arr) incre = all(arr[i] <= arr[i + 1] for i in range(n - 1)) decre = all(arr[i] >= arr[i + 1] for i in range(n - 1)) return incre or decre"},{"question":"Write a python function to find the smallest element in an array A of n integers. The function should have the following signature: \`def smallest_element(A)\` that returns the smallest element found in array A. You can use whatever method to solve this problem, but you should aim to make your solution efficient.","solution":"def smallest_element(A): Returns the smallest element in the array A. if not A: raise ValueError(\\"Array is empty\\") smallest = A[0] for num in A[1:]: if num < smallest: smallest = num return smallest"},{"question":"Write a python function to calculate the Fibonacci number at a given position in the sequence. The function should use recursion for calculation. Make sure to include a docstring explaining the function and its parameters. Also, provide a way to verify the correctness of your function with several test cases.","solution":"def fibonacci_recursive(n): Returns the Fibonacci number at position n in the sequence using recursion. Parameters: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The Fibonacci number at position n. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)"},{"question":"Write a python function to count the occurrences of each element in the list. I need it to work in O(n) complexity.","solution":"from collections import defaultdict def count_occurrences(elements): Counts the occurrences of each element in the list. Args: elements (list): A list of elements Returns: dict: A dictionary with elements as keys and their counts as values counts = defaultdict(int) for element in elements: counts[element] += 1 return dict(counts)"},{"question":"Write a python function to print all reachable vertices from a given source vertex in a directed graph using breath_first_search algorithm.","solution":"from collections import deque, defaultdict from typing import List def bfs_reachable_vertices(graph: dict, start: int) -> List[int]: Returns a list of all reachable vertices from a given source vertex using BFS. :param graph: A dictionary representing the adjacency list of the graph. :param start: The source vertex from which to start the BFS. :return: A list of all reachable vertices from the start vertex. visited = set() queue = deque([start]) reachable_vertices = [] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) reachable_vertices.append(vertex) for neighbor in graph[vertex]: if neighbor not in visited: queue.append(neighbor) return reachable_vertices"},{"question":"Write a python function to return the reversed version of a dictionary. If the dictionary is empty, return an empty dictionary. If the dictionary contains non-dict, non-hashable values, raise a custom exception \`NonHashableValueError\`.","solution":"class NonHashableValueError(Exception): Custom exception raised when a dictionary contains non-hashable values. pass def reverse_dict(input_dict): Returns the reversed version of a dictionary. If the dictionary is empty, returns an empty dictionary. If the dictionary contains non-hashable values, raises NonHashableValueError. Parameters: input_dict (dict): The dictionary to reverse. Returns: dict: The reversed dictionary. reversed_dict = {} for key, value in input_dict.items(): if not isinstance(value, (int, float, str, tuple, frozenset, type(None))): raise NonHashableValueError(\\"The dictionary contains non-hashable values.\\") reversed_dict[value] = key return reversed_dict"},{"question":"Write a python function to determine if a list contains any numbers exceeding 100.","solution":"def contains_number_exceeding_100(lst): Determines if a list contains any numbers exceeding 100. Args: lst (list): A list of numbers. Returns: bool: True if any number in the list exceeds 100, otherwise False. return any(x > 100 for x in lst)"},{"question":"Write a python function to calculate the total number of ways to arrange \`n\` midi instruments in a specific range within a given time frame. The number of arrangements is determined by the function \`calculate_arrangements(midi_count, start_time, end_time)\`. You need to implement it using dynamic programming.","solution":"def calculate_arrangements(midi_count, start_time, end_time): Calculate the total number of ways to arrange \`n\` midi instruments in a specific range within a given time frame using dynamic programming. # Initialize a DP table where dp[i][j] represents the number of ways to arrange i midi instruments # in time frame j dp = [[0] * (end_time - start_time + 1) for _ in range(midi_count + 1)] # Base case: 1 way to arrange 0 midi instruments for j in range(end_time - start_time + 1): dp[0][j] = 1 # Fill the DP table for i in range(1, midi_count + 1): for j in range(end_time - start_time + 1): dp[i][j] = dp[i - 1][j] # Case where the instrument is not used in this slot if j > 0: dp[i][j] += dp[i][j - 1] # Case where the instrument is used in this slot return dp[midi_count][end_time - start_time]"},{"question":"Write a python function to print the elements of an array in reverse order. The function should not use any built-in reverse functions or slicing techniques. You should implement this using loops.","solution":"def reverse_array(arr): This function prints the elements of an array in reverse order. :param arr: List of elements to be reversed reversed_arr = [] for i in range(len(arr) - 1, -1, -1): reversed_arr.append(arr[i]) return reversed_arr"},{"question":"Write a python function to print all the Armstrong numbers in a given range. An Armstrong number is an n-digit number that is equal to the sum of its own digits each raised to the power of n.","solution":"def armstrong_numbers_in_range(start, end): Returns a list of Armstrong numbers between the specified range [start, end]. Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: List[int]: A list of Armstrong numbers within the specified range. armstrong_numbers = [] for num in range(start, end + 1): digits = [int(d) for d in str(num)] power = len(digits) if num == sum([d ** power for d in digits]): armstrong_numbers.append(num) return armstrong_numbers"},{"question":"Write a python function to find the maximum profit that can be made by buying and selling a stock given its price list for 'n' days. You can only complete at most one transaction (i.e., buy one and sell one share of the stock).","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling one share of stock. :param prices: List[int], the stock prices over n days. :return: int, the maximum profit. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a python function to find the maximum length of a contiguous subarray where the sum of the elements is a perfect square.","solution":"def max_len_contig_subarray_perfect_square(arr): Returns the maximum length of a contiguous subarray where the sum of the elements is a perfect square. import math def is_perfect_square(x): if x < 0: return False s = int(math.isqrt(x)) return s * s == x max_len = 0 n = len(arr) for i in range(n): curr_sum = 0 for j in range(i, n): curr_sum += arr[j] if is_perfect_square(curr_sum): max_len = max(max_len, j - i + 1) return max_len"},{"question":"Write a python function to calculate the power of a number using iteration (without using the built-in power function).","solution":"def iterative_power(base, exponent): Calculate the power of a number using iteration. Args: base (int or float): The base number. exponent (int): The exponent (must be a non-negative integer). Returns: int or float: The result of base raised to the power of exponent. if exponent == 0: return 1 # Any number raised to the power of 0 is 1 result = 1 for _ in range(exponent): result *= base return result"},{"question":"Write a python function to find the most frequent character in a given string.","solution":"def most_frequent_char(s): Returns the most frequent character in the given string s. If there are multiple characters with the same highest frequency, it returns the first one encountered. from collections import Counter if not s: return None char_count = Counter(s) most_frequent = max(char_count, key=char_count.get) return most_frequent"},{"question":"Write a python function to convert a string to a list of words. The function should return \`None\` if the input string is empty or contains only whitespace.","solution":"def string_to_list_of_words(input_string): Converts a string to a list of words. Returns None if the input string is empty or only whitespace. if input_string.strip() == \\"\\": return None return input_string.split()"},{"question":"Write a python function to find the minimum number within a given range [a, b] that has a given remainder r, when divided by a given divisor d.","solution":"def min_number_with_remainder(a, b, r, d): Returns the minimum number within the range [a, b] that has a remainder r when divided by d. If there is no such number, return -1. for num in range(a, b+1): if num % d == r: return num return -1"},{"question":"Write a python function to resolve the given problem statement: \\"Return the largest number you can get after performing one swap operation on two digits in a given non-negative integer.\\" If a swap is not beneficial, i.e., the number cannot be increased by swapping any two digits, return the original number.","solution":"def largest_number_after_one_swap(num): Returns the largest number possible by swapping two digits of the given non-negative integer num. If no swap can increase the number, the original number is returned. num_str = str(num) digits = list(num_str) n = len(digits) # Traverse the digits from left to right for i in range(n): max_digit = digits[i] max_digit_idx = i # Look for the maximum digit in the rest of the array (right of i) for j in range(n - 1, i, -1): if digits[j] > max_digit: max_digit = digits[j] max_digit_idx = j # If max_digit is greater than digits[i], perform the swap if max_digit > digits[i]: digits[i], digits[max_digit_idx] = digits[max_digit_idx], digits[i] break # Convert the list of characters back to an integer return int(''.join(digits))"},{"question":"Write a python function to compute the mean vector and covariance matrix from a matrix of data. Mean vector is the average of each column, and covariance matrix calculates the covariance between columns.","solution":"import numpy as np def compute_mean_and_covariance(data): Computes the mean vector and covariance matrix from a matrix of data. Parameters: data (ndarray): A 2D numpy array where each row represents a data point and each column represents a feature. Returns: tuple: A tuple containing the mean vector and the covariance matrix. # Compute the mean vector mean_vector = np.mean(data, axis=0) # Compute the covariance matrix covariance_matrix = np.cov(data, rowvar=False) return mean_vector, covariance_matrix"},{"question":"Write a python function to reverse the order of elements in a list \`my_list\`. Additionally, ensure that the function handles both lists of integers and strings. Test your function with both data types.","solution":"def reverse_list(my_list): Reverses the order of elements in the list. Args: my_list (list): A list of elements to be reversed, can be integers or strings. Returns: list: The list with elements in reversed order. return my_list[::-1]"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. The function should return the maximum sum found.","solution":"def max_subarray_sum(nums): Find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. :param nums: List[int] - The list of integers. :return: int - The maximum sum of the contiguous subarray. if not nums: return 0 # Undefined behaviour for an empty array; this can be handled as needed. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the maximum product of a subset of an array such that all elements in the subset are positive.","solution":"def max_product_subset(arr): Returns the maximum product of a subset of an array such that all elements in the subset are positive. if not arr: return 0 # Filter out non-positive numbers positive_numbers = [num for num in arr if num > 0] if not positive_numbers: return 0 product = 1 for num in positive_numbers: product *= num return product"},{"question":"Write a python function to merge two sorted linked lists into one sorted linked list. The function should take the heads of the two linked lists as input and return the head of the new sorted linked list. The input and output are both in the form of node objects representing the linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists and return it as a sorted linked list. # Dummy node to start the merged list dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # Attach the rest of the remaining list if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"Write a python function to remove duplicates from a given list. You can use any data structure you like, but the output should be a list with all duplicates removed. Additionally, the function should maintain the original order of the elements.","solution":"def remove_duplicates(lst): Removes duplicates from the given list while maintaining the original order. :param lst: List of elements which may contain duplicates. :return: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to check if a number is even or odd. How would you use this function in your code? Provide a sample usage scenario.","solution":"def is_even(number): Returns True if number is even, otherwise returns False. return number % 2 == 0 # Sample usage scenario: def filter_even_numbers(numbers): Filters out odd numbers from a list and returns only even numbers. return [num for num in numbers if is_even(num)]"},{"question":"Write a python function to check if a given string \`s\` of length \`n\` (where \`n\` is even) contains at least one pair of adjacent characters that are the same. If such a pair exists, return \`True\`; otherwise, return \`False\`.","solution":"def has_adjacent_pair(s): Checks if the string s contains at least one pair of adjacent characters that are the same. :param s: String to be checked :return: Boolean value indicating the presence of adjacent identical characters for i in range(len(s) - 1): if s[i] == s[i + 1]: return True return False"},{"question":"Write a python function to calculate the total number of paths from the top-left corner to the bottom-right corner in a grid, considering obstacles. The grid is represented as a 2D list of booleans, where \`False\` indicates a free square and \`True\` indicates an obstacle.","solution":"def count_paths_with_obstacles(grid): Calculate the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. :param grid: List of lists of booleans where False indicates a free space and True indicates an obstacle :return: Number of unique paths from top-left to bottom-right if not grid: return 0 rows, cols = len(grid), len(grid[0]) # If start or end is an obstacle, return 0 if grid[0][0] or grid[rows - 1][cols - 1]: return 0 # DP table to store number of paths dp = [[0] * cols for _ in range(rows)] # Start point dp[0][0] = 1 # Fill in the dp table for i in range(rows): for j in range(cols): if grid[i][j]: # If there's an obstacle, skip this cell dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[rows - 1][cols - 1]"},{"question":"Write a python function to sort an array of strings alphabetically using the Bubble Sort algorithm.","solution":"def bubble_sort_strings(arr): Sorts an array of strings alphabetically using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. The function should raise a ValueError if the input number is negative.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Raises a ValueError if the input number is negative. if n < 0: raise ValueError(\\"Input number must be non-negative\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to remove all the duplicate characters in a given string, without using in-built functions, dictionaries, or sets, and also sort the string in ascending order. The function should return the modified string.","solution":"def remove_duplicates_and_sort(s): Removes all duplicate characters from the string and returns the sorted string. count = [0] * 256 # Assuming ASCII characters result = [] for char in s: count[ord(char)] += 1 for i in range(256): if count[i] > 0: result.append(chr(i)) return ''.join(result)"},{"question":"Write a python function to sort an array containing only 0s, 1s, and 2s. The task is to segregate the elements of the array in ascending order. The function does not need to return a value; it should modify the array in place. The solution should have better than O(nlogn) time complexity.","solution":"def sort_012(arr): Sort an array containing only 0s, 1s, and 2s in ascending order. This function modifies the array in place. low = 0 mid = 0 high = len(arr) - 1 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: # arr[mid] == 2 arr[high], arr[mid] = arr[mid], arr[high] high -= 1"},{"question":"Write a python function to insert or update the value of a configuration file property.","solution":"def set_property(config, key, value): Inserts or updates the value of a configuration file property. Parameters: - config (dict): The configuration dictionary. - key (str): The property key to insert or update. - value (str): The property value to set. Returns: - dict: The updated configuration dictionary. config[key] = value return config"},{"question":"Write a python function to merge two sorted lists into a single sorted list. You should consider all possible edge cases, including empty lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A single sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements from list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to find the length of the longest balanced sub-array. A balanced sub-array is defined as an array where the count of even numbers is equal to the count of odd numbers.","solution":"def longest_balanced_subarray(arr): Returns the length of the longest balanced subarray where the count of even numbers is equal to the count of odd numbers. balance_map = {0: -1} # Balance index map to store the first occurrence of balance balance = 0 # Initial balance between even and odd counts max_length = 0 # Maximum length of balanced subarray for i, num in enumerate(arr): if num % 2 == 0: balance += 1 # Increment balance for even number else: balance -= 1 # Decrement balance for odd number if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Write a python function to find the longest substring of any given string where all the characters are distinct.","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters. if not s: return \\"\\" start = 0 max_length = 0 longest_substring = \\"\\" char_map = {} for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end if max_length < end - start + 1: max_length = end - start + 1 longest_substring = s[start:end + 1] return longest_substring"},{"question":"Write a python function to compute the frequency and percentage of each element in a list. The function should take a list as input and return a dictionary where the keys are the unique elements of the list and the values are tuples containing the frequency of the element and the percentage of the total occurrences.","solution":"def compute_frequency_percentage(lst): Computes the frequency and percentage of each element in the list. Parameters: lst (list): The input list with elements. Returns: dict: A dictionary where keys are the unique elements of the list and values are tuples containing the frequency and the percentage of the total occurrences. element_count = {} total_elements = len(lst) # Compute frequency of each element for elem in lst: if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 # Compute the percentage for each element frequency_percentage = {elem: (count, (count / total_elements) * 100) for elem, count in element_count.items()} return frequency_percentage"},{"question":"Write a python function to check if a given string contains a balanced set of brackets.","solution":"def is_balanced(s): Returns True if the string contains a balanced set of brackets, otherwise False. stack = [] opening_brackets = set('({[') closing_brackets = set(')}]') matching_brackets = {')': '(', '}': '{', ']': '['} for char in s: if char in opening_brackets: stack.append(char) elif char in closing_brackets: if not stack or stack[-1] != matching_brackets[char]: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to count the occurrences of a specific element in an array.","solution":"def count_occurrences(arr, element): Counts the occurrences of a specific element in an array. Parameters: arr (list): The array of elements. element (any): The element to count the occurrences of. Returns: int: The count of occurrences of the element in the array. return arr.count(element)"},{"question":"Write a python function to select elements from a list that are smaller than a given threshold. The function should also return the count of such elements.","solution":"def select_elements_smaller_than_threshold(lst, threshold): Select elements from the list that are smaller than a given threshold and return count of such elements. Parameters: lst (list): List of numbers. threshold (int or float): Threshold value. Returns: tuple: (list of elements smaller than threshold, count of such elements) selected_elements = [x for x in lst if x < threshold] count = len(selected_elements) return selected_elements, count"},{"question":"Write a python function to return the longest string in a list that contains only even numbers.","solution":"def longest_even_string(lst): Returns the longest string in a list that contains only even numbers. def is_all_even(s): return all(int(ch) % 2 == 0 for ch in s) even_strings = [s for s in lst if is_all_even(s)] if not even_strings: return \\"\\" return max(even_strings, key=len)"},{"question":"Write a python function to search for a value in a sorted list using binary search. Return the index of the value if found, otherwise return -1.","solution":"def binary_search(sorted_list, value): Perform binary search on the sorted_list for the specified value. Return the index of the value if found, otherwise return -1. Args: sorted_list (list): A list of sorted values. value (any): The value to search for in the list. Returns: int: The index of the value if found, otherwise -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] < value: left = mid + 1 elif sorted_list[mid] > value: right = mid - 1 else: return mid return -1"},{"question":"Write a python function to find the first occurrence of a specific character in a given string.","solution":"def find_first_occurrence(string, char): Returns the index of the first occurrence of the specific character in a given string. If the character is not found, returns -1. Parameters: string (str): The string to search in. char (str): The character to search for. Returns: int: Index of the first occurrence of the character, or -1 if not found. try: return string.index(char) except ValueError: return -1"},{"question":"Write a python function to find solutions of quadratic equations ax**2 + bx + c = 0 where a, b, and c are the coefficients of the quadratic equation.","solution":"import cmath def find_quadratic_solutions(a, b, c): Returns the solutions of the quadratic equation ax**2 + bx + c = 0. # Calculating the discriminant discriminant = cmath.sqrt(b**2 - 4*a*c) # Calculating two solutions solution1 = (-b + discriminant) / (2*a) solution2 = (-b - discriminant) / (2*a) return (solution1, solution2)"},{"question":"Write a python function to find the minimum number of coins needed to make up a given amount of money. The function should accept two parameters: the \`amount\` of money to be made up and a list of \`coin_values\` representing the different coin denominations available. Example usage: \`min_coins(47, [1, 5, 10, 21, 25])\` should return \`3\` since 47 can be made up with 1 coin of 25 and 1 coin of 21 and 1 coin of 1.","solution":"def min_coins(amount, coin_values): Returns the minimum number of coins needed to make up a given amount of money. # Initialize a list to store the minimum coins needed for each value from 0 to amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make amount 0 for coin in coin_values: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1 # Return -1 if it's not possible to form the amount"},{"question":"Write a python function to convert a string to all uppercase letters. You need to use the built-in string methods and ensure your function is properly formatted and includes a comprehensive docstring explaining its purpose and parameters.","solution":"def to_uppercase(s): Converts the given string to all uppercase letters. Parameters: s (str): The string to be converted to uppercase. Returns: str: The uppercase version of the input string. return s.upper()"},{"question":"Write a python function to extract all the URLs from a given string that may or may not have http or https protocols. The function should also handle URLs with subdomains.","solution":"import re def extract_urls(text): Extracts all URLs from a given string that may or may not have http or https protocols. url_pattern = re.compile(r'b(?:https?://|www.)S+.S+b') return url_pattern.findall(text)"},{"question":"Write a python function to find the maximum profit from the given list of stock prices on different days. You can only buy and sell once. For example, given the list [7,1,5,3,6,4], the maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), profit = 6-1 = 5. Another example, given the list [7,6,4,3,1], no transaction is done, i.e., max profit = 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit can be made, returns 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a python function to implement Dijkstra's algorithm for finding the shortest path in a graph.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest path in a graph from a starting vertex. Parameters: graph : dict A dictionary representing an adjacency list where keys are node IDs and values are lists of tuples (neighbor, weight). start : any The starting node ID. Returns: dict A dictionary where the keys are node IDs and the values are the shortest distances from the start node to that node. # Initialize the shortest path tree and distances shortest_path_tree = {} distances = {vertex: float('infinity') for vertex in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex in shortest_path_tree: continue shortest_path_tree[current_vertex] = current_distance for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to print \\"Hello World!\\" as many times as a user inputs a number.","solution":"def print_hello_world_n_times(n): Prints \\"Hello World!\\" n times. Parameters: n (int): The number of times to print \\"Hello World!\\". if n < 0: raise ValueError(\\"The input number cannot be negative\\") for _ in range(n): print(\\"Hello World!\\")"},{"question":"Write a python function to return the kth smallest element in an array using a priority queue.","solution":"import heapq def kth_smallest(nums, k): Returns the kth smallest element in an array nums using a priority queue (min-heap). if k > len(nums): return None heapq.heapify(nums) for _ in range(k-1): heapq.heappop(nums) return heapq.heappop(nums)"},{"question":"Write a python function to convert a given string \`s\` to a palindrome by appending the minimum number of characters at the end of the string. The function should return the palindrome string.","solution":"def make_palindrome(s): Takes a string s and returns a palindrome by appending the minimum number of characters at the end. def is_palindrome(s): return s == s[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s # Example usage of the function print(make_palindrome(\\"race\\")) # Output should be 'racecar'"},{"question":"Write a python function to print all prime numbers less than N, where N is an integer.","solution":"def prime_numbers_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to find the intersection of two sets of integers. The function should take two sets of integers as input and return their intersection as a new set.","solution":"def intersection(set1, set2): Returns the intersection of two sets. Parameters: set1 (set of int): First input set. set2 (set of int): Second input set. Returns: set of int: Intersection of set1 and set2. return set1 & set2"},{"question":"Write a python function to detect and count the number of duplicate strings in a list. Also, return the count of such duplicates.","solution":"def count_duplicates(strings): Detect and count the number of duplicate strings in the list. Return a dictionary with the count of each duplicate string and the overall count of duplicates. :param strings: List of strings :return: dictionary with two elements: - 'duplicates': a dictionary of string to count - 'total_duplicates': count of strings that are duplicated at least once from collections import Counter counts = Counter(strings) duplicates = {string: count for string, count in counts.items() if count > 1} total_duplicates = len(duplicates) return {'duplicates': duplicates, 'total_duplicates': total_duplicates}"},{"question":"Write a python function to find the maximum value in a given set of numbers. The function should take a list of integers as input and return the maximum value among those numbers. If the list is empty, the function should return \`None\`.","solution":"def find_maximum(numbers): Returns the maximum value in the list of numbers. If the list is empty, returns None. :param numbers: List of integers :return: The maximum integer in numbers or None if the list is empty if not numbers: return None return max(numbers)"},{"question":"Write a python function to find the maximum element in a list of integers. What should the function return if the list is empty?","solution":"def find_max(lst): Returns the maximum element in a list of integers. If the list is empty, returns None. if not lst: # Check if the list is empty return None return max(lst)"},{"question":"Write a python function to perform a quicksort and return the sorted array.","solution":"def quicksort(arr): Performs quicksort on the given list \`arr\` and returns the sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to check if a given string has an alternating pattern like \\"abcabcabc...\\" or \\"ababab...\\" etc.","solution":"def is_alternating_pattern(s): Checks if the given string has an alternating pattern. Args: s (str): The input string. Returns: bool: True if the string has an alternating pattern, False otherwise. if not s: return False n = len(s) for i in range(1, n//2 + 1): if n % i == 0: pattern = s[:i] if pattern * (n // i) == s: return True return False"},{"question":"Write a python function to solve a linear equation in two variables, ax + by = c. The function should accept three parameters a, b, and c. If a or b is zero, the equation can't be solved for two variables (it might be an identity equation or a contradiction). The function should return the solutions if they exist, or a message indicating that the equation can't be solved.","solution":"def solve_linear_equation(a, b, c): Solves the linear equation ax + by = c for x and y. Parameters: a (int/float): Coefficient of x b (int/float): Coefficient of y c (int/float): Constant term Returns: tuple or str: A tuple of solutions for (x, y) if they exist, or a string indicating that the equation can't be solved for two variables. if a == 0 and b == 0: if c == 0: return \\"The equation is an identity: infinitely many solutions.\\" else: return \\"The equation is a contradiction: no solution.\\" if a == 0: y = c / b return 0, y if b == 0: x = c / a return x, 0 return \\"The equation can't be solved uniquely for two variables without another equation.\\""},{"question":"Write a python function to find the numbers of each unique character in a string. I'm looking for a function that takes a string as input and returns a dictionary with the unique characters as keys and the number of times the character appears as their corresponding value. For instance, for the string \\"hello world\\", the function should return {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}.","solution":"def count_unique_characters(s): Returns a dictionary with the count of each unique character in the input string. :param s: Input string :return: Dictionary with characters as keys and their counts as values. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to reverse a string, but only reverse the order of the words in the string, not the individual characters in each word.","solution":"def reverse_words(sentence): Returns the sentence with the order of the words reversed but the individual characters in each word are not reversed. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Write a python function to remove specified characters and digits from a given string. You should follow the guidelines provided in the question. Only use standard Python libraries available in Python's standard library.","solution":"def remove_chars_and_digits(input_string, chars_to_remove): Removes specified characters and digits from the given string. Args: input_string (str): The original string. chars_to_remove (str): A string containing characters and digits to remove from input_string. Returns: str: Modified string after removing specified characters and digits. result = [] chars_to_remove_set = set(chars_to_remove) for char in input_string: if char not in chars_to_remove_set: result.append(char) return \\"\\".join(result)"},{"question":"Write a python function to print all the numbers from 1 to 100 that are divisible by both 3 and 5. Use a for loop for iteration. To solve this problem, remember to use the range function appropriately and the modulus operator for determining divisibility.","solution":"def divisible_by_3_and_5(): Returns a list of numbers from 1 to 100 that are divisible by both 3 and 5. result = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: result.append(i) return result"},{"question":"Write a python function to print out the odd numbers between 1 and 100 inclusive. The function should print the odd numbers in a list and also return their sum.","solution":"def print_and_sum_odd_numbers(): Prints the odd numbers between 1 and 100 inclusive and returns their sum. odd_numbers = [num for num in range(1, 101) if num % 2 != 0] print(odd_numbers) return sum(odd_numbers)"},{"question":"Write a python function to find the missing number from a sequence of numbers. The sequence is given as a list where all numbers from 1 to n (inclusive) except one number are present in the list. The function should return the missing number.","solution":"def find_missing_number(numbers): Find the missing number in a sequence from 1 to n (inclusive). The sequence is given as a list where all numbers except one are present. :param numbers: list of integers :return: the missing integer n = len(numbers) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(numbers) return expected_sum - actual_sum"},{"question":"Write a python function to perform a binary search on a sorted list of integers. If the target number is found, return its index. If the target number is not found, return -1. Ensure that the function has a time complexity of O(log n).","solution":"def binary_search(arr, target): Perform a binary search on a sorted list. Parameters: arr (list): A sorted list of integers. target (int): The integer to search for. Returns: int: The index of the target element if found, otherwise -1. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a python function to determine if a string is a palindrome. Lowercase the entire string before checking.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. The function will convert the string to lowercase before checking. s = s.lower() return s == s[::-1]"},{"question":"Write a python function to calculate i) the total revenue using the formula Revenue = Price * Quantity * Tax ii) find the unit price (Price per unit) using the formula Unit Quantity = Price / Quantity iii) the total cost and profit using the formula Profit = Revenue - Cost i) Identify the tax component of the total invoice amount.","solution":"def calculate_financials(price, quantity, tax, cost): Calculate the total revenue, unit price, total cost and profit, and tax component of the total invoice amount. Parameters: price (float): The price per unit before tax. quantity (int): The quantity of units sold. tax (float): The tax rate (e.g., 0.2 for 20% tax). cost (float): The total cost. Returns: dict: A dictionary containing total revenue, unit price, total cost and profit, and tax component of the total invoice amount. # Calculate the total revenue revenue = price * quantity * (1 + tax) # Calculate the unit price unit_price = price / quantity # Calculate the profit profit = revenue - cost # Calculate the tax component of the total invoice amount tax_component = price * quantity * tax return { 'revenue': revenue, 'unit_price': unit_price, 'profit': profit, 'tax_component': tax_component }"},{"question":"Write a python function to find the minimum sum of a contiguous subarray within a one-dimensional array of numbers.","solution":"def min_subarray_sum(nums): Finds the minimum sum of a contiguous subarray within the array nums. if not nums: return 0 min_ending_here = min_so_far = nums[0] for num in nums[1:]: min_ending_here = min(min_ending_here + num, num) min_so_far = min(min_so_far, min_ending_here) return min_so_far"},{"question":"Write a python function to find the length of the longest prefix which is also a suffix. Given a string \`s\` consisting of lowercase English letters, your function should return the length of the longest common prefix and suffix.","solution":"def longest_prefix_suffix(s): Returns the length of the longest prefix which is also a suffix. n = len(s) if n == 0: return 0 lps = [0] * n length = 0 # length of the previous longest prefix suffix i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps[-1]"},{"question":"Write a python function to identify if a list contains all unique integers. The function should return \`True\` if all integers in the list are unique, otherwise, it should return \`False\`. Make sure not to use any additional data structures for comparison. Also, consider performance optimization.","solution":"def has_unique_integers(lst): Returns True if all integers in the list are unique, otherwise False. sorted_lst = sorted(lst) for i in range(len(sorted_lst) - 1): if sorted_lst[i] == sorted_lst[i + 1]: return False return True"},{"question":"Write a python function to display all the numbers from 1 to 10.","solution":"def display_numbers(): Returns a list of numbers from 1 to 10. return [i for i in range(1, 11)]"},{"question":"Write a python function to find the largest number in a list, but only use built-in functions available in Python 3.5 and below.","solution":"def find_largest_number(lst): Returns the largest number in a list. if not lst: return None largest = lst[0] for number in lst[1:]: if number > largest: largest = number return largest"},{"question":"Write a python function to determine if a given positive integer n is a perfect square. If n is not a perfect square, return the smallest multiple of n that is also a perfect square.","solution":"import math def find_perfect_square_or_multiple(n): Determine if the given positive integer n is a perfect square. If n is not a perfect square, return the smallest multiple of n that is also a perfect square. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") # Check if n is a perfect square if math.isqrt(n)**2 == n: return n # Find the smallest multiple of n that is a perfect square multiple = 1 while True: candidate = n * multiple if math.isqrt(candidate)**2 == candidate: return candidate multiple += 1"},{"question":"Write a python function to sort an array of integers that contain positive and negative numbers. The function should be able to sort the array in ascending order without using any external libraries.","solution":"def sort_array(arr): Sorts an array of integers that contain positive and negative numbers in ascending order. Args: arr (list): A list of integers. Returns: list: A new sorted list in ascending order. for i in range(len(arr)): for j in range(0, len(arr) - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a python function to determine if a given list of numbers is an arithmetic progression or not.","solution":"def is_arithmetic_progression(lst): Determines if a given list of numbers is an arithmetic progression. if len(lst) < 2: return True # A list with fewer than 2 elements is trivially an arithmetic progression. # Calculate the common difference common_difference = lst[1] - lst[0] # Check each pair of consecutive elements for i in range(1, len(lst)): if lst[i] - lst[i-1] != common_difference: return False return True"},{"question":"Write a python function to count the frequency of each word in a given string and return a dictionary with words as keys and their frequency as values. The function should be case-insensitive and consider only words, ignoring punctuation.","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary with words as keys and their frequency as values. Words are counted in a case-insensitive manner and punctuation is ignored. # Convert to lower case text = text.lower() # Remove punctuation using regular expressions text = re.sub(r'[^ws]', '', text) # Split the text into words words = text.split() # Create a dictionary to store the word frequency frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Write a python function to reverse a string. You should consider both upper and lower case letters. Ensure your function handles special characters and digits in the string.","solution":"def reverse_string(s): Returns the reverse of the given string. return s[::-1]"},{"question":"Write a python function to find the length of the longest palindrome in a given string. The function should return the length of the longest palindrome found. If no palindrome is found, the function should return 0.","solution":"def longest_palindrome_substring_length(s): Returns the length of the longest palindromic substring in the given string. Parameters: s (str): The input string. Returns: int: The length of the longest palindromic substring. if not s: return 0 n = len(s) dp = [[False] * n for _ in range(n)] max_len = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_len = 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_len: start = i max_len = k return max_len"},{"question":"Write a python function to find the second largest number in an array of integers. The function should return the second largest number. If the array has less than two distinct numbers, it should return None.","solution":"def second_largest(arr): Returns the second largest number in an array of integers. If the array has less than two distinct numbers, returns None. if len(arr) < 2: return None first_largest = second_largest = None for num in arr: if first_largest is None or num > first_largest: second_largest = first_largest first_largest = num elif num != first_largest and (second_largest is None or num > second_largest): second_largest = num return second_largest"},{"question":"Write a python function to reverse the elements of a list using slicing. Provide a code snippet along with a brief explanation.","solution":"def reverse_list(lst): Returns the reversed version of the input list using slicing. return lst[::-1]"},{"question":"Write a python function to reverse a stack without using any extra space.","solution":"def reverse_stack(stack): Reverses a stack in place without using any extra space. def insert_at_bottom(stack, item): if not stack: stack.append(item) else: top = stack.pop() insert_at_bottom(stack, item) stack.append(top) if stack: top = stack.pop() reverse_stack(stack) insert_at_bottom(stack, top) # Example usage: # stack = [1, 2, 3, 4] # reverse_stack(stack) # print(stack) # Output: [4, 3, 2, 1]"},{"question":"Write a python function to find the nth Fibonacci number. The nth Fibonacci number is defined as the sum of the two preceding ones, usually starting with 0 and 1. Your function should be optimized to reduce its time complexity to logarithmic.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]], ] def matrix_power(matrix, n): Computes the power of a 2x2 matrix using exponentiation by squaring. result = [[1, 0], [0, 1]] # Identity matrix base = matrix while n > 0: if n % 2 == 1: result = multiply_matrices(result, base) base = multiply_matrices(base, base) n //= 2 return result def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = matrix_power(F, n - 1) return result_matrix[0][0]"},{"question":"Write a python function to remove a specific element from an array and return the modified array. The function should accept three parameters: the array, the element to be removed, and a boolean flag indicating whether to remove all occurrences of the element or only the first occurrence.","solution":"def remove_element(arr, elem, remove_all=False): Removes either the first occurrence or all occurrences of elem from arr. Parameters: arr (list): The original array elem: The element to be removed remove_all (bool): Flag to indicate whether to remove all occurrences (default is False) Returns: list: The modified array with the specified elements removed if not remove_all: if elem in arr: arr.remove(elem) return arr else: return [x for x in arr if x != elem]"},{"question":"Write a python function to find the maximum and minimum value in an array of numbers. The function should return these two values as a tuple (maximum, minimum).","solution":"def find_max_min(arr): Returns the maximum and minimum value in an array as a tuple. Parameters: arr (list of numbers): The input array containing numbers. Returns: tuple: A tuple containing (maximum, minimum) values from the array. if not arr: raise ValueError(\\"Array cannot be empty\\") max_val = arr[0] min_val = arr[0] for num in arr: if num > max_val: max_val = num if num < min_val: min_val = num return (max_val, min_val)"},{"question":"Write a python function to return the index of first occurrence of a given element in a list.","solution":"def first_occurrence_index(lst, element): Returns the index of the first occurrence of the given element in the list. If the element is not found, returns -1. try: return lst.index(element) except ValueError: return -1"},{"question":"Write a python function to sort a list of dictionaries by the values of a specific key. Python has an inbuilt function called sorted which can be used for sorting.","solution":"def sort_dicts_by_key(list_of_dicts, key): Sorts a list of dictionaries by the specified key. :param list_of_dicts: List[Dict], list of dictionaries to be sorted :param key: str, the key by which the dictionaries should be sorted :return: List[Dict], sorted list of dictionaries return sorted(list_of_dicts, key=lambda x: x[key])"},{"question":"Write a python function to return the first non-repeating character in a string. If all characters repeat or the string is empty, return \`None\`. The function should be case-sensitive, meaning 'A' and 'a' are considered different characters.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat or the string is empty, returns None. The function is case-sensitive. if not s: return None char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a python function to check if a string containing only parentheses '()', '[]', and '{}' is balanced or not.","solution":"def is_balanced(s): Returns True if the string \`s\` containing only parentheses '()', '[]', and '{}' is balanced. Otherwise, returns False. stack = [] brackets = {')': '(', ']': '[', '}': '{'} for char in s: if char in brackets.values(): stack.append(char) elif char in brackets.keys(): if stack == [] or brackets[char] != stack.pop(): return False else: return False return stack == []"},{"question":"Write a python function to reverse a string using slicing, then write a function to check if the string is a palindrome or not.","solution":"def reverse_string(s): Returns the reversed string of 's' using slicing. return s[::-1] def is_palindrome(s): Returns True if the string 's' is a palindrome, False otherwise. A string is a palindrome if it reads the same forwards and backwards. return s == reverse_string(s)"},{"question":"Write a python function to find the unique elements in a list of lists, i.e., elements that appear exactly once in the entire list of lists.","solution":"def find_unique_elements(list_of_lists): Returns a list of unique elements that appear exactly once in the entire list of lists. from collections import Counter # Flatten the list of lists into a single list flattened_list = [element for sublist in list_of_lists for element in sublist] # Create a counter to count occurrences of each element element_counts = Counter(flattened_list) # Filter elements that appear exactly once unique_elements = [element for element, count in element_counts.items() if count == 1] return unique_elements"},{"question":"Write a python function to calculate the sum of all divisors of a given integer \`n\`.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of the given integer n. divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Write a python function to merge two sorted arrays into one sorted array without using extra space. The arrays are already sorted in ascending order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array in place without using extra space. Modifies the first array to contain the merged result. Parameters: arr1 : List[int] The first sorted array which will hold the merged array. arr2 : List[int] The second sorted array which will be merged into the first array. Assumes len(arr1) >= len(arr1) + len(arr2) m, n = len(arr1), len(arr2) for i in range(n): arr1.append(arr2[i]) arr1.sort() return arr1"},{"question":"Write a python function to calculate the sum of all elements in a 2D list (list of lists) using a generator expression.","solution":"def sum_2d_list(matrix): Returns the sum of all elements in a 2D list (list of lists). Args: matrix (list of lists of int or float): The 2D list whose elements need to be summed. Returns: int or float: The sum of all elements in the 2D list. return sum(element for row in matrix for element in row)"},{"question":"Write a python function to determine if a given string \`s\` can be transformed into a string where no two adjacent characters are the same by removing some characters. If it's possible, return the length of the resulting string; otherwise, return -1.","solution":"def can_transform(s): Determines if a given string \`s\` can be transformed into a string where no two adjacent characters are the same by removing some characters. Parameters: s (str): A string Returns: int: The length of the resulting string if possible, otherwise -1. if not s: # An empty string can trivially be transformed. return 0 count = {} for char in s: count[char] = count.get(char, 0) + 1 max_count = max(count.values()) if max_count > (len(s) + 1) // 2: return -1 return len(s)"},{"question":"Write a python function to implement the find the closest pair of points in a 2D plane. The function should return the distance between the two closest points.","solution":"import math def distance(point1, point2): Returns the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def closest_pair_of_points(points): Returns the smallest distance between two closest points in a given list of 2D points. if len(points) < 2: return float('inf') points.sort() def closest_pair_recursive(p_x, p_y): if len(p_x) <= 3: return min((distance(p_x[i], p_x[j]) for i in range(len(p_x)) for j in range(i+1, len(p_x))), default=float('inf')) mid = len(p_x) // 2 mid_x = p_x[mid][0] p_y_left = list(filter(lambda x: x[0] <= mid_x, p_y)) p_y_right = list(filter(lambda x: x[0] > mid_x, p_y)) delta_left = closest_pair_recursive(p_x[:mid], p_y_left) delta_right = closest_pair_recursive(p_x[mid:], p_y_right) delta_min = min(delta_left, delta_right) strip = [point for point in p_y if mid_x - delta_min <= point[0] <= mid_x + delta_min] for i in range(len(strip)): for j in range(i+1, len(strip)): if strip[j][1] - strip[i][1] >= delta_min: break delta_min = min(delta_min, distance(strip[i], strip[j])) return delta_min p_x = points p_y = sorted(points, key=lambda x: x[1]) return closest_pair_recursive(p_x, p_y)"},{"question":"Write a python function to convert a integer to its hexadecimal equivalent.","solution":"def int_to_hex(n): Convert an integer to its hexadecimal equivalent as a string. :param n: integer :return: hexadecimal string if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") return hex(n)"},{"question":"Write a python function to find the slope of a line given two points (x1, y1) and (x2, y2). The function should return the slope of the line as a float. If both points have the same x-coordinate, the function should return None, as the slope is undefined in this case.","solution":"def find_slope(x1, y1, x2, y2): Returns the slope of the line passing through the points (x1, y1) and (x2, y2). If the line is vertical (x1 == x2), the slope is undefined and the function returns None. if x1 == x2: return None return (y2 - y1) / (x2 - x1)"},{"question":"Write a python function to find and print all the pairs of prime numbers that sum up to N, where N is a given even number. If no such pairs exist, print \\"No such pair exists\\".","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**(0.5)) + 1): if num % i == 0: return False return True def prime_pairs_sum(N): Returns a list of all pairs of prime numbers that sum up to N. If no such pairs exist, returns an empty list. if N % 2 != 0 or N < 2: return \\"No such pair exists\\" primes = [i for i in range(2, N) if is_prime(i)] pairs = [] for pr in primes: if is_prime(N - pr) and (N - pr, pr) not in pairs: pairs.append((pr, N - pr)) if pairs: return pairs else: return \\"No such pair exists\\""},{"question":"Write a python function to find the largest number in a 2D array (matrix). This function should also be able to handle cases where the matrix contains non-numeric values (e.g., strings) by ignoring them and only considering numeric values. To solve this, traverse the 2D array element by element and keep track of the largest numeric value found.","solution":"def find_largest_number(matrix): Finds the largest numeric value in a 2D array (matrix). Non-numeric values are ignored. :param matrix: List of lists containing the matrix elements :return: The largest numeric value in the matrix, or None if no numeric value is found largest_number = None for row in matrix: for element in row: if isinstance(element, (int, float)): if largest_number is None or element > largest_number: largest_number = element return largest_number"},{"question":"Write a python function to sort a list of numbers. The function should return the sorted list.","solution":"def sort_numbers(numbers): Returns the sorted list of numbers. return sorted(numbers)"},{"question":"Write a python function to find the maximum sum in a circular subarray. The circular subarray can be defined as a subarray that wraps around the end of the array to the start.","solution":"def max_subarray_sum_circular(nums): Returns the maximum sum of a circular subarray in the given list of integers. if not nums: return 0 def kadane(arr): max_current = max_global = arr[0] for x in arr[1:]: max_current = max(x, max_current + x) if max_current > max_global: max_global = max_current return max_global max_kadane = kadane(nums) total_sum = sum(nums) max_wrap = total_sum + kadane([-x for x in nums]) return max(max_kadane, max_wrap) if max_wrap != 0 else max_kadane"},{"question":"Write a python function to reverse a string in place. What are the theoretical complexities for the built-in string reverse methods in Python 3.x?","solution":"def reverse_string(s): Reverses the input string s in place. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a python function to print the first N powers of 2. The function should take an integer N as an argument and print the sequence of 2^0 through 2^(N-1).","solution":"def print_powers_of_2(N): Prints the first N powers of 2. The function will print 2^0 through 2^(N-1). Args: N (int): the number of powers of 2 to print. powers = [] for i in range(N): powers.append(2 ** i) return powers"},{"question":"Write a python function to create a CLI application that integrates with an existing REST API to retrieve user information by user ID. The function should handle the input arguments from the command line and print the user details to the console.","solution":"import argparse import requests def get_user_info(user_id): Retrieves user information by user ID from a REST API and prints the details. url = f\\"https://jsonplaceholder.typicode.com/users/{user_id}\\" response = requests.get(url) if response.status_code == 200: user_info = response.json() print(f\\"User ID: {user_info['id']}\\") print(f\\"Name: {user_info['name']}\\") print(f\\"Username: {user_info['username']}\\") print(f\\"Email: {user_info['email']}\\") print(f\\"Address: {user_info['address']['street']}, {user_info['address']['suite']}, {user_info['address']['city']}, {user_info['address']['zipcode']}\\") print(f\\"Phone: {user_info['phone']}\\") print(f\\"Website: {user_info['website']}\\") print(f\\"Company: {user_info['company']['name']}\\") else: print(f\\"Failed to retrieve user info. Status code: {response.status_code}\\") def main(): parser = argparse.ArgumentParser(description=\\"Retrieve user information by user ID\\") parser.add_argument('user_id', type=int, help=\\"User ID to retrieve information for\\") args = parser.parse_args() get_user_info(args.user_id) if __name__ == \\"__main__\\": main()"},{"question":"Write a python function to calculate the Hamming Distance between two strings. The Hamming Distance is the number of positions at which the corresponding symbols are different.","solution":"def hamming_distance(str1, str2): Calculates the Hamming Distance between two strings of equal length. Args: str1 (str): First string. str2 (str): Second string. Returns: int: The Hamming distance between str1 and str2. Raises: ValueError: If the input strings are not of equal length. if len(str1) != len(str2): raise ValueError(\\"Strings must be of the same length\\") return sum(el1 != el2 for el1, el2 in zip(str1, str2))"},{"question":"Write a python function to find the value of 1 / (1 + 1 / (2 + 1 / (3 + ... + 1/n)))","solution":"def continued_fraction(n): Calculate the value of the continued fraction 1 / (1 + 1 / (2 + 1 / (3 + ... + 1/n))). if n == 1: return 1 result = 1 / n for i in range(n-1, 0, -1): result = 1 / (i + result) return result"},{"question":"Write a python function to count the number of characters in a string that are vowels, even if they appear more than once.","solution":"def count_vowels(s): Returns the count of vowels (a, e, i, o, u) in the string s. vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a python function to calculate the multiply of a number by 10 and return the result.","solution":"def multiply_by_10(number): Returns the result of multiplying the given number by 10. return number * 10"},{"question":"Write a python function to find the height of the binary search tree (BST). The height of a binary search tree is the maximum depth from the root node to any leaf node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def height_of_bst(root): Returns the height of the binary search tree. if root is None: return -1 left_height = height_of_bst(root.left) right_height = height_of_bst(root.right) return max(left_height, right_height) + 1"},{"question":"Write a python function to find the maximum number in a list. The list can contain any type of elements. How can the function handle different data types?","solution":"def max_in_list(lst): Returns the maximum number in a list. If the list contains elements that are not comparable to integers or floats, they are ignored. max_num = None for item in lst: if isinstance(item, (int, float)): if max_num is None or item > max_num: max_num = item return max_num"},{"question":"Write a python function to remove all special characters, numbers, and punctuation from a string, keeping only English alphabet letters.","solution":"import re def remove_special_characters(input_string): Removes all special characters, numbers, and punctuation from the input string, keeping only English alphabet letters. return re.sub(r'[^a-zA-Z]', '', input_string)"},{"question":"Write a python function to detect and count the number of digits in a string using a functional programming approach.","solution":"from functools import reduce def count_digits_in_string(s): Returns the count of digits in the given string. return reduce(lambda acc, char: acc + 1 if char.isdigit() else acc, s, 0)"},{"question":"Write a python function to return minimum and maximum element of an array.","solution":"def min_max(arr): Returns a tuple containing the minimum and maximum element of the array. Parameters: arr (list): The list of numerical elements Returns: Tuple: A tuple containing the minimum and maximum element if len(arr) == 0: raise ValueError(\\"Array cannot be empty\\") min_element = min(arr) max_element = max(arr) return (min_element, max_element)"},{"question":"Write a python function to find out if a given number is a power of two. You should handle all edge cases such as negative numbers, zero, and non-integer values. Additionally, provide a brief explanation of your approach.","solution":"def is_power_of_two(n): Determines if a given number is a power of two. Parameters: - n: The number to check. Returns: - True if n is a power of two, False otherwise. # Check if the number is a positive integer if not isinstance(n, int) or n <= 0: return False # A number is a power of two if there is only one bit set in its binary representation return (n & (n - 1)) == 0"},{"question":"Write a python function to remove duplicates from a list. The function should return a new list with all the duplicates removed. The function should handle lists with integers, strings, and mixed data types.","solution":"def remove_duplicates(input_list): Returns a new list with duplicates removed from the input list. The function works with lists containing integers, strings, and mixed data types. seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a python function to find the two distinct elements in an array that occur odd numbers of times. All other elements occur even number of times.","solution":"def find_two_odd_occurrences(arr): Find the two distinct elements in 'arr' that occur odd numbers of times. All other elements occur even number of times. Parameters: arr (list): List of integers. Returns: tuple: Two integers that occur odd number of times. xor_all = 0 for num in arr: xor_all ^= num # Find the rightmost set bit in xor_all (bitwise AND with negative of itself) set_bit = xor_all & -xor_all result = [0, 0] for num in arr: if num & set_bit: result[0] ^= num else: result[1] ^= num return tuple(result)"},{"question":"Write a python function to print \\"Gugugu!\\" as many number of times as specified by the user input. The function should take an integer as its parameter.","solution":"def gugugu(n): Prints \\"Gugugu!\\" n times, where n is the integer input. for _ in range(n): print(\\"Gugugu!\\")"},{"question":"Write a python function to read data from a CSV file and return a list of dictionaries, where each dictionary corresponds to a row in the CSV file and the keys in the dictionary correspond to the column names.","solution":"import csv def read_csv_to_dict_list(filepath): Reads a CSV file and returns a list of dictionaries. Each dictionary corresponds to a row in the CSV file and the keys in the dictionary correspond to the column names. :param filepath: The path to the CSV file. :return: A list of dictionaries, one dictionary per row. dict_list = [] with open(filepath, mode='r', newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: dict_list.append(dict(row)) return dict_list"},{"question":"Write a python function to generate Fibonacci sequence up to n elements. You should utilize a generator to accomplish this.","solution":"def fibonacci_gen(n): Generator to yield the Fibonacci sequence up to n elements. a, b = 0, 1 count = 0 while count < n: yield a a, b = b, a + b count += 1"},{"question":"Write a python function to calculate the sum of all integers in a given list. The function should have a time complexity of O(n).","solution":"def sum_of_integers(int_list): Returns the sum of all integers in the given list. :param int_list: List of integers. :return: Integer sum of all elements in the list. return sum(int_list)"},{"question":"Write a python function to find the maximum subsequence sum using Kadane's Algorithm.","solution":"def max_subsequence_sum(arr): Finds the maximum subsequence sum using Kadane's Algorithm. Parameters: arr (list): List of integers. Returns: int: The maximum subsequence sum. if not arr: return 0 max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to solve the problem of finding the number of distinct paths in a maze. The maze is represented as a 2D grid, where 0 indicates a walkable path and 1 indicates a wall. You can move in any of the four directions (up, down, left, right) but cannot go through walls. The function should return the total number of distinct paths from the top-left corner to the bottom-right corner. If there are no valid paths, the function should return 0.","solution":"def count_paths(maze): Returns the number of distinct paths in the maze from top-left to bottom-right. :param maze: List of List of int, representing the maze grid :return: int, number of distinct paths if not maze or not maze[0] or maze[0][0] == 1 or maze[-1][-1] == 1: return 0 rows, cols = len(maze), len(maze[0]) dp = [[0 for _ in range(cols)] for _ in range(rows)] dp[0][0] = 1 for i in range(rows): for j in range(cols): if maze[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"Write a python function to invert a binary tree (flip each left and right subtree). Given a binary tree node, return the root of the inverted tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): Invert a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: TreeNode: The root of the inverted binary tree. if root is None: return None # Swap the left and right child root.left, root.right = root.right, root.left # Recursively invert the left and right subtrees invert_tree(root.left) invert_tree(root.right) return root"},{"question":"Write a python function to count the number of words in a string. A word is defined as any sequence of characters separated by white spaces. You need to handle multiple white spaces and trailing white spaces.","solution":"def count_words(s): Returns the number of words in the string s. A word is defined as any sequence of characters separated by white spaces. # Strip leading/trailing spaces, split by white spaces and filter any empty strings words = list(filter(None, s.strip().split())) return len(words)"},{"question":"Write a python function to count the number of occurrences of a substring within a given string. Here's the substring you need to count: \\"hello\\". You are encouraged to use the built-in Python functions to solve this problem.","solution":"def count_hello_occurrences(s): Returns the number of occurrences of the substring 'hello' in the given string s. return s.count('hello')"},{"question":"Write a python function to normalize the content of a file. Standardize the case of the text (lowercase), remove all non-alphanumeric characters, and split the text into a list of words. Also, ensure that the function handles any file input errors gracefully and returns an appropriate message if the file cannot be read.","solution":"import re def normalize_file_content(file_path): Normalizes the content of a file by converting text to lowercase, removing all non-alphanumeric characters, and splitting the text into a list of words. Args: - file_path: str: path to the file to be normalized Returns: - list: a list of words if the file is read successfully - str: an error message if the file cannot be read try: with open(file_path, 'r', encoding='utf-8') as file: content = file.read() # Convert to lowercase content = content.lower() # Remove all non-alphanumeric characters content = re.sub(r'[^a-z0-9s]', '', content) # Split the text into words words = content.split() return words except Exception as e: return f\\"Error reading file: {str(e)}\\""},{"question":"Write a python function to reverse a string from scratch. You are not allowed to use any slicing or built-in function that directly reverses a string.","solution":"def reverse_string(input_str): Reverses a given string without using slicing or built-in functions that directly reverse the string. reversed_str = \\"\\" for char in input_str: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to find the maximum salary from a given list of dictionaries. Each dictionary represents an employee with attributes 'name' and 'salary'. The function should return the maximum salary found. If the list is empty, return 0.","solution":"def find_max_salary(employees): Returns the maximum salary from a list of employee dictionaries. Each dictionary contains 'name' and 'salary'. Args: employees (list): A list of dictionaries with 'name' and 'salary' keys. Returns: int: The maximum salary found or 0 if the list is empty. if not employees: return 0 return max(employee['salary'] for employee in employees)"},{"question":"Write a python function to convert an integer to a binary string. The function should take an integer as input and return a string representing the binary equivalent of the integer. If the input integer is negative, the binary string should also handle negative numbers using two's complement representation.","solution":"def int_to_binary(n): Converts an integer to a binary string. For negative numbers, it uses two's complement representation for a 32-bit integer. if n >= 0: return bin(n)[2:] else: return bin((1 << 32) + n)[2:]"},{"question":"Write a python function to count the number of vowels in a given substring.","solution":"def count_vowels(s): Returns the number of vowels in the given string s. vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a python function to find the median of two sorted arrays nums1 and nums2.","solution":"def findMedianSortedArrays(nums1, nums2): Finds the median of two sorted arrays nums1 and nums2. merged_array = sorted(nums1 + nums2) n = len(merged_array) if n % 2 == 1: return merged_array[n // 2] else: return (merged_array[n // 2 - 1] + merged_array[n // 2]) / 2"},{"question":"Write a python function to compute the factorial of a given number n recursively. The function should be able to handle inputs up to a reasonable limit (e.g., not exceed the recursion limit of Python). A factorial of a number n (denoted as n!) is the product of all positive integers less than or equal to n. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.","solution":"def factorial(n): Returns the factorial of the given number n using recursion. Args: n (int): The number to compute the factorial of. Returns: int: The factorial of n. Raises: ValueError: If n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to convert a decimal number to its binary string representation encased in \\"db\\" at the beginning and the end. The function should handle both positive and negative integers.","solution":"def decimal_to_binary_encased(decimal_number): Converts a decimal number to its binary string representation encased in \\"db\\" at the beginning and the end. Handles both positive and negative integers. if decimal_number < 0: binary_representation = bin(decimal_number)[3:] # Remove the '-0b' prefix and keep the rest return f\\"db-{binary_representation}db\\" else: binary_representation = bin(decimal_number)[2:] # Remove the '0b' prefix and keep the rest return f\\"db{binary_representation}db\\""},{"question":"Write a python function to merge two dictionaries into one. If there are any duplicate keys, the value from the second dictionary should overwrite the value from the first.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries into one. If there are any duplicate keys, the value from the second dictionary overwrites the value from the first. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: The merged dictionary. merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"Write a python function to find the sum of the first n terms of a geometric series that starts with 1, and each subsequent term doubles the previous term. The function should return the sum of these terms rounded to two decimal places.","solution":"def geometric_series_sum(n): Returns the sum of the first n terms of a geometric series that starts with 1 and each subsequent term doubles the previous term, rounded to two decimal places. if n <= 0: return 0.0 # the sum of the first n terms of a geometric series where the # first term a = 1 and the common ratio r = 2 is calculated as: # S_n = a * (1 - r^n) / (1 - r) # here a = 1 and r = 2 sum_n = (1 * (1 - 2**n)) / (1 - 2) return round(sum_n, 2)"},{"question":"Write a python function to find the maximum number of non-overlapping intervals that can be selected from the given list of intervals.","solution":"def max_non_overlapping_intervals(intervals): Find the maximum number of non-overlapping intervals that can be selected. Args: intervals (List[Tuple[int, int]]): List of intervals represented as tuples (start, end). Returns: int: Maximum number of non-overlapping intervals. if not intervals: return 0 # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = float('-inf') for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] return count"},{"question":"Write a python function to calculate the divisor sum of a given number.","solution":"def divisor_sum(n): Returns the sum of all divisors of the given number n. if n <= 0: return 0 total = 0 for i in range(1, n + 1): if n % i == 0: total += i return total"},{"question":"Write a python function to implement a circular queue.","solution":"class CircularQueue: def __init__(self, k): Initialize the queue with a fixed size k. self.queue = [None] * k self.max_size = k self.front = 0 self.rear = 0 self.current_size = 0 def enqueue(self, value): Insert an element into the circular queue. Return True if the operation is successful. if self.is_full(): return False self.queue[self.rear] = value self.rear = (self.rear + 1) % self.max_size self.current_size += 1 return True def dequeue(self): Delete an element from the circular queue. Return True if the operation is successful. if self.is_empty(): return False self.queue[self.front] = None self.front = (self.front + 1) % self.max_size self.current_size -= 1 return True def front_element(self): Get the front item from the queue. if self.is_empty(): return -1 return self.queue[self.front] def rear_element(self): Get the last item from the queue. if self.is_empty(): return -1 return self.queue[(self.rear - 1 + self.max_size) % self.max_size] def is_empty(self): Checks whether the circular queue is empty or not. return self.current_size == 0 def is_full(self): Checks whether the circular queue is full or not. return self.current_size == self.max_size"},{"question":"Write a python function to count the occurrences of each unique value in a list.","solution":"from collections import Counter def count_occurrences(lst): Returns a dictionary with the count of each unique value in the list. return dict(Counter(lst))"},{"question":"Write a python function to find all the unique subsets of a given set.","solution":"from itertools import combinations def unique_subsets(s): Returns all unique subsets of the given set s. subsets = [] s = list(s) for r in range(len(s) + 1): for comb in combinations(s, r): subsets.append(set(comb)) return subsets"},{"question":"Write a python function to find the maximum sum of an hourglass in a given grid matrix of size N x N. An hourglass in a grid is a shape consisting of three cells on top of each other and two cells horizontally next to the middle cell of the top three cells.","solution":"def max_hourglass_sum(grid): Returns the maximum hourglass sum in a given N x N grid. An hourglass sum is defined by the sum of values in an hourglass shape. n = len(grid) if n < 3: return 0 # No hourglass possible in smaller grids max_sum = float('-inf') for i in range(n - 2): for j in range(n - 2): top = grid[i][j] + grid[i][j+1] + grid[i][j+2] middle = grid[i+1][j+1] bottom = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2] hourglass_sum = top + middle + bottom max_sum = max(max_sum, hourglass_sum) return max_sum"},{"question":"Write a python function to calculate the sum of two numbers, then find the square of the result.","solution":"def sum_and_square(a, b): Returns the square of the sum of a and b. sum_ab = a + b return sum_ab ** 2"},{"question":"Write a python function to check if a given positive integer is a palindrome in a given base, where the base can be any integer between 2 and 36 (inclusive). A palindrome is a number that reads the same backward as forward, regardless of the base.","solution":"def is_palindrome_in_base(n, base): Check if a given positive integer n is a palindrome in the provided base (2 to 36 inclusive). Parameters: - n: int - The number to check. - base: int - The base in which to check for palindrome property. Returns: - bool - True if n is a palindrome in the given base, False otherwise. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36\\") # Convert the number to the given base as a string digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" while n > 0: result = digits[n % base] + result n = n // base # Check if the result string is a palindrome return result == result[::-1]"},{"question":"Write a python function to count the number of words in a given string. The function should split the string into words based on spaces and count the number of words. If the input string is empty or contains only spaces, the function should return 0.","solution":"def count_words(s): Counts the number of words in the given string \`s\`. Words are delimited by spaces. # Split the string based on spaces and filter out empty strings (consecutive spaces) words = [word for word in s.split(' ') if word] # Return the length of the filtered list return len(words)"},{"question":"Write a python function to solve this problem: Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. You must write an algorithm that runs in O(n) time complexity and does not use the division operation.","solution":"def product_except_self(nums): Given an array nums, return an array such that each element at index i is the product of all the elements of nums except nums[i]. Time complexity: O(n) n = len(nums) # Initialize the result array with 1s result = [1] * n # Calculate products below the current index prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Calculate products above the current index while updating the result array suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Write a python function to check if a string contains only digits. What is the time complexity of this function?","solution":"def is_only_digits(s): Returns True if the string s contains only digits, False otherwise. return s.isdigit() # Time Complexity: O(n), where n is the length of the string s. # This is because the isdigit() method iterates through each character of the string to check if it is a digit."},{"question":"Write a python function to calculate the first n terms of a geometric progression.","solution":"def geometric_progression(a, r, n): Generates the first n terms of a geometric progression. Parameters: a (int/float): The first term of the progression. r (int/float): The common ratio. n (int): The number of terms to generate. Returns: list: A list containing the first n terms of the geometric progression. return [a * r**i for i in range(n)]"},{"question":"Write a python function to find all occurrences of a given number in a list Using the index as an element, retrieve the corresponding value in another list and print it.","solution":"def find_and_retrieve(index_list, value_list, number): Finds all occurrences of a given number in index_list and retrieves corresponding values from value_list. Parameters: index_list (list of int): The list in which to search for the number. value_list (list of any): The list from which to retrieve values. number (int): The number to find in index_list. Returns: list of any: The list of values corresponding to the found indices. if len(index_list) != len(value_list): raise ValueError(\\"Both lists must have the same length.\\") result = [] for idx, val in enumerate(index_list): if val == number: result.append(value_list[idx]) return result"},{"question":"Write a python function to print the first N Fibonacci numbers. The Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n): Prints the first N Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to print. if n <= 0: print([]) return [] fib_nums = [0] * n if n > 0: fib_nums[0] = 0 if n > 1: fib_nums[1] = 1 for i in range(2, n): fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2] print(fib_nums) return fib_nums"},{"question":"Write a python function to find the number of pairs in a given array whose sum is equal to a specified target value.","solution":"def count_pairs_with_sum(arr, target): Returns the number of pairs in the array whose sum is equal to the target value. :param arr: List of integers :param target: Target sum integer :return: Integer representing the number of pairs whose sum is equal to the target value count = 0 seen = {} for num in arr: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Write a python function to find the biggest Fibonacci numbers that can be written as the sum of two smaller Fibonacci numbers.","solution":"def is_fibonacci_number(n): Check if a number is a Fibonacci number using the property that a number n is Fibonacci if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) def is_perfect_square(x): Check if a number x is a perfect square. s = int(x**0.5) return s*s == x def generate_fibonacci_up_to(max_value): Generates all Fibonacci numbers up to a given max_value. fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > max_value: break fib_sequence.append(next_fib) return fib_sequence def largest_fibonacci_as_sum(): Find the largest Fibonacci number that can be written as the sum of two smaller Fibonacci numbers. max_possible_value = 10**6 fibonacci_sequence = generate_fibonacci_up_to(max_possible_value) fibonacci_set = set(fibonacci_sequence) largest_sum_fib = 0 for i in range(len(fibonacci_sequence) - 1, 1, -1): for j in range(i): if fibonacci_sequence[i] - fibonacci_sequence[j] in fibonacci_set: largest_sum_fib = fibonacci_sequence[i] break if largest_sum_fib > 0: break return largest_sum_fib"},{"question":"Write a python function to count the number of words in a given sentence, where a word is defined as a sequence of characters separated by spaces.","solution":"def count_words(sentence): Returns the number of words in a given sentence. A word is defined as a sequence of characters separated by spaces. words = sentence.split() return len(words)"},{"question":"Write a python function to search for a specific element in a sorted list using the binary search algorithm. Return the index of the element if found, otherwise return the target element would be at if sorted.","solution":"def binary_search_insert_position(arr, target): Perform binary search to find the index of the target or the position where it should be. If the target is found, return its index. If not found, return the index where the target should be inserted. Parameters: arr (list of int): The sorted list in which to search. target (int): The target element to search for. Returns: int: The index of the target if found, otherwise the insert position. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Write a python function to convert a number to its binary representation without using built-in functions like \`bin()\` or \`format()\`. The function should take a single integer as input and return a string representation of its binary format.","solution":"def int_to_binary(n): Convert an integer to its binary representation without using built-in functions. Parameters: n (int): The integer to be converted to binary. Returns: str: The binary representation of the integer. if n == 0: return '0' result = [] is_negative = n < 0 n = abs(n) while n > 0: result.append(str(n % 2)) n = n // 2 if is_negative: result.append('-') result.reverse() return ''.join(result)"},{"question":"Write a python function to calculate the n power of a number. The power is calculated as n^2. For example, if the input number is 4, the output should be 16, since 4^2 = 16.","solution":"def power_of_two(n): Returns the square of n. return n ** 2"},{"question":"Write a python function to find the largest rectangle in a histogram given the heights of the histogram bars. The function should return the area of the largest rectangle.","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to delete all instances of a specified value from a list.","solution":"def delete_all_instances(lst, value): Deletes all instances of the specified value from the list. Args: lst (list): The list from which to delete instances. value: The value to delete from the list. Returns: list: The list with all instances of the value removed. return [item for item in lst if item != value]"},{"question":"Write a python function to merge two sorted lists and return the merged list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"Write a python function to compare 3 numbers: A, B and C. It should return the greatest of all the three numbers. How would you approach this problem?","solution":"def greatest_of_three(a, b, c): Returns the greatest of the three numbers a, b, and c. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a python function to find the number of islands in a 2D grid map (each 1 represents land and 0 represents water). Your function should return the total number of islands.","solution":"def num_islands(grid): def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0': return grid[i][j] = '0' # mark as visited dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) if not grid: return 0 num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': num_islands += 1 dfs(grid, i, j) return num_islands"},{"question":"Write a python function to extract all email addresses from a given string using regular expressions.","solution":"import re def extract_emails(input_string): Extract all email addresses from a given string using regular expressions. Parameters: input_string (str): The string from which to extract email addresses. Returns: list: A list of extracted email addresses. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.findall(email_pattern, input_string)"},{"question":"Write a python function to find the first occurrence of a substring within a string. You should return the starting index of the substring if it is found, and -1 if it is not found.","solution":"def find_substring(main_string, sub_string): Returns the starting index of the first occurrence of sub_string in main_string or -1 if sub_string is not found. return main_string.find(sub_string)"},{"question":"Write a python function to take a list of integers as input and return the list sorted in descending order.","solution":"def sort_descending(lst): Returns the list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Write a python function to remove all occurrences of a given character from a string, and capitalize the remaining characters.","solution":"def remove_and_capitalize(s, char): Removes all occurrences of a given character from a string and capitalizes the remaining characters. Parameters: s (str): The input string. char (str): The character to remove. Returns: str: Modified string with specified character removed and remaining characters capitalized. return s.replace(char, '').upper()"},{"question":"Write a python function to find the largest palindrome in a string. The function should return the palindromic substring that is the longest. If there's more than one, return the one that appears first in the string. If no palindromic substring is found, return an empty string. Consider only alphanumeric characters and ignore case sensitivity. For simplification, accents and special characters are also ignored.","solution":"def longest_palindrome(s): Finds the longest palindromic substring in the given string. Considers only alphanumeric characters and ignores case sensitivity. Args: s (str): the input string. Returns: str: the longest palindromic substring, or empty string if none found. import re def is_palindrome(substr): return substr == substr[::-1] # Clean the string to only include alphanumeric characters and convert to lower case s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() n = len(s) if n == 0: return \\"\\" longest = \\"\\" for i in range(n): for j in range(i, n): substr = s[i:j+1] if is_palindrome(substr): if len(substr) > len(longest): longest = substr return longest"},{"question":"Write a python function to find the sum of all the distinct multiples of 3 or 5 below a given number \`n\`.","solution":"def sum_of_multiples(n): Returns the sum of all distinct multiples of 3 or 5 below the given number n. multiples = set() # Using a set to store distinct multiples for i in range(3, n, 3): multiples.add(i) for i in range(5, n, 5): multiples.add(i) return sum(multiples)"},{"question":"Write a python function to calculate the factorial of a given number. The function should be able to handle numbers from 0 to 20. For numbers outside this range, the function should return a message indicating the number is out of the valid range.","solution":"def factorial(n): Returns the factorial of n if n is between 0 and 20 inclusive. For numbers outside this range, returns a message indicating the number is out of the valid range. if not (0 <= n <= 20): return \\"Number is out of the valid range. Please provide a number between 0 and 20 inclusive.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to solve the given problem.","solution":"def convert_to_roman(num): Convert an integer to a Roman numeral. :param num: Integer value to be converted, should be between 1 and 3999. :return: A string representing the Roman numeral of the given integer. if not (1 <= num <= 3999): raise ValueError(\\"Number must be between 1 and 3999\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Write a python function to create a 2D list (matrix) of size m x n filled with zeros.","solution":"def create_zero_matrix(m, n): Creates a 2D list (matrix) of size m x n filled with zeros. :param m: number of rows :param n: number of columns :return: 2D list (matrix) of size m x n filled with zeros return [[0 for _ in range(n)] for _ in range(m)]"},{"question":"Write a python function to add two numbers, \`a\` and \`b\`, and return their sum.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a python function to find the factorial of a given positive integer. The function should handle the edge case where the input is 0, as the factorial of 0 is defined as 1.","solution":"def factorial(n): Returns the factorial of a given positive integer n. The factorial of 0 is defined as 1. :param n: int - A positive integer whose factorial is to be computed :return: int - The factorial of the input number if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to filter and display only the files with a specific extension in a given directory.","solution":"import os def filter_files_by_extension(directory, extension): Returns a list of files in the specified directory with the specified extension. Args: directory (str): The path to the directory to search. extension (str): The file extension to filter by (e.g., 'txt', 'jpg'). Returns: list: A list of filenames with the specified extension. if not os.path.isdir(directory): return [] return [filename for filename in os.listdir(directory) if filename.endswith(f\\".{extension}\\")]"},{"question":"Write a python function to find the most frequent element in a list. If there are multiple most frequent elements, return all of them in a list.","solution":"from collections import Counter from typing import List, Union def most_frequent_element(lst: List[int]) -> Union[int, List[int]]: Returns the most frequent element(s) in a list. If there are multiple elements with the same highest frequency, it returns them in a list. if not lst: return [] count = Counter(lst) max_freq = max(count.values()) frequent_elements = [k for k, v in count.items() if v == max_freq] if len(frequent_elements) == 1: return frequent_elements[0] else: return frequent_elements"},{"question":"Write a python function to calculate the minimum number of days required to prepare for a marathon running challenge.","solution":"def minimum_training_days(total_distance, daily_increase): Calculate the minimum number of days required to prepare for a marathon running challenge. Args: total_distance (float): Total distance to be achieved in training (e.g., 42.195 km). daily_increase (float): Daily increase in distance run per day. Returns: int: Minimum number of days required for training. if daily_increase <= 0 or total_distance <= 0: raise ValueError(\\"Daily increase and total distance must be positive values.\\") days = 0 current_distance = 0 while current_distance < total_distance: days += 1 current_distance += daily_increase return days"},{"question":"Write a python function to extract specific information from a given string.","solution":"import re def extract_information(input_string): Extracts numbers and words from the input_string and returns them as separate lists. :param input_string: String from which to extract information :return: A tuple of two lists: (words_list, numbers_list) words = re.findall(r'[A-Za-z]+', input_string) numbers = re.findall(r'd+', input_string) return words, list(map(int, numbers))"},{"question":"Write a python function to find the minimum value in a given list. If the list is empty, return \`None\`.","solution":"def find_minimum(lst): Returns the minimum value in a given list. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a python function to calculate the sum of the squares of the numbers from 1 to n. The function should take an integer \`n\` as input and return the sum as a float.","solution":"def sum_of_squares(n): Returns the sum of the squares of the numbers from 1 to n. Parameters: n (int): The upper limit of the sequence. Returns: float: The sum of squares from 1 to n. if n < 1: return 0.0 return float(sum(i**2 for i in range(1, n + 1)))"},{"question":"Write a python function to find the longest common subsequence (LCS) between two sequences. The function should take two sequences, seq1 and seq2, as input and return the length of the LCS.","solution":"def longest_common_subsequence(seq1, seq2): Finds the length of the longest common subsequence between two sequences. Parameters: seq1: First sequence (list or string). seq2: Second sequence (list or string). Returns: Length of the longest common subsequence. m = len(seq1) k = len(seq2) # Creating a DP table to store lengths of longest common subsequence. dp = [[0] * (k + 1) for _ in range(m + 1)] # Building the dp array from bottom up for i in range(1, m + 1): for j in range(1, k + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the LCS is in the bottom-right cell of the table return dp[m][k]"},{"question":"Write a python function to find the maximum area of a square inscribed in a right-angled triangle. The function should take the lengths of the two legs as input parameters. The legs are perpendicular to each other and the legs' lengths are positive integers.","solution":"def max_square_area(leg1, leg2): Returns the maximum area of a square that can be inscribed in a right-angled triangle. :param leg1: Length of the first leg. :param leg2: Length of the second leg. :return: Maximum area of the inscribed square. return (leg1 * leg2) / (leg1 + leg2)"},{"question":"Write a python function to find the number of rectangles that can be formed within a given N*M grid. You can consider all possible rectangles with sides parallel to the grid's sides. The answer should be given modulo 1,000,000,007.","solution":"def num_rectangles(N, M): Returns the number of rectangles that can be formed within a given N*M grid. The answer is given modulo 1,000,000,007. MOD = 1_000_000_007 # The number of rectangles in an N*M grid is calculated by the formula: # (N * (N + 1) // 2) * (M * (M + 1) // 2) num_rects = (N * (N + 1) // 2) * (M * (M + 1) // 2) return num_rects % MOD"},{"question":"Write a python function to reverse a string in place without allocating any extra space.","solution":"def reverse_string_in_place(s): Reverses the input string s in place without allocating extra space. Handles the input as a list of characters since strings are immutable in Python. s = list(s) # Convert the string to a list to manipulate it in place left = 0 right = len(s) - 1 while left < right: # Swap the characters s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s) # Convert the list back to a string"},{"question":"Write a python function to sort an array of tuples based on the second items in the tuple in ascending order.","solution":"def sort_tuples_by_second_item(arr): Sort an array of tuples based on the second items in the tuple in ascending order. Parameters: arr (list of tuple): A list of tuples to be sorted. Returns: list of tuple: The sorted list of tuples. return sorted(arr, key=lambda x: x[1])"},{"question":"Write a python function to find the the median of an array of integers. The array can be an unsorted array of integers. Please show the solution.","solution":"def find_median(arr): Returns the median of an array of integers. The array can be unsorted. n = len(arr) sorted_arr = sorted(arr) mid = n // 2 if n % 2 == 0: return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2 else: return sorted_arr[mid]"},{"question":"Write a python function to solve a given binary tree problem. You need to return the sum of all the nodes in the path from the root node to the leaf node having maximum sum.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_sum_path(root): Calculate the maximum sum path from root to leaf in a binary tree. :param root: TreeNode, the root of the binary tree :return: int, the maximum sum from root to leaf def dfs(node): if not node: return 0 left_sum = dfs(node.left) right_sum = dfs(node.right) return node.val + max(left_sum, right_sum) return dfs(root)"},{"question":"Write a python function to sort a list of numbers in ascending order using the insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts a list of numbers in ascending order using the insertion sort algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: A sorted list of numbers in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to print the first and last elements of a list.","solution":"def print_first_last(lst): Prints the first and last elements of a list. If the list is empty, prints a message indicating that. If the list contains only one element, prints that element twice. if not lst: print(\\"The list is empty\\") elif len(lst) == 1: print(lst[0], lst[0]) else: print(lst[0], lst[-1])"},{"question":"Write a python function to find the kth largest element in an unsorted array. The function should return the kth largest number without sorting the entire array.","solution":"import heapq def find_kth_largest(nums, k): Returns the kth largest element in an unsorted array. Parameters: nums (list of int): The list of numbers. k (int): The \\"k\\" indicating the kth largest element to find. Returns: int: The kth largest element. # Use a min heap of size k to keep track of the k largest elements seen so far min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) return min_heap[0]"},{"question":"Write a python function to print all prime numbers between two given numbers. The function should take two integers as arguments and print all the prime numbers that fall between the smaller number and the larger number, inclusive.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def print_primes_between(a, b): Prints all prime numbers between two given numbers a and b inclusive. start = min(a, b) end = max(a, b) for num in range(start, end + 1): if is_prime(num): print(num)"},{"question":"Write a python function to find the Kth largest element in an array using the heap data structure.","solution":"import heapq def find_kth_largest(nums, k): Finds the Kth largest element in an array using the heap data structure. Parameters: nums (List[int]): The list of integers. k (int): The Kth position to find the largest element. Returns: int: The Kth largest element in the array. return heapq.nlargest(k, nums)[-1]"},{"question":"Write a python function to calculate the sum of the prime numbers within a given range. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_range(start, end): Calculate the sum of prime numbers within a given range [start, end]. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"Write a python function to extract all occurrences of a specific substring from a given string s.","solution":"def extract_substring_occurrences(s, substring): Extracts all occurrences of a specific substring from the given string s. Parameters: s (str): The string to search within. substring (str): The substring to find. Returns: list: A list containing all occurrences of the substring in the string. occurrences = [] start = 0 while True: start = s.find(substring, start) if start == -1: break occurrences.append(substring) start += len(substring) return occurrences"},{"question":"Write a python function to identify duplicates in a given list and return them as another list. How should I approach this task, especially considering performance optimization for large lists?","solution":"def find_duplicates(input_list): Identifies and returns duplicates in the given list. Parameters: input_list (list): A list of elements to check for duplicates. Returns: list: A list of duplicate elements. seen = set() duplicates = set() for item in input_list: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to convert a list of integers to a list of binary strings.","solution":"def int_to_bin_string(lst): Converts a list of integers to a list of binary strings. Args: lst: List[int] - a list of integers Returns: List[str] - a list of binary strings representing the integers return [bin(x)[2:] for x in lst]"},{"question":"Write a python function to find the reverse of a linked list. The function should take a linked list as input and return the reversed linked list. The linked list node class should include a value and a reference to the next node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. :param head: ListNode - The head of the linked list to be reversed. :return: ListNode - The new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the length of the longest subarray with at most x distinct integers using the sliding window technique.","solution":"def longest_subarray_with_at_most_x_distinct(nums, x): Finds the length of the longest subarray with at most x distinct integers using the sliding window technique. Parameters: nums (list): List of integers. x (int): Maximum number of distinct integers allowed in the subarray. Returns: int: Length of the longest subarray with at most x distinct integers. from collections import defaultdict n = len(nums) if n == 0 or x == 0: return 0 left = 0 right = 0 freq_map = defaultdict(int) max_len = 0 distinct_count = 0 while right < n: if freq_map[nums[right]] == 0: distinct_count += 1 freq_map[nums[right]] += 1 while distinct_count > x: freq_map[nums[left]] -= 1 if freq_map[nums[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Write a python function to find the kth smallest element in an unsorted array","solution":"import heapq def kth_smallest_element(arr, k): Returns the kth smallest element in an unsorted array. :param arr: List of integers. :param k: Integer, the kth position to find. :return: The kth smallest element in the list. if k <= 0 or k > len(arr): raise ValueError(\\"k is out of the bounds of the array\\") return heapq.nsmallest(k, arr)[-1]"},{"question":"Write a python function to count the number of lines in a file. The function should take the filename as an argument and return the total number of lines.","solution":"def count_lines_in_file(filename): Returns the number of lines in the specified file. Parameters: filename (str): The path to the file to be read. Returns: int: The number of lines in the file. try: with open(filename, 'r') as file: return sum(1 for line in file) except FileNotFoundError: return 0"},{"question":"Write a python function to reverse the first \`n\` elements of a list. The function should take two parameters: a list \`arr\` and an integer \`n\`. The function should return a new list where the first \`n\` elements are reversed, and the rest of the list remains unchanged.","solution":"def reverse_first_n_elements(arr, n): Reverses the first n elements of the list \`arr\`. Parameters: - arr: The input list. - n: The number of elements from the start to reverse. Returns: - A new list with the first n elements reversed. # Ensure the function handles edge cases where n is greater than the length of the array n = min(n, len(arr)) return arr[:n][::-1] + arr[n:]"},{"question":"Write a python function to sort an array of integers in ascending order using the Bubble Sort algorithm. Explain how it works and provide a step-by-step breakdown of the code.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. :param arr: List[int] - list of integers to be sorted :return: List[int] - sorted list of integers n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place, no need to check them for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1, swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to return \`None\` if the input list is empty and the sum of the elements otherwise.","solution":"def sum_elements(elements): Returns None if the input list is empty. Returns the sum of the elements otherwise. if not elements: return None return sum(elements)"},{"question":"Write a python function to find the length of the longest increasing subsequence from a given list of integers. An increasing subsequence is a sequence that can be derived from the list by deleting some or no elements without changing the order of the remaining elements, and all elements in the sequence are strictly increasing.","solution":"def length_of_lis(nums): Finds the length of the longest increasing subsequence. :param nums: List of integers :return: Length of the longest increasing subsequence if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to given an input string, return the reversed string. Here the reverse operation is exactly the same as the \\"text-to-speech\\" reverse button operation. For instance, a would become c, b would become d, etc. The alphabet is assumed to be cyclic, and case sensitivity is ignored.","solution":"def cyclic_reverse(s): def shift_char(c): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 2) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 2) % 26 + ord('A')) return c return ''.join(shift_char(c) for c in s)"},{"question":"Write a python function to remove any non-alphabetic characters from a given string. Only alphabetic characters (a-z, A-Z) should be kept. You can use any standard library in python.","solution":"import re def remove_non_alphabetic_characters(s): Remove any non-alphabetic characters from the given string. Only alphabetic characters (a-z, A-Z) should be kept. return re.sub(r'[^a-zA-Z]', '', s)"},{"question":"Write a python function to check if the intersection of two lists of integers is even or odd. If the intersection is non-empty, the function should return \\"Even\\" if the number of elements in the intersection is even, and \\"Odd\\" if it is odd. If there is no intersection, it should return \\"No intersection\\".","solution":"def intersection_even_or_odd(list1, list2): Returns \\"Even\\" if the number of elements in the intersection of list1 and list2 is even, \\"Odd\\" if it is odd, or \\"No intersection\\" if there is no intersection. intersection = set(list1) & set(list2) if not intersection: return \\"No intersection\\" if len(intersection) % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Write a python function to extract the last element from a list and return it as the output.","solution":"def extract_last_element(lst): Returns the last element of the list. if not lst: return None return lst[-1]"},{"question":"Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Ensure your function is well-documented and follows best practices for Python coding.","solution":"def quicksort(arr): Sorts a list of integers in ascending order using the quicksort algorithm. Parameters: arr (list): A list of integers to sort. Returns: list: A new list with integers sorted in ascending order. if len(arr) <= 1: return arr else: pivot = arr[0] lesser = [x for x in arr[1:] if x <= pivot] greater = [x for x in arr[1:] if x > pivot] return quicksort(lesser) + [pivot] + quicksort(greater)"},{"question":"Write a python function to return the reversed string","solution":"def reverse_string(s): Returns the reversed string of the given input string s. return s[::-1]"},{"question":"Write a python function to find the minimum number of coins required to make a given amount using a list of coin denominations. For example, if the amount is 11 and the coin denominations are [1, 2, 5], the minimum number of coins required is 3 (5 + 5 + 1).","solution":"def min_coins(amount, coins): Returns the minimum number of coins required to make the given amount using the provided coin denominations. :param amount: The amount to make using the coins. :param coins: A list of coin denominations. :return: The minimum number of coins required to make the given amount, or -1 if it's not possible. # Creating a table to store the minimum number of coins for each amount (0 to amount) dp = [float('inf')] * (amount + 1) # Base case: No coins are needed to make the amount zero dp[0] = 0 # Iterate through all the amounts from 1 to the required amount for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] has not been updated, return -1 since it's not possible to make the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to print a multiplication table of a given number. The function should take a single argument, the number, and return the multiplication table in string format.","solution":"def multiplication_table(n): Returns the multiplication table of the given number n in string format. Each line of the table contains 'n * i = result' for i from 1 to 10. table = \\"\\" for i in range(1, 11): table += f\\"{n} * {i} = {n * i}n\\" return table.strip()"},{"question":"Write a python function to convert all the uppercase letters in a string to lowercase. You should use string methods to achieve this, and your solution should not involve any iterative structures like for or while loops.","solution":"def to_lowercase(input_str): Converts all uppercase letters in a string to lowercase. Parameters: input_str (str): The string to be converted. Returns: str: The input string with all uppercase letters converted to lowercase. return input_str.lower()"},{"question":"Write a python function to calculate the diameter of a tree, given the root of the tree. The diameter of a tree is the length of the longest path between any two nodes, where the path can pass through the root of the tree or not.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def diameter_of_tree(root): Calculate the diameter of a binary tree. The diameter is the length of the longest path between any two nodes. :param root: TreeNode, the root of the binary tree :return: int, the diameter of the tree def height_and_diameter(node): if not node: return 0, 0 left_height, left_diameter = height_and_diameter(node.left) right_height, right_diameter = height_and_diameter(node.right) current_height = 1 + max(left_height, right_height) current_diameter = max(left_diameter, right_diameter, left_height + right_height) return current_height, current_diameter _, diameter = height_and_diameter(root) return diameter"},{"question":"Write a python function to find the second smallest number in a list. If the list has less than two unique numbers, return -1.","solution":"def second_smallest(numbers): Returns the second smallest unique number in the list. If there are less than two unique numbers, returns -1. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to find the second largest number in a list. Consider the case when there is a repeated largest number and ensure that the second largest is different from the largest. For example, if all elements are the same, the function should return \`None\`.","solution":"def second_largest(numbers): Returns the second largest number in a list of numbers. If all elements are the same or the list is too short, returns None. if len(numbers) < 2: return None first = second = float('-inf') for num in numbers: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a python function to find the longest sequence of consecutive digits in a string.","solution":"def longest_consecutive_digits(s): Returns the longest sequence of consecutive digits in the string s. If there are multiple sequences with the same length, returns the first one. longest_seq = \\"\\" current_seq = \\"\\" for char in s: if char.isdigit(): current_seq += char if len(current_seq) > len(longest_seq): longest_seq = current_seq else: current_seq = \\"\\" return longest_seq"},{"question":"Write a python function to reverse a string using slicing. Here is an example string: example_string = \\"Hello World!\\"","solution":"def reverse_string(s): Returns the reverse of the given string using slicing. return s[::-1]"},{"question":"Write a python function to remove all the odd numbers from a list. You can use list comprehension for this.","solution":"def remove_odd_numbers(lst): Removes all the odd numbers from the list. Parameters: lst (list): List of integers Returns: list: List of integers with all odd numbers removed return [num for num in lst if num % 2 == 0]"},{"question":"Write a python function to find the frequency of each character in a given string and return a dictionary.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a python function to calculate the sum of the diagonal elements in a given 2D matrix.","solution":"def diagonal_sum(matrix): Returns the sum of the diagonal elements of a given 2D square matrix. n = len(matrix) total = 0 for i in range(n): total += matrix[i][i] return total"},{"question":"Write a python function to find the sum of all numbers from 0 to n (inclusive).","solution":"def sum_to_n(n): Returns the sum of all numbers from 0 to n (inclusive). :param n: The upper bound of the sum range. :return: Sum of all numbers from 0 to n. return n * (n + 1) // 2"},{"question":"Write a python function to convert an integer to a string in a specified base.","solution":"def int_to_base(n, base): Convert an integer to a string in the specified base (between 2 and 36 inclusive). Parameters: n (int): The integer to convert. base (int): The base for conversion. Returns: str: The string representation of the integer in the specified base. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36 inclusive.\\") if n == 0: return \\"0\\" digits = \\"0123456789abcdefghijklmnopqrstuvwxyz\\" result = \\"\\" sign = \\"\\" if n < 0: sign = \\"-\\" n = -n while n: result = digits[n % base] + result n //= base return sign + result"},{"question":"Write a python function to return the first (underlined) occurrence of a specific value within an iterable","solution":"def find_first_occurrence(iterable, value): Returns the first occurrence of a specific value within an iterable. If the value is not found, it returns None. for item in iterable: if item == value: return item return None"},{"question":"Write a python function to find the most common element in the given list of integers. If there are multiple elements with the maximum frequency, return all of them.","solution":"from collections import Counter from typing import List def most_common_elements(numbers: List[int]) -> List[int]: Returns the most common elements in the given list of integers. If there are multiple elements with the maximum frequency, returns all of them. if not numbers: return [] count = Counter(numbers) max_frequency = max(count.values()) return [num for num, freq in count.items() if freq == max_frequency]"},{"question":"Write a python function to solve the puzzle game \\"Word Search\\" where a given word must be found within a grid of letters.","solution":"def word_search(board, word): Returns True if the word is found in the board, otherwise returns False. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. rows, cols = len(board), len(board[0]) word_len = len(word) def backtrack(r, c, idx): if idx == word_len: return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[idx]: return False tmp, board[r][c] = board[r][c], '#' found = (backtrack(r + 1, c, idx + 1) or backtrack(r - 1, c, idx + 1) or backtrack(r, c + 1, idx + 1) or backtrack(r, c - 1, idx + 1)) board[r][c] = tmp return found for row in range(rows): for col in range(cols): if backtrack(row, col, 0): return True return False"},{"question":"Write a python function to reverse a binary string.","solution":"def reverse_binary_string(binary_string): Reverses a binary string. Parameters: binary_string (str): A string containing only '0' and '1' Returns: str: The reversed binary string return binary_string[::-1]"},{"question":"Write a python function to perform quicksort on a list. To gain confidence in the function's correctness, include a few test cases within the code as well.","solution":"def quicksort(arr): Sorts the input list using quicksort algorithm and returns the sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to replace all occurrences of the substring \\"old\\" with \\"new\\" in a given string.","solution":"def replace_old_with_new(input_string): Replaces all occurrences of the substring 'old' with 'new' in the given input_string. Parameters: input_string (str): The string in which replacements will be made. Returns: str: The modified string with all occurrences of 'old' replaced by 'new'. return input_string.replace(\\"old\\", \\"new\\")"},{"question":"Write a python function to find the sum of the multiples of 3 or 5 below a given number. For example, if the input is 10, the multiples of 3 or 5 below 10 are 3, 5, 6, and 9. The sum of these multiples is 23.","solution":"def sum_of_multiples(limit): Returns the sum of all the multiples of 3 or 5 below the given limit. return sum(x for x in range(limit) if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a python function to print all the items in a dictionary in the format \\"key: value\\".","solution":"def print_dict_items(d): Prints all the items in a dictionary in the format \\"key: value\\". Args: d (dict): The dictionary to print items from. for key, value in d.items(): print(f\\"{key}: {value}\\")"},{"question":"Write a python function to check if a string contains any of the specified characters.","solution":"def contains_any_characters(string, characters): Check if the string contains any of the specified characters. :param string: The string to be checked. :param characters: A string of characters to check for in the main string. :return: True if any character in 'characters' is found in 'string', else False. for char in characters: if char in string: return True return False"},{"question":"Write a python function to find the maximum in a given list. Please ensure that the function can handle both integers and floating-point numbers, and also return \`None\` if the list is empty.","solution":"def find_max(lst): Returns the maximum value in a given list of integers and floating-point numbers. Returns None if the list is empty. if not lst: return None return max(lst)"},{"question":"Write a python function to calculate the factorial of a number. The function should be recursive, and include proper error handling for input validation.","solution":"def factorial(n): Returns the factorial of n using recursion. Raises a ValueError if n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to check if a given person's name is between two other names in a list alphabetically.","solution":"def is_name_between(name, name1, name2): Check if a given person's name is between two other names in a list alphabetically. Args: name: str - the name to check. name1: str - the first name for comparison (alphabetically smaller). name2: str - the second name for comparison (alphabetically larger). Returns: bool - True if the name is between name1 and name2 alphabetically, False otherwise. return name1 < name < name2"},{"question":"Write a python function to convert a given number into its binary representation without using built-in functions. You should handle non-negative integers.","solution":"def int_to_binary(num): Converts a non-negative integer to its binary representation as a string. if num == 0: return \\"0\\" binary_rep = \\"\\" while num > 0: binary_rep = str(num % 2) + binary_rep num = num // 2 return binary_rep"},{"question":"Write a python function to find all the prime numbers between two given numbers using the Sieve of Eratosthenes algorithm. The function should take two integers as parameters and return a list of prime numbers within that range.","solution":"def sieve_of_eratosthenes(start, end): Returns a list of all prime numbers between the given range [start, end] using the Sieve of Eratosthenes algorithm if start > end: return [] if start < 2: start = 2 primes = [] sieve = [True] * (end + 1) for p in range(2, end + 1): if sieve[p]: if p >= start: primes.append(p) for i in range(p * p, end + 1, p): sieve[i] = False return primes"},{"question":"Write a python function to find the maximum sum of a subarray using Kadane's Algorithm. You will also need to explain the thought process behind this algorithm.","solution":"def kadanes_algorithm(arr): if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to return the first character of every string in a list.","solution":"def first_characters(strings): Takes a list of strings and returns a list of the first character of each string. return [s[0] for s in strings if s]"},{"question":"Write a python function to convert temperatures from Celsius to Fahrenheit, Fahrenheit to Celsius, and Kelvin to Celsius. The function should accept three parameters: the temperature value and the original scale of the temperature (Celsius, Fahrenheit, Kelvin). It should return the temperature converted to the desired scale.","solution":"def convert_temperature(value, original_scale, target_scale): Converts temperature from one scale to another. Parameters: - value (float): Temperature value to convert. - original_scale (str): The scale of the original temperature ('Celsius', 'Fahrenheit', 'Kelvin'). - target_scale (str): The scale to convert the temperature to ('Celsius', 'Fahrenheit', 'Kelvin'). Returns: - float: The converted temperature value. if original_scale == 'Celsius': if target_scale == 'Fahrenheit': return (value * 9/5) + 32 elif target_scale == 'Kelvin': return value + 273.15 elif original_scale == 'Fahrenheit': if target_scale == 'Celsius': return (value - 32) * 5/9 elif target_scale == 'Kelvin': return (value - 32) * 5/9 + 273.15 elif original_scale == 'Kelvin': if target_scale == 'Celsius': return value - 273.15 elif target_scale == 'Fahrenheit': return (value - 273.15) * 9/5 + 32 # If original_scale and target_scale are the same or invalid scale return value"},{"question":"Write a python function to reverse a number given as a string. The function should remove any non-numeric characters and reverse the remaining digits.","solution":"def reverse_number_string(number_string): Reverses the digits in a given string after removing any non-numeric characters. Args: number_string (str): The input string potentially containing digits and non-numeric characters. Returns: str: The reversed string containing only digits. # Remove non-numeric characters filtered_string = ''.join(filter(str.isdigit, number_string)) # Reverse the remaining numeric characters reversed_string = filtered_string[::-1] return reversed_string"},{"question":"Write a python function to solve the equation x**2 + y**2 = 25 and return all the integer solutions (x, y) that satisfy the equation.","solution":"def find_integer_solutions(): Returns all integer solutions (x, y) that satisfy the equation x**2 + y**2 = 25. solutions = [] for x in range(-5, 6): for y in range(-5, 6): if x**2 + y**2 == 25: solutions.append((x, y)) return solutions"},{"question":"Write a python function to solve the problem of finding the forecast for specific date from a timeseries using the SARIMA model. The input parameters should include the timeseries data, the start and end dates for the forecast, the order parameters (p, d, q) for the SARIMA model, and the seasonal parameters (P, D, Q, s). The output should be the forecast values for the specified date range.","solution":"from statsmodels.tsa.statespace.sarimax import SARIMAX import pandas as pd def sarima_forecast(timeseries, start_date, end_date, order, seasonal_order): Returns the forecast values for the specified date range using SARIMA model. Parameters: timeseries (pd.Series): Time series data indexed by date. start_date (str): Start date for the forecast (inclusive). end_date (str): End date for the forecast (inclusive). order (tuple): The (p,d,q) order of the model for the number of AR parameters, differences, and MA parameters. seasonal_order (tuple): The (P,D,Q,s) order of the seasonal component of the model. Returns: pd.Series: Forecast values for the specified date range. model = SARIMAX(timeseries, order=order, seasonal_order=seasonal_order, enforce_stationarity=False, enforce_invertibility=False) model_fit = model.fit(disp=False) forecast_index = pd.date_range(start=start_date, end=end_date, freq='D') forecast_values = model_fit.predict(start=start_date, end=end_date) return pd.Series(data=forecast_values, index=forecast_index)"},{"question":"Write a python function to calculate the area of a circle given its radius. You need to write a function that will accept the radius as input and return the area of the circle as output. Use the formula: Area = πr². You should also ensure that the function handles exceptions properly if the input is not a valid number.","solution":"import math def calculate_circle_area(radius): Calculates the area of a circle given its radius. Params: radius (float): The radius of the circle. Returns: float: The area of the circle. if not isinstance(radius, (int, float)): raise ValueError(\\"The radius must be a number.\\") if radius < 0: raise ValueError(\\"The radius cannot be negative.\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to calculate the frequency of each word in a text file and return a dictionary where the keys are the words and the values are their corresponding frequencies.","solution":"def word_frequency(file_path): Reads a text file and counts the frequency of each word. Parameters: file_path (str): The path to the text file. Returns: dict: A dictionary where keys are words and values are their corresponding frequencies. from collections import defaultdict import re freq_dict = defaultdict(int) with open(file_path, 'r', encoding='utf-8') as file: text = file.read().lower() words = re.findall(r'bw+b', text) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"Write a python function to check if a number is prime or not. If it's a prime number, return its primality status along with the list of divisors should be \\"1\\" and the number itself. If it's not a prime number, return its primality status along with an empty list of divisors.","solution":"def is_prime(number): Checks if the given number is a prime number. Returns a tuple (boolean, list) where: - The boolean indicates if the number is prime (True) or not (False) - The list contains the divisors of the number. If the number is prime, it will contain [1, number], else it will be empty. if number <= 1: return False, [] for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False, [] return True, [1, number]"},{"question":"Write a python function to calculate the factorial of a number using recursion. Define a helper function to store intermediate results to optimize the recursive calls and avoid recalculating the same results multiple times. This approach is known as memoization.","solution":"def factorial(n, memo={}): Returns the factorial of n using recursion and memoization. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n in memo: return memo[n] if n <= 1: return 1 memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a python function to print all even and odd numbers in a given list.","solution":"def print_even_odd(numbers): Given a list of integers, print out all even numbers and odd numbers separately. Args: numbers: List of integers. Returns: A tuple of two lists: first list with all even numbers, and second list with all odd numbers. even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] return even_numbers, odd_numbers"},{"question":"Write a python function to calculate the sum of all the elements in a given list. For example, if a list contains [2, 3, 4], the function should return 9.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the given list. return sum(lst)"},{"question":"Write a python function to find the number of occurrences of a substring in a string. You can use the built-in count() method.","solution":"def count_substring_occurrences(string, substring): Returns the number of occurrences of a substring in a string. :param string: The main string where to find the substring. :param substring: The substring to be found in the main string. :return: The number of occurrences of the substring in the main string. return string.count(substring)"},{"question":"Write a python function to check all permutation of a string","solution":"from itertools import permutations def string_permutations(s): Return all permutations of the input string s. return [''.join(p) for p in permutations(s)]"},{"question":"Write a python function to find the largest element in an array.","solution":"def find_largest_element(arr): Returns the largest element in an array. Parameters: arr (list): A list of numbers. Returns: number: The largest number in the list. if not arr: return None return max(arr)"},{"question":"Write a python function to sort an array in non-decreasing order by shifting elements one position to the left. Given that the array has an equal number of even and odd numbers, and each code will reject sorting if there are more than 100 operations performed (to prevent infinite loops).","solution":"def shift_sort(arr, max_operations=100): Shifts elements one position to the left to sort the array in non-decreasing order. Assumes the array has an equal number of even and odd numbers. Stops and returns the array if more than max_operations operations are performed. Parameters: arr (list of int): The array to be sorted max_operations (int): The maximum number of operations allowed to prevent infinite loop Returns: list of int: The sorted array if within max_operations operations, otherwise the original array n = len(arr) if n % 2 != 0: raise ValueError(\\"Array does not have equal number of even and odd numbers\\") operations = 0 while True: is_sorted = True for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] is_sorted = False operations += 1 if is_sorted or operations >= max_operations: break return arr"},{"question":"Write a python function to reverse the order of the elements in a list, without using the built-in \`reverse()\` or \`[::-1]\` slicing techniques. You should use only the \`append()\` or \`pop()\` methods to achieve this.","solution":"def reverse_list(lst): Reverses the order of the elements in a list using only append() and pop() methods. reversed_lst = [] while lst: reversed_lst.append(lst.pop()) return reversed_lst"},{"question":"Write a python function to check if a string is a palindrome in a case-insensitive manner. Also ensure that the space and punctuation are ignored.","solution":"import re def is_palindrome(s): Checks if the input string s is a palindrome, ignoring case, spaces, and punctuation. :param s: input string :return: True if s is a palindrome, otherwise False # Remove non-alphanumeric characters and convert to lower case cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned == cleaned[::-1]"},{"question":"Write a python function to count the frequency of vowels in a string. The function should be case-insensitive and return a dictionary with vowels as keys and their frequency as values.","solution":"def count_vowels(s): Returns a dictionary with vowels as keys and their frequency as values in the string \`s\`. The function is case-insensitive. vowels = 'aeiou' s = s.lower() vowel_count = {vowel: 0 for vowel in vowels} for char in s: if char in vowels: vowel_count[char] += 1 return vowel_count"},{"question":"Write a python function to write a text file to disk.","solution":"def write_to_file(filename, content): Writes the given content to a text file with the specified filename. Args: filename (str): The name of the file to which the content will be written. content (str): The content to be written to the file. Returns: None with open(filename, 'w') as file: file.write(content)"},{"question":"Write a python function to recursively solve the tower of hanoi problem. The function should take in three parameters: the number of disks, the source peg, the destination peg, and the auxiliary peg. The function should print out the steps required to solve the puzzle.","solution":"def tower_of_hanoi(n, source, destination, auxiliary): Solve the Tower of Hanoi puzzle and print the steps. Parameters: n (int): Number of disks source (str): The source peg destination (str): The destination peg auxiliary (str): The auxiliary peg if n == 1: print(f\\"Move disk 1 from {source} to {destination}\\") return tower_of_hanoi(n - 1, source, auxiliary, destination) print(f\\"Move disk {n} from {source} to {destination}\\") tower_of_hanoi(n - 1, auxiliary, destination, source)"},{"question":"Write a python function to sort a list of numbers in ascending order without using any built-in sorting functions. Implement the sorting algorithm using the Bubble Sort method.","solution":"def bubble_sort(lst): Sorts a list of numbers in ascending order using the Bubble Sort algorithm. Parameters: lst (list): List of numbers to sort. Returns: list: Sorted list of numbers. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Write a python function to remove all numbers containing the digit 7 and count how many numbers are removed. Provide a breakdown of the code.","solution":"def remove_numbers_containing_seven(numbers): Removes all numbers containing the digit 7 from the input list and returns a tuple containing the new list and the count of removed numbers. :param numbers: List of integers :return: Tuple (new_list, count_of_removed_numbers) new_list = [num for num in numbers if '7' not in str(num)] count_removed = len(numbers) - len(new_list) return new_list, count_removed"},{"question":"Write a python function to find the maximum product of non-empty subarrays.","solution":"def max_product_subarray(nums): Returns the maximum product of a non-empty subarray of nums. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for i in range(1, len(nums)): current = nums[i] # When multiplied by a negative number, max becomes min and vice versa if current < 0: max_product, min_product = min_product, max_product max_product = max(current, max_product * current) min_product = min(current, min_product * current) result = max(result, max_product) return result"},{"question":"Write a python function to filter out non-empty strings from a list and return a new list with only non-empty strings.","solution":"def filter_non_empty_strings(strings): Filters out non-empty strings from a list and returns a new list with only non-empty strings. Args: strings (list): A list of strings. Returns: list: A new list with only non-empty strings. return [s for s in strings if s]"},{"question":"Write a python function to search for a specific string pattern in a large text. If the pattern is found, it returns 'Pattern Found', otherwise 'Pattern Not Found'. The pattern to search must be a valid regular expression.","solution":"import re def search_pattern(text, pattern): Searches for a specific string pattern in a large text. If the pattern is found, it returns 'Pattern Found', otherwise 'Pattern Not Found'. if re.search(pattern, text): return 'Pattern Found' else: return 'Pattern Not Found'"},{"question":"Write a python function to move an element with index i2 to the index of i1. All elements between i1 and i2 will shift one position to the right. The array length will not exceed 20. The solution should not involve slicing or other built-in functions that could simplify the implementation.","solution":"def move_element(arr, i1, i2): Moves the element at index i2 to index i1, shifting all elements between i1 and i2 one position to the right. if i1 < 0 or i2 < 0 or i1 >= len(arr) or i2 >= len(arr): raise IndexError(\\"i1 and i2 must be within the bounds of the array.\\") if i1 == i2: return arr temp = arr[i2] if i1 < i2: for i in range(i2, i1, -1): arr[i] = arr[i-1] else: for i in range(i2, i1): arr[i] = arr[i+1] arr[i1] = temp return arr"},{"question":"Write a python function to check if the tree nodes have a valid BST property. For all the nodes in the binary tree, the left child must have a value less than its parent node and the right child must have a value greater than its parent node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Returns True if the binary tree with given root is a valid BST. def validate(node, low=float('-inf'), high=float('inf')): if not node: return True if node.val <= low or node.val >= high: return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"Write a python function to remove all duplicates from a string while maintaining the order.","solution":"def remove_duplicates(input_string): Removes all duplicate characters from the input string while maintaining the order. Parameters: input_string (str): The string from which duplicates need to be removed. Returns: str: A string with all duplicates removed, maintaining the original order. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to sort an array in ascending order using the quicksort algorithm. The function should take an array as input and return the sorted array.","solution":"def quicksort(array): Sorts an array in ascending order using the quicksort algorithm. if len(array) <= 1: return array else: pivot = array[len(array) // 2] less_than_pivot = [x for x in array if x < pivot] equal_to_pivot = [x for x in array if x == pivot] greater_than_pivot = [x for x in array if x > pivot] return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)"},{"question":"Write a python function to compute the sum of the first n terms of the geometric series. The function should take two parameters: \`n\` (the number of terms) and \`r\` (the common ratio of the series). Additionally, implement a check function to verify the correctness of the solution with provided data points.","solution":"def geometric_series_sum(n, r): Returns the sum of the first n terms of a geometric series with common ratio r. if n <= 0: return 0 if r == 1: return n return (1 - r ** n) // (1 - r)"},{"question":"Write a python function to calculate the sum of all unique elements in a list of integers. By \\"unique elements,\\" we mean elements that appear exactly once in the list.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements (elements that appear exactly once) in the given list of integers. from collections import Counter element_counts = Counter(lst) unique_elements = [item for item, count in element_counts.items() if count == 1] return sum(unique_elements)"},{"question":"Write a python function to calculate the sum of even numbers in a list, but only include those numbers that are greater than 10.","solution":"def sum_even_numbers_greater_than_10(numbers): Calculates the sum of even numbers in the list that are greater than 10. :param numbers: A list of integers. :return: The sum of even numbers greater than 10. return sum(num for num in numbers if num > 10 and num % 2 == 0)"},{"question":"Write a python function to check if the given number is divisible by both 2 and 3.","solution":"def is_divisible_by_2_and_3(number): Returns True if the number is divisible by both 2 and 3, otherwise False. return number % 2 == 0 and number % 3 == 0"},{"question":"Write a python function to determine if a given sentence is a palindrome considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(sentence): Returns True if the given sentence is a palindrome, considering only alphanumeric characters and ignoring cases. Otherwise, returns False. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in sentence if char.isalnum()] # Check if the filtered list is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to detect if the characters in a string are of even length. The string is passed as an argument to a function. The function should return True if all characters of the string have that character appearing an even number of times, and False otherwise.","solution":"def even_character_count(s): Return True if every character in the string s appears an even number of times. Otherwise, return False. from collections import Counter char_count = Counter(s) for count in char_count.values(): if count % 2 != 0: return False return True"},{"question":"Write a python function to check if a given string \`s\` contains a permutation of the string \`\\"hello\\"\`. Your function should return \`True\` if such a permutation exists and \`False\` otherwise.","solution":"from collections import Counter def contains_permutation_of_hello(s): Check if the given string s contains a permutation of the string \\"hello\\". target = \\"hello\\" target_counter = Counter(target) window_size = len(target) for i in range(len(s) - window_size + 1): window = s[i:i + window_size] window_counter = Counter(window) if window_counter == target_counter: return True return False"},{"question":"Write a python function to check if a given number k is a power of x. The function should return \`True\` if k is an x-power, and \`False\` otherwise.","solution":"import math def is_power_of(k, x): Check if k is a power of x. Args: k (int): The number to check. x (int): The base number. Returns: bool: True if k is a power of x, False otherwise. if k <= 0 or x <= 1: return False log_result = math.log(k, x) return math.isclose(log_result, round(log_result))"},{"question":"Write a python function to find the position of an element in a sorted array if it is present, else return -1.","solution":"def binary_search(arr, target): Returns the index of target in sorted array arr, or -1 if target is not found. :param arr: List[int] - A list of sorted integers. :param target: int - The integer to search for. :return: int - The index of target in arr, or -1 if not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to implement the mergesort algorithm. Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves.","solution":"def merge_sort(arr): Implements the merge sort algorithm on the input list. Parameters: - arr (list): The list of elements to be sorted. Returns: - list: A new sorted list. if len(arr) <= 1: return arr # Divide the array into two halves mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] # Recursively sort both halves left_sorted = merge_sort(left_half) right_sorted = merge_sort(right_half) # Merge the sorted halves return merge(left_sorted, right_sorted) def merge(left, right): Merges two sorted lists into a single sorted list. Parameters: - left (list): The left half, sorted. - right (list): The right half, sorted. Returns: - list: A merged sorted list. sorted_list = [] i = 0 j = 0 # Traverse both lists and append the smallest element from either list to the sorted_list while i < len(left) and j < len(right): if left[i] < right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 # Append any remaining elements in left and right lists sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list"},{"question":"Write a python function to find all the unique subsets of an array. The function should take an array of integers as input and return a list of lists, where each inner list is a unique subset of the input array.","solution":"def find_subsets(arr): Returns all unique subsets of an array. arr.sort() # Sort the array to handle duplicates subsets = [[]] for num in arr: new_subsets = [] for subset in subsets: new_subset = subset + [num] if new_subset not in subsets: # Handle duplicates new_subsets.append(new_subset) subsets.extend(new_subsets) return subsets"},{"question":"Write a python function to return the reverse of a number","solution":"def reverse_number(n): Returns the reverse of the integer number n. reversed_num = 0 negative = n < 0 if negative: n = -n while n > 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 if negative: reversed_num = -reversed_num return reversed_num"},{"question":"Write a python function to sort a dive depth measurements in descending order. The function should take a list of dive depth measurements (as strings) and return the sorted list.","solution":"def sort_dive_depths(depths): Sort a list of dive depth measurements in descending order. Parameters: depths (list of str): A list of dive depth measurements represented as strings. Returns: list of str: The list sorted in descending order. return sorted(depths, reverse=True)"},{"question":"Write a python function to flip a binary tree such that the left and right children of all nodes are swapped. The function should take the root of a binary tree as a parameter and return the root of the flipped tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flip_binary_tree(root): Flips the binary tree such that left and right children of all nodes are swapped. :param root: TreeNode - the root of the binary tree :return: TreeNode - the root of the flipped binary tree if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively flip the left and right subtrees if root.left: flip_binary_tree(root.left) if root.right: flip_binary_tree(root.right) return root"},{"question":"Write a python function to find and remove duplicate elements from a list. The function should return two lists: one containing all duplicate elements, and the other containing all unique elements from the original list.","solution":"def find_and_remove_duplicates(lst): Removes duplicate elements from the list and returns two lists: 1. A list of duplicate elements. 2. A list of unique elements from the original list. duplicates = [] unique_elements = [] seen_elements = set() added_to_duplicates = set() for elem in lst: if elem in seen_elements: if elem not in added_to_duplicates: duplicates.append(elem) added_to_duplicates.add(elem) else: unique_elements.append(elem) seen_elements.add(elem) return duplicates, unique_elements"},{"question":"Write a python function to find the minimum depth of a binary tree. The binary tree can have a maximum depth of 1000 and consists of nodes with integer values. How should I approach this problem?","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def minDepth(root): Finds the minimum depth of a binary tree. Parameters: root (TreeNode): The root of the binary tree. Returns: int: The minimum depth of the binary tree. if not root: return 0 queue = deque([(root, 1)]) while queue: node, depth = queue.popleft() if not node.left and not node.right: return depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1))"},{"question":"Write a python function to find the number of days in a month given the month and year. Consider leap years when calculating the days in February.","solution":"def days_in_month(month, year): Returns the number of days in a given month and year. if month < 1 or month > 12: return None # Invalid month # Days in each month for a common year days_in_month_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Adjust for leap year in February if month == 2: if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)): return 29 else: return 28 else: return days_in_month_list[month - 1]"},{"question":"Write a python function to generate all unique combinations of a given list \`arr []\` of integers. The function should consider repetition of elements in the input list. For example, given a list \`arr = [1, 2, 1]\`, the function should generate combinations considering the repetition. Here's the desired output for this input: \`Combinations are: [(1, 1), (1, 2), (2, 2), (1, 2, 1), (2, 1, 2), (1, 1, 2)]\`.","solution":"from itertools import combinations def generate_combinations(arr): Generate all unique combinations from the array considering repetition of elements. :param arr: List of integers. :return: A list of tuples, each representing a unique combination. unique_combinations = set() arr.sort() for r in range(1, len(arr) + 1): # Adding sorted combinations to ensure uniqueness for comb in combinations(arr, r): unique_combinations.add(comb) return sorted(list(unique_combinations))"},{"question":"Write a python function to find all the prime numbers in the range of 1 to 50.","solution":"def find_primes_in_range(start, end): Returns a list of all prime numbers in the specified range from start to end, inclusive. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True primes = [x for x in range(start, end + 1) if is_prime(x)] return primes"},{"question":"Write a python function to find the smallest element in a list of integers. If the list is empty, raise a ValueError.","solution":"def find_smallest_element(arr): Returns the smallest element in a list of integers. Parameters: arr (list): A list of integers Returns: int: The smallest integer in the list Raises: ValueError: If the list is empty if not arr: raise ValueError(\\"The list is empty\\") return min(arr)"},{"question":"Write a python function to find the most frequent element in a given list with an efficient solution.","solution":"def most_frequent_element(lst): Returns the most frequent element in the list. If multiple elements have the maximum frequency, one of them is returned. if not lst: return None from collections import Counter count = Counter(lst) most_frequent = count.most_common(1)[0][0] return most_frequent"},{"question":"Write a python function to print the Fibonacci sequence to the nth term. The function should take an integer \`n\` as input and print each number in the sequence up to the nth term.","solution":"def print_fibonacci(n): Prints the Fibonacci sequence up to the nth term. Arguments: n -- the number of terms in the Fibonacci sequence to print a, b = 0, 1 for _ in range(n): print(a) a, b = b, a + b"},{"question":"Write a python function to find the median of three numbers.","solution":"def median_of_three(a, b, c): Returns the median of three numbers a, b, and c. numbers = [a, b, c] numbers.sort() return numbers[1]"},{"question":"Write a python function to solve the problem of finding all unique permutations of a given string.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string s. # Use permutations from itertools to generate all possible permutations perm = permutations(s) # Convert each permutation from tuple to string perm = set([''.join(p) for p in perm]) # Return as a sorted list return sorted(perm)"},{"question":"Write a python function to search for a target value in a 2D sorted array of integers. Given the array and the target value, the function should return True if the target value exists in the 2D array, and False otherwise.","solution":"def search_2d_matrix(matrix, target): Returns True if target exists in the 2D sorted array, otherwise False. :param matrix: List[List[int]], a 2D list where each row and column are sorted. :param target: int, the target value to search for in the matrix. :return: bool, True if target is found in the matrix, otherwise False. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] < target: row += 1 else: col -= 1 return False"},{"question":"Write a python function to convert a string into a list of words. The function should take a single string as input and return a list where each element is a word from the original string. Assume that words are separated by spaces.","solution":"def string_to_words(input_string): Converts a string into a list of words separated by spaces. Parameters: input_string (str): The input string to be converted. Returns: list: A list of words from the input string. return input_string.split()"},{"question":"Write a python function to find the second highest number in a list. If the list contains duplicates, consider each value as unique unless explicitly stated otherwise.","solution":"def second_highest(numbers): Returns the second highest number in a list. Assumes there are at least two unique numbers in the list. # Convert list to set to remove duplicates, then back to list and sort it in descending order unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) # The second highest is the second element in this sorted list return unique_numbers[1]"},{"question":"Write a python function to find the median of two lists. The function should take two lists as input and return the median as a float. If the combined length of both lists is odd, return the middle element. If the combined length is even, return the average of the two middle elements. The input lists can have different lengths.","solution":"def find_median(lst1, lst2): Returns the median of two lists. combined = sorted(lst1 + lst2) n = len(combined) if n % 2 == 1: return float(combined[n // 2]) else: mid1, mid2 = combined[n // 2 - 1], combined[n // 2] return (mid1 + mid2) / 2.0"},{"question":"Write a python function to determine if a given string can be a palindrome by removing exactly one character. For example, \\"radar\\" is a palindrome, so the function should return True for \\"radar\\". However, for strings like \\"apple\\", the function should return False since removing any single character will not result in a palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s): Determine if the given string can be a palindrome by removing exactly one character. def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return True n = len(s) for i in range(n): if is_palindrome(s[:i] + s[i+1:]): return True return False"},{"question":"Write a python function to count the occurrences of a specific element in a list. The function should return the frequency of that element.","solution":"def count_occurrences(lst, element): Returns the number of times the 'element' occurs in 'lst'. Parameters: lst (list): The list in which to count occurrences. element: The element to count in the list. Returns: int: The frequency of the element in the list. return lst.count(element)"},{"question":"Write a python function to find the factorial of a number recursively. Could you please provide detailed explanations and example usages?","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: The factorial of the number n. Raises: ValueError: If n is a negative integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: return n * factorial(n - 1) # Example usage: # print(factorial(5)) # Output: 120"},{"question":"Write a python function to insert a given substring into a string at a specified position. The function should handle edge cases where the position is negative or exceeds the string length. If the position is negative, insert the substring at the beginning of the string. If the position is greater than the string length, insert the substring at the end of the string.","solution":"def insert_substring(main_string, substring, position): Inserts a given substring into a string at a specified position. Handles edge cases where the position is negative or exceeds the string length. if position < 0: return substring + main_string elif position > len(main_string): return main_string + substring else: return main_string[:position] + substring + main_string[position:]"},{"question":"Write a python function to find the element that appears once in an array where all other elements appear exactly twice. The input array will always contain at least one element that appears only once. Assume all elements in the array are integers and may not be consecutive, any kind of integers. The arrays can be very large.","solution":"def find_unique_element(arr): Returns the element that appears exactly once in the array where all other elements appear exactly twice. unique_element = 0 for element in arr: unique_element ^= element return unique_element"},{"question":"Write a python function to find the max sum subarray in a given array with at least one number.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray. if not arr: raise ValueError(\\"Array must contain at least one number\\") max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to remove consecutive duplicates from a list. The function should return a new list with all consecutive duplicates removed.","solution":"def remove_consecutive_duplicates(input_list): Removes consecutive duplicates from a list. Args: input_list (list): A list from which consecutive duplicates need to be removed. Returns: list: A new list with consecutive duplicates removed. if not input_list: return [] result = [input_list[0]] for i in range(1, len(input_list)): if input_list[i] != input_list[i-1]: result.append(input_list[i]) return result"},{"question":"Write a python function to find a specific word in a text file. How would you implement it?","solution":"def find_word_in_file(file_path, word): Searches for a specific word in a text file. :param file_path: Path to the text file :param word: Word to search for in the text file :return: True if the word is found, False otherwise try: with open(file_path, 'r') as file: return any(word in line for line in file) except FileNotFoundError: return False"},{"question":"Write a python function to find the factorial of a given number. The function should be iterative and not use recursion.","solution":"def factorial(n): Returns the factorial of the given number n using an iterative approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to calculate the sum of all elements in a nested list. The nested list can have any depth. You function should support lists nested within each other up to 100 levels deep.","solution":"def nested_list_sum(nested_list): Recursively calculates the sum of all elements in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += nested_list_sum(element) else: total += element return total"},{"question":"Write a python function to merge two sorted arrays in-place without using extra space. You should also handle cases where the length of the arrays can be different.","solution":"def merge_in_place(arr1, arr2): Merges two sorted arrays in place without using extra space. This function modifies arr1 to contain the first part of the merged sorted arrays and arr2 to contain the remaining part. Args: arr1 (list of int): The first sorted array to be merged. arr2 (list of int): The second sorted array to be merged. Returns: None n = len(arr1) m = len(arr2) # Start from the last element of arr1 and arr2 i = n - 1 j = m - 1 k = n + m - 1 # Increase the size of arr1 to accommodate elements from arr2 arr1.extend([0] * m) # Merge arr2 into arr1 starting from the end while j >= 0: if i >= 0 and arr1[i] > arr2[j]: arr1[k] = arr1[i] i -= 1 else: arr1[k] = arr2[j] j -= 1 k -= 1 return"},{"question":"Write a python function to implement a simple text-based version of the game \\"Hangman\\".","solution":"def hangman(word, guesses): Simulates a simple text-based Hangman game. Parameters: word (str): The word to be guessed. guesses (list): The list of guessed letters. Returns: str: The current state of guessed word with '_' for unguessed letters. result = ''.join([letter if letter in guesses else '_' for letter in word]) return result"},{"question":"Write a python function to remove all occurrences of a specific character from a string. For example, if the string is \\"hello world\\" and the character to be removed is \\"l\\", the function should return \\"heo word\\".","solution":"def remove_char(s, char): Remove all occurrences of a specific character from a string. :param s: The input string. :param char: The character to be removed. :return: A string with all occurrences of the given character removed. return s.replace(char, '')"},{"question":"Write a python function to print all the prime numbers in the given range using the Sieve of Eratosthenes algorithm. The function should take two integers as input (lower bound and upper bound) and return a list of prime numbers within that range.","solution":"def sieve_of_eratosthenes(lower_bound, upper_bound): Returns a list of prime numbers between lower_bound and upper_bound using the Sieve of Eratosthenes algorithm. if lower_bound > upper_bound: return [] sieve = [True] * (upper_bound + 1) sieve[0] = sieve[1] = False for start in range(2, int(upper_bound ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, upper_bound + 1, start): sieve[multiple] = False primes = [num for num in range(max(2, lower_bound), upper_bound + 1) if sieve[num]] return primes"},{"question":"Write a python function to count the number of occurrences of the string \\"Hello\\" in a file.","solution":"def count_hello_in_file(filename): Counts the number of occurrences of the string \\"Hello\\" in the specified file. Parameters: filename (str): The path to the file to be read. Returns: int: The number of occurrences of the string \\"Hello\\". count = 0 with open(filename, 'r') as file: for line in file: count += line.count(\\"Hello\\") return count"},{"question":"Write a python function to check whether a number is divisible by all of its digits.","solution":"def is_divisible_by_all_digits(n): Checks whether the given number n is divisible by all of its digits. Parameters: n (int): The number to check. Returns: bool: True if n is divisible by all of its digits, False otherwise. str_n = str(n) for digit_char in str_n: digit = int(digit_char) # If any digit is zero, the number cannot be divisible by zero. if digit == 0 or n % digit != 0: return False return True"},{"question":"Write a python function to reverse the first and last position character of a string.","solution":"def reverse_first_last(s): Reverses the first and last character of the string s. if len(s) < 2: return s # No change needed for single character strings or empty strings return s[-1] + s[1:-1] + s[0]"},{"question":"Write a python function to find the string with the maximum number of distinct characters.","solution":"def max_distinct_char_string(strings): Returns the string with the maximum number of distinct characters from a list of strings. If there are multiple strings with the same number of distinct characters, the first one encountered will be returned. if not strings: return None def distinct_char_count(s): return len(set(s)) max_string = max(strings, key=distinct_char_count) return max_string"},{"question":"Write a python function to find the maximum product of a subarray within a given array. The function should consider both positive and negative numbers. For example, given the array [2, 3, -2, 4], the function should return 6, as the maximum product subarray is [2, 3].","solution":"def max_product_subarray(arr): Returns the maximum product of a subarray within the given array. :param arr: List[int] -> list of integers, can be positive and/or negative. :return: int -> maximum product of any subarray. if not arr: return 0 max_product = min_product = result = arr[0] for num in arr[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a python function to reverse a string without affecting the case of the letters.","solution":"def reverse_string_preserve_case(s): Reverses the given string without affecting the case of the letters. Parameters: s (str): The input string Returns: str: The reversed string with original casing return s[::-1]"},{"question":"Write a python function to print out all the elements of a list that are greater than or equal to a given threshold, but also sort these elements in ascending order.","solution":"def filter_and_sort(lst, threshold): Returns a sorted list of elements that are greater than or equal to the given threshold. Parameters: lst (list): A list of comparable elements. threshold (comparable): The threshold value that elements should be greater than or equal to. Returns: list: Sorted list of elements greater than or equal to the threshold. filtered_list = [x for x in lst if x >= threshold] return sorted(filtered_list)"},{"question":"Write a python function to perform a binary search on a sorted array and return the index of the target element if found, otherwise return -1. The function should have a time complexity of O(log n).","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the target element. Return the index of the target element if found, otherwise return -1. :param arr: List[int] - A list of integers sorted in ascending order :param target: int - The target integer to search for :return: int - Index of the target element if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to detect if a given binary string has alternating bits (i.e., bits that alternate between 0 and 1 without any 0s or 1s consecutively).","solution":"def has_alternating_bits(binary_str): Returns True if the given binary string has alternating bits, otherwise False. :param binary_str: input binary string :type binary_str: str for i in range(1, len(binary_str)): if binary_str[i] == binary_str[i - 1]: return False return True"},{"question":"Write a python function to convert a list of strings to a dictionary where the keys are the strings from the list and the values are the lengths of those strings.","solution":"def list_to_dict_with_lengths(strings_list): Converts a list of strings to a dictionary where keys are the strings and values are their lengths. Args: strings_list (list): A list of strings to be converted to a dictionary. Returns: dict: A dictionary with string keys and their respective length values. return {string: len(string) for string in strings_list}"},{"question":"Write a python function to find the number of pairs in a list such that the sum of the pair is equal to a given value.","solution":"def count_pairs_with_sum(nums, target_sum): Returns the number of pairs in nums that add up to target_sum. Args: nums (list): List of integers. target_sum (int): The target sum for the pairs. Returns: int: The number of pairs that add up to target_sum. count = 0 num_dict = {} for num in nums: complement = target_sum - num if complement in num_dict and num_dict[complement] > 0: count += 1 num_dict[complement] -= 1 else: if num in num_dict: num_dict[num] += 1 else: num_dict[num] = 1 return count"},{"question":"Write a python function to reverse a string with spaces while keeping the spaces in their original positions.","solution":"def reverse_string_with_spaces(s): Reverses the characters in the string except for spaces, which retain their original positions. chars = [c for c in s if c != ' '] reversed_chars = chars[::-1] result = [] reversed_index = 0 for char in s: if char == ' ': result.append(' ') else: result.append(reversed_chars[reversed_index]) reversed_index += 1 return ''.join(result)"},{"question":"Write a python function to generate all possible subsets of a given list. The solution should be based on recursion. You are not allowed to use the built-in function \`itertools.combinations\`.","solution":"def generate_subsets(lst): Generates all possible subsets of a given list using recursion. Parameters: lst (list): The input list. Returns: list: A list of all possible subsets. if not lst: return [[]] first, rest = lst[0], lst[1:] without_first = generate_subsets(rest) with_first = [[first] + subset for subset in without_first] return without_first + with_first"},{"question":"Write a python function to check if a string's length is even or odd. If the length is even, return \\"Even\\". If the length is odd, return \\"Odd\\".","solution":"def check_string_length(s): Checks if the length of the string s is even or odd. Parameters: - s: str, the input string Returns: - str, 'Even' if the length is even, 'Odd' if the length is odd return \\"Even\\" if len(s) % 2 == 0 else \\"Odd\\""},{"question":"Write a python function to extract the even numbers from a list of integers, returning only those that are divisible by 4.","solution":"def extract_even_divisible_by_four(numbers): Extracts even numbers from the list that are divisible by 4. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: The list of even numbers divisible by 4. return [num for num in numbers if num % 4 == 0]"},{"question":"Write a python function to find the first Fibonacci number that is greater than a given number N.","solution":"def first_fibonacci_greater_than(N): Returns the first Fibonacci number that is greater than N. if N < 0: return 1 # The first Fibonacci number is 0, the second is 1. a, b = 0, 1 while b <= N: a, b = b, a + b return b"},{"question":"Write a python function to implement a QuickSort algorithm. Specify the function signature, and include a brief description of how QuickSort works.","solution":"def quicksort(arr): Implements the QuickSort algorithm for sorting an array. QuickSort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This process repeats until the base case of an empty or single-element array is reached, which are inherently sorted. Args: arr (list): The list of elements to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to print the numbers from 1 to 10 in reverse order using a loop. The function should be named \`print_reverse_numbers\`.","solution":"def print_reverse_numbers(): Prints the numbers from 1 to 10 in reverse order. for i in range(10, 0, -1): print(i)"},{"question":"Write a python function to find the maximum number in a list using recursion. Do not use any built-in functions or libraries to find the maximum number. The function should only accept a list of integers.","solution":"def find_max_recursive(lst): Returns the maximum number in the list using recursion. def _helper(lst, n): # Base case: if list is empty, return a very small number if n == 1: return lst[0] # Recursive case: find maximum in the rest of the list current_max = _helper(lst, n-1) # Compare current element with the current maximum return current_max if current_max > lst[n-1] else lst[n-1] if not lst: raise ValueError(\\"List must not be empty.\\") return _helper(lst, len(lst))"},{"question":"Write a python function to identify the sum of all prime numbers within a given range \`range(1, n+1)\` where \`1\` is included but \`n\` is excluded. Implement your function using the Sieve of Eratosthenes method.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers within the range 1 to n (excluding n). if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a python function to find the number of sublists containing a given element in a given nested list.","solution":"def count_sublists_with_element(nested_list, target_element): Returns the number of sublists containing the target_element in the given nested list. count = 0 for sublist in nested_list: if target_element in sublist: count += 1 return count"},{"question":"Write a python function to reverse a string and remove any non-alphanumeric characters. Reverse the filtered string and return it as the output.","solution":"def reverse_and_filter_string(s): Reverse the input string and remove any non-alphanumeric characters. Args: s (str): Input string. Returns: str: Reversed and filtered string with only alphanumeric characters. filtered_string = ''.join(char for char in s if char.isalnum()) reversed_string = filtered_string[::-1] return reversed_string"},{"question":"Write a python function to remove leading and trailing whitespaces from a string.","solution":"def remove_whitespace(s): Removes leading and trailing whitespaces from the given string. Args: s (str): Input string Returns: str: String with leading and trailing whitespaces removed return s.strip()"},{"question":"Write a python function to find the shortest word in a string. The shortest word is the word with the minimum length. If there are multiple words with the same minimum length, the function should return all of them in the order they appear. Additionally, the function should ignore any leading, trailing, and extra spaces between words. The function should also return the index of each shortest word in the original string. If the input string is empty or does not contain any valid words, the function should return an empty list.","solution":"def find_shortest_words(s): Finds the shortest word(s) and their indices in a given string. Parameters: s (str): Input string Returns: List[Tuple[str, int]]: List of tuples, each containing a shortest word and its index in the original string if not s or not s.strip(): return [] # Split words by spaces and filter out empty strings words = s.split() if not words: return [] min_length = min(len(word) for word in words) shortest_words = [] index = 0 for word in words: idx = s.find(word, index) if len(word) == min_length: shortest_words.append((word, idx)) index = idx + len(word) return shortest_words"},{"question":"Write a python function to generate a Fibonacci sequence up to n terms. The function should take an integer n as an argument and return a list containing the Fibonacci sequence up to the nth term. A Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Generate a Fibonacci sequence up to n terms. :param n: Number of terms in the Fibonacci sequence :return: List containing the Fibonacci sequence up to n terms if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[i-1] + fib_seq[i-2]) return fib_seq"},{"question":"Write a python function to print the first N Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For this problem, assume N is always greater than or equal to 2.","solution":"def fibonacci_numbers(n): Returns the first n Fibonacci numbers as a list. if n < 2: raise ValueError(\\"n should be greater than or equal to 2\\") fib_list = [0, 1] for i in range(2, n): next_fib = fib_list[-1] + fib_list[-2] fib_list.append(next_fib) return fib_list"},{"question":"Write a python function to find the first occurrence of an element in a list and return its index. If the element is not found, return -1.","solution":"def first_occurrence(lst, element): Returns the index of the first occurrence of the element in the list. If the element is not found, returns -1. try: return lst.index(element) except ValueError: return -1"},{"question":"Write a python function to reverse a string without using recursion and in one line.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Write a python function to solve the problem of finding the minimum number of coins required to make up a given amount. You may assume that you have an infinite number of each kind of coin.","solution":"def coin_change(coins, amount): Returns the minimum number of coins required to make up the given amount. If it is not possible to make up the amount with the given coins, return -1. coins: List[int] - The denominations of the coins. amount: int - The total amount of money. Returns: int - The minimum number of coins required. # Initialize a list to store the minimum coins needed for each amount dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to calculate the minimum number of operations required to convert a given string to another string. You can perform operations like insert a character, delete a character, or replace a character.","solution":"def min_distance(word1, word2): Calculate the minimum number of operations required to convert word1 to word2. Operations include insert, delete, or replace a character. :param word1: string, starting word :param word2: string, target word :return: int, minimum number of operations len1 = len(word1) len2 = len(word2) # Create a DP table to store the number of operations dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Initialize the DP table for i in range(len1 + 1): for j in range(len2 + 1): if i == 0: dp[i][j] = j # If word1 is empty, insert all characters of word2 elif j == 0: dp[i][j] = i # If word2 is empty, remove all characters of word1 elif word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are the same, no new operation else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove character from word1 dp[i][j - 1], # Add character to word1 dp[i - 1][j - 1]) # Replace character in word1 return dp[len1][len2]"},{"question":"Write a python function to find the largest number in a list. You can assume the list does not contain any negative numbers.","solution":"def find_largest_number(numbers): Returns the largest number in the given list of non-negative numbers. Parameters: numbers (list): A list of non-negative numbers. Returns: int/float: The largest number in the list. if not numbers: raise ValueError(\\"The list is empty.\\") return max(numbers)"},{"question":"Write a python function to print all the divisors of a number.","solution":"def print_divisors(n): Returns a list of all divisors of the number n. divisors = [] for i in range(1, n + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Write a python function to print distinct characters in a given string in the order of their first appearance.","solution":"def distinct_characters(s): Returns a string with distinct characters from the input string \`s\` in the order of their first appearance. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to calculate the factorial of a number using a for loop. The function should handle the case where the input number is negative by raising a ValueError with an appropriate message.","solution":"def factorial(n): Returns the factorial of n using a for loop. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to merge two lists maintaining the order of elements and duplicates.","solution":"def merge_lists(list1, list2): Merges two lists maintaining the order of elements and allowing duplicates. Args: list1 (list): First list to merge. list2 (list): Second list to merge. Returns: list: A new list containing all elements from list1 and list2. merged_list = list1 + list2 return merged_list"},{"question":"Write a python function to count the number of words in a string that are vowels. A vowel is defined as one of the following characters: 'a', 'e', 'i', 'o', 'u'.","solution":"def count_vowel_words(s): Counts the number of words in a string that start with a vowel. A vowel is defined as 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase). Args: s (str): The input string. Returns: int: The number of words in the string that start with a vowel. vowels = set('aeiouAEIOU') words = s.split() count = 0 for word in words: if word and word[0] in vowels: count += 1 return count"},{"question":"Write a python function to find the longest common prefix their function takes a list of strings, and returns the longest common prefix, or an empty string if there is none.","solution":"def longest_common_prefix(strs): Find the longest common prefix among a list of strings. Parameters: strs (list of str): A list of strings. Returns: str: The longest common prefix or an empty string if there is none. if not strs: return \\"\\" # Sort the list to have the smallest and largest possible prefixes strs.sort() # Compare the characters between the first and the last string after sorting first, last = strs[0], strs[-1] for i, char in enumerate(first): if char != last[i]: return first[:i] return first"},{"question":"Write a python function to sort the given list. The list elements are strings, and each string represents a number. The string may have leading zeros and may contain a decimal point. The function should sort the list in ascending numerical order.","solution":"def sort_strings_as_numbers(lst): Sorts a list of strings where each string represents a number. The sorting considers numerical value, ignoring leading zeros and decimal points. return sorted(lst, key=lambda x: float(x))"},{"question":"Write a python function to reverse the vowels of a string. The function should only reverse the vowels in the string while keeping the consonants in their original positions.","solution":"def reverse_vowels(s): Reverses the vowels of a given string s while keeping the consonants in their original positions. vowels = \\"aeiouAEIOU\\" s_list = list(s) i, j = 0, len(s) - 1 while i < j: if s_list[i] in vowels and s_list[j] in vowels: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 if s_list[i] not in vowels: i += 1 if s_list[j] not in vowels: j -= 1 return ''.join(s_list)"},{"question":"Write a python function to take an array of integers and return the length of the longest increasing subsequence (LIS). An increasing subsequence consists of adjacent elements in the array where each subsequent element is strictly greater than the previous one.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence (LIS). if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Write a python function to use 'requests' library to fetch and print url content.","solution":"import requests def fetch_url_content(url): Fetches and prints the content of the specified URL. Parameters: url (str): The URL to fetch content from. Returns: str: The content of the URL. response = requests.get(url) response.raise_for_status() return response.text"},{"question":"Write a python function to alternate the elements in a list, e.g. [1,2,3,4,5] -> [1,4,2,3,5]","solution":"def alternate_elements(lst): Alternates elements in a list such that every second element is moved to the end of the list. [1,2,3,4,5] -> [1,4,2,3,5] Parameters: lst (list): A list of elements Returns: list: A list with alternative elements re-ordered. if len(lst) < 2: return lst result = [] for i in range(len(lst)): if i % 2 == 0: result.append(lst[i]) for i in range(len(lst)): if i % 2 != 0: result.append(lst[i]) return result"},{"question":"Write a python function to determine if a given list of integers contains any duplicates using two different methods.","solution":"def contains_duplicates_set(nums): Determines if the given list of integers contains any duplicates using a set. :param nums: List of integers. :return: True if duplicates are present, False otherwise. return len(nums) != len(set(nums)) def contains_duplicates_sort(nums): Determines if the given list of integers contains any duplicates by sorting the list. :param nums: List of integers. :return: True if duplicates are present, False otherwise. nums_sorted = sorted(nums) for i in range(1, len(nums_sorted)): if nums_sorted[i] == nums_sorted[i - 1]: return True return False"},{"question":"Write a python function to find the smallest divisor of a number n, where n is greater than 2.","solution":"def smallest_divisor(n): Returns the smallest divisor of n greater than 2. if n <= 2: raise ValueError(\\"n must be greater than 2\\") for i in range(2, int(n**0.5) + 1): if n % i == 0: return i return n"},{"question":"Write a python function to create a set of unique elements from a list, preserving their original order.","solution":"def unique_elements(lst): Returns a list of unique elements from the input list, preserving their original order. Parameters: lst (list): The input list from which to get unique elements. Returns: list: A list containing only the unique elements in the order of their first occurrence in lst. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Write a python function to delete a list of indices from a list and return the resulting list without those indices.","solution":"def delete_indices(lst, indices): Deletes the elements at the specified indices from the list \`lst\`. Parameters: lst (list): The original list. indices (list of int): A list of indices to delete from \`lst\`. Returns: list: A new list with the specified indices removed. # Convert indices to a set for efficient lookup indices_set = set(indices) # Use list comprehension to filter out the elements at the given indices return [item for index, item in enumerate(lst) if index not in indices_set]"},{"question":"Write a python function to sort a list of dictionaries by a specific key. The function should also handle the case where the dictionary might not contain the key and should sort those entries last.","solution":"def sort_dicts_by_key(dicts, key): Sorts a list of dictionaries by a specific key. Dictionaries without the key are sorted last. Parameters: dicts (list): List of dictionaries to be sorted. key (str): The key to sort the dictionaries by. Returns: list: Sorted list of dictionaries. return sorted(dicts, key=lambda d: (key not in d, d.get(key)))"},{"question":"Write a python function to flatten a list of lists into a single list containing all the elements.","solution":"def flatten_list(nested_list): Flattens a list of lists into a single list containing all the elements. return [item for sublist in nested_list for item in sublist]"},{"question":"Write a python function to reverse a given tuple and return the reversed tuple.","solution":"def reverse_tuple(input_tuple): Reverses the given tuple and returns the reversed tuple. Parameters: input_tuple (tuple): The tuple to be reversed. Returns: tuple: The reversed tuple. return input_tuple[::-1]"},{"question":"Write a python function to count the number of binary strings of length N that consist of exactly one 0 and one 1. There should be exactly k zeros and k ones in these strings.","solution":"from math import comb def count_binary_strings(N, k): Returns the number of binary strings of length N that consist of exactly k zeros and k ones. if N != 2*k or k < 0: return 0 return comb(N, k) # This calculates the binomial coefficient C(N, k)"},{"question":"Write a python function to read a text file and output the contents to the console. The function should handle potential errors and edge cases, such as file not found and empty file.","solution":"def read_and_print_file(filepath): Reads a text file and prints its contents to the console. Handles errors such as file not found and empty file. :param filepath: Path to the text file. try: with open(filepath, 'r') as file: contents = file.read() if contents: print(contents) else: print(\\"The file is empty.\\") except FileNotFoundError: print(\\"File not found. Please check the file path.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Write a python function to identify leap years. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. Write a function that takes a year as input and returns \`True\` if the year is a leap year, otherwise returns \`False\`.","solution":"def is_leap_year(year): Returns True if the specified year is a leap year, otherwise returns False. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"Write a python function to check if a given word is a palindrome or not.","solution":"def is_palindrome(word): Returns True if the given word is a palindrome, False otherwise. A palindrome is a word that reads the same forward and backward. word = word.lower() # Converting the word to lower case to make the check case-insensitive return word == word[::-1]"},{"question":"Write a python function to find the number of all possible subsets of an array whose sum is exactly k.","solution":"def count_subsets_with_sum(arr, k): Returns the number of subsets of array 'arr' whose sum is exactly 'k'. def count_subsets(idx, current_sum): if current_sum == k: return 1 if idx == len(arr) or current_sum > k: return 0 # Include the current element in the subset include = count_subsets(idx + 1, current_sum + arr[idx]) # Exclude the current element from the subset exclude = count_subsets(idx + 1, current_sum) return include + exclude return count_subsets(0, 0)"},{"question":"Write a python function to calculate the sum of numbers up to a given number \`n\` using recursion.","solution":"def sum_recursive(n): Returns the sum of numbers up to a given number n using recursion. if n <= 0: return 0 else: return n + sum_recursive(n-1)"},{"question":"Write a python function to return a function that generates numbers from a specified start to an end value with a specified step. The inner function should be designed such that calling it multiple times iterates through the sequence in a loop. Once it reaches the end, it should continue from the beginning of the sequence again, creating a loop.","solution":"def create_number_generator(start, end, step): Creates a generator function that yields numbers from start to end with the given step. When reaching the end, it starts again from the beginning. def generator(): current = start while True: yield current current += step if current > end: current = start return generator"},{"question":"Write a python function to swap two numbers using a bitwise XOR operation.","solution":"def swap_numbers(x, y): Swaps two numbers using bitwise XOR operation. Args: x (int): First number. y (int): Second number. Returns: tuple: A tuple containing the swapped values. x = x ^ y y = x ^ y x = x ^ y return (x, y)"},{"question":"Write a python function to generate all subsets of a given list. Duplicates within the input list should be ignored.","solution":"def generate_subsets(lst): Generate all unique subsets of the given list. Args: lst (List): Input list from which subsets are generated Returns: List[List]: List of all unique subsets def backtrack(start, end, path): subsets.append(path) for i in range(start, end): backtrack(i + 1, end, path + [lst[i]]) lst = sorted(set(lst)) # Remove duplicates and sort the list subsets = [] backtrack(0, len(lst), []) return subsets"},{"question":"Write a python function to find the minimum difference between two integers in a list without using any built-in function like \`min()\`, \`max()\`, or any other functions or methods that directly find the minimum or maximum value.","solution":"def find_min_difference(arr): Finds the minimum difference between any two integers in the list. if len(arr) < 2: # If there are less than two elements, return None as no comparison can be made. return None # Initialize the minimum difference with a large value min_diff = abs(arr[1] - arr[0]) # Compare every pair of elements for i in range(len(arr)): for j in range(i + 1, len(arr)): current_diff = abs(arr[i] - arr[j]) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Write a python function to calculate the depth of a binary tree. The depth of a binary tree is defined as the number of edges in the longest path from the root node to a leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root: TreeNode) -> int: Returns the depth of the binary tree with the given root. The depth is the number of edges in the longest path from the root to a leaf node. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to find the nth Fibonacci number. The function should use recursion with memoization to optimize the performance of repeated calls.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to delete middle node of a linked list. If there is an even number of nodes, delete the second middle node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_middle_node(head): Deletes the middle node of the linked list. If there is an even number of nodes, deletes the second middle node. if not head or not head.next: return None slow = head fast = head prev = None # Use two-pointer technique to find the middle node while fast and fast.next: fast = fast.next.next prev = slow slow = slow.next # Delete the middle node if prev: prev.next = slow.next return head"},{"question":"Write a python function to fib(n) which accepts an integer n and returns the nth Fibonacci number.","solution":"def fib(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a python function to calculate the sum of all prime numbers less than a given number n using the Sieve of Eratosthenes. The function should be efficient and handle large numbers within reasonable time.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a python function to find the minimum element in a sorted and rotated array where every element is distinct. A sorted and rotated array is one where the elements were in increasing order but then rotated from some pivot point. For example, [4,5,6,7,0,1,2] is a rotated sorted array, where the smallest element is 0.","solution":"def find_min_in_rotated_array(nums): Finds the minimum element in a sorted and rotated array where every element is distinct. :param nums: List[int] - The input list of integers :return: int - The minimum element in the array left, right = 0, len(nums) - 1 # If the array is not rotated (the smallest element is the first) if nums[left] < nums[right]: return nums[left] while left < right: midpoint = (left + right) // 2 # If element at midpoint is greater than the element at right, # the minimum is in the right part. if nums[midpoint] > nums[right]: left = midpoint + 1 else: right = midpoint return nums[left]"},{"question":"Write a python function to implement strStr().","solution":"def strStr(haystack, needle): Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. If needle is empty, return 0. :param haystack: str, the string in which to search :param needle: str, the substring to search for :return: int, the starting index of the first occurrence of needle in haystack, or -1 if needle == \\"\\": return 0 len_haystack = len(haystack) len_needle = len(needle) for i in range(len_haystack - len_needle + 1): if haystack[i:i + len_needle] == needle: return i return -1"},{"question":"Write a python function to find the maximum element in an array of integers. SQLAlchemy","solution":"def find_max(arr): Returns the maximum element in the array \`arr\`. Args: arr (list of int): Array of integers. Returns: int: Maximum element in the array. Raises: ValueError: If the array is empty. if not arr: raise ValueError(\\"The array is empty.\\") return max(arr) # Example usage: # max_value = find_max([1, 2, 3, 4, 5]) # print(max_value) # Output: 5"},{"question":"Write a python function to convert a given string to pig latin. Pig Latin is a way of encrypting words by moving the first letter of every word to the end of it and then adding \\"ay\\". For example, \\"hello\\" becomes \\"ellohay\\". If the word begins with a vowel, simply add \\"way\\" to the end. For example, \\"apple\\" becomes \\"appleway\\".","solution":"def to_pig_latin(sentence): Converts the given sentence to Pig Latin. Rules: - If a word starts with a vowel, add \\"way\\" to the end of the word. - If a word starts with a consonant, move the first letter to the end of the word and add \\"ay\\". Args: sentence (str): The input sentence to convert to Pig Latin. Returns: str: The sentence converted to Pig Latin. vowels = \\"AEIOUaeiou\\" def convert_word(word): if word[0] in vowels: return word + \\"way\\" else: return word[1:] + word[0] + \\"ay\\" return ' '.join(convert_word(word) for word in sentence.split())"},{"question":"Write a python function to shuffle a list of integers and return the shuffled list.","solution":"import random def shuffle_list(nums): Shuffles a list of integers and returns the shuffled list. Args: nums (list of int): List of integers to shuffle Returns: list of int: Shuffled list of integers shuffled = nums[:] random.shuffle(shuffled) return shuffled"},{"question":"Write a python function to find the maximum number of words in a line using the given n characters, where each word has a length stored in a list.","solution":"def max_words_in_line(word_lengths, n): This function calculates the maximum number of words that can fit in a line given that the line can hold up to n characters, and each word has a length stored in the list word_lengths. :param word_lengths: List of integers representing lengths of words. :param n: Maximum number of characters that can fit in a line. :return: Maximum number of words that can fit in a line. current_length = 0 word_count = 0 for length in word_lengths: if current_length + length <= n: current_length += length word_count += 1 else: break return word_count"},{"question":"Write a python function to receive uuid and return human readable format based on uuid.","solution":"import uuid def human_readable_uuid(input_uuid): Converts a UUID into a human-readable string format. try: # Parse the input UUID to ensure it's valid parsed_uuid = uuid.UUID(input_uuid) # Create a human-readable representation of the UUID return str(parsed_uuid) except ValueError: return \\"Invalid UUID\\""},{"question":"Write a python function to check if a given number is a prime number or not. Give an example of how to call this function.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True # Example of how to call the function print(is_prime(5)) # Should output: True print(is_prime(10)) # Should output: False"},{"question":"Write a python function to compare two lists and return a list of common elements. The function should be efficient and minimize the use of built-in functions.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. set1 = set(list1) set2 = set(list2) common = set1 & set2 return list(common)"},{"question":"Write a python function to find the difference between the maximum and minimum values of the rows and then print the result. For an example, input_matrix = [[1,2,3], [4,5,6], [7,8,9]]. The difference should be printed for each row and the final result should be [2, 2, 2] because the differences are (3-1), (6-4), and (9-7) respectively.","solution":"def row_difference(matrix): Returns a list containing the difference between the maximum and minimum values of each row in the input matrix. differences = [] for row in matrix: differences.append(max(row) - min(row)) return differences"},{"question":"Write a python function to check if a string is a palindrome or not. A string is considered a palindrome if it reads the same backward as forward. Here is the sample function signature you can use: \`def is_palindrome(s: str) -> bool:\`","solution":"def is_palindrome(s: str) -> bool: Checks if the input string s is a palindrome. A string is considered a palindrome if it reads the same backward as forward. :param s: input string :return: True if s is a palindrome, False otherwise # Removing any non-alphanumeric characters and converting to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Checking if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to find the most common element in a list.","solution":"from collections import Counter def most_common_element(lst): Returns the most common element in the list. If the list is empty, returns None. if not lst: return None element_count = Counter(lst) most_common = element_count.most_common(1)[0][0] return most_common"},{"question":"Write a python function to identify a valid credit card number based on its length and using a specific algorithm.","solution":"def is_valid_credit_card(number): Validate a credit card number using the Luhn algorithm. Args: number (str): The credit card number as a string. Returns: bool: True if the number is valid, False otherwise. # Check if the number length is within the valid range if not (13 <= len(number) <= 19): return False # Check if the number contains only digits if not number.isdigit(): return False total = 0 num_digits = len(number) odd_even = num_digits & 1 for count in range(num_digits): digit = int(number[count]) if not ((count & 1) ^ odd_even): digit = digit * 2 if digit > 9: digit = digit - 9 total += digit return (total % 10) == 0"},{"question":"Write a python function to convert a prefix expression to an infix expression. For example, the prefix expression is \\"* + A B C\\". The corresponding infix expression should be \\"(A+B)*C\\".","solution":"def prefix_to_infix(prefix_expression): Converts a prefix expression into an infix expression. Parameters: prefix_expression (str): The prefix expression to be converted. Returns: str: The corresponding infix expression. stack = [] operators = set(['+', '-', '*', '/', '(', ')']) # Traverse the prefix expression from right to left for symbol in reversed(prefix_expression.split()): if symbol not in operators: stack.append(symbol) else: operand1 = stack.pop() operand2 = stack.pop() stack.append(f'({operand1}{symbol}{operand2})') return stack[0]"},{"question":"Write a python function to split a string into chunks of a given size. For example, if the original string is \\"abcdefg\\" and the chunk size is 2, the output should be [\\"ab\\", \\"cd\\", \\"ef\\", \\"g\\"]. If the string cannot be divided evenly, the last chunk should contain the remaining characters.","solution":"def split_into_chunks(s, chunk_size): Splits the string s into chunks of size chunk_size. Parameters: s (str): The string to be split. chunk_size (int): The size of each chunk. Returns: list: A list of string chunks. return [s[i:i + chunk_size] for i in range(0, len(s), chunk_size)]"},{"question":"Write a python function to find the minimum k elements in a given list of numbers.","solution":"import heapq def find_min_k_elements(lst, k): Returns the minimum k elements in the given list of numbers. Parameters: lst (list): The list of numbers. k (int): The number of minimum elements to return. Returns: list: The list of the minimum k elements. if k <= 0: return [] return heapq.nsmallest(k, lst)"},{"question":"Write a python function to calculate the sum of the first 10 natural numbers and return the result. You should also handle the case where the input is not a positive integer.","solution":"def sum_first_n_natural_numbers(n): Returns the sum of the first n natural numbers. If n is not a positive integer, returns 'Invalid input'. if not isinstance(n, int) or n <= 0: return 'Invalid input' return n * (n + 1) // 2"},{"question":"Write a python function to return the title case of a given string.","solution":"def to_title_case(s): Returns the title case of a given string. return s.title()"},{"question":"Write a python function to detect a cycle in a directed or undirected graph. Use Depth-First Search (DFS). The function should take an adjacency list of the graph and return True if a cycle is detected, otherwise False.","solution":"def detect_cycle(graph): Detects a cycle in a graph using DFS. Arguments: graph -- dictionary representing the adjacency list of the graph Returns: True if a cycle is detected, otherwise False def dfs(v, visited, rec_stack): # Mark the current node as visited and add to recursion stack visited[v] = True rec_stack[v] = True # Recur for all neighbours # If any neighbour is visited and in rec_stack then there is a cycle for neighbour in graph.get(v, []): if not visited[neighbour]: if dfs(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True # Remove the vertex from recursion stack rec_stack[v] = False return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} # Call the recursive helper function to detect cycle in different DFS trees for node in graph: if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"Write a python function to implement trapping rain water algorithm. The function should find the maximum amount of water that can be trapped between the bars.","solution":"def trap(height): Returns the maximum amount of water that can be trapped. :param height: List[int] - a list of non-negative integers representing the height of the bars. :return: int - the maximum amount of water that can be trapped. if not height: return 0 left, right = 0, len(height) - 1 max_left, max_right = height[left], height[right] water_trapped = 0 while left < right: if max_left < max_right: left += 1 max_left = max(max_left, height[left]) water_trapped += max_left - height[left] else: right -= 1 max_right = max(max_right, height[right]) water_trapped += max_right - height[right] return water_trapped"},{"question":"Write a python function to implement a stack that supports the following operations: push, pop, top, and isEmpty. The stack should be implemented using a list for storage and its size should be dynamically managed.","solution":"class Stack: def __init__(self): Initialize an empty stack. self._storage = [] def push(self, value): Push a value onto the stack. self._storage.append(value) def pop(self): Remove and return the value at the top of the stack. Return None if the stack is empty. if not self.isEmpty(): return self._storage.pop() return None def top(self): Return the value at the top of the stack without removing it. Return None if the stack is empty. if not self.isEmpty(): return self._storage[-1] return None def isEmpty(self): Check if the stack is empty. Return True if the stack is empty, otherwise False. return len(self._storage) == 0"},{"question":"Write a python function to check if a given string contains the letter 'a' and it is followed by exactly two 'b's.","solution":"def contains_ab_pattern(s): Check if the given string contains the letter 'a' followed by exactly two 'b's. Parameters: s (str): The input string to be checked. Returns: bool: True if the string contains 'abb', False otherwise. return 'abb' in s"},{"question":"Write a python function to find the minimum element in a given list without using the in-built min() function. You should also ensure that the function handles cases where the list is empty and raises an appropriate exception.","solution":"def find_minimum(lst): Finds the minimum element in a given list without using the in-built min() function. Parameters: lst (list): The list from which to find the minimum element. Returns: int/float: The minimum element in the list. Raises: ValueError: If the list is empty. if not lst: raise ValueError(\\"The list is empty.\\") min_value = lst[0] for item in lst[1:]: if item < min_value: min_value = item return min_value"},{"question":"Write a python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.","solution":"def sum_of_squares(n): Calculate the sum of the series 1^2 + 2^2 + ... + n^2. Parameters: n (int): The upper limit of the series Returns: int: The sum of squares from 1 to n return sum(i**2 for i in range(1, n+1))"},{"question":"Write a python function to replace characters in a string, specified by their original character and their replacement character.","solution":"def replace_characters(text, replacements): Replace characters in the text according to the replacements dictionary. :param text: The input string where replacements will be made. :param replacements: A dictionary where keys are the original characters and values are the replacement characters. :return: A new string with the characters replaced. for original_char, replacement_char in replacements.items(): text = text.replace(original_char, replacement_char) return text"},{"question":"Write a python function to calculate the total number of unique paths from the top-left corner to the bottom-right corner of a M x N grid. You can only move either down or right at any point in time.","solution":"def unique_paths(m, n): Calculate the number of unique paths in a m x n grid. Parameters: m (int): number of rows n (int): number of columns Returns: int: total number of unique paths from top-left to bottom-right corner # Create a 2D array \`dp\` with dimensions m x n where each element is initially set to 1. dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from cell (1, 1) until (m-1, n-1). for i in range(1, m): for j in range(1, n): # Number of ways to get to the current cell is the sum of the number of ways to # get to the cell directly above it and the cell directly to the left of it. dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the number of ways to get to the bottom-right corner. return dp[m-1][n-1]"},{"question":"Write a python function to reverse the order of elements in a list. Please include necessary comments to explain each step of the function.","solution":"def reverse_list(lst): Reverses the order of elements in a list. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. # Using slicing to reverse the list return lst[::-1]"},{"question":"Write a python function to rotate a list by k steps to the right. For example, given the list \`[1, 2, 3, 4, 5]\` and \`k = 2\`, the function should return \`[4, 5, 1, 2, 3]\`.","solution":"def rotate_list(nums, k): Rotates the list nums to the right by k steps. if not nums or k <= 0: return nums n = len(nums) k = k % n # Handle cases where k is greater than the length of nums return nums[-k:] + nums[:-k]"},{"question":"Write a python function to count the number of unique characters in a given string, ignoring case sensitivity and spaces. For example, the string 'Hello World' should return 7 since it contains the characters H, e, l, o, W, r, and d.","solution":"def count_unique_characters(s): Returns the count of unique characters in the given string, ignoring case and spaces. # Convert string to lower case and remove spaces s = s.lower().replace(\\" \\", \\"\\") # Create a set of characters in the string unique_chars = set(s) # Return the length of the set return len(unique_chars)"},{"question":"Write a python function to count the number of distinct unordered pairs in a list. An unordered pair is a set of two elements that are identical disregarding the order. For example, the pairs (1, 2) and (2, 1) would be considered the same pair. You should not count duplicate pairs with the same elements but different frequencies.","solution":"def count_distinct_unordered_pairs(lst): Counts the number of distinct unordered pairs in a list. An unordered pair is a set of two elements that are considered the same set regardless of the order of the elements. Args: lst: List of elements. Returns: Number of distinct unordered pairs. if len(lst) < 2: return 0 # Convert list to a set to remove duplicate elements for pairing unique_elements = list(set(lst)) count = 0 n = len(unique_elements) for i in range(n): for j in range(i + 1, n): count += 1 return count"},{"question":"Write a python function to find all the indexes of a given element in a list. The function should take two arguments: input list and the target element.","solution":"def find_all_indexes(input_list, target): Find all indexes of the target element in the input list. Args: input_list (list): The list to search. target: The element to find in the list. Returns: list: A list of indexes where the target element is found. indexes = [] for i, element in enumerate(input_list): if element == target: indexes.append(i) return indexes"},{"question":"Write a python function to remove adjacent duplicates from a string.","solution":"def remove_adjacent_duplicates(s): Removes adjacent duplicate letters from the input string 's'. Example: \\"aabbcc\\" -> \\"abc\\" \\"abbaca\\" -> \\"abca\\" result = [] for char in s: if result and result[-1] == char: continue result.append(char) return ''.join(result)"},{"question":"Write a python function to find the missing number in a given array of integers where the elements are in the range from 1 to ( n ) (where ( n ) is the size of the array). The problem assumes that there is exactly one number missing in the array.","solution":"def find_missing_number(arr): Finds the missing number in the array where the elements are in the range from 1 to n. Parameters: arr (list): A list of integers where exactly one number between 1 and n is missing. Returns: int: The missing number. n = len(arr) + 1 actual_sum = sum(arr) expected_sum = n * (n + 1) // 2 return expected_sum - actual_sum"},{"question":"Write a python function to calculate the sum of all even numbers between two given numbers (inclusive). The function should return the sum and the count of even numbers found in that range.","solution":"def sum_and_count_even(start, end): Returns the sum and count of all even numbers between start and end (inclusive). even_sum = 0 even_count = 0 for number in range(start, end + 1): if number % 2 == 0: even_sum += number even_count += 1 return even_sum, even_count"},{"question":"Write a python function to print all the numbers between 1 and 100 that are multiples of 7 and 11.","solution":"def multiples_of_7_and_11(): Returns a list of all numbers between 1 and 100 that are multiples of both 7 and 11. multiples = [] for i in range(1, 101): if i % 7 == 0 and i % 11 == 0: multiples.append(i) return multiples"},{"question":"Write a python function to solve the 2D bin packing problem. The problem involves packing a set of rectangles into a bin of a given size such that the total area of the rectangles is minimized.","solution":"def bin_packing_2D(bin_width, bin_height, rectangles): Solves a simplified 2D bin packing problem using a bottom-left fill algorithm. :param bin_width: Width of the bin. :param bin_height: Height of the bin. :param rectangles: List of tuples where each tuple represents the (width, height) of a rectangle. :returns: List of tuples where each tuple represents (x, y, width, height) positioning of a rectangle in the bin. placements = [] # Sort rectangles by height, then width descending to fit larger items first rectangles = sorted(rectangles, key=lambda x: (-x[1], -x[0])) for rect in rectangles: placed = False for y in range(bin_height - rect[1] + 1): for x in range(bin_width - rect[0] + 1): if all(not (placement[0] < x + rect[0] and x < placement[0] + placement[2] and placement[1] < y + rect[1] and y < placement[1] + placement[3]) for placement in placements): placements.append((x, y, rect[0], rect[1])) placed = True break if placed: break if not placed: return [] # If a rectangle cannot be placed, return empty list indicating failure return placements"},{"question":"Write a python function to generate a Fibonacci series up to the nth term. Here, nth term is provided by the user.","solution":"def fibonacci_series(n): Generate a Fibonacci series up to the nth term. Parameters: n (int): The number of terms in the Fibonacci series to generate. Returns: list: A list containing the Fibonacci series up to the nth term. if n <= 0: return [] elif n == 1: return [0] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series"},{"question":"Write a python function to extract every second word from a list of strings.","solution":"def extract_every_second_word(strings): Returns a list containing every second word from each sentence in the input list of strings. Args: strings (list of str): List of strings to extract words from. Returns: list of str: Extracted words from each sentence. words = [] for string in strings: split_words = string.split() words.extend(split_words[1::2]) return words"},{"question":"Write a python function to identify and print the elements of a list that have the maximum frequency. If there are multiple elements with the same highest frequency, all should be printed in ascending order.","solution":"from collections import Counter def most_frequent_elements(lst): Identifies and returns a list of elements that have the maximum frequency within the input list. If multiple elements have the same highest frequency, they are returned in ascending order. :param lst: List of elements to analyze :return: List of most frequent elements in ascending order if not lst: return [] frequency_count = Counter(lst) max_freq = max(frequency_count.values()) most_frequent = [elem for elem, count in frequency_count.items() if count == max_freq] return sorted(most_frequent)"},{"question":"Write a python function to find the maximum element in a given list of numbers. The function should return the maximum element found.","solution":"def find_maximum(numbers): Returns the maximum element in the given list of numbers. If the list is empty, returns None. if not numbers: return None max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Write a python function to sort a list of strings in lexicographical order. Also, handle cases where the strings contain special characters or numbers mixed with letters.","solution":"def lexicographical_sort(strings): Sort a list of strings in lexicographical order. This function handles cases where strings contain special characters or numbers mixed with letters. Parameters: - strings (list of str): List of strings to be sorted. Returns: - list of str: Sorted list of strings. return sorted(strings)"},{"question":"Write a python function to replace all occurrences of a specific character in a given string. The function should take a string \`input_str\`, a character \`to_replace\`, and a character \`replacement\` as arguments. The function should return a new string with all occurrences of \`to_replace\` replaced by \`replacement\`.","solution":"def replace_char(input_str, to_replace, replacement): Replaces all occurrences of to_replace with replacement in input_str. Parameters: input_str (str): The original string. to_replace (str): The character to be replaced. replacement (str): The character that will replace to_replace. Returns: str: The new string with all occurrences of to_replace replaced by replacement. return input_str.replace(to_replace, replacement)"},{"question":"Write a python function to calculate the sum of the digits of a given number. If the sum is less than 10, return the sum. If the sum is greater than or equal to 10, return the sum of the digits until the result is a single digit.","solution":"def sum_of_digits_until_single_digit(n): Calculate the sum of the digits of a given number. If the sum is less than 10, return the sum. If the sum is greater than or equal to 10, recursively sum the digits until the result is a single digit. def sum_digits(x): return sum(int(d) for d in str(x)) while n >= 10: n = sum_digits(n) return n"},{"question":"Write a python function to find the length of the longest repeating subsequence in a given string without having overlapping characters. For example, the longest repeating subsequence in the string \\"aabebcdd\\" is \\"abd\\" which has a length of 3. Another example is the string \\"axxxy\\" with the longest repeating subsequence \\"xx\\". How would you approach this problem?","solution":"def findLongestRepeatingSubSeq(str): n = len(str) # Create and initialize DP table dp = [[0 for j in range(n+1)] for i in range(n+1)] # Fill dp table (similar to LCS loops) for i in range(1, n+1): for j in range(1, n+1): # If characters match and indices are different if str[i-1] == str[j-1] and i != j: dp[i][j] = 1 + dp[i-1][j-1] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[n][n]"},{"question":"Write a python function to implement a basic pipeline, similar to sklearn's pipeline but simpler.","solution":"class SimplePipeline: def __init__(self, steps): Initialize the pipeline with a list of (name, transformer) tuples. :param steps: List of tuples where each tuple contains a step name and a transformer self.steps = steps def fit(self, X, y=None): Fit each transformer in the pipeline :param X: Input data :param y: Target labels (optional, depending on the transformers) :return: self for name, transformer in self.steps: transformer.fit(X, y) if hasattr(transformer, 'transform'): X = transformer.transform(X) return self def transform(self, X): Apply each transformer to the data :param X: Input data :return: Transformed data for name, transformer in self.steps: if hasattr(transformer, 'transform'): X = transformer.transform(X) return X def fit_transform(self, X, y=None): Fit each transformer and apply them to the data :param X: Input data :param y: Target labels (optional, depending on the transformers) :return: Transformed data for name, transformer in self.steps: X = transformer.fit_transform(X, y) return X"},{"question":"Write a python function to print out the asterisks (\`*\`) in a pattern of an equilateral triangle. The function should take the height of the triangle as an argument and print each row of the triangle on a new line.","solution":"def print_equilateral_triangle(height): Prints an equilateral triangle pattern made of asterisks for a given height. for i in range(height): # Print leading spaces for j in range(height - i - 1): print(\\" \\", end=\\"\\") # Print asterisks for k in range(2 * i + 1): print(\\"*\\", end=\\"\\") # Move to the next line print()"},{"question":"Write a python function to solve the Eight Queens puzzle. The Eight Queens puzzle is the problem of placing eight chess queens on an 8x8 chessboard so that no two queens threaten each other. Thus, no two queens can share the same row, column, or diagonal. The function should return all valid solutions as a list of lists, where each inner list represents a row of the chessboard with the indices of the queens' columns.","solution":"def solve_n_queens(n=8): def is_valid(board, row, col): for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(row, board): if row == n: result.append(board[:]) return for col in range(n): if is_valid(board, row, col): board[row] = col solve(row + 1, board) board[row] = -1 result = [] solve(0, [-1] * n) return result"},{"question":"Write a python function to check if a given string \`s\` can be converted to a palindrome by removing at most one character from it. For example, the string \\"racecar\\" is already a palindrome, and removing the character 'a' from \\"raceca\\" or \\"racecr\\" also results in a palindrome. However, removing more than one character would not suffice.","solution":"def can_form_palindrome_by_removing_one_char(s): Checks if a string can be converted to a palindrome by removing at most one character. Parameters: s (str): Input string Returns: bool: True if the string can be converted to a palindrome, False otherwise def is_palindrome_range(si, ei): Helper function that checks if the substring s[si:ei+1] is a palindrome. return all(s[si + i] == s[ei - i] for i in range((ei - si + 1) // 2)) i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) i += 1 j -= 1 return True"},{"question":"Write a python function to merge two sorted arrays into a single sorted array. The function should take two lists of integers as input and return a new list that is sorted in non-decreasing order. You should not modify the original lists.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: A new sorted array that contains elements from both input arrays. result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): result.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Write a python function to sort a dictionary by its values using the sorted() function and the lambda expression.","solution":"def sort_dict_by_values(d): Returns a dictionary sorted by its values. Args: d (dict): The dictionary to be sorted. Returns: dict: A new dictionary sorted by its values. return dict(sorted(d.items(), key=lambda item: item[1]))"},{"question":"Write a python function to create a set that contains all the even numbers between a given range inclusively.","solution":"def even_numbers_in_range(start, end): Returns a set containing all even numbers within the given range [start, end]. :param start: The beginning of the range. :param end: The end of the range. :return: A set of even numbers within the specified range. return {num for num in range(start, end + 1) if num % 2 == 0}"},{"question":"Write a python function to find the number of days between two given dates. The function should return the absolute difference in days between the two dates.","solution":"from datetime import datetime def days_between(date1, date2): Returns the absolute number of days between the two given dates. :param date1: string in the format 'YYYY-MM-DD' :param date2: string in the format 'YYYY-MM-DD' :return: integer representing the absolute number of days between the two dates d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') return abs((d2 - d1).days)"},{"question":"Write a python function to reverse the order of the characters in a string literal.","solution":"def reverse_string(s): Reverses the order of the characters in a string literal. Parameters: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a python function to find the smallest missing positive integer from an array of integers. For example, if the array is \`[-1, 2, 0]\`, the smallest missing positive integer is \`1\`. If the array is \`[3, 4, -1, 1]\`, the smallest missing positive integer is \`2\`.","solution":"def find_smallest_missing_positive(nums): Finds the smallest missing positive integer from an array of integers. nums = set(nums) smallest_missing = 1 while smallest_missing in nums: smallest_missing += 1 return smallest_missing"},{"question":"Write a python function to divide one number by another. If the denominator is zero, catch the error and return a message saying \\"Denominator cannot be zero.\\" Otherwise, return the result of the division.","solution":"def divide(a, b): Divides number a by number b. If b is zero, returns an error message. try: return a / b except ZeroDivisionError: return \\"Denominator cannot be zero.\\""},{"question":"Write a python function to implement the iddfs function to find a path to a target node in an undirected graph from a given start node using iterative deepening depth-first search algorithm.","solution":"def iddfs(start, target, graph): Performs Iterative Deepening Depth-First Search (IDDFS) in a graph. :param start: The starting node :param target: The target node to find a path to :param graph: Dictionary representing the undirected graph where keys are nodes and values are lists of adjacent nodes :return: List representing the path from start to target node, or None if no path is found def dfs(current_node, target, depth, path): if depth == 0: return path if current_node == target else None for neighbor in graph.get(current_node, []): if neighbor not in path: result = dfs(neighbor, target, depth - 1, path + [neighbor]) if result is not None: return result return None depth = 0 while True: path = dfs(start, target, depth, [start]) if path: return path depth += 1 if depth > len(graph): # Failsafe to avoid infinite loop in disconnected graph return None"},{"question":"Write a python function to print a right-angled triangle with stars, where the number of rows is given as input. Also, include a docstring to describe the function.","solution":"def print_right_angled_triangle(rows): Prints a right-angled triangle using stars (*) with the given number of rows. Args: rows (int): The number of rows for the right-angled triangle. Returns: None for i in range(1, rows + 1): print('*' * i)"},{"question":"Write a python function to count the number of strings in a list that not only have more than 3 characters but also contain the substring 'xyz'.","solution":"def count_strings_with_xyz(strings): Returns the count of strings in the list that have more than 3 characters and contain the substring 'xyz'. Args: strings (list of str): List of strings to check. Returns: int: The count of strings matching criteria. return sum(1 for s in strings if len(s) > 3 and 'xyz' in s)"},{"question":"Write a python function to check if a list is sorted in ascending order. If the list is not sorted, the function should return the index where the list becomes sorted in ascending order. If the entire list is sorted, return -1. You should use Python's built-in functions and no additional libraries.","solution":"def find_unsorted_index(lst): Returns the first index where the list is not sorted in ascending order. If the entire list is sorted, returns -1. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return i + 1 return -1"},{"question":"Write a python function to remove all tags from a given HTML string. The function should return the pure text content of the HTML string. For example, if the input is \\"<h1>Hello</h1><p>World</p>\\", the output should be \\"HelloWorld\\".","solution":"import re def remove_html_tags(html_string): Removes all HTML tags from the given HTML string and returns the pure text content. Args: html_string (str): The HTML string to process. Returns: str: The string without HTML tags. clean_text = re.sub('<[^<]+?>', '', html_string) return clean_text"},{"question":"Write a python function to find the maximal element of a multidimensional array. Multidimensional array is an array containing nested arrays of varying lengths.","solution":"def find_maximal_element(multidimensional_array): Finds and returns the maximal element in a multidimensional array. maximal_element = float('-inf') def find_max_recursive(array): nonlocal maximal_element for item in array: if isinstance(item, list): find_max_recursive(item) else: maximal_element = max(maximal_element, item) find_max_recursive(multidimensional_array) return maximal_element"},{"question":"Write a python function to extract the email addresses from the given list of strings. Each string in the list may or may not contain an email address, and multiple email addresses can be included in the same string. A typical email address includes one or more characters before the '@' symbol followed by one or more characters and a mandatory '.' and another set of characters after the '@' symbol.","solution":"import re def extract_emails(strings): Extracts email addresses from a list of strings. Args: strings (list of str): List containing strings that may contain email addresses. Returns: list of str: A list containing all the email addresses found in the input list of strings. email_pattern = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' emails = [] for string in strings: emails.extend(re.findall(email_pattern, string)) return emails"},{"question":"Write a python function to find the smallest number in a given list. The function should return the smallest number found. If the list is empty, the function should return None.","solution":"def find_smallest(numbers): Returns the smallest number in the given list. If the list is empty, returns None. if not numbers: return None return min(numbers)"},{"question":"Write a python function to convert a given time in 24-hour format to 12-hour format with AM/PM.","solution":"def convert_to_12_hour_format(time_24): Convert time from 24-hour format to 12-hour format with AM/PM. :param time_24: A string representing time in 24-hour format (e.g., \\"14:30\\"). :return: A string representing time in 12-hour format with AM/PM (e.g., \\"2:30 PM\\"). # Extract hours and minutes hours, minutes = map(int, time_24.split(':')) # Determine AM/PM if hours < 12: am_pm = 'AM' hours = hours if hours != 0 else 12 # Convert 0 hour to 12 AM else: am_pm = 'PM' hours = hours - 12 if hours > 12 else hours # Convert hour to 12-hour format # Format hours to remove leading zero time_12 = f\\"{hours}:{minutes:02d} {am_pm}\\" return time_12"},{"question":"Write a python function to read data from a CSV file and return the number of rows, columns, and the data.","solution":"import csv def read_csv(file_path): Reads data from a CSV file and returns the number of rows, columns, and the data. :param file_path: The path to the CSV file. :return: A tuple containing the number of rows, number of columns, and the data as a list of lists. with open(file_path, newline='') as csvfile: reader = csv.reader(csvfile) data = list(reader) num_rows = len(data) num_columns = len(data[0]) if num_rows > 0 else 0 return num_rows, num_columns, data"},{"question":"Write a python function to return the largest element in a list. If the list is empty, the function should return None.","solution":"def largest_element(lst): Returns the largest element in a list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to generate all prime factors of a given number \`n\`. The function should return a list of prime factors in ascending order.","solution":"def prime_factors(n): Generates all prime factors of a given number n. Args: n (int): The number to find the prime factors of. Returns: list: A list of prime factors in ascending order. i = 2 factors = [] while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors"},{"question":"Write a python function to create a button press simulation. The function should simulate button press and release. The function should take the button name as a parameter and the number of times the button should be pressed.","solution":"import time def simulate_button_press(button_name, press_count): Simulates a button press and release for a given button name and number of times. Parameters: button_name (str): The name of the button. press_count (int): The number of times to press the button. Returns: list of tuples: Each tuple contains the button name and state (\\"pressed\\" or \\"released\\"). result = [] for _ in range(press_count): result.append((button_name, \\"pressed\\")) time.sleep(0.1) # Simulate a short delay for button press result.append((button_name, \\"released\\")) time.sleep(0.1) # Simulate a short delay for button release return result"},{"question":"Write a python function to return the maximum number from a given list of numbers. Please include comments to explain each step of your code.","solution":"def find_max(numbers): Returns the maximum number from a given list of numbers. if not numbers: # Check if the list is empty return None # Return None if the list is empty max_number = numbers[0] # Assume the first number is the maximum initially for num in numbers: # Iterate through each number in the list if num > max_number: # Compare each number with the current max_number max_number = num # Update max_number if a larger number is found return max_number # Return the maximum number found"},{"question":"Write a python function to reverse the order of elements in a list, without using slicing or any built-in reverse function. Additionally, your function should handle cases where the list has duplicate elements.","solution":"def reverse_list(lst): Reverses the order of elements in a list without using slicing or built-in reverse functions. n = len(lst) for i in range(n // 2): lst[i], lst[n - i - 1] = lst[n - i - 1], lst[i] return lst"},{"question":"Write a python function to check if a given number is a valid binary number.","solution":"def is_valid_binary_number(number_str): Check if the given string is a valid binary number. Args: number_str (str): The string to be checked. Returns: bool: True if the string is a valid binary number, False otherwise. # Check if all characters in the string are either '0' or '1' return all(char in '01' for char in number_str)"},{"question":"Write a python function to convert a given string to an integer (without using built-in functions like int()).","solution":"def string_to_int(s): Converts a given string to an integer without using built-in functions like int(). Args: s (str): The string representation of the integer. Returns: int: The integer value of the string. if not s: raise ValueError(\\"The input string cannot be empty.\\") is_negative = False i = 0 if s[0] == '-': is_negative = True i = 1 elif s[0] == '+': i = 1 result = 0 for j in range(i, len(s)): if s[j] < '0' or s[j] > '9': raise ValueError(\\"The input string must contain only numerical characters.\\") result = result * 10 + (ord(s[j]) - ord('0')) if is_negative: result = -result return result"},{"question":"Write a python function to find the largest palindrome which is a product of two n-digit numbers. For example, if n=2, the function should return the largest palindrome product of two 2-digit numbers (i.e., between 10 and 99).","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def largest_palindrome_product(n): Returns the largest palindrome made from the product of two n-digit numbers. if n < 1: raise ValueError(\\"n must be greater than or equal to 1\\") start = 10 ** (n - 1) end = 10 ** n max_palindrome = 0 for i in range(end - 1, start - 1, -1): for j in range(i, start - 1, -1): product = i * j if product <= max_palindrome: break if is_palindrome(product): max_palindrome = product return max_palindrome"},{"question":"Write a python function to remove duplicate characters from a string without using any additional data structures like sets or lists. Include the function in a class named \`StringProcessor\`.","solution":"class StringProcessor: @staticmethod def remove_duplicates(s): Removes duplicate characters from a string. result = \\"\\" for char in s: if char not in result: result += char return result"},{"question":"Write a python function to validate a given HTML string. The function should return \\"Valid\\" if the HTML string is correctly formed, and \\"Invalid\\" if it is not.","solution":"def validate_html(html): Validates if the given HTML string is correctly formed. Returns \\"Valid\\" if it is, \\"Invalid\\" otherwise. import re tags = re.findall(r'</?[ws=\\"]+>', html) stack = [] for tag in tags: if tag.startswith('</'): if stack and stack[-1] == tag.replace('/', ''): stack.pop() else: return \\"Invalid\\" else: stack.append(tag) return \\"Valid\\" if not stack else \\"Invalid\\""},{"question":"Write a python function to find the element that appears once in a sorted array where every other element appears twice.","solution":"def find_single_element(nums): Finds the element that appears once in a sorted array where every other element appears twice. Params: nums (list): The sorted list of integers where exactly one element appears once, and every other element appears twice. Returns: int: The element that appears once. left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 # Check if mid is the unique element if mid % 2 == 1: mid -= 1 # Check if the pair is broken if nums[mid] != nums[mid + 1]: right = mid else: left = mid + 2 return nums[left]"},{"question":"Write a python function to print out all the prime numbers less than n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Initialize a list that represents numbers from 0 to n-1 sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers # Mark non-prime numbers as False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False # Extract prime numbers primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes"},{"question":"Write a python function to clone a linked list. The original list is singly linked and includes integer nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def clone_linked_list(head): Clones a singly linked list and returns the head of the new list. if not head: return None current = head new_head = ListNode(current.val) new_current = new_head while current.next: current = current.next new_node = ListNode(current.val) new_current.next = new_node new_current = new_node return new_head"},{"question":"Write a python function to find the largest sum of any contiguous subarray within a given list of integers. This is a classic problem often referred to as Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Finds the largest sum of any contiguous subarray within a given list of integers. This implementation uses Kadane's Algorithm. :param nums: A list of integers :return: The largest sum of any contiguous subarray within nums if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to extract all the words from a given string that start with a specific letter (for example, 'A' or 'a'). The function should return a list of these words.","solution":"def extract_words_starting_with_letter(text, letter): Extracts all words from a given string that start with the specified letter. Parameters: text (str): The input string. letter (str): The starting letter to filter words on. Returns: list: A list of words that start with the specified letter. words = text.split() matching_words = [word for word in words if word.lower().startswith(letter.lower())] return matching_words"},{"question":"Write a python function to print the numbers from 1 to 10 in reverse order using a loop.","solution":"def print_reverse_1_to_10(): Prints numbers from 1 to 10 in reverse order. for i in range(10, 0, -1): print(i)"},{"question":"Write a python function to convert an integer to its Roman numeral representation. For example, if the input is 3, the output should be the string \\"III\\". If the input is 4, the output should be \\"IV\\". If the input is 1994, the output should be \\"MCMXCIV\\".","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. Parameters: num (int): The integer to convert to Roman numeral Returns: str: Roman numeral representation of the input integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a python function to insert a new node with a given data value in a linked list at the end. Assume the linked list is empty or has one or more nodes. The function should return the head of the linked list after insertion.","solution":"class ListNode: Node class for linked list def __init__(self, data=0, next=None): self.data = data self.next = next def insert_at_end(head, data): Insert a new node with the given data at the end of the linked list :param head: ListNode object; head of the linked list :param data: Data to insert at the end of the linked list :return: ListNode object; head of the linked list new_node = ListNode(data) if head is None: return new_node current = head while current.next: current = current.next current.next = new_node return head"},{"question":"Write a python function to create a new list that contains the squares of the numbers in the given list.","solution":"def square_numbers(numbers): Returns a new list of squares of the given numbers. Args: numbers: List of integers Returns: List of integers which are the squares of the input numbers. return [num**2 for num in numbers]"},{"question":"Write a python function to sort a list of strings by the length of each string using the bubble sort algorithm.","solution":"def bubble_sort_by_length(arr): Sorts the list of strings by the length of each string using bubble sort algorithm. n = len(arr) for i in range(n - 1): for j in range(0, n - i - 1): if len(arr[j]) > len(arr[j + 1]): arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a python function to remove temporary files from a directory using efficient file handling in Python. The function should accept the directory path as a parameter and remove all files that do not have an extension (indicating they are temporary files).","solution":"import os def remove_temporary_files(directory_path): Remove all files in the specified directory that do not have an extension. Parameters: - directory_path (str): The path to the directory from which to remove temporary files. Returns: - int: The number of files removed. # Ensure the directory exists if not os.path.isdir(directory_path): raise ValueError(f\\"The directory {directory_path} does not exist.\\") files_removed = 0 # Iterate over all files and remove those without an extension for filename in os.listdir(directory_path): file_path = os.path.join(directory_path, filename) if os.path.isfile(file_path) and not os.path.splitext(filename)[1]: os.remove(file_path) files_removed += 1 return files_removed"},{"question":"Write a python function to generate a new list where the elements are the squares of the elements in the original list.","solution":"def square_elements(input_list): Returns a new list where each element is the square of the corresponding element in the input list. Parameters: input_list (list): The list of numbers to be squared. Returns: list: A new list containing the squares of the elements in the input list. return [x ** 2 for x in input_list]"},{"question":"Write a python function to count the number of elements less than a given value in a list.","solution":"def count_elements_less_than(lst, value): Returns the number of elements in lst that are less than the specified value. return sum(1 for x in lst if x < value)"},{"question":"Write a python function to check if a given directory exists or not. If it does not exist, create the directory. If it already exists, return the path.","solution":"import os def ensure_directory_exists(directory_path): Checks if the directory exists. If not, creates the directory. Returns the directory path. if not os.path.exists(directory_path): os.makedirs(directory_path) return directory_path"},{"question":"Write a python function to calculate the area of a circle and use it to calculate and print the area of a circle with a radius of 1.75. Use the mathematical constant pi from the \`math\` module.","solution":"import math def area_of_circle(radius): Returns the area of a circle with the given radius. return math.pi * radius * radius # Calculate the area of a circle with a radius of 1.75 radius = 1.75 area = area_of_circle(radius) print(f\\"The area of a circle with radius {radius} is {area}\\")"},{"question":"Write a python function to find the length of the last word of a given string. The last word is defined as the last sequence of characters separated by spaces. For example, if the input string is \\"Hello World\\", the function should return 5, as \\"World\\" has 5 characters. If there are trailing spaces at the end, they should be ignored, and the function should still return the correct word length.","solution":"def length_of_last_word(s): Returns the length of the last word in the given string 's'. Trailing spaces are ignored. :param s: The input string :return: Length of the last word s = s.strip() # Remove trailing spaces if not s: return 0 words = s.split() return len(words[-1])"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. The function should have the following signature \`def fibonacci(n):\`. The nth Fibonacci number is defined as Fibonacci(n-1) + Fibonacci(n-2) with the base cases being Fibonacci(0) = 0 and Fibonacci(1) = 1. Ensure that your function is recursive and does not use any loops.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to return a list of the indexes of all unique items in a list. Your function should find all the items that appear exactly once in the list and return their indexes as a list of tuples. Each tuple should contain the item and its corresponding index in the original list.","solution":"def unique_items_with_index(lst): Returns a list of tuples with unique items and their indexes in the list. Items are unique if they appear exactly once in the list. Args: lst (list): The input list. Returns: list: A list of tuples where each tuple contains a unique item and its index. from collections import Counter item_counts = Counter(lst) unique_indexes = [(item, index) for index, item in enumerate(lst) if item_counts[item] == 1] return unique_indexes"},{"question":"Write a python function to check whether a given graph is a tree or not. A tree is a connected acyclic graph.","solution":"def is_tree(graph): Check if a given graph is a tree. A tree is a connected, acyclic graph. :param graph: dict, adjacency list representation of the graph :return: bool, True if the graph is a tree, False otherwise def has_cycle(node, visited, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if has_cycle(neighbor, visited, node): return True elif parent != neighbor: return True return False if not graph: return True # Start with an arbitrary node. Generally, we use the first node in the graph. start_node = list(graph.keys())[0] # Check for cycles visited = set() if has_cycle(start_node, visited, None): return False # Check if the graph is connected return len(visited) == len(graph)"},{"question":"Write a python function to count the frequency of each word in a given text and return the result as a dictionary. The function should handle case sensitivity and ignore punctuation.","solution":"import string def word_frequency(text): Returns a dictionary with the frequency of each word in the given text. # Convert all characters to lower case to handle case sensitivity text = text.lower() # Remove punctuation using str.translate and string.punctuation text = text.translate(str.maketrans('', '', string.punctuation)) # Split the text into words words = text.split() # Create a dictionary to store the frequency of each word frequency = {} # Count the frequency of each word for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to find the second smallest element in a list. Your function should return -1 if there is no second smallest element.","solution":"def second_smallest(numbers): Returns the second smallest element in the list. If there is no second smallest element, returns -1. if len(numbers) < 2: return -1 unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: return -1 return unique_numbers[1]"},{"question":"Write a python function to print the nth Fibonacci number using recursive method.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to find the largest continuous sum of a subarray within a one-dimensional array of numbers. This is commonly known as Kadane's algorithm.","solution":"def kadane_algorithm(arr): Returns the largest continuous sum of a subarray within the one-dimensional array using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to swap two numbers without using a temporary variable. You should also include a function to test the correctness of your solution with various test cases.","solution":"def swap(a, b): Swaps the values of a and b without using a temporary variable. a, b = b, a return a, b"},{"question":"Write a python function to convert a given string into a list containing individual words. The function should handle punctuation as well, treating punctuation as part of the word it is attached to (i.e., \\"word,\\" should be converted to [\\"word,\\"]).","solution":"def string_to_word_list(input_string): Converts a given string into a list containing individual words, treating punctuation as part of the word it is attached to. # Use split() method which splits by whitespace by default return input_string.split()"},{"question":"Write a python function to remove duplicates from a sorted list and return a list with unique elements in the correct order.","solution":"def remove_duplicates(sorted_list): Remove duplicates from a sorted list and return a list with unique elements in the correct order. :param sorted_list: List of sorted elements. :return: List with unique elements. if not sorted_list: return [] unique_list = [sorted_list[0]] for element in sorted_list[1:]: if element != unique_list[-1]: unique_list.append(element) return unique_list"},{"question":"Write a python function to calculate and return the nth Fibonacci number. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... and so forth. The nth Fibonacci number is the number in the sequence at the nth position, starting with 0 as the 0th position. The function should only consider non-negative integers as valid inputs. If an invalid input is given, the function should raise a ValueError.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The nth Fibonacci number. Raises: ValueError: If n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to return the list with the minimum sum of elements. If there are multiple lists with the same minimum sum, return the one that appears first in the input list. Here is the given list of lists: [[1, 2, 3], [2, 2, 2], [3, 3, 3], [0, -1, -1]].","solution":"def list_with_min_sum(lists): Returns the list with the minimum sum of elements. If there are multiple lists with the same minimum sum, returns the first one that appears in the input list. if not lists: return [] min_sum = float('inf') min_list = lists[0] for lst in lists: current_sum = sum(lst) if current_sum < min_sum: min_sum = current_sum min_list = lst return min_list # Given list of lists lists = [[1, 2, 3], [2, 2, 2], [3, 3, 3], [0, -1, -1]] # Output the list with minimum sum list_with_min_sum(lists)"},{"question":"Write a python function to print all prime numbers from the given range 5 to 20.","solution":"def print_primes_in_range(start, end): Prints all prime numbers in the given range [start, end]. def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to reverse the elements of a stack.","solution":"def reverse_stack(stack): Reverses the elements of the stack. Parameters: stack (list): A list representing the stack. Returns: list: The stack with its elements reversed. if not stack: return [] temp = stack.pop() reversed_stack = reverse_stack(stack) insert_at_bottom(reversed_stack, temp) return reversed_stack def insert_at_bottom(stack, item): if not stack: stack.append(item) return temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp)"},{"question":"Write a python function to find the number of non-empty substrings of a given string where all characters are unique. For example, the string \\"abc\\" has the unique substrings \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\".","solution":"def count_unique_substrings(s): Returns the number of non-empty substrings of a given string where all characters are unique. n = len(s) count = 0 for i in range(n): seen = set() for j in range(i, n): if s[j] in seen: break seen.add(s[j]) count += 1 return count"},{"question":"Write a python function to find the index of the first occurrence of a string in the list. If the string is not found, return -1.","solution":"def find_first_occurrence(lst, string): Returns the index of the first occurrence of string in the list. If the string is not found, returns -1. try: return lst.index(string) except ValueError: return -1"},{"question":"Write a python function to find the k-th smallest element in an array using a divide and conquer approach.","solution":"def kth_smallest(arr, l, r, k): Finds the k-th smallest element in the array using the QuickSelect algorithm. if k > 0 and k <= r - l + 1: pos = partition(arr, l, r) if pos - l == k - 1: return arr[pos] if pos - l > k - 1: return kth_smallest(arr, l, pos - 1, k) return kth_smallest(arr, pos + 1, r, k - pos + l - 1) return float('inf') def partition(arr, l, r): x = arr[r] i = l for j in range(l, r): if arr[j] <= x: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[r] = arr[r], arr[i] return i"},{"question":"Write a python function to calculate the depth of a binary tree. The function should take a root node of a binary tree as an argument and return the depth of the tree, with the depth of a single node being 0.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def tree_depth(root): Returns the depth of the binary tree. if root is None: return -1 else: left_depth = tree_depth(root.left) right_depth = tree_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to implement the shell sort algorithm using the Knuth increment sequence.","solution":"def shell_sort(arr): Shell sort algorithm using the Knuth increment sequence. n = len(arr) h = 1 while h < n // 3: h = 3 * h + 1 # Knuth increment sequence: 1, 4, 13, 40, ... while h >= 1: for i in range(h, n): temp = arr[i] j = i while j >= h and arr[j - h] > temp: arr[j] = arr[j - h] j -= h arr[j] = temp h //= 3 return arr"},{"question":"Write a python function to print the elements of a list in reverse order using a while loop. The function should take a list as a parameter and not return anything.","solution":"def print_list_reverse(lst): Prints the elements of a list in reverse order using a while loop. index = len(lst) - 1 while index >= 0: print(lst[index]) index -= 1"},{"question":"Write a python function to design a function that takes an array and a target value as input. The function should search for target in the array. If target is found, return the index of the target in the array. If the target is not found, return -1. Additionally, the function should handle exceptions such as non-integer inputs and if the array is empty.","solution":"def search_array(arr, target): Searches for the target in the array. If found, returns the index of the target. If not found, returns -1. Parameters: arr (list): The list in which to search for the target. target (int): The value to search for in the array. Returns: int: The index of the target if found, otherwise -1. if not isinstance(target, int): raise ValueError(\\"Target must be an integer.\\") if not isinstance(arr, list): raise ValueError(\\"Array must be a list.\\") try: index = arr.index(target) return index except ValueError: return -1"},{"question":"Write a python function to find the maximum sum of any contiguous subarray within a one-dimensional array of numbers. This is a classic problem known as the \\"maximum subarray problem\\". The function should return the maximum sum, but if all numbers are negative, it should return the largest number.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within a one-dimensional array of numbers. If all numbers are negative, returns the largest number. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to take an integer as a parameter and return the number of even digits in the number. If there are no even digits, the function should return 0.","solution":"def count_even_digits(n): Returns the number of even digits in the integer n. Parameters: n (int): The input integer. Returns: int: The count of even digits in n. even_count = 0 for digit in str(n): if digit.isdigit() and int(digit) % 2 == 0: even_count += 1 return even_count"},{"question":"Write a python function to recursively find the depth of a binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to find duplicates in a list of integers.","solution":"def find_duplicates(nums): Returns a list of duplicates in the input list nums. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Write a python function to check if a given integer has a balanced binary representation. A balanced binary representation means that the number of 1s and 0s in the binary representation should be the same.","solution":"def is_balanced_binary(n): Check if a given integer has a balanced binary representation. A balanced binary representation means that the number of 1s and 0s in the binary representation should be the same. binary_representation = bin(n)[2:] count_ones = binary_representation.count('1') count_zeros = binary_representation.count('0') return count_ones == count_zeros"},{"question":"Write a python function to print all values from a dictionary where the keys are integers from 1 to 10 and the values are their corresponding English names.","solution":"def get_dict_values(d): Takes a dictionary d with integer keys from 1 to 10 and returns the list of values. keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] return [d[key] for key in keys]"},{"question":"Write a python function to find and print the first occurrence of a repeating character in a string “string”. Print \\"No repeating character found\\" if no such character exists in the string.","solution":"def first_repeating_character(string): Returns the first occurrence of a repeating character in the string. Prints 'No repeating character found' if no such character exists. seen = set() for char in string: if char in seen: return char seen.add(char) return \\"No repeating character found\\""},{"question":"Write a python function to find the maximum subarray sum. This problem, often referred to as Kadane's algorithm, is a popular algorithm that solves a variant of the maximum sum subarray problem.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum in the given list of integers using Kadane's algorithm. Args: nums (List[int]): A list of integers. Returns: int: The maximum subarray sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to check if a given 2D array is symmetric (also known as a palindromic square matrix). A square matrix is symmetric if it is equal to its transpose. For instance, a symmetric matrix has the property that the element at row i and column j is equal to the element at row j and column i for all i and j.","solution":"def is_symmetric(matrix): Check if a given 2D array (square matrix) is symmetric. A matrix is symmetric if it is equal to its transpose. Args: matrix (list of lists): 2D array representing the square matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a python function to find and return the missing number in an array of integers. The array contains integers in the range 0 to n with exactly one number missing. The numbers are in ascending order. Use Python's built-in functions where possible.","solution":"def find_missing_number(arr): Finds the missing number in a sorted array of integers ranging from 0 to n. Parameters: arr (list): A sorted list of integers with one missing number. Returns: int: The missing number. n = len(arr) total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a python function to find the possible combination of matrices multiplication in such a way that it leads to the least number of scalar multiplies in the process of multiplying a given sequence of matrices.","solution":"def matrix_chain_order(p): Given an array p[] which represents the chain of matrices such that the ith matrix Ai has dimensions p[i-1] x p[i], this function returns the minimum number of scalar multiplications needed to multiply the chain.. Parameters: p (List[int]): List containing the dimensions of the matrices. Returns: int: The minimum number of scalar multiplications. n = len(p) - 1 m = [[0 for _ in range(n)] for _ in range(n)] # m[i,j] = Minimum number of scalar multiplications needed to compute the matrix A[i]A[i+1]...A[j] = A[i..j] # The cost is zero when multiplying one matrix. for length in range(2, n+1): # length is the chain length. for i in range(n-length+1): j = i + length - 1 m[i][j] = float('inf') for k in range(i, j): # q = cost/scalar multiplications q = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1] if q < m[i][j]: m[i][j] = q return m[0][n-1]"},{"question":"Write a python function to convert a given string from upper case to lower case.","solution":"def to_lower_case(s): Converts a given string from upper case to lower case. Args: s (str): The string to be converted. Returns: str: The lower case version of the input string. return s.lower()"},{"question":"Write a python function to solve a system of linear equations given as a matrix form Ax = b. You can use any library that provides linear algebra functionality.","solution":"import numpy as np def solve_linear_system(A, b): Solves the system of linear equations Ax = b. Parameters: A (array-like): Coefficient matrix b (array-like): Ordinate or \\"dependent variable\\" values Returns: array-like: Solution to the system of equations Ax = b A = np.array(A) b = np.array(b) x = np.linalg.solve(A, b) return x"},{"question":"Write a python function to find the maximum profit that can be made by buying and selling a single share on a single day. The given list contains the prices of the stock on consecutive days.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling a single share on a single day. The given list contains the prices of the stock on consecutive days. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price max_profit = max(max_profit, profit) min_price = min(min_price, price) return max_profit"},{"question":"Write a python function to extract the maximum and minimum values from a given list of integers.","solution":"def find_max_min(numbers): Returns the maximum and minimum values from the given list of integers. :param numbers: List of integers :return: A tuple containing the maximum and minimum values if not numbers: return None, None max_val = max(numbers) min_val = min(numbers) return max_val, min_val"},{"question":"Write a python function to find the kth smallest element in a list. The function should handle both ascending and descending order. Also, it should be able to work for a list of any type of element that supports the less than operator (<). The function should be optimized for large lists.","solution":"import heapq def kth_smallest(arr, k, ascending=True): Returns the kth smallest element in the list \`arr\`. If \`ascending\` is False, it treats the list as being in descending order. Parameters: arr (list): the list from which to find the kth smallest element. k (int): the position (1-based) of the smallest element to find. ascending (bool): if True, treats the list as ascending order; if False, as descending order. Returns: The kth smallest element in the list. if not arr: raise ValueError(\\"The array should not be empty.\\") if k < 1 or k > len(arr): raise ValueError(\\"k should be between 1 and the length of the array.\\") if ascending: return heapq.nsmallest(k, arr)[-1] else: return heapq.nlargest(k, arr)[-1]"},{"question":"Write a python function to find and return the smallest integer in the given list that is greater than a specified value.","solution":"def smallest_greater_than(lst, value): Returns the smallest integer in the list that is greater than the specified value. If no such integer exists, returns None. filtered_lst = [x for x in lst if x > value] return min(filtered_lst) if filtered_lst else None"},{"question":"Write a python function to perform Insertion Sort on an array of integers. Explain the steps of the Insertion Sort algorithm and provide a code snippet to achieve this.","solution":"def insertion_sort(arr): Sorts an array of integers using the Insertion Sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. for i in range(1, arr.__len__()): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to generate a Fibonacci sequence with a given length. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should print each number in the sequence as it generates it.","solution":"def generate_fibonacci_sequence(n): Generates a Fibonacci sequence of length n. Prints each number in the sequence. :param n: Length of the Fibonacci sequence to generate if n <= 0: return [] sequence = [0, 1] for _ in range(2, n): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) for num in sequence[:n]: print(num) return sequence[:n]"},{"question":"Write a python function to solve a known hard puzzle, such as the classic \\"Sudoku\\". Explain your code step-by-step.","solution":"def is_valid(board, row, col, num): Check if 'num' is not in the current row, column and 3x3 sub-board. # Check the row for x in range(9): if board[row][x] == num: return False # Check the column for x in range(9): if board[x][col] == num: return False # Check the 3x3 sub-board start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. def solve(): for i in range(9): for j in range(9): if board[i][j] == 0: for num in range(1, 10): if is_valid(board, i, j, num): board[i][j] = num if solve(): return True else: board[i][j] = 0 return False return True solve() return board"},{"question":"Write a python function to parse an HTTP response header and return the values of \`Content-Type\` and \`Date\`.","solution":"def parse_http_response_header(header): Parse an HTTP response header and return the values of \`Content-Type\` and \`Date\`. Parameters: header (str): Full HTTP response header Returns: dict: Dictionary with keys 'Content-Type' and 'Date'. None if not found. lines = header.split(\\"rn\\") content_type = None date = None for line in lines: if line.startswith(\\"Content-Type:\\"): content_type = line.split(\\":\\", 1)[1].strip() elif line.startswith(\\"Date:\\"): date = line.split(\\":\\", 1)[1].strip() return {'Content-Type': content_type, 'Date': date}"},{"question":"Write a python function to compute the nth Fibonacci number using dynamic programming. How can I optimize the solution further?","solution":"def fibonacci(n): Computes the nth Fibonacci number using dynamic programming. Uses a bottom-up approach with O(n) time complexity and O(1) space complexity. :param n: The index of the Fibonacci number to compute. :return: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to get the longest palindrome substring from a given string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in s. if not s: return \\"\\" n = len(s) longest_palindrome = \\"\\" def expand_from_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] for i in range(n): # Check for odd length palindromes odd_palindrome = expand_from_center(i, i) if len(odd_palindrome) > len(longest_palindrome): longest_palindrome = odd_palindrome # Check for even length palindromes even_palindrome = expand_from_center(i, i + 1) if len(even_palindrome) > len(longest_palindrome): longest_palindrome = even_palindrome return longest_palindrome"},{"question":"Write a python function to find the minimum of three numbers without using the built-in \`min()\` function.","solution":"def find_minimum_of_three(a, b, c): Returns the minimum of three numbers a, b, and c without using the built-in min() function. if a <= b and a <= c: return a elif b <= a and b <= c: return b else: return c"},{"question":"Write a python function to find the maximum sum of non-adjacent elements in an array. The function should return the maximum sum as an integer.","solution":"def max_non_adjacent_sum(nums): Find the maximum sum of non-adjacent elements in the array. Parameters: nums (List[int]): List of integers. Returns: int: Maximum sum of non-adjacent elements. if not nums: return 0 incl = 0 excl = 0 for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a python function to multiply two integers without using the multiplication operator. You cannot use any other arithmetic operators like division, modulo, etc. Also, you should handle negative numbers and zero.","solution":"def multiply(a, b): Multiplies two integers a and b without using the multiplication operator. Handles negative numbers and zero. if a == 0 or b == 0: return 0 # Determine the sign of the product negative_result = (a < 0) ^ (b < 0) # Work with positive values for simplicity a, b = abs(a), abs(b) # Use the addition method to multiply product = 0 for _ in range(b): product += a # Return the product with the correct sign return -product if negative_result else product"},{"question":"Write a python function to reverse a string without using slicing, loops, and built-in string manipulation functions like \`reverse()\`, \`join()\`, or \`reversed()\`. How can you achieve this using recursion?","solution":"def reverse_string(s): Returns the reverse of the input string using recursion. # Base case: if the string is empty or has a single character, return it as is if len(s) <= 1: return s # Recursive case: reverse the substring (excluding first character) and add the first character at the end return reverse_string(s[1:]) + s[0]"},{"question":"Write a python function to find the second largest number in a list. This list can contain both positive and negative integers. Ensure that your solution is efficient and handles edge cases, such as when the list has fewer than two elements.","solution":"def second_largest(nums): Returns the second largest number in a list. If the list has fewer than 2 elements, returns None. if len(nums) < 2: return None first, second = float('-inf'), float('-inf') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return second if second != float('-inf') else None"},{"question":"Write a python function to convert a dictionary to a string in Python. The keys and values in the dictionary should be pairwise separated by a colon, and the dictionary should be in the format of \\"key:value\\". Also, the pairs should be comma separated.","solution":"def dict_to_string(d): Converts a dictionary to a string in the format \\"key:value\\". The pairs are comma-separated. Arguments: d -- dictionary to be converted Returns: A string representing the dictionary return ', '.join(f'{key}:{value}' for key, value in d.items())"},{"question":"Write a python function to find all the indices of the maximum value in a 2D list (list of lists). The function should return a list of tuples, with each tuple containing the indices (row, column) of a maximum value found in the 2D list.","solution":"def find_max_indices(matrix): Finds all indices of the maximum value in a given 2D list. Args: matrix (list of list of int/float): The 2D list to search. Returns: list of tuple: A list of tuples containing the indices (row, column) of the maximum value. if not matrix or not all(matrix): return [] max_value = float('-inf') max_indices = [] for row_idx, row in enumerate(matrix): for col_idx, value in enumerate(row): if value > max_value: max_value = value max_indices = [(row_idx, col_idx)] elif value == max_value: max_indices.append((row_idx, col_idx)) return max_indices"},{"question":"Write a python function to determine if a given integer is a palindrome. A positive integer is a palindrome if the digits in the integer spell the same number forward and backward.","solution":"def is_palindrome(number): Determines if a given integer is a palindrome. Parameters: number (int): The integer to check. Returns: bool: True if the integer is a palindrome, False otherwise. # Convert the number to string to check for palindrome number_str = str(number) return number_str == number_str[::-1]"},{"question":"Write a python function to find all the subsets of a given set of distinct integers.","solution":"def find_subsets(s): Returns all subsets of the given set of distinct integers. result = [] s = sorted(s) subset = [] def backtrack(start): result.append(subset[:]) for i in range(start, len(s)): subset.append(s[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"Write a python function to sort a list of integers in ascending order. You should not use the built-in sorted function or any sorting algorithm that has already been implemented in Python. You can implement any sorting algorithm of your choice. For this problem, use the Bubble Sort algorithm.","solution":"def bubble_sort(arr): Returns the sorted list of integers in ascending order using Bubble Sort. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to implement a stack using a list.","solution":"class Stack: def __init__(self): Initializes an empty stack. self.stack = [] def push(self, item): Pushes an item onto the stack. self.stack.append(item) def pop(self): Removes and returns the top item of the stack. Returns None if the stack is empty. if not self.is_empty(): return self.stack.pop() return None def peek(self): Returns the top item of the stack without removing it. Returns None if the stack is empty. if not self.is_empty(): return self.stack[-1] return None def is_empty(self): Checks if the stack is empty. return len(self.stack) == 0 def size(self): Returns the number of items in the stack. return len(self.stack)"},{"question":"Write a python function to remove the first occurrence of a number from a list. If the number is not in the list, return the original list.","solution":"def remove_first_occurrence(lst, number): Removes the first occurrence of \`number\` from the list \`lst\`. If \`number\` is not in \`lst\`, the original list is returned. if number in lst: lst.remove(number) return lst"},{"question":"Write a python function to solve the 8 puzzle problem using a breadth-first search algorithm.","solution":"from collections import deque # Representation of Puzzle Board (3x3) GOAL_STATE = (1, 2, 3, 4, 5, 6, 7, 8, 0) # Goal state represented in a 1D tuple with 0 as the blank space def get_possible_moves(state): Return a list of possible moves for the blank space. size = 3 # Since it's 8-puzzle, size is 3x3 zero_pos = state.index(0) moves = [] if zero_pos % size > 0: # can move left new_state = list(state) new_state[zero_pos], new_state[zero_pos - 1] = new_state[zero_pos - 1], new_state[zero_pos] moves.append(tuple(new_state)) if zero_pos % size < size - 1: # can move right new_state = list(state) new_state[zero_pos], new_state[zero_pos + 1] = new_state[zero_pos + 1], new_state[zero_pos] moves.append(tuple(new_state)) if zero_pos // size > 0: # can move up new_state = list(state) new_state[zero_pos], new_state[zero_pos - size] = new_state[zero_pos - size], new_state[zero_pos] moves.append(tuple(new_state)) if zero_pos // size < size - 1: # can move down new_state = list(state) new_state[zero_pos], new_state[zero_pos + size] = new_state[zero_pos + size], new_state[zero_pos] moves.append(tuple(new_state)) return moves def bfs_solve_8_puzzle(start_state): Solve the 8-puzzle using Breadth-First Search Algorithm. Return the sequence of moves from start_state to GOAL_STATE. if start_state == GOAL_STATE: return [] queue = deque([(start_state, [])]) visited = set() visited.add(start_state) while queue: current_state, path = queue.popleft() for move in get_possible_moves(current_state): if move not in visited: if move == GOAL_STATE: return path + [move] queue.append((move, path + [move])) visited.add(move) return None # no solution found"},{"question":"Write a python function to print the squares of numbers from 1 to n, where n is a positive integer. The function should take the integer n as an input and print each square on a new line.","solution":"def print_squares(n): Prints the squares of numbers from 1 to n, where n is a positive integer. Args: n (int): The range up to which squares of numbers need to be printed. for i in range(1, n + 1): print(i ** 2)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray of size 'k' in a given list of integers. How can you solve this problem in Python?","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a contiguous subarray of size 'k' in the given list 'arr'. :param arr: List[int] - The list of integers. :param k: int - size of the subarray. :return: int - The maximum sum of a contiguous subarray of size 'k'. if len(arr) < k: return None max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to capitalize the first letter of a string and make the rest of the letters lowercase.","solution":"def capitalize_first_letter(s): Capitalizes the first letter of a string and makes the rest of the letters lowercase. Args: s (str): Input string. Returns: str: String with the first letter capitalized and the rest in lowercase. if not s: return s return s[0].upper() + s[1:].lower()"},{"question":"Write a python function to find the second smallest number in a list of integers. Your function 'second_smallest' should accept a single list of integers as its input and return the second smallest element in the list. If the list does not contain enough unique elements to determine a second smallest number, your function should return None.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list has less than two unique numbers, return None. unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a python function to print all even numbers between 1 and a given number \`n\`. The function should take an integer \`n\` as input and print all even numbers between 2 and \`n\` (inclusive). If \`n\` is less than 2, the function should print \\"Invalid Input\\".","solution":"def print_even_numbers(n): Prints all even numbers between 2 and n (inclusive). If n < 2, prints \\"Invalid Input\\". if n < 2: print(\\"Invalid Input\\") return for i in range(2, n+1): if i % 2 == 0: print(i)"},{"question":"Write a python function to remove the nth element from a list. The function should return the modified list after removing the element. If the nth element does not exist, return the list unchanged.","solution":"def remove_nth_element(lst, n): Removes the nth element from the list. If n is out of bounds, the list remains unchanged. if 0 <= n < len(lst): del lst[n] return lst"},{"question":"Write a python function to calculate the sum of all numbers from 1 to n using a for loop. The function should also print the sum on the console. Additionally, the function should handle the case when n is less than 1 by raising a ValueError.","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n using a for loop. Prints the sum on the console. Raises ValueError if n is less than 1. if n < 1: raise ValueError(\\"n must be greater than or equal to 1.\\") total = 0 for i in range(1, n + 1): total += i print(total) return total"},{"question":"Write a python function to implement the Valid Anagram problem. The goal is to determine if two words are anagrams of each other.","solution":"def is_anagram(s1, s2): Returns True if s1 and s2 are anagrams of each other, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Write a python function to calculate the sum of all odd numbers between two given numbers (inclusive).","solution":"def sum_of_odds(a, b): Returns the sum of all odd numbers between a and b (inclusive). if a > b: a, b = b, a return sum(x for x in range(a, b + 1) if x % 2 != 0)"},{"question":"Write a python function to find the Fibonacci sequence up to a given number n. The function should return a list containing the sequence. If n is less than or equal to 0, the function should return an empty list.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to a given number n. If n is less than or equal to 0, returns an empty list. if n <= 0: return [] fib_seq = [0, 1] while True: next_value = fib_seq[-1] + fib_seq[-2] if next_value > n: break fib_seq.append(next_value) return fib_seq"},{"question":"Write a python function to read a CSV file and return a dictionary where the keys are the values in the first column of the CSV and the values are lists of the other values in the same row.","solution":"import csv def read_csv_as_dict(file_path): Reads a CSV file and returns a dictionary where the keys are the values in the first column and the values are lists of the other values in the same row. :param file_path: The path to the CSV file. :return: Dict where keys are first column values and values are lists of the other row values. result_dict = {} with open(file_path, mode='r', newline='') as file: csv_reader = csv.reader(file) for row in csv_reader: if row: key = row[0] value = row[1:] result_dict[key] = value return result_dict"},{"question":"Write a python function to find the sum of all numbers in a given list that are divisible by 3 and 5. The function should take a list of integers as input and return their sum. If the list is empty or contains no numbers divisible by both 3 and 5, the function should return 0.","solution":"def sum_of_numbers_divisible_by_3_and_5(numbers): Returns the sum of all numbers in the given list that are divisible by both 3 and 5. :param numbers: List of integers :return: Sum of numbers divisible by 3 and 5 return sum(x for x in numbers if x % 3 == 0 and x % 5 == 0)"},{"question":"Write a python function to calculate the sum of all even numbers in a nested dictionary.","solution":"def sum_even_numbers_in_dict(d): Recursively calculates the sum of all even numbers in a nested dictionary. :param d: The dictionary which may contain nested dictionaries :return: The sum of all even numbers total = 0 for value in d.values(): if isinstance(value, dict): total += sum_even_numbers_in_dict(value) elif isinstance(value, int) and value % 2 == 0: total += value return total"},{"question":"Write a python function to reverse a given array in-place without using any extra space. The function should handle arrays of any size.","solution":"def reverse_array_in_place(arr): Reverses the given array in place without using any extra space. Parameters: arr (list): The array to be reversed. Returns: list: The array reversed in place. left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a python function to identify the most expensive item in a list of items, each represented as a dictionary with keys 'name' and 'price'. The function should return the name of the most expensive item. If the list is empty, the function should return None.","solution":"def most_expensive_item(items): Identifies the most expensive item in a list of items. Parameters: items (list): A list of dictionaries, each with keys 'name' and 'price'. Returns: str: The name of the most expensive item, or None if the list is empty. if not items: return None # Find the item with the maximum price max_price_item = max(items, key=lambda item: item['price']) return max_price_item['name']"},{"question":"Write a python function to calculate vector addition and vector subtraction. The function should be able to handle vectors of any equal length and return a new vector that is the result of the operation.","solution":"def vector_addition(vec1, vec2): Returns the vector addition of vec1 and vec2. if len(vec1) != len(vec2): raise ValueError(\\"Vectors must be of the same length\\") return [a + b for a, b in zip(vec1, vec2)] def vector_subtraction(vec1, vec2): Returns the vector subtraction of vec1 and vec2. if len(vec1) != len(vec2): raise ValueError(\\"Vectors must be of the same length\\") return [a - b for a, b in zip(vec1, vec2)]"},{"question":"Write a python function to find the first non-repeating character in a given string, or return -1 if there is no such character.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in a given string s. If there is no such character, returns -1. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first non-repeating character for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a python function to check if a number is prime or not. Provide a step-by-step explanation of how your function works.","solution":"def is_prime(n): Returns True if the number n is a prime number, otherwise returns False. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Args: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to count the occurrences of each unique word in a given text.","solution":"from collections import defaultdict import re def count_occurrences(text): Returns a dictionary with the count of each unique word in the given text. # Normalize text by converting to lowercase and removing non-alphanumeric characters text = re.sub(r'[^a-zA-Z0-9s]', '', text).lower() words = text.split() word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Write a python function to find the intersection of two arrays efficiently.","solution":"def intersect(arr1, arr2): Returns the intersection of two arrays. Parameters: arr1 (list): First array. arr2 (list): Second array. Returns: list: A list containing the intersection of the two arrays. set1 = set(arr1) set2 = set(arr2) # The intersection of two sets intersection = set1 & set2 return list(intersection)"},{"question":"Write a python function to check if a given string is a palindrome It should return true if the string is a palindrome and false otherwise.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. s = s.replace(\\" \\", \\"\\").lower() # Remove spaces and convert to lower case return s == s[::-1]"},{"question":"Write a python function to implement the quick sort algorithm on an array of integers.","solution":"def quick_sort(arr): Implements the quick sort algorithm to sort an array of integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to replace all the lower case letters 'a' to 'y' in a string with corresponding upper case letters, and maintain other characters unchanged.","solution":"def replace_lowercase_with_uppercase(s): Replaces all the lower case letters from 'a' to 'y' in the given string with corresponding upper case letters, and maintains other characters unchanged. result = [] for char in s: if 'a' <= char <= 'y': result.append(char.upper()) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find the sum of the squares of the digits of a number. For example, the number 23, the sum of the squares of its digits would be calculated as (2^2 + 3^2 = 4 + 9 = 13).","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of a number \`n\`. return sum(int(digit) ** 2 for digit in str(abs(n)))"},{"question":"Write a python function to determine if a given number is a perfect power. A perfect power is a number that can be expressed as an integer power of another integer. For example, 8 is a perfect power because it can be expressed as 2^3. The function should return True if the number is a perfect power, and False otherwise. It should handle both positive and negative numbers, considering that negative numbers cannot be perfect powers (except -1 and -8).","solution":"def is_perfect_power(n): Determines if a number is a perfect power. A perfect power is a number that can be expressed as m^k where m and k are integers and k > 1. Parameters: n (int): The number to be checked. Returns: bool: True if the number is a perfect power, False otherwise. if n == 1: return True if n < 0: return n in (-1, -8) for base in range(2, int(n**0.5) + 1): power = base while power <= n: power *= base if power == n: return True return False"},{"question":"Write a python function to find the occurrence of even numbers in a list. The function should also find the occurrence of odd numbers. Count the frequency of each digit (0-9) in the even and odd numbers separately.","solution":"def count_even_odd_occurrences(numbers): Returns the occurrence of even and odd numbers along with the frequency of each digit (0-9) in the even and odd numbers. even_counts = {str(i): 0 for i in range(10)} odd_counts = {str(i): 0 for i in range(10)} even_occurrences = 0 odd_occurrences = 0 for number in numbers: if number % 2 == 0: even_occurrences += 1 for digit in str(abs(number)): even_counts[digit] += 1 else: odd_occurrences += 1 for digit in str(abs(number)): odd_counts[digit] += 1 return even_occurrences, odd_occurrences, even_counts, odd_counts"},{"question":"Write a python function to calculate the Mean Absolute Error (MAE) between two lists of numbers. The function should handle lists of different lengths by only considering the elements up to the length of the shorter list.","solution":"def mean_absolute_error(list1, list2): Calculates the Mean Absolute Error (MAE) between two lists of numbers. Only considers elements up to the length of the shorter list. Parameters: list1 (list of float): The first list of numbers. list2 (list of float): The second list of numbers. Returns: float: The mean absolute error. # Find the minimum length of the two lists min_length = min(len(list1), len(list2)) # Calculate the absolute errors for the overlapping elements absolute_errors = [abs(list1[i] - list2[i]) for i in range(min_length)] # Calculate and return the mean of the absolute errors return sum(absolute_errors) / min_length"},{"question":"Write a python function to perform a matrix multiplication between two 2D arrays. The function should handle cases where the number of columns in the first array does not match the number of rows in the second array by raising a ValueError with a descriptive error message.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. :param A: 2D list of numbers (first matrix) :param B: 2D list of numbers (second matrix) :return: The resulting matrix after multiplication :raises ValueError: If the number of columns in A does not equal the number of rows in B # Get the dimensions of the matrices num_rows_A, num_cols_A = len(A), len(A[0]) num_rows_B, num_cols_B = len(B), len(B[0]) # Check if the number of columns in A matches the number of rows in B if num_cols_A != num_rows_B: raise ValueError(\\"Number of columns in A must match the number of rows in B for multiplication.\\") # Create the resulting matrix and fill with zeros result = [[0] * num_cols_B for _ in range(num_rows_A)] # Perform the multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to generate the first n Fibonacci numbers using iteration.","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers using iteration. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Write a python function to calculate the factorial of a number: def factorial(n)","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to print the middle character(s) of a string. If the string's length is even, print the two middle characters. If the string's length is odd, print the single middle character.","solution":"def middle_characters(s): Returns the middle character(s) of the string. If the string's length is even, returns the two middle characters. If the string's length is odd, returns the single middle character. n = len(s) if n % 2 == 0: # If even, return the middle two characters return s[n//2 - 1:n//2 + 1] else: # If odd, return the middle character return s[n//2]"},{"question":"Write a python function to sort a list of integers using the counting sort algorithm.","solution":"def counting_sort(arr): Sorts a list of integers using the counting sort algorithm. if not arr: return [] max_val = max(arr) min_val = min(arr) range_of_elements = max_val - min_val + 1 count_arr = [0] * range_of_elements output_arr = [0] * len(arr) for number in arr: count_arr[number - min_val] += 1 for i in range(1, len(count_arr)): count_arr[i] += count_arr[i - 1] for i in range(len(arr) - 1, -1, -1): output_arr[count_arr[arr[i] - min_val] - 1] = arr[i] count_arr[arr[i] - min_val] -= 1 return output_arr"},{"question":"Write a python function to generate a list of all prime numbers below a given number n.","solution":"def primes_below(n): Returns a list of all prime numbers below the given number n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to get the current date in the format \\"YYYY-MM-DD\\".","solution":"from datetime import datetime def get_current_date(): Returns the current date in the format \\"YYYY-MM-DD\\". return datetime.now().strftime(\\"%Y-%m-%d\\")"},{"question":"Write a python function to generate all combinations of a given list of numbers.","solution":"from itertools import combinations def generate_combinations(numbers): Returns a list containing all combinations of the given list of numbers. Each combination is represented as a tuple. all_combinations = [] for r in range(1, len(numbers) + 1): all_combinations.extend(combinations(numbers, r)) return all_combinations"},{"question":"Write a python function to remove null characters from a string.","solution":"def remove_null_characters(s): Removes all null characters from the input string. Args: s (str): Input string which may contain null characters. Returns: str: String with all null characters removed. return s.replace('x00', '')"},{"question":"Write a python function to perform a binary search on a sorted list of integers to find a target value. The function should return the index of the target in the list if found, or -1 if not found.","solution":"def binary_search(arr, target): Performs a binary search on a sorted list of integers to find a target value. Args: arr (list): A sorted list of integers. target (int): The target integer to find. Returns: int: The index of the target in the list if found, or -1 if not found. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the number of times a substring appears in a string. My string is \\"hello world\\" and the substring is \\"world\\".","solution":"def count_substring(main_string, sub_string): Returns the number of times the sub_string appears in the main_string. return main_string.count(sub_string)"},{"question":"Write a python function to sort a list of tuples by the second item in each tuple. For example, given the list \`(1,2), (3,1), (5,0)\`. The output should be \`[(5, 0), (3, 1), (1, 2)]\`.","solution":"def sort_tuples_by_second_item(tuples_list): Sorts a list of tuples by the second item in each tuple. Parameters: tuples_list (list): A list of tuples to be sorted. Returns: list: A list of tuples sorted by the second item. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to find the second largest number in a list. The code should be written in Python 3.x. The function should return the second largest number if it exists, otherwise, it should return a message indicating that there is no second largest number.","solution":"def second_largest(numbers): Finds the second largest number in a list. If the list has fewer than 2 distinct elements, returns a message indicating this. if len(numbers) < 2: return \\"List does not have enough elements\\" # Convert to a set to remove duplicates and then back to a sorted list unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return \\"List does not have a second largest element\\" unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a python function to find the closest prime number to a given number n. If there are two prime numbers equally close to n, return the smaller one.","solution":"import sympy def closest_prime(n): Finds the closest prime number to the given number n. If there are two primes equally close, return the smaller one. if n < 2: return 2 # Check if n itself is prime if sympy.isprime(n): return n # Initialize search for close primes lower = n - 1 upper = n + 1 while True: if lower > 1 and sympy.isprime(lower): return lower if sympy.isprime(upper): return upper lower -= 1 upper += 1"},{"question":"Write a python function to find duplicates in a list of tuples. A duplicate tuple is defined as a tuple that is already in the list. The function should return a list of tuples that are duplicates.","solution":"def find_duplicates(tuples_list): Returns a list of duplicate tuples in the input list of tuples. seen = set() duplicates = [] for tup in tuples_list: if tup in seen: duplicates.append(tup) else: seen.add(tup) return duplicates"},{"question":"Write a python function to count the number of occurrences of a substring in a string. You should count overlapping occurrences as well. For example, \\"aaa\\" should return 2 for the string \\"aaaa\\".","solution":"def count_overlapping_occurrences(string, substring): Counts the number of overlapping occurrences of 'substring' in 'string'. Params: - string (str): The string to search within. - substring (str): The substring to search for. Returns: int: The count of overlapping occurrences. count = start = 0 while True: start = string.find(substring, start) if start == -1: break count += 1 start += 1 # Move just one character forward for overlapping search return count"},{"question":"Write a python function to calculate the sum of all even numbers in a given list, considering only the unique elements.","solution":"def sum_of_unique_evens(lst): Returns the sum of all unique even numbers in the given list. unique_numbers = set(lst) # Remove duplicates sum_evens = sum(num for num in unique_numbers if num % 2 == 0) return sum_evens"},{"question":"Write a python function to validate a MAC address.","solution":"import re def validate_mac_address(mac: str) -> bool: Validates a MAC address. A valid MAC address must be in the format 'HH:HH:HH:HH:HH:HH' where H is a hexadecimal digit (0-9, A-F). mac_pattern = re.compile(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})') return bool(mac_pattern.match(mac))"},{"question":"Write a python function to convert a given time in 24-hour format to a 12-hour format with AM/PM indication. For example, if the input time is \\"14:30\\", the output should be \\"2:30 PM\\".","solution":"def convert_to_12_hour_format(time_24): Converts time from 24-hour format to 12-hour format with AM/PM. Args: time_24 (str): Time in 24-hour format (e.g., \\"14:30\\"). Returns: str: Time in 12-hour format with AM/PM (e.g., \\"2:30 PM\\"). hours, minutes = map(int, time_24.split(':')) period = \\"AM\\" if hours == 0: hours = 12 elif hours == 12: period = \\"PM\\" elif hours > 12: hours -= 12 period = \\"PM\\" return f\\"{hours}:{minutes:02d} {period}\\""},{"question":"Write a python function to reverse a stack.","solution":"def reverse_stack(stack): Reverses the elements in a stack. Parameters: stack (list): The stack to be reversed. Returns: list: The reversed stack. return stack[::-1]"},{"question":"Write a python function to find the majority element in a list of numbers. A majority element is one that appears more than n/2 times, where n is the size of the list. If there is no majority element, the function should return None.","solution":"def majority_element(nums): Finds the majority element in a list of numbers. A majority element is one that appears more than n/2 times, where n is the size of the list. If there is no majority element, return None. :param nums: List of integers :return: The majority element or None candidate = None count = 0 n = len(nums) # First pass: Find a candidate using Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Second pass: Verify the candidate if nums.count(candidate) > n // 2: return candidate else: return None"},{"question":"Write a python function to implement a classic \\"Fibonacci\\" sequence. The function should take a single integer \`n\` and return the \`n\`-th element of the Fibonacci sequence. Additionally, the function should handle the case where \`n\` is negative and return \\"Invalid input\\" for negative numbers.","solution":"def fibonacci(n): Returns the n-th element of the Fibonacci sequence. If n is negative, returns \\"Invalid input\\". if n < 0: return \\"Invalid input\\" elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to SORT LISTS IN ASCENDING ORDER based on a SORTING KEY.","solution":"def sort_list(lst, key=lambda x: x): Sorts the input list in ascending order based on the provided sorting key. Parameters: lst (list): The list to be sorted. key (function, optional): A function that serves as a key for the sort comparison. Defaults to the identity function. Returns: list: The sorted list. return sorted(lst, key=key)"},{"question":"Write a python function to count the number of capitalized letters in a string. Can you also explain the code you've written?","solution":"def count_capitalized_letters(s): Returns the count of capitalized letters in the string s. Parameters: s (str): The input string Returns: int: The number of capitalized letters in the string count = sum(1 for char in s if 'A' <= char <= 'Z') return count"},{"question":"Write a python function to find the sum of the absolute values of a list of numbers.","solution":"def sum_of_absolute_values(numbers): Returns the sum of the absolute values of the numbers in the list. Parameters: numbers (list): A list of numbers. Returns: int: The sum of the absolute values of the list of numbers. return sum(abs(number) for number in numbers)"},{"question":"Write a python function to solve the following problem: Add two numbers represented by two non-empty linked lists. The digits are stored in reverse order, and each node contains a single digit. Add the two numbers and return the result as a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): dummy_head = ListNode(0) current, carry = dummy_head, 0 while l1 is not None or l2 is not None: x = l1.val if l1 is not None else 0 y = l2.val if l2 is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Write a python function to detect if any given list contains a cyclic structure. How would you define a cyclic structure in this context?","solution":"def has_cyclic_structure(lst): Detects if the given list contains a cyclic structure. A cyclic structure implies the list contains a recurring sequence of elements. Example: [1, 2, 3, 1, 2, 3] -> True [1, 2, 3, 4, 5, 1, 2, 3] -> False [1, 2, 1, 2, 1, 2] -> True [] -> False [1] -> False [1, 2, 3, 4, 1, 2] -> False Arguments: lst -- A list of any elements Returns: True if the list contains a cyclic structure, False otherwise. n = len(lst) if n < 2: return False for cycle_length in range(1, n // 2 + 1): if n % cycle_length == 0: cycle = lst[:cycle_length] if cycle * (n // cycle_length) == lst: return True return False"},{"question":"Write a python function to write the output of a list of string to a file. Each string item should be written to a new line in the file. If the list is empty, the file should not be created or modified.","solution":"def write_strings_to_file(strings, filename): Writes the strings in the list 'strings' to a file specified by 'filename'. Each string in the list is written to a new line in the file. If the list is empty, the file is neither created nor modified. Parameters: strings (list): List of strings to be written. filename (str): The name of the file to write the strings to. if not strings: return # Do nothing if the list is empty with open(filename, 'w') as file: for string in strings: file.write(f\\"{string}n\\")"},{"question":"Write a python function to find the minimum number of coins required to make a given sum 'V'. We can use any number of coins of given denominations. The coin denominations are [1, 3, 4].","solution":"def min_coins(V): Returns the minimum number of coins required to make a given sum V using denominations of 1, 3, and 4. # Initialize an array to store the minimum number of coins for each value upto V min_coins_needed = [float('inf')] * (V + 1) # Base case: 0 coins needed to make sum 0 min_coins_needed[0] = 0 # Iterate through all values from 1 to V to fill the min_coins_needed array for i in range(1, V + 1): for coin in [1, 3, 4]: if i >= coin: min_coins_needed[i] = min(min_coins_needed[i], min_coins_needed[i - coin] + 1) return min_coins_needed[V]"},{"question":"Write a python function to return the smallest integer in a list. For example, if the list is [1, 3, 5, 2, -4, 8], the function should return -4. If the list is empty, the function should return None.","solution":"def smallest_integer(lst): Returns the smallest integer in the list. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a python function to find the maximum sum of a subarray of a given array. This subarray should have at least one element. You need to ensure your solution is efficient, ideally with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray in the given array nums. # Initialize the current sum and maximum sum max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: # Update the current sum by including the current number current_sum = max(num, current_sum + num) # Update the maximum sum if the current sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to remove all the vowels from a given string. Please make sure to include a proper docstring and an example usage in the comment.","solution":"def remove_vowels(s): Removes all vowels from the given string. Parameters: s (str): The input string. Returns: str: The string with all vowels removed. Example usage: >>> remove_vowels(\\"hello world\\") 'hll wrld' vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"Write a python function to find the minimum and maximum elements in a list. You should return a tuple where the first element is the minimum and the second element is the maximum.","solution":"def find_min_max(lst): Returns a tuple where the first element is the minimum and the second element is the maximum element in the list. if not lst: raise ValueError(\\"List is empty\\") min_element = min(lst) max_element = max(lst) return (min_element, max_element)"},{"question":"Write a python function to remove a string from a list that matches a certain condition. For example, remove all strings that contain the word \\"apple\\" from a list.","solution":"def remove_strings_containing_word(lst, word): Removes all strings from lst that contain the specified word. Parameters: lst (list of str): The list of strings to be filtered. word (str): The word to check for in each string. Returns: list of str: The filtered list with strings containing the word removed. return [string for string in lst if word not in string]"},{"question":"Write a python function to divide two numbers and return the quotient.","solution":"def divide(a, b): Returns the quotient of a divided by b. Parameters: a (float): the numerator b (float): the denominator Returns: float: The quotient of a divided by b. Raises: ValueError: If b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b"},{"question":"Write a python function to return the nth row of Pascal's triangle.","solution":"def get_pascals_triangle_row(n): Returns the nth row of Pascal's triangle. Parameters: n (int): The index of the row to return (0-indexed). Returns: list[int]: The nth row of Pascal's triangle. row = [1] if n == 0: return row for k in range(1, n + 1): row.append(row[-1] * (n - k + 1) // k) return row"},{"question":"Write a python function to merge two sorted lists into one sorted list using the merge sort algorithm. The function should take two lists as input and return a single list that is sorted and contains all elements from both input lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. :param list1: A list of sorted elements. :param list2: Another list of sorted elements. :return: A single sorted list containing all elements from list1 and list2. merged_list = [] i = j = 0 # Compare elements from both lists and merge them in sorted order while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, add them to the merged list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, add them to the merged list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to print all the elements of a list.","solution":"def print_elements(lst): Prints each element of the list on a new line. for element in lst: print(element)"},{"question":"Write a python function to check if a string is a palindrome without using any built-in functions or additional data structures.","solution":"def is_palindrome(s): Checks if a string is a palindrome without using any built-in functions or additional data structures. :param s: Input string :return: True if the string is a palindrome, False otherwise left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a python function to solve the N-Queens problem using backtracking.","solution":"def solveNQueens(n): def is_valid(board, row, col): for i in range(row): if board[i][col] == 'Q': return False if col - (row - i) >= 0 and board[i][col - (row - i)] == 'Q': return False if col + (row - i) < n and board[i][col + (row - i)] == 'Q': return False return True def solve(board, row): if row == n: results.append([\\"\\".join(row) for row in board]) return for col in range(n): if is_valid(board, row, col): board[row][col] = 'Q' solve(board, row + 1) board[row][col] = '.' results = [] board = [[\\".\\" for _ in range(n)] for _ in range(n)] solve(board, 0) return results"},{"question":"Write a python function to generate all possible combinations of the numbers from 0 to 9 without repetition and print them.","solution":"from itertools import permutations def generate_combinations(): Generate all possible combinations of the numbers from 0 to 9 without repetition. return list(permutations(range(10)))"},{"question":"Write a python function to generate the first k Fibonacci numbers. The function should return a list containing the Fibonacci sequence up to the k-th number.","solution":"def generate_fibonacci(k): Generates the first k Fibonacci numbers. Parameters: k (int): The number of Fibonacci numbers to generate. Returns: List[int]: A list containing the first k Fibonacci numbers. if k <= 0: return [] fibonacci_sequence = [0, 1] for _ in range(2, k): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence[:k]"},{"question":"Write a python function to sort an array of integers such that the even numbers are sorted and placed before the odd numbers without disturbing the relative order of the even and odd numbers.","solution":"def sort_even_before_odd(arr): Sorts an array such that the even numbers appear before the odd numbers, while preserving the relative order of the even and odd numbers. Args: arr (list): The list of integers to be sorted. Returns: list: A new list with even numbers sorted before odd numbers. even_nums = [num for num in arr if num % 2 == 0] odd_nums = [num for num in arr if num % 2 != 0] return even_nums + odd_nums"},{"question":"Write a python function to find all the even numbers in a list. The function should take a list of integers as input and return a new list containing only the even numbers from the input list.","solution":"def find_even_numbers(numbers): Returns a list containing only the even numbers from the input list. Parameters: numbers (list of int): A list of integers. Returns: list of int: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a python function to find the first character that appears only once in a given string. If there is no such character, return \\"_\\".","solution":"def first_non_repeating_char(s): Finds the first character in the string s that appears only once. Returns the character or \\"_\\" if there is no such character. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"_\\""},{"question":"Write a python function to find the number of elements in a list that are multiples of 3 or 5.","solution":"def count_multiples_of_3_or_5(lst): Returns the number of elements in the list that are multiples of 3 or 5. Args: lst (list): A list of integers. Returns: int: The count of elements that are multiples of 3 or 5. return sum(1 for x in lst if x % 3 == 0 or x % 5 == 0)"},{"question":"Write a python function to reverse a string without using any standard reverse function or slicing. Additionally, make sure the function handles any type of input, including integers, but raises an error if the input is not a string or integer.","solution":"def reverse_input(input_value): Reverses the given input if it is a string or integer. Raises a ValueError if the input is not a string or integer. if isinstance(input_value, (str, int)): input_str = str(input_value) reversed_str = '' for char in input_str: reversed_str = char + reversed_str return reversed_str else: raise ValueError(\\"Input must be a string or integer.\\")"},{"question":"Write a python function to extract the value of a specific key from a nested dictionary. The function should take the dictionary and the key as inputs and return the value associated with that key at any level of nesting.","solution":"def extract_value(data, key): Extract the value of a specific key from a nested dictionary. Parameters: data (dict): The nested dictionary to search. key (str): The key whose value needs to be extracted. Returns: value: The value associated with the key if found, otherwise None. if isinstance(data, dict): if key in data: return data[key] for k, v in data.items(): result = extract_value(v, key) if result is not None: return result elif isinstance(data, list): for item in data: result = extract_value(item, key) if result is not None: return result return None"},{"question":"Write a python function to print the Fibonacci series up to the 10th term.","solution":"def fibonacci_series(n): Returns the Fibonacci series up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] series = [0, 1] for i in range(2, n): next_term = series[-1] + series[-2] series.append(next_term) return series # Print the Fibonacci series up to the 10th term print(fibonacci_series(10))"},{"question":"Write a python function to find the minimum spanning tree (MST) using Prim's algorithm on an undirected weighted graph represented as an adjacency list.","solution":"import heapq def prim_mst(graph): Returns the Minimum Spanning Tree (MST) of an undirected weighted graph using Prim's algorithm. Parameters: - graph: dict, adjacency list where keys are nodes and values are lists of tuples (neighbor, weight) Returns: - mst: list, edges in the MST, each edge represented as a tuple (u, v, weight) if not graph: return [] # Choose an arbitrary starting point (we'll start with the first key in the graph) start_node = next(iter(graph)) visited = set() mst = [] min_heap = [(0, None, start_node)] # (weight, from_node, to_node) while min_heap: weight, from_node, to_node = heapq.heappop(min_heap) if to_node in visited: continue visited.add(to_node) if from_node is not None: mst.append((from_node, to_node, weight)) for neighbor, w in graph[to_node]: if neighbor not in visited: heapq.heappush(min_heap, (w, to_node, neighbor)) return mst"},{"question":"Write a python function to implement the quick sort algorithm. The function should take two parameters: a list of integers to be sorted and the pivot index. The function should return the sorted list. If the pivot index is not provided, the function should choose the last element as the pivot.","solution":"def quick_sort(arr, pivot_index=None): Quick sort function that sorts a list of integers. Parameters: arr (list): The list of integers to be sorted. pivot_index (int): The index of the pivot element. If None, the last element is used as pivot. Returns: list: The sorted list. if len(arr) <= 1: return arr if pivot_index is None: pivot_index = len(arr) - 1 pivot = arr[pivot_index] left = [] right = [] for i in range(len(arr)): if i == pivot_index: continue if arr[i] <= pivot: left.append(arr[i]) else: right.append(arr[i]) sorted_left = quick_sort(left) sorted_right = quick_sort(right) return sorted_left + [pivot] + sorted_right"},{"question":"Write a python function to convert a given integer to a string. You can't use the built-in \`str()\` function for this task. To achieve this, you need to create the string representation manually. Also, ensure your function handles negative numbers correctly.","solution":"def int_to_string(n): Converts an integer to its string representation without using the built-in str() function. if n == 0: return \\"0\\" is_negative = n < 0 if is_negative: n = -n chars = [] while n > 0: chars.append(chr((n % 10) + ord('0'))) n //= 10 if is_negative: chars.append('-') return ''.join(reversed(chars))"},{"question":"Write a python function to find the maximum product of two elements in a list using Kadane's algorithm.","solution":"def max_product(arr): Returns the maximum product of two elements in the list. if len(arr) < 2: return None arr.sort() product1 = arr[-1] * arr[-2] product2 = arr[0] * arr[1] return max(product1, product2)"},{"question":"Write a python function to count the number of words in a given sentence that start with a specific letter (case-insensitive). The function should take two parameters: the sentence and the letter. It should return the count of words starting with that letter.","solution":"def count_words_starting_with(sentence, letter): Returns the count of words in the sentence that start with the specified letter (case-insensitive). :param sentence: The sentence in which to count the words. :param letter: The letter that words should start with to be counted. :return: The count of words starting with the specified letter. words = sentence.split() letter = letter.lower() count = sum(1 for word in words if word.lower().startswith(letter)) return count"},{"question":"Write a python function to generate a fibonacci series upto 50.","solution":"def fibonacci_series_upto_50(): Generates a Fibonacci series of numbers up to 50. series = [0, 1] while True: next_value = series[-1] + series[-2] if next_value >= 50: break series.append(next_value) return series"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given number \`n\`. The function should also count how many of these Fibonacci numbers are even.","solution":"def generate_fibonacci(n): Generate a list of Fibonacci numbers up to a given number n, and count how many of these numbers are even. Parameters: n (int): The upper limit for Fibonacci numbers. Returns: tuple: A tuple containing the list of Fibonacci numbers and the count of even Fibonacci numbers. fib_list = [] a, b = 0, 1 even_count = 0 while a <= n: fib_list.append(a) if a % 2 == 0: even_count += 1 a, b = b, a + b return (fib_list, even_count)"},{"question":"Write a python function to Sum the first N prime numbers. Here N is an input to the function.","solution":"def is_prime(num): Returns True if the given number is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_first_n_primes(N): Returns the sum of the first N prime numbers. count = 0 num = 2 total_sum = 0 while count < N: if is_prime(num): total_sum += num count += 1 num += 1 return total_sum"},{"question":"Write a python function to check if a given string is a valid notation string for a lambda expression. A lambda expression in Python is defined as a function defined using the keyword \\"lambda\\" and can take one or more parameters but can only have one expression. A notation string for a lambda expression will be in the form of \\"lambda x: expression\\" or \\"lambda x, y: expression\\". It does not need to be a valid lambda function in Python syntax, but it should adhere to the given format.","solution":"def is_valid_lambda_notation(s): Returns True if the notation string s is a valid lambda expression notation in the form \\"lambda x: expression\\" or \\"lambda x, y: expression\\", otherwise False. # Check if the string starts with \\"lambda \\" if not s.startswith('lambda '): return False # Split the string by ':' parts = s.split(':') # There should be exactly one ':' in the string if len(parts) != 2: return False # Extract the parameters part (between \\"lambda \\" and \\":\\") params_part = parts[0][7:].strip() # Parameters part should not be empty if not params_part: return False # Check if parameters are valid identifiers (can include commas for multiple parameters) params = params_part.split(',') for param in params: if not param.strip().isidentifier(): return False # Ensure that there is an expression part after ':' expression_part = parts[1].strip() if not expression_part: return False return True"},{"question":"Write a python function to solve this problem: \\"A string S is a string that consists of only 'A' or 'B'. In one move, you can swap any two characters in the string. What is the minimum number of moves to make the string alternate, i.e., to make it so that the characters alternate between 'A' and 'B'? For example, 'ABA' is an alternating string, but 'AA' is not.\\"","solution":"def min_moves_to_alternate(S): Returns the minimum number of moves to make the string alternate between 'A' and 'B'. if not S: return 0 n = len(S) count1 = 0 # Count of misplaced characters if the string should be \\"ABAB...\\" count2 = 0 # Count of misplaced characters if the string should be \\"BABA...\\" for i in range(n): if i % 2 == 0: if S[i] != 'A': count1 += 1 if S[i] != 'B': count2 += 1 else: if S[i] != 'B': count1 += 1 if S[i] != 'A': count2 += 1 return min(count1, count2)"},{"question":"Write a python function to generate the nth Fibonacci number efficiently. Hypothesis: nth Fibonacci number = nth number in the sequence 0, 1, 1, 2, 3, 5, 8, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number efficiently. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to reverse each string in a list of strings. How would you ensure the function works correctly?","solution":"def reverse_strings_in_list(strings): Reverses each string in a list of strings. Args: strings (list of str): The list of strings to reverse. Returns: list of str: The list of reversed strings. return [s[::-1] for s in strings]"},{"question":"Write a python function to convert an integer to its hexadecimal representation without using Python's in-built \`hex()\` function or any other in-built function for direct conversion. The hexadecimal should be represented as a string and should include the '0x' prefix.","solution":"def int_to_hex(num): Converts an integer to its hexadecimal representation. The return value is a string that includes the '0x' prefix. if num == 0: return '0x0' hex_digits = \\"0123456789abcdef\\" result = \\"\\" is_negative = num < 0 if is_negative: num = num + (1 << 32) # Convert to 2's complement for negative numbers while num > 0: remainder = num % 16 result = hex_digits[remainder] + result num = num // 16 return '0x' + result"},{"question":"Write a python function to sort a list in-place without using any extra space and sort the list in ascending order. Use the Bubble Sort algorithm for this purpose.","solution":"def bubble_sort(arr): Sorts the list arr in place using bubble sort algorithm in ascending order. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]"},{"question":"Write a python function to find the minimum number of coins needed to make up a given amount. The function should return the minimum number of coins. If it's not possible to make up the amount with the given coins, the function should return -1. You can assume that you have an infinite supply of each coin type.","solution":"def coin_change(coins, amount): Returns the minimum number of coins needed to make up the given amount. If it's not possible to make up the amount, returns -1. :param coins: List[int] - list of coin values :param amount: int - the total amount to make up :return: int - minimum number of coins or -1 if not possible # Initialize dp array where dp[i] will be storing the minimum number of coins # required for amount i. dp = [float('inf')] * (amount + 1) # Base case: No coins needed to make amount 0 dp[0] = 0 # Compute minimum coins required for all amounts from 1 to amount for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to solve the following problem: Given an array of integers, find the max absolute difference between any two elements in the array. You can use only one traversal of the array and constant space.","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between any two elements in the array. if not arr or len(arr) == 1: return 0 min_val = float('inf') max_val = float('-inf') for num in arr: if num < min_val: min_val = num if num > max_val: max_val = num return abs(max_val - min_val)"},{"question":"Write a python function to convert degrees Celsius to degrees Fahrenheit.","solution":"def celsius_to_fahrenheit(celsius): Converts degrees Celsius to degrees Fahrenheit. :param celsius: temperature in degrees Celsius :return: temperature in degrees Fahrenheit return (celsius * 9/5) + 32"},{"question":"Write a python function to sort a list of strings in descending order using comparison. Write a test function to test the sort function.","solution":"def sort_strings_descending(strings): Sort a list of strings in descending order using comparison. Parameters: strings (list): List of strings to sort. Returns: list: Sorted list of strings in descending order. return sorted(strings, reverse=True)"},{"question":"Write a python function to implement a depth-first search (DFS) algorithm on a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_binary_tree(root): Perform a depth-first search (DFS) on a binary tree and return the values in DFS order. :param root: TreeNode, the root of the binary tree :return: List[int], the values of the nodes in DFS order def dfs(node, result): if node is not None: result.append(node.value) # Preorder traversal (Root, Left, Right) dfs(node.left, result) dfs(node.right, result) result = [] dfs(root, result) return result"},{"question":"Write a python function to calculate factorial","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to compute the factorial of a number without using recursion. You should explain each step of your code.","solution":"def factorial(n): Computes the factorial of a non-negative integer n without using recursion. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: The factorial of the given number n. # Initialize result to 1, which is the factorial of 0 result = 1 # Start a loop from 1 to n (inclusive) for i in range(1, n + 1): # Multiply the result by the current number i result *= i # Return the final computed factorial return result"},{"question":"Write a python function to find the most frequently occurring element in an array. If there are multiple elements with the same highest frequency, return the smallest one. If there are no elements, return -1.","solution":"from collections import Counter def most_frequent_element(arr): Returns the most frequently occurring element in an array. If there are multiple elements with the same highest frequency, return the smallest one. If there are no elements, return -1. if not arr: return -1 count = Counter(arr) max_freq = max(count.values()) candidates = [key for key, value in count.items() if value == max_freq] return min(candidates)"},{"question":"Write a python function to find a subarray within a given array that has the maximum product. Your function should return the maximum product found.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray within the given list of numbers. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a python function to determine the Kth Fibonacci number using an iterative approach.","solution":"def kth_fibonacci(k): Returns the Kth Fibonacci number using an iterative approach. if k <= 0: raise ValueError(\\"k should be a positive integer\\") if k == 1: return 0 elif k == 2: return 1 a, b = 0, 1 for _ in range(3, k + 1): a, b = b, a + b return b"},{"question":"Write a python function to solve a combinatorial problem. The function should calculate the number of different ways to choose k items from a set of n items, without regard to the order of selection. This is commonly known as \\"n choose k\\" or the binomial coefficient.","solution":"def binomial_coefficient(n, k): Returns the binomial coefficient \\"n choose k\\", which is the number of ways to choose k items from a set of n items without regard to the order of selection. if k < 0 or k > n: return 0 if k == 0 or k == n: return 1 # Calculating n! / (k! * (n-k)!) k = min(k, n - k) # Take advantage of symmetry c = 1 for i in range(k): c = c * (n - i) // (i + 1) return c"},{"question":"Write a python function to insert text \\"Hello!\\" at the beginning of each string in a Python list.","solution":"def add_hello(strings): Prepend 'Hello!' to each string in the list. Parameters: strings (list of str): A list of strings. Returns: list of str: A list with 'Hello!' prepended to each string in the original list. return [\\"Hello! \\" + s for s in strings]"},{"question":"Write a python function to get the maximum value from a list of numbers. You can use the built-in \`max\` function to assist you in this task.","solution":"def get_max_value(numbers): Returns the maximum value from a list of numbers. :param numbers: List of numerical values :return: Maximum value present in the list if not numbers: raise ValueError(\\"Cannot get the maximum value from an empty list\\") return max(numbers)"},{"question":"Write a python function to find the maximum profit from a stock with the transaction fee. You are given a list of stock prices \`prices\` and an integer \`fee\`. You can complete as many transactions as you like, but you need to pay the transaction fee for each transaction. The profit is calculated as the total gains from selling the stock after paying the fee.","solution":"def max_profit_with_fee(prices, fee): n = len(prices) if n <= 1: return 0 cash = 0 hold = -prices[0] for i in range(1, n): cash = max(cash, hold + prices[i] - fee) hold = max(hold, cash - prices[i]) return cash"},{"question":"Write a python function to solve a given Sudoku puzzle. The Sudoku puzzle is provided as a 9x9 grid of integers, where 0 represents empty cells that need to be filled.","solution":"def is_valid(board, row, col, num): for x in range(9): if board[row][x] == num: return False for x in range(9): if board[x][col] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): empty_position = find_empty_location(board) if not empty_position: return True row, col = empty_position for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_location(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None"},{"question":"Write a python function to find the maximum subarray sum using Kadane's algorithm. In addition, implement a helper function to test the correctness of your solution.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to generate a Fibonacci number at a given position in the sequence. The sequence starts with 0 and 1.","solution":"def fibonacci(n): Returns the Fibonacci number at the given position 'n' in the sequence. The sequence starts with 0 and 1. if n < 0: raise ValueError(\\"Position cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"Write a python function to add two matrices. The function should take two input matrices as arguments and should return a result matrix which is the sum of the two input matrices. Ensure that the function handles matrices of different sizes by returning a message indicating that the operation cannot be performed.","solution":"def add_matrices(matrix1, matrix2): Adds two matrices element-wise. If matrices are not the same size, returns an error message. Args: matrix1 (list of list of ints): The first matrix. matrix2 (list of list of ints): The second matrix. Returns: list of list of ints: The resulting matrix after addition. str: An error message if matrices are not the same size. # Check if dimensions match if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)): return \\"Matrices are not the same size, cannot perform addition.\\" # Compute element-wise sum result_matrix = [ [val1 + val2 for val1, val2 in zip(row1, row2)] for row1, row2 in zip(matrix1, matrix2) ] return result_matrix"},{"question":"Write a python function to reverse the order of words in a sentence. For example, if the input sentence is \\"I am a student\\", the function should return \\"student a am I\\".","solution":"def reverse_words(sentence): Reverses the order of words in a sentence. Args: sentence (str): The input sentence. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to write a deck of cards to a text file. Each card is represented as a tuple of (suit, rank). The suits are \\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\" and the ranks are \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"Jack\\", \\"Queen\\", \\"King\\", \\"Ace\\".","solution":"def write_deck_to_file(file_path): Writes a deck of cards to a text file. Each card is represented as a tuple (suit, rank). suits = [\\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\"] ranks = [\\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"Jack\\", \\"Queen\\", \\"King\\", \\"Ace\\"] with open(file_path, 'w') as file: for suit in suits: for rank in ranks: file.write(f'({suit}, {rank})n')"},{"question":"Write a python function to find all the substrings of a given string that contain all the letters from the alphabet at least once, also known as pangrams.","solution":"def is_pangram(s): Check if the string s is a pangram. A pangram contains every letter of the alphabet at least once. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") return set(s.lower()) >= alphabet def find_pangram_substrings(s): Returns all substrings of s that are pangrams. n = len(s) pangram_substrings = [] for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] if is_pangram(substring): pangram_substrings.append(substring) return pangram_substrings"},{"question":"Write a python function to determine if the sum of elements in a list is odd or even. How should the function behave if the list is empty?","solution":"def is_sum_odd_or_even(lst): Determines if the sum of elements in the list is odd or even. Parameters: lst (list): The list of numbers. Returns: str: \\"odd\\" if the sum is odd, \\"even\\" if the sum is even, \\"empty\\" if the list is empty. if not lst: return \\"empty\\" total_sum = sum(lst) if total_sum % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Write a python function to return the sum of two numbers. The function must also handle exceptions for non-numeric inputs.","solution":"def safe_add(a, b): Returns the sum of a and b, raises ValueError for non-numeric inputs. try: sum_result = float(a) + float(b) return sum_result except ValueError: raise ValueError(\\"Both inputs must be numeric\\")"},{"question":"Write a python function to generate a list with elements from 0 through N-1. However, let's twist the requirement a bit. Now, write the function such that the element in the list at index \`i\` contains the product of all elements in the list except for the element at index \`i\`.","solution":"def product_except_self(n): Generate a list where the element at index i contains the product of all elements in the list (0 to N-1) except for the element at index i. if n <= 1: return [] # Step 1: Generate the list from 0 to N-1 nums = list(range(n)) # Step 2: Allocate a result list with the same size as nums result = [1] * n # Step 3: Calculate prefix products prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Step 4: Calculate suffix products and combine with prefix products suffix_product = 1 for i in reversed(range(n)): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Write a python function to check if a list of integers contains a specific number. If the number is found, return True; otherwise, return False.","solution":"def contains_number(lst, number): Checks if the list contains the specific number. Parameters: lst (list of int): List of integers. number (int): The number to search for in the list. Returns: bool: True if the number is found, False otherwise. return number in lst"},{"question":"Write a python function to remove duplicates from a sorted array. The function should not use any extra space and should modify the array in-place.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in-place. Returns the length of the array after removing duplicates. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a python function to find the elements in the list \`numbers\` that appear more than once. Returns the list of duplicates in order of their first occurrence.","solution":"def find_duplicates(numbers): Returns the list of elements that appear more than once in the given list, in order of their first occurrence. seen = set() duplicates = [] for number in numbers: if number in seen: if number not in duplicates: duplicates.append(number) else: seen.add(number) return duplicates"},{"question":"Write a python function to find the longest common prefix among a list of strings. The function should be case-sensitive.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". if not strs: return \\"\\" # The shortest string will limit the max possible prefix length min_len = min(len(s) for s in strs) lcp = \\"\\" for i in range(min_len): # Take the current character from the first string as candidate char = strs[0][i] # Check this character across all strings if all(s[i] == char for s in strs): lcp += char else: break return lcp"},{"question":"Write a python function to recursively print the elements of a list in reverse order.","solution":"def print_reverse(lst): Recursively prints the elements of a list in reverse order. if not lst: return print(lst[-1]) print_reverse(lst[:-1])"},{"question":"Write a python function to find the maximum number in a given array of integers.","solution":"def find_max(arr): Returns the maximum number in the given array of integers. if not arr: raise ValueError(\\"Array is empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a python function to solve the puzzle of finding the maximum value in all subarrays of size \`k\` in a given list. The list contains integers, and the function should return a list of the maximum values for each subarray of size \`k\`.","solution":"from collections import deque def max_in_subarrays(arr, k): Returns a list of the maximum values for each subarray of size k. if not arr or k <= 0 or k > len(arr): return [] q = deque() max_values = [] for i in range(len(arr)): while q and q[0] <= i - k: q.popleft() while q and arr[q[-1]] <= arr[i]: q.pop() q.append(i) if i >= k - 1: max_values.append(arr[q[0]]) return max_values"},{"question":"Write a python function to create a new string from existing string, by only including the characters that are not present in another given string.","solution":"def filter_string(original, filter_out): Returns a new string from 'original' excluding all characters that are present in the 'filter_out' string. Args: original (str): The original input string. filter_out (str): The string containing characters to be excluded from the original string. Returns: str: A string consisting of characters from the original string not in the filter_out string. return \\"\\".join([char for char in original if char not in filter_out])"},{"question":"Write a python function to find the total number of letters in all the words that start with a specific letter in a given list. For example, if the list is [\\"apple\\", \\"banana\\", \\"apricot\\", \\"cherry\\", \\"grape\\"] and the specific letter is 'a', the function should return 5 because \\"apple\\" and \\"apricot\\" are the words that start with 'a' and they have a total of 5 letters.","solution":"def total_letters(words_list, specific_letter): Returns the total number of letters in all the words that start with a specific letter in a given list. :param words_list: List of words :param specific_letter: Specific letter to check if words start with :return: Total number of letters in words that start with the specific letter return sum(len(word) for word in words_list if word.startswith(specific_letter))"},{"question":"Write a python function to count the occurrences of all words in a given sentence. The function should return a dictionary where the keys are the words and the values are the counts.","solution":"def count_word_occurrences(sentence: str) -> dict: Count the occurrences of each word in a given sentence. words = sentence.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a python function to split a string into n equal parts and return a list of the parts.","solution":"def split_string(s, n): Splits the string \`s\` into \`n\` equal parts. If the string cannot be split into exactly \`n\` parts of the same length, an empty list is returned. :param s: String to be split. :param n: Number of equal parts to split the string into. :return: List of \`n\` equal parts. if len(s) % n != 0: return [] part_length = len(s) // n return [s[i:i + part_length] for i in range(0, len(s), part_length)]"},{"question":"Write a python function to check if a string contains only lowercase and uppercase letters. The function should return \`True\` if the string contains only these characters and \`False\` otherwise. For instance, the string \\"HelloWorld\\" should return \`True\`, and \\"Hello World!\\" should return \`False\`.","solution":"def is_alpha_string(s): Determines whether a string contains only lowercase and uppercase letters. Args: s (str): The string to check. Returns: bool: True if the string contains only lowercase and uppercase letters, False otherwise. return s.isalpha()"},{"question":"Write a python function to reverse the words in a given sentence but keep the original order of the words. For example, if the input is \\"Hello world from Python\\", the output should be \\"olleH dlrow morf nohtyP\\". You should also ensure that the code handles multiple spaces between words and trims the sentence from leading and trailing spaces.","solution":"def reverse_words_in_sentence(sentence): Reverses the letters of each word in the given sentence but maintains the original order of the words. Args: sentence (str): The input sentence. Returns: str: The sentence with each word's letters reversed, but words in their original order. # Split the sentence into words, reversing each word and joining them with a space return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a python function to check for duplicate items in a list. n","solution":"def has_duplicates(lst): Returns True if there are duplicate items in the list. return len(lst) != len(set(lst))"},{"question":"Write a python function to count the number of unique characters in a given string. The string can contain uppercase, lowercase letters and digits.","solution":"def count_unique_characters(s): Returns the number of unique characters in the given string s. return len(set(s))"},{"question":"Write a python function to check if a number is a perfect square or not. Provide a clear explanation of your solution.","solution":"import math def is_perfect_square(n): Checks if a number n is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a python function to convert a binary string to an integer. The function should handle binary strings of various lengths. For example, if the input is '0b10101', the output should be 21. If the input is '0b11111111', the output should be 255. Implement the function and test it with a couple of binary strings.","solution":"def binary_to_integer(binary_str): Converts a binary string to an integer. Parameters: binary_str (str): Binary string starting with '0b'. Returns: int: The integer representation of the binary string. if binary_str.startswith('0b'): return int(binary_str, 2) else: raise ValueError(\\"Invalid binary string format\\")"},{"question":"Write a python function to find the minimum number of swaps required to sort an array. The function should take an array of integers as input and return the minimum number of swaps.","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) # Create a list of tuples where each tuple contains the array element and its index arrpos = [*enumerate(arr)] # Sort the array by the array values arrpos.sort(key=lambda it: it[1]) # To keep track of visited elements visited = {k: False for k in range(n)} # Initialize the number of swaps swaps = 0 # Loop through the array elements for i in range(n): # If the element is already visited or it is already in the right position if visited[i] or arrpos[i][0] == i: continue # Initialize the cycle length cycle_length = 0 j = i # Traverse the cycle while not visited[j]: visited[j] = True j = arrpos[j][0] cycle_length += 1 # Update the number of swaps needed if cycle_length > 0: swaps += (cycle_length - 1) return swaps"},{"question":"Write a python function to calculate the volume of a pyramid. The function should take three arguments: the base area \`base_area\` and the height \`height\`, and return the volume of the pyramid.","solution":"def pyramid_volume(base_area, height): Calculate the volume of a pyramid. Parameters: base_area (float): The area of the base of the pyramid. height (float): The height of the pyramid. Returns: float: The volume of the pyramid. return (1/3) * base_area * height"},{"question":"Write a python function to calculate the sum of the series \`1 + 1/2 + 1/3 +...+1/N\`","solution":"def sum_of_series(N): Returns the sum of the series 1 + 1/2 + 1/3 +...+ 1/N. Parameters: N (int): The last term of the series. Returns: float: The sum of the series. if N < 1: return 0 return sum(1/i for i in range(1, N+1))"},{"question":"Write a python function to convert a binary number to its decimal equivalent. The function should handle binary numbers with up to 32 bits. For binary numbers with more than 32 bits, you should return an error message. The function should also handle both positive and negative binary numbers.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) to its decimal equivalent. Handles up to 32-bit binary numbers. For binary numbers with more than 32 bits, returns an error message. if len(binary_str) > 32: return \\"Error: Binary number exceeds 32 bits\\" # Handle negative binary numbers using two's complement method if needed if binary_str[0] == '1' and len(binary_str) == 32: # It's a negative number in two's complement format # Invert bits inverted_binary = ''.join('1' if b == '0' else '0' for b in binary_str) # Add 1 to the inverted bits decimal_value = int(inverted_binary, 2) + 1 # Return the negative of that value return -decimal_value # For positive numbers or shorter binary numbers return int(binary_str, 2)"},{"question":"Write a python function to check if each element in a list equals the corresponding element in another list.","solution":"def lists_are_equal(list1, list2): Checks if each element in list1 equals the corresponding element in list2. Returns True if lists are equal, False otherwise. if len(list1) != len(list2): return False for i in range(len(list1)): if list1[i] != list2[i]: return False return True"},{"question":"Write a python function to calculate the sum of an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between any two successive members is constant. The function should take three parameters: the first term, the number of terms, and the common difference. Here's the formula to calculate the sum of the series: S = n/2 * (2a + (n-1)d), where S is the sum of the series, n is the number of terms, a is the first term, and d is the common difference.","solution":"def sum_arithmetic_sequence(a, n, d): Returns the sum of an arithmetic sequence. Parameters: a (int/float): The first term of the sequence. n (int): The number of terms in the sequence. d (int/float): The common difference between the successive terms. Returns: int/float: The sum of the arithmetic sequence. return n / 2 * (2 * a + (n - 1) * d)"},{"question":"Write a python function to count the number of even numbers in a given list of numbers. How would you approach this problem step-by-step?","solution":"def count_even_numbers(numbers): Returns the count of even numbers in a given list of numbers. even_count = 0 for number in numbers: if number % 2 == 0: even_count += 1 return even_count"},{"question":"Write a python function to return a dictionary where the keys are numbers from 1 to 100 and the values are their squares.","solution":"def generate_squares_dict(): Returns a dictionary where the keys are numbers from 1 to 100 and the values are their squares. return {i: i**2 for i in range(1, 101)}"},{"question":"Write a python function to check if a number is within a given range. The function should take three parameters: the number to check, the minimum value of the range, and the maximum value of the range. The function should return True if the number is within the range (inclusive), and False otherwise.","solution":"def is_within_range(number, min_value, max_value): Checks if the given number is within the specified range inclusive. Parameters: - number: The number to check. - min_value: The minimum value of the range. - max_value: The maximum value of the range. Returns: - True if the number is within the range, False otherwise. return min_value <= number <= max_value"},{"question":"Write a python function to determine the minimum number of operations required to make an array sorted using the Bubble Sort algorithm. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The function should return the minimum number of swaps needed.","solution":"def bubble_sort_min_operations(arr): Determines the minimum number of operations (swaps) required to sort the array using Bubble Sort. :param arr: List[int] - list of integers :return: int - minimum number of swaps needed n = len(arr) swaps = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps"},{"question":"Write a python function to count the number of words in a given string that have at least one vowel ('a', 'e', 'i', 'o', 'u') in the substring of any continuous three consecutive characters.","solution":"def count_words_with_vowel_substring(s): Returns the number of words in the string s that have at least one vowel in any substring of three continuous consecutive characters. def has_vowel_in_three_chars_substring(word): vowels = set(\\"aeiouAEIOU\\") for i in range(len(word) - 2): if any(char in vowels for char in word[i:i+3]): return True return False words = s.split() return sum(has_vowel_in_three_chars_substring(word) for word in words)"},{"question":"Write a python function to calculate the sum of all even Fibonacci numbers up to a given limit.","solution":"def sum_even_fibonacci(limit): Calculates the sum of all even Fibonacci numbers up to a given limit. Parameters: limit (int): The upper limit for Fibonacci numbers to be summed. Returns: int: The sum of all even Fibonacci numbers up to the given limit. a, b = 1, 2 sum_even = 0 while a <= limit: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Write a python function to count the number of elements that are present in a tuple but not in another tuple.","solution":"def count_elements_in_first_not_in_second(tuple1, tuple2): Returns the count of elements that are present in tuple1 but not in tuple2. set1 = set(tuple1) set2 = set(tuple2) difference = set1 - set2 return len(difference)"},{"question":"Write a python function to convert a list of numbers to a list of strings.","solution":"def convert_numbers_to_strings(numbers): Converts a list of numbers to a list of strings. Args: numbers (list): A list of numbers. Returns: list: A list of strings. return [str(number) for number in numbers]"},{"question":"Write a python function to implement a bubble sort algorithm. The function should take an unsorted list as an argument and return the sorted list.","solution":"def bubble_sort(arr): Sorts a list using the bubble sort algorithm. Parameters: arr (list): The unsorted list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a python function to print out a given integer using words instead of numbers e.g. 123 will be \\"one two three\\". The integer can be at most a 3-digit number.","solution":"def number_to_words(number): Converts a given integer (at most 3-digit) to its word representation. Parameters: number (int): Integer number to convert. Returns: str: Word representation of the number. if not (0 <= number <= 999): raise ValueError(\\"Number should be a non-negative integer up to 3 digits (0-999)\\") words = { 0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine' } word_representation = ' '.join(words[int(digit)] for digit in str(number)) return word_representation"},{"question":"Write a python function to generate all binary strings of size N that have exactly K set bits. For example, if N=3 and K=2, the binary strings should be \\"011\\", \\"101\\", and \\"110\\".","solution":"from itertools import combinations def generate_binary_strings(N, K): Generate all binary strings of size N that have exactly K set bits. Parameters: N (int): The length of the binary strings. K (int): The number of set bits in each binary string. Returns: List[str]: A list of all binary strings of length N with exactly K set bits. if K > N: return [] results = [] indices = list(range(N)) for combo in combinations(indices, K): binary_str = ['0'] * N for index in combo: binary_str[index] = '1' results.append(\\"\\".join(binary_str)) return results"},{"question":"Write a python function to find all occurrences of a substring within a string and return their positions (indices).","solution":"def find_substring_occurrences(s, sub): Returns a list of starting indices of occurrences of the substring \`sub\` in the string \`s\`. :param s: the string in which to search :param sub: the substring to search for :return: a list of starting indices of each occurrence of \`sub\` in \`s\` if not sub: return [] # Return an empty list if the substring is empty indices = [] index = s.find(sub) while index != -1: indices.append(index) index = s.find(sub, index + 1) return indices"},{"question":"Write a python function to iterate over every value and element in a list.","solution":"def iterate_list(lst): Iterates over every value and element in a list. Args: lst (list): A list of elements. Returns: list of tuples: Each tuple contains the index and the corresponding value from the list. return [(index, value) for index, value in enumerate(lst)]"},{"question":"Write a python function to search for a specific element in an sorted array using binary search algorithm.","solution":"def binary_search(arr, target): Searches for a specific element in a sorted array using binary search algorithm. Parameters: arr (list): A list of sorted elements. target: The element to search for. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to sort a list of integers using the Bubble Sort algorithm. You need to explain each part of the code and how it contributes to the sorting of the list.","solution":"def bubble_sort(arr): Sorts a list of integers using the Bubble Sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): # After each pass, the next largest element gets bubbled to the end of the list. swapped = False for j in range(0, n-i-1): # Traverse the list from 0 to n-i-1. # Swap if the element found is greater than the next element. if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped by inner loop, then break. if not swapped: break return arr"},{"question":"Write a python function to get the keys with the maximum values from a dictionary.","solution":"def keys_with_max_values(d): Returns the list of keys with the maximum values in the dictionary d. if not d: return [] max_value = max(d.values()) max_keys = [key for key, value in d.items() if value == max_value] return max_keys"},{"question":"Write a python function to remove duplicates from a list of lists. The function should work similar to \`set\` for lists (i.e., without losing the list structure) and should handle nested lists as well. Your function should keep only the first occurrence of a list in the original order.","solution":"def remove_duplicates(list_of_lists): Remove duplicate lists from a list of lists, preserving the order of first occurrences. Parameters: list_of_lists (list of lists): A list containing other lists. Returns: list of lists: A list with duplicate lists removed. seen = [] result = [] for lst in list_of_lists: if lst not in seen: result.append(lst) seen.append(lst) return result"},{"question":"Write a python function to create a histogram of a list of numbers. The function should take the list of numbers as input and display the histogram using the matplotlib library. If the matplotlib library is not installed, the function should install it first. If it's already installed, the function should use it to plot the histogram.","solution":"import subprocess import sys def install_and_import(package): Installs and imports a package using pip if not already installed. try: __import__(package) except ImportError: subprocess.check_call([sys.executable, \\"-m\\", \\"pip\\", \\"install\\", package]) finally: globals()[package] = __import__(package) install_and_import('matplotlib') def create_histogram(input_list): Creates a histogram for a given list of numbers using matplotlib. import matplotlib.pyplot as plt plt.hist(input_list, bins=10, edgecolor='black') plt.xlabel('Value') plt.ylabel('Frequency') plt.title('Histogram') plt.show()"},{"question":"Write a python function to calculate the area of a circle given its radius. The function should handle any potential exceptions that may occur when the radius is not a number or is less than 0.","solution":"import math def area_of_circle(radius): Calculates the area of a circle given its radius. Returns the area or raises a ValueError if the radius is not a number or is less than 0. if not isinstance(radius, (int, float)): raise ValueError(\\"The radius must be a number\\") if radius < 0: raise ValueError(\\"The radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Write a python function to check if a given linked list forms a palindrome using a stack data structure.","solution":"class Node: def __init__(self, value): self.value = value self.next = None def is_palindrome(head): Checks if the linked list forms a palindrome using a stack. if not head or not head.next: return True # A single node or an empty list is a palindrome by default. # Use two pointers to find the mid of the linked list. slow_ptr = head fast_ptr = head # Use a stack to store the first half of the linked list. stack = [] while fast_ptr and fast_ptr.next: stack.append(slow_ptr.value) slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next # If the length of the list is odd, skip the middle element. if fast_ptr: slow_ptr = slow_ptr.next # Compare the second half of the list with the elements in the stack. while slow_ptr: top_value = stack.pop() if slow_ptr.value != top_value: return False slow_ptr = slow_ptr.next return True"},{"question":"Write a python function to generate a random password of a specified length. The password should include uppercase, lowercase, digits, and special characters. Use the \`secrets\` module for generating secure randomness.","solution":"import secrets import string def generate_random_password(length): Generates a random password of a specified length. The password includes uppercase, lowercase, digits, and special characters. Parameters: length (int): The length of the password to be generated. Returns: str: A randomly generated password. if length < 4: raise ValueError(\\"Password length must be at least 4 to include all character types.\\") # Define possible characters characters = string.ascii_letters + string.digits + string.punctuation password = [] # Ensure the password has at least one character of each type password.append(secrets.choice(string.ascii_uppercase)) password.append(secrets.choice(string.ascii_lowercase)) password.append(secrets.choice(string.digits)) password.append(secrets.choice(string.punctuation)) # Fill the rest of the password length with random choices from all characters for _ in range(length - 4): password.append(secrets.choice(characters)) # Shuffle to avoid predictable patterns secrets.SystemRandom().shuffle(password) return ''.join(password)"},{"question":"Write a python function to remove duplicate records from a list of dictionaries, where the key \\"id\\" is used to determine duplicates. If a duplicate is found, the newest entry (i.e., the entry that appears later in the list) should be kept.","solution":"def remove_duplicates(records): Removes duplicate records from a list of dictionaries using the \\"id\\" key. The newest entry (i.e., the entry that appears later in the list) is kept. :param records: List of dictionaries containing an \\"id\\" key. :return: List of dictionaries with duplicates removed. seen_ids = {} result = [] for record in reversed(records): if record['id'] not in seen_ids: seen_ids[record['id']] = record result.append(record) return list(reversed(result))"},{"question":"Write a python function to perform a binary search on a sorted list of numbers.","solution":"def binary_search(sorted_list, target): Perform a binary search on a sorted list of numbers. Parameters: sorted_list (list): A list of sorted numbers target (int): The number to search for Returns: int: The index of the target number in the sorted list, or -1 if the target is not found left, right = 0, len(sorted_list) - 1 while left <= right: mid = left + (right - left) // 2 if sorted_list[mid] == target: return mid elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to simulate the scenario of a monkey boxing under certain conditions.","solution":"import random def monkey_boxing(num_rounds, win_prob=0.5, draw_prob=0.25): Simulates a monkey boxing for a certain number of rounds. Args: - num_rounds (int): Number of rounds the monkey boxes. - win_prob (float): Probability of the monkey winning a round. - draw_prob (float): Probability of the monkey drawing a round. Returns: - dict: Results of the boxing matches including wins, losses, and draws. results = {\\"win\\": 0, \\"loss\\": 0, \\"draw\\": 0} for _ in range(num_rounds): rn = random.random() if rn < win_prob: results[\\"win\\"] += 1 elif rn < win_prob + draw_prob: results[\\"draw\\"] += 1 else: results[\\"loss\\"] += 1 return results"},{"question":"Write a python function to scrape web content from a specified URL and extract specific data such as product titles and prices using BeautifulSoup and requests.","solution":"import requests from bs4 import BeautifulSoup def scrape_product_data(url): Scrapes product data from a specified URL. Args: url (str): URL of the webpage to scrape. Returns: list of dict: A list containing dictionaries with product titles and prices. try: # Send a request to the URL response = requests.get(url) response.raise_for_status() # Parse the content with BeautifulSoup soup = BeautifulSoup(response.content, 'html.parser') # Extract product titles and prices using appropriate selectors products = [] titles = soup.select('.product-title') # Adjust the selector to match the website's structure prices = soup.select('.product-price') # Adjust the selector to match the website's structure for title, price in zip(titles, prices): product_data = { 'title': title.get_text(strip=True), 'price': price.get_text(strip=True) } products.append(product_data) return products except requests.RequestException as e: print(f\\"Error fetching data from {url}: {e}\\") return []"},{"question":"Write a python function to calculate the sum of all positive divisors of a given number. A positive divisor of a number is an integer that divides that number without leaving a remainder.","solution":"def sum_of_positive_divisors(n): Returns the sum of all positive divisors of the given number n. if n <= 0: return 0 return sum(i for i in range(1, n + 1) if n % i == 0)"},{"question":"Write a python function to find the largest prime number less than a given number n.","solution":"def largest_prime_less_than(n): Returns the largest prime number less than a given number n. def is_prime(k): Check if a number k is prime. if k <= 1: return False if k <= 3: return True if k % 2 == 0 or k % 3 == 0: return False i = 5 while i * i <= k: if k % i == 0 or k % (i + 2) == 0: return False i += 6 return True for num in range(n-1, 1, -1): if is_prime(num): return num return None # if no prime found less than n"},{"question":"Write a python function to generate a markdown table from a list of dictionaries. The function should take in the list of dictionaries as an argument and return a string containing the markdown table. Each dictionary represents a row in the table. The keys of the dictionary should be the headers of the table, and the values should be the corresponding cell data.","solution":"def generate_markdown_table(data): Generates a markdown table from a list of dictionaries. Parameters: data (list of dict): The list of dictionaries representing table rows. Returns: str: A string containing the markdown table. if not data: return \\"\\" headers = data[0].keys() header_row = \\"| \\" + \\" | \\".join(headers) + \\" |\\" separator_row = \\"| \\" + \\" | \\".join([\\"---\\"] * len(headers)) + \\" |\\" rows = [] for entry in data: row = \\"| \\" + \\" | \\".join(str(entry[header]) for header in headers) + \\" |\\" rows.append(row) return \\"n\\".join([header_row, separator_row] + rows)"},{"question":"Write a python function to calculate the area of a polygon given its vertices.","solution":"def polygon_area(vertices): Calculates the area of a polygon given its vertices. The vertices should be provided as a list of tuples, each tuple representing (x, y) coordinates. Uses the Shoelace formula to calculate the area: Area = 0.5 * abs(sum(x_i * y_{i+1}) - sum(y_i * x_{i+1})) :param vertices: List of tuples [(x1, y1), (x2, y2), ..., (xn, yn)] :return: Area of the polygon. n = len(vertices) if n < 3: return 0 # Not a polygon area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2.0"},{"question":"Write a python function to reverse a string efficiently.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to find all the distinct sub-strings of a given string, considering the order of the characters as important.","solution":"def distinct_substrings(s): Returns a list of all distinct substrings of the given string s. substrings = set() n = len(s) # Generate all substrings for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) # Convert the set to a list and sort it return sorted(substrings)"},{"question":"Write a python function to calculate the sum of all the numbers from 1 to \`n\`, where \`n\` is a positive integer. The function should handle cases where \`n\` is not provided by defaulting to 10, which is a common requirement in many programming tasks.","solution":"def sum_to_n(n=10): Returns the sum of all numbers from 1 to n. Defaults to 10 if n is not provided. Parameters: n (int): The number up to which all the numbers will be summed. Returns: int: The sum of all numbers from 1 to n. if n < 1: raise ValueError(\\"n must be a positive integer\\") return n * (n + 1) / 2"},{"question":"Write a python function to find if an array has a pair with the given sum. The array is sorted. For example, given [1, 2, 3, 9], target = 8, there is no pair with sum 8 but if target = 7, there is a pair with sum 7.","solution":"def has_pair_with_sum(arr, target): Determines if there is a pair of numbers in the sorted array 'arr' that adds up to the 'target' sum. Args: arr (list of int): A sorted list of integers. target (int): The target sum to find in the array. Returns: bool: True if there is a pair with the sum 'target', otherwise False. left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a python function to find the number of unique words in a given space-separated text. For example, if the input is \\"apple banana apple apple orange banana grape\\", the function should return 5.","solution":"def count_unique_words(text): Returns the number of unique words in the given space-separated text. words = text.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to implement a simple bubble sort algorithm on an unsorted list of integers and return the sorted list.","solution":"def bubble_sort(arr): Sorts a list of integers using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if a swap was made in this pass swapped = False # Perform a pass through the list for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swap was made, the list is sorted if not swapped: break return arr"},{"question":"Write a python function to find the sum of all nodes in a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_bst(root): Computes the sum of all nodes in a binary search tree. Parameters: root (TreeNode): The root node of the binary search tree. Returns: int: The sum of all nodes' values. if root is None: return 0 return root.val + sum_of_bst(root.left) + sum_of_bst(root.right)"},{"question":"Write a python function to find the number that appears more than half of the times in an array. If there is no such number, return -1.","solution":"def find_majority_element(arr): Returns the element that appears more than half of the times in the array. If no such element exists, returns -1. candidate = None count = 0 # Boyer-Moore Voting Algorithm to find the candidate for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) # Confirm if candidate is the majority element if arr.count(candidate) > len(arr) // 2: return candidate else: return -1"},{"question":"Write a python function to solve the N Queens problem. The function should take an integer N as input and return the number of distinct solutions to placing N queens on an N×N chessboard so that no two queens threaten each other. Two solutions are considered distinct if and only if there is at least one different position of a queen.","solution":"def solve_n_queens(n): Solves the N-Queens problem and returns the number of distinct solutions for an n×n chessboard. def is_not_under_attack(row, col): return not (cols[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): cols[col] = 1 hills[row - col] = 1 # \\"hill\\" diagonals dales[row + col] = 1 # \\"dale\\" diagonals def remove_queen(row, col): cols[col] = 0 hills[row - col] = 0 dales[row + col] = 0 def backtrack(row = 0, count = 0): # If all n queens are placed successfully if row == n: count += 1 else: for col in range(n): # Iterate through columns at the current row. if is_not_under_attack(row, col): place_queen(row, col) # Place the queen on the board. count = backtrack(row + 1, count) # Move on to the next row with updated placements. remove_queen(row, col) # Remove the queen from the board. return count # Columns, hill diagonals, and dale diagonals cols = [0] * n hills = [0] * (2 * n - 1) # \\"hill\\" diagonals dales = [0] * (2 * n - 1) # \\"dale\\" diagonals return backtrack()"},{"question":"Write a python function to generate the nth Catalan number. The Catalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics. The nth Catalan number is given by the formula C(n) = (1 / (n + 1)) * (2n choose n) = (2n)! / ((n + 1)! * n!).","solution":"import math def catalan_number(n): Generate the nth Catalan number. The nth Catalan number is given by the formula: C(n) = (2n)! / ((n + 1)! * n!) :param n: The order of the Catalan number to generate. :type n: int :return: The nth Catalan number. :rtype: int return math.comb(2*n, n) // (n + 1)"},{"question":"Write a python function to check whether a given string is a palindrome or not without using slicing.","solution":"def is_palindrome(s): Checks whether the given string s is a palindrome or not. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: return False return True"},{"question":"Write a python function to calculate the determinant of a square matrix.","solution":"def matrix_determinant(matrix): Calculate the determinant of a square matrix. Args: matrix (list of lists): A square matrix where each inner list represents a row of the matrix. Returns: float or int: The determinant of the matrix. # Ensure the matrix is square size = len(matrix) for row in matrix: if len(row) != size: raise ValueError(\\"The matrix must be square\\") # Base case for 2x2 matrix if size == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] # Recursive case for larger matrix determinant = 0 for c in range(size): submatrix = [row[:c] + row[c+1:] for row in matrix[1:]] sign = (-1) ** c sub_det = matrix_determinant(submatrix) determinant += sign * matrix[0][c] * sub_det return determinant"},{"question":"Write a python function to validate if a given string is a valid integer. The function should return \`True\` if the string is a valid integer, otherwise return \`False\`.","solution":"def is_valid_integer(s): Checks if the given string is a valid integer. Parameters: s (str): The string to validate. Returns: bool: True if the string is a valid integer, False otherwise. if not s: return False if s[0] in ('-', '+'): if len(s) == 1: return False return s[1:].isdigit() return s.isdigit()"},{"question":"Write a python function to count the number of duplicate elements in a list.","solution":"def count_duplicates(lst): Returns the number of duplicate elements in the list. Args: lst (list): The list in which duplicates are to be counted. Returns: int: The number of duplicate elements. from collections import Counter element_count = Counter(lst) return sum(1 for count in element_count.values() if count > 1)"},{"question":"Write a python function to calculate the factorial of a number using recursion. What is recursion?","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is negative, returns None. if n < 0: return None elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to solve the cashier problem. The cashier problem is a variation of the knapsack problem where we need to choose the least number of coins to make up a given total amount. The function should return the minimum number of coins needed to make up the given amount. If it's not possible to make up that amount, the function should return -1.","solution":"def min_coins(coins, amount): Find the minimum number of coins needed to make up the given amount using the given list of coin denominations. If it's not possible to make up that amount, return -1. :param coins: List[int] -- available denominations of coins :param amount: int -- the total amount to make up :return: int -- minimum number of coins needed or -1 if not possible # Initialize DP array with amount+1 dp = [amount + 1] * (amount + 1) dp[0] = 0 # Fill the DP array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a python function to find the first unique character in a string. If there is no such character, return -1. The function should be efficient and concise.","solution":"def first_unique_character(s): Returns the index of the first unique character in the string s. If there is no such character, return -1. from collections import Counter count = Counter(s) for index, char in enumerate(s): if count[char] == 1: return index return -1"},{"question":"Write a python function to check if a number is a palindrome without converting it to a string. The function should return \`True\` if the number is a palindrome, and \`False\` otherwise. Examples of palindromic numbers include 121, 12321, and 123321.","solution":"def is_palindrome_number(x): Checks if a number is a palindrome without converting it to a string. Returns True if the number is a palindrome, False otherwise. if x < 0: return False original = x reversed_num = 0 while x > 0: reversed_num = reversed_num * 10 + x % 10 x //= 10 return original == reversed_num"},{"question":"Write a python function to calculate the area of a circle given its radius. The function should raise a ValueError if the radius is negative.","solution":"import math def circle_area(radius): Calculate the area of a circle given its radius. Raise ValueError if the radius is negative. :param radius: The radius of the circle :return: The area of the circle if radius < 0: raise ValueError(\\"The radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to implement the classic game of Rock paper scissors lizard Spock.","solution":"import random def rock_paper_scissors_lizard_spock(player_choice, opponent=None): Play the Rock, Paper, Scissors, Lizard, Spock game. player_choice: str - One of \\"rock\\", \\"paper\\", \\"scissors\\", \\"lizard\\", \\"spock\\" opponent: str (optional) - One of \\"rock\\", \\"paper\\", \\"scissors\\", \\"lizard\\", \\"spock\\". If None, a random choice will be made for the opponent. Returns a tuple (player_choice, opponent_choice, result) - \\"win\\" if player wins - \\"lose\\" if opponent wins - \\"draw\\" if it's a draw choices = [\\"rock\\", \\"paper\\", \\"scissors\\", \\"lizard\\", \\"spock\\"] if opponent is None: opponent = random.choice(choices) if player_choice == opponent: return (player_choice, opponent, \\"draw\\") win_map = { \\"rock\\": [\\"scissors\\", \\"lizard\\"], \\"paper\\": [\\"rock\\", \\"spock\\"], \\"scissors\\": [\\"paper\\", \\"lizard\\"], \\"lizard\\": [\\"spock\\", \\"paper\\"], \\"spock\\": [\\"scissors\\", \\"rock\\"] } if opponent in win_map[player_choice]: return (player_choice, opponent, \\"win\\") else: return (player_choice, opponent, \\"lose\\")"},{"question":"Write a python function to find the minimum element in an array. What are the time complexities of operations you will do in your function?","solution":"def find_minimum(arr): Returns the minimum element in the array. if not arr: raise ValueError(\\"Array is empty\\") minimum = arr[0] for num in arr[1:]: if num < minimum: minimum = num return minimum # The time complexity of finding the minimum element in an array is O(n), # where n is the number of elements in the array."},{"question":"Write a python function to get the first repeating character in the string \`s\` and return the character. If no character repeats, return \`None\`.","solution":"def first_repeating_char(s): Returns the first repeating character in the string s. If no character repeats, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to find the repeated numbers from two given lists where the repeated numbers are in a ascending order?","solution":"def find_repeated_numbers(list1, list2): Returns a list of repeated numbers from two given lists in ascending order. # Converting the lists to sets to find common elements set1 = set(list1) set2 = set(list2) # Finding the intersection of two sets common_elements = set1 & set2 # Converting the set to a sorted list repeated_numbers = sorted(common_elements) return repeated_numbers"},{"question":"Write a python function to calculate the sum of the first 'n' positive integers.","solution":"def sum_of_first_n_integers(n): Returns the sum of the first 'n' positive integers. Parameters: n (int): The number of first positive integers to sum. Returns: int: The sum of the first 'n' positive integers. if n < 1: return 0 return n * (n + 1) / 2"},{"question":"Write a python function to count the number of pairs (a, b) such that a < b and a + b = x.","solution":"def count_pairs_with_sum(x): Returns the count of pairs (a, b) such that a < b and a + b = x. if x < 2: return 0 count = 0 for a in range(1, x//2 + 1): b = x - a if a < b: count += 1 return count"},{"question":"Write a python function to calculate the power of a number to an integer n using a loop. The function should take two parameters: \`base\` (the base number) and \`exponent\` (the integer power to which the base is raised). The function should return the result of raising \`base\` to the power of \`exponent\`.","solution":"def power(base, exponent): Calculate the power of a number to an integer n using a loop. :param base: The base number. :param exponent: The integer power to which the base is raised. :return: The result of raising \`base\` to the power of \`exponent\`. result = 1 for _ in range(abs(exponent)): result *= base if exponent < 0: result = 1 / result return result"},{"question":"Write a python function to find the shortest path between two points in a grid, moving only up, down, left, or right. The grid is represented by a 2D list where \`0\` represents an open path and \`1\` represents an obstacle. Your function should return the shortest path length as an integer. If no path is found, return \`-1\`.","solution":"from collections import deque def shortest_path(grid, start, end): Finds the shortest path in a grid moving only up, down, left, or right. Parameters: - grid: List[List[int]], the grid represented as a 2D list where 0 represents an open path and 1 represents an obstacle. - start: Tuple[int, int], starting point coordinates (row, col). - end: Tuple[int, int], ending point coordinates (row, col). Returns: - int, length of the shortest path or -1 if no path is found. if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: r, c, dist = queue.popleft() if (r, c) == end: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a python function to find the first palindrome in a list of strings. Iterate through the list and return the first palindrome it finds. If no palindrome is found, return None.","solution":"def first_palindrome(strings): Returns the first palindrome in a list of strings. If no palindrome is found, returns None. for string in strings: if string == string[::-1]: return string return None"},{"question":"Write a python function to find the first non-repeating character in a string. If no non-repeating character is found, return a message \\"No non-repeating character found.\\"","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a string. If no non-repeating character is found, returns a message. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 for char in s: if character_count[char] == 1: return char return \\"No non-repeating character found.\\""},{"question":"Write a python function to get N-Queen solution for n x n boards.","solution":"def solve_nqueens(n): Solves the N-Queens problem and returns a list of solutions. Each solution is a list of column indices, where index represents the row. def is_safe(board, row, col): for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(board, row): if row == n: results.append(board[:]) return for col in range(n): if is_safe(board, row, col): board[row] = col solve(board, row + 1) board[row] = -1 results = [] solve([-1] * n, 0) return results"},{"question":"Write a python function to implement a stack using list. Push and Pop operations should have a time complexity of O(1).","solution":"class Stack: def __init__(self): Initialize an empty stack. self.stack = [] def push(self, item): Push an item onto the stack. :param item: Item to be pushed onto the stack self.stack.append(item) def pop(self): Remove and return the top item from the stack. :return: Top item from the stack :raises IndexError: If the stack is empty if not self.stack: raise IndexError(\\"pop from empty stack\\") return self.stack.pop() def is_empty(self): Check if the stack is empty. :return: True if the stack is empty, otherwise False return len(self.stack) == 0"},{"question":"Write a python function to validate an IP address. An IP address is a way of addressing devices on a network. For a device to communicate over a network, it must have an IP address. An IP address of size 4, is in the form \\"192.168.0.1\\". The four numbers in it are between 0 and 255, separated by a dot.","solution":"def is_valid_ip(ip): Validates if the given ip string is a valid IPv4 address. An IPv4 address is in the form of \\"192.168.0.1\\" where each of the four numbers are between 0 and 255, separated by a dot. Parameters: - ip: str : The IP address to validate. Returns: - bool : True if the IP is valid, False otherwise. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False return True"},{"question":"Write a python function to check if the numbers in an array are in non-decreasing order. You only need to consider distinct numbers. For example, in an array \`nums\` where \`nums[0] <= nums[1] <= nums[2]\`, but with duplicates, the function should return \`True\` as well.","solution":"def is_non_decreasing(nums): Returns True if the numbers in the given array are in non-decreasing order, disregarding duplicate elements, otherwise returns False. unique_nums = [] for num in nums: if not unique_nums or num != unique_nums[-1]: unique_nums.append(num) for i in range(1, len(unique_nums)): if unique_nums[i] < unique_nums[i - 1]: return False return True"},{"question":"Write a python function to convert a hexadecimal string (in the format \\"0x...\\" or \\"#...\\") to its decimal integer value. The function should handle both formats and ignore any leading/trailing whitespaces.","solution":"def hex_to_decimal(hex_str): Converts a hexadecimal string to its decimal integer value. Handles both \\"0x...\\" and \\"#...\\" formats, ignoring leading/trailing whitespaces. # Remove leading/trailing whitespaces hex_str = hex_str.strip() # Determine the base prefix if hex_str.startswith('0x') or hex_str.startswith('0X'): return int(hex_str, 16) elif hex_str.startswith('#'): return int(hex_str[1:], 16) else: raise ValueError(\\"Hexadecimal string should start with '0x' or '#'\\") #Example Testing: print(hex_to_decimal(\\"0x1A3F\\")) # Should print 6719 print(hex_to_decimal(\\"#1A3F\\")) # Should print 6719"},{"question":"Write a python function to calculate the sum of the first \`n\` terms of the geometric series: 1 + x + x^2 + x^3 + ... + x^n. Use the loop to compute this sum. Ensure your function uses a loop to calculate the sum without using the direct formula for the sum of a geometric series (since the question specifically asks to use a loop to calculate the sum, making the direct formula not applicable).","solution":"def geometric_series_sum(x, n): Returns the sum of the first n terms of the geometric series: 1 + x + x^2 + x^3 + ... + x^n. Parameters: x (int/float): The common ratio of the geometric series. n (int): The number of terms in the geometric series. Returns: float: The sum of the first n terms of the geometric series. sum_series = 0 term = 1 for i in range(n + 1): sum_series += term term *= x return sum_series"},{"question":"Write a python function to find the maximum sum of a non-empty subarray within a given list of integers. You can modify the elements in the array.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a non-empty subarray within the given list of integers. Params: nums - A list of integers Returns: The maximum sum of a non-empty subarray. if not nums: raise ValueError(\\"The input array must not be empty\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the last day of a given month and year. How do I approach this problem in a systematic way?","solution":"import calendar def last_day_of_month(year, month): Returns the last day of the given month and year. :param year: An integer representing the year. :param month: An integer representing the month. :return: An integer representing the last day of the month. _, last_day = calendar.monthrange(year, month) return last_day"},{"question":"Write a python function to return the last n lines of a file, considering only the lines that are alphabetic (i.e., contain only letters without any numbers, spaces, or special characters).","solution":"def get_last_n_alphabetic_lines(file_path, n): Returns the last n lines from the file at file_path that contain only alphabetic characters. with open(file_path, 'r') as file: lines = file.readlines() alphabetic_lines = [line.strip() for line in lines if line.strip().isalpha()] return alphabetic_lines[-n:]"},{"question":"Write a python function to find duplicates in an array.","solution":"def find_duplicates(arr): Returns a list of duplicates in the given array. duplicates = [] seen = set() for number in arr: if number in seen and number not in duplicates: duplicates.append(number) seen.add(number) return duplicates"},{"question":"Write a python function to calculate the sum of the elements in a list of integers. The function should handle both positive and negative integers. If the list is empty, the function should return 0. If the list contains non-integer elements, the function should raise a ValueError. How can I write such a function?","solution":"def sum_list_elements(lst): Returns the sum of the elements in a list of integers. If the list is empty, returns 0. If the list contains non-integer elements, raises a ValueError. if not all(isinstance(item, int) for item in lst): raise ValueError(\\"All elements in the list must be integers\\") return sum(lst)"},{"question":"Write a python function to check if a given number is divisible by 3 but not by 9.","solution":"def is_divisible_by_3_not_9(number): Checks if a given number is divisible by 3 but not by 9. Args: number (int): The number to check. Returns: bool: True if the number is divisible by 3 but not by 9, False otherwise. return number % 3 == 0 and number % 9 != 0"},{"question":"Write a python function to reverse all strings in a list of strings and then return the list with the reversed strings. Ensure the function handles strings of varying lengths and includes error handling for non-string elements in the list.","solution":"def reverse_strings_in_list(strings): Reverses all strings in a given list of strings. :param strings: List of strings to be reversed. :return: List of strings with each string reversed. if not all(isinstance(s, str) for s in strings): raise ValueError(\\"All elements in the input list must be strings.\\") reversed_strings = [s[::-1] for s in strings] return reversed_strings"},{"question":"Write a python function to demonstrate Return In Python","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a python function to take a filename as input and return the sum of all the numbers present in the file. The numbers are separated by whitespace.","solution":"def sum_numbers_in_file(filename): Takes a filename as input and returns the sum of all numbers present in the file. Assumes that the numbers are separated by whitespace. total_sum = 0 with open(filename, 'r') as file: for line in file: numbers = map(int, line.split()) total_sum += sum(numbers) return total_sum"},{"question":"Write a python function to find the minimum value of the f[x] = (x^2) * sin(x) function in the range [0, pi].","solution":"import numpy as np from scipy.optimize import minimize_scalar def f(x): Function to evaluate f(x) = (x^2) * sin(x). return (x**2) * np.sin(x) def find_minimum_value(): Find the minimum value of the function f(x) = (x^2) * sin(x) in the range [0, pi]. # Define the range [0, pi] bounds = (0, np.pi) # Use scipy.optimize.minimize_scalar to find the minimum in the given range result = minimize_scalar(f, bounds=bounds, method='bounded') # Return the minimum value found return result.fun"},{"question":"Write a python function to calculate the maximum profit from buying and selling a stock. You can only make one transaction. You are given an array of prices where the i-th element is the price of a given stock on day i.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy-sell transaction. :param prices: List[int] - A list of prices for each day. :return: int - The maximum profit possible. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a python function to clean up the input text by removing all puctuation and converting all characters to lowercase and remove any extra spaces.","solution":"import string def clean_text(text): Cleans up the input text by removing all punctuation, converting all characters to lowercase, and removing any extra spaces. # Remove punctuation cleaned_text = text.translate(str.maketrans('', '', string.punctuation)) # Convert to lowercase cleaned_text = cleaned_text.lower() # Remove extra spaces cleaned_text = \\" \\".join(cleaned_text.split()) return cleaned_text"},{"question":"Write a python function to count the number of ways to make a change for a given amount using \`n\` types of coins. Each coin can be used an unlimited number of times.","solution":"def count_ways_to_make_change(n, coins): Returns the number of ways to make change for the amount n using the given types of coins. Parameters: n (int): The total amount. coins (list): A list of available coin denominations. Returns: int: The number of ways to make the change. # Initialize a list to store the number of ways to make change for each amount up to n. dp = [0] * (n + 1) # There is one way to make change for the amount 0. dp[0] = 1 # Iterate over each coin. for coin in coins: # Update the number of ways to make change for all amounts greater than or equal to the coin value. for amount in range(coin, n + 1): dp[amount] += dp[amount - coin] return dp[n]"},{"question":"Write a python function to count the frequency of each word in a given string using a dictionary. Your function should ignore case sensitivity (for example, \\"Hello\\" and \\"hello\\" should be counted as the same word) and should ignore non-alphabetic characters.","solution":"import re from collections import defaultdict def count_words_frequency(s): Counts the frequency of each word in the input string \`s\` and returns a dictionary with words as keys and their frequencies as values. The function ignores case sensitivity and non-alphabetic characters. # Convert the string to lower case s = s.lower() # Use regular expression to find all words (sequences of alphabetic characters) words = re.findall(r'b[a-z]+b', s) # Initialize a defaultdict to keep track of word frequencies frequency = defaultdict(int) # Count the frequency of each word for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Write a python function to split a string \`s\` into a list of words and then reverse the order of the words.","solution":"def reverse_words(s): Splits the input string s into a list of words and then reverses the order of the words. words = s.split() reversed_words = words[::-1] return reversed_words"},{"question":"Write a python function to remove duplicates from a list of strings. You should ensure the function maintains the order of the first occurrence of each string.","solution":"def remove_duplicates(strings): Removes duplicates from a list of strings while maintaining the order of the first occurrence. Args: strings (list of str): The list of strings from which to remove duplicates. Returns: list of str: The list with duplicates removed, maintaining the order of first occurrences. seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Write a python function to check if a given list of integers is sorted in non-decreasing order. The function should compare each pair of adjacent elements and return \`True\` if the list is sorted, otherwise return \`False\`.","solution":"def is_sorted(lst): Returns True if the list is sorted in non-decreasing order, otherwise returns False. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a python function to check if there are any duplicate elements in the list. You should return True if any element appears more than once, and False otherwise. You should avoid using a secondary data structure (like a set or dictionary) to achieve this task.","solution":"def has_duplicates(lst): Returns True if any element appears more than once in the list, False otherwise. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] == lst[j]: return True return False"},{"question":"Write a python function to find the first \`n\` numbers in the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to find the least common ancestor (LCA) of two nodes in a binary tree given the root of the tree. The nodes are represented by their values.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_LCA(root, p, q): Finds the least common ancestor (LCA) of two given nodes in a binary tree. :param root: The root of the binary tree. :param p: The value of the first node. :param q: The value of the second node. :return: The LCA node. if root is None: return None # If the current node is either p or q then it is the LCA if root.value == p or root.value == q: return root # Recur for left and right subtrees left_lca = find_LCA(root.left, p, q) right_lca = find_LCA(root.right, p, q) # If both left and right LCA exist, then the current node is the LCA if left_lca and right_lca: return root # Otherwise, if one exists then that is the LCA return left_lca if left_lca else right_lca"},{"question":"Write a python function to find the pair of numbers in an array whose sum is equal to a given target. If such a pair exists, return the indices of the two numbers, otherwise return an empty list.","solution":"def find_pair_with_sum(nums, target): Finds the pair of numbers in nums whose sum is equal to target. Args: nums (List[int]): List of integers. target (int): The target sum. Returns: List[int]: The indices of the two numbers if such a pair exists, otherwise an empty list. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a python function to return the first unique element in a list of integers. If there is no unique element, return -1.","solution":"def first_unique_element(lst): Returns the first unique element in a list of integers. If there is no unique element, return -1. element_count = {} # Count the occurrences of each element for num in lst: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 # Find the first unique element for num in lst: if element_count[num] == 1: return num return -1"},{"question":"Write a python function to print all unique characters in a given string along with their frequency count.","solution":"def unique_characters_with_frequency(s): Returns a dictionary of unique characters in the string along with their frequency count. :param s: input string :return: dictionary with unique characters as keys and their counts as values frequency = {} for char in s: if char not in frequency: frequency[char] = 1 else: frequency[char] += 1 return frequency"},{"question":"Write a python function to check if a given string is a polygonal number or not. A polygonal number is a figurate number that represents a polygon. For example, a hexagonal number is any number that can be arranged in the form of a regular hexagon. The nth polygonal number can be calculated using the formula: Pn = n(3n−2)/2. Here, Pn represents the nth polygonal number, and n represents the number of sides of the polygon.","solution":"def is_polygonal_number(num, sides): Check if the given number is a polygonal number for a polygon with the specified number of sides. :param num: int, the number to check :param sides: int, the number of sides of the polygon :return: bool, True if num is a polygonal number, False otherwise # Check for invalid input if num < 1 or sides < 3: return False n = 1 while True: Pn = (n * ((sides - 2) * n - (sides - 4))) // 2 if Pn == num: return True if Pn > num: return False n += 1"},{"question":"Write a python function to generate a list using list comprehension. The list should contain the squares of all even numbers from 0 to 10.","solution":"def generate_even_squares(): Generates a list of squares of all even numbers from 0 to 10. Returns: List[int]: List containing the squares of all even numbers from 0 to 10. return [x**2 for x in range(11) if x % 2 == 0]"},{"question":"Write a python function to print a multiplication table for a given number. The function should also accept two additional parameters: the start and end numbers of the multiplication table.","solution":"def print_multiplication_table(number, start, end): Prints the multiplication table for the given number from start to end. Params: number (int): The number for which multiplication table is to be printed. start (int): The starting integer for the multiplication table. end (int): The ending integer for the multiplication table. if start > end: raise ValueError(\\"Start must be less than or equal to end.\\") for i in range(start, end + 1): print(f\\"{number} * {i} = {number * i}\\")"},{"question":"Write a python function to find the sum of all odd numbers in the Fibonacci sequence below a given limit \`n\`.","solution":"def sum_of_odd_fibonacci(n): Returns the sum of all odd Fibonacci numbers less than the given limit \`n\`. a, b = 0, 1 sum_odd = 0 while b < n: if b % 2 != 0: sum_odd += b a, b = b, a + b return sum_odd"},{"question":"Write a python function to return the kth element from the end of a linked list. Here k is a non-negative integer equal to or less than the length of the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_kth_from_end(head: ListNode, k: int) -> int: Returns the kth element from the end of a linked list. :param head: ListNode, the head of the linked list :param k: int, the position from the end (0-indexed) :return: int, the value of the kth element from the end # First pointer to traverse to the end fast = head # Second pointer to find the kth node from the end slow = head # Move fast pointer k steps ahead for _ in range(k): fast = fast.next # Move both pointers until fast reaches the end while fast.next is not None: fast = fast.next slow = slow.next return slow.value"},{"question":"Write a python function to determine if a given string is a palindrome. I want the function to be case-insensitive and should ignore any non-alphanumeric characters. Non-alphanumeric characters are defined as any character that is not a letter or a digit.","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome. The function is case-insensitive and ignores non-alphanumeric characters. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Compare the cleaned string to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to remove duplicates from a list while maintaining the original order. You can use any data type in the list (e.g., integers, strings, etc.).","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the original order. Parameters: lst (list): A list containing any data type (integers, strings, etc.) Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the maximum and minimum sum of a subarray.","solution":"def max_min_sum_subarray(arr): Finds the maximum and minimum sum of a subarray in the given array. Parameters: arr (list of int): The input array. Returns: tuple: A tuple containing the maximum sum of a subarray and the minimum sum of a subarray. def kadane(arr): Helper function to find the maximum sum of subarray using Kadane's algorithm. max_end = max_so_far = arr[0] for num in arr[1:]: max_end = max(num, max_end + num) max_so_far = max(max_so_far, max_end) return max_so_far def inverted_kadane(arr): Helper function to find the minimum sum of subarray by inverting the values and using Kadane's algorithm. inverted_arr = [-num for num in arr] return -kadane(inverted_arr) max_sum = kadane(arr) min_sum = inverted_kadane(arr) return (max_sum, min_sum)"},{"question":"Write a python function to remove duplicates from a sorted list and return the list in sorted order.","solution":"def remove_duplicates(sorted_list): Removes duplicates from a sorted list and returns the list in sorted order. Args: sorted_list (list): A list of sorted integers. Returns: list: A list with duplicates removed. if not sorted_list: return [] result = [sorted_list[0]] for num in sorted_list[1:]: if num != result[-1]: result.append(num) return result"},{"question":"Write a python function to print the frequency of each character in a string.","solution":"def char_frequency(s): Prints the frequency of each character in the given string. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 for char, freq in frequency_dict.items(): print(f\\"'{char}': {freq}\\") return frequency_dict"},{"question":"Write a python function to find the union of two arrays (without duplicates).","solution":"def union_of_arrays(arr1, arr2): Returns the union of two arrays without duplicates. return list(set(arr1) | set(arr2))"},{"question":"Write a python function to find the median of two sorted arrays \`nums1\` and \`nums2\`. The overall run time complexity should be O(log(m + n)), where \`m\` is the length of \`nums1\` and \`n\` is the length of \`nums2\`. To ensure the solution adheres to this constraint, utilize a binary search technique instead of a straightforward merge and sort approach.","solution":"def find_median_sorted_arrays(nums1, nums2): Find the median of two sorted arrays. The solution uses binary search and runs in O(log(min(m, n))) time. if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j-1]: imin = i + 1 elif i > 0 and nums1[i-1] > nums2[j]: imax = i - 1 else: if i == 0: max_of_left = nums2[j-1] elif j == 0: max_of_left = nums1[i-1] else: max_of_left = max(nums1[i-1], nums2[j-1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"Write a python function to check whether a given number is a perfect cube or not. You will need to implement this function using a binary search algorithm.","solution":"def is_perfect_cube(num): Checks whether a given number is a perfect cube using binary search. if num < 0: return False if num == 0 or num == 1: return True low, high = 0, num while low <= high: mid = (low + high) // 2 cube = mid * mid * mid if cube == num: return True elif cube < num: low = mid + 1 else: high = mid - 1 return False"},{"question":"Write a python function to find the maximum profit from selling and buying a stock exactly once. The function should take a list of daily stock prices as input and return the maximum profit that can be achieved.","solution":"def max_profit(prices): Returns the maximum profit from buying and selling the stock exactly once. :param prices: List[int] :return: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a python function to find the N smallest elements in a list using the quicksort algorithm.","solution":"def quicksort(arr): Quicksort algorithm implementation to sort the list. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def find_n_smallest_elements(arr, n): Returns the N smallest elements in a list using the quicksort algorithm. if n <= 0: return [] sorted_arr = quicksort(arr) return sorted_arr[:n]"},{"question":"Write a python function to reverse a string using a stack. You should use a simple stack implementation (list) and not use any built-in functions like \`reversed()\` or slicing. The stack should follow Last-In-First-Out (LIFO) principles.","solution":"def reverse_string_using_stack(s): Reverses a string using a stack implemented with a list. :param s: The input string to be reversed. :return: The reversed string. stack = [] for char in s: stack.append(char) reversed_str = '' while stack: reversed_str += stack.pop() return reversed_str"},{"question":"Write a python function to create a dictionary whose key is a number from 1 to 50, and the corresponding value is the square of that number. How can you create the dictionary using dictionary comprehension? Dictionary comprehension allows you to create a dictionary in a concise and readable way. For example: my_dict = {key_expression: value_expression for item in iterable}","solution":"def create_square_dict(): Creates a dictionary where the keys are numbers from 1 to 50 and the values are the squares of these numbers. Returns: dict: A dictionary with keys from 1 to 50 and values as their squares. return {i: i**2 for i in range(1, 51)}"},{"question":"Write a python function to find the smallest number in a list using a loop. Calculate the sum of all prime numbers in the list. Since a prime number is greater than 1 and has no divisors other than 1 and itself, implement the function \`sum_prime_numbers(numbers)\` to achieve this.","solution":"def sum_prime_numbers(numbers): Returns the sum of all prime numbers in the list. Parameters: numbers (list): A list of integers. Returns: int: Sum of all prime numbers in the list. def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True prime_sum = 0 for number in numbers: if is_prime(number): prime_sum += number return prime_sum"},{"question":"Write a python function to merge two sorted arrays into a single sorted array. There are no duplicates in either of the arrays. The function should take two parameters: \`array1\` and \`array2\`. Both parameters are sorted arrays.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. Parameters: array1 : list of int, first sorted array array2 : list of int, second sorted array Returns: list of int : merged sorted array merged_array = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] <= array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Append remaining elements of array1 if any while i < len(array1): merged_array.append(array1[i]) i += 1 # Append remaining elements of array2 if any while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Write a python function to find the maximum difference between the adjacent elements of an array.","solution":"def max_adjacent_difference(arr): Returns the maximum difference between adjacent elements in the array. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum difference between adjacent elements. if len(arr) < 2: return 0 # No pairs exist to compare max_diff = 0 for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Write a python function to reverse a linked list in-place. Given a singly linked list, the task is to reverse the list such that the last node becomes the first node, the second-last node becomes the second node, and so on. All pointer changes should be done with constant space.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list in-place. :param head: ListNode, the head node of the singly linked list :return: ListNode, the new head node after reversing the list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to check if a email is valid or not.","solution":"import re def is_valid_email(email): Returns True if the email is valid, otherwise returns False. # Define the regular expression for validating an Email regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' # If the string matches the regular expression, it's a valid email if re.match(regex, email): return True else: return False"},{"question":"Write a python function to find the second highest number in a list. If the list has less than 2 distinct numbers, return None.","solution":"def second_highest(numbers): Returns the second highest number in a list. If the list has less than 2 distinct numbers, return None. distinct_numbers = sorted(set(numbers), reverse=True) return distinct_numbers[1] if len(distinct_numbers) >= 2 else None"},{"question":"Write a python function to calculate the factorial of a given number n, where n is a non-negative integer. The function should return the factorial of n if it's a non-negative integer, else return -1 if n is negative. Additionally, implement exception handling to catch and handle \`TypeError\` and \`ValueError\` exceptions that may occur during the execution of the function.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns -1. If n is not an integer, catches and handles TypeError/ValueError and returns -1. try: if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: return -1 result = 1 for i in range(1, n+1): result *= i return result except (TypeError, ValueError): return -1"},{"question":"Write a python function to generate all possible subsets of a given set of distinct integers. Each subset should be represented as a list. The function should handle duplicates and return the subsets in lexicographic order.","solution":"def generate_subsets(nums): Returns all possible subsets of a list of distinct integers in lexicographic order. from itertools import combinations nums = sorted(nums) result = [] for r in range(len(nums) + 1): for combo in combinations(nums, r): result.append(list(combo)) return result"},{"question":"Write a python function to find the intersection of two sets without using any built-in set operations","solution":"def set_intersection(set1, set2): Finds the intersection of two sets without using any built-in set operations. Args: set1: list, representing the first set. set2: list, representing the second set. Returns: A list containing the elements found in both sets. set1_dict = {item: True for item in set1} intersection = [] for item in set2: if item in set1_dict: intersection.append(item) return intersection"},{"question":"Write a python function to find the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, if \`n\` is 10, the sequence should output 0, 1, 1, 2, 3, 5, 8.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to a given number n. if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to find the second maximum in a list.","solution":"def second_maximum(numbers): Returns the second maximum number in the list. Parameters: numbers (list): A list of numbers Returns: int/float: The second maximum number in the list. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two elements\\") first_max = second_max = float('-inf') for number in numbers: if number > first_max: second_max = first_max first_max = number elif first_max > number > second_max: second_max = number if second_max == float('-inf'): raise ValueError(\\"No second maximum value\\") return second_max"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around. This problem is known as the Kadane's algorithm problem, but with circular array twist.","solution":"def max_subarray_sum_circular(arr): Finds the maximum sum of a subarray in a circular array. def kadanes_algorithm(nums): max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Calculate the maximum subarray sum using standard Kadane's algorithm max_kadane = kadanes_algorithm(arr) # Calculate the maximum subarray sum that includes circular subarrays max_wrap = sum(arr) for i in range(len(arr)): arr[i] = -arr[i] max_wrap = max_wrap + kadanes_algorithm(arr) # If max_wrap is 0, it means all numbers are negative if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a python function to compare two arrays and return a new array containing the maximum elements from each corresponding element. If the arrays have different lengths, the non-overlapping elements of the longer array should be appended to the end of the result.","solution":"def compare_arrays(arr1, arr2): Returns a new array containing the maximum elements from each corresponding element of the input arrays. If the arrays have different lengths, the non-overlapping elements of the longer array are appended to the end of the result. result = [] len1, len2 = len(arr1), len(arr2) min_len = min(len1, len2) for i in range(min_len): result.append(max(arr1[i], arr2[i])) # Append any remaining elements from the longer array if len1 > len2: result.extend(arr1[min_len:]) elif len2 > len1: result.extend(arr2[min_len:]) return result"},{"question":"Write a python function to find all permutations of a given string. Your function should be able to handle strings of any length, including empty strings, and should return a list of all possible permutations.","solution":"from itertools import permutations def find_permutations(string): Returns a list of all permutations of the given string. if string == \\"\\": return [\\"\\"] perm_list = [''.join(p) for p in permutations(string)] return perm_list"},{"question":"Write a python function to find the dimensions (length, width) of the smallest rectangle that can fit a given set of non-overlapping squares.","solution":"def smallest_rectangle(squares): Given a list of squares, return the dimensions (length, width) of the smallest rectangle that can fit all the non-overlapping squares. Args: squares: list of side lengths of squares Returns: (int, int): dimensions (length, width) of the rectangle # Sorting the list of squares in descending order squares.sort(reverse=True) length = 0 width = 0 for square in squares: length += square if square > width: width = square return length, width"},{"question":"Write a python function to factorize an integer N, returning a list of its prime factors. The function should return the list sorted in ascending order.","solution":"def prime_factors(N): Returns a list of prime factors of an integer N, sorted in ascending order. factors = [] # Step 1: Get all 2s that divide N while N % 2 == 0: factors.append(2) N = N // 2 # Step 2: N must be odd at this point so we can skip even numbers for i in range(3, int(N**0.5)+1, 2): while N % i == 0: factors.append(i) N = N // i # Step 3: This condition is to check if N is a prime number greater than 2 if N > 2: factors.append(N) return factors"},{"question":"Write a python function to find all pairs of elements in a list that sum up to a given target number. The function should return all unique pairs where each pair is sorted and the final list of pairs is also sorted by the first element of each pair.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs in the list \`arr\` that sum up to the \`target\`. :param arr: List of integers :param target: Target sum :return: List of tuples representing the pairs, sorted as required arr.sort() pairs = set() seen = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"Write a python function to reverse a string without using additional data structures. reorder the string in-place.","solution":"def reverse_string(s: str) -> str: Reverses a string in place without using additional data structures. Args: s (str): The string to reverse. Returns: str: The reversed string. s = list(s) # Convert to list because strings are immutable start, end = 0, len(s) - 1 while start < end: s[start], s[end] = s[end], s[start] start += 1 end -= 1 return ''.join(s)"},{"question":"Write a python function to find the second smallest number in a list, but ignore duplicates. For example, in the list \`[4, 1, 2, 1, 2, 3, 4]\`, the second smallest number is \`2\`.","solution":"def find_second_smallest(nums): Find the second smallest number in a list, ignoring duplicates. # Convert list to a set to remove duplicates unique_nums = list(set(nums)) # Check if we have at least two unique numbers if len(unique_nums) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") # Sort the unique numbers unique_nums.sort() # Return the second smallest number return unique_nums[1]"},{"question":"Write a python function to solve the following problem: Given an integer n, convert it to a hexadecimal number (base 16).","solution":"def int_to_hex(n): Converts an integer n to its hexadecimal representation. if n < 0: return '-' + hex(n)[3:] # Remove the '0x' and handle negativity return hex(n)[2:] # Remove the '0x' prefix"},{"question":"Write a python function to find duplicate records in a number array in linear time complexity.","solution":"def find_duplicates(nums): Finds duplicate records in a number array. :param nums: List of integers :return: List of duplicates num_set = set() duplicates = set() for num in nums: if num in num_set: duplicates.add(num) else: num_set.add(num) return list(duplicates)"},{"question":"Write a python function to remove all the duplicate values from a list, but keep the order of elements as in the original list. You can't use any built-in functions like set or dict to achieve this.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining order of elements. Args: lst (List): The list from which to remove duplicates. Returns: List: A new list with duplicates removed. seen = [] result = [] for item in lst: if item not in seen: result.append(item) seen.append(item) return result"},{"question":"Write a python function to take a list of strings and return a new list with each string reversed.","solution":"def reverse_strings(string_list): Takes a list of strings and returns a new list with each string reversed. :param string_list: List of strings to be reversed. :return: List of strings with each string reversed. return [s[::-1] for s in string_list]"},{"question":"Write a python function to detect certain keywords in a provided string. The function should return a list of all occurrences of the keywords found. The keywords can be found in any order but need to appear consecutively.","solution":"def detect_keywords(text, keywords): Detects occurrences of consecutive keywords in a string. Parameters: text (str): The text in which to search for keywords. keywords (list): A list of keywords to find in the text. Returns: list: A list of found keyword sequences. found_sequences = [] word_list = text.split() keywords_length = len(keywords) for i in range(len(word_list) - keywords_length + 1): if word_list[i:i + keywords_length] == keywords: found_sequences.append(\\" \\".join(keywords)) return found_sequences"},{"question":"Write a python function to find the nth Fibonacci number. Fibonacci numbers are a sequence of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Write a function that calculates the nth Fibonacci number without using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return \\"Input should be a positive integer\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to filter out all the numbers from the given list and return a new list containing only the strings.","solution":"def filter_strings(input_list): Filters out all the numbers from the input_list and returns a new list containing only the strings. :param input_list: List containing mixed data types :return: A new list containing only strings from the input_list return [element for element in input_list if isinstance(element, str)]"},{"question":"Write a python function to return the maximum product of an array where you are allowed to pick any subset of the array elements such that the product of all those subset elements is greater than 1.","solution":"def max_product_subset(arr): Returns the maximum product of a subset of the array where the product is greater than 1. :param arr: List of integers :return: Maximum product of a subset where the product is greater than 1 if not arr: return 0 positive_numbers = [num for num in arr if num > 1] negative_numbers = sorted([num for num in arr if num < 0]) if len(negative_numbers) % 2 != 0: negative_numbers.pop() product = 1 for num in positive_numbers + negative_numbers: product *= num return product if product > 1 else 0"},{"question":"Write a python function to insert a new node at the end of a circular linked list. A circular linked list is a linked list where all nodes are connected such that the last node points back to the first node.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def insert_end(head, data): Inserts a new node with the given data at the end of the circular linked list. Parameters: head (Node): The head node of the circular linked list. data (any): The data for the new node to be inserted. Returns: Node: The head node of the circular linked list after insertion. new_node = Node(data) if not head: new_node.next = new_node # Point to itself if the list is empty return new_node temp = head while temp.next != head: temp = temp.next temp.next = new_node new_node.next = head return head"},{"question":"Write a python function to remove duplicates from a string.","solution":"def remove_duplicates(input_string): Returns a string with duplicates removed, keeping only the first occurrence of each character. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to get the current coordination based on geographic coordinates of a position.","solution":"import requests def get_current_coordinates(): Returns the current geographic coordinates based on the IP address. try: response = requests.get('http://ip-api.com/json/') data = response.json() if response.status_code == 200 and data['status'] == 'success': return data['lat'], data['lon'] else: raise ValueError(f\\"Error fetching data: {data.get('message', 'Unknown error')}\\") except Exception as e: raise ValueError(f\\"Error fetching data: {str(e)}\\")"},{"question":"Write a python function to calculate the number of 1s in the binary representation of a number. Here, you need to use only bitwise operators and no built-in functions that directly calculate the number of set bits (i.e., the number of 1s).","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of a number n. Uses bitwise operators to perform the calculation. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a python function to return the Levenshtein edit distance of 2 strings.","solution":"def levenshtein_distance(s1, s2): Compute the Levenshtein distance between two strings. if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Write a python function to convert a given JSON string into a Python Dictionary.","solution":"import json def json_to_dict(json_string): Converts a given JSON string into a Python dictionary. Parameters: json_string (str): A string containing the JSON data. Returns: dict: A Python dictionary corresponding to the JSON string. return json.loads(json_string)"},{"question":"Write a python function to determine if a string is a valid parentheses string (VPS).","solution":"def is_valid_parentheses(s): Determine if a string is a valid parentheses string (VPS). Args: s (str): The input string containing only the characters '(' and ')'. Returns: bool: True if the string is a valid parentheses string, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if len(stack) == 0: return False stack.pop() return len(stack) == 0"},{"question":"Write a python function to find the closest value to the target in a given list. If the list is empty, return None. The function should take a list of integers and a target integer as input and return the integer in the list that is closest to the target. If there are multiple integers equally close to the target, return the one that appears first in the list.","solution":"def closest_value(nums, target): Returns the closest value to the target in a given list of integers. Parameters: nums (list of int): List of integers. target (int): The target integer. Returns: int or None: The integer in the list that is closest to the target, or None if the list is empty. if not nums: return None closest = nums[0] min_diff = abs(nums[0] - target) for num in nums[1:]: diff = abs(num - target) if diff < min_diff: closest = num min_diff = diff return closest"},{"question":"Write a python function to determine if a given list of integers contains any duplicates. If it does, the function should return the first duplicate number it encounters. If there are no duplicates, the function should return -1.","solution":"def first_duplicate(nums): Returns the first duplicate number in the list. If there are no duplicates, returns -1. Args: nums : list of int : The list of integers to check for duplicates. Returns: int : The first duplicate number, or -1 if there are no duplicates. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a python function to find the maximum sum of a subarray within a given array. This is known as Kadane's Algorithm. It involves finding contiguous subarray within a one-dimensional array of numbers which has the largest sum. For example, for the array \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the contiguous subarray with the largest sum is \`[4, -1, 2, 1]\` with sum \`6\`.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array. Implements Kadane's Algorithm. Parameters: nums (list of int): The input array of numbers. Returns: int: The maximum sum of the contiguous subarray. if not nums: # Handle empty array case return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to convert a string into a zigzag pattern and then read it line by line. For example, given the string \\"PAYPALISHIRING\\" and number of rows 4, the output should be \\"PINALSIGYAHRPI\\".","solution":"def convert_zigzag(s, numRows): Convert a given string s into a zigzag pattern of numRows and return a new string read line by line. :param s: The input string to be converted. :param numRows: The number of rows for the zigzag pattern. :return: The new string read line by line from the zigzag pattern. if numRows == 1 or numRows >= len(s): return s # Create an array of strings for all rows rows = [''] * min(numRows, len(s)) current_row = 0 going_down = False # Iterate through each character in the input string for char in s: rows[current_row] += char # Change direction when we reach the top or bottom row if current_row == 0 or current_row == numRows - 1: going_down = not going_down current_row += 1 if going_down else -1 # Combine all rows to get the final string return ''.join(rows)"},{"question":"Write a python function to print all factors of a given number (including 1 and the number itself).","solution":"def factors(n): Returns a list of all factors of the given number \`n\` if n <= 0: raise ValueError(\\"Input must be a positive integer\\") result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to find out if a string contains only alphanumeric characters. Here is the provided string: \`\\"Python3.8\\"\`","solution":"def is_alphanumeric(s): Returns True if the string contains only alphanumeric characters, False otherwise. return s.isalnum()"},{"question":"Write a python function to find the prime factors of a given integer. The function should return a list of prime factors, sorted in ascending order. If the input number is less than 2, the function should return an empty list.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer, sorted in ascending order. If the input number is less than 2, returns an empty list. if n < 2: return [] factors = [] divisor = 2 while n >= divisor: if n % divisor == 0: factors.append(divisor) n //= divisor else: divisor += 1 return factors"},{"question":"Write a python function to find the sum of all the prime numbers in a given range from 1 to n (both inclusive).","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n): Returns the sum of all the prime numbers from 1 to n (inclusive). total = 0 for i in range(1, n + 1): if is_prime(i): total += i return total"},{"question":"Write a python function to calculate the factorial of a number. The function should be iterative to avoid the potential stack overflow error that can occur with recursive solutions.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. The function is iterative to avoid stack overflow. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to calculate the sum of series. For the series sum, \`S(n) = 1 + (1/2) + (1/4) + (1/8) +... + (1/2^n)\`. The function should take an integer \`n\` as an argument and return the sum of the series up to the nth term.","solution":"def sum_of_series(n): Calculate the sum of the series S(n) = 1 + (1/2) + (1/4) + (1/8) + ... + (1/2^n). Args: n (int): The number of terms in the series. Returns: float: The sum of the series up to the nth term. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") sum_series = 0.0 for i in range(n + 1): sum_series += 1 / (2**i) return sum_series"},{"question":"Write a python function to sort a list of integers in ascending order using a modified version of the bubble sort algorithm with a flag to optimize for already sorted lists.","solution":"def bubble_sort_optimized(arr): Sorts a list of integers in ascending order using an optimized bubble sort algorithm. The optimization includes a flag to detect if the list is already sorted to avoid unnecessary iterations. :param arr: List[int] - List of integers to be sorted :return: List[int] - Sorted list of integers n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap the elements arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped by inner loop, then break if not swapped: break return arr"},{"question":"Write a python function to find all distinct subsets of an integer array.","solution":"def find_subsets(nums): Returns all distinct subsets of the integer array nums. result = [] nums.sort() # Sorting to handle duplicates def backtrack(start, path): result.append(path) for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: continue backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Write a python function to print all the numbers from 1 to 100 that are divisible by 3 or 5, but not both.","solution":"def numbers_divisible_by_3_or_5_not_both(): Returns a list of numbers from 1 to 100 that are divisible by 3 or 5, but not both. result = [] for i in range(1, 101): if (i % 3 == 0) ^ (i % 5 == 0): # Using XOR to check for 'either but not both' condition result.append(i) return result"},{"question":"Write a python function to check if a given number is prime. Save the function as prime_checker.py. In the function, first declare a variable \`is_prime\` and set it to True. Then, use a for loop to iterate through possible divisors from 2 to the square root of the number being checked. If the number is divisible by any of these divisors, set \`is_prime\` to False and break out of the loop. Finally, return the value of \`is_prime\`.","solution":"import math def prime_checker(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False is_prime = True for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: is_prime = False break return is_prime"},{"question":"Write a python function to generate a list of fibbonacci sequence, where the sequence ends with the given number.","solution":"def fibonacci_sequence_up_to(n): Generates a list of the Fibonacci sequence up to the given number n. The sequence ends with the largest Fibonacci number less than or equal to n. Parameters: - n: The upper limit for the values in the Fibonacci sequence Returns: - A list containing the Fibonacci sequence up to n if n < 0: return \\"Input should be a non-negative integer.\\" sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to check whether a number is a совершен number or not. A совершен number is a number which is equal to the sum of its proper divisors excluding the number itself. For example, 6 is a совершен number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.","solution":"def is_perfect_number(n): Checks whether a number is a perfect number or not. Args: n (int): The number to check. Returns: bool: True if n is a perfect number, False otherwise. if n < 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Write a python function to convert a Unix timestamp to a readable date and time format.","solution":"from datetime import datetime def unix_to_readable(timestamp): Convert a Unix timestamp to a readable date and time format. :param timestamp: Unix timestamp as an integer or float :return: Readable date and time string in the format 'YYYY-MM-DD HH:MM:SS' return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')"},{"question":"Write a python function to count the number of elements in a lists. But instead of using len() function, use a simple for loop.","solution":"def count_elements(lst): Counts the number of elements in the list without using len() function. Parameters: lst (list): List to count elements from. Returns: int: The number of elements in the list. count = 0 for _ in lst: count += 1 return count"},{"question":"Write a python function to find the maximum product of a subarry within a given array. The subarray must contain at least one number and you cannot have any zeros in the array. The array can contain negative numbers as well.","solution":"def max_product_subarray(arr): Returns the maximum product of a subarray within the given array. The subarray must contain at least one number and cannot include any zeros. # Initialize variables to keep track of the maximum product so far, # the minimum product so far, and the global maximum product. max_so_far = arr[0] min_so_far = arr[0] global_max = arr[0] # Traverse through the array starting from the second element. for num in arr[1:]: # If the current number is negative, swap max_so_far and min_so_far if num < 0: max_so_far, min_so_far = min_so_far, max_so_far # Update max_so_far and min_so_far max_so_far = max(num, max_so_far * num) min_so_far = min(num, min_so_far * num) # Update the global maximum product global_max = max(global_max, max_so_far) return global_max"},{"question":"Write a python function to check if a given number is a power of 2. If it is, return the exponent as a string. If it's not, return \\"It is not a power of 2\\". For example, if the function is given the number 64, it should return \\"6\\", because 2^6 = 64.","solution":"def is_power_of_two(n): Check if a given number is a power of 2. If it is, return the exponent as a string. If it's not, return \\"It is not a power of 2\\". if n <= 0: return \\"It is not a power of 2\\" exponent = 0 current_value = n while current_value > 1: if current_value % 2 != 0: return \\"It is not a power of 2\\" current_value = current_value // 2 exponent += 1 return str(exponent)"},{"question":"Write a python function to detect if a sentence is a palindrome, ignoring case and non-alphanumeric characters.","solution":"import re def is_palindrome(sentence): Returns True if the sentence is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lower case. cleaned_sentence = re.sub(r'[^A-Za-z0-9]', '', sentence).lower() # Check if the cleaned sentence is equal to its reverse. return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers, which has been circularly arranged. In a circularly arranged array, the end of the array connects to the beginning.","solution":"def max_subarray_sum_circular(nums): Returns the maximum sum of a contiguous subarray within a circular array. def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(nums) max_wrap = sum(nums) + kadane([-num for num in nums]) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a python function to get the first item in an iterable.","solution":"def get_first_item(iterable): Returns the first item of an iterable. Parameters: iterable (iterable): The iterable from which to get the first item. Returns: The first item of the iterable. for item in iterable: return item raise ValueError(\\"Iterable is empty\\")"},{"question":"Write a python function to print a 10x10 multiplication table.","solution":"def print_multiplication_table(): Prints a 10x10 multiplication table. table = [] for i in range(1, 11): row = [] for j in range(1, 11): row.append(i * j) table.append(row) return table"},{"question":"Write a python function to find the second minimum value from a list of integers. The function should handle edge cases where the list may contain duplicates or be empty.","solution":"def second_minimum(lst): Return the second minimum value from a list of integers. If the list is empty or does not have a second distinct minimum, return None. if len(lst) < 2: return None unique_values = list(set(lst)) # Remove duplicates if len(unique_values) < 2: return None unique_values.sort() return unique_values[1]"},{"question":"Write a python function to insert an element at the beginning of a list without using built-in methods like insert().","solution":"def insert_at_beginning(lst, element): Inserts an element at the beginning of the list without using insert(). return [element] + lst"},{"question":"Write a python function to reverse a given number without using any built-in functions.","solution":"def reverse_number(n): Reverses a given integer number. Parameters: n (int): The integer number to reverse Returns: int: The reversed number reversed_num = 0 negative = n < 0 if negative: n = -n while n > 0: digit = n % 10 reversed_num = reversed_num * 10 + digit n = n // 10 if negative: reversed_num = -reversed_num return reversed_num"},{"question":"Write a python function to find the maximum value in a list without using the built-in max function. You can iterate through the list and keep track of the maximum value as you go. How can you implement this?","solution":"def find_max(lst): Returns the maximum value in the list. Args: lst (list): A list of numeric values. Returns: The maximum value in the list. Raises: ValueError: If the list is empty. if not lst: raise ValueError(\\"List is empty\\") max_value = lst[0] for value in lst[1:]: if value > max_value: max_value = value return max_value"},{"question":"Write a python function to solve the leetcode problem 217 - Contains Duplicate.","solution":"def contains_duplicate(nums): Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. return len(nums) != len(set(nums))"},{"question":"Write a python function to remove all the occurrences of a word in a given text that are enclosed by capital letters and store them in a set. Also, modify the original text so that these occurrences do not appear.","solution":"import re def remove_enclosed_words_and_collect(text): Remove all occurrences of words in the given text that are enclosed by capital letters. Returns the modified text and a set of removed words. pattern = re.compile(r'b[A-Z]+b') # pattern to match words of capital letters removed_words = set(re.findall(pattern, text)) modified_text = re.sub(pattern, '', text) modified_text = re.sub(' +', ' ', modified_text).strip() # clean up possible extra spaces return modified_text, removed_words"},{"question":"Write a python function to find the maximum element in an array. It should return the maximum element found in the array.","solution":"def find_maximum(arr): Returns the maximum element in the array. If the array is empty, returns None. if not arr: return None max_element = arr[0] for element in arr: if element > max_element: max_element = element return max_element"},{"question":"Write a python function to calculate the factorial of a given non-negative integer using a loop. The function should return the factorial.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using a loop. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the nth largest element in an array.","solution":"def nth_largest_element(arr, n): Returns the nth largest element in the given array. Parameters: arr (list): The list of elements. n (int): The rank of the largest element to find. Returns: int: The nth largest element in the array. if not arr or n < 1 or n > len(arr): return None sorted_arr = sorted(arr, reverse=True) return sorted_arr[n-1]"},{"question":"Write a python function to find the maximum element in a list. Here is a list: list = [1, 3, 2, 8, 5] How would you write a function to find the maximum element in this list?","solution":"def find_max_element(lst): Returns the maximum element in the list. if not lst: raise ValueError(\\"List is empty\\") max_element = lst[0] for element in lst: if element > max_element: max_element = element return max_element"},{"question":"Write a python function to find the minimal length of substring in the original string 's' such that it contains all the unique characters in 't'","solution":"def min_length_substring(s, t): from collections import Counter if not t or not s: return 0 dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} min_len = float('inf') min_window = \\"\\" while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < min_len: min_len = r - l + 1 min_window = s[l:r+1] window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return len(min_window)"},{"question":"Write a python function to count the number of unique words in a given string. The function should ignore case and punctuation. You should also return the list of unique words in the order they first appear in the string.","solution":"import re def count_unique_words(text): Counts the number of unique words in a given string. The function should ignore case and punctuation. Also returns the list of unique words in the order they first appear in the string. :param text: Input string :return: A tuple containing the count of unique words and a list of unique words # Remove punctuation and convert to lower case text = re.sub(r'[^ws]', '', text).lower() words = text.split() unique_words = [] seen_words = set() for word in words: if word not in seen_words: seen_words.add(word) unique_words.append(word) return len(unique_words), unique_words"},{"question":"Write a python function to iterate over a list and check if each number is a palindrome. If a number is not a palindrome, append it to a separate list. After the loop, return the list containing non-palindrome numbers.","solution":"def is_palindrome(n): Helper function to check if a number n is a palindrome s = str(n) return s == s[::-1] def find_non_palindromes(lst): Iterates over the given list lst and returns a list containing non-palindrome numbers. non_palindromes = [] for num in lst: if not is_palindrome(num): non_palindromes.append(num) return non_palindromes"},{"question":"Write a python function to get the deepest node in a binary tree. This function returns the node value which is at the maximum depth. If there are multiple nodes at the maximum depth, it returns the value of the leftmost node at that level.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_deepest_node(root): Returns the value of the deepest node in the binary tree. If there are multiple nodes at the maximum depth, returns the value of the leftmost node at that level. if not root: return None # or raise an exception # We will use a queue to perform level-order traversal queue = [(root, 0)] max_depth = -1 deepest_node_value = None while queue: current, depth = queue.pop(0) # Check if we are at a new depth level if depth > max_depth: max_depth = depth deepest_node_value = current.val if current.left: queue.append((current.left, depth + 1)) if current.right: queue.append((current.right, depth + 1)) return deepest_node_value"},{"question":"Write a python function to find the number of unique elements in a given list. The function should take a list as input and return the count of unique elements. Ensure your function is fully documented and follow Python best practices.","solution":"def count_unique_elements(elements): Returns the count of unique elements in the given list. Parameters: elements (list): A list of elements. Returns: int: The count of unique elements in the list. return len(set(elements))"},{"question":"Write a python function to find all words in a given string that start with the letter 'A' or 'a'.","solution":"def find_words_starting_with_a(sentence): Returns a list of all words in the given string that start with the letter 'A' or 'a'. words = sentence.split() return [word for word in words if word.lower().startswith('a')]"},{"question":"Write a python function to determine if a person is eligible for a discount based on their age and membership status. The function should take three parameters: the person's age, the membership status (True if a member, False otherwise), and a special discount flag (True if the special discount is applicable, False otherwise).","solution":"def is_eligible_for_discount(age, is_member, special_discount): Determines if a person is eligible for a discount based on their age, membership status, and a special discount flag. Parameters: age (int): The person's age. is_member (bool): The person's membership status (True if a member, False otherwise). special_discount (bool): The special discount flag (True if the special discount is applicable, False otherwise). Returns: bool: True if the person is eligible for a discount, otherwise False. if special_discount: return True if age < 18 or age >= 65: return True if is_member: return True return False"},{"question":"Write a python function to find the transpose of a given matrix. The function should take a 2D list (matrix) as an input and return the transpose of the matrix. The transpose of a matrix is obtained by swapping the rows with columns.","solution":"def transpose(matrix): Returns the transpose of the given matrix. The transpose of a matrix is obtained by swapping rows with columns. Parameters: matrix (list of list of int/float): The input 2D list (matrix). Returns: list of list of int/float: The transposed matrix. if not matrix: return [] # Transpose the matrix transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] return transposed"},{"question":"Write a python function to validate if a given string is a valid isogram. An isogram is a word or phrase without a repeating letter, ignoring case and not counting spaces and hyphens.","solution":"def is_isogram(s): Checks if the given string s is an isogram. An isogram is a word or phrase without a repeating letter, ignoring case and not counting spaces and hyphens. cleaned_s = ''.join(c.lower() for c in s if c.isalpha()) return len(cleaned_s) == len(set(cleaned_s))"},{"question":"Write a python function to extract all the numbers from a string.","solution":"import re def extract_numbers(s): Extracts all the numbers from a given string and returns them as a list of integers. Parameters: s (str): The input string containing numbers and other characters. Returns: list: A list of integers extracted from the string. return [int(num) for num in re.findall(r'd+', s)]"},{"question":"Write a python function to find the maximum subarray sum using Kadane's Algorithm. Kadane's Algorithm is a dynamic programming approach for solving this problem. The function should take an integer array as input and return the maximum sum of a contiguous subarray within the input array.","solution":"def max_subarray_sum(nums): Find the maximum sum of a contiguous subarray using Kadane's Algorithm. Parameters: nums (List[int]): A list of integers. Returns: int: The maximum sum of the contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to determine whether a given string can be rearranged to form a palindrome by reordering the characters. A string can be rearranged into a palindrome if at most one character has an odd frequency.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: Input string :return: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Write a python function to count the number of leap years in a given range of years. A leap year is defined as a year that is divisible by 4, except for end-of-century years which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not.","solution":"def count_leap_years(start_year, end_year): Count the number of leap years in a given range of years (inclusive). Args: start_year (int): The start year of the range. end_year (int): The end year of the range. Returns: int: Number of leap years in the range. def is_leap_year(year): Check if a year is a leap year. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if year % 4 == 0: if year % 100 != 0 or year % 400 == 0: return True return False leap_years = 0 for year in range(start_year, end_year + 1): if is_leap_year(year): leap_years += 1 return leap_years"},{"question":"Write a python function to check if a number is even or odd. Return a message indicating whether the number is even or odd.","solution":"def check_even_odd(number): Returns a message indicating whether the number is even or odd. if number % 2 == 0: return \\"The number is even\\" return \\"The number is odd\\""},{"question":"Write a python function to calculate the fibonacci series up to a given number n, where each number in the series is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_series(n): Returns a list containing the Fibonacci series up to the given number n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] series = [0, 1] while True: next_val = series[-1] + series[-2] if next_val >= n: break series.append(next_val) return series"},{"question":"Write a python function to implement the bread first search algorithm (BFS) on a binary tree","solution":"from collections import deque class TreeNode: This class represents a node in a binary tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def bfs(root): Perform Breadth First Search (BFS) on a binary tree and return values in level order. if not root: return [] queue = deque([root]) result = [] while queue: current = queue.popleft() result.append(current.value) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result"},{"question":"Write a python function to find the most frequent element in an array. If there are multiple elements with the same highest frequency, return all of them. Note that the array can contain both positive and negative integers.","solution":"from collections import Counter def most_frequent_elements(arr): Finds the most frequent elements in an array. If multiple elements have the same highest frequency, it returns all of them. Parameters: arr (list): A list of integers (can contain both positive and negative). Returns: list: A list of the most frequent elements. if not arr: return [] count = Counter(arr) max_frequency = max(count.values()) most_frequent = [key for key, value in count.items() if value == max_frequency] return most_frequent"},{"question":"def max_product(nums: List[int]) -> int: Given a list of integers \`nums\`, find the maximum product of any two distinct elements in the list. Return the maximum product. >>> max_product([1, 5, 3, 7, 9]) == 63 >>> max_product([-1, -3, -5, 2, 4]) == 15 >>> max_product([5, 3, -1, 9, -7]) == 45 >>> max_product([2, 3]) == 6 >>> max_product([0, 5, 10]) == 50 >>> max_product([0, 0, 2, 3]) == 6 >>> max_product([1000, 3000, 5000, 2000]) == 15000000 >>> max_product([5, 5, 5, 5]) == 25","solution":"def max_product(nums): Returns the maximum product of any two distinct elements in the list. # Sort the list nums.sort() # The maximum product could be from the two highest values or two lowest values (in case they are negative) return max(nums[-1] * nums[-2], nums[0] * nums[1])"},{"question":"def max_coconuts(coconuts: List[List[int]]) -> int: Find the maximum number of coconuts that can be collected while moving from the top-left to the bottom-right of the grid. >>> max_coconuts([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) 12 >>> max_coconuts([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 29 >>> max_coconuts([[0, 0], [0, 0]]) 0 >>> max_coconuts([]) 0 >>> max_coconuts([[]]) 0","solution":"def max_coconuts(coconuts): Find the maximum number of coconuts that can be collected while moving from the top-left to the bottom-right of the grid. if not coconuts or not coconuts[0]: return 0 m, n = len(coconuts), len(coconuts[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = coconuts[0][0] # Initialize first row for j in range(1, n): dp[0][j] = dp[0][j-1] + coconuts[0][j] # Initialize first column for i in range(1, m): dp[i][0] = dp[i-1][0] + coconuts[i][0] # Fill the rest of dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + coconuts[i][j] return dp[m-1][n-1]"},{"question":"import heapq def trap_rain_water(height_map): Given a m x n grid of integers where each cell represents the height at that point, determine the water capacity of the grid. Water capacity is defined as the total amount of water that can be trapped considering the borders of the grid prevent water from escaping. >>> trap_rain_water([]) 0 >>> trap_rain_water([[]]) 0 >>> trap_rain_water([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) 0 >>> trap_rain_water([[1]]) 0 >>> trap_rain_water([[1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1]]) 4 >>> trap_rain_water([[12, 13, 1, 12], [13, 4, 13, 12], [13, 8, 10, 12], [12, 13, 12, 12], [13, 13, 13, 13]]) 14","solution":"import heapq def trap_rain_water(height_map): if not height_map or not height_map[0]: return 0 m, n = len(height_map), len(height_map[0]) visited = [[False] * n for _ in range(m)] heap = [] # Push all the border cells into the heap for i in range(m): for j in range(n): if i == 0 or i == m-1 or j == 0 or j == n-1: heapq.heappush(heap, (height_map[i][j], i, j)) visited[i][j] = True water_trapped = 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: trapped = max(0, height - height_map[nx][ny]) water_trapped += trapped visited[nx][ny] = True heapq.heappush(heap, (max(height, height_map[nx][ny]), nx, ny)) return water_trapped"},{"question":"def sieve_of_eratosthenes(n: int) -> List[int]: Given an integer n, return the list of prime numbers less than n using the Sieve of Eratosthenes algorithm for optimal performance. >>> sieve_of_eratosthenes(0) [] >>> sieve_of_eratosthenes(1) [] >>> sieve_of_eratosthenes(10) [2, 3, 5, 7] >>> sieve_of_eratosthenes(20) [2, 3, 5, 7, 11, 13, 17, 19]","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] primes = [True] * n primes[0] = primes[1] = False for start in range(2, int(n ** 0.5) + 1): if primes[start]: for multiple in range(start*start, n, start): primes[multiple] = False return [num for num, is_prime in enumerate(primes) if is_prime]"},{"question":"import math from typing import Optional def smallest_positive_multiple(a: int, b: int) -> Optional[int]: Returns the smallest positive integer that is a multiple of both a and b. If a or b is non-positive, returns -1. >>> smallest_positive_multiple(2, 3) 6 >>> smallest_positive_multiple(4, 5) 20 >>> smallest_positive_multiple(-1, 3) -1 >>> smallest_positive_multiple(0, 5) -1 >>> smallest_positive_multiple(100, 200) 200 >>> smallest_positive_multiple(123, 456) 18696","solution":"import math def smallest_positive_multiple(a, b): Returns the smallest positive integer that is a multiple of both a and b. If a or b is non-positive, returns -1. if a <= 0 or b <= 0: return -1 return abs(a * b) // math.gcd(a, b)"},{"question":"def length_of_lis(heights): Returns the length of the longest increasing subsequence in heights. >>> length_of_lis([]) == 0 >>> length_of_lis([10]) == 1 >>> length_of_lis([1, 2, 3, 4, 5]) == 5 >>> length_of_lis([5, 4, 3, 2, 1]) == 1 >>> length_of_lis([10, 5, 8, 3, 9, 4, 12, 11]) == 4 >>> length_of_lis([1, 3, 2, 3, 4, 3, 5]) == 5 >>> length_of_lis([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6","solution":"def length_of_lis(heights): Returns the length of the longest increasing subsequence in heights. if not heights: return 0 n = len(heights) # Create a list to store the length of the longest increasing subsequence ending at each index. lis = [1] * n # Iterate through the heights and compute the length of the longest increasing subsequence. for i in range(1, n): for j in range(i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) # The maximum value in lis will be the length of the longest increasing subsequence. return max(lis)"},{"question":"def is_prime(n: int) -> bool: Returns True if n is a prime number, otherwise False. pass def sum_of_primes(start: int, end: int) -> int: Returns the sum of all prime numbers in the inclusive range [start, end]. If there are no primes in the range, returns 0. >>> sum_of_primes(10, 20) 60 >>> sum_of_primes(14, 16) 0 >>> sum_of_primes(1, 10) 17 >>> sum_of_primes(5, 5) 5 >>> sum_of_primes(-10, -1) 0 >>> sum_of_primes(24, 30) 29 >>> sum_of_primes(1, 5) 10 pass","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(start, end): Returns the sum of all prime numbers in the inclusive range [start, end]. If there are no primes in the range, returns 0. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root, u, v): if root is None or root.value == u or root.value == v: return root left_lca = find_lca(root.left, u, v) right_lca = find_lca(root.right, u, v) if left_lca and right_lca: return root return left_lca if left_lca else right_lca def path_sum(root, u, v): Perform queries on a binary tree to find the sum of values of all nodes that lie on the path between nodes \`u\` and \`v\`. Args: root: TreeNode - The root node of the binary tree. u: int - The value of the first node. v: int - The value of the second node. Returns: int - The sum of values of all nodes on the path between nodes \`u\` and \`v\`, inclusive. >>> root = TreeNode(1, TreeNode(2), TreeNode(3)) >>> path_sum(root, 2, 3) 6 lca = find_lca(root, u, v) return sum_values_on_path(lca, u) + sum_values_on_path(lca, v) - lca.value def sum_values_on_path(root, target): if root is None: return 0 if root.value == target: return root.value left_sum = sum_values_on_path(root.left, target) right_sum = sum_values_on_path(root.right, target) if left_sum > 0 or right_sum > 0: return root.value + max(left_sum, right_sum) return 0","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_lca(root, u, v): if root is None or root.value == u or root.value == v: return root left_lca = find_lca(root.left, u, v) right_lca = find_lca(root.right, u, v) if left_lca and right_lca: return root return left_lca if left_lca else right_lca def path_sum(root, u, v): lca = find_lca(root, u, v) return sum_values_on_path(lca, u) + sum_values_on_path(lca, v) - lca.value def sum_values_on_path(root, target): if root is None: return 0 if root.value == target: return root.value left_sum = sum_values_on_path(root.left, target) right_sum = sum_values_on_path(root.right, target) if left_sum > 0 or right_sum > 0: return root.value + max(left_sum, right_sum) return 0"},{"question":"def earliest_path_day(m: int, n: int, cells: List[List[int]]) -> int: Returns the earliest day on which there is a path from the top row to the bottom row, where a path consists of connected land cells horizontally or vertically. If no such path exists, return -1. >>> earliest_path_day(3, 3, [[0,0],[1,0],[2,0],[1,1],[2,1],[2,2],[1,2],[0,1],[0,2]]) == 3 >>> earliest_path_day(3, 3, [[0,0],[1,1],[2,2]]) == -1 >>> earliest_path_day(4, 4, [[0,1],[1,1],[2,1],[3,1],[3,2],[2,2],[1,2],[0,2],[0,3],[1,3],[2,3],[3,3]]) == 4 >>> earliest_path_day(2, 2, [[0,1],[1,1],[1,0],[0,0]]) == 2 >>> earliest_path_day(5, 5, [[0,2],[1,2],[2,2],[3,2],[4,2]]) == 5","solution":"def earliest_path_day(m, n, cells): Returns the earliest day on which there is a path from the top row to the bottom row. parent = {} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] top_roots, bottom_roots = set(), set() for day, (r, c) in enumerate(cells): parent[(r, c)] = (r, c) for dr, dc in dirs: nr, nc = r + dr, c + dc if (nr, nc) in parent: union((r, c), (nr, nc)) if r == 0: top_roots.add(find((r, c))) if r == m - 1: bottom_roots.add(find((r, c))) if any(find(top) in bottom_roots for top in top_roots): return day + 1 return -1"},{"question":"import heapq def dijkstra_shortest_path(matrix: List[List[int]], source: int, destination: int) -> int: Finds the shortest path between source and destination nodes in an undirected, weighted graph represented by the matrix. Parameters: matrix (list of list of int): 2D list representing the graph source (int): The starting node destination (int): The target node Returns: int: Length of the shortest path. Returns -1 if there is no path. >>> matrix = [ ... [0, 0, 0], ... [0, 0, 0], ... [0, 0, 0] ... ] >>> dijkstra_shortest_path(matrix, 0, 1) == -1 >>> matrix = [ ... [0] ... ] >>> dijkstra_shortest_path(matrix, 0, 0) == 0 >>> matrix = [ ... [0, 1], ... [1, 0] ... ] >>> dijkstra_shortest_path(matrix, 0, 1) == 1 >>> matrix = [ ... [0, 1, 4], ... [1, 0, 2], ... [4, 2, 0] ... ] >>> dijkstra_shortest_path(matrix, 0, 2) == 3 >>> matrix = [ ... [0, 7, 9, 0, 0, 14], ... [7, 0, 10, 15, 0, 0], ... [9, 10, 0, 11, 0, 2], ... [0, 15, 11, 0, 6, 0], ... [0, 0, 0, 6, 0, 9], ... [14, 0, 2, 0, 9, 0] ... ] >>> dijkstra_shortest_path(matrix, 0, 4) == 20","solution":"import heapq import sys def dijkstra_shortest_path(matrix, source, destination): Finds the shortest path between source and destination nodes in an undirected, weighted graph represented by the matrix. Parameters: matrix (list of list of int): 2D list representing the graph source (int): The starting node destination (int): The target node Returns: int: Length of the shortest path. Returns -1 if there is no path. n = len(matrix) dist = [float('inf')] * n dist[source] = 0 priority_queue = [(0, source)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if u == destination: return current_dist for v in range(n): if matrix[u][v] > 0: # There is an edge between u and v alt = current_dist + matrix[u][v] if alt < dist[v]: dist[v] = alt heapq.heappush(priority_queue, (alt, v)) return -1 if dist[destination] == float('inf') else dist[destination]"},{"question":"def is_alien_sorted(words: List[str], order: str) -> bool: Determines if the given words are sorted according to the provided alien alphabet order. >>> is_alien_sorted([\\"hello\\", \\"leetcode\\"], \\"hlabcdefgijkmnopqrstuvwxyz\\") == True >>> is_alien_sorted([\\"word\\", \\"world\\", \\"row\\"], \\"worldabcefghijkmnpqstuvxyz\\") == False >>> is_alien_sorted([], \\"abcdefghijklmnopqrstuvwxyz\\") == True >>> is_alien_sorted([\\"zebra\\"], \\"abcdefghijklmnopqrstuvwxyz\\") == True >>> is_alien_sorted([\\"apple\\", \\"apple\\"], \\"abcdefghijklmnopqrstuvwxyz\\") == True >>> is_alien_sorted([\\"apple\\", \\"app\\"], \\"abcdefghijklmnopqrstuvwxyz\\") == False >>> is_alien_sorted([\\"zug\\", \\"zrg\\"], \\"zyxwvutsrqponmlkjihgfedcba\\") == True","solution":"def is_alien_sorted(words, order): Determines if the given words are sorted according to the provided alien alphabet order. :param words: List of strings :param order: A string representing the alien alphabet order :return: True if words are sorted according to the order, False otherwise order_index = {char: idx for idx, char in enumerate(order)} def compare(word1, word2): for c1, c2 in zip(word1, word2): if order_index[c1] < order_index[c2]: return True elif order_index[c1] > order_index[c2]: return False return len(word1) <= len(word2) for i in range(len(words) - 1): if not compare(words[i], words[i + 1]): return False return True"},{"question":"from typing import List def shortest_string_length(s: str) -> int: Returns the length of the shortest string that can be obtained by removing all occurrences of characters that appear at least twice. >>> shortest_string_length(\\"abcde\\") == 5 >>> shortest_string_length(\\"aabbcc\\") == 0 >>> shortest_string_length(\\"abcabcde\\") == 2 >>> shortest_string_length(\\"a\\") == 1 >>> shortest_string_length(\\"abracadabra\\") == 2 pass","solution":"def shortest_string_length(s): Returns the length of the shortest string that can be obtained by removing all occurrences of characters that appear at least twice. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find all characters that appear exactly once in the string single_occurrence_chars = [char for char, count in char_count.items() if count == 1] # Return the total number of characters that appear exactly once return len(single_occurrence_chars)"},{"question":"def count_k_length_substrings_with_no_repeats(s: str, k: int) -> int: Given a string \`s\` and an integer \`k\`, return the number of substrings in \`s\` of length \`k\` with no repeated characters. >>> count_k_length_substrings_with_no_repeats(\\"havefunonleetcode\\", 5) 6 >>> count_k_length_substrings_with_no_repeats(\\"home\\", 5) 0 >>> count_k_length_substrings_with_no_repeats(\\"abcdefg\\", 3) 5 >>> count_k_length_substrings_with_no_repeats(\\"aaaaaaa\\", 2) 0 >>> count_k_length_substrings_with_no_repeats(\\"abcabcabc\\", 3) 7 >>> count_k_length_substrings_with_no_repeats(\\"a\\", 1) 1 >>> count_k_length_substrings_with_no_repeats(\\"\\", 3) 0 >>> count_k_length_substrings_with_no_repeats(\\"abcd\\", 5) 0","solution":"def count_k_length_substrings_with_no_repeats(s, k): Count the number of substrings of length \`k\` in \`s\` that have no repeated characters. :param s: The input string. :param k: The length of the substrings to consider. :return: The number of substrings of length \`k\` with no repeated characters. if k > len(s): return 0 count = 0 char_map = {} start = 0 for end in range(len(s)): end_char = s[end] if end_char in char_map: char_map[end_char] += 1 else: char_map[end_char] = 1 while char_map[end_char] > 1: start_char = s[start] start += 1 char_map[start_char] -= 1 if char_map[start_char] == 0: del char_map[start_char] if end - start + 1 == k: count += 1 start_char = s[start] start += 1 char_map[start_char] -= 1 if char_map[start_char] == 0: del char_map[start_char] return count"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root: TreeNode, targetSum: int) -> List[List[int]]: Find all paths in the binary tree where the sum of the values equals targetSum. Args: root (TreeNode): The root of the binary tree. targetSum (int): The target sum for the paths. Returns: List[List[int]]: A list of lists, where each list represents a path with the sum equal to targetSum. >>> root = TreeNode(5) >>> root.left = TreeNode(4) >>> root.right = TreeNode(8) >>> root.left.left = TreeNode(11) >>> root.right.left = TreeNode(13) >>> root.right.right = TreeNode(4) >>> root.left.left.left = TreeNode(7) >>> root.left.left.right = TreeNode(2) >>> root.right.right.left = TreeNode(5) >>> root.right.right.right = TreeNode(1) >>> pathSum(root, 22) [[5, 4, 11, 2], [5, 8, 4, 5]]","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root, targetSum): def dfs(node, current_path, current_sum): if not node: return current_path.append(node.val) current_sum += node.val if not node.left and not node.right and current_sum == targetSum: result.append(list(current_path)) dfs(node.left, current_path, current_sum) dfs(node.right, current_path, current_sum) current_path.pop() result = [] dfs(root, [], 0) return result"},{"question":"def count_distinct_substrings(s: str) -> int: Given a string s containing only lowercase English letters, return the number of distinct substrings that can be formed. Substrings that are repeated in the string should be counted only once. >>> count_distinct_substrings(\\"abc\\") 6 >>> count_distinct_substrings(\\"aaa\\") 3 >>> count_distinct_substrings(\\"\\") 0 >>> count_distinct_substrings(\\"a\\") 1 >>> count_distinct_substrings(\\"abab\\") 7 >>> count_distinct_substrings(\\"abcd\\") 10","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string s. n = len(s) substrings_set = set() for i in range(n): for j in range(i + 1, n + 1): substr = s[i:j] substrings_set.add(substr) return len(substrings_set)"},{"question":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectCycle(head): Detects the first node of the cycle in the linked list if a cycle is present. Uses O(n) time complexity and O(1) space complexity. :param head: ListNode, the head of the linked list :return: ListNode, the node where the cycle begins; or None if there is no cycle def test_detectCycle_no_cycle(): head = ListNode(3) head.next = ListNode(2) head.next.next = ListNode(0) head.next.next.next = ListNode(-4) assert detectCycle(head) is None def test_detectCycle_with_cycle(): head = ListNode(3) head.next = ListNode(2) head.next.next = ListNode(0) head.next.next.next = ListNode(-4) head.next.next.next.next = head.next assert detectCycle(head) == head.next def test_detectCycle_cycle_at_head(): head = ListNode(1) head.next = head assert detectCycle(head) == head def test_detectCycle_single_node_no_cycle(): head = ListNode(1) assert detectCycle(head) is None def test_detectCycle_two_node_cycle(): head = ListNode(1) head.next = ListNode(2) head.next.next = head assert detectCycle(head) == head def test_detectCycle_complex_cycle(): head = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) head.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # Cycle starts at node2 assert detectCycle(head) == node2","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectCycle(head): Detects the first node of the cycle in the linked list if a cycle is present. Uses O(n) time complexity and O(1) space complexity. :param head: ListNode, the head of the linked list :return: ListNode, the node where the cycle begins; or None if there is no cycle if not head or not head.next: return None slow = head fast = head # Detect if a cycle is present using two pointers while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break if not fast or not fast.next: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"def min_transformation_cost(word1: str, word2: str) -> int: Returns the minimum transformation cost to transform word1 into word2, if possible. If the lengths of word1 and word2 are different, returns -1. >>> min_transformation_cost(\\"abc\\", \\"def\\") == (abs(ord('a') - ord('d')) + abs(ord('b') - ord('e')) + abs(ord('c') - ord('f'))) >>> min_transformation_cost(\\"hello\\", \\"world\\") == (abs(ord('h') - ord('w')) + abs(ord('e') - ord('o')) + abs(ord('l') - ord('r')) + abs(ord('l') - ord('l')) + abs(ord('o') - ord('d'))) >>> min_transformation_cost(\\"aaa\\", \\"aaa\\") == 0 >>> min_transformation_cost(\\"short\\", \\"longer\\") == -1 >>> min_transformation_cost(\\"mismatch\\", \\"length\\") == -1 >>> min_transformation_cost(\\"\\", \\"\\") == 0 >>> min_transformation_cost(\\"nonempty\\", \\"\\") == -1 >>> min_transformation_cost(\\"\\", \\"nonempty\\") == -1","solution":"def min_transformation_cost(word1, word2): Returns the minimum transformation cost to transform word1 into word2, if possible. If the lengths of word1 and word2 are different, returns -1. # Check if the lengths of the words are different if len(word1) != len(word2): return -1 # Calculate the total transformation cost total_cost = 0 for c1, c2 in zip(word1, word2): total_cost += abs(ord(c1) - ord(c2)) return total_cost"},{"question":"from typing import List def find_median_sorted_arrays(arr1: List[int], arr2: List[int]) -> float: Finds the median of two sorted arrays. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: float: Median of the combined sorted arrays. >>> find_median_sorted_arrays([1, 3], [2, 4]) == 2.5 >>> find_median_sorted_arrays([1, 3, 8], [7, 9, 10, 11]) == 8.0 >>> find_median_sorted_arrays([], [1]) == 1.0 >>> find_median_sorted_arrays([2], []) == 2.0 >>> find_median_sorted_arrays([1, 1, 1], [1, 1, 1]) == 1.0 >>> find_median_sorted_arrays([1, 2, 3], [4, 5, 6]) == 3.5 pass","solution":"def find_median_sorted_arrays(arr1, arr2): Finds the median of two sorted arrays. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: float: Median of the combined sorted arrays. def find_median_util(A, B): m, n = len(A), len(B) if m > n: A, B, m, n = B, A, n, m if n == 0: raise ValueError(\\"Both arrays are empty\\") imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and A[i] < B[j-1]: imin = i + 1 elif i > 0 and A[i-1] > B[j]: imax = i - 1 else: if i == 0: max_of_left = B[j-1] elif j == 0: max_of_left = A[i-1] else: max_of_left = max(A[i-1], B[j-1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = B[j] elif j == n: min_of_right = A[i] else: min_of_right = min(A[i], B[j]) return (max_of_left + min_of_right) / 2.0 return find_median_util(arr1, arr2)"},{"question":"def search_range(nums, target): Given a sorted integer array nums and a target value target, this function returns the first and last position of target in nums. If target is not found, returns [-1, -1]. >>> search_range([5, 7, 7, 8, 8, 10], 8) [3, 4] >>> search_range([5, 7, 7, 8, 8, 10], 6) [-1, -1] >>> search_range([], 0) [-1, -1] >>> search_range([1], 1) [0, 0] >>> search_range([1], 2) [-1, -1] >>> search_range([2, 2, 2, 2, 2], 2) [0, 4] >>> nums = [1] * 10000 >>> nums.extend([3] * 10000) >>> search_range(nums, 3) [10000, 19999] >>> search_range(nums, 1) [0, 9999]","solution":"def search_range(nums, target): Finds the first and last position of target in sorted nums. def find_bound(nums, target, is_first): start, end = 0, len(nums) - 1 bound = -1 while start <= end: mid = (start + end) // 2 if nums[mid] == target: bound = mid if is_first: end = mid - 1 # Look on the left side else: start = mid + 1 # Look on the right side elif nums[mid] < target: start = mid + 1 else: end = mid - 1 return bound first_position = find_bound(nums, target, True) last_position = find_bound(nums, target, False) return [first_position, last_position] if first_position != -1 else [-1, -1]"},{"question":"def shortest_subarray_with_sum_at_least_k(nums: List[int], k: int) -> int: Given a list of integers \`nums\`, and an integer \`k\`, return the length of the shortest contiguous subarray whose sum is greater than or equal to \`k\`. If there is no such subarray, return 0. >>> shortest_subarray_with_sum_at_least_k([1, 2, 3], 7) 0 >>> shortest_subarray_with_sum_at_least_k([1, 2, 3, 4], 4) 1 >>> shortest_subarray_with_sum_at_least_k([1, 2, 3], 6) 3 >>> shortest_subarray_with_sum_at_least_k([2, -1, 2, 3, 4], 7) 2 >>> shortest_subarray_with_sum_at_least_k([1, -1, 5, -2, 3], 3) 1 >>> shortest_subarray_with_sum_at_least_k([1, 2, 3, 4, 5], 11) 3","solution":"def shortest_subarray_with_sum_at_least_k(nums, k): from collections import deque n = len(nums) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + nums[i] result = n + 1 dq = deque() for i in range(n + 1): while dq and prefix_sum[i] - prefix_sum[dq[0]] >= k: result = min(result, i - dq.popleft()) while dq and prefix_sum[i] <= prefix_sum[dq[-1]]: dq.pop() dq.append(i) return result if result <= n else 0"},{"question":"def pacific_atlantic(heights: List[List[int]]) -> List[Tuple[int, int]]: Find all cells where water can flow to both the Pacific and Atlantic oceans. >>> pacific_atlantic([ ... [1, 2, 2, 3, 5], ... [3, 2, 3, 4, 4], ... [2, 4, 5, 3, 1], ... [6, 7, 1, 4, 5], ... [5, 1, 1, 2, 4] ... ]) == [(0, 4), (1, 3), (1, 4), (2, 2), (3, 0), (3, 1), (4, 0)] >>> pacific_atlantic([ ... [2, 1], ... [1, 2] ... ]) == [(0, 0), (0, 1), (1, 0), (1, 1)] >>> pacific_atlantic([]) == [] >>> pacific_atlantic([[10]]) == [(0, 0)] >>> pacific_atlantic([ ... [1, 2], ... [4, 3] ... ]) == [(0, 1), (1, 0), (1, 1)]","solution":"def pacific_atlantic(heights): if not heights or not heights[0]: return [] m, n = len(heights), len(heights[0]) def dfs(i, j, visited, prev_height): if (i < 0 or i >= m or j < 0 or j >= n or (i, j) in visited or heights[i][j] < prev_height): return visited.add((i, j)) for direction in [(1, 0), (-1, 0), (0, 1), (0, -1)]: dfs(i + direction[0], j + direction[1], visited, heights[i][j]) pacific_reachable = set() atlantic_reachable = set() for r in range(m): dfs(r, 0, pacific_reachable, heights[r][0]) dfs(r, n - 1, atlantic_reachable, heights[r][n - 1]) for c in range(n): dfs(0, c, pacific_reachable, heights[0][c]) dfs(m - 1, c, atlantic_reachable, heights[m - 1][c]) return list(pacific_reachable & atlantic_reachable)"},{"question":"from typing import List from collections import Counter, defaultdict def min_window(s: str, t: str) -> str: Given a string \`s\` and a string \`t\`, find the minimum window in \`s\` which contains all the characters from \`t\`. If such a window does not exist, return an empty string. If there are multiple minimal windows, return the one which starts first. >>> min_window(\\"ADOBECODEBANC\\", \\"ABC\\") 'BANC' >>> min_window(\\"a\\", \\"a\\") 'a' >>> min_window(\\"a\\", \\"aa\\") '' >>> min_window(\\"aaaaaaaaaaaabbbbbcdd\\", \\"abcdd\\") 'abbbbbcdd' >>> min_window(\\"\\", \\"ABC\\") '' >>> min_window(\\"ABC\\", \\"\\") '' >>> min_window(\\"this is a test string\\", \\"tist\\") 't stri' >>> min_window(\\"abcdef\\", \\"abc\\") 'abc'","solution":"from collections import Counter, defaultdict def min_window(s, t): Returns the minimum window in s which contains all the characters from t. If such a window does not exist, returns an empty string. if not s or not t: return \\"\\" # Dictionary to count all characters in t dict_t = Counter(t) required = len(dict_t) # Left and Right pointer l, r = 0, 0 # Formed is used to keep track of how many unique characters in t # are present in the current window in their desired frequency formed = 0 # Dictionary to count all unique characters in the current window window_counts = defaultdict(int) # (window length, left, right) ans = float(\\"inf\\"), None, None while r < len(s): # Add one character from the right to the window character = s[r] window_counts[character] += 1 # If the frequency of the current character added equals to the # desired count in t then increment the formed count by 1. if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 # Try and contract the window till the point where it ceases to be 'desirable'. while l <= r and formed == required: character = s[l] # Save the smallest window until now. if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) # The character at the position pointed by the \`left\` pointer is no longer a part of the window. window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 # Move the left pointer ahead, this would help to look for a new window. l += 1 # Keep expanding the window once we are done contracting. r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1] : ans[2] + 1]"},{"question":"def product_except_self(arr): Given an array of integers \`arr\`, return a new array \`result\` where \`result[i]\` is the product of all the elements of \`arr\` except \`arr[i]\` without using division. You must solve it in O(n) time complexity and O(1) space complexity, except for the output array \`result\`. Parameters: arr (list): List of integers. Returns: list: List of products. Example: >>> product_except_self([1, 2, 3, 4]) [24, 12, 8, 6] >>> product_except_self([1, 1, 1, 1]) [1, 1, 1, 1] >>> product_except_self([1, 2, 0, 4]) [0, 0, 8, 0] >>> product_except_self([5]) [1] >>> product_except_self([10, 5, 2, 8]) [80, 160, 400, 100] >>> product_except_self([-1, -2, -3, -4]) [-24, -12, -8, -6] >>> product_except_self([1, -2, 3, -4]) [24, -12, 8, -6]","solution":"def product_except_self(arr): Returns a new array where result[i] is the product of all the elements of arr except arr[i]. Parameters: arr (list): List of integers. Returns: list: List of products. n = len(arr) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head: ListNode) -> ListNode: Detect the start of the cycle in a linked list. :type head: ListNode :rtype: ListNode or None >>> detectCycle(ListNode(1)) == None >>> from solution import ListNode, detectCycle def test_no_cycle(): head = ListNode(1) head.next = ListNode(2) head.next.next = ListNode(3) assert detectCycle(head) == None def test_single_node_no_cycle(): head = ListNode(1) assert detectCycle(head) == None def test_cycle_at_head(): head = ListNode(1) head.next = ListNode(2) head.next.next = ListNode(3) head.next.next.next = head assert detectCycle(head) == head # Cycle starts at head def test_cycle_in_middle(): head = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) head.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # Cycle starts at node2 assert detectCycle(head) == node2 # Cycle starts at node2 def test_cycle_at_last_node(): head = ListNode(1) head.next = ListNode(2) last_node = ListNode(3) head.next.next = last_node last_node.next = head.next # Cycle starts at node2 assert detectCycle(head) == head.next # Cycle starts at node2 def test_large_cycle(): head = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node5 = ListNode(5) head.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 node5.next = node3 # Cycle starts at node3 assert detectCycle(head) == node3 # Cycle starts at node3","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Detect the start of the cycle in a linked list. :type head: ListNode :rtype: ListNode or None if not head or not head.next: return None slow = head fast = head # Detect if there is a cycle using two pointers while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected, find the cycle start slow = head while slow != fast: slow = slow.next fast = fast.next return slow return None"},{"question":"def sort_messages(messages): Sorts an array of messages based on their timestamps. Parameters: messages (list of str): Array of message strings prefixed with timestamps in the format [HH:MM:SS]. Returns: list of str: Sorted array of messages in ascending order of their timestamps. Example: >>> sort_messages([\\"[12:34:56] Hello\\", \\"[12:34:55] Hi\\", \\"[12:35:00] What's up?\\", \\"[12:34:57] How are you?\\"]) ['[12:34:55] Hi', '[12:34:56] Hello', '[12:34:57] How are you?', '[12:35:00] What's up?'] # Code to run tests: def test_sort_messages(): assert sort_messages([\\"[12:34:56] Hello\\", \\"[12:34:55] Hi\\", \\"[12:35:00] What's up?\\", \\"[12:34:57] How are you?\\"]) == [ \\"[12:34:55] Hi\\", \\"[12:34:56] Hello\\", \\"[12:34:57] How are you?\\", \\"[12:35:00] What's up?\\" ] def test_sort_messages_with_same_time(): assert sort_messages([\\"[12:34:56] Hello\\", \\"[12:34:56] Hi\\", \\"[12:34:56] What's up?\\", \\"[12:34:56] How are you?\\"]) == [ \\"[12:34:56] Hello\\", \\"[12:34:56] Hi\\", \\"[12:34:56] What's up?\\", \\"[12:34:56] How are you?\\" ] def test_sort_messages_with_single_message(): assert sort_messages([\\"[12:34:56] Hello\\"]) == [ \\"[12:34:56] Hello\\" ] def test_sort_messages_with_no_messages(): assert sort_messages([]) == [] def test_sort_messages_with_varied_times(): assert sort_messages([\\"[01:02:03] Message 1\\", \\"[00:59:59] Message 2\\", \\"[23:59:59] Message 3\\", \\"[12:00:00] Message 4\\"]) == [ \\"[00:59:59] Message 2\\", \\"[01:02:03] Message 1\\", \\"[12:00:00] Message 4\\", \\"[23:59:59] Message 3\\" ]","solution":"def sort_messages(messages): Sorts an array of messages based on their timestamps. Parameters: messages (list of str): Array of message strings prefixed with timestamps in the format [HH:MM:SS]. Returns: list of str: Sorted array of messages in ascending order of their timestamps. # Extract timestamp from each message, sort based on it, and return the sorted list of messages. return sorted(messages, key=lambda message: message[1:9])"},{"question":"from typing import List def min_drones(packages: List[int], maxWeight: int) -> int: Determine the minimum number of drones required to deliver all the packages without exceeding the maximum weight a drone can carry. Args: packages (List[int]): An array of package weights. maxWeight (int): Maximum weight a drone can carry. Returns: int: Minimum number of drones required. Example: >>> min_drones([5, 3, 7, 2, 4, 6], 10) 3 >>> min_drones([10], 10) 1 >>> min_drones([5, 5, 5, 5], 5) 4 >>> min_drones([2, 3, 4, 5, 6], 10) 2 >>> min_drones([15, 3, 12, 7], 15) 3 >>> min_drones([1, 2, 3, 8, 7, 4], 10) 3 pass","solution":"def min_drones(packages, maxWeight): Returns the minimum number of drones required to deliver all the packages with the given max weight constraint. packages.sort(reverse=True) # Sort packages in descending order num_drones = 0 while packages: current_weight = 0 i = 0 while i < len(packages): if current_weight + packages[i] <= maxWeight: current_weight += packages.pop(i) else: i += 1 num_drones += 1 return num_drones"},{"question":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: Rotates the linked list to the right by k places. Args: head (ListNode): The head of the linked list. k (int): The number of places to rotate the list to the right. Returns: ListNode: The head of the modified linked list after rotation. Example: >>> def list_to_pylist(head: ListNode) -> list: ... pylist = [] ... while head: ... pylist.append(head.val) ... head = head.next ... return pylist >>> def pylist_to_list(pylist: list) -> ListNode: ... if not pylist: ... return None ... head = ListNode(pylist[0]) ... current = head ... for val in pylist[1:]: ... current.next = ListNode(val) ... current = current.next ... return head >>> head = pylist_to_list([1, 2, 3, 4, 5]) >>> rotated_head = rotateRight(head, 2) >>> list_to_pylist(rotated_head) [4, 5, 1, 2, 3] >>> head = pylist_to_list([1, 2, 3, 4, 5]) >>> rotated_head = rotateRight(head, 5) >>> list_to_pylist(rotated_head) [1, 2, 3, 4, 5] >>> head = pylist_to_list([1, 2, 3, 4, 5]) >>> rotated_head = rotateRight(head, 7) >>> list_to_pylist(rotated_head) [4, 5, 1, 2, 3] >>> head = pylist_to_list([1]) >>> rotated_head = rotateRight(head, 1) >>> list_to_pylist(rotated_head) [1] >>> head = pylist_to_list([]) >>> rotated_head = rotateRight(head, 3) >>> list_to_pylist(rotated_head) [] # Your code here","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # Compute the length of the list length = 1 tail = head while tail.next: tail = tail.next length += 1 # Make the list circular tail.next = head # Find the new head after rotation k = k % length steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumRootToLeaf(root: TreeNode) -> int: Calculate the sum of all the binary numbers represented by the root-to-leaf paths in a binary tree. The tree node values are either 0 or 1. Return the sum modulo 10^9 + 7. >>> root = TreeNode(1) >>> root.left = TreeNode(0) >>> root.right = TreeNode(1) >>> sumRootToLeaf(root) 5 >>> root = TreeNode(1) >>> root.left = TreeNode(0) >>> root.right = TreeNode(1) >>> root.left.left = TreeNode(0) >>> root.left.right = TreeNode(1) >>> root.right.left = TreeNode(0) >>> root.right.right = TreeNode(1) >>> sumRootToLeaf(root) 22","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumRootToLeaf(root: TreeNode) -> int: MOD = 10**9 + 7 def dfs(node, current_sum): if not node: return 0 current_sum = (current_sum * 2 + node.val) % MOD if not node.left and not node.right: return current_sum left_sum = dfs(node.left, current_sum) right_sum = dfs(node.right, current_sum) return (left_sum + right_sum) % MOD return dfs(root, 0)"},{"question":"def min_replacements_to_palindrome(s: str) -> int: Returns the minimum number of replacements needed to make \`s\` a palindrome. >>> min_replacements_to_palindrome(\\"aaa\\") == 0 >>> min_replacements_to_palindrome(\\"bbb\\") == 0 >>> min_replacements_to_palindrome(\\"ab\\") == 1 >>> min_replacements_to_palindrome(\\"abc\\") == 1 >>> min_replacements_to_palindrome(\\"abcd\\") == 2 >>> min_replacements_to_palindrome(\\"aba\\") == 0 >>> min_replacements_to_palindrome(\\"abba\\") == 0 >>> min_replacements_to_palindrome(\\"a\\") == 0 >>> min_replacements_to_palindrome(\\"b\\") == 0 >>> min_replacements_to_palindrome(\\"\\") == 0","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of replacements needed to make s a palindrome. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"def longestSubstringWithKDistinct(text: str, k: int) -> int: Returns the length of the longest substring of \`text\` that contains at most \`k\` distinct characters. >>> longestSubstringWithKDistinct(\\"eceba\\", 2) == 3 >>> longestSubstringWithKDistinct(\\"aa\\", 1) == 2 >>> longestSubstringWithKDistinct(\\"a\\", 1) == 1 >>> longestSubstringWithKDistinct(\\"abcabcabc\\", 3) == 9 >>> longestSubstringWithKDistinct(\\"abcabcabc\\", 2) == 2 >>> longestSubstringWithKDistinct(\\"abaccc\\", 2) == 4 >>> longestSubstringWithKDistinct(\\"aabbcc\\", 1) == 2 >>> longestSubstringWithKDistinct(\\"\\", 2) == 0 >>> longestSubstringWithKDistinct(\\"abcdefgh\\", 0) == 0 >>> longestSubstringWithKDistinct(\\"abaccc\\", 0) == 0","solution":"def longestSubstringWithKDistinct(text, k): Returns the length of the longest substring of \`text\` that contains at most \`k\` distinct characters. if k == 0: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(text)): char = text[right] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > k: left_char = text[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"from typing import List def num_similar_groups(words: List[str], equiv: List[List[str]]) -> int: Return the number of distinct equivalence classes within the list of words. >>> num_similar_groups([\\"abc\\", \\"def\\", \\"ghi\\"], []) == 3 >>> num_similar_groups([\\"abc\\", \\"def\\", \\"abf\\"], [['a', 'd'], ['b', 'e'], ['c', 'f']]) == 1 >>> num_similar_groups([\\"xyz\\"], [['x', 'y']]) == 1 >>> num_similar_groups([\\"abc\\", \\"xbc\\", \\"ayc\\", \\"xyz\\"], [['a', 'x'], ['a', 'z'], ['b', 'y']]) == 2 >>> num_similar_groups([\\"abc\\", \\"def\\", \\"xyz\\"], [['a', 'd'], ['b', 'e'], ['c', 'f'], ['x', 'y']]) == 2","solution":"from collections import defaultdict def find_representative(graph, char): # Find the representative parent of the character if graph[char] != char: graph[char] = find_representative(graph, graph[char]) return graph[char] def union(graph, a, b): # Union the sets based on two characters a and b rep_a = find_representative(graph, a) rep_b = find_representative(graph, b) if rep_a != rep_b: graph[rep_b] = rep_a # union the sets def num_similar_groups(words, equiv): # Create a union-find structure to manage equivalence groups graph = {} for word in words: for char in word: graph[char] = char # initially every character is its own parent for a, b in equiv: union(graph, a, b) # union the characters in the same group # Using set for equivalence classes of each word equiv_classes = set() for word in words: # Find the representative for each character in the word rep_word = ''.join(sorted(find_representative(graph, char) for char in word)) equiv_classes.add(rep_word) return len(equiv_classes)"},{"question":"def two_sum_sorted(nums: List[int], target: int) -> Tuple[int, int]: Finds two distinct indices such that nums[i] + nums[j] == target. :param nums: List of integers sorted in non-decreasing order :param target: Integer target sum :return: Tuple of indices (i, j) or (-1, -1) if no such indices exist pass def test_two_sum_sorted(): assert two_sum_sorted([1, 2, 3, 4, 5], 9) == (3, 4) assert two_sum_sorted([1, 2, 3, 4, 5], 5) == (0, 3) assert two_sum_sorted([1, 2, 3, 4, 5], 10) == (-1, -1) assert two_sum_sorted([2, 7, 11, 15], 9) == (0, 1) assert two_sum_sorted([2, 3, 4], 6) == (0, 2) assert two_sum_sorted([1, 2, 3, 4, 4, 9, 11, 15], 8) == (3, 4) assert two_sum_sorted([5, 25, 75], 100) == (1, 2) assert two_sum_sorted([], 10) == (-1, -1) assert two_sum_sorted([1], 2) == (-1, -1)","solution":"def two_sum_sorted(nums, target): Finds two distinct indices such that nums[i] + nums[j] == target. :param nums: List of integers sorted in non-decreasing order :param target: Integer target sum :return: Tuple of indices (i, j) or (-1, -1) if no such indices exist left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: return left, right elif current_sum < target: left += 1 else: right -= 1 return -1, -1"},{"question":"def three_sum(nums: List[int]) -> List[List[int]]: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. You may return the triplets in any order. >>> three_sum([-1,0,1,2,-1,-4]) [[-1, -1, 2], [-1, 0, 1]] >>> three_sum([]) [] >>> three_sum([0, 1, 1]) [] >>> three_sum([0, 0, 0]) [[0, 0, 0]] >>> three_sum([-2, 0, 1, 1, 2]) [[-2, 0, 2], [-2, 1, 1]] >>> three_sum([-1,0,1,2,-1,-4,-2,-3,3,0,4]) [[-4, 0, 4], [-4, 1, 3], [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -1, 3], [-2, 0, 2], [-1, -1, 2], [-1, 0, 1]]","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. nums.sort() # Sort the array triplets = [] length = len(nums) for i in range(length - 2): # Skip the duplicates for the first number if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: triplets.append([nums[i], nums[left], nums[right]]) # Skip duplicates for the second and third number while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return triplets"},{"question":"def find_longest_concatenated_word(words: List[str]) -> str: Find the longest string that can be constructed by concatenating other strings from the list. If there are multiple possible results, return the lexicographically smallest one. >>> find_longest_concatenated_word([\\"cat\\", \\"banana\\", \\"dog\\", \\"nana\\", \\"walk\\", \\"walker\\", \\"dogwalker\\"]) == \\"dogwalker\\" >>> find_longest_concatenated_word([\\"rat\\", \\"bat\\", \\"cat\\", \\"ratbatcat\\", \\"batcatrat\\"]) == \\"batcatrat\\" >>> find_longest_concatenated_word([\\"apple\\", \\"orange\\", \\"banana\\"]) == \\"\\" >>> find_longest_concatenated_word([\\"cat\\", \\"cats\\", \\"catsdog\\", \\"dog\\"]) == \\"catsdog\\" >>> find_longest_concatenated_word([]) == \\"\\" >>> find_longest_concatenated_word([\\"word\\"]) == \\"\\"","solution":"def can_construct(word, word_set): if word in word_set: return True for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and can_construct(suffix, word_set): return True return False def find_longest_concatenated_word(words): word_set = set(words) words.sort(key=lambda x: (-len(x), x)) for word in words: word_set.remove(word) if can_construct(word, word_set): return word word_set.add(word) return \\"\\" # Example use case words = [\\"cat\\", \\"banana\\", \\"dog\\", \\"nana\\", \\"walk\\", \\"walker\\", \\"dogwalker\\"] print(find_longest_concatenated_word(words)) # Output: \\"dogwalker\\""},{"question":"def is_path_possible(grid: List[List[int]]) -> bool: Determines if there is a path from the top-left to the bottom-right of a grid. Movement is only allowed if the altitude difference between adjacent cells is at most 1. Parameters: grid (list of list of int): 2D grid representing altitudes. Returns: bool: True if a path exists, False otherwise. >>> is_path_possible([ ... [1, 2, 2], ... [3, 2, 1], ... [1, 2, 1] ... ]) True >>> is_path_possible([ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ]) False >>> is_path_possible([]) False >>> is_path_possible([[1]]) True >>> is_path_possible([ ... [1, 10], ... [10, 1] ... ]) False >>> is_path_possible([ ... [1, 2, 3, 4] ... ]) True","solution":"def is_path_possible(grid): Determines if there is a path from the top-left to the bottom-right of a grid. Movement is only allowed if the altitude difference between adjacent cells is at most 1. Parameters: grid (list of list of int): 2D grid representing altitudes. Returns: bool: True if a path exists, False otherwise. from collections import deque if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) def is_valid(x, y, nx, ny): return 0 <= nx < rows and 0 <= ny < cols and abs(grid[nx][ny] - grid[x][y]) <= 1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = set() queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if (x, y) == (rows - 1, cols - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(x, y, nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"from typing import List def top_k_frequent(nums: List[int], k: int) -> List[int]: Write a function that takes an array of integers \`nums\` and an integer \`k\`, and returns an array of the \`k\` most frequent elements. The result should be sorted by frequency from highest to lowest. If there are multiple elements with the same frequency, sort them by their value in ascending order. >>> top_k_frequent([1, 1, 1, 2, 2, 3], 2) [1, 2] >>> top_k_frequent([1], 1) [1] >>> top_k_frequent([1, 1, 2, 2, 3], 2) [1, 2] >>> top_k_frequent([1, 2, 3, 4, 5], 0) [] >>> top_k_frequent([3, 0, 1, 0], 1) [0] >>> top_k_frequent([4, 4, 5, 5, 6, 6], 2) [4, 5]","solution":"import heapq from collections import Counter def top_k_frequent(nums, k): Returns the k most frequent elements from the array \`nums\`. The result is sorted by frequency from highest to smallest and by value in case of tie. if not nums or k <= 0: return [] # Count the frequency of each element count = Counter(nums) # Use a heap to find the k most frequent elements # Push to heap with frequency as negative for max heap behaviour heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(heap) result = [] for _ in range(k): result.append(heapq.heappop(heap)[1]) return result"},{"question":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be formed with contiguous buildings in the skyline. >>> largest_rectangle_area([]) == 0 >>> largest_rectangle_area([5]) == 5 >>> largest_rectangle_area([2, 4]) == 4 >>> largest_rectangle_area([2, 3, 4, 5, 6]) == 12 >>> largest_rectangle_area([6, 5, 4, 3, 2]) == 12 >>> largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 >>> largest_rectangle_area([3, 3, 3, 3]) == 12 >>> largest_rectangle_area([2, 1, 4, 5, 1, 3, 3]) == 8","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be formed with contiguous buildings in the skyline. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at the top of the stack, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar 'h' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from the stack and calculate the area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"from typing import List def count_unobstructed_views(buildings: List[int]) -> int: Returns the number of buildings that have an unobstructed view of the sunrise. A building has an unobstructed view if no taller building is to its left. :param buildings: List of integers representing the heights of buildings :return: Integer representing the number of buildings having an unobstructed view def test_all_buildings_have_view(): assert count_unobstructed_views([1, 2, 3, 4, 5]) == 5 def test_no_buildings(): assert count_unobstructed_views([]) == 0 def test_single_building(): assert count_unobstructed_views([10]) == 1 def test_alternating_heights(): assert count_unobstructed_views([3, 1, 4, 2, 5]) == 3 def test_decreasing_heights(): assert count_unobstructed_views([5, 4, 3, 2, 1]) == 1 def test_same_heights(): assert count_unobstructed_views([2, 2, 2, 2, 2]) == 1 def test_random_heights(): assert count_unobstructed_views([10, 1, 15, 7, 20, 5]) == 3 def test_all_buildings_blocked(): assert count_unobstructed_views([5, 4, 3, 2, 1]) == 1 def test_no_building_blocking_any(): assert count_unobstructed_views([1, 2, 1, 2, 1]) == 2","solution":"def count_unobstructed_views(buildings): Returns the number of buildings that have an unobstructed view of the sunrise. A building has an unobstructed view if no taller building is to its left. :param buildings: List of integers representing the heights of buildings :return: Integer representing the number of buildings having an unobstructed view if not buildings: return 0 unobstructed_count = 1 max_height = buildings[0] for height in buildings[1:]: if height > max_height: unobstructed_count += 1 max_height = height return unobstructed_count"},{"question":"def max_banners(heights: List[int]) -> int: Returns the maximum number of banners that can be placed on the rooftops of buildings such that no two banners are placed consecutively. >>> max_banners([]) == 0 >>> max_banners([3]) == 1 >>> max_banners([3, 4]) == 1 >>> max_banners([3, 4, 5]) == 2 >>> max_banners([3, 1, 4, 1, 5, 9]) == 3 >>> max_banners([3, 3, 3, 3, 3]) == 3 >>> max_banners([1, 2, 3, 4, 5, 6]) == 3 >>> max_banners([6, 5, 4, 3, 2, 1]) == 3 >>> max_banners([2, 3, 4, 2, 3, 4, 7, 8, 5, 4]) == 5","solution":"def max_banners(heights): Returns the maximum number of banners that can be placed on the rooftops of buildings such that no two banners are placed consecutively. n = len(heights) if n == 0: return 0 # Initialize dp array where dp[i] represents the maximum number of banners up to the i-th building dp = [0] * (n + 1) # Base cases dp[0] = 0 # No buildings, no banners dp[1] = 1 # One building can have one banner for i in range(2, n + 1): dp[i] = max(dp[i-1], dp[i-2] + 1) return dp[n]"},{"question":"def min_window_substring(text: str, pattern: str) -> int: Returns the length of the shortest substring in text that contains all characters in pattern. If no such substring exists, returns -1. >>> min_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") == 4 >>> min_window_substring(\\"a\\", \\"a\\") == 1 >>> min_window_substring(\\"a\\", \\"aa\\") == -1 >>> min_window_substring(\\"hello\\", \\"oell\\") == 4 >>> min_window_substring(\\"this is a test string\\", \\"tist\\") == 6 >>> min_window_substring(\\"\\", \\"a\\") == -1 >>> min_window_substring(\\"abc\\", \\"\\") == -1","solution":"from collections import Counter def min_window_substring(text, pattern): Returns the length of the shortest substring in text that contains all characters in pattern. If no such substring exists, returns -1. if not pattern or not text or len(pattern) > len(text): return -1 pattern_count = Counter(pattern) required = len(pattern_count) left, right = 0, 0 formed = 0 window_counts = {} min_len = float('inf') min_len_window = (-1, -1) while right < len(text): char = text[right] window_counts[char] = window_counts.get(char, 0) + 1 if char in pattern_count and window_counts[char] == pattern_count[char]: formed += 1 while left <= right and formed == required: char = text[left] if right - left + 1 < min_len: min_len = right - left + 1 min_len_window = (left, right) window_counts[char] -= 1 if char in pattern_count and window_counts[char] < pattern_count[char]: formed -= 1 left += 1 right += 1 return min_len if min_len != float('inf') else -1"},{"question":"def countGoodSubarrays(nums: List[int], k: int) -> int: Return the number of good subarrays of nums. >>> countGoodSubarrays([1, 2, 1, 2, 3], 2) == 10 >>> countGoodSubarrays([1], 1) == 1 >>> countGoodSubarrays([1, 2, 3], 4) == 0 >>> countGoodSubarrays([1, 2, 3, 4], 3) == 3 >>> countGoodSubarrays([1, 2, 3, 4], 4) == 1 >>> countGoodSubarrays([1, 1, 1, 1], 1) == 10 pass","solution":"def countGoodSubarrays(nums, k): from collections import defaultdict n = len(nums) MOD = 10**9 + 7 def atLeastKUnique(k): count = defaultdict(int) unique = 0 total = 0 left = 0 for right in range(n): if count[nums[right]] == 0: unique += 1 count[nums[right]] += 1 while unique >= k: total += n - right count[nums[left]] -= 1 if count[nums[left]] == 0: unique -= 1 left += 1 return total return atLeastKUnique(k) % MOD"},{"question":"def rotate_90_degrees_clockwise(matrix: List[List[int]]) -> List[List[int]]: Rotates the given n x n 2D matrix 90 degrees clockwise in place. Args: matrix (List[List[int]]): The n x n 2D matrix to rotate. Returns: List[List[int]]: The modified matrix after rotation. >>> rotate_90_degrees_clockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> rotate_90_degrees_clockwise([[1, 2], [3, 4]]) [[3, 1], [4, 2]]","solution":"def rotate_90_degrees_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. Args: matrix (List[List[int]]): The n x n 2D matrix to rotate. Returns: List[List[int]]: The modified matrix after rotation. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"def check_possibility(nums: List[int]) -> bool: Given an array of non-negative integers \`nums\`, you are allowed to modify at most one element of the array to any value. Return true if you can make the array non-decreasing by modifying at most one element, otherwise return false. An array is considered non-decreasing if \`nums[i] <= nums[i+1]\` holds for every \`i\` (0 <= i < nums.length - 1). >>> check_possibility([1, 2, 3, 4]) True >>> check_possibility([4, 2, 3]) True >>> check_possibility([3, 4, 2, 5]) True >>> check_possibility([3, 4, 2, 3]) False >>> check_possibility([1]) True >>> check_possibility([]) True >>> check_possibility([5, 1, 3]) True >>> check_possibility([1, 2, 2, 3]) True","solution":"def check_possibility(nums): Returns true if the array nums can be made non-decreasing by modifying at most one element, otherwise returns false. n = len(nums) count = 0 for i in range(n - 1): if nums[i] > nums[i + 1]: count += 1 if count > 1: return False if i - 1 >= 0 and nums[i - 1] > nums[i + 1]: nums[i + 1] = nums[i] # Modify nums[i+1] to nums[i] else: nums[i] = nums[i + 1] # Modify nums[i] to nums[i+1] return True"},{"question":"from typing import List def ways_to_split(s: str, k: int) -> int: Returns the number of distinct ways to split the string s into k non-overlapping substrings. >>> ways_to_split(\\"abcde\\", 2) 4 >>> ways_to_split(\\"abcde\\", 3) 6 >>> ways_to_split(\\"\\", 0) 0 >>> ways_to_split(\\"a\\", 1) 1 >>> ways_to_split(\\"abc\\", 4) 0 >>> ways_to_split(\\"abc\\", 0) 0 >>> ways_to_split(\\"abcde\\", 5) 1 >>> ways_to_split(\\"abcde\\", 6) 0 >>> ways_to_split(\\"abcdefghi\\", 10) 0 >>> ways_to_split(\\"abc\\", 3) 1","solution":"from math import comb def ways_to_split(s, k): Returns the number of distinct ways to split the string s into k non-overlapping substrings. n = len(s) if k == 0 or k > n: return 0 return comb(n - 1, k - 1)"},{"question":"def longest_sign_in_duration(logs): Determine the longest continuous duration for which any user was signed-in. :param logs: List of log strings with format \\"<action> <user_id> <timestamp>\\" :return: Tuple (user_id, duration) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-out u1 200\\"]) ('u1', 100) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-in u2 150\\", \\"sign-out u1 200\\", \\"sign-out u2 300\\"]) ('u2', 150) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-out u1 200\\", \\"sign-in u1 250\\", \\"sign-out u1 500\\"]) ('u1', 250) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-out u1 200\\", \\"sign-in u2 300\\", \\"sign-out u2 400\\"]) ('u1', 100) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-in u2 200\\"]) (None, -1) >>> longest_sign_in_duration([\\"sign-in u1 100\\", \\"sign-out u1 200\\", \\"sign-in u2 150\\", \\"sign-sign-in u2 200\\"]) ('u1', 100)","solution":"def longest_sign_in_duration(logs): Determine the longest continuous duration for which any user was signed-in. :param logs: List of log strings with format \\"<action> <user_id> <timestamp>\\" :return: Tuple (user_id, duration) sign_in_time = {} durations = {} for log in logs: action, user_id, timestamp = log.split() timestamp = int(timestamp) if action == \\"sign-in\\": sign_in_time[user_id] = timestamp elif action == \\"sign-out\\" and user_id in sign_in_time: duration = timestamp - sign_in_time[user_id] if user_id in durations: durations[user_id] = max(durations[user_id], duration) else: durations[user_id] = duration del sign_in_time[user_id] max_duration = -1 result_user = None for user_id in durations: if durations[user_id] > max_duration: max_duration = durations[user_id] result_user = user_id return (result_user, max_duration)"},{"question":"from typing import List def find_and_replace_pattern(words: List[str], pattern: str) -> List[str]: Returns a list of all words that match the given pattern. A word in words matches the pattern if swapping certain characters in the word can make it equal to the pattern without changing the relative order of any characters. >>> find_and_replace_pattern([\\"abc\\", \\"deq\\", \\"mee\\", \\"aqq\\", \\"dkd\\", \\"ccc\\"], \\"abb\\") [\\"mee\\", \\"aqq\\"] >>> find_and_replace_pattern([\\"a\\", \\"b\\", \\"c\\"], \\"a\\") [\\"a\\", \\"b\\", \\"c\\"] >>> find_and_replace_pattern([\\"abc\\", \\"cba\\", \\"xyz\\"], \\"aaa\\") [] >>> find_and_replace_pattern([], \\"abc\\") [] >>> find_and_replace_pattern([\\"abcd\\", \\"efgh\\", \\"ijkl\\"], \\"abc\\") [] >>> find_and_replace_pattern([\\"mno\\", \\"onm\\", \\"bba\\"], \\"mno\\") [\\"mno\\", \\"onm\\"]","solution":"def find_and_replace_pattern(words, pattern): def matches(word): if len(word) != len(pattern): return False w_to_p = {} p_to_w = {} for w, p in zip(word, pattern): if w not in w_to_p: w_to_p[w] = p if p not in p_to_w: p_to_w[p] = w if w_to_p[w] != p or p_to_w[p] != w: return False return True return [word for word in words if matches(word)]"},{"question":"from typing import List def shortest_path(grid: List[List[int]]) -> int: Returns the shortest path from the top-left corner to the bottom-right corner of the grid. Each cell in the grid can either be an obstacle (1) or an empty space (0). Moving directions allowed are up, down, left, and right. If there is no valid path, returns -1. >>> shortest_path([ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]) == 5 >>> shortest_path([ [0, 0, 1], [1, 0, 1], [1, 0, 0] ]) == 5 >>> shortest_path([ [0, 1, 0], [1, 1, 0], [0, 0, 0] ]) == -1 >>> shortest_path([ [1, 0, 0], [0, 0, 0], [0, 0, 0] ]) == -1 >>> shortest_path([ [0, 0, 0], [0, 0, 0], [0, 0, 1] ]) == -1 >>> shortest_path([[0]]) == 1 >>> shortest_path([[1]]) == -1 >>> shortest_path([ [0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0] ]) == 9","solution":"from collections import deque def shortest_path(grid): Returns the shortest path from the top-left corner to the bottom-right corner of the grid. Each cell in the grid can either be an obstacle (1) or an empty space (0). Moving directions allowed are up, down, left, and right. If there is no valid path, returns -1. # Dimensions of the grid rows, cols = len(grid), len(grid[0]) # Early exit if start or end is blocked if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS; starting from (0, 0) queue = deque([(0, 0, 1)]) # (row, col, distance) # Set to keep track of visited positions visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # Check if we've reached the bottom-right corner if r == rows - 1 and c == cols - 1: return dist # Explore all 4 possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) # If we exhaust the queue without finding the end, return -1 return -1"},{"question":"def max_perimeter(triangle_vertices): Returns the maximum perimeter of a non-degenerate triangle that can be formed with the given vertices. Parameters: triangle_vertices (list): A list of integers representing the sides. Returns: int: The maximum perimeter of a non-degenerate triangle or 0 if no such triangle can be formed. >>> max_perimeter([2, 1, 2]) 5 >>> max_perimeter([1, 2, 1]) 0 >>> max_perimeter([3, 2, 3, 4]) 10 >>> max_perimeter([3, 6, 2, 3]) 8 >>> max_perimeter([10, 50, 5, 1]) 0 >>> max_perimeter([5, 5, 5, 5]) 15 >>> max_perimeter([15, 10, 7, 4]) 32","solution":"def max_perimeter(triangle_vertices): Returns the maximum perimeter of a non-degenerate triangle that can be formed with the given vertices. Parameters: triangle_vertices (list): A list of integers representing the sides. Returns: int: The maximum perimeter of a non-degenerate triangle or 0 if no such triangle can be formed. # Sort the vertices in descending order triangle_vertices.sort(reverse=True) # Iterate through the sorted list to find the maximum perimeter for i in range(len(triangle_vertices) - 2): if triangle_vertices[i] < triangle_vertices[i + 1] + triangle_vertices[i + 2]: return triangle_vertices[i] + triangle_vertices[i + 1] + triangle_vertices[i + 2] return 0"},{"question":"def removeKdigits(s: str, k: int) -> str: Removes exactly k digits from the string s to form the smallest possible integer. :param s: A string comprised of digits :param k: A positive integer representing the number of digits to remove :return: The smallest possible integer as a string after removing k digits >>> removeKdigits(\\"1432219\\", 3) == \\"1219\\" >>> removeKdigits(\\"10200\\", 1) == \\"200\\" >>> removeKdigits(\\"10\\", 2) == \\"0\\" >>> removeKdigits(\\"112\\", 1) == \\"11\\" >>> removeKdigits(\\"1111111\\", 3) == \\"1111\\" >>> removeKdigits(\\"1234567890\\", 9) == \\"0\\"","solution":"def removeKdigits(s, k): Removes exactly k digits from the string s to form the smallest possible integer. :param s: A string comprised of digits :param k: A positive integer representing the number of digits to remove :return: The smallest possible integer as a string after removing k digits stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, remove the remaining digits from the end while k > 0: stack.pop() k -= 1 # Join the stack to form the resulting number and strip leading zeros return \\"\\".join(stack).lstrip('0') or \\"0\\""},{"question":"def count_quadruplets(arr, x): Count the number of unique quadruplets [a, b, c, d] in the array \`arr\` such that a + b + c + d = x and 0 <= a, b, c, d < len(arr). Return the result modulo 10^9 + 7. Parameters: arr (List[int]): The input array of integers. x (int): The target sum for the quadruplets. Returns: int: The number of unique quadruplets modulo 10^9 + 7 Examples: >>> count_quadruplets([1, 2, 3, 4], 100) 0 >>> count_quadruplets([1, 0, 1, 0], 2) 1 >>> count_quadruplets([1, 1, 1, 1, 1, 1], 4) 15 >>> count_quadruplets([2 for _ in range(1000)], 8) >0 >>> count_quadruplets([], 0) 0 >>> count_quadruplets([0, 0, 0, 0], 0) 1","solution":"def count_quadruplets(arr, x): Count the number of unique quadruplets [a, b, c, d] in the array \`arr\` such that a + b + c + d = x and 0 <= a, b, c, d < len(arr). Return the result modulo 10^9 + 7. from collections import defaultdict MOD = 10**9 + 7 n = len(arr) if n < 4: return 0 quadruplet_count = 0 pair_sum = defaultdict(int) for i in range(1, n - 1): for j in range(i + 1, n): sum_right = arr[i] + arr[j] complement = x - sum_right if complement in pair_sum: quadruplet_count = (quadruplet_count + pair_sum[complement]) % MOD for k in range(0, i): sum_left = arr[k] + arr[i] pair_sum[sum_left] += 1 return quadruplet_count"},{"question":"def find_duplicate_and_missing(nums: List[int]) -> Tuple[int, int]: Find the duplicate number and the missing number in the array nums. Args: nums (list of int): List of integers where each element is in the range [1, n] and contains n elements. Returns: (duplicate, missing) (tuple of int): Tuple containing the duplicate and missing numbers. pass def test_find_duplicate_and_missing(): assert find_duplicate_and_missing([1, 2, 2, 4]) == (2, 3) assert find_duplicate_and_missing([3, 1, 2, 5, 5]) == (5, 4) assert find_duplicate_and_missing([1, 1]) == (1, 2) assert find_duplicate_and_missing([4, 3, 2, 7, 8, 2, 6, 1]) == (2, 5) assert find_duplicate_and_missing([5, 4, 3, 2, 2, 1]) == (2, 6)","solution":"def find_duplicate_and_missing(nums): Find the duplicate number and the missing number in the array nums. Args: nums (list of int): List of integers where each element is in the range [1, n] and contains n elements. Returns: (duplicate, missing) (tuple of int): Tuple containing the duplicate and missing numbers. n = len(nums) total_sum = sum(range(1, n + 1)) total_square_sum = sum(x * x for x in range(1, n + 1)) actual_sum = sum(nums) actual_square_sum = sum(x * x for x in nums) # Let x be the missing number and y be the duplicate number. # We have: # total_sum = actual_sum + x - y # total_square_sum = actual_square_sum + x^2 - y^2 # => total_square_sum = actual_square_sum + (x - y) * (x + y) diff_sum = total_sum - actual_sum # x - y diff_square_sum = total_square_sum - actual_square_sum # (x - y) * (x + y) sum_xy = diff_square_sum // diff_sum # x + y # Solving for x and y x = (diff_sum + sum_xy) // 2 y = sum_xy - x return (y, x)"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): Return the sum of all left leaves in the binary tree represented by the root node. A leave is classified as a left leave if it is the left child of its parent node and it is a leaf (meaning it has no children). >>> sum_of_left_leaves(None) == 0 >>> root = TreeNode(1) >>> sum_of_left_leaves(root) == 0 >>> root = TreeNode(1, left=TreeNode(2)) >>> sum_of_left_leaves(root) == 2 >>> root = TreeNode(1, right=TreeNode(3)) >>> sum_of_left_leaves(root) == 0 >>> root = TreeNode(1, TreeNode(2), TreeNode(3, left=TreeNode(5, left=TreeNode(7)))) >>> sum_of_left_leaves(root) == 9","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): def is_leaf(node): return node is not None and node.left is None and node.right is None def dfs(node): if node is None: return 0 sum_left_leaves = 0 if is_leaf(node.left): sum_left_leaves += node.left.val else: sum_left_leaves += dfs(node.left) sum_left_leaves += dfs(node.right) return sum_left_leaves return dfs(root)"},{"question":"def is_one_edit_away(s: str, t: str) -> bool: Given two strings s and t consisting of only lowercase alphabets, determine if s can be transformed into t by performing at most one edit. An edit is defined as: 1. Inserting a character 2. Removing a character 3. Replacing a character >>> is_one_edit_away('abc', 'abc') True >>> is_one_edit_away('abc', 'abx') True >>> is_one_edit_away('abc', 'abec') True >>> is_one_edit_away('abc', 'ab') True >>> is_one_edit_away('abc', 'def') False >>> is_one_edit_away('a', 'abc') False >>> is_one_edit_away('', 'a') True pass","solution":"def is_one_edit_away(s, t): Returns True if string s can be transformed into string t by performing at most one edit. An edit is defined as: inserting a character, removing a character, or replacing a character. len_s = len(s) len_t = len(t) # If the length difference is more than 1, more than one edit is required if abs(len_s - len_t) > 1: return False # When the lengths are the same, we can only replace one character if len_s == len_t: edit_required = False for i in range(len_s): if s[i] != t[i]: if edit_required: return False edit_required = True return True # When the lengths differ by one, we can only insert or remove one character if len_s > len_t: return check_one_edit_insert_remove(t, s) return check_one_edit_insert_remove(s, t) def check_one_edit_insert_remove(shorter, longer): Returns True if shorter can be transformed into longer by inserting or removing exactly one character. i, j = 0, 0 edit_required = False while i < len(shorter) and j < len(longer): if shorter[i] != longer[j]: if edit_required: return False edit_required = True j += 1 # skip one character in the longer string else: i += 1 j += 1 return True"},{"question":"from typing import List def min_path_sum(grid: List[List[int]]) -> int: Returns the minimum path sum to reach the bottom-right corner of the grid. >>> grid1 = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> min_path_sum(grid1) 21 >>> grid2 = [ ... [42] ... ] >>> min_path_sum(grid2) 42 >>> grid3 = [ ... [1, 2], ... [1, 1] ... ] >>> min_path_sum(grid3) 3 >>> grid4 = [ ... [100, 200], ... [100, 100] ... ] >>> min_path_sum(grid4) 300 >>> grid5 = [] >>> min_path_sum(grid5) 0","solution":"def min_path_sum(grid): Returns the minimum path sum to reach the bottom-right corner of the grid. Parameters: grid (list of list of int): The input grid filled with positive integers. Returns: int: The minimum path sum. if not grid or not grid[0]: return 0 n = len(grid) dp = [[0] * n for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][n - 1]"},{"question":"import math from typing import List def smallest_divisor(nums: List[int], threshold: int) -> int: Find the smallest positive integer divisor such that the sum of the ceiling of the divisions of each element in the list by the divisor is less than or equal to the threshold. >>> smallest_divisor([1, 2, 5, 9], 6) == 5 >>> smallest_divisor([2, 3, 5, 7, 11], 11) == 3 >>> smallest_divisor([100, 200, 300], 7) == 100 >>> smallest_divisor([1000], 5) == 200 >>> smallest_divisor([5, 5, 5, 5, 5], 5) == 5 pass","solution":"import math def smallest_divisor(nums, threshold): def compute_sum(divisor): return sum(math.ceil(num / divisor) for num in nums) left, right = 1, max(nums) while left < right: mid = (left + right) // 2 if compute_sum(mid) > threshold: left = mid + 1 else: right = mid return left"},{"question":"def num_distinct_k_length_substrings(s: str, k: int) -> int: Returns the number of distinct k-length substrings of s. If k is greater than the length of s, returns 0. >>> num_distinct_k_length_substrings(\\"abc\\", 4) 0 >>> num_distinct_k_length_substrings(\\"abcdef\\", 3) 4 >>> num_distinct_k_length_substrings(\\"abacab\\", 3) 4 >>> num_distinct_k_length_substrings(\\"abc\\", 3) 1 >>> num_distinct_k_length_substrings(\\"aaaaa\\", 1) 1 >>> num_distinct_k_length_substrings(\\"abcdef\\", 6) 1 >>> num_distinct_k_length_substrings(\\"aabbcc\\", 3) 4","solution":"def num_distinct_k_length_substrings(s, k): Returns the number of distinct k-length substrings of s. If k is greater than the length of s, returns 0. :param s: A string consisting of lowercase English letters. :param k: An integer, the length of substrings to consider. :return: An integer, the number of distinct k-length substrings. if k > len(s): return 0 substrings = set(s[i:i+k] for i in range(len(s) - k + 1)) return len(substrings)"},{"question":"def longest_contiguous_one(s: str, x: int) -> int: Given a binary string s and an integer x, find the length of the longest contiguous substring of 1's that can be obtained by changing at most one character to 1. >>> longest_contiguous_one(\\"010\\", 1) 2 >>> longest_contiguous_one(\\"10\\", 1) 2 >>> longest_contiguous_one(\\"01\\", 1) 2 >>> longest_contiguous_one(\\"1111\\", 1) 4 >>> longest_contiguous_one(\\"111\\", 1) 3 >>> longest_contiguous_one(\\"0000\\", 1) 1 >>> longest_contiguous_one(\\"1001101\\", 1) 4 >>> longest_contiguous_one(\\"100011000001\\", 1) 3 >>> longest_contiguous_one(\\"1\\", 1) 1 >>> longest_contiguous_one(\\"0\\", 1) 1 >>> longest_contiguous_one(\\"01\\", 1) 2 >>> longest_contiguous_one(\\"10\\", 1) 2 >>> longest_contiguous_one(\\"00100\\", 1) 2","solution":"def longest_contiguous_one(s, x): Given a binary string s and an integer x, this function finds the length of the longest contiguous substring of 1's that can be obtained by changing at most one character to 1. :param s:str: Binary string :param x:int: A placeholder, not used in this particular implementation :return: int: Length of the longest contiguous substring of 1's # To store the maximum length encountered max_len = 0 # Dynamic array to store lengths between '0's lengths = [] # Length of current contiguous segment of '1's curr_len = 0 for char in s: if char == '1': curr_len += 1 else: if curr_len > 0: lengths.append(curr_len) curr_len = 0 lengths.append(0) # adding the last contiguous segment of '1's if exists if curr_len > 0: lengths.append(curr_len) # if we had only '1's initially if '0' not in s: return len(s) # If there were no '1's in the string if '1' not in s: return 1 # Calculate the max length we can have by changing one '0' to '1' for i in range(len(lengths)): if lengths[i] == 0: left_len = lengths[i - 1] if i > 0 else 0 right_len = lengths[i + 1] if i < len(lengths) - 1 else 0 # Check combination of current '0' to '1' max_len = max(max_len, left_len + 1 + right_len) return max_len"},{"question":"def restore_string(s: str, indices: List[int]) -> str: Given a string 's' and an array of integers 'indices' of the same length, transform the string according to the following rule: for every valid index i, the character s[i] should be moved to indices[i]. Return the transformed string. >>> restore_string(\\"codeleet\\", [4,5,6,7,0,2,1,3]) == \\"leetcode\\" >>> restore_string(\\"abc\\", [0,1,2]) == \\"abc\\" >>> restore_string(\\"aiohn\\", [3,1,4,2,0]) == \\"nihao\\" >>> restore_string(\\"aaiougrt\\", [4,0,2,6,7,3,1,5]) == \\"arigatou\\" >>> restore_string(\\"art\\", [1,0,2]) == \\"rat\\" >>> restore_string(\\"\\", []) == \\"\\" # Test with empty string and empty indices","solution":"def restore_string(s, indices): Returns the transformed string according to the given indices. :param s: str - The original string. :param indices: List[int] - The indices to which each character in the string should be moved. :return: str - The transformed string. # Initialize a list with the same length as the input string restored = [''] * len(s) # Iterate over the characters in the string and their respective indices for i, index in enumerate(indices): restored[index] = s[i] # Join the list into a single string and return return ''.join(restored)"},{"question":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root: TreeNode) -> List[int]: Returns the inorder traversal of a binary tree's nodes' values iteratively. :param root: TreeNode, the root of the binary tree :return : List[int], the values in inorder traversal >>> inorder_traversal(None) [] >>> root = TreeNode(1) >>> inorder_traversal(root) [1] >>> root = TreeNode(1, TreeNode(2), TreeNode(3)) >>> inorder_traversal(root) [2, 1, 3] >>> root = TreeNode(1, TreeNode(2, TreeNode(3))) >>> inorder_traversal(root) [3, 2, 1] >>> root = TreeNode(1, None, TreeNode(2, None, TreeNode(3))) >>> inorder_traversal(root) [1, 2, 3] >>> root = TreeNode(4, TreeNode(2, TreeNode(1), TreeNode(3)), TreeNode(5)) >>> inorder_traversal(root) [1, 2, 3, 4, 5] pass","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Returns the inorder traversal of a binary tree's nodes' values. :param root: TreeNode, the root of the binary tree :return : List[int], the values in inorder traversal result = [] stack = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.value) current = current.right return result"},{"question":"def isIsomorphic(s1: str, s2: str) -> bool: Determine if two strings s1 and s2 are isomorphic. >>> isIsomorphic(\\"egg\\", \\"add\\") True >>> isIsomorphic(\\"paper\\", \\"title\\") True >>> isIsomorphic(\\"foo\\", \\"bar\\") False >>> isIsomorphic(\\"ab\\", \\"aa\\") False >>> isIsomorphic(\\"abc\\", \\"ab\\") False >>> isIsomorphic(\\"a\\", \\"bc\\") False >>> isIsomorphic(\\"a\\", \\"a\\") True >>> isIsomorphic(\\"a\\", \\"b\\") True >>> isIsomorphic(\\"\\", \\"\\") True >>> isIsomorphic(\\"abab\\", \\"cdcd\\") True >>> isIsomorphic(\\"abab\\", \\"cccc\\") False","solution":"def isIsomorphic(s1, s2): Determine if two strings s1 and s2 are isomorphic. if len(s1) != len(s2): return False # Dictionaries to store mappings of characters s1_to_s2_mapping = {} s2_to_s1_mapping = {} for c1, c2 in zip(s1, s2): if c1 in s1_to_s2_mapping: if s1_to_s2_mapping[c1] != c2: return False else: s1_to_s2_mapping[c1] = c2 if c2 in s2_to_s1_mapping: if s2_to_s1_mapping[c2] != c1: return False else: s2_to_s1_mapping[c2] = c1 return True"},{"question":"def find_best_and_worst_players(n, matches): Finds the best and worst players in a ping-pong tournament. Parameters: n (int): Number of players matches (list): List of match results where each match is represented as [winner, loser] Returns: list: A list of two lists where the first list contains the IDs of the best players sorted in ascending order, and the second list contains the IDs of the worst players sorted in ascending order. pass from itertools import product def test_no_matches(): assert find_best_and_worst_players(5, []) == [[1, 2, 3, 4, 5], []] def test_all_players_have_played(): assert find_best_and_worst_players(3, [[1, 2], [2, 3], [1, 3]]) == [[1], [3]] def test_some_players_never_played(): assert find_best_and_worst_players(4, [[1, 2], [3, 4]]) == [[1, 3], [2, 4]] def test_all_players_lost_at_least_once(): assert find_best_and_worst_players(3, [[1, 2], [2, 3], [3, 1]]) == [[], []] def test_one_winner_multiple_losers(): assert find_best_and_worst_players(3, [[1, 2], [1, 3]]) == [[1], [2, 3]]","solution":"def find_best_and_worst_players(n, matches): Finds the best and worst players in a ping-pong tournament. Parameters: n (int): Number of players matches (list): List of match results where each match is represented as [winner, loser] Returns: list: A list of two lists where the first list contains the IDs of the best players sorted in ascending order, and the second list contains the IDs of the worst players sorted in ascending order. won_count = [0] * (n + 1) lost_count = [0] * (n + 1) for winner, loser in matches: won_count[winner] += 1 lost_count[loser] += 1 best_players = [player for player in range(1, n + 1) if lost_count[player] == 0] worst_players = [player for player in range(1, n + 1) if won_count[player] == 0 and lost_count[player] > 0] return [sorted(best_players), sorted(worst_players)]"},{"question":"def max_events(events): Determine the maximum number of events that a person can attend given a list of events where each event is represented by its start and end time. The function should return the maximum number of non-overlapping events that one person can attend. >>> max_events([]) == 0 >>> max_events([[1, 2]]) == 1 >>> max_events([[1, 2], [3, 4]]) == 2 >>> max_events([[1, 2], [2, 3], [3, 4]]) == 3 >>> max_events([[1, 4], [2, 3], [3, 5]]) == 2 >>> max_events([[1, 3], [2, 4], [3, 5], [0, 7], [6, 8]]) == 3 >>> max_events([[1, 2], [1, 2], [2, 3], [3, 4]]) == 3 >>> max_events([[1, 2], [2, 3], [2, 3]]) == 2","solution":"def max_events(events): Returns the maximum number of events a person can attend. if not events: return 0 # Sort events primarily by their end time, and secondarily by their start time events.sort(key=lambda x: (x[1], x[0])) current_time = 0 event_count = 0 for start, end in events: if current_time <= start: # Attend this event current_time = end event_count += 1 return event_count"},{"question":"def distinct_elements_in_subarrays(nums): Given an integer array \`nums\`, return an array \`result\` of length \`nums.length\` where \`result[i]\` is the number of distinct elements in the subarray \`nums[i...len(nums)-1]\` (0-indexed) with the last element always being \`nums[len(nums)-1]\`. A subarray is a contiguous non-empty sequence of elements within an array, and \`nums[i...len(nums)-1]\` denotes a subarray starting from index \`i\` to the end of the array. >>> distinct_elements_in_subarrays([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1] >>> distinct_elements_in_subarrays([1, 2, 2, 3, 3]) == [3, 2, 2, 1, 1] >>> distinct_elements_in_subarrays([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1] >>> distinct_elements_in_subarrays([5, 3, 3, 3, 2, 1]) == [4, 3, 3, 3, 2, 1] >>> distinct_elements_in_subarrays([1]) == [1] >>> distinct_elements_in_subarrays([]) == [] >>> distinct_elements_in_subarrays([1, 2, 2, 3, 1, 4]) == [4, 4, 4, 3, 2, 1] >>> distinct_elements_in_subarrays([5, 5, 4, 4, 4, 3]) == [3, 3, 2, 2, 2, 1]","solution":"def distinct_elements_in_subarrays(nums): Returns an array where each element is the number of distinct elements in the subarray nums[i...len(nums)-1]. result = [0] * len(nums) seen_elements = set() for i in reversed(range(len(nums))): seen_elements.add(nums[i]) result[i] = len(seen_elements) return result"},{"question":"from typing import List def max_k_interval_sum(nums: List[int], k: int) -> int: Returns the maximum k-interval sum in the nums array. If there are no such intervals, return 0. >>> max_k_interval_sum([1,2,3,4,5], 2) 9 >>> max_k_interval_sum([1,2,3,4,5], 3) 12 >>> max_k_interval_sum([1, -2, 3, 4, -1, 2], 3) 6 >>> max_k_interval_sum([-3, -2, -1, -5], 2) -3 >>> max_k_interval_sum([], 3) 0 >>> max_k_interval_sum([1, 2], 3) 0 >>> max_k_interval_sum([10, -10, 20, -20, 30], 1) 30 >>> max_k_interval_sum([1, 2, 3, 4, 5], 5) 15","solution":"def max_k_interval_sum(nums, k): Returns the maximum k-interval sum in the nums array. If nums is empty or k is greater than the length of nums, return 0. if not nums or k > len(nums): return 0 max_sum = float('-inf') current_sum = sum(nums[:k]) max_sum = current_sum for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"def max_sum_rectangle(grid: List[List[int]]) -> int: Returns the maximum sum of any rectangle within the given grid. >>> max_sum_rectangle([[2]]) == 2 >>> max_sum_rectangle([ ... [-1, -2], ... [-3, -4] ... ]) == -1 >>> max_sum_rectangle([ ... [2, 1, -3, -4, 5], ... [0, 6, 3, 4, 1], ... [2, -2, -1, 4, -5], ... [-3, 3, 1, 0, 3] ... ]) == 18 >>> max_sum_rectangle([ ... [0, 0, 0], ... [0, 0, 0], ... [0, 0, 0] ... ]) == 0 >>> max_sum_rectangle([ ... [1, -2, 3, 4] ... ]) == 7 >>> max_sum_rectangle([ ... [1], ... [-2], ... [3], ... [4] ... ]) == 7 >>> max_sum_rectangle([ ... [1, 2, -1, -4, -20], ... [-8, -3, 4, 2, 1], ... [3, 8, 10, 1, 3], ... [-4, -1, 1, 7, -6] ... ]) == 29","solution":"def max_sum_rectangle(grid): Returns the maximum sum of any rectangle within the given grid. if not grid or not grid[0]: return 0 max_sum = float('-inf') rows, cols = len(grid), len(grid[0]) for left in range(cols): row_sum = [0] * rows for right in range(left, cols): for i in range(rows): row_sum[i] += grid[i][right] current_max = max_subarray_sum(row_sum) max_sum = max(max_sum, current_max) return max_sum def max_subarray_sum(arr): Helper function to find the maximum sum of any contiguous subarray. curr_sum = max_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"def min_coins(nums: List[int], target: int) -> int: Returns the minimum number of coins required to make the target amount using the given coin denominations. If it's not possible to make the target amount, returns -1. >>> min_coins([1, 2, 5], 11) == 3 # 5 + 5 + 1 >>> min_coins([2], 3) == -1 # Not possible >>> min_coins([1, 3, 4], 6) == 2 # 3 + 3 >>> min_coins([1], 0) == 0 # No coins needed for 0 >>> min_coins([1, 5, 10], 28) == 6 # 10 + 10 + 5 + 1 + 1 + 1 >>> min_coins([1, 5, 10], 30) == 3 # 10 + 10 + 10","solution":"def min_coins(nums, target): Returns the minimum number of coins required to make the target amount using the given coin denominations. If it's not possible to make the target amount, returns -1. # Initialize the DP array with a value larger than any possible number of coins dp = [float('inf')] * (target + 1) dp[0] = 0 # Base case: no coins are needed to make 0 amount for coin in nums: for x in range(coin, target + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # Take the minimum of including the current coin or not return dp[target] if dp[target] != float('inf') else -1"},{"question":"class ArrayOperations: A class to perform operations on an array of integers. Methods: 1. addElement(value: int) -> None: Adds the integer \`value\` to the end of the array. 2. removeElement(value: int) -> None: Removes the first occurrence of the integer \`value\` from the array. If the value does not exist, do nothing. 3. findMedian() -> Optional[float]: Returns the median of all elements in the array. If the array is empty, return None. >>> array_ops = ArrayOperations() >>> array_ops.addElement(1) >>> array_ops.addElement(3) >>> array_ops.addElement(2) >>> array_ops.findMedian() 2.0 >>> array_ops.removeElement(2) >>> array_ops.findMedian() 2.0 >>> array_ops.addElement(4) >>> array_ops.findMedian() 3.0 def __init__(self): self.array = [] def addElement(self, value): pass def removeElement(self, value): pass def findMedian(self): pass","solution":"class ArrayOperations: def __init__(self): self.array = [] def addElement(self, value): self.array.append(value) self.array.sort() def removeElement(self, value): try: self.array.remove(value) except ValueError: pass # If the value does not exist, do nothing def findMedian(self): n = len(self.array) if n == 0: return None if n % 2 == 1: # Odd number of elements return float(self.array[n // 2]) else: # Even number of elements mid1 = self.array[n // 2 - 1] mid2 = self.array[n // 2] return (mid1 + mid2) / 2"},{"question":"def max_sum_of_k_consecutive(nums: List[int], k: int) -> int: Returns the maximum sum of k consecutive elements in the array nums. If nums has fewer than k elements, returns -1. >>> max_sum_of_k_consecutive([1, 2, 3, 4, 5], 2) 9 >>> max_sum_of_k_consecutive([1, 2, 3, 4, 5], 5) 15 >>> max_sum_of_k_consecutive([1, 2, 3, 4, 5], 6) -1 >>> max_sum_of_k_consecutive([1, 2, 3, 4, 5], 1) 5 >>> max_sum_of_k_consecutive([-1, -2, -3, -4, -5], 2) -3 >>> max_sum_of_k_consecutive([-1, -2, -3, -4, 5], 3) -2 >>> max_sum_of_k_consecutive([], 1) -1 >>> max_sum_of_k_consecutive([1], 1) 1 >>> max_sum_of_k_consecutive([-1], 1) -1","solution":"def max_sum_of_k_consecutive(nums, k): Returns the maximum sum of k consecutive elements in the array nums. If nums has fewer than k elements, returns -1. n = len(nums) if n < k: return -1 max_sum = sum(nums[:k]) current_sum = max_sum for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"def restore_string(s: str, indices: List[int]) -> str: Shuffles the string \`s\` such that the character at the i-th position moves to \`indices[i]\` in the shuffled string. Parameters: s (str): The input string to be shuffled. indices (List[int]): The permutation of indices. Returns: str: The shuffled string. >>> restore_string(\\"codeleet\\", [4,5,6,7,0,2,1,3]) == \\"leetcode\\" >>> restore_string(\\"abc\\", [0,1,2]) == \\"abc\\" >>> restore_string(\\"aiohn\\", [3,1,4,2,0]) == \\"nihao\\" >>> restore_string(\\"a\\", [0]) == \\"a\\" >>> restore_string(\\"abcd\\", [3,2,1,0]) == \\"dcba\\" >>> restore_string(\\"abcd\\", [1,3,0,2]) == \\"cadb\\"","solution":"def restore_string(s, indices): Shuffles the string \`s\` such that the character at the i-th position moves to \`indices[i]\` in the shuffled string. Parameters: s (str): The input string to be shuffled. indices (List[int]): The permutation of indices. Returns: str: The shuffled string. shuffled = [''] * len(s) for i, index in enumerate(indices): shuffled[index] = s[i] return ''.join(shuffled)"},{"question":"def partition_list(arr, k): Partition the list such that all elements less than k come before elements equal to k, which must come before elements greater than k. Relative ordering of elements in each partition is preserved. >>> partition_list([1, 4, 3, 2, 5], 3) [1, 2, 3, 4, 5] >>> partition_list([1, 4, 3, 3, 2, 5], 3) [1, 2, 3, 3, 4, 5] >>> partition_list([2, 2, 2, 2], 2) [2, 2, 2, 2] >>> partition_list([1, 2, 3, 4, 5], 3) [1, 2, 3, 4, 5] >>> partition_list([1, 2, 4, 5], 3) [1, 2, 4, 5] >>> partition_list([-1, -4, 3, 2, 0, -5, 3], 0) [-1, -4, -5, 0, 3, 2, 3] >>> partition_list([], 3) []","solution":"def partition_list(arr, k): Partition the list such that all elements less than k come before elements equal to k, which must come before elements greater than k. Relative ordering of elements in each partition is preserved. less_than_k = [] equal_to_k = [] greater_than_k = [] for num in arr: if num < k: less_than_k.append(num) elif num == k: equal_to_k.append(num) else: greater_than_k.append(num) return less_than_k + equal_to_k + greater_than_k"},{"question":"def is_valid_password(inputStr: str) -> bool: Checks if the provided password meets the criteria for a valid password. A valid password: - Contains at least one uppercase letter. - Contains at least one lowercase letter. - Contains at least one digit. - Contains at least one special character (non-alphanumeric). >>> is_valid_password(\\"Password1!\\") == True >>> is_valid_password(\\"A1!b2@C3#\\") == True >>> is_valid_password(\\"password1!\\") == False >>> is_valid_password(\\"PASSWORD1!\\") == False >>> is_valid_password(\\"Password!\\") == False >>> is_valid_password(\\"Password1\\") == False >>> is_valid_password(\\"password\\") == False >>> is_valid_password(\\"PASSWORD\\") == False >>> is_valid_password(\\"12345678\\") == False >>> is_valid_password(\\"!@#%^&*\\") == False","solution":"import string def is_valid_password(inputStr): Returns True if inputStr is a valid password based on the defined criteria, else returns False. has_upper = any(char.isupper() for char in inputStr) has_lower = any(char.islower() for char in inputStr) has_digit = any(char.isdigit() for char in inputStr) has_special = any(char in string.punctuation for char in inputStr) return has_upper and has_lower and has_digit and has_special"},{"question":"class MaxStack: Implement a class MaxStack that supports the following operations: * push(x: int) -> None: Pushes x onto the stack. * pop() -> int: Removes the element on the top of the stack and returns it. * top() -> int: Returns the element on the top of the stack. * getMax() -> int: Retrieves the maximum element in the stack without removing it. Example: >>> maxStack = MaxStack() >>> maxStack.push(5) >>> maxStack.push(1) >>> maxStack.push(5) >>> maxStack.top() 5 >>> maxStack.pop() 5 >>> maxStack.top() 1 >>> maxStack.getMax() 5 >>> maxStack.pop() 1 >>> maxStack.top() 5 def __init__(self): Initialize your data structure here. # Your code here def push(self, x: int) -> None: # Your code here def pop(self) -> int: # Your code here def top(self) -> int: # Your code here def getMax(self) -> int: # Your code here","solution":"class MaxStack: def __init__(self): Initialize your data structure here. self.stack = [] self.max_stack = [] def push(self, x: int) -> None: self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self) -> int: if self.stack: value = self.stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() return value def top(self) -> int: if self.stack: return self.stack[-1] def getMax(self) -> int: if self.max_stack: return self.max_stack[-1]"},{"question":"def find_peak_element(nums: List[int]) -> int: Finds a peak element in the array and returns its index. A peak element is an element that is strictly greater than its neighbors. >>> find_peak_element([1]) 0 >>> find_peak_element([1, 2]) 1 >>> find_peak_element([2, 1]) 0 >>> find_peak_element([1, 3, 2]) 1 >>> find_peak_element([1, 3, 2, 4, 1]) 1","solution":"def find_peak_element(nums): This function finds a peak element in the array and returns its index. A peak element is an element that is strictly greater than its neighbors. :param nums: List of integers representing the array. :return: Index of a peak element. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"def rank_cars(cars): Returns the ranks of cars based on their speeds. If two cars have the same speed, they share the same rank. >>> rank_cars([100, 200, 150]) == [3, 1, 2] >>> rank_cars([100, 200, 200, 150]) == [4, 1, 1, 3] >>> rank_cars([100, 100, 100]) == [1, 1, 1] >>> rank_cars([100]) == [1] >>> rank_cars([50, 200, 150, 100]) == [4, 1, 2, 3] >>> rank_cars([0, 0, 0, 100]) == [2, 2, 2, 1]","solution":"def rank_cars(cars): Returns the ranks of cars based on their speeds. If two cars have the same speed, they share the same rank. # Create a list of (speed, index) tuples indexed_cars = [(speed, i) for i, speed in enumerate(cars)] # Sort the list by speed in descending order indexed_cars.sort(reverse=True, key=lambda x: x[0]) # Create an array to store the rank of each car ranks = [0] * len(cars) # Initialize the rank and previous speed variables rank = 1 prev_speed = indexed_cars[0][0] for i, (speed, index) in enumerate(indexed_cars): if speed != prev_speed: rank = i + 1 ranks[index] = rank prev_speed = speed return ranks"},{"question":"def find_two_odd_numbers(arr: List[int]) -> List[int]: Given an array \`arr\` of integers where every integer appears an even number of times except for exactly two integers which appear an odd number of times, return the two integers that appear an odd number of times. The result should be in ascending order and the solution should be in linear time and constant space. >>> find_two_odd_numbers([1, 2, 3, 2, 3, 1, 4, 4, 5, 5, 6, 6, 7, 8]) [7, 8] >>> find_two_odd_numbers([10, 9, 8, 8, 7, 10, 7, 6, 6, 5]) [5, 9] >>> find_two_odd_numbers([20, 20, 19, 18, 19, 17, 18, 17, 15, 16, 15, 16, 23, 24]) [23, 24] >>> find_two_odd_numbers([99, 99, 98, 98, 97, 95, 94, 95, 96, 94, 96, 97, 89, 88]) [88, 89] >>> find_two_odd_numbers([4, 4, 6, 2, 6, 2, 5, 5, 7, 3, 3, 8]) [7, 8]","solution":"def find_two_odd_numbers(arr): Find two numbers that appear an odd number of times in the array. Return them in ascending order. xor_result = 0 # XOR all elements to get xor_result which is the XOR of the two odd occurring numbers for num in arr: xor_result ^= num # Find the rightmost set bit in xor_result set_bit_no = xor_result & -xor_result # Initialize the two odd occurring numbers x = 0 y = 0 # Divide elements into two groups and XOR separately for num in arr: if num & set_bit_no: x ^= num # XOR of first set else: y ^= num # XOR of second set # x and y are the two numbers that appear an odd number of times return sorted([x, y])"},{"question":"def shift_right(arr, m): Shifts elements of the list arr to the right by m positions. If m is larger than the length of the list, m is considered as m % len(arr). Args: arr (list): The list to be shifted. m (int): Number of positions to shift. Returns: list: The list after shifting elements to the right. >>> shift_right([], 3) == [] >>> shift_right([1, 2, 3, 4], 0) == [1, 2, 3, 4] >>> shift_right([1, 2, 3, 4], 2) == [3, 4, 1, 2] >>> shift_right([1, 2, 3, 4], 4) == [1, 2, 3, 4] >>> shift_right([1, 2, 3, 4], 6) == [3, 4, 1, 2] >>> shift_right([1], 5) == [1] >>> shift_right([-1, -2, -3, -4], 1) == [-4, -1, -2, -3] >>> shift_right([-1, -2, -3, -4], 3) == [-2, -3, -4, -1] pass","solution":"def shift_right(arr, m): Shifts elements of the list arr to the right by m positions. If m is larger than the length of the list, m is considered as m % len(arr). Args: arr (list): The list to be shifted. m (int): Number of positions to shift. Returns: list: The list after shifting elements to the right. n = len(arr) if n == 0: return arr m = m % n # consider m as m % n arr[:] = arr[-m:] + arr[:-m] return arr"},{"question":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_closest_leaf(root: TreeNode, target: int) -> int: Return the value of the nearest leaf node to the target node in the binary tree. >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> root.right.left = TreeNode(6) >>> root.right.right = TreeNode(7) >>> find_closest_leaf(root, 3) in [6, 7] True >>> root = TreeNode(1) >>> find_closest_leaf(root, 1) 1 >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> find_closest_leaf(root, 4) 4 >>> find_closest_leaf(root, 5) 5 >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.left.left = TreeNode(6) >>> root.right.left = TreeNode(5) >>> find_closest_leaf(root, 1) in [5, 6] True >>> find_closest_leaf(None, 1) is None True","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_closest_leaf(root, target): if not root: return None def dfs(node, parent=None): if node: node.parent = parent if node.left: dfs(node.left, node) if node.right: dfs(node.right, node) queue = deque() visited = set() def add_to_queue(node): queue.append(node) visited.add(node) dfs(root) # Find the target node def find_target(node, target): if not node: return None if node.val == target: return node left = find_target(node.left, target) if left: return left return find_target(node.right, target) target_node = find_target(root, target) add_to_queue(target_node) while queue: node = queue.popleft() if (node.left is None and node.right is None): return node.val for neighbour in (node.left, node.right, node.parent): if neighbour and neighbour not in visited: add_to_queue(neighbour)"},{"question":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. :param s: A string consisting of lowercase English letters. :return: Length of the longest substring with unique characters. >>> length_of_longest_substring('') == 0 >>> length_of_longest_substring('a') == 1 >>> length_of_longest_substring('abcdef') == 6 >>> length_of_longest_substring('abcabcbb') == 3 >>> length_of_longest_substring('pwwkew') == 3 >>> length_of_longest_substring('abcdefghijklmnopqrstuvwxyz') == 26 >>> length_of_longest_substring('abccba') == 3 >>> length_of_longest_substring('dvdf') == 3 >>> length_of_longest_substring('aabbccabc') == 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. :param s: A string consisting of lowercase English letters. :return: Length of the longest substring with unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: Rotates the linked list to the right by k places. >>> head = array_to_list([1, 2, 3, 4, 5]) >>> new_head = rotateRight(head, 2) >>> list_to_array(new_head) [4, 5, 1, 2, 3] >>> head = array_to_list([1]) >>> new_head = rotateRight(head, 5) >>> list_to_array(new_head) [1] >>> head = array_to_list([1, 2]) >>> new_head = rotateRight(head, 1) >>> list_to_array(new_head) [2, 1] >>> head = array_to_list([]) >>> new_head = rotateRight(head, 3) >>> list_to_array(new_head) []","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: Rotates the linked list to the right by k places. if not head or not head.next or k == 0: return head # Find the length of the linked list current = head length = 1 while current.next: current = current.next length += 1 # Make the linked list circular current.next = head # Find the new tail: length - k % length - 1, and the new head: length - k % length k = k % length steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next # Break the circular link new_tail.next = None return new_head"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_leaf_depths(root: TreeNode) -> int: For each leaf in the binary tree, find the depth of the leaf and return the sum of these depths. The depth of a node is the number of edges from the root to that node. Note that the root node is at depth 0. >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> sum_of_leaf_depths(root) 2 >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.left.left = TreeNode(3) >>> root.left.left.left = TreeNode(4) >>> sum_of_leaf_depths(root) 3","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_leaf_depths(root): def dfs(node, depth): if not node: return 0 if not node.left and not node.right: return depth return dfs(node.left, depth + 1) + dfs(node.right, depth + 1) return dfs(root, 0)"},{"question":"def find_repeated_characters(s: str) -> list: Given a string \`s\` consisting of only lowercase letters, return a list of all the characters that appear more than once in the string along with their frequency. The characters in the list should be sorted in ascending order based on their frequency. If two characters have the same frequency, the character that appears earlier in the alphabet should come first. >>> find_repeated_characters(\\"aabbccdde\\") [['a', 2], ['b', 2], ['c', 2], ['d', 2]] >>> find_repeated_characters(\\"abcdef\\") [] >>> find_repeated_characters(\\"aabbcccddee\\") [['a', 2], ['b', 2], ['d', 2], ['e', 2], ['c', 3]] >>> find_repeated_characters(\\"\\") [] >>> find_repeated_characters(\\"aabbcccc\\") [['a', 2], ['b', 2], ['c', 4]]","solution":"def find_repeated_characters(s): Returns a list of characters that appear more than once in the string \`s\` along with their frequency, sorted by frequency in ascending order and by alphabetical order if frequencies are the same. from collections import Counter counts = Counter(s) repeated_chars = [[char, freq] for char, freq in counts.items() if freq > 1] repeated_chars.sort(key=lambda x: (x[1], x[0])) return repeated_chars"},{"question":"class Pricing: def __init__(self, basePrices: List[int]): Initializes the Pricing object with an array of integers basePrices. Args: basePrices (List[int]): An array where basePrices[i] is the base price of the product with id i. pass def applyDiscount(self, productId: int, discountPercentage: int): Applies a discount to the product with the given id. Args: productId (int): The id of the product. discountPercentage (int): Discount percentage to apply (0 to 100). pass def getPrice(self, productId: int) -> int: Returns the current price of the product with the given id after applying any active discount. Args: productId (int): The id of the product. Returns: int: The current price of the product. pass from solution import Pricing def test_initial_prices(): pricing = Pricing([100, 200, 300]) assert pricing.getPrice(0) == 100 assert pricing.getPrice(1) == 200 assert pricing.getPrice(2) == 300 def test_apply_discount(): pricing = Pricing([100, 200, 300]) pricing.applyDiscount(0, 10) assert pricing.getPrice(0) == 90 pricing.applyDiscount(1, 20) assert pricing.getPrice(1) == 160 pricing.applyDiscount(2, 50) assert pricing.getPrice(2) == 150 def test_multiple_discounts(): pricing = Pricing([150, 250]) pricing.applyDiscount(0, 10) pricing.applyDiscount(0, 20) assert pricing.getPrice(0) == 120 pricing.applyDiscount(1, 5) pricing.applyDiscount(1, 15) assert pricing.getPrice(1) == 212","solution":"class Pricing: def __init__(self, basePrices): Initializes the Pricing object with an array of integers basePrices. self.basePrices = basePrices self.discounts = [0] * len(basePrices) # Initialize discounts to 0 for all products def applyDiscount(self, productId, discountPercentage): Applies a discount of discountPercentage to the product with the given id. self.discounts[productId] = discountPercentage def getPrice(self, productId): Returns the current price of the product with the given id after applying any active discount. basePrice = self.basePrices[productId] discountPercentage = self.discounts[productId] discountAmount = (discountPercentage / 100) * basePrice return int(basePrice - discountAmount)"},{"question":"from typing import List def smallestCommonElement(mat: List[List[int]]) -> int: Returns the smallest common element across all rows of the matrix. If no common element is found, returns -1. >>> smallestCommonElement([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -1 >>> smallestCommonElement([[1, 2, 3], [2, 3, 4], [2, 5, 6]]) 2 >>> smallestCommonElement([[1, 2, 3, 4, 5]]) 1 >>> smallestCommonElement([[1, 2, 5, 7], [4, 5, 6, 7], [5, 6, 7, 8]]) 5 >>> smallestCommonElement([]) -1 >>> smallestCommonElement([[1, 2, 2, 3], [2, 2, 3, 4], [2, 3, 5, 5]]) 2","solution":"def smallestCommonElement(mat): Returns the smallest common element across all rows of the matrix. If no common element is found, returns -1. if not mat: return -1 from collections import Counter # Initialize counter to count element frequency across all rows counter = Counter() # Number of rows in matrix num_rows = len(mat) # Update counter with elements from each row for row in mat: counter.update(set(row)) # Check for the smallest element that appears in all rows for element in sorted(counter.keys()): if counter[element] == num_rows: return element return -1"},{"question":"def encode_string(s: str) -> str: Encodes the string by replacing each group of consecutive identical letters with the letter followed by the count of its repetition. If the count of a letter is 1, it should be represented as just the letter itself. :param s: The input string consisting of lowercase English letters. :return: The encoded string. pass # Unit tests: def test_encode_string_basic(): assert encode_string(\\"aaabbcaaa\\") == \\"a3b2ca3\\" assert encode_string(\\"abcd\\") == \\"abcd\\" assert encode_string(\\"aabbccdd\\") == \\"a2b2c2d2\\" assert encode_string(\\"aaaaa\\") == \\"a5\\" def test_encode_string_single_character(): assert encode_string(\\"a\\") == \\"a\\" assert encode_string(\\"aaaaaaa\\") == \\"a7\\" def test_encode_string_with_no_repetition(): assert encode_string(\\"abcdef\\") == \\"abcdef\\" def test_encode_string_mixed_repetitions(): assert encode_string(\\"aabbccddaa\\") == \\"a2b2c2d2a2\\" assert encode_string(\\"abcccbbddd\\") == \\"abc3b2d3\\" def test_encode_string_empty_input(): assert encode_string(\\"\\") == \\"\\" def test_encode_string_non_repetitive_long_string(): assert encode_string(\\"abcdefghijklmnopqrstuvwxyz\\") == \\"abcdefghijklmnopqrstuvwxyz\\"","solution":"def encode_string(s): Encodes the string by replacing each group of consecutive identical letters with the letter followed by the count of its repetition. If the count of a letter is 1, it should be represented as just the letter itself. :param s: The input string consisting of lowercase English letters. :return: The encoded string. if not s: return \\"\\" encoded_str = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_str += s[i - 1] if count > 1: encoded_str += str(count) count = 1 # Don't forget to add the last group encoded_str += s[-1] if count > 1: encoded_str += str(count) return encoded_str"},{"question":"from typing import List, Union def check_sorted(words: List[str]) -> Union[int, List[int]]: Checks if the given list of words is sorted in lexicographical order. Returns -1 if the list is sorted. Returns the indices of the first pair of words which are out of order if the list is not sorted. >>> check_sorted([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) -1 >>> check_sorted([\\"banana\\", \\"apple\\", \\"cherry\\", \\"date\\"]) [0, 1] >>> check_sorted([\\"apple\\", \\"cherry\\", \\"banana\\", \\"date\\"]) [1, 2] >>> check_sorted([\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\"]) [2, 3] >>> check_sorted([\\"apple\\"]) -1 >>> check_sorted([]) -1 >>> check_sorted([\\"apple\\", \\"apple\\", \\"banana\\", \\"banana\\"]) -1 >>> check_sorted([\\"banana\\", \\"apple\\", \\"apple\\", \\"banana\\"]) [0, 1]","solution":"def check_sorted(words): Checks if the given list of words is sorted in lexicographical order. Returns -1 if the list is sorted. Returns the indices of the first pair of words which are out of order if the list is not sorted. for i in range(len(words) - 1): if words[i] > words[i + 1]: return [i, i + 1] return -1"},{"question":"def reverse_only_letters(s: str) -> str: Given a string s which consists of lowercase letters and non-letter characters, reverse only the letters while leaving the non-letter characters in their original positions. Return the reversed string. >>> reverse_only_letters(\\"abcde\\") == \\"edcba\\" >>> reverse_only_letters(\\"a!b-c.d\\") == \\"d!c-b.a\\" >>> reverse_only_letters(\\"1abc2\\") == \\"1cba2\\" >>> reverse_only_letters(\\"12345\\") == \\"12345\\" >>> reverse_only_letters(\\"ab c!d\\") == \\"dc b!a\\"","solution":"def reverse_only_letters(s): Reverses only the letters in the string while leaving non-letter characters in their original positions. :param s: A string with lowercase letters and non-letter characters :type s: str :return: A string with letters reversed and non-letters in original positions :rtype: str # Extract letters and reverse them letters = [char for char in s if char.isalpha()] letters.reverse() # Result list to build the final string result = [] letter_index = 0 # Construct the result string based on the original positions for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 else: result.append(char) return ''.join(result)"},{"question":"def longestConsecutiveSubsequence(nums): Returns the length of the longest consecutive elements sequence in an unsorted array. The function should achieve a time complexity of O(n). Args: nums (List[int]): An unsorted array of integers. Returns: int: The length of the longest consecutive elements sequence. >>> longestConsecutiveSubsequence([100, 4, 200, 1, 3, 2]) 4 >>> longestConsecutiveSubsequence([0]) 1 >>> longestConsecutiveSubsequence([]) 0 >>> longestConsecutiveSubsequence([10, 30, 50]) 1 >>> longestConsecutiveSubsequence([-1, -2, -3, -4, -5]) 5 >>> longestConsecutiveSubsequence([1, 2, 3, 7, 8, 9, 10]) 4 >>> longestConsecutiveSubsequence([1, 2, 2, 3, 4]) 4","solution":"def longestConsecutiveSubsequence(nums): Returns the length of the longest consecutive elements sequence in the given unsorted array. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: # Only start counting if \`num\` is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"def find_order(num_projects, dependencies): Determine the order in which projects should be completed given dependencies. :param num_projects: Number of projects :param dependencies: List of dependencies, where each dependency is a pair [a, b] meaning project a must be completed before project b :return: A list of projects in the order they should be completed, or an empty list if it is not possible to complete all projects >>> find_order(3, []) == [0, 1, 2] or find_order(3, []) == [0, 2, 1] or find_order(3, []) == [1, 0, 2] or find_order(3, []) == [1, 2, 0] or find_order(3, []) == [2, 0, 1] or find_order(3, []) == [2, 1, 0] >>> find_order(2, [[0, 1]]) == [0, 1] >>> result = find_order(4, [[1, 0], [2, 1], [3, 2]]) assert result == [3, 2, 1, 0] or result == [3, 2, 1, 0] >>> find_order(2, [[0, 1], [1, 0]]) == [] >>> result = find_order(6, [[0, 1], [1, 3], [2, 3], [4, 5]]) assert result == [0, 2, 4, 5, 1, 3] or result == [0, 2, 4, 1, 5, 3] or result == [0, 2, 1, 4, 5, 3] >>> find_order(5, []) == [0, 1, 2, 3, 4] or find_order(5, []) == [4, 3, 2, 1, 0] or find_order(5, []) == [3, 1, 0, 4, 2] # And so on, any permutation","solution":"from collections import defaultdict, deque def find_order(num_projects, dependencies): Determine the order in which projects should be completed given dependencies. :param num_projects: Number of projects :param dependencies: List of dependencies, where each dependency is a pair [a, b] meaning project a must be completed before project b :return: A list of projects in the order they should be completed, or an empty list if it is not possible to complete all projects # Build adjacency list and calculate in-degrees adj_list = defaultdict(list) in_degree = [0] * num_projects for a, b in dependencies: adj_list[a].append(b) in_degree[b] += 1 # Find all the projects with no incoming edges zero_in_degree_queue = deque([i for i in range(num_projects) if in_degree[i] == 0]) topological_order = [] while zero_in_degree_queue: project = zero_in_degree_queue.popleft() topological_order.append(project) # Decrease the in-degree of neighboring nodes for neighbor in adj_list[project]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If the topological_sort contains all the projects, it is possible to complete all projects if len(topological_order) == num_projects: return topological_order else: return []"},{"question":"from typing import List def is_balanced_word(word: str) -> bool: Checks if a word is balanced. A string is considered \\"balanced\\" if every letter it contains appears the same number of times. >>> is_balanced_word(\\"aabbcc\\") True >>> is_balanced_word(\\"abac\\") False >>> is_balanced_word(\\"xyzxyz\\") True >>> is_balanced_word(\\"abcab\\") False >>> is_balanced_word(\\"\\") True >>> is_balanced_word(\\"aabbccdd\\") True >>> is_balanced_word(\\"aabbc\\") False pass def check_balanced_words(words: List[str]) -> List[bool]: Given a list of words, this function returns a list of booleans indicating if each word is balanced. >>> check_balanced_words([\\"aabbcc\\", \\"abac\\", \\"xyzxyz\\", \\"abcab\\"]) [True, False, True, False] >>> check_balanced_words([]) [] >>> check_balanced_words([\\"\\"]) [True] >>> check_balanced_words([\\"aabbccdd\\", \\"aabbc\\"]) [True, False] pass","solution":"def is_balanced_word(word): Checks if a word is balanced. A word is balanced if each character appears the same number of times. from collections import Counter char_count = Counter(word) counts = list(char_count.values()) return all(count == counts[0] for count in counts) def check_balanced_words(words): Given a list of words, this function returns a list of booleans indicating if each word is balanced. return [is_balanced_word(word) for word in words]"},{"question":"def longest_consecutive_subsequence(nums: List[int]) -> List[int]: Returns the longest subsequence of consecutive elements. >>> longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) [1, 2, 3, 4] >>> longest_consecutive_subsequence([]) [] >>> longest_consecutive_subsequence([10]) [10] >>> longest_consecutive_subsequence([10, 9]) [9, 10] >>> longest_consecutive_subsequence([10, 30, 20, 40]) [10] >>> longest_consecutive_subsequence([1, 2, 2, 3]) [1, 2, 3] >>> longest_consecutive_subsequence([0, -1, -2, -3, 1, 2, 3]) [-3, -2, -1, 0, 1, 2, 3]","solution":"def longest_consecutive_subsequence(nums): Returns the longest subsequence of consecutive elements. if not nums: return [] num_set = set(nums) longest_seq = [] for num in nums: if num - 1 not in num_set: # start of a new sequence current_num = num current_seq = [current_num] while current_num + 1 in num_set: current_num += 1 current_seq.append(current_num) if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"def min_days_to_unique_heights(trees: List[int]) -> int: Determines the minimum number of days required to ensure that no two adjacent trees have the same height. If it’s not possible to achieve this condition, returns -1. >>> min_days_to_unique_heights([1, 2, 3]) == 0 >>> min_days_to_unique_heights([1, 2, 2, 3]) == 1 >>> min_days_to_unique_heights([2, 2, 2, 2]) == 3 >>> min_days_to_unique_heights([1, 1, 2, 2, 1, 1, 2, 2]) == 4 >>> min_days_to_unique_heights([3]) == 0 >>> min_days_to_unique_heights([1, 2, 3, 4, 5]) == 0 >>> min_days_to_unique_heights([1, 1, 1, 1]) == 3","solution":"def min_days_to_unique_heights(trees): Determines the minimum number of days required to ensure that no two adjacent trees have the same height. If it’s not possible to achieve this condition, returns -1. # Early low-length check cases if not trees: return 0 if len(trees) == 1: return 0 days = 0 n = len(trees) # Check for each tree if it can be removed to satisfy the condition i = 0 while i < len(trees) - 1: if trees[i] == trees[i + 1]: days += 1 if i + 2 < n: trees.pop(i + 1) else: trees.pop(i) else: i += 1 # Verify all adjacent trees have different heights (final check) for i in range(1, len(trees)): if trees[i] == trees[i - 1]: return -1 return days"},{"question":"def min_students_to_move(heights): Given a list of integers representing the heights of students standing in a line, return the minimum number of students that need to be moved such that the line becomes non-decreasing by height. In other words, find the minimum number of indices i in heights such that if you remove the students at these indices, the remaining students are in non-decreasing order of their height. >>> min_students_to_move([1, 2, 3, 4, 5]) 0 >>> min_students_to_move([5, 4, 3, 2, 1]) 4 >>> min_students_to_move([3, 2, 1, 4, 5]) 2 >>> min_students_to_move([1, 3, 2, 4, 3, 5]) 2 >>> min_students_to_move([1]) 0 >>> min_students_to_move([]) 0","solution":"def min_students_to_move(heights): Returns the minimum number of students that need to be moved for the line to become non-decreasing in height. n = len(heights) # If the list is empty or has only one student, no need to move any student if n <= 1: return 0 # Create an array to store the length of the longest increasing subsequence (LIS) until each index lis = [1] * n # Calculate the LIS for each index for i in range(1, n): for j in range(0, i): if heights[i] >= heights[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest non-decreasing subsequence longest_non_decreasing_subseq = max(lis) # The minimum number of students to move is the total number of students # minus the length of the longest non-decreasing subsequence return n - longest_non_decreasing_subseq"},{"question":"def length_of_longest_good_substring(s: str) -> int: Finds the length of the longest 'good substring' where no characters are repeated. >>> length_of_longest_good_substring(\\"\\") == 0 >>> length_of_longest_good_substring(\\"a\\") == 1 >>> length_of_longest_good_substring(\\"abcdef\\") == 6 >>> length_of_longest_good_substring(\\"aa\\") == 1 >>> length_of_longest_good_substring(\\"abca\\") == 3 >>> length_of_longest_good_substring(\\"ababcabcdabcde\\") == 5 >>> length_of_longest_good_substring(\\"pwwkew\\") == 3 >>> length_of_longest_good_substring(\\"dvdf\\") == 3","solution":"def length_of_longest_good_substring(s): Finds the length of the longest 'good substring' where no characters are repeated. Parameters: s (str): The input string containing only lowercase English letters Returns: int: Length of the longest good substring n = len(s) max_len = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: # Move the start to the right of the same character last found start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"from typing import List def possible_bipartition(n: int, dislikes: List[List[int]]) -> bool: Given an array \`dislikes\` where \`dislikes[i] = [a, b]\` indicates that the ith person \`a\` dislikes person \`b\`, return \`true\` if it is possible to split everyone into two groups such that no two people who dislike each other are in the same group. Otherwise, return \`false\`. >>> possible_bipartition(4, []) == True >>> possible_bipartition(4, [[1, 2], [1, 3]]) == True >>> possible_bipartition(3, [[1, 2], [1, 3], [2, 3]]) == False >>> possible_bipartition(5, [[1, 2], [3, 4], [4, 5], [2, 3]]) == True >>> possible_bipartition(10, [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [1, 3], [2, 4], [5, 7], [6, 8], [9, 1]]) == True >>> possible_bipartition(4, [[1, 2], [1, 3], [1, 4]]) == True pass","solution":"def possible_bipartition(n, dislikes): from collections import defaultdict, deque def bfs(node): queue = deque([node]) color[node] = 1 while queue: curr = queue.popleft() for neighbor in graph[curr]: if color[neighbor] == 0: color[neighbor] = -color[curr] queue.append(neighbor) elif color[neighbor] == color[curr]: return False return True graph = defaultdict(list) for a, b in dislikes: graph[a].append(b) graph[b].append(a) color = [0] * (n + 1) for i in range(1, n + 1): if color[i] == 0: if not bfs(i): return False return True"},{"question":"from typing import List def min_operations(nums: List[int]) -> int: Returns the minimum number of operations needed to make all elements of nums the same. >>> min_operations([1]) 0 >>> min_operations([5, 5, 5, 5]) 0 >>> min_operations([1, 2, 3]) 2 >>> min_operations([1, 2, 3, 4]) 4 >>> min_operations([100, 200, 300]) 200 >>> min_operations([-10, 0, 10]) 20 pass def test_min_operations_single_element(): assert min_operations([1]) == 0 def test_min_operations_all_equal(): assert min_operations([5, 5, 5, 5]) == 0 def test_min_operations_odd_length(): assert min_operations([1, 2, 3]) == 2 def test_min_operations_even_length(): assert min_operations([1, 2, 3, 4]) == 4 def test_min_operations_large_elements(): assert min_operations([100, 200, 300]) == 200 def test_min_operations_mixed_signs(): assert min_operations([-10, 0, 10]) == 20","solution":"def min_operations(nums): Returns the minimum number of operations needed to make all elements of nums the same. nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"def generate_strings(s: str) -> List[str]: Given a string 's' with underscores, return all possible strings by replacing each underscore with any lowercase English letter. >>> generate_strings(\\"abc\\") [\\"abc\\"] >>> generate_strings(\\"a_c\\") [\\"aac\\", \\"abc\\", \\"acc\\", \\"adc\\", \\"aec\\", \\"afc\\", \\"agc\\", \\"ahc\\", \\"aic\\", \\"ajc\\", \\"akc\\", \\"alc\\", \\"amc\\", \\"anc\\", \\"aoc\\", \\"apc\\", \\"aqc\\", \\"arc\\", \\"asc\\", \\"atc\\", \\"auc\\", \\"avc\\", \\"awc\\", \\"axc\\", \\"ayc\\", \\"azc\\"] >>> generate_strings(\\"_b_\\") [\\"aba\\", \\"abb\\", \\"abc\\", ... , \\"azy\\"] >>> generate_strings(\\"___\\") [\\"aaa\\", \\"aab\\", \\"aac\\", ..., \\"zzy\\", \\"zzz\\"] >>> generate_strings(\\"_ab_\\") [\\"aaba\\", \\"aabb\\", \\"aabc\\", ... , \\"zabz\\"]","solution":"from itertools import product def generate_strings(s): Given a string 's' with underscores, return all possible strings by replacing each underscore with any lowercase English letter. positions = [i for i, char in enumerate(s) if char == '_'] if not positions: return [s] replacements = product('abcdefghijklmnopqrstuvwxyz', repeat=len(positions)) results = [] for replacement in replacements: string_list = list(s) for pos, char in zip(positions, replacement): string_list[pos] = char results.append(\\"\\".join(string_list)) return sorted(results)"},{"question":"def can_make_elements_equal(nums, x): Determine if it is possible to make all elements in the array \`nums\` equal by increasing or decreasing each element by at most \`x\` units. Parameters: nums (list): list of positive integers x (int): the maximum units each element can be increased or decreased Returns: bool: True if it's possible to make all elements equal, False otherwise >>> can_make_elements_equal([5, 5, 5], 3) True >>> can_make_elements_equal([1, 5, 7], 3) True >>> can_make_elements_equal([1, 5, 9], 3) False >>> can_make_elements_equal([7], 3) True >>> can_make_elements_equal([5, 9], 2) True >>> can_make_elements_equal([5, 10], 2) False >>> can_make_elements_equal([1, 2, 3], 100) True","solution":"def can_make_elements_equal(nums, x): Determine if it is possible to make all elements in the array \`nums\` equal by increasing or decreasing each element by at most \`x\` units. Parameters: nums (list): list of positive integers x (int): the maximum units each element can be increased or decreased Returns: bool: True if it's possible to make all elements equal, False otherwise min_val = min(nums) max_val = max(nums) # We can make all elements equal if the difference between # the max and min values is less than or equal to 2 times x return (max_val - min_val) <= 2 * x"},{"question":"def longest_prefix_word(words): Returns the longest word in \`words\` that is a prefix of at least one other word in \`words\`. If there are multiple such words of the same length, returns the one that appears first. If no such word exists, returns an empty string. >>> longest_prefix_word([\\"apple\\", \\"app\\", \\"banana\\", \\"ban\\"]) == \\"app\\" >>> longest_prefix_word([\\"dog\\", \\"cat\\", \\"fish\\"]) == \\"\\" >>> longest_prefix_word([\\"dog\\", \\"do\\", \\"door\\", \\"dock\\"]) == \\"do\\" >>> longest_prefix_word([\\"test\\", \\"testing\\", \\"tester\\"]) == \\"test\\" >>> longest_prefix_word([\\"single\\"]) == \\"\\"","solution":"def longest_prefix_word(words): Returns the longest word in \`words\` that is a prefix of at least one other word in \`words\`. If there are multiple such words of the same length, returns the one that appears first. If no such word exists, returns an empty string. words_set = set(words) longest_word = \\"\\" for word in words: for i in range(1, len(word)): if word[:i] in words_set: if len(word[:i]) > len(longest_word): longest_word = word[:i] elif len(word[:i]) == len(longest_word): longest_word = word[:i] if words.index(word[:i]) < words.index(longest_word) else longest_word return longest_word"},{"question":"def minSubarrayLength(nums: List[int], target: int) -> int: You are given a 0-indexed integer array 'nums' and an integer 'target'. You can make one operation to remove a contiguous subarray from 'nums' such that the sum of the remaining elements in the array is equal to 'target'. Return the length of the smallest subarray that can be removed to achieve this. If it is impossible, return -1. >>> minSubarrayLength([1, 2, 3, 4, 5], 10) 1 >>> minSubarrayLength([1, 2, 3, 4, 5], 15) 0 >>> minSubarrayLength([1, 2, 3, 4, 5], 20) -1 >>> minSubarrayLength([5, 5, 5, 5, 5], 15) 2 >>> minSubarrayLength([1, 1, 1, 1, 1, 1, 1, 1, 1], 5) 4","solution":"def minSubarrayLength(nums, target): total_sum = sum(nums) # If the total sum is already equal to the target if total_sum == target: return 0 subarray_sum_needed = total_sum - target if subarray_sum_needed < 0: return -1 left = 0 current_sum = 0 min_length = float('inf') for right in range(len(nums)): current_sum += nums[right] while current_sum > subarray_sum_needed and left <= right: current_sum -= nums[left] left += 1 if current_sum == subarray_sum_needed: min_length = min(min_length, right - left + 1) return min_length if min_length != float('inf') else -1"},{"question":"def are_one_swap_away(s1: str, s2: str) -> bool: Determines if two strings can be made identical with at most one character swap. >>> are_one_swap_away(\\"abc\\", \\"abc\\") True >>> are_one_swap_away(\\"abc\\", \\"acb\\") True >>> are_one_swap_away(\\"aaa\\", \\"aaa\\") True >>> are_one_swap_away(\\"ab\\", \\"ba\\") True >>> are_one_swap_away(\\"abcdef\\", \\"badcfe\\") False >>> are_one_swap_away(\\"aaaa\\", \\"aaab\\") False >>> are_one_swap_away(\\"abcd\\", \\"dcba\\") False >>> are_one_swap_away(\\"a\\" * 1000, \\"a\\" * 1000) True","solution":"def are_one_swap_away(s1, s2): Determines if two strings can be made identical with at most one character swap. if s1 == s2: return True diff_indices = [] for i in range(len(s1)): if s1[i] != s2[i]: diff_indices.append(i) if len(diff_indices) > 2: return False if len(diff_indices) != 2: return False i, j = diff_indices return s1[i] == s2[j] and s1[j] == s2[i]"},{"question":"def max_subarray_sum(nums: List[int], k: int) -> int: Returns the maximum possible sum of the elements of an exactly k size subarray that can be formed in the array. If the array has fewer than k elements, return -1. >>> max_subarray_sum([2, 1, 5, 1, 3, 2], 3) == 9 >>> max_subarray_sum([1, 2], 3) == -1 >>> max_subarray_sum([1, 2, 3], 3) == 6 >>> max_subarray_sum([1, 2, 3, 4, 5], 2) == 9 >>> max_subarray_sum([-1, -2, -3, -4, -5], 2) == -3 >>> max_subarray_sum([-2, 3, -1, 5, -1, 2], 2) == 4 >>> max_subarray_sum([1], 1) == 1 >>> max_subarray_sum([-10], 1) == -10","solution":"def max_subarray_sum(nums, k): Returns the maximum sum of an exactly k size subarray from the list nums. If the array has fewer than k elements, return -1. if len(nums) < k: return -1 max_sum = cur_sum = sum(nums[:k]) for i in range(k, len(nums)): cur_sum += nums[i] - nums[i - k] max_sum = max(max_sum, cur_sum) return max_sum"},{"question":"def multiply_strings(s1: str, s2: str) -> str: Multiplies two large non-negative integers represented as strings. >>> multiply_strings(\\"2\\", \\"3\\") \\"6\\" >>> multiply_strings(\\"123\\", \\"456\\") \\"56088\\"","solution":"def multiply_strings(s1, s2): Multiplies two large non-negative integers represented as strings. if s1 == \\"0\\" or s2 == \\"0\\": return \\"0\\" len1, len2 = len(s1), len(s2) result = [0] * (len1 + len2) s1 = s1[::-1] s2 = s2[::-1] for i in range(len1): for j in range(len2): result[i + j] += int(s1[i]) * int(s2[j]) result[i + j + 1] += result[i + j] // 10 result[i + j] %= 10 while len(result) > 1 and result[-1] == 0: result.pop() return ''.join(map(str, result[::-1]))"},{"question":"def find_peak(arr: List[int]) -> int: Returns the index of a peak element in the array. :param arr: List[int] - The input array representing a mountain. :return: int - Index of one of the peak elements. >>> find_peak([1]) == 0 >>> find_peak([1, 1, 1, 1, 1]) in [0, 1, 2, 3, 4] >>> find_peak([1, 3, 5, 4, 2]) == 2 >>> find_peak([1, 2, 3, 4, 5]) == 4 >>> find_peak([5, 4, 3, 2, 1]) == 0 >>> find_peak([1, 3, 2, 3, 1]) in [1, 3] >>> find_peak([]) == -1 >>> find_peak([1, 3, 3, 2, 1]) in [1, 2]","solution":"def find_peak(arr): Returns the index of a peak element in the array. :param arr: List[int] - The input array representing a mountain. :return: int - Index of one of the peak elements. if not arr: return -1 left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"def min_path_sum(grid): Returns the minimum sum of weights along the path from the top-left corner to the bottom-right corner of a grid where you can only move to the right or down from a given cell. >>> min_path_sum([ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) 7 >>> min_path_sum([ [1, 2, 3], [4, 5, 6] ]) 12 >>> min_path_sum([ [1, 2, 3] ]) 6 >>> min_path_sum([ [1], [2], [3] ]) 6 >>> min_path_sum([ [5] ]) 5 >>> min_path_sum([]) 0 >>> min_path_sum([[]]) 0","solution":"def min_path_sum(grid): Returns the minimum sum of weights along the path from the top-left corner to the bottom-right corner of a grid where you can only move to the right or down from a given cell. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0]*n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"from typing import List def max_distinct_length_after_removals(s: str, k: int) -> int: Returns the length of the resultant string after removing exactly k characters to maximize the number of distinct characters. >>> max_distinct_length_after_removals(\\"abcde\\", 2) == 3 >>> max_distinct_length_after_removals(\\"abcdef\\", 3) == 3 >>> max_distinct_length_after_removals(\\"aaaaa\\", 2) == 3 >>> max_distinct_length_after_removals(\\"aabbcc\\", 3) == 3 >>> max_distinct_length_after_removals(\\"a\\", 1) == 0","solution":"def max_distinct_length_after_removals(s, k): Returns the length of the resultant string after removing exactly k characters to maximize the number of distinct characters. from collections import Counter # Step 1: Count the frequency of each character in the string freq = Counter(s) # Step 2: Convert the frequency dictionary to a list of (character, frequency) pairs freq_items = sorted(freq.items(), key=lambda item: item[1]) # Step 3: Remove characters with the lowest frequency until k removals are done removed_count = 0 distinct_chars = len(freq_items) for char, count in freq_items: if removed_count + count <= k: removed_count += count distinct_chars -= 1 else: break # Step 4: Calculate the length of the resultant string resultant_length = len(s) - k return resultant_length if resultant_length >= distinct_chars else distinct_chars"},{"question":"def count_swaps(arr): Returns the minimum number of adjacent swaps needed to sort the array. Args: arr (List[int]): The input list of integers representing heights. Returns: int: The minimum number of adjacent swaps needed to sort the array. >>> count_swaps([1, 2, 3, 4]) 0 >>> count_swaps([4, 3, 2, 1]) 6 >>> count_swaps([3, 1, 2]) 2 >>> count_swaps([3, 1, 2, 2, 1]) 6 >>> count_swaps([1]) 0 >>> count_swaps([]) 0","solution":"def count_swaps(arr): Returns the minimum number of adjacent swaps needed to sort the array. n = len(arr) swaps = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps"},{"question":"def max_profit(prices): You are given a list of \`n\` integers representing the stock prices of a company over \`n\` consecutive days. You can complete at most one transaction, which means you can buy one and sell one share of the stock over the given period. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return \`0\`. :param prices: List of stock prices over n consecutive days :type prices: list :return: Maximum profit from a single transaction :rtype: int >>> max_profit([7, 1, 5, 3, 6, 4]) == 5 >>> max_profit([7, 6, 4, 3, 1]) == 0 >>> max_profit([1, 2, 3, 4, 5]) == 4 >>> max_profit([5]) == 0 >>> max_profit([1, 2, 3, 4, 3, 2, 1]) == 3 >>> max_profit([]) == 0 >>> max_profit([3, 8, 1, 10]) == 9","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy-sell transaction. :param prices: List of stock prices over n consecutive days :type prices: list :return: Maximum profit from a single transaction :rtype: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"def min_swaps_to_group_ones(data: List[int]) -> int: Given a binary array \`data\`, return the minimum number of swaps required to group all \`1\`s present in the array together in any place in the array. >>> min_swaps_to_group_ones([1, 0, 1, 0, 1]) 1 >>> min_swaps_to_group_ones([1, 1, 1, 0, 0, 0]) 0 >>> min_swaps_to_group_ones([0, 0, 0, 0]) 0 >>> min_swaps_to_group_ones([1, 1, 1, 1]) 0 >>> min_swaps_to_group_ones([0, 1, 0, 1, 0, 1]) 1 >>> min_swaps_to_group_ones([1, 0, 1, 0, 1, 0, 1, 1, 0]) 2","solution":"def min_swaps_to_group_ones(data): Returns the minimum number of swaps required to group all 1's together in the array. n = len(data) total_ones = sum(data) if total_ones == 0 or total_ones == n: return 0 max_ones_in_window = 0 current_ones_in_window = 0 for i in range(total_ones): if data[i] == 1: current_ones_in_window += 1 max_ones_in_window = current_ones_in_window for i in range(total_ones, n): if data[i] == 1: current_ones_in_window += 1 if data[i - total_ones] == 1: current_ones_in_window -= 1 max_ones_in_window = max(max_ones_in_window, current_ones_in_window) return total_ones - max_ones_in_window"},{"question":"def min_subarray_len(arr: List[int], target: int) -> int: Given an array of positive integers \`arr\` and an integer \`target\`, find the length of the shortest subarray whose sum is at least \`target\`. If there is no such subarray, return \`0\` instead. Uses the sliding window technique to solve this problem efficiently. >>> min_subarray_len([1, 2, 3], 7) == 0 >>> min_subarray_len([1, 2, 3, 4], 4) == 1 >>> min_subarray_len([1, 2, 3, 4, 5], 9) == 2 >>> min_subarray_len([1, 2, 3, 4, 5], 15) == 5 >>> min_subarray_len([2, 3, 1, 2, 4, 3], 7) == 2 >>> min_subarray_len([1, 4, 4], 8) == 2 >>> min_subarray_len([5, 1, 2, 6, 7], 11) == 2","solution":"def min_subarray_len(arr, target): Returns the length of the shortest subarray where the sum is at least 'target'. If there is no such subarray, returns 0. Uses the sliding window technique. n = len(arr) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float('inf') else 0"},{"question":"def find_anagrams(s: str, t: str) -> List[int]: Write a function that takes a string \`s\` and returns all anagrams of a given target string \`t\` present in \`s\`. An anagram is a rearrangement of all the characters in \`t\`. The result should be a list of starting indices of the anagrams found in \`s\`. The output list should be sorted in ascending order of indices. >>> find_anagrams(\\"cbaebabacd\\", \\"abc\\") [0, 6] >>> find_anagrams(\\"abcdefg\\", \\"hij\\") [] >>> find_anagrams(\\"abcd\\", \\"dcba\\") [0] >>> find_anagrams(\\"ababababab\\", \\"ab\\") [0, 1, 2, 3, 4, 5, 6, 7, 8] >>> find_anagrams(\\"aaaaa\\", \\"a\\") [0, 1, 2, 3, 4] >>> find_anagrams(\\"aa\\", \\"aaa\\") []","solution":"def find_anagrams(s, t): from collections import Counter result = [] t_counter = Counter(t) window_counter = Counter(s[:len(t) - 1]) for i in range(len(t) - 1, len(s)): start_index = i - len(t) + 1 window_counter[s[i]] += 1 if window_counter == t_counter: result.append(start_index) window_counter[s[start_index]] -= 1 if window_counter[s[start_index]] == 0: del window_counter[s[start_index]] return sorted(result)"},{"question":"def max_product_of_lengths(s: str, k: int) -> int: Returns the maximum possible product of the lengths of k contiguous non-empty substrings. If it's not possible to divide the string s into k non-empty substrings, return -1. >>> max_product_of_lengths(\\"abcdef\\", 2) == 9 >>> max_product_of_lengths(\\"abcd\\", 2) == 4 >>> max_product_of_lengths(\\"abcde\\", 2) == 6 >>> max_product_of_lengths(\\"a\\", 1) == 1 >>> max_product_of_lengths(\\"abc\\", 4) == -1 >>> max_product_of_lengths(\\"abcdef\\", 3) == 8","solution":"def max_product_of_lengths(s, k): Returns the maximum possible product of the lengths of k contiguous non-empty substrings. If it's not possible to divide the string s into k non-empty substrings, return -1. n = len(s) if k > n: return -1 base_len = n // k extra = n % k lengths = [base_len] * k for i in range(extra): lengths[i] += 1 product = 1 for length in lengths: product *= length return product"},{"question":"def numIslands(grid: List[List[int]]) -> int: Returns the number of islands in the given m x n binary matrix grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. >>> numIslands([ [1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0] ]) == 1 >>> numIslands([ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ]) == 3 >>> numIslands([]) == 0 >>> numIslands([ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], ]) == 0 >>> numIslands([ [1, 0], [0, 1] ]) == 2","solution":"def numIslands(grid): Returns the number of islands in the given m x n binary matrix grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid or not grid[0]: return 0 def dfs(grid, r, c): grid[r][c] = 0 for x, y in [(r-1,c), (r+1,c), (r,c-1), (r,c+1)]: if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1: dfs(grid, x, y) islands = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == 1: dfs(grid, r, c) islands += 1 return islands"},{"question":"def find_min_index(arr: List[int]) -> int: Finds the index of the smallest element in a rotated sorted array. >>> find_min_index([1]) 0 >>> find_min_index([1, 2, 3, 4, 5]) 0 >>> find_min_index([4, 5, 1, 2, 3]) 2 >>> find_min_index([3, 4, 5, 1, 2]) 3 >>> find_min_index([5, 1, 2, 3, 4]) 1 >>> find_min_index([15, 18, 2, 3, 6, 12]) 2 >>> find_min_index([6, 12, 15, 18, 2, 3]) 4 >>> find_min_index([2, 1]) 1","solution":"def find_min_index(arr): Finds the index of the smallest element in the rotated sorted array. Parameters: arr (list): A list of integers which is a rotated sorted array. Returns: int: The index of the smallest element in the array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 # Check if middle element is greater than the rightmost element if arr[mid] > arr[right]: left = mid + 1 else: right = mid return left"},{"question":"from typing import List def is_possible(nums: List[int]) -> bool: Determine if it is possible to partition the array into consecutive subsequences of length at least 3. Parameters: nums (List[int]): List of integers Returns: bool: Returns True if partitioning is possible, otherwise False. >>> is_possible([1,2,3,3,4,5]) True >>> is_possible([1,2,3,4,4,5]) False >>> is_possible([1,2,3,3,4,4,5,5]) True >>> is_possible([1]) False >>> is_possible([]) False >>> is_possible([1,2,3,3,4,5,6,7,8]) True >>> is_possible([1,2,3,3,4,4,5,6,7,8]) True >>> is_possible(list(range(1, 1001))) True","solution":"from collections import Counter, defaultdict def is_possible(nums): Determine if it is possible to partition the array into consecutive subsequences of length at least 3. Parameters: nums (List[int]): List of integers Returns: bool: Returns True if partitioning is possible, otherwise False. if not nums: return False count = Counter(nums) end_count = defaultdict(int) for num in nums: if count[num] == 0: continue elif end_count[num - 1] > 0: end_count[num - 1] -= 1 end_count[num] += 1 elif count[num + 1] > 0 and count[num + 2] > 0: count[num + 1] -= 1 count[num + 2] -= 1 end_count[num + 2] += 1 else: return False count[num] -= 1 return True"},{"question":"def lenLongestFibSubseq(arr: List[int]) -> int: Returns the length of the longest Fibonacci-like subsequence of arr. If no such sequence exists, return 0. >>> lenLongestFibSubseq([1, 2, 3, 4, 5, 6, 7, 8]) == 5 >>> lenLongestFibSubseq([1, 3, 7, 11, 12, 14, 18]) == 3 >>> lenLongestFibSubseq([1, 4, 7, 10]) == 0 >>> lenLongestFibSubseq([1, 2, 3, 5, 8, 13, 21]) == 7 >>> lenLongestFibSubseq([2, 4]) == 0 >>> lenLongestFibSubseq([]) == 0","solution":"def lenLongestFibSubseq(arr): Returns the length of the longest Fibonacci-like subsequence of arr. If no such sequence exists, return 0. if len(arr) < 3: return 0 indices = {x: i for i, x in enumerate(arr)} longest = {} max_len = 0 for k in range(len(arr)): for j in range(k): if arr[k] - arr[j] in indices and indices[arr[k] - arr[j]] < j: i = indices[arr[k] - arr[j]] if (i, j) in longest: longest[j, k] = longest[i, j] + 1 else: longest[j, k] = 3 max_len = max(max_len, longest[j, k]) return max_len"},{"question":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_bottom(root: Optional[TreeNode]) -> List[List[int]]: Returns the bottom-up level order traversal of the binary tree nodes' values. >>> level_order_bottom(None) [] >>> root = TreeNode(1) >>> level_order_bottom(root) [[1]] >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> level_order_bottom(root) [[2, 3], [1]] >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> root.right.right = TreeNode(6) >>> level_order_bottom(root) [[4, 5, 6], [2, 3], [1]] >>> root = TreeNode(1) >>> root.right = TreeNode(2) >>> root.right.right = TreeNode(3) >>> root.right.right.right = TreeNode(4) >>> level_order_bottom(root) [[4], [3], [2], [1]] >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> root.right.left = TreeNode(6) >>> root.right.right = TreeNode(7) >>> level_order_bottom(root) [[4, 5, 6, 7], [2, 3], [1]]","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_bottom(root): Returns the bottom-up level order traversal of the binary tree nodes' values. if not root: return [] result = deque() queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.appendleft(level) return list(result)"},{"question":"def num_islands(grid: List[List[int]]) -> int: Given a 2D grid of '1's (land) and '0's (water), count the number of islands. An island is formed by grouping all the adjacent 1's connected horizontally or vertically. You may assume all four edges of the grid are surrounded by water. :param grid: List[List[int]] :return: int >>> num_islands([]) 0 >>> num_islands([[0]]) 0 >>> num_islands([[1]]) 1 >>> num_islands([ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ]) 3 >>> num_islands([ [1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0] ]) 5 >>> num_islands([ [0, 0, 0], [0, 0, 0], [0, 0, 0] ]) 0 >>> num_islands([ [1, 1, 1], [1, 1, 1], [1, 1, 1] ]) 1 pass","solution":"def num_islands(grid): Given a 2D grid of '1's (land) and '0's (water), count the number of islands. :param grid: List[List[int]] :return: int if not grid: return 0 def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # mark as visited dfs(i + 1, j) # down dfs(i - 1, j) # up dfs(i, j + 1) # right dfs(i, j - 1) # left count = 0 for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == 1: count += 1 dfs(i, j) return count"},{"question":"def longest_subsequence(nums): Returns the length of the longest subsequence such that the difference between adjacent elements is either 1 or -1. Args: nums: A list of integers Returns: An integer representing the length of the longest subsequence pass # Unit Tests def test_longest_subsequence_all_one_diff(): assert longest_subsequence([1, 2, 3, 4, 5]) == 5 def test_longest_subsequence_alternating_diff(): assert longest_subsequence([1, 2, 1, 2, 1]) == 5 def test_longest_subsequence_with_breaks(): assert longest_subsequence([10, 11, 7, 8, 9, 10]) == 4 def test_longest_subsequence_single_element(): assert longest_subsequence([1]) == 1 def test_longest_subsequence_no_valid_subsequence(): assert longest_subsequence([15, 30, 45, 60]) == 1 def test_longest_subsequence_empty_list(): assert longest_subsequence([]) == 0","solution":"def longest_subsequence(nums): Returns the length of the longest subsequence such that the difference between adjacent elements is either 1 or -1. Args: nums: A list of integers Returns: An integer representing the length of the longest subsequence if not nums: return 0 max_length = 1 curr_length = 1 for i in range(1, len(nums)): if abs(nums[i] - nums[i - 1]) == 1: curr_length += 1 max_length = max(max_length, curr_length) else: curr_length = 1 return max_length"},{"question":"from typing import List def longest_subarray_with_at_most_k_occurrences(arr: List[int], k: int) -> int: Return the length of the longest subarray where the number of occurrences of any element is at most k. Args: arr: A list of integers. k: An integer, the maximum number of occurrences of any element in the subarray. Returns: An integer, the length of the longest subarray where the number of occurrences of any element is at most k. Examples: >>> longest_subarray_with_at_most_k_occurrences([1, 2, 1, 2, 3], 2) 5 >>> longest_subarray_with_at_most_k_occurrences([1, 1, 1, 1], 2) 2 >>> longest_subarray_with_at_most_k_occurrences([1, 2, 3, 1, 2, 3], 1) 3 >>> longest_subarray_with_at_most_k_occurrences([1, 2, 3], 3) 3 >>> longest_subarray_with_at_most_k_occurrences([4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6], 3) 6 >>> longest_subarray_with_at_most_k_occurrences([], 1) 0 >>> longest_subarray_with_at_most_k_occurrences([1], 0) 0 pass","solution":"from collections import defaultdict def longest_subarray_with_at_most_k_occurrences(arr, k): Returns the length of the longest subarray where the number of occurrences of any element is at most k. left = 0 freq = defaultdict(int) max_length = 0 for right in range(len(arr)): freq[arr[right]] += 1 while freq[arr[right]] > k: freq[arr[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"def min_value_at_kk(mat, n, k): Given a matrix \`mat\` of size \`n x n\` and an integer \`k\`, determine the minimum possible value of the element at the cell \`(k, k)\` after performing the allowed operations. :param mat: List of List of integers representing the matrix :param n: Integer representing the size of the matrix :param k: Integer representing the cell to minimize :return: Integer representing the minimum value at cell (k, k) >>> mat1 = [ ... [5, 4, 3], ... [9, 2, 1], ... [8, 7, 6] ... ] >>> min_value_at_kk(mat1, 3, 1) 1 >>> mat2 = [ ... [10, 20, 30], ... [40, 50, 60], ... [70, 80, 90] ... ] >>> min_value_at_kk(mat2, 3, 2) 30 >>> mat3 = [ ... [5, 1, 2], ... [4, 6, 3], ... [7, 8, 9] ... ] >>> min_value_at_kk(mat3, 3, 0) 1 >>> mat4 = [ ... [1, 2], ... [3, 4] ... ] >>> min_value_at_kk(mat4, 2, 1) 2 >>> mat5 = [ ... [7, 8, 9], ... [10, 11, 12], ... [13, 14, 15] ... ] >>> min_value_at_kk(mat5, 3, 2) 9 >>> mat6 = [ ... [5] ... ] >>> min_value_at_kk(mat6, 1, 0) 5","solution":"def min_value_at_kk(mat, n, k): Given a matrix \`mat\` of size \`n x n\` and an integer \`k\`, determines the minimum possible value of the element at the cell \`(k, k)\` after performing allowed operations any number of times. :param mat: List of List of integers representing the matrix :param n: Integer representing the size of the matrix :param k: Integer representing the cell to minimize :return: Integer representing the minimum value at cell (k, k) # Collect all the values that can be brought into (k, k) possible_values = set() # k-th row and k-th column for i in range(n): possible_values.add(mat[k][i]) possible_values.add(mat[i][k]) # Return the minimum value from these possible values return min(possible_values)"},{"question":"from typing import List def min_distance_pair(arr1: List[int], arr2: List[int]) -> List[int]: Finds the pair of distinct points such that the distance between them is minimized. Returns the indices of these two points as a list [i, j] with i < j. >>> min_distance_pair([1, 2, 3], [1, 2, 3]) [0, 1] >>> min_distance_pair([1, 1, 4, 4], [1, 2, 1, 2]) [0, 1] >>> min_distance_pair([-1, -2, -3], [-1, -3, -2]) [0, 1] >>> min_distance_pair([1, -3, 4], [-2, 3, -1]) [0, 2] >>> min_distance_pair([i for i in range(10)], [i for i in range(10)]) [0, 1]","solution":"def min_distance_pair(arr1, arr2): Finds the pair of distinct points such that the distance between them is minimized. Returns the indices of these two points as a list [i, j] with i < j. n = len(arr1) min_distance = float('inf') min_pair = None for i in range(n): for j in range(i + 1, n): distance = abs(arr1[i] - arr1[j]) + abs(arr2[i] - arr2[j]) if distance < min_distance: min_distance = distance min_pair = [i, j] return min_pair"},{"question":"from typing import List def is_subsequence(s: str, t: str) -> bool: Check if t is a subsequence of s. >>> is_subsequence(\\"abcde\\", \\"ace\\") True >>> is_subsequence(\\"abcde\\", \\"aec\\") False def longest_subsequence(s: str, words: List[str]) -> int: Return the length of the longest word in the dictionary that is a subsequence of s. >>> longest_subsequence(\\"abcde\\", [\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"]) 3 >>> longest_subsequence(\\"abcdefgh\\", [\\"a\\", \\"bc\\", \\"def\\", \\"abcd\\", \\"abcdh\\"]) 5 >>> longest_subsequence(\\"xyz\\", [\\"xz\\", \\"yz\\", \\"xy\\", \\"xyz\\"]) 3 >>> longest_subsequence(\\"rabbit\\", [\\"rabbit\\", \\"rabit\\", \\"ribbit\\", \\"rat\\"]) 6 >>> longest_subsequence(\\"abcdefghijklmnopqrstuvwxyz\\", [\\"abc\\", \\"defg\\", \\"hijklmnop\\", \\"qrstuvwxyz\\", \\"abcdefghijklmnopqrstuvwxyz\\"]) 26","solution":"def is_subsequence(s, t): Check if t is a subsequence of s. it = iter(s) return all(char in it for char in t) def longest_subsequence(s, words): Returns the length of the longest word in the dictionary that is a subsequence of s. max_length = 0 for word in words: if is_subsequence(s, word): max_length = max(max_length, len(word)) return max_length"},{"question":"def can_be_non_decreasing_by_reversing_subarray(nums: List[int]) -> bool: Determines if there is a subarray that can be reversed to make the entire array non-decreasing. >>> can_be_non_decreasing_by_reversing_subarray([1, 2, 3, 4, 5]) == True >>> can_be_non_decreasing_by_reversing_subarray([5, 4, 3, 2, 1]) == True >>> can_be_non_decreasing_by_reversing_subarray([1, 3, 2, 4, 5]) == True >>> can_be_non_decreasing_by_reversing_subarray([3, 1, 2, 4, 5]) == False >>> can_be_non_decreasing_by_reversing_subarray([1]) == True >>> can_be_non_decreasing_by_reversing_subarray([1, 2, 6, 5, 4, 7, 8, 9]) == True >>> can_be_non_decreasing_by_reversing_subarray([1, 3, 5, 4, 2, 6, 7, 8]) == False","solution":"def can_be_non_decreasing_by_reversing_subarray(nums): Determines if there is a subarray that can be reversed to make the entire array non-decreasing. :param nums: List of integers. :return: True if possible, False otherwise. n = len(nums) # Find the first out-of-order element from the left start = 0 while start < n - 1 and nums[start] <= nums[start + 1]: start += 1 if start == n - 1: # The array is already non-decreasing return True # Find the first out-of-order element from the right end = n - 1 while end > 0 and nums[end] >= nums[end - 1]: end -= 1 # Reverse the subarray nums[start:end+1] nums[start:end+1] = reversed(nums[start:end+1]) # Check if the entire array is now non-decreasing for i in range(n - 1): if nums[i] > nums[i + 1]: return False return True"},{"question":"from typing import List def minSwapsToSort(nums: List[int]) -> int: Returns the minimum number of swaps required to sort the array nums. >>> minSwapsToSort([1, 2, 3, 4, 5]) 0 >>> minSwapsToSort([5, 4, 3, 2, 1]) 2 >>> minSwapsToSort([4, 3, 2, 1, 5]) 2 >>> minSwapsToSort([1]) 0 >>> minSwapsToSort([2, 1]) 1 >>> minSwapsToSort([2, 3, 4, 1, 5]) 3","solution":"def minSwapsToSort(nums): Returns the minimum number of swaps required to sort the array nums. # Pair the elements with their indices indexed_nums = list(enumerate(nums)) # Sort the list by the array values indexed_nums.sort(key=lambda x: x[1]) # Visited array to keep track of visited elements visited = [False] * len(nums) swaps = 0 for i in range(len(nums)): # If already visited or in the right place, skip it if visited[i] or indexed_nums[i][0] == i: continue # Find number of nodes in this cycle cycle_size = 0 j = i while not visited[j]: visited[j] = True # Next node j = indexed_nums[j][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"from typing import List def max_influence_of_clique(m: int, influences: List[int], connections: List[List[int]], k: int) -> int: Return the maximum influence of any clique of size k. A social media platform represents users and their connections as an undirected graph with m nodes, numbered from 1 to m. Each node has an influence value, given by a 1-indexed integer array influences of length m where influences[i] denotes the influence of node i. You are also given a 2D integer array connections where connections[j] = [uj, vj] denotes an undirected edge connecting users uj and vj. A user clique is a subset of users where every two distinct users are connected by an edge. The influence of a user clique is defined as the sum of the influences of the users in the clique. Return the maximum influence of any clique of size k. If there is no clique of size k, return -1. >>> m = 4 >>> influences = [10, 20, 30, 40] >>> connections = [[1, 2], [2, 3], [3, 4], [4, 1], [1, 3], [2, 4]] >>> k = 3 >>> max_influence_of_clique(m, influences, connections, k) 90 >>> m = 3 >>> influences = [15, 20, 25] >>> connections = [[1, 2], [2, 3]] >>> k = 3 >>> max_influence_of_clique(m, influences, connections, k) -1","solution":"from itertools import combinations def max_influence_of_clique(m, influences, connections, k): graph = {i: set() for i in range(1, m + 1)} for u, v in connections: graph[u].add(v) graph[v].add(u) max_influence = -1 nodes = list(range(1, m + 1)) for clique in combinations(nodes, k): if all(v in graph[u] for u, v in combinations(clique, 2)): max_influence = max(max_influence, sum(influences[i - 1] for i in clique)) return max_influence"},{"question":"def max_non_overlapping_projects(start, end, k): Return the maximum number of non-overlapping projects you can work on under the given constraints. >>> max_non_overlapping_projects([1, 2, 3], [2, 3, 4], 2) == 2 >>> max_non_overlapping_projects([1, 3, 5], [2, 4, 6], 3) == 3 >>> max_non_overlapping_projects([1, 1, 1], [2, 2, 2], 1) == 1 >>> max_non_overlapping_projects([1, 2, 4], [3, 3, 5], 2) == 2 >>> max_non_overlapping_projects([1], [2], 1) == 1 >>> max_non_overlapping_projects([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 3) == 3 >>> max_non_overlapping_projects([], [], 1) == 0 >>> max_non_overlapping_projects([1, 2, 3], [1, 2, 3], 2) == 2","solution":"def max_non_overlapping_projects(start, end, k): projects = sorted(zip(end, start)) count = 0 last_end = -1 intervals = [] for e, s in projects: if s > last_end: if count < k: last_end = e count += 1 intervals.append((s, e)) else: for idx, (cur_s, cur_e) in enumerate(intervals): if cur_s > last_end: intervals[idx] = (s, e) last_end = min(e, last_end) break return count"},{"question":"def rearrange_array(arr, m): Rearrange the array such that the absolute difference between any two consecutive elements is at most m. The output should be the lexicographically smallest arrangement that satisfies the condition. >>> rearrange_array([3, 1, 4, 5], 2) [1, 3, 4, 5] >>> rearrange_array([100], 10) [100] >>> rearrange_array([], 2) [] >>> rearrange_array([10, 30, 50], 5) [] >>> rearrange_array([1, 2, 3], 1) [1, 2, 3] >>> rearrange_array([4, 4, 4, 4], 0) [4, 4, 4, 4]","solution":"def rearrange_array(arr, m): Rearrange the array such that the absolute difference between any two consecutive elements is at most m. The output should be the lexicographically smallest arrangement that satisfies the condition. arr.sort() # Start with sorting the array to get lexicographically smallest arrangement # Check if the sorted array satisfies the condition, if not, attempt to rearrange for i in range(len(arr) - 1): if abs(arr[i] - arr[i + 1]) > m: return [] # If it's impossible to rearrange, return empty list return arr"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_nodes_with_two_children(root: TreeNode) -> int: Calculate the sum of all nodes that have both left and right children in the binary tree. >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> root.right.left = TreeNode(6) >>> root.right.right = TreeNode(7) >>> sum_of_nodes_with_two_children(root) 6 >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.left.left = TreeNode(4) >>> root.left.right = TreeNode(5) >>> sum_of_nodes_with_two_children(root) 2 >>> root = TreeNode(1) >>> root.right = TreeNode(3) >>> sum_of_nodes_with_two_children(root) 0 >>> root = TreeNode(1) >>> sum_of_nodes_with_two_children(root) 0 >>> root = None >>> sum_of_nodes_with_two_children(root) 0 >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.left.right = TreeNode(5) >>> root.right.left = TreeNode(6) >>> root.right.right = TreeNode(7) >>> sum_of_nodes_with_two_children(root) 4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_nodes_with_two_children(root: TreeNode) -> int: if root is None: return 0 sum_val = 0 if root.left is not None and root.right is not None: sum_val += root.val sum_val += sum_of_nodes_with_two_children(root.left) sum_val += sum_of_nodes_with_two_children(root.right) return sum_val"},{"question":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class WordDictionary: def __init__(self): Initializes the object. pass def addWord(self, word: str) -> None: Adds a word into the data structure. pass def search(self, word: str) -> bool: Returns \`true\` if there is any string in the data structure that matches the given word, otherwise returns \`false\`. A word could contain the '.' character to represent any one letter. pass # Test cases def test_word_dictionary(): word_dict = WordDictionary() word_dict.addWord(\\"bad\\") word_dict.addWord(\\"dad\\") word_dict.addWord(\\"mad\\") assert word_dict.search(\\"pad\\") == False assert word_dict.search(\\"bad\\") == True assert word_dict.search(\\".ad\\") == True assert word_dict.search(\\"b..\\") == True word_dict.addWord(\\"bat\\") assert word_dict.search(\\"bat\\") == True assert word_dict.search(\\"ba.\\") == True assert word_dict.search(\\"b.t\\") == True assert word_dict.search(\\"b..\\") == True assert word_dict.search(\\"b...\\") == False","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class WordDictionary: def __init__(self): self.root = TrieNode() def addWord(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): def search_in_node(word, node): for i, char in enumerate(word): if char == '.': for child in node.children.values(): if search_in_node(word[i + 1:], child): return True return False else: if char not in node.children: return False node = node.children[char] return node.is_end_of_word return search_in_node(word, self.root)"},{"question":"from typing import List def has_one_on_diagonal(grid: List[List[int]]) -> bool: Checks if there is at least one \\"1\\" on the main diagonal of the matrix. >>> has_one_on_diagonal([ ... [0, 0, 0], ... [0, 1, 0], ... [0, 0, 0]]) True >>> has_one_on_diagonal([ ... [0, 0, 0], ... [0, 0, 0], ... [0, 0, 0]]) False >>> has_one_on_diagonal([ ... [1, 0, 0], ... [0, 1, 0], ... [0, 0, 1]]) True","solution":"from typing import List def has_one_on_diagonal(grid: List[List[int]]) -> bool: Checks if there is at least one \\"1\\" on the main diagonal of the matrix. n = len(grid) for i in range(n): if grid[i][i] == 1: return True return False"},{"question":"def max_operations(arr: List[int], x: int) -> int: Determines the maximum number of operations that can be performed on an array such that each operation involves removing two elements that sum up to x. Args: arr: List[int] - A list of integers. x: int - The target sum for each operation. Returns: int - The maximum number of operations that can be performed. from solution import max_operations def test_max_operations_basic(): arr = [1, 2, 3, 4] x = 5 assert max_operations(arr, x) == 2 def test_max_operations_no_operation(): arr = [1, 1, 1, 1] x = 5 assert max_operations(arr, x) == 0 def test_max_operations_all_pairs(): arr = [1, 9, 2, 8, 3, 7, 4, 6, 5, 5] x = 10 assert max_operations(arr, x) == 5 def test_max_operations_some_pairs(): arr = [1, 3, 2, 4] x = 5 assert max_operations(arr, x) == 2 def test_max_operations_equal_elements(): arr = [5, 5, 5, 5] x = 10 assert max_operations(arr, x) == 2 def test_max_operations_duplicate_elements(): arr = [1, 1, 2, 2, 2, 3, 4] x = 4 assert max_operations(arr, x) == 2","solution":"def max_operations(arr, x): Determines the maximum number of operations that can be performed on an array such that each operation involves removing two elements that sum up to x. Args: arr: List[int] - A list of integers. x: int - The target sum for each operation. Returns: int - The maximum number of operations that can be performed. from collections import Counter count = Counter(arr) operations = 0 for num in count: complement = x - num if complement in count: if num == complement: operations += count[num] // 2 else: pairs = min(count[num], count[complement]) operations += pairs count[num] -= pairs count[complement] -= pairs return operations"},{"question":"def remove_invalid_parentheses(s: str) -> str: Remove the minimum number of parentheses to make the input string valid. >>> remove_invalid_parentheses(\\"()())()\\") in [\\"()()()\\", \\"(())()\\"] >>> remove_invalid_parentheses(\\"(a)())()\\") in [\\"(a)()()\\", \\"(a())()\\"] >>> remove_invalid_parentheses(\\")(\\") == \\"\\"","solution":"def remove_invalid_parentheses(s): Remove the minimum number of parentheses to make the input string valid. def remove_invalid(s, open_paren, close_paren): balance = 0 result = [] for char in s: if char == open_paren: balance += 1 elif char == close_paren: if balance == 0: continue balance -= 1 result.append(char) return ''.join(result) # 1st pass to remove invalid closing parentheses result = remove_invalid(s, '(', ')') # 2nd pass to remove invalid opening parentheses in the reversed string result = remove_invalid(result[::-1], ')', '(') return result[::-1]"},{"question":"def find_missing_number(nums): Given a list of unique integers from 1 to n+1 except one missing number, find the missing number. Parameters: nums (list): A list of unique integers from 1 to n+1 except one missing number. Returns: int: The missing number. >>> find_missing_number([1, 2, 4, 5]) 3 >>> find_missing_number([2, 3, 1, 5]) 4 >>> find_missing_number([6, 7, 8, 3, 2, 1, 5]) 4 >>> find_missing_number([1]) 2 >>> find_missing_number([2]) 1 >>> find_missing_number([1, 3, 4, 5, 6, 7, 8, 9, 10]) 2","solution":"def find_missing_number(nums): Given a list of unique integers from 1 to n+1 except one missing number, find the missing number. Parameters: nums (list): A list of unique integers from 1 to n+1 except one missing number. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"def max_meetings(meetings: List[List[int]]) -> int: Returns the maximum number of meetings that can be attended without overlap. If it is not possible to schedule all meetings, returns -1. >>> max_meetings([[1, 2], [3, 4], [5, 6]]) == 3 >>> max_meetings([[1, 3], [2, 4]]) == -1 >>> max_meetings([[1, 2]]) == 1 >>> max_meetings([[1, 2], [2, 3], [3, 4]]) == 3 >>> max_meetings([[1, 2], [2, 5], [3, 4], [5, 6]]) == -1 >>> max_meetings([[3, 4], [1, 2], [5, 6]]) == 3","solution":"def max_meetings(meetings): Returns the maximum number of meetings that can be attended without overlap. If it is not possible to schedule all meetings, returns -1. # Sort meetings by their end times meetings.sort(key=lambda x: x[1]) last_end_time = -1 count = 0 for meeting in meetings: start, end = meeting if start >= last_end_time: # Attend this meeting last_end_time = end count += 1 else: # Overlap detected, return -1 return -1 return count"},{"question":"def maximize_min_element(arr): Given an array of non-negative integers \`arr\`, you are allowed to choose any two indices \`i\` and \`j\` such that \`i != j\` and set \`arr[i] = arr[i] + arr[j]\`. Your goal is to maximize the value of the minimum element in the array after performing the operation at most once. Return the maximum possible value of the minimum element in the array after at most one operation. >>> maximize_min_element([10]) 10 >>> maximize_min_element([5, 5, 5, 5]) 10 >>> maximize_min_element([1, 2]) 3 >>> maximize_min_element([3, 2, 1, 7, 5]) 3 >>> maximize_min_element([]) 0 >>> maximize_min_element([1, 2, 3, 4, 5]) 3","solution":"def maximize_min_element(arr): Returns the maximum possible value of the minimum element in the array after performing at most one operation. if len(arr) <= 1: return arr[0] if arr else 0 # Handle edge case for empty or single element array # Sort the array to easily access minimum and second minimum elements sorted_arr = sorted(arr) # Compute the new minimum if we combine the two smallest elements new_min = sorted_arr[0] + sorted_arr[1] # Return the maximum of the new minimum and the second smallest element, # which is the original second smallest element in the sorted array return max(new_min, sorted_arr[1])"},{"question":"class MultiTimer: A class to simulate a timer system that handles multiple concurrent countdowns. - addTimer(int id, int countdownTime): Adds a new timer with unique id and initializes its countdown to countdownTime seconds. - tick(): Advances the countdowns of all active timers by one second. - checkTimer(int id): Returns the remaining seconds for the timer with id. If the timer has finished, return 0. If the timer does not exist, return -1. Unit Test: >>> mt = MultiTimer() >>> mt.addTimer(1, 10) >>> mt.checkTimer(1) 10 >>> mt = MultiTimer() >>> mt.checkTimer(2) -1 >>> mt = MultiTimer() >>> mt.addTimer(1, 10) >>> mt.tick() >>> mt.checkTimer(1) 9 >>> mt = MultiTimer() >>> mt.addTimer(1, 5) >>> for _ in range(3): ... mt.tick() >>> mt.checkTimer(1) 2 >>> mt = MultiTimer() >>> mt.addTimer(1, 2) >>> mt.tick() >>> mt.tick() >>> mt.checkTimer(1) 0 >>> mt = MultiTimer() >>> mt.addTimer(1, 5) >>> mt.addTimer(2, 3) >>> mt.tick() >>> mt.checkTimer(1) 4 >>> mt.checkTimer(2) 2 >>> mt = MultiTimer() >>> mt.addTimer(1, 5) >>> mt.addTimer(2, 3) >>> for _ in range(3): ... mt.tick() >>> mt.checkTimer(1) 2 >>> mt.checkTimer(2) 0 >>> mt = MultiTimer() >>> mt.addTimer(1, 5) >>> mt.addTimer(1, 10) # This should not override the existing timer >>> mt.checkTimer(1) 5","solution":"class MultiTimer: def __init__(self): self.timers = {} def addTimer(self, id, countdownTime): if id not in self.timers: self.timers[id] = countdownTime def tick(self): for id in self.timers: if self.timers[id] > 0: self.timers[id] -= 1 def checkTimer(self, id): if id in self.timers: return max(0, self.timers[id]) return -1"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root: TreeNode) -> int: Returns the sum of the values of the deepest leaves in a binary tree. >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> deepestLeavesSum(root) 5 pass def test_single_node(): root = TreeNode(1) assert deepestLeavesSum(root) == 1 def test_two_level_tree(): root = TreeNode(1, TreeNode(2), TreeNode(3)) assert deepestLeavesSum(root) == 5 def test_multiple_levels(): root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) root.left.left.left = TreeNode(7) root.right.right.right = TreeNode(8) assert deepestLeavesSum(root) == 15 # 7 + 8 def test_empty_tree(): root = None assert deepestLeavesSum(root) == 0 def test_imbalanced_tree(): root = TreeNode(1) root.left = TreeNode(2) root.left.left = TreeNode(3) root.left.left.left = TreeNode(4) root.left.left.left.left = TreeNode(5) assert deepestLeavesSum(root) == 5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root): Returns the sum of the values of the deepest leaves. if not root: return 0 from collections import deque queue = deque([root]) level_sum = 0 while queue: level_sum = 0 level_size = len(queue) for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"def longest_subsequence(nums: List[int], d: int) -> int: Given a 0-indexed integer array nums containing n integers, return the length of the longest subsequence such that the difference between consecutive elements is exactly d. A subsequence is a sequence derived by deleting some or none of the elements in the array without changing the order of the remaining elements. If no such subsequence exists, return 0. >>> longest_subsequence([1, 5, 2, 3, 7, 2, 4, 6, 8], 1) 4 >>> longest_subsequence([1, 2, 3], 10) 1 >>> longest_subsequence([3], 1) 1 >>> longest_subsequence([2, 2, 2, 2], 0) 4 >>> longest_subsequence([4, 3, 2, 1], -1) 4 >>> longest_subsequence([1, 1, 1, 1, 1], 0) 5 >>> longest_subsequence([], 5) 0","solution":"def longest_subsequence(nums, d): Returns the length of the longest subsequence such that the difference between consecutive elements is exactly \`d\` in the given integer array \`nums\`. if not nums: return 0 # Dictionary to store the length of subsequence ending with the value of the key dp = {} max_len = 0 for num in nums: if num - d in dp: dp[num] = dp[num - d] + 1 else: dp[num] = 1 max_len = max(max_len, dp[num]) return max_len"},{"question":"def can_attend_all_classes(schedule: List[List[int]]) -> bool: Determine if a student can attend all classes without any overlaps. :param schedule: List of intervals representing class start and end times. :type schedule: List[List[int]] :return: True if a student can attend all classes without conflict, otherwise False. :rtype: bool >>> can_attend_all_classes([]) True >>> can_attend_all_classes([[9, 10], [10, 11], [11, 12]]) True >>> can_attend_all_classes([[9, 10], [9.5, 10.5], [10.75, 11.75]]) False >>> can_attend_all_classes([[9, 10], [10, 11], [11, 12], [12, 13], [12.5, 13.5]]) False >>> can_attend_all_classes([[9, 10]]) True >>> can_attend_all_classes([[9, 10], [10, 11], [11, 12], [12, 13]]) True >>> can_attend_all_classes([[9, 10], [9, 10], [10, 11], [11, 12]]) False >>> can_attend_all_classes([[11, 12], [9, 10], [10, 11]]) True","solution":"def can_attend_all_classes(schedule): Determine if a student can attend all classes without any overlaps. :param schedule: List of intervals representing class start and end times. :type schedule: List[List[int]] :return: True if a student can attend all classes without conflict, otherwise False. :rtype: bool if not schedule: return True # Sort the intervals by their start time schedule.sort() # Check for overlapping intervals for i in range(1, len(schedule)): if schedule[i][0] < schedule[i-1][1]: # Overlapping case return False return True"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BinaryTreeOrder: def __init__(self, root: TreeNode): self.root = root def preorderTraversal(self): Returns the preorder traversal of the binary tree. >>> # Creating a binary tree as follows: >>> # 1 >>> # / >>> # 2 3 >>> # / >>> # 4 5 >>> node4 = TreeNode(4) >>> node5 = TreeNode(5) >>> node2 = TreeNode(2, node4, node5) >>> node3 = TreeNode(3) >>> root = TreeNode(1, node2, node3) >>> bto = BinaryTreeOrder(root) >>> bto.preorderTraversal() [1, 2, 4, 5, 3] pass def inorderTraversal(self): Returns the inorder traversal of the binary tree. >>> # Creating a binary tree as follows: >>> # 1 >>> # / >>> # 2 3 >>> # / >>> # 4 5 >>> node4 = TreeNode(4) >>> node5 = TreeNode(5) >>> node2 = TreeNode(2, node4, node5) >>> node3 = TreeNode(3) >>> root = TreeNode(1, node2, node3) >>> bto = BinaryTreeOrder(root) >>> bto.inorderTraversal() [4, 2, 5, 1, 3] pass def postorderTraversal(self): Returns the postorder traversal of the binary tree. >>> # Creating a binary tree as follows: >>> # 1 >>> # / >>> # 2 3 >>> # / >>> # 4 5 >>> node4 = TreeNode(4) >>> node5 = TreeNode(5) >>> node2 = TreeNode(2, node4, node5) >>> node3 = TreeNode(3) >>> root = TreeNode(1, node2, node3) >>> bto = BinaryTreeOrder(root) >>> bto.postorderTraversal() [4, 5, 2, 3, 1] pass","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BinaryTreeOrder: def __init__(self, root: TreeNode): self.root = root def preorderTraversal(self): if not self.root: return [] return self._preorder(self.root) def _preorder(self, node): if not node: return [] result = [node.val] result += self._preorder(node.left) result += self._preorder(node.right) return result def inorderTraversal(self): if not self.root: return [] return self._inorder(self.root) def _inorder(self, node): if not node: return [] result = self._inorder(node.left) result.append(node.val) result += self._inorder(node.right) return result def postorderTraversal(self): if not self.root: return [] return self._postorder(self.root) def _postorder(self, node): if not node: return [] result = self._postorder(node.left) result += self._postorder(node.right) result.append(node.val) return result"},{"question":"def longest_subarray(nums: List[int]) -> int: Returns the length of the longest contiguous subarray where the difference between the maximum and minimum elements in that subarray is less than or equal to 1. >>> longest_subarray([8, 2, 4, 7]) == 1 >>> longest_subarray([1, 1, 1, 1]) == 4 >>> longest_subarray([1, 2, 1, 2, 1]) == 5 >>> longest_subarray([1, 3, 1, 3, 1, 3]) == 1 >>> longest_subarray([1, 2, 3, 4, 5]) == 2 >>> longest_subarray([5, 4, 3, 2, 1]) == 2","solution":"def longest_subarray(nums): Returns the length of the longest contiguous subarray where the difference between the maximum and minimum elements in that subarray is less than or equal to 1. from collections import deque min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right, value in enumerate(nums): while min_deque and value < min_deque[-1]: min_deque.pop() while max_deque and value > max_deque[-1]: max_deque.pop() min_deque.append(value) max_deque.append(value) while max_deque[0] - min_deque[0] > 1: if nums[left] == min_deque[0]: min_deque.popleft() if nums[left] == max_deque[0]: max_deque.popleft() left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"def max_gifts(nums: List[int]) -> int: Given a list of integers where each integer represents the number of gifts in a house on a street, return the maximum number of gifts you can collect starting from any house on the street. For each house, the number of gifts is halved and rounded down to the nearest integer after you collect the gifts. >>> max_gifts([1, 2, 3]) 6 >>> max_gifts([10, 3, 2, 5, 8]) 28 >>> max_gifts([4, 4, 4, 4]) 16 >>> max_gifts([6, 0, 9, 7, 3]) 25 >>> max_gifts([5]) 5 >>> max_gifts([0, 0, 0, 0]) 0","solution":"def max_gifts(nums): Given a list of integers where each integer represents the number of gifts in a house on a street, return the maximum number of gifts you can collect starting from any house on the street. For each house, the number of gifts is halved and rounded down to the nearest integer after you collect the gifts. n = len(nums) max_gifts_collected = 0 for i in range(n): gifts_collected = 0 for j in range(i, n): gifts_collected += nums[j] nums[j] //= 2 max_gifts_collected = max(max_gifts_collected, gifts_collected) return max_gifts_collected"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: Implements methods to serialize and deserialize a binary tree. def serialize(self, root: TreeNode) -> str: Encode a tree to a single string using pre-order traversal. Args: root (TreeNode): The root node of the binary tree. Returns: str: The serialized string representation of the binary tree. >>> codec = Codec() >>> root = TreeNode(1) >>> root.left = TreeNode(2) >>> root.right = TreeNode(3) >>> root.right.left = TreeNode(4) >>> root.right.right = TreeNode(5) >>> codec.serialize(root) == \\"1 2 # # 3 4 # # 5 # #\\" True >>> codec.serialize(None) == \\"#\\" True pass def deserialize(self, data: str) -> TreeNode: Decode a string representation of a tree to the original binary tree using pre-order traversal. Args: data (str): The serialized string representation of the binary tree. Returns: TreeNode: The root node of the binary tree. >>> codec = Codec() >>> data = \\"1 2 # # 3 4 # # 5 # #\\" >>> root = codec.deserialize(data) >>> root.val == 1 True >>> root.left.val == 2 True >>> root.right.val == 3 True >>> root.right.left.val == 4 True >>> root.right.right.val == 5 True >>> codec.deserialize(\\"#\\") is None True pass","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Codec: def serialize(self, root): Encodes a tree to a single string. def preorder(node): if node is None: return ['#'] return [str(node.val)] + preorder(node.left) + preorder(node.right) return ' '.join(preorder(root)) def deserialize(self, data): Decodes your encoded data to tree. def build_tree(values): value = next(values) if value == '#': return None node = TreeNode(int(value)) node.left = build_tree(values) node.right = build_tree(values) return node values = iter(data.split()) return build_tree(values)"},{"question":"def max_area(heights: List[int]) -> int: Returns the maximum amount of water a container can store given the heights of the container sides. >>> max_area([1, 8, 6, 2, 5, 4, 8, 3, 7]) 49 >>> max_area([1, 1]) 1 >>> max_area([1]) 0 >>> max_area([1, 2, 3, 4, 5]) 6 >>> max_area([5, 4, 3, 2, 1]) 6 >>> heights = [i for i in range(10000, 0, -1)] >>> max_area(heights) == 25000000","solution":"def max_area(heights): Returns the maximum amount of water a container can store. left, right = 0, len(heights) - 1 max_water = 0 while left < right: h = min(heights[left], heights[right]) width = right - left max_water = max(max_water, h * width) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"from typing import List def maxCoins(grid: List[List[int]]) -> int: Determine the maximum number of coins the robot can collect on its way to the bottom-right corner of the grid. >>> maxCoins([[5]]) == 5 >>> maxCoins([[1, 2, 3]]) == 6 >>> maxCoins([[1], [2], [3]]) == 6 >>> maxCoins([[1, 2], [1, 3]]) == 6 >>> maxCoins([ ... [1, 3, 1], ... [1, 5, 1], ... [4, 2, 1] ... ]) == 12 >>> maxCoins([]) == 0 >>> maxCoins([[]]) == 0","solution":"from typing import List def maxCoins(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"def mergeAlternately(word1: str, word2: str) -> str: Merge two strings alternately to form a single resultant string. If one string is longer than the other, append the additional characters of the longer string to the end. >>> mergeAlternately(\\"abc\\", \\"pqr\\") \\"apbqcr\\" >>> mergeAlternately(\\"ab\\", \\"pqrs\\") \\"apbqrs\\" >>> mergeAlternately(\\"abcd\\", \\"pq\\") \\"apbqcd\\" >>> mergeAlternately(\\"abc\\", \\"\\") \\"abc\\" >>> mergeAlternately(\\"\\", \\"xyz\\") \\"xyz\\" >>> mergeAlternately(\\"\\", \\"\\") \\"\\" >>> mergeAlternately(\\"a\\", \\"b\\") \\"ab\\" >>> mergeAlternately(\\"a\\", \\"\\") \\"a\\" >>> mergeAlternately(\\"\\", \\"b\\") \\"b\\"","solution":"def mergeAlternately(word1, word2): Returns a string by merging two input strings alternately. If one string is longer than the other, append the additional characters of the longer string at the end. merged_string = [] len1, len2 = len(word1), len(word2) max_len = max(len1, len2) for i in range(max_len): if i < len1: merged_string.append(word1[i]) if i < len2: merged_string.append(word2[i]) return ''.join(merged_string)"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Return the maximum beauty among all possible paths in the binary tree. A path is defined as a sequence of nodes starting and ending at any two nodes in the tree. >>> test_single_node() True >>> test_two_nodes() True >>> test_multiple_nodes() True >>> test_negatives() True >>> test_complex_tree() True","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Return the maximum beauty among all possible paths in the binary tree. A path is defined as a sequence of nodes starting and ending at any two nodes in the tree. def get_maximum_path(node): nonlocal max_sum if not node: return 0 left = max(0, get_maximum_path(node.left)) # Only take positive contributions right = max(0, get_maximum_path(node.right)) current_path_sum = node.val + left + right max_sum = max(max_sum, current_path_sum) return node.val + max(left, right) max_sum = float('-inf') get_maximum_path(root) return max_sum"},{"question":"def remove_vowels(s: str) -> str: Removes all vowels from the given string \`s\`. Args: s (str): Input string consisting of lowercase and uppercase ASCII characters. Returns: str: String with all vowels removed. >>> remove_vowels(\\"aeiouAEIOU\\") == \\"\\" >>> remove_vowels(\\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\\") == \\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\\" >>> remove_vowels(\\"Hello, World!\\") == \\"Hll, Wrld!\\" >>> remove_vowels(\\"Python is fun\\") == \\"Pythn s fn\\" >>> remove_vowels(\\"\\") == \\"\\" >>> remove_vowels(\\"Beautiful Day\\") == \\"Btfl Dy\\"","solution":"def remove_vowels(s): Removes all vowels from the given string \`s\`. Args: s (str): Input string consisting of lowercase and uppercase ASCII characters. Returns: str: String with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"def findUnsortedSubarray(heights: List[int]) -> int: Returns the length of the shortest contiguous subarray that, if sorted, would result in the whole array being sorted in non-decreasing order. If the entire array is already sorted, returns 0. Examples: >>> findUnsortedSubarray([1, 2, 3, 4, 5]) 0 >>> findUnsortedSubarray([5, 4, 3, 2, 1]) 5 >>> findUnsortedSubarray([1, 3, 2, 4, 5]) 2 >>> findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15]) 5 >>> findUnsortedSubarray([2, 2, 2, 2, 2]) 0 >>> findUnsortedSubarray([1, 2, 4, 3, 5]) 2 >>> findUnsortedSubarray(list(range(1, 10001)) + [0]) 10001","solution":"from typing import List def findUnsortedSubarray(heights: List[int]) -> int: Returns the length of the shortest contiguous subarray that, if sorted, would result in the whole array being sorted in non-decreasing order. If the entire array is already sorted, returns 0. n = len(heights) if n <= 1: return 0 start, end = -1, -1 max_seen, min_seen = -float('inf'), float('inf') # Find the end boundary of the unsorted subarray for i in range(n): if heights[i] < max_seen: end = i else: max_seen = heights[i] # Find the start boundary of the unsorted subarray for i in range(n-1, -1, -1): if heights[i] > min_seen: start = i else: min_seen = heights[i] if start == -1: # array is already sorted return 0 return end - start + 1"},{"question":"def can_form_target(words: List[str], target: str) -> bool: Determine if the target can be formed by concatenating exactly two distinct strings from the array words in any order. >>> can_form_target([\\"ab\\", \\"c\\", \\"abc\\"], \\"abc\\") True >>> can_form_target([\\"a\\", \\"b\\", \\"c\\"], \\"abc\\") False >>> can_form_target([], \\"abc\\") False >>> can_form_target([\\"a\\", \\"b\\", \\"c\\"], \\"\\") False >>> can_form_target([\\"a\\", \\"b\\", \\"ab\\", \\"c\\"], \\"bc\\") True","solution":"def can_form_target(words, target): for i in range(len(words)): for j in range(len(words)): if i != j and words[i] + words[j] == target: return True return False"},{"question":"def max_island_perimeter(grid: List[List[int]]) -> int: Return the perimeter of the island that contains the most number of land cells in the given grid. >>> max_island_perimeter([ ... [0,1,0,0], ... [1,1,1,0], ... [0,1,0,0], ... [1,1,0,0] ... ]) 16 >>> max_island_perimeter([ ... [0,1,0,0], ... [1,1,0,0], ... [0,0,1,1], ... [0,0,1,1] ... ]) 8 >>> max_island_perimeter([ ... [0,0,0], ... [0,0,0], ... [0,0,0] ... ]) 0 >>> max_island_perimeter([ ... [1,1,1], ... [1,1,1], ... [1,1,1] ... ]) 12 >>> max_island_perimeter([ ... [0,0,0], ... [0,1,0], ... [0,0,0] ... ]) 4","solution":"def max_island_perimeter(grid): if not grid: return 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 1 if grid[r][c] == -1: return 0 grid[r][c] = -1 perimeter = 0 perimeter += dfs(r+1, c) perimeter += dfs(r-1, c) perimeter += dfs(r, c+1) perimeter += dfs(r, c-1) return perimeter max_perim = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: max_perim = max(max_perim, dfs(r, c)) return max_perim"},{"question":"def find_kth_missing_element(arr: List[int], k: int) -> int: Returns the kth smallest element in the array that is not present in arr. >>> find_kth_missing_element([2, 3, 4, 7, 11], 5) 9 >>> find_kth_missing_element([1, 2, 3, 4], 2) 6 >>> find_kth_missing_element([5, 7, 11], 3) 3 >>> find_kth_missing_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) 11 >>> find_kth_missing_element([], 10) 10","solution":"def find_kth_missing_element(arr, k): Returns the kth smallest element in the array that is not present in arr. missing_count = 0 current = 1 idx = 0 while missing_count < k: if idx < len(arr) and arr[idx] == current: idx += 1 else: missing_count += 1 if missing_count < k: current += 1 return current"},{"question":"import random class RandomizedCollection: def __init__(self): Initializes the data structure. self.data = [] self.data_dict = {} self.unique_elements = set() def insert(self, val: int) -> None: Inserts an item val to the collection. >>> rc = RandomizedCollection() >>> rc.insert(1) >>> rc.insert(5) >>> rc.data [1, 5] >>> rc.data_dict {1: 1, 5: 1} >>> rc.unique_elements {1, 5} def delete(self, val: int) -> None: Deletes a single instance of val from the collection. >>> rc = RandomizedCollection() >>> rc.insert(1) >>> rc.insert(1) >>> rc.insert(2) >>> rc.delete(1) >>> rc.data [1, 2] >>> rc.data_dict {1: 1, 2: 1} >>> rc.unique_elements {1, 2} >>> rc.delete(1) >>> rc.data [2] >>> rc.data_dict {2: 1} >>> rc.unique_elements {2} def get_random(self) -> int: Get a random element from the collection. >>> rc = RandomizedCollection() >>> rc.insert(1) >>> rc.insert(2) >>> rc.insert(3) >>> random_element = rc.get_random() >>> random_element in [1, 2, 3] True def get_random_from_unique_elements(self) -> int: Get a random element from the unique elements of the collection. >>> rc = RandomizedCollection() >>> rc.insert(1) >>> rc.insert(2) >>> rc.insert(2) >>> random_element = rc.get_random_from_unique_elements() >>> random_element in [1, 2] True","solution":"import random class RandomizedCollection: def __init__(self): Initialize your data structure here. self.data = [] self.data_dict = {} self.unique_elements = set() def insert(self, val: int) -> None: Inserts an item val to the collection. self.data.append(val) self.data_dict[val] = self.data_dict.get(val, 0) + 1 self.unique_elements.add(val) def delete(self, val: int) -> None: Deletes a single instance of val from the collection. if val in self.data_dict: self.data_dict[val] -= 1 self.data.remove(val) if self.data_dict[val] == 0: del self.data_dict[val] self.unique_elements.remove(val) def get_random(self) -> int: Get a random element from the collection. return random.choice(self.data) def get_random_from_unique_elements(self) -> int: Get a random element from the unique elements of the collection. return random.choice(list(self.unique_elements))"},{"question":"def minimum_moves_to_sort(heights: List[int]) -> int: Returns the minimum number of moves required to sort the list in increasing order by height. A move consists of picking any person from the list and moving them to any other position in the list. >>> minimum_moves_to_sort([1, 2, 3, 4, 5]) == 0 >>> minimum_moves_to_sort([5, 4, 3, 2, 1]) == 4 >>> minimum_moves_to_sort([3, 1, 2, 5, 4]) == 2 >>> minimum_moves_to_sort([1]) == 0 >>> minimum_moves_to_sort([]) == 0","solution":"def minimum_moves_to_sort(heights): Returns the minimum number of moves required to sort the list in increasing order by height. sorted_heights = sorted(heights) lcs_length = longest_common_subsequence(heights, sorted_heights) return len(heights) - lcs_length def longest_common_subsequence(array1, array2): Helper function to find the length of the longest common subsequence between two arrays. m, n = len(array1), len(array2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if array1[i - 1] == array2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head: ListNode, k: int) -> ListNode: Reverse the nodes of the linked list in groups of k. >>> head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))) >>> k = 2 >>> result = reverseKGroup(head, k) >>> while result: ... print(result.val, end=\\" \\") ... result = result.next 2 1 4 3 5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverseLinkedList(head, k): new_head = None ptr = head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head count = 0 ptr = head while count < k and ptr: ptr = ptr.next count += 1 if count == k: reversed_head = reverseLinkedList(head, k) if head: head.next = reverseKGroup(ptr, k) return reversed_head return head"},{"question":"def findUnsortedSubarray(nums): Finds the length of the shortest subarray which, if sorted, results in the whole array being sorted in non-decreasing order. >>> findUnsortedSubarray([1, 2, 3, 4, 5]) == 0 >>> findUnsortedSubarray([5, 4, 3, 2, 1]) == 5 >>> findUnsortedSubarray([1, 3, 5, 4, 2, 6]) == 4 >>> findUnsortedSubarray([3, 2, 1, 4, 5]) == 3 >>> findUnsortedSubarray([1, 2, 3, 5, 4]) == 2 >>> findUnsortedSubarray([1]) == 0 >>> findUnsortedSubarray([1, 1, 1, 1]) == 0 >>> findUnsortedSubarray([1, 3, 2, 3, 1, 2]) == 5","solution":"def findUnsortedSubarray(nums): Finds the length of the shortest subarray which, if sorted, results in the whole array being sorted in non-decreasing order. # Create copies of the array and sort one sorted_nums = sorted(nums) # Find the first and last positions where nums and sorted_nums differ start = 0 while start < len(nums) and nums[start] == sorted_nums[start]: start += 1 if start == len(nums): # If the entire array is already sorted return 0 end = len(nums) - 1 while end > start and nums[end] == sorted_nums[end]: end -= 1 # Length of the subarray to sort return end - start + 1"},{"question":"class StringManipulator: def __init__(self, s): Initializes the object with the given string. :param s: The initial string to manipulate. def reverseSegment(self, start, end): Reverses the substring within the range [start, end] (inclusive). :param start: Starting index of the segment to reverse. :param end: Ending index of the segment to reverse. def charFrequency(self, start, end, ch): Returns the frequency of character \`ch\` in the substring within the range [start, end] (inclusive). :param start: Starting index of the segment to check. :param end: Ending index of the segment to check. :param ch: The character to count within the segment. :return: Frequency of the character \`ch\` within the segment.","solution":"class StringManipulator: def __init__(self, s): Initializes the object with the given string. :param s: The initial string to manipulate. self.s = s def reverseSegment(self, start, end): Reverses the substring within the range [start, end] (inclusive). :param start: Starting index of the segment to reverse. :param end: Ending index of the segment to reverse. if start < 0 or end >= len(self.s) or start > end: raise ValueError(\\"Invalid indices\\") # Convert string to list to perform in-place operations s_list = list(self.s) while start < end: s_list[start], s_list[end] = s_list[end], s_list[start] start += 1 end -= 1 self.s = ''.join(s_list) def charFrequency(self, start, end, ch): Returns the frequency of character \`ch\` in the substring within the range [start, end] (inclusive). :param start: Starting index of the segment to check. :param end: Ending index of the segment to check. :param ch: The character to count within the segment. :return: Frequency of the character \`ch\` within the segment. if start < 0 or end >= len(self.s) or start > end: raise ValueError(\\"Invalid indices\\") segment = self.s[start:end+1] return segment.count(ch)"},{"question":"def contains_elements_with_difference(nums: List[int], k: int) -> bool: Determines if there are two distinct elements in nums with an absolute difference of k. >>> contains_elements_with_difference([1, 5, 3, 4, 2], 2) == True >>> contains_elements_with_difference([1, 2, 3, 4], 10) == False >>> contains_elements_with_difference([1, -1, 3, 4], 2) == True >>> contains_elements_with_difference([1, 1, 1, 1], 0) == False >>> contains_elements_with_difference([], 1) == False >>> contains_elements_with_difference([1], 1) == False","solution":"def contains_elements_with_difference(nums, k): Determines if there are two distinct elements in nums with an absolute difference of k. Args: nums (list of int): List of integers. k (int): Target absolute difference. Returns: bool: True if such a pair exists, otherwise False. nums_set = set(nums) for num in nums: if (num + k in nums_set and num + k != num) or (num - k in nums_set and num - k != num): return True return False"},{"question":"from collections import Counter def can_form_by_rearranging_and_adding(s1: str, s2: str) -> bool: Determines if s2 can be formed by rearranging the characters of s1 and possibly adding some characters. Args: s1 (str): The original string. s2 (str): The string to be formed. Returns: bool: True if s2 can be formed, otherwise False. >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"cba\\") True >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"aabbcc\\") False >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"abcd\\") False >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"abcc\\") False >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"abc\\") True >>> can_form_by_rearranging_and_adding(\\"\\", \\"\\") True >>> can_form_by_rearranging_and_adding(\\"abc\\", \\"\\") True >>> can_form_by_rearranging_and_adding(\\"\\", \\"abc\\") False","solution":"from collections import Counter def can_form_by_rearranging_and_adding(s1, s2): Determines if s2 can be formed by rearranging the characters of s1 and possibly adding some characters. Args: s1 (str): The original string. s2 (str): The string to be formed. Returns: bool: True if s2 can be formed, otherwise False. count_s1 = Counter(s1) count_s2 = Counter(s2) for char in count_s2: if count_s1[char] < count_s2[char]: return False return True"},{"question":"def min_operations_to_delete_string(s: str) -> int: Calculates the minimum number of operations required to delete the entire string by removing palindrome substrings. >>> min_operations_to_delete_string('a') == 1 >>> min_operations_to_delete_string('aa') == 1 >>> min_operations_to_delete_string('ab') == 2 >>> min_operations_to_delete_string('aba') == 1 >>> min_operations_to_delete_string('abc') == 2 >>> min_operations_to_delete_string('abccba') == 1 >>> min_operations_to_delete_string('') == 0 >>> min_operations_to_delete_string('abcd') == 2","solution":"def min_operations_to_delete_string(s): Calculates the minimum number of operations required to delete the entire string by removing palindrome substrings. if not s: return 0 # Helper function to check if the string is a palindrome. def is_palindrome(st): return st == st[::-1] # If the entire string is a palindrome, only one operation is needed. if is_palindrome(s): return 1 # Otherwise, it will always take 2 operations: # 1. Remove any single character at first (since removing a single character makes it a palindrome) # 2. Remove the remaining palindrome string. return 2"},{"question":"def longest_substring_with_replacements(s: str, k: int) -> int: Returns the length of the longest possible substring with repeated characters after performing at most k changes. >>> longest_substring_with_replacements(\\"aabccbb\\", 2) 5 >>> longest_substring_with_replacements(\\"abbcb\\", 1) 4","solution":"def longest_substring_with_replacements(s, k): Returns the length of the longest possible substring with repeated characters after performing at most k changes. from collections import defaultdict window_start, max_length, max_repeat_letter_count = 0, 0, 0 frequency_map = defaultdict(int) # Try to extend the range [window_start, window_end] for window_end in range(len(s)): right_char = s[window_end] frequency_map[right_char] += 1 max_repeat_letter_count = max(max_repeat_letter_count, frequency_map[right_char]) # Current window size is from window_start to window_end, overall we have window_end - window_start + 1 elements if (window_end - window_start + 1 - max_repeat_letter_count) > k: left_char = s[window_start] frequency_map[left_char] -= 1 window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"def perfect_numbers_up_to_n(n: int) -> List[int]: Returns a list of all perfect numbers up to a given integer n. >>> perfect_numbers_up_to_n(10) [6] >>> perfect_numbers_up_to_n(30) [6, 28] >>> perfect_numbers_up_to_n(5) [] >>> perfect_numbers_up_to_n(100) [6, 28] >>> perfect_numbers_up_to_n(500) [6, 28, 496]","solution":"def perfect_numbers_up_to_n(n): Returns a list of all perfect numbers up to a given integer n. def is_perfect(num): # Find all divisors of num divisors = [i for i in range(1, num) if num % i == 0] # Check if sum of divisors equals to the number itself return sum(divisors) == num return [i for i in range(1, n + 1) if is_perfect(i)]"},{"question":"def max_items_within_budget(nums: List[int], b: int) -> int: Returns the maximum number of items that can be bought without exceeding the budget. >>> max_items_within_budget([1, 2, 3], 10) 3 >>> max_items_within_budget([5, 3, 8, 2], 10) 3 >>> max_items_within_budget([11, 12, 20], 10) 0 >>> max_items_within_budget([4, 3, 2, 1], 10) 4 >>> max_items_within_budget([], 10) 0 >>> max_items_within_budget([1, 2, 3], 0) 0 >>> max_items_within_budget([1, 2, 3], 100) 3","solution":"def max_items_within_budget(nums, b): Returns the maximum number of items that can be bought without exceeding the budget b. nums.sort() count = 0 sum_cost = 0 for cost in nums: if sum_cost + cost <= b: sum_cost += cost count += 1 else: break return count"},{"question":"def count_subarrays_with_sum_k(arr: List[int], k: int) -> int: Returns the number of contiguous subarrays that sum up to k. >>> count_subarrays_with_sum_k([1, 1, 1], 2) == 2 >>> count_subarrays_with_sum_k([3], 3) == 1 >>> count_subarrays_with_sum_k([3], 4) == 0 >>> count_subarrays_with_sum_k([0, 0, 0, 0], 0) == 10 >>> count_subarrays_with_sum_k([1, 2, 3], 7) == 0 >>> count_subarrays_with_sum_k([1, 2, 3, 2, 1, 1], 3) == 3 >>> count_subarrays_with_sum_k([1, -1, 1, -1, 1, -1, 1], 0) == 12","solution":"def count_subarrays_with_sum_k(arr, k): Returns the number of contiguous subarrays that sum up to k. Parameters: arr (list of int): Array of integers. k (int): Target sum value. Returns: int: Number of subarrays with sum equal to k. from collections import defaultdict count = 0 current_sum = 0 sum_counts = defaultdict(int) sum_counts[0] = 1 # To handle the case when a subarray with sum k starts from index 0 for num in arr: current_sum += num if (current_sum - k) in sum_counts: count += sum_counts[current_sum - k] sum_counts[current_sum] += 1 return count"},{"question":"def can_split_array(arr: List[int], threshold: int) -> bool: Determines if it is possible to split the array into two non-empty subarrays such that the sum of elements in each subarray is greater than the threshold. Parameters: arr (list): List of integers. threshold (int): The threshold value. Returns: bool: True if it is possible to split the array, False otherwise. >>> can_split_array([1, 2, 3, 4, 5], 5) True >>> can_split_array([1, 2, 3], 10) False >>> can_split_array([100, 200, 300, 400, 500], 500) True >>> can_split_array([1, 1, 1, 1, 1], 1) True >>> can_split_array([10, 20, 30, 40, 50], 150) False >>> can_split_array([10, 20], 5) True >>> can_split_array([1, 2, 3], 6) False","solution":"def can_split_array(arr, threshold): Determines if it is possible to split the array into two non-empty subarrays such that the sum of elements in each subarray is greater than the threshold. Parameters: arr (list): List of integers. threshold (int): The threshold value. Returns: bool: True if it is possible to split the array, False otherwise. total_sum = sum(arr) if total_sum <= threshold: return False current_sum = 0 for i in range(len(arr) - 1): current_sum += arr[i] if current_sum > threshold and (total_sum - current_sum) > threshold: return True return False"},{"question":"def islandPerimeter(grid: List[List[int]]) -> int: Given a 2D grid consisting of '1's (land) and '0's (water), determine the perimeter of the island. Each cell is a square with a side length of 1. The grid has one island, surrounded by water and no lakes. :param grid: List[List[int]] - 2D grid representing the map of the island :return: int - perimeter of the island >>> islandPerimeter([[1]]) 4 >>> islandPerimeter([[1, 1], [1, 1]]) 8 >>> islandPerimeter([[1, 1, 1]]) 8 >>> islandPerimeter([[1], [1], [1]]) 8 >>> islandPerimeter([ ... [0, 1, 0, 0], ... [1, 1, 1, 0], ... [0, 1, 0, 0], ... [1, 1, 0, 0], ... ]) 16 >>> islandPerimeter([ ... [0, 0, 0], ... [0, 0, 0], ... [0, 0, 0], ... ]) 0","solution":"def islandPerimeter(grid): Given a 2D grid of '1's and '0's, where '1' represents land and '0' represents water, this function calculates and returns the perimeter of the island. The island is guaranteed to be surrounded by water and have no lakes (water inside the island that isn't connected to the water around the island). :param grid: List[List[int]] - 2D grid representing the map of the island :return: int - perimeter of the island rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Add 4 sides for each land cell perimeter += 4 # Subtract sides that are shared with another land cell if r > 0 and grid[r-1][c] == 1: perimeter -= 2 if c > 0 and grid[r][c-1] == 1: perimeter -= 2 return perimeter"},{"question":"def smallestStringWithSwaps(s: str, pairs: List[List[int]]) -> str: Return the lexicographically smallest string after performing the swaps defined in the pairs of indices. You can swap characters at indices \`a\` and \`b\` of the string \`s\` as specified in the pairs array. >>> smallestStringWithSwaps(\\"dcab\\", [[0, 3], [1, 2]]) \\"bacd\\" >>> smallestStringWithSwaps(\\"dcab\\", [[0, 1]]) \\"cdab\\" >>> smallestStringWithSwaps(\\"abcd\\", []) \\"abcd\\" >>> smallestStringWithSwaps(\\"cba\\", [[0, 1], [1, 2]]) \\"abc\\" >>> smallestStringWithSwaps(\\"zxy\\", [[0, 1], [1, 2]]) \\"xyz\\" >>> smallestStringWithSwaps(\\"dcabef\\", [[0, 3], [1, 2], [4, 5]]) \\"bacdef\\" >>> smallestStringWithSwaps(\\"dcab\\", [[0, 3], [3, 0], [1, 2]]) \\"bacd\\" >>> smallestStringWithSwaps(\\"aabb\\", [[0, 1], [2, 3]]) \\"aabb\\"","solution":"def smallestStringWithSwaps(s, pairs): from collections import defaultdict parent = {} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Initialize the union-find structure for i in range(len(s)): parent[i] = i # Applying union operations for each pair for x, y in pairs: union(x, y) # Grouping indices by their root parent groups = defaultdict(list) for i in range(len(s)): root = find(i) groups[root].append(i) # Forming the smallest possible string by sorting each group s = list(s) for group in groups.values(): indices = sorted(group) characters = sorted(s[i] for i in group) for ind, char in zip(indices, characters): s[ind] = char return ''.join(s)"},{"question":"from typing import List def minFlipsToSortColumns(grid: List[List[int]]) -> int: Returns the minimum number of flip operations required to make the matrix column-sorted. A binary matrix has only 0s and 1s as its elements. You can perform a flip operation on any 1 x 1 sub-matrix, which means you flip the value at the chosen position (i.e., change a 0 to 1 or a 1 to 0). A column is considered sorted if each element is greater than or equal to the element directly above it. If it is already column-sorted, return 0. >>> minFlipsToSortColumns([ ... [0, 0, 0], ... [1, 0, 0], ... [1, 1, 1] ... ]) 0 >>> minFlipsToSortColumns([ ... [0, 0, 0], ... [1, 1, 0], ... [1, 0, 1] ... ]) 9 from solution import minFlipsToSortColumns def test_already_sorted(): grid = [ [0, 0, 0], [1, 0, 0], [1, 1, 1] ] assert minFlipsToSortColumns(grid) == 0 def test_one_flip_needed(): grid = [ [0, 0, 0], [1, 1, 0], [1, 0, 1] ] assert minFlipsToSortColumns(grid) == 9 def test_multiple_flips_needed(): grid = [ [1, 0, 1], [0, 1, 0], [1, 0, 1] ] assert minFlipsToSortColumns(grid) == 9 def test_all_ones(): grid = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] assert minFlipsToSortColumns(grid) == 0 def test_all_zeros(): grid = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] assert minFlipsToSortColumns(grid) == 0 def test_flips_in_single_column(): grid = [ [0], [1], [0], [1] ] assert minFlipsToSortColumns(grid) == 4","solution":"def minFlipsToSortColumns(grid): Returns the minimum number of flip operations required to make the matrix column-sorted. m = len(grid) n = len(grid[0]) if m > 0 else 0 flips = 0 for j in range(n): for i in range(1, m): if grid[i][j] < grid[i - 1][j]: flips += 1 return flips if flips == 0 else (m * n) # We return m*n flips as approximation for correction per column"},{"question":"def can_player_a_win(arr: List[int]) -> bool: Determines if player A can guarantee a win given an array of integers that represent piles of stones. >>> can_player_a_win([1]) True >>> can_player_a_win([0]) False >>> can_player_a_win([2, 2]) False >>> can_player_a_win([4, 7]) True","solution":"def can_player_a_win(arr): Determines if player A can guarantee a win given an array of integers that represent piles of stones. :param arr: List of integers where each element represents number of stones in a pile :type arr: List[int] :return: True if player A can guarantee a win, False otherwise :rtype: bool # XOR all the pile sizes xor_sum = 0 for stones in arr: xor_sum ^= stones # Player A guarantees a win if xor_sum is non-zero return xor_sum != 0"},{"question":"def min_transformations(s: str, string_dict: list) -> int: Returns the minimum number of transformations required to change string \`s\` into one of the strings in \`string_dict\`. If \`s\` cannot be transformed into any string in \`string_dict\`, returns \`-1\`. Args: s (str): The original string. string_dict (list of str): List of strings to transform \`s\` into. Returns: int: Minimum number of transformations, or -1 if not possible. >>> min_transformations(\\"abc\\", [\\"abc\\", \\"def\\", \\"ghi\\"]) 0 >>> min_transformations(\\"abc\\", [\\"abd\\", \\"def\\", \\"ghi\\"]) 1 >>> min_transformations(\\"abc\\", [\\"def\\", \\"ghi\\", \\"abcd\\"]) 3 >>> min_transformations(\\"abc\\", [\\"abcd\\", \\"defg\\"]) -1 >>> min_transformations(\\"abc\\", [\\"abe\\", \\"dbc\\", \\"aac\\"]) 1 >>> min_transformations(\\"\\", [\\"\\", \\"a\\"]) 0","solution":"def min_transformations(s, string_dict): Returns the minimum number of transformations required to change string \`s\` into one of the strings in \`string_dict\`. If \`s\` cannot be transformed into any string in \`string_dict\`, returns \`-1\`. Args: s (str): The original string. string_dict (list of str): List of strings to transform \`s\` into. Returns: int: Minimum number of transformations, or -1 if not possible. def transformations_needed(s1, s2): return sum(1 for a, b in zip(s1, s2) if a != b) min_transforms = float('inf') for target in string_dict: if len(s) == len(target): min_transforms = min(min_transforms, transformations_needed(s, target)) return min_transforms if min_transforms != float('inf') else -1"},{"question":"def sortStudents(heights: List[int]) -> List[int]: Sorts the students by their heights in non-decreasing order while maintaining the relative order of students with the same height. Args: heights (list): A list of integers representing the heights of students. Returns: list: A sorted list of integers. Examples: >>> sortStudents([160, 150, 170, 150, 160]) [150, 150, 160, 160, 170] >>> sortStudents([150, 150, 150]) [150, 150, 150] >>> sortStudents([150, 160, 170]) [150, 160, 170] >>> sortStudents([170, 160, 150]) [150, 160, 170] >>> sortStudents([160]) [160] >>> sortStudents([160, 150, 170, 160, 150]) [150, 150, 160, 160, 170] >>> sortStudents([]) []","solution":"def sortStudents(heights): Sorts the students by their heights in non-decreasing order while maintaining the relative order of students with the same height. Args: heights (list): A list of integers representing the heights of students. Returns: list: A sorted list of integers. return sorted(heights, key=lambda x: (x, heights.index(x)))"},{"question":"def max_histogram_area(heights: list[int]) -> int: Returns the maximum rectangular area that can be formed within the given skyline (histogram). heights : list[int] : An array of integers representing the height of the blocks. >>> max_histogram_area([2, 1, 5, 6, 2, 3]) 10 >>> max_histogram_area([2, 4]) 4 >>> max_histogram_area([]) 0 >>> max_histogram_area([1, 1, 1, 1, 1]) 5 >>> max_histogram_area([6, 2, 5, 4, 5, 1, 6]) 12 >>> max_histogram_area([1, 2, 3, 4, 5, 6]) 12 >>> max_histogram_area([6, 5, 4, 3, 2, 1]) 12 >>> max_histogram_area([2, 3, 3, 2]) 8 >>> max_histogram_area([2]) 2 >>> max_histogram_area([2, 1, 2]) 3","solution":"def max_histogram_area(heights): Returns the maximum rectangular area that can be formed within the given skyline (histogram). heights : list[int] : An array of integers representing the height of the blocks. stack = [] # to store the indices of the histogram bars max_area = 0 # initialize max area as zero index = 0 # current index while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar 'h' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"def construct_string(s: str, k: int) -> str: Constructs a new string of length k using characters from s in lexicographical order. Parameters: s (str): The input string consisting of only lowercase English letters. k (int): The target length of the new string. Returns: str: The constructed string of length k or an empty string if it's not possible. >>> construct_string(\\"abc\\", 2) \\"ab\\" >>> construct_string(\\"zxy\\", 1) \\"x\\" >>> construct_string(\\"zzyx\\", 3) \\"xyz\\" >>> construct_string(\\"babcd\\", 2) \\"ab\\" >>> construct_string(\\"a\\", 2) \\"\\" >>> construct_string(\\"abcdef\\", 3) \\"abc\\" >>> construct_string(\\"cba\\", 2) \\"ab\\" >>> construct_string(\\"edcba\\", 2) \\"ab\\"","solution":"def construct_string(s, k): Constructs a new string of length k using characters from s in lexicographical order. Parameters: s (str): The input string consisting of only lowercase English letters. k (int): The target length of the new string. Returns: str: The constructed string of length k or an empty string if it's not possible. if k > len(s): return \\"\\" result = [] s = sorted(s) for i in range(len(s)): if len(result) < k: result.append(s[i]) elif len(result) > k: result.pop() else: break return ''.join(result)"},{"question":"def count_prefix_compatible_pairs(words: List[str]) -> int: Returns the number of prefix-compatible pairs in the given list of strings. Args: words (list): List of strings Returns: int: Number of prefix-compatible pairs (A, B) where A is a prefix of B and A != B >>> count_prefix_compatible_pairs([\\"apple\\", \\"banana\\", \\"cherry\\"]) == 0 >>> count_prefix_compatible_pairs([\\"a\\", \\"ab\\", \\"abc\\"]) == 3 >>> count_prefix_compatible_pairs([\\"prefix\\", \\"pre\\", \\"prefixes\\", \\"suffix\\"]) == 3 >>> count_prefix_compatible_pairs([\\"dog\\", \\"cat\\", \\"bird\\"]) == 0 >>> count_prefix_compatible_pairs([\\"single\\"]) == 0 >>> count_prefix_compatible_pairs([\\"abc\\", \\"Abc\\", \\"a\\"]) == 1","solution":"def count_prefix_compatible_pairs(words): Returns the number of prefix-compatible pairs in the given list of strings. Args: words (list): List of strings Returns: int: Number of prefix-compatible pairs (A, B) where A is a prefix of B and A != B def is_prefix(small, large): return large.startswith(small) count = 0 n = len(words) for i in range(n): for j in range(n): if i != j and is_prefix(words[i], words[j]): count += 1 return count"},{"question":"def checkPossibility(nums: List[int]) -> bool: Determines if the array can be made non-decreasing by modifying at most one element. Parameters: nums (List[int]): The input array of integers. Returns: bool: True if the array can be made non-decreasing by modifying at most one element, otherwise False. from solution import checkPossibility def test_no_changes_needed(): assert checkPossibility([1, 2, 3, 4, 5]) == True def test_one_change_needed(): assert checkPossibility([4, 2, 3]) == True def test_multiple_changes_needed(): assert checkPossibility([4, 2, 1]) == False def test_one_change_at_start(): assert checkPossibility([3, 4, 2, 3]) == False def test_end_modification(): assert checkPossibility([1, 2, 3, 6, 4]) == True def test_complex_case(): assert checkPossibility([10, 5, 7]) == True def test_empty_array(): assert checkPossibility([]) == True def test_single_element_array(): assert checkPossibility([1]) == True def test_two_elements_non_decreasing(): assert checkPossibility([1, 2]) == True def test_two_elements_decreasing(): assert checkPossibility([3, 2]) == True","solution":"def checkPossibility(nums): Determines if the array can be made non-decreasing by modifying at most one element. Parameters: nums (List[int]): The input array of integers. Returns: bool: True if the array can be made non-decreasing by modifying at most one element, otherwise False. one_change_allowed = True for i in range(1, len(nums)): if nums[i] < nums[i - 1]: if not one_change_allowed: return False one_change_allowed = False if i == 1 or nums[i - 2] <= nums[i]: nums[i - 1] = nums[i] # modify nums[i - 1] else: nums[i] = nums[i - 1] # modify nums[i] return True"},{"question":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def countUnivalSubtrees(root: TreeNode) -> int: Given a root of a binary tree, return the number of univalue subtrees. A subtree is defined as a node in the tree and all of its descendants, and univalue means all the nodes in the subtree have the same value. >>> root = TreeNode(1) >>> countUnivalSubtrees(root) == 1 >>> root = TreeNode(1, TreeNode(1), TreeNode(1)) >>> countUnivalSubtrees(root) == 3 >>> root = TreeNode(1, TreeNode(1, TreeNode(1), TreeNode(1)), TreeNode(0, TreeNode(1), TreeNode(0))) >>> countUnivalSubtrees(root) == 5 >>> root = None >>> countUnivalSubtrees(root) == 0 >>> root = TreeNode(5) >>> root.left = TreeNode(1) >>> root.right = TreeNode(5) >>> root.left.left = TreeNode(5) >>> root.left.right = TreeNode(5) >>> root.right.right = TreeNode(5) >>> countUnivalSubtrees(root) == 4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def countUnivalSubtrees(root): def isUnivalTree(node): if not node: return True is_left_unival = (not node.left or (isUnivalTree(node.left) and node.left.val == node.val)) is_right_unival = (not node.right or (isUnivalTree(node.right) and node.right.val == node.val)) if is_left_unival and is_right_unival: nonlocal count count += 1 return True return False count = 0 isUnivalTree(root) return count"},{"question":"def largestRectangleArea(heights: List[int]) -> int: You are given an array of integers \`heights\` representing the height of buildings, where each building is 1 unit wide. The goal is to find the largest rectangle that can be formed in the histogram represented by the heights array. Each rectangle's width must be at least one and span contiguous buildings. Return the area of the largest rectangle that can be formed in the histogram. >>> largestRectangleArea([2, 1, 5, 6, 2, 3]) 10 >>> largestRectangleArea([2, 4]) 4 >>> largestRectangleArea([1, 1, 1, 1]) 4 >>> largestRectangleArea([]) 0 >>> largestRectangleArea([0]) 0 >>> largestRectangleArea([3]) 3 >>> largestRectangleArea([5, 5, 5, 5, 5]) 25 >>> largestRectangleArea([1, 3, 2, 1, 2]) 5 >>> largestRectangleArea([6, 2, 5, 4, 5, 1, 6]) 12 >>> largestRectangleArea([5, 4, 3, 2, 1]) 9 >>> largestRectangleArea([1, 2, 3, 4, 5, 4, 3, 2, 1]) 15","solution":"def largestRectangleArea(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"def can_form_anagram(s: str, t: str, k: int) -> bool: Determine if t can be transformed into an anagram of s by removing exactly k characters from t. :param s: The target string to become an anagram of :param t: The string to transform :param k: The number of characters to remove from t :return: True if t can be transformed into an anagram of s by removing exactly k characters, False otherwise >>> can_form_anagram(\\"aabb\\", \\"bbaa\\", 0) True >>> can_form_anagram(\\"cat\\", \\"tac\\", 0) True >>> can_form_anagram(\\"aabb\\", \\"bbbaaa\\", 2) True >>> can_form_anagram(\\"abc\\", \\"abcd\\", 1) True >>> can_form_anagram(\\"aabb\\", \\"aaaabbbb\\", 4) True >>> can_form_anagram(\\"aabb\\", \\"bbaa\\", 1) False >>> can_form_anagram(\\"abc\\", \\"abcde\\", 1) False >>> can_form_anagram(\\"abc\\", \\"def\\", 1) False >>> can_form_anagram(\\"\\", \\"\\", 0) True >>> can_form_anagram(\\"a\\", \\"a\\", 0) True >>> can_form_anagram(\\"a\\", \\"b\\", 1) False","solution":"def can_form_anagram(s, t, k): Determine if t can be transformed into an anagram of s by removing exactly k characters from t. :param s: The target string to become an anagram of :param t: The string to transform :param k: The number of characters to remove from t :return: True if t can be transformed into an anagram of s by removing exactly k characters, False otherwise from collections import Counter # Count characters in both strings. s_count = Counter(s) t_count = Counter(t) # Calculate excess characters in t_count excess = sum((t_count - s_count).values()) # Check if exactly k characters can be removed to form an anagram required_removals = sum((t_count - s_count).values()) + max(0, sum((s_count - t_count).values())) return required_removals == k"},{"question":"from typing import List def can_construct_target(words: List[str], target: str) -> bool: Determine if target can be constructed by concatenating any subsequence of the strings in words. Returns True if possible, otherwise False. >>> can_construct_target([\\"hello\\"], \\"hello\\") True >>> can_construct_target([\\"he\\", \\"llo\\"], \\"hello\\") True >>> can_construct_target([\\"h\\", \\"e\\", \\"l\\", \\"l\\", \\"o\\"], \\"hello\\") True >>> can_construct_target([\\"xy\\", \\"he\\", \\"llo\\", \\"z\\"], \\"hello\\") True >>> can_construct_target([\\"he\\", \\"llo\\"], \\"helloo\\") False >>> can_construct_target([\\"hell\\", \\"o\\"], \\"hello!\\") False >>> can_construct_target([\\"h\\", \\"e\\", \\"l\\", \\"o\\"], \\"hello\\") False >>> can_construct_target([], \\"hello\\") False >>> can_construct_target([], \\"\\") True >>> can_construct_target([\\"any\\", \\"words\\"], \\"\\") True >>> can_construct_target([\\"hel\\", \\"lo\\"], \\"hello\\") True >>> can_construct_target([\\"hell\\", \\"l\\"], \\"hello\\") False","solution":"def can_construct_target(words, target): Returns True if target can be constructed by concatenating any subsequence of the strings in words. Returns False otherwise. # Mapping characters in target to their frequencies target_char_count = {} for char in target: if char in target_char_count: target_char_count[char] += 1 else: target_char_count[char] = 1 # Mapping characters in words list to their frequencies words_char_count = {} for word in words: for char in word: if char in words_char_count: words_char_count[char] += 1 else: words_char_count[char] = 1 # Check if all characters in target can be formed by characters in words for char, count in target_char_count.items(): if words_char_count.get(char, 0) < count: return False return True"},{"question":"from typing import List def smallest_lexicographical_string(freq: List[int], s: str) -> str: Construct the lexicographically smallest string using characters from string \`s\` such that their frequencies match the given \`freq\` array. >>> smallest_lexicographical_string([1] + [0]*25, \\"aabbcc\\") 'a' >>> smallest_lexicographical_string([1] + [1]*25, \\"abcdefghijklmnopqrstuvwxyz\\") 'abcdefghijklmnopqrstuvwxyz' >>> smallest_lexicographical_string([2, 1] + [0]*24, \\"aabbccdd\\") 'aab' >>> smallest_lexicographical_string([0]*26, \\"ajsdlfj\\") '' >>> smallest_lexicographical_string([1, 0, 1] + [0]*23, \\"acbca\\") 'ac' >>> smallest_lexicographical_string([1, 2, 1] + [0]*23, \\"abccba\\") 'abbc'","solution":"def smallest_lexicographical_string(freq, s): from collections import Counter # Count the frequency of each character in the given string s s_counter = Counter(s) # Create a list to hold the resulting characters result = [] # Iterate through each character from 'a' to 'z' for i in range(26): char = chr(i + ord('a')) # Get the required frequency from freq list required_count = freq[i] # Get the actual count in the input string s actual_count = s_counter[char] # Append the minimum of required and actual count of characters result.append(char * min(required_count, actual_count)) # Join all characters to form the resultant string return ''.join(result)"},{"question":"from typing import List def findMaxLength(arr: List[int]) -> int: Finds the length of the longest subarray with an equal number of 0s and 1s. >>> findMaxLength([]) == 0 >>> findMaxLength([0]) == 0 >>> findMaxLength([1]) == 0 >>> findMaxLength([0, 0, 0, 0]) == 0 >>> findMaxLength([1, 1, 1, 1]) == 0 >>> findMaxLength([0, 1]) == 2 >>> findMaxLength([0, 1, 0]) == 2 >>> findMaxLength([0, 0, 1, 0, 1, 1]) == 6 >>> findMaxLength([0, 1, 1, 0, 1, 1, 1, 0, 0, 0]) == 10 >>> findMaxLength([0, 1, 1, 0, 1, 0, 0, 1, 1, 1]) == 8","solution":"def findMaxLength(arr): Finds the length of the longest subarray with an equal number of 0s and 1s. The approach is based on using a hashmap to store (count, index) pairs. Parameters: arr (list): The input array containing only 0s and 1s. Returns: int: The length of the longest subarray with equal number of 0s and 1s. count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(arr): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"class SpecialArray: def __init__(self, nums): Initializes the object with the list nums. self.nums = sorted(nums) def update(self, index, value): Updates the element at index index to value. self.nums[index] = value self.nums.sort() def kOccurrences(self, k): Returns the number of elements in the array that are equal to k. return self.nums.count(k) def specialSearch(self, target): Performs a binary search for target in the array and returns True if found, otherwise returns False. left, right = 0, len(self.nums) - 1 while left <= right: mid = (left + right) // 2 if self.nums[mid] == target: return True elif self.nums[mid] < target: left = mid + 1 else: right = mid - 1 return False def test_initialization(): sa = SpecialArray([5, 1, 3]) assert sa.nums == [1, 3, 5] def test_update(): sa = SpecialArray([1, 2, 3]) sa.update(1, 5) assert sa.nums == [1, 3, 5] sa.update(0, 6) assert sa.nums == [3, 5, 6] def test_kOccurrences(): sa = SpecialArray([1, 2, 2, 3]) assert sa.kOccurrences(2) == 2 assert sa.kOccurrences(1) == 1 assert sa.kOccurrences(4) == 0 def test_specialSearch(): sa = SpecialArray([1, 2, 3, 4, 5]) assert sa.specialSearch(3) == True assert sa.specialSearch(1) == True assert sa.specialSearch(6) == False def test_specialSearch_after_update(): sa = SpecialArray([1, 3, 5]) sa.update(1, 2) assert sa.specialSearch(3) == False assert sa.specialSearch(2) == True def test_combined_operations(): sa = SpecialArray([1, 2, 4]) sa.update(2, 3) assert sa.kOccurrences(4) == 0 assert sa.kOccurrences(3) == 1 assert sa.specialSearch(3) == True assert sa.specialSearch(4) == False","solution":"class SpecialArray: def __init__(self, nums): Initializes the object with the list nums. self.nums = sorted(nums) def update(self, index, value): Updates the element at index index to value. self.nums[index] = value self.nums.sort() def kOccurrences(self, k): Returns the number of elements in the array that are equal to k. return self.nums.count(k) def specialSearch(self, target): Performs a binary search for target in the array and returns True if found, otherwise returns False. left, right = 0, len(self.nums) - 1 while left <= right: mid = (left + right) // 2 if self.nums[mid] == target: return True elif self.nums[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"def min_absolute_sum_difference(array1, array2): Returns the minimum sum of absolute differences between array1 and array2 after performing the allowed swap operations. >>> min_absolute_sum_difference([1, 2, 3], [1, 2, 3]) == 0 >>> min_absolute_sum_difference([1, 3, 5], [4, 2, 6]) == 3 >>> min_absolute_sum_difference([-1, -2, -3], [1, 2, 3]) == 12 >>> min_absolute_sum_difference([5], [5]) == 0 >>> min_absolute_sum_difference([5], [3]) == 2 >>> min_absolute_sum_difference([1000, -2000, 3000], [1000, -2000, 3000]) == 0 >>> min_absolute_sum_difference([1000, -2000, 3000], [1000, -2000, 2999]) == 1","solution":"def min_absolute_sum_difference(array1, array2): Returns the minimum sum of absolute differences between array1 and array2 after performing the allowed swap operations. # Calculate the initial sum of absolute differences initial_sum = sum(abs(a - b) for a, b in zip(array1, array2)) # If the arrays are the same, the minimum sum of absolute differences is zero if initial_sum == 0: return 0 # Sort both arrays for comparison sorted1 = sorted(array1) sorted2 = sorted(array2) # Calculate the minimun absolute sum differences after optimal swapping min_sum = 0 for i in range(len(array1)): # Find the closest element in sorted2 for the current element in sorted1 diff = min(abs(array1[i] - array2[i]), abs(array1[i] - sorted2[i])) min_sum += diff return min_sum"},{"question":"def rearrange_list(nums, k): Rearrange the elements of \`nums\` such that the difference between any two consecutive elements does not exceed \`k\`. If possible, return the rearranged list. If it is not possible, return an empty list. Args: nums (list): List of non-negative integers. k (int): Maximum allowed difference between consecutive elements. Returns: list: Rearranged list or empty list if not possible.","solution":"def rearrange_list(nums, k): Rearrange the elements of \`nums\` such that the difference between any two consecutive elements does not exceed \`k\`. If possible, return the rearranged list. If it is not possible, return an empty list. Args: nums (list): List of non-negative integers. k (int): Maximum allowed difference between consecutive elements. Returns: list: Rearranged list or empty list if not possible. nums.sort() for i in range(len(nums) - 1): if abs(nums[i] - nums[i + 1]) > k: return [] return nums"},{"question":"def find_pairs(nums, target): Finds all unique pairs of integers in the list that sum up to the target. Parameters: nums (list): List of integers target (int): The target sum Returns: list: A list of unique pairs that sum up to the target >>> find_pairs([1, 2, 3], 10) == [] True >>> find_pairs([1, 2, 3, 4, 5], 5) == [[1, 4], [2, 3]] True >>> find_pairs([1, 5, 7, -1, 5], 6) == [[-1, 7], [1, 5]] True >>> find_pairs([3, 3, 3, 3], 6) == [[3, 3]] True >>> find_pairs([], 5) == [] True >>> find_pairs([-1, -2, -3, 0, 2, 3, 1], 0) == [[-3, 3], [-2, 2], [-1, 1]] True","solution":"def find_pairs(nums, target): Finds all unique pairs of integers in the list that sum up to the target. Parameters: nums (list): List of integers target (int): The target sum Returns: list: A list of unique pairs that sum up to the target nums.sort() seen = set() output = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((complement, num))) output.add(pair) seen.add(num) return [list(pair) for pair in sorted(output)]"},{"question":"def max_subarray_profit(arr: List[int]) -> int: Returns the maximum profit that can be made from a contiguous subarray of the given array of profits (and losses). >>> max_subarray_profit([1, 2, 3, 4, 5]) == 15 >>> max_subarray_profit([-1, -2, -3, -4, -5]) == -1 >>> max_subarray_profit([3, -2, 5, -1]) == 6 >>> max_subarray_profit([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 >>> max_subarray_profit([5]) == 5 >>> max_subarray_profit([-5]) == -5 >>> max_subarray_profit([]) == 0 >>> max_subarray_profit([1000, -1000, 1000, -1000, 1000]) == 1000","solution":"def max_subarray_profit(arr): Returns the maximum profit that can be made from a contiguous subarray of the given array of profits (and losses). Implements Kadane's algorithm to find the maximum sum subarray in O(n) time complexity. if not arr: return 0 max_current = max_global = arr[0] for profit in arr[1:]: max_current = max(profit, max_current + profit) if max_current > max_global: max_global = max_current return max_global"},{"question":"def can_transform(s1: str, s2: str) -> bool: Determines if we can transform s1 into s2 by replacing characters in s1 with any character from 'a' to 'z'. >>> can_transform(\\"abc\\", \\"abc\\") == True >>> can_transform(\\"abc\\", \\"abcd\\") == False >>> can_transform(\\"aabbcc\\", \\"ddeeff\\") == True >>> can_transform(\\"abcabc\\", \\"defdef\\") == True >>> can_transform(\\"aaa\\", \\"abc\\") == False >>> can_transform(\\"abc\\", \\"aba\\") == True >>> can_transform(\\"a\\", \\"b\\") == True >>> can_transform(\\"a\\", \\"a\\") == True >>> can_transform(\\"aaaa\\", \\"bbbb\\") == True >>> can_transform(\\"aaaa\\", \\"bbbbc\\") == False","solution":"def can_transform(s1, s2): Determines if we can transform s1 into s2 by replacing characters in s1 with any character from 'a' to 'z'. # If strings are of different lengths, transformation is not possible if len(s1) != len(s2): return False # Using sets to count unique characters unique_chars_s1 = set(s1) unique_chars_s2 = set(s2) # If the number of unique characters in s2 is greater than in s1, # it's not possible to transform s1 into s2 because we're allowed to replace characters # but cannot introduce new unique characters more than we already have in s1. if len(unique_chars_s2) > len(unique_chars_s1): return False return True"},{"question":"def min_swaps_to_palindrome(s: str) -> int: Given a string \`s\` which consists of lowercase letters, determine the minimum number of adjacent swaps required to make the string a palindrome. If it is not possible to form a palindrome, return -1. Args: s (str): Input string Returns: int: Minimum number of adjacent swaps to make the string a palindrome, or -1 if not possible. Examples: >>> min_swaps_to_palindrome(\\"mamad\\") 3 >>> min_swaps_to_palindrome(\\"asflkj\\") -1 >>> min_swaps_to_palindrome(\\"aabb\\") 2 >>> min_swaps_to_palindrome(\\"ntiin\\") 1 >>> min_swaps_to_palindrome(\\"aa\\") 0 >>> min_swaps_to_palindrome(\\"racecar\\") 0 >>> min_swaps_to_palindrome(\\"redder\\") 0 >>> min_swaps_to_palindrome(\\"a\\") 0 >>> min_swaps_to_palindrome(\\"b\\") 0 >>> min_swaps_to_palindrome(\\"abc\\") -1 >>> min_swaps_to_palindrome(\\"abcd\\") -1 >>> min_swaps_to_palindrome(\\"\\") 0","solution":"def min_swaps_to_palindrome(s): Returns the minimum number of adjacent swaps needed to make the string a palindrome. If it is not possible to form a palindrome, returns -1. def is_palindrome_possible(s): odd_count = sum(freq % 2 for freq in Counter(s).values()) return odd_count <= 1 def min_swaps_needed(l): swaps = 0 for i in range(len(l)//2): left = i right = len(l) - left - 1 while left < right: if l[left] == l[right]: break else: right -= 1 if left == right: l[left], l[left + 1] = l[left + 1], l[left] swaps += 1 continue for j in range(right, len(l) - left - 1): l[j], l[j + 1] = l[j + 1], l[j] swaps += 1 return swaps from collections import Counter if not is_palindrome_possible(s): return -1 s_list = list(s) return min_swaps_needed(s_list)"},{"question":"def can_transform(s: str, t: str) -> bool: Determines if string s can be transformed into string t by performing exactly one of these operations: insert one character, delete one character, or replace one character. >>> can_transform(\\"abc\\", \\"abdc\\") True >>> can_transform(\\"abcd\\", \\"abc\\") True >>> can_transform(\\"abc\\", \\"aBc\\") True >>> can_transform(\\"abc\\", \\"abzcd\\") False >>> can_transform(\\"a\\", \\"a\\") False >>> can_transform(\\"\\", \\"\\") False >>> can_transform(\\"\\", \\"a\\") True def test_can_transform(): assert can_transform(\\"abc\\", \\"abdc\\") == True assert can_transform(\\"abc\\", \\"abcd\\") == True assert can_transform(\\"abc\\", \\"aabc\\") == True assert can_transform(\\"abc\\", \\"aebc\\") == True assert can_transform(\\"abcd\\", \\"abc\\") == True assert can_transform(\\"aabc\\", \\"abc\\") == True assert can_transform(\\"abdc\\", \\"abc\\") == True assert can_transform(\\"abc\\", \\"aBc\\") == True assert can_transform(\\"abc\\", \\"abD\\") == True assert can_transform(\\"abc\\", \\"zbc\\") == True assert can_transform(\\"abc\\", \\"abz\\") == True assert can_transform(\\"abc\\", \\"abzcd\\") == False assert can_transform(\\"abc\\", \\"abcdef\\") == False assert can_transform(\\"abc\\", \\"xyz\\") == False assert can_transform(\\"abc\\", \\"abc\\") == False assert can_transform(\\"a\\", \\"a\\") == False assert can_transform(\\"\\", \\"\\") == False assert can_transform(\\"\\", \\"a\\") == True assert can_transform(\\"a\\", \\"\\") == True assert can_transform(\\"a\\", \\"b\\") == True assert can_transform(\\"ab\\", \\"a\\") == True assert can_transform(\\"a\\", \\"ab\\") == True","solution":"def can_transform(s, t): Determines if string s can be transformed into string t by performing exactly one of these operations: insert one character, delete one character, or replace one character. len_s, len_t = len(s), len(t) # Case 1: Insert one character (len_s + 1 == len_t) if len_s + 1 == len_t: for i in range(len_t): if s[:i] + t[i] + s[i:] == t: return True # Case 2: Delete one character (len_s - 1 == len_t) elif len_s - 1 == len_t: for i in range(len_s): if s[:i] + s[i+1:] == t: return True # Case 3: Replace one character (len_s == len_t) elif len_s == len_t: difference_count = 0 for i in range(len_s): if s[i] != t[i]: difference_count += 1 if difference_count > 1: return False return difference_count == 1 return False"},{"question":"def count_divisibles(low: int, high: int, k: int) -> int: Given two integers \`low\` and \`high\` and an integer \`k\`, find the maximum number of integers between \`low\` and \`high\` (inclusive) that are divisible by \`k\`. Return the maximum count of such integers. >>> count_divisibles(10, 10, 5) 1 >>> count_divisibles(10, 10, 3) 0 >>> count_divisibles(0, 0, 1) 1 >>> count_divisibles(1, 1, 5) 0 >>> count_divisibles(1, 10, 2) 5 >>> count_divisibles(1, 10, 3) 3 >>> count_divisibles(15, 30, 5) 4 >>> count_divisibles(10, 25, 7) 2 >>> count_divisibles(0, 100, 10) 11 >>> count_divisibles(-10, 10, 5) 5 >>> count_divisibles(-15, -5, 5) 3 >>> count_divisibles(-10, -1, 3) 3 Raises: ValueError: If k is not a positive integer.","solution":"def count_divisibles(low, high, k): Returns the count of numbers between low and high (inclusive) that are divisible by k. if k <= 0: raise ValueError(\\"k must be a positive integer\\") if low > high: return 0 # Find the first number >= low that is divisible by k if low % k == 0: start = low else: start = low + (k - low % k) # Find the last number <= high that is divisible by k if high % k == 0: end = high else: end = high - (high % k) if start > high or end < low: return 0 # Number of k-divisible numbers in the range [start, end] return (end - start) // k + 1"},{"question":"def find_pairs_with_sum(numbers: List[int], target: int) -> List[Tuple[int, int]]: Find all unique pairs (a, b) in the list 'numbers' such that a + b = target. Each pair (a, b) should be in non-decreasing order and the resulting list of pairs should be sorted. >>> find_pairs_with_sum([1, 2, 3, 4], 5) [(1, 4), (2, 3)] >>> find_pairs_with_sum([1, 1, 2, 3, 4], 5) [(1, 4), (2, 3)] >>> find_pairs_with_sum([1, 2, 3, 4, 5, 6], 7) [(1, 6), (2, 5), (3, 4)] >>> find_pairs_with_sum([1, 2, 3], 10) [] >>> find_pairs_with_sum([-1, 0, 1, 2, -2], 0) [(-2, 2), (-1, 1)]","solution":"def find_pairs_with_sum(numbers, target): Find all unique pairs (a, b) in the list 'numbers' such that a + b = target. Each pair (a, b) should be in non-decreasing order and the resulting list of pairs should be sorted. pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"import heapq def kthSmallest(mat, k): Returns the k-th smallest element in a matrix sorted row-wise and column-wise. :param mat: List of lists of integers representing the matrix. :param k: Integer, the k-th position to find the smallest element. :return: The k-th smallest element of the matrix. pass # Test Cases def test_kth_smallest_basic(): matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 assert kthSmallest(matrix, k) == 13 def test_kth_smallest_another_case(): matrix = [ [1, 2], [1, 3] ] k = 2 assert kthSmallest(matrix, k) == 1 def test_kth_smallest_duplicates(): matrix = [ [1, 1, 3], [1, 2, 3], [3, 3, 3] ] k = 5 assert kthSmallest(matrix, k) == 3 def test_kth_smallest_single_element(): matrix = [ [5] ] k = 1 assert kthSmallest(matrix, k) == 5 def test_kth_smallest_large_k(): matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] k = 9 assert kthSmallest(matrix, k) == 9","solution":"import heapq def kthSmallest(mat, k): Returns the k-th smallest element in a matrix sorted row-wise and column-wise. :param mat: List of lists of integers representing the matrix. :param k: Integer, the k-th position to find the smallest element. :return: The k-th smallest element of the matrix. n = len(mat) # Using a min heap to keep track of the smallest elements min_heap = [(mat[0][0], 0, 0)] visited = set((0, 0)) # Remove elements from the heap k-1 times for _ in range(k - 1): val, r, c = heapq.heappop(min_heap) if r + 1 < n and (r + 1, c) not in visited: heapq.heappush(min_heap, (mat[r + 1][c], r + 1, c)) visited.add((r + 1, c)) if c + 1 < n and (r, c + 1) not in visited: heapq.heappush(min_heap, (mat[r][c + 1], r, c + 1)) visited.add((r, c + 1)) return min_heap[0][0]"},{"question":"def max_product_subarray(nums: List[int]) -> int: Find the maximum product of a contiguous subarray within the given array of integers. >>> max_product_subarray([1, 2, 3, 4]) == 24 >>> max_product_subarray([-1, -2, -3, -4]) == 24 >>> max_product_subarray([2, -5, -2, -4, 3]) == 24 >>> max_product_subarray([2]) == 2 >>> max_product_subarray([0, 2, -3, 4, 0, 2]) == 4 >>> max_product_subarray([-2, 0, -1]) == 0 >>> max_product_subarray([]) == 0","solution":"def max_product_subarray(nums): if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, num * max_product) min_product = min(num, num * min_product) result = max(result, max_product) return result"},{"question":"def longest_subarray_after_removal(arr: List[int]) -> int: This function returns the length of the longest subarray consisting of only 1's that can be obtained by possibly removing one element from the original array. >>> longest_subarray_after_removal([1, 1, 0, 1, 1, 1]) 5 >>> longest_subarray_after_removal([1, 1, 1, 1, 1]) 4 >>> longest_subarray_after_removal([0, 0, 0, 0, 0]) 0 >>> longest_subarray_after_removal([1, 0, 1, 1, 1]) 4 >>> longest_subarray_after_removal([1, 1, 0, 0, 1, 1, 1]) 3 >>> longest_subarray_after_removal([1, 1, 1, 0]) 3 >>> longest_subarray_after_removal([0, 1, 1, 1]) 3","solution":"def longest_subarray_after_removal(arr): This function returns the length of the longest subarray consisting of only 1's that can be obtained by possibly removing one element from the original array. max_length = 0 left = 0 zero_count = 0 n = len(arr) for right in range(n): if arr[right] == 0: zero_count += 1 while zero_count > 1: if arr[left] == 0: zero_count -= 1 left += 1 current_length = right - left max_length = max(max_length, current_length) return max_length"},{"question":"def remove_min_chars(s: str) -> str: Removes the minimum number of characters from the string \`s\` so that no two neighboring characters are the same. Returns the resulting string. >>> remove_min_chars(\\"\\") == \\"\\" >>> remove_min_chars(\\"a\\") == \\"a\\" >>> remove_min_chars(\\"abc\\") == \\"abc\\" >>> remove_min_chars(\\"abab\\") == \\"abab\\" >>> remove_min_chars(\\"aaaaa\\") == \\"a\\" >>> remove_min_chars(\\"aabbcc\\") == \\"abc\\" >>> remove_min_chars(\\"aaabbbccc\\") == \\"abc\\" >>> remove_min_chars(\\"abbaaac\\") == \\"abac\\" >>> remove_min_chars(\\"aaabba\\") == \\"aba\\" >>> remove_min_chars(\\"abababab\\") == \\"abababab\\" >>> remove_min_chars(\\"abcabcabc\\") == \\"abcabcabc\\"","solution":"def remove_min_chars(s): Removes the minimum number of characters from the string \`s\` so that no two neighboring characters are the same. Returns the resulting string. if not s: return \\"\\" result = [s[0]] # Initialize the result with the first character for char in s[1:]: if char != result[-1]: result.append(char) return \\"\\".join(result)"},{"question":"def min_operations_to_equalize_chocolates(nums: List[int]) -> int: You are given a 0-indexed array of integers \`nums\` representing the number of chocolates in each bag. You can perform the following operation any number of times: choose any two bags with at least one chocolate each and transfer one chocolate from one bag to the other. Your goal is to make the number of chocolates in every bag equal. Return the minimum number of operations to achieve this, or -1 if it's impossible. >>> min_operations_to_equalize_chocolates([1, 1, 1, 1]) 0 >>> min_operations_to_equalize_chocolates([1, 2, 3]) 2 >>> min_operations_to_equalize_chocolates([1, 1, 5, 1]) 4 >>> min_operations_to_equalize_chocolates([0, 0, 0]) 0 >>> min_operations_to_equalize_chocolates([1, 2, 3, 4]) -1 >>> min_operations_to_equalize_chocolates([0, 0, 0, 0]) 0 >>> min_operations_to_equalize_chocolates([4, 4, 4, 4]) 0 >>> min_operations_to_equalize_chocolates([5, 5]) 0 >>> min_operations_to_equalize_chocolates([100000, 200000, 300000]) 200000 >>> min_operations_to_equalize_chocolates([100000, 100000, 0]) -1","solution":"def min_operations_to_equalize_chocolates(nums): total_chocolates = sum(nums) n = len(nums) # It's impossible to equalize if total chocolates are not divisible by number of bags if total_chocolates % n != 0: return -1 target = total_chocolates // n operations = 0 imbalance = 0 for chocolates in nums: imbalance += chocolates - target operations += abs(imbalance) return operations"},{"question":"def can_sort_with_k_reversals(arr: List[int], k: int) -> bool: Determine if it is possible to sort array \`arr\` using at most \`k\` reverse operations. Parameters: arr (list of int): List of distinct integers. k (int): Maximum number of reversals allowed. Returns: bool: True if the array can be sorted in at most \`k\` reversals, False otherwise.","solution":"def can_sort_with_k_reversals(arr, k): Determine if it is possible to sort array \`arr\` using at most \`k\` reverse operations. Parameters: arr (list of int): List of distinct integers. k (int): Maximum number of reversals allowed. Returns: bool: True if the array can be sorted in at most \`k\` reversals, False otherwise. # Desired array is sorted array sorted_arr = sorted(arr) # Initialize the number of misplaced elements count count = 0 # Compare elements with their sorted position for i in range(len(arr)): if arr[i] != sorted_arr[i]: count += 1 # Count the minimum number of reversals required # Each reversal can at most fix 2 misplaced elements min_reversals_required = count // 2 + count % 2 # Check if we can sort the array within k reversals return min_reversals_required <= k"},{"question":"def increment_digits(s: str) -> str: Takes a string s consisting of lowercase letters and integers, and returns a new string with all the integers incremented by 1. (i.e., \`9\` should wrap around to \`0\`). The other characters remain unchanged. >>> increment_digits(\\"abc\\") \\"abc\\" >>> increment_digits(\\"1234567890\\") \\"2345678901\\" >>> increment_digits(\\"a1b2c3\\") \\"a2b3c4\\" >>> increment_digits(\\"\\") \\"\\" >>> increment_digits(\\"abcdefgh\\") \\"abcdefgh\\" >>> increment_digits(\\"089\\") \\"190\\"","solution":"def increment_digits(s): Takes a string s consisting of lowercase letters and integers, and returns a new string with all the integers incremented by 1. result = [] for char in s: if char.isdigit(): incremented_digit = (int(char) + 1) % 10 result.append(str(incremented_digit)) else: result.append(char) return ''.join(result)"},{"question":"import pytest from typing import Optional, List class ListNode: def __init__(self, value: int = 0, next: Optional['ListNode'] = None): self.value = value self.next = next def reorder_even_odd(head: Optional[ListNode]) -> Optional[ListNode]: Reorder the linked list such that every even-indexed node is followed by an odd-indexed node. >>> head = list_to_linked_list([1, 2, 3, 4, 5]) >>> result = reorder_even_odd(head) >>> linked_list_to_list(result) [1, 3, 5, 2, 4] >>> reorder_even_odd(None) is None True def linked_list_to_list(head: Optional[ListNode]) -> List[int]: Convert a linked list to a Python list result = [] while head: result.append(head.value) head = head.next return result def list_to_linked_list(lst: List[int]) -> Optional[ListNode]: Convert a Python list to a linked list head = ListNode(0) current = head for value in lst: current.next = ListNode(value) current = current.next return head.next def test_reorder_empty_list(): assert linked_list_to_list(reorder_even_odd(None)) == [] def test_reorder_single_element(): linked_list = list_to_linked_list([1]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1] def test_reorder_two_elements(): linked_list = list_to_linked_list([1, 2]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 2] def test_reorder_five_elements(): linked_list = list_to_linked_list([1, 2, 3, 4, 5]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 3, 5, 2, 4] def test_reorder_four_elements(): linked_list = list_to_linked_list([1, 2, 3, 4]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 3, 2, 4] def test_reorder_six_elements(): linked_list = list_to_linked_list([1, 2, 3, 4, 5, 6]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 3, 5, 2, 4, 6] def test_reorder_with_duplicates(): linked_list = list_to_linked_list([1, 1, 2, 2, 3, 3]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 2, 3, 1, 2, 3] def test_reorder_all_same_elements(): linked_list = list_to_linked_list([1, 1, 1, 1, 1]) result = reorder_even_odd(linked_list) assert linked_list_to_list(result) == [1, 1, 1, 1, 1]","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reorder_even_odd(head): if not head: return None even_head = even = ListNode(0) odd_head = odd = ListNode(0) current = head is_even = True while current: if is_even: even.next = current even = even.next else: odd.next = current odd = odd.next current = current.next is_even = not is_even even.next = odd_head.next odd.next = None return even_head.next def linked_list_to_list(head): result = [] while head: result.append(head.value) head = head.next return result def list_to_linked_list(lst): head = ListNode(0) current = head for value in lst: current.next = ListNode(value) current = current.next return head.next"},{"question":"def max_subarray_len(nums, k): Finds the length of the longest subarray with sum equal to k. >>> max_subarray_len([1, -1, 5, -2, 3], 3) == 4 >>> max_subarray_len([-2, -1, 2, 1], 1) == 2 >>> max_subarray_len([1, 2, 3], 10) == 0 >>> max_subarray_len([1, 2, 3], 6) == 3 >>> max_subarray_len([1, 2, 3], 2) == 1 >>> max_subarray_len([1, -1, 1], -1) == 1 >>> max_subarray_len([], 3) == 0 >>> max_subarray_len([-2, 4, -1, 4, -1], 6) == 4 >>> max_subarray_len([0, 0, 0, 0], 0) == 4 >>> max_subarray_len([5, 6, 1, 7, 8], 15) == 2","solution":"def max_subarray_len(nums, k): Finds the length of the longest subarray with sum equal to k. if not nums: return 0 sum_index_map = {0: -1} # Dictionary to store (cumulative sum : index) pairs cumulative_sum = 0 max_length = 0 for i, num in enumerate(nums): cumulative_sum += num if cumulative_sum - k in sum_index_map: max_length = max(max_length, i - sum_index_map[cumulative_sum - k]) if cumulative_sum not in sum_index_map: sum_index_map[cumulative_sum] = i return max_length"}]`),j={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},L={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],S={key:0},z={key:1};function E(i,e,u,m,s,o){const c=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=a=>s.searchQuery=a),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=a=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",L,[(n(!0),r(y,null,v(o.displayedPoems,(a,p)=>(n(),w(c,{key:p,poem:a},null,8,["poem"]))),128)),o.displayedPoems.length===0?(n(),r("div",C,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),o.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...a)=>o.loadMore&&o.loadMore(...a))},[s.isLoading?(n(),r("span",z,"Loading...")):(n(),r("span",S,"See more"))],8,P)):l("",!0)])}const D=f(j,[["render",E],["__scopeId","data-v-9565acc3"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"grok/13.md","filePath":"grok/13.md"}'),M={name:"grok/13.md"},H=Object.assign(M,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{B as __pageData,H as default};
