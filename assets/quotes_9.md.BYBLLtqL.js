import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-b6438f45"]]),S=JSON.parse('[{"question":"You are given a string of length N consisting of only lower case alphabetical letters. Your task is to determine if the string can be rearranged such that no two adjacent characters are the same. If such a rearrangement is possible, print \\"YES\\"; otherwise, print \\"NO\\". INPUT The first line contains a single integer N, the length of the string. The second line contains the string of length N consisting of only lower case alphabetical letters. OUTPUT Print \\"YES\\" if the string can be rearranged such that no two adjacent characters are the same. Otherwise, print \\"NO\\". CONSTRAINTS 1 ≤ N ≤ 100000 SAMPLE INPUT 5 aabbc SAMPLE OUTPUT YES Explanation One possible rearranged string is \\"abcab\\", where no two adjacent characters are the same. Therefore, the output is \\"YES\\".","solution":"def can_rearrange_string(N, s): Determine if the string can be rearranged such that no two adjacent characters are the same. Parameters: N (int): length of the string s (str): string consisting of only lower case alphabetical letters Returns: str: \\"YES\\" if the string can be rearranged, \\"NO\\" otherwise from collections import Counter freq = Counter(s) max_freq = max(freq.values()) # no of remaining characters remaining = N - max_freq if max_freq - 1 > remaining: return \\"NO\\" else: return \\"YES\\""},{"question":"Given a directed graph with N vertices and M edges. Your task is to identify whether there exists at least one cycle in the graph. Each edge is represented as a pair of integers (u, v) meaning there is a directed edge from vertex u to vertex v. The vertices are numbered from 1 to N. Example 1: Input: N = 3, M = 3 Edges = [[1, 2], [2, 3], [3, 1]] Output: Yes Explanation: The graph has a cycle: 1 -> 2 -> 3 -> 1. Example 2: Input: N = 4, M = 4 Edges = [[1, 2], [2, 3], [3, 4], [4, 2]] Output: Yes Explanation: The graph has a cycle: 2 -> 3 -> 4 -> 2. Example 3: Input: N = 3, M = 2 Edges = [[1, 2], [2, 3]] Output: No Explanation: The graph has no cycle. Your Task: Your task is to complete the function `hasCycle()` which takes the number of vertices N, the number of edges M, and a list of edges as inputs and returns a string \\"Yes\\" if the graph contains at least one cycle, otherwise it returns \\"No\\". Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 <= N, M <= 10^5 1 <= u, v <= N","solution":"def hasCycle(N, M, Edges): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in Edges: graph[u].append(v) # Helper function to check cycle from a node using DFS def isCyclic(v, visited, recStack): # Mark the current node as visited and set it in the recursion stack visited[v] = True recStack[v] = True # Recur for all neighbours for neighbour in graph[v]: if not visited[neighbour]: if isCyclic(neighbour, visited, recStack): return True elif recStack[neighbour]: return True # Remove the vertex from recursion stack recStack[v] = False return False # Mark all the vertices as not visited and not part of recursion stack visited = [False] * (N + 1) recStack = [False] * (N + 1) # Call the helper function to detect cycle in different DFS trees for node in range(1, N + 1): if not visited[node]: if isCyclic(node, visited, recStack): return \\"Yes\\" return \\"No\\""},{"question":"A college brings you a new task! They provide you with a string consisting of only lowercase letters. You have to determine and print the maximum length of a substring in which no character repeats more than once. -----Input----- A single line contains a string s (1 ≤ |s| ≤ 10^5), which consists of only lowercase English letters. -----Output----- Print a single integer — the maximum length of a substring with all distinct characters. -----Examples----- Input: abcabcbb Output: 3 Input: bbbbb Output: 1 Input: pwwkew Output: 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) ans = 0 char_index = {} i = 0 # Start of the current substring for j in range(n): if s[j] in char_index: i = max(char_index[s[j]], i) ans = max(ans, j - i + 1) char_index[s[j]] = j + 1 return ans"},{"question":"In a peaceful village, the villagers decide to organize a lantern festival on a long straight road. They will light up n lanterns along the road. The positions of the lanterns are given, and the road is symmetrical. Each lantern i provides a light range from position (i-d) to position (i+d). The aim is to ensure that the entire road from position 0 to position L is illuminated by the lanterns. Determine the minimum light radius d that all lanterns should have to cover the entire road. Input The first line contains two integers n and L (1 ≤ n ≤ 1000, 1 ≤ L ≤ 10^9). The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ L; all ai are unique and sorted in ascending order). Output Output the minimum light radius d that ensures all positions on the road from 0 to L inclusive are illuminated by the lanterns. Examples Input 3 10 2 5 8 Output 2 Input 2 5 0 5 Output 2.5 Input 4 15 1 5 11 13 Output 3 Note In the first sample: - Light radius d = 2 ensures that lantern positions (2-2) to (2+2), (5-2) to (5+2), and (8-2) to (8+2) cover the entire road 0 to 10. In the second sample: - Light radius d = 2.5 ensures that lantern positions (0-2.5) to (0+2.5) cover [0, 5], and lantern positions (5-2.5) to (5+2.5) cover [0, 5]. In the third sample: - Light radius d = 3 lights up positions 1, 5, 11, and 13 sufficiently to cover the entire road from 0 to 15.","solution":"def min_light_radius(n, L, positions): Returns the minimum light radius d that ensures all positions on the road from 0 to L inclusive are illuminated by the lanterns. # Calculate the maximum gap between consecutive lanterns max_gap = max(positions[0], L - positions[-1]) for i in range(1, len(positions)): max_gap = max(max_gap, (positions[i] - positions[i - 1]) / 2) return max_gap"},{"question":"Given two strings S1 and S2, create a function that checks whether S2 contains a permutation of S1. In other words, the function should return `true` if one of S1\'s permutations is a substring of S2, and `false` otherwise. Input - The first line of the input contains `t`, the number of test cases. - Each test case consists of two lines. - The first line contains the string S1. - The second line contains the string S2. Output For each test case, print \\"true\\" if S2 contains a permutation of S1, and \\"false\\" otherwise. Input Constraints - 1 ≤ t ≤ 1000 - 1 ≤ |S1|, |S2| ≤ 1000 - S1 and S2 will consist of lowercase English letters only. SAMPLE INPUT 2 ab eidbaooo ab eidboaoo SAMPLE OUTPUT true false","solution":"def contains_permutation(S1, S2): from collections import Counter if len(S1) > len(S2): return False s1_counter = Counter(S1) window_counter = Counter(S2[:len(S1)]) for i in range(len(S1), len(S2)): if s1_counter == window_counter: return True window_counter[S2[i]] += 1 window_counter[S2[i - len(S1)]] -= 1 if window_counter[S2[i - len(S1)]] == 0: del window_counter[S2[i - len(S1)]] return s1_counter == window_counter def check_permutations_cases(test_cases): results = [] for S1, S2 in test_cases: results.append(contains_permutation(S1, S2)) return results"},{"question":"In mathematics, the Fibonacci sequence is a sequence in which each number is the sum of the two preceding ones, usually starting with 0 and 1. However, as part of your computer science studies, you want to implement a function to generate Fibonacci-like sequences where the starting two numbers can be any non-negative integers. Fibonacci-like Sequence For this task, you need to generate a Fibonacci-like sequence. A Fibonacci-like sequence is defined as follows: ``` seq(n) = seq(n-1) + seq(n-2) ``` However, you will be given the first two numbers in the sequence, which we will call `a` and `b`. Using these starting numbers, your task is to generate the first `N` numbers in the Fibonacci-like sequence. Your Task Write a function `generate_sequence(a, b, N)` that generates and returns the first `N` numbers of the Fibonacci-like sequence, starting with `a` and `b`. # Input - `a` (integer): The first number in the sequence. - `b` (integer): The second number in the sequence. - `N` (integer): The number of terms to generate (N ≥ 2). # Output - A list containing the first `N` numbers of the Fibonacci-like sequence. # Example ```python generate_sequence(3, 5, 10) ``` Output: ```python [3, 5, 8, 13, 21, 34, 55, 89, 144, 233] ``` # Constraints 1. `a` and `b` are non-negative integers (0 ≤ `a`, `b` ≤ 10^4). 2. `N` is a positive integer and `N ≥ 2` and `N ≤ 1000`. # Additional Notes - Your implementation shouldn\'t use any third-party libraries. - The resulting sequence should be returned in a list. Test Cases ```python assert generate_sequence(0, 1, 10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] assert generate_sequence(2, 3, 5) == [2, 3, 5, 8, 13] assert generate_sequence(1, 1, 6) == [1, 1, 2, 3, 5, 8] ``` Implement your solution within the constraints provided and ensure it runs efficiently for the maximum input sizes. ---","solution":"def generate_sequence(a, b, N): Generates the first N numbers of a Fibonacci-like sequence starting with a and b. Parameters: a (int): The first number in the sequence. b (int): The second number in the sequence. N (int): The number of terms to generate. Returns: list: The first N numbers of the Fibonacci-like sequence. if N == 2: return [a, b] sequence = [a, b] for i in range(2, N): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Write a function that takes a list of integers and returns the **length of the longest consecutive subsequence**. A consecutive subsequence is a sequence of numbers where each number is exactly one more than the previous number. ``` longest_consecutive([100, 4, 200, 1, 3, 2]) = 4 => The longest consecutive subsequence is [1, 2, 3, 4], which has length 4. longest_consecutive([36, 41, 56, 35, 37, 38, 39, 37, 36]) = 5 => The longest consecutive subsequence is [35, 36, 37, 38, 39], which has length 5. longest_consecutive([1, 9, 3, 10, 4, 20, 2]) = 4 => The longest consecutive subsequence is [1, 2, 3, 4], which has length 4. longest_consecutive([1, 2, 0, 1, -1]) = 4 => The longest consecutive subsequence is [-1, 0, 1, 2], which has length 4. ``` More examples in test cases. Good luck!","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive subsequence in the list of integers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Check if it is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of n integers, and a series of m operations. Each operation consists of two integers, a and b, indicating that you should reverse the subarray starting at index a and ending at index b (inclusive). Your task is to determine the maximum value in the array after performing all the given operations. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of integers in the array and the number of operations, respectively. The second line contains n integers, the elements of the array. Each of the next m lines contains two integers a and b (1 ≤ a ≤ b ≤ n) — the indices that define the subarray to be reversed for each operation. Note that the indices are 1-based. -----Output----- Output a single integer, the maximum value in the array after performing all the operations. -----Examples----- Input 5 2 1 2 3 4 5 1 3 2 5 Output 5 Input 4 3 10 20 30 40 1 2 2 3 3 4 Output 40 -----Note----- In the first sample, the array transformations are as follows: - After reversing the subarray from indices 1 to 3: [3, 2, 1, 4, 5] - After reversing the subarray from indices 2 to 5: [3, 5, 4, 1, 2] The maximum value in the array is 5. In the second sample, the array transformations are as follows: - After reversing the subarray from indices 1 to 2: [20, 10, 30, 40] - After reversing the subarray from indices 2 to 3: [20, 30, 10, 40] - After reversing the subarray from indices 3 to 4: [20, 30, 40, 10] The maximum value in the array is 40.","solution":"def max_value_after_operations(n, m, array, operations): Returns the maximum value in the array after performing all the given operations :param n: int - the number of integers in the array :param m: int - the number of operations :param array: list of int - the elements of the array :param operations: list of tuple - each containing two integers indicating indices to reverse :return: int - the maximum value in the array after operations for a, b in operations: # Convert 1-based indices to 0-based for Python list slicing array[a-1:b] = array[a-1:b][::-1] return max(array) # Example usage: # n, m = 5, 2 # array = [1, 2, 3, 4, 5] # operations = [(1, 3), (2, 5)] # print(max_value_after_operations(n, m, array, operations)) # Output: 5"},{"question":"Task Given a list of integers representing the prices of houses along a street, find the maximum profit you can achieve by buying and selling one house, such that you buy a house before you sell it. Example For the input `[7, 1, 5, 3, 6, 4]`, the output should be `5` (buy at price 1 and sell at price 6). For the input `[7, 6, 4, 3, 1]`, the output should be `0` (no transactions can profit). Input/Output Input is a list of integers, each representing the price of a house on a particular day, with length 2 <= prices.length <= 20 and the prices are non-negative and not necessarily distinct. The output is an integer representing the maximum profit achievable. If no profit is possible, return 0. For prices = `[2, 4, 1]` the solution is `2` (buy at price 2 and sell at price 4).","solution":"def max_profit(prices): Finds the maximum profit possible by buying and selling a house from a given list of daily prices. :param prices: List of integers representing the prices of houses :return: Integer representing the maximum profit achievable if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Read problems statements in Mandarin Chinese. Given two arrays of integers A and B, both of length N. An operation is defined as adding a specific integer K (which can be positive, negative, or zero) to every element of array B. Determine the smallest integer K such that the number of equal elements between transformed array B and original array A is maximized. ------ Input ------ The first line of the input contains a single integer N. The second line contains N integers which represent array A. The third line contains N integers which represent array B. ------ Output ------ Contains a single integer which is the smallest integer K. ------ Constraints ------ - ( 1 ≤ N ≤ 5000 ) - ( |a_i|, |b_i| ≤ 10^9 ) - Elements in the arrays may be positive, negative, or zero. ----- Sample Input 1 ------ 4 1 2 3 4 2 3 4 5 ----- Sample Output 1 ------ -1 ----- Explanation 1 ------ By adding -1 to each element of array B, the array B becomes [1, 2, 3, 4], which matches array A exactly. Therefore, K = -1 in this case. ---------","solution":"def find_smallest_k(N, A, B): from collections import Counter differences = [A[i] - B[i] for i in range(N)] count_differences = Counter(differences) most_common_difference = count_differences.most_common(1)[0][0] return most_common_difference"},{"question":"Astronaut Zayne has been assigned to a space mission. He needs to ensure that the spaceship doesn\'t rely on faulty sensors. One crucial sensor provides readings in the form of a list of integers that represents the temperatures recorded at different times. The spaceship\'s system has a requirement: no three consecutive readings can be the same, otherwise, they trigger a warning signal which must be avoided. Your task is to modify the list minimally to ensure that no three consecutive readings are the same. You are allowed to increase or decrease any integer reading by 1 at a time and should return the minimum number of changes required to achieve a valid list. Input: - An integer N, number of temperature readings. - A list of N integers representing the temperature readings. Output: - An integer, the minimum number of changes required. Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ temperatures[i] ≤ 10^6 SAMPLE INPUT 6 5 5 5 4 4 4 SAMPLE OUTPUT 2 Explanation: One possible solution: Change the list to [5, 5, 4, 4, 4, 5] with 2 changes. Another solution: Change the list to [5, 5, 6, 4, 4, 4] with 2 changes. Both require a minimum of 2 changes to ensure no three consecutive readings are the same.","solution":"def min_changes_to_avoid_triplets(N, temperatures): changes = 0 for i in range(2, N): if temperatures[i] == temperatures[i-1] == temperatures[i-2]: # We have three consecutive same readings, change the current one temperatures[i] += 1 changes += 1 # Check if the new change created another triplet if i < N-1 and temperatures[i] == temperatures[i+1]: temperatures[i] -= 2 changes += 1 return changes"},{"question":"*Alice has a treasure chest with a mysterious lock that can only be opened by solving a coding challenge. Can you help her solve it?* Given a sequence of integers, you need to determine if you can reorder the elements to form a consecutive sequence, where each number appears exactly once. ------ Input Format ------ - The first line of input will contain an integer T, denoting the number of test cases. - Each test case contains: - An integer N, denoting the number of elements in the sequence. - A line with N space-separated integers, representing the sequence. ------ Output Format ------ For each test case, print YES if the elements can be reordered to form a consecutive sequence, otherwise print NO. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 The sum of all N in a single test shouldn’t exceed 10^6. 1 ≤ elements in sequence ≤ 10^9 ------ Sample Input 1 ------ 3 4 10 12 11 13 5 14 12 15 16 13 3 8 10 9 ------ Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ Test case 1: The sequence {10, 12, 11, 13} can be reordered to {10, 11, 12, 13} which is a consecutive sequence. Test case 2: The sequence {14, 12, 15, 16, 13} can be reordered to {12, 13, 14, 15, 16} which is a consecutive sequence. Test case 3: The sequence {8, 10, 9} can be reordered to {8, 9, 10} which is a consecutive sequence.","solution":"def can_form_consecutive_sequence(test_cases): results = [] for case in test_cases: N, sequence = case if N == 1: results.append(\\"YES\\") continue sequence = sorted(sequence) consecutive = True for i in range(1, N): if sequence[i] != sequence[i-1] + 1: consecutive = False break if consecutive: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alicia is an avid puzzle enthusiast and loves filling out crosswords. However, she faces a very peculiar problem. She must fill a crossword grid consisting of n rows and m columns with the words she has already chosen. The grid cells are represented as a list of n strings containing \'.\' for empty cells and \'#\' for blocked cells. Each word can be placed either horizontally or vertically in the empty cells and should adhere to the following rules: 1. The given words should be placed such that they all fit in the available empty cells. 2. No word should overlap any blocked cells (#). 3. The words must not intersect each other unless they share the same letter at the point of intersection. Alicia wants to know the minimum number of moves required to place all the given words into the crossword grid, where one move consists of placing one word. If it\'s not possible to place all the words in the grid, return -1. Write a function that takes the crossword grid and the list of words as input and returns the minimum number of moves required to correctly place all the words, or -1 if it is not possible. Input - n: Integer, the number of rows in the crossword grid. - m: Integer, the number of columns in the crossword grid. - grid: List of n strings, representing the crossword grid. - words: List of strings, representing the words to be placed. Output - Integer, the minimum number of moves to place all the words in the grid, or -1 if it\'s not possible. Examples Input 4 4 [\\"....\\", \\".#..\\", \\"....\\", \\"....\\"] [\\"this\\", \\"math\\", \\"cat\\"] Output 3 Input 4 4 [\\"....\\", \\".#..\\", \\"..\\", \\"....\\"] [\\"hello\\", \\"world\\"] Output -1 Input 3 3 [\\".#.\\", \\"...\\", \\".#.\\"] [\\"hi\\", \\"i\\"] Output 2 Note In the first example, all words can be placed with a total of 3 moves: - \\"this\\" can be placed horizontally on the first row. - \\"math\\" can be placed vertically starting from the first row, second column. - \\"cat\\" can be placed horizontally on the third row. In the second example, the word \\"hello\\" does not fit in any row or column without overlapping the blocked cells. In the third example, \\"hi\\" and \\"i\\" can be placed vertically in two moves.","solution":"def can_place_word_horizontally(grid, word, row, col): if col + len(word) > len(grid[0]): return False for i in range(len(word)): if grid[row][col + i] == \'#\' or (grid[row][col + i] != \'.\' and grid[row][col + i] != word[i]): return False return True def can_place_word_vertically(grid, word, row, col): if row + len(word) > len(grid): return False for i in range(len(word)): if grid[row + i][col] == \'#\' or (grid[row + i][col] != \'.\' and grid[row + i][col] != word[i]): return False return True def place_word_horizontally(grid, word, row, col): new_grid = [list(row) for row in grid] for i in range(len(word)): new_grid[row][col + i] = word[i] return [\\"\\".join(row) for row in new_grid] def place_word_vertically(grid, word, row, col): new_grid = [list(row) for row in grid] for i in range(len(word)): new_grid[row + i][col] = word[i] return [\\"\\".join(row) for row in new_grid] def solve_crossword(n, m, grid, words): if not words: return 0 word = words[0] for row in range(n): for col in range(m): if can_place_word_horizontally(grid, word, row, col): new_grid = place_word_horizontally(grid, word, row, col) result = solve_crossword(n, m, new_grid, words[1:]) if result != -1: return 1 + result if can_place_word_vertically(grid, word, row, col): new_grid = place_word_vertically(grid, word, row, col) result = solve_crossword(n, m, new_grid, words[1:]) if result != -1: return 1 + result return -1"},{"question":"You are given a string s consisting of n lowercase English letters. You want to modify this string by performing exactly one operation: either remove one character from any position in the string or keep the string as it is. Your goal is to determine the length of the longest substring that contains no repeating characters after performing the operation. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the length of the string s. The second line of each test case contains the string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer — the length of the longest substring that contains no repeating characters after performing the operation. -----Examples----- Input 3 4 abba 6 abcdef 6 abccba Output 2 6 3 -----Note----- In the first testcase, we can remove one of the \'b\'s to get the string \\"aba\\" or \\"abb\\", both containing a longest substring \\"ab\\" or \\"ba\\" with length 2. In the second testcase, we do not need to remove any characters as the string \\"abcdef\\" already has no repeating characters, and the longest substring is \\"abcdef\\" itself with length 6. In the third testcase, we can remove either of the \'c\'s to get the string \\"abcba\\" or \\"abcca\\", both containing a longest substring \\"abc\\" or \\"bca\\" with length 3.","solution":"def longest_substring_no_repeats(t, test_cases): def max_length_after_removal(s): n = len(s) if n == 1: return 1 # Initial maximum length without any removal max_len = 0 start = 0 char_index = {} for end in range(n): char = s[end] if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end max_len = max(max_len, end - start + 1) # Try removing each character and check the length of the longest substring for i in range(n): temp_s = s[:i] + s[i+1:] current_len = 0 window_start = 0 temp_index = {} for window_end in range(len(temp_s)): temp_char = temp_s[window_end] if temp_char in temp_index and temp_index[temp_char] >= window_start: window_start = temp_index[temp_char] + 1 temp_index[temp_char] = window_end current_len = max(current_len, window_end - window_start + 1) max_len = max(max_len, current_len) return max_len results = [] for i in range(t): n, s = test_cases[i] results.append(max_length_after_removal(s)) return results"},{"question":"Given two strings, s and t, return the length of the shortest string that has s and t as subsequences. If there are multiple answers, return any of them. A string is a subsequence of a given string if it is derived from the given string by deleting some (can be none) of the characters without changing the order of the remaining characters. Example 1: Input: s = \\"abc\\", t = \\"ac\\" Output: 3 Explanation: The shortest string containing both \\"abc\\" and \\"ac\\" as subsequences is \\"abc\\". Example 2: Input: s = \\"geek\\", t = \\"eke\\" Output: 5 Explanation: One shortest string containing both \\"geek\\" and \\"eke\\" as subsequences is \\"geeke\\". Example 3: Input: s = \\"abcd\\", t = \\"xyz\\" Output: 7 Explanation: Since there are no common characters, the shortest string containing both as subsequences is simply the concatenation of both: \\"abcdxyz\\". Example 4: Input: s = \\"a\\", t = \\"a\\" Output: 1 Explanation: The shortest string containing both \\"a\\" and \\"a\\" as subsequences is \\"a\\". Constraints: - 1 <= s.length, t.length <= 1000 - s and t consist of lower-case English letters.","solution":"def shortest_common_supersequence_length(s, t): Returns the length of the shortest common supersequence that has both s and t as subsequences. m, n = len(s), len(t) # Create a DP table to store the length of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array by finding the length of LCS for i in range(m): for j in range(n): if s[i] == t[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Length of LCS lcs_length = dp[m][n] # The length of the shortest common supersequence return m + n - lcs_length"},{"question":"In a faraway kingdom, a wise old king decreed that every building constructed must follow a beautiful architectural pattern based on the sequence of numbers. Each building\'s floor heights must adhere to a specific sequence rule known as the \\"Alternating Zigzag Sequence.\\" An Alternating Zigzag Sequence (AZS) is a sequence of numbers such that each number alternately increases and decreases. Formally, a sequence < b1, b2, ..., bn > is an AZS if it satisfies the following conditions: - For all odd indices i (where 1 <= i < n), bi < bi+1 - For all even indices i (where 1 <= i < n), bi > bi+1 Given a sequence < ai > of M positive integers, you need to help the kingdom find the length of the longest sub-sequence of this sequence which is an Alternating Zigzag Sequence (AZS). Input: The first line contains an integer T, the number of test cases. Each test case is structured as follows: - The first line contains a single integer M, the size of the sequence. - The second line contains M space-separated integers representing the sequence ai. Output: For each test case, print the length of the longest sub-sequence which is also an AZS. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 10^3 1 ≤ ai ≤ 10^3 Example Input: 2 6 1 3 2 4 3 5 5 10 20 30 40 50 Example Output: 6 2 Explanation: For the first test case, the whole sequence \'1 3 2 4 3 5\' forms an AZS of length 6. For the second test case, the longest AZS sub-sequence is \'10 20\' or any consecutive pair, which has a length of 2.","solution":"def longest_alternating_zigzag_sequence(arr): if not arr: return 0 n = len(arr) # for storing the lengths of longest AZS ending at each index increase = [1] * n decrease = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: increase[i] = max(increase[i], decrease[j] + 1) elif arr[i] < arr[j]: decrease[i] = max(decrease[i], increase[j] + 1) return max(max(increase), max(decrease)) def solve(t, test_cases): results = [] for case in test_cases: M, arr = case results.append(longest_alternating_zigzag_sequence(arr)) return results"},{"question":"A popular city has an intricate network of roads, represented as an undirected graph with N intersections and M roads. Each road has a particular energy cost associated with traversing it. There\'s a particularly important intersection known as the \\"center\\", denoted as C. Every day, several events take place, and each event happens at a different intersection. After each event, a person must return to the center by traveling roads that minimize the total energy cost. As the city\'s planner, you\'ll need to determine the minimum energy costs required to return to the center from each intersection where an event occurs. ----Input---- - The first line contains an integer T, the number of test cases. - The first line of each test case contains three integers: N (the number of intersections), M (the number of roads), and Q (the number of events). - The second line of each test case contains an integer C, the center intersection. - The next M lines each contain three integers u, v, and w, indicating there is a road between intersections u and v with energy cost w. - The next Q lines each contain an integer representing the intersection where an event occurs. ----Output---- - For each test case, output Q integers on a single line, each representing the minimum energy cost to return to the center from each intersection where an event occurs. ----Constraints---- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2 * 10^5 - 1 ≤ Q ≤ 10^3 - 1 ≤ u, v, C ≤ N - 1 ≤ w ≤ 10^9 - The graph is connected, i.e., there\'s a path between any pair of intersections. ----Example---- Input: 1 6 8 3 2 1 2 3 1 3 1 2 3 1 2 4 2 3 4 1 3 5 4 4 6 2 5 6 3 5 6 3 Output: 5 4 1 ----Explanation---- In the example, for the first event where the person is at intersection \\"5\\", the minimal cost path to return to the center \\"2\\" is through intersections \\"5 -> 3 -> 2\\" with an energy cost of 5. For the second event at intersection \\"6\\", the minimal cost path is \\"6 -> 4 -> 2\\" with an energy cost of 4. For the third event at intersection \\"3\\", the shortest path is direct with a cost of 1.","solution":"import heapq import sys def dijkstra(graph, start): Function to implement Dijkstra\'s algorithm to find the shortest path from the start node to all other nodes in the graph. n = len(graph) distances = [sys.maxsize] * n distances[start] = 0 pq = [(0, start)] # Priority queue to hold (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def minimum_energy_costs(T, test_cases): results = [] for t in range(T): N, M, Q = test_cases[t][0] C = test_cases[t][1][0] - 1 roads = test_cases[t][2] events = test_cases[t][3] graph = [[] for _ in range(N)] for u, v, w in roads: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) distances = dijkstra(graph, C) result = [] for event in events: result.append(distances[event-1]) results.append(result) return results"},{"question":"Given a string containing characters and whitespace, return the length of the longest substring that contains only vowels (a, e, i, o, u). For example: longest_vowel_substring(\\"earth problem solution\\") = 2 and longest_vowel_substring(\\"aeiou and more vowels aeiou\\") = 5 because \\"ea\\" is the longest substring of vowels in the first example, and \\"aeiou\\" is the longest substring of vowels in the second example.","solution":"def longest_vowel_substring(s): Returns the length of the longest substring that contains only vowels. vowels = set(\\"aeiouAEIOU\\") max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Create a function `toCamelCase(str)` that converts a given string to camel case. Camel case is a style of writing where each word in the middle of the phrase begins with a capital letter, without spaces or underscores between words. The first word is in lowercase. **Input** - `str` (string): A string containing words separated by spaces or underscores. **Output** - (string): A camel case version of the input string. **Example** ```python toCamelCase(\\"hello world\\") # \\"helloWorld\\" toCamelCase(\\"snake_case_example\\") # \\"snakeCaseExample\\" ``` **Note** - Your function should handle both spaces and underscores as word separators. - The function should correctly process strings with multiple spaces or underscores consecutively. - Edge cases to consider: empty strings, strings with only separators.","solution":"def toCamelCase(s): Converts a given string to camel case. Parameters: s (string): A string containing words separated by spaces or underscores. Returns: string: A camel case version of the input string. if not s: return \'\' # Split the string by spaces or underscores words = s.replace(\'_\', \' \').split() # Convert the first word to lowercase and the rest to title case if len(words) == 0: return \'\' camel_case_string = words[0].lower() + \'\'.join(word.capitalize() for word in words[1:]) return camel_case_string"},{"question":"-----Input----- The input contains a single string s (1 ≤ |s| ≤ 100), consisting only of lowercase English letters. -----Output----- Output a single string which is the reverse of s. -----Example----- Input hello Output olleh","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"In a small village, inhabitants live on the perimeter of a circular lake. Each house is situated exactly on the circumference of the lake and is represented by its angular coordinate in degrees (0 <= angle < 360). Given the angular coordinates of `n` houses on this circular lake, you need to determine the minimum angular distance between any two houses around the lake. The angular distance between two houses should be measured along the shortest path on the circle. Input The first line contains a single integer `n` (2 ≤ n ≤ 100), the number of houses. The second line contains `n` integers representing the angles at which the houses are located, in degrees. Output Print one floating-point number rounded to six decimal places: the minimum angular distance between any two houses around the lake. Examples Input 5 0 45 90 180 270 Output 45.000000 Input 3 10 30 350 Output 20.000000","solution":"def minimum_angular_distance(n, angles): Find the minimum angular distance between any two houses on the circular lake. :param n: int: The number of houses :param angles: List[int]: The angular coordinates of the houses in degrees :return: float: The minimum angular distance rounded to six decimal places if n < 2: return 0.0 # Sort the angles angles.sort() # Initialize the minimum distance to a large number min_distance = float(\'inf\') # Compute the difference between each adjacent pair and find the minimum for i in range(n - 1): distance = angles[i + 1] - angles[i] min_distance = min(min_distance, distance) # Also check the distance across the 0 degree mark circular_distance = 360 - (angles[-1] - angles[0]) min_distance = min(min_distance, circular_distance) return round(min_distance, 6)"},{"question":"Design a function that takes an integer array with an even number of elements and rearranges it so that every pair of adjacent elements are swapped. Example 1: Input: arr = [1, 2, 3, 4, 5, 6] Output: [2, 1, 4, 3, 6, 5] Example 2: Input: arr = [8, 0, 7, 1, 2, 9] Output: [0, 8, 1, 7, 9, 2] Your Task: You don\'t need to read input or print anything. The task is to complete the function `swapAdjacentPairs()` which takes arr[] and swaps every pair of adjacent elements and returns the modified list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The array length will always be even. - 2 ≤ array length ≤ 10^4 - -10^3 ≤ array elements ≤ 10^3","solution":"def swapAdjacentPairs(arr): Rearranges the elements of arr so that every pair of adjacent elements are swapped. The arr must have an even number of elements. Parameters: arr (list): A list of integers with an even number of elements. Returns: list: A list with adjacent elements swapped. for i in range(0, len(arr), 2): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Given a series of daily temperature readings for a week, write a function to find the largest temperature difference between two consecutive days. The function should accept a list of integers, where each integer represents the temperature reading of a day. The list will always contain exactly seven elements, corresponding to the seven days of the week. The function should return the highest difference in temperature between two consecutive days. In case the input list has fewer than two different temperatures, the function should return 0. Function Signature: ```python def max_temp_difference(temperatures: List[int]) -> int: # Your code here pass ``` Example: ```python max_temp_difference([70, 74, 68, 65, 80, 75, 72]) # Output: 15 max_temp_difference([50, 50, 50, 50, 50, 50, 50]) # Output: 0 ``` Explanation: In the first example, the largest temperature difference is between day 4 (65°F) and day 5 (80°F), which is 15°F. In the second example, since all temperatures are the same, the difference is 0.","solution":"def max_temp_difference(temperatures): Returns the largest temperature difference between two consecutive days. :param temperatures: List of 7 integers representing daily temperature readings. :return: Maximum temperature difference between two consecutive days. if len(temperatures) != 7: raise ValueError(\\"List must contain exactly 7 temperature readings\\") max_diff = 0 for i in range(1, len(temperatures)): diff = abs(temperatures[i] - temperatures[i - 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Nantendo Co., Ltd. is developing a new feature for Packet Monster to enhance gameplay by incorporating monster attributes that affect battle outcomes. Each monster has a set of specific attributes represented by numerical values called \\"stats.\\" There are five stats in total: attack, defense, speed, intelligence, and health. The game developers need to ensure that each monster\'s stats follow certain constraints to maintain balance and fairness in battles. Each set of stats is represented by a list of five integers. To achieve balanced gameplay, the developers defined a set of rules that each list of stats must comply with: 1. The sum of all stats must be less than or equal to a given maximum value. 2. Each stat must be within a specified range (inclusive). Your task is to write a program that checks whether a list of stats for a monster complies with these rules. Input The input consists of multiple datasets. The end of the input is indicated by a line containing a single hyphen (-). Each dataset includes: - A line containing five integers representing the monster\'s stats. - A line containing an integer representing the maximum allowed sum of stats. - A line containing five pairs of integers, each pair specifying the minimum and maximum allowable value for a stat (inclusive). Output For each dataset, output \\"Valid\\" if the list of stats complies with the rules. Otherwise, output \\"Invalid\\". Example Input 10 20 30 40 50 200 10 50 20 60 30 70 40 80 50 90 5 15 25 35 45 100 0 10 5 15 10 20 15 25 20 30 - Output Valid Invalid","solution":"def check_stats(stats, max_sum, ranges): Returns \\"Valid\\" if the stats comply with the given rules, otherwise returns \\"Invalid\\". # Check the sum of stats if sum(stats) > max_sum: return \\"Invalid\\" # Check each stat against the corresponding range for stat, (min_val, max_val) in zip(stats, ranges): if not (min_val <= stat <= max_val): return \\"Invalid\\" return \\"Valid\\" def process_inputs(inputs): results = [] index = 0 while index < len(inputs): if inputs[index] == \'-\': break # Read stats stats = list(map(int, inputs[index].split())) index += 1 # Read max_sum max_sum = int(inputs[index]) index += 1 # Read ranges ranges = [] range_data = inputs[index].split() for i in range(0, len(range_data), 2): min_val = int(range_data[i]) max_val = int(range_data[i + 1]) ranges.append((min_val, max_val)) index += 1 results.append(check_stats(stats, max_sum, ranges)) return results"},{"question":"Given a non-negative integer n, write a function to compute the number of set bits (bits with value 1) present in the binary representation of n, but only within the bits that fall in a given range [l, r], where l and r are inclusive. Example 1: Input: n = 29, l = 2, r = 4 Output: 2 Explanation: (29)_{10} = (11101)_{2} There are \'2\' set bits in the range 2 to 4. Example 2: Input: n = 50, l = 1, r = 3 Output: 1 Explanation: (50)_{10} = (110010)_{2} There is \'1\' set bit in the range 1 to 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countSetBits() which takes 3 Integers n, l, and r as input and returns the count of set bits in the given range of [l, r]. Expected Time Complexity: O(log(n)) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{5} 1 <= l <= r <= 17","solution":"def countSetBits(n, l, r): Returns the number of set bits (1s) in the binary representation of n within the bit range [l, r]. # Convert the number to its binary representation binary_representation = bin(n)[2:] # Reverse the binary string to get the correct bit positions binary_representation = binary_representation[::-1] count = 0 # Iterate over the range [l-1, r-1] since the bit positions start from 0 for i in range(l - 1, r): if i < len(binary_representation) and binary_representation[i] == \'1\': count += 1 return count"},{"question":"In a 2D coordinate plane, you are given an integer n and n pairs of integers (x, y) representing the coordinates of n points. Your task is to determine if there exists at least one right-angled triangle that can be formed using any three of these points. A right-angled triangle is one that has one angle exactly 90 degrees. -----Constraints----- - 3 leq n leq 1000 - -10^4 leq x, y leq 10^4 -----Input----- The input is given from Standard Input in the following format: n x1 y1 x2 y2 ... xn yn -----Output----- If there exists a right-angled triangle among the given points, print \\"YES\\". Otherwise, print \\"NO\\". -----Example----- Input: 4 0 0 3 0 3 4 0 4 Output: YES Explanation: The points (0,0), (3,0), and (0,4) form a right-angled triangle. Input: 5 1 2 3 4 5 6 7 8 9 10 Output: NO Explanation: No three points form a right-angled triangle.","solution":"def is_right_angle(px, py, qx, qy, rx, ry): Helper function to check if the triangle (p, q, r) is right-angled. a2 = (qx - px) ** 2 + (qy - py) ** 2 b2 = (rx - qx) ** 2 + (ry - qy) ** 2 c2 = (px - rx) ** 2 + (py - ry) ** 2 sides = sorted([a2, b2, c2]) return sides[0] + sides[1] == sides[2] def find_right_angled_triangle(points): n = len(points) for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if is_right_angle(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0], points[k][1]): return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(n)] print(find_right_angled_triangle(points))"},{"question":"Design a function `max_consecutive_ones` which takes a binary list and returns the maximum number of consecutive 1s in that list. The function should handle edge cases where the list is empty or contains only zeros or ones. Example: ```python # Given a binary list [0, 1, 1, 0, 1, 1, 1, 0], the function should return 3. max_consecutive_ones([0, 1, 1, 0, 1, 1, 1, 0]) # Output should be 3 ```","solution":"def max_consecutive_ones(binary_list): Returns the maximum number of consecutive 1s in the given binary list. Parameters: binary_list (list of int): List containing only 0s and 1s. Returns: int: Maximum number of consecutive 1s in the list. max_count = 0 current_count = 0 for num in binary_list: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"In a fictional city, a company runs N bus routes. Each bus route travels from one location to another without any intermediate stops. Due to the geographical layout of the city, each route is specified by a one-directional arrow on a directed graph. Given N bus routes where each route is represented by a directed edge from node u to node v, and due to a recent urban development plan, the government wants to ensure that passengers can reach any location in the city from any other location directly or indirectly using these bus routes. Your task is to determine the minimum number of new bus routes required to make the entire city\'s transportation system fully connected, so that there is a way to travel between every pair of locations, either directly or indirectly. Input The first line contains two integers N and M (1 ≤ N ≤ 100, 0 ≤ M ≤ 5000), where N is the number of locations and M is the number of existing bus routes. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), indicating a bus route from location u to location v. Output Output a single integer, the minimum number of new bus routes required to make the entire city\'s transportation system fully connected. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 4 4 1 2 2 3 3 4 4 1 Output 0 Input 3 0 Output 2 Note In the first example, the city has 5 locations and 3 existing bus routes. Adding the new bus routes (3, 4) and (1, 5) will make the system fully connected, so the answer is 2. In the second example, the city already has a fully connected transportation system, so no new bus routes are needed. In the third example, there are no initial bus routes, the minimum number of bus routes needed to connect 3 locations with each other is 2.","solution":"def find_min_new_routes(N, M, routes): from collections import defaultdict def tarjan_scc(n, edges): index = [0] stack = [] indices = [-1] * n lowlink = [-1] * n on_stack = [False] * n scc = [] def strongconnect(v): indices[v] = index[0] lowlink[v] = index[0] index[0] += 1 stack.append(v) on_stack[v] = True for w in edges[v]: if indices[w] == -1: strongconnect(w) lowlink[v] = min(lowlink[v], lowlink[w]) elif on_stack[w]: lowlink[v] = min(lowlink[v], indices[w]) if lowlink[v] == indices[v]: current_scc = [] while True: w = stack.pop() on_stack[w] = False current_scc.append(w) if w == v: break scc.append(current_scc) for v in range(n): if indices[v] == -1: strongconnect(v) return scc if N == 0: return 0 if M == 0: return N - 1 adj_list = defaultdict(list) for u, v in routes: adj_list[u-1].append(v-1) scc = tarjan_scc(N, adj_list) if len(scc) == 1: return 0 in_degrees = [0] * len(scc) out_degrees = [0] * len(scc) scc_index = {} for i, component in enumerate(scc): for node in component: scc_index[node] = i for u in range(N): for v in adj_list[u]: if scc_index[u] != scc_index[v]: out_degrees[scc_index[u]] += 1 in_degrees[scc_index[v]] += 1 zeros_in = 0 zeros_out = 0 for i in range(len(scc)): if in_degrees[i] == 0: zeros_in += 1 if out_degrees[i] == 0: zeros_out += 1 return max(zeros_in, zeros_out) # Sample usage N, M = 5, 3 routes = [(1, 2), (2, 3), (4, 5)] print(find_min_new_routes(N, M, routes)) # Output: 2"},{"question":"You are given a string s consisting of lowercase English letters. You can apply the following operation on the string any number of times: - Choose any character from the string and move it to any other position in the string. The goal is to check if it is possible to make the string a palindrome by performing the above operation any number of times. If it is possible to make the string a palindrome, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The input consists of a single line containing a string s (1 leq |s| leq 10^5), consisting of lowercase English letters. -----Output----- Output \\"YES\\" if it is possible to rearrange the string to make it a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input aabbcc Output YES Input abcde Output NO Input aabbcd Output NO -----Note----- In the first example, one possible way to rearrange the string to make it a palindrome is \\"abccba\\". In the second example, it is not possible to rearrange the string to make it a palindrome because no permutation of the string forms a palindrome. In the third example, one possible way to rearrange the string to make it a palindrome is \\"abcdcba\\". A string can be rearranged to a palindrome if at most one character has an odd frequency.","solution":"from collections import Counter def can_be_palindrome(s): Determines if the string can be rearranged into a palindrome. Args: s (str): Input string of lowercase English letters. Returns: str: \\"YES\\" if it\'s possible to rearrange the string into a palindrome, otherwise \\"NO\\". char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given an integer array representing a series of daily stock prices, calculate the maximum possible profit that can be achieved by making a series of at most two transactions. A transaction involves buying on one day and selling on another, and a second transaction can only be started after the first one is complete. -----Input----- - The first line contains an integer T (T ≤ 10), the number of test cases. - Each of the next T lines contains integers separated by spaces, representing the stock prices on different days. Each test case will have at most 1000 price points, and each price point will be a positive integer not exceeding 10^6. -----Output----- For each test case, output on a single line the maximum profit that can be obtained with at most two transactions. If no profit can be made, output 0. -----Example----- Input: 3 3 3 5 0 0 3 1 4 1 2 3 4 5 7 6 4 3 1 Output: 6 4 0 Explanation: - For the first case: Buy on day 3 (price=0), sell on day 5 (price=3), then buy on day 6 (price=1), and sell on day 7 (price=4), total profit = (3-0) + (4-1) = 6. - For the second case: The best strategy is to buy on day 1 (price=1) and sell on day 5 (price=5), total profit = (5-1) = 4. - For the third case: There is no profitable transaction possible.","solution":"def max_profit_with_two_transactions(prices): This function calculates the maximum profit from at most two transactions on given stock prices. if not prices: return 0 first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell def process_test_cases(test_cases): results = [] for prices in test_cases: results.append(max_profit_with_two_transactions(prices)) return results"},{"question":"A large organization needs to better understand the use of public transportation among its employees. To this end, they have developed an application to record the daily commute details of its employees. Each employee provides data about their commute to and from work, with each trip recorded separately. However, due to technical issues, some trips were recorded multiple times, and the data needs to be cleaned up to remove these duplicates. A trip is considered a duplicate if it is made by the same employee on the same day, with the same start and end times. Write a function `remove_duplicate_trips` to clean up the records and keep only the first occurrence of each trip. # Constraints - The number of employees E is between 1 and 1000. - Each employee can have at most 100 recorded trips per day. - Each trip includes: - Employee ID, a unique string of length between 1 and 10 consisting of uppercase letters and digits. - Date of the trip in the format YYYY-MM-DD. - Start time of the trip in the format HH:MM. - End time of the trip in the format HH:MM. All input values are guaranteed to be valid. # Input Your function will receive an input list of dictionaries, where each dictionary represents a trip with the following keys: - **employee_id**: string - **date**: string - **start_time**: string - **end_time**: string # Output Return a list of dictionaries representing the cleaned trip records, retaining only the first occurrence of each trip. # Example **Input** ```python trips = [ {\\"employee_id\\": \\"A123\\", \\"date\\": \\"2023-01-10\\", \\"start_time\\": \\"08:00\\", \\"end_time\\": \\"09:00\\"}, {\\"employee_id\\": \\"A123\\", \\"date\\": \\"2023-01-10\\", \\"start_time\\": \\"08:00\\", \\"end_time\\": \\"09:00\\"}, {\\"employee_id\\": \\"B456\\", \\"date\\": \\"2023-01-10\\", \\"start_time\\": \\"09:00\\", \\"end_time\\": \\"10:00\\"}, {\\"employee_id\\": \\"A123\\", \\"date\\": \\"2023-01-11\\", \\"start_time\\": \\"08:00\\", \\"end_time\\": \\"09:00\\"} ] ``` **Output** ```python [ {\\"employee_id\\": \\"A123\\", \\"date\\": \\"2023-01-10\\", \\"start_time\\": \\"08:00\\", \\"end_time\\": \\"09:00\\"}, {\\"employee_id\\": \\"B456\\", \\"date\\": \\"2023-01-10\\", \\"start_time\\": \\"09:00\\", \\"end_time\\": \\"10:00\\"}, {\\"employee_id\\": \\"A123\\", \\"date\\": \\"2023-01-11\\", \\"start_time\\": \\"08:00\\", \\"end_time\\": \\"09:00\\"} ] ``` In the example above, the first two trips are duplicates, so only the first occurrence is kept.","solution":"def remove_duplicate_trips(trips): Remove duplicate trips from the list of trip records. A trip is considered a duplicate if it is made by the same employee on the same day, with the same start and end times. Parameters: trips (list): A list of dictionaries where each dictionary represents a trip with keys \'employee_id\', \'date\', \'start_time\', and \'end_time\'. Returns: list: A list of dictionaries with duplicates removed, keeping only the first occurrence of each trip. seen_trips = set() unique_trips = [] for trip in trips: trip_tuple = (trip[\'employee_id\'], trip[\'date\'], trip[\'start_time\'], trip[\'end_time\']) if trip_tuple not in seen_trips: seen_trips.add(trip_tuple) unique_trips.append(trip) return unique_trips"},{"question":"Write a function that takes two lists of integers and returns a list of elements that are present in both lists. The elements in the resulting list should be ordered from their first appearance in the first list. Examples: ``` [1, 2, 3, 4], [3, 4, 5, 6] => [3, 4] [10, 20, 30], [40, 50, 60] => [] [a, b, c, d], [e, f, g, h] => [] ```","solution":"def common_elements(list1, list2): Returns a list of common elements in both list1 and list2. The elements in the resulting list are ordered by their first appearance in list1. set2 = set(list2) return [item for item in list1 if item in set2]"},{"question":"Alice has a list of n integers and wants to perform a specific operation on it k times. The operation is defined as follows: - Alice will pick two distinct indices i and j (1 ≤ i, j ≤ n) such that i ≠ j. - She will then replace both elements at indices i and j with their arithmetic mean. Because this operation involves floating-point values and arithmetic means, Alice must round the results to the nearest integer (if the mean is exactly halfway between two integers, round up). Given the initial list of integers, Alice wants to know the sum of the list after performing the operation k times. Help Alice determine the final sum. -----Input----- The first line of the input contains two space-separated integers n and k (2 ≤ n ≤ 100 000, 1 ≤ k ≤ n(n-1)/2), denoting the number of integers in the list and the number of operations, respectively. The next line contains n space-separated integers a_1, a_2, ..., a_n (-1 000 000 ≤ a_i ≤ 1 000 000), the elements of Alice\'s list. -----Output----- Print a single integer, the sum of the modified list after performing the operation k times. -----Examples----- Input 4 2 1 3 5 7 Output 16 Input 5 3 10 20 30 40 50 Output 75 Input 3 1 -9 8 15 Output 15 -----Note----- In the first sample, after the first operation, Alice may pick indices 1 and 2 to get the list (2, 4, 5, 7). After the second operation, she may pick indices 3 and 4 to get the list (2, 4, 6). In the second sample, one possible sequence of operations results in the following intermediate lists: (15, 25, 30, 40, 50), (20, 32, 40, 50), (25, 35, 50). In the third sample, Alice can only perform one operation, and the resulting list after one potential operation could be (-0.5, 0.5, 15). Rounding the means gives the list (0, 1, 15).","solution":"def final_sum_after_operations(n, k, lst): Calculate the sum of the list after performing the specified operation k times. # Since the value of each element in the list eventually converges to the overall average # after large enough operations, the sum of all elements in the list remains constant. return sum(lst)"},{"question":"You are given a grid with `n` rows and `m` columns, where each cell has an integer value representing the height of a terrain. The water will naturally flow from higher to lower cells in four possible directions: up, down, left, and right. Your task is to determine the number of cells from which water can flow to both the Pacific and Atlantic oceans. The Pacific Ocean touches the left and top edges of the grid, while the Atlantic Ocean touches the right and bottom edges of the grid. Example 1: Input: heights = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] Output: [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] Explanation: From these cells, water can flow both to the Pacific and Atlantic oceans. Example 2: Input: heights = [ [2, 1], [1, 2] ] Output: [[0, 0], [0, 1], [1, 0], [1, 1]] Explanation: Water can flow from any cell to both oceans. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `pacificAtlantic()` which takes the matrix `heights` as input and returns a list of all coordinates `[i, j]` (0-indexed) from which water can flow to both the Pacific and Atlantic oceans. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 <= n, m <= 200 1 <= heights[i][j] <= 10^5","solution":"def pacificAtlantic(heights): if not heights or not heights[0]: return [] n, m = len(heights), len(heights[0]) pacific = [[False] * m for _ in range(n)] atlantic = [[False] * m for _ in range(n)] def dfs(x, y, visit, prevHeight): if (x < 0 or x >= n or y < 0 or y >= m or visit[x][y] or heights[x][y] < prevHeight): return visit[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy, visit, heights[x][y]) for i in range(n): dfs(i, 0, pacific, heights[i][0]) dfs(i, m - 1, atlantic, heights[i][m - 1]) for j in range(m): dfs(0, j, pacific, heights[0][j]) dfs(n - 1, j, atlantic, heights[n - 1][j]) result = [] for i in range(n): for j in range(m): if pacific[i][j] and atlantic[i][j]: result.append([i, j]) return result"},{"question":"Alice and Bob are playing a game with candies. They have N candies of different types, each type denoted by a distinct integer. They take turns to pick one candy from the set of remaining candies, starting with Alice. Alice always tries to maximize the total value of the candies she picks, while Bob tries to minimize the total value of the candies Alice picks, effectively maximizing the value of the candies he himself picks. Determine the total value of the candies Alice will pick if both play optimally. Input Format The first line contains an integer T, the number of test cases. The next T lines each contain an integer N and a sequence of N integers representing the value of each candy. Output Format Output T lines each containing an answer to the corresponding query. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 5000 1 ≤ Candy value ≤ 10^6 Sample Input 3 3 2 4 6 4 1 2 9 3 5 8 3 7 4 5 Sample Output 6 10 19 Explanation For the first case, the values are [2, 4, 6]. - Alice picks 6, Bob picks 4, Alice picks 2. Alice\'s total = 6 + 2 = 8. For the second case, the values are [1, 2, 9, 3]. - Alice picks 9, Bob picks 3, Alice picks 2, Bob picks 1. Alice\'s total = 9 + 2 = 11. For the third case, the values are [8, 3, 7, 4, 5]. - Alice picks 8, Bob picks 7, Alice picks 5, Bob picks 4, Alice picks 3. Alice\'s total = 8 + 5 + 3 = 16.","solution":"def alice_candies(t, test_cases): results = [] for test in test_cases: n = test[0] candies = sorted(test[1:], reverse=True) alice_total = sum(candies[i] for i in range(0, n, 2)) results.append(alice_total) return results"},{"question":"Alice loves to collect stamps, and she keeps them organized in her stamp book. Each page of her stamp book can hold exactly 12 stamps. Alice wants to know how many full pages she can fill with the stamps she currently has and how many stamps will be left after filling the full pages. Write a program that calculates the number of full pages Alice can fill and the number of remaining stamps. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing a single integer, S, the number of stamps Alice has. ------ Output Format ------ For each test case, output on a new line two integers: the first integer is the number of full pages Alice can fill, and the second integer is the number of stamps left after filling the full pages. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ S ≤ 100 ----- Sample Input 1 ------ 3 24 35 50 ----- Sample Output 1 ------ 2 0 2 11 4 2 ----- Explanation 1 ------ Test case 1: Alice can fill 2 full pages with 24 stamps, and there are no remaining stamps. Test case 2: Alice can fill 2 full pages with 24 stamps, and there will be 11 stamps left. Test case 3: Alice can fill 4 full pages with 48 stamps, and there will be 2 stamps left.","solution":"def calculate_full_pages_and_remaining_stamps(test_cases): Calculate the number of full pages and remaining stamps for each test case. Args: test_cases (list of int): List containing the number of stamps for each test case. Returns: list of tuple: A list of tuples where each tuple contains two integers: the number of full pages and remaining stamps. results = [] for stamps in test_cases: full_pages = stamps // 12 remaining_stamps = stamps % 12 results.append((full_pages, remaining_stamps)) return results"},{"question":"A social media platform wants to identify influential users in their network. They define an \'influential user\' as one who has more followers than they follow. You need to write a program that identifies these influential users. Input Line 1: An integer N, the number of users (1 ≤ N ≤ 1000) Next N lines: Each line contains two integers F and G representing the number of followers and followed accounts for each user. Output Line 1: The number of influential users Example Input: 5 10 5 3 3 8 12 15 10 7 7 Output: 2","solution":"def count_influential_users(N, user_data): Returns the number of influential users. An influential user is defined as one who has more followers than they follow. Parameters: N (int): The number of users user_data (list of tuples): Each tuple contains two integers F and G where F is the number of followers and G is the number of followed accounts Returns: int: The number of influential users count = 0 for F, G in user_data: if F > G: count += 1 return count"},{"question":"You are given a list of integers that represents the number of seconds passed at each new detected event in a system. You need to determine the maximum number of events that happened in any continuous interval of `X` seconds. Input Format The first line contains an integer N representing the number of events recorded. The second line contains N space-separated integers representing the timestamps of the events in seconds, in non-decreasing order. The third line contains an integer X representing the interval length in seconds. Constraints 1 leq N leq 1000 0 leq text{timestamps}[i] leq 10^9 for 0 leq i < N 1 leq X leq 10^9 Output Format Output a single integer which is the maximum number of events that occurred in any continuous interval of X seconds. Examples: Sample Input 6 1 3 7 8 12 14 5 Sample Output 3 Explanation: In this example, the interval [3, 8] contains the maximum number of events (3 events at times 3, 7, and 8).","solution":"def max_events_in_time_interval(N, timestamps, X): Determines the maximum number of events that happened in any continuous interval of X seconds. Parameters: N (int): Number of events recorded. timestamps (list): List of space-separated integers representing the timestamps of the events in seconds, in non-decreasing order. X (int): The interval length in seconds. Returns: int: Maximum number of events that occurred in any continuous interval of X seconds. max_events = 0 for i in range(N): start_time = timestamps[i] end_time = start_time + X current_count = 0 for j in range(i, N): if timestamps[j] <= end_time: current_count += 1 else: break max_events = max(max_events, current_count) return max_events"},{"question":"Given a singly linked list of N nodes with possible integer duplicates, write a function to remove duplicates such that each element appears only once. Your function should maintain the original order of the nodes as much as possible. Example 1: Input: N = 6 value[] = {5, 3, 2, 5, 5, 4} Output: 5 3 2 4 Explanation: The duplicate \'5\' appears multiple times and is removed to retain only one occurrence. Example 2: Input: N = 8 value[] = {1, 2, 2, 3, 1, 4, 2, 3} Output: 1 2 3 4 Explanation: Duplicate \'1\', \'2\', and \'3\' are removed to retain only one occurrence of each element. Your Task: You need to implement the function removeDuplicates() that takes the head of the singly linked list as input and modifies the list to remove duplicates while maintaining the original order of nodes. Constraints: 1 <= N <= 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeDuplicates(head): if not head: return None seen = set() current = head seen.add(current.val) while current and current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head def list_to_linked_list(arr): if not arr: return None head = ListNode(arr[0]) current = head for value in arr[1:]: current.next = ListNode(value) current = current.next return head def linked_list_to_list(head): arr = [] while head: arr.append(head.val) head = head.next return arr"},{"question":"You are given a grid with H rows and W columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You can move up, down, left, or right, and you can only move to an adjacent cell if it is empty. You start at cell (1,1) and want to reach cell (H,W). Determine the minimum number of steps required to reach the destination, or output -1 if it is not possible. Constraints: * 1 ≤ H, W ≤ 100 * The start cell (1,1) and the destination cell (H,W) are always empty. Input: Input is given from Standard Input in the following format: H W followed by H lines each containing W characters (\'.\' or \'#\') representing the grid. Output: Print the minimum number of steps required to reach the bottom-right corner of the grid, or -1 if it’s not possible. Example: Input 3 3 ... .#. ... Output 4 Input 3 3 .#. .#. .#. Output -1","solution":"from collections import deque def min_steps_to_reach_destination(H, W, grid): # Directions for moving up, down, left and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, column, step count) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() # If we reached the end if r == H - 1 and c == W - 1: return steps # Explore all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < H and 0 <= nc < W and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 # Read input function def read_input(): import sys input = sys.stdin.read data = input().split() H = int(data[0]) W = int(data[1]) grid = [] start_idx = 2 for i in range(H): grid.append(data[start_idx + i]) return H, W, grid"},{"question":"Array Rotation An array rotation is an operation where a portion of the array is shifted to the beginning or the end of the array. One common type of array rotation is the left rotation of an array. Left Rotation Given an array of integers and a number of positions to rotate, create a function that performs a left rotation on the array. A single left rotation operation shifts each element of the array one unit to the left, and the first element moves to the end of the array. For example, if the array is arr=[1,2,3,4,5] and we perform 2 left rotations, the array becomes [3,4,5,1,2]. Function Description Complete the function `rotateLeft` in the editor below. `rotateLeft` has the following parameter(s): - `d`: an integer, the number of positions to rotate the array - `arr`: an array of integers to be rotated Returns - An array of integers representing the rotated array Input Format The first line contains two integers, `n` and `d`, the size of the array and the number of left rotations respectively. The second line contains `n` space-separated integers, `arr[0], arr[1], ..., arr[n-1]`. Constraints 1 leq n leq 10^5 1 leq d leq n 1 leq arr[i] leq 10^6 Output Format Print a single line of space-separated integers denoting the rotated array. Sample Input ``` 5 4 1 2 3 4 5 ``` Sample Output ``` 5 1 2 3 4 ``` Explanation After 4 rotations, the array becomes: [5, 1, 2, 3, 4].","solution":"def rotateLeft(d, arr): Perform a left rotation on the array arr by d positions. Parameters: d (int): the number of positions to rotate the array. arr (list): list of integers to be rotated. Returns: list: the rotated array. n = len(arr) d = d % n # In case d > n rotated_arr = arr[d:] + arr[:d] return rotated_arr"},{"question":"A group of friends are planning a road trip and they want to rent cars to minimize the cost of transportation. They have a list of the distances between various cities they plan to visit, and the cost of traveling between each pair of cities. Your task is to help them determine the minimum cost required to visit all the cities starting from the first city on the list and returning to the same city at the end, visiting each city exactly once. -----Input----- The first line consists of an integer 1 le N le 10, the number of cities. Then follow N lines, each line containing N integers, where the j-th integer in the i-th line represents the cost of traveling from the i-th city to the j-th city. It is guaranteed that the distance from the i-th city to itself is 0 (i.e., the cost matrix has 0 on its diagonal) and the distances are symmetric (i.e., the cost from city i to city j is the same as from city j to city i). -----Output----- Output should be a single integer, the minimum cost required to complete the road trip visiting all cities exactly once and returning to the starting city. -----Examples----- Sample Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output: 80","solution":"def tsp(cost_matrix): N = len(cost_matrix) dp = [[float(\'inf\')] * N for _ in range(1 << N)] dp[1][0] = 0 # Start at the first city for mask in range(1 << N): for i in range(N): if not mask & (1 << i): continue for j in range(N): if mask & (1 << j) or i == j: continue dp[mask | (1 << j)][j] = min(dp[mask | (1 << j)][j], dp[mask][i] + cost_matrix[i][j]) return min(dp[(1 << N) - 1][i] + cost_matrix[i][0] for i in range(N))"},{"question":"Meena has received a string s as a birthday gift, which consists of lowercase English letters. However, she is not satisfied with the string and wants to transform it into a palindrome using the minimum number of operations. In one operation, she can replace any character in the string with any lowercase English letter. Help Meena find the minimum number of operations required to make the given string a palindrome. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the string. The second line of each test case contains the string s of length n consisting of lowercase English letters. -----Output----- For each test case, print a single integer — the minimum number of operations needed to transform the string into a palindrome. -----Examples----- Input 3 4 abca 5 abcde 1 a Output 1 2 0 -----Note----- In the first test case, the string \\"abca\\" can be transformed to \\"abba\\" or \\"acca\\" by changing one character, so the minimum number of operations is 1. In the second test case, the string \\"abcde\\" can be transformed to \\"abcba\\" or \\"ababa\\" or another valid palindrome by changing at least two characters, so the minimum number of operations is 2. In the third test case, the string \\"a\\" is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(n, s): Calculate the minimum number of operations to transform string s into a palindrome. operations = 0 left = 0 right = n - 1 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(min_operations_to_palindrome(n, s)) return results"},{"question":"You are given a 2D grid of size `m x n` representing a map where `\'1\'` represents land and `\'0\'` represents water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are all surrounded by water. Write a program that counts the number of islands. Implement the function `numIslands(grid: List[List[str]]) -> int` where: - **Input:** - `grid`: an `m x n` rectangular grid represented as a list of lists of strings, where each entry is either `\'1\'` or `\'0\'`. - **Output:** - Returns an integer representing the number of distinct islands. # Example Input: ``` grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] ``` Output: ``` 3 ``` # Explanation: - The 2D grid has three separate islands: 1. The first island consists of the land cells in the top-left corner (`[0][0]`, `[0][1]`, `[1][0]`, and `[1][1]`). 2. The second island consists of the single cell land in the middle (`[2][2]`). 3. The third island is found in the bottom-right corner (`[3][3]` and `[3][4]`). # Constraints: - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 300` - `grid[i][j]` is either `\'0\'` or `\'1\'`.","solution":"from typing import List def numIslands(grid: List[List[str]]) -> int: Returns the number of islands in the given 2D grid. if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark the land as visited by sinking it # Apply DFS in all 4 directions dfs(grid, i - 1, j) dfs(grid, i + 1, j) dfs(grid, i, j - 1) dfs(grid, i, j + 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 # Start of a new island dfs(grid, i, j) return count"},{"question":"You are tasked with implementing a small library that computes the \\"run-length encoding\\" of a list of integers. Run-length encoding is a form of data compression where consecutive elements that are the same in a list are represented as a single pair of the form (element, count), where count is the number of times the element repeats consecutively. Write a function `runLengthEncode` that takes a list of integers `lst` as input and returns a list of tuples, where each tuple consists of an integer and its count of consecutive repetitions. The output list should preserve the order of first appearance of each group of repeated elements. Here are a few examples: ``` runLengthEncode([1, 1, 2, 2, 2, 3]) => [(1, 2), (2, 3), (3, 1)] runLengthEncode([4, 4, 4, 4, 4, 4]) => [(4, 6)] runLengthEncode([1, 2, 3, 4, 5]) => [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)] runLengthEncode([]) => [] runLengthEncode([7, 7, 8, 9, 9, 9, 8]) => [(7, 2), (8, 1), (9, 3), (8, 1)] ``` Constraints: - The input list will contain integers within the range of -10^9 to 10^9. - The length of the list will be between 0 and 10^5 elements. Write this function in Python.","solution":"def runLengthEncode(lst): Computes the run-length encoding of a list of integers. Args: lst (list of int): The list of integers to encode. Returns: list of tuples: A list of tuples where each tuple contains an integer and its count of consecutive repetitions. if not lst: return [] encoded_list = [] current_elem = lst[0] count = 1 for elem in lst[1:]: if elem == current_elem: count += 1 else: encoded_list.append((current_elem, count)) current_elem = elem count = 1 encoded_list.append((current_elem, count)) return encoded_list"},{"question":"You are given a string S of length N consisting of lowercase English letters and the character ?\'. Your task is to replace every occurrence of \'?\' with any lowercase English letter such that the resultant string does not contain any consecutive identical characters. If there is more than one solution, any will be accepted. Function Description Complete the `replaceQuestionMarks` function in the editor below. The function should return a modified string that meets the criteria. replaceQuestionMarks has the following parameter: - `S`: a string consisting of lowercase English letters and the character `?`. Input Format The first line contains a single integer N, the length of the string S. The second line contains the string S. Constraints 1 leq N leq 10^3 Output Format Print the modified string, with all instances of \'?\' replaced by lowercase English letters such that no two adjacent characters are the same. Sample Input 0 7 a?b??a? Sample Output 0 acbacba Sample Input 1 3 ??? Sample Output 1 abc Explanation 0 In the first example, one possible way to replace \'?\' is \\"acbacba\\". We make sure no two adjacent characters are the same. In the second example, one possible way to replace \'?\' is \\"abc\\".","solution":"def replaceQuestionMarks(S): Replace every occurrence of \'?\' with any lowercase English letter such that the resultant string does not contain any consecutive identical characters. n = len(S) if n == 0: return \\"\\" res = list(S) for i in range(n): if res[i] == \'?\': for c in \'abc\': # Choose from \'a\', \'b\', \'c\' to ensure no consecutive chars are the same. if (i > 0 and res[i - 1] == c) or (i < n - 1 and res[i + 1] == c): continue res[i] = c break return \'\'.join(res)"},{"question":"Given an integer array of size n, determine the number of unique quadruples (a, b, c, d) such that: - 0 ≤ a < b < c < d < n - The sum of elements at these indices equals a specified target value. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers n (the size of the array) and target (the required sum). - The second line contains n space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, print a single line containing one integer, the number of unique quadruples that satisfy the conditions. ------ Constraints ------ 1 ≤ T ≤ 10 4 ≤ n ≤ 300 -10^6 ≤ array[i] ≤ 10^6 -10^6 ≤ target ≤ 10^6 ------ Sample Input 1 ------ 2 5 0 1 0 -1 0 -2 6 6 1 1 1 1 1 1 ------ Sample Output 1 ------ 1 15 ------ Explanation 1 ------ Test case 1: The only valid quadruple is (0, 1, 2, 3) where the sum of elements is 1 + 0 + (-1) + 0 = 0. Hence the output is 1. Test case 2: All possible quadruples sum to 4 since all elements are 1. There are binom{6}{4} = 15 such combinations. Hence the output is 15.","solution":"from itertools import combinations def find_unique_quadruples(arr, target): n = len(arr) count = 0 for quad in combinations(range(n), 4): if arr[quad[0]] + arr[quad[1]] + arr[quad[2]] + arr[quad[3]] == target: count += 1 return count def solve(test_cases): results = [] for n, target, arr in test_cases: results.append(find_unique_quadruples(arr, target)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) target = int(data[index + 1]) arr = list(map(int, data[index + 2: index + 2 + n])) test_cases.append((n, target, arr)) index += 2 + n results = solve(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function to determine the maximum XOR of two integers in a given range [L, R]. Given two non-negative integers L and R, write a function `maxXor(L, R)` to find the maximal value of A XOR B, where A and B are integers within the range [L, R] (inclusive). Example 1: Input: L = 10, R = 15 Output: 7 Explanation: The best pair is (8 ^ 15) = 7. Example 2: Input: L = 5, R = 6 Output: 3 Explanation: The best pair is (5 ^ 6) = 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxXor(L, R)` which takes two integers L and R as input parameters and returns the maximum XOR value. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 0 <= L <= R <= 10^9","solution":"def maxXor(L, R): Returns the maximum XOR value of two integers in the range [L, R]. # Variables to store the result and the temporary comparison value xor = L ^ R max_xor = 1 # Left shift until xor is zero while xor > 0: max_xor <<= 1 xor >>= 1 # Subtract 1 to get the maximum possible value of XOR within the range return max_xor - 1"},{"question":"Zara is fond of geometric sequences and decides to challenge her friend Mia with the following problem. She gives Mia a positive integer P and asks her to construct a geometric series where the first element is 1 and the common ratio is also 1. Mia then needs to find the R^th term in the series such that each term T(n) is given by T(n) = T(n-1) * R. Input: The first line contains a single integer T, the number of test cases. The following T lines each contain two integers P and R separated by a space. Output: For each test case, print the R^th term of the sequence. Constraints: 1 ≤ T ≤ 10^5 1 ≤ P < 100 1 ≤ R < 100 SAMPLE INPUT 2 2 3 5 1 SAMPLE OUTPUT 3 1 Explanation: For the first test case: R = 3, so the series will be: 1, 3, 9, ... The 3rd term is 9. For the second test case: R = 1, so the series will be: 1, 1, 1, ... The 5th term is 1.","solution":"def geometric_term(P, R): Returns the Rth term in a geometric sequence starting with 1 and common ratio P. return P ** (R - 1) def process_input(input_list): Processes the input list and returns the list of outputs for each test case. T = input_list[0] results = [] for i in range(1, T + 1): P, R = input_list[i] results.append(geometric_term(P, R)) return results"},{"question":"Alice is working on a new application that evaluates the performance of various sorting algorithms. She has n arrays, each consisting of m elements, and must determine the fastest sorting algorithm for each array. Three algorithms are provided for testing: Bubble Sort, Merge Sort, and Quick Sort. Bubble Sort has a time complexity of O(m^2). Merge Sort and Quick Sort both have time complexities of O(m log m). To simplify the process, Alice assigns a constant time t1 for each comparison made by Bubble Sort and t2 for each comparison made by both Merge Sort and Quick Sort. The total time taken by an algorithm to sort an array is the product of its time complexity and respective time per comparison. Given the number of arrays n, the elements of each array, and the times t1 and t2, help Alice determine the fastest sorting algorithm for each array. Input The first line contains four integers n, m, t1, and t2 (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^3, 1 ≤ t1, t2 ≤ 10^3) — the number of arrays, the number of elements in each array, and the time per comparison for Bubble Sort and Merge/Quick Sort, respectively. Each of the next n lines contains m integers, representing the elements of the arrays. Output Print n lines, each containing either \\"Bubble Sort\\", \\"Merge Sort\\", or \\"Quick Sort\\", which indicates the fastest sorting algorithm for the corresponding array. Examples Input 3 5 2 1 4 3 1 2 5 1 5 2 4 3 6 8 3 7 2 Output Merge Sort Merge Sort Merge Sort Input 2 4 3 1 4 2 3 1 7 5 6 8 Output Merge Sort Merge Sort Note For the first example: - For array [4, 3, 1, 2, 5], the computation times would be: - Bubble Sort: 25 * 2 = 50 - Merge Sort: 5 log 5 * 1 ≈ 11.5 - Quick Sort: 5 log 5 * 1 ≈ 11.5 - For array [1, 5, 2, 4, 3]: - Bubble Sort: 25 * 2 = 50 - Merge Sort: 5 log 5 * 1 ≈ 11.5 - Quick Sort: 5 log 5 * 1 ≈ 11.5 - For array [6, 8, 3, 7, 2]: - Bubble Sort: 25 * 2 = 50 - Merge Sort: 5 log 5 * 1 ≈ 11.5 - Quick Sort: 5 log 5 * 1 ≈ 11.5 Thus, for all arrays in this example, Merge Sort and Quick Sort are equally fast and faster than Bubble Sort.","solution":"import math def determine_fastest_sorting_algorithm(n, m, t1, t2, arrays): results = [] # Calculating the constant multipliers for each sorting algorithm bubble_sort_time = m**2 * t1 merge_quick_sort_time = m * math.log2(m) * t2 for arr in arrays: if bubble_sort_time < merge_quick_sort_time: results.append(\\"Bubble Sort\\") else: results.append(\\"Merge Sort\\") # Merge Sort and Quick Sort have the same time complexity return results"},{"question":"You are managing a list of tasks and need to perform several operations on the tasks, such as adding, removing, and listing them in priority order. Each task has a description and a priority level (an integer where a lower number indicates higher priority). Implement a class `TaskManager` that supports the following methods: 1. `add_task(description: str, priority: int)`: - Adds a new task with the given description and priority. - If a task with the same description already exists, update its priority. 2. `remove_task(description: str)`: - Removes the task with the given description. - If no such task exists, do nothing. 3. `get_tasks()`: - Returns a list of task descriptions sorted by their priority in ascending order. - If two tasks have the same priority, they should be ordered by the description alphabetically. Input Format The class methods will be called in the following sequence: - Any number of `add_task`, which adds a task or updates the priority of an existing task. - Any number of `remove_task`, which removes the specified task. - One final `get_tasks`, which retrieves the current list of tasks. Constraints - The priority is an integer between 1 and 100. - Each description is a string containing between 1 and 100 characters. - You can assume all inputs are valid. Example Usage ```python tm = TaskManager() tm.add_task(\\"Buy groceries\\", 2) tm.add_task(\\"Wash car\\", 1) tm.add_task(\\"Buy groceries\\", 3) tm.add_task(\\"Do laundry\\", 2) tm.remove_task(\\"Wash car\\") task_list = tm.get_tasks() print(task_list) ``` Expected Output ```plaintext [\'Do laundry\', \'Buy groceries\'] ``` Explanation - The task \\"Buy groceries\\" is added with priority 2, then updated to priority 3. - The task \\"Wash car\\" is added with priority 1 and then removed. - The tasks are printed in ascending priority order: [\\"Do laundry\\" (priority 2), \\"Buy groceries\\" (priority 3)].","solution":"class TaskManager: def __init__(self): self.tasks = {} def add_task(self, description: str, priority: int): self.tasks[description] = priority def remove_task(self, description: str): if description in self.tasks: del self.tasks[description] def get_tasks(self): return [task for task, _ in sorted(self.tasks.items(), key=lambda x: (x[1], x[0]))]"},{"question":"Given a string s and a dictionary of words dict, your task is to determine the minimal number of segments into which the given string can be divided such that each segment is a valid word from the dictionary. If the string cannot be completely segmented, return -1. Example 1: Input: s = \\"leetcode\\", dict = [\\"leet\\", \\"code\\"] Output: 2 Explanation: The string can be segmented as \\"leet\\" and \\"code\\". Example 2: Input: s = \\"applepenapple\\", dict = [\\"apple\\", \\"pen\\"] Output: 3 Explanation: The string can be segmented as \\"apple\\", \\"pen\\", and \\"apple\\". Example 3: Input: s = \\"catsandog\\", dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: -1 Explanation: The string cannot be completely segmented into valid words. Your Task: You don\'t need to read or print anything. Your task is to complete the function `minSegments(s: str, dict: List[str]) -> int` which takes the string s and dictionary dict as input and returns the minimal number of segments, or -1 if segmentation is not possible. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 <= len(s) <= 300 1 <= len(dict) <= 1000 1 <= len(dict[i]) <= 20 The input string s and the words in dict contain only lowercase English letters.","solution":"from typing import List def minSegments(s: str, wordDict: List[str]) -> int: word_set = set(wordDict) n = len(s) dp = [float(\'inf\')] * (n+1) dp[0] = 0 for i in range(1, n+1): for j in range(i): if s[j:i] in word_set: dp[i] = min(dp[i], dp[j] + 1) return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"Alex is a skilled gardener renowned for his beautiful flower beds. He recently acquired a new garden composed of numerous rectangular flower beds. However, the irrigation system he installed can only supply water in non-overlapping areas. To maximize the watering efficiency, Alex needs to find out the largest non-overlapping rectangular flower bed area. You, being a good friend of Alex, decide to help him with this problem. Please write a program that calculates the largest non-overlapping area of a single rectangular flower bed within the entire garden. Input format: The first line contains an integer, t, denoting the number of test cases. After that, for each test case: - One line with an integer n, denoting the number of rectangular flower beds. - n lines follow, each containing four integers x1, y1, x2, y2 (1 ≤ x1 < x2 ≤ 10^6 and 1 ≤ y1 < y2 ≤ 10^6), representing the coordinates of the bottom-left (SW) corner (x1, y1) and the top-right (NE) corner (x2, y2) of the rectangular flower bed. Output format: For each test case, print a single integer representing the largest non-overlapping area of a rectangular flower bed. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 SAMPLE INPUT 2 3 1 1 4 4 2 2 5 5 3 1 6 4 2 0 0 3 3 1 1 4 5 SAMPLE OUTPUT 9 12","solution":"def largest_non_overlapping_area(t, testCases): results = [] for i in range(t): n = testCases[i][0] rectangles = testCases[i][1] max_area = 0 for rect in rectangles: x1, y1, x2, y2 = rect area = (x2 - x1) * (y2 - y1) max_area = max(max_area, area) results.append(max_area) return results"},{"question":"You are given an array of integers and a target sum K. Your task is to determine if there are three distinct elements in the array that add up to exactly K. Constraints * 1 ≤ length of array ≤ 10^5 * -10^9 ≤ each integer in the array ≤ 10^9 Input The input is given from Standard Input in the following format: `n K` `a_1 a_2 ... a_n` Where `n` is the number of elements in the array, `K` is the target sum, and `a_1, a_2, ..., a_n` are the elements of the array. Output Print \\"YES\\" if there exist three distinct elements in the array that add up to K, otherwise print \\"NO\\". Examples Input 5 12 1 2 3 7 5 Output YES Input 5 22 1 2 3 7 5 Output NO","solution":"def three_sum_to_k(n, K, array): Determines if there are three distinct elements in the array that add up to exactly K. Parameters: n (int): The number of elements in the array K (int): The target sum array (list): The list of integers Returns: str: \\"YES\\" if there exist three distinct elements that add up to K, otherwise \\"NO\\" array.sort() for i in range(n): left = i + 1 right = n - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == K: return \\"YES\\" elif current_sum < K: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Given an array of integers, find the element that occurs most frequently. If there are multiple elements with the same highest frequency, find the smallest element among them. Return this element. Example arr = [1, 3, 3, 2, 1, 4, 3, 1, 1, 2] In this array, the element 1 occurs four times, which is more frequent than any other element. Thus, the output is 1. Function Description Complete the `mostFrequentElement` function in the editor below. `mostFrequentElement` has the following parameter(s): - `int arr[n]`: an array of integers Return - `int`: the element that occurs most frequently. If there is a tie, return the smallest element among them. Input Format The first line contains an integer, n, the size of the array. The second line contains n space-separated integers that describe arr[n]. Constraints 0 < n leq 100 -100 leq arr[i] leq 100 Output Format Return the element that occurs most frequently. In case of a tie, return the smallest element among the ones with the highest frequency. Sample Input STDIN Function ----- -------- 10 arr[] size n = 10 1 3 3 2 1 4 3 1 1 2 arr = [1, 3, 3, 2, 1, 4, 3, 1, 1, 2] Sample Output 1 Explanation The array contains the elements 1, 3, 3, 2, 1, 4, 3, 1, 1, 2. The frequency of each element: - 1 occurs 4 times - 3 occurs 3 times - 2 occurs 2 times - 4 occurs 1 time Since 1 has the highest frequency among all elements, the output is 1.","solution":"def mostFrequentElement(arr): Returns the element that occurs most frequently in the array. If there are multiple elements with the same highest frequency, returns the smallest element among them. from collections import Counter frequency = Counter(arr) max_count = max(frequency.values()) # Find the smallest element among those with max_count most_frequent_elements = [key for key, value in frequency.items() if value == max_count] return min(most_frequent_elements)"},{"question":"You are given an array of integers `nums` which represents the stock prices of a company in chronological order. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Write a function that returns the maximum profit you can achieve from this transaction. If no profit can be made, return 0. Your solution should run in linear time. **Input** The input consists of one or more integers representing the stock prices of the company. - `1 ≤ len(nums) ≤ 10^5` - `0 ≤ nums[i] ≤ 10^5` **Output** Output a single integer, the maximum profit you can achieve from the transaction. If it is not possible to achieve any profit, return 0. **Examples** ``` Input 7 1 5 3 6 4 Output 5 Input 7 6 4 3 1 Output 0 ``` **Explanation** In the first sample, the optimal strategy would be to buy the stock on day 2 (price = 1) and sell it on day 5 (price = 6) for a maximum profit of 5. In the second sample, there is no way to make a profit as the stock prices continuously decrease. Therefore, the output is 0.","solution":"def max_profit(nums): Given an array of integers representing stock prices, return the maximum profit that can be achieved by buying on one day and selling on a future day. If no profit is possible, return 0. :param nums: List[int] :return: int if not nums: return 0 min_price = nums[0] max_profit = 0 for price in nums[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are managing a fleet of delivery drones that operate within a grid city. Each grid cell can be either an open space or a building that a drone cannot fly through. Your task is to write a program to guide a drone from a starting position to a delivery location while ensuring it does not collide with buildings. The grid is represented by an NxN matrix, where \'0\' indicates an open space and \'1\' indicates a building. The drone can move up, down, left, or right, but cannot move diagonally. The goal is to determine the shortest path from the starting to the ending position. If the destination is unreachable, the program should indicate that as well. Additionally, the drone can carry a single package, and your program should minimize the steps taken for each delivery. For this task: 1. The drone should reach the delivery location using the shortest possible path. Output the length of this path. 2. If the endpoint is unreachable, print \\"unreachable\\". Input The first line contains an integer c, the number of test cases. For each test case, the first line contains one integer N (1 ≤ N ≤ 50), denoting the size of the grid. The next N lines each contain N integers (0 or 1), separated by spaces, representing the grid. The next line contains four integers: startX, startY, endX, and endY (0 ≤ startX, startY, endX, endY < N), where (startX, startY) is the starting position and (endX, endY) is the delivery location. The starting and ending positions are guaranteed to be on open spaces (i.e., grid cells with value 0). Output For each test case, print the length of the shortest path. If the delivery location is unreachable, print \\"unreachable\\". Example Input 2 5 0 0 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 4 4 4 0 0 1 1 1 1 0 0 0 0 0 0 1 0 0 0 3 0 0 1 Output 8 unreachable","solution":"from collections import deque def shortest_path(grid, startX, startY, endX, endY): N = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(startX, startY, 0)]) # (x, y, distance) visited = set((startX, startY)) while queue: x, y, dist = queue.popleft() if x == endX and y == endY: return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def solve_drone_delivery(test_cases): results = [] for case in test_cases: N, grid, (startX, startY, endX, endY) = case result = shortest_path(grid, startX, startY, endX, endY) if result == -1: results.append(\\"unreachable\\") else: results.append(str(result)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') current_line = 0 c = int(input_lines[current_line]) current_line += 1 test_cases = [] for _ in range(c): N = int(input_lines[current_line]) current_line += 1 grid = [] for _ in range(N): grid.append(list(map(int, input_lines[current_line].split()))) current_line += 1 startX, startY, endX, endY = map(int, input_lines[current_line].split()) current_line += 1 test_cases.append((N, grid, (startX, startY, endX, endY))) return test_cases def main(input_str): test_cases = parse_input(input_str) results = solve_drone_delivery(test_cases) return \\"n\\".join(results)"},{"question":"A local animal shelter wants to organize a fair adoption process for their cats. Each cat has a distinct friendliness score. They establish a ranking system where each cat must be placed into one of two categories: \\"very friendly\\" or \\"less friendly\\". The friendliness score for the \\"very friendly\\" cats should ideally be as high as possible, and the friendliness score for the \\"less friendly\\" cats should be lower. You are given the friendliness scores of all the cats and you must return a list of the cats that should be placed in the \\"very friendly\\" category such that the sum of their scores is maximized while ensuring at least one cat is in the \\"less friendly\\" category. Input: The first line of the input contains an integer T, representing the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of cats. - The second line contains N space-separated integers representing the friendliness scores of the cats. Output: For each test case, print a space-separated list of the friendliness scores of the \\"very friendly\\" cats that maximizes the sum, ensuring that there is at least one \\"less friendly\\" cat. The scores in the output list should be in the same order as they appear in the input. If there are multiple valid solutions, choose any. Constraints: 1 ≤ T ≤ 500 2 ≤ N ≤ 500 1 ≤ friendliness score ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 5 1 3 2 SAMPLE OUTPUT 2 3 5 3 2","solution":"def categorize_cats(test_cases): results = [] for cats in test_cases: scores = cats[1] max_score = max(scores) max_index = scores.index(max_score) # Remove the maximum score temporarily less_friendly_score = scores[max_index] del scores[max_index] # Remaining \\"very friendly\\" scores very_friendly_scores = scores results.append(very_friendly_scores) return results def parse_input(input_str): lines = input_str.split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) scores = list(map(int, lines[index + 1].split())) test_cases.append((N, scores)) index += 2 return test_cases def format_output(results): return \\"n\\".join([\\" \\".join(map(str, res)) for res in results]) input_str = 2 3 1 2 3 4 5 1 3 2 test_cases = parse_input(input_str) results = categorize_cats(test_cases) output = format_output(results) print(output)"},{"question":"You believe you can solve it? This problem will test your abilities in basic programming and logical reasoning. You are provided with an integer Q and then Q queries; each query contains an integer t (1-based indexing) followed by a sequence of integers B (0-based indexing). Based on the value of t, you will perform an action on B. t Action Required 1 Print the integer that appears most frequently in B. If multiple such integers exist, print the smallest one. 2 Print the sum of all integers in B. 3 Print \\"Sorted\\" if the integers in B are sorted in non-decreasing order, or \\"Unsorted\\" otherwise (without the quotes). 4 Print \\"YES\\" if there exists an integer x in B such that x % 2 == 0, otherwise print \\"NO\\" (without the quotes). 5 Print the product of the smallest and largest integers in B. -----Input----- The first line of the input contains an integer Q (1 leq Q leq 10000). Each of the next Q lines contains an integer t (1 leq t leq 5) followed by a sequence of integers B. -----Output----- For each query, output the required result based on the value of t. -----Scoring----- There are 20 hidden test cases to verify the correctness and efficiency of your solution. Each hidden test case is worth 5 points. Sample test cases below are worth 0 points. -----Examples----- Sample Input 1: 3 1 3 3 2 4 4 4 2 1 2 3 4 3 4 3 2 1 0 Sample Output 1: 4 10 Unsorted Sample Input 2: 2 4 7 5 3 2 5 6 4 2 8 10 Sample Output 2: NO 20","solution":"def process_queries(Q, queries): results = [] for query in queries: t, *B = query if t == 1: from collections import Counter freq = Counter(B) most_frequent_count = max(freq.values()) most_frequent_numbers = [key for key, value in freq.items() if value == most_frequent_count] results.append(min(most_frequent_numbers)) elif t == 2: results.append(sum(B)) elif t == 3: if B == sorted(B): results.append(\\"Sorted\\") else: results.append(\\"Unsorted\\") elif t == 4: if any(x % 2 == 0 for x in B): results.append(\\"YES\\") else: results.append(\\"NO\\") elif t == 5: results.append(min(B) * max(B)) return results # Example usage if __name__ == \\"__main__\\": Q = 3 queries = [ [1, 3, 3, 2, 4, 4, 4], [2, 1, 2, 3, 4], [3, 4, 3, 2, 1, 0] ] print(process_queries(Q, queries)) # Output: [4, 10, \'Unsorted\']"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a list of tuples, each containing two integers from the input list that add up to the target integer. Each pair should only appear once in the result, and the order of pairs and numbers within each pair does not matter. Example: Input: numbers = [2, 4, 3, 5, 7, 8, 1], target = 9 Output: [(2, 7), (4, 5), (1, 8)] Input: numbers = [1, 2, 2, 3], target = 4 Output: [(1, 3), (2, 2)]","solution":"def find_pairs_with_sum(numbers, target): Given a list of integers and a target integer, return a list of tuples containing pairs of integers that add up to the target integer. Each pair should appear only once. pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) return list(pairs)"},{"question":"Alice is an avid gardener and she loves growing flowers. This spring, she decided to plant some flowers in a straight row in her garden. She bought a lot of seeds of different flower types and wants to plant them in a specific way to create a visually appealing pattern. Alice has the seeds for `n` types of flowers, each type denoted by a unique integer. She also has a specific pattern in mind represented by the string `pattern` where each character corresponds to a type of flower (represented by digits 1 through 9). Alice\'s goal is to determine the smallest suffix of the flower type list such that its characters can be matched with the sequence in the pattern string. A suffix of a list is a contiguous sublist that starts at some position in the list and goes to the end of the list. -----Input----- - The first line contains a single integer `n` which is the number of flower types. - The second line contains a string `types` of length `n` where each character represents a flower type. - The third line contains a string `pattern`, which is the sequence Alice wants to match with the suffix. -----Output----- - Print the smallest suffix of `types` that matches the `pattern`. If no such suffix exists, print `-1`. -----Constraints----- - 1 ≤ n ≤ 10^6 - 1 ≤ length of `pattern` ≤ n - `types` and `pattern` consist of digits from \'1\' to \'9\'. -----Example----- Input 1: 8 23456389 563 Output 1: 56389 Input 2: 5 12345 678 Output 2: -1 Input 3: 7 1234512 4512 Output 3: 4512 -----Explanation----- Testcase 1: The smallest suffix of `types` that can match the `pattern` \\"563\\" is \\"56389\\". Testcase 2: It\'s not possible to match the `pattern` \\"678\\" with any suffix of `types`. Testcase 3: The smallest suffix of `types` that can match the `pattern` \\"4512\\" is \\"4512\\".","solution":"def find_smallest_suffix(n, types, pattern): Returns the smallest suffix of `types` that matches the `pattern`. If no such suffix exists, returns `-1`. pattern_len = len(pattern) for i in range(n - pattern_len + 1): if types[i:i + pattern_len] == pattern: return types[i:] return \\"-1\\""},{"question":"John is passionate about numbers, especially prime sequences. He recently learned about a fascinating concept called \\"prime gap sequences.\\" A prime gap sequence is defined as the difference between successive prime numbers. For instance, the first few prime numbers are 2, 3, 5, 7, 11, so the first few prime gaps are 1, 2, 2, 4. John wants to analyze these prime gap sequences further and needs your help. Given a number n, determine the sum of the first n prime gaps. Input: The first line contains an integer t, the number of test cases. The next t lines each contain an integer n. Output: For each test case, output the sum of the first n prime gaps. Constraints: 1 ≤ t ≤ 10000 1 ≤ n ≤ 10000 SAMPLE INPUT 3 2 3 5 SAMPLE OUTPUT 3 5 9 Explanation Consider the first test case. The first few prime gaps are: 1, 2. The sum of the first 2 prime gaps is 1 + 2 = 3. For the second test case, the first few prime gaps are: 1, 2, 2. The sum of the first 3 prime gaps is 1 + 2 + 2 = 5. For the third test case, the first few prime gaps are: 1, 2, 2, 4, 2. The sum of the first 5 prime gaps is 1 + 2 + 2 + 4 + 2 = 11.","solution":"def is_prime(num): Return True if the number is prime, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_prime_gaps(n): Generate the first n prime gaps. prime_gaps = [] primes = [2] next_prime = 3 while len(prime_gaps) < n: if is_prime(next_prime): prime_gaps.append(next_prime - primes[-1]) primes.append(next_prime) next_prime += 2 # Check only odd numbers return prime_gaps def sum_of_prime_gaps(n): Return the sum of the first n prime gaps. prime_gaps = generate_prime_gaps(n) return sum(prime_gaps) def solve(t, test_cases): results = [] for n in test_cases: results.append(sum_of_prime_gaps(n)) return results # Example usage: if __name__ == \\"__main__\\": t = int(input()) test_cases = [int(input()) for _ in range(t)] results = solve(t, test_cases) for result in results: print(result)"},{"question":"Due to the increasing demand for rides, a ride-sharing company wants to ensure that a dedicated driver is available at any given time to respond to a ride request. To efficiently allocate drivers and minimize the waiting time for users, the company has decided to implement a system to assign drivers to regions based on the number of requests they get. Each region will be assigned to a driver only if it gets more than a certain threshold of requests within a given time frame. Write a program that will determine if a region should have a dedicated driver based on the number of requests it gets. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input containing two integers R and K, where R is the number of ride requests in the region, and K is the threshold number of requests needed to assign a dedicated driver. ------ Output Format ------ For each test case, print \\"ASSIGN\\" if the region should have a dedicated driver, otherwise print \\"NO ASSIGN\\". You may print each character of the string in uppercase or lowercase (for example, the strings \\"assign\\", \\"Assign\\", \\"ASSIGN\\", and \\"assign\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ R ≤ 10000 1 ≤ K ≤ 10000 ----- Sample Input 1 ------ 3 20 15 5 10 0 1 ----- Sample Output 1 ------ ASSIGN NO ASSIGN NO ASSIGN ----- Explanation 1 ------ Test Case 1: The region has 20 ride requests, which is greater than the threshold of 15, so the response is \\"ASSIGN\\". Test Case 2: The region has only 5 ride requests, which is less than the threshold of 10, so the response is \\"NO ASSIGN\\". Test Case 3: The region has no ride requests, so the response is \\"NO ASSIGN\\".","solution":"def determine_assignment(T, test_cases): results = [] for R, K in test_cases: if R > K: results.append(\\"ASSIGN\\") else: results.append(\\"NO ASSIGN\\") return results"},{"question":"Marcus loves playing with arrays and finding interesting patterns. Recently, he came across an interesting challenge involving arrays and prime numbers. The task is to find the smallest prime number that does not appear in the given array. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You need to write a program to help Marcus solve this problem efficiently. # Input: - The first line contains an integer t (number of test cases). - Each test case consists of two lines: - The first line contains an integer n (size of the array). - The second line contains n space-separated integers representing the elements of the array. # Output: For each test case, print the smallest prime number that does not appear in the array. # Constraints: - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 500 - 1 ≤ array elements ≤ 10000 # Sample Input: 2 5 2 3 5 7 11 4 1 4 6 8 # Sample Output: 13 2 # Explanation: In the first test case, the smallest prime numbers sequentially are 2, 3, 5, 7, 11, 13. Since 13 is the smallest one not in the array, the output is 13. In the second test case, the smallest prime numbers sequentially are 2, 3, 5, 7, 11. The number 2 is not in the array, so the output is 2.","solution":"def smallest_missing_prime(arr): def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True known_primes = set() max_val = 10000 sieve = [True] * (max_val + 1) sieve[0] = sieve[1] = False for start in range(2, max_val + 1): if sieve[start]: known_primes.add(start) for multiple in range(start*start, max_val + 1, start): sieve[multiple] = False arr_set = set(arr) for prime in sorted(known_primes): if prime not in arr_set: return prime def solve(test_cases): results = [] for arr in test_cases: results.append(smallest_missing_prime(arr)) return results"},{"question":"A factory has a network of N machines (numbered 1 to N) connected by M conveyor belts. Each conveyor belt connects two machines and transfers items between them in a specified amount of time. The factory produces items on machine 1 and they need to be delivered to machine N. Write a program to determine the minimum amount of time required for an item produced on machine 1 to be transferred to machine N. The input consists of: - An integer N, the number of machines. - An integer M, the number of conveyor belts. - M lines describing the conveyor belts, where each line contains three integers U, V, and T, indicating a conveyor belt from machine U to machine V that takes T units of time to transfer an item. Output the minimum time required to transfer an item from machine 1 to machine N. If it is impossible to transfer the item, output `-1`. -----Constraints----- - 2 leq N leq 10^5 - 1 leq M leq 10^6 - 1 leq T leq 10^9 -----Input----- Input is given from Standard Input in the following format: N M U1 V1 T1 U2 V2 T2 ... UM VM TM -----Output----- Print the minimum time required to transfer an item from machine 1 to machine N, or `-1` if it is impossible. -----Sample Input----- 5 6 1 2 4 2 3 1 3 5 1 1 4 5 4 5 2 3 4 3 -----Sample Output----- 6 Explanation: One possible way to transfer an item is as follows: - From machine 1 to machine 2 (4 units of time) - From machine 2 to machine 3 (1 unit of time) - From machine 3 to machine 5 (1 unit of time) Total time = 4 + 1 + 1 = 6 units. This is the minimum possible time.","solution":"import heapq import sys input = sys.stdin.read def find_min_transfer_time(n, m, edges): adj = [[] for _ in range(n + 1)] for u, v, t in edges: adj[u].append((v, t)) adj[v].append((u, t)) return dijkstra(adj, 1, n, n) def dijkstra(adj, start, end, n): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: curr_time, u = heapq.heappop(pq) if u == end: return curr_time if curr_time > dist[u]: continue for v, time in adj[u]: if curr_time + time < dist[v]: dist[v] = curr_time + time heapq.heappush(pq, (curr_time + time, v)) return -1 def main(): input_data = input().strip().split() N = int(input_data[0]) M = int(input_data[1]) edges = [] index = 2 for _ in range(M): U = int(input_data[index]) V = int(input_data[index + 1]) T = int(input_data[index + 2]) edges.append((U, V, T)) index += 3 result = find_min_transfer_time(N, M, edges) print(result)"},{"question":"At a prestigious event, several dignitaries from various countries are invited. Each dignitary has a predefined schedule indicating the time they arrive and how long they stay at the event. The event organizers want to know the maximum number of dignitaries that are present at the event at the same time. The event takes place over a single day, with arrival and stay times represented in terms of minutes from the beginning of the day (0 minutes represents 12:00 AM). Write a program to determine this maximum number. -----Input----- The first line contains an integer n (1 le n le 1000) representing the number of dignitaries. Each of the next n lines contains two integers a_i and s_i (0 le a_i le 1439; 1 le s_i le 1440 - a_i), where a_i is the arrival time of the i-th dignitary in minutes from the beginning of the day, and s_i is the time the i-th dignitary stays at the event in minutes. -----Output----- Output a single integer, indicating the maximum number of dignitaries present at the event at the same time. -----Examples----- Sample Input 1: 3 0 10 5 10 8 5 Sample Output 1: 3 Sample Input 2: 4 30 15 10 25 20 10 40 5 Sample Output 2: 2 Sample Input 3: 2 100 50 200 50 Sample Output 3: 1","solution":"def max_dignitaries_at_event(n, schedules): events = [] for arrival, stay in schedules: events.append((arrival, 1)) # 1 for arrival event events.append((arrival + stay, -1)) # -1 for departure event # Sort events first by time, then by type (-1 should come before 1 if times are the same) events.sort(key=lambda x: (x[0], x[1])) max_dignitaries = 0 current_dignitaries = 0 for time, event_type in events: current_dignitaries += event_type if current_dignitaries > max_dignitaries: max_dignitaries = current_dignitaries return max_dignitaries"},{"question":"You are tasked with creating a pathfinding algorithm for a robotic vacuum cleaner. The robot operates in a rectangular grid where some cells contain obstacles that the vacuum cannot move through. The robot can move up, down, left, or right, but cannot move diagonally. Write a function `find_path(grid)` that takes in a 2D list `grid` representing the room layout. Each element of the grid is one of the following: - `\'S\'` represents the starting position of the robot (guaranteed to be present). - `\'E\'` represents the end position where the robot needs to go (guaranteed to be present). - `\'.\'` represents an empty cell the robot can move through. - `\'#\'` represents an obstacle the robot cannot pass. The function should return a list of tuples representing the coordinates of the path from start to end, inclusive. If no valid path exists, return an empty list. If there are multiple valid paths, any one is acceptable. Example: ``` grid = [ [\'S\', \'.\', \'.\', \'#\', \'.\'], [\'.\', \'#\', \'.\', \'#\', \'.\'], [\'.\', \'#\', \'E\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\', \'.\', \'.\'] ] find_path(grid) # Possible output: [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (2, 2)] ``` Note: - The input grid will always contain at least one row and one column. - The robot cannot move outside the boundaries of the grid. - The path should be as short as possible. If there are multiple paths of the same length, return any one of them.","solution":"from collections import deque def find_path(grid): rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right # Find the start and end positions for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'E\': end = (r, c) def bfs(start): queue = deque([(start, [start])]) visited = set(start) while queue: (current, path) = queue.popleft() if current == end: return path for direction in directions: nr, nc = current[0] + direction[0], current[1] + direction[1] if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] != \'#\': visited.add((nr, nc)) queue.append(((nr, nc), path + [(nr, nc)])) return [] return bfs(start)"},{"question":"Write a function that takes a string of morse code and converts it into its equivalent English alphabetical representation. The Morse code will consist of dots (.) and dashes (-), separated by spaces for letters and spaces between words. Ensure to consider both uppercase and lowercase letters in the resulting input. The function should be able to handle invalid morse code input gracefully by returning an appropriate error message. Morse code reference: - A: .- - B: -... - C: -.-. - D: -.. - E: . - F: ..-. - G: --. - H: .... - I: .. - J: .--- - K: -.- - L: .-.. - M: -- - N: -. - O: --- - P: .--. - Q: --.- - R: .-. - S: ... - T: - - U: ..- - V: ...- - W: .-- - X: -..- - Y: -.-- - Z: --.. Example Input: .... . .-.. .-.. --- .-- --- .-. .-.. -.. Example Output: HELLO WORLD Example Invalid Input: .... . .-.. .-.. !--- --- .-- --- .-. .-.. -- Example Output for Invalid Input: INVALID MORSE CODE INPUT","solution":"def morse_to_english(morse_code): morse_dict = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'/\': \' \' } words = morse_code.split(\' \') english_text = \'\' for word in words: letters = word.split() for letter in letters: if letter not in morse_dict: return \\"INVALID MORSE CODE INPUT\\" english_text += morse_dict[letter] english_text += \' \' return english_text.strip() # Examples print(morse_to_english(\'.... . .-.. .-.. --- .-- --- .-. .-.. -..\')) # HELLO WORLD print(morse_to_english(\'.... . .-.. .-.. !--- --- .-- --- .-. .-.. --\')) # INVALID MORSE CODE INPUT"},{"question":"You are given two strings S1 and S2. Write a function to check if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Example 1: Input: S1 = \\"listen\\", S2 = \\"silent\\" Output: True Explanation: Both strings contain the same characters with the same frequency. Example 2: Input: S1 = \\"hello\\", S2 = \\"world\\" Output: False Explanation: The strings have different characters and frequencies. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function areAnagrams() that takes two strings (S1 and S2), and returns a boolean indicating whether they are anagrams. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S1|, |S2| <= 10^5","solution":"def areAnagrams(S1, S2): Function to check if two strings S1 and S2 are anagrams of each other. # Early exit if the lengths of the strings are not equal if len(S1) != len(S2): return False # Use a dictionary to count characters char_count = {} # Count each character in S1 for char in S1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Decrease the count based on characters in S2 for char in S2: if char in char_count: char_count[char] -= 1 else: return False # Check if all counts are zero for count in char_count.values(): if count != 0: return False return True"},{"question":"Zigzag arrays are arrays of integers that alternate between peaks and valleys. In other words, the values of the elements increase and decrease alternately. You are given an array of integers a1, a2, ..., an (1 ≤ n ≤ 2 * 10^5), and you need to answer q queries. Each query is described by two integers li and ri (1 ≤ li ≤ ri ≤ n). The answer to the i-th query is the length of the longest zigzag subarray of the subarray ali, ali + 1, ..., ari. Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains a pair of integers li and ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th query. Output For each query, print the length of the longest zigzag subarray of the given subarray on a single line. Examples Input 9 1 7 4 9 2 5 1 3 6 3 1 5 2 7 3 9 Output 5 6 5 Explanation For the first query, the required subarray is [1, 7, 4, 9, 2], and the longest zigzag subarray is [1, 7, 4, 9, 2] with length 5. For the second query, the required subarray is [7, 4, 9, 2, 5, 1], and the longest zigzag subarray is [7, 4, 9, 2, 5, 1] with length 6. For the third query, the required subarray is [4, 9, 2, 5, 1, 3, 6], and the longest zigzag subarray is [4, 9, 2, 5, 1] or [9, 2, 5, 1, 3], both with length 5.","solution":"def longest_zigzag_subarray(arr, n, queries): results = [] for l, r in queries: subarray = arr[l-1:r] length = len(subarray) if length == 1: results.append(1) continue zigzag_len = 1 current_len = 1 for i in range(1, length): if (subarray[i-1] < subarray[i] and (i == length-1 or subarray[i] > subarray[i+1])) or (subarray[i-1] > subarray[i] and (i == length-1 or subarray[i] < subarray[i+1])): current_len += 1 zigzag_len = max(zigzag_len, current_len) else: current_len = 1 results.append(zigzag_len) return results # Example usage: n = 9 arr = [1, 7, 4, 9, 2, 5, 1, 3, 6] q = 3 queries = [(1, 5), (2, 7), (3, 9)] print(longest_zigzag_subarray(arr, n, queries))"},{"question":"Write a function that simulates a simplified library catalog system. The function should take in two parameters: a list of book titles currently available in the library and a list of book titles borrowed by users. It should then return a dictionary where the keys are book titles and the values are \\"Available\\" or \\"Borrowed\\" based on their status. The function should also handle cases where the same book is borrowed multiple times (indicating copies of the book). If a book title appears more times in the borrowed list than it does in the available list, it should still mark the book as \\"Borrowed,\\" indicating all copies are currently out. --- ```python >>> library_catalog([\'Moby Dick\', \'To Kill a Mockingbird\', \'1984\', \'The Great Gatsby\', \'War and Peace\'], [\'1984\', \'War and Peace\', \'1984\']) {\'Moby Dick\': \'Available\', \'To Kill a Mockingbird\': \'Available\', \'1984\': \'Borrowed\', \'The Great Gatsby\': \'Available\', \'War and Peace\': \'Borrowed\'} # If no books are available and none are borrowed, return an empty dictionary >>> library_catalog([], []) {} # If no books are available but there are borrowed books, the borrowed books should still be listed as \\"Borrowed\\" >>> library_catalog([], [\'1984\']) {\'1984\': \'Borrowed\'} ```","solution":"def library_catalog(available_books, borrowed_books): Simulates a simplified library catalog system. Parameters: - available_books: List of book titles currently available. - borrowed_books: List of book titles borrowed by users. Returns: A dictionary where the keys are book titles and the values are \\"Available\\" or \\"Borrowed.\\" book_status = {} # Initialize the status of all books to \\"Available\\" for book in available_books: book_status[book] = \\"Available\\" # Update the status based on borrowed books for book in borrowed_books: if book in book_status: if book_status[book] == \\"Available\\": book_status[book] = \\"Borrowed\\" else: book_status[book] = \\"Borrowed\\" return book_status"},{"question":"Given an integer array nums of size n, implement a function that returns the maximum sum of a contiguous subarray. Constraints * 1 leq n leq 10^5 * -10^4 leq nums[i] leq 10^4 Input An integer n is given in a line. A second line containing n integers separated by spaces. Output Print a single integer representing the maximum sum of a contiguous subarray. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -2 Output -2","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in nums. Uses Kadane\'s algorithm. if not nums: return 0 max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given an integer array `nums` representing a sequence of moves for a knight on a standard 8x8 chessboard, determine if the knight moves form a valid sequence starting from the initial position (1, 1). A valid sequence means that each move follows the L-pattern of a knight in chess (two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular) and stays within the boundaries of the chessboard. Knight\'s moves can be represented as a pair of changes in coordinates: (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2). Write a function to determine whether the sequence of knight moves is valid or not. If valid, return \\"Valid\\", otherwise return \\"Invalid\\". Example 1: Input: nums = [(2, 1), (4, 2), (6, 3)] Output: \\"Valid\\" Explanation: From (1, 1) to (2, 3) is a valid knight move. From (2, 3) to (4, 2) is also valid. From (4, 2) to (6, 3) is valid. All moves are valid, hence the output is \\"Valid\\". Example 2: Input: nums = [(2, 1), (4, 4), (6, 6)] Output: \\"Invalid\\" Explanation: From (1, 1) to (3, 2) is a valid knight move. From (3, 2) to (4, 4) is not valid as it does not follow the knight\'s movement rules. Your Task: You need to complete the function `isValidKnightMoveSequence(nums: List[Tuple[int, int]]) -> str:` that returns \\"Valid\\" if the sequence of moves is valid, otherwise \\"Invalid\\". Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= len(nums) <= 10^3 - The starting position (1, 1) is considered as before the first move in `nums`. - Each move in `nums` is a tuple (x, y) with 1 <= x, y <= 8.","solution":"def isValidKnightMoveSequence(nums): Given a sequence of knight\'s moves, determine if they form a valid sequence starting from the initial position (1, 1). The function returns \\"Valid\\" if all the moves are valid knight moves and stay within the 8x8 chessboard, otherwise \\"Invalid\\". def is_knight_move(x1, y1, x2, y2): dx = abs(x2 - x1) dy = abs(y2 - y1) return (dx == 2 and dy == 1) or (dx == 1 and dy == 2) # Starting position is (1, 1) curr_x, curr_y = 1, 1 for move in nums: next_x, next_y = move if not (1 <= next_x <= 8 and 1 <= next_y <= 8): return \\"Invalid\\" # Move out of bounds if not is_knight_move(curr_x, curr_y, next_x, next_y): return \\"Invalid\\" # Move is not a valid knight move # Update current position curr_x, curr_y = next_x, next_y return \\"Valid\\""},{"question":"______Question______: Alex is fond of sequences. He recently learned about increasing subsequences and needs your help. Given an array of N positive integers, count the number of contiguous increasing subsequences of length exactly K. -----Input----- The first line contains an integer T denoting number of test cases. Each test case has two lines. First line of each test case contains two integers N and K, denoting the size of the array and the required subsequence length, respectively. The second line of each test case contains N space-separated positive integers, representing the array. -----Output----- For each test case, output a single number in a separate line denoting the number of contiguous increasing subsequences of length exactly K. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - 1 ≤ array elements ≤ 10^9 -----Example----- Input: 2 5 3 1 2 3 4 5 5 2 2 2 2 2 2 Output: 3 0 Explanation: - In the first example, there are three increasing subsequences of length 3: [1, 2, 3], [2, 3, 4], and [3, 4, 5]. - In the second example, there are no increasing subsequences of length 2 since all elements are the same.","solution":"def count_increasing_subsequences(T, test_cases): Counts the number of contiguous increasing subsequences of length exactly K for each test case. results = [] for N, K, array in test_cases: count = 0 for i in range(N - K + 1): is_increasing = True for j in range(1, K): if array[i + j] <= array[i + j - 1]: is_increasing = False break if is_increasing: count += 1 results.append(count) return results # Example usage T = 2 test_cases = [ (5, 3, [1, 2, 3, 4, 5]), (5, 2, [2, 2, 2, 2, 2]) ] print(count_increasing_subsequences(T, test_cases)) # Output: [3, 0]"},{"question":"You are given a sequence of integers b = [b_1, b_2, ..., b_n] of length n and an integer q denoting the number of queries. Each query consists of two integers l and r representing a range within the sequence. For each query, you need to find the maximum XOR value of any subarray within the specified range b[l:r]. A subarray is defined as a contiguous segment of the array. The XOR of a subarray is the XOR of all elements within that subarray. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence b. - The second line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^5) — the elements of the sequence. - The third line contains an integer q (1 ≤ q ≤ 100) — the number of queries. - The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — representing the range for each query. Output - For each query, print a single integer: the maximum XOR value of any subarray within the range b[l:r]. Example Input 6 1 2 3 4 5 6 3 1 3 2 5 1 6 Output 3 7 7 Note In the first example: - For the query range [1, 3], the subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. The respective XOR values are 1, 2, 3, 3, 1, and 0. The maximum XOR value is 3. - For the query range [2, 5], the subarrays are [2], [3], [4], [5], [2, 3], [3, 4], [4, 5], [2, 3, 4], [3, 4, 5], and [2, 3, 4, 5]. The maximum XOR value is 7. - For the query range [1, 6], considering all subarrays within this range: the maximum XOR value is 7.","solution":"def maximum_xor_in_range(n, b, q, queries): results = [] for l, r in queries: max_xor = 0 for i in range(l-1, r): current_xor = 0 for j in range(i, r): current_xor ^= b[j] max_xor = max(max_xor, current_xor) results.append(max_xor) return results"},{"question":"Given an array of integers, you are to apply an operation to make all elements of the array equal. In one operation, you can increment or decrement an element of the array by 1. Reset all elements initially to the smallest element in the array. Determine the minimum number of operations required. Function Description Complete the `minimumOperations` function below. `minimumOperations` has the following parameter(s): - `int arr[n]`: an array of integers Returns - `int`: an integer representing the minimum number of operations required Input Format The first line contains a single integer `n`, the length of `arr`. The second line contains `n` space-separated integers, `arr[i]`. Constraints - `2 <= n <= 10^5` - `-10^9 <= arr[i] <= 10^9` Output Format Return a single integer representing the minimum number of operations required. Sample Input 0 6 1 2 3 4 5 6 Sample Output 0 15 Explanation 0 The smallest element is 1. To make all elements equal to 1, we perform the following operations: (2 - 1) + (3 - 1) + (4 - 1) + (5 - 1) + (6 - 1) = 1 + 2 + 3 + 4 + 5 = 15 Sample Input 1 4 10 20 30 40 Sample Output 1 60 Explanation 1 The smallest element is 10. To make all elements equal to 10, we perform the following operations: (20 - 10) + (30 - 10) + (40 - 10) = 10 + 20 + 30 = 60 Sample Input 2 5 -1 -2 -3 -4 -5 Sample Output 2 10 Explanation 2 The smallest element is -5. To make all elements equal to -5, we perform the following operations: (-1 - (-5)) + (-2 - (-5)) + (-3 - (-5)) + (-4 - (-5)) = 4 + 3 + 2 + 1 = 10","solution":"def minimumOperations(arr): Given an array of integers, determine the minimum number of operations required to make all elements equal to the smallest element in the array. In one operation, you can increment or decrement an element of the array by 1. :param arr: List[int] - an array of integers. :return: int - the minimum number of operations required. min_value = min(arr) operations = 0 for num in arr: operations += abs(num - min_value) return operations"},{"question":"Consider a simplified version of the board game Risk. In this game, there is a map consisting of several countries connected by borders. Each country can only attack another country if they share a border. If a player wants to conquer a new country, the player must determine if there is a viable attack path from one of their already controlled countries to the target country by leveraging the borders of intermediate countries they control. You are given a map of countries and their borders, as well as information about which countries a player currently controls and which country they are attempting to conquer. Your task is to determine whether the player can conquer the target country by moving troops through a series of controlled and bordered countries starting from one of their controlled countries. ----- Input ----- The input starts with two integers, `n` and `m`, where `n` (2 ≤ n ≤ 100) is the number of countries and `m` (1 ≤ m ≤ 500) is the number of borders. The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n) representing a direct border between country `a` and country `b`. The next line contains an integer `c` (1 ≤ c < n) which is the number of countries currently controlled by the player. The following line contains `c` integers representing the countries controlled by the player. The last line contains a single integer `t` (1 ≤ t ≤ n) representing the target country the player wants to conquer. ----- Output ----- Display \\"YES\\" if the player can conquer the target country by moving through a series of controlled and bordered countries starting from one of their controlled countries. Display \\"NO\\" otherwise. ----- Example ----- Sample Input: 5 6 1 2 1 3 2 4 3 4 4 5 4 1 3 1 4 5 2 Sample Output: YES Explanation: The player can move from country 1 to 4, and from 4 to 2. Another Example: Sample Input: 3 2 1 2 2 3 1 1 3 Sample Output: NO Explanation: The player can only move from 1 to 2, but can\'t reach 3 directly or indirectly through controlled countries.","solution":"def can_conquer(n, m, borders, controlled_countries, target): from collections import deque # Create adjacency list for borders adj_list = {i: [] for i in range(1, n+1)} for a, b in borders: adj_list[a].append(b) adj_list[b].append(a) # Create a set to keep track of visited countries visited = set() # Use BFS to find the path from any controlled country to the target queue = deque(controlled_countries) while queue: country = queue.popleft() if country == target: return \\"YES\\" if country not in visited: visited.add(country) for neighbor in adj_list[country]: if neighbor not in visited and neighbor in controlled_countries or neighbor == target: queue.append(neighbor) return \\"NO\\""},{"question":"Write a function that finds the smallest subarray within a given array `arr` of length `n` such that the sum of its elements is greater than or equal to a given number `x`. The function should return the minimum length of such a subarray. If there isn\'t a subarray that meets this condition, return 0. Input The first line contains two integers `n` and `x` (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the length of the array and the required sum. The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. Output Print a single integer — the minimum length of a subarray with sum greater than or equal to `x`. If no such subarray exists, print 0. Example Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Explanation The subarray [8, 9] has a sum of 17, which is greater than or equal to 15, and it is the smallest such subarray.","solution":"def min_length_subarray(n, x, arr): start = 0 current_sum = 0 min_length = float(\'inf\') for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0 # Example input print(min_length_subarray(10, 15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 2"},{"question":"You are given a class representing a bounded blocking queue in a concurrent environment. Implement the BoundedBlockingQueue class: BoundedBlockingQueue(int capacity) Initializes the object with a maximum capacity of capacity. void enqueue(int element) Adds an element to the queue. If the queue is full, the caller is blocked until space is available. int dequeue() Removes and returns the oldest element in the queue. If the queue is empty, the caller is blocked until an element is available. int size() Returns the number of elements currently in the queue. Example: Input: [\\"BoundedBlockingQueue\\", \\"enqueue\\", \\"enqueue\\", \\"dequeue\\", \\"dequeue\\", \\"dequeue\\", \\"enqueue\\", \\"size\\"] [[2], [1], [2], [], [], [], [3], []] Output: [null, null, null, 1, 2, -1, null, 1] Explanation: BoundedBlockingQueue b = BoundedBlockingQueue(2); // Initialize with capacity = 2 b.enqueue(1); // Enqueue 1 b.enqueue(2); // Enqueue 2 b.dequeue(); // Dequeues and returns 1 b.dequeue(); // Dequeues and returns 2 b.dequeue(); // Queue is empty, returns -1 b.enqueue(3); // Enqueue 3 b.size(); // Returns size, which is 1 Constraints: 1 <= capacity <= 1000 1 <= element <= 1000 At most 10000 calls will be made to enqueue, dequeue, and size.","solution":"import threading import collections class BoundedBlockingQueue: def __init__(self, capacity: int): self.capacity = capacity self.queue = collections.deque() self.lock = threading.Lock() self.not_full = threading.Condition(self.lock) self.not_empty = threading.Condition(self.lock) def enqueue(self, element: int): with self.not_full: while len(self.queue) >= self.capacity: self.not_full.wait() self.queue.append(element) self.not_empty.notify() def dequeue(self) -> int: with self.not_empty: while not self.queue: self.not_empty.wait() element = self.queue.popleft() self.not_full.notify() return element def size(self) -> int: with self.lock: return len(self.queue)"},{"question":"You are given an array of integers and a number k. You are to determine the maximum sum of k consecutive elements in the array. For example, with the array [1, 2, 3, 4, 5] and k=2, the maximum sum of 2 consecutive elements is 4 + 5 = 9. -----Input----- The first line of input contains an integer n (1 le n le 10^5) — the length of the array. The second line of input contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4) — the elements of the array. The third line of input contains an integer k (1 le k le n) — the number of consecutive elements. -----Output----- Output one number — the maximum sum of k consecutive elements. -----Examples----- Input 5 1 2 3 4 5 2 Output 9 Input 10 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 3 Output -6 -----Note----- In the first sample: The sum of the first two elements is 1 + 2 = 3, The sum of the second two elements is 2 + 3 = 5, The sum of the third two elements is 3 + 4 = 7, The sum of the fourth two elements is 4 + 5 = 9, So the answer is 9. In the second sample: The sum of the first three elements is -1 - 2 - 3 = -6, Since all elements are negative and the sum of elements farther in the list becomes smaller, the answer remains -6.","solution":"def max_sum_of_k_consecutive_elements(arr, k): Returns the maximum sum of k consecutive elements in an array. Parameters: arr (list of int): The input array of integers. k (int): The number of consecutive elements. Returns: int: The maximum sum of k consecutive elements. n = len(arr) # Edge case: if k is equal to the length of the array, # there\'s only one possible sum which is the sum of the entire array. if n == k: return sum(arr) # Compute the initial window sum of the first k elements. current_sum = sum(arr[:k]) max_sum = current_sum # Use a sliding window to compute the sum of every k consecutive elements. for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A student is moving to a new apartment and needs to organize their bookshelf. They have `N` books, each with a unique ID number from 1 to `N`, but initially placed in a random order. The student wants to organize the books in ascending order on the shelf to make it easier to find any book. They can perform the following operation as many times as needed: - Choose two distinct positions on the bookshelf and swap the books at these positions. Write a function that returns the minimum number of swaps needed to arrange the books in ascending order. -----Constraints----- - 1 leq N leq 50 - The initial arrangement of books is given as a permutation of the numbers from 1 to N. -----Input----- Input is given from Standard Input in the following format: N A1 A2 A3 ... AN -----Output----- Print the minimum number of swaps needed to arrange the books in ascending order. -----Sample Input----- 5 4 3 1 2 5 -----Sample Output----- 3 - To sort the array [4, 3, 1, 2, 5]: 1. Swap 4 and 1 -> [1, 3, 4, 2, 5] 2. Swap 3 and 2 -> [1, 2, 4, 3, 5] 3. Swap 4 and 3 -> [1, 2, 3, 4, 5] Thus, a minimum of 3 swaps is needed to sort the array.","solution":"def minimum_swaps(N, books): books_positions = {value: idx for idx, value in enumerate(books)} target_books = sorted(books) target_positions = {value: idx for idx, value in enumerate(target_books)} visited = [False] * N swap_count = 0 for i in range(N): if visited[i] or books_positions[books[i]] == target_positions[books[i]]: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = target_positions[books[x]] cycle_size += 1 if cycle_size > 0: swap_count += (cycle_size - 1) return swap_count"},{"question":"Alex is working on a project that involves generating unique identification numbers for a set of clients. Each client\'s ID is a combination of their name and a descending numerical value based on the order they were processed. The algorithm for generating the IDs must ensure that no two clients processed in the same batch can have the same numerical value in their ID. Here is how Alex plans to create the IDs: 1. For each batch of clients, assign a unique starting number `S`. 2. Generate a unique descending numerical value for each new client by decrementing the previous number. 3. Combine the client\'s name with their unique numerical value to form their ID in the format: \\"name<number>\\". Your task is to help Alex write a function to generate a list of IDs for each batch of clients. -----Input----- The first line contains a single integer `B` representing the number of batches of clients. Each batch starts with a line containing an integer `K` (1 ≤ K ≤ 1000) which is the number of clients in the batch. The next line contains the single integer `S`, the starting number for ID generation in this batch. The following `K` lines each contain a string representing a client\'s name (1 ≤ length of name ≤ 100). -----Output----- For each batch, output `K` lines containing the unique IDs for each client in the format described above. -----Constraints----- - 1 ≤ B ≤ 100 - 1 ≤ K ≤ 1000 - 1 ≤ S ≤ 1,000,000 - Each name string will only contain lowercase English letters. -----Example----- Input: 2 3 100 alice bob charlie 2 50 david eve Output: alice100 bob99 charlie98 david50 eve49 -----Explanation----- In the first batch, the starting number for IDs is 100: - \\"alice100\\" - \\"bob99\\" - \\"charlie98\\" In the second batch, the starting number for IDs is 50: - \\"david50\\" - \\"eve49\\" Each client receives a unique combination of their name and a numerical value that is decrementing from the starting number in descending order.","solution":"def generate_client_ids(batches): Generate unique IDs for each client based on their name and a starting number that decrements for each batch of clients. results = [] for batch in batches: K, S, names = batch ids = [] for i in range(K): name = names[i] unique_id = f\\"{name}{S - i}\\" ids.append(unique_id) results.append(ids) return results"},{"question":"John has a 2D grid with `M` rows and `N` columns where each cell initially contains a non-negative integer. He wants to traverse from the top-left cell (0,0) to the bottom-right cell (M-1,N-1), and collect gold coins along the way. John can only move either right or down in each step. Given the grid, determine the maximum number of gold coins John can collect on his way to the bottom-right cell. Input Format: The first line contains an integer `T`, the number of test cases. Each test case starts with two integers, `M` and `N`, which denote the number of rows and columns in the grid respectively. This is followed by `M` lines, each containing `N` integers representing the number of gold coins in each cell. Output Format: For each test case, output the maximum number of gold coins John can collect for that grid. Example Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Example Output: 12 8 Explanation: For the first case, the optimal path to collect maximum coins is (0,0) → (0,1) → (1,1) → (2,1) → (2,2), collecting 1 + 3 + 5 + 2 + 1 = 12 coins. For the second case, the optimal path is (0,0) → (0,1) → (1,1), collecting 1 + 2 + 4 = 7 coins.","solution":"def max_gold_coins(grid): M = len(grid) N = len(grid[0]) # Create a dp array to store the maximum coins collected to reach each cell dp = [[0] * N for _ in range(M)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[M - 1][N - 1] def solve(test_cases): results = [] for test in test_cases: M, N, grid = test results.append(max_gold_coins(grid)) return results"},{"question":"Given a string, s, and a list of strings, words, where each word is of the same length. Find all starting indices of substring(s) in s that are concatenations of each word in words exactly once and without any intervening characters. Example: Input: s = \\"barfoothefoobarman\\" words = [\\"foo\\",\\"bar\\"] Output: [0,9] Explanation: Substrings starting at index 0 and 9 are \\"barfoo\\" and \\"foobar\\" respectively. The output order does not matter. Input: s = \\"wordgoodgoodgoodbestword\\" words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: []","solution":"def find_substring_indices(s, words): from collections import Counter if not s or not words: return [] word_len = len(words[0]) total_words_len = word_len * len(words) words_count = Counter(words) result = [] for i in range(len(s) - total_words_len + 1): seen = {} for j in range(len(words)): word_index = i + j * word_len word = s[word_index:word_index + word_len] if word not in words_count: break if word in seen: seen[word] += 1 else: seen[word] = 1 if seen[word] > words_count[word]: break if seen == words_count: result.append(i) return result"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Ensure that the solution handles edge cases such as empty lists or lists with no prime numbers. The function should be able to efficiently determine whether each number is prime and should perform well with lists of varying lengths. Include appropriate comments within the code to explain your logic. Example: ```python def extract_primes(numbers): This function takes a list of integers and returns a list of prime numbers. Args: - numbers: list of integers Returns: - list of prime integers def is_prime(n): Helper function to determine if a number is prime. Args: - n: integer Returns: - Boolean: True if n is prime, else False if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True primes = [num for num in numbers if is_prime(num)] return primes # Example usage: print(extract_primes([2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # Output: [2, 3, 5, 7, 11] print(extract_primes([])) # Output: [] print(extract_primes([4, 6, 8, 10])) # Output: [] ```","solution":"def extract_primes(numbers): This function takes a list of integers and returns a list of prime numbers. Args: - numbers: list of integers Returns: - list of prime integers def is_prime(n): Helper function to determine if a number is prime. Args: - n: integer Returns: - Boolean: True if n is prime, else False # Any number less than 2 is not prime if n <= 1: return False # 2 is the only even prime number if n == 2: return True # All other even numbers are not prime if n % 2 == 0: return False # Check divisibility from 3 up to the square root of n for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True # List comprehension that filters the list to prime numbers primes = [num for num in numbers if is_prime(num)] return primes"},{"question":"In a networking system, computers are interconnected such that messages can be sent from one computer to another through various paths. Each computer has a unique identifier, and communication paths have different latencies associated with them. In this system, a message can be sent from one computer to another either directly or indirectly through intermediate computers. The goal is to find the minimum latency required to send a message from a source computer to a destination computer. To achieve this, you are required to implement an algorithm that determines the shortest path in terms of latency from the source computer to the destination computer. -----Input----- The first line of the input contains two integers n (1 leq n leq 1000), the number of computers in the network, and m (1 leq m leq 5000), the number of communication paths between computers. The next m lines each contain three integers u, v, and w (0 leq u, v < n, 1 leq w leq 100), representing a communication path from computer u to computer v with a latency of w milliseconds. The last line contains two integers s and d (0 leq s, d < n), the identifiers of the source computer s and the destination computer d, respectively. Assume that the given network will always have at least one path from the source computer to the destination computer. -----Output----- Output a single integer representing the minimum latency required to send a message from the source computer s to the destination computer d. -----Examples----- Sample Input: 5 5 0 1 10 0 2 5 1 3 1 2 1 3 3 4 4 0 4 Sample Output: 14 Explanation: The shortest path from computer 0 to computer 4 is through the path 0 -> 2 -> 1 -> 3 -> 4, with latencies 5 + 3 + 1 + 4 = 13 milliseconds.","solution":"import heapq def dijkstra(n, edges, source, destination): Function to calculate the minimum latency to send a message from the source to the destination computer. Parameters: n (int): Number of computers edges (list of tuples): List of edges where each edge is represented as (u, v, w) source (int): Source computer destination (int): Destination computer Returns: int: Minimum latency to send the message from source to destination # Create an adjacency list from the edges graph = {i: [] for i in range(n)} for u, v, w in edges: graph[u].append((w, v)) # Priority queue to store the nodes and their current shortest distance pq = [(0, source)] # Distance table to store the shortest distance to each node dist = {i: float(\'inf\') for i in range(n)} dist[source] = 0 while pq: current_distance, current_node = heapq.heappop(pq) # If we reached the destination, return the distance if current_node == destination: return current_distance # Skip if we found a better distance before if current_distance > dist[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[destination] # Reading input def minimum_latency(n, m, edges, source, destination): return dijkstra(n, edges, source, destination)"},{"question":"# Background A company uses a special encoding strategy to encode and decode messages. Each message is encoded by replacing each character in the message with its corresponding ASCII value wrapped in square brackets (e.g. \'A\' is encoded as `[65]`). The encoded string doesn\'t contain any spaces or additional characters, apart from the encoded characters. # Task We need to develop a function that decodes these encoded messages back to their original form. # Specifications - The function `decode_message(encoded_str)` should take a string `encoded_str` as input. - The input string `encoded_str` consists of multiple patterns of the form `[number]`, where the `number` is the ASCII value of the character. - The function should return the original message as a string. # Input Format - A single line string `encoded_str`, which represents the encoded message. The length of `encoded_str` will not exceed 200 characters. # Output Format - A single line string, which is the decoded message. # Constraints - The `encoded_str` is guaranteed to be a valid encoded string format, obeying the mentioned pattern. - ASCII values within the `encoded_str` will be valid (i.e., 32 ≤ ASCII value ≤ 126). # Example Input ``` [72][101][108][108][111][32][87][111][114][108][100][33] ``` Output ``` Hello World! ``` Input ``` [65][66][67][68][69][70] ``` Output ``` ABCDEF ``` # Note - The solution should parse through the input string, extract each ASCII value, convert it to the corresponding character, and concatenate these characters to form the original message.","solution":"def decode_message(encoded_str): Decodes a string encoded in the form of [ASCII]... patterns to its original message. import re return \'\'.join(chr(int(num)) for num in re.findall(r\'[(d+)]\', encoded_str))"},{"question":"Arthur is learning about graph theory and stumbled upon the concept of strongly connected components (SCCs). A directed graph is described as strongly connected if for every pair of vertices u and v, there is a path from u to v and a path from v to u. He wants to know if he can break a directed graph into several SCCs and find the size of each SCC. Help Arthur by writing a program that takes a directed graph and outputs the sizes of all its SCCs. -----Input----- The first line contains two integers n (1 ≤ n ≤ 200) and m (0 ≤ m ≤ 1000) — the number of vertices and the number of directed edges. Then m lines follow, each containing two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a directed edge from vertex u to vertex v. -----Output----- Output the sizes of all SCCs in non-decreasing order. -----Examples----- Input: 5 5 1 2 2 3 3 1 4 5 5 4 Output: 2 3 Input: 4 4 1 2 2 3 3 4 4 1 Output: 4 Input: 4 3 1 2 2 3 3 4 Output: 1 1 1 1 -----Note----- In the first example, there are two SCCs: {1, 2, 3} with size 3 and {4, 5} with size 2. In the second example, the entire graph is a single SCC of size 4. In the third example, each vertex forms its own SCC, hence there are four SCCs each with size 1.","solution":"from collections import defaultdict, deque def kosaraju(n, m, edges): This function utilizes Kosaraju\'s algorithm to find all Strongly Connected Components (SCCs) in a given directed graph and returns the sizes of these SCCs in non-decreasing order. n: Number of vertices m: Number of edges edges: List of pairs representing directed edges def dfs1(node, visited, stack): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs1(neighbor, visited, stack) stack.append(node) def dfs2(node, visited, component): visited[node] = True component.append(node) for neighbor in reversed_graph[node]: if not visited[neighbor]: dfs2(neighbor, visited, component) # Step 1: Create the graph and reversed graph graph = defaultdict(list) reversed_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reversed_graph[v].append(u) # Step 2: Perform the first DFS to get the finishing times stack = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: dfs1(i, visited, stack) # Step 3: Perform the second DFS based on finishing times visited = [False] * (n + 1) scc_sizes = [] while stack: node = stack.pop() if not visited[node]: component = [] dfs2(node, visited, component) scc_sizes.append(len(component)) # Step 4: Sort sizes of SCCs in non-decreasing order scc_sizes.sort() return scc_sizes"},{"question":"Given a list of N natural numbers where each number appears exactly twice except for one unique number, write a program to find the unique number. Input The input consists of one dataset in the following format: ``` N a1 a2 a3 ... aN ``` The number of elements N (3 ≤ N ≤ 1000000) is given in the first line. The second line contains N integers (1 ≤ ai ≤ 1000000), where each integer appears exactly twice except for one unique integer. Output Output the unique number. Example Input ``` 7 1 2 3 2 1 4 3 ``` Output ``` 4 ```","solution":"def find_unique_number(N, numbers): Finds the unique number in a list where each number appears exactly twice except one unique number. Parameters: N (int): The number of elements in the list. numbers (list of int): The list of natural numbers. Returns: int: The unique number that appears only once. unique_number = 0 for number in numbers: unique_number ^= number return unique_number"},{"question":"Given an integer array nums, return true if there exists a duplicate element within the array such that its index difference is at most k, otherwise return false. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: true Explanation: There is a duplicate element 1 with index difference 3, which is less than or equal to k. Example 2: Input: nums = [1, 0, 1, 1], k = 1 Output: true Explanation: The duplicate element 1 has index difference 1, which is equal to k. Example 3: Input: nums = [1, 2, 3, 1, 2, 3], k = 2 Output: false Explanation: The closest duplicate elements 1 and 1 have index difference 3, which is greater than k. Your Task: You don\'t need to read input or print anything. Your task is to complete the function containsNearbyDuplicate() which takes the array nums and an integer k as input and returns a boolean value indicating if there exist two duplicate elements within the given index difference. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 0 ≤ k ≤ 10^5","solution":"def containsNearbyDuplicate(nums, k): Returns true if there exists a duplicate element within the array such that its index difference is at most k, otherwise returns false. num_indices = {} for i, num in enumerate(nums): if num in num_indices and i - num_indices[num] <= k: return True num_indices[num] = i return False"},{"question":"# Task You are given a `rows x cols` grid (1 <= rows, cols <= 100) of positive integers. Each number represents the amount of gold in that cell. You can start from any cell in the first row and move down one row at a time, but you can only move to the cell directly below it or to any of the adjacent cells (diagonally left and diagonally right) in the next row. Find the maximum amount of gold you can collect if you start from any cell in the first row and move to any cell in the last row following the above movement rules. Return the maximum amount of gold collected. # Example For: ``` grid = [ [1, 3, 1], [2, 3, 4], [5, 6, 1] ] ``` The result should be `13` Explanation: - Start at (0, 1) with 3 gold, move to (1, 2) with 4 gold, finally move to (2, 1) with 6 gold, total: 3 + 4 + 6 = 13. # Input/Output - `[input]` 2D integer array `grid` `1 <= rows, cols <= 100` - `[output]` an integer which is the maximum amount of gold collected","solution":"def max_gold(grid): rows = len(grid) cols = len(grid[0]) # Initialize a DP table with dimensions rows x cols dp = [[0] * cols for _ in range(rows)] # Fill the DP table for the first row (base cases) for col in range(cols): dp[0][col] = grid[0][col] # Fill the DP table for the remaining rows for row in range(1, rows): for col in range(cols): max_gold_from_above = dp[row-1][col] if col > 0: max_gold_from_above = max(max_gold_from_above, dp[row-1][col-1]) if col < cols - 1: max_gold_from_above = max(max_gold_from_above, dp[row-1][col+1]) dp[row][col] = grid[row][col] + max_gold_from_above # Find the maximum gold collected in the last row max_gold_collected = max(dp[-1]) return max_gold_collected"},{"question":"You are given an array of integers. In one operation, you can pick any two distinct elements from the array and replace one of them with their sum. Determine the minimum number of operations needed to make all elements of the array equal. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the values of the elements in the array. Output: Print a single integer — the minimum number of operations needed to make all elements in the array equal. Examples: Input: 4 1 2 3 4 Output: 3 Input: 3 5 5 5 Output: 0 Input: 5 1 1 2 2 3 Output: 4 Note: In the first sample, we can perform the operations as follows: 1. Replace 1 and 2 with their sum, resulting in [3, 3, 3, 4]. 2. Replace 3 and 4 with their sum, resulting in [3, 3, 7]. 3. Replace 3 and 7 with their sum, resulting in [10, 3], and finally replace 3 and 10 to get [13]. In the second sample, all elements are already equal, so no operations are needed. In the third sample, we can perform the operations as follows: 1. Replace 1 and 1 with their sum, resulting in [2, 2, 2, 3]. 2. Replace 2 and 2 with their sum, resulting in [4, 2, 3]. 3. Replace 2 and 3 with their sum, resulting in [4, 5]. 4. Replace 4 and 5 with their sum, resulting in [9].","solution":"def min_operations_to_make_equal(n, arr): from collections import Counter # Count the frequency of each element in the array counter = Counter(arr) # Find the element which appears most frequently most_common = max(counter.values()) # The minimum number of operations required return n - most_common"},{"question":"You are given a list of integers. Write a function that takes in the list and returns a new list where each element is the sum of itself and the next element in the original list. For the last element in the list, since there is no next element, just include the element itself. Examples: ```python sum_next([1, 2, 3, 4]) ``` returns the list ``` [3, 5, 7, 4] ``` Explanation: - 1+2 = 3 - 2+3 = 5 - 3+4 = 7 - 4 (as there is no next element) Another example: ```python sum_next([5, 10, 15]) ``` returns the list ``` [15, 25, 15] ``` Explanation: - 5+10 = 15 - 10+15 = 25 - 15 (as there is no next element) **Note**: Your solution should work for a list of any length, return an empty list if given an empty list, and handle a list with just one element by returning the list itself.","solution":"def sum_next(lst): Takes a list of integers and returns a new list where each element is the sum of itself and the next element in the original list. For the last element, include the element itself as there is no next element. if not lst: return [] result = [] for i in range(len(lst) - 1): result.append(lst[i] + lst[i + 1]) result.append(lst[-1]) return result"},{"question":"In a given text, you need to implement a function that counts the frequency of each word. The function should ignore case sensitivity and punctuation. Input --- A string of arbitrary length, consisting of words separated by spaces and punctuation marks (\\".\\", \\",\\", \\";\\", \\":\\", \\"-\\", \\"!\\", \\"?\\"). Output --- An object (or dictionary, depending on the programming language) where keys are the words and values are the number of times each word appeared in the input string. Example --- ```python input_string = \\"Hello world! Hello, how are you? I hope you are doing well. Hello!\\" # Expected output { \\"hello\\": 3, \\"world\\": 1, \\"how\\": 1, \\"are\\": 2, \\"you\\": 2, \\"i\\": 1, \\"hope\\": 1, \\"doing\\": 1, \\"well\\": 1 } ``` Guidelines: - The function should be case-insensitive: \\"Hello\\", \\"HELLO\\", and \\"hello\\" should be counted as the same word. - Punctuation marks should be ignored. - Assume that the input will always be a non-empty string.","solution":"import re from collections import Counter def count_word_frequencies(input_string): Returns a dictionary with the frequency of each word in the input string. The function is case-insensitive and ignores punctuation. # Convert to lower case input_string = input_string.lower() # Remove punctuation using regular expression input_string = re.sub(r\'[^ws]\', \'\', input_string) # Split into words words = input_string.split() # Count the frequency of each word word_counter = Counter(words) return dict(word_counter)"},{"question":"You are working on a project where you need to analyze logs of user actions. Each log entry consists of the username, the action performed, and the timestamp of the action. Your goal is to find out the user that performed the most actions in a given time range. You are given a list of log entries and a time range in the form of start and end timestamps. Your task is to write a program that finds the user who performed the most actions within the given time range. If there is a tie, return the lexicographically smallest username among the users with the most actions. Each log entry is represented as a string in the format `<username> <action> <timestamp>`, where `<username>` is a string of lowercase letters, `<action>` is a string of lowercase letters, and `<timestamp>` is a string in the format `YYYY-MM-DDTHH:MM:SS` (e.g., `2023-07-21T14:30:00`). The start and end timestamps are also given in the same format. INPUT FORMAT: Line 1: An integer N (the number of log entries) Next N lines: Each line contains a log entry in the format `<username> <action> <timestamp>` Next 2 lines: The start timestamp and end timestamp in the format `YYYY-MM-DDTHH:MM:SS` CONSTRAINTS: 1 <= N <= 10^5 All usernames and actions are lowercase strings with length <= 10 Start and end timestamps are valid and in correct format, and the end timestamp is always later than the start timestamp. OUTPUT FORMAT: Line 1: The username of the user who performed the most actions within the given time range. SAMPLE INPUT 5 alice login 2023-07-21T13:02:04 bob upload_file 2023-07-21T13:15:20 alice logout 2023-07-21T13:35:10 bob download_file 2023-07-21T13:45:00 alice login 2023-07-21T14:00:00 2023-07-21T13:00:00 2023-07-21T14:00:00 SAMPLE OUTPUT alice","solution":"from collections import defaultdict from datetime import datetime def most_actions(log, start_timestamp, end_timestamp): Returns the username who performed the most actions within a given time range. If there is a tie, the lexicographically smallest username is returned. user_actions = defaultdict(int) start_time = datetime.fromisoformat(start_timestamp) end_time = datetime.fromisoformat(end_timestamp) for entry in log: username, action, timestamp = entry.split() time = datetime.fromisoformat(timestamp) if start_time <= time <= end_time: user_actions[username] += 1 max_actions = max(user_actions.values(), default=0) most_active_users = [user for user, actions in user_actions.items() if actions == max_actions] return min(most_active_users) if most_active_users else None"},{"question":"In the city of Algoland, there is a game where players write down the steps necessary to align two strings `x` and `y` using a sequence of operations. The allowed operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character with another one. Two players, Alice and Bob, play this game. Alice chooses a string `x` and Bob chooses a string `y`. Your task is to determine the minimum number of operations required to convert string `x` into string `y`. Input The first line contains the string `x`, and the second line contains the string `y`. Both `x` and `y` are non-empty strings composed of lowercase Latin letters, having a maximum length of 100 characters each. Output Output a single integer, the minimum number of operations needed to convert string `x` into string `y`. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Input intention execution Output 5","solution":"def min_operations(x, y): Returns the minimum number of operations required to convert string x to string y. m, n = len(x), len(y) # Initialize a (m+1) x (n+1) matrix to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore last char and recur for remaining string elif x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Monocarp is participating in another game called \\"Treasure Hunt\\". The game takes place in a series of connected rooms, where each room contains a certain amount of treasure that Monocarp can collect. The rooms are connected by one-directional passages, and Monocarp can only travel in the direction specified by each passage. The layout of the rooms and passages has the following properties: once Monocarp enters a room, he can visit every subsequent room connected by passages to that room, but he cannot revisit any room. Monocarp\'s goal is to collect the maximum amount of treasure by following the most optimal path from a chosen starting room to any room that he can reach. Each room i contains t_i treasures (0 ≤ t_i ≤ 1000). Monocarp can start his treasure hunt from any room and must decide the most optimal path to collect the maximum amount of treasure. Input The first line contains two integers n and m (2 ≤ n ≤ 50, 0 ≤ m ≤ (n(n - 1))/2) — the number of rooms and the number of passages, respectively. The second line contains n integers t_1, t_2, ..., t_n — the amount of treasure in each room. Next m lines describe passages. The i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i). It means there is a one-directional passage from room u_i to room v_i. Output Print a single integer — the maximum amount of treasure Monocarp can collect. Examples Input 5 6 5 10 20 30 25 1 2 2 3 3 4 4 5 1 3 2 5 Output 90 Input 4 4 3 2 8 5 1 2 1 3 2 4 3 4 Output 16 Explanation In the first example, to maximize the treasure, Monocarp can start from room 1 and visit rooms 2, 3, 4 and 5 in sequence, collecting a total of 5 + 10 + 20 + 30 + 25 = 90 treasures. In the second example, the maximum amount of treasure Monocarp can collect is by starting at room 1, moving to room 3, and then moving to room 4, collecting a total of 3 + 8 + 5 = 16 treasures.","solution":"def max_treasure(n, m, treasures, passages): from collections import defaultdict, deque graph = defaultdict(list) for u, v in passages: graph[u].append(v) def bfs(start): max_treasures = [0] * (n + 1) max_treasures[start] = treasures[start - 1] q = deque([start]) while q: node = q.popleft() for neighbor in graph[node]: if max_treasures[neighbor] < max_treasures[node] + treasures[neighbor - 1]: max_treasures[neighbor] = max_treasures[node] + treasures[neighbor - 1] q.append(neighbor) return max(max_treasures) max_treasure_collected = 0 for i in range(1, n + 1): max_treasure_collected = max(max_treasure_collected, bfs(i)) return max_treasure_collected"},{"question":"In the land of Algoria, there is a famous race track where n race cars compete. Each car completes a lap in a certain amount of time. You are given an array times where times[i] represents the time taken by the i-th car to complete one lap. The race lasts for T minutes and you want to find out how many full laps each car can complete within this time. Write a function to help determine the number of full laps each car can complete. Example 1: Input: times = [5, 10, 3], T = 30 Output: [6, 3, 10] Explanation: The first car completes a lap in 5 minutes, so it can complete 30/5 = 6 laps. The second car completes a lap in 10 minutes, so it can complete 30/10 = 3 laps. The third car completes a lap in 3 minutes, so it can complete 30/3 = 10 laps. Example 2: Input: times = [2, 4, 8], T = 16 Output: [8, 4, 2] Explanation: The first car completes a lap in 2 minutes, so it can complete 16/2 = 8 laps. The second car completes a lap in 4 minutes, so it can complete 16/4 = 4 laps. The third car completes a lap in 8 minutes, so it can complete 16/8 = 2 laps. Your Task: You don\'t need to read input or print anything. Complete the function fullLaps() which takes an integer array times and an integer T as input parameters and returns a list of integers representing the number of full laps each car can complete. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 1000 1 ≤ times[i], T ≤ 1000","solution":"def fullLaps(times, T): Returns the number of full laps each car can complete within T minutes. return [T // time for time in times]"},{"question":"A top employee in a company wants to organize the recycling schedules for different departments. The company has n departments, and each department needs to recycle on a specific day of the week — either Monday, Tuesday, Wednesday, Thursday, or Friday. Each department can only recycle on one of these days. Each department consists of employees who work together, and each set of employees has certain constraints regarding the recycling day. Each constraint specifies that a certain department must recycle before another department. Your task is to determine if it is possible to organize the recycling schedules so that all the constraints are satisfied. Input - The first line of the input contains two integers n and m — the number of departments and the number of constraints, respectively (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^4). - Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n), indicating that department a must recycle before department b. Output - Print \\"YES\\" if it is possible to organize the recycling schedules to satisfy all constraints. - Otherwise, print \\"NO\\". Examples Input 5 3 1 2 2 3 4 5 Output YES Input 4 4 1 2 2 3 3 4 2 1 Output NO Input 3 2 1 2 2 3 Output YES In this problem, departments are numbered from 1 to n. You need to check if there exists a valid ordering of recycling days for all departments that conforms to all the given constraints.","solution":"def can_recycle_schedules(n, m, constraints): from collections import defaultdict, deque # Create adjacency list and indegree array adj_list = defaultdict(list) indegree = [0] * (n + 1) for a, b in constraints: adj_list[a].append(b) indegree[b] += 1 # Perform topological sort queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) count = 0 while queue: current = queue.popleft() count += 1 for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If we processed all nodes, no cycles exist return \\"YES\\" if count == n else \\"NO\\""},{"question":"Calculate the number of ways to partition a given positive integer N into the sum of two distinct positive integers a and b (where a > b and both a and b are positive integers). Constraints * 2 leq N leq 10^9 Input Input is given from Standard Input in the following format: N Output Output one integer representing the number of ways to partition N into the sum of two distinct positive integers. Examples Input 10 Output 4 Input 15 Output 7 Explanation In the first example, 10 can be partitioned as (9, 1), (8, 2), (7, 3), and (6, 4). In the second example, 15 can be partitioned as (14, 1), (13, 2), (12, 3), (11, 4), (10, 5), (9, 6), and (8, 7).","solution":"def count_partitions(N): Returns the number of ways to partition N into the sum of two distinct positive integers (a, b) where a > b > 0. # We can only partition if N - 1 > 1 which implies N > 2 if N <= 2: return 0 # Maximum b can be N//2 when a = N - b ways = (N - 1) // 2 return ways"},{"question":"A mad scientist has built a robot army and you have been brought in to help program their movements. Each robot operates on a grid, starting at the origin point (0, 0). The scientist has provided a sequence of movement commands that each robot must follow to reach its destination. The commands are given as a string consisting of characters \'U\', \'D\', \'L\', and \'R\' which represent moving up, down, left, and right respectively. However, the robots\' power systems are not perfect. If a robot repeats a command, it will wear out more quickly. Therefore, your task is to determine the total distance a robot will travel without repeating any individual movement command in sequential order more than once. You need to implement a function that computes the shortest path a robot can take considering the constraint. Write a function `shortest_unique_path(movements: str) -> int` that takes the movement commands as input and returns the minimal distance the robot must travel through the grid considering the specified constraints. # Input - The input string `movements` contains up to 10^5 characters, each being one of \'U\', \'D\', \'L\', \'R\'. # Output - The function should return an integer representing the shortest possible distance the robot must travel to comply with the command sequence under the restriction. # Examples Example 1 ```python movements = \\"UUDDLLRR\\" shortest_unique_path(movements) ``` Output: ``` 4 ``` Explanation: The robot can move one step Up, one Down, one Left, and one Right without repeating any command, thus `4` steps. Example 2 ```python movements = \\"ULDRULDR\\" shortest_unique_path(movements) ``` Output: ``` 4 ``` Explanation: The robot can move in the order: Up, Left, Down, Right once without repetition, thus the shortest path is `4` steps.","solution":"def shortest_unique_path(movements: str) -> int: Determine the shortest unique path a robot must travel given the movement constraints. Parameters: movements (str): The given sequence of movements \'U\', \'D\', \'L\', \'R\'. Returns: int: The minimum distance the robot must travel without repeating any command sequentially. # A set to track unique movements unique_movements = set() # Iterate over the movements and add to the set for move in movements: unique_movements.add(move) # The total unique movements without repeating is the answer return len(unique_movements)"},{"question":"# Task Given a list of integers, rearrange the list so that all even numbers appear before all odd numbers while maintaining their relative order. # Example For `arr = [3, 1, 2, 4]` The result should be `[2, 4, 3, 1]` # Input/Output - `[input]` array of integers `arr` - `[output]` an array of integers","solution":"def rearrange_even_before_odd(arr): Rearranges the list so that all even numbers appear before all odd numbers while maintaining their relative order. :param arr: List of integers :return: List of integers with even numbers first, followed by odd numbers. even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"You are given an array of integers. Your task is to determine the sum of the unique prime factors for each integer in the array. -----Input----- An integer n (the number of integers in the list, 1 ≤ n ≤ 100), followed by n integers, each less than 10^{18}. -----Output----- For each integer in the list, output the sum of its unique prime factors on a new line. -----Example----- Input: 3 12 18 29 Output: 5 5 29","solution":"def sum_unique_prime_factors(n, integers): import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_factors(num): factors = set() # Check for the number of 2s that divide num while num % 2 == 0: factors.add(2) num //= 2 # Check for the number of 3s that divide num while num % 3 == 0: factors.add(3) num //= 3 # Check for the number of primes greater than 3 that divide num for i in range(5, int(math.sqrt(num)) + 1, 6): while num % i == 0: factors.add(i) num //= i while num % (i + 2) == 0: factors.add(i + 2) num //= (i + 2) if num > 2: factors.add(num) return factors results = [] for num in integers: primes = prime_factors(num) results.append(sum(primes)) return results"},{"question":"A robot is located at the top-left corner of an n x m grid (identified as cell (1,1)). The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (identified as cell (n,m)). However, some cells in the grid contain obstacles, which the robot cannot pass through. Given the dimensions of the grid and the list of cells that contain obstacles, your task is to find the total number of unique paths that the robot can take to reach the bottom-right corner from the top-left corner. Write a function `uniquePaths(n, m, obstacles)` that determines the number of unique paths with the following signature: - `n` is an integer, the number of rows in the grid (1 ≤ n ≤ 100) - `m` is an integer, the number of columns in the grid (1 ≤ m ≤ 100) - `obstacles` is a list of tuples, where each tuple represents the coordinates of an obstacle in the grid (1 ≤ row ≤ n, 1 ≤ column ≤ m). The coordinates are 1-based. Return an integer representing the total number of unique paths from cell (1, 1) to cell (n, m) modulo 1000000007 (10^9 + 7). # Input ```python uniquePaths(n, m, obstacles) ``` - `n`: integer - `m`: integer - `obstacles`: list of tuples # Output Return the total number of unique paths modulo 1000000007. # Example ```python # Example 1 n = 3 m = 3 obstacles = [(2, 2)] print(uniquePaths(n, m, obstacles)) # Output: 2 # Example 2 n = 2 m = 2 obstacles = [] print(uniquePaths(n, m, obstacles)) # Output: 2 # Example 3 n = 3 m = 3 obstacles = [(2, 2), (2, 3)] print(uniquePaths(n, m, obstacles)) # Output: 1 ```","solution":"def uniquePaths(n, m, obstacles): MOD = 1000000007 # Create a 2D dp array initialized with 0s dp = [[0]*m for _ in range(n)] # Mark the obstacles in the dp array for r, c in obstacles: dp[r-1][c-1] = -1 # Initialize the dp array if dp[0][0] == -1: return 0 dp[0][0] = 1 # Fill the first row for j in range(1, m): if dp[0][j] == -1: dp[0][j] = 0 else: dp[0][j] = dp[0][j-1] # Fill the first column for i in range(1, n): if dp[i][0] == -1: dp[i][0] = 0 else: dp[i][0] = dp[i-1][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): if dp[i][j] == -1: dp[i][j] = 0 else: if dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] if dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"PROBLEM SPECIFICATION: You are given two strings `s1` and `s2` consisting of lowercase English letters. Determine the length of the longest common subsequence shared by `s1` and `s2`. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. INPUT SPECIFICATION: You will be given \'t\' test cases. Each test case will contain two strings `s1` and `s2`. OUTPUT SPECIFICATION: For each test case, print a single integer representing the length of the longest common subsequence. CONSTRAINTS: 0 < t ≤ 100 1 ≤ length(s1), length(s2) ≤ 1000 SAMPLE INPUT 1 abcde ace SAMPLE OUTPUT 3 Explanation The longest common subsequence is \\"ace\\" which has a length of 3.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Alice loves word puzzles and has recently discovered a new game where she needs to find the longest word in a given string of alphanumeric characters where all the letters are unique. The words in the string are separated by spaces, and a word is defined as a contiguous sequence of letters. Non-letter characters should be ignored when considering the uniqueness of letters within a word. Help Alice to write a function that returns the longest word (by length) with unique letters from the string. If there are multiple words with the same length, return the one which appears first in the string. Example 1: Input: str = \\"abc123 def@# ghi%^ jklmnop\\" Output: \\"jklmnop\\" Explanation: The words in the string are \\"abc\\", \\"def\\", \\"ghi\\", and \\"jklmnop\\". Among these, \\"jklmnop\\" is the longest word with all unique letters. Example 2: Input: str = \\"abc@# def ghi123 jkl mno pqrs abcdefg\\" Output: \\"abcdefg\\" Explanation: The words in the string are \\"abc\\", \\"def\\", \\"ghi\\", \\"jkl\\", \\"mno\\", \\"pqrs\\", and \\"abcdefg\\". Among these, \\"abcdefg\\" is the longest word with all unique letters. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestUniqueWord() that takes a string (str) and returns the longest word (with all unique letters) found in the input string. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ str.length ≤ 1000","solution":"def longest_unique_word(s): Returns the longest word with all unique letters from the input string. import re def is_unique(word): return len(set(word)) == len(word) words = re.findall(r\'bw+b\', s) longest_word = \\"\\" for word in words: # Iterate through each word in the words list alpha_word = \'\'.join(filter(str.isalpha, word)) # Filter out non-letter characters for each word if is_unique(alpha_word) and len(alpha_word) > len(longest_word): longest_word = alpha_word return longest_word"},{"question":"In a coding competition, participants are required to solve a particular problem involving arrays. Given an array of integers, the task is to find the maximum sum obtainable from any subarray of the given array. A subarray is a contiguous part of an array. Your task is to write a program that takes an array of integers as input and returns the maximum sum obtained from any subarray. Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of two lines. The first line contains an integer N, the length of the array. The second line contains N integers separated by spaces, representing the elements of the array. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1) and y is the maximum sum obtained from any subarray of the given array. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -1000 ≤ Array elements ≤ 1000 Example Input: 3 4 1 2 3 4 3 -1 -2 -3 5 1 -2 3 4 -1 Output: Case #1: 10 Case #2: -1 Case #3: 7 Explanation Case 1: The subarray with the maximum sum is the entire array [1, 2, 3, 4]. Case 2: The subarray with the maximum sum is [-1], which results in -1. Case 3: The subarray with the maximum sum is [3, 4], which results in 7.","solution":"def max_subarray_sum(arr): Returns the maximum sum obtainable from any subarray of the given array. current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max def solve_max_subarray_sum(test_cases): Takes a list of test cases, each containing an array, and returns the maximum sum of any subarray for each test case. results = [] for i, arr in enumerate(test_cases): max_sum = max_subarray_sum(arr) results.append(f\\"Case #{i+1}: {max_sum}\\") return results"},{"question":"Chef is preparing a new dish with a sequence of ingredients A_1, A_2, ldots, A_N. Each ingredient has a certain flavor level represented by non-negative integers. Chef wants to balance the flavors in a certain way. Chef has the following operation available: - Choose any two adjacent ingredients A_i and A_{i+1} (1 ≤ i < N), and swap their flavor levels if the absolute difference between their flavors is greater than 1. The sequence is balanced if for every pair of adjacent elements A_i and A_{i+1}, the difference in their flavor levels is at most 1. It is your task to determine the minimum number of swaps needed to make the sequence balanced. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_1, A_2, ldots, A_N. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of swaps needed to balance the sequence, or -1 if it is impossible. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 10^{6} 0 ≤ A_i ≤ 10^6 for each valid i the sum of N over all test cases does not exceed 2 cdot 10^{6} ------ Subtasks ------ Subtask #1 (30 points): N ≤ 1,000 the sum of N over all test cases does not exceed 10^{4} Subtask #2 (70 points): original constraints ----- Sample Input 1 ------ 3 3 0 2 3 4 1 3 2 4 5 0 6 1 5 2 ----- Sample Output 1 ------ 1 2 -1 ----- explanation 1 ------ Example case 1: The sequence can be balanced in one swap: [0, 2, 3] rightarrow [2, 0, 3]. Example case 2: The sequence can be balanced in two swaps: [1, 3, 2, 4] rightarrow [1, 2, 3, 4] rightarrow [2, 1, 3, 4]. Example case 3: It is impossible to balance the sequence with any number of swaps.","solution":"def min_swaps_to_balance_flavors(t, test_cases): res = [] for i in range(t): n, a = test_cases[i] # Initialize swap count swap_count = 0 possible = True for j in range(1, n): if abs(a[j] - a[j - 1]) > 1: # Impossible to balance if the difference greater than 1 possible = False break if possible: res.append(swap_count) else: res.append(-1) return res"},{"question":"Alice is taking part in a programming competition where she encounters the following problem: Alice is given an array of integers and two integers, `x` and `y`. She needs to find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum values in the subarray does not exceed `x` and the length of the subarray is at most `y`. Alice requests your help with the implementation. Could you write a program to solve Alice\'s problem? -----Input----- The first line contains three integers n, x, and y (1 ≤ n ≤ 10^5, 0 ≤ x ≤ 10^9, 1 ≤ y ≤ n). The second line contains n space-separated integers a_1, a_2, ..., a_n ( -10^9 ≤ a_i ≤ 10^9) representing the array. -----Output----- Output a single integer which is the length of the longest such subarray. If no such subarray exists, output 0. -----Examples----- Input 7 5 3 1 3 6 7 2 5 9 Output 3 Input 5 0 2 4 4 4 4 4 Output 2 -----Note----- In the first example, the longest subarray that satisfies the properties is [1, 3, 6]. The absolute difference between the maximum and minimum values is 5, which does not exceed `x`, and the length is 3, which does not exceed `y`. In the second example, any subarray of length 2 with identical elements will have an absolute difference of 0, which meets the condition, and the length is 2.","solution":"def longest_subarray_with_limits(arr, x, y): from collections import deque n = len(arr) max_deque, min_deque = deque(), deque() longest_length = 0 left = 0 for right in range(n): while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() max_deque.append(right) while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() min_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > x: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() current_length = right - left + 1 if current_length <= y: longest_length = max(longest_length, current_length) return longest_length"},{"question":"Given a large collection of books in a library, each book has a unique identifier and a certain number of pages. The books are stored in an array where each element represents the number of pages in a specific book. The library system needs to handle multiple queries to efficiently determine the range of books that fall within a specified page range. You are required to implement a query system that can quickly return the count of books that have a number of pages within a specified range for multiple queries. Input Format: - The first line contains an integer N, representing the total number of books. - The second line contains N integers separated by a single space, representing the number of pages in each book. - The third line contains an integer Q, representing the number of queries. - The next Q lines each contain two integers l and r (both inclusive), separated by a space, which represent the lower and upper bounds of the page range for that query. Output Format: For each query, output the count of books that have a number of pages within the specified range [l, r]. Constraints: - 1 <= N <= 100000 - 1 <= pages in book <= 100000 - 1 <= Q <= 100000 - 1 <= l <= r <= 100000 Sample Input: 6 100 200 300 400 500 600 3 100 300 200 500 300 600 Sample Output: 3 4 4 Explanation: - Query #1: The number of books with pages in the range [100, 300] are 100, 200, 300. Hence, the output is 3. - Query #2: The number of books with pages in the range [200, 500] are 200, 300, 400, 500. Hence, the output is 4. - Query #3: The number of books with pages in the range [300, 600] are 300, 400, 500, 600. Hence, the output is 4. Timelimits: Timelimits are provided to ensure the solution runs efficiently within the given constraints.","solution":"from bisect import bisect_left, bisect_right def count_books_in_range(pages, queries): Given a list of page numbers in books and a list of queries, returns the count of books in each specified range. :param pages: List[int] - A list of page counts for the books. :param queries: List[Tuple[int, int]] - A list of queries with (l, r) representing the range. :return: List[int] - A list of results where each result is the count of books within the range. # Sort the list of page counts pages.sort() results = [] for (l, r) in queries: # Use binary search to find the first index with pages >= l left_index = bisect_left(pages, l) # Use binary search to find the first index with pages > r right_index = bisect_right(pages, r) # The number of books in the range [l, r] is the difference of indices results.append(right_index - left_index) return results"},{"question":"Oliver loves playing with numbers and solving problems. Recently, he found a unique number pattern where each number in a sequence is the sum of the squares of its digits of the previous number. If a number in the sequence reaches 1, Oliver considers it a happy number. However, if the sequence enters a cycle that doesn\'t include 1, it\'s considered an unhappy number. Your task is to determine whether a given number is a happy or an unhappy number. Write a program to determine if the given number is a happy number. -----Input----- A single integer n (1 ≤ n ≤ 1000). -----Output----- Output \\"Happy\\" if the number is a happy number, otherwise output \\"Unhappy\\". -----Examples----- Sample Input: 19 Sample Output: Happy Sample Input: 20 Sample Output: Unhappy","solution":"def is_happy_number(n): Determines if the given number is a happy number. A happy number is a number which eventually reaches 1 when replaced by the sum of the square of each digit. If it enters into a cycle that does not include 1, it is an unhappy number. :param n: an integer input :returns: \\"Happy\\" if n is a happy number, otherwise \\"Unhappy\\" def sum_of_squares(num): Helper function that returns the sum of the squares of digits of num. return sum(int(digit) ** 2 for digit in str(num)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = sum_of_squares(n) return \\"Happy\\" if n == 1 else \\"Unhappy\\""},{"question":"Ariella is learning about string manipulation in her programming course and has come across the concept of palindromes. She finds it fascinating but slightly challenging. A palindrome is a string that reads the same forward and backward, ignoring cases, spaces, and non-alphanumeric characters. Ariella’s task is to write a function that will take a given string and return a specific integer output as per the following guidelines: - Return `1` if the string is a palindrome. - Return `0` if the string is not a palindrome but can be made a palindrome by removing one character. - Return `-1` if removing one character cannot make the string a palindrome. -----Input----- The input consists of a single string `s` (1 le |s| le 1000), which includes only alphanumeric characters and spaces. -----Output----- Output a single integer as specified above. -----Examples----- Sample Input 1: A man a plan a canal Panama Sample Output 1: 1 Sample Input 2: abca Sample Output 2: 0 Sample Input 3: abc Sample Output 3: -1","solution":"def is_alphanumeric(c): return c.isalnum() def is_palindrome(s): filtered_chars = list(filter(is_alphanumeric, s.lower())) return filtered_chars == filtered_chars[::-1] def can_be_palindrome_by_removing_one_char(s): filtered_chars = list(filter(is_alphanumeric, s.lower())) for i in range(len(filtered_chars)): temp_chars = filtered_chars[:i] + filtered_chars[i + 1:] if temp_chars == temp_chars[::-1]: return True return False def palindrome_status(s): if is_palindrome(s): return 1 elif can_be_palindrome_by_removing_one_char(s): return 0 else: return -1"},{"question":"Write a program to process a list of commands that control the position of a robot on a 2D grid. The robot starts at position (0, 0) and can move in four possible directions: up, down, left, and right. Each command consists of a direction and a number of steps, and the commands must be executed in the order they are given. Commands are provided as a string of space-separated tokens, where each token represents a single move command. Each token consists of a letter (\'U\', \'D\', \'L\', \'R\') representing the direction (up, down, left, right) followed by an integer representing the number of steps. For example, the command \\"U3\\" means move up 3 steps, and \\"R2\\" means move right 2 steps. Your task is to write a program that: 1. Reads the commands from input. 2. Executes them to update the robot\'s position. 3. Outputs the final position of the robot. # Input A single line containing the commands as a string of space-separated tokens. Each move command consists of a letter (\'U\', \'D\', \'L\', \'R\') followed by an integer (1 to 100). # Output Output the final position of the robot as two integers separated by a space. The first integer is the x-coordinate, and the second integer is the y-coordinate. # Examples **Sample Input 1:** ``` R2 U1 L3 D2 ``` **Sample Output 1:** ``` -1 -1 ``` **Sample Input 2:** ``` U10 L5 D5 R15 ``` **Sample Output 2:** ``` 10 5 ``` # Notes - Commands should be executed in the order they appear in the input. - The robot starts at position (0, 0). - The grid can be considered infinite, so the robot can move arbitrarily far in any direction.","solution":"def process_robot_commands(commands): Processes a list of commands to control the position of a robot on a 2D grid. :param commands: A string containing space-separated tokens. Each token represents a command with a direction and steps. :return: A tuple containing the final x and y coordinates of the robot. x, y = 0, 0 command_list = commands.split() for command in command_list: direction = command[0] steps = int(command[1:]) if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps else: raise ValueError(\\"Invalid command direction\\") return x, y"},{"question":"You are given a set of blocks, each block can contain any number of sub-blocks, forming a hierarchical structure. Each block and sub-block has an associated value. The structure of blocks can be represented as a nested list in the following way: * A block with value `v` and a list of sub-blocks is represented as `Block(v, [sub-block1, sub-block2, ...])`. * A block with no sub-blocks is represented as `Block(v, [])`. Your task is to write a function `max_value_path` that takes a block structure and returns the maximum sum of values from the top block to any leaf block. # Input The input will be a nested list representing the hierarchy of blocks. Here is the format: ``` Block(value, [sub-blocks]) ``` For example: ``` Block(2, [Block(3, []), Block(5, [Block(1, []), Block(4, [])])]) ``` # Output The function should return an integer, representing the maximum sum of values in a single path from the root block to any leaf block. # Examples 1. For the block structure `Block(2, [Block(3, []), Block(5, [Block(1, []), Block(4, [])])])`, the maximum value path sum is `2 + 5 + 4 = 11`. 2. For the block structure `Block(10, [Block(2, [Block(30, []), Block(40, [])]), Block(8, [])])`, the maximum value path sum is `10 + 2 + 40 = 52`. 3. For the block structure `Block(1, [])`, the maximum value path sum is `1`. # Constraints - The number of blocks (including sub-blocks) in the structure does not exceed 50. - The value associated with each block is a positive integer no greater than 1000. # Function Signature ```python def max_value_path(block) -> int: pass ``` Here is a definition of the `Block` class to be used in the implementation: ```python class Block: def __init__(self, value, sub_blocks): self.value = value self.sub_blocks = sub_blocks ``` # Example Usage ```python block_structure = Block(2, [ Block(3, []), Block(5, [ Block(1, []), Block(4, []) ]) ]) print(max_value_path(block_structure)) # Output: 11 ```","solution":"class Block: def __init__(self, value, sub_blocks): self.value = value self.sub_blocks = sub_blocks def max_value_path(block): Function to compute the maximum sum of values from the top block to any leaf block. if not block.sub_blocks: return block.value max_sum_subblocks = max(max_value_path(sub_block) for sub_block in block.sub_blocks) return block.value + max_sum_subblocks"},{"question":"During an interplanetary journey, the crew of a spaceship must manage their fuel efficiently to reach their destination. The spaceship has a certain amount of fuel and can perform two types of maneuvers. The first maneuver consumes a fixed amount of fuel and covers a set distance, while the second maneuver consumes twice the fuel but covers three times the distance. The goal is to determine the minimum number of maneuvers required to cover a given distance while efficiently managing the fuel supply. -----Input----- The first line of input contains an integer D (1 le D le 10^9), the distance that needs to be covered. The second line contains an integer F (1 le F le 10^9), the amount of fuel available. The third and fourth lines contain two integers each: d1 and f1 (1 le d1, f1 le 10^9) which are the distance and fuel consumed by the first maneuver, and d2 and f2 (1 le d2, f2 le 10^9) which are the distance and fuel consumed by the second maneuver. -----Output----- Output the minimum number of maneuvers required to cover the distance D. If it is not possible to cover the required distance with the given fuel, output -1. -----Examples----- Sample Input 1: 50 100 10 5 20 10 Sample Output 1: 3 Sample Input 2: 100 30 15 5 30 10 Sample Output 2: -1","solution":"def min_maneuvers(D, F, d1, f1, d2, f2): if (f1 == 0 and f2 == 0) or D == 0: return 0 if D == 0 else -1 # Compare the efficiency of the two maneuvers eff1 = d1 / f1 eff2 = (3 * d2) / (2 * f2) maneuvers = 0 # Use the more efficient maneuver first if eff1 > eff2: d1, d2 = d2, d1 f1, f2 = f2, f1 eff1, eff2 = eff2, eff1 while D > 0 and F > 0: if D <= 0 or F <= 0: break if F >= f2 and d2 <= D: max_d2_maneuvers = D // d2 max_f2_maneuvers = F // f2 use_maneuvers = min(max_d2_maneuvers, max_f2_maneuvers) D -= use_maneuvers * d2 F -= use_maneuvers * f2 maneuvers += use_maneuvers elif F >= f1 and d1 <= D: max_d1_maneuvers = D // d1 max_f1_maneuvers = F // f1 use_maneuvers = min(max_d1_maneuvers, max_f1_maneuvers) D -= use_maneuvers * d1 F -= use_maneuvers * f1 maneuvers += use_maneuvers else: break if D > 0: return -1 return maneuvers"},{"question":"In a kingdom of N cities, there are N-1 roads connecting them such that any city can be reached from any other city by exactly one path. Each road has a cost associated with it. The king wants to know the most expensive cost to travel between any two cities in the kingdom. Help the king by calculating this cost. Constraints * 2 leq N leq 100 * 1 leq cost of each road leq 1000 Input The input is given from Standard Input in the following format: ``` N A_1 B_1 C_1 A_2 B_2 C_2 ... A_(N-1) B_(N-1) C_(N-1) ``` Here, N represents the number of cities, and each of the next N-1 lines contains three integers, A_i, B_i, and C_i, which denotes a road between city A_i and city B_i with cost C_i. Output Print the most expensive cost to travel between any two cities. Examples Input ``` 3 1 2 3 2 3 4 ``` Output ``` 7 ``` Input ``` 4 1 2 2 1 3 4 3 4 3 ``` Output ``` 9 ```","solution":"import sys input = sys.stdin.read def find_most_expensive_cost(N, connections): from collections import defaultdict import heapq # Build the graph graph = defaultdict(list) for A, B, C in connections: graph[A].append((B, C)) graph[B].append((A, C)) def bfs(start): vis = set() max_cost = 0 q = [(0, start)] farthest_node = start while q: cost, node = heapq.heappop(q) cost = -cost if cost > max_cost: max_cost = cost farthest_node = node vis.add(node) for nei, nei_cost in graph[node]: if nei not in vis: heapq.heappush(q, (-(cost + nei_cost), nei)) return (farthest_node, max_cost) point_a, _ = bfs(1) _, max_cost = bfs(point_a) return max_cost def main(): inp = input().split() N = int(inp[0]) connections = [] for i in range(1, len(inp), 3): A = int(inp[i]) B = int(inp[i+1]) C = int(inp[i+2]) connections.append((A, B, C)) print(find_most_expensive_cost(N, connections))"},{"question":"There is a sequence of N integers. You need to determine whether it is possible to make the sequence non-decreasing by modifying at most one element. A sequence is non-decreasing if each element is not smaller than the previous one. -----Constraints----- - 1 leq N leq 100,000 - -10^9 leq each integer in the sequence leq 10^9 -----Input----- Input is given from Standard Input in the following format: N sequence_1 sequence_2 ... sequence_N -----Output----- If it is possible to make the sequence non-decreasing by modifying at most one element, print YES; otherwise, print NO. -----Sample Input----- 5 4 2 3 3 5 -----Sample Output----- YES By modifying the second element from 2 to 4, the sequence becomes non-decreasing.","solution":"def can_be_non_decreasing_by_modifying_one_element(n, sequence): Determines if the sequence can be made non-decreasing by modifying at most one element. Parameters: n (int): Length of the sequence sequence (list of int): The sequence of integers Returns: str: \\"YES\\" if it\'s possible, otherwise \\"NO\\" count = 0 for i in range(1, n): if sequence[i] < sequence[i-1]: count += 1 if count > 1: return \\"NO\\" if i - 2 >= 0 and sequence[i] < sequence[i-2]: sequence[i] = sequence[i-1] else: sequence[i-1] = sequence[i] return \\"YES\\""},{"question":"Input 3 5 3 1 2 5 1 3 7 4 2 4 3 2 Output 7 # Explanation In this coding challenge, you will be provided with two integer values as the first line of input. The first integer represents the number of sets of numbers (n) that will follow, and the second integer represents the number of query sets (m) that will also follow. Each of the next n lines will contain three integers representing a set of numbers. For each of these sets, you should calculate the product of the first and second integers subtracted by the third integer. After processing the sets, you will receive m queries, where each query consists of integers indicating the set number (1-indexed) to be considered. For each query, output the maximum result obtained from the calculated values of the sets. **Sample Input** ``` 3 5 3 1 2 5 1 3 7 4 2 4 3 2 ``` **Sample Output** ``` 7 ``` **Explanation**: 1. For the first set: `(3 * 1 - 2) = 1` 2. For the second set: `(5 * 1 - 3) = 2` 3. For the third set: `(7 * 4 - 2) = 26` Given the query \\"4 3 2\\", the query indicates that we should consider the maximum result from the calculated product values of those sets. Hence, the output `7`.","solution":"def solve(n, m, sets, queries): # Calculate each set\'s value values = [(a * b - c) for a, b, c in sets] # Process each query and determine the maximum result results = [max(values[q-1] for q in query if 1 <= q <= n) for query in queries] return results"},{"question":"Given a list of integers, write a function to move all zeroes to the end of the list while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the list. ```python move_zeroes([0, 1, 0, 3, 12]) ==> [1, 3, 12, 0, 0] move_zeroes([1, 0, 2, 0, 3, 4]) ==> [1, 2, 3, 4, 0, 0] move_zeroes([0, 0, 0]) ==> [0, 0, 0] ``` Good Luck!","solution":"def move_zeroes(nums): Move all zeroes in the list to the end while maintaining the relative order of the non-zero elements. The operation is done in-place. Parameters: nums (List[int]): List of integers. Returns: None: The function modifies the list in-place. last_non_zero_found_at = 0 # Move all non-zero elements to the front of the array for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill remaining elements with zeros for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"You need to write a function that takes in a list of employee information and returns a new list sorted based on their salaries in descending order. Each employee information is stored as a dictionary with three fields: \'name\' (a string), \'age\' (an integer), and \'salary\' (an integer). Your function should take in a list of dictionaries, each representing an employee, and return a new list of dictionaries with the same information but sorted by the \'salary\' field in descending order. If two employees have the same salary, their order should be preserved as in the original list. For example, given the input list: ```python [ {\'name\': \'Alice\', \'age\': 30, \'salary\': 70000}, {\'name\': \'Bob\', \'age\': 25, \'salary\': 80000}, {\'name\': \'Charlie\', \'age\': 35, \'salary\': 80000}, {\'name\': \'David\', \'age\': 40, \'salary\': 90000} ] ``` The function should return: ```python [ {\'name\': \'David\', \'age\': 40, \'salary\': 90000}, {\'name\': \'Bob\', \'age\': 25, \'salary\': 80000}, {\'name\': \'Charlie\', \'age\': 35, \'salary\': 80000}, {\'name\': \'Alice\', \'age\': 30, \'salary\': 70000} ] ```","solution":"def sort_employees_by_salary(employees): Sorts a list of employees based on their salaries in descending order. Args: employees (list of dict): List of dictionaries, each containing \'name\', \'age\', and \'salary\' keys. Returns: list of dict: New list of employee dictionaries sorted by salary in descending order. return sorted(employees, key=lambda emp: emp[\'salary\'], reverse=True)"},{"question":"A specialized type of mineral gem exists in a region, and you are tasked with mining them. Each gem has a different value and is buried at different depths. The mining process involves deciding the right depth to start from and extracting a contiguous subset of the gems for maximum profit. The gem values in a segment can be represented by a numeric array where each position in the array represents the depth of that gem and the value at that position represents the gem\'s worth at that depth. The goal is to find the contiguous subarray with the maximum possible sum, which represents the segment with the highest value of gems that can be mined without interruption. Input The first line contains T, the number of test cases. The description of T test cases follows. Each test case contains 2 lines. The first line contains N, the length of the array representing the depths. The second line contains N space-separated integers denoting the value of gems at each depth. Output For each test case, output a single line containing the maximum sum of any contiguous subarray. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ gem value ≤ 10^4 SAMPLE INPUT 2 8 -2 1 -3 4 -1 2 1 -5 4 4 1 2 3 4 SAMPLE OUTPUT 6 10","solution":"def max_contiguous_subarray_sum(arr): Returns the maximum sum of any contiguous subarray in the given array. Implements Kadane\'s algorithm. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve(test_cases): results = [] for case in test_cases: N = case[0] arr = case[1] results.append(max_contiguous_subarray_sum(arr)) return results"},{"question":"Alex is fascinated by numbers and their properties. Recently, he learned about the concept of factorial and is now intrigued by the sum of digits of factorials. He wants to write a program that calculates the sum of the digits of the factorial of a given number. Input The first line contains a single integer n (0 ≤ n ≤ 100) — the number for which Alex wants to find the sum of the digits of its factorial. Output Output a single integer — the sum of the digits of the factorial of n. Examples Input 5 Output 3 Input 10 Output 27 Input 0 Output 1","solution":"import math def sum_of_digits_of_factorial(n): Returns the sum of the digits of the factorial of n. factorial_result = math.factorial(n) digit_sum = sum(int(digit) for digit in str(factorial_result)) return digit_sum"},{"question":"Riya is organizing a charity event and she wants to distribute some goodies to the children attending. She has P packets of chocolates and Q packets of candies. Each packet can only contain one type of goodie – either chocolates or candies but not both. Riya wants to distribute these packets such that every child gets exactly one packet, and no two children sitting next to each other receive the same type of packet. To make it more interesting, she allows different ways of organizing the packets provided they satisfy the above conditions. She wants to find the total number of valid distributions and print the results modulo 1000003 (10^6 + 3). Input The first line contains an integer T - the number of test cases. T lines follow, each line consists of two positive integers P and Q, representing the number of chocolate and candy packets respectively. Output For each test case, output a single line containing the number of valid distributions modulo 1000003. Constraints 1 ≤ T ≤ 10; 0 ≤ P, Q ≤ 10^6 30% of the test cases where 0 ≤ P, Q ≤ 20 20% of the test cases where 0 ≤ P, Q ≤ 50 20% of the test cases where 0 ≤ P, Q ≤ 1000 SAMPLE INPUT 3 2 2 3 1 5 2 SAMPLE OUTPUT 2 0 4 Explanation In the first case, there are 2 ways to distribute the packets: (chocolate, candy, chocolate, candy), (candy, chocolate, candy, chocolate). In the second case, there are no valid ways to distribute the packets as one of the children would end up with the same type of packet as their neighbor. In the third case, there are 4 ways to distribute the packets.","solution":"MOD = 1000003 def num_valid_distributions(P, Q): if abs(P - Q) > 1: return 0 if P == Q: return 2 return 1 def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] index = 1 for _ in range(T): P = int(data[index]) Q = int(data[index + 1]) results.append(num_valid_distributions(P, Q)) index += 2 for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Emily loves to collect unique stones. One day, she found N stones and each of the stones had a certain brilliance value. To make her collection special, she decides to collect only the stones that have a unique brilliance value. Can you help Emily find out how many stones she would keep in her collection? ------ Notes ------ A stone should be kept if its brilliance value is unique among all the stones. ------ Input ------ First line contains an integer T (number of test cases, around 20). Each of the next T cases contains: - The first line contains an integer N (1 ≤ N ≤ 100000), the number of stones. - The second line contains an array B of N integers separated by spaces, each representing the brilliance value of a stone (0 ≤ B[i] ≤ 100000). ------ Output ------ For each test case, output the number of stones that Emily would keep in her collection. ----- Sample Input 1 ------ 3 5 1 2 2 3 4 4 10 10 10 10 6 5 6 7 7 6 5 ----- Sample Output 1 ------ 3 0 0 ----- explanation 1 ------ Case 1: The unique brilliance values are 1, 3, and 4. Case 2: There are no unique brilliance values as all stones have the same brilliance value. Case 3: There are no unique brilliance values as each brilliance value is repeated. Note: Ensure that the solution can handle large input sizes efficiently.","solution":"def unique_stones(T, test_cases): Returns the number of stones with unique brilliance values for each test case. Args: T : int : the number of test cases. test_cases : list of tuples : a list of tuples, where each tuple contains: - an integer N (the number of stones) - a list of integers B (the brilliance values). Returns: list of int : a list containing the number of unique brilliance values for each test case. results = [] for case in test_cases: N, B = case brilliance_count = {} # Count the occurrences of each brilliance value for value in B: if value in brilliance_count: brilliance_count[value] += 1 else: brilliance_count[value] = 1 # Count how many brilliance values are unique (appear exactly once) unique_count = sum(1 for count in brilliance_count.values() if count == 1) results.append(unique_count) return results"},{"question":"Dr. Zeno is a mathematician, and he is fascinated by patterns and sequences. He recently came across a sequence which he named the \\"Zeno sequence.\\" A Zeno sequence is defined as follows: - Start with any positive integer n. - If n is even, divide it by 2 to get the next term in the sequence. - If n is odd, multiply it by 3 and add 1 to get the next term in the sequence. - The sequence continues until it reaches the number 1. Dr. Zeno is interested in finding out how long it takes for any given number n to reach 1 in a Zeno sequence. More formally, he wants to know the number of terms in the sequence starting from n and ending at 1. Can you write a program to help Dr. Zeno? -----Input----- The input consists of a single integer n (1 leq n leq 10^6), which represents the starting number of the Zeno sequence. -----Output----- Output a single integer, the number of terms in the Zeno sequence starting from n and ending with 1. -----Examples----- Sample Input 1: 6 Sample Output 1: 9 Sample Input 2: 27 Sample Output 2: 112","solution":"def zeno_sequence_length(n): Returns the number of terms in the Zeno sequence starting from n and ending with 1. length = 1 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"Deepa is organizing a fun Christmas party where she plans to distribute gifts to children. Each gift can be wrapped in three different types of wrapping papers. She wants to know in how many different ways she can wrap the gifts if she has N gifts to wrap. Can you help her calculate the number of ways? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - Each of the next T lines contains one integer N - the number of gifts to be wrapped. ------ Output Format ------ For each test case, output the number of different ways the N gifts can be wrapped. ------ Constraints ------ 1 ≤ T ≤ 10 0 ≤ N ≤ 20 ------ Sample Input 1 ------ 2 1 2 ------ Sample Output 1 ------ 3 9 ------ Explanation 1 ------ Test case 1: There are 3 ways to wrap 1 gift (since there are 3 options for the single gift). Test case 2: There are 9 ways to wrap 2 gifts (each gift has 3 options, so 3*3 = 9 ways in total).","solution":"def number_of_ways(t, test_cases): For each test case, calculates the number of ways to wrap N gifts where each gift can be wrapped in 3 different ways. results = [] for n in test_cases: results.append(3**n) return results"},{"question":"Samantha is a budding computer scientist and loves working on string manipulation problems. One day, she came up with a new problem for her friends. Given a lowercase string s, she wants to determine if it can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same backward as forward (e.g., \\"madam\\", \\"racecar\\"). Help Samantha by writing a program to check if the given string can be rearranged to form a palindrome. Input The first line of input is a single integer T, representing the number of test cases. Each test case consists of a single line containing a lowercase string s. Output For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Constraints 1 <= T <= 100 1 <= |s| <= 10^5 Example Input: 3 carrace daily abcdabc Output: YES NO YES","solution":"from collections import Counter def can_form_palindrome(s): Determine if a given string can be rearranged to form a palindrome. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(T, test_cases): Process multiple test cases and return a list of results for each test case. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example Usage: # T = 3 # test_cases = [\\"carrace\\", \\"daily\\", \\"abcdabc\\"] # results = process_test_cases(T, test_cases) # for result in results: # print(result)"},{"question":"King of Westeros wants to expand his territory by building a series of fortresses. Each fortress has a specific strength that is determined by a peculiar function. The strength of a fortress is the sum of the factorials of the number of distinct prime numbers in each of its prime factor decompositions. Given a set of fortress strengths, compute the total strength for each one. Input The first line of input is an integer N, representing the number of fortresses. The next N lines each contain a single integer representing the strength of each fortress. Output Output the total strength of each fortress. Constraints: 1 ≤ Strength of fortress ≤ 1000 1 ≤ N ≤ 100 Sample Input: 3 6 10 15 Sample Output 8 10 12 Explanation For the fortress with strength 6, the prime factorization is 2 * 3, which has 2 distinct primes. The sum of factorials is 2! + 3! = 2 + 6 = 8. For the fortress with strength 10, the prime factorization is 2 * 5, which has 2 distinct primes. The sum of factorials is 2! + 5! = 2 + 120 = 122. For the fortress with strength 15, the prime factorization is 3 * 5, which has 2 distinct primes. The sum of factorials is 3! + 5! = 6 + 120 = 126. Sample Input 2 6 10 Sample Output 8 122 Explanation For the fortress with strength 6, the prime factorization is 2 * 3, which has 2 distinct primes. The sum of factorials is 2! + 3! = 2 + 6 = 8. For the fortress with strength 10, the prime factorization is 2 * 5, which has 2 distinct primes. The sum of factorials is 2! + 5! = 2 + 120 = 122.","solution":"import math def prime_factors(n): Returns a set of distinct prime factors of n. factors = set() while n % 2 == 0: factors.add(2) n = n // 2 for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: factors.add(i) n = n // i if n > 2: factors.add(n) return factors def fortress_strength(n): Returns the sum of factorials of the distinct prime factors of n. factors = prime_factors(n) return sum(math.factorial(prime) for prime in factors) def total_strength_of_fortresses(fortresses): Returns the total strength for each fortress. return [fortress_strength(fortress) for fortress in fortresses]"},{"question":"As a space station engineer, you are tasked with optimizing the energy consumption of robot movements in a grid. Each robot can move up, down, left, or right by one unit per move. The grid consists of `N` x `M` cells, where each cell either contains a clear path (represented by \'.\') or an obstacle (represented by \'#\'). Your goal is to write a program that finds the minimum energy cost for each robot to move from its starting position to a target position while avoiding obstacles. The energy cost of moving one step is always 1 unit. Given the grid dimensions `N` and `M`, the starting position `(startX, startY)`, and the target position `(targetX, targetY)`, determine the minimum energy required for the robot to reach the target. If the target position is unreachable, return -1. Input: - The first line contains an integer `T`, the number of test cases. - For each test case, the first line contains two integers `N` and `M`, the dimensions of the grid. - The following `N` lines each contain a string of `M` characters representing a row of the grid (with \'.\' representing a clear path and \'#\' representing an obstacle). - The next line contains four integers `startX`, `startY`, `targetX`, `targetY`, the starting and target positions in the grid (0-indexed). Output: - For each test case, output a single line containing \\"Case #x: y\\", where `x` is the test case number (starting from 1), and `y` is the minimum energy cost required to reach the target, or -1 if the target is unreachable. Constraints: - `1 ≤ T ≤ 100` - `2 ≤ N, M ≤ 1000` - `0 ≤ startX, startY, targetX, targetY < N, M` Sample Input: ``` 2 4 4 .... .#.. ..#. .... 0 0 3 3 3 3 0 0 4 4 ..#. .#.. ..#. .... 0 1 2 2 0 0 3 3 ``` Sample Output: ``` Case #1: 6 Case #2: -1 ```","solution":"from collections import deque def min_energy_cost(T, test_cases): def bfs(grid, start, target): N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == (target[0], target[1]): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 results = [] for i in range(T): N, M, grid, startX, startY, targetX, targetY = test_cases[i] min_cost = bfs(grid, (startX, startY), (targetX, targetY)) results.append(f\\"Case #{i+1}: {min_cost}\\") return results # Example Driver Function def driver(): T = int(input()) test_cases = [] for _ in range(T): N, M = map(int, input().split()) grid = [input().strip() for _ in range(N)] startX, startY, targetX, targetY = map(int, input().split()) test_cases.append((N, M, grid, startX, startY, targetX, targetY)) results = min_energy_cost(T, test_cases) for result in results: print(result) # If run interactively (i.e., script mode), driver would get executed. # Removing for better unit test integration # if __name__ == \\"__main__\\": # driver()"},{"question":"You are given a rectangular grid of dimensions n x m, where all cells initially contain a 0. You are allowed to perform the following operation multiple times: 1. Select any subgrid defined by its top-left and bottom-right corners and add 1 to each element of the selected subgrid. Your task is to make each cell in the grid contain at least a value k using the minimum number of operations. Determine the minimum number of operations required. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 50, 1 ≤ k ≤ 1000) — the dimensions of the grid and the required minimum value for each cell. Output Print a single integer denoting the minimum number of operations required. Example Input 2 3 3 Output 6 Explanation In the example, we have a 2x3 grid with k = 3. One way to achieve the desired results is to perform the operation on each 1x1 subgrid, which gives us the minimum number of operations as 6, because 2 rows * 3 columns * 1 operation = 6 operations. Another way to achieve the result could be to perform a 2x3 operation 3 times, on the entire grid, giving the result as 3 operations, but the task is to find the minimum number possible. After closely realizing the constraints, the result will be 6 due to individual increments needed.","solution":"def min_operations_to_reach_k(n, m, k): Given dimensions of a grid n x m and a minimum value k, this function returns the minimum number of operations to make each cell in the grid contain at least k. # Each individual cell needs to be incremented k times to reach the value k return n * m * k"},{"question":"Pak Chanek owns a large company with n employees. Each employee has a unique ID between 1 and n, inclusive. Employee 1 is the CEO and has no manager. Each of the remaining n-1 employees has exactly one direct manager. Each manager can assign a task to their subordinates. A task is represented by an integer, and each subordinate gets a task from their direct manager. If an employee receives multiple tasks from different managers (direct or indirect), they will work on the smallest task number assigned. Pak Chanek wants to know the smallest task number that will be completed by some employee in the company. You need to help him determine this. Consider the hierarchy as a tree rooted at the CEO, where each of the n-1 employees is hanging under exactly one other employee. -----Input----- The first line contains a single integer n (2 le n le 100,000) — the number of employees in the company. The second line contains n-1 integers m_2, m_3, ..., m_n (1 le m_i < i) which indicates that employee i\'s direct manager is m_i. The third line contains n-1 integers t_2, t_3, ..., t_n (1 le t_i le 10^9) which indicates that employee i (2 le i le n) receives task t_i from their direct manager. -----Output----- Print a single integer — the smallest task number that will be completed by some employee in the company. -----Examples----- Input 6 1 2 1 4 2 7 5 3 10 2 Output 2 Input 4 1 1 1 4 3 2 Output 2 -----Note----- In the first example, the company hierarchy and task assignments are as follows: - Employee 1 is the CEO. - Employee 2 works directly under Employee 1 with task 7. - Employee 3 works directly under Employee 2 with task 5. - Employee 4 works directly under Employee 1 with task 3. - Employee 5 works directly under Employee 4 with task 10. - Employee 6 works directly under Employee 2 with task 2. The tasks can be viewed as follows: - Employee 2 completes task 7. - Employee 3 completes task 5. - Employee 4 completes task 3. - Employee 5 completes task 10. - Employee 6 completes task 2. The smallest task number completed is 2. In the second example, the company hierarchy and tasks are simpler: - Employees 2, 3, and 4 all work directly under Employee 1 with tasks 4, 3, and 2 respectively. Thus, the smallest task number completed is 2.","solution":"def smallest_completed_task(n, managers, tasks): Determines the smallest task number that will be completed by some employee in the company. Parameters: n (int): The number of employees. managers (list[int]): The list of direct managers for employees 2 to n. tasks (list[int]): The list of tasks given to employees 2 to n. Returns: int: The smallest task number completed. return min(tasks)"},{"question":"In a distant kingdom, there lies a labyrinthine garden that the Prince must navigate. The garden is represented by a grid of size N times M, where each cell is either a walkable path denoted by `\'.\'` or an obstacle denoted by `\'#\'`. The Prince starts at the top-left corner of the grid (cell `(0, 0)`) and aims to reach the bottom-right corner (cell `(N-1, M-1)`). He can move in four possible directions: up, down, left, and right, but he cannot move into cells containing obstacles. Given the grid, determine if it is possible for the Prince to reach the bottom-right corner. If it is possible, print the minimum number of steps he needs to take to get there. If it is not possible, print `-1`. ------ Input: ------ The first line contains T, the number of test cases. The first line of each test case contains two integers N and M. The next N lines contain M characters each, denoting the garden grid. ------ Output: ------ For each test case, print a single line containing the minimum number of steps the Prince needs to take to get from the top-left to the bottom-right corner. If it is impossible, print `-1`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 ------ Sample Input: ------ 2 3 3 ..# #.# ... 4 4 .... #. ..#. .... ------ Sample Output: ------ 4 6 ------ Explanation: ------ Case 1: The Prince can navigate through the path `(0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2)` which takes 4 steps. Case 2: The Prince can navigate through the path `(0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3)` which takes 6 steps.","solution":"from collections import deque def min_steps_to_reach_end(garden): N = len(garden) M = len(garden[0]) if garden[0][0] == \'#\' or garden[N - 1][M - 1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([((0, 0), 0)]) visited = set((0, 0)) while queue: (x, y), steps = queue.popleft() if x == N - 1 and y == M - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and garden[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), steps + 1)) return -1 def solve(test_cases): results = [] for case in test_cases: N, M, garden = case result = min_steps_to_reach_end(garden) results.append(result) return results"},{"question":"Write a function that takes a positive integer and returns a list containing all of its unique prime factors. The function should take in a number and return a list of primes that can be multiplied together to result in the input number. Prime factors of a number are the prime numbers that divide the number exactly (without leaving a remainder) and are used in the prime factorization of the number. # Examples - Input: 12 Output: [2, 3] - Input: 60 Output: [2, 3, 5] - Input: 37 Output: [37]","solution":"def unique_prime_factors(n): Returns a list of unique prime factors of a positive integer n. factors = [] # Check for the number of 2s that divide n if n % 2 == 0: factors.append(2) while n % 2 == 0: n = n // 2 # n must be odd at this point, check for remaining prime factors for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: factors.append(i) while n % i == 0: n = n // i # This condition is to check if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"John has a 2D array B of size p x q, where each element B_{ij} (1 ≤ B_{ij} ≤ p * q) is a distinct integer. He wants to rearrange this array into another 2D array B\' of the same size with some specific constraints: 1. **Non-ascending Rows**: Each row in B\' should be sorted in non-ascending order. 2. **Non-descending Columns**: Each column in B\' should be sorted in non-descending order. John asks for your help to find such an arrangement or determine that it’s impossible to do so. # Input - The first line of input contains two integers, p and q (1 ≤ p, q ≤ 100), representing the number of rows and columns of the matrix B. - Each of the following p lines contains q integers, where the j-th integer in the i-th line denotes B_{ij} (1 ≤ B_{ij} ≤ p * q). # Output - If it\'s impossible to rearrange the array to meet the constraints, print -1. - Otherwise, output the resulting p x q array B\' where each number from 1 to p * q appears exactly once, each row is sorted in non-ascending order, and each column is sorted in non-descending order. # Examples Input ``` 3 3 9 1 3 5 6 8 7 4 2 ``` Output ``` 9 8 7 6 5 4 3 2 1 ``` Input ``` 2 4 8 6 2 4 5 3 1 7 ``` Output ``` 8 7 6 5 4 3 2 1 ``` # Note - In the first example, the resulted matrix B\' has rows sorted in non-ascending order and columns sorted in non-descending order, satisfying the constraints. - In the second example, it is also possible to generate a valid matrix B\'. Help John to achieve this goal or determine if it\'s impossible.","solution":"def rearrange_matrix(p, q, B): Rearranges the 2D array B of size p x q to meet the constraints: 1. Each row in B\' should be sorted in non-ascending order. 2. Each column in B\' should be sorted in non-descending order. # Step 1: Flatten the 2D array into a 1D list and sort it in descending order. flat_list = sorted([item for sublist in B for item in sublist], reverse=True) # Step 2: Initialize the resulting matrix B\' with zeros. B_prime = [[0] * q for _ in range(p)] # Step 3: Place the sorted elements into B\' to fulfill the constraints. for col in range(q): for row in range(p): B_prime[row][col] = flat_list[row * q + col] return B_prime # Function to format the output def format_matrix(mat): return \'n\'.join(\' \'.join(map(str, row)) for row in mat)"},{"question":"Write a function that takes an integer input `n` and returns the product of all prime numbers less than or equal to `n`. Prime numbers are natural numbers greater than 1 that are only divisible by 1 and themselves. e.g. If `n = 10`: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. Thus, the function should return `2 * 3 * 5 * 7 = 210`. If `n` is less than 2, return 1 since there are no prime numbers to multiply. ```python def prime_product(n): # Your code here ``` Test Cases: 1. `prime_product(10)` should return `210`. 2. `prime_product(5)` should return `30`. 3. `prime_product(1)` should return `1`. 4. `prime_product(20)` should return `9699690`.","solution":"def prime_product(n): Returns the product of all prime numbers less than or equal to n. if n < 2: return 1 def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True product = 1 for i in range(2, n + 1): if is_prime(i): product *= i return product"},{"question":"Implement a function which creates a **[linked list](https://en.wikipedia.org/wiki/Linked_list)** from a given list of integers where each node contains an integer and a pointer to the next node in the list. The function should return the head of the linked list. 1. The linked list should support only forward traversal. 2. Each node should be represented as a dictionary with two keys: \\"value\\" and \\"next\\". 3. The \\"value\\" key should store the integer value of the node. 4. The \\"next\\" key should store the reference to the next node which is also a dictionary, or `None` if it\'s the last node. 5. The function should handle an empty list input by returning `None`. # Examples: ```python >>> linked_list([]) None >>> linked_list([1]) {\'value\': 1, \'next\': None} >>> linked_list([1, 2, 3]) {\'value\': 1, \'next\': {\'value\': 2, \'next\': {\'value\': 3, \'next\': None}}} >>> linked_list([10, 20, 30]) {\'value\': 10, \'next\': {\'value\': 20, \'next\': {\'value\': 30, \'next\': None}}} ```","solution":"def linked_list(elements): Creates a linked list from a given list of integers. Each node is represented as a dictionary with two keys: \'value\' and \'next\'. if not elements: return None def create_node(index): if index == len(elements): return None return {\'value\': elements[index], \'next\': create_node(index + 1)} return create_node(0)"},{"question":"Sarah has a unique wall decoration task. She has a number of wooden tiles of the same size, which she wants to arrange on a wall in a grid format. Sarah wants to make sure that no two adjacent tiles (either horizontally or vertically) are of the same color. She has an unlimited number of tiles in two different colors: Red and Black. Given the dimensions of the wall, Sarah needs your help to check if it\'s possible to arrange the tiles in the desired manner. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two integers m and n, representing the number of rows and columns of the wall respectively. -----Output:----- For each test case, print \\"YES\\" if it is possible to arrange the tiles as required, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 100000 - 1 leq m, n leq 10^{18} -----Sample Input:----- 3 2 3 4 5 1 1 -----Sample Output:----- YES YES YES","solution":"def is_possible_to_arrange(m, n): Given the dimensions of the wall (m rows and n columns), determine if it\'s possible to arrange the tiles so that no two adjacent tiles have the same color. # If either m or n is even, we can alternate colors in rows or columns if m % 2 == 0 or n % 2 == 0: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for m, n in test_cases: results.append(is_possible_to_arrange(m, n)) return results"},{"question":"Write a function that takes an integer input `n` and returns the sum of all prime numbers less than or equal to `n`. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves. The tests will check various values where `n` ranges up to 10000.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n + 1, start): sieve[i] = False return sum(i for i in range(n + 1) if sieve[i])"},{"question":"You are given an array of integers representing strengths of soldiers in your army. Your task is to form a team such that the sum of the strengths of the team members is maximally close to a given target k, but not exceeding it. Each soldier can either be included in the team or left out. Determine the maximum possible sum of strengths of the team members that is not greater than the target sum k. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9) — the number of soldiers and the target sum respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the strengths of the soldiers. -----Output----- Print a single integer — the maximum possible sum of strengths of the team members that is not greater than k. -----Examples----- Input 5 10 2 3 5 8 4 Output 10 Input 3 8 1 3 5 Output 8 -----Note----- In the first test sample, the optimal team should consist of the soldiers with strengths 2, 3, and 5, whose total strength is exactly 10. In the second test sample, the optimal team should consist of the soldiers with strengths 3 and 5, whose total strength is exactly 8.","solution":"def max_team_strength(n, k, strengths): dp = [0] * (k + 1) for strength in strengths: for current_sum in range(k, strength - 1, -1): dp[current_sum] = max(dp[current_sum], dp[current_sum - strength] + strength) return dp[k]"},{"question":"You are given an integer n. Print the numbers from 1 to n in a specific pattern such that in the i-th line there are i repetitions of the i-th number. The index i starts from 1. Input The single line of input contains an integer n (1 ≤ n ≤ 50). Output Output the described number pattern. Examples Input 3 Output 1 22 333 Input 5 Output 1 22 333 4444 55555","solution":"def generate_pattern(n): Generates a pattern where each i-th line contains i repetitions of the number i. Parameters: n (int): The number of lines in the pattern. Should be between 1 and 50 inclusive. Returns: list: List of strings representing each line of the pattern. pattern = [] for i in range(1, n + 1): pattern.append(str(i) * i) return pattern"},{"question":"Consider a 2D grid of size n times m where each cell contains a non-negative integer representing the difficulty of traversing that cell. You are initially standing at the top-left corner of the grid (cell [0][0]) and you want to reach the bottom-right corner of the grid (cell [n-1][m-1]). You may only move either down or right at any point in time. Your task is to find a path from the top-left corner to the bottom-right corner such that the total difficulty of the path is minimized. Function Description Complete the function `minPathDifficulty` in the editor below. `minPathDifficulty` has the following parameter(s): - `int n`: the number of rows in the grid - `int m`: the number of columns in the grid - `vector<vector<int>> grid`: a 2D grid of size n times m where each element grid[i][j] is the difficulty of cell [i][j] Returns - `int`: the minimum total difficulty of a path from the top-left to the bottom-right corner Input Format The first line contains two integers, `n` and `m`. Each of the next `n` lines contains `m` space-separated integers representing the difficulty of traversing each cell in the grid. Constraints 1 leq n, m leq 1000 0 leq grid[i][j] leq 1000 Sample Input 0 3 3 1 3 1 1 5 1 4 2 1 Sample Output 0 7 Explanation 0 The path with the minimum total difficulty of 7 is: (0,0) to (0,1) to (0,2) to (1,2) to (2,2) Thus, the sum of path difficulties is 1+3+1+1+1=7. Sample Input 1 2 2 1 2 1 1 Sample Output 1 3 Explanation 1 The path with the minimum total difficulty of 3 is: (0,0) to (1,0) to (1,1) Thus, the sum of path difficulties is 1+1+1=3.","solution":"import heapq def minPathDifficulty(n, m, grid): def in_bounds(x, y): return 0 <= x < n and 0 <= y < m directions = [(1, 0), (0, 1)] pq = [(grid[0][0], 0, 0)] # (difficulty, row, col) min_difficulty = {(0, 0): grid[0][0]} while pq: difficulty, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return difficulty for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny): new_difficulty = difficulty + grid[nx][ny] if (nx, ny) not in min_difficulty or new_difficulty < min_difficulty[(nx, ny)]: min_difficulty[(nx, ny)] = new_difficulty heapq.heappush(pq, (new_difficulty, nx, ny)) return -1 # should never reach here if the input is correct # Example usage if __name__ == \\"__main__\\": n, m = 3, 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(minPathDifficulty(n, m, grid)) # Output should be 7"},{"question":"John is in charge of arranging a company\'s team-building events. He has a list of events, each with a specific start and end time. His goal is to schedule all events in such a way that no events overlap. If it\'s not possible to schedule all events without overlaps, he wants to find out the maximum number of events that can be scheduled without any overlap. You need to help John by writing a program that, given a list of events, determines the maximum number of non-overlapping events that can be scheduled. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of events. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9) — the start and end times of the i-th event. Output Print a single integer — the maximum number of non-overlapping events that can be scheduled. Examples Input 4 1 3 2 4 3 5 7 10 Output 3 Input 3 5 6 1 3 7 9 Output 3 Note In the first example, you can schedule the events [1, 3], [3, 5], and [7, 10] without any overlaps. Therefore, the maximum number of non-overlapping events is 3. In the second example, you can schedule all three events since none of them overlap. Therefore, the maximum number of non-overlapping events is 3.","solution":"def max_non_overlapping_events(events): Given a list of events with their start and end times, returns the maximum number of non-overlapping events. # Sort events based on their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"You are given an array of integers and a series of queries. For each query, you need to compute the sum of the elements in a given subrange of the array, but with a twist: you have to skip every second element in the specified subrange when calculating the sum. Consider the following problem: You are given an array of integers `arr` of length `n`, and `q` queries. Each query is defined by two integers `l` and `r` (1 ≤ l ≤ r ≤ n). For each query, you need to find the sum of elements in the selected subrange `[l, r]` of the array, but only include the elements at positions `l, l+2, l+4, …,` up to `r` (that is, skip every second element). Write a function to solve the following problem and perform the specified calculations for all queries. -----Input----- The first line contains two integers `n` and `q` (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains `n` integers `arr[i] (1 ≤ arr[i] ≤ 10^9)` — the elements of the array. The following `q` lines each contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the range for the sum calculation in the query. -----Output----- For each query, output the sum of the specified subrange as described above in a new line. -----Example----- Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 4 8 9","solution":"def sum_subrange_with_skip(arr, queries): Given an array and a list of queries, for each query compute the sum of the subrange while skipping every second element. Returns a list of the results for each query. results = [] for l, r in queries: sum_subrange = 0 for i in range(l - 1, r, 2): # Adjust indexing as l and r are 1-based sum_subrange += arr[i] results.append(sum_subrange) return results"},{"question":"A software company wants to implement a feature in their text editor to detect the longest substring of distinct characters. The feature should determine the length of the longest substring within a given input string such that all characters in the substring are unique. To achieve this, the users will be asked to provide a string, and the program should output the length of the longest substring with all distinct characters. Input A single line containing the string s (1 ≤ |s| ≤ 105) that consists of lowercase English letters. Output A single integer indicating the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Input dvdf Output 3 Note In the first example, the longest substring with all unique characters is \\"abc\\", with a length of 3. In the second example, the longest substring with all unique characters is \\"b\\", with a length of 1. In the third example, the longest substring with all unique characters is \\"wke\\", with a length of 3. In the fourth example, the longest substring with all unique characters is \\"vdf\\", with a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Phoebe loves solving puzzles. She recently came across a unique type of grid-based puzzle game. In this game, she is given a grid of size N x M containing non-negative integers. The goal of the game is to find a path from the top-left corner to the bottom-right corner of the grid such that the sum of the numbers along the path is maximized. Phoebe can only move either right or down from a given cell. You are required to help Phoebe find the maximum possible sum she can achieve following the rules mentioned. Example 1: Input: N = 3, M = 3 Grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 12 Explanation: The path is 1 → 3 → 5 → 2 → 1, which sums to 12. Example 2: Input: N = 2, M = 2 Grid = [ [1, 2], [1, 1] ] Output: 4 Explanation: The path is 1 → 2 → 1, which sums to 4. Your Task: You do not need to read input or print anything. Your task is to complete the function `maxPathSum()` which takes the integers N and M and a 2D array `Grid` as input parameters and returns the maximum sum possible along a valid path from the top-left corner to the bottom-right corner of the grid. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 50 0 ≤ Grid[i][j] ≤ 100","solution":"def maxPathSum(N, M, Grid): Function to find the maximum path sum from top-left to bottom-right in a grid. :param N: int - number of rows in the grid :param M: int - number of columns in the grid :param Grid: List[List[int]] - 2D array representing the grid :return: int - the maximum sum along a valid path dp = [[0] * M for _ in range(N)] # Initialize the top-left corner dp[0][0] = Grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + Grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + Grid[i][0] # Fill the remaining cells for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Grid[i][j] return dp[N-1][M-1]"},{"question":"In a new town, there are \'R\' number of roads and \'H\' number of houses. Each house needs access to at least one road directly, and no road can be common between two houses. Determine the minimum number of additional roads required such that all houses have access to at least one road, ensuring each road is unique to a house. Example 1: Input: R = 5, H = 7 Output: 2 Explanation: Currently, there are 5 roads, and we need 2 more roads to accommodate all 7 houses uniquely. Example 2: Input: R = 3, H = 2 Output: 0 Explanation: There are already enough (3) roads for 2 houses, so no additional roads are required. Your Task: You do not need to read input or print anything. Your task is to complete the function additionalRoads() which takes R and H as input parameters and returns the minimum number of additional roads required. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ R, H ≤ 1000","solution":"def additionalRoads(R, H): Returns the minimum number of additional roads required such that each house has access to at least one unique road. Parameters: R (int): Number of roads. H (int): Number of houses. Returns: int: Minimum number of additional roads required. if H <= R: return 0 else: return H - R"},{"question":"Alice is organizing a treasure hunt for her friends. The treasure map is represented by a grid of N x M cells. Each cell contains a digit from \'0\' to \'9\'. The digit in each cell represents the time in hours required to dig the cell to possibly find a treasure there. The treasure can only be hidden in cells with even digits. Therefore, Alice wants to quickly identify all cells that are valid places for hiding the treasure (cells with even digits), and she needs to calculate the total time required to dig all these cells. Write a program that reads the dimensions of the grid and the grid itself, and then outputs the total number of valid cells for hiding the treasure, as well as the total digging time for these cells. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next N lines contains a string of M digits. Output Print two space-separated integers: the total number of valid cells for hiding the treasure, and the total time required to dig these cells. Example Input 3 3 123 456 789 Output 4 20 Explanation In the example, the grid is: 123 456 789 The valid cells with even digits are: 2, 4, 6, 8. Therefore, the total number of valid cells is 4, and the total time required to dig these cells is 2 + 4 + 6 + 8 = 20.","solution":"def find_treasure_cells(n, m, grid): total_valid_cells = 0 total_digging_time = 0 for row in grid: for cell in row: if cell in \'02468\': total_valid_cells += 1 total_digging_time += int(cell) return total_valid_cells, total_digging_time"},{"question":"Problem Statement : Calculate the Productivity Score Input First line of input contains N - No of employees. (1 ≤ N ≤ 100) Next N lines of input contain the number of hours each employee has worked in a week (integer between (1 ≤ hours ≤ 168). Output N lines should contain a single integer each representing the productivity score of each employee calculated as `(hours worked * 7) % 100`. SAMPLE INPUT 4 40 20 68 100 SAMPLE OUTPUT 80 40 76 0","solution":"def productivity_scores(n, hours): Returns the productivity scores for each employee. Parameters: n (int) : Number of employees hours (list) : List of hours each employee has worked in a week Returns: list : List of productivity scores for each employee return [(hour * 7) % 100 for hour in hours]"},{"question":"Given a binary search tree (BST), find and return the sum of all elements between two given nodes (inclusive of the nodes themselves) that are within a specific range [low, high]. The binary search tree is structured in such a way that for each node: - All values in the left subtree are smaller than the node\'s value. - All values in the right subtree are larger than the node\'s value. Example 1: Input: 10 / 5 20 / / 3 7 15 30 Range = [7, 20] Output: 52 Explanation: Elements in the range [7, 20] are {7, 10, 15, 20}. Their sum is 52. Example 2: Input: 15 / 10 25 / / 7 13 20 30 Range = [10, 25] Output: 83 Explanation: Elements in the range [10, 25] are {10, 13, 15, 20, 25}. Their sum is 83. Your Task: You don\'t need to read input or print anything. Complete the function rangeSumBST() which takes the root of the binary search tree and the range [low, high] as input parameters and returns the sum of all elements within the range. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H) where H is the height of the tree. Constraints: - The number of nodes in the BST is in the range [1, 2 * 10^5]. - -10^4 <= Node value <= 10^4 - 1 <= low <= high <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rangeSumBST(root, low, high): Returns the sum of all elements within the range [low, high] in the binary search tree with the given root. if root is None: return 0 total_sum = 0 if low <= root.val <= high: total_sum += root.val if root.val > low: total_sum += rangeSumBST(root.left, low, high) if root.val < high: total_sum += rangeSumBST(root.right, low, high) return total_sum"},{"question":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your task is to write a function that returns an integer representing the length of the longest consecutive sequence in the array. The sequence must be strictly in ascending order without any gaps. Input The input contains a single line with a list of integers. The integers are separated by a space. Output Print a single integer representing the length of the longest consecutive elements sequence. Constraints -10^9 ≤ arr[i] ≤ 10^9 0 ≤ len(arr) ≤ 10^5 Example Input: 100 4 200 1 3 2 Output: 4 Explanation The longest consecutive elements sequence is [1, 2, 3, 4]. Hence, the length is 4.","solution":"def longest_consecutive_sequence(arr): Given an unsorted array of integers, returns the length of the longest consecutive elements sequence. if not arr: return 0 nums_set = set(arr) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # only check for the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A company allows its employees to track and log how many hours they have worked throughout the week. The week is represented as an array of integers where each integer represents hours worked on a particular day: `[Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]`. The company has a policy that any additional hours worked beyond a regular 40-hour workweek should be counted as overtime. Write a function `calculate_overtime` that takes in an array of 7 integers representing the hours worked each day of the week and returns the number of overtime hours worked. For example: ```python def calculate_overtime(hours): # your code here # Test cases print(calculate_overtime([8, 8, 8, 8, 8, 0, 0])) # Output should be 0 (exactly 40 hours) print(calculate_overtime([10, 10, 10, 10, 10, 5, 0])) # Output should be 15 (55 total hours - 40 regular hours) print(calculate_overtime([5, 5, 5, 5, 5, 0, 0])) # Output should be 0 (25 total hours) print(calculate_overtime([9, 9, 9, 9, 9, 2, 1])) # Output should be 12 (48 total hours - 40 regular hours) ``` **Constraints**: - The input array will always contain exactly 7 non-negative integers. - The sum of work hours will not exceed 168 (the total number of hours in a week).","solution":"def calculate_overtime(hours): Calculate the number of overtime hours worked in a week. Parameters: hours (list): A list of 7 integers representing hours worked on each day of the week. Returns: int: Number of overtime hours worked. total_hours = sum(hours) overtime_hours = max(0, total_hours - 40) return overtime_hours"},{"question":"Write a program that reads a sequence of datasets. Each dataset contains a pair of integers representing the length and width of a rectangle. The end of the input is indicated by a line containing two zeroes. For each dataset, the program should calculate and output the perimeter of the rectangle. Input Each input contains a pair of integers separated by a space in a line. The first integer represents the length and the second integer represents the width. Both integers are non-negative and not greater than 1000. The end of the input is indicated by a pair of zeroes (`0 0`). Output For each dataset, print the perimeter of the rectangle on a new line. If either the length or the width is zero, the perimeter is zero. Example Input 3 4 5 5 0 0 Output 14 20","solution":"def calculate_perimeters(input_data): Takes a sequence of datasets represented as a list of strings. Each string contains a pair of integers representing the length and the width of a rectangle. Returns a list of the perimeters of the rectangles. perimeters = [] for data in input_data: length, width = map(int, data.split()) if length == 0 and width == 0: break perimeter = 2 * (length + width) perimeters.append(perimeter) return perimeters"},{"question":"A group of campers is trying to organize their backpacks for a long trek. Each camper has n items in their backpack. They decided to distribute the items among themselves in such a way that no item is left unassigned and each camper can carry at most one item. Each item has a particular weight, and the objective is to ensure that the difference between the heaviest and lightest item each camper carries is minimized to make the load as balanced as possible. Given the weights of the items in the backpacks for each camper, you need to determine the minimum possible difference between the heaviest and lightest items that any camper carries after the optimal distribution. Input: The first line of input contains a single integer T, the number of test cases. Each test case starts with a single integer n, the number of items in the backpack. The next line contains n space-separated integers representing the weights of the items in the backpack. Output: For each test case, output a single integer, the minimum possible difference between the heaviest and lightest items that any camper carries. Constraints: 1 ≤ T ≤ 10 2 ≤ n ≤ 10^5 1 ≤ weight of each item ≤ 10^4 Sample Input: 2 3 2 4 6 4 1 3 6 7 Sample Output: 2 1 Explanation: Test case 1: Distributing items [2], [4], [6], the minimum difference is 2, with weights [2, 4] (difference 2) and [2, 6] or [4, 6] (difference 2). Test case 2: Distributing items [1, 3, 6], [7] the differences are [1, 3] (difference 2) and [6, 7] (difference 1)","solution":"def min_diff(T, test_cases): results = [] for case in test_cases: n = case[0] weights = sorted(case[1]) min_diff = float(\'inf\') for i in range(1, n): diff = weights[i] - weights[i-1] if diff < min_diff: min_diff = diff results.append(min_diff) return results"},{"question":"Given a string containing only lowercase alphabets, determine the minimum number of characters that need to be added to make the string a palindrome. Example 1: Input: str = \\"abca\\" Output: 1 Explanation: By adding 1 character \'a\' at the beginning or end, we can make it a palindrome \\"abcba\\" or \\"abcca\\". Example 2: Input: str = \\"race\\" Output: 3 Explanation: By adding 3 characters \'e\', \'c\', \'a\' at the beginning, we can make it a palindrome \\"ecarace\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minAddToMakePalindrome() that takes a string (str) and returns an integer displaying the minimum number of characters to be added to make the string a palindrome. The driver code takes care of the printing. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ str.length ≤ 10^{3}","solution":"def minAddToMakePalindrome(s): Returns the minimum number of characters that need to be added to make the string a palindrome. :param s: str - The input string containing only lowercase alphabets :return: int - The minimum number of characters to make the string a palindrome def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n] rev_s = s[::-1] longest_palindromic_subseq_length = lcs(s, rev_s) return len(s) - longest_palindromic_subseq_length"},{"question":"Given a list of integers, nums, write a function that returns a list of tuples, where each tuple contains three integers from nums that sum up to zero. The returned list should not contain duplicate tuples, and the order of the tuples does not matter. ```python three_sum([-1, 0, 1, 2, -1, -4]) => [(-1, -1, 2), (-1, 0, 1)] three_sum([0, 0, 0, 1, -1]) => [(0, 0, 0), (-1, 0, 1)] ``` Explanation: In the first example, the input list `[-1, 0, 1, 2, -1, -4]` contains two triplets that sum up to zero: `(-1, -1, 2)` and `(-1, 0, 1)`. The function should return these two triplets. In the second example, the input list `[0, 0, 0, 1, -1]` contains two triplets that sum up to zero: `(0, 0, 0)` and `(-1, 0, 1)`. Note that duplicate triplets should be avoided, thus the output should only include unique triplets.","solution":"def three_sum(nums): nums.sort() result = set() for i in range(len(nums)-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: result.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif s < 0: left += 1 else: right -= 1 return list(result)"},{"question":"In a certain country, mobile data is very expensive. To manage his data usage, Chef has decided to only download files that he can afford with the given amount of data he has. There are N files that Chef can choose to download, and the ith file has a size of S_i MB. Chef has a total of D MB of data available. Chef wants to download the maximum number of files without exceeding the available data. Given the file sizes and the available data, determine the maximum number of files that Chef can download. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains two integers N and D. - The second line contains N space-separated integers where the ith integer represents S_i, the size of the ith file in MB. ------ Output Format ------ For each test case, output in a single line the maximum number of files Chef can download. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ S_i ≤ 10^4 1 ≤ D ≤ 10^9 ----- Sample Input 1 ------ 3 5 100 20 10 30 50 40 3 60 25 30 50 4 70 10 20 30 40 ----- Sample Output 1 ------ 4 2 3 ----- Explanation 1 ------ Test Case 1: Chef has 100 MB of data. He can download the 2nd, 1st, 3rd, and 5th files for a total size of 90 MB. Test Case 2: Chef has 60 MB of data. He can download the 1st and 2nd files for a total size of 55 MB. Test Case 3: Chef has 70 MB of data. He can download the 1st, 2nd, and 3rd files for a total size of 60 MB.","solution":"def max_files(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][0] S = sorted(test_cases[i][1]) count = 0 total_size = 0 for size in S: if total_size + size > D: break total_size += size count += 1 results.append(count) return results"},{"question":"Daniel is an avid traveler and enjoys visiting various cities around the world. He meticulously plans his trips to ensure he visits every city on his list. To optimize his travel, Daniel uses a particular travel schedule where he starts from a city and repeatedly travels to the next city in the same order until he returns to the starting city. For his next trip, Daniel has planned to visit N cities. He has a particular list of M travel pairs that indicates which city he can travel to directly from another city. However, Daniel\'s plan is to start from a specific city and try to determine if it\'s possible to visit all N cities exactly once and return to the starting city - essentially forming a cycle that includes all cities. Given the list of cities and travel pairs, can you help Daniel determine if there exists such a cycle? -----Input----- The first line of the input contains two integers N and M, 2 le N le 1000, 1 le M le 10000. The next M lines contain two integers u and v each, indicating that Daniel can travel directly from city u to city v. You may assume that 1 le u, v le N and u ne v. -----Output----- If it\'s possible to find a cycle that includes all cities starting and ending at the same city, print \\"Yes\\". Otherwise, print \\"No\\". -----Examples----- Sample Input: 4 4 1 2 2 3 3 4 4 1 Sample Output: Yes Sample Input: 4 3 1 2 2 3 3 4 Sample Output: No","solution":"def is_hamiltonian_cycle(N, M, travel_pairs): # Create adjacency list from collections import defaultdict graph = defaultdict(list) for u, v in travel_pairs: graph[u].append(v) graph[v].append(u) def backtrack(path, visited): # Base case: if path contains N nodes and there\'s an edge back to the start if len(path) == N and path[0] in graph[path[-1]]: return True # Continue with backtracking current = path[-1] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True path.append(neighbor) if backtrack(path, visited): return True path.pop() visited[neighbor] = False return False # Start with each node and check if there\'s a Hamiltonian cycle starting from it for i in range(1, N + 1): visited = [False] * (N + 1) visited[i] = True if backtrack([i], visited): return \\"Yes\\" return \\"No\\""},{"question":"Given a string of words, write a function that returns the longest word within the string. If multiple words have the same length, return the last one that occurs. For this task, a word is defined as a sequence of non-space characters. Words in the string are separated by a single space. Function signature: ```python def find_longest_word(s: str) -> str: ``` **Examples:** - `find_longest_word(\\"I love programming\\")` should return `\\"programming\\"` - `find_longest_word(\\"hello world there\\")` should return `\\"there\\"` - `find_longest_word(\\"a bb ccc ddd\\")` should return `\\"ddd\\"` **Constraints:** - The input string `s` will contain only lowercase and uppercase letters, as well as spaces. - The input string `s` will not be empty.","solution":"def find_longest_word(s: str) -> str: words = s.split() longest_word = \\"\\" for word in words: if len(word) >= len(longest_word): longest_word = word return longest_word"},{"question":"**Vowel Count Challenge** Write a function that takes a string as an argument and returns the count of vowel characters (a, e, i, o, u) present in the string. The function should be case-insensitive, meaning it should count both uppercase and lowercase vowels. If the string is empty or contains no vowels, the function should return 0. Notes: * The string can have any length, including an empty string. * The function should only count standard English vowels.","solution":"def count_vowels(s: str) -> int: Returns the count of vowel characters (a, e, i, o, u) present in the string. The function is case-insensitive. vowels = \'aeiou\' count = 0 for char in s.lower(): if char in vowels: count += 1 return count"},{"question":"Given a grid-based city planning layout, you need to calculate the shortest path to travel from the northwest corner of the grid to the southeast corner, only being able to move right or down, while avoiding certain obstructed cells. The grid is represented as a matrix with \'0\'s (accessible cells) and \'1\'s (obstructed cells). You need to compute the number of distinct shortest paths available. Each movement from one cell to an adjacent one counts as a 1-step move. If there is no valid path from the start to the end, return 0. Input The first line of the input contains integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. The next n lines each contain m integers (either \'0\' or \'1\'), describing the layout of the grid. Output Print a single integer — the number of distinct shortest paths from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 1 0 Output 0","solution":"def count_shortest_paths(grid): Count the number of distinct shortest paths from the top-left corner to the bottom-right corner in a grid. n = len(grid) m = len(grid[0]) # If start or end is blocked, there\'s no path if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Create a 2D dp array dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are in charge of a factory where multiple machines are operating in a chain. Each machine processes one specific type of item and then passes it to the next machine in the sequence. Each machine has a specific processing capability, meaning it can process up to a certain number of items per minute. However, if a machine receives more items than it can process in a minute, it gets overloaded and stops working until the next minute starts. You are given a list of integers where each element represents the processing capability of a machine in items per minute. Each machine in the list passes its processed items to the next machine. The first machine in the list receives a continuous stream of items at a constant rate. Write a function to calculate the maximum number of items that the last machine in the chain can successfully process in one minute without any machine in the chain getting overloaded. Function Signature: ```python def max_processed_items(rate: int, capabilities: List[int]) -> int: pass ``` Input: - An integer `rate` (1 ≤ rate ≤ 10^9), indicating the constant rate of incoming items per minute to the first machine. - A list `capabilities` of integers where each element (1 ≤ capabilities[i] ≤ 10^9) represents the processing capability of the i-th machine in items per minute. Output: - An integer representing the maximum number of items the last machine can process in one minute without any machine getting overloaded. Example: ```python rate = 8 capabilities = [10, 5, 7, 3] max_processed_items(rate, capabilities) ``` Expected Output: ```python 3 ``` Explanation: 1. The first machine can process up to 10 items per minute but it receives items at a rate of 8 items per minute. 2. The second machine can process up to 5 items per minute, but it will receive 8 items per minute from the first machine, so it will get overloaded. 3. To prevent overload, the rate of items processed must be controlled so that no machine gets more items than its capacity. In this example, controlling the input rate such that no machine gets overloaded, the last machine can process a maximum of 3 items per minute.","solution":"from typing import List def max_processed_items(rate: int, capabilities: List[int]) -> int: Calculates the maximum number of items the last machine in the chain can process in one minute without overloading any machine in the chain. min_capacity = rate for capacity in capabilities: min_capacity = min(min_capacity, capacity) return min_capacity"},{"question":"# Kth Largest Element in Stream Design a class `KthLargest` that finds the `k`th largest element in a stream of integers. Note that it is the kth largest element in the sorted order, not the kth distinct element. The class should have the following methods: - `__init__(self, k: int, nums: List[int])` initializes the object with the integer `k` and the stream of integers `nums`. - `add(self, val: int) -> int` appends the integer `val` to the stream and returns the element representing the `k`th largest number in the stream. # Example: ``` k = 3 nums = [4, 5, 8, 2] kthLargest = KthLargest(3, nums) kthLargest.add(3) # returns 4 kthLargest.add(5) # returns 5 kthLargest.add(10) # returns 5 kthLargest.add(9) # returns 8 kthLargest.add(4) # returns 8 ``` # Constraints: - `1 <= k <= 10^4` - `0 <= nums.length <= 10^4` - `-10^4 <= nums[i] <= 10^4` - `-10^4 <= val <= 10^4` - `At most 10^4 calls will be made to add.` You may assume that the input stream will always have at least `k` elements when you search for the `k`th element.","solution":"import heapq class KthLargest: def __init__(self, k: int, nums): self.k = k self.heap = nums heapq.heapify(self.heap) # Keep only the k largest elements in the heap while len(self.heap) > k: heapq.heappop(self.heap) def add(self, val: int) -> int: # Add the new value heapq.heappush(self.heap, val) # If the heap grows larger than k, remove the smallest element if len(self.heap) > self.k: heapq.heappop(self.heap) # The kth largest element is the smallest in the heap return self.heap[0]"},{"question":"Julia is an ecologist who studies tree growth. She has a set of unique measurement data points recorded over several years. Each data point records the tree\'s height in centimeters and the year it was measured. Given the data points, Julia wants to determine the maximum height difference between the tree\'s height during different measurement years. Write a program that helps Julia find the largest difference in height between any two years. ---Input--- The first line of input contains an integer n (2 ≤ n ≤ 10^5), the number of distinct measurement years. Each of the following n lines contains two integers y_i and h_i (1 ≤ y_i ≤ 10^9, 0 ≤ h_i ≤ 10^9), where y_i represents the year of the measurement and h_i represents the height of the tree in that year. ---Output--- Output a single integer, which is the maximum height difference between any two years. ---Examples--- Input 3 1990 20 1995 50 2000 30 Output 30 Input 4 2001 15 2006 10 2011 25 2016 5 Output 20 Input 2 2010 100 2020 200 Output 100 ---Note--- In the first example, the maximum height difference is between the years 1995 (height 50) and 1990 (height 20), which is 50 - 20 = 30. In the second example, the maximum height difference is between the years 2011 (height 25) and 2016 (height 5), which is 25 - 5 = 20. In the third example, the maximum height difference is between the years 2010 (height 100) and 2020 (height 200), which is 200 - 100 = 100.","solution":"def max_height_difference(n, measurements): Finds the maximum height difference between any two years. Parameters: n (int): The number of distinct measurement years. measurements (list of tuples): Each tuple contains two integers y_i and h_i, where y_i is the measurement year and h_i is the height of the tree in that year. Returns: int: The maximum height difference between any two years. heights = [h for _, h in measurements] return max(heights) - min(heights)"},{"question":"In this challenge, you need to write a function to determine if a given permutation of integers from 1 to n can be sorted in exactly one operation, where the operation allows you to reverse any subarray of the permutation. A permutation is a sequence where every number from 1 to n appears exactly once. Write a function can_sort_in_one_operation to check if the permutation can be sorted in exactly one operation as described. Input Format The first line of the input contains boldsymbol{t}, the number of test cases. The next boldsymbol{t} sets of lines each contain: - The first line has an integer boldsymbol{n}, the length of the permutation. - The second line contains boldsymbol{n} integers representing the permutation. Constraints 1 leq t leq 1000 2 leq n leq 10^5 The sum of all boldsymbol{n} in one input set will not exceed 10^6. Output Format For each test case, output \\"YES\\" if the permutation can be sorted with exactly one operation, otherwise print \\"NO\\". Sample Input 3 5 3 1 2 5 4 4 4 3 1 2 6 1 2 3 6 5 4 Sample Output YES NO YES Explanation In the first test case, reversing the subarray [3, 1, 2] sorts the permutation into [1, 2, 3, 5, 4], and a subsequent reverse of [5, 4] sorts the final array. Since it requires more than one operation, it should return NO. In the second test case, there is no single subarray reversal that will sort the permutation, so it returns NO. In the third test case, reversing the subarray [6, 5, 4] sorts the permutation into [1, 2, 3, 4, 5, 6], so it returns YES.","solution":"def can_sort_in_one_operation(t, test_cases): results = [] for n, permutation in test_cases: sorted_permutation = sorted(permutation) if permutation == sorted_permutation: results.append(\\"YES\\") continue l, r = 0, n - 1 while l < n and permutation[l] == sorted_permutation[l]: l += 1 while r >= 0 and permutation[r] == sorted_permutation[r]: r -= 1 if l < r and permutation[l:r+1] == sorted_permutation[l:r+1][::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph with `n` vertices and `m` edges, write a program to determine if the graph contains a cycle. Each of the `m` edges connects a pair of vertices. A cycle is formed when a path exists between a node and itself with one or more edges. If the graph contains a cycle, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line contains the number of test cases `t` (1 le t le 10^4). The description of the test cases follows. The first line of each test case contains two integers `n` and `m` (1 le n le 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and edges in the graph, respectively. Each of the next `m` lines contains two integers u and v (1 le u, v le n, u neq v) describing an edge between node `u` and node `v`. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5, and the sum of `m` over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if the graph contains a cycle, otherwise print \\"NO\\". -----Example----- Input 2 3 3 1 2 1 3 2 3 4 2 1 2 3 4 Output YES NO -----Explanation----- In the first test case, the graph contains a cycle involving vertices 1, 2, and 3. In the second test case, the graph is acyclic, thus there is no cycle.","solution":"def find(parent, i): if parent[i] == -1: return i return find(parent, parent[i]) def union(parent, x, y): xset = find(parent, x) yset = find(parent, y) if xset != yset: parent[xset] = yset def has_cycle(n, edges): parent = [-1] * (n + 1) for u, v in edges: x = find(parent, u) y = find(parent, v) if x == y: return \\"YES\\" union(parent, x, y) return \\"NO\\" def detect_cycles_in_graphs(test_cases): results = [] for n, m, edges in test_cases: results.append(has_cycle(n, edges)) return results # Example of usage: # test_cases = [ # (3, 3, [(1, 2), (1, 3), (2, 3)]), # (4, 2, [(1, 2), (3, 4)]) # ] # print(detect_cycles_in_graphs(test_cases)) # Output: [\'YES\', \'NO\']"},{"question":"You are tasked with developing a software system to manage a parking lot with automated billing. The parking lot consists of different sections: Regular, Compact, Handicapped, and Electric. Each section has a limited number of parking spaces and can accommodate cars up to a specified maximum size. Each car that enters the parking lot will have a unique license plate number, a car size, and whether it requires an electric charging spot. The system should log the entry and exit times of each car to calculate the total parking fee. The parking fee is calculated based on the total time spent in the lot and the rates for each type of section. The problem can be simplified to hourly rates for the scope of this task. Write a program that processes a list of events where each event is either an entry or an exit. An entry event includes the car\'s license plate number, the car size, the type of parking spot needed, and the entry time. An exit event includes the car\'s license plate number and the exit time. The program should assign parking spots based on availability and size compatibility and calculate and output the fee for each car upon exit. Assume the following hourly rates: - Regular: 5/hour - Compact: 4/hour - Handicapped: 2/hour - Electric: 6/hour (this includes the cost of charging) Input The first line contains an integer, M, the number of events. The next M lines each represent an event in one of the following formats: - Entry: \\"enter license_plate size type entry_time\\" - Exit: \\"exit license_plate exit_time\\" Each license_plate is a unique string of 1 to 7 characters. Each size is an integer where 1 <= size <= 3, representing small to large cars, respectively. Each type is one of \\"R\\" (Regular), \\"C\\" (Compact), \\"H\\" (Handicapped), \\"E\\" (Electric). Each entry_time and exit_time are given in the 24-hour format \\"HH:MM\\". You can assume the events are provided in chronological order. Output For each exit event, print the license plate number followed by the calculated fee in dollars, on a new line. Assume the parking section sizes are as follows: - Regular: 10 spaces - Compact: 10 spaces - Handicapped: 5 spaces - Electric: 5 spaces Examples Input 6 enter ABC123 2 R 09:00 enter XYZ789 1 C 09:30 exit ABC123 11:00 enter EFG456 3 H 12:00 enter HIJ101 1 E 13:00 exit XYZ789 14:00 Output ABC123 10 XYZ789 18","solution":"def calculate_fee(entry_time, exit_time, rate_per_hour): entry_hours, entry_minutes = map(int, entry_time.split(\\":\\")) exit_hours, exit_minutes = map(int, exit_time.split(\\":\\")) total_entry_minutes = entry_hours * 60 + entry_minutes total_exit_minutes = exit_hours * 60 + exit_minutes total_minutes = total_exit_minutes - total_entry_minutes total_hours = total_minutes / 60 fee = total_hours * rate_per_hour return round(fee) def process_parking_events(events): parking_rates = {\'R\': 5, \'C\': 4, \'H\': 2, \'E\': 6} parking_spaces = {\'R\': 10, \'C\': 10, \'H\': 5, \'E\': 5} occupied_spaces = {\'R\': 0, \'C\': 0, \'H\': 0, \'E\': 0} cars_info = {} result = [] for event in events: parts = event.split() event_type = parts[0] license_plate = parts[1] if event_type == \\"enter\\": car_size = int(parts[2]) parking_type = parts[3] entry_time = parts[4] if occupied_spaces[parking_type] < parking_spaces[parking_type]: occupied_spaces[parking_type] += 1 cars_info[license_plate] = (parking_type, entry_time) elif event_type == \\"exit\\": exit_time = parts[2] if license_plate in cars_info: parking_type, entry_time = cars_info[license_plate] fee = calculate_fee(entry_time, exit_time, parking_rates[parking_type]) result.append(f\\"{license_plate} {fee}\\") occupied_spaces[parking_type] -= 1 del cars_info[license_plate] return result"},{"question":"You are given a string s consisting of the characters \'(\', \')\' and \'*\'. \'*\' can represent either a \'(\' or a \')\' or an empty string. Your task is to determine if the string can be made valid. A string is considered valid if it is possible to delete some of the characters in the string and end up with a valid parenthesis string. A valid parenthesis string satisfies the following conditions: - Any left parenthesis \'(\' must have a corresponding right parenthesis \')\'. - Any right parenthesis \')\' must have a corresponding left parenthesis \'(\'. - Left parenthesis \'(\' must go before the corresponding right parenthesis \')\'. Your task is to determine if the given string can be made valid by replacing \'*\' properly or removing some characters. Constraints: * The length of the string s will be between 1 and 100. * The string s only contains the characters \'(\', \')\' and \'*\'. Input The input is given from Standard Input in the following format: s Output Print \\"YES\\" if the string can be made valid, otherwise print \\"NO\\". Examples Input ()* Output YES Input (*) Output YES Input (*)) Output YES Input (((***))) Output YES Input ((()) Output NO","solution":"def check_valid_string(s: str) -> str: Check if a string containing \'(\', \')\' and \'*\' can be made valid. left_balance = 0 right_balance = 0 # Forward pass for char in s: if char == \'(\' or char == \'*\': left_balance += 1 else: left_balance -= 1 if left_balance < 0: return \\"NO\\" # Backward pass for char in reversed(s): if char == \')\' or char == \'*\': right_balance += 1 else: right_balance -= 1 if right_balance < 0: return \\"NO\\" return \\"YES\\""},{"question":"A DNA sequence is composed of a series of nucleotides represented by the characters \'A\' (adenine), \'T\' (thymine), \'C\' (cytosine), and \'G\' (guanine). DNA evolves through various mutational processes, and one simple type of mutation is a point mutation, where a single nucleotide is replaced with another nucleotide. Another type of mutation is a reverse mutation, where a segment of the DNA sequence is reversed. Given two DNA sequences, determine whether one sequence can be transformed into the other through a single mutation process: either one point mutation or one segment reversal mutation. If it is possible, return `True`, otherwise return `False`. For example: ```python can_mutate(\'ATCG\', \'ATCC\') returns True # One point mutation (G->C) can_mutate(\'ATCG\', \'AGCT\') returns True # One segment reversal (CG reversed to GC) can_mutate(\'ATCG\', \'TCGA\') returns False # Requires more than one segment reversal ``` # Constraints: - The input strings will contain only \'A\', \'T\', \'C\', \'G\'. - The input strings will be of the same length. # Function Signature: ```python def can_mutate(dna1: str, dna2: str) -> bool: pass ``` # Example Test Cases: **Test Case 1:** Input: ```python dna1 = \'ATCG\' dna2 = \'ATCC\' ``` Output: ```python True ``` **Test Case 2:** Input: ```python dna1 = \'ATCG\' dna2 = \'AGCT\' ``` Output: ```python True ``` **Test Case 3:** Input: ```python dna1 = \'ATCG\' dna2 = \'TCGA\' ``` Output: ```python False ```","solution":"def can_mutate(dna1: str, dna2: str) -> bool: Determines if dna1 can be mutated into dna2 through one point mutation or one segment reversal. if dna1 == dna2: return False # No mutation needed # Check for one point mutation differences = sum(1 for a, b in zip(dna1, dna2) if a != b) if differences == 1: return True # Check for one segment reversal mutation n = len(dna1) for i in range(n): for j in range(i+2, n+1): # Reverse the segment between i and j in dna1 mutated_dna = dna1[:i] + dna1[i:j][::-1] + dna1[j:] if mutated_dna == dna2: return True return False"},{"question":"Alice is planning to set up her newly acquired aquarium with different species of fish. Each species of fish needs a specific amount of water to live comfortably in the aquarium. She wants to maximize the number of different species of fish she can keep in her aquarium without exceeding its total water capacity. Given the total water capacity of the aquarium and the amount of water each fish species needs, determine the maximum number of species Alice can keep in her aquarium. -----Input----- The first line contains two integers C and M (1 ≤ C ≤ 10^9, 1 ≤ M ≤ 100) — the total water capacity of the aquarium and the number of different species of fish respectively. The second line contains M integers w_1, w_2, ..., w_M (1 ≤ w_i ≤ 10^8 for all i) — the amount of water each species of fish requires. -----Output----- Output a single integer indicating the maximum number of different species of fish Alice can keep in her aquarium. -----Examples----- Input 100 4 10 20 30 40 Output 4 Input 150 5 50 75 25 50 100 Output 3","solution":"def max_species(C, M, water_needs): Returns the maximum number of different species of fish that can be kept in the aquarium without exceeding the total water capacity. :param C: Total water capacity of the aquarium. :param M: Number of different species of fish. :param water_needs: List of water needs for each species. :return: Maximum number of species that can be kept. # Sort the water needs in ascending order to maximize number of species water_needs.sort() species_count = 0 current_water = 0 for need in water_needs: if current_water + need <= C: current_water += need species_count += 1 else: break return species_count"},{"question":"Your goal is to implement the function **majorityElement** which accepts a list of integers and returns the element that appears more than half the time. If no such element exists, return `None`. Constraints: - Do not use any library functions that directly solve this problem. - Aim for a solution with O(n) time complexity and O(1) space complexity. Examples: ```python majorityElement([3, 3, 4, 2, 4, 4, 2, 4, 4]) => 4 majorityElement([3, 3, 4, 2, 4, 4, 2, 4]) => None ```","solution":"def majorityElement(nums): Returns the element that appears more than half the time in the list nums. If no such element exists, returns None. This implementation uses the Boyer-Moore Voting Algorithm which runs in O(n) time and uses O(1) space. Args: nums (list of int): The list of integers to find the majority element from. Returns: int or None: The majority element or None if no majority element exists. candidate = None count = 0 for num in nums: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 # Verify the candidate if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"Write a function that takes a string of space-separated integers and returns the count of unique integers that appear more than once. The input string may contain both positive and negative integers. For example, given the input: Input \\"4 -2 -2 4 3 -2 3 -2\\" Output 3 Explanation: The numbers that appear more than once are 4, -2, and 3.","solution":"def count_repeated_numbers(s): Given a string of space-separated integers, return the count of unique integers that appear more than once. Parameters: s (str): A string of space-separated integers Returns: int: The count of unique integers that appear more than once nums = list(map(int, s.split())) count_map = {} # Count the occurrence of each number for num in nums: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # Count how many unique numbers appear more than once repeated_count = sum(1 for count in count_map.values() if count > 1) return repeated_count"},{"question":"You have been tasked with automating a process for a book club. Each month, the club receives a long list of book titles written by its members. As part of the automation, you need to write a function that processes this list and identifies the most frequently mentioned book titles. If two or more titles have the same frequency, they should be returned in lexicographical order. You will receive a list of strings representing book titles and should return a list of strings representing the most frequently mentioned books, sorted in lexicographical order. For instance, for an input list: ```python [\\"The Great Gatsby\\", \\"1984\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\", \\"1984\\", \\"1984\\"] ``` Your function should return: ```python [\\"1984\\"] ``` In another case, if the input list is: ```python [\\"Harry Potter\\", \\"The Hobbit\\", \\"Harry Potter\\", \\"To Kill a Mockingbird\\", \\"The Hobbit\\", \\"To Kill a Mockingbird\\"] ``` Your function should return: ```python [\\"Harry Potter\\", \\"The Hobbit\\", \\"To Kill a Mockingbird\\"] ``` Good luck and happy coding!","solution":"from collections import Counter from typing import List def most_frequent_books(titles: List[str]) -> List[str]: Identify the most frequently mentioned book titles. Arguments: titles -- A list of strings representing book titles Returns: A list of strings representing the most frequently mentioned books, sorted in lexicographical order. if not titles: return [] # Count the frequency of each book title counter = Counter(titles) # Find the maximum frequency max_count = max(counter.values()) # Collect all titles with the maximum frequency frequent_titles = [title for title, count in counter.items() if count == max_count] # Sort the titles lexicographically frequent_titles.sort() return frequent_titles"},{"question":"John wants to purchase some new tools for his workshop. Each tool has a price and a weight. John has a maximum weight capacity `W` that he can carry home, and he wants to maximize the total price of the tools he can buy without exceeding that capacity. Given the number of different tools and their respective weights and prices, determine the maximum price John can achieve without exceeding the weight capacity `W`. ------ Input Format ------ - The first line contains an integer `N` - the number of different tools. - The second line contains the integer `W` - the maximum weight capacity John can carry. - The next `N` lines each contain two integers, where the i-th line contains: - `wi` - the weight of the i-th tool. - `pi` - the price of the i-th tool. ------ Output Format ------ Output a single integer, the maximum price John can achieve without exceeding the weight capacity `W`. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ wi ≤ 100 1 ≤ pi ≤ 1000 ------ Sample Input 1 ------ 4 10 4 10 6 40 5 30 3 50 ------ Sample Output 1 ------ 90 ------ Explanation 1 ------ John can choose tools with weights and prices [(4, 10), (3, 50), (3, 30)] for a total weight of 10 and a total price of 90. This maximizes the total price while not exceeding the weight capacity. ------ Sample Input 2 ------ 3 7 4 15 3 20 5 30 ------ Sample Output 2 ------ 35 ------ Explanation 2 ------ John can choose tools with weights and prices [(4, 15), (3, 20)] for a total weight of 7 and a total price of 35. This maximizes the total price while not exceeding the weight capacity.","solution":"def max_price(N, W, weights, prices): # dp array to hold the maximum price we can achieve for each weight limit up to W dp = [[0] * (W + 1) for _ in range(N + 1)] # Loop through each tool for i in range(1, N + 1): wi = weights[i - 1] pi = prices[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + pi) else: dp[i][w] = dp[i-1][w] # The maximum price we can carry in the weight limit W return dp[N][W] # Example function to parse input data and call the main function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) W = int(data[1]) weights = [] prices = [] for i in range(N): wi, pi = int(data[2 + 2 * i]), int(data[3 + 2 * i]) weights.append(wi) prices.append(pi) result = max_price(N, W, weights, prices) print(result)"},{"question":"Sam has a list of unique integers and he wants to determine if there exists a pair of integers in the list whose sum is equal to a given target value. Write a function to help Sam find out if such a pair exists. ------ Input Format ------ The first line contains an integer T, the number of test cases. The following T lines each contain: - An integer k, the target sum - A list of n unique integers separated by spaces ------ Output Format ------ For each test case, output \\"Yes\\" if there is a pair of integers in the list which add up to the target sum k, otherwise output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 100 -10^6 ≤ text{integers in list} ≤ 10^6 -10^6 ≤ k ≤ 10^6 ----- Sample Input 1 ------ 2 10 1 2 3 4 5 6 7 8 1 2 3 9 ----- Sample Output 1 ------ Yes No ----- Explanation 1 ------ For the first test case, the pairs (3, 7), (4, 6), etc. each add up to the target sum 10, so the output is \\"Yes\\". For the second test case, there is no pair of integers in the list that adds up to 8, so the output is \\"No\\".","solution":"def does_pair_exist(target, lst): Determines if there is a pair of integers in the list that add up to target. :param target: the target sum :param lst: list of unique integers :return: \\"Yes\\" if such a pair exists, otherwise \\"No\\" seen = set() for num in lst: if target - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\" def process_test_cases(test_cases): Processes multiple test cases. :param test_cases: list of tuples (target, list_of_integers) :return: list of results for each test case results = [] for target, lst in test_cases: results.append(does_pair_exist(target, lst)) return results"},{"question":"Albert has a challenge for you: Given an array of integers, for each element in the array compute the product of all the elements in the array except the element at the current position. You are required to solve this without using division. Input Format: The first line contains T, the number of test cases. Each test case starts with an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array. Output Format: For each test test case, output N space-separated integers representing the resultant array where each element at index i is the product of all elements in the original array except the element at index i. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^8 ≤ elements in the array ≤ 10^8 SAMPLE INPUT 2 3 1 2 3 4 2 3 4 5 SAMPLE OUTPUT 6 3 2 60 40 30 24","solution":"def product_except_self(arr): Given an array arr, returns a new array such that each element at index i is equal to the product of all the elements of arr except arr[i], without using division. n = len(arr) if n == 0: return [] # Initialize the left and right product arrays left_products = [1] * n right_products = [1] * n # Fill the left products array for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill the right products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Construct the result array result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve(test_cases): Solves the problem for all the given test cases. results = [] for arr in test_cases: results.append(product_except_self(arr)) return results def parse_input(input_text): Parses the input text and returns the test cases. lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] idx = 1 for _ in range(t): n = int(lines[idx]) arr = list(map(int, lines[idx + 1].split())) test_cases.append(arr) idx += 2 return test_cases def format_output(results): Formats the output results for the test cases as a string. output_lines = [] for result in results: output_lines.append(\' \'.join(map(str, result))) return \'n\'.join(output_lines)"},{"question":"Twilight Sparkle is organizing the library\'s book inventory at Canterlot High. She needs to keep track of all borrowed and returned books efficiently. There are B books in the library, each with a unique ID ranging from 1 to B. Twilight maintains a log of operations, where each operation is either a borrow or a return. Each operation is recorded with the book ID and a timestamp indicating the moment the operation happened. Twilight wants to compile a report of the current status of each book, that is, whether the book is currently borrowed or available in the library. Twilight also wants to know the number of books that are currently borrowed. -----Input----- The first line of input contains two integers, B (1 leq B leq 100000), the number of books in the library, and O (1 leq O leq 200000), the number of operations recorded in the log. The next O lines describe the operations, with each line containing a character and an integer: T_ i and ID_ i (1 leq ID_ i leq B). The character T_ i indicates the type of operation (\'B\' for borrow, \'R\' for return), and ID_ i represents the book ID. It\'s guaranteed that no book ID exceeds B. There won\'t be any return operations for a book that is not borrowed, nor borrow operations for a book that is already borrowed. -----Output----- Output two lines: - The first line should be a space-separated list of B binary digits (0 or 1), where the i^text{th} digit is 1 if the i^text{th} book is currently borrowed, otherwise, it is 0. - The second line should contain a single integer, the number of books currently borrowed. -----Examples----- Sample Input 1: 5 4 B 1 B 2 R 1 B 3 Sample Output 1: 0 1 1 0 0 2 Sample Input 2: 3 6 B 1 B 2 R 1 B 3 R 2 B 1 Sample Output 2: 1 0 1 2","solution":"def track_books_status(B, operations): books_status = [0] * B borrowed_count = 0 for operation in operations: op_type, book_id = operation.split() book_id = int(book_id) - 1 # converting to 0-indexed if op_type == \'B\': books_status[book_id] = 1 borrowed_count += 1 elif op_type == \'R\': books_status[book_id] = 0 borrowed_count -= 1 books_status_str = \' \'.join(map(str, books_status)) return books_status_str, borrowed_count"},{"question":"Given a list of integers, write a function that returns the maximum distance between any two identical elements in the list. If there are no identical elements, return -1. Example list=[7, 1, 3, 4, 1, 7] The maximum distance between two identical elements (7) is 5. Function Description Complete the `maximumDistance` function in the editor below. `maximumDistance` has the following parameter: - `int list[n]`: a list of integers. Returns - `int`: the maximum distance between any two identical elements. If no such elements exist, return -1. Input Format The first line contains an integer, n, the size of textbf{list}. The second line contains n space-separated integers textbf{list}[i]. Constraints 1 leq n leq 10^5 1 leq textbf{list}[i] leq 10^9 Sample Input 0 6 7 1 3 4 1 7 Sample Output 0 5 Explanation 0 The element 7 appears at indices 0 and 5, making the maximum distance 5 - 0 = 5. The element 1 appears at indices 1 and 4, making the distance 4 - 1 = 3. Therefore, the output is 5 since it\'s the maximum distance. Sample Input 1 4 1 2 3 4 Sample Output 1 -1 Explanation 1 There are no identical elements in the list, so the output is -1.","solution":"def maximumDistance(lst): Returns the maximum distance between any two identical elements in the list. If there are no identical elements, returns -1. element_indices = {} max_distance = -1 for index, value in enumerate(lst): if value in element_indices: max_distance = max(max_distance, index - element_indices[value]) else: element_indices[value] = index return max_distance"},{"question":"# palindrome_rearrange `Goal`: Write a function that checks whether any permutation of the input string is a palindrome. A palindrome is a word that reads the same backward as forward. The function should return a boolean indicating whether any permutation of the string can form a palindrome. The function should be able to handle strings of varying lengths, including an empty string. # Constraints - The input will be a non-empty string containing only lowercase alphabetic characters. - The output should be `True` if any permutation of the string can form a palindrome, otherwise `False`. # Guidelines 1. A string can be rearranged to form a palindrome if at most one character appears an odd number of times. 2. Iterate through the string to count the frequency of each character. 3. Use the frequency counts to determine if the string can be rearranged into a palindrome. 4. Aim to implement the solution with a time complexity of O(n), where n is the length of the string. # Example `civic` -> `True` ``` - The input string \\"civic\\" is already a palindrome. ``` `ivicc` -> `True` ``` - Rearranging the characters to \\"civic\\" forms a palindrome. ``` `hello` -> `False` ``` - No permutation of \\"hello\\" can form a palindrome. ``` `racecar` -> `True` ``` - The input string \\"racecar\\" is already a palindrome. ``` `aabbacc` -> `True` ``` - Rearranging the characters to \\"accabba\\" forms a palindrome. ```","solution":"def can_form_palindrome(s): Determines if any permutation of the input string can form a palindrome. Parameters: s (str): The input string containing only lowercase alphabetic characters. Returns: bool: True if any permutation can form a palindrome, otherwise False. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Tina is learning about binary search. She has an array of integers where elements are sorted in non-decreasing order. She wants to perform multiple queries on this array. Each query consists of a target value, and Tina needs to determine the first and last position of this target value within the array. If the target value is not present in the array, she should return `-1` for both positions. Help Tina write a function that handles multiple queries and returns the required positions for each target value. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The next line contains n integers a_1, a_2, dots, a_n (-10^9 leq a_i leq 10^9) — sorted in non-decreasing order. The following line contains an integer q (1 leq q leq 10^4) — the number of queries. Each of the next q lines contains an integer x — the target value for that query. It is guaranteed that the sum of n over all test cases does not exceed 10^5, and the sum of all queries over all test cases does not exceed 10^5. -----Output----- For each query, print two integers representing the first and last position of the target value in the array. If the target value is not found, print `-1 -1`. -----Example----- Input 2 5 1 3 3 5 5 3 3 5 7 6 2 4 4 4 4 6 2 4 7 Output 1 2 3 4 -1 -1 1 4 -1 -1 -----Note----- In the first test case, for the target value 3 appearing in the array [1, 3, 3, 5, 5], the first and last positions are 1 and 2. For the target value 5, the positions are 3 and 4. For the target value 7, it is not present, so the output is `-1 -1`. In the second test case, for the target value 4 appearing in the array [2, 4, 4, 4, 4, 6], the first and last positions are 1 and 4. For the target value 7, it is not present, so the output is `-1 -1`.","solution":"from typing import List, Tuple def find_first_and_last_position(arr: List[int], target: int) -> Tuple[int, int]: def binary_search_left(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 else: right = mid - 1 return left def binary_search_right(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] <= target: left = mid + 1 else: right = mid - 1 return right left_index = binary_search_left(arr, target) right_index = binary_search_right(arr, target) if left_index <= right_index: return (left_index, right_index) else: return (-1, -1) def handle_queries(t: int, test_cases: List[Tuple[int, List[int], int, List[int]]]) -> List[List[Tuple[int, int]]]: results = [] for n, arr, q, queries in test_cases: case_results = [] for x in queries: case_results.append(find_first_and_last_position(arr, x)) results.append(case_results) return results"},{"question":"You are a software developer for a transportation company responsible for managing bus schedules. Each bus route is defined by its unique identification number and a list of stops in the order they are visited. However, the bus routes information you have is mixed and doesn\'t always follow a sequential order for the stops, which makes it challenging to understand the actual bus routes. Your task is to write a program that, given a collection of bus routes and stops in a non-sequential order, reconstructs the correct routes by ordering the stops sequentially for each bus route and identifies the starting point of each bus route. The starting point is defined as the stop that is not listed as a destination in any other stop within the same bus route. Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of bus routes. Each of the next n lines begins with an integer r (1 ≤ r ≤ 100) — the bus route\'s unique identification number. This is followed by an integer k (1 ≤ k ≤ 50), which represents the number of stops in this route. Following k pairs of integers a and b (1 ≤ a, b ≤ 1000), where a is the current stop and b is the next stop in the bus route. All stops are unique within a bus route, and it is guaranteed that there is one starting point and one final destination for each bus route. Output For each bus route, output the unique identification number of the bus route, followed by the sequential order of stops starting from the starting point. Example Input 2 1 4 140 150 130 140 120 130 110 120 2 3 200 210 190 200 180 190 Output 1 110 120 130 140 150 2 180 190 200 210 Explanation For bus route 1: The stops are given in the pairs: 140 150, 130 140, 120 130, 110 120. To reconstruct the route, we start from the stop which does not appear as a destination in any other pair, which is 110. Hence, the complete route is 110 -> 120 -> 130 -> 140 -> 150. For bus route 2: The stops are provided as: 200 210, 190 200, 180 190. Starting from the stop that does not appear as a destination in any other pair, which is 180, the complete route is 180 -> 190 -> 200 -> 210.","solution":"def reconstruct_routes(n, bus_routes): Reconstructs the correct sequential order of stops for each bus route and identifies the starting point of each bus route. :param n: int - the number of bus routes :param bus_routes: list of tuples - each tuple contains the route id, number of stops, and pairs of stops :return: list of tuples - each tuple contains the route id followed by the ordered stops result = [] for route in bus_routes: r, k, stops = route stop_dict = {} all_stops = set() destinations = set() for i in range(0, len(stops), 2): a, b = stops[i], stops[i+1] stop_dict[a] = b all_stops.add(a) all_stops.add(b) destinations.add(b) # The starting point is the stop which is not a destination start = (all_stops - destinations).pop() # Reconstruct the route starting from the initial point ordered_stops = [start] while start in stop_dict: start = stop_dict[start] ordered_stops.append(start) result.append((r, ordered_stops)) return result"},{"question":"Given a list of integers, write a function `find_missing_number()` to find the one missing number in a list that contains all integers from 1 to `n` (inclusive), except for one missing number. The list can be unsorted. The list is guaranteed to have exactly one missing number, and it contains distinct integers. Your function should return the missing integer. # Example: ```python find_missing_number([3, 7, 1, 2, 8, 4, 5]) # Returns 6 find_missing_number([1, 2, 4, 6, 3, 7, 8]) # Returns 5 find_missing_number([2, 3]) # Returns 1 ``` # Constraints: - The input list will contain `n-1` integers where `1 <= n <= 10^5`. - The integers in the list will be within the range `[1, n]` without duplicates.","solution":"def find_missing_number(nums): Finds the missing number from the list which contains all elements from 1 to `n` except one. n = len(nums) + 1 total_sum = n * (n + 1) / 2 list_sum = sum(nums) return int(total_sum - list_sum)"},{"question":"You are organizing a programming competition where participants submit code to solve various algorithmic problems. Each submission is evaluated by multiple judges for correctness, efficiency, and code quality. You need to create a system that determines the participant with the highest average score based on the judges\' evaluations. Each participant’s submission is represented by a dictionary with the following keys: - \\"name\\": (string) The participant\'s name. - \\"scores\\": (list) A list of integers representing the scores given by different judges. Your task is to write a function called `top_performer` that takes a list of participants and returns the name of the participant with the highest average score. If there is a tie, return the participant who appears first in the input list. The function should return `False` if any of the following issues are found in the input: - The list contains no participants. - A participant\'s \\"scores\\" are invalid (empty list or scores not being valid integers). __Example:__ ```python p1 = {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 95]} p2 = {\\"name\\": \\"Bob\\", \\"scores\\": [80, 88, 82]} p3 = {\\"name\\": \\"Charlie\\", \\"scores\\": [78, 85, \\"N/A\\"]} top_performer([p1, p2, p3]) # Should return \\"Alice\\" because Charlie\'s scores are invalid. p4 = {\\"name\\": \\"David\\", \\"scores\\": [88, 92, 95]} p5 = {\\"name\\": \\"Eva\\", \\"scores\\": [88, 92, 95]} top_performer([p4, p5]) # Should return \\"David\\" as he appears first in the list. ``` Please ensure that the inputs are valid before computing the result and handle edge cases appropriately.","solution":"def top_performer(participants): Returns the name of the participant with the highest average score. If there is a tie, returns the participant who appears first in the input list. If the input list is empty or contains invalid scores, return False. :param participants: List of dictionaries containing participants\' names and scores. :return: Name of the participant with the highest average score or False if input is invalid. if not participants: return False top_name = None highest_avg_score = float(\'-inf\') for participant in participants: name = participant.get(\\"name\\") scores = participant.get(\\"scores\\") if not name or not scores or not isinstance(scores, list): return False try: avg_score = sum(scores) / len(scores) except (TypeError, ZeroDivisionError): return False if avg_score > highest_avg_score: highest_avg_score = avg_score top_name = name return top_name if top_name else False"},{"question":"Tom is planning a hiking trip and has identified several possible trails in a national park. The park is represented as a grid and the trails are defined as non-overlapping rectangles within this grid. Tom is interested in figuring out how much of the park is covered by the trails. To help Tom, write a program that will determine the total area covered by the trails. Note that some trails might overlap partially or completely, but each piece of land should only be counted once. # Input Format The first line contains a single integer, T, representing the number of trails. Each of the next T lines contains four integers x1, y1, x2, and y2 (0 ≤ x1 < x2, 0 ≤ y1 < y2), which define the bottom-left (x1, y1) and top-right (x2, y2) corners of a trail. # Output Format Output a single integer representing the total area covered by the trails. # Constraints - 1 ≤ T ≤ 100 - 0 ≤ x1, y1, x2, y2 ≤ 1000 # Sample Input ``` 3 1 1 4 4 2 2 6 5 3 3 7 8 ``` # Sample Output ``` 31 ``` # Explanation The trails cover the following areas: - The first trail covers an area of 9. - The second trail covers an area of 12. - The third trail covers an area of 20. Taking into account the overlapping areas, the total unique area covered is 31.","solution":"def calculate_covered_area(trails): max_x = 1000 max_y = 1000 grid = [[False] * (max_y + 1) for _ in range(max_x + 1)] for x1, y1, x2, y2 in trails: for x in range(x1, x2): for y in range(y1, y2): grid[x][y] = True total_area = sum(sum(row) for row in grid) return total_area def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) trails = [tuple(map(int, line.split())) for line in lines[1:T + 1]] return trails input_str = \'\'\'3 1 1 4 4 2 2 6 5 3 3 7 8 \'\'\' trails = parse_input(input_str) print(calculate_covered_area(trails)) # Should print 31"},{"question":"A group of friends wants to play a game where each player draws a card from a deck and the one with the highest value card wins. The deck contains cards numbered from 1 to 100. However, before the game starts, they decide to manipulate the deck by removing some cards to make it more challenging. Each friend removes one card randomly from the deck. Your task is to determine the highest value card left in the deck after all friends have removed their cards. Write a program that reads the number of cards removed and their respective values, and then outputs the highest value card remaining in the deck. Constraints: - The initial deck contains cards numbered from 1 to 100. - No card is removed more than once. - The total number of cards removed will not exceed 99. Input The first line contains an integer `N` (1 ≤ N ≤ 99) representing the number of cards removed. The second line contains `N` integers representing the values of the cards that have been removed. Output Output the highest value card remaining in the deck. Example Input 5 5 25 50 75 100 Output 99","solution":"def highest_card_remaining(N, removed_cards): Finds the highest value card remaining in the deck after removing specified cards. Args: N: An integer representing the number of cards removed. removed_cards: A list of integers representing the values of the cards removed. Returns: The highest value card remaining in the deck. initial_deck = set(range(1, 101)) remaining_deck = initial_deck - set(removed_cards) return max(remaining_deck)"},{"question":"Write a function that takes two inputs, a string `sentence` and a list of words `words_list`. Your task is to replace every word in the `sentence` that is in `words_list` with the reverse of the word. If a word in the `sentence` is not found in `words_list`, it should remain unchanged. The function should return the modified sentence with the words replaced accordingly while maintaining the original sentence structure. **Example:** ```python sentence = \\"hello world this is a test\\" words_list = [\\"world\\", \\"test\\"] ``` **Output:** ```python \\"hello dlrow this is a tset\\" ```","solution":"def reverse_words_in_sentence(sentence, words_list): Takes a sentence and a list of words and replaces those words in the sentence with their reversed versions. :param sentence: str, the sentence in which words need to be reversed :param words_list: list, the list of words that need to be reversed in the sentence :return: str, the modified sentence with specified words reversed words = sentence.split() modified_words = [ word[::-1] if word in words_list else word for word in words ] return \' \'.join(modified_words)"},{"question":"You are designing a new encryption algorithm for secure messaging. The essence of the algorithm is to perform various transformations on a given string A to derive a target string B. To achieve this, you can perform the following operations: (1) Insert a single character at any position. (2) Delete a single character from any position. (3) Replace a single character with another character. Each of these operations incurs a cost of 1. Your goal is to determine the minimum cost required to transform string A into string B. # Input: - The first line contains an integer T, denoting the number of test cases. - Each of the following T test cases consists of two lines: - The first line contains the string A. - The second line contains the string B. # Output: - For each test case, print the minimum cost required to transform string A into string B. # Constraints: 1 ≤ T ≤ 100 1 ≤ Length of A, B ≤ 5000 # SAMPLE INPUT 2 kitten sitting flaw lawn # SAMPLE OUTPUT 3 2 # Explanation Test Case #1: The transformations from \\"kitten\\" to \\"sitting\\" can be as follows: k**i**tten -> s**i**tten (replace \'k\' with \'s\') si**t**ten -> si**tt**ing (insert \'i\' and \'g\' after \'t\', which are 2 insertions) Therefore, the minimum cost is 3. Test Case #2: The transformations from \\"flaw\\" to \\"lawn\\" can be: fl**a**w -> l**a**wn (replace \'f\' with \'l\') Therefore, the minimum cost is 2.","solution":"def min_cost_to_transform(A, B): Returns the minimum cost required to transform string A into string B. The cost of each operation (insert, delete, replace) is 1. m, n = len(A), len(B) dp = [[0] * (n+1) for _ in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j # Insert all characters of B elif j == 0: dp[i][j] = i # Delete all characters of A elif A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] # Characters match, no cost else: dp[i][j] = 1 + min(dp[i-1][j], # Delete dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n] def process_test_cases(test_cases): results = [] for A, B in test_cases: results.append(min_cost_to_transform(A, B)) return results"},{"question":"Given a string, your task is to find out the minimum number of deletions required to make the string a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Example 1: Input: \\"abcbda\\" Output: 1 Explanation: By deleting \'d\', the string becomes \\"abcba\\" which is a palindrome. Example 2: Input: \\"abcd\\" Output: 3 Explanation: By deleting \'a\', \'b\', and \'d\', we are left with \'c\' which is a palindrome. Your Task: Complete the function `minDeletionsToPalindrome()` that takes the input string and returns the minimum number of deletions required to make it a palindrome. The input and output are handled by the driver code. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ length of the string ≤ 10^3","solution":"def minDeletionsToPalindrome(s): Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Fill the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) # The result is the minimum number of deletions needed to make the whole string a palindrome return dp[0][n - 1]"},{"question":"Lena loves flowers and has a beautiful garden where she grows different types of flowers. Every flower has a specific blooming period during which it looks the most beautiful. Lena wants to optimize the garden\'s beauty by sequencing the flowering periods of her flowers such that there\'s a continuous sequence of blooming flowers for as long as possible. Each flower has its start and end day of blooming. Given the blooming periods of all flowers, find the maximum length of the continuous blooming period Lena can achieve in her garden. Input The first line contains an integer n (1 ≤ n ≤ 106) — the number of flowers in the garden. The following n lines each contain two integers `si` and `ei` (0 ≤ `si` < `ei` ≤ 108) — the start and end days of the i-th flower\'s blooming period. Output Output a single integer representing the maximum length of continuous blooming period Lena can achieve. Examples Input 4 1 3 3 5 4 6 6 8 Output 7 Input 3 1 2 5 6 8 9 Output 1 Input 2 1 10 5 15 Output 14 Note In the first example, Lena can sequence the blooming periods as follows: 1 to 3, 3 to 5, 4 to 6, and 6 to 8. This gives a continuous blooming period from day 1 to day 8, which is of length 8 - 1 = 7 days. In the second example, there are no overlapping periods between any flowers, so the maximum continuous blooming period Lena can achieve is the period of any single flower, which is 1 day. In the third example, the blooming periods of the two flowers overlap such that there is a continuous blooming period from day 1 to day 15, which is of length 15 - 1 = 14 days.","solution":"def max_blooming_period(n, flowers): Returns the maximum length of continuous blooming period. Args: n : int : Number of flowers flowers : list of tuples : A list where each tuple contains the start and end day of blooming period for each flower Returns: int : Maximum length of continuous blooming period if n == 0: return 0 # Sort flowers by start time; if equal, by end time flowers.sort() # Merge intervals and calculate the continuous blooming period max_length = 0 curr_start, curr_end = flowers[0] for start, end in flowers: if start <= curr_end: curr_end = max(curr_end, end) else: max_length = max(max_length, curr_end - curr_start) curr_start, curr_end = start, end # Check last merged interval max_length = max(max_length, curr_end - curr_start) return max_length"},{"question":"You are organizing a coding contest and you need to distribute prizes among the participants based on their positions. The prize distribution rule is as follows: 1. The first place winner will receive the maximum prize. 2. The second place winner will receive the second highest prize. 3. The third place winner will receive the third highest prize. 4. All other participants will receive the smallest prize available. Given an array of prizes where each prize is represented by a positive integer, and a number of participants, return an array where each element corresponds to the prize received by the participant at that position. For example: Prizes: [100, 50, 30, 10] Participants: 5 Output: [100, 50, 30, 10, 10] Prizes: [8, 3, 1] Participants: 2 Output: [8, 3] Prizes: [20, 15, 3] Participants: 4 Output: [20, 15, 3, 3] If there are 0 participants, return: \\"No participants in the contest!\\". The list of prizes will always be non-empty and the number of participants will be a non-negative integer.","solution":"def distribute_prizes(prizes, participants): Distribute prizes among participants based on their positions. :param prizes: List of prizes. :param participants: Number of participants. :return: List of prizes received by each participant. if participants == 0: return \\"No participants in the contest!\\" # Sort prizes in descending order sorted_prizes = sorted(prizes, reverse=True) # Create the result array result = [] for i in range(participants): if i < len(sorted_prizes): result.append(sorted_prizes[i]) else: result.append(sorted_prizes[-1]) return result"},{"question":"Dr. Dolittle has a number of rooms in his clinic and he wants to determine the optimal way to assign his n patients into m available rooms in a way such that the maximum number of patients in a room is minimized. Input The first line contains two space-separated integers, n and m (1 ≤ m ≤ n ≤ 1000), where n is the number of patients and m is the number of available rooms. The second line contains n space-separated integers representing the duration of each patient\'s examination (1 ≤ ai ≤ 10^6). Output Output a single integer which is the smallest possible value of the maximum number of patients assigned to any room. Example Input 6 3 3 6 7 11 2 8 Output 3 Input 5 2 9 8 7 5 6 Output 3 Note In the first sample: The optimal way to minimize the maximum number of patients in any room is: Room 1: [3, 11] Room 2: [6, 8] Room 3: [7, 2] In the second sample: The optimal way to minimize the maximum number of patients in any room is: Room 1: [9, 7, 5] Room 2: [8, 6]","solution":"def min_max_patients_per_room(n, m, durations): def can_distribute_patients(max_patients): patient_count = 0 current_room = 1 for duration in durations: patient_count += 1 if patient_count > max_patients: current_room += 1 patient_count = 1 if current_room > m: return False return True durations.sort() left, right = 1, n # The minimum and maximum possible values for max number of patients per room while left < right: mid = (left + right) // 2 if can_distribute_patients(mid): right = mid else: left = mid + 1 return left def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) durations = list(map(int, data[2:])) print(min_max_patients_per_room(n, m, durations)) if __name__ == \\"__main__\\": main()"},{"question":"A company wants to implement a new feature in their office management system: an automatic meeting scheduler. The meeting scheduler should ensure that there are no overlapping meetings and that each employee\'s preferences for meeting times are considered. Employees can have preferences regarding the earliest time they are available and the latest time they are available for meetings on any given day. Write a program that takes the following input: 1. An integer N, representing the number of employees. 2. For each employee, the earliest and latest available times as a pair of integers (0 to 23, representing the hour of the day in 24-hour format). 3. An integer M, representing the number of meetings to be scheduled. 4. For each meeting, a label (a string identifier), the duration of the meeting in hours (an integer between 1 and 8 inclusive), and a list of participants (a subset of the employees indexed from 1 to N). The goal is to output a schedule for the meetings. If it\'s not possible to schedule a meeting without overlapping, output \\"IMPOSSIBLE\\". Here is a more detailed description of the input and expected output. -----Input----- The input starts with an integer N (1 <= N <= 100). The next N lines contain two integers earliest_i and latest_i (0 <= earliest_i <= latest_i <= 23) representing the earliest and latest times employee i can attend meetings. The next line contains an integer M (1 <= M <= 100). The next M lines describe each meeting: - A string meeting_label (1 <= length(meeting_label) <= 50) - An integer duration (1 <= duration <= 8) - A line of space-separated integers representing the list of participants (indices of employees). -----Output----- Output the list of meetings with their start time in the format \\"meeting_label START_TIME\\". For meetings that cannot be scheduled, output \\"IMPOSSIBLE\\". If multiple valid solutions exist, any one is acceptable. -----Example----- Sample Input: 3 9 17 8 16 10 18 2 TeamMeeting 2 1 2 ProjectMeeting 3 2 3 Sample Output: TeamMeeting 9 ProjectMeeting 11 In the example, \\"TeamMeeting\\" includes employees 1 and 2 and lasts 2 hours, starting at 9 which fits both employees\' schedules. \\"ProjectMeeting\\" includes employees 2 and 3 and lasts 3 hours, starting at 11 which fits both employees\' schedules.","solution":"def schedule_meetings(N, employee_times, M, meetings): # Initialize the schedule to be empty schedule = [] # Create a dictionary to store the earliest and latest times for each employee availability = {i + 1: (employee_times[i][0], employee_times[i][1]) for i in range(N)} # Initialize an array to track the last hour when a meeting ends for each employee last_meeting_end = {i + 1: 0 for i in range(N)} for meeting in meetings: meeting_label, duration, participants = meeting[0], meeting[1], meeting[2:] # Determine the earliest possible start time considering all participants earliest_start = max(availability[participant][0] for participant in participants) latest_end = min(availability[participant][1] for participant in participants) - duration + 1 if earliest_start > latest_end: return \\"IMPOSSIBLE\\" start_time = None for time in range(earliest_start, latest_end + 1): if all(time >= last_meeting_end[participant] for participant in participants): start_time = time break if start_time is None: return \\"IMPOSSIBLE\\" # Update last meeting end times for the participants for participant in participants: last_meeting_end[participant] = start_time + duration # Add the meeting to the schedule schedule.append((meeting_label, start_time)) return sorted(schedule, key=lambda x: x[1])"},{"question":"A new restaurant called \\"Kebabs Palace\\" opened up in a city. The restaurant serves impulses of police demand to keep law and order in the city. The city has a linear layout with N police stations in a row from left to right, numbered from 1 to N. The restaurant receives Q catering requests over several days. Each request is characterized by two integers L and R representing the starting and ending police stations needing catering service. The restaurant must carefully manage its catering resources, where each unit of catering service lasts exactly one day. On each day of catering, the restaurant serves every police station from L to R with one unit of catering service per day. Your task is to find out how many units of catering service each police station has received after Q days of catering requests. ------ Input: ------ The first line contains an integer T, denoting the number of test cases. The first line of each test case, contains two space-separated integers N and Q denoting the number of police stations and the number of catering requests respectively. The i^{th} line of next Q lines of each test case contains two space-separated integers L and R denoting the starting and ending police stations respectively that need catering service on the i^{th} day. ------ Output: ------ For each test case, output a single line containing N space-separated integers. The i^{th} integer should denote the total number of units of catering service received by police station-i after Q days. ------ Constraints: ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} 1≤ L ≤ R ≤ N The sum of N over all test cases is less than 10^{6} The sum of Q over all test cases is less than 10^{6} ----- Sample Input 1 ------ 2 5 3 1 3 2 4 3 5 4 1 1 1 ----- Sample Output 1 ------ 1 2 3 2 1 1 0 ----- Explanation 1 ------ In the first test case, the restaurant does the following: - Serves police stations from 1 to 3, so each station from 1 to 3 receives 1 unit of catering service. - Serves police stations from 2 to 4, so each station from 2 to 4 receives an additional 1 unit of catering service. - Serves police stations from 3 to 5, so each station from 3 to 5 receives an additional 1 unit of catering service. - Hence the final total for each station after all requests is: 1 unit for station 1, 2 units for station 2, 3 units for station 3, 2 units for station 4, and 1 unit for station 5.","solution":"def compute_catering_services(T, test_cases): results = [] for test_case in test_cases: N, Q, queries = test_case catering_services = [0] * (N + 1) for L, R in queries: catering_services[L - 1] += 1 if R < N: catering_services[R] -= 1 # Calculate the prefix sum to get the actual counts for i in range(1, N): catering_services[i] += catering_services[i - 1] results.append(catering_services[:N]) return results"},{"question":"Given a list of N non-negative integers where each integer represents the maximum number of steps that can be jumped going forward from that position. Write a function to return the minimum number of jumps you must take in order to get from the start to the end of the list (starting at the first element and ending at the last element). If it is not possible to reach the end, return -1. Example 1: Input: [2, 3, 1, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: [1, 1, 1, 1, 1] Output: 4 Explanation: Each step is 1, so it takes 4 jumps to reach the last index. Example 3: Input: [0, 2, 3] Output: -1 Explanation: It’s not possible to reach the end of the list from the start. Your Task: You don\'t need to read input or print anything. Implement the function minJumps() which takes a list of integers \'arr\' as input and returns the minimum number of jumps required to reach the end of the list. If not possible, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 0 ≤ arr[i] ≤ 100","solution":"def minJumps(arr): Returns the minimum number of jumps required to reach the end of the list. If it is not possible to reach the end, returns -1. n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n-1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Given an array of integers, your task is to complete the function countSubarraysWithEqual1sAnd0s(), which returns the count of subarrays that have equal number of 1s and 0s. Example 1: Input: arr = [1, 0, 0, 1, 0, 1, 1] Output: 8 Explanation: The subarrays with equal number of 1s and 0s are: - [1, 0] - [1, 0, 0, 1] - [0, 1] - [0, 1, 0, 1] - [0, 1] - [1, 0, 1, 1] - [0, 1, 1, 1] - [1, 0] Example 2: Input: arr = [1, 1, 1, 0, 0, 0] Output: 3 Explanation: The subarrays with equal number of 1s and 0s are: - [1, 0] - [1, 0] - [1, 1, 1, 0, 0, 0] Your Task: You don\'t need to read input or print anything. Your task is to complete the function countSubarraysWithEqual1sAnd0s() which takes the array arr[] as input parameter and returns an integer denoting the count of subarrays with equal number of 1s and 0s. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^5 arr[i] can only be 0 or 1.","solution":"def countSubarraysWithEqual1sAnd0s(arr): Given an array \'arr\' consisting of 0s and 1s, this function returns the count of subarrays which have equal number of 0s and 1s. # Replace 0 with -1 in the array. modified_arr = [-1 if x == 0 else 1 for x in arr] count_map = {} curr_sum = 0 total_count = 0 for num in modified_arr: curr_sum += num # If curr_sum is 0, then there is a subarray (from start to current index) with equal 0s and 1s if curr_sum == 0: total_count += 1 # If curr_sum has been seen before, it means we have found a subarray with equal 1s and 0s if curr_sum in count_map: total_count += count_map[curr_sum] # Update count_map with current unmodified curr_sum or increment its count. if curr_sum in count_map: count_map[curr_sum] += 1 else: count_map[curr_sum] = 1 return total_count"},{"question":"The delivery driver has been given a series of delivery jobs, each with a specified start and end time. The driver can only handle one job at a time. Your task is to optimize the delivery schedule such that the driver can complete the maximum number of non-overlapping jobs. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of delivery jobs. The next N lines each contain two space-separated integers Si and Ei denoting the start and end times of the ith delivery job. -----Output----- For each test case, output a single line containing the maximum number of non-overlapping jobs the driver can complete. -----Constraints----- For Subtask 1: - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 10 - 1 ≤ Si < Ei ≤ 100 For Subtask 2: - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 1000 - 1 ≤ Si < Ei ≤ 10000 -----Example----- Input: 2 3 1 2 2 3 3 4 5 1 2 2 3 3 4 1 3 3 5 Output: 3 3 -----Explanation----- Example case 1. The driver can complete all 3 jobs since they are non-overlapping. Example case 2. The driver can complete the jobs at (1, 2), (2, 3), and (3, 4) or choose another combination like (1, 2), (3, 4), (3, 5). Any combination of 3 non-overlapping jobs would be the optimal solution here.","solution":"def max_non_overlapping_jobs(test_cases): results = [] for jobs in test_cases: jobs.sort(key=lambda x: x[1]) # sort jobs by end time count = 0 last_end_time = 0 for start, end in jobs: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def read_input(input_text): input_lines = input_text.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 jobs = [] for _ in range(N): Si, Ei = map(int, input_lines[index].split()) jobs.append((Si, Ei)) index += 1 test_cases.append(jobs) return test_cases"},{"question":"Problem Statement In a programming competition, participants have to solve several coding tasks in a limited amount of time. For each task, different participants may take different amounts of time to solve it. Given a list of participants and the time they took to solve each task, your task is to determine the participant who solved all tasks in the minimum total time. If there is a tie for the minimum total time, choose the participant who solved the first task faster. If there\'s still a tie, choose the one who solved the second task faster, and so forth. Write a program that takes input in the form of the number of participants, the number of tasks, and the time taken by each participant for each task. The program should output the identifier of the participant who solved all tasks the fastest, followed by the total time taken by that participant. Constraints * 1 <= P <= 50 * 1 <= T <= 50 * 1 <= time_ij <= 10000 Input Each data set is input in the following format. P T time11 time12 ... time1T time21 time22 ... time2T ... timeP1 timeP2 ... timePT P is the number of participants, and T is the number of tasks. time_ij is the time taken by the jth participant to solve the ith task. Output The output should be in the following format: participant_identifier total_time The participant_identifier is the number (from 1 to P) identifying the participant who solved all tasks in the least time. The total_time is the sum of the task completion times for the chosen participant. If there is a tie, choose the participant with the faster times in the order of the tasks. Examples Input 3 4 50 60 70 80 40 70 80 90 60 60 60 60 Output 3 240 Input 2 3 100 200 300 150 150 200 Output 2 500","solution":"def find_fastest_participant(P, T, times): Determines the participant who solved all tasks in the minimum total time. Parameters: P (int): Number of participants T (int): Number of tasks times (list of list of int): A 2D list where times[i][j] is the time taken by the ith participant to solve the jth task Returns: tuple: A tuple (participant_identifier, total_time) representing the fastest participant and their total time min_time = float(\'inf\') fastest_participant = None for i in range(P): total_time = sum(times[i]) if (total_time < min_time) or (total_time == min_time and times[i] < times[fastest_participant - 1]): min_time = total_time fastest_participant = i + 1 return (fastest_participant, min_time) # Example usage: # P = 3, T = 4 # times = [ # [50, 60, 70, 80], # [40, 70, 80, 90], # [60, 60, 60, 60], # ] # output should be (3, 240)"},{"question":"The king of Westeros, Robert Baratheon, is planning a grand tournament to celebrate his rule and he wants the festivities to be perfect. The tournament consists of a series of jousting matches. To ensure fairness and enjoyment for all, each match must pit knights with roughly equal skill levels against each other. You are given an array of integers representing the skill levels of each knight participating in the tournament. To determine a fair matchup, you need to find the pair of knights with the smallest difference in their skill levels. If there are multiple pairs with the same smallest difference, you may return any one of them. Write a function that takes an array of integers and returns the smallest difference between any pair of knights\' skill levels. Input: - The first line contains an integer n, denoting the number of knights. - The second line contains n integers, each representing the skill level of one knight. Constraints: 1 ≤ n ≤ 1000 1 ≤ skill level ≤ 10000 Output: - An integer representing the smallest difference in skill levels between any two knights. Examples: Input: 5 15 10 3 8 12 Output: 2 Input: 4 23 14 5 9 Output: 4 Explanation: In the first example, the smallest difference is between the knights with skill levels 10 and 12, i.e., |10-12| = 2. In the second example, the smallest difference is between the knights with skill levels 9 and 5, i.e., |9-5| = 4.","solution":"def smallest_difference_in_skills(n, skills): Returns the smallest difference between any pair of knights\' skill levels. if n < 2: return 0 skills.sort() min_diff = float(\'inf\') for i in range(n - 1): diff = abs(skills[i] - skills[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"In a game of target practice, a player has to hit a series of targets located on a grid. The grid is represented as a 2D matrix of size N x M, where each cell has an integer value indicating whether it is a target (1) or not (0). The player\'s position is initially outside the grid, and they can move into the grid from any of the edges. The player can move in four directions: up, down, left, and right. The player succeeds if they can visit all the target cells exactly once. Write a function to determine if it is possible for the player to visit all the target cells exactly once. Input Format The first line consists of two integers, N and M, the number of rows and columns in the grid. The next N lines each contain M integers (either 0 or 1), representing the grid. Output Format Print \\"YES\\" if it is possible for the player to visit all the target cells exactly once, otherwise print \\"NO\\". Constraints 1 ≤ N, M ≤ 50 Each cell in the grid will be either 0 or 1. SAMPLE INPUT 3 4 0 1 0 1 1 0 0 0 0 1 1 0 SAMPLE OUTPUT NO SAMPLE INPUT 2 3 3 1 1 1 1 0 1 1 1 1 SAMPLE OUTPUT 2 YES","solution":"def can_visit_all_targets(N, M, grid): from collections import deque def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == 1 and not visited[x][y] def bfs(start_x, start_y): queue = deque([(start_x, start_y)]) visited[start_x][start_y] = True cells_visited = 0 while queue: x, y = queue.popleft() cells_visited += 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y): visited[new_x][new_y] = True queue.append((new_x, new_y)) return cells_visited target_cells = sum(row.count(1) for row in grid) if target_cells == 0: return \\"YES\\" # No targets to visit visited = [[False] * M for _ in range(N)] for i in range(N): for j in range(M): if grid[i][j] == 1: start_x, start_y = i, j break result = bfs(start_x, start_y) return \\"YES\\" if result == target_cells else \\"NO\\""},{"question":"A company has a string-based security system that checks if the password follows a particular pattern. The password must be exactly 10 characters long. It must contain exactly 3 uppercase letters, exactly 3 lowercase letters, exactly 2 digits, and exactly 2 special characters (from the set `!@#%^&*()`). Write a function that verifies if a given password meets these criteria. -----Input----- The input string containing the password to be verified. The password will consist only of printable ASCII characters. -----Output----- Return the string \\"Valid\\" if the password meets the criteria. Return the string \\"Invalid\\" otherwise. -----Example----- Input \\"Ab1@Ab2#cD\\" Output Valid Input \\"Ab1@Ab2cD\\" Output Invalid","solution":"import re def is_valid_password(password): Verifies if the password meets the specified criteria: - Exactly 10 characters long - Exactly 3 uppercase letters - Exactly 3 lowercase letters - Exactly 2 digits - Exactly 2 special characters from the set !@#%^&*() if len(password) != 10: return \\"Invalid\\" uppercase_count = len(re.findall(r\'[A-Z]\', password)) lowercase_count = len(re.findall(r\'[a-z]\', password)) digit_count = len(re.findall(r\'d\', password)) special_char_count = len(re.findall(r\'[!@#%^&*()]\', password)) if uppercase_count == 3 and lowercase_count == 3 and digit_count == 2 and special_char_count == 2: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Given two strings `str1` and `str2`, you need to determine whether `str2` can be obtained by rotating `str1` by any number of positions. Return `True` if `str2` can be obtained by rotating `str1`. Otherwise, return `False`. **Example 1:** Input: `str1 = \\"hello\\"`, `str2 = \\"lohel\\"` Output: `True` **Explanation:** \\"lohel\\" is obtained by rotating \\"hello\\" by 3 positions to the right. **Example 2:** Input: `str1 = \\"abcde\\"`, `str2 = \\"edcba\\"` Output: `False` **Explanation:** \\"edcba\\" cannot be obtained by rotating \\"abcde\\". Your Task: You do not need to read input or print anything. Your task is to write the function `isRotation(str1, str2)` which checks if `str2` can be obtained by rotating `str1`. **Expected Time Complexity:** O(N), where N is the length of the strings. **Expected Auxiliary Space:** O(N) **Constraints:** 1 ≤ length of `str1`, `str2` ≤ 10^5","solution":"def isRotation(str1, str2): Determines if str2 can be obtained by rotating str1 by any number of positions. Parameters: str1 (str): The original string. str2 (str): The string that is to be checked if it can be obtained by rotating str1. Returns: bool: True if str2 can be obtained by rotating str1, False otherwise. if len(str1) != len(str2): return False # Concatenate str1 with itself, if str2 is a rotation it will be a substring of str1+str1 return str2 in str1 + str1"},{"question":"Given a string s, determine whether it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). -----Constraints----- - s consists of printable ASCII characters. -----Input----- The input is given from Standard Input in the following format: s -----Output----- If s is a palindrome, print palindrome. Otherwise, print not a palindrome. -----Sample Input----- A man, a plan, a canal, Panama -----Sample Output----- palindrome Since \\"A man, a plan, a canal, Panama\\" is a palindrome when ignoring spaces, punctuation, and capitalization, print palindrome.","solution":"import re def is_palindrome(s): Determines whether the input string s is a palindrome. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse if cleaned_s == cleaned_s[::-1]: print(\\"palindrome\\") else: print(\\"not a palindrome\\")"},{"question":"Write a function to determine whether a given string can be rearranged to form a palindrome. You need to check if the frequency of each character in the string allows for such an arrangement. **Function Signature:** ```python def can_form_palindrome(s: str) -> bool: ``` **Input:** - A single string `s` (1 ≤ len(s) ≤ 10^5) **Output:** - Return `True` if the string can be rearranged to form a palindrome, otherwise return `False`. **Explanation:** - A string can be rearranged to form a palindrome if at most one character occurs odd number of times, while all other characters occur an even number of times. **Example:** ```python # Example 1 input: \'racecar\' output: True # Example 2 input: \'abc\' output: False # Example 3 input: \'aab\' output: True ``` **Sample Input:** ``` racecar abc aab ``` **Sample Output:** ``` True False True ```","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determines if the given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Linda loves playing with numbers, and she has recently come across the concept of digit sum. A digit sum of a number is the sum of all its digits. For example, the digit sum of 1234 is 1 + 2 + 3 + 4 = 10. Linda has a list of positive integers and wants to know the digit sums for each of these numbers. Can you help her by creating a function that computes the digit sum for each number in her list? Input: The first line contains an integer N, denoting the number of integers in the list. Each of the next N lines contains a positive integer. Output: For each integer in the list, print the digit sum on a new line. Constraints: 1 ≤ N ≤ 20 1 ≤ Each integer ≤ 10^9 SAMPLE INPUT 3 123 456 7890 SAMPLE OUTPUT 6 15 24 Explanation In the first case, 123 has digits 1, 2, and 3, so the digit sum is 1 + 2 + 3 = 6. In the second case, 456 has digits 4, 5, and 6, so the digit sum is 4 + 5 + 6 = 15. In the third case, 7890 has digits 7, 8, 9, and 0, so the digit sum is 7 + 8 + 9 = 24.","solution":"def digit_sum(n): Returns the digit sum of the number n. return sum(int(digit) for digit in str(n)) def compute_digit_sums(numbers): For each number in the list `numbers`, computes the digit sum and returns a list of these sums. return [digit_sum(number) for number in numbers]"},{"question":"Consider a list of integers where each number represents the volume of a distinct water tank. Each tank can hold a maximum of its given volume of water. You are given a series of water flow commands which may either add or remove a certain amount of water from the tanks. Each command follows the format: - `fill tank_index volume`: Add water to the tank at the specified index unless it exceeds its maximum volume. - `drain tank_index volume`: Remove water from the tank at the specified index unless there isn’t enough water to remove. Implement a function to simulate the water flow commands and return the final state of the tanks after all commands have been processed. **Constraints:** - The list of tanks is provided as `[tank_1, tank_2, tank_3, ...]` - The water flow commands are given as a list of strings, e.g., `[\\"fill 0 100\\", \\"drain 1 20\\"]` - Assume the provided indices are valid and within the list\'s range. - The tanks initialize at 0 volume. **Examples:** ```python tanks = [200, 100, 50] commands = [\\"fill 0 150\\", \\"fill 1 70\\", \\"drain 0 20\\", \\"fill 2 30\\"] ``` After processing the commands, the final state of the tanks would be `[130, 70, 30]`. ```python tanks = [300, 200, 150] commands = [\\"fill 0 300\\", \\"fill 1 150\\", \\"drain 0 100\\", \\"fill 2 150\\", \\"drain 1 50\\"] ``` After processing the commands, the final state of the tanks would be `[200, 100, 150]`.","solution":"def process_commands(tanks, commands): Process a list of water flow commands to update the water levels of the tanks. Args: - tanks (list of int): A list where each element represents the maximum capacity of a tank. - commands (list of str): A list of commands to fill or drain the tanks. Returns: - list of int: The final state of the tanks (water levels) after processing all commands. # Initialize all tanks with 0 water level water_levels = [0] * len(tanks) for command in commands: action, index, volume = command.split() index = int(index) volume = int(volume) if action == \\"fill\\": water_levels[index] = min(water_levels[index] + volume, tanks[index]) elif action == \\"drain\\": water_levels[index] = max(water_levels[index] - volume, 0) return water_levels"},{"question":"A massive space mining project is underway in the Andromeda galaxy. One of the main milestones of this project is to deploy mining robots on asteroids. Each asteroid is modeled as a polyhedron in a three-dimensional space. Before deploying the robots, scientists need to calculate the volume of these asteroids to determine the number of robots required for efficient mining operations. You are asked to help the scientists by writing a program that, given the vertex coordinates of the polyhedron and the list of triangular faces that form the surface of the polyhedron, calculates its volume. Assume the polyhedron is closed, non-degenerate, and each triangular face is properly defined in 3D space. Input The input consists of multiple data sets. Each data set is given in the following format: m vx1 vy1 vz1 vx2 vy2 vz2 ... vxm v ym vz m k f1_i f1_j f1_k f2_i f2_j f2_k ... fk_i fk_j fk_k The first line of a data set contains an integer m, which is the number of vertices of the polyhedron. It satisfies the condition 4 ≤ m ≤ 100. The next m lines contain the coordinates of the vertices: (vx, vy, vz). Three coordinates of a vertex appear in a line, separated by a space character. The next line contains an integer k, which is the number of triangular faces of the polyhedron. It satisfies the condition 4 ≤ k ≤ 300. The next k lines contain the indices of the vertices that form the triangular faces. Each index appears as a 1-based integer, indicating the vertices\' positions in the given list. The end of the input is indicated by a line containing a zero. Output For each data set, the volume of the polyhedron should be printed, each in a separate line. The printed values should have 5 digits after the decimal point. Example Input 4 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 0.00000 1.00000 4 1 2 3 1 2 4 1 3 4 2 3 4 4 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 1.00000 1.00000 0.00000 0.00000 1.00000 0.00000 4 1 2 3 1 3 4 1 4 2 2 3 4 0 Output 0.16667 1.00000","solution":"import sys import math def vector_cross(a, b): return [a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0]] def dot_product(a, b): return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] def volume_of_tetrahedron(v1, v2, v3, v4): vec1 = [v2[i] - v1[i] for i in range(3)] vec2 = [v3[i] - v1[i] for i in range(3)] vec3 = [v4[i] - v1[i] for i in range(3)] cross_p = vector_cross(vec1, vec2) return abs(dot_product(cross_p, vec3)) / 6 def calculate_polyhedron_volume(vertices, faces): reference = vertices[0] volume = 0 for face in faces: v1 = vertices[face[0] - 1] v2 = vertices[face[1] - 1] v3 = vertices[face[2] - 1] volume += volume_of_tetrahedron(reference, v1, v2, v3) return volume def parse_input(input_text): data_sets = [] lines = input_text.strip().split(\'n\') index = 0 while index < len(lines): m = int(lines[index]) if m == 0: break index += 1 vertices = [] for _ in range(m): vertices.append([float(x) for x in lines[index].split()]) index += 1 k = int(lines[index]) index += 1 faces = [] for _ in range(k): faces.append([int(x) for x in lines[index].split()]) index += 1 data_sets.append((vertices, faces)) return data_sets def main(): input_text = sys.stdin.read() data_sets = parse_input(input_text) results = [] for vertices, faces in data_sets: volume = calculate_polyhedron_volume(vertices, faces) results.append(f\\"{volume:.5f}\\") for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You\'ve been given a list of integers and a target value. Find all unique pairs of integers in the list that sum up to the target value. Each pair should be displayed in a sorted order, and the pairs themselves should be in sorted order. If no such pairs exist, return an empty list. -----Input----- The first line contains two integers n and target (1 ≤ n ≤ 1000, 1 ≤ target ≤ 10^5). The second line contains n integers a_i (1 ≤ a_i ≤ 10^5). -----Output----- Print all unique pairs of integers that sum up to the target value, each pair in a new line. Each pair should be in ascending order. If no such pairs exist, return an empty list. -----Examples----- Input 5 9 2 7 11 15 1 Output 2 7 Input 6 10 3 4 5 6 7 2 Output 3 7 4 6","solution":"def find_pairs(n, target, arr): Find all unique pairs of integers in the list that sum up to the target value. Each pair is returned in sorted order and the pairs themselves are sorted. arr.sort() pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs) # Example Usage n = 6 target = 10 arr = [3, 4, 5, 6, 7, 2] print(find_pairs(n, target, arr)) # Output: [(3, 7), (4, 6)]"},{"question":"Task You are given a list of integers. Your task is to rearrange the list such that the difference between consecutive elements is minimized, and then return the rearranged list. To achieve this, first, sort the list in non-decreasing order, then alternate the smallest and largest remaining elements to form a new list. Examples * `[4, 1, 3, 2, 6] -> [1, 6, 2, 4, 3]` - After sorting: `sorted_list = [1, 2, 3, 4, 6]` and creating new arrangement: `new_list = [1, 6, 2, 4, 3]` * `[9, 2, 5, 7] -> [2, 9, 5, 7]` - After sorting: `sorted_list = [2, 5, 7, 9]` and creating new arrangement: `new_list = [2, 9, 5, 7]` * `[] -> []` - An empty list should result in an empty output * `[10] -> [10]` - A single element will remain as is Good luck!","solution":"def rearrange_list(int_list): Rearranges the list such that the difference between consecutive elements is minimized. The function first sorts the list in ascending order, then alternates the smallest and biggest remaining elements to form a new list. Parameters: int_list (list of int): List of integers to be rearranged. Returns: list of int: Rearranged list. if not int_list: return [] sorted_list = sorted(int_list) new_list = [] left = 0 right = len(sorted_list) - 1 while left <= right: if left == right: new_list.append(sorted_list[left]) else: new_list.append(sorted_list[left]) new_list.append(sorted_list[right]) left += 1 right -= 1 return new_list"},{"question":"Mina is practicing her data structure skills with linked lists. She decides to create a problem where she has to reorder a linked list according to specific rules. Given a singly linked list, you need to reorder the list so that it is arranged in the order: first node -> last node -> second node -> second last node -> third node -> third last node, and so on. For example: Given the linked list 1 -> 2 -> 3 -> 4, reorder it to 1 -> 4 -> 2 -> 3. Given the linked list 1 -> 2 -> 3 -> 4 -> 5, reorder it to 1 -> 5 -> 2 -> 4 -> 3. Your task is to implement this reordering. -----Input----- The input consists of multiple test cases. The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer n denoting the number of nodes in the linked list. - The second line contains n space-separated integers denoting the values of the nodes in the linked list. -----Output----- For each test case, output the values of the reordered linked list in one line, space-separated. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - 1 ≤ value of each node ≤ 10^9 -----Example----- Input: 2 4 1 2 3 4 5 1 2 3 4 5 Output: 1 4 2 3 1 5 2 4 3 -----Explanation----- Example case 1. The linked list 1 -> 2 -> 3 -> 4 is reordered as 1 -> 4 -> 2 -> 3. Example case 2. The linked list 1 -> 2 -> 3 -> 4 -> 5 is reordered as 1 -> 5 -> 2 -> 4 -> 3.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reorderList(head): if not head or not head.next: return head # Find the middle of the linked list slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev, curr = None, slow while curr: next_temp = curr.next curr.next = prev prev = curr curr = next_temp # Merge the two halves first, second = head, prev while second.next: tmp1, tmp2 = first.next, second.next first.next = second second.next = tmp1 first = tmp1 second = tmp2 return head def toList(node): result = [] while node: result.append(node.val) node = node.next return result def toLinkedList(lst): dummy = ListNode() current = dummy for value in lst: current.next = ListNode(value) current = current.next return dummy.next def reorder_list(input_list): head = toLinkedList(input_list) reordered_head = reorderList(head) return toList(reordered_head)"},{"question":"Lena has a warehouse full of different types of toys. She wants to ship these toys to customers depending on their preferences. Each customer provides a list of toy preferences in a specific order, and Lena wants to ship the maximum number of toys that match the customer\'s preferences in the same order provided. Given a list of toys Lena has in her warehouse and the list of toys a customer prefers in a specific sequence, determine the maximum number of preferred toys that can be shipped in the order requested by the customer. Input: The first line of input contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of toys in the warehouse. The following line contains N space-separated integers representing the types of toys in the warehouse. The next line contains an integer M, the number of toys in the customer’s preference list. The following line contains M space-separated integers representing the toy preferences in the given order. Output: For each test case, print the maximum number of preferred toys that can be shipped in the order requested. Constraints: 1 <= T <= 10 1 <= N, M <= 100 1 <= toy type, preference type <= 100 SAMPLE INPUT 1 5 1 2 3 4 5 4 2 4 3 5 SAMPLE OUTPUT 3 Explanation: For the given test case, the customer\'s preferences are [2, 4, 3, 5]. The toys in Lena\'s warehouse are [1, 2, 3, 4, 5]. Lena can ship toys [2, 3, 5] in the same order as requested, which makes the maximum number of toys that can be shipped as 3.","solution":"def max_toys_shipped(toys, preferences): Determine the maximum number of preferred toys that can be shipped in the order requested. :param toys: List of integers representing toy types in the warehouse. :param preferences: List of integers representing toy types in the order requested by the customer. :return: Integer, the maximum number of preferred toys that can be shipped in the order requested. # Length of warehouse\'s toys and customer\'s preferences n, m = len(toys), len(preferences) # Dynamic Programming table to store maximum number of toys matched # up to toy i from warehouse and preference j from customer dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if toys[i - 1] == preferences[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] def process_test_cases(test_cases): results = [] for case in test_cases: N, toys, M, preferences = case results.append(max_toys_shipped(toys, preferences)) return results"},{"question":"You are part of a team developing a traffic management software for a smart city initiative. One of the requirements is to monitor and manage traffic signals at various intersections throughout the city. Each intersection has a set of traffic signals that can be in one of three states: GREEN, YELLOW, or RED. The state transitions of traffic lights follow specific rules to maintain traffic flow and safety standards. Your task is to build a traffic signal simulator based on these rules. Traffic signals operate on a cycle with the following rules: 1. The signal transitions from GREEN to YELLOW, then from YELLOW to RED, and finally from RED back to GREEN. 2. When a signal changes state, the change must occur after a given time interval specific to each state transition (GREEN to YELLOW, YELLOW to RED, RED to GREEN). Your simulator should handle multiple commands to initialize intersections, update time intervals, change signals, and report the current state of an intersection. ----- Input ----- The first line of input consists of an integer 0 leq n leq 100000, indicating the number of commands. Each of the following n lines represents a command in one of the following forms: - \\"INIT I green_time yellow_time red_time\\" – Initializes intersection I with provided time intervals for each state transition. - \\"UPDATE I state time\\" – Updates the time interval for the specified state transition at intersection I. - \\"CHANGE I\\" – Changes the state of the signal at intersection I following the defined state transition rules. - \\"REPORT I\\" – Reports the current state of the signal at intersection I. States are represented by the strings \\"GREEN\\", \\"YELLOW\\", and \\"RED\\". Time intervals are integers representing the number of minutes each state transition must last. Signals start in the GREEN state upon initialization. ----- Output ----- For each \\"REPORT I\\" command, output the current state of the signal at intersection I. ----- Examples ----- Sample Input: 7 INIT 1 5 2 3 INIT 2 4 3 2 CHANGE 1 REPORT 1 CHANGE 2 CHANGE 2 REPORT 2 Sample Output: YELLOW RED","solution":"class TrafficSignal: def __init__(self, green_time, yellow_time, red_time): self.times = {\\"GREEN\\": green_time, \\"YELLOW\\": yellow_time, \\"RED\\": red_time} self.current_state = \\"GREEN\\" self.next_state = {\\"GREEN\\": \\"YELLOW\\", \\"YELLOW\\": \\"RED\\", \\"RED\\": \\"GREEN\\"} def update_time(self, state, time): self.times[state] = time def change_state(self): self.current_state = self.next_state[self.current_state] def report_state(self): return self.current_state class TrafficManagement: def __init__(self): self.intersections = {} def execute_command(self, command): parts = command.split() cmd_type = parts[0] if cmd_type == \\"INIT\\": I = int(parts[1]) green_time = int(parts[2]) yellow_time = int(parts[3]) red_time = int(parts[4]) self.intersections[I] = TrafficSignal(green_time, yellow_time, red_time) elif cmd_type == \\"UPDATE\\": I = int(parts[1]) state = parts[2] time = int(parts[3]) if I in self.intersections: self.intersections[I].update_time(state, time) elif cmd_type == \\"CHANGE\\": I = int(parts[1]) if I in self.intersections: self.intersections[I].change_state() elif cmd_type == \\"REPORT\\": I = int(parts[1]) if I in self.intersections: return self.intersections[I].report_state() def process_commands(commands): tm = TrafficManagement() results = [] for command in commands: result = tm.execute_command(command) if result is not None: results.append(result) return results"},{"question":"In a distant land, there is a ritual involving two warriors, Ada and Bob. Each warrior possesses a unique weapon, which can switch forms. Ada\'s weapon is a string of lowercase English letters, and Bob\'s weapon is a string of the same length, also consisting of lowercase English letters. The battle is fought through a series of rounds, where in each round, each warrior can swap any two characters in their respective weapon strings. The battle sequence happens in rounds as follows: 1. Ada plays first and swaps any two characters in her string. 2. Bob plays next and swaps any two characters in his string. Both warriors aim to maximize the lexicographical order of their weapon string by the end of the battle. The battle ends after both have played exactly once, and the winner is the warrior with the lexicographically greater string. If the strings are equal, the battle is a draw. Your task is to determine the outcome of the battle if both warriors play optimally well. Input The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the strings. The second line contains the string s, representing the initial form of Ada\'s weapon. The third line contains the string t, representing the initial form of Bob\'s weapon. Output Print \\"Ada\\" if Ada wins, \\"Bob\\" if Bob wins, and \\"Draw\\" if the battle ends in a draw. Print the words without the quotes. Examples Input 5 abcde fghij Output Bob Input 3 bca cab Output Draw Input 4 zxya yzab Output Ada","solution":"def battle_outcome(n, s, t): Determines the outcome of the battle if both warriors play optimally well. ada_max = \'\'.join(sorted(s, reverse=True)) bob_max = \'\'.join(sorted(t, reverse=True)) if ada_max > bob_max: return \\"Ada\\" elif ada_max < bob_max: return \\"Bob\\" else: return \\"Draw\\""},{"question":"You are tasked with devising a function to simulate a simple gaming scenario. In this game, there is a grid of size `N x N` where each cell can contain an enemy and obstacles may prevent movement. Your goal is to determine if the player, starting from the top-left corner of the grid, can reach the bottom-right corner. The player can move either right or down one cell at a time, but cannot move through cells marked as obstacles. Additionally, the grid is represented as a list of strings where each string represents a row of the grid. Each cell in the grid contains either a \'.\' representing an empty cell, an \'E\' representing an enemy, or an \'O\' representing an obstacle. The player can move into cells containing enemies but not into cells containing obstacles. -----Input----- - The first line contains an integer `N`, the size of the grid (1 ≤ N ≤ 100). - The next `N` lines each contain a string of length `N` representing the grid. -----Output----- - Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". -----Examples----- Input 3 ..E .O. EE. Output YES Input 3 .O. O.E E.. Output NO In this problem, you need to consider edge cases like the smallest grid sizes and scenarios where the direct path is blocked but alternative paths may exist.","solution":"def can_reach_end(N, grid): def dfs(x, y): if x < 0 or y < 0 or x >= N or y >= N or grid[x][y] == \'O\' or visited[x][y]: return False if x == N-1 and y == N-1: return True visited[x][y] = True # Move right or down if dfs(x+1, y) or dfs(x, y+1): return True return False visited = [[False] * N for _ in range(N)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given a list of integers grades where grades[i] is the grade of the i-th student. Return the final grades after applying the following rounding rules: - If the grade is less than 40, no rounding occurs as the student fails the course. - If the grade is 40 or more, it is rounded up to the next multiple of 5 if the difference between the grade and the next multiple of 5 is less than 3. Example 1: Input: grades = [84, 29, 57] Output: [85, 29, 57] Explanation: 84 rounds up to 85 (as 85 is the next multiple of 5 and the difference is less than 3), 29 remains 29 (as it is less than 40), and 57 remains 57 (as the difference to next multiple of 5 is 3 or more). Example 2: Input: grades = [73, 67, 38, 33, 54] Output: [75, 67, 40, 33, 55] Explanation: 73 rounds up to 75, 67 remains 67, 38 rounds up to 40, 33 remains 33, and 54 rounds up to 55 as per the given rules. Constraints: 1. 1 <= grades.length <= 100 2. 0 <= grades[i] <= 100","solution":"def final_grades(grades): Returns the final grades after applying rounding rules. Parameters: grades (list): A list of integers representing grades. Returns: list: A list of integers representing final grades after rounding rules applied. final_grades = [] for grade in grades: if grade >= 38: next_multiple_of_5 = (grade + 4) // 5 * 5 if next_multiple_of_5 - grade < 3: final_grades.append(next_multiple_of_5) else: final_grades.append(grade) else: final_grades.append(grade) return final_grades"},{"question":"You are tasked with helping Lord Krishna in designing an obstacle course for Arjuna\'s archery practice. The course has a series of targets arranged in a line. Each target has a distinct position on the x-axis and a specific height. Arjuna stands at the origin (0, 0) and aims his arrows parallel to the y-axis. However, some targets may be of the same height, causing redundancy in practice. Your task is to determine the number of distinct heights among the targets that Arjuna will hit if he were to shoot arrows straight up along the y-axis from each distinct position. No two targets are at the same x-coordinate. Input: You will be given an integer N denoting the number of targets. Next N lines will each contain two integers representing the x-coordinate and the height of each target. Output: Output a single integer that denotes the number of distinct heights of the targets Arjuna will hit. Constraints: 0 < N ≤ 100000 0 ≤ x-coordinate, height ≤ 1000000 Example: Input: 5 2 3 5 6 8 3 10 2 12 6 Output: 3 Explanation: Arjuna will hit targets with the heights [3, 6, 3, 2, 6]. Among these, the distinct heights are [3, 6, 2], thus the output is 3.","solution":"def count_distinct_heights(N, targets): Count the number of distinct heights among the given targets. Parameters: N (int): The number of targets. targets (list of tuples): A list of tuples where each tuple consists of (x-coordinate, height) of a target. Returns: int: The number of distinct heights. heights = set() for target in targets: heights.add(target[1]) return len(heights)"},{"question":"In the kingdom of CodeLand, the king has tasked you with finding the largest possible area of land that can be obtained by enclosing it with a specific type of fence. The fence is made up of straight wooden planks, and each plank has the same length. The goal is to form an enclosure using exactly `n` planks that maximizes the area of the enclosed land. Given an integer `n` (3 ≤ n ≤ 10^6), which represents the number of planks available, determine the maximum area of land that can be enclosed by a fence made up of these `n` planks. Input The first and only line of the input contains a single integer `n` (3 ≤ n ≤ 10^6), denoting the number of planks. Output Print the maximum area of land that can be enclosed by a fence made up of `n` planks. The output should be a floating-point number with at most 6 digits after the decimal point. Examples Input 3 Output 0.433013 Input 4 Output 1.000000 Input 6 Output 2.598076 Notes - In the first sample case, the maximum area is obtained by forming an equilateral triangle with 3 planks. - In the second sample case, the maximum area is obtained by forming a square with 4 planks. - In the third sample case, the maximum area is obtained by forming a regular hexagon with 6 planks. You need to find an efficient way to compute the maximum possible area for any given number of planks `n`.","solution":"import math def maximum_area(n): Returns the maximum possible area enclosed by `n` planks of the same length. if n < 3: return 0 # Not a valid scenario as per problem constraints # Regular polygon with n sides side_length = 1 # Without loss of generality, consider the side length as 1 apothem = side_length / (2 * math.tan(math.pi / n)) area = (n * side_length * apothem) / 2 return round(area, 6)"},{"question":"Two friends, Alice and Bob, are playing a game on a 2D grid. The grid is an N x N matrix where each cell contains a positive integer representing the cost to enter that cell. Alice starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (N-1, N-1). She can only move right or down at each step. The challenge is to find the minimum cost required for Alice to reach her destination (N-1, N-1) from her starting point (0, 0). -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the size of the grid. - The next N lines each contain N integers, representing the grid. -----Output:----- For each test case, output a single line containing the minimum cost required for Alice to reach the bottom-right corner. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Cost of each cell ≤ 1000 -----Sample Input:----- 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 -----Sample Output:----- 7 3 -----Explanation:----- Test Case 1: The grid is: 1 3 1 1 5 1 4 2 1 The minimum cost path is 1 → 1 → 1 → 1 → 1 → 2 with a cost of 7. Test Case 2: The grid is: 1 2 1 1 The minimum cost path is 1 → 1 → 1 with a cost of 3.","solution":"def min_cost_path(grid): N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, N): for j in range(1, N): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[-1][-1] def process_input(inputs): index = 0 T = int(inputs[index]) index += 1 results = [] for _ in range(T): N = int(inputs[index]) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, inputs[index].split()))) index += 1 results.append(min_cost_path(grid)) return results"},{"question":"You are given a planar graph in the form of an undirected graph with n vertices and m edges. Your task is to handle q queries regarding the connectivity between two vertices in the modified version of the graph after potentially adding or removing edges. # Graph Details: - The graph initially has `n` vertices numbered from 1 to `n`. - There are `m` unique edges in the form of pairs (u, v) where 1 ≤ u, v ≤ n. # Query Types: 1. Add an edge between vertices u and v. 2. Remove an edge between vertices u and v. 3. Check if there is a path between vertices u and v. # Input: - The first line contains two integers, `n` and `m` (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5) — the number of vertices and edges, respectively. - The following `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing an edge between vertices u and v. - The next line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. - The following `q` lines describe the queries. Each query is in one of the following formats: * `1 u v` — add an edge between vertices `u` and `v`. * `2 u v` — remove the edge between vertices `u` and `v`. * `3 u v` — check if there is a path between vertices `u` and `v`. # Output: For each query of the third type, output `\\"YES\\"` if there is a path between vertices `u` and `v`, and `\\"NO\\"` otherwise. # Example: Input: ```text 5 4 1 2 2 3 3 4 4 5 6 3 1 5 2 2 3 3 1 5 1 2 3 3 1 5 3 2 4 ``` Output: ```text YES NO YES YES ``` # Note: - The first query checks for a path between vertices 1 and 5, which exists through the initial edges. - The second query removes the edge between vertices 2 and 3. - The third query checks for a path between vertices 1 and 5 again, and now it does not exist due to the removal. - The fourth query adds the edge back between vertices 2 and 3. - The fifth query checks for the path between vertices 1 and 5 again, which now exists again. - The sixth query checks for the path between vertices 2 and 4, which exists. The solution requires efficient handling of dynamic connectivity in the graph, potentially requiring the use of advanced data structures like Union-Find with path compression and union by rank, alongside link/cut trees or dynamic trees for efficiency.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n + 1)) self.rank = [1] * (n + 1) def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u, root_v = self.find(u), self.find(v) if root_u != root_v: # Union by rank if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def process_graph(n, m, edges, queries): uf = UnionFind(n) current_edges = set() for u, v in edges: current_edges.add((u, v)) uf.union(u, v) results = [] for query in queries: type_query, u, v = query if type_query == 1: if (u, v) not in current_edges: current_edges.add((u, v)) uf.union(u, v) elif type_query == 2: if (u, v) in current_edges: current_edges.remove((u, v)) # Rebuild the parent and rank arrays from the current edges new_uf = UnionFind(n) for x, y in current_edges: new_uf.union(x, y) uf = new_uf elif type_query == 3: if uf.find(u) == uf.find(v): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage n = 5 m = 4 edges = [ (1, 2), (2, 3), (3, 4), (4, 5) ] queries = [ (3, 1, 5), (2, 2, 3), (3, 1, 5), (1, 2, 3), (3, 1, 5), (3, 2, 4) ] print(process_graph(n, m, edges, queries))"},{"question":"Arjun and Beena are participating in a coding competition where they need to find out if a specific number is a \\"Special Fibonacci Number\\". Arjun loves Fibonacci numbers, and Beena admires prime numbers. So, they combined their interests and came up with the following definition: A number is considered a \\"Special Fibonacci Number\\" if it is both a Fibonacci number and a prime number. Given a number N, your task is to determine if it is a \\"Special Fibonacci Number\\". # Input: The first line of input contains an integer T, the number of test cases. The next T lines each contain one integer N. # Output: For each test case, print \\"Yes\\" if the number N is a \\"Special Fibonacci Number\\" and \\"No\\" otherwise. # Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 # Sample Input: 4 2 3 10 17 # Sample Output: Yes Yes No No # Explanation: - For the first test case, 2 is both a Fibonacci number and a prime number, so the output is \\"Yes\\". - For the second test case, 3 is both a Fibonacci number and a prime number, so the output is \\"Yes\\". - For the third test case, 10 is a Fibonacci number but not a prime number, so the output is \\"No\\". - For the fourth test case, 17 is a prime number but not a Fibonacci number, so the output is \\"No\\".","solution":"def is_prime(n): if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_fibonacci(n): if n < 0: return False a, b = 0, 1 while a < n: a, b = b, a + b return a == n def is_special_fibonacci_number(n): return is_fibonacci(n) and is_prime(n) def special_fibonacci_numbers(test_cases): result = [] for n in test_cases: if is_special_fibonacci_number(n): result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"# Shopping Cart Update You are building an e-commerce platform, and one of the features is to update a shopping cart. Each item can be updated to reflect changes in quantity or can be removed from the cart. If the quantity of an item is set to 0, it should be removed from the cart. # Task Write a function that takes a list of items in the cart, each represented as a tuple containing the item name and the quantity, and a list of updates, where each update is a tuple containing the item name and the new quantity. The function should return a new list representing the updated state of the cart. The original list should not be mutated. # Example ```python # Cart: [(\'apple\', 2), (\'banana\', 3), (\'orange\', 1)] # Updates: [(\'apple\', 4), (\'banana\', 0)] update_cart([(\'apple\', 2), (\'banana\', 3), (\'orange\', 1)], [(\'apple\', 4), (\'banana\', 0)]) # Should return: [(\'apple\', 4), (\'orange\', 1)] # Cart: [(\'milk\', 1), (\'bread\', 1), (\'butter\', 2)] # Updates: [(\'bread\', 3), (\'milk\', 0), (\'butter\', 2)] update_cart([(\'milk\', 1), (\'bread\', 1), (\'butter\', 2)], [(\'bread\', 3), (\'milk\', 0), (\'butter\', 2)]) # Should return: [(\'bread\', 3), (\'butter\', 2)] ``` # Constraints - Each item name is unique. - Updates will only refer to items present in the cart. - The new quantity value for an item will always be a non-negative integer.","solution":"def update_cart(cart, updates): Updates the cart based on the updates provided. Parameters: cart (list of tuples): The initial state of the cart, where each tuple is (item_name, quantity). updates (list of tuples): The updates to be applied, where each tuple is (item_name, new_quantity). Returns: list of tuples: The updated cart. # Convert cart to dictionary for easier updates cart_dict = {item: quantity for item, quantity in cart} # Apply updates for item, new_quantity in updates: if new_quantity == 0: cart_dict.pop(item, None) # Remove the item if new_quantity is 0 else: cart_dict[item] = new_quantity # Update the quantity # Convert dictionary back to list of tuples updated_cart = list(cart_dict.items()) return updated_cart"},{"question":"A popular pizza restaurant offers a unique pricing scheme. The price of a pizza order is calculated using a combination of standard and premium toppings. The restaurant has a very specific way of charging its customers: each customer gets charged based on the number of unique toppings they choose, where multiple instances of the same topping are not counted more than once. However, for every premium topping that a customer adds, there is an additional fixed premium cost. Given a list of pizzas that a customer orders, write a function to calculate the total cost. Each pizza is represented by a list of toppings, where toppings can either be \'standard\' or \'premium\'. Standard toppings add a fixed cost per unique topping, while premium toppings add both the fixed cost and an additional surcharge. Input - The first line contains three integers: `n` (the number of pizzas ordered), `s` (the fixed cost for each unique standard topping), and `p` (the additional premium surcharge). - The next `n` lines describe the pizzas. Each line starts with an integer `t` (the number of toppings in that pizza), followed by `t` space-separated strings representing the toppings. Each topping string is formatted as \\"<type>:<name>\\", where <type> is either \\"standard\\" or \\"premium\\". Output Print the total cost of the pizza order. Example Input 2 5 3 3 standard:cheese premium:truffle standard:pepperoni 2 premium:goldflake standard:olive Output 29 Explanation - The first pizza includes 3 unique toppings: 2 standard toppings (cheese, pepperoni) and 1 premium topping (truffle). The cost is calculated as (2 * 5) + (1 * (5 + 3)) = 10 + 8 = 18. - The second pizza includes 2 unique toppings: 1 standard topping (olive) and 1 premium topping (goldflake). The cost is calculated as (1 * 5) + (1 * (5 + 3)) = 5 + 8 = 13. - The total cost is 18 + 13 = 31.","solution":"def calculate_pizza_cost(n, s, p, pizzas): total_cost = 0 for pizza in pizzas: toppings_set = set() standard_count = 0 premium_count = 0 for topping in pizza: type_topping, name_topping = topping.split(\\":\\") if name_topping not in toppings_set: toppings_set.add(name_topping) if type_topping == \\"standard\\": standard_count += 1 elif type_topping == \\"premium\\": premium_count += 1 cost = standard_count * s + premium_count * (s + p) total_cost += cost return total_cost # Example usage: # n = 2 # s = 5 # p = 3 # pizzas = [ # [\\"standard:cheese\\", \\"premium:truffle\\", \\"standard:pepperoni\\"], # [\\"premium:goldflake\\", \\"standard:olive\\"] # ] # print(calculate_pizza_cost(n, s, p, pizzas)) # Output: 31"},{"question":"Task Alice and Bob are playing a game where they take turns picking candies from a pile. There are `n` piles of candies arranged in a row, and each pile has a positive integer number of candies. Alice always goes first, and they take turns picking candies from either end of the row until all piles are gone. The goal of each player is to maximize the total number of candies they collect. Your task is to determine the maximum number of candies Alice can collect if both Alice and Bob play optimally. # Input - `candies`: An integer array. Each element represents the number of candies in a pile. - `2 <= candies.length <= 500` - `1 <= candies[i] <= 10^6` - All inputs are valid. # Output An integer. The maximum number of candies Alice can collect. # Example For `candies = [2, 7, 9, 4, 4]`, the output should be `15`. ``` Alice takes the last pile (4), Bob takes the first pile (2), Alice takes the second last pile (4), Bob takes the second pile (7), and Alice takes the middle pile (9). Alice\'s candies: 4 + 4 + 7 = 15. Bob\'s candies: 2. Alice collects more candies (15). ``` For `candies = [3, 9, 1, 2]`, the output should be `11`. ``` Alice takes the last pile (2), Bob takes the first pile (3), Alice takes the second last pile (1), Bob takes the second pile (9). Alice\'s candies: 2 + 1 + 9 = 12. Bob\'s candies: 3. Alice collects more candies (12). ```","solution":"def max_candies_alice_can_collect(candies): n = len(candies) dp = [[0] * n for _ in range(n)] # When there\'s only one pile for i in range(n): dp[i][i] = candies[i] # When there are more piles for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 left = candies[i] + min(dp[i+2][j] if i+2 <= j else 0, dp[i+1][j-1] if i+1 <= j-1 else 0) right = candies[j] + min(dp[i][j-2] if i <= j-2 else 0, dp[i+1][j-1] if i+1 <= j-1 else 0) dp[i][j] = max(left, right) return dp[0][n-1]"},{"question":"Farmer John has a dairy farm with cows. His farm is well-known for producing high-quality milk, and he has recently started selling milk in bottles. In an effort to automate his sales records, Farmer John wants to develop a program that will help him manage the sales data. He is particularly interested in tracking the revenue generated from different sizes of milk bottles and identifying the most popular bottle size. Each sale record consists of a bottle size (in liters) and the price he sold it for. Farmer John wants to analyze this data to find both the total revenue generated from each bottle size and the most frequently sold bottle size. In case multiple sizes have the same highest sales frequency, return the smallest one. -----Input----- The first line contains an integer n (1 le n le 10^5), the number of milk sales records. Each of the following n lines contains two integers s_i and p_i (1 le s_i le 10^3, 1 le p_i le 10^4), the size of the bottle sold and the price of the sale, respectively. -----Output----- Output two lines. The first line contains the size of the bottle with the most sales (if there is a tie, return the smallest size). The second line contains the total revenue generated from each bottle size in ascending order of sizes. Each revenue should be in the format of \\"size: revenue\\". -----Examples----- Input 5 1 100 2 200 1 150 2 250 3 300 Output 1 1: 250 2: 450 3: 300 Input 4 2 300 3 500 3 600 2 400 Output 2 2: 700 3: 1100 -----Note----- In the first example, bottle size 1 and size 2 both have 2 sales, but size 1 is the smallest size among them. Thus, the output is 1 for the most popular bottle size. Then, the total revenues are calculated as follows: - For size 1: 100 + 150 = 250 - For size 2: 200 + 250 = 450 - For size 3: 300 These should be listed in ascending order of sizes. In the second example, bottle sizes 2 and 3 both have 2 sales, but size 2 is smaller. Thus, the output is 2 for the most popular bottle size. Then, the total revenues are calculated as follows: - For size 2: 300 + 400 = 700 - For size 3: 500 + 600 = 1100 These should be listed in ascending order of sizes.","solution":"def analyze_milk_sales(n, sales_records): from collections import defaultdict # Dictionaries to keep track of sales frequency and revenue sales_frequency = defaultdict(int) revenue_by_size = defaultdict(int) for record in sales_records: size, price = record sales_frequency[size] += 1 revenue_by_size[size] += price # Determine the most frequently sold bottle size most_frequent_size = min([k for k, v in sales_frequency.items() if v == max(sales_frequency.values())]) # Total revenue in ascending order of bottle size sorted_revenues = sorted(revenue_by_size.items()) formatted_revenues = \'n\'.join([f\\"{size}: {revenue}\\" for size, revenue in sorted_revenues]) return most_frequent_size, formatted_revenues # Example usage n = 5 sales_records = [(1, 100), (2, 200), (1, 150), (2, 250), (3, 300)] print(analyze_milk_sales(n, sales_records))"},{"question":"A small village decided to build a simple irrigation system using channels to connect their water source to all of their plots of land. Each channel has a cost associated with its construction. You are given a list of coordinates representing the positions of the plots and the water source on a 2D plane, and a list of the costs of constructing channels between pairs of plots, including the water source. Your task is to determine the minimum total cost required to construct the channels such that every plot is connected to the water source either directly or indirectly. Assume the following: - The village has exactly one water source. - The plots and the water source are not at the same coordinates. Write a function `minIrrigationCost(n, plots, costs)` to find the minimum cost of constructing the channels. Input: - `n` (integer): The number of plots (2 ≤ n ≤ 100). - `plots` (list): A list of tuples where each tuple represents the coordinates (x, y) of a plot on a 2D plane. The water source is always at index 0. The rest of the tuples are the plots. - `costs` (list): A list of `n * (n - 1) // 2` integers, representing the cost of building a channel between each pair of plots and the water source. The list is given in lexicographical order of pairs (plot_i, plot_j) where i < j. Output: Return an integer representing the minimum cost to construct the channels. Example: ```python n = 4 plots = [(0, 0), (1, 1), (4, 4), (10, 10)] costs = [4, 8, 17, 7, 10, 3] print(minIrrigationCost(n, plots, costs)) # Output: 14 ``` Explanation: In the example, there are 4 plots including the water source, located at the origin (0, 0). The costs of constructing the channels are given and can be visualized as an undirected graph with weights. The goal is to find the minimum spanning tree (MST) of this graph to ensure all plots are connected to the water source with minimal total cost.","solution":"def minIrrigationCost(n, plots, costs): Returns the minimum cost to construct channels connecting all plots to the water source. def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_x else: parent[root_y] = root_x rank[root_x] += 1 edges = [] k = 0 for i in range(n): for j in range(i + 1, n): edges.append((costs[k], i, j)) k += 1 # Kruskal\'s algorithm to find Minimum Spanning Tree (MST) edges.sort(key=lambda edge: edge[0]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 edge_count = 0 for cost, u, v in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += cost edge_count += 1 if edge_count == n - 1: break return mst_cost"},{"question":"Linnea is a developer working on a new calendar application. She needs your help to implement a feature that checks the availability of meeting rooms. Each room has a set of existing bookings, and users want to schedule new meetings without conflicts. A meeting is defined by a start time and an end time, and it can\'t overlap with other meetings in the same room. You need to write a function to determine if a new meeting can be scheduled in a specified room without conflicting with existing meetings. If a conflict exists, return the earliest possible time after the new meeting\'s start time when it can be rescheduled without conflicts. -----Input----- The input consists of: 1. An integer ( r ) ( (1 leq r leq 100) ), the number of rooms. 2. For each room, an integer ( n_i ) ( (0 leq n_i leq 1000) ), the number of existing bookings in the ( i )-th room. 3. For each booking, two integers ( s_{ij} ) and ( e_{ij} ) ( (0 leq s_{ij} < e_{ij} leq 10^9) ), representing the start time and end time of the ( j )-th booking in the ( i )-th room. 4. Two integers ( room ) and ( new_meeting_start ) ( (0 leq room < r ) and ( 0 leq new_meeting_start < 10^9) ), the room number and the start time of the new meeting. 5. An integer ( duration ) ( (1 leq duration leq 10^9) ), the duration of the new meeting. -----Output----- Output a single integer representing the earliest possible rescheduled start time of the new meeting if it conflicts with existing bookings, or the original start time if there is no conflict. -----Examples----- Sample Input 1: 2 2 1 5 10 15 3 0 4 5 9 10 11 0 3 2 Sample Output 1: 3 Sample Input 2: 1 3 1 4 5 7 8 10 0 6 2 Sample Output 2: 7 Sample Input 3: 1 0 0 5 3 Sample Output 3: 5","solution":"def find_earliest_rescheduled_time(r, bookings, room, new_meeting_start, duration): selected_room_bookings = bookings[room] new_meeting_end = new_meeting_start + duration for booking in selected_room_bookings: existing_meeting_start, existing_meeting_end = booking if (new_meeting_start < existing_meeting_end and new_meeting_end > existing_meeting_start): new_meeting_start = existing_meeting_end new_meeting_end = new_meeting_start + duration return new_meeting_start"},{"question":"# Prime Number Array Alice has an array of integers and wants to know how many prime numbers are in the array. Write a program that takes an integer array as input and outputs the count of prime numbers in the array. A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. Input The first line contains an integer N (1 ≤ N ≤ 100), the number of elements in the array. The second line contains N integers A_1, A_2, dots, A_N (1 ≤ A_i ≤ 100), the elements of the array. Output Output a single integer that represents the count of prime numbers in the given array. Example # Input 1: ``` 6 2 3 4 5 6 7 ``` # Output 1: ``` 4 ``` # Input 2: ``` 4 1 10 15 20 ``` # Output 2: ``` 0 ``` # Explanation In example 1, the prime numbers between {2, 3, 4, 5, 6, 7} are 2, 3, 5, and 7. Hence, the output is 4. In example 2, there are no prime numbers in the array {1, 10, 15, 20}. Therefore, the output is 0.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes(arr): return sum(1 for x in arr if is_prime(x))"},{"question":"Sarah is managing a warehouse and has a stock of N different types of products. Each product has a certain number of units in stock. Sarah receives M orders where each order asks for a certain quantity of one specific product. Your task is to determine if each order can be fully satisfied based on the current stock. If an order can be fulfilled, you should update the stock accordingly, otherwise, ignore that order. --- Input Format --- - The first line contains an integer N, the number of different types of products. - The second line contains N integers, representing the initial stock of each product. - The third line contains an integer M, the number of orders. - The next M lines each contain two integers p and q, where p is the product index (0-based) and q is the quantity requested in that order. --- Output Format --- - For each order, print \\"YES\\" if the order can be satisfied and \\"NO\\" if it cannot be satisfied. --- Constraints --- 1 ≤ N ≤ 1000 1 ≤ stock_{i} ≤ 10000 1 ≤ M ≤ 1000 0 ≤ p < N 1 ≤ q ≤ 10000 --- Sample Input 1 --- 4 100 150 200 250 5 0 50 1 151 2 200 3 1 0 51 --- Sample Output 1 --- YES NO YES YES NO --- Explanation 1 --- Test Case 1: The first order requests 50 units of product 0, which is available. - Remaining stock: [50, 150, 200, 250]. So, the output is \\"YES\\". Test Case 2: The second order requests 151 units of product 1, but only 150 units are available. - Stock remains: [50, 150, 200, 250]. So, the output is \\"NO\\". Test Case 3: The third order requests 200 units of product 2, which is available. - Remaining stock: [50, 150, 0, 250]. So, the output is \\"YES\\". Test Case 4: The fourth order requests 1 unit of product 3, which is available. - Remaining stock: [50, 150, 0, 249]. So, the output is \\"YES\\". Test Case 5: The fifth order requests 51 units of product 0, but only 50 units are available. - Stock remains: [50, 150, 0, 249]. So, the output is \\"NO\\".","solution":"def warehouse_orders(N, stock, M, orders): Determines if each order can be fully satisfied with the given stock. Parameters: N (int): number of different types of products. stock (list of int): initial stock of each product. M (int): number of orders. orders (list of tuple): each tuple contains product index p and quantity requested q. Returns: list of str: \\"YES\\" if the order can be satisfied, otherwise \\"NO\\". results = [] for p, q in orders: if stock[p] >= q: results.append(\\"YES\\") stock[p] -= q else: results.append(\\"NO\\") return results # Example Input N = 4 stock = [100, 150, 200, 250] M = 5 orders = [(0, 50), (1, 151), (2, 200), (3, 1), (0, 51)] # Example Output print(warehouse_orders(N, stock, M, orders)) # Output: [\'YES\', \'NO\', \'YES\', \'YES\', \'NO\']"},{"question":"The CyberSecurity Company has developed a new algorithm to generate encryption keys consisting of lowercase English letters. However, the team wants to ensure that each generated key meets certain security criteria for robustness. Specifically, a key is considered robust if it has at least `k` distinct characters. Your task is to write a program that checks whether given keys are robust according to the required criteria. -----Input----- The first line contains two integers `n` and `k` (1 ≤ n ≤ 100; 1 ≤ k ≤ 26), where `n` is the number of keys to check, and `k` is the minimum number of distinct characters a key must have to be considered robust. The next `n` lines each contain a single string of lowercase English letters representing an encryption key. Each string has a length between 1 and 100 characters inclusive. -----Output----- For each key, print \\"robust\\" if the key contains at least `k` distinct characters; otherwise, print \\"not robust\\". -----Examples----- Input 3 3 algorithm encryption key Output robust robust not robust Input 2 2 ab aabb Output robust robust","solution":"def check_robust_keys(n, k, keys): Checks if each key is robust. A key is considered robust if it contains at least k distinct characters. Parameters: n (int): The number of keys to check. k (int): The minimum number of distinct characters required for a key to be considered robust. keys (list): List of strings, where each string is an encryption key. Returns: list: A list of strings, where each element is either \\"robust\\" or \\"not robust\\" depending on the robustness of the respective key. results = [] for key in keys: if len(set(key)) >= k: results.append(\\"robust\\") else: results.append(\\"not robust\\") return results"},{"question":"You are managing a warehouse where you need to store boxes in a row. Each box i has a length L_i. To maintain accessibility and organization, you decide to set some rules for the storage: 1. The gaps between consecutive boxes should be equal to or greater than a minimum gap G. 2. The total length of the layout (i.e., the sum of lengths of the boxes plus all the gaps) should not exceed a maximum width W available in the warehouse. Your task is to find out the maximum number of boxes that can be placed in the row while satisfying the above conditions. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of boxes. The second line contains n integers L_i (1 ≤ L_i ≤ 10^9) — the lengths of the boxes. The last line contains two integers G and W (1 ≤ G ≤ 10^9, 1 ≤ W ≤ 10^18) — the minimum gap between consecutive boxes and the maximum width available. -----Output----- Print the maximum number of boxes that can be placed in the row. -----Examples----- Input 5 4 5 3 2 6 2 25 Output 4 Input 3 5 7 8 3 20 Output 2 Input 4 1 2 3 4 1 15 Output 4 -----Note----- In the first example, you can arrange boxes of lengths [4, 5, 3, 2] with gaps of at least 2 units between them, sum will be 4 + 2 + 5 + 2 + 3 + 2 + 2 = 20 which is within the limit of 25. In the second example, any combination exceeding two boxes will exceed the width of 20. In the third example, all four boxes fit within the total width of 15 when minimum gaps of 1 are considered.","solution":"def max_boxes(n, lengths, G, W): Determine the maximum number of boxes that can be placed in the row while satisfying given conditions. :param n: Number of boxes :param lengths: List of lengths of the boxes :param G: Minimum gap between consecutive boxes :param W: Maximum total length of the layout :return: Maximum number of boxes that can be placed in the row lengths.sort() total_length = lengths[0] count = 1 for i in range(1, n): if total_length + lengths[i] + G <= W: total_length += lengths[i] + G count += 1 else: break return count"},{"question":"A magical potion is being developed in the world of Alchemistoria. The ingredients for the potion are represented by a string of lowercase letters. Each letter can be transformed into another letter based on a given set of specific rules. The transformation rules are provided in the form of mappings, where each letter can be mapped to one or more other letters. For example, the rule \'a -> bc\' means that \'a\' can be transformed into \'b\' or \'c\'. However, a letter can only be transformed once and the resulting letters cannot be transformed further. Your task is to determine all possible outcomes of applying the transformation rules to the original string and list all unique resultant strings in sorted order. Input The input consists of the following sections: 1. The first line contains the original string S, which represents the ingredients of the potion. S consists of lowercase letters and has a length of 1 to 10 characters. 2. The second line contains an integer N which is the number of transformation rules (1 ≤ N ≤ 26). 3. The next N lines each contain a transformation rule in the format \'x -> y1y2...yk\' where \'x\' is a lowercase letter being transformed and \'y1y2...yk\' consists of lowercase letters to which \'x\' can be transformed. Each \'x\' and \'y\' appears exactly once in the set of rules. Output Output all possible outcomes of applying the transformation rules to the string S in sorted order, each on a new line. Sample Input abc 3 a -> de b -> fg c -> hi Sample Output dfh dfi dgh dgi efh efi egh egi Explanation: - Transformations for \'a\': \'a\' -> \'d\' or \'e\' - Transformations for \'b\': \'b\' -> \'f\' or \'g\' - Transformations for \'c\': \'c\' -> \'h\' or \'i\' Combining each possible transformation, we get the resultant strings in sorted order. Example Input abc 3 a -> de b -> fg c -> hi Output dfh dfi dgh dgi efh efi egh egi","solution":"from itertools import product def generate_potion_elements(S, N, rules): # Create a dictionary for transformation rules. trans_dict = {} for rule in rules: src, dest = rule.split(\' -> \') trans_dict[src] = dest # Generate a list of lists. Each list contains all possible transformations for a character. transformation_list = [] for char in S: if char in trans_dict: transformation_list.append(list(trans_dict[char])) else: transformation_list.append([char]) # Find all combinations using cartesian product all_combinations = product(*transformation_list) # Join each combination into a string result_strings = [\'\'.join(combo) for combo in all_combinations] # Sort the results result_strings_sorted = sorted(result_strings) return result_strings_sorted"},{"question":"You are given an undirected tree with `n` vertices and `n-1` edges. Each vertex of the tree has a positive integer value assigned to it. The tree is rooted at vertex 1. You need to select a subset of vertices from the tree such that the following conditions are met: 1. The subset includes the root vertex (vertex 1). 2. For a vertex to be included in the subset, all its ancestors must also be included in the subset. 3. The sum of the values of the selected vertices is less than or equal to a given integer `S`. You must determine the maximum possible sum of the values of the selected vertices that satisfies the above conditions. # Input The first line contains two integers `n` and `S` (1 ≤ n ≤ 100, 1 ≤ S ≤ 10^9) — the number of vertices in the tree and the maximum allowed sum of values. The second line contains `n` integers `v_i` (1 ≤ v_i ≤ 10^8) — the value of each vertex starting from vertex 1 to vertex n. Each of the following `n-1` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n) — the vertices connected by an edge of the tree. It is guaranteed that the given graph is a tree. # Output Print one integer — the maximum possible sum of the values of the selected vertices that is less than or equal to `S`. # Example Input ``` 5 20 4 5 6 3 8 1 2 1 3 2 4 2 5 ``` Output ``` 20 ``` Note In this example: - The tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` - If we select vertices {1, 2, 5}, the sum of their values is 4 + 5 + 8 = 17 which is less than or equal to S (20). - If we select vertices {1, 2, 3}, the sum of their values is 4 + 5 + 6 = 15 which is less than or equal to S (20). - Selecting vertices {1, 2, 4, 5} gives a total value of 4 + 5 + 3 + 8 = 20, which is the maximum possible sum that satisfies the conditions.","solution":"def max_subset_sum(n, S, values, edges): from collections import defaultdict, deque # Build the tree structure tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Calculate the size and value of the subtree rooted at each node using DFS def dfs(node, parent): subtree_size[node] = values[node - 1] total_value[node] = values[node - 1] for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) total_value[node] += total_value[neighbor] subtree_size[node] += subtree_size[neighbor] subtree_size = [0] * (n + 1) total_value = [0] * (n + 1) dfs(1, -1) # Use BFS to find the maximum subtree value sum under the given constraints def bfs_max_subset_sum(): max_sum = 0 queue = deque([(1, values[0])]) while queue: node, current_sum = queue.popleft() # Update the maximum sum while keeping it under or equal to S if current_sum <= S: max_sum = max(max_sum, current_sum) for neighbor in tree[node]: if subtree_size[neighbor] < subtree_size[node]: # Ensure we don\'t revisit ancestors new_sum = current_sum + total_value[neighbor] if new_sum <= S: queue.append((neighbor, new_sum)) return max_sum return bfs_max_subset_sum()"},{"question":"You are given a grid of dimensions W x H. Each cell is either empty or contains an obstacle. You need to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (W-1, H-1). You can move up, down, left, or right, but you cannot move through obstacles. Write a program that determines the length of the shortest path from (0, 0) to (W-1, H-1). If there is no such path, return -1. -----Constraints----- - 1 ≦ W, H ≦ 100 - Each cell is either passable (.) or contains an obstacle (#). -----Input----- The input is given from Standard Input in the following format: W H grid_1 grid_2 : grid_H Each of the subsequent lines contains a string of length W representing the grid row by row. -----Output----- Print the length of the shortest path from (0, 0) to (W-1, H-1). If there is no path, print -1. -----Sample Input----- 5 4 ....# #...# #.#.. #.... -----Sample Output----- 7 Explanation: The shortest path uses 7 steps, avoiding obstacles: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,4) (Goal)","solution":"from collections import deque def shortest_path(W, H, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start, end = (0, 0), (H-1, W-1) # Check if start or end is an obstacle if grid[start[0]][start[1]] == \'#\' or grid[end[0]][end[1]] == \'#\': return -1 queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: (current, steps) = queue.popleft() # If we reached the end if current == end: return steps for direction in directions: next_row = current[0] + direction[0] next_col = current[1] + direction[1] next_pos = (next_row, next_col) if 0 <= next_row < H and 0 <= next_col < W and next_pos not in visited and grid[next_row][next_col] == \'.\': queue.append((next_pos, steps + 1)) visited.add(next_pos) return -1"},{"question":"A theme park has M rides. Each ride has a satisfaction level associated with it. Every tourist wants to maximize their satisfaction during their visit. Each tourist can enjoy at most a certain number of rides due to time constraints. The theme park management wants to maximize the total satisfaction of the tourists visiting the park. ------ Input ------ The first line of the input contains an integer Q, denoting the number of test cases. For each test case, the first line contains two space-separated integers, M and R, where M is the number of rides, and R is the maximum number of rides a tourist can enjoy. The next line contains M space-separated integers representing the satisfaction levels of each ride. ------ Output ------ For each test case, output a single integer corresponding to the maximum possible total satisfaction for a tourist. ------ Constraints ------ 1 ≤ Q ≤ 10 1 ≤ M ≤ 10^{5} 1 ≤ R ≤ M 1 ≤ satisfaction level of each ride ≤ 10^{4} ------ Subtasks ------ Subtask #1 (40 points) 1 ≤ Q ≤ 10 1 ≤ M ≤ 10^{3} 1 ≤ R ≤ M 1 ≤ satisfaction level of each ride ≤ 10^{3} Subtask #2 (60 points) Original constraints ------ Sample Input 1 ------ 3 5 3 10 20 30 40 50 4 1 5 15 25 35 6 2 10 20 5 15 30 25 ------ Sample Output 1 ------ 120 35 55 ----- Explanation 1 ------ In the first case, the tourist can enjoy at most 3 rides. The rides with the highest satisfaction levels are 50, 40, and 30, summing up to a total satisfaction of 120. In the second case, the tourist can enjoy only one ride. The ride with the highest satisfaction level is 35. In the third case, the tourist can enjoy at most 2 rides. The rides with the highest satisfaction levels are 30 and 25, summing up to a total satisfaction of 55.","solution":"def max_satisfaction(q, data): result = [] for i in range(q): M, R = data[i][0] satisfaction_levels = data[i][1] satisfaction_levels.sort(reverse=True) result.append(sum(satisfaction_levels[:R])) return result"},{"question":"A peak element in an array is an element that is strictly greater than its neighbors. Given an array of integers nums, find a peak element and return its index. If the array contains multiple peaks, return the index of any of the peak elements. You may imagine that nums[-1] = nums[n] = -∞ (an element outside the bounds of the array is treated as negative infinity). You must solve it in O(log n) time complexity. -----Input----- The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 10^5) — the length of the array, followed by the n integers of the array. The total number of elements in all arrays does not exceed 10^6. -----Output----- For each test case, output a single integer — the index of one of the peak elements. If there are multiple correct answers, output any. You can assume a peak element will always exist. -----Examples----- Input 3 6 1 2 3 1 0 -1 5 10 8 6 5 4 4 1 3 2 4 Output 2 0 1 -----Note----- In the first test case, elements at indices 2, 3 are peak elements. Outputting any one of 2 or 3 is correct. In the second test case, the element at index 0 is the peak element. In the third test case, elements at indices 1, 3 are peak elements. Outputting any one of 1 or 3 is correct.","solution":"def find_peak_element(nums): Returns the index of a peak element. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left def find_peaks(t, test_cases): Finds peaks for all the provided test cases. t: int - Number of test cases test_cases: list of tuples - Each tuple contains first the length of the array n, followed by the array elements Returns a list of peak indices for each test case. results = [] for i in range(t): n, *nums = test_cases[i] peak_index = find_peak_element(nums) results.append(peak_index) return results"},{"question":"A telecommunications company is working on optimizing their network. They need a system to detect the longest sequence of repeated characters in a given message sent over the network. The message is represented as a string consisting of lowercase English letters. Given a string, determine and return the length of the longest sequence of repeated characters. For example, given the string `\\"aabbbccde\\"`, the longest sequence of repeated characters is `\\"bbb\\"`, which has a length of 3. Function Description Complete the `longestRepeatedSequence` function in the editor below. It should return the length of the longest sequence of repeated characters in the given string. longestRepeatedSequence has the following parameter(s): - `message`: a string representing the message sent over the network. Input Format A single string `message`. Constraints - 1 ≤ length of `message` ≤ 10^5 - `message` consists of only lowercase English letters. Output Format Return the length of the longest sequence of repeated characters. Sample Input 0 ``` aabbbccde ``` Sample Output 0 ``` 3 ``` Explanation 0 The longest sequence of repeated characters in the string `\\"aabbbccde\\"` is `\\"bbb\\"`, which has a length of 3. Sample Input 1 ``` abcdefgh ``` Sample Output 1 ``` 1 ``` Explanation 1 All characters in the string `\\"abcdefgh\\"` are unique, and hence the longest sequence of repeated characters has a length of 1. Sample Input 2 ``` zzzzzzxxxxyyyyyyyyyyyyyy ``` Sample Output 2 ``` 14 ``` Explanation 2 The longest sequence of repeated characters in the string `\\"zzzzzzxxxxyyyyyyyyyyyyyy\\"` is `\\"yyyyyyyyyyyyyy\\"`, which has a length of 14.","solution":"def longestRepeatedSequence(message): Returns the length of the longest sequence of repeated characters in the given string. if not message: return 0 max_length = 1 current_length = 1 for i in range(1, len(message)): if message[i] == message[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Alice loves solving puzzles and practicing problem-solving. Recently, she discovered a unique puzzle involving words and letters. The puzzle is simple: given two words, Alice needs to determine if one of them can be obtained by rearranging the letters of the other word, making sure that each letter appears exactly the same number of times in both words. If they are such words, they are called \\"anagrams\\". Help Alice by writing a program that will solve the puzzle for her. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains two lines: - The first line contains the word A. - The second line contains the word B. -----Output----- For each test case, output a single line containing either \\"Yes\\" or \\"No\\" (without quotes), denoting whether A and B are anagrams of each other. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |A|, |B| ≤ 105 - A and B contain only lowercase English letters. -----Example----- Input: 3 listen silent hello billion evil vile Output: Yes No Yes -----Explanation----- Example case 1. \\"listen\\" and \\"silent\\" are anagrams as they contain the same letters with the same frequency. Example case 2. \\"hello\\" and \\"billion\\" are not anagrams because they have different letters or frequencies. Example case 3. \\"evil\\" and \\"vile\\" are anagrams as they contain the same letters with the same frequency. (Note: The letters within each word can be rearranged to form the other word.)","solution":"def are_anagrams(word1, word2): Determines if two words are anagrams of each other. return sorted(word1) == sorted(word2) def solve_puzzle(test_cases): Given the number of test cases and words for each test case, determine if they are anagrams. results = [] for word1, word2 in test_cases: if are_anagrams(word1, word2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Molly loves the Fibonacci sequence, a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. She often finds herself computing many Fibonacci numbers either for fun or for some math problems. However, sometimes these numbers can get very large, and it becomes cumbersome to deal with them manually. So, she needs your help to compute the nth Fibonacci number efficiently. To help Molly, write a program that reads a single integer n and outputs the nth Fibonacci number modulo (10^9 + 7). -----Input----- The input consists of a single integer n (0 ≤ n ≤ (10^6)). -----Output----- Output the nth Fibonacci number modulo (10^9 + 7). -----Example----- Input: 10 Output: 55 -----Constraints----- - 0 ≤ n ≤ (10^6) - The Fibonacci sequence can be defined as: - (F(0) = 0) - (F(1) = 1) - (F(n) = F(n-1) + F(n-2)) for (n geq 2) - The output must be calculated modulo (10^9 + 7)","solution":"def fibonacci_mod(n): Computes the nth Fibonacci number mod 10^9 + 7. MOD = 10**9 + 7 # Base cases if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = (fib[i - 1] + fib[i - 2]) % MOD return fib[n]"},{"question":"Problem Given a connected undirected graph represented as an adjacency list, implement an algorithm to determine if the graph is bipartite. A graph is bipartite if its vertices can be divided into two disjoint sets U and V such that every edge connects a vertex in U to a vertex in V. Write a function: ```python def is_bipartite(graph: Dict[int, List[int]]) -> bool: pass ``` **Input:** - The input graph is represented as a dictionary where keys are the node ids (integers) and values are lists of adjacent nodes (also integers). - An example input could be: ```python graph = { 0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2] } ``` **Output:** - Return `True` if the graph is bipartite, otherwise return `False`. **Constraints:** - The graph will have at most 1000 nodes. - The adjacency list will not contain duplicate edges or self-loops. - All values are integers between 0 and 1000 (inclusive). **Example Input 1:** ```python graph = { 0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2] } ``` **Example Output 1:** ```python True ``` **Example Input 2:** ```python graph = { 0: [1, 2], 1: [0, 2], 2: [0, 1] } ``` **Example Output 2:** ```python False ``` **Example Input 3:** ```python graph = { 0: [], 1: [2], 2: [1] } ``` **Example Output 3:** ```python True ``` # Additional Notes: In a bipartite graph, it is possible to color the graph using two colors (say color 0 and color 1) such that no two adjacent vertices share the same color. The function should utilize this property to determine if the graph is bipartite. Breadth-first search (BFS) or depth-first search (DFS) can be used to check for this property.","solution":"from typing import Dict, List from collections import deque def is_bipartite(graph: Dict[int, List[int]]) -> bool: # This will hold the color (0 or 1) of each vertex color = {} for node in graph: if node not in color: # Start BFS from this node queue = deque([node]) color[node] = 0 # Assign the first color to the starting node while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in color: # Assign the opposite color to the neighbor color[neighbor] = 1 - color[current] queue.append(neighbor) elif color[neighbor] == color[current]: # If the neighbor has the same color, the graph is not bipartite return False return True"},{"question":"In a boating competition, participants have to row their boats from a starting point to a finish line as quickly as possible. Each boat has a certain speed, but also faces varying levels of resistance due to changes in the water’s current. The resistance on each segment of the route is described as a series of integers, where a higher value represents higher resistance. Given the speeds of each participant’s boat and the resistance levels of each segment of the water route, calculate the minimal time required for each participant to complete the route. Each participant starts at the same point and traverses through each segment one by one in the order they are given. Input: The first line contains an integer t, the number of participants. The second line contains an integer m, the number of segments in the water route. The third line contains m space-separated integers, representing the resistance values of each segment in the route. The fourth line contains t space-separated integers, representing the speeds of the boats of each participant. Output: The output should contain t lines, each containing the minimal time required for the corresponding participant to complete the route. Constraints: 1 ≤ t ≤ 1000 1 ≤ m ≤ 100000 1 ≤ resistance[i], speed[j] ≤ 100 SAMPLE INPUT 2 3 5 3 4 10 5 SAMPLE OUTPUT 1.8 3.6 Explanation: For participant 1: Segment 1 time = 5/10 = 0.5 Segment 2 time = 3/10 = 0.3 Segment 3 time = 4/10 = 0.4 Total time = 0.5 + 0.3 + 0.4 = 1.2 For participant 2: Segment 1 time = 5/5 = 1 Segment 2 time = 3/5 = 0.6 Segment 3 time = 4/5 = 0.8 Total time = 1 + 0.6 + 0.8 = 2.4","solution":"def calculate_minimal_time(t, m, resistances, speeds): Calculates the minimal time required for each participant to complete the route. Args: - t (int): Number of participants. - m (int): Number of segments in the water route. - resistances (list of int): Resistance values of each segment in the route. - speeds (list of int): Speeds of the boats of each participant. Returns: - list of float: Minimal time required for each participant to complete the route. times = [] for speed in speeds: time = 0 for resistance in resistances: time += resistance / speed times.append(round(time, 2)) return times"},{"question":"You are given a string s consisting of lowercase alphabetical letters. You can perform the following operation on the string any number of times: - Choose two adjacent characters that are equal and remove both of them. Your task is to determine if it is possible to remove all characters from the string by performing the operation any number of times. Example: Given s = \\"abccba\\", if you repeatedly remove pairs of adjacent identical characters (\\"cc\\", then \\"bb\\", then \\"aa\\"), you will eventually remove all characters, so the answer is \\"YES\\". Given s = \\"abccbx\\", you cannot remove all characters (you will be left with \\"ax\\" at the end), so the answer is \\"NO\\". ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The next T lines each contain a single string, s. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible to remove all characters by performing the operation any number of times, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |s| ≤ 1000 Each character of s is a lowercase alphabet letter (\'a\'-\'z\'). ------ Sample Input 1 ------ 3 abccba abccbx aabbcc ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: By removing \\"cc\\", then \\"bb\\", then \\"aa\\", the string becomes empty. Test case 2: You can remove \\"cc\\" and \\"bb\\", but you are left with \\"ax\\" which cannot be further reduced. Test case 3: By removing \\"aa\\", \\"bb\\", and \\"cc\\", the string becomes empty.","solution":"def can_remove_all_characters(s): Determines if it is possible to remove all characters by performing the given operation. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases and returns the results as a list. results = [] for s in test_cases: results.append(can_remove_all_characters(s)) return results"},{"question":"# Find the Cycle We have a network of `n` nodes connected with `n` links, forming a single cycle. Each link has a positive integer weight. A path in the cycle is defined as a sequence of connected links starting and ending at any node. The weight of a path is the sum of the weights of the links in the path. Your task is to find the weight of the lightest path in the cycle, considering any possible path starting and ending at any node. # Input - The first line contains an integer `n` (3 ≤ n ≤ 1000), the number of nodes in the network. - Each of the next `n` lines contains three integers `u`, `v`, `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), representing a link between node `u` and node `v` with weight `w`. # Output - Print a single integer, the weight of the lightest path in the cycle. # Example Input ```plaintext 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Output ```plaintext 6 ``` Explanation For the cycle formed by nodes: 1-2, 2-3, 3-4, 4-1 Possible paths and their weights: - Path including links: (1-2, 2-3, 3-4) has weight = 1 + 2 + 3 = 6 - Path including links: (2-3, 3-4, 4-1) has weight = 2 + 3 + 4 = 9 - Path including links: (3-4, 4-1, 1-2) has weight = 3 + 4 + 1 = 8 - Path including links: (4-1, 1-2, 2-3) has weight = 4 + 1 + 2 = 7 The lightest path in this cycle is 6. # Note You can assume that the cycle is always valid and that each link connects exactly the two nodes stated in the description. Each link weight is positive, ensuring that each path will have a positive weight.","solution":"def find_lightest_path(n, edges): Find the weight of the lightest path in the cycle. Parameters: n (int): Number of nodes in the network. edges (list of tuples): Each tuple contains (u, v, w) representing a link between node u and node v with weight w. Returns: int: Weight of the lightest path in the cycle. total_weight = sum(weight for _, _, weight in edges) max_weight = max(weight for _, _, weight in edges) min_path_weight = total_weight - max_weight return min_path_weight # For the function to work during tests def parse_input(input_list): n = int(input_list[0]) edges = [tuple(map(int, x.split())) for x in input_list[1:]] return n, edges"},{"question":"In a particular city, there are multiple residential buildings situated in a row, with each building having a certain height. The city government has decided to create a scenic view by reducing the height of some buildings such that no building\'s height is greater than the highest building to its right. You are a city planner and need to modify the building heights accordingly. You are given an array where each element represents the height of a building. Adjust the heights of the buildings in such a way that for every building, its height is not greater than the maximum height of any building to its right. Input The first line of input contains T, the number of test cases. The first line of each test case contains N, the number of buildings, the next line consists of the elements of the array H representing the heights of the buildings. Output For each test case, output the modified sequence of building heights. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ H[i] ≤ 1000 Example Input: 3 3 3 7 5 5 5 4 3 6 2 4 10 15 20 5 Output: 7 7 5 6 6 6 6 2 20 20 20 5","solution":"def modify_heights(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] max_heights = heights[:] for j in range(N-2, -1, -1): max_heights[j] = max(max_heights[j], max_heights[j+1]) results.append(max_heights) return results # Function to integrate the input and output handling def process_input_output(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) heights = list(map(int, input_lines[index+1].split())) test_cases.append((N, heights)) index += 2 results = modify_heights(T, test_cases) output_lines = [] for result in results: output_lines.append(\\" \\".join(map(str, result))) return \\"n\\".join(output_lines)"},{"question":"You are given a rectangular grid of dimensions n x m with some cells filled and some cells empty. Each cell can have one of the following three statuses: empty (.), filled with \'x\' (X), and filled with \'o\' (O). You want to determine whether it is possible to traverse from any empty cell to another empty cell through adjacent empty cells using the minimum number of steps. At each step, you can move to an adjacent cell horizontally or vertically. Determine the minimum steps required to move between two given empty cells or if it is even possible to do so. Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000) — the number of rows and columns respectively. The next n lines contain m characters each — the description of the grid. The last line contains four integers r1, c1, r2, c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) — initial cell and target cell coordinates. It is guaranteed that both initial cell and target cell are empty cells. Output Print a single integer — the minimum number of steps necessary for reaching the target cell from the initial cell, or -1 if it\'s not possible. Examples Input 4 4 .... .XX. .XX. .... 1 1 4 4 Output 6 Input 4 4 .... .XX. .XX. .... 1 1 3 3 Output -1","solution":"from collections import deque def min_steps_to_traverse_grid(n, m, grid, r1, c1, r2, c2): Determine the minimum steps required to go from (r1, c1) to (r2, c2) in the given grid. If the path is not possible, return -1. # Adjust coordinates to be 0-based r1, c1, r2, c2 = r1 - 1, c1 - 1, r2 - 1, c2 - 1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(r1, c1, 0)]) visited = set([(r1, c1)]) while queue: x, y, steps = queue.popleft() if (x, y) == (r2, c2): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an array consisting of n integers, where n is even. You need to divide this array into exactly two non-empty subarrays such that the difference between their sums is minimized. Formally, let the array be `arr = [a1, a2, ..., an]`, you need to split it into two subarrays `arr1` and `arr2` such that the absolute difference | sum(arr1) - sum(arr2) | is minimized. Return the minimum possible absolute difference. Examples: Example 1: Input: n = 4 arr = [1, 2, 3, 4] Output: 0 Explanation: Split the array into two subarrays [1, 4] and [2, 3], the sums of them are both 5, and their difference is 0. Example 2: Input: n = 6 arr = [5, 10, 15, 20, 25, 30] Output: 5 Explanation: Split the array into two subarrays [5, 10, 15, 25] and [20, 30], the sums of them are 55 and 50 respectively, and their difference is 5. Your Task: You need to complete the function `minDifference()` which takes the integer n and array `arr` as parameters and returns the minimum possible absolute difference between the sums of the two subarrays. Expected Time Complexity: O(n*2^n/2) Expected Auxiliary Space: O(2^n/2) Constraints: - 2 <= n <= 20 - 1 <= arr[i] <= 100","solution":"def minDifference(n, arr): from itertools import combinations total_sum = sum(arr) half_n = n // 2 min_diff = float(\'inf\') all_combinations = [] for i in range(1, half_n + 1): all_combinations += list(combinations(arr, i)) for subarr in all_combinations: sum1 = sum(subarr) sum2 = total_sum - sum1 min_diff = min(min_diff, abs(sum1 - sum2)) return min_diff"},{"question":"You are a software engineer at a robotics company, and your team is developing a new simulation for their latest autonomous robot. The robot moves through a grid of cells, where each cell can be empty or contain an obstacle. The robot can start at any empty cell and should be able to determine the shortest path to another empty cell. The robot moves according to the following rules: - It can move one step at a time in any of the four cardinal directions (North, South, East, West). - It cannot move through cells that contain obstacles. - It must stay within the boundaries of the grid. You are tasked with writing a function that determines the length of the shortest path from a starting cell to a target cell. If there is no valid path between the starting cell and the target cell, the function should return -1. -----Input----- - The first line contains two integers r and c (1 leq r, c leq 1000), representing the dimensions of the grid. - The next r lines each contain c characters where each character is either \'.\' indicating an empty cell or \'#\' indicating an obstacle. - The next line contains two integers r_s and c_s (0 leq r_s < r, 0 leq c_s < c) representing the starting cell. - The next line contains two integers r_t and c_t (0 leq r_t < r, 0 leq c_t < c) representing the target cell. -----Output----- Print a single integer representing the length of the shortest path from the starting cell to the target cell, or -1 if no such path exists. -----Examples----- Sample Input 1: 5 5 ..... .#.#. .#.#. .#.#. ..... 0 0 4 4 Sample Output 1: 8 Sample Input 2: 3 3 .#. # .#. 0 0 2 2 Sample Output 2: -1","solution":"from collections import deque def shortest_path_length(grid, start, goal): r, c = len(grid), len(grid[0]) r_s, c_s = start r_t, c_t = goal if grid[r_s][c_s] == \'#\' or grid[r_t][c_t] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(r_s, c_s, 0)]) # (current_row, current_col, current_distance) visited = set((r_s, c_s)) while queue: row, col, dist = queue.popleft() if (row, col) == (r_t, c_t): return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < r and 0 <= new_col < c and (new_row, new_col) not in visited: if grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1 def parse_input_and_find_shortest_path(input_string): lines = input_string.strip().split(\'n\') r, c = map(int, lines[0].split()) grid = [list(lines[i + 1]) for i in range(r)] start = tuple(map(int, lines[r + 1].split())) goal = tuple(map(int, lines[r + 2].split())) return shortest_path_length(grid, start, goal)"},{"question":"A company wants to generate unique employee IDs for each of its employees. Every employee ID must be a palindromic number, meaning it reads the same backward as forward. Given an integer N, the company wants to know the N-th palindromic number. The first few palindromic numbers are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, and so on. Your task is to write a function that takes an integer N as input and returns the N-th palindromic number. -----Input----- The input consists of an integer N (1 ≤ N ≤ 1000), which indicates the position of the palindromic number in the sequence of palindromic numbers. -----Output----- The output should be a single integer, which is the N-th palindromic number. -----Example----- Input: 5 Output: 5 Input: 11 Output: 22","solution":"def is_palindrome(num): Helper function to check if a number is a palindrome. return str(num) == str(num)[::-1] def nth_palindromic_number(N): Function to get the N-th palindromic number. count = 0 num = 0 # Iterate until we find the N-th palindromic number while count < N: num += 1 if is_palindrome(num): count += 1 return num"},{"question":"Given an unsorted array of integers, your task is to sort the array using the Bubble Sort algorithm and print the array after each pass through the array. Bubble Sort iteratively steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Example. n = 5 arr = [4, 2, 6, 3, 1] Working through the array, we get the following output: First Pass: 2 4 3 1 6 Second Pass: 2 3 1 4 6 Third Pass: 2 1 3 4 6 Fourth Pass: 1 2 3 4 6 Function Description Complete the bubbleSort function in the editor below. bubbleSort has the following parameter(s): - int n: the length of textbf{arr} - int arr[n]: an array of integers Output: Print the array as space-separated integers after every pass through the array. Input Format The first line contains an integer, n, the size of textbf{arr}. The next line contains n space-separated integers arr[i]. Constraints 1 leq n leq 1000 -10000 leq arr[i] leq 10000, 0 leq i < n Output Format Print the entire array on a new line after each pass. Sample Input STDIN Function ----- -------- 5 n = 5 5 3 8 4 2 arr = [5, 3, 8, 4, 2] Sample Output 3 5 4 2 8 3 4 2 5 8 3 2 4 5 8 2 3 4 5 8 Explanation In the first pass, the largest element (8) \\"bubbles\\" to the rightmost position. In the second pass, the next largest element (5) \\"bubbles\\" to its correct position, and so on. The algorithm stops when no swaps are needed anymore to sort the array.","solution":"def bubbleSort(n, arr): for i in range(n): swapped = False for j in range(1, n - i): if arr[j - 1] > arr[j]: arr[j - 1], arr[j] = arr[j], arr[j - 1] swapped = True if not swapped: break print(\' \'.join(map(str, arr)))"},{"question":"A security system in a large office building performs a daily check on all access logs. The system generates logs detailing the exact times when each employee enters or exits different rooms. The building has m rooms and supports n employees. Each employee wears an ID badge that is scanned each time they enter or leave a room. An entry in the log is formatted as follows: `timestamp ID room_number status` Where `timestamp` is an integer representing the exact moment in milliseconds since the start of the day, `ID` is the employee\'s ID number, `room_number` is the room\'s number, and `status` is either \\"in\\" or \\"out\\" representing whether the employee entered or exited the room. You are tasked with writing code to determine the total time spent in each room by each employee over the course of a day. Input The input consists of: - An integer, n (1 ≤ n ≤ 1000), representing the number of employees. - An integer, m (1 ≤ m ≤ 100), representing the number of rooms. - A list of t logs (1 ≤ t ≤ 10000), each formatted as described above, representing the events recorded by the system. Output For each employee, output the total time spent in each room in the format `employee_ID room_number total_time`, sorted first by employee ID and then by room number. Ensure that each employee and room combination is only mentioned if there is a non-zero total time. Do not count any time if an employee is currently in a room at the end of the day without having a corresponding \\"out\\" log. Example Input 4 2 8 1000 1 101 in 2000 1 101 out 3000 2 101 in 4000 2 102 in 5000 1 101 in 6000 1 101 out 7000 2 102 out 8000 2 101 out Output 1 101 2000 2 101 5000 2 102 3000 Explanation - Employee 1 spent 1000 ms and then 1000 ms more in room 101. - Employee 2 spent 5000 ms in room 101. - Employee 2 spent 3000 ms in room 102.","solution":"def calculate_total_time_spent(n, m, logs): from collections import defaultdict time_spent = defaultdict(lambda: defaultdict(int)) entry_time = {} for log in logs: timestamp, emp_id, room_num, status = log if status == \\"in\\": entry_time[(emp_id, room_num)] = timestamp elif status == \\"out\\" and (emp_id, room_num) in entry_time: time_spent[emp_id][room_num] += timestamp - entry_time.pop((emp_id, room_num), 0) result = [] for emp_id in sorted(time_spent): for room_num in sorted(time_spent[emp_id]): if time_spent[emp_id][room_num] > 0: result.append(f\'{emp_id} {room_num} {time_spent[emp_id][room_num]}\') return result"},{"question":"Implement a class `UserHistoryTracker` that manages the browsing history of users in a website. The class should support two methods: 1. `visit(userId: int, url: str) -> None` Records that a user with `userId` visited the `url`. 2. `getHistory(userId: int) -> List[str]` Returns the browsing history of the user with `userId` as a list of URLs in the order they were visited. The class should maintain the history in the order of visit, and a user can visit the same URL multiple times. Example: ```python tracker = UserHistoryTracker() tracker.visit(1, \\"https://example.com\\") tracker.visit(1, \\"https://example.org\\") tracker.visit(2, \\"https://example.net\\") tracker.visit(1, \\"https://example.com\\") assert tracker.getHistory(1) == [\\"https://example.com\\", \\"https://example.org\\", \\"https://example.com\\"] assert tracker.getHistory(2) == [\\"https://example.net\\"] ``` Constraints: - The `userId` will be a positive integer. - The `url` will be a non-empty string containing a valid URL format. - There will be at most 1000 orders for visiting URLs and retrieving the history. - Number of different users will be at most 100.","solution":"from collections import defaultdict class UserHistoryTracker: def __init__(self): self.user_history = defaultdict(list) def visit(self, userId: int, url: str) -> None: self.user_history[userId].append(url) def getHistory(self, userId: int) -> list: return self.user_history[userId]"},{"question":"Alice is an avid video game player and has recently started delving into the world of game design. She is working on a game where the player navigates through rooms to reach a final destination. Each room has a certain number of doors, and each door leads to another room. Alice wants to ensure that the path to the final destination can be easily navigated without encountering any loops. She needs your help to verify that the game map does not contain any cycles. Given a list of rooms and their connections in the form of directed edges, write a program to determine whether the game map contains any cycles. Input The input consists of multiple datasets. The last dataset is followed by a line containing a single zero. You don\'t have to process this data. Each dataset is in the following format: n m a1 b1 a2 b2 ... am1 bm1 The first line of each dataset contains two integers, n and m. n is the number of rooms, and m is the number of doors (directed edges) connecting the rooms. The next m lines each contain two integers, ai and bi, indicating a directed edge from room ai to room bi. Output For each dataset, print \\"Yes\\" if the game map contains a cycle, otherwise print \\"No\\". After each dataset\'s output, print a blank line. Constraints 1 ≤ n ≤ 100 0 ≤ m ≤ 500 Rooms are numbered from 1 to n. Example Input 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 3 1 0 Output Yes No","solution":"def is_cyclic(n, edges): from collections import defaultdict, deque graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in edges: graph[u].append(v) indegree[v] += 1 queue = deque([node for node in range(1, n + 1) if indegree[node] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return visited_count != n def game_map_cycle_detection(datasets): results = [] for data in datasets: n, m, edges = data if is_cyclic(n, edges): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given two strings, `a` and `b`, both of the same length, consisting of lowercase English letters. You want to make these strings equal by replacing some characters in both strings. Your goal is to perform the minimum number of replacements to achieve this. A replacement involves changing a character in either string `a` or string `b` to any other lowercase English letter. Write a program that computes and outputs the minimum number of replacement operations required to make the two strings equal. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100) — the length of the strings. The second line contains the string `a` of length `n`. The third line contains the string `b` of length `n`. -----Output----- Output a single integer — the minimum number of replacements required to make the strings equal. -----Examples----- Input 4 abcd bcda Output 4 Input 5 abcde abcde Output 0","solution":"def min_replacements_to_equal_strings(n, a, b): Given two strings a and b of length n, compute the minimum number of replacements to make the strings equal by changing characters in either string a or string b. Parameters: n (int): The length of the strings. a (str): The first string. b (str): The second string. Returns: int: The minimum number of replacements required to make the strings equal. if n != len(a) or n != len(b): raise ValueError(\\"The length of the strings must be equal to the given length n.\\") replacements = 0 for i in range(n): if a[i] != b[i]: replacements += 1 return replacements"},{"question":"You are working on a new medical laboratory software that assists in managing and analyzing test results of patients. One of the important functions of this software is to evaluate whether certain health markers are within the acceptable range. The task is to write a program that, given a set of patient records with their lab test results, counts the number of patients whose every test result is within the specified range. Each patient record includes multiple test results. Each test result is expressed as an integer value, and there are minimum and maximum acceptable values for each test. A patient is considered \'healthy\' if all of their test results are within the respective acceptable ranges. Input The input consists of at most 10 datasets. Each dataset has the following structure: - The first line contains two integers p and t, separated by a space. p is the number of patients and t is the number of tests. - The second line contains t pairs of integers, each representing the minimum and maximum acceptable values for each test. Each pair is separated by a space. - Each of the next p lines contains t integers separated by spaces, representing the test results of each patient. The input ends with a line containing two zeros separated by a space. All integers in the input are between -100 and 100. 1 ≤ p ≤ 100 1 ≤ t ≤ 20 Output For each dataset, output one line containing the count of patients who are classified as \'healthy\'. Each output line should not contain any extra characters (such as spaces). Example Input 3 2 50 90 100 140 55 120 45 115 52 135 2 3 10 30 20 40 30 50 15 35 45 5 25 55 0 0 Output 2 1","solution":"def count_healthy_patients(datasets): results = [] for dataset in datasets: p, t = dataset[0] ranges = dataset[1] patients = dataset[2] healthy_count = 0 for patient in patients: all_tests_pass = True for i in range(t): if not (ranges[i][0] <= patient[i] <= ranges[i][1]): all_tests_pass = False break if all_tests_pass: healthy_count += 1 results.append(healthy_count) return results def parse_input(input_data): data = input_data.strip().split(\\"n\\") datasets = [] index = 0 while index < len(data): # Parse the first line of p and t values p, t = map(int, data[index].strip().split()) if p == 0 and t == 0: break index += 1 test_ranges = [] # Parse the test ranges test_ranges_data = data[index].strip().split() for i in range(t): min_val = int(test_ranges_data[i * 2]) max_val = int(test_ranges_data[i * 2 + 1]) test_ranges.append((min_val, max_val)) index += 1 patients = [] # Parse the patient test results for _ in range(p): patient_data = list(map(int, data[index].strip().split())) patients.append(patient_data) index += 1 datasets.append(((p, t), test_ranges, patients)) return datasets def main(input_data): datasets = parse_input(input_data) healthy_counts = count_healthy_patients(datasets) for count in healthy_counts: print(count)"},{"question":"A company needs to manage the contributions made by each employee towards a project. Each contribution is recorded as a string which starts with the employee\'s name followed by the amount of contribution. The task is to parse these records and compute the total contribution by each employee. Definition of Contribution Record: - A single record is of the form \\"Name amount\\", where \\"Name\\" is a single word (alphabetical characters) and \\"amount\\" is a positive integer. Your task is to process multiple records and output the total contribution for each employee. Input: - The first line contains an integer T denoting the number of test cases. - For each test case, there is a single line containing multiple records separated by commas. Output: - For each test case, output the total contributions made by each employee in a new line. The output for each test case should be in the format \\"Name: total\\", where the employees\' names are sorted in alphabetical order. Constraints: 1 ≤ T ≤ 10 1 ≤ length of record string ≤ 1000 1 ≤ amount ≤ 1000 Employee names will not contain spaces. SAMPLE INPUT: 2 Alice 50, Bob 100, Alice 200 John 10, Doe 20, John 30, Alice 10 SAMPLE OUTPUT: Alice: 250, Bob: 100 Alice: 10, Doe: 20, John: 40 Explanation: In the first case, Alice contributes a total of 250 and Bob contributes 100. In the second case, John contributes a total of 40, Doe contributes 20, and Alice contributes 10.","solution":"def process_contributions(T, records_list): Processes the contribution records and returns the total contributions for each employee sorted by employee name. Parameters: T (int): Number of test cases. records_list (list of str): List containing the records for each test case. Returns: list of str: Sorted contributions for each test case in \\"Name: total\\" format. results = [] for records in records_list: contributions = {} records_split = records.split(\', \') for record in records_split: name, amount = record.split() amount = int(amount) if name in contributions: contributions[name] += amount else: contributions[name] = amount sorted_contributions = sorted(contributions.items()) result = \', \'.join(f\\"{name}: {total}\\" for name, total in sorted_contributions) results.append(result) return results"},{"question":"You are designing an algorithm to help a warehouse robot navigate through a grid of boxes to find the optimal path from the top-left corner to the bottom-right corner. The grid is represented as an N x M matrix, where each cell contains a non-negative integer representing the height of a stack of boxes. The robot can move to the neighboring cells (right, down, left, or up), but only if the height difference is at most 1 between the current cell and the next cell, or if the next cell contains fewer boxes than the current cell. Given the dimensions of the grid N and M, and the heights of the boxes in each cell, determine the number of steps in the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. Example 1: Input: grid = [ [1, 2, 2], [3, 8, 2], [5, 3, 1] ] Output: 4 Explanation: The shortest path is expected to be (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), covering 4 steps. Example 2: Input: grid = [ [1, 4, 3], [5, 6, 2], [7, 2, 1] ] Output: -1 Explanation: There is no path from (0, 0) to (2, 2) that adheres to the height difference and movement rules. Your Task: This is a function problem. The input is already given by the driver code. You need to implement the function shortestPath(grid), which takes a list of lists of integers representing the grid, and returns an integer representing the number of steps in the shortest path, or -1 if no such path exists. Expected Time Complexity: O(N * M* log(N * M)). Expected Auxiliary Space: O(N * M). Constraints: 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 10^5","solution":"import heapq def shortestPath(grid): Returns the number of steps in the shortest path from top-left to bottom-right of the grid. If no such path exists, return -1. N = len(grid) M = len(grid[0]) if N == 0 or M == 0: return -1 # Directions for moving: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Priority queue for Dijkstra\'s algorithm; entries are (steps, row, col) pq = [(0, 0, 0)] # Visited set to keep track of visited nodes visited = {(0, 0)} while pq: steps, r, c = heapq.heappop(pq) if (r, c) == (N - 1, M - 1): return steps for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < N and 0 <= new_c < M and (new_r, new_c) not in visited: # Calculate if the movement is valid if abs(grid[new_r][new_c] - grid[r][c]) <= 1 or grid[new_r][new_c] < grid[r][c]: visited.add((new_r, new_c)) heapq.heappush(pq, (steps + 1, new_r, new_c)) # If the loop completes and we haven\'t returned, there is no valid path return -1"},{"question":"Smart Beaver is interested in building a structure using square tiles. Each tile is numbered from 1 to n, where n is the number of tiles he has. Smart Beaver wants to arrange these tiles in a square grid such that all rows and columns have unique sums of numbers. Given an integer n, your task is to determine if it is possible to arrange the n tiles in this way. If it is possible, provide the arrangement of tiles; otherwise, return \\"Not possible\\". Input The first line contains a single integer n (1 ≤ n ≤ 100). Output If it is possible to arrange the tiles in the required way, print \\"Possible\\" on the first line. For the following n lines, print n space-separated integers each, representing the arrangement of tiles in the grid. If it is not possible, print \\"Not possible\\". Example Input 4 Output Possible 1 2 3 4 Input 3 Output Not possible Note In the first example, the grid forms a 2x2 matrix with unique sums for every row and column. In the second example, it’s impossible to form a 3x3 grid with unique sums for all rows and columns.","solution":"def build_grid(n): import math # Check if n is a perfect square side = math.isqrt(n) if side * side != n: return \\"Not possible\\" # Generate the grid grid = [[0] * side for _ in range(side)] num = 1 for i in range(side): for j in range(side): grid[i][j] = num num += 1 return \\"Possible\\", grid def main(n): result = build_grid(n) if result == \\"Not possible\\": return result else: status, grid = result return \\"{}n{}\\".format(status, \\"n\\".join(\\" \\".join(map(str, row)) for row in grid))"},{"question":"You are given a rectangular grid with dimensions n x m. In this grid, some cells are blocked and some are unblocked. Rabbit needs to reach from the top-left corner (1, 1) to the bottom-right corner (n, m), but can only move to the right or down into unblocked cells. Determine if Rabbit can reach the destination. -----Constraints----- - 2 ≦ n, m ≦ 50 - The grid is represented by an n x m matrix where each element is either 0 (unblocked) or 1 (blocked). - The top-left corner (1, 1) and the bottom-right corner (n, m) are always unblocked. -----Input----- The input is given from Standard Input in the following format: n m grid_1 grid_2 ... grid_n Each grid_i contains m characters, either \'0\' or \'1\', representing the blocked and unblocked cells in the i-th row. -----Output----- If it is possible for Rabbit to reach the bottom-right corner, print Yes. Otherwise, print No. -----Sample Input----- 3 3 000 010 000 -----Sample Output----- Yes","solution":"def can_reach_destination(n, m, grid): Returns \'Yes\' if Rabbit can reach bottom-right corner from top-left, otherwise returns \'No\'. from collections import deque # Convert grid to a more accessible format grid = [list(map(int, row)) for row in grid] # Initialize the queue with the starting position queue = deque([(0, 0)]) # Directions for moving right and down directions = [(0, 1), (1, 0)] # Visited set to avoid revisiting cells visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reach the bottom-right corner if (x, y) == (n-1, m-1): return \'Yes\' for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \'No\'"},{"question":"Given an array of strings where each string represents a binary number, your task is to find two distinct strings in the array such that their XOR operation results in the maximum binary value. Return the maximum binary value as a string. Example 1: Input: arr = [\\"110\\", \\"101\\", \\"111\\"] Output: \\"011\\" Explanation: XOR of \\"110\\" and \\"101\\" is \\"011\\" which is the maximum value possible. Example 2: Input: arr = [\\"1100\\", \\"0110\\", \\"1010\\", \\"1001\\"] Output: \\"1111\\" Explanation: XOR of \\"0110\\" and \\"1001\\" is \\"1111\\" which is the maximum value possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxXOR() which takes the array of strings arr[] as input parameter and returns the maximum binary value as a string. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 2 ≤ arr.length ≤ 10^3 1 ≤ arr[i].length ≤ 50 arr[i] contains only \'0\' or \'1\'.","solution":"def maxXOR(arr): Returns the maximum binary value achievable by XORing two distinct strings in the array. max_value = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): xor_value = int(arr[i], 2) ^ int(arr[j], 2) max_value = max(max_value, xor_value) return format(max_value, \'b\').zfill(len(arr[0])) # Example usage: # arr = [\\"110\\", \\"101\\", \\"111\\"] # print(maxXOR(arr)) # Outputs: \\"011\\""},{"question":"Given an integer sequence of length N, B = (B_1, B_2, cdots, B_N), and an integer M. For each Y such that 1 le Y le M, find the maximum value of the following expression: left(B_i^Y + B_j^Yright) for 1 le i < j le N. -----Constraints----- - All values in input are integers. - 2 le N le 10^4 - 1 le M le 100 - 1 le B_i le 10^6 -----Input----- Input is given from Standard Input in the following format: N M B_1 B_2 cdots B_N -----Output----- Print M lines. The Y-th line should contain the maximum value of left(B_i^Y + B_j^Yright) for 1 le i < j le N. -----Sample Input----- 4 2 3 1 5 2 -----Sample Output----- 52 5806 In the 1-st line, we need the maximum value of (B_i^1 + B_j^1) for 1 le i < j le 4. The possible values are: * 3 + 1 = 4 * 3 + 5 = 8 * 3 + 2 = 5 * 1 + 5 = 6 * 1 + 2 = 3 * 5 + 2 = 7 Hence, the maximum value is 8. In the 2-nd line, we need the maximum value of (B_i^2 + B_j^2) for 1 le i < j le 4. The possible values are: * 3^2 + 1^2 = 9 + 1 = 10 * 3^2 + 5^2 = 9 + 25 = 34 * 3^2 + 2^2 = 9 + 4 = 13 * 1^2 + 5^2 = 1 + 25 = 26 * 1^2 + 2^2 = 1 + 4 = 5 * 5^2 + 2^2 = 25 + 4 = 29 Hence, the maximum value is 34.","solution":"def max_expressions(N, M, B): For each Y from 1 to M, compute the maximum value of (B_i^Y + B_j^Y), where 1 <= i < j <= N. results = [] for Y in range(1, M + 1): max_value = float(\'-inf\') # calculate all B_i^Y values first B_pow = [b ** Y for b in B] for i in range(N): for j in range(i + 1, N): max_value = max(max_value, B_pow[i] + B_pow[j]) results.append(max_value) return results"},{"question":"Alice has an array of integers a_1, a_2, dots, a_n. She wants to make all elements of the array equal by performing a series of operations. In each operation, she can choose two indices i and j (1 le i, j le n; i neq j) and replace a_i and a_j by their arithmetic mean, a_i := a_j := frac{a_i + a_j}{2}. Determine the minimum number of operations needed to make all elements of the array equal. If it is impossible, output -1. A valid integer solution is such that after a finite number of operations, all elements of the array can be made identical. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 le t le 10^3) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 10^4). The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output the minimum number of operations needed to make all elements of the array equal, or -1 if it is impossible. -----Examples----- Input 3 2 4 8 3 2 4 6 4 1 2 3 4 Output 1 -1 -1 -----Note----- For the first test, the only possible operation is: Choose i=1, j=2. Perform a_1, a_2 := frac{4 + 8}{2} = 6. For the second test, it is impossible to get the same integer for all elements by any number of operations. For the third test, it is impossible to get the same integer for all elements by any number of operations.","solution":"def min_operations_to_make_equal(t, test_cases): results = [] for n, a in test_cases: if len(set(a)) == 1: results.append(0) continue if n == 2: results.append(1) continue results.append(-1) return results # Example User input processing t = 3 test_cases = [ (2, [4, 8]), (3, [2, 4, 6]), (4, [1, 2, 3, 4]) ] result = min_operations_to_make_equal(t, test_cases) print(result)"},{"question":"Write a function named `is_perfect_square` that determines if a given integer is a perfect square. An integer `x` is a perfect square if there exists an integer `m` such that `m * m = x`. Your function should return `True` if `x` is a perfect square and `False` otherwise. For example: ```python is_perfect_square(16) ``` should return `True` because 4 * 4 = 16. ```python is_perfect_square(15) ``` should return `False` because there is no integer m such that m * m = 15. Additionally, the function should handle negative inputs by returning `False`, as negative numbers cannot be perfect squares. ```python is_perfect_square(-4) ``` should return `False`. Write your implementation in Python. Avoid using built-in functions like `sqrt()`. Instead, consider using an iterative or binary search approach to solve this problem efficiently. ```python def is_perfect_square(x): # Your code here ``` Your function signature should be `def is_perfect_square(x):`, and your solution should have a time complexity better than O(n).","solution":"def is_perfect_square(x): Determines if a given integer x is a perfect square. Returns True if x is a perfect square, otherwise False. if x < 0: return False low, high = 0, x while low <= high: mid = (low + high) // 2 squared = mid * mid if squared == x: return True elif squared < x: low = mid + 1 else: high = mid - 1 return False"},{"question":"You are given an n × n grid consisting of cells with integer values. Each cell can be identified by its row and column number. You are also given q queries, each specifying two coordinates (i, j) and (x, y) which describe a subrectangle within the grid. For each query, you need to determine the sum of all values contained in the specified subrectangle. Input The input consists of multiple lines. The first line contains two integers n (1 ≤ n ≤ 1000) and q (1 ≤ q ≤ 100000), separated by a single space. The next n lines each contain n integers, representing the values in the grid. Each integer is between -1000 and 1000. The subsequent q lines contain four integers i, j, x, y (1 ≤ i ≤ x ≤ n, 1 ≤ j ≤ y ≤ n), separated by single spaces, which describe the top-left (i,j) and bottom-right (x,y) corners of each subrectangle query. Output For each query, print the sum of all values in the specified subrectangle. Examples Input 4 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 1 2 2 2 2 3 4 1 1 4 4 Output 14 42 136 Note For the first query, the subrectangle is: 1 2 5 6 The sum is 1 + 2 + 5 + 6 = 14. For the second query, the subrectangle is: 6 7 8 10 11 12 The sum is 6 + 7 + 8 + 10 + 11 + 12 = 54. For the third query, the subrectangle is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 The sum is the total of all elements in the grid which is 136.","solution":"def subrectangle_sums(n, q, grid, queries): prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] # Compute prefix sums for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Answer the queries using the prefix sums results = [] for query in queries: i, j, x, y = query sum_subrectangle = prefix_sum[x][y] - prefix_sum[i-1][y] - prefix_sum[x][j-1] + prefix_sum[i-1][j-1] results.append(sum_subrectangle) return results"},{"question":"The company wants to introduce a new pricing algorithm to provide customers with discount rates based on the prices of items in their shopping cart. The discount will be based on the following criteria: - If the total price of the items in the cart exceeds 100, a 10% discount is applied to the total. - If the total price of the items in the cart is 50 or more but less than or equal to 100, a 5% discount is applied to the total. - If the total price of the items in the cart is less than 50, no discount is applied. Write a program that calculates the final price after applying the appropriate discount based on the total price of the items in the cart. Input A single line containing space-separated positive integer values representing the prices of items in the cart. Each value will not exceed 100 and the number of items will not exceed 50. Output The total price after applying the appropriate discount, rounded to 2 decimal places. Example Input 20 30 50 100 Output 180.00","solution":"def apply_discount(prices): Calculate the final price after applying the appropriate discount. :param prices: A list of integer prices of items in the cart. :return: The total price after applying the discount, rounded to 2 decimal places. total_price = sum(prices) if total_price > 100: discount = 0.10 elif 50 <= total_price <= 100: discount = 0.05 else: discount = 0.00 final_price = total_price * (1 - discount) return round(final_price, 2)"},{"question":"Given a list of strings words, return all strings in words that is a subsequence of another string in words. A string is a subsequence of another string if it can be derived from that string by deleting some or no characters without changing the order of the remaining characters. Example 1: Input: words = [\\"mass\\",\\"as\\",\\"hero\\",\\"superhero\\"] Output: [\\"as\\",\\"hero\\"] Example 2: Input: words = [\\"leetcode\\",\\"et\\",\\"code\\"] Output: [\\"et\\",\\"code\\"] Example 3: Input: words = [\\"blue\\",\\"green\\",\\"bu\\"] Output: [\\"bu\\"] Note: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists of only lowercase English letters.","solution":"def find_subsequences(words): def is_subsequence(s1, s2): it = iter(s2) return all(char in it for char in s1) result = [] for i, word1 in enumerate(words): for j, word2 in enumerate(words): if i != j and is_subsequence(word1, word2): result.append(word1) break return result"},{"question":"Farmer John has a rectangular farm divided into a grid of n times m cells. Each cell can either be fertile or infertile. Farmer John wants to plant crops in fertile cells such that no two adjacent cells (vertically or horizontally) both contain crops. Determine the maximum number of crops Farmer John can plant on his farm. ------ Input: ------ The first line contains two integers n and m, denoting the number of rows and columns in the grid. The next n lines each contain a string of length m, representing the grid. A \'1\' represents a fertile cell, and a \'0\' represents an infertile cell. ------ Output: ------ A single integer denoting the maximum number of crops that can be planted. ------ Constraints ------ 1 leq n, m leq 1000 ----- Sample Input 1 ------ 3 3 101 010 101 ----- Sample Output 1 ------ 5 ----- Explanation 1 ------ For the first input, Farmer John can plant crops at the following locations: (1,1), (1,3), (2,2), (3,1), (3,3). ----- Sample Input 2 ------ 4 4 1010 0101 1010 0101 ----- Sample Output 2 ------ 8 ----- Explanation 2 ------ For the second input, Farmer John can plant crops in an alternating pattern: (1,1), (1,3), (2,2), (2,4), (3,1), (3,3), (4,2), (4,4).","solution":"def max_crops(n, m, farm): Determines the maximum number of crops Farmer John can plant such that no two adjacent cells both contain crops. :param n: Number of rows in the farm grid :param m: Number of columns in the farm grid :param farm: List of strings, each representing a row in the farm grid, where \'1\' is a fertile cell and \'0\' is an infertile cell. :return: Maximum number of crops that can be planted max_crops = 0 # We can use a checkerboard (or chessboard) pattern for maximum crop placement for i in range(n): for j in range(m): if farm[i][j] == \'1\' and (i + j) % 2 == 0: max_crops += 1 return max_crops"},{"question":"A company has developed an algorithm that helps them to manage and analyze their data storage systems efficiently. To add more functionality to their system, they decided to implement a feature that finds the longest common substring between two given strings. You have been brought in as a software engineer to implement this feature. The longest common substring is defined as the longest sequence of characters that appears consecutively in both strings. You need to write a program that accepts two strings and finds the length of their longest common substring. Input: The first line of input contains an integer T, denoting the number of test cases. Each test case contains two lines: - The first line contains the first string A. - The second line contains the second string B. Output: For each test case, print the length of the longest common substring shared between the two strings. Constraints: 1 ≤ T ≤ 50 1 ≤ Length of A, B ≤ 1000 SAMPLE INPUT 2 abcdef zbcdf abcxyz xyzabc SAMPLE OUTPUT 3 3 Explanation Test Case #1: The longest common substring between \\"abcdef\\" and \\"zbcdf\\" is \\"bcd\\" with length 3. Test Case #2: The longest common substring between \\"abcxyz\\" and \\"xyzabc\\" is \\"xyz\\" with length 3.","solution":"def longest_common_substring(A, B): Returns the length of the longest common substring between strings A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] longest = 0 for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest = max(longest, dp[i][j]) return longest def process_test_cases(T, test_cases): results = [] for case in test_cases: A, B = case results.append(longest_common_substring(A, B)) return results"},{"question":"In a 2D grid of size N x M, you are to find the shortest path from the top-left corner (0,0) to the bottom-right corner (N-1,M-1). However, certain cells are blocked and cannot be traversed. You are allowed to move up, down, left, or right, but cannot move diagonally. Your task is to calculate the length of the shortest path from the start to the end. If no such path exists, return -1. Constraints * 1 leq N, M leq 1000 * Each cell is either \'0\' (unblocked) or \'1\' (blocked) * The top-left corner and the bottom-right corner are always unblocked (\'0\') Input Input is given from Standard Input in the following format: N M Grid Where Grid is a representation of the 2D grid with N rows and M columns. Output Print the length of the shortest path from the top-left to the bottom-right corner. If no path exists, print -1. Examples Input 3 3 0 1 0 0 0 0 1 1 0 Output 4 Input 4 4 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 Output 6 Input 2 2 0 1 1 0 Output -1","solution":"from collections import deque def get_shortest_path_length(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: # Reached bottom-right corner return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def input_and_calculate_shortest_path(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for _ in range(n): grid.append(data[index:index + m]) index += m print(get_shortest_path_length(n, m, grid))"},{"question":"In a densely populated city, the government needs to monitor the movements within its grid-like structure of streets and avenues to improve traffic management. The city is represented by an NxM grid, where each cell is specified by a pair of coordinates (x, y). Coordinates are 1-based indices, with (1, 1) representing the top-left corner of the city. The government has data on P events, each corresponding to a specific location in the city. Every event consists of a start time and end time, during which traffic is high at that location. Your task is to process a series of Q queries, where each query asks for the number of unique high-traffic events occurring at a given location during a given time interval. -----Input----- The first line contains three space-separated integers N, M, and P, representing the dimensions of the city and the number of high-traffic events. The next P lines contain data for each event: four integers x, y, start, and end, where (x, y) represents the location, and start to end (inclusive) represents the time interval when the event occurs. The following line contains an integer Q, representing the number of queries. For the next Q lines, each query consists of three integers x, y, and time, representing the location and the specific time to inquire about. -----Output----- For each query, output a single integer representing the number of unique high-traffic events at the given location (x, y) at the given time. -----Constraints----- - 1 ≤ N, M ≤ 100 - 1 ≤ P ≤ 1000 - 1 ≤ x ≤ N - 1 ≤ y ≤ M - 1 ≤ start, end, time ≤ 10000 - 1 ≤ Q ≤ 1000 -----Example----- Input: 4 5 3 1 2 1 5 3 4 2 6 1 2 4 8 2 1 2 3 3 4 5 Output: 1 1 Explanation: There are three events: 1. An event at (1, 2) from time 1 to 5 2. An event at (3, 4) from time 2 to 6 3. Another event at (1, 2) from time 4 to 8 For the first query (1, 2, 3), there is only 1 high-traffic event happening at (1, 2). For the second query (3, 4, 5), there is only 1 high-traffic event happening at (3, 4).","solution":"def high_traffic_events(N, M, P, events, Q, queries): Returns a list of number of unique high-traffic events for each query location and time. # Create a dictionary to store events by location event_dict = {} # Process each event for x, y, start, end in events: if (x, y) not in event_dict: event_dict[(x, y)] = [] event_dict[(x, y)].append((start, end)) results = [] # Process each query for x, y, t in queries: count = 0 if (x, y) in event_dict: for start, end in event_dict[(x, y)]: if start <= t <= end: count += 1 results.append(count) return results"},{"question":"In a theme park, there are several rides. Each ride has a height restriction, and you must ensure that only people who meet the height requirements can go on the rides. Given the heights of some people and the height restrictions of the rides, determine the maximum number of people who can enjoy at least one ride. Input: Input starts with an integer T ≤ 20, the number of test cases. Each test case consists of 3 lines. The first line of each test case contains a positive integer M ≤ 100, the number of people. The second line contains M positive integers not exceeding 200, which represent the heights of the people in centimeters. The third line contains M positive integers not exceeding 200, which represent the height restrictions of the rides in centimeters. Output: For each test case, output the maximum number of people who can enjoy at least one ride. Sample input: 2 5 120 130 90 150 110 100 120 150 110 125 4 95 110 140 160 125 100 105 140 Sample output: 4 3","solution":"def max_people_can_ride(test_cases): results = [] for case in test_cases: M = case[\'M\'] people_heights = case[\'people_heights\'] ride_restrictions = case[\'ride_restrictions\'] count = 0 for height in people_heights: for restriction in ride_restrictions: if height >= restriction: count += 1 break results.append(count) return results # Example usage: # test_cases = [ # { # \'M\': 5, # \'people_heights\': [120, 130, 90, 150, 110], # \'ride_restrictions\': [100, 120, 150, 110, 125], # }, # { # \'M\': 4, # \'people_heights\': [95, 110, 140, 160], # \'ride_restrictions\': [125, 100, 105, 140], # } # ] # print(max_people_can_ride(test_cases)) # Output: [4, 3]"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the even numbers from the original list, each incremented by 1. ```python increment_even([1, 2, 3, 4, 5, 6]) ==> [3, 5, 7] increment_even([10, 21, 32, 43, 54, 65]) ==> [11, 33, 55] increment_even([7, 13, 19]) ==> [] ``` Good Luck!","solution":"def increment_even(numbers): Takes a list of integers and returns a new list containing only the even numbers from the original list, each incremented by 1. :param numbers: List of integers :return: List of integers return [num + 1 for num in numbers if num % 2 == 0]"},{"question":"Alice and Bob are working on a problem with two integer sequences `x` and `y`, both of length `n`. Alice can quickly calculate the sum of any subarray of `x`, and Bob can do the same for any subarray of `y`. Given a query of the form (l, r), Alice will provide the sum of elements from l to r in the sequence `x`, while Bob will do the same for the sequence `y`. You need to determine if there is any subarray (l, r) such that the sum of the subarray in `x` is equal to the sum of the subarray in `y`. Write a function that takes in the integer `n` and two sequences `x` and `y` and returns a boolean indicating if any such subarray exists. -----Input----- The first line contains one integer `n` (1 ≤ n ≤ 200 000). The second line contains `n` integers `x_1, x_2, ..., x_n` (-10^9 ≤ x_i ≤ 10^9) — the sequence `x`. The third line contains `n` integers `y_1, y_2, ..., y_n` (-10^9 ≤ y_i ≤ 10^9) — the sequence `y`. -----Output----- Return `True` if there exists any subarray (l, r) such that the sum of elements from l to r in `x` is equal to the sum of elements from l to r in `y`. Otherwise, return `False`. -----Examples----- Input 5 1 2 3 4 5 4 3 2 1 5 Output True Input 3 1 2 3 4 5 6 Output False -----Note----- In the first example, one such subarray is (4, 4) because the sum of the subarray containing only the fourth element is equal (4 for `x` and 4 for `y`). In the second example, there is no such subarray where the sum of the subarray in `x` is equal to the sum of the subarray in `y`.","solution":"def check_equal_subarray_sum(n, x, y): Determines if there exists a subarray (l, r) such that the sum of the subarray in x is equal to the sum of the subarray in y. Args: n (int): Length of the sequences x and y. x (List[int]): The first sequence of integers. y (List[int]): The second sequence of integers. Returns: bool: True if such a subarray exists, False otherwise. # Compute the prefix sums for x and y prefix_sum_x = [0] * (n + 1) prefix_sum_y = [0] * (n + 1) for i in range(1, n + 1): prefix_sum_x[i] = prefix_sum_x[i - 1] + x[i - 1] prefix_sum_y[i] = prefix_sum_y[i - 1] + y[i - 1] # Use a set to track the differences between the prefix sums prefix_diff_set = set() for i in range(n + 1): if prefix_sum_x[i] - prefix_sum_y[i] in prefix_diff_set: return True prefix_diff_set.add(prefix_sum_x[i] - prefix_sum_y[i]) return False"},{"question":"You are given an array B consisting of N integers. You can perform the following operations: 1. Select two distinct indices i and j and swap B[i] and B[j] (you can perform this operation any number of times). 2. Select a subarray B[l:r] (which means select indices l, l+1, ..., r-1, r) where the length of the subarray is even, and reverse this subarray. Find the minimum number of operations required to sort the array in non-decreasing order. If it is not possible to sort the array using the allowed operations, print -1 instead. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N, the size of the array. - The next line contains N space-separated integers denoting the elements of the array B. ------ Output Format ------ For each test case, output on a new line, the minimum number of operations required to sort the array in non-decreasing order. If it is not possible to do so, print -1 instead. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ B_{i} ≤ 10^{4} ------ Sample Input 1 ------ 2 4 4 3 2 1 5 5 1 3 2 4 ------ Sample Output 1 ------ 1 1 ------ Explanation 1 ------ Test case 1: We can sort the array with a single reverse operation on the entire array. The operation will change B = [4, 3, 2, 1] to B = [1, 2, 3, 4]. Test case 2: We can sort the array by first swapping indices 4 and 5 to get B = [5, 1, 3, 4, 2] and then reversing the subarray from index 2 to 5 to get B = [5, 1, 2, 3, 4]. Finally, swapping indices 1 and 2 gives us B = [1, 5, 2, 3, 4]. After that, we reverse the subarray from index 2 to 5 to get the sorted array B = [1, 2, 3, 4, 5]. Thus, only one subarray reverse operation is actually required.","solution":"def min_operations_to_sort_array(T, test_cases): results = [] for case in test_cases: N, B = case if N % 2 == 0: results.append(1) else: results.append(-1) return results"},{"question":"After reviewing the questions\' style, length, difficulty, and topic alignment, here is a new question that fits within the provided guidelines: Write a program that processes a given sentence to identify and sum up all the individual digits present in the sentence. Input A single line of text, no longer than 100 characters, containing letters, digits, spaces, and punctuation. Output The sum of all individual digits found in the text. If there are no digits, output 0. Example Input There are 3 apples and 4 oranges. Output 7 Input No digits here! Output 0","solution":"def sum_of_digits(sentence): Returns the sum of all individual digits found in the given sentence. Parameters: sentence (str): The input sentence containing letters, digits, spaces, and punctuation. Returns: int: The sum of all individual digits in the sentence. Returns 0 if no digits are found. return sum(int(char) for char in sentence if char.isdigit())"},{"question":"A progressive number is a positive integer that, when its digits are raised to consecutive powers starting from 1, the sum of those powers equals to the number itself. For instance, 89 is a progressive number because 8^1 + 9^2 = 89. Write a program that takes two positive integers p and q (where p < q) and prints out all the progressive numbers in the range [p, q], inclusive. If no progressive numbers exist in the specified range, the program should output \\"NO PROGRESSIVE NUMBER\\". Here is a step-by-step breakdown of the problem: 1. The program should read two integers p and q from the input. 2. For each number in the range from p to q, it should compute the sum of its digits raised to consecutive powers. 3. If the sum matches the original number, the number is a progressive number. 4. The program should print out all such numbers found in the range, space-separated in a single line. 5. If no such numbers exist, the program should print \\"NO PROGRESSIVE NUMBER\\". INPUT - Two positive integers p and q where 0 < p < q < 1000000. OUTPUT - All progressive numbers in the range, space-separated in a single line. - If no progressive numbers are found, output \\"NO PROGRESSIVE NUMBER\\". CONSTRAINTS 0 < p < q < 1000000 SAMPLE INPUT 10 150 SAMPLE OUTPUT 89","solution":"def is_progressive_number(n): Checks if the number n is a progressive number. digits = [int(d) for d in str(n)] total = sum(d ** (i + 1) for i, d in enumerate(digits)) return total == n def find_progressive_numbers(p, q): Find all progressive numbers in the range [p, q]. progressive_numbers = [] for num in range(p, q + 1): if is_progressive_number(num): progressive_numbers.append(num) if progressive_numbers: return \' \'.join(map(str, progressive_numbers)) else: return \\"NO PROGRESSIVE NUMBER\\""},{"question":"Challenge: You are given a string consisting of lowercase letters and your task is to determine the minimum number of characters to remove to make the remaining string\'s characters all unique. Example: Given \\"abcabc\\", your function should return 3, because by removing two \'a\'s, one \'b\', and one \'c\', the leftover characters \\"abc\\" are all unique. Note: - If the string is already composed of unique characters, return 0. - The order of the characters in the original string is irrelevant. - Focus on minimizing the number of deletions required to achieve a string with all unique characters.","solution":"def min_removals_to_unique(string): Returns the minimum number of characters to remove to make the string\'s characters all unique. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(string) # Count the total number of excess characters excess_count = sum(count - 1 for count in char_count.values() if count > 1) return excess_count"},{"question":"You are given a rectangular land of dimensions n * m. There are obstacles on the land that are marked by \'#\'. You need to find the number of unique paths from the top-left corner of the land (0, 0) to the bottom-right corner of the land (n-1, m-1). You can only move either down or right at any point in time. Write a program to compute the total number of unique paths. Input Format The first line of input contains two space-separated integers n and m indicating the dimensions of the land. The next n lines contain m characters each representing the grid. The character \'#\' denotes an obstacle, and \'.\' denotes an empty cell. Constraints 1 <= n, m <= 1000 Output Format Print the number of unique paths from the top-left corner to the bottom-right corner. If there is no path, print 0. Sample Input 3 3 ..# .#. ... Sample Output 1 Explanation Only one path from (0, 0) to (2, 2) avoiding obstacles is (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2). Timelimit Time limit for this challenge is given here","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Tokitsukaze enjoys organizing tournaments for a two-player card game. Each game uses n distinct cards, numbered from 1 through n. Tokitsukaze is in charge of setting up the tournament bracket. In each round of the tournament, the two players use the same card from their decks to compete, and the winner is determined by comparing the numbers on the cards. The player with the card having the larger number wins. To make the tournament more interesting, Tokitsukaze decided to introduce a rule: the number of rounds in which a player wins must be maximally equalized between the two players. Specifically, she\'s keen on ensuring the sum of the differences between their respective wins across all rounds is minimized. Help Tokitsukaze by finding the minimum possible sum of the differences between the number of wins of each player. # Input Format - The first line contains a single positive integer t (1 leq t leq 10^4) — the number of test cases. - For each test case, the first line contains a single integer n (1 leq n leq 10^5) — the number of cards in each player\'s deck. - The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq n) — the deck of the first player. It is guaranteed that p is a permutation. - The third line contains n integers q_1, q_2, ldots, q_n (1 leq q_i leq n) — the deck of the second player. It is guaranteed that q is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^{5}. # Output Format For each test case, print a single integer — the minimum possible sum of the differences between the number of wins of each player. # Example Input ``` 2 3 3 1 2 2 3 1 4 4 1 3 2 2 3 1 4 ``` Output ``` 1 0 ``` # Explanation In the first test case: - Player 1 can win rounds where he uses cards with numbers 3, 1, and 2, respectively, resulting in 1 win for player 1 and 2 wins for player 2. - The sum of the differences between their wins is |1-2| = 1. In the second test case: - Player 1 can win rounds where he uses cards with numbers 4, 1, 3, and 2, respectively, resulting in 2 wins each. - The sum of the differences between their wins is |2-2| = 0.","solution":"def minimized_win_difference(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] p = test_cases[i][1] q = test_cases[i][2] p_wins = 0 q_wins = 0 for card_p, card_q in zip(p, q): if card_p > card_q: p_wins += 1 elif card_q > card_p: q_wins += 1 win_difference = abs(p_wins - q_wins) results.append(win_difference) return results"},{"question":"Sherzod is conducting experiments with a list of integers and he is interested in understanding their palindromic structure. An integer is considered a \\"palindromic structure\\" if it reads the same backward as forward. For this exercise, he wants to know the minimum number of contiguous subarrays that are required to completely partition the given list so that every subarray itself is a palindromic structure. For example, if the list of integers is [1, 2, 1, 3, 3, 2, 1], it can be partitioned into [1, 2, 1], [3], [3], [2, 1], where each subarray is a palindrome. Your task is to write a program to determine the minimum number of subarrays that the given list can be partitioned into, such that each subarray is a palindromic structure. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the list. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1000), where a_{i} is the i-th integer in the list. -----Output----- Print the minimum number of contiguous subarrays that Sherzod can partition the list into, such that each subarray is a palindrome. -----Examples----- Input 7 1 2 1 3 3 2 1 Output 4 Input 3 1 2 1 Output 1 Input 5 1 2 3 4 5 Output 5 Input 6 1 1 1 1 1 1 Output 1 -----Note----- In the first example, the list can be partitioned into [1, 2, 1], [3], [3], [2, 1], resulting in 4 subarrays. In the second example, the list [1, 2, 1] is already a palindrome, so only 1 subarray is needed. In the third example, each element must be its own subarray since no two elements can form a palindrome, resulting in 5 subarrays. In the fourth example, the list is already a palindrome, so only 1 subarray is needed.","solution":"def min_palindrome_partitions(arr): n = len(arr) def is_palindrome(i, j): while i < j: if arr[i] != arr[j]: return False i += 1 j -= 1 return True dp = [float(\'inf\')] * n for i in range(n): if is_palindrome(0, i): dp[i] = 1 else: for j in range(i): if is_palindrome(j + 1, i): dp[i] = min(dp[i], dp[j] + 1) return dp[-1]"},{"question":"You are given an array of integers and a target integer k. Your task is to find the minimum number of contiguous subarrays from the given array such that the sum of each subarray is less than or equal to k. -----Input----- The first line of the input contains two integers n and k (1 le n le 1000; 1 le k le 10^6) — the number of elements in the array and the target sum. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — the elements of the array. -----Output----- Print the minimum number of contiguous subarrays required such that the sum of each subarray is less than or equal to k, or -1 if it is impossible. -----Examples----- Input 5 10 1 2 3 4 5 Output 2 Input 3 5 2 4 6 Output -1 Input 6 15 5 1 7 3 2 1 Output 2 -----Note----- In the first example, the array can be split into two subarrays [1, 2, 3, 4] and [5], both of which have sums less than or equal to 10. In the second example, it\'s impossible to split the array into subarrays where each has a sum less than or equal to 5, since the second element alone exceeds the target sum. In the third example, the array can be split into two subarrays [5, 1, 7] and [3, 2, 1], both of which have sums less than or equal to 15.","solution":"def min_subarrays(n, k, array): Finds the minimum number of contiguous subarrays such that the sum of each subarray is less than or equal to k. Returns -1 if it\'s impossible. current_sum = 0 subarray_count = 1 for num in array: if num > k: return -1 if current_sum + num > k: subarray_count += 1 current_sum = num else: current_sum += num return subarray_count"},{"question":"Residents of a small village need to efficiently manage the distribution of water among themselves. The village has a single water tank which is filled to a fixed capacity each day. It is required to evenly distribute the water among all the residents such that each resident gets an equal amount of water and no water is wasted. The village representatives have approached you to write a program that will calculate the amount of water each resident will get, along with the amount of leftover water, if the water cannot be evenly distributed. Your task is to write a program that takes the total amount of water in the tank and the number of residents, and outputs the amount of water each resident will get along with the leftover water. Input The input consists of two lines: - The first line contains an integer, `W`, representing the total amount of water in the tank (1 ≤ W ≤ 10^9). - The second line contains an integer, `N`, representing the number of residents in the village (1 ≤ N ≤ 10^9). Output The output should contain two integers on a single line separated by a space: - The first integer should represent the amount of water each resident will get. - The second integer should represent the leftover water. Examples Input 100 3 Output 33 1 Input 150 5 Output 30 0 Input 10 2 Output 5 0 Input 7 4 Output 1 3","solution":"def distribute_water(W, N): Distributes water among residents and calculates leftover water. :param int W: Total amount of water in the tank (1 ≤ W ≤ 10^9). :param int N: Number of residents in the village (1 ≤ N ≤ 10^9). :return: A tuple with two integers: - amount of water each resident will get - leftover water :rtype: tuple water_per_resident = W // N leftover_water = W % N return water_per_resident, leftover_water"},{"question":"You are given a string consisting of lowercase letters and a non-negative integer k. You can choose any character in the string and change it to any other lowercase letter at most k times. Your goal is to maximize the number of consecutive repeating characters in the string. Write a program that, given the initial string and the integer k, will determine the maximum number of consecutive repeating characters possible after performing at most k changes. -----Input----- The first line of input contains a single non-negative integer k (0 ≤ k ≤ 1000000). The second line contains a string s consisting of lowercase letters (1 ≤ |s| ≤ 100000). -----Output----- Print a single integer representing the maximum number of consecutive repeating characters that can be obtained after performing at most k changes. -----Examples----- Input 2 aabbcc Output 4 Input 1 aabbcc Output 3 Input 0 abcde Output 1","solution":"def max_consecutive_repeating_chars(s, k): Returns the maximum number of consecutive repeating characters in the string s after performing at most k changes. from collections import defaultdict max_count = 0 max_length = 0 count = defaultdict(int) start = 0 for end in range(len(s)): count[s[end]] += 1 max_count = max(max_count, count[s[end]]) if (end - start + 1 - max_count) > k: count[s[start]] -= 1 start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a string representing a sequence of actions in a robot\'s history of movements. The actions include the following characters: \'U\' : Move up \'D\' : Move down \'L\' : Move left \'R\' : Move right Assume the robot starts at the origin point (0, 0) on a 2D plane. Your task is to determine if the robot returns to the origin after completing its sequence of movements. Example 1: Input: \\"UD\\" Output: True Explanation: The robot moves up (to point (0, 1)) and then down (back to point (0, 0)), so it returns to the origin. Example 2: Input: \\"LL\\" Output: False Explanation: The robot moves left twice (to point (-2, 0)), and does not return to the origin.","solution":"def does_return_to_origin(movements): Determines if the robot returns to the origin after completing its sequence of movements. Parameters: movements (str): A string representing the sequence of movements. Returns: bool: True if the robot returns to the origin, False otherwise. # Initialize the starting point x, y = 0, 0 # Iterate over each movement and update coordinates for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # Check if robot returns to the origin return x == 0 and y == 0"},{"question":"Tom is organizing a coding competition, and he needs to calculate the total time for each participant\'s submissions. Each submission has a specified duration, and each participant can make multiple submissions. The submission times for each participant are stored in separate files, named after their unique participant ID. Create a program that calculates the total time each participant spent on their submissions. Your program should read the input file that contains the list of participant IDs and their corresponding submission durations. Each entry in the input file is formatted as \\"participant_id submission_duration\\". Different submissions by the same participant may appear in non-consecutive lines. To simplify the processing, assume each line of the input file is valid and formatted correctly as per the described convention. -----Input----- The input consists of multiple lines, where each line contains a string (participant_id) and an integer (submission_duration) separated by a space. The input ends when EOF is reached. -----Output----- Print each participant\'s total calculated time in ascending order of their participant_id. -----Constraints----- - participant_id is a string containing alphanumeric characters and its length does not exceed 50 characters. - submission_duration is an integer between 1 and 10^6. - The number of lines in the input does not exceed 100,000. -----Examples----- Input alice 30 bob 20 alice 50 carol 10 bob 30 Output alice 80 bob 50 carol 10 Input alex 3000 ben 1500 alex 2500 charlie 300 ben 700 Output alex 5500 ben 2200 charlie 300 -----Note----- In the first example, Alice has two submissions with durations 30 and 50, resulting in a total time of 80. Bob has two submissions with durations 20 and 30, resulting in 50. Carol has one submission with a duration of 10. In the second example, Alex has two submissions, Ben has two submissions, and Charlie has one submission, each resulting in the respective total times displayed in the output.","solution":"def calculate_total_time(submissions): Calculate the total submission time for each participant. Parameters: submissions (list of str): List of strings in the format \\"participant_id submission_duration\\". Returns: dict: Dictionary where keys are participant_ids and values are their total submission times. from collections import defaultdict # Dictionary to hold the total submission time for each participant participant_times = defaultdict(int) # Process each submission entry for submission in submissions: participant_id, duration = submission.split() duration = int(duration) participant_times[participant_id] += duration # Convert the dictionary to a sorted list of tuples for output sorted_participant_times = sorted(participant_times.items()) return sorted_participant_times"},{"question":"In a coding competition, participants can advance to the next round based on their score in the initial qualification round. The scoring criteria is as follows: - ADVANCE if the score is 70 or above. - RETRY if the score is between 40 and 69 (inclusive). - FAIL if the score is below 40. Given the scores of the participants, determine their results for advancing to the next round. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer S — the score of the participant. ------ Output Format ------ For each test case, output on a new line whether the participant should ADVANCE, RETRY, or FAIL. You may print each character in lowercase or uppercase. For example, ADVANCE, advance, Advance, and advANCE, are all identical. ------ Constraints ------ 1 ≤ T ≤ 30 0 ≤ S ≤ 100 ----- Sample Input 1 ------ 5 85 47 39 70 55 ----- Sample Output 1 ------ ADVANCE RETRY FAIL ADVANCE RETRY ----- explanation 1 ------ Test case 1: The score is 85, which is greater than 70. Thus, the result is ADVANCE. Test case 2: The score is 47, which is between 40 and 69. Thus, the result is RETRY. Test case 3: The score is 39, which is less than 40. Thus, the result is FAIL. Test case 4: The score is 70, which is exactly 70. Thus, the result is ADVANCE. Test case 5: The score is 55, which is between 40 and 69. Thus, the result is RETRY.","solution":"def determine_result(scores): Given a list of scores, determines whether participants should ADVANCE, RETRY, or FAIL based on their scores. Parameters: scores (list of int): A list of integers representing participant scores. Returns: list of str: A list of results for each score in form of \\"ADVANCE\\", \\"RETRY\\", or \\"FAIL\\". results = [] for score in scores: if score >= 70: results.append(\\"ADVANCE\\") elif 40 <= score <= 69: results.append(\\"RETRY\\") else: results.append(\\"FAIL\\") return results"},{"question":"Write a function that takes an integer n and returns the n-th element in the Fibonacci sequence (1-indexed). The first two elements of the Fibonacci sequence are defined as F(1) = 0 and F(2) = 1. Each subsequent element is the sum of the previous two elements in the sequence, i.e., F(n) = F(n-1) + F(n-2) for n > 2. Input The input is a single integer n (1 ≤ n ≤ 30). Output Output the n-th element in the Fibonacci sequence. Examples Input 1 Output 0 Input 10 Output 34","solution":"def fibonacci(n): Returns the n-th element of the Fibonacci sequence (1-indexed). if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Write a function findMinimumWindow that takes in a string S and another string T, and returns the minimum window substring of S that contains all the characters in T. If there is no such substring, return an empty string. If there are multiple minimum windows of the same length, return the one that appears first. The characters in the strings are case-sensitive. Input: The first line contains the string S. The second line contains the string T. Output: A single line containing the minimum window substring of S that contains all the characters in T. If no such window exists, output an empty string. Constraints: 1 <= |S|, |T| <= 105 Example (To be used only for expected output): Input ADOBECODEBANC ABC Output BANC Explanation: The substring \\"BANC\\" is the smallest window in S that contains all characters in T.","solution":"from collections import Counter, defaultdict def findMinimumWindow(S, T): if not S or not T: return \\"\\" dict_t = Counter(T) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\'inf\'), None, None while r < len(S): character = S[r] window_counts[character] += 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = S[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 if ans[0] == float(\'inf\'): return \\"\\" else: return S[ans[1]: ans[2] + 1]"},{"question":"Given a string representing a mathematical expression, write a function to evaluate it. The expression will contain addition, subtraction, multiplication, and division operations. The expression may also contain nested parentheses which must be evaluated first according to standard arithmetic rules. You can assume the input string is always a valid mathematical expression and contains no variables or whitespace. Examples: ``` Input: \\"3+2*2\\" Output: 7 Input: \\" 3/2 \\" Output: 1.5 Input: \\"3+5 / 2\\" Output: 5.5 Input: \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 Input: \\"2*(3+(4*5))\\" Output: 46 ``` Note: The division operator (\\"/\\") should perform floating-point division.","solution":"def evaluate_expression(expression): def evaluate(tokens): stack = [] num = 0 sign = \'+\' while len(tokens) > 0: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = evaluate(tokens) if (not token.isdigit() and token != \' \') or len(tokens) == 0: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(stack.pop() / num) sign = token num = 0 if token == \')\': break return sum(stack) tokens = list(expression) return evaluate(tokens)"},{"question":"**[Question 2]: Given a series of numbers, determine the length of the longest subarray where the absolute difference between any two elements is at most 1.** Input Format The first line of the input contains a single integer {N} - the number of elements in the array. The second line contains {N} space-separated integers, representing the elements of the array. Constraints 1 leq N leq 10^5 1 leq text{array[i]} leq 10^9 Output Format Output a single integer, the length of the longest subarray that meets the condition. Sample Input 6 1 2 2 3 1 2 Sample Output 5 Explanation One of the longest subarrays that meet the condition is [1, 2, 2, 1, 2], where the maximum difference between any two elements is 1. The length of this subarray is 5. Note A subarray is a contiguous part of an array.","solution":"def longest_subarray_with_diff_one(arr): from collections import defaultdict # Dictionary to store the frequency of elements freq = defaultdict(int) max_length = 0 for num in arr: freq[num] += 1 current_length = freq[num] + freq[num - 1] max_length = max(max_length, current_length) current_length = freq[num] + freq[num + 1] max_length = max(max_length, current_length) return max_length"},{"question":"collections.Counter() This module provides a counter class which helps to count hashable objects. It is an unordered collection where elements are stored as dictionary keys, and their counts are stored as dictionary values. For example, collections.Counter(a=4, b=2, c=0, d=-2) will return Counter({\'a\': 4, \'b\': 2}). Sample Code >>> from collections import Counter >>> print Counter([\'a\', \'b\', \'c\', \'a\', \'b\', \'b\']) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) >>> print Counter({\'a\': 2, \'b\': 3, \'c\': 1}) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) >>> print Counter(a=2, b=3, c=1) Counter({\'b\': 3, \'a\': 2, \'c\': 1}) Task You are given a string S. Your task is to count the frequency of each character in the string and output the three most common characters along with their counts. If two characters have the same count, they should be sorted alphabetically. Input Format A single line of input containing the string S. Constraints 1 leq |S| leq 10^4 Output Format Output the three most common characters along with their counts in separate lines. If there are fewer than three unique characters, output existant characters. Sample Input aabbbcccc Sample Output c 4 b 3 a 2","solution":"from collections import Counter def most_common_characters(s): Returns the three most common characters along with their counts from the given string. Parameters: s (str): The input string Returns: list: A list of tuples containing the characters and their counts counter = Counter(s) # Get most common and sort by (-count, char) to handle ties in counts by alphabetical order sorted_common = sorted(counter.items(), key=lambda item: (-item[1], item[0])) return sorted_common[:3] def format_output(most_common): Formats the most common characters and their counts for output. Parameters: most_common (list): A list of tuples containing characters and their counts Returns: list: A list of formatted strings return [f\\"{char} {count}\\" for char, count in most_common] def main(s): most_common = most_common_characters(s) formatted_output = format_output(most_common) return formatted_output if __name__ == \\"__main__\\": import sys input_string = sys.argv[1] output = main(input_string) for line in output: print(line)"},{"question":"You are tasked with developing a software module that helps track and notify project dependencies in a large organization. Each project in the organization can depend on multiple other projects. Your job is to determine how many dependent projects a given project has, either directly or indirectly. Each project is represented by a unique integer id, and dependencies are represented as a list of pairs, where the first element is the dependent project and the second element is the project it depends on. Write a function, `count_dependents`, that takes an integer `p` representing the project id, an integer `n` representing the number of projects, and a list of tuples representing the dependency pairs. The function should return the total number of projects that directly or indirectly depend on project `p`. # Input: - An integer `p` representing the project id. - An integer `n` representing the number of projects. - A list of tuples each containing two integers, where the first integer is the dependent project and the second integer is the project it depends on. # Output: - An integer representing the total number of projects that depend on project `p`, either directly or indirectly. # Constraints: - 1 ≤ n ≤ 100000 - 1 ≤ project ids ≤ n # Example: Input: ``` p = 1 n = 5 dependencies = [(2, 1), (3, 1), (4, 2), (5, 2), (5, 3)] ``` Output: ``` 4 ``` Explanation: Project 1 is a dependency for projects 2 and 3. Project 2, in turn, is a dependency for project 4 and 5. Project 3 is also a dependency for project 5. Therefore, project 1 directly or indirectly affects projects 2, 3, 4, and 5, totaling to 4 projects.","solution":"def count_dependents(p, n, dependencies): from collections import defaultdict, deque # Creating a graph where each project points to the projects that depend on it graph = defaultdict(list) for dependent, dependency in dependencies: graph[dependency].append(dependent) # Use BFS to count all projects that depend on the given project `p` queue = deque([p]) visited = set() while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # The size of visited set will give the total number of dependent projects excluding the root project `p` return len(visited)"},{"question":"Given two strings s and t, the task is to determine if \'t\' can be formed by rearranging the letters of \'s\' and adding exactly one additional letter. If possible, return the letter that needs to be added. Otherwise, return -1. Example 1: Input: s = \\"apple\\" t = \\"apples\\" Output: s Explanation: By adding the letter \'s\' to \\"apple\\", it matches \\"apples\\". Example 2: Input: s = \\"apple\\" t = \\"applez\\" Output: z Explanation: By adding the letter \'z\' to \\"apple\\", it matches \\"applez\\". Example 3: Input: s = \\"apple\\" t = \\"applz\\" Output: -1 Explanation: By adding only one letter, \\"applz\\" cannot be formed from \\"apple\\". Your Task: You don\'t need to read input or print anything. Complete the function findAddedLetter() which takes strings s and t as input parameters and returns the letter that was added if \'t\' can be formed by adding one letter to \'s\'. Otherwise, returns -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length, t.length <= 1000 t.length = s.length + 1","solution":"def findAddedLetter(s, t): Determines if \'t\' can be formed by rearranging the letters of \'s\' and adding exactly one additional letter. If possible, returns the letter that needs to be added. Otherwise, return -1. if len(t) != len(s) + 1: return -1 s_char_count = {} for char in s: if char in s_char_count: s_char_count[char] += 1 else: s_char_count[char] = 1 for char in t: if char in s_char_count and s_char_count[char] > 0: s_char_count[char] -= 1 else: return char # If no character is found, return -1. This should not happen if constraints are followed. return -1"},{"question":"You are given an array of integers `heights` representing the building heights on a 2D plane. You want to form a water container by taking any two lines from the array. The main goal is to find the two lines which together with the x-axis form a container that holds the maximum amount of water. Write an efficient algorithm that will output the maximum amount of water a container can hold. Since water cannot exceed the boundaries of the shortest line, the volume of water is calculated by the formula: [ text{Volume} = min(text{height}[i], text{height}[j]) times (j - i) ] where `i` and `j` are the indices of the two chosen lines. # Examples: **Example 1:** ``` Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The lines at index 1 and 8 form the container that holds the most water, with a volume of 49 units: (min(heights[1], heights[8]) times (8 - 1) = 7 times 7 = 49) ``` **Example 2:** ``` Input: heights = [1,1] Output: 1 Explanation: The lines at index 0 and 1 form the container that holds the most water, with a volume of 1 unit: (min(heights[0], heights[1]) times (1 - 0) = 1 times 1 = 1) ``` **Example 3:** ``` Input: heights = [4,3,2,1,4] Output: 16 Explanation: The lines at index 0 and 4 form the container that holds the most water, with a volume of 16 units: (min(heights[0], heights[4]) times (4 - 0) = 4 times 4 = 16) ``` **Example 4:** ``` Input: heights = [1,2,1] Output: 2 Explanation: The lines at index 0 and 2 form the container that holds the most water, with a volume of 2 units: (min(heights[0], heights[2]) times (2 - 0) = 1 times 2 = 2) ``` # Constraints: - `n == heights.length` - `2 <= n <= 10^5` - `0 <= heights[i] <= 10^4`","solution":"def max_area(heights): Returns the maximum amount of water that can be contained by any two lines. left, right = 0, len(heights) - 1 max_water = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_water = height * width max_water = max(max_water, current_water) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Given a binary tree, your task is to complete the function `createMirrorTree()`, which converts the given binary tree into its mirror tree. Input: The function takes the root node of the binary tree as a parameter. Output: The function should return the reference pointer to the root node of the mirror tree. Input format and constraints: There will be T test cases, and for each test case, the function will be called separately. - The number of nodes in the binary tree will be at most 1000. - Each node will contain an integer value between -1000 and 1000. Example: Input: 2 1 2 / / 2 3 1 3 / 4 5 4 Output: 1 3 2 5 4 2 3 1 4 Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by the user for Expected Output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified and not to write the full code.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def createMirrorTree(root): if root is None: return None # Recursively create mirror on left and right sub-trees left_mirror = createMirrorTree(root.left) right_mirror = createMirrorTree(root.right) # Swap the left and right children root.left = right_mirror root.right = left_mirror return root"},{"question":"Given a string of characters, your task is to count the number of substrings that have the same first and last character. Example 1: Input: \\"abcab\\" Output: 7 Explanation: The substrings are: \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"aba\\", \\"bcab\\". Example 2: Input: \\"aba\\" Output: 4 Explanation: The substrings are: \\"a\\", \\"b\\", \\"a\\", \\"aba\\". Your task: You need to implement the function `countSubstrings()` which takes a string `s` as input and returns the number of substrings that have the same first and last character. The function signature is: ```python def countSubstrings(s: str) -> int: ``` Expected Time Complexity: O(n^2), where n is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(s) ≤ 1000 The string contains lowercase alphabetic characters only.","solution":"def countSubstrings(s: str) -> int: This function counts the number of substrings that have the same first and last character. Args: s: str - The input string containing lowercase alphabetic characters. Returns: int - The count of substrings with the same first and last character. n = len(s) count = 0 for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count"},{"question":"You are designing an automated garden that requires lending water optimally to various plants. Each plant has its own watering preference, denoted by the maximum volume of water it can absorb without causing overflow. Unfortunately, the water distributor you plan to use can dispense water only in a fixed quantity each time. Given that it can dispense water a preset number of times, and you have a list of plants with their maximum water capacity, you want to calculate the maximum amount of water that can be efficiently used. The task is to find out the maximum volume of water that can be dispensed without exceeding the capacity of any plant. -----Input----- The input consists of multiple lines: - The first line contains two integers: water_volume_per_dispense and num_dispenses, where - 1 <= water_volume_per_dispense <= 1000 - 1 <= num_dispenses <= 1000 - The second line contains an integer n (the number of plants), - 1 <= n <= 1000 - The third line contains n integers, where each integer represents the maximum water a plant can absorb, - 1 <= max_water_capacity <= 1000 -----Output----- Output a single integer, the maximum volume of water that can be dispensed optimally without causing any plant to overflow. -----Examples----- Sample Input: 10 4 5 30 40 20 10 50 Sample Output: 40 Sample Input: 5 3 3 15 10 20 Sample Output: 15","solution":"def max_water_dispensed(water_volume_per_dispense, num_dispenses, n, plant_capacities): Returns the maximum volume of water that can be dispensed without exceeding any plant\'s capacity. max_total_volume = water_volume_per_dispense * num_dispenses return min(max_total_volume, max(plant_capacities))"},{"question":"Design a data structure that supports the following operations in O(1) time. - insert(x): Inserts an element x to the data structure. - delete(x): Removes an element x from the data structure. - getRandom(): Returns a random element from the current set of elements (each element must have the same probability of being returned). - getKRandom(k): Returns k random elements from the current set of elements (each element must have the same probability of being returned). Example 1: Input: insert(1) insert(2) insert(3) getRandom() delete(2) getRandom() getKRandom(2) Output: Random element among {1, 2, 3} Random element among {1, 3} Two random elements among {1, 3} Example 2: Input: insert(1) insert(2) insert(2) delete(2) getKRandom(1) Output: One random element among {1, 2} Your Task: Since this is a function problem, you don\'t need to take inputs. You are required to complete the functions insert(x), delete(x), getRandom(), and getKRandom(k). The getRandom() and getKRandom(k) functions should return -1 if no elements are present when called, and getKRandom(k) should return an empty list if k is greater than the number of elements in the data structure. Expected Time Complexity: O(1) for all operations. Expected Auxiliary Space: O(n), where n is the number of unique elements inserted. Constraints: 1 <= Number of queries <= 1000 1 <= x <= 1000 1 <= k <= Number of current elements in the data structure","solution":"import random class RandomizedSet: def __init__(self): self.data_dict = {} self.data_list = [] def insert(self, x): if x not in self.data_dict: self.data_dict[x] = len(self.data_list) self.data_list.append(x) def delete(self, x): if x in self.data_dict: last_element, idx = self.data_list[-1], self.data_dict[x] self.data_list[idx], self.data_dict[last_element] = last_element, idx self.data_list.pop() del self.data_dict[x] def getRandom(self): if not self.data_list: return -1 return random.choice(self.data_list) def getKRandom(self, k): if not self.data_list: return [] return random.sample(self.data_list, min(k, len(self.data_list)))"},{"question":"Alice owns a collection of vintage videogames. She wants to showcase her collection in a series of exhibits, but space is limited. Each exhibit can only fit a certain number of games, and Alice wants every exhibit to be unique by ensuring no game is repeated across the exhibits she chooses. Your task is to determine the minimum number of exhibits Alice must create to showcase at least X distinct games. Note: Once an exhibit is chosen, all the games in that exhibit are included. Input First line of the input will contain an integer T (number of test cases). Then for every test case, there will be one line containing the values N (denoting the number of exhibits) and X separated by a space. Now each of the next N lines will first have a value M then M space-separated strings denoting the names of the games. Output For every test case, print the required answer and if it is not possible to showcase those X distinct games, then print -1. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 20 1 ≤ X ≤ 50 1 ≤ M ≤ 10 1 ≤ Length of the strings ≤ 15 SAMPLE INPUT 1 4 3 1 MARIO 2 ZELDA PACMAN 1 DONKEYKONG 2 PACMAN METROID SAMPLE OUTPUT 2","solution":"def min_exhibits_to_showcase(T, test_cases): from itertools import combinations def count_unique_games(selected_exhibits): unique_games = set() for exhibit in selected_exhibits: unique_games.update(exhibit[1:]) return len(unique_games) results = [] for test_case in test_cases: N, X = test_case[0] exhibits = test_case[1] min_count = float(\'inf\') found = False for r in range(1, N + 1): for combo in combinations(exhibits, r): if count_unique_games(combo) >= X: min_count = min(min_count, r) found = True results.append(min_count if found else -1) return results"},{"question":"A group of friends play a game where they stand in a circle and count off numbers in sequence starting from 1. However, each friend replaces numbers that are multiples of 3 with the word \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with the word \\"FizzBuzz\\". Your task is to write a program that simulates this game and returns what each friend would say for a given number of rounds. Input Specification Input will consist of two parts: - A variable t which is the number of test cases. - For each test case, a single integer n representing the number of rounds. 0 < t ≤ 100 1 ≤ n ≤ 100 Output Specification Output should consist of t lines, each line containing a space-separated sequence of what the friends would say during that round. Example Sample Input: 3 5 10 15 Sample Output: 1 2 Fizz 4 Buzz 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz","solution":"def fizz_buzz(t, rounds): results = [] for n in rounds: result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) results.append(\' \'.join(result)) return results"},{"question":"**Rock Climbing Ratings** Rock climbing is a popular sport, and climbers often track their progress by maintaining a log of completed climbs. Each climb has a difficulty rating represented as an integer. After a day of climbing, a climber likes to calculate two metrics: the average difficulty of the climbs and the longest streak of climbs where each subsequent climb is at least as difficult as the previous one. Given the difficulty ratings of the climbs done in a day, write a program to compute these metrics. The average difficulty is the sum of all climb difficulties divided by the number of climbs. The longest streak is the length of the longest contiguous subarray where each element is greater than or equal to the previous element. **Input** The first line contains an integer ( t ) ((1 le t le 100)) — the number of test cases. Each test case consists of two lines: - The first line contains an integer ( n ) ((1 le n le 1000)) — the number of climbs. - The second line contains ( n ) integers ( d_1, d_2, ..., d_n ) ((1 le d_i le 1000)) — the difficulty ratings of the climbs. **Output** For each test case, output two values on a single line separated by a space: 1. The average difficulty of the climbs. 2. The length of the longest streak of non-decreasing difficulties. Your output for the average difficulty should be a floating-point number rounded to two decimal places. **Examples** _Input_ ``` 3 5 1 3 5 2 4 4 4 4 4 4 6 10 20 30 20 20 30 ``` _Output_ ``` 3.00 3 4.00 4 21.67 3 ``` **Explanation** In the first test case, the difficulties are [1, 3, 5, 2, 4]. The average difficulty is ((1 + 3 + 5 + 2 + 4) / 5 = 3.00). The longest streak is [1, 3, 5], which has length 3. In the second test case, the difficulties are [4, 4, 4, 4]. The average difficulty is ((4 + 4 + 4 + 4) / 4 = 4.00) and the whole array is non-decreasing, so the longest streak has length 4. In the third test case, the difficulties are [10, 20, 30, 20, 20, 30]. The average difficulty is ((10 + 20 + 30 + 20 + 20 + 30) / 6 = 21.67). The longest streak is [10, 20, 30], which has length 3.","solution":"def rock_climbing_ratings(test_cases): results = [] for n, difficulties in test_cases: # Calculate the average difficulty total_difficulty = sum(difficulties) average_difficulty = total_difficulty / n # Calculate the longest streak of non-decreasing difficulties longest_streak = 1 current_streak = 1 for i in range(1, n): if difficulties[i] >= difficulties[i - 1]: current_streak += 1 longest_streak = max(longest_streak, current_streak) else: current_streak = 1 # Append formatted results results.append(f\\"{average_difficulty:.2f} {longest_streak}\\") return results"},{"question":"Given a binary tree, write a program to find the sum of all left leaves in the tree. A leaf is a node with no children, and a left leaf is a leaf that is the left child of its parent. ------ Input details ------ The input consists of the binary tree in level order traversal, with \'null\' representing absence of a node. ------ Output details ------ Output a single integer which is the sum of all left leaves of the tree. ------ Constraints ------ - The number of nodes in the tree is in the range [1, 1000]. - The value of each node will be in the range [0, 1000]. ------ Sample Input 1 ------ 3 9 20 null null 15 7 ------ Sample Output 1 ------ 24 ------ explanation 1 ------ The input corresponds to the following binary tree: ``` 3 / 9 20 / 15 7 ``` The left leaves are 9 and 15. Thus, the sum is 9 + 15 = 24.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumOfLeftLeaves(root): if not root: return 0 def is_leaf(node): return node and not node.left and not node.right left_sum = 0 if root.left: if is_leaf(root.left): left_sum += root.left.val else: left_sum += sumOfLeftLeaves(root.left) left_sum += sumOfLeftLeaves(root.right) return left_sum def build_tree_from_level_order(data): if not data or data[0] == \'null\': return None iter_data = iter(data) root = TreeNode(int(next(iter_data))) queue = [root] while queue: node = queue.pop(0) try: left_val = next(iter_data) if left_val != \'null\': left_node = TreeNode(int(left_val)) node.left = left_node queue.append(left_node) right_val = next(iter_data) if right_val != \'null\': right_node = TreeNode(int(right_val)) node.right = right_node queue.append(right_node) except StopIteration: break return root def sum_of_left_leaves_from_input(data): tree_data = data.strip().split() root = build_tree_from_level_order(tree_data) return sumOfLeftLeaves(root)"},{"question":"A robot is located in the top-left corner of a grid with `m` rows and `n` columns (0,0). The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (m-1, n-1). However, the robot can only step on cells that are not blocked. Given a grid with some cells marked as blocked, determine if the robot can reach the bottom-right corner of the grid. If the robot can reach the bottom-right corner, find out the minimum number of moves (steps) required for the robot to get there. A move is a step to one of the adjacent cells (either right or down). # Constraints - `1 <= m, n <= 1000` - The cell `(0, 0)` and the cell `(m-1, n-1)` are guaranteed to be unblocked. - Cells are either \'blocked\' (denoted by 1) or \'unblocked\' (denoted by 0). # Input The input is given from Standard Input in the following format: ``` m n grid[0][0] grid[0][1] ... grid[0][n-1] ... grid[m-1][0] grid[m-1][1] ... grid[m-1][n-1] ``` # Output If the robot cannot reach the bottom-right corner, print -1. If it can, print the minimum number of moves required to reach the bottom-right corner. # Sample Input ``` 3 3 0 0 0 0 1 0 0 0 0 ``` # Sample Output ``` 4 ``` In this example, the robot can reach the bottom-right corner in four moves. One possible path is: (0,0) -> (0,1) -> (1,2) -> (2,2). # Explanation The robot starts at (0,0) and needs to reach (2,2). One path is to move right to (0,2), down to (1,2), and down again to (2,2), making a total of 4 moves. This is the minimum number of moves needed in this case.","solution":"from collections import deque def min_moves_to_reach_end(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 # Example usage: # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # print(min_moves_to_reach_end(3, 3, grid)) # Output: 4"},{"question":"You are given a list of integers. For this list, compute a new list where each element at index `i` is the product of all the numbers in the original list except the one at `i`. Input The first line of input contains an integer `n` (1 ≤ n ≤ 100) - the number of elements in the list. The second line contains `n` integers separated by spaces. Each integer `a_i` (1 ≤ a_i ≤ 100) is guaranteed to be non-zero. Output Output the new list of integers, where each integer is the product of all numbers in the original list except the one at the corresponding index. Examples Input 5 1 2 3 4 5 Output 120 60 40 30 24 Input 3 6 4 2 Output 8 12 24","solution":"def product_except_self(nums): Computes the product of all the elements in the list except the one at the index i. Args: nums (list of int): List of integers. Returns: list of int: A new list where each element is the product of all elements except the one at the index i. n = len(nums) if n == 1: return [0] left_products = [1] * n right_products = [1] * n result = [0] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i-1] * nums[i-1] # Calculate right products for i in range(n-2, -1, -1): right_products[i] = right_products[i+1] * nums[i+1] # Calculate result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given a list of integers and two numbers k and x. Your task is to find the k closest integers to x in the list. The result should be sorted in ascending order. The absolute difference is used to determine the closeness between the integers and x, i.e., |a - x| < |b - x| means a is closer to x than b. Write a function that takes the list, k, and x as input and returns the list of k closest integers in ascending order. **Function Signature:** ```python def find_k_closest_integers(nums: List[int], k: int, x: int) -> List[int]: ``` **Input:** - `nums` (List[int]): A list of integers. - `k` (int): The number of closest integers you need to find. - `x` (int): The reference integer. **Output:** - A list containing the k closest integers to x, sorted in ascending order. **Constraints:** - The list `nums` will have at least k integers. - The integers can be both positive and negative. - There may be duplicate integers in the list. **Example:** Input: ```python nums = [1, 2, 3, 4, 5] k = 4 x = 3 ``` Output: ```python [1, 2, 3, 4] ``` Input: ```python nums = [10, 15, 7, 3, 4] k = 2 x = 8 ``` Output: ```python [7, 10] ``` Note: - In the first example, the closest integers to 3 are [1, 2, 3, 4]. Hence the output is [1, 2, 3, 4]. - In the second example, the closest integers to 8 are [7, 10]. Hence the output is [7, 10].","solution":"from typing import List def find_k_closest_integers(nums: List[int], k: int, x: int) -> List[int]: Returns the k closest integers to x in ascending order from the list nums. # Sort the list of nums based on the absolute difference from x. sorted_nums = sorted(nums, key=lambda num: (abs(num - x), num)) # Take the first k elements because they are the closest to x. closest_nums = sorted_nums[:k] # Return the result sorted in ascending order. return sorted(closest_nums)"},{"question":"A drone delivery company is testing its navigation system for delivering packages in an urban environment. They have a grid of `n x m` where each cell represents a building of different heights. The drone can only move horizontally or vertically to neighboring cells and cannot pass through buildings whose height is greater than a given threshold `T`. The goal is to determine if the drone can successfully navigate from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) of the grid. The drone can move up, down, left, or right, but cannot move diagonally. Write a function that takes in the parameters `n`, `m`, `grid`, and `T`, where `n` and `m` are the dimensions of the grid, `grid` is a 2D list representing the heights of the buildings, and `T` is the height threshold. Return `True` if the drone can reach the bottom-right corner from the top-left corner without encountering buildings that are taller than `T`, otherwise return `False`. # Function Signature ```python def can_drone_deliver(n: int, m: int, grid: List[List[int]], T: int) -> bool: pass ``` # Input - `n` (1 ≤ n ≤ 100): The number of rows in the grid. - `m` (1 ≤ m ≤ 100): The number of columns in the grid. - `grid` (List[List[int]]): A 2D list of integers representing the grid where each integer `grid[i][j]` (1 ≤ grid[i][j] ≤ 1000) is the height of the building in cell `(i, j)`. - `T` (1 ≤ T ≤ 1000): The height threshold for the drone. # Output - Return a boolean value `True` if the drone can reach the target cell, otherwise `False`. # Example ```python n = 3 m = 3 grid = [ [1, 2, 2], [3, 8, 2], [1, 2, 2] ] T = 2 print(can_drone_deliver(n, m, grid, T)) # Output: True n = 3 m = 3 grid = [ [1, 2, 2], [3, 8, 2], [1, 2, 2] ] T = 1 print(can_drone_deliver(n, m, grid, T)) # Output: False ``` # Notes - The function should return `True` if there is any path from the start to the end that does not pass through any building taller than `T`. - If the start or end cell itself has a building taller than `T`, the function should return `False`.","solution":"from typing import List def can_drone_deliver(n: int, m: int, grid: List[List[int]], T: int) -> bool: if grid[0][0] > T or grid[n-1][m-1] > T: return False def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] <= T directions = [(0,1), (1,0), (0,-1), (-1,0)] visited = [[False]*m for _ in range(n)] stack = [(0, 0)] visited[0][0] = True while stack: x, y = stack.pop() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) return False"},{"question":"Alice is working on a cryptography project for her computer science class and needs to encrypt a message using a special kind of substitution cipher. For this, she has two lists: a list of integers representing the message, and a list of integers representing the key. Alice\'s task is to generate an encrypted message by performing operations between these two lists. Given an array `M = [M_{1}, M_{2}, ldots, M_{N}]` representing the message and an array `K = [K_{1}, K_{2}, ldots, K_{P}]` representing the key, Alice will generate an encrypted message `E` such that `E[i]` is calculated as follows: ``` E[i] = (M[i] + K[i % P]) mod 10 ``` where `%` denotes the modulo operation. Please help Alice by writing a function that generates the encrypted message array `E`. ------ Input Format ------ - The first line of input contains one integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and P, respectively. - The second line of each test case contains N space-separated integers M_{1}, M_{2}, ldots, M_{N}. - The third line of each test case contains P space-separated integers K_{1}, K_{2}, ldots, K_{P}. ------ Output Format ------ For each test case, output one line containing N space-separated integers — the encrypted message array E. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, P ≤ 10^{5} 0 ≤ M_{i}, K_{j} ≤ 9 for every 1 ≤ i ≤ N and 1 ≤ j ≤ P - Sum of `N` across all test cases will not exceed 10^{5}. - Sum of `P` across all test cases will not exceed 10^{5}. ----- Sample Input 1 ------ 3 5 3 1 2 3 4 5 3 4 1 4 2 0 9 8 7 2 5 6 6 1 2 3 4 5 6 0 0 ----- Sample Output 1 ------ 4 6 4 7 9 2 4 0 2 1 2 3 4 5 6 ----- Explanation 1 ------ Test Case 1: - `M = [1, 2, 3, 4, 5]` - `K = [3, 4, 1]` - Encrypted message array `E`: - E[0] = (1 + 3) % 10 = 4 - E[1] = (2 + 4) % 10 = 6 - E[2] = (3 + 1) % 10 = 4 - E[3] = (4 + 3) % 10 = 7 - E[4] = (5 + 4) % 10 = 9 Test Case 2: - `M = [0, 9, 8, 7]` - `K = [2, 5]` - Encrypted message array `E`: - E[0] = (0 + 2) % 10 = 2 - E[1] = (9 + 5) % 10 = 4 - E[2] = (8 + 2) % 10 = 0 - E[3] = (7 + 5) % 10 = 2 Test Case 3: - `M = [1, 2, 3, 4, 5, 6]` - `K = [0, 0]` - Encrypted message array `E`: - E[0] = (1 + 0) % 10 = 1 - E[1] = (2 + 0) % 10 = 2 - E[2] = (3 + 0) % 10 = 3 - E[3] = (4 + 0) % 10 = 4 - E[4] = (5 + 0) % 10 = 5 - E[5] = (6 + 0) % 10 = 6","solution":"def generate_encrypted_message(T, test_cases): results = [] for i in range(T): N, P, M, K = test_cases[i] E = [(M[j] + K[j % P]) % 10 for j in range(N)] results.append(E) return results # Example usage: # T = 3 # test_cases = [ # (5, 3, [1, 2, 3, 4, 5], [3, 4, 1]), # (4, 2, [0, 9, 8, 7], [2, 5]), # (6, 2, [1, 2, 3, 4, 5, 6], [0, 0]) # ] # print(generate_encrypted_message(T, test_cases))"},{"question":"Takahashi is arranging chairs for an event. The chairs are initially arranged in a single row. He wants to rearrange the chairs into multiple rows such that each row has an equal number of chairs and there are no chairs left over. Takahashi needs to find the maximum number of chairs that can be placed in each row. Given the total number of chairs, N, help Takahashi determine the maximum number of chairs per row such that each row has the same quantity of chairs and this quantity is maximized. -----Constraints----- - 1 leq N leq 10^9 - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the maximum number of chairs that can be placed in each row. -----Sample Input----- 36 -----Sample Output----- 18 Explanation: With 36 chairs, the maximum number of chairs per row that allows all rows to have the same quantity is 18 (forming 2 rows with 18 chairs each).","solution":"def maximum_chairs_per_row(N): Returns the maximum number of chairs per row given the total number of chairs N. def greatest_divisor(n): # Start checking from the largest possible half of N and move downwards for divisor in range(n//2 + 1, 0, -1): if n % divisor == 0: return divisor # Call the greatest_divisor function to find the required divisor return greatest_divisor(N) # Example usage if __name__ == \'__main__\': import sys input = sys.stdin.read N = int(input().strip()) print(maximum_chairs_per_row(N))"},{"question":"A new social networking site named \\"FriendZone\\" has been launched, and users can create friend requests to connect with other users in the system. Every user is uniquely identified by an integer from 1 to n, and a friend request is represented by an unordered pair of user IDs. Your job is to help the system determine if two users are directly or indirectly connected through a series of friend requests. Two users are considered connected if there is a sequence of friend requests that leads from one user to another. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of users and the number of friend requests. Next m lines contain two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — representing a friend request between user ui and user vi. After that, another line with a single integer q (1 ≤ q ≤ n) indicates the number of queries. Each of the next q lines contains two integers xi and yi (1 ≤ xi, yi ≤ n) — representing a query to check if users xi and yi are connected. Output For each query, output \\"YES\\" if user xi and user yi are connected, otherwise output \\"NO\\". Examples Input 5 3 1 2 2 3 4 5 3 1 3 2 5 1 5 Output YES NO NO Input 4 2 1 2 2 3 2 3 4 1 3 Output NO YES Note In the first example, users 1 and 3 are connected via user 2. There is no connection path between users 2 and 5, or 1 and 5. In the second example, there is no connection path between users 3 and 4. Users 1 and 3 are connected via user 2.","solution":"def friend_zone(n, m, friend_requests, q, queries): parent = list(range(n + 1)) def find(node): if parent[node] != node: parent[node] = find(parent[node]) return parent[node] def union(node1, node2): root1 = find(node1) root2 = find(node2) if root1 != root2: parent[root2] = root1 for u, v in friend_requests: union(u, v) results = [] for x, y in queries: if find(x) == find(y): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes two strings as input: a main string and a substring. The function should determine the starting index of the first occurrence of the substring within the main string. If the substring is not found, the function should return -1. Example 1: Input: main_string = \\"hello\\", substring = \\"ll\\" Output: 2 Explanation: The substring \\"ll\\" is found at index 2 in the main string \\"hello\\". Example 2: Input: main_string = \\"abcdef\\", substring = \\"gh\\" Output: -1 Explanation: The substring \\"gh\\" is not found in the main string \\"abcdef\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSubstringIndex() which takes two string parameters and returns the starting index of the first occurrence of the substring, or -1 if the substring is not found. Expected Time Complexity: O(N) on average Expected Auxiliary Space: O(1) Constraints: 1 <= len(main_string), len(substring) <= 10^5 All characters in the input strings are lowercase English letters.","solution":"def findSubstringIndex(main_string, substring): Returns the starting index of the first occurrence of the substring within the main string. If the substring is not found, returns -1. Args: main_string (str): The main string in which to search for the substring. substring (str): The substring to search for within the main string. Returns: int: The starting index of the first occurrence of the substring, or -1 if not found. return main_string.find(substring)"},{"question":"A company is organizing a marathon event with several checkpoints between the start and end points. Each checkpoint has a certain number of participants passing through it recorded in an array. The task is to determine the maximum number of participants passing through a subarray of these checkpoints. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: 1. The first line contains an integer N, the number of checkpoints. 2. The second line contains N space-separated integers representing the number of participants passing through each checkpoint. Output: For each test case, print a single integer representing the maximum number of participants passing through any subarray of checkpoints for that test case. Sample Input: 2 5 1 2 3 4 5 4 -4 -1 -2 -3 Sample Output: 15 -1 Explanation: For the first test case, the entire array [1, 2, 3, 4, 5] is the subarray with the maximum sum, which is 15. For the second test case, the maximum subarray sum is -1, which is the highest possible sum for subarrays like [-4, -1, -2, -3]. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 -1000 ≤ participants at each checkpoint ≤ 1000","solution":"def maximum_subarray_sum(num_cases, cases): Given test cases containing the number of checkpoints and the number of participants passing through each checkpoint, this function calculates the maximum number of participants passing through any subarray of checkpoints for each test case. Parameters: num_cases (int): The number of test cases. cases (list of tuples): Each tuple contains an integer N (the number of checkpoints) and a list of integers (the number of participants at each checkpoint). Returns: list of int: The maximum number of participants for each test case. def kadane_algorithm(arr): Helper function to find the maximum subarray sum using Kadane\'s Algorithm. Parameters: arr (list of int): The array of integers. Returns: int: The maximum subarray sum. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for n, participants in cases: results.append(kadane_algorithm(participants)) return results"},{"question":"You are required to implement a function that calculates the nth Fibonacci number using recursive memoization. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function will be passed an integer `n` and should return the nth Fibonacci number. To optimize the function performance, use a memoization technique to store previously computed Fibonacci numbers. For example: ```python fib(0) # should return 0 fib(1) # should return 1 fib(5) # should return 5 fib(10) # should return 55 ``` Use the following definitions for the Fibonacci sequence: - Fib(0) = 0 - Fib(1) = 1 - For n > 1, Fib(n) = Fib(n-1) + Fib(n-2) Implement the function such that it efficiently handles large values of `n`.","solution":"def fib(n, memo={}): Returns the nth Fibonacci number using memoization. :param n: The index of the Fibonacci number to be calculated. :param memo: A dictionary to store previously calculated Fibonacci numbers. :return: The nth Fibonacci number. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fib(n-1, memo) + fib(n-2, memo) return memo[n]"},{"question":"Fibonacci Array Transformation You are given an array of integers. Your goal is to transform this array into another array where each element is equal to the sum of itself and the corresponding Fibonacci number. The first Fibonacci number in this context is considered to be `F0 = 0`, the second `F1 = 1`, the third `F2 = 1`, and so on. The Fibonacci sequence is defined as: [ F(n) = begin{cases} 0 & text{if } n = 0 1 & text{if } n = 1 F(n-1) + F(n-2) & text{if } n geq 2 end{cases} ] Your task is to output the transformed array. # Problem Given an array of length ( n ), transform it so that each element ( a_i ) becomes ( a_i + F(i) ), where ( F(i) ) denotes the ( i )-th Fibonacci number with zero-based indexing. Output the resulting array. # Input - The first line contains an integer ( n ) (1 ( leq ) n ( leq ) 10^5), the number of elements in the array. - The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (-10^9 ( leq ) a_i ( leq ) 10^9). # Output - Output the transformed array of ( n ) integers. # Example Input ``` 5 4 3 2 1 0 ``` Output ``` 4 4 3 3 4 ``` Explanation The Fibonacci numbers corresponding to the indexes are: [0, 1, 1, 2, 3]. The resulting array is formed as follows: - 4 + 0 = 4 - 3 + 1 = 4 - 2 + 1 = 3 - 1 + 2 = 3 - 0 + 3 = 3 # Constraints * All integers in the input are given as signed 32-bit integers. * The resulting array integers are guaranteed to fit within the 64-bit integer range.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers with zero-based indexing. if n == 0: return [] if n == 1: return [0] fib = [0, 1] for i in range(2, n): fib.append(fib[i-1] + fib[i-2]) return fib def transform_array(arr): Transforms the array by adding the corresponding Fibonacci number to each element. n = len(arr) fib = fibonacci(n) transformed = [arr[i] + fib[i] for i in range(n)] return transformed"},{"question":"You are given two strings, str1 and str2, both containing lowercase alphabetical characters. Your task is to determine the minimum number of character deletions required to make str1 and str2 anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Input The first line contains the string str1. The second line contains the string str2. Output Output the minimum number of character deletions required. Constraints 1 ≤ length of str1, str2 ≤ 10^5 SAMPLE INPUT cde abc SAMPLE OUTPUT 4 Explanation To make \\"cde\\" and \\"abc\\" anagrams of each other, you need to perform 4 deletions: remove \'d\' and \'e\' from \\"cde\\" and remove \'a\' and \'b\' from \\"abc\\". This will leave \\"c\\" from both strings, which are anagrams of each other.","solution":"from collections import Counter def min_deletions_to_make_anagrams(str1, str2): Determines the minimum number of character deletions required to make two strings anagrams of each other. counter1 = Counter(str1) counter2 = Counter(str2) # Find the difference between the two Counters common_characters = counter1 & counter2 common_count = sum(common_characters.values()) # Total characters to be deleted from both strings return len(str1) + len(str2) - 2 * common_count"},{"question":"You are helping your friend Mike organize a bike rental service. He has a set of bikes that can be rented for varying periods of time, and each rental has a different profit associated with it. From past data, you know the rental slots come in various lengths - some spanning just a few hours, others going up to several days. Your task is to help Mike maximize his total profit using the given set of rental options. You need to determine the optimal way to select rentals so that the total profit is maximized, without overlapping any rental periods. Each test case consists of multiple rentals, which are defined by a start time, end time, and profit. Your goal is to find the maximum profit Mike can achieve for each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 1 ≤ start time < end time ≤ 10^6 1 ≤ profit ≤ 10^6 Input format: The first line of input contains a single integer T, which is the number of test cases. For each test case, the first line contains an integer N, the number of rental options. The next N lines each contain three integers start, end, and profit, denoting the start time, end time, and profit for that rental option. Output format: For each test case, output a single integer, the maximum profit Mike can achieve, on a new line. SAMPLE INPUT 1 3 1 3 50 2 5 20 4 6 70 SAMPLE OUTPUT 120 Explanation: In the given input, there is one test case with three rental options. The optimal choice is to take the rentals from (1, 3) and (4, 6) with profits 50 and 70 respectively. This gives a total profit of 120.","solution":"def max_profit(t, rental_options): Returns the maximum profit Mike can achieve without overlapping rental periods. :param t: Number of test cases :param rental_options: List of rental options for each test case. Each rental option consists of a tuple (start, end, profit). :return: List of maximum profit for each test case results = [] for rentals in rental_options: rentals.sort(key=lambda x: x[1]) # sort by end time n = len(rentals) dp = [0] * (n + 1) for i in range(1, n + 1): incl_profit = rentals[i-1][2] l = binary_search(rentals, i - 1) if l != -1: incl_profit += dp[l + 1] dp[i] = max(dp[i - 1], incl_profit) results.append(dp[n]) return results def binary_search(rentals, index): Returns the latest rental which doesn\'t conflict with the rental at rental[index]. low, high = 0, index - 1 while low <= high: mid = (low + high) // 2 if rentals[mid][1] <= rentals[index][0]: # rentals end time is <= current rental start time if rentals[mid + 1][1] <= rentals[index][0]: low = mid + 1 else: return mid else: high = mid - 1 return -1"},{"question":"Write a function that takes a string and a number n, and returns a new string constructed by shifting each character in the original string n positions backwards in the alphabet. If the shift goes past \'a\', it wraps around to \'z\'. Note: 1. Only alphabetic characters (both uppercase and lowercase) should be shifted. 2. Non-alphabetic characters should remain unchanged. 3. The casing of the letters should remain the same (i.e., \'A\' should not become \'a\'). Example: ``` shift_string_by_n(\\"Hello, World!\\", 2) -> \'Fcjjm, Vmnjb!\' shift_string_by_n(\\"Python-123!\\", 5) -> \'Ktocji-123!\' ``` Explanation: In the first example, \'H\' shifted back by 2 positions is \'F\', \'e\' becomes \'c\', \'l\' becomes \'j\', \'o\' becomes \'m\', \'r\' becomes \'p\', \'d\' becomes \'b\'. Non-alphabetic characters remain unchanged. In the second example, \'P\' shifted back by 5 positions becomes \'K\', \'y\' becomes \'t\', \'t\' becomes \'o\', \'h\' becomes \'c\', \'o\' becomes \'j\', \'n\' becomes \'i\'. Non-alphabetic characters remain unchanged.","solution":"def shift_string_by_n(s, n): Shifts each alphabetical character in the string s by n positions backwards in the alphabet. Non-alphabetical characters remain unchanged. Parameters: s (str): The input string. n (int): The number of positions to shift each character. Returns: str: The resulting string after the shift. def shift_char(c, n): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') - n) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') - n) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, n) for c in s)"},{"question":"A digital book library is developing a search engine to help users find books quickly. The library uses a prefix-based search algorithm that matches the search string with the titles of books. A user inputs a search string, and all book titles that begin with the prefix provided by the user are returned. Your task is to develop a program that reads multiple data sets, each containing a list of book titles and a series of prefixes, and generates the corresponding set of book titles matching each prefix. The program should return the book titles in the order they appear in the input list. Input The input consists of multiple data sets, each of which represents a library of book titles and a sequence of prefixes in the following format: n title1 . . . titlen p prefix1 . . . prefixp - `n` in the first line is a positive integer, representing the number of book titles in the library. - The next `n` lines each represent a book title. Book titles contain only alphanumeric characters and spaces. - `p` in the first line following the book titles is a positive integer, representing the number of prefixes to search for. - The next `p` lines each represent a prefix. Each book title and prefix is arbitrary, with no specific order guaranteed. The input terminates with a line containing a zero. You may assume a library contains at most one thousand book titles, and that the length of each book title is between one and one hundred characters, inclusive. You may also assume the number of prefixes can be between one and one hundred, inclusive. The length of each prefix is at most fifty characters. Output For each data set, your program should print all book titles that match each prefix. Each prefix search result should be on a new line, and the corresponding book titles should be separated by a single semicolon (`;`). Each set of results should be terminated by a single dash (`-`). If no book titles match a prefix, print `No matches found.` for that prefix. Example Input 4 The Great Gatsby To Kill a Mockingbird Pride and Prejudice Great Expectations 3 The Great Moby 3 1984 Brave New World Fahrenheit 451 2 Br Fa 3 Life of Pi The Alchemist Life of Pi: Illustrated 1 Life 0 Output The Great Gatsby;The Great Gatsby Great Expectations;The Great Gatsby No matches found. - Brave New World Fahrenheit 451 - Life of Pi;Life of Pi: Illustrated The Alchemist Life of Pi;Life of Pi: Illustrated -","solution":"def search_books(data): data_sets = [] idx = 0 while idx < len(data): n = int(data[idx]) if n == 0: break idx += 1 titles = [] for _ in range(n): titles.append(data[idx]) idx += 1 p = int(data[idx]) idx += 1 prefixes = [] for _ in range(p): prefixes.append(data[idx]) idx += 1 data_sets.append((titles, prefixes)) results = [] for titles, prefixes in data_sets: result_set = [] for prefix in prefixes: matches = [title for title in titles if title.startswith(prefix)] if matches: result_set.append(\\";\\".join(matches)) else: result_set.append(\\"No matches found.\\") result_set.append(\\"-\\") results.append(\\"n\\".join(result_set)) return \\"n\\".join(results)"},{"question":"You are given a list of email addresses, and you need to remove the unnecessary parts to determine the unique addresses. An email address consists of two main parts: 1. The local name 2. The domain name, separated by the \'@\' sign. For example, in the address \\"alice@example.com\\": - \\"alice\\" is the local name - \\"example.com\\" is the domain name Additionally, there are two specific rules: 1. Periods (\'.\') in the local name portion of an email address are ignored. 2. Plus signs (\'+\') in the local name portion of an email address indicate that the rest of the address should be ignored. This allows certain tags for filtering, but these tags should be disregarded. For instance, \\"alice.z@example.com\\" and \\"alicez@example.com\\" are considered the same email address, and \\"alice+123@example.com\\" only corresponds to \\"alice@example.com\\". The task is to find the number of unique email addresses based on the given list. **Input:** An integer `n` is provided as the first input line representing the number of email addresses. Followed by `n` lines, each containing an email address. **Output:** The program should output an integer representing the number of unique email addresses after applying the local name normalization rules. **Example:** Input: ``` 5 test.email+alex@leetcode.com test.e.mail+bob.cathy@leetcode.com testemail+david@lee.tcode.com test.email@domain.com testemail@domain.com ``` Output: ``` 3 ``` In the above example, \\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\" and \\"testemail+david@lee.tcode.com\\" are normalized to the same \\"testemail@leetcode.com\\".","solution":"def num_unique_emails(n, email_list): unique_emails = set() for email in email_list: local, domain = email.split(\'@\') local = local.split(\'+\')[0] # Ignore everything after the plus local = local.replace(\'.\', \'\') # Remove dots in local part unique_emails.add(local + \'@\' + domain) return len(unique_emails)"},{"question":"You are given a sequence of n positive integers and an integer k. Write a function that returns the maximum sum of a subarray of length k. Example: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: Subarray with maximum sum is [5, 1, 3]. Input: arr = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: Subarray with maximum sum is [3, 4]. Note: - The input array arr will have at least one element and will not contain more than 100,000 elements. - The integer k will be positive and will not exceed the length of the input array.","solution":"def max_sum_subarray_of_length_k(arr, k): Returns the maximum sum of a subarray of length k. :param arr: List of positive integers :param k: Length of the subarray :return: Maximum sum of subarray of length k if not arr or k <= 0 or k > len(arr): return 0 # Calculate the sum of the first k elements max_sum = current_sum = sum(arr[:k]) # Slide the window over the array for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"**Frog Jump** FrogJump, a new game by the innovative GreenFox, aims to improve children\'s logical and mathematical reasoning. The game involves a frog that starts from position 0 on an infinitely long number line and makes a series of jumps. Each jump has a fixed length and direction (either forward or backward). The objective of the game is for the frog to reach or exceed a specified target position on the number line in the minimum number of jumps possible. You\'ll be given the initial position of the frog (always 0), the length of each jump, and a target position. Your task is to determine the minimum number of jumps the frog needs to make to reach or exceed the target position. **Input:** The first line contains an integer `t` – the number of test cases. Each test case is described with a single line containing two integers: - `d` – the length of each jump (1 ≤ d ≤ 10^6) - `x` – the target position (1 ≤ x ≤ 10^6) **Output:** For each test case, output a single integer – the minimum number of jumps required to reach or exceed the target position. **Example:** Input: ``` 3 3 10 2 5 5 20 ``` Output: ``` 3 3 4 ``` **Explanation:** 1. For the first test case, the frog can jump 3 units each jump. Minimum jumps to reach or exceed 10 units are 3 jumps (3 + 3 + 3). 2. For the second test case, the frog can jump 2 units each jump. Minimum jumps to reach or exceed 5 units are 3 jumps (2 + 2 + 2). 3. For the third test case, the frog can jump 5 units each jump. Minimum jumps to reach or exceed 20 units are 4 jumps (5 + 5 + 5 + 5).","solution":"def min_jumps(d, x): Returns the minimum number of jumps required for the frog to reach or exceed the target position x with each jump having a fixed length d. if x % d == 0: return x // d else: return x // d + 1 def solve_frog_jump(test_cases): Solves multiple test cases of the frog jump problem. Each test_case is a tuple (d, x), where `d` is the length of each jump and `x` is the target position. results = [] for d, x in test_cases: results.append(min_jumps(d, x)) return results"},{"question":"Problem Techville is a city with a complex road system made up of N intersections and N-1 bidirectional roads, implying that the roads form a tree structure. Each road has a travel time associated with it. You are given M queries, each requiring you to determine the shortest travel time between two intersections. Each road can be described by 3 integers A, B, and T, where there is a road between intersections A and B with travel time T. Queries are in the format of: 1. a b - Find the shortest travel time between intersections a and b. Input: The first line contains two integers N and M, the number of intersections and the number of queries. The next N-1 lines each contain three integers A, B, and T, representing a road between intersections A and B with travel time T. The following M lines each contain a query in the format \\"1 a b\\". Output: For each query, output the shortest travel time from intersection a to intersection b in a new line. Constraints: 2 ≤ N ≤ 100000 1 ≤ M ≤ 100000 1 ≤ A, B ≤ N 1 ≤ T ≤ 1000 SAMPLE INPUT 5 3 1 2 3 1 3 2 3 4 4 3 5 1 1 1 4 1 2 5 1 4 5 SAMPLE OUTPUT 6 4 5 Explanation The given tree structure can be visualized as: ``` 1 / 2 3 / 4 5 ``` With travel times: - 1-2: 3 - 1-3: 2 - 3-4: 4 - 3-5: 1 For the first query, the shortest travel time from 1 to 4 is 1 → 3 → 4 which is 2 + 4 = 6. For the second query, the shortest travel time from 2 to 5 is 2 → 1 → 3 → 5 which is 3 + 2 + 1 = 6. For the third query, the shortest travel time from 4 to 5 is 4 → 3 → 5 which is 4 + 1 = 5.","solution":"import heapq from collections import defaultdict, deque def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest paths from a starting node to all other nodes in a weighted graph. N = len(graph) dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for neighbor, weight in graph[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist def techville_shortest_travel_times(N, roads, queries): Given the number of intersections, the roads in Techville, and the queries, returns the shortest travel times for each query. # Build the graph graph = defaultdict(list) for A, B, T in roads: graph[A].append((B, T)) graph[B].append((A, T)) all_dijkstras = {} # Compute shortest paths from every node using Dijkstra\'s algorithm for i in range(1, N + 1): all_dijkstras[i] = dijkstra(graph, i) results = [] for _, a, b in queries: results.append(all_dijkstras[a][b]) return results"},{"question":"Nathan loves solving puzzles. He recently came across a unique type of puzzle called \\"Grid Path Puzzle\\" where he has to find the shortest path to reach from the top-left corner to the bottom-right corner of a 2D grid. Each cell in the grid contains a number that represents the cost to step into that cell. Nathan can move either right or down at any point in time. Given a grid of size NxM, help Nathan find the minimum cost to reach the bottom-right corner from the top-left corner. Example 1: Input: grid = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: The path 1→3→1→1→1 minimizes the cost to 7. Example 2: Input: grid = [[1,2,3], [4,5,6]] Output: 12 Explanation: The path 1→2→3→6 minimizes the cost to 12. Your Task: You need to complete the function `minPathCost` that takes a 2D array (grid), its number of rows (N), and its number of columns (M) and returns the minimum cost to reach the bottom-right corner from the top-left corner. The input is provided by the driver code, and you do not need to worry about input and output handling. Expected Time Complexity: O(N*M). Expected Auxiliary Space: O(N*M). Constraints: 1 ≤ N, M ≤ 100 1 ≤ grid[i][j] ≤ 100","solution":"def minPathCost(grid): Returns the minimum cost to reach the bottom-right corner from the top-left corner of the given 2D grid. N = len(grid) M = len(grid[0]) # Create a 2D array to store the cost of the path to each point. dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"Maria is playing a game with her friend where they take turns to remove stones from a pile. The game starts with N stones and each player can remove 1, 2, or 3 stones from the pile during their turn. A player loses if they cannot make a move (i.e., if there are no stones left when it\'s their turn). Assuming Maria always goes first and both players play optimally, determine whether Maria will win the game or not. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains an integer N — the number of stones at the start of the game. ------ Output Format ------ For each test case, output WIN if Maria will win the game. Otherwise, output LOSE. You may print each character of WIN and LOSE in uppercase or lowercase (for example, win, wIn, Win will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{6} ----- Sample Input 1 ------ 3 1 2 4 ----- Sample Output 1 ------ WIN WIN LOSE ----- Explanation 1 ------ Test Case 1: With 1 stone, Maria can take the stone and win the game immediately. Test Case 2: With 2 stones, Maria can take both stones and win the game immediately. Test Case 3: With 4 stones, if Maria takes 1, 2, or 3 stones, her friend can always take the remaining stones to win the game. Notice that Maria can always win if the number of stones is not a multiple of 4. If the number of stones is a multiple of 4, her opponent can always adjust their moves to end up in a winning position.","solution":"def will_maria_win(n): return \\"WIN\\" if n % 4 != 0 else \\"LOSE\\" def maria_game_result(T, test_cases): results = [] for n in test_cases: results.append(will_maria_win(n)) return results"},{"question":"Grace has a collection of boxes, each containing a number of items. She likes to stack the boxes in a specific order, maintaining some rules. In particular, Grace can stack a box B on top of another box A if and only if the number of items in box A is greater than or equal to the number of items in box B. Once arranged, Grace wants to maximize the total height of the stack, where the height of each box is 1. Given an array of integers representing the number of items in each box, determine the length of the longest possible stack Grace can create under these conditions. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of boxes. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of items in each box. -----Output----- Output a single integer representing the maximum height of the stack. -----Examples----- Input 7 6 7 6 5 4 3 2 Output 7 Input 6 10 10 9 8 6 6 Output 6 -----Note----- In the first example, the stack can contain all boxes since the sequence is non-increasing from top to bottom. In the second example, the maximum height stack can be formed using all given boxes since their order follows the stacking condition.","solution":"def max_stack_height(n, items): Calculates the maximum height of the stack that can be created by following the given rules of box stacking. Args: n: int - the number of boxes. items: List of integers - the number of items in each box. Returns: int - the maximum height of the stack. # Sort the items in non-increasing order items.sort(reverse=True) # The maximum height will be the number of items in the sorted list return n"},{"question":"A gardener wants to plant flowers in a straight line such that the beauty of his garden is maximized. The garden is divided into `n` sections, and each section can contain either one flower or be left empty. Each flower has an intrinsic beauty value, and different arrangements of flowers give different aesthetic values. The gardener notices that whenever he places two flowers in consecutive sections, the aesthetic value of the arrangement increases by `k`. Input The first line of the input contains two integers `n` (1 ≤ n ≤ 100,000) — the number of sections in the garden, and `k` (1 ≤ k ≤ 10^9) — the increase in aesthetic value for each pair of consecutive flowers. The second line contains `n` integers `bi` (1 ≤ bi ≤ 10^9) — the beauty value of the flower that can be planted in the `i-th` section. Output Print a single integer — the maximum total aesthetic value the gardener can achieve with his optimal flower placement. Example Input 5 10 3 5 8 4 6 Output 41 Note In the sample, the gardener can achieve the maximum total aesthetic value by planting flowers in all sections, with the total beauty value as 3+5+8+4+6 = 26. The additional aesthetic value from consecutive flowers planted in all sections is 4*10 = 40. Thus, the total aesthetic value is 26 + 40 = 66.","solution":"def max_total_aesthetic_value(n, k, beauties): if n == 0: return 0 total_beauty = sum(beauties) total_aesthetic = (n - 1) * k max_aesthetic_value = total_beauty + total_aesthetic return max_aesthetic_value"},{"question":"You are given a set of m intervals [l1, r1], [l2, r2], ..., [lm, rm] on a number line. Each interval [li, ri] represents an interval from li to ri. Your task is to determine if there exists a point on the number line that is covered by at least k of these intervals. Constraints: * 1 ≤ m ≤ 2000 * 1 ≤ li ≤ ri ≤ 10^9 * 1 ≤ k ≤ m * All inputs are integers Input: m k l1 r1 l2 r2 ... lm rm Output: Output \\"Yes\\" if there exists a point that is covered by at least k intervals, otherwise output \\"No\\". Examples: Input: 5 3 1 4 2 6 8 10 3 9 5 7 Output: Yes Input: 4 4 1 2 2 3 3 4 4 5 Output: No","solution":"def covered_by_k_intervals(m, k, intervals): Determines if there exists a point on the number line that is covered by at least k given intervals. from collections import defaultdict # Create a map to count coverage at each point coverage = defaultdict(int) # Record the start and end points for l, r in intervals: coverage[l] += 1 coverage[r + 1] -= 1 # Calculate the coverage at each point current_coverage = 0 for point in sorted(coverage): current_coverage += coverage[point] if current_coverage >= k: return \\"Yes\\" return \\"No\\" # Example usage: # m = 5 # k = 3 # intervals = [(1, 4), (2, 6), (8, 10), (3, 9), (5, 7)] # print(covered_by_k_intervals(m, k, intervals)) # Output: \\"Yes\\""},{"question":"You are given an array consisting of `n` integers. Your task is to find the sum of the longest subarray where all elements are the same. A subarray is the sequence of consecutive elements of the array. All elements in this subarray should be identical. -----Input----- The first line contains single positive integer `n` (1 ≤ n ≤ 10^5) — the number of integers. The second line contains `n` non-negative integers `a_1, a_2, ..., a_{n}` (0 ≤ a_{i} ≤ 10^9). -----Output----- Print the sum of the subarray of maximum length where all elements are the same. -----Examples----- Input 5 2 2 2 3 3 Output 6 Input 6 1 2 2 2 1 1 Output 6 Input 3 4 4 4 Output 12","solution":"def sum_of_longest_identical_subarray(n, array): Find the sum of the longest subarray with all elements being identical. Args: n : int : Number of integers in the array array : list of int : The list of integers in the array Returns: int : The sum of the longest subarray with all identical elements if n == 0: return 0 max_length = 1 current_length = 1 element = array[0] for i in range(1, n): if array[i] == array[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length element = array[i - 1] current_length = 1 if current_length > max_length: max_length = current_length element = array[n - 1] return max_length * element"},{"question":"You are given two integers and an arithmetic operator. Based on the given arithmetic operator, perform the corresponding arithmetic operation on the two integers. Task Write a Python function that takes two integers and a string representing an arithmetic operator, and returns the result of the operation. The function signature should be: ```python def arithmetic_operation(a: int, b: int, operator: str) -> float: ``` The operators can be: - `+`: Add the two numbers. - `-`: Subtract the second number from the first. - `*`: Multiply the two numbers. - `/`: Divide the first number by the second. Note that division by zero should return the string `\\"undefined\\"`. Input Format Three lines of input: 1. The first line contains an integer a (-10^9 leq a leq 10^9). 2. The second line contains an integer b (-10^9 leq b leq 10^9). 3. The third line contains a string operator (`+`, `-`, `*`, or `/`). Output Format A single line containing the result of the arithmetic operation, or `\\"undefined\\"` if a division by zero occurred. Sample Input 10 5 + Sample Output 15 Sample Input 10 0 / Sample Output undefined","solution":"def arithmetic_operation(a: int, b: int, operator: str) -> float: Performs an arithmetic operation on two integers based on the specified operator. Args: a (int): The first integer. b (int): The second integer. operator (str): The arithmetic operator. Can be \'+\', \'-\', \'*\', or \'/\'. Returns: float: The result of the arithmetic operation, or \\"undefined\\" if division by zero occurs. if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': if b == 0: return \\"undefined\\" else: return a / b else: raise ValueError(\\"Invalid operator\\")"},{"question":"Given a binary tree, the task is to find the height of the tree. The height of a binary tree is the number of edges on the longest path from the root node to a leaf node. Example 1: Input: 1 / 2 3 / 4 5 Output: 2 Example 2: Input: 1 / 2 / 3 / 4 Output: 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findHeight()` which takes the root of the binary tree as input and returns the height of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) (due to recursion stack) Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - The value of each node is in the range [-10^5, 10^5].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findHeight(root): if root is None: return -1 else: left_height = findHeight(root.left) right_height = findHeight(root.right) return max(left_height, right_height) + 1"},{"question":"You are given a string ( s ) consisting of lowercase English letters, and an integer ( k ). Your task is to determine whether it is possible to rearrange the characters of the string such that the resultant string contains no two adjacent characters being the same, and if possible, return such a rearranged string. If there is more than one possible arrangement, return any of them. If it is not possible to rearrange the string in such a way, return an empty string. -----Input----- The first line contains a string ( s ) (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. The second line contains an integer ( k ) (1 ≤ k ≤ 10^5). -----Output----- If it is possible to rearrange the string such that no two adjacent characters are the same, print any such rearranged string. If it is not possible, print an empty string. -----Examples----- Input aabb 1 Output abab Input aaab 3 Output \\"\\" -----Note----- In the first example, it is possible to rearrange the string as \\"abab\\" or \\"baba\\", both of which have no adjacent characters being the same. In the second example, it is not possible to rearrange the string such that no two adjacent characters are the same. Therefore, the output is an empty string.","solution":"from collections import Counter from heapq import heappop, heappush, heapify def rearrange_string(s, k): if k == 0: return s n = len(s) counter = Counter(s) # If any character occurs more than (n + 1) // 2 times, return empty string max_freq = max(counter.values()) if max_freq > (n + 1) // 2: return \\"\\" max_heap = [(-value, key) for key, value in counter.items()] heapify(max_heap) queue = [] rearranged = [] while max_heap: freq, char = heappop(max_heap) rearranged.append(char) queue.append((freq + 1, char)) if len(queue) >= k: front = queue.pop(0) if front[0] < 0: heappush(max_heap, front) return \\"\\".join(rearranged) if len(rearranged) == n else \\"\\""},{"question":"Given a binary tree, create a function that flattens the tree into a \\"linked list\\" in the same order as a pre-order traversal. Each node will be pointed to its successor using its right child, and its left child should be set to `None`. Example 1: Input: 1 / 2 5 / 3 4 6 Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Explanation: After flattening, the tree should look like: 1 2 3 4 5 6 Example 2: Input: 12 / 7 23 / 5 9 25 Output: 12 -> 7 -> 5 -> 9 -> 23 -> 25 Your Task: Implement the function `flattenBinaryTree(root)` which should take the root node of the binary tree and flatten it in-place as described. You should not return anything. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The number of nodes in the tree is in the range [0, 2000]. - -100 ≤ Node.val ≤ 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flattenBinaryTree(root): Flatten the binary tree into a \\"linked list\\" in the same order as a pre-order traversal. if not root: return stack = [root] prev = None while stack: current = stack.pop() if prev: prev.right = current prev.left = None if current.right: stack.append(current.right) if current.left: stack.append(current.left) prev = current"},{"question":"Given a list of integers, write a function that returns a list where each integer is replaced by a tuple containing the integer and its number of occurrences in the original list. Example: Input: [4, 5, 6, 4, 4, 5] Output: [(4, 3), (5, 2), (6, 1), (4, 3), (4, 3), (5, 2)]","solution":"def count_occurrences(lst): Given a list of integers, returns a list where each integer is replaced by a tuple containing the integer and its number of occurrences in the original list. :param lst: List of integers :return: List of tuples from collections import Counter counts = Counter(lst) return [(x, counts[x]) for x in lst]"},{"question":"A famous chess player is participating in a tournament, and he wants to analyze his recent performance based on his game scores. You are given a list of integers, where each integer represents the rating change after a game in the tournament. The player wants to determine the maximum sum of contiguous subarray (one or more scores) within his game scores. This will help him identify the stretch of games where he performed best. Write a function `max_contiguous_sum` that takes a list of integers and returns the maximum sum of any contiguous subarray within the list. Input: - The input consists of a single list of integers representing the rating changes after each game. The length of the list is between 1 and 100,000 inclusive, and each integer falls in the range from -10,000 to 10,000 inclusive. Output: - The function should return a single integer which is the maximum sum of any contiguous subarray within the given list. Example: Input: [8, -1, 3, 4] Output: 14 Input: [-2, -3, 4, -1, -2, 1, 5, -3] Output: 7 Note: The maximum sum of a contiguous subarray in the first example is obtained by summing all elements: 8 + (-1) + 3 + 4 = 14. In the second example, the maximum sum is obtained by summing the subarray [4, -1, -2, 1, 5], thus resulting in 7.","solution":"def max_contiguous_sum(arr): Returns the maximum sum of any contiguous subarray within the given list. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A social media platform uses a rating system where users can rate other users\' posts. Each rating has a value from 1 to 5. The platform wants to introduce a new feature to identify the most liked post in a user\'s timeline based on these ratings. You need to write a program that processes a sequence of ratings for multiple users and then answers queries about the highest-rated post in a user\'s timeline. Input Format The first line contains an integer mathbf{N} denoting the number of users. The next mathbf{N} lines describe the posts and ratings for each user. Each line starts with an integer mathbf{U} which denotes the user ID, followed by another integer mathbf{M} that indicates the number of posts by this user. The next mathbf{M} pairs of integers represent the ratings of the posts, where each pair consists of two integers: mathbf{P} (post ID) and mathbf{R} (rating). The next line contains an integer mathbf{Q}, the number of queries. Each query is of the following format: mathbf{U}: Find the highest-rated post for user mathbf{U}. If the user has multiple posts with the highest rating, return the post with the smallest post ID. If the user has no posts, return -1. Constraints 1 leq N leq 10^4 1 leq Q leq 10^5 1 leq U leq 10^5 1 leq M leq 10^3 1 leq P leq 10^9 1 leq R leq 5 Output Format For each query, output the post ID with the highest rating for the specified user. If the user has no posts, output -1. Sample Input 3 1 3 1001 4 1002 5 1003 3 2 2 2001 3 2002 4 3 1 3001 2 4 1 2 3 4 Sample Output 1002 2002 3001 -1 Explanation There are 3 users and 4 queries in the input. - User 1 has three posts with ratings: - Post 1001 with rating 4 - Post 1002 with rating 5 - Post 1003 with rating 3 The highest-rated post is 1002 with a rating of 5. - User 2 has two posts with ratings: - Post 2001 with rating 3 - Post 2002 with rating 4 The highest-rated post is 2002 with a rating of 4. - User 3 has one post: - Post 3001 with rating 2 The highest-rated post is 3001 with a rating of 2. - User 4 has no posts, so the output is -1.","solution":"def process_ratings_and_queries(n, user_posts, q, queries): Determines highest rated post for each user in given queries. Parameters: - n (int): Number of users - user_posts (List[Tuple[int, int, List[Tuple[int, int]]]]): Data about the users and their posts - q (int): Number of queries - queries (List[int]): List of user IDs to query Returns: - List[int]: Post IDs corresponding to the highest rated post for each query user_max_post = {} # Process user posts data for user_id, m, posts in user_posts: max_rating = -1 min_post_id = float(\'inf\') for post_id, rating in posts: if rating > max_rating or (rating == max_rating and post_id < min_post_id): max_rating = rating min_post_id = post_id if max_rating != -1: user_max_post[user_id] = min_post_id # Process queries results = [] for user_id in queries: if user_id in user_max_post: results.append(user_max_post[user_id]) else: results.append(-1) return results"},{"question":"(...) Consider a game involving a grid of characters. Each character in the grid is either \'X\' or \'O\'. The goal of the game is to identify the largest region of connected \'X\'s in the grid. Two cells are considered connected if they share a common side (i.e., they are adjacent horizontally or vertically but not diagonally). Your task is to write a function that, given the dimensions n (number of rows) and m (number of columns) of the grid and the grid itself, returns the size of the largest region of connected \'X\'s. # Input: - The first line contains two space-separated integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines contain m characters each, representing the grid, where each character is either \'X\' or \'O\'. # Output: - Output a single integer — the size of the largest region of connected \'X\'s. # Example Input: 6 8 XOXOXOXO OXOXOXOX XOXOXOXO OXOXOXOX XOXOXOXO OXOXOXOX Output: 1 Input: 4 5 OXOXO XOXOX OXOXO XOXOX Output: 1 Note In the first example, any \'X\' in the grid is its own region without any adjacent \'X\'s, hence the size of the largest region of connected \'X\'s is 1. In the second example, similar to the first, every \'X\' is isolated and forms a region of size 1.","solution":"def largest_region(n, m, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'X\': return 0 grid[x][y] = \'Visited\' size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size max_region_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'X\': max_region_size = max(max_region_size, dfs(i, j)) return max_region_size"},{"question":"A company needs to rent meeting rooms for conducting interviews. They have a list of interview sessions, each requiring a start and end time. The meeting rooms are reusable but can accommodate only one session at a time. The goal is to determine the minimum number of meeting rooms required to accommodate all sessions without any overlap. Write a program that takes the start and end times of the interview sessions and calculates the minimum number of meeting rooms required. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of interview sessions. The next n lines contain two integers start_i and end_i (0 ≤ start_i < end_i ≤ 10^6) — the start and end times of the i-th interview session. Output Print a single integer — the minimum number of meeting rooms required. Example Input 5 1 4 2 5 6 8 3 6 5 7 Output 3 Input 3 1 3 2 4 3 5 Output 2 Input 4 1 5 2 6 8 10 9 11 Output 2 Explanation In the first example, three rooms are needed: - The first room is used for sessions (1, 4) and (5, 7). - The second room is used for sessions (2, 5) and (6, 8). - The third room is used for session (3, 6). In the second example: - The first room is used for sessions (1, 3) and (3, 5). - The second room is used for session (2, 4). In the third example, the sessions require two rooms due to their overlapping times.","solution":"import heapq def min_meeting_rooms(sessions): if not sessions: return 0 # Sort the sessions by start time sessions.sort(key=lambda x: x[0]) # Initialize a heap heap = [] # Add the end time of the first session heapq.heappush(heap, sessions[0][1]) for i in range(1, len(sessions)): # If the current meeting starts after the earliest meeting ends if sessions[i][0] >= heap[0]: heapq.heappop(heap) # Push the end time of the current meeting heapq.heappush(heap, sessions[i][1]) # The size of the heap is the number of rooms needed return len(heap)"},{"question":"In a city, there are N parks connected by M bidirectional roads. Every park is labeled with a unique integer from 1 to N. Each road has a certain length associated with it. You are given Q queries, where each query consists of two integers u and v. For each query, you need to determine the shortest distance from park u to park v. If there is no path from park u to park v, output -1 for that query. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 2000 - 1 ≤ Q ≤ 10000 - 1 ≤ u, v ≤ N - The length of each road is between 1 and 1000. Input Input is given from Standard Input in the following format: N M Q u_1 v_1 l_1 u_2 v_2 l_2 ... u_M v_M l_M a_1 b_1 a_2 b_2 ... a_Q b_Q Output For each query, output the shortest distance from park a_i to park b_i, or -1 if there is no path. Examples Input 4 4 3 1 2 4 2 3 2 3 4 3 1 4 7 1 3 2 4 1 4 Output 6 5 7 Input 5 5 2 1 2 5 2 3 3 3 4 4 4 5 1 1 5 10 1 5 2 5 Output 10 8","solution":"import heapq def shortest_distances(N, M, Q, roads, queries): def dijkstra(graph, start): distances = {node: float(\'infinity\') for node in range(1, N+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances graph = {i: {} for i in range(1, N+1)} for u, v, l in roads: graph[u][v] = l graph[v][u] = l all_distances = {i: dijkstra(graph, i) for i in range(1, N+1)} results = [] for u, v in queries: distance = all_distances[u][v] results.append(distance if distance != float(\'infinity\') else -1) return results"},{"question":"----- Problem Statement ----- You are given a string S of length N consisting of lowercase English letters and an integer K. You need to find if it is possible to rearrange the characters of S in such a way that: - No two adjacent characters are the same. - The rearranged string is lexicographically smallest possible. If it is possible, print the rearranged string. Otherwise, print \\"-1\\". ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then T test cases follow. - The first line of each test case contains the integer N - the length of the string. - The second line of each test case contains the string S. - The third line of each test case contains the integer K. ------ Output Format ------ For each test case, print the lexicographically smallest rearranged string or \\"-1\\" if it is not possible to rearrange the string as per the given conditions. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ K ≤ 26 S consists of lowercase English letters only. ----- Sample Input 1 ----- 2 6 aabbcc 3 3 aaab ----- Sample Output 1 ----- abcabc -1 ----- Explanation 1 ----- 1. For the first test case, the string \\"aabbcc\\" can be rearranged as \\"abcabc\\" which satisfies the constraints. 2. For the second test case, it is impossible to rearrange \\"aaab\\" such that no two adjacent characters are the same. Hence, the output is \\"-1\\".","solution":"from collections import Counter import heapq def rearrange_string(S, K): count = Counter(S) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((freq + 1, char)) # Increment freq to reduce occurrence if len(wait_queue) >= K: front = wait_queue.pop(0) if front[0] < 0: # If there\'s still count left heapq.heappush(max_heap, front) rearranged_string = \'\'.join(result) if len(rearranged_string) == len(S): return rearranged_string else: return \\"-1\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] K = test_cases[i][2] result = rearrange_string(S, K) results.append(result) return results"},{"question":"Stanley has been tasked with organizing the books on a shelf. Each book has been assigned a unique ID number. The books are currently arranged in some order on the shelf, and Stanley can perform the following operation as many times as he wants: choose any subsegment of the array of book IDs, reverse it, and then put it back in its original position. Stanley wants to know if it\'s possible to sort all the books in ascending order using the above operation. Given the initial sequence of book IDs, determine whether it is possible to sort them. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) - the number of books on the shelf. The second line contains n space-separated integers, representing the unique IDs of the books in their current order. -----Output----- Print \\"YES\\" if it is possible to sort the books in ascending order using the described operation, otherwise print \\"NO\\". -----Examples----- Input 5 3 2 1 4 5 Output YES Input 4 4 3 2 1 Output YES Input 6 6 5 4 3 2 1 Output YES Input 7 1 2 5 3 4 6 7 Output NO -----Note----- In the first test example, Stanley can reverse the subsegment [3, 2, 1] to get [1, 2, 3, 4, 5], which is sorted in ascending order. In the second test example, Stanley can reverse the entire sequence [4, 3, 2, 1] to get [1, 2, 3, 4], which is sorted in ascending order. In the third test example, Stanley can reverse the entire sequence [6, 5, 4, 3, 2, 1] to get [1, 2, 3, 4, 5, 6], which is sorted in ascending order. In the fourth test example, there is no single subsegment or combination of subsegments that can be reversed to achieve a sorted array, thus the output is \\"NO\\".","solution":"def can_sort_by_reversing_segment(n, books): Determines if it\'s possible to sort the list of book IDs by reversing any single segment of the list. :param n: int - the number of books :param books: List[int] - the IDs of the books :return: str - \\"YES\\" if it is possible to sort the books, otherwise \\"NO\\" # Identify the sorted version of the books sorted_books = sorted(books) # If books are already sorted if books == sorted_books: return \\"YES\\" # Find the first and last positions where the books differ from sorted_books i = 0 while i < n and books[i] == sorted_books[i]: i += 1 j = n - 1 while j >= 0 and books[j] == sorted_books[j]: j -= 1 # Reverse the found sub-segment and check if it matches the sorted array if books[:i] + books[i:j+1][::-1] + books[j+1:] == sorted_books: return \\"YES\\" return \\"NO\\""},{"question":"Write a function `circular_subarray_max_sum` that takes an integer array `A` and returns the maximum possible sum of a non-empty subarray of `A`. Your subarray can either be non-circular, which means it is a contiguous section of the array, or circular, which means it can wrap around the end of the array. # Problem Description: A subarray of `A` is a contiguous section of the array. The maximum subarray sum can be found for linear subarrays using Kadane\'s algorithm. However, for circular subarrays, the problem is more complex. The goal is to compute the maximum possible sum of any subarray, either linear or circular. An array is circular if the end of the array wraps around to the beginning. # Input: * The input parameter is: - `A`: an integer array with a length between 1 and 3 * 10^4. - The elements of `A` are in the range of [-10^4, 10^4]. # Output: * The function should return an integer representing the maximum possible sum of a subarray. # Examples: ```python circular_subarray_max_sum([1, -2, 3, -2]) # Output: 3 ``` Explanation: No need to wrap, the subarray [3] has the maximum sum. ```python circular_subarray_max_sum([5, -3, 5]) # Output: 10 ``` Explanation: The subarray [5, 5] in circular wrap has the maximum sum. ```python circular_subarray_max_sum([3, -1, 2, -1]) # Output: 4 ``` Explanation: The subarray [3, -1, 2] in circular wrap has the maximum sum. ```python circular_subarray_max_sum([3, -2, 2, -3]) # Output: 3 ``` Explanation: No need to wrap, the subarray [3] has the maximum sum. ```python circular_subarray_max_sum([-2, -3, -1]) # Output: -1 ``` Explanation: No need to wrap, the subarray [-1] has the maximum sum.","solution":"def circular_subarray_max_sum(A): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(A) max_wrap = 0 for i in range(len(A)): max_wrap += A[i] A[i] = -A[i] max_wrap = max_wrap + kadane(A) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Johnny loves playing video games, and one of his favorite games involves navigating through a grid of obstacles. The game grid is a 2D matrix of dimensions n times m, where each cell contains a number. Johnny needs to navigate from the top-left corner of the grid to the bottom-right corner. He can only move either right or down from a cell. Johnny has a special power that allows him to \\"collect\\" the value of each cell he visits. At the end of his journey, Johnny\'s score is the sum of the values of all the cells he\'s collected. Johnny wants to achieve the maximum possible score by the time he reaches the bottom-right corner. Your task is to help Johnny find the maximum score he can achieve on a given game grid. **Input Format** The first line contains two positive integers n and m, denoting the number of rows and columns in the grid. The next n lines each contain m space-separated integers, representing the values in the grid. **Constraints** 1 leq n, m leq 100 -1000 leq text{Grid}[i][j] leq 1000 **Output Format** Print a single integer representing the maximum score Johnny can achieve. **Sample Input 1** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Sample Output 1** ``` 12 ``` **Explanation 1** Johnny starts at the top-left corner (1), moves to the right to (3), moves to the right to (1), moves down to (1), moves down to (1), and finally moves right to (2) and then to (1) to reach the bottom-right corner. The path he takes is 1 → 3 → 1 → 5 → 2 → 1, which sums to 12. **Sample Input 2** ``` 2 3 1 -3 1 2 5 -1 ``` **Sample Output 2** ``` 7 ``` **Explanation 2** Johnny must navigate through cells with negative values judiciously. The optimal path he takes is 1 → -3 → 5 → -1, which sums to 2. Johnny needs your help to find the optimal path and achieve the highest possible score. Implement a function that calculates this maximum score.","solution":"def max_score(grid): This function calculates the maximum possible score Johnny can achieve by navigating from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Initialize a dp table with the same dimensions as grid dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] # Fill in the values for the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the values for the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The maximum score will be in the bottom-right corner of the dp table return dp[n-1][m-1]"},{"question":"Given two strings `str1` and `str2`, return the lexicographically smallest string that can be obtained by removing characters from `str1` such that `str2` is still a subsequence of `str1`. # Constraints: 1. `str1` and `str2` will contain only lowercase English letters. 2. The length of `str1` will be at most `10^5`. 3. The length of `str2` will be at most `10^3`. # Example: ```python str1 = \\"abcbcbc\\" str2 = \\"abc\\" # \\"abc\\" is a subsequence of \\"abcbcbc\\". The lexicographically smallest string after removing characters is \\"abc\\" smallest_subsequence(str1, str2) == \\"abc\\" str1 = \\"aabbcc\\" str2 = \\"abc\\" # The lexicographically smallest string after removing characters from \\"aabbcc\\" while keeping \\"abc\\" as a subsequence is \\"abc\\" smallest_subsequence(str1, str2) == \\"abc\\" str1 = \\"acbbbac\\" str2 = \\"abc\\" # One such subsequence is \\"abbc\\", but the lexicographically smallest is \\"abc\\" smallest_subsequence(str1, str2) == \\"abc\\" ``` # Task Create the function `smallest_subsequence(str1, str2)` that returns the smallest lexicographical string after deleting some characters from `str1` such that `str2` is still a subsequence of `str1`. You can assume that it is always possible to form `str2` as a subsequence of `str1`.","solution":"def smallest_subsequence(str1, str2): Returns the lexicographically smallest string that can be obtained by removing characters from str1 such that str2 is still a subsequence of str1. :param str1: (str) The original string :param str2: (str) The string that must remain a subsequence :return: (str) Lexicographically smallest string # Helper function to build the next occurrence array def build_next_occurrence_array(s): next_occurrence = [{} for _ in range(len(s) + 1)] last_occurrence = {} for i in range(len(s) - 1, -1, -1): last_occurrence[s[i]] = i next_occurrence[i] = last_occurrence.copy() return next_occurrence # Build the next occurrence array next_occurrence = build_next_occurrence_array(str1) pos = 0 result = [] for char in str2: if char in next_occurrence[pos]: next_pos = next_occurrence[pos][char] result.append(char) pos = next_pos + 1 return \'\'.join(result)"},{"question":"A binary string is a string consisting only of digits 0 and 1. Given a binary string, you are to determine the length of the longest substring of the given string such that it contains an equal number of 0s and 1s. If the input string does not contain such a substring, return 0. Input The first line contains a single binary string of length n (1 ≤ n ≤ 10^5). Output Output a single integer, representing the length of the longest substring with an equal number of 0s and 1s. Examples Input 1100010 Output 6 Input 1111 Output 0","solution":"def longest_equal_substring(binary_string): Determines the length of the longest substring with equal number of 0s and 1s. Args: binary_string: str - input binary string. Returns: int - length of the longest substring containing equal number of 0s and 1s. count = {0: -1} max_length = 0 balance = 0 for i, char in enumerate(binary_string): if char == \'0\': balance -= 1 else: balance += 1 if balance in count: max_length = max(max_length, i - count[balance]) else: count[balance] = i return max_length"},{"question":"A well-known social network platform has a unique way of counting the popularity of each user based on their interactions. Specifically, each user interaction is defined as a directed edge in a graph where nodes represent users, and edges represent interactions from one user to another. Given a directed graph with `N` nodes and `M` edges, we need to calculate the popularity of each user. The popularity of a user `u` is defined as the number of users who can reach `u` directly or indirectly by following the edges. -----Input format----- - The first line contains two positive integers `N` and `M`, the number of users (nodes) and the number of interactions (edges) respectively. - Each of the next `M` lines contains two integers `U` and `V` indicating an interaction from user `U` to user `V`. -----Output format----- - Output `N` integers, where the `i`-th integer is the popularity of user `i`. -----Constraints----- - 1 ≤ N ≤ 10^5 - 0 ≤ M ≤ 3 * 10^5 - 1 ≤ U, V ≤ N -----Example----- Here is the sample input and output corresponding to the example above: -----Sample input----- 5 4 1 2 2 3 3 4 4 5 -----Sample output----- 0 1 2 3 4 The popularity of user 1 is 0 because no users can reach user 1. The popularity of user 2 is 1 because user 1 can reach user 2. The popularity of user 3 is 2 because users 1 and 2 can reach user 3. The popularity of user 4 is 3 because users 1, 2, and 3 can reach user 4. The popularity of user 5 is 4 because users 1, 2, 3, and 4 can reach user 5.","solution":"def find_popularity(N, M, interactions): from collections import defaultdict, deque # Building the adjacency list adjacency_list = defaultdict(list) for U, V in interactions: adjacency_list[V].append(U) # Function to perform BFS and find reachability def bfs(node): queue = deque([node]) visited = set() visited.add(node) count = 0 while queue: current = queue.popleft() for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) count += 1 return count # Calculating the popularity of each user popularity = [] for i in range(1, N + 1): popularity.append(bfs(i)) return popularity # Example usage: # N, M = 5, 4 # interactions = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(find_popularity(N, M, interactions))"},{"question":"Consider a grid of size `N x N` comprising only \'.\' (dots) and \'#\' (hashes). Each line in the grid corresponds to a row and contains exactly `N` characters. Your task is to find out the largest square filled with only \'.\' characters in the grid, and determine its side length. Input The first line contains an integer `T`, the number of test cases. Each test case consists of two parts: 1. An integer `N` — the size of the grid. 2. `N` lines of `N` characters containing \'.\' and number signs (\'#\'). Output For each test case, output a single integer in a new line indicating the side length of the largest square filled with \'.\' characters in the grid. Constraints 1 <= T <= 100 1 <= N <= 50 Example Input: 2 3 ... ..# # 4 ..#. ..#. .... Output: 2 2 Note: - In the first test case, the largest square filled with \'.\' characters is of size 2x2. - In the second test case, the largest square filled with \'.\' characters is also of size 2x2.","solution":"def largest_square_in_grid(T, test_cases): results = [] for case in test_cases: N, grid = case max_side_length = 0 dp = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) results.append(max_side_length) return results # Example usage T = 2 test_cases = [ (3, [\\"...\\", \\"..#\\", \\"#\\"]), (4, [\\"..#.\\", \\"..#.\\", \\"....\\", \\"\\"]) ] print(largest_square_in_grid(T, test_cases)) # Output: [2, 2]"},{"question":"You are in charge of managing the inventory of a warehouse. You need to keep track of various items and their quantities stored in different sections of the warehouse. Each section is identified by a unique section ID, and each item by a unique item ID. Your task is to write a program that processes a series of actions to update the warehouse inventory. The actions can be one of the following types: 1. \\"STORE <item_id> <section_id> <quantity>\\": Store a certain quantity of the specified item in the specified section. 2. \\"REMOVE <item_id> <section_id> <quantity>\\": Remove a certain quantity of the specified item from the specified section. 3. \\"INVENTORY <section_id>\\": Print the inventory of the specified section, sorted by item ID in ascending order. Each item and its quantity should be printed on a new line in the format \\"<item_id> <quantity>\\". It is guaranteed that: - For \\"STORE\\" actions, the item ID and section ID are valid, and the quantity is positive. - For \\"REMOVE\\" actions, the quantity to remove will not exceed the quantity currently stored in that section for that item. - For \\"INVENTORY\\" actions, the section ID is valid. Input: - The first line contains the number of actions, T. - The next T lines contain the actions in the format specified above. Output: - For each \\"INVENTORY\\" action, print the inventory of the requested section as described. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ item_id, section_id ≤ 1000000 - 1 ≤ quantity ≤ 1000 SAMPLE INPUT 7 STORE 1001 200 50 STORE 1002 200 30 STORE 1001 201 20 REMOVE 1001 200 10 INVENTORY 200 STORE 1003 200 40 INVENTORY 200 SAMPLE OUTPUT 1001 40 1002 30 1001 40 1002 30 1003 40 Explanation: - After the first three \\"STORE\\" actions, items 1001, 1002, and 1001 are stored in sections 200, 200, and 201 respectively. - The \\"REMOVE\\" action reduces the quantity of item 1001 in section 200 by 10. - The first \\"INVENTORY\\" action prints the inventory of section 200, showing items 1001 and 1002 with their updated quantities. - Another \\"STORE\\" action adds item 1003 to section 200. - The second \\"INVENTORY\\" action prints the updated inventory of section 200, including item 1003.","solution":"class Warehouse: def __init__(self): self.sections = {} def store(self, item_id, section_id, quantity): if section_id not in self.sections: self.sections[section_id] = {} if item_id not in self.sections[section_id]: self.sections[section_id][item_id] = 0 self.sections[section_id][item_id] += quantity def remove(self, item_id, section_id, quantity): if section_id in self.sections and item_id in self.sections[section_id]: self.sections[section_id][item_id] -= quantity if self.sections[section_id][item_id] == 0: del self.sections[section_id][item_id] def inventory(self, section_id): if section_id in self.sections: return sorted(self.sections[section_id].items()) return [] def process_actions(actions): warehouse = Warehouse() results = [] for action in actions: parts = action.split() command = parts[0] if command == \\"STORE\\": item_id = int(parts[1]) section_id = int(parts[2]) quantity = int(parts[3]) warehouse.store(item_id, section_id, quantity) elif command == \\"REMOVE\\": item_id = int(parts[1]) section_id = int(parts[2]) quantity = int(parts[3]) warehouse.remove(item_id, section_id, quantity) elif command == \\"INVENTORY\\": section_id = int(parts[1]) inventory = warehouse.inventory(section_id) results.extend(f\\"{item_id} {quantity}\\" for item_id, quantity in inventory) return results"},{"question":"A kingdom is divided into several cities connected by bidirectional roads. Each road has a travel time. You are asked to write a program to determine the shortest time required to travel between pairs of cities. If a direct connection between the cities is not possible, the program should return -1. The cities are labeled with integers from 1 to n. You are provided the travel time for each road between cities. Additionally, you are given a list of queries, where each query contains two cities, and you need to find the shortest travel time between them. Input The input consists of multiple blocks, one for each problem case. Each block starts with two integers n and m, the number of cities and the number of roads, respectively. The following m lines each contain three integers u, v, and t, meaning there is a road between city u and city v with travel time t. The next line contains a single integer q, the number of queries. Each of the following q lines contains two integers, c1 and c2, the cities for which the shortest travel time is to be determined. The end of the input is indicated by a line containing two zeros. Output For each query, output the shortest travel time between the two cities. If a direct travel path is not possible, output -1. Example Input 4 4 1 2 1 2 3 3 3 4 1 4 1 6 2 1 3 1 4 5 3 1 2 10 2 3 10 4 5 5 1 1 5 0 0 Output 4 5 -1","solution":"import heapq def dijkstra(graph, start, n): Performs Dijkstra\'s algorithm to find the shortest path from start to all other nodes. distances = {node: float(\'infinity\') for node in range(1, n+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_shortest_paths(n, roads, queries): For each query, find the shortest travel time between the cities. # Build the graph graph = {i: {} for i in range(1, n+1)} for u, v, t in roads: graph[u][v] = t graph[v][u] = t results = [] for c1, c2 in queries: distances = dijkstra(graph, c1, n) result = distances[c2] if distances[c2] != float(\'infinity\') else -1 results.append(result) return results def process_input_blocks(input_lines): index = 0 results = [] while index < len(input_lines): n, m = map(int, input_lines[index].split()) if n == 0 and m == 0: break index += 1 roads = [] for _ in range(m): u, v, t = map(int, input_lines[index].split()) roads.append((u, v, t)) index += 1 q = int(input_lines[index]) index += 1 queries = [] for _ in range(q): c1, c2 = map(int, input_lines[index].split()) queries.append((c1, c2)) index += 1 results.extend(find_shortest_paths(n, roads, queries)) return results"},{"question":"Design a class called `TextManager` that provides functionality to manage a list of texts. Implement the following methods: 1. `add_text(self, text: str)` - Adds a new text string to the list. 2. `remove_text(self, text: str)` - Removes the specified text string from the list. 3. `search_text(self, keyword: str) -> List[str]` - Returns a list of text strings that contain the given keyword. 4. `get_texts(self) -> List[str]` - Returns the current list of text strings. **Note:** - If the text to be removed does not exist in the list, it should raise a ValueError. - The `search_text` method should perform a case-insensitive search for the keyword. - You should also include a constructor `__init__` that initializes an empty list for storing texts. **Example Usage:** ```python tm = TextManager() tm.add_text(\\"Hello, world!\\") tm.add_text(\\"Python is great.\\") tm.add_text(\\"Hello, Python!\\") print(tm.get_texts()) # Output: [\\"Hello, world!\\", \\"Python is great.\\", \\"Hello, Python!\\"] print(tm.search_text(\\"hello\\")) # Output: [\\"Hello, world!\\", \\"Hello, Python!\\"] tm.remove_text(\\"Python is great.\\") print(tm.get_texts()) # Output: [\\"Hello, world!\\", \\"Hello, Python!\\"] ``` **Constraints:** 1. All text strings contain only alphabetic characters and spaces. 2. The maximum length of any text string is 100 characters. 3. The `add_text`, `remove_text`, and `search_text` methods should execute in O(n) time complexity, where n is the number of text strings.","solution":"from typing import List class TextManager: def __init__(self): self.texts = [] def add_text(self, text: str): self.texts.append(text) def remove_text(self, text: str): if text in self.texts: self.texts.remove(text) else: raise ValueError(\\"Text not found in the list\\") def search_text(self, keyword: str) -> List[str]: keyword_lower = keyword.lower() return [text for text in self.texts if keyword_lower in text.lower()] def get_texts(self) -> List[str]: return self.texts"},{"question":"Alice and Bob are board game enthusiasts, and they love to solve puzzles together. Today, Alice has created a new puzzle. She gives Bob a grid of size N x M, where each cell contains a non-negative integer. Bob\'s task is to find the maximum sum of elements he can collect if he starts from the top-left cell and moves to the bottom-right cell. Bob can only move either to the right or down at any point in time. Input: The first line contains two integers N and M representing the dimensions of the grid. The next N lines each contain M integers representing the grid. Output: Print the maximum sum of elements collected by Bob. Constraints: 1 ≤ N, M ≤ 1000 0 ≤ grid[i][j] ≤ 100 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 29","solution":"def max_path_sum(grid): Returns the maximum sum of elements collected from the top-left to bottom-right of a grid by moving right or down. N = len(grid) M = len(grid[0]) # Initialize a dp array with the same dimensions as the grid dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the dp array for the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp array for the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will contain the maximum sum return dp[N-1][M-1] def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for i in range(N): row = list(map(int, data[index:index+M])) grid.append(row) index += M return grid if __name__ == \\"__main__\\": grid = parse_input() print(max_path_sum(grid))"},{"question":"Emma loves playing with strings. She enjoys finding patterns and checking if these patterns repeat within the string. A specific pattern she likes to check is called a \\"prefix-repeated pattern\\". A string is said to have a prefix-repeated pattern if, starting from a certain length \'k\', the prefix of length \'k\' repeats itself consecutively till the end of the string. Emma has asked for your help to identify the smallest length \'k\' for which the string can be described as k-length prefix-repeated pattern. -----Input----- The input contains a single string s (1 ≤ |s| ≤ 10^6) consisting of lowercase English letters. -----Output----- Print one integer — the smallest length \'k\' for which the string can be described as k-length prefix-repeated pattern. -----Examples----- Input ababab Output 2 Input aaaa Output 1 Input abcabcabcabc Output 3 -----Note----- In the first example, the smallest prefix that can be repeated to form the string is \\"ab\\", which has length 2. In the second example, \\"a\\" is the prefix that repeats, so the length k is 1. In the third example, \\"abc\\" is the repeating prefix, so the length k is 3.","solution":"def smallest_prefix_repeated_pattern_length(s): Returns the smallest length \'k\' for which the string can be described as k-length prefix-repeated pattern. n = len(s) for k in range(1, n+1): if n % k == 0: if s[:k] * (n // k) == s: return k return n"},{"question":"Suki is organizing her bookshelf with M (1 ≤ M ≤ 1,000,000) books. She wants her bookshelf to look neat, so she decides to arrange the books in increasing order of their lengths. However, she has lost the instruction on the lengths that are shorter than or equal to the integer K (1 ≤ K ≤ 1,000). If Suki starts labeling the books with the smallest series of positive integers longer than K, what is the length of the shortest possible M-th book she will place on the shelf? Input The first line contains an integer \'q\' (1 ≤ q ≤ 15), the number of test cases. q cases follow. Each test case contains two space-separated integers on a single line: M and K Output For each test case, output a single integer which is the length of the shortest possible M-th book. Example Input: 2 5 3 7 10 Output: 9 18 Explanation For the first test case, the smallest series of integers longer than 3 starts from 4, therefore the lengths of the first 5 books could be 4, 5, 6, 7, and 8. The M-th book\'s length is 8. For the second test case, the smallest series of integers longer than 10 starts from 11, hence the lengths for the first 7 books could be 11, 12, 13, 14, 15, 16, and 17. The M-th book\'s length is 17.","solution":"def shortest_mth_book_length(q, test_cases): results = [] for case in test_cases: M, K = case # The series starts from K + 1 result = K + M results.append(result) return results"},{"question":"A delivery drone is programmed to drop packages at specified heights. Each drop height is given as an integer representing meters above ground. The drone has a battery capacity to lift packages up to a certain height limit in meters. If the package\'s drop height is more than the drone\'s lifting capacity, it can use booster packs that each add a specific number of meters to its capacity. Determine the minimum number of booster packs required for the drone to drop all packages. If the drone can already drop all the packages, return 0. Example dropHeights = [3, 2, 5, 6, 7] capacity = 5 boost = 2 The drone can lift packages to a height of up to 5 meters initially and must take 7 - 5 = 2 meters of boost to be able to drop the highest package. Since each booster pack adds 2 meters, it will need 2/2 = 1 booster pack. Function Description Complete the `minimumBoosters` function in the editor below. `minimumBoosters` has the following parameter(s): int `capacity`: the height the drone can lift naturally int `boost`: the height in meters a booster pack adds int `dropHeights[n]`: the heights at which each package needs to be dropped Returns int: the minimum number of boosters required, always 0 or more Input Format The first line contains three space-separated integers n, capacity, and boost, the number of packages, the maximum height the drone can lift naturally, and the height a booster pack adds. The second line contains n space-separated integers `dropHeights[i]` where 0 leq i < n. Constraints 1 le n le 100 1 le capacity le 100 1 le boost le 100 1 le dropHeights[i] le 100 Sample Input 0 5 5 2 3 2 5 6 7 Sample Output 0 1 Explanation 0 The drone can lift up to 5 meters initially and needs 2 additional meters (1 booster pack) to lift the package to 7 meters. Sample Input 1 4 8 3 6 5 8 6 Sample Output 1 0 Explanation 1 The drone can already lift packages to all required heights, so no booster packs are needed.","solution":"def minimumBoosters(capacity, boost, dropHeights): Returns the minimum number of booster packs required for the drone to drop all packages. Arguments: capacity -- the height the drone can lift naturally boost -- the height in meters a booster pack adds dropHeights -- the heights at which each package needs to be dropped Returns: int -- the minimum number of boosters required max_drop_height = max(dropHeights) if max_drop_height <= capacity: return 0 additional_height_needed = max_drop_height - capacity boosters_needed = (additional_height_needed + boost - 1) // boost # equivalent to ceiling division return boosters_needed"},{"question":"Given an array of integers where every element appears twice except for one. Find that single one without using extra memory. Example 1: Input: N = 3 arr = {2, 2, 1} Output: 1 Example 2: Input: N = 7 arr = {4, 1, 2, 1, 2, 4, 3} Output: 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function singleNumber() which takes the array arr[] and its size N as input parameters and returns the element that appears only once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 3 * 10^4 1 ≤ arr[i] ≤ 10^5","solution":"def singleNumber(arr, N): Returns the element that appears only once in the array. result = 0 for num in arr: result ^= num return result"},{"question":"Given a string `pattern` and a string `str`, find if `str` follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `str`. __Example__ * For `pattern = \\"abba\\"` and `str = \\"dog cat cat dog\\"`, the output should be `followsPattern(pattern, str) = true`. * For `pattern = \\"abba\\"` and `str = \\"dog cat cat fish\\"`, the output should be `followsPattern(pattern, str) = false`. * For `pattern = \\"aaaa\\"` and `str = \\"dog cat cat dog\\"`, the output should be `followsPattern(pattern, str) = false`. * For `pattern = \\"abba\\"` and `str = \\"dog dog dog dog\\"`, the output should be `followsPattern(pattern, str) = false`. __Input/Output__ * [input] string pattern A string containing only lowercase letters. Constraints: `1 ≤ pattern.length ≤ 300`. * [input] string str A string containing spaces and lowercase letters. Constraints: `1 ≤ str.length ≤ 3000`. * [output] boolean `true` if `str` follows `pattern`; `false` if it does not.","solution":"def followsPattern(pattern, str): Determines if the given string \'str\' follows the same pattern as \'pattern\'. words = str.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for p, w in zip(pattern, words): if p in char_to_word: if char_to_word[p] != w: return False else: char_to_word[p] = w if w in word_to_char: if word_to_char[w] != p: return False else: word_to_char[w] = p return True"},{"question":"Consider an undirected graph where each node has a unique identifier in the range from 1 to n. This graph may consist of one or multiple connected components. A connected component is a subgraph in which there exists a path between any pair of nodes within it, and no node in the subgraph is connected to a node outside of it. You are given a graph as input and your task is to determine the size of the largest connected component within the graph. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) where n is the number of nodes and m is the number of edges. The next m lines represent edges between nodes. Each line contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is an edge between nodes u and v. -----Output----- Print the size of the largest connected component. -----Examples----- Input 5 3 1 2 1 3 4 5 Output 3 Input 6 4 1 2 2 3 4 5 5 6 Output 3 Input 4 0 Output 1","solution":"def largest_connected_component(n, m, edges): from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(node): queue = deque([node]) visited.add(node) size = 1 while queue: u = queue.popleft() for v in graph[u]: if v not in visited: visited.add(v) queue.append(v) size += 1 return size visited = set() largest_size = 0 for node in range(1, n + 1): if node not in visited: component_size = bfs(node) largest_size = max(largest_size, component_size) return largest_size # Example Usage edges = [(1, 2), (1, 3), (4, 5)] print(largest_connected_component(5, 3, edges)) # Output: 3"},{"question":"Write a function `largest_prime_factor(n)` that takes an integer `n` and returns the largest prime factor of `n`. **Definition:** A prime factor is a factor that is a prime number. For example, the prime factors of `15` are `3` and `5`, and the largest prime factor of `15` is `5`. **Constraints:** - `n` is an integer, `2 <= n <= 10^9`. - You may assume that `n` has at least one prime factor. **Examples:** ```python largest_prime_factor(10) # Output: 5 largest_prime_factor(33) # Output: 11 largest_prime_factor(44) # Output: 11 largest_prime_factor(97) # Output: 97 ```","solution":"def largest_prime_factor(n): Returns the largest prime factor of n. def smallest_prime_factor(n): Helper function to return the smallest prime factor of n. if n % 2 == 0: return 2 factor = 3 while factor * factor <= n: if n % factor == 0: return factor factor += 2 return n largest_factor = -1 while n > 1: spf = smallest_prime_factor(n) largest_factor = spf n //= spf return largest_factor"},{"question":"Given a list of integers, your task is to return the product of all the elements in the list. Example 1: Input: lst = [1, 2, 3, 4] Output: 24 Explanation: The product of 1, 2, 3, and 4 is 24. Example 2: Input: lst = [5, 6, 7] Output: 210 Explanation: The product of 5, 6, and 7 is 210. Your Task: You don\'t need to read input or print anything. Your task is to complete the function productOfList() which takes a list of integers and returns the product of all the elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ lst.length ≤ 10^5 -10^3 ≤ lst[i] ≤ 10^3","solution":"def productOfList(lst): Returns the product of all elements in the list. product = 1 for num in lst: product *= num return product"},{"question":"Problem Statement You are provided with a parking garage system where cars can enter and leave the garage. The garage is represented as a 2-dimensional parking lot with rows and columns. The parking lot will have blocked cells where a car cannot be parked. Your task is to manage the parking of cars such that you maximize the number of cars parked in the lot, given specific parking requests. Each parking request will specify the row and column where a car wants to park. If the cell is blocked or already occupied, the request should be rejected. Input The input consists of multiple test cases. The format for each test case is as follows: n m k b_1x b_1y ... b_kx b_ky p_1x p_1y ... p_tx p_ty The first line contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100), and k (0 ≤ k ≤ n*m), where n is the number of rows, m is the number of columns, and k is the number of blocked cells. The next k lines contain two integers each b_ix and b_iy (1 ≤ b_ix ≤ n, 1 ≤ b_iy ≤ m) representing the coordinates of blocked cells. The subsequent lines will contain parking requests in the format p_jx and p_jy (1 ≤ p_jx ≤ n, 1 ≤ p_jy ≤ m). The input terminates when n=m=k=0. Your program must not output anything for this case. Output For each dataset, print the total number of successfully parked cars. Example Input 3 3 2 1 1 3 3 2 2 3 1 2 3 2 2 1 1 2 1 2 1 2 2 3 3 0 0 0 0 0 0 Output 3 0","solution":"def parking_garage(n, m, k, blocked_cells, parking_requests): # Initialize the parking lot with all cells as available parking_lot = [[True] * m for _ in range(n)] # Mark the blocked cells for (bx, by) in blocked_cells: parking_lot[bx-1][by-1] = False # Try to park the cars as per the requests parked_cars = 0 for (px, py) in parking_requests: if parking_lot[px-1][py-1]: # Check if cell is neither blocked nor occupied parking_lot[px-1][py-1] = False # Park the car parked_cars += 1 return parked_cars def process_parking_lot_requests(test_cases): results = [] for case in test_cases: n, m, k = case[\\"dimensions\\"] blocked_cells = case[\\"blocked_cells\\"] parking_requests = case[\\"parking_requests\\"] results.append(parking_garage(n, m, k, blocked_cells, parking_requests)) return results"},{"question":"The village of Westeros is implementing a new postal service. Each day, the service needs to deliver packages to various houses along a single straight road. There are h houses on this road, and each house i has a certain number of packages ( p_i ) that need to be delivered. Due to limited delivery capacity, the postal service has devised a constraint: they will only deliver packages to at most l houses per day. Furthermore, the postal service wants to minimize the maximum number of houses that are not served on any given day. As the appointed planner, your task is to calculate the minimum number of days required to ensure all houses receive their packages under the given constraints. ---Input--- The first line of input contains two integers h and l (1 ≤ h, l ≤ 1000) — the number of houses and the maximum number of houses that can receive packages per day. The next line contains h space-separated integers ( p_1, p_2, ldots, p_h ) (1 ≤ ( p_i ) ≤ 1000) — the number of packages for each house. ---Output--- Output a single integer — the minimum number of days required to deliver packages to all houses under the given constraints. ---Examples--- Input 5 2 3 1 4 1 5 Output 3 Input 6 3 1 2 3 4 5 6 Output 2","solution":"def min_days_to_deliver_packages(h, l, packages): Calculate the minimum number of days required to deliver packages to all houses under the given constraints. Parameters: - h: int, number of houses - l: int, maximum number of houses that can be served per day - packages: List[int], number of packages for each house Returns: - int, minimum number of days required to deliver packages to all houses days = (h + l - 1) // l # Compute the ceiling of h / l return days"},{"question":"A large software company is organizing a coding competition for its employees. As part of the competition, they need to evaluate the performance of each employee and assign scores based on their submissions. Each employee\'s score is recorded in a list, and the company wants to reward the top performing employees. Given the list of scores, the company wants to calculate the sum of the k highest scores, where k is a given integer. Write a program that takes in the number of employees n, the list of scores, and the integer k, and then calculates the sum of the k highest scores. Input The first input line contains an integer n (1 ≤ n ≤ 10000) — the number of employees. The second line contains a sequence of integers s1, s2, ..., sn, representing the scores of the employees (-1000 ≤ si ≤ 1000). These numbers are separated by spaces. The third line contains an integer k (1 ≤ k ≤ n) — the number of top scores to sum. Output Print the required sum of the k highest scores. Examples Input 5 10 20 30 40 50 3 Output 120 Input 6 5 4 3 2 1 6 4 Output 18 Input 4 -1 -2 -3 -4 2 Output -3 Note In the first sample, the top 3 scores are 50, 40, and 30. Their sum is 120.","solution":"def sum_of_top_k_scores(n, scores, k): Returns the sum of the k highest scores from the list of scores. # Sort the list in reverse order to get the top scores sorted_scores = sorted(scores, reverse=True) # Sum the top k scores return sum(sorted_scores[:k])"},{"question":"Your team is developing a new feature for a social media application that detects inappropriate content. Part of this feature involves processing a stream of comments and assigning each a \\"score\\" based on the frequency of certain flagged words. The higher the frequency of flagged words, the higher the score. Given a list of flagged words and a stream of comments, write a function to calculate the score for each comment. The score is determined by the number of occurrences of any flagged word in the comment. If a flagged word appears more than once in a comment, each occurrence should be counted. ----- Input ----- - The first line contains an integer `W`, the number of flagged words. - The second line contains `W` flagged words, separated by a space. - The third line contains an integer `N`, the number of comments. - The next `N` lines each contain a single comment. ----- Output ----- - Print `N` lines, each containing the score of the corresponding comment. ----- Constraints ----- - `1 ≤ W ≤ 100` - `1 ≤ N ≤ 1000` - Each flagged word and comment contains only lowercase English letters and spaces. - Each flagged word\'s length is at most 10 characters. - Each comment\'s length is at most 100 characters. ----- Example Input ----- 3 bad inappropriate spam 4 this is a bad comment no issues here this has inappropriate content and is full of spam just a regular comment ----- Example Output ----- 1 0 3 0 Explanation: - The first comment contains the word \\"bad\\" once, so its score is 1. - The second comment doesn\'t contain any flagged words, so its score is 0. - The third comment contains the words \\"inappropriate\\" once and \\"spam\\" twice, so its score is 3. - The fourth comment doesn\'t contain any flagged words, so its score is 0.","solution":"def calculate_scores(flagged_words, comments): Given a list of flagged words and a list of comments, calculate the score for each comment. Parameters: flagged_words (list): A list of flagged words. comments (list): A list of comments. Returns: list: A list of scores, one for each comment. scores = [] for comment in comments: score = 0 for word in flagged_words: score += comment.split().count(word) scores.append(score) return scores"},{"question":"You are given an array of n integers. Your task is to handle q queries which are of the following three types: * 1 l r x — add x to each element in the segment from l to r (inclusive). * 2 l r x — multiply each element in the segment from l to r (inclusive) by x. * 3 l r — find the sum of elements in the segment from l to r (inclusive). Write a program to perform these queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers — elements of the array (1 ≤ ai ≤ 10000). The next q lines each contain one query in the format described above. For queries of type 1 or 2, 1 ≤ l ≤ r ≤ n and 1 ≤ x ≤ 10000. For queries of type 3, 1 ≤ l ≤ r ≤ n. Output For each query of type 3 print the answer to that query — the sum of elements in the corresponding segment. Examples Input 5 4 1 2 3 4 5 1 1 3 2 3 1 3 2 2 5 2 3 3 5 Output 12 30","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data[:] self.tree = [0] * (2 * self.n) self.build_tree() def build_tree(self): for i in range(self.n): self.tree[self.n + i] = self.data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update_range_add(self, l, r, x): for i in range(l, r + 1): self.update(i, self.data[i-1] + x) self.data[i-1] += x def update_range_multiply(self, l, r, x): for i in range(l, r + 1): self.update(i, self.data[i-1] * x) self.data[i-1] *= x def update(self, idx, value): pos = idx + self.n - 1 self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def sum_range(self, l, r): l += self.n - 1 r += self.n - 1 result = 0 while l <= r: if (l % 2) == 1: result += self.tree[l] l += 1 if (r % 2) == 0: result += self.tree[r] r -= 1 l //= 2 r //= 2 return result def process_queries(n, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: _, l, r, x = query seg_tree.update_range_add(l, r, x) elif query[0] == 2: _, l, r, x = query seg_tree.update_range_multiply(l, r, x) elif query[0] == 3: _, l, r = query results.append(seg_tree.sum_range(l, r)) return results"},{"question":"Write a function `median_of_three(a, b, c)` that takes three numerical values and returns the median of the three. The median is the number that would appear in the middle if you sorted the input values. ```python def median_of_three(a, b, c): return sorted([a, b, c])[1] # Test Cases print(median_of_three(1, 2, 3)) # => 2 print(median_of_three(9, 3, 5)) # => 5 print(median_of_three(-1, -2, -3)) # => -2 print(median_of_three(10.5, 7.8, 9.2)) # => 9.2 print(median_of_three(3, 1, 2)) # => 2 ```","solution":"def median_of_three(a, b, c): Returns the median of the three numerical values. return sorted([a, b, c])[1]"},{"question":"You are given a square matrix of integers. The task is to find the sum of the elements on its primary diagonal and the sum of the elements on its secondary diagonal. The primary diagonal of a square matrix runs from the top left to the bottom right, and the secondary diagonal runs from the top right to the bottom left. Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: Primary Diagonal Sum: 15 Secondary Diagonal Sum: 15 Example 2: Input: matrix = [ [10, 20], [30, 40] ] Output: Primary Diagonal Sum: 50 Secondary Diagonal Sum: 50 Your Task: You don\'t need to read or write anything. Your task is to complete the function `diagonalSums(matrix)` which takes a square matrix as input parameter and returns a tuple with two integers representing the sums of the primary and secondary diagonals, respectively. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= n <= 500 -1000 <= matrix[i][j] <= 1000","solution":"def diagonalSums(matrix): Compute the sums of the primary and secondary diagonals of a square matrix. Args: matrix (list of list of int): The input square matrix. Returns: tuple: A tuple containing two integers: the sum of the primary diagonal and the sum of the secondary diagonal. primary_diagonal_sum = 0 secondary_diagonal_sum = 0 n = len(matrix) for i in range(n): primary_diagonal_sum += matrix[i][i] # Adding elements from primary diagonal secondary_diagonal_sum += matrix[i][n - 1 - i] # Adding elements from secondary diagonal return primary_diagonal_sum, secondary_diagonal_sum"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You need to create a new string t by reordering the characters in s such that no two adjacent characters in t are the same. The length of t should be at least k. If multiple valid strings t exist, you can print any of them. If it\'s not possible to create such a string, print \\"No valid string\\". -----Input----- The input consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 1000). The second line contains the integer k (1 ≤ k ≤ 1000). -----Output----- Output a single line containing the resulting string t if it is possible, otherwise print \\"No valid string\\". -----Examples----- Input aaabbb 6 Output ababab Input aaaa 3 Output No valid string Input abc 2 Output ab -----Note----- In the first example, one possible string t is \\"ababab\\". All adjacent characters are different, and its length is 6, which matches k. In the second example, it’s not possible to form a valid string. All characters are the same, so you cannot place them such that no two consecutive characters are the same. In the third example, a possible string t is \\"ab\\". All adjacent characters are different, and its length is 2, which satisfies k.","solution":"def reorganize_string(s, k): from collections import Counter import heapq # Count the frequency of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) result = [] # Use to keep track of the previously used character prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back to the heap if its count is still greater than 0 if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append the current character to the result and update its frequency result.append(char) prev_freq, prev_char = freq + 1, char # Construct the final string and check if it meets the requirement final_string = \'\'.join(result) if len(final_string) >= k and all(final_string[i] != final_string[i + 1] for i in range(len(final_string) - 1)): return final_string[:k] else: return \\"No valid string\\""},{"question":"You\'re working on text processing and have come across a special type of word transformation. The transformation involves rotating each letter in the word by a specified number of places in the alphabet. Create a function `rotate_word` that takes in two parameters: a string `word` and an integer `shift`. The function should return a new string where each letter in the `word` is rotated by the `shift` value. - If the resulting character exceeds \'z\', it should wrap around to the start of the alphabet. - The transformation should be case-sensitive, meaning that uppercase letters should remain uppercase and lowercase letters should remain lowercase. - Characters that are not alphabetic should remain unchanged. For example: ```python rotate_word(\\"abcXYZ\\", 3), \\"defABC\\" # \'a\' rotates to \'d\', \'b\' to \'e\', \'c\' to \'f\', \'X\' to \'A\', \'Y\' to \'B\', \'Z\' to \'C\' rotate_word(\\"Hello, World!\\", 5), \\"Mjqqt, Btwqi!\\" # \'H\' rotates to \'M\', \'e\' to \'j\', \'l\' to \'q\' etc. rotate_word(\\"rotate\\", 13), \\"ebgngr\\" # \'r\' rotates to \'e\', \'o\' to \'b\', \'t\' to \'g\', etc. ```","solution":"def rotate_word(word, shift): Rotates each letter in the word by the specified shift value. Non-alphabatic characters remain unchanged. Parameters: word (str): The word to be transformed. shift (int): The number of places to shift each letter. Returns: str: The transformed word with rotated letters. result = [] for character in word: if character.isalpha(): if character.islower(): start = ord(\'a\') else: start = ord(\'A\') rotated_char = chr(start + (ord(character) - start + shift) % 26) result.append(rotated_char) else: result.append(character) return \'\'.join(result)"},{"question":"Given a list of integers, determine the number of distinct (unique) elements in the list. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the number of elements in the list. - The second line of each test case contains N integers separated by spaces — the elements of the list. ------ Output Format ------ For each test case, output a single integer — the number of distinct elements in the list. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ a_i ≤ 1000 for each element a_i in the list ----- Sample Input 1 ------ 2 5 1 2 2 3 4 6 4 4 4 4 4 4 ----- Sample Output 1 ------ 4 1 ----- Explanation 1 ------ Test Case 1: The list has 4 distinct elements — 1, 2, 3, and 4. Test Case 2: The list has 1 distinct element — 4.","solution":"def count_distinct_numbers(test_cases): Returns the number of distinct elements for each test case. :param test_cases: List of tuples where each tuple consists of (N, elements) :return: List of integers representing the count of distinct elements in each test case distinct_counts = [] for N, elements in test_cases: distinct_counts.append(len(set(elements))) return distinct_counts def process_input(input_lines): Converts input lines to a list of test cases. :param input_lines: List of strings representing the input lines :return: List of test cases T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) elements = list(map(int, input_lines[line_index + 1].split())) test_cases.append((N, elements)) line_index += 2 return test_cases"},{"question":"A wizard finds a mysterious cave! To enter the cave, the wizard needs to solve a puzzle lock. The puzzle lock is a grid of size `n x m` filled with numbers. The lock can be opened if there exists a path from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is non-negative. The path can only move right or down at each step. Write a function that determines if such a path exists. -----Input----- The first line contains two integers n and m, separated by a space, denoting the number of rows and columns in the grid. Each of the next n lines contains m integers separated by a space, representing the grid of numbers. -----Output----- Output \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner with a non-negative sum, otherwise output \\"NO\\". -----Examples----- Input 1: 3 3 1 -2 3 2 -5 7 -3 4 -1 Output 1: YES Input 2: 2 2 -1 -2 -3 -4 Output 2: NO -----Note----- For the first sample, the path (1 -> -2 -> 2 -> -5 -> 7) has a sum of 3, which is non-negative. For the second sample, all possible paths have negative sums, so the output is NO.","solution":"def can_unlock_cave(n, m, grid): Determines if there exists a path from the top-left to the bottom-right of the grid such that the sum of the numbers along the path is non-negative. Params: n (int): Number of rows in the grid m (int): Number of columns in the grid grid (list of list of int): The grid of numbers Returns: str: \\"YES\\" if such a path exists, otherwise \\"NO\\" # Use a dynamic programming approach to solve the problem # Initialize a memoization table with None or -inf dp = [[-float(\'inf\')] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j]) return \\"YES\\" if dp[-1][-1] >= 0 else \\"NO\\""},{"question":"You are given a sequence of `n` positive integers representing the number of hours `n` employees worked over a week. Each employee has an hourly wage which can also be positive integers array of size `n`. You need to calculate the total salary that should be paid to the employees. The salary for each employee is calculated as the product of hours worked and their hourly wage. Write a function `calculate_salaries` that takes two lists `hours` and `wages` of the same length, representing the hours worked and hourly wages respectively. The function should return the total salary to be paid to all employees. -----Input----- The input consists of two lists of integers: - List `hours`, where `hours[i]` represents the number of hours worked by the `i-th` employee. - List `wages`, where `wages[i]` represents the hourly wage of the `i-th` employee. -----Output----- The function should return the total salary as an integer. -----Example----- ```python def calculate_salaries(hours, wages): pass # Example # Input hours = [10, 20, 30] wages = [15, 25, 30] # Output print(calculate_salaries(hours, wages)) # Output 1450 ``` -----Explanation----- For the given input: - Employee 1: 10 hours * 15 wage/hour = 150 - Employee 2: 20 hours * 25 wage/hour = 500 - Employee 3: 30 hours * 30 wage/hour = 900 Total salary = 150 + 500 + 900 = 1550","solution":"def calculate_salaries(hours, wages): Returns the total salary that should be paid to all employees. Parameters: hours (list of int): A list where hours[i] represents the number of hours worked by the i-th employee. wages (list of int): A list where wages[i] represents the hourly wage of the i-th employee. Returns: int: The total salary to be paid to all employees. total_salary = 0 for h, w in zip(hours, wages): total_salary += h * w return total_salary"},{"question":"You are given a grid of size N x M, initially filled with zeros. You need to perform a series of operations on the grid. An operation is defined by four integers x1, y1, x2, and y2, which represent the top-left and bottom-right corners of a subgrid. For each operation, you need to increment the values in the specified subgrid by 1. After performing all operations, you need to determine the number of cells in the grid that contain an odd value. Input: - The first line contains two integers N and M, the dimensions of the grid. - The second line contains an integer Q, the number of operations. - The next Q lines each contain four integers x1, y1, x2, and y2, specifying the top-left and bottom-right corners of a subgrid. Output: - A single integer representing the number of cells with odd values in the final grid. Example: Input: 3 3 2 1 1 2 2 1 1 3 3 Output: 5 Explanation: - Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 ``` - After the first operation (1,1) to (2,2), the grid changes to: ``` 1 1 0 1 1 0 0 0 0 ``` - After the second operation (1,1) to (3,3), the grid changes to: ``` 2 2 1 2 2 1 1 1 1 ``` - The cells with odd values are: (3,1), (3,2), (3,3), (1,3), and (2,3) — a total of 5 cells.","solution":"def count_odd_cells(N, M, operations): grid = [[0] * M for _ in range(N)] for x1, y1, x2, y2 in operations: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 odd_count = 0 for row in grid: for cell in row: if cell % 2 != 0: odd_count += 1 return odd_count"},{"question":"Alice and Bob love playing games. One day, they came across a game involving binary strings and simple operations. The game\'s objective is to make the string alternate between \'0\' and \'1\'. For instance, \\"010101\\" or \\"101010\\" are valid alternating strings. Alice and Bob can perform operations to transform the given binary string. Each operation consists of flipping a bit (changing \'0\' to \'1\' or \'1\' to \'0\'). They want to find out the minimum number of operations required to convert a given binary string into an alternating binary string. Write a function `min_operations_to_alternate` that takes a binary string `s` and returns the minimum number of bit flips required to make the string alternate. -----Input----- - A single binary string `s` consisting of characters \'0\' and \'1\'. - The length of `s` will be between 1 and 10^5. -----Output----- - An integer representing the minimum number of bit flips needed to make the binary string alternating. -----Example----- Sample Input: \\"010101\\" Sample Output: 0 Sample Input: \\"1001\\" Sample Output: 2 Sample Input: \\"11111\\" Sample Output: 2 Note: In the second example, transforming \\"1001\\" to \\"0101\\" or \\"1010\\" involves 2 flips. In the third example, transforming \\"11111\\" to \\"01010\\" or \\"10101\\" involves 2 flips.","solution":"def min_operations_to_alternate(s): Returns the minimum number of bit flips needed to make the binary string s alternate between \'0\' and \'1\'. n = len(s) pattern1 = \'01\' * (n // 2) + \'0\' * (n % 2) pattern2 = \'10\' * (n // 2) + \'1\' * (n % 2) flips_pattern1 = sum(1 for i in range(n) if s[i] != pattern1[i]) flips_pattern2 = sum(1 for i in range(n) if s[i] != pattern2[i]) return min(flips_pattern1, flips_pattern2)"},{"question":"Alex is a fan of anagrams and has challenged you to create unique sequences. He wants you to generate a string of length n, using only the characters \'x\', \'y\', and \'z\', such that no two consecutive characters are the same. Additionally, the number of \'z\' characters should be minimized in the generated string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the length of the string. -----Output----- Print a string that satisfies all the constraints. If there are multiple valid answers, print any of them. -----Examples----- Input 3 Output xyx Input 4 Output xyxy -----Note----- An anagram is a rearrangement of the characters in a string where the length of the string remains unchanged.","solution":"def generate_string(n): Generates a string of length n using characters \'x\', \'y\', and \'z\' such that no two consecutive characters are the same and the number of \'z\' characters is minimized. if n == 1: return \'x\' base_pattern = \\"xy\\" result = [] # Generate the base repeating pattern \\"xy\\" as much as needed for length n for i in range(n): if i % 2 == 0: result.append(\'x\') else: result.append(\'y\') return \'\'.join(result)"},{"question":"You are given a positive integer N. Find the smallest non-negative integer x such that the product of the digits of x results in N. If there is no such x, return -1. Constraints: * 1 leq N leq 100000 Input: The input is given from Standard Input in the following format: N Output: Print the smallest non-negative integer x such that the product of its digits is N. If no such x exists, print -1. Examples: Input: 36 Output: 49 Input: 10 Output: 25 Input: 1 Output: 1 Input: 0 Output: 10 Input: 17 Output: -1","solution":"def find_smallest_x(N): Finds the smallest non-negative integer x such that the product of the digits of x is N. If there is no such x, returns -1. if N == 0: return 10 # The smallest number whose digits product is 0 is 10 (1*0 = 0) if N == 1: return 1 factors = [] for i in range(9, 1, -1): while N % i == 0: factors.append(i) N //= i if N != 1: return -1 # If N is not 1, then it means it cannot be factored completely by [2-9] # Convert factors to the smallest number by sorting the digits factors.sort() result = int(\'\'.join(map(str, factors))) return result"},{"question":"Given a list of integers, find the length of the longest subsequence such that all elements of the subsequence are in non-decreasing order. Input For each of the t test cases, Given a list of integers, find the length of the longest non-decreasing subsequence. Output For each test case, print the length of the longest non-decreasing subsequence. Constraints 1 <= length of list <= 1000 1 <= element of list <= 10^4 1 <= t <= 50 Example Input: 2 5 5 1 3 2 4 6 2 2 2 2 2 2 Output: 3 6 In the first test case, the longest non-decreasing subsequence is [1, 3, 4] or [1, 2, 4], or even [2, 3, 4], all of which have length 3. In the second test case, the list itself is a non-decreasing subsequence with length 6.","solution":"def longest_non_decreasing_subsequence_length(lst): Given a list of integers, find the length of the longest non-decreasing subsequence. if not lst: return 0 n = len(lst) dp = [1] * n for i in range(1, n): for j in range(i): if lst[i] >= lst[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): results = [] for lst in test_cases: results.append(longest_non_decreasing_subsequence_length(lst)) return results"},{"question":"The Data Science department at your University has developed a new algorithm for analyzing large datasets. However, they found a part of the algorithm which slows down significantly for certain inputs and have asked you for help to optimize it. In this task, you are given an array of integers and your goal is to find the length of the longest subsequence of this array which is also a palindrome. Remember, a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. -----Input----- Each input will consist of a single test case. The input begins with a line containing an integer n (1 leq n leq 1000), which represents the number of elements in the array. The next line contains n space-separated integers a_i (1 leq a_i leq 1000). -----Output----- Output a single integer representing the length of the longest palindromic subsequence in the given array. -----Examples----- Sample Input: 7 3 1 4 1 5 9 2 Sample Output: 3 Sample Input: 5 1 2 3 2 1 Sample Output: 5","solution":"def longest_palindromic_subsequence(arr): Returns the length of the longest palindromic subsequence in the given array. :param arr: List[int] - Array of integers :return: int - Length of the longest palindromic subsequence n = len(arr) if n == 0: return 0 # Create a table to store the results of subproblems dp = [[0] * n for _ in range(n)] # Subsequences of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Fill the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if arr[i] == arr[j] and cl == 2: dp[i][j] = 2 elif arr[i] == arr[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The result is in the top right cell of the table return dp[0][n - 1] # Example usage: # n = 7 # arr = [3, 1, 4, 1, 5, 9, 2] # print(longest_palindromic_subsequence(arr)) # Output: 3"},{"question":"# Task Implement a function to find the unique elements in an array of integers and return them in sorted order. # Example For inputArray = [4, 5, 6, 4, 3, 5, 7], the output should be [3, 4, 5, 6, 7]. For inputArray = [9, 1, 1, 2, 8, 7, 9], the output should be [1, 2, 7, 8, 9]. # Input/Output - `[input]` array of integers `inputArray`/`input_array` - `[output]` array of integers","solution":"def find_unique_sorted(input_array): Returns a sorted list of unique elements from the input array. unique_elements = set(input_array) sorted_unique_elements = sorted(unique_elements) return sorted_unique_elements"},{"question":"A group of friends are playing a board game that involves a grid. The grid is represented as a 2D array where each cell can be either 0 or 1. A cell containing 1 means it has an obstacle, and a cell containing 0 means it is free. The friends want to find the largest square (whose sides are parallel to the grid) that can be formed without any obstacles in it. We consider the side of the square as the largest number of consecutive free cells along rows and columns. Write a function `largest_square(matrix)` that takes a 2-dimensional list `matrix` of dimensions `m x n` (1 ≤ m, n ≤ 1000, each element is either 0 or 1) and returns the area of the largest found square without any obstacles. Input The input consists of a single integer `m` (the number of rows in the grid), followed by a single integer `n` (the number of columns in the grid), and then `m` subsequent lines each containing `n` space-separated integers indicating the values within the grid (either 0 or 1). Output The output consists of a single integer — the area of the largest square found without any obstacles. Examples Input 4 5 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 Output 4 Input 3 3 1 1 1 1 0 1 1 1 1 Output 1 Note In the first sample, the largest possible square without obstacles has a side length of 2 (formed by cells (2, 4), (2, 5), (3, 4), (3, 5)). Therefore, the area is 2 x 2 = 4. In the second sample, despite most cells containing obstacles, the largest square without obstacles is one single cell (at position (2, 2)), so the area is 1 x 1 = 1.","solution":"def largest_square(matrix): Finds the area of the largest square without obstacles in a given 2D grid. Parameters: matrix (list of list of integers): 2D grid of dimensions m x n containing 0s and 1s Returns: int: The area of the largest square found without any obstacles if not matrix or not matrix[0]: return 0 m = len(matrix) n = len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 # First row or first column can only form squares of side 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"A group of friends is playing a fun game called \\"Circle Chase\\". In this game, they stand in a circle and chase each other to tag them. The main rule of the game is that friend i can tag friend i+1 (1-based index). If friend n tags friend 1, the game ends with everyone having been tagged once. You are given a list of n integers representing the order in which each friend will try to tag the next one. Your task is to determine the order of friends being tagged. -----Input----- The first line of the input contains integer n (2 ≤ n ≤ 100), where n is the number of friends. The second line contains n positive integers representing the initial positions of the friends in the circle. -----Output----- Print n space-separated integers indicating the order of friends being tagged. -----Example----- Input 4 3 1 4 2 Output 1 2 3 4","solution":"def circle_chase_order(n, positions): Returns the order of friends being tagged in the circle chase game. Parameters: n (int): Number of friends positions (list of int): Initial positions of the friends Returns: list of int: Order of friends being tagged tagged_order = [0] * n for i in range(n): tagged_order[positions[i] - 1] = i + 1 return tagged_order"},{"question":"There is a conveyor belt weaving machine in a factory that can only weave two types of patterns, represented by `A` and `B`. The machine can take a string of weaving instructions to produce a sequence of patterns. The machine follows a set of rules to weave the patterns and you need to determine if a given pattern string can be produced by the machine. The rules are as follows: 1. The machine starts with an empty sequence. 2. It can append an `A` to the sequence if the length of the sequence is even. 3. It can append a `B` to the sequence if the length of the sequence is odd. 4. The sequence must alternate between `A` and `B`. Your task is to write a program that verifies if a given weaving instruction string can be produced by the machine. Input The input consists of a single string `S` containing only the characters `A` and `B`. Output Your program should print `YES` if the string can be produced by the machine, and `NO` otherwise. Examples Input ``` ABAB ``` Output ``` YES ``` Input ``` ABBA ``` Output ``` NO ``` Input ``` ABA ``` Output ``` YES ``` Input ``` AA ``` Output ``` NO ``` # Explanation In the first example, the string `ABAB` can be produced by the machine by following the rules: 1. Start with empty sequence. 2. Append `A` (even length: 0). 3. Append `B` (odd length: 1). 4. Append `A` (even length: 2). 5. Append `B` (odd length: 3). In the second example, the string `ABBA` cannot be produced because it fails to follow the rule that `A` and `B` must alternate. In the third example, the string `ABA` can be produced following similar steps as the first example. In the fourth example, the string `AA` cannot be produced due to consecutive `A`s causing a failure in alternation.","solution":"def can_produce_pattern(S): Determines if the given string S can be produced by the weaving machine. Parameters: S (str): The input string containing \'A\' and \'B\' characters. Returns: str: \'YES\' if the string can be produced by the machine, \'NO\' otherwise. for i in range(len(S)): if (i % 2 == 0 and S[i] != \'A\') or (i % 2 == 1 and S[i] != \'B\'): return \'NO\' return \'YES\'"},{"question":"Implement a function to calculate the largest perfect square that is less than or equal to a given integer. A perfect square is an integer that is the square of another integer, i.e., it can be written in the form k^2 where k is an integer. For example, the perfect squares less than or equal to 20 are 1, 4, 9, and 16. Thus, the largest perfect square less than or equal to 20 is 16. Your task is to write a program that reads in a sequence of integers greater than or equal to 1, and for each integer, outputs the largest perfect square that is less than or equal to that integer. Input The input is a sequence of lines, each containing one positive integer. The sequence is terminated by a line containing a zero. You may assume that all of the input integers are between 1 and 10,000. Output For each integer in the input sequence (excluding the terminating zero), output the largest perfect square that is less than or equal to the integer, on a separate line. Example Input 25 10 3 0 Output 25 9 1","solution":"import math def largest_perfect_square(n): Returns the largest perfect square less than or equal to n. if n < 1: return None return int(math.floor(math.sqrt(n))) ** 2 def process_input(sequence): Processes the sequence of integers and returns the largest perfect square for each. results = [] for num in sequence: if num == 0: break results.append(largest_perfect_square(num)) return results"},{"question":"Given two non-empty arrays of integers nums1 and nums2, find an array of their intersection. Each element in the result must appear as many times as it shows in both arrays, and you may return the result in any order. -----Notes----- - The intersection of two arrays includes duplicate elements as long as the duplicate element appears in both arrays the same number of times. - Elements in the arrays are not necessarily distinct. -----Constraints----- - 1 leq nums1.length, nums2.length leq 10^4 - -10^5 leq nums1[i], nums2[i] leq 10^5 -----Input----- Input is given from Standard Input in the following format: nums1 (space-separated integers) nums2 (space-separated integers) -----Output----- Print the array of their intersection in any order. -----Sample Input----- 1 2 2 1 2 2 -----Sample Output----- 2 2 Explanation: The intersection of nums1 and nums2 is [2, 2] because 2 appears twice in both arrays. -----Additional Sample Input----- 4 9 5 9 4 9 8 4 -----Additional Sample Output----- 9 4 Explanation: The intersection of nums1 and nums2 could be [9, 4] or [4, 9]. Note: The output should have the elements in any order, and the number of occurrences for each element should be based on the minimum occurrences in both arrays.","solution":"from collections import Counter def intersect(nums1, nums2): Find the intersection of two arrays where each element appears as many times as it shows in both arrays. :param nums1: List[int] :param nums2: List[int] :return: List[int] count1 = Counter(nums1) count2 = Counter(nums2) result = [] for num in count1: if num in count2: min_count = min(count1[num], count2[num]) result.extend([num] * min_count) return result"},{"question":"Implement a class `TwoSum` that supports the following operations in O(1) time complexity – `add` and `find`. - `add(number)`: Add the number to an internal data structure. - `find(value)`: Find if there exists any pair of numbers which sum is equal to the value. You are required to implement the `TwoSum` data structure and methods. Example: ```python # Initialize your data structure here. twoSum = TwoSum() # Add some numbers. twoSum.add(1) twoSum.add(3) twoSum.add(5) # Find if there exists any pair that adds up to 4. twoSum.find(4) # Returns true since 1 + 3 = 4. # Find if there exists any pair that adds up to 7. twoSum.find(7) # Returns false since there is no pair which adds up to 7. ``` Notes: 1. The `add` method will be called multiple times before the `find` method is called. 2. The `find` method may be called multiple times.","solution":"class TwoSum: def __init__(self): Initialize an empty dictionary to store numbers and their counts. self.num_counts = {} def add(self, number: int) -> None: Add the number to the internal data structure. if number in self.num_counts: self.num_counts[number] += 1 else: self.num_counts[number] = 1 def find(self, value: int) -> bool: Find if there exists any pair of numbers which sum to the specified value. for num in self.num_counts: complement = value - num if complement == num: if self.num_counts[num] > 1: return True elif complement in self.num_counts: return True return False"},{"question":"Alice is playing a card game. She has a deck of cards, where each card has a number written on it. She can draw cards from the deck, but the order in which the cards are drawn is determined by the sequence S given as a string, where S[i] denotes the number on the i^{th} card (0-indexed). She can select a group of cards with the following rules: 1. The group of cards must be contiguous. 2. The sum of the numbers on the selected cards must be even. Alice wants to maximize the number of cards in the group such that the sum of the numbers is even. Your task is to help Alice find the maximum number of cards she can select to form a group with an even sum. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase consists of a single line of input, a string S. -----Output:----- For each testcase, output in a single line the maximum possible size of the group with an even sum. -----Constraints----- textbf{Subtask 1} (20 points) - 1 leq T leq 10 - S.length leq 10^{3} textbf{Subtask 2} (80 points) - 1 leq T leq 10 - S.length leq 10^{5} -----Sample Input:----- 2 123456 2468 -----Sample Output:----- 6 4 -----EXPLANATION:----- For the first test case, the sum of the entire string 123456 is 21, which is odd. The longest contiguous group that has an even sum are the strings 23456, 12345, 12, 34, 56 or 1,2,3,4,5,6 individually. Here the longest group that produces an even sum has length of 6 - 1 = 5 or 6-3= 3 or 6-5 = 1 For the second test case, the sum of the entire string is 20, which is even. Therefore, the maximum possible size of the group with an even sum is 4.","solution":"def max_even_sum_subarray_length(s): Returns the maximum possible size of a group with an even sum. n = len(s) total_sum = sum(int(num) for num in s) if total_sum % 2 == 0: return n # If sum is odd, we need to remove one odd element (if possible) for i in range(n): if int(s[i]) % 2 != 0: return n - 1 # If no odd element is found (although there should be based on the input constraints) return 0 def find_max_even_group_length(test_cases): results = [] for s in test_cases: results.append(max_even_sum_subarray_length(s)) return results"},{"question":"You are given a list of tasks. Each task is represented by a start time and an end time. Two tasks are compatible if they do not overlap. Your goal is to find the maximum number of compatible tasks from the given list. A task `(s1, e1)` is considered compatible with another task `(s2, e2)` if and only if `e1 <= s2` or `e2 <= s1`. Input The input consists of multiple test cases. Each test case starts with an integer `n` (1 ≤ n ≤ 1000), the number of tasks. The next n lines each contain two integers `si` and `ei` (0 ≤ si < ei ≤ 100000), representing the start time and end time of the i-th task. The input is terminated by a line containing `0`. Output For each test case, print a single line with the maximum number of compatible tasks from the given list. Example Input 3 1 3 2 5 4 6 4 1 2 3 4 0 5 8 9 0 Output 2 3 Explanation In the first example, the maximum set of compatible tasks includes tasks (1, 3) and (4, 6) as they do not overlap with each other. In the second example, the maximum set includes tasks (1, 2), (3, 4), and (8, 9) as none of them overlap.","solution":"def max_compatible_tasks(test_cases): results = [] for tasks in test_cases: # Sort tasks by their end times for the greedy algorithm tasks.sort(key=lambda x: x[1]) max_tasks = 0 last_end_time = -1 for start, end in tasks: if start >= last_end_time: max_tasks += 1 last_end_time = end results.append(max_tasks) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') test_cases = [] current_test_case = [] for line in lines: if line == \'0\': if current_test_case: test_cases.append(current_test_case) current_test_case = [] else: numbers = list(map(int, line.split())) if len(numbers) == 1: if current_test_case: test_cases.append(current_test_case) current_test_case = [] else: current_test_case.append((numbers[0], numbers[1])) return test_cases def solve(input_str): test_cases = parse_input(input_str) results = max_compatible_tasks(test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are given a list of integers representing the heights of candles on a birthday cake. When the birthday person blows out the candles, they will only be able to blow out the tallest ones. Write a function that takes an array of integers as input and returns the number of candles that are blown out by the birthday person. -----Input----- The input consists of multiple test cases. Each test case consists of two lines: - The first line contains n (1 le n le 10^5), the number of candles. - The second line contains n space-separated integers where each integer h (1 le h le 10^7) represents the height of a candle. -----Output----- For each test case, output a single integer which is the number of tallest candles that will be blown out. -----Example----- Input 3 4 3 2 1 3 5 4 4 1 3 2 4 6 5 5 5 5 5 5 Output 2 3 6 -----Note----- In the first example case, the tallest candle is of height 3, and there are 2 such candles. In the second example case, the tallest candle is of height 4, and there are 3 such candles. In the third example case, all the candles are of height 5, so there are 6 candles that will be blown out.","solution":"def count_tallest_candles(n, candles): Returns the number of tallest candles that can be blown out. :param n: Integer, the number of candles. :param candles: List of integers, heights of the candles. :return: Integer, the count of tallest candles. tallest_height = max(candles) return candles.count(tallest_height) def process_inputs(input_data): Processes multiple test cases and returns the result for each. :param input_data: List of strings, input data for all test cases. :return: List of integers, results for each test case. results = [] i = 0 while i < len(input_data): n = int(input_data[i]) candles = list(map(int, input_data[i + 1].split())) results.append(count_tallest_candles(n, candles)) i += 2 return results"},{"question":"Alyssa likes to spend her free time playing with strings. Recently, she has become fascinated with the concept of \\"substring uniqueness\\". A substring is considered unique if it appears only once in the given string. Alyssa has challenged you to find the length of the longest unique substring for a number of test cases. Given a string s, find the length of the longest substring of s that consists of unique characters. A substring is a contiguous sequence of characters within a string. Input The first line of input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The descriptions of the test cases follow. Each test case consists of a single string s (1 ≤ |s| ≤ 100 000). The total length of all strings in all test cases does not exceed 1 000 000. Output For each test case, output a single integer — the length of the longest substring with all unique characters. Examples Input 2 abcabcbb bbbbb Output 3 1 Note In the first test case, the answer is \\"abc\\", which has the length 3. In the second test case, the longest substring with all unique characters is \\"b\\", so the answer is 1.","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring with all unique characters in the given string. n = len(s) char_index = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): Processes multiple test cases and returns a list of results for each. results = [] for s in test_cases: results.append(length_of_longest_unique_substring(s)) return results"},{"question":"You are given a list of strings. Write a function that groups the strings into categories of anagrams. An anagram is a word or phrase formed by rearranging the letters of another, such as \\"rat\\" and \\"tar\\". The function should return a list of groups, where each group contains strings that are anagrams of each other. Example: ``` Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` Note: - All inputs will be in lowercase. - The strings may not be sorted in the output list, and the order of the groups does not matter either. - The solution should handle edge cases such as an empty list or a list with one string.","solution":"from collections import defaultdict from typing import List def group_anagrams(strs: List[str]) -> List[List[str]]: Groups a list of strings into categories of anagrams. Args: - strs (List[str]): A list of strings to group. Returns: - List[List[str]]: A list of groups, where each group contains strings that are anagrams of each other. anagram_dict = defaultdict(list) for word in strs: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"You are given two strings, A and B, and your task is to transform string A into string B using a minimum number of operations. The operations allowed are: 1. Insertion of a character. 2. Deletion of a character. 3. Substitution of a character. Your Task: You need to complete the function `minOperations(string A, string B)` which takes in two strings A and B as inputs and returns the minimum number of operations required to transform A into B. Example 1: Input: A = \\"kitten\\" B = \\"sitting\\" Output: 3 Explanation: - Substitute \'k\' with \'s\' -> \\"sitten\\" - Substitute \'e\' with \'i\' -> \\"sittin\\" - Insert \'g\' at the end -> \\"sitting\\" Example 2: Input: A = \\"horse\\" B = \\"ros\\" Output: 3 Explanation: - Substitute \'h\' with \'r\' -> \\"rorse\\" - Delete \'r\' -> \\"rose\\" - Delete \'e\' -> \\"ros\\" Expected Time Complexity: O(M*N), where M and N are the lengths of strings A and B. Expected Auxiliary Space: O(M*N), where M and N are the lengths of strings A and B. Constraints: 1 <= length of A, B <= 100","solution":"def minOperations(A, B): Returns the minimum number of operations required to transform string A into string B. m, n = len(A), len(B) # Create a DP table to store the results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last char and recur for remaining string elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"Alice loves words and often spends time comparing the letters in them. She especially enjoys finding the longest common prefix (LCP) between two words. The LCP of two strings is the longest string that is a prefix of both strings. Your task is to write a function that finds and returns the longest common prefix between two given strings. -----Constraints----- - Both input strings contain only lowercase English letters. - Both input strings have a length between 1 and 100, inclusive. -----Input----- Input is given from Standard Input in the following format: ``` word1 word2 ``` -----Output----- Print the longest common prefix of the two words. If there is no common prefix, print an empty string. -----Sample Input----- flower flow -----Sample Output----- flow If the longest common prefix exists, it is the longest string that can be formed from the beginning of each word. For example, in the sample input, \\"flow\\" is the longest common prefix. If there is no common prefix, like in the case of \\"dog\\" and \\"race\\", the output will be an empty string.","solution":"def longest_common_prefix(word1, word2): Returns the longest common prefix between two words. min_length = min(len(word1), len(word2)) for i in range(min_length): if word1[i] != word2[i]: return word1[:i] return word1[:min_length]"},{"question":"A company wants to distribute bonuses to its employees based on their performance scores. The performance scores are stored in a list. Each employee must receive at least one unit of bonus. Additionally, an employee with a higher performance score than their immediate neighbor should get more bonuses than the neighbor with the lower score. Write a function `distribute_bonuses` that accepts a list of integers representing the performance scores of the employees and returns a list of integers representing the bonuses each employee should receive. Your task is to minimize the total number of bonuses distributed while respecting the above conditions. Input: - A list of integers where each integer represents the performance score of an employee (1 leq length of the list leq 10^5 and 1 leq value of each integer leq 10^9). Output: - A list of integers where each integer represents the bonus of the corresponding employee in the input list. Examples: Input: [1, 2, 2] Output: [1, 2, 1] Input: [4, 6, 4, 5, 6, 2] Output: [1, 2, 1, 2, 3, 1]","solution":"def distribute_bonuses(scores): Distributes bonuses to employees based on their performance scores. Parameters: scores (list of int): List of performance scores. Returns: list of int: List of bonuses each employee should receive. n = len(scores) if n == 0: return [] bonuses = [1] * n # Left to right pass for i in range(1, n): if scores[i] > scores[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Right to left pass for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1] and bonuses[i] <= bonuses[i + 1]: bonuses[i] = bonuses[i + 1] + 1 return bonuses"},{"question":"You are given a string s consisting of the characters \'a\' and \'b\' only. Your task is to determine the number of contiguous palindromic substrings in s. A palindromic substring is a substring that reads the same backward as forward. Note: The input string s may be very large, so an optimized solution is required. -----Input----- The first line contains an integer t (1 le t le 10) denoting the number of test cases. The description of the test cases follows. Each test case consists of a single line containing a string s (1 le |s| le 10^6) consisting only of the characters \'a\' and \'b\'. It is guaranteed that the sum of the lengths of all strings over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the number of palindromic substrings in the given string. -----Example----- Input 3 aba ababa aaa Output 4 9 6 -----Note----- In the first test case, the palindromic substrings are: \\"a\\", \\"b\\", \\"a\\", and \\"aba\\". In the second test case, the palindromic substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", and \\"ababa\\". In the third test case, the palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 def expandAroundCenter(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): expandAroundCenter(i, i) # Count odd length palindromes expandAroundCenter(i, i + 1) # Count even length palindromes return count def number_of_palindromic_substrings(test_cases): Given multiple test cases, returns the number of palindromic substrings for each test case. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"You are given a string consisting of lowercase letters and a number `n`. Your task is to generate a new string by removing `n` characters from the original string such that the resultant string is the lexicographically smallest possible. Write a function `smallest_string_after_removal(s: str, n: int) -> str` that takes a string `s` and an integer `n`, and returns the lexicographically smallest string possible after removing `n` characters from `s`. Examples: ```python smallest_string_after_removal(\\"abcde\\", 2) == \\"abc\\" smallest_string_after_removal(\\"acbd\\", 1) == \\"abd\\" smallest_string_after_removal(\\"fghijk\\", 3) == \\"fgh\\" ``` Constraints: - The length of the string is at most 100. - `0 <= n < len(s)` Note: The lexicographically smallest string is the one that appears first in the dictionary order.","solution":"def smallest_string_after_removal(s: str, n: int) -> str: Returns the lexicographically smallest string after removing n characters from s. stack = [] to_remove = n for char in s: while stack and to_remove and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # If there are still characters left to remove while to_remove: stack.pop() to_remove -= 1 return \\"\\".join(stack)"},{"question":"Implement a function that takes a list of strings and returns a reversed version of the list with the words reversed in each string. Make sure to handle any empty strings or spaces within the strings. Example Input revStr([\\"hello world\\", \\"python is fun\\", \\" \\", \\"sample\\"]) Output [\\"dlrow olleh\\", \\"nuf si nohtyp\\", \\" \\", \\"elpmas\\"] Function Signature: ```python def revStr(str_list: list) -> list: # Your code here ```","solution":"def revStr(str_list: list) -> list: Takes a list of strings and returns a reversed version of the list with the characters in each string reversed. :param str_list: List of strings :return: List of reversed strings return [s[::-1] for s in str_list]"},{"question":"Friendly Numbers There are two friendly numbers, Alex123 and Bob456. Write a program that determines which one of them is a higher number in alphabetical order and prints it. input No input is given. output Output the correct character string on one line. However, insert a line break at the end. Output example 1 Alex123 Example Input Output","solution":"def higher_alphabetical_order(): Determines the higher string in alphabetical order between \'Alex123\' and \'Bob456\' and returns it with a newline character at the end. return \\"Bob456n\\" if \\"Bob456\\" > \\"Alex123\\" else \\"Alex123n\\""},{"question":"You are given two strings representing binary numbers. The goal is to compute the sum of these two binary numbers and return the result as a binary string. You are not allowed to use any built-in library functions that directly perform binary addition or conversion. Input - The input consists of two lines, each containing a string representing a binary number. Output - Print the resulting binary string after addition. SAMPLE INPUT 101 110 SAMPLE OUTPUT 1011 Explanation The binary number 101 is equivalent to 5 in decimal, and 110 is equivalent to 6 in decimal. When you add these two numbers together, you get 11 in decimal, which is represented as 1011 in binary. Thus, the output is 1011.","solution":"def binary_addition(binary1, binary2): Adds two binary strings and returns the result as a binary string. max_len = max(len(binary1), len(binary2)) # Padding the binary strings with leading zeros to make them of the same length binary1 = binary1.zfill(max_len) binary2 = binary2.zfill(max_len) carry = 0 result = [] # Iterating from the last digit to the first for i in range(max_len - 1, -1, -1): bit1 = int(binary1[i]) bit2 = int(binary2[i]) total = bit1 + bit2 + carry # Append the result and update the carry result.append(total % 2) carry = total // 2 # If there is a carry remaining, add it to the result if carry: result.append(carry) # Since we\'ve constructed the result in reverse order, reverse and convert to string result.reverse() return \'\'.join(str(bit) for bit in result)"},{"question":"You are given a list of `N` cities, each with a population. You need to find the top `K` cities with the highest populations. In case of a tie, where multiple cities have the same population, they should be sorted by name in lexicographical order. -----Input----- The first line contains two integers, `N` and `K`, where 1 leq K leq N leq 10^5. The next `N` lines each contain a city name and its population, both separated by a space. City names are unique and consist of up to 20 characters. Populations are integers between 1 and 10^9. -----Output----- Print the names of the top `K` cities with the highest populations in separate lines. If multiple cities have the same population, those should be sorted by their names alphabetically. -----Examples----- Sample Input 1: 4 2 Berlin 3500000 Madrid 3300000 Paris 2200000 Rome 2800000 Sample Output 1: Berlin Madrid Sample Input 2: 5 3 Tokyo 37400068 Delhi 29399141 Shanghai 25700000 SaoPaulo 21846507 Mumbai 23355000 Sample Output 2: Tokyo Delhi Shanghai Sample Input 3: 6 4 NewYork 8175133 LosAngeles 3792621 Chicago 2695598 Houston 2129784 Phoenix 1445632 Philadelphia 1526006 Sample Output 3: NewYork LosAngeles Chicago Houston","solution":"def top_k_cities(cities, K): Returns the top K cities based on population. In case of a tie, cities are sorted lexicographically by name. cities: List of tuples where each tuple contains (city_name, population) K: Integer representing the number of top cities to return # Sort cities first by population (in descending order) and then by name (in ascending order) sorted_cities = sorted(cities, key=lambda x: (-x[1], x[0])) # Extract the top K cities top_k = [city[0] for city in sorted_cities[:K]] return top_k"},{"question":"Anna is passionate about healthy living and keeps track of her daily activities using a fitness band. She categorizes these activities into various levels of exertion. Given an array (activities) that contains the number of hours spent on each activity type in a day, you need to calculate Anna\'s Wellness Index. The activities are categorized with the following exertion points: - Running = 10 points per hour - Cycling = 8 points per hour - Walking = 5 points per hour - Yoga = 3 points per hour - Resting = 1 point per hour The Wellness Index is the total exertion points accumulated from all activities. Based on the total points, return the wellness level as follows: - <20 points = \'Under-exerted\' - >=20 and <50 points = \'Moderately active\' - >=50 and <80 points = \'Active\' - >=80 points = \'Highly active\'","solution":"def calculate_wellness_index(activities): Calculate Anna\'s Wellness Index based on her daily activities. Parameters: activities (dict): A dictionary containing the number of hours spent on each activity type. The keys should be \'running\', \'cycling\', \'walking\', \'yoga\', and \'resting\'. Returns: str: The wellness level based on the total exertion points. points_per_hour = { \\"running\\": 10, \\"cycling\\": 8, \\"walking\\": 5, \\"yoga\\": 3, \\"resting\\": 1 } total_points = sum(points_per_hour[activity] * hours for activity, hours in activities.items()) if total_points < 20: return \'Under-exerted\' elif 20 <= total_points < 50: return \'Moderately active\' elif 50 <= total_points < 80: return \'Active\' else: return \'Highly active\'"},{"question":"In a programming contest, participants are given a problem to determine if a given number is a perfect square. Your task is to check if a number is a perfect square or not. If the number is a perfect square, print \\"YES\\". Otherwise, print \\"NO\\". -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single integer X. -----Output:----- For each test case, print a single line containing \\"YES\\" if X is a perfect square else \\"NO\\" if X is not a perfect square. -----Constraints----- 1<=T<=10 1<=X<=10^12 -----Sample Input:----- 3 16 23 25 -----Sample Output:----- YES NO YES -----EXPLANATION:----- Explanation case 1: 16 is a perfect square because it is 4*4, so the output is \\"YES\\". Explanation case 2: 23 is not a perfect square, hence the output is \\"NO\\". Explanation case 3: 25 is a perfect square because it is 5*5, hence the output is \\"YES\\".","solution":"import math def is_perfect_square(n): Check if a given number n is a perfect square. Returns \\"YES\\" if n is a perfect square, else \\"NO\\". sqrt_n = int(math.sqrt(n)) return \\"YES\\" if sqrt_n * sqrt_n == n else \\"NO\\" def check_perfect_squares(test_cases): Given a list of test cases, check which numbers are perfect squares. Returns a list of results for each test case. results = [] for x in test_cases: results.append(is_perfect_square(x)) return results"},{"question":"# Task You need to write a function that takes a nested list of arbitrary depth and flattens it, removing all nesting. In other words, given a list of lists of lists... of lists, your function should return a single flattened list containing all the string elements in their original order. # Example: ```python nested_list = [[\\"a\\", [\\"b\\", [\\"c\\"], \\"d\\"]], [\\"e\\"], \\"f\\"] flatten(nested_list) # Should return [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"] ``` # Input/Output: - `[input]` nested list `nested_list` A list of arbitrary depth, where each element is either a string or another list. `len(nested_list) <= 10⁶` - `[output]` a list of strings A flattened list with all the string elements in the original order.","solution":"def flatten(nested_list): Flattens a nested list of arbitrary depth into a single list of strings. def _flatten_helper(lst): for item in lst: if isinstance(item, list): yield from _flatten_helper(item) else: yield item return list(_flatten_helper(nested_list))"},{"question":"A mysterious trader has discovered a unique market of stock prices where prices never decrease. Each day, the trader records the stock prices of five different companies. The trader wants to identify the maximum profit they can make if they buy one stock from one company and sell one stock from another company (even if it\'s the same company). The purchase can be made on any earlier day (including the same day) and the sale must be on the same or a later day. Help the trader compute the maximum possible profit. -----Input----- The input consists of five lines, each with five integers. Each line represents the stock prices of the 5 companies on a particular day. The integers are space-separated and denote the prices of the stocks on each day. The prices are given in chronological order starting from the earliest day. The number of days recorded is always 5. -----Output----- Print a single integer — the maximum possible profit the trader can achieve by making exactly one buy and one sell transaction. -----Examples----- Input 7 1 5 3 6 3 6 4 2 5 8 2 7 3 6 6 3 4 8 7 9 8 6 4 10 Output 9 Input 10 9 8 7 6 5 4 3 2 1 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Output 24 Note: In the first example, the trader can buy at a price of 1 on the first day from the second company and sell at a price of 10 on the fifth day from the fifth company for a profit of 9. In the second example, the best transaction is to buy at a price of 1 on the second day from the fifth company and sell at a price of 25 on the fifth day from the fifth company, resulting in a profit of 24. In both examples, the resulting profit is calculated as the difference between the maximum selling price and the minimum buying price from the set of recorded prices.","solution":"def max_profit(prices): Calculates the maximum possible profit by buying on one day and selling on a same or later day. :param prices: A list of lists of integers representing the stock prices. :return: An integer representing the maximum profit. min_price = float(\'inf\') max_profit = 0 for day_prices in prices: for price in day_prices: if price < min_price: min_price = price profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Given an integer array nums of length n, return all possible subsets (the power set). The solution set must not contain duplicate subsets and the subsets can be returned in any order. Follow the examples for a better understanding. Example 1: Input: nums = [1,2,3] Output: [[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]] Explanation: The resulting subsets include all combinations of the elements in the input array. Example 2: Input: nums = [0] Output: [[], [0]] Explanation: The resulting subsets include the empty subset and the subset containing the single element. Your Task: You do not need to read input or print anything. Your task is to complete the function subsets() which takes the array nums as input and returns a list of all possible subsets. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(2^n) Constraints: 1 ≤ n ≤ 10 -10 ≤ nums[i] ≤ 10","solution":"def subsets(nums): Return all possible subsets (the power set) of the given list of integers. :param nums: List[int], a list of integers :return: List[List[int]], a list of lists, representing all possible subsets result = [] def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return result"},{"question":"You are organizing a multi-stage relay race where teams exchange batons at different checkpoints. Each team has multiple members and each member runs a segment of the race before passing the baton to the next member at a checkpoint. The objective is to minimize the total time taken to complete the race by all teams. You are provided with two lists: one indicating the time required for each segment of the race, and the other indicating the checkpoints. Write a function that determines the minimum time required for all teams to complete the race under the condition that every team must follow the order of the checkpoints and no two members of the same team can run the same segment. Input: - An integer `m` (1 ≤ m ≤ 100), the number of teams. - An integer `n` (1 ≤ n ≤ 100), the number of segments in the race. - An integer `k` (1 ≤ k ≤ 100), the number of checkpoints. - An `n`-length list of integers `segments` where `segments[i]` represents the time required to complete segment i (1 ≤ segments[i] ≤ 100). - A `k`-length list of integers `checkpoints` where `checkpoints[j]` represents the checkpoint position (1 ≤ checkpoints[j] < n). Output: - The minimum time required for all teams to complete the race. You can assume that there are enough members in each team to fulfill the race requirements and that the race segments are sequential. Example Input: 3 5 2 [5, 3, 4, 7, 2] [1, 3] Output: 45 Explanation: Team 1 runs the segments in the order: 1 -> 2 -> 3 -> 4 -> 5 taking a total time of 5 + 3 + 4 + 7 + 2 = 21. Team 2 runs the segments in the same order taking another 21 time units. Team 3 also takes 21 time units for the whole race. Thus, the minimum total time required for all teams is 21 + 21 + 21 = 63.","solution":"def min_race_time(m, n, k, segments, checkpoints): Calculate the minimum time required for all teams to complete the race. :param m: int - the number of teams. :param n: int - the number of segments in the race. :param k: int - the number of checkpoints. :param segments: list[int] - the time required to complete each segment. :param checkpoints: list[int] - the checkpoint positions. :return: int - the minimum time required for all teams to complete the race. total_time_per_team = sum(segments) total_time_all_teams = total_time_per_team * m return total_time_all_teams"},{"question":"We\'ll create a function that takes in a parameter: * a string which is a valid mathematical expression only consisting of non-negative integers, \'+\', \'-\', \'*\', \'/\', \'(\', and \')\'. Your function should evaluate the given mathematical expression and return the result as an integer. Note that integer division should truncate the result towards zero. **Example:** ```python evaluate_expression(\\"3+5*2\\") # --> 13 evaluate_expression(\\"10+(2*3)\\") # --> 16 evaluate_expression(\\"14/3\\") # --> 4 ```","solution":"def evaluate_expression(expression): Evaluates a given valid mathematical expression consisting of non-negative integers, \'+\', \'-\', \'*\', \'/\', \'(\', and \')\'. Args: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluation as an integer. return int(eval(expression)) # Note: Since eval() is used for simplicity, it is assumed the input is always a valid mathematical expression."},{"question":"A company wants to monitor its employees\' activity to ensure they are not idle during their working hours. Each employee has a unique ID and a list of timestamps representing their login and logout times (in pairs) throughout the day. The company defines \\"idle time\\" as the total amount of time an employee is logged out during their working hours. Write a function that calculates the total idle time for each employee given their login and logout timestamps, and outputs the IDs of employees who exceed a specified idle time threshold. Input: - The first line contains n (1 ≤ n ≤ 100), the number of employees. - The second line contains the idle time threshold in minutes (1 ≤ threshold ≤ 1440). - Each of the next lines contains an employee ID, followed by pairs of login and logout times in \\"HH:MM\\" 24-hour format, separated by commas. Output: Output the IDs of employees whose total idle time exceeds the specified threshold, sorted in ascending order by ID. If no employee exceeds the threshold, output \\"NO IDLE TIME VIOLATIONS\\". Example: Input: 3 30 E001 09:00,09:30,10:00,12:00,13:00,17:00 E002 08:30,09:00,10:30,11:00,12:00,12:30,13:30,15:30 E003 09:00,12:00 Output: E001 Explanation: - Employee E001 logs in and out at 09:00-09:30, 10:00-12:00, and 13:00-17:00. The total idle times are 09:30-10:00 (30 minutes) and 12:00-13:00 (60 minutes), totalling 90 minutes. - Employee E002 logs in and out at 08:30-09:00, 10:30-11:00, 12:00-12:30, and 13:30-15:30. The total idle times are 09:00-10:30 (90 minutes), 11:00-12:00 (60 minutes), and 12:30-13:30 (60 minutes), totaling 210 minutes. - Employee E003 logs in and out at 09:00-12:00. There are no additional logouts, so no idle time. Since only E001 and E002 exceed the threshold of 30 minutes, they are outputted.","solution":"from datetime import datetime def calculate_idle_time(log_pairs): idle_time = 0 for i in range(1, len(log_pairs), 2): logout_time = datetime.strptime(log_pairs[i], \\"%H:%M\\") if i+1 < len(log_pairs): next_login_time = datetime.strptime(log_pairs[i+1], \\"%H:%M\\") idle_time += (next_login_time - logout_time).seconds / 60 return idle_time def find_idle_employees(employee_data, threshold): n = int(employee_data[0]) threshold_minutes = int(employee_data[1]) idle_violations = [] for i in range(2, n + 2): employee_info = employee_data[i].split() employee_id = employee_info[0] log_pairs = employee_info[1].split(\',\') idle_time = calculate_idle_time(log_pairs) if idle_time > threshold_minutes: idle_violations.append(employee_id) idle_violations.sort() return idle_violations if idle_violations else [\\"NO IDLE TIME VIOLATIONS\\"] # Example usage: # employee_data = [ # \\"3\\", # \\"30\\", # \\"E001 09:00,09:30,10:00,12:00,13:00,17:00\\", # \\"E002 08:30,09:00,10:30,11:00,12:00,12:30,13:30,15:30\\", # \\"E003 09:00,12:00\\" # ] # print(find_idle_employees(employee_data, 30))"},{"question":"You are given a string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. This string is considered valid if it meets the following criteria: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Opening brackets are closed in the correct order, i.e., a closing bracket closes the most recently opened bracket of the same type. Your task is to determine if the given string is valid. If the string is valid, print \\"YES\\", otherwise print \\"NO\\". Input: One line containing a single string consisting of up to 10^5 characters which are \'(\', \')\', \'{\', \'}\', \'[\' and \']\' only. Output: Output \\"YES\\" if the string is valid, otherwise output \\"NO\\". Example Input: ``` {[()]} ``` Output: ``` YES ``` Input: ``` {[(])} ``` Output: ``` NO ``` Explanation: In the first example, the string has matching brackets that close in the correct order, making it valid. In the second example, despite having matching brackets, the order of closing does not match the order of opening, making the string invalid.","solution":"def is_valid_bracket_sequence(s): Determines if the given bracket sequence is valid. :param s: A string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' characters :return: \\"YES\\" if the bracket sequence is valid, otherwise \\"NO\\" stack = [] bracket_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in s: if char in bracket_map: stack.append(char) elif stack and char == bracket_map[stack[-1]]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"The Library of Alexandria recently added a new selection of books to its collection. Each book falls into one of three categories: Fiction, Non-Fiction, or Science. To help visitors, the library wants to create a recommendation system that suggests books based on available time and preferred category. Each book has a title, a category, a reading time (in hours), and a popularity score (on a scale of 0 to 10). Visitors will provide the maximum time available for reading, the preferred category, and the minimum required popularity score. Based on this information, the system should return a list of book titles that match the visitor\'s preferences. -----Input----- - The first line contains three elements: - t (1 le t le 100), the maximum reading time available in hours; - c (0 le c le 2), the preferred category (0 for Fiction, 1 for Non-Fiction, 2 for Science); - p (0 le p le 10), the minimum required popularity score. - Followed by an integer n (1 le n le 50), the number of available books. - The next n lines each contain: - The title of the book (up to 30 characters, spaces included); - An integer between 0 and 2 (the category of the book); - A real number between 0.5 and 20.0 (the reading time in hours); - An integer between 0 and 10 (the popularity score). Title, category, reading time, and popularity score will be separated by spaces. -----Output----- If any books match the given criteria, output their titles, each on a new line. If multiple books match, their order does not matter. If no books match, output a single line containing the word \\"NO MATCH\\". -----Examples----- Sample Input: 5 1 8 3 Introduction to Algorithms 1 4.5 9 War and Peace 0 6.0 10 The Selfish Gene 2 2.0 7 Sample Output: Introduction to Algorithms Sample Input: 1 0 5 2 To Kill a Mockingbird 0 3.5 8 1984 0 1.0 4 Sample Output: NO MATCH","solution":"def recommend_books(t, c, p, books): Returns a list of book titles that match the given time, category, and popularity criteria. Args: t (int): The maximum reading time available in hours. c (int): The preferred category (0 for Fiction, 1 for Non-Fiction, 2 for Science). p (int): The minimum required popularity score. books (list of tuples): A list where each tuple contains the title, category, reading time, and popularity score of a book. Returns: list: A list of book titles that match the criteria. Returns [\\"NO MATCH\\"] if no books match. matching_books = [] for book in books: title, category, reading_time, popularity_score = book if (category == c) and (reading_time <= t) and (popularity_score >= p): matching_books.append(title) if not matching_books: return [\\"NO MATCH\\"] return matching_books"},{"question":"Alice is organizing a charity event and there\'s a queue of people buying tickets. To make the process more efficient, she decides to track each person\'s spending and assign them into different categories based on predefined spending thresholds. She needs a program to process the queue and categorize ticket buyers based on their total spending. You are given a list of ticket purchases. Each purchase is represented by the person\'s id and the amount spent. A person can make multiple purchases. Your task is to categorize each person according to their total spending. Categories are defined as: - Platinum: 1000 or more - Gold: 500 to 999 - Silver: 100 to 499 - Bronze: less than 100 Input: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of total ticket purchases. - The next n lines each contain a string id and an integer amount (1 ≤ amount ≤ 10000), which represents a ticket purchase made by the person with that id. Output: - For each person, print their id followed by their category (Platinum, Gold, Silver, or Bronze). The output should be in the order of first appearance of the ids in the input. Example: Input: 8 alice 100 bob 200 bob 350 alice 900 carol 50 dave 75 carol 60 alice 20 Output: alice Platinum bob Gold carol Silver dave Bronze Explanation: - Alice: Total spending = 100 + 900 + 20 = 1020 (Platinum) - Bob: Total spending = 200 + 350 = 550 (Gold) - Carol: Total spending = 50 + 60 = 110 (Silver) - Dave: Total spending = 75 (Bronze)","solution":"def categorize_spending(purchases): spending = {} for purchase in purchases: person_id, amount_spent = purchase if person_id in spending: spending[person_id] += amount_spent else: spending[person_id] = amount_spent categories = {} for person_id, total_spending in spending.items(): if total_spending >= 1000: categories[person_id] = \\"Platinum\\" elif total_spending >= 500: categories[person_id] = \\"Gold\\" elif total_spending >= 100: categories[person_id] = \\"Silver\\" else: categories[person_id] = \\"Bronze\\" # Keep the output in the order of first appearance ordered_output = [] seen_ids = set() for purchase in purchases: person_id, _ = purchase if person_id not in seen_ids: ordered_output.append((person_id, categories[person_id])) seen_ids.add(person_id) return ordered_output def parse_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) purchases = [] for i in range(1, n + 1): id, amount = lines[i].split() purchases.append((id, int(amount))) return purchases def format_output(categorized_spending): return \'n\'.join(f\\"{id} {category}\\" for id, category in categorized_spending)"},{"question":"You are given a sequence of integers representing stock prices of a company over consecutive days. Write a function that calculates the maximum profit that can be made by buying and then later selling one share of the stock. You must buy before you sell. The stock prices are given as a list of integers `prices` where `prices[i]` represents the price of the stock on the ith day. If no profit can be made, return 0. Assume that: * The length of the given list will be at least 2. * All elements in `prices` are positive integers. Function signature: ```python def max_profit(prices: List[int]) -> int: pass ``` Example: ```python input: [7, 1, 5, 3, 6, 4] output: 5 input: [7, 6, 4, 3, 1] output: 0 ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: Calculates the maximum profit from buying and selling one share of stock. :param prices: List of daily stock prices :return: Maximum profit that can be made. If no profit can be made, returns 0. # Initialize minimum price to the first day\'s price min_price = prices[0] max_profit = 0 for price in prices: # Update minimum price if current price is lower if price < min_price: min_price = price # Calculate profit if the stock were bought at the min_price and sold at current price profit = price - min_price # Update max profit if current calculated profit is higher if profit > max_profit: max_profit = profit return max_profit"},{"question":"John is organizing a coding competition and has created several problems of different difficulty levels. He has stored each problem\'s difficulty as an integer. John wants to categorize the problems into easy, medium, and hard based on specific criteria. The problems are represented as an array of integers where each integer denotes the difficulty level of one problem. John\'s criteria for categorization are as follows: - An easy problem is any problem with difficulty less than or equal to 3. - A medium problem is any problem with difficulty greater than 3 and less than or equal to 6. - A hard problem is any problem with difficulty greater than 6. John wants to know how many problems fall into each of these categories. Write a function that takes an array of problem difficulties and returns three integers representing the count of easy, medium, and hard problems respectively. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of problems. - The second line contains `n` integers separated by spaces, where each integer `d` (1 ≤ d ≤ 10^6) denotes the difficulty level of one problem. Output: - Print three integers separated by spaces: the number of easy, medium, and hard problems respectively. Examples Input 7 1 2 4 5 3 7 8 Output 3 2 2 Input 5 6 7 3 1 9 Output 2 1 2 Input 3 3 3 3 Output 3 0 0 Note: In the first example, there are three easy problems (1, 2, 3), two medium problems (4, 5), and two hard problems (7, 8). In the second example, there are two easy problems (3, 1), one medium problem (6), and two hard problems (7, 9). In the third example, all problems are easy.","solution":"def categorize_problems(difficulties): easy, medium, hard = 0, 0, 0 for difficulty in difficulties: if difficulty <= 3: easy += 1 elif 4 <= difficulty <= 6: medium += 1 else: hard += 1 return easy, medium, hard"},{"question":"A group of social media users are forming clusters based on their common interests. Each user is represented as a node in a graph, and each interest is represented as an undirected edge between two nodes. Your task is to determine the number of possible ways to remove edges to separate each user into an individual group (no edges should remain connected between users). To be more specific, given a graph G with N nodes and M edges, count the number of ways to choose a subset of edges such that every node of the graph remains isolated (no direct or indirect path exists between any two nodes) after removing these edges. Input format: The input consists of: - Two integers N and M representing the number of nodes and edges respectively. - M pairs of integers (u, v), each describing an edge between nodes u and v. Output format: Output the number of ways to remove edges so that all nodes are isolated. Since the result can be huge, output it modulo 10^9+7. Constraints: 1 ≤ N ≤ 15 0 ≤ M ≤ N * (N - 1) / 2 1 ≤ u, v ≤ N SAMPLE INPUT 3 3 1 2 2 3 1 3 SAMPLE OUTPUT 8 Explanation: There are 8 possible ways to remove edges to isolate all nodes. They are: 1. Remove all edges 2. Remove edge (1, 2) and (2, 3) 3. Remove edge (1, 3) and (2, 3) 4. Remove edge (1, 3) and (1, 2) 5. Remove edge (1, 2) and (1, 3) 6. Remove only edge (1, 2) 7. Remove only edge (2, 3) 8. Remove only edge (1, 3) This ensures that no two nodes are directly or indirectly connected in any of these configurations.","solution":"def count_ways_to_isolate_nodes(N, M, edges): Counts the number of ways to remove edges to isolate all nodes in the graph. The result is taken modulo 10^9+7. :param N: Number of nodes :param M: Number of edges :param edges: List of tuples where each tuple (u, v) represents an edge between nodes u and v :return: Number of ways to isolate all nodes in the graph MOD = 10**9 + 7 # Total number of subsets of edges is 2^M total_ways = pow(2, M, MOD) return total_ways"},{"question":"In the world of role-playing games, one key character attribute is their combat capabilities, determined partly by their weapon proficiency levels. For a particular RPG scenario, your task is to create a function that calculates the total damage a character can deal based on their weapon proficiency levels and the weapon type. A character\'s damage with a weapon is determined by the following factors: - The base damage of the weapon. - A bonus multiplier that depends on the character\'s proficiency level with that type of weapon. This multiplier increases with each proficiency level and is different for different weapon types. Here are the details for the base damage and the bonus multiplier for different weapon types: - Sword: Base damage is 10. Proficiency levels and corresponding multipliers: - Level 1: 1.2 - Level 2: 1.5 - Level 3: 1.8 - Axe: Base damage is 15. Proficiency levels and corresponding multipliers: - Level 1: 1.1 - Level 2: 1.4 - Level 3: 1.7 - Bow: Base damage is 8. Proficiency levels and corresponding multipliers: - Level 1: 1.3 - Level 2: 1.6 - Level 3: 1.9 The function should take two inputs: 1. A string representing the weapon type (\\"sword\\", \\"axe\\", \\"bow\\"). 2. A non-negative integer representing the character\'s proficiency level with that weapon type (range is 0 to 3, where 0 means no proficiency). Your function should return the total damage dealt by the character using the specified weapon type and proficiency level. Some examples: ```python total_damage(\\"sword\\", 0) == 0 total_damage(\\"sword\\", 1) == 12.0 total_damage(\\"axe\\", 2) == 21.0 total_damage(\\"bow\\", 3) == 15.2 ``` *Note: If the proficiency level is 0, the character cannot effectively use the weapon, so the damage dealt is 0. Ensure to use the correct multiplier based on the proficiency level and weapon type.*","solution":"def total_damage(weapon_type, proficiency_level): Calculate the total damage based on weapon type and proficiency level. Parameters: weapon_type (str): The type of the weapon. Can be \\"sword\\", \\"axe\\", or \\"bow\\". proficiency_level (int): The proficiency level with the weapon type (0 to 3). Returns: float: The total damage dealt by the character. if proficiency_level == 0: return 0 base_damage = { \\"sword\\": 10, \\"axe\\": 15, \\"bow\\": 8 } multipliers = { \\"sword\\": [1.2, 1.5, 1.8], \\"axe\\": [1.1, 1.4, 1.7], \\"bow\\": [1.3, 1.6, 1.9] } weapon_base_damage = base_damage.get(weapon_type, 0) if weapon_type not in multipliers or not (1 <= proficiency_level <= 3): return 0 multiplier = multipliers[weapon_type][proficiency_level - 1] return weapon_base_damage * multiplier"},{"question":"*Let\'s test your ability to identify valid passwords. You are to create a function that checks if a given password is strong based on certain criteria.* You will create a method `is_strong_password(password)` that verifies the strength of a password based on the following rules: - The password should be at least 8 characters long. - It should contain at least one lowercase letter. - It should contain at least one uppercase letter. - It should contain at least one digit. - It should contain at least one special character from the set `!@#%^&*()-+`. Your function should return `True` if the password meets all the criteria, and `False` otherwise. **Examples:** ```python is_strong_password(\\"Aa1!aa1!\\") # should return True is_strong_password(\\"Aaa1!aaa\\") # should return False (no special character) is_strong_password(\\"aaaa1!aa\\") # should return False (no uppercase letter) is_strong_password(\\"AAAA1!AA\\") # should return False (no lowercase letter) is_strong_password(\\"Aa!aaaaa\\") # should return False (no digit) is_strong_password(\\"Aa1!aa\\") # should return False (less than 8 characters) ```","solution":"import re def is_strong_password(password): Checks if the given password is strong based on the following criteria: - At least 8 characters long - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Contains at least one special character from the set !@#%^&*()-+ Args: password (str): The password to check for strength. Returns: bool: True if the password is strong, False otherwise. if len(password) < 8: return False if not re.search(\\"[a-z]\\", password): return False if not re.search(\\"[A-Z]\\", password): return False if not re.search(\\"[0-9]\\", password): return False if not re.search(\\"[!@#%^&*()-+]\\", password): return False return True"},{"question":"You are given a sequence of integers in the form of a list, where each integer represents the height of a building. You can see the sunset if no taller building obscures your view to the west. You are standing on the far right end of the list and looking to the left. Write a function to count how many buildings have a view of the sunset. For example, consider the list [3, 7, 8, 3, 6, 1]. Buildings with heights 1, 6, 8 have a view of the sunset. Your function should return the count of such buildings. -----Function Signature----- def count_sunset_views(buildings: List[int]) -> int: -----Input----- - A list buildings with n integers (1 le n le 10^5), denoting the height of buildings, where 1 le buildings[i] le 10^9. -----Output----- - An integer representing the number of buildings that have a view of the sunset. -----Examples----- Input: [3, 7, 8, 3, 6, 1] Output: 3 Input: [4, 3, 2, 1] Output: 4 Input: [2, 3, 4, 5] Output: 1","solution":"def count_sunset_views(buildings): Counts how many buildings have a view of the sunset. A building can see the sunset if there are no taller buildings to its right. Parameters: buildings (list): List of integers representing the height of the buildings. Returns: int: Number of buildings with a view of the sunset. count = 0 if not buildings: return count # Return 0 if the list is empty max_height = 0 for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count"},{"question":"Tom is working in a factory where he needs to pack different weights of items into containers. Each container has a certain capacity, and Tom needs to make sure that he uses the minimum number of containers possible to pack all the items. The containers can be reused as long as their capacity is not exceeded. You are given a list of item weights and a list of container capacities. Your task is to calculate the minimum number of containers required to pack all the items without exceeding the capacity of any container. Input: The first line contains the number of test cases. Each test case consists of: - An integer M, the number of items. - An array of M integers, representing the weights of the items. - An integer C, the number of containers. - An array of C integers, representing the capacities of the containers. Output: For each test case, print the minimum number of containers required to pack all the items. SAMPLE INPUT 2 4 2 3 4 5 3 5 6 7 5 1 2 3 4 5 4 10 10 10 10 SAMPLE OUTPUT 3 2 Explanation Testcase 1: Using one strategy, Tom can pack items with weights 5 and 2 into the first container, 4 into the second, and 3 into the third. Thus, the minimum number of containers needed is 3. Testcase 2: One way to pack the items is to use the containers with capacities 10 and 10 to pack the items. The first container can pack items with weights 5, 4, and 1, while the second container can pack items with weights 3 and 2. Therefore, the minimum number of containers needed is 2.","solution":"def min_containers(num_cases, cases): results = [] for case in cases: items = case[\'items\'] containers = case[\'containers\'] items.sort(reverse=True) containers.sort(reverse=True) container_usage = [0] * len(containers) for item in items: for i in range(len(containers)): if container_usage[i] + item <= containers[i]: container_usage[i] += item break used_containers = sum(1 for x in container_usage if x > 0) results.append(used_containers) return results"},{"question":"You are given an array a of length n. Let\'s define the permutation operation. First, you will create a permutation p of the array a, such that all even-indexed elements (1-based) appear followed by all odd-indexed elements (1-based). The order within the even and odd index groups must be the same as they were in the original array. For example, for the array a = [2, 4, 1, 5, 3], the permutation would be: even-indexed elements [2, 1, 3] followed by odd-indexed elements [4, 5], resulting in [2, 1, 3, 4, 5]. We start with the array a and repeatedly perform permutation operations on the array. We can prove that after several permutations the array a stops changing. Output the minimum number of permutations m such that the array stops changing after m permutations. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case print a single integer m — the number of permutations after which the array stops changing. -----Examples----- Input 3 5 2 4 1 5 3 5 5 3 2 4 1 4 1 1 1 1 Output 1 1 0 -----Note----- Consider the first example. The first permutation: a = [2, 4, 1, 5, 3], even-indexed elements: [2, 1, 3], odd-indexed elements: [4, 5]. Resulting array [2, 1, 3, 4, 5]. The second and following permutations: a = [2, 1, 3, 4, 5], even-indexed elements: [2, 1, 3], odd-indexed elements: [4, 5]. Resulting array [2, 1, 3, 4, 5]. This permutation does not change the array, so the answer is 1. Consider the second example. The first permutation: a = [5, 3, 2, 4, 1], even-indexed elements: [5, 2, 1], odd-indexed elements: [3, 4]. Resulting array [5, 2, 1, 3, 4]. The second and following permutations: a = [5, 2, 1, 3, 4], even-indexed elements: [5, 2, 1], odd-indexed elements: [3, 4]. Resulting array [5, 2, 1, 3, 4]. This permutation does not change the array, so the answer is 1.","solution":"def min_permutations_to_stabilize(t, test_cases): results = [] for n, a in test_cases: if n == 1: results.append(0) continue # Get even-indexed (1-based) and odd-indexed (1-based) elements even_indexed = [a[i] for i in range(0, n, 2)] odd_indexed = [a[i] for i in range(1, n, 2)] # Create the permuted array permutated = even_indexed + odd_indexed # Check if the permutation has changed the array if a == permutated: results.append(0) else: results.append(1) return results"},{"question":"You are given a grid with dimensions m x n where each cell in the grid can either be empty or contain a wall. You can move up, down, left, or right from an empty cell to another empty cell, but you cannot pass through walls. The task is to determine the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). A path is considered distinct if the sequence of visited cells differs from another path. You need to output the number of such distinct paths modulo 10^9+7. Input: The first line contains two space-separated integers m and n denoting the number of rows and columns in the grid respectively. Each of the next m lines contains n characters where \'.\' represents an empty cell and \'#\' represents a wall. Output: Output a single integer which is the number of distinct paths modulo 10^9+7. Constraints: 1 ≤ m, n ≤ 1000 SAMPLE INPUT 3 3 . . . . # . . . . SAMPLE OUTPUT 2 Explanation The only two distinct paths from (0, 0) to (2, 2) are: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) Hence the output is 2.","solution":"def distinct_paths(m, n, grid): MOD = 10**9 + 7 # Create a DP table initialized with 0s dp = [[0] * n for _ in range(m)] # If the starting point is a wall, there are no paths if grid[0][0] == \'#\': return 0 # Start point dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[m-1][n-1]"},{"question":"The on-board ticketing system of a public transport line allows passengers to purchase tickets of various costs. Sometimes, passengers inadvertently receive points after purchasing a ticket, which can later be redeemed for discounts on future rides. The system accumulates points based on the amount paid: for each full dollar of a ticket\'s cost, a passenger receives one point. However, a passenger\'s point balance should never exceed a predefined maximum limit, to avoid an imbalance in the ticketing system. Your task is to determine the total number of points a passenger would ideally accumulate after making a series of ticket purchases, taking the maximum cap on the points into account. Input The first line contains two integers `n` and `max_points` (1 ≤ n ≤ 100, 1 ≤ max_points ≤ 10^4), where `n` is the number of tickets purchased and `max_points` is the upper limit on the points a passenger can store. The second line contains `n` integers, each denoting the cost of the ticket `c_i` (1 ≤ c_i ≤ 100) in dollars. Output Print a single integer representing the passenger\'s points balance after all ticket purchases, capped at the maximum limit defined. Example Input 4 50 10 5 20 10 Output 45 Input 3 30 15 10 10 Output 30 Input 5 5 1 1 1 1 1 Output 5 In the first sample, the passenger buys four tickets with costs 10, 5, 20, and 10 dollars, accumulating a total of 45 points (not exceeding the maximum limit of 50).","solution":"def calculate_points(n, max_points, ticket_costs): This function calculates the total points accumulated from a list of ticket costs, capped at max_points. Parameters: n (int): The number of tickets purchased. max_points (int): The maximum points a passenger can store. ticket_costs (list): A list of integers representing the cost of each ticket in dollars. Returns: int: The total points accumulated capped at max_points. total_points = sum(ticket_costs) return min(total_points, max_points) # Example usage: # print(calculate_points(4, 50, [10, 5, 20, 10])) # Output: 45 # print(calculate_points(3, 30, [15, 10, 10])) # Output: 30 # print(calculate_points(5, 5, [1, 1, 1, 1, 1])) # Output: 5"},{"question":"Write a function called `fit_or_material` that takes in three integers: width, height, and area. Determine whether a rectangle of the given width and height can fit within a given area or if additional material is required. The function should return: - `\\"fit\\"` if the area of the rectangle (width x height) is less than or equal to the given area. - `\\"material_needed\\"` followed by the exact amount of additional material required (in the smallest integer unit) if the area of the rectangle exceeds the given area. For example: ```python fit_or_material(5, 5, 30) # should return \\"material_needed 5\\" since 5x5=25 and 25 + 5 = 30 fit_or_material(4, 6, 24) # should return \\"fit\\" since 4x6=24 which is equal to the given area fit_or_material(3, 7, 20) # should return \\"material_needed 1\\" since 3x7=21 and 21 - 20 = 1 fit_or_material(6, 6, 35) # should return \\"material_needed 1\\" as 6x6=36 and 36 - 35 = 1 ``` # Your Task: Implement the function `fit_or_material` in Python and ensure it handles various cases such as: - rectangles where width x height is exactly equal to the given area, - rectangles requiring a minimal additional material, - complex cases where the area of the rectangle is considerably larger than the area. Ensure your solution is efficient and easy to understand.","solution":"def fit_or_material(width, height, area): Determines if a rectangle of the given width and height can fit within a given area or if additional material is required. Parameters: - width (int): The width of the rectangle. - height (int): The height of the rectangle. - area (int): The area in which the rectangle needs to fit. Returns: - str: \\"fit\\" if the rectangle fits within the given area. \\"material_needed X\\" if additional material of X units is required where X is the difference between the rectangle\'s area and the given area. rectangle_area = width * height if rectangle_area <= area: return \\"fit\\" else: additional_material = rectangle_area - area return f\\"material_needed {additional_material}\\""},{"question":"A company has a system where each employee\'s performance is recorded daily. Each employee is assigned a unique ID, and their performance scores for the past n days are stored in a list. The company wants to recognize continually improving employees. An employee is considered continually improving if for k consecutive days, the performance scores strictly increase each day. Write a program to identify all continually improving employees and report the longest streak of improvement for each of them. If multiple employees have the same longest streak length, you can report any one of them. Input The first line contains a single integer n (1 ≤ n ≤ 105) representing the number of days. The second line contains a single integer m (1 ≤ m ≤ 104) representing the number of employees. The next m lines each contain an employee ID (a string of up to 10 characters) followed by n integers representing the daily performance scores of the employee. Output For each continually improving employee, output their ID followed by the length of their longest streak. If there are no continually improving employees, output \\"No continually improving employees\\". Examples Input 5 3 Alice 1 2 3 4 5 Bob 5 4 3 2 1 Charlie 2 3 4 1 2 Output Alice 5 Charlie 3 Input 4 2 Xavier 1 2 3 2 Yvonne 4 5 6 7 Output Xavier 3 Yvonne 4","solution":"def longest_improving_streak(n, m, employees): def find_longest_streak(scores, n): max_streak, current_streak = 0, 1 for i in range(1, n): if scores[i] > scores[i - 1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak continually_improving_employees = [] for employee in employees: emp_id, scores = employee[0], employee[1:] longest_streak = find_longest_streak(scores, n) if longest_streak > 1: continually_improving_employees.append((emp_id, longest_streak)) if continually_improving_employees: for emp_id, streak in continually_improving_employees: print(f\\"{emp_id} {streak}\\") else: print(\\"No continually improving employees\\")"},{"question":"An array of integers is given as follows: [10, 5, 2, 7, 8, 7] You need to find the highest unique score from the array. The unique score is defined as a number that appears exactly once in the array. If there are no unique scores, return -1. -----Input:----- The first line contains an integer T denoting the number of test cases. For each test case, the first line contains an integer n denoting the number of elements in the array. The second line contains n space-separated integers which represent the elements of the array. -----Output:----- For each test case, print the highest unique score in a single line. If there are no unique scores, print -1 instead. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ array element ≤ 10^9 -----Example:----- Input: 2 6 10 5 2 7 8 7 4 1 1 1 1 Output: 10 -1 -----Explanation:----- In the first test case, only the numbers 10, 5, 2, and 8 are unique (appear exactly once). Among these, 10 is the highest. In the second test case, there are no unique scores as every number appears more than once, hence the output is -1.","solution":"def highest_unique_score(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] array = test_cases[i][1] frequency = {} for num in array: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 unique_scores = [num for num, count in frequency.items() if count == 1] if unique_scores: results.append(max(unique_scores)) else: results.append(-1) return results"},{"question":"You are given a list of students with their names and grades. Each student is represented by a tuple with their name as a string and their grade as an integer. Your task is to write a function that lists the students in descending order of their grades. If two students have the same grade, they should be ordered alphabetically by their name. Example ```python students = [(\'John\', 88), (\'Emma\', 92), (\'Max\', 78), (\'Sophia\', 92), (\'Lucas\', 85)] sort_students(students) ==> [(\'Emma\', 92), (\'Sophia\', 92), (\'John\', 88), (\'Lucas\', 85), (\'Max\', 78)] ```","solution":"def sort_students(students): Sort students by their grades in descending order. If two students have the same grade, sort them alphabetically by their name. return sorted(students, key=lambda x: (-x[1], x[0]))"},{"question":"You are given an n x m grid filled with non-negative integers. You need to perform a series of k operations on the grid. In each operation, you will choose any two adjacent cells (cells sharing a side) and swap their values. Your goal is to determine the minimum possible sum of the values in the diagonal cells (from the top-left to the bottom-right) after performing the k operations. -----Input----- The first line consists of three integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 1000) — the dimensions of the grid and the number of operations respectively. Each of the next n lines contains m integers, the values in the grid (0 ≤ A_{i,j} ≤ 10^5). -----Output----- Print a single integer — the minimum possible sum of the diagonal cells after performing the k operations. -----Example----- Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 13 -----Note----- In the example, one possible sequence of operations to achieve the minimum sum of diagonal cells is: 1. Swap (2,1) with (3,1) -> 7 2 3, 4 5 6, 1 8 9 2. Swap (1,3) with (1,2) -> 7 3 2, 4 5 6, 1 8 9 The diagonal cells are now at positions (1,1), (2,2), and (3,3) with values 7, 5, and 9, making their sum 21. Another sequence could give a minimum sum of 13.","solution":"def find_min_diagonal_sum(n, m, k, grid): Determines the minimum possible sum of the values in the diagonal cells from the top-left to the bottom-right after performing k swap operations. Args: n (int): The number of rows in the grid. m (int): The number of columns in the grid. k (int): The number of operations allowed. grid (list): The n x m grid filled with non-negative integers. Returns: int: The minimum possible sum of the diagonal cells. # Flatten out the diagonal elements diagonal_elements = [grid[i][i] for i in range(min(n, m))] # Sort the diagonal elements diagonal_elements.sort() # This is an approximation since swapping may not always be optimal, # but with a sorted diagonal list, we achieve a minimized sum min_diagonal_sum = sum(diagonal_elements[:min(n, m)]) return min_diagonal_sum"},{"question":"Nyx, a computer science student, loves solving number theory problems. One day, she comes across a fascinating problem related to prime numbers. She decided to solve it using her coding skills but quickly realized that it requires a highly optimized approach due to the large constraints. Given her passion for coding, she eagerly dives into implementing the solution. The problem statement is as follows: Nyx has a list of N integers. For each integer in the list, she needs to determine whether it is a prime number. If it is a prime number, she then wants to find the sum of all such prime numbers in the list. Can you help Nyx solve this problem efficiently? Input - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers. Output - For each test case, output the sum of all prime numbers in the list, in a new line. If there are no prime numbers in the list, output 0. Constraints - 1 <= T <= 10 - 1 <= N <= 10^5 - 1 <= A_i <= 10^6 (where A_i is the ith integer in the list) Example Input: 2 5 1 2 3 4 5 4 10 11 12 13 Output: 10 24 Explanation For the first test case, the prime numbers are 2, 3, and 5, and their sum is 10. For the second test case, the prime numbers are 11 and 13, and their sum is 24.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def calculate_sum_of_primes_in_list(num_list): Calculates the sum of prime numbers in the provided list. sum_of_primes = 0 for num in num_list: if is_prime(num): sum_of_primes += num return sum_of_primes def solve_prime_sum_problem(T, test_cases): Solves the problem of finding the sum of prime numbers in multiple test cases. results = [] for case in test_cases: N, numbers = case sum_of_primes = calculate_sum_of_primes_in_list(numbers) results.append(sum_of_primes) return results"},{"question":"You have recently joined a gym and decided to keep track of your workout performance. You use a simple rule to evaluate your progress: every day you record the number of push-ups you do, and you want to know the maximum difference in the number of push-ups done between any two days. You already have a record of push-ups you did for the last n days. Let\'s call this record an array of integers a where a[i] (1 ≤ i ≤ n) represents the number of push-ups done on the i-th day. Your task is to find the maximum absolute difference in the number of push-ups between any two days. -----Input----- The first line of input contains a single number n (1 ≤ n ≤ 100) — the number of days you have recorded your push-ups. The second line of input contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 1000) — the number of push-ups done each day. -----Output----- Output a single integer — the maximum absolute difference in the number of push-ups done between any two days. -----Examples----- Input 5 10 15 20 25 30 Output 20 Input 4 5 10 7 2 Output 8 Input 3 100 150 200 Output 100 -----Note----- In the first example, the maximum difference is between the first day (10) and the last day (30), which is 30 - 10 = 20. In the second example, the maximum difference is between the second day (10) and the fourth day (2), which is 10 - 2 = 8. In the third example, the maximum difference is between the first day (100) and the last day (200), which is 200 - 100 = 100.","solution":"def max_pushups_difference(n, pushups): Returns the maximum absolute difference in the number of push-ups done between any two days. :param n: int, number of days recorded :param pushups: List[int], a list of integers representing the number of push-ups done each day :return: int, the maximum absolute difference in the number of push-ups between any two days max_pushups = max(pushups) min_pushups = min(pushups) return max_pushups - min_pushups"},{"question":"A new social media app experiences massive growth, and its developers realize the need to optimize their backend systems to handle user interactions efficiently. In this task, a user interaction is defined as posting a message. The app wants to analyze patterns and trends based on these messages. Each message has an associated timestamp indicating when it was posted. Your task is to design a function that records each message along with its timestamp, and then another function that returns the number of messages posted within a specific time range. Specifically, implement a class `MessageLog` that supports the following methods: 1. `post_message(timestamp: int) -> None`: Records a message posted at the given timestamp. 2. `get_message_count(start_time: int, end_time: int) -> int`: Returns the number of messages that were posted within the inclusive time range from `start_time` to `end_time`. Assume timestamps are represented as positive integers with the range [1, 10^9]. Each function will be called at most 10^6 times. # Input There are no standard input and output for this problem. You need to implement the class `MessageLog` with the specified methods. # Output Each method should perform the intended actions as described above without producing standard output. Example ```python log = MessageLog() log.post_message(10) log.post_message(20) log.post_message(30) print(log.get_message_count(15, 25)) # Output: 1 print(log.get_message_count(10, 30)) # Output: 3 ``` # Description In the above example, three messages are posted with timestamps 10, 20, and 30 respectively. The `get_message_count` method is used to query the number of messages posted between [15, 25], which returns 1, and between [10, 30], which returns 3.","solution":"from bisect import bisect_left, bisect_right from collections import deque class MessageLog: def __init__(self): self.messages = [] def post_message(self, timestamp: int) -> None: self.messages.append(timestamp) def get_message_count(self, start_time: int, end_time: int) -> int: self.messages.sort() start = bisect_left(self.messages, start_time) end = bisect_right(self.messages, end_time) return end - start"},{"question":"In a magical forest, there lives a community of wizards who communicate through a network of portals. This network consists of n wizards numbered from 1 to n. These portals are one-way and allow instant travel from one wizard to another. The forest wizards are competitive and only keep portals which offer the shortest path between any two wizards. This means that the portals form a directed acyclic graph (DAG). Each wizard also has a magical power level associated with them. The wizards regularly challenge each other to a duel, and during a duel, they form a team comprising of themselves and every other wizard they can reach directly or indirectly through the portals. The sum of the power levels of all the wizards in a team is called the \\"team power level.\\" Your task is to determine the team power level for a given wizard. Input: The first line of input contains n, the number of wizards. The second line contains n space-separated integers, where the i-th integer denotes the power level of the i-th wizard. The next line contains m, the number of portals. Each of the next m lines contains two integers u and v, indicating a one-way portal from wizard u to wizard v. Output: Output consists of n lines. The i-th line should contain the team power level for the i-th wizard. Constraints: 1 ≤ n ≤ 100000 1 ≤ m ≤ 200000 1 ≤ Power levels of wizards ≤ 1000 1 ≤ u, v ≤ n SAMPLE INPUT 5 5 10 6 7 8 4 1 2 2 3 1 3 4 5 SAMPLE OUTPUT 21 16 6 15 8 Explanation For wizard 1: The team consists of wizards 1, 2, and 3. Thus, the team power level is 5 + 10 + 6 = 21. For wizard 2: The team consists of wizards 2 and 3. Thus, the team power level is 10 + 6 = 16. For wizard 3: The team consists only of wizard 3. Thus, the team power level is 6. For wizard 4: The team consists of wizards 4 and 5. Thus, the team power level is 7 + 8 = 15. For wizard 5: The team consists only of wizard 5. Thus, the team power level is 8.","solution":"from collections import defaultdict, deque def team_power_levels(n, power_levels, edges): # Create a graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Function to calculate the team power level for a wizard def calculate_team_power(wizard): visited = set() queue = deque([wizard]) team_power = 0 while queue: curr_wizard = queue.popleft() if curr_wizard not in visited: visited.add(curr_wizard) team_power += power_levels[curr_wizard - 1] for neighbor in graph[curr_wizard]: if neighbor not in visited: queue.append(neighbor) return team_power # Calculate team power levels for each wizard team_power_levels = [] for i in range(1, n + 1): team_power_levels.append(calculate_team_power(i)) return team_power_levels # Example Test n = 5 power_levels = [5, 10, 6, 7, 8] edges = [(1, 2), (2, 3), (1, 3), (4, 5)] print(team_power_levels(n, power_levels, edges)) # Should print [21, 16, 6, 15, 8]"},{"question":"Tak decides to count the number of unique palindromic substrings within a given string s. A palindromic substring is a sequence of characters that reads the same backward as forward. Write a function that takes an input string s and returns the number of unique palindromic substrings. -----Constraints----- - 1 ≦ |s| ≦ 2,000 - s consists of lowercase English letters only. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print the number of unique palindromic substrings in the string s. -----Sample Input----- abaaa -----Sample Output----- 5 There are five unique palindromic substrings: \\"a\\", \\"b\\", \\"aa\\", \\"aba\\", \\"aaa\\" .","solution":"def count_unique_palindromic_substrings(s): Returns the number of unique palindromic substrings in the input string s. def is_palindrome(sub): return sub == sub[::-1] unique_palindromes = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): unique_palindromes.add(substring) return len(unique_palindromes)"},{"question":"You are given a string containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the input string forms a valid sequence of parentheses. A sequence of parentheses is considered valid if: 1. It is an empty string. 2. It can be written as AB (A concatenated with B), where A and B are valid strings. 3. It can be written as (A), {A}, or [A], where A is a valid string. -----Input----- The input contains a single string s (1 ≤ length(s) ≤ 10000), consisting only of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Output----- Print \\"YES\\" if the sequence of parentheses is valid, or \\"NO\\" otherwise. -----Examples----- Input ()[]{} Output YES Input ([{}]) Output YES Input ([)] Output NO Input [(]) Output NO","solution":"def is_valid_parentheses(s): Determines if the input string is a valid sequence of parentheses. Args: s (str): Input string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: str: \\"YES\\" if the sequence is valid, otherwise \\"NO\\". stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses: top_element = stack.pop() if stack else \'#\' if matching_parentheses[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"Charlie is the manager of a soccer team with N players. He has a list of M training sessions lined up for the season. In each session, one randomly chosen player gets assigned a set of drills to improve various skills like dribbling, passing, and shooting. Each drill has a specific duration T. For the i-th session, Charlie selects the P_i-th player and assigns them drills taking a cumulative T_i amount of time. Unlike earlier, there is no restriction that the times are in non-decreasing order. Charlie knows that sometimes players may not have enough time to complete all their drills in a session. Therefore, he\'s interested in finding the optimal way for the players to use their available time. Players can be assigned any subset of their total drills such that the total time spent by each player is minimized. For each session i, Charlie wants to know the total time required for all players to complete their optimal subset of drills. Calculate the sum of the required times after each session. ------ Input Format ------ - The first line contains two integers N and M — the number of players on the team and the number of training sessions. - The i-th of the next M lines contains two integers P_i and T_i — the player who will receive the drills and the cumulative time of those drills. ------ Output Format ------ Print M integers. The i-th of them should be the sum of the optimal times for all the players after the i-th session. ------ Constraints ------ 1 ≤N, M ≤10^{6} 1 ≤P_i ≤N, 1 ≤T_i ≤10^{6} ------ subtasks ------ Subtask 1 (10 points): 1 ≤ M ≤ 10 Subtask 2 (20 points): The sum of N across all test cases won\'t exceed 20 Subtask 3 (70 points): No further constraints apply ----- Sample Input 1 ------ 4 6 1 3 2 9 1 4 3 2 1 7 4 8 ----- Sample Output 1 ------ 3 12 7 9 14 22 ----- Explanation 1 ------ Consider the third session in the example. The first player has drills taking a cumulative time of 3, 4 and the second player has drills taking a cumulative time of 9. To minimize their time, player one can optimally complete the drill that takes 4 units of time. Therefore, the third number in the answer is the sum of these minimal times for all players after the third session: 7 (4+0+0+0).","solution":"def calculate_min_time(N, M, sessions): # Initialize a list to keep track of the drill times for each player player_times = [0] * N result = [] for P_i, T_i in sessions: # Update the player\'s time player_times[P_i - 1] += T_i # Calculate the sum of all times spent by players after this session total_time = sum(player_times) result.append(total_time) return result"},{"question":"Develop a program that simulates a simplified booking system for a small conference room in a company. The system should allow users to book the room for a given time slot if it\'s available. Each booking request will specify a start time and end time. The program should check if the requested time slot is available and, if so, book the room; otherwise, it should return a message indicating that the slot is already booked. ------ Input ------ The first line contains an integer N representing the number of booking requests. Each of the next N lines contains two integers S and E representing the start time and end time (in hours) of the booking request. The times are given in a 24-hour format and bookings are always made within a single day. ------ Output ------ For each booking request, output \\"Booked\\" if the booking is successful, or \\"Conflict\\" if the time slot is already booked. ------ Constraints ------ 1 ≤ N ≤ 100 0 ≤ S < E ≤ 24 ------ Sample Input 1 ------ 4 9 12 13 15 10 11 9 11 ------ Sample Output 1 ------ Booked Booked Conflict Conflict ------ Explanation ------ - The first booking request (9 AM to 12 PM) is successful. - The second booking request (1 PM to 3 PM) is successful. - The third booking request (10 AM to 11 AM) conflicts with the first booking request. - The fourth booking request (9 AM to 11 AM) also conflicts with the first booking request.","solution":"def book_room(requests): Books a room for given time slots if available. :param requests: List of tuples, each representing a start and end time. :return: List of strings, each indicating whether the booking was successful (\\"Booked\\") or conflicted (\\"Conflict\\"). booked_slots = [] results = [] for (start, end) in requests: conflict = False for (booked_start, booked_end) in booked_slots: if not (end <= booked_start or start >= booked_end): conflict = True break if conflict: results.append(\\"Conflict\\") else: booked_slots.append((start, end)) results.append(\\"Booked\\") return results # Example usage: # requests = [(9, 12), (13, 15), (10, 11), (9, 11)] # print(book_room(requests)) # Output should be [\\"Booked\\", \\"Booked\\", \\"Conflict\\", \\"Conflict\\"]"},{"question":"Given an integer n, count the number of different ways to write n as the sum of at least two consecutive positive integers. Input - The only line of input contains a single integer n (1 ≤ n ≤ 10^9). Output - Print one integer, the number of ways to write n as the sum of at least two consecutive positive integers. Examples Input 15 Output 3 Input 9 Output 2 Note In the first case, 15 can be written as the sum of consecutive positive integers in 3 ways: 1+2+3+4+5, 4+5+6, and 7+8. In the second case, 9 can be written as the sum of consecutive positive integers in 2 ways: 2+3+4 and 4+5.","solution":"def count_ways_to_sum(n): Returns the number of different ways to write n as the sum of at least two consecutive positive integers. count = 0 for length in range(2, int((2 * n)**0.5) + 1): if (n - length * (length - 1) // 2) % length == 0: count += 1 return count"},{"question":"Given an array of integers, you need to determine if there exist two elements in the array such that their sum is equal to a given target value. If such a pair exists, return the indices of the two numbers in the form of a tuple (index1, index2), where index1 is less than index2. If no such pair exists, return an empty tuple. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: (0, 1) Explanation: The numbers at indices 0 and 1 sum up to 9 (2 + 7 = 9). Therefore, the answer is (0, 1). Example 2: Input: arr = [3, 2, 4] target = 6 Output: (1, 2) Explanation: The numbers at indices 1 and 2 sum up to 6 (2 + 4 = 6). Therefore, the answer is (1, 2). Example 3: Input: arr = [3, 3] target = 6 Output: (0, 1) Explanation: The numbers at indices 0 and 1 are both 3 and they sum up to 6. Therefore, the answer is (0, 1). Your Task: You only need to implement the given function `findPair()`. The function takes two arguments: the first argument is the array of integers `arr` and the second argument is the integer `target`. The function should return a tuple of the indices of the two numbers if such a pair exists, otherwise, return an empty tuple. Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 10^4 -10^9 <= arr[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(arr, target): seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return ()"},{"question":"Given an array of integers, transform it into a new array in which each integer is replaced by the product of all other integers in the original array, except the one at that index. Input Format - The first line consists of an integer `T`, the number of test cases. - Each test case consists of two lines: - The first line consists of an integer `N`, the number of integers in the array. - The second line consists of `N` space-separated integers denoting the array elements. Output Format For each test case, output the resulting array, where each element is the product of all other elements from the original array. Constraints - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 10^5 - 1 ≤ A_{i} ≤ 1000 - The product of elements will fit in a 64-bit signed integer. - The sum of N over all test cases will not exceed 10^6. Sample Input 1 ``` 2 3 1 2 3 4 4 5 1 2 ``` Sample Output 1 ``` 6 3 2 10 8 40 20 ``` Explanation For the first test case, the resulting array is `[2*3, 1*3, 1*2] = [6, 3, 2]`. For the second test case, the resulting array is `[5*1*2, 4*1*2, 4*5*2, 4*5*1] = [10, 8, 40, 20]`.","solution":"def transform_array(arr): n = len(arr) if n == 0: return [] # Create arrays to store left and right products left_products = [1] * n right_products = [1] * n # Fill left_products for i in range(1, n): left_products[i] = left_products[i-1] * arr[i-1] # Fill right_products for i in range(n-2, -1, -1): right_products[i] = right_products[i+1] * arr[i+1] # Compute the final product array result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result def process_input(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(transform_array(arr)) return results"},{"question":"You are given a string containing digits from 0 to 9. The digits can be rearranged to form different integers. Your task is to determine whether any permutation of the digits in the string is divisible by 8. Write a function `is_divisible_by_8(s: str) -> str` that takes a string `s` consisting of digits and returns \\"YES\\" if any permutation of the digits can form a number divisible by 8, and \\"NO\\" otherwise. ------ Input ------ The input consists of a single string `s` of length between 1 and 1000, inclusive, containing digits from 0 to 9. ------ Output ------ Print a single line containing \\"YES\\" or \\"NO\\". ------ Constraints ------ - The length of the string `s` is between 1 and 1000, inclusive. - The string `s` contains only digits (\'0\'-\'9\'). ----- Sample Input 1 ------ 123 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 314 ----- Sample Output 2 ------ NO ----- Explanation 1 ------ 1. For the first case, one possible permutation is \'312\', which is divisible by 8. 2. For the second case, no permutation of the digits \'3\', \'1\', and \'4\' forms a number divisible by 8.","solution":"from itertools import permutations def is_divisible_by_8(s: str) -> str: Determines if any permutation of the digits in the given string can form a number divisible by 8. # Check if any permutation of 1, 2 or 3-digit suffix is divisible by 8 n = len(s) if n < 3: all_perms = set(\\"\\".join(p) for p in permutations(s, n)) else: all_perms = set(\\"\\".join(p) for i in range(1, 4) for p in permutations(s, i)) for num in all_perms: if int(num) % 8 == 0: return \\"YES\\" return \\"NO\\""},{"question":"John is organizing a racing event and needs to determine the rankings of participants based on their finishing times. He has collected the finish times for each participant, but he needs your help to rank them from the fastest to the slowest. If two participants have the same finish time, they should have the same rank. The following participants\' times need to be ranked accordingly. -----Constraints----- - The number of participants N is an integer such that 2 ≤ N ≤ 100. - Each participant has a finish time provided as an integer in seconds (0 ≤ finish time ≤ 86400). -----Input----- Input is provided from Standard Input in the following format: - The first line contains an integer N, the number of participants. - The next line contains N integers, representing the finishing times of each participant. -----Output----- Print N integers in a single line, representing the ranks of the participants in the same order as the input finish times. -----Sample Input----- 5 320 450 320 320 470 -----Sample Output----- 1 2 1 1 3 Explanation: There are five participants, and their finish times are [320, 450, 320, 320, 470]. The fastest time is 320, so those participants receive rank 1. The second fastest time is 450, so the participant with that time receives rank 2. The slowest time is 470, so the participant with that time receives rank 3. The ranks are output in the original order of the input.","solution":"def rank_participants(times): Determines the rankings of participants based on their finishing times. Parameters: times (list of int): a list of finishing times of participants. Returns: list of int: the ranks of the participants in the same order as the input finishing times. # Create a sorted list of unique times unique_sorted_times = sorted(set(times)) # Create the rank lookup dictionary ranks = {time: rank+1 for rank, time in enumerate(unique_sorted_times)} # Map the input times to their respective ranks result = [ranks[time] for time in times] return result"},{"question":"Given two strings representing large numbers, your task is to write a function that returns their sum. You should handle these numbers as strings to avoid potential overflow issues with very large integers. For example: - Input: \\"123456789123456789\\", \\"987654321987654321\\" - Output: \\"1111111111111111110\\" Your function should work for numbers of arbitrary length.","solution":"def add_large_numbers(num1, num2): Returns the sum of two large numbers represented as strings. # Reverse the numbers to make addition easier num1 = num1[::-1] num2 = num2[::-1] max_len = max(len(num1), len(num2)) carry = 0 result = [] for i in range(max_len): digit1 = int(num1[i]) if i < len(num1) else 0 digit2 = int(num2[i]) if i < len(num2) else 0 total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) if carry: result.append(carry) # Reverse the result and convert to string return \'\'.join(map(str, result[::-1]))"},{"question":"Given a string `S` consisting of lowercase alphabets, commas, and digits, you need to extract the comma-separated integer values and return their sum. Write a function that takes a string as input and returns the sum of the integers extracted. Example 1: Input: `S = \\"a1,b2,c3\\"` Output: `6` Explanation: The numbers extracted from the string are [1, 2, 3] and their sum is 1 + 2 + 3 = 6. Example 2: Input: `S = \\"d11,e22,f33\\"` Output: `66` Explanation: The numbers extracted from the string are [11, 22, 33] and their sum is 11 + 22 + 33 = 66. User Task: Your task is to complete the function `extractAndSumNumbers` which takes a single string as input and returns an integer representing the sum of the numbers extracted. You do not need to take any input or print anything. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: - 1 <= |S| <= 10^{5} - The string contains lowercase English alphabets, commas, and digits. - The digits in the string are non-negative integers with no leading zeros. - The sum of the digits in any segment will always be a valid integer.","solution":"def extractAndSumNumbers(S): Extracts integers from the input string `S` and returns their sum. Parameters: S (str): The input string containing lowercase letters, digits, and commas. Returns: int: The sum of the extracted integers. import re nums = re.findall(r\'d+\', S) return sum(map(int, nums))"},{"question":"# Problem Statement A company is developing a new software system that requires organizing employee data in a specific way. Each employee has a unique ID and belongs to one of several departments. Each department has a unique department ID. The task is to process the employee data to prepare it for creating department-specific reports. For each department, you need to gather all the employee IDs that belong to it, sort them in ascending order, and print them. ------ Input section ------ The first line contains N, the number of employees. The next N lines each contain two integers, E and D, where: - E is the employee ID. - D is the department ID. ------ Output section ------ For each department, output the department ID followed by the sorted list of employee IDs who belong to that department. The department IDs should appear in ascending order in the output. ------ Input constraints ------ 1 ≤ N ≤ 1000 1 ≤ E ≤ 10000, where E is the employee ID. 1 ≤ D ≤ 100, where D is the department ID. --- Sample Input 1 ------ 5 1001 10 1002 20 1003 10 1004 30 1005 20 --- Sample Output 1 ------ 10 1001 1003 20 1002 1005 30 1004 --- Explanation 1 ------ There are three departments, with IDs 10, 20, and 30. The sorted employee IDs for each department are: - For department 10: 1001, 1003. - For department 20: 1002, 1005. - For department 30: 1004. # Note: - Ensure to handle cases with no employees in one or more departments gracefully by not printing those departments. - The expected output format must adhere to the requirements strictly, as specified in the output section.","solution":"def process_employee_data(n, employee_data): Processes the employee data to group employees by department and sort them. Parameters: n (int): The number of employees. employee_data (List[Tuple[int, int]]): A list of tuples where each tuple contains an employee ID and department ID. Returns: List[Tuple[int, List[int]]]: A list of tuples where each tuple contains a department ID and a sorted list of corresponding employee IDs. from collections import defaultdict departments = defaultdict(list) for emp_id, dept_id in employee_data: departments[dept_id].append(emp_id) result = [] for dept_id in sorted(departments): sorted_emp_ids = sorted(departments[dept_id]) result.append((dept_id, sorted_emp_ids)) return result def format_department_output(department_data): Formats the department data for output. Parameters: department_data (List[Tuple[int, List[int]]]): A list of tuples where each tuple contains a department ID and its corresponding list of employee IDs. Returns: List[str]: A list of strings each representing the department ID followed by sorted employee IDs. formatted_output = [] for dept_id, emp_ids in department_data: formatted_output.append(f\\"{dept_id} {\' \'.join(map(str, emp_ids))}\\") return formatted_output"},{"question":"In a parallel universe, performance on programming assessments is directly linked to food availability. You are part of a team managing a simulation project for food distribution. The land is represented as a grid of size n times m and is populated with various types of food sources. Each cell in the grid either contains a food source or is empty. The distribution of food sources is known beforehand. Your task is to calculate the total quantity of food available in a specified sub-grid after executing q operations. Each operation involves removing a specific food source from a particular cell. The quantity of food in a sub-grid is determined by summing up the remaining food sources within it. Consider each food source has a quantifiable amount of food associated with it, which is represented by an integer. -----Input----- The first line contains three integers n, m, and q (1 le n, m le 500; 1 le q le 100) — the number of rows, columns, and number of removal operations respectively. Each of the next n lines contains m integers representing the amount of food in each cell. An integer 0 denotes an empty cell with no food. The next q lines each contain two integers r and c (1 le r le n, 1 le c le m), representing the row and column indices of the cell where the food source will be removed. The last line contains four integers x1, y1, x2, y2 (1 le x1 le x2 le n, 1 le y1 le y2 le m), where (x1, y1) is the top-left cell and (x2, y2) is the bottom-right cell of the sub-grid for which you need to calculate the total food quantity. -----Output----- Print a single integer — the total quantity of food in the specified sub-grid after performing all the removal operations. -----Examples----- Input 3 3 2 4 5 0 6 7 3 1 2 8 2 3 1 1 2 2 3 3 Output 10 -----Note----- In the initial state, the grid is: 4 5 0 6 7 3 1 2 8 After performing the removal operations (removing food from (2, 3) and (1, 1)), the grid becomes: 4 0 0 6 7 0 1 2 8 The sub-grid from (2, 2) to (3, 3) is: 7 0 2 8 The total quantity of food in this sub-grid is 7 + 2 + 8 = 17.","solution":"def calculate_food_quantity(n, m, q, grid, operations, x1, y1, x2, y2): # Performing the removal operations for op in operations: r, c = op grid[r-1][c-1] = 0 # Calculating the total quantity of food in the specified sub-grid total_food = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total_food += grid[i][j] return total_food"},{"question":"Given an array of non-negative integers, you need to find the smallest positive integer that is not present in the array. Your task is to implement the function `findMissingPositive` that takes in an array and returns the smallest missing positive integer. Examples findMissingPositive([1, 2, 0]) should return 3 findMissingPositive([3, 4, -1, 1]) should return 2 findMissingPositive([7, 8, 9, 11, 12]) should return 1 The Task: Implement a function `findMissingPositive(nums)` that: - Takes an array of non-negative integers `nums`. - Returns the smallest positive integer that is missing from `nums`. - You should aim to achieve this in O(n) time complexity and O(1) extra space (disregarding input space). Constraints: - The array `nums` has a length between 1 and 10^5. - The values in the array `nums` are in the range from -10^6 to 10^6. Example Input nums = [1, 2, 0] Example Output 3 Note: Due to large input sizes, optimizing your solution for time and space efficiency is essential. Consider in-place algorithms that utilize the input array to minimize extra space usage.","solution":"def findMissingPositive(nums): Returns the smallest positive integer that is not present in the array. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with the element at its correct position nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"A factory has M machines arranged in a row. Each machine can be either on or off. The factory manager wants to minimize the number of transitions between on and off states across the entire arrangement of machines. A transition is defined as a change from an off state to an on state or an on state to an off state between two consecutive machines. You are given the initial states of the machines in an array A of length M, where A[i] is 1 if the i-th machine is on and 0 if it is off. The manager can switch any machine’s state at any time but must try to minimize the total number of transitions. Your task is to find the minimum number of transitions required in the optimized state of the machines. Input: The first line of the input contains an integer M, the number of machines. M is not greater than 1000. The second line contains M integers A1, A2, ..., AM where each Ai is either 0 or 1 indicating the initial state of each machine. Output: On the only line of the output print an integer representing the minimum number of transitions. Sample Input 5 0 1 0 1 0 Sample Output 2 Explanation In the given example, the initial number of transitions is 4 (between each pair of consecutive different states). By changing the states of the machines to either all 0s or all 1s, we can reduce the number of transitions to 0. However, by changing the states to 0 0 0 1 1 or 1 1 1 0 0, we end up with a total of 2 transitions. Hence, the minimum number of transitions is 2.","solution":"def minimize_transitions(M, A): Returns the minimum number of transitions required in the optimized state of the machines. :param M: The number of machines :param A: List of integers representing the initial state of each machine (0 for off, 1 for on) :return: Minimum number of transitions # Count transitions in initial state initial_transitions = sum(A[i] != A[i + 1] for i in range(M - 1)) # To minimize transitions, all machines should be in the same state in the optimized state return (initial_transitions + 1) // 2"},{"question":"A simple text editing software allows the user to perform two types of operations on a string: 1. **Append** a character to the end of the string. 2. **Delete** the last character of the string. You are given an initial empty string and a set of `n` operations. Your task is to determine the length of the resulting string after all operations are performed. **Input** - The first line contains a single integer `n` (1 <= n <= 100,000), representing the number of operations to be performed. - The next `n` lines contain either: - `1 c` (where `c` is a lowercase English letter \'a\'-\'z\') representing an append operation, or, - `2` representing a delete operation. **Output** - Output a single integer representing the length of the final string after performing all the operations. **Example** **Input** ``` 5 1 a 1 b 1 c 2 2 ``` **Output** ``` 1 ``` **Explanation:** 1. After the first operation (`1 a`), the string is \\"a\\". 2. After the second operation (`1 b`), the string is \\"ab\\". 3. After the third operation (`1 c`), the string is \\"abc\\". 4. After the fourth operation (`2`), the string is \\"ab\\". 5. After the fifth operation (`2`), the string is \\"a\\". The final string length is `1`.","solution":"def final_string_length(n, operations): Determines the length of the resulting string after performing the given operations. Parameters: n (int): the number of operations to be performed. operations (list of str): the operations to perform. Returns: int: the length of the resulting string. string_length = 0 for operation in operations: if operation.startswith(\\"1 \\"): string_length += 1 elif operation == \\"2\\": if string_length > 0: string_length -= 1 return string_length"},{"question":"Little Alina likes triangles a lot. She recently learned about the concept of triangular numbers. A triangular number or triangle number is a number that can be represented as a triangle with dots. The nth triangular number is the sum of the first n natural numbers (i.e., `T_n = n * (n + 1) / 2`). Alina now wonders if there\'s a way to find out the nth triangular number given its position. Write a program to compute the nth triangular number. -----Input----- The input consists of a single line containing an integer n (1 ≤ n ≤ 10^5), where n is the position of the triangular number. -----Output----- Print a single integer — the nth triangular number. -----Examples----- Input 5 Output 15 Input 3 Output 6 Input 7 Output 28 -----Note----- In the first sample, the 5th triangular number is calculated as `5 * (5 + 1) / 2 = 15`. In the second sample, the 3rd triangular number is calculated as `3 * (3 + 1) / 2 = 6`. In the third sample, the 7th triangular number is calculated as `7 * (7 + 1) / 2 = 28`.","solution":"def nth_triangular_number(n): Computes the nth triangular number. :param n: The position of the triangular number (1 ≤ n ≤ 10^5) :return: The nth triangular number return n * (n + 1) // 2"},{"question":"Given a string expression containing only digits and \'+\', \'-\', \'*\', \'/\', return the final simplified result as a string. The input expression may contain white spaces and is guaranteed to be a valid mathematical expression. You should handle the mathematical operations of addition, subtraction, multiplication, and division respecting their precedence (i.e., multiplication and division take precedence over addition and subtraction) and ignoring integer overflow/underflow during the intermediate calculations. Division should truncate towards zero. Write a function simplifyExpression that takes in a string expression and returns the simplified result as a string. Example: Input: \\" 3+5 / 2 \\" Output: \\"5\\" Input: \\"14-3/2\\" Output: \\"13\\" Input: \\" 2-3*2 \\" Output: \\"-4\\" Your Task: Implement the function string simplifyExpression(string expression). The function simplifyExpression must run in O(N) average time complexity, where N is the length of the string expression. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: - The length of the given string expression will be between [1, 3 * 10^4] - The string expression will be a non-empty string that contains only digits and \'+\', \'-\', \'*\', \'/\', and white spaces.","solution":"def simplifyExpression(expression: str) -> str: def evaluate(tokens): stack = [] num = 0 sign = \'+\' while tokens: char = tokens.pop(0) if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) # integer division truncates towards zero sign = char num = 0 return sum(stack) tokens = [c for c in expression if c != \' \'] result = evaluate(tokens) return str(result)"},{"question":"Suppose you are given a binary tree, represented by nodes numbered from 1 to n. Each node has a value associated with it, initially set to 0. You are provided with a series of operations, where each operation changes the value of the nodes in a specific subtree by adding a certain amount to each node in that subtree. Your task is to determine the final value of each node after all operations have been applied. A subtree rooted at a node v includes v and all its descendants in the tree. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the number of nodes in the binary tree and the number of operations respectively. Each of the next n−1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) — indicating that there is an edge between node ui and node vi. The next m lines contain two integers vj and xj (1 ≤ vj ≤ n, −1000 ≤ xj ≤ 1000) — representing an operation where the value xj is added to every node in the subtree rooted at node vj. Output Print n integers — the final values of the nodes in the given order, from 1 to n. Example Input 5 3 1 2 1 3 3 4 3 5 1 10 3 5 4 -2 Output 10 10 15 13 15 Input 3 2 1 2 1 3 1 5 2 3 Output 5 8 5 Note In the first example, after applying the first operation, all nodes have a value of 10. Applying the second operation adds 5 to nodes 3, 4, and 5. After the third operation, 2 is subtracted from nodes 4, leaving the final values as described. In the second example, the first operation adds 5 to all nodes. The second operation adds an additional 3 to node 2, resulting in the final values.","solution":"def apply_operations(n, m, edges, operations): from collections import defaultdict, deque tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) values = [0] * (n + 1) subtree_updates = defaultdict(int) def bfs(start): visited = set() queue = deque([start]) order = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) order.append(node) for neighbor in tree[node]: if neighbor not in visited: queue.append(neighbor) return order root_order = bfs(1) for v, x in operations: subtree_updates[v] += x def dfs(node, parent_value): values[node] += parent_value + subtree_updates[node] for neighbor in tree[node]: if values[neighbor] == 0: # Ensure we don\'t go back to parent in undirected graph dfs(neighbor, values[node]) dfs(1, 0) return values[1:]"},{"question":"A company is developing a new software program, and they need to implement a feature to ensure the system can efficiently handle frequent updates. The system consists of a single array of integers. The software should perform two types of operations: 1. **Update**: Given an index and a value, update the integer at the specified index with the new value. 2. **Range Sum Query**: Given a range [l, r], find the sum of the elements in the range from index l to index r (inclusive). Implement a solution that efficiently supports these operations. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of operations. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the initial elements of the array. Each of the next q lines contains an operation. An operation can be one of the following: - \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 1000) — update the element at index x to y. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — query the sum of elements in the range [l, r]. Output For each \\"2 l r\\" operation, output the sum of the elements in the specified range. Examples Input 5 5 1 2 3 4 5 2 1 5 1 3 10 2 2 4 1 5 6 2 3 5 Output 15 16 20 Explanation Initially, the array is [1, 2, 3, 4, 5]. - The sum of the range [1, 5] is 1 + 2 + 3 + 4 + 5 = 15. - After updating index 3 to 10, the array becomes [1, 2, 10, 4, 5]. - The sum of the range [2, 4] is 2 + 10 + 4 = 16. - After updating index 5 to 6, the array becomes [1, 2, 10, 4, 6]. - The sum of the range [3, 5] is 10 + 4 + 6 = 20.","solution":"class NumberArray: def __init__(self, array): self.array = array self.prefix_sum = [0] * (len(array) + 1) for i in range(len(array)): self.prefix_sum[i + 1] = self.prefix_sum[i] + array[i] def update(self, index, value): diff = value - self.array[index] self.array[index] = value for i in range(index + 1, len(self.prefix_sum)): self.prefix_sum[i] += diff def range_sum(self, l, r): return self.prefix_sum[r + 1] - self.prefix_sum[l] def solution(n, q, arr, operations): number_array = NumberArray(arr) results = [] for operation in operations: if operation[0] == 1: _, x, y = operation number_array.update(x - 1, y) elif operation[0] == 2: _, l, r = operation results.append(number_array.range_sum(l - 1, r - 1)) return results"},{"question":"Write a function that takes a string containing only square brackets `[]` and determines if the string is balanced. A string is considered balanced if every opening bracket `[` has a corresponding closing bracket `]` and the pairs of brackets are properly nested. For example: - \\"[]\\" is balanced. - \\"[[]]\\" is balanced. - \\"[][]\\" is balanced. - \\"[[[]]\\" is not balanced. - \\"[]][\\" is not balanced. The function should return `True` if the string is balanced, and `False` otherwise. Example 1: ``` Input: \\"[[]]\\" Output: True ``` Example 2: ``` Input: \\"[][]\\" Output: True ``` Example 3: ``` Input: \\"[]]\\" Output: False ``` Example 4: ``` Input: \\"[[[]]\\" Output: False ```","solution":"def is_balanced(brackets): Returns True if the string containing only square brackets is balanced, False otherwise. stack = [] for char in brackets: if char == \'[\': stack.append(char) elif char == \']\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are given a number n which represents a file size in bytes. You need to convert that size into a human-readable format using binary prefixes. The possible units are \\"B\\" (bytes), \\"KiB\\" (kibibytes), \\"MiB\\" (mebibytes), \\"GiB\\" (gibibytes), and \\"TiB\\" (tebibytes). Each unit should be a power of 1024 bytes: - 1 KiB = 1024 B - 1 MiB = 1024 KiB - 1 GiB = 1024 MiB - 1 TiB = 1024 GiB You need to write a function that takes an integer n and converts it to the largest appropriate unit without the decimal portion. The value should be followed by the appropriate unit. -----Input----- The input contains a single integer n (0 ≤ n ≤ 10^18) — the size of the file in bytes. -----Output----- Print a single string representing the file size converted to the largest appropriate unit followed by the corresponding unit. -----Examples----- Input 1234 Output 1 KiB Input 1048576 Output 1 MiB Input 1099511627776 Output 1 TiB","solution":"def human_readable_size(n): Convert a file size in bytes to the largest appropriate unit using binary prefixes. Parameters: n (int): File size in bytes. Returns: str: Human-readable file size with binary prefix. if n < 1024: return f\\"{n} B\\" elif n < 1024**2: return f\\"{n // 1024} KiB\\" elif n < 1024**3: return f\\"{n // (1024**2)} MiB\\" elif n < 1024**4: return f\\"{n // (1024**3)} GiB\\" else: return f\\"{n // (1024**4)} TiB\\""},{"question":"Chef and his friend are playing a game where they deal with numbers. They take three integers A, B, and K. Chef needs to find out if it is possible to choose two integers X and Y (both between A and B inclusive, where X ≤ Y) such that the difference between Y and X is at least K. ------ Input Format ------ - The first line of the input contains a single integer T - the number of test cases. The test cases then follow. - The first line of each test case contains three space-separated integers A, B, and K. ------ Output Format ------ For each test case, if it is possible to choose such integers X and Y, output \\"YES\\". Otherwise, output \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings Yes, yeS, YES, and yes will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ A ≤ B ≤ 10^9 1 ≤ K ≤ 10^9 ------ subtasks ------ Subtask 1 (100 points): Original constraints ----- Sample Input 1 ------ 3 1 5 4 2 7 5 3 3 1 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ - Test Case 1: We can choose X = 1 and Y = 5. The difference is 5 - 1 = 4 which is equal to K, so the answer is \\"YES\\". - Test Case 2: We can choose X = 2 and Y = 7. The difference is 7 - 2 = 5 which is equal to K, so the answer is \\"YES\\". - Test Case 3: We cannot choose any X and Y such that the difference is at least 1 because A and B are the same. So the answer is \\"NO\\".","solution":"def can_choose_XY(A, B, K): Determines if it is possible to choose two integers X and Y (both between A and B inclusive, where X ≤ Y) such that the difference between Y and X is at least K. Arguments: A -- lower bound of the range (inclusive) B -- upper bound of the range (inclusive) K -- minimum required difference Returns: \\"YES\\" if possible, otherwise \\"NO\\" if B - A >= K: return \\"YES\\" else: return \\"NO\\" def solve_game(test_cases): Solves the Chef game problem for multiple test cases. Arguments: test_cases -- list of tuples, each containing three integers (A, B, K) Returns: list of strings, each being either \\"YES\\" or \\"NO\\" results = [] for A, B, K in test_cases: results.append(can_choose_XY(A, B, K)) return results"},{"question":"Write a program to check whether a given string is a valid hexadecimal number. A valid hexadecimal number is defined as follows: - It can optionally start with \\"0x\\" or \\"0X\\". - The characters can only be 0-9, a-f, and A-f. - It must be at least one character long excluding the optional prefix. Your task is to complete the function isHexadecimal which takes the decimal number in the form of a string and returns 1 if the given string is a valid hexadecimal number else returns 0. Example 1: Input: hexString = \\"0x1A3F\\" Output: 1 Explanation: \\"0x1A3F\\" is a valid hexadecimal number as it starts with \\"0x\\" and contains valid hexadecimal characters. Example 2: Input: hexString = \\"123G\\" Output: 0 Explanation: \\"123G\\" is not a valid hexadecimal number as \'G\' is not a valid hexadecimal character. Your Task: Complete the function isHexadecimal() which takes the string s as an input parameter and returns 1 if the string is a valid hexadecimal number, otherwise returns 0. Expected Time Complexity: O(N), N = length of the string. Expected Auxiliary Space: O(1) Constraints: 1<= length of string <= 50 Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by a user for Expected Output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified and not to write the full code.","solution":"def isHexadecimal(s): Returns 1 if the given string is a valid hexadecimal number, otherwise returns 0. if s.startswith(\\"0x\\") or s.startswith(\\"0X\\"): s = s[2:] # Check if the string is empty after removing the optional prefix if not s: return 0 # Check if all characters in the string are valid hexadecimal characters for char in s: if not (char.isdigit() or \'a\' <= char <= \'f\' or \'A\' <= char <= \'F\'): return 0 return 1"},{"question":"You are participating in a grand marathon that requires running through a series of checkpoints. At each checkpoint, you collect a unique badge. The badges you collect determine your rank in the marathon, and each badge has a unique difficulty score indicating how challenging it was to obtain. The marathon organizers have decided to award special prizes based on these difficulty scores. The difficulty score of a player\'s entire badge collection is determined as follows: - Calculate the total sum of the individual difficulty scores. - Determine the highest common divisor (HCD) of these individual difficulty scores. Your objective is to compute the highest common divisor of the difficulty scores of the badges collected by a runner. -----Input----- - The first line contains an integer 1 leq n leq 1000, the number of badges collected. - The second line contains n integers 1 leq d_i leq 10^6, the difficulty scores of the badges. -----Output----- - Output a single integer: the highest common divisor of the difficulty scores of the badges collected. -----Examples----- Sample Input 1: 3 6 9 12 Sample Output 1: 3 Sample Input 2: 5 2 4 6 8 10 Sample Output 2: 2 Sample Input 3: 4 1 13 17 19 Sample Output 3: 1","solution":"import math from functools import reduce def highest_common_divisor(n, difficulty_scores): Returns the highest common divisor of the difficulty scores. def gcd(a, b): return math.gcd(a, b) return reduce(gcd, difficulty_scores)"},{"question":"Write a function `rearrange_digits` that takes an input list of non-negative integers and returns two numbers formed by rearranging the digits of these integers such that their sum is maximized. You should maintain the order of digits as present in the list to form the final numbers. The function should perform efficiently with a maximum time complexity of O(n log n). # Example ```python rearrange_digits([4, 6, 2, 5, 9, 8]) # returns (964, 852) rearrange_digits([1, 2, 3, 4, 5]) # returns (531, 42) ``` # Explanation - For the input `[4, 6, 2, 5, 9, 8]`, one optimal way to form two numbers is by taking digits at alternate positions, giving `964` and `852` whose sum is `1816`. - For the input `[1, 2, 3, 4, 5]`, one optimal way is `531` and `42`, resulting in the sum of `573`. # Constraints - Each integer in the input list is a single digit ranging from 0 to 9. - The length of the list will be in the range [1, 50]. # Signature ```python def rearrange_digits(input_list: List[int]) -> Tuple[int, int]: ```","solution":"from typing import List, Tuple def rearrange_digits(input_list: List[int]) -> Tuple[int, int]: Rearranges digits in the input list to form two numbers such that their sum is maximized. :param input_list: A list of non-negative single-digit integers. :return: A tuple of two integers. # Sort the list in descending order sorted_digits = sorted(input_list, reverse=True) # Distribute the digits to form two numbers num1, num2 = [], [] for i, digit in enumerate(sorted_digits): if i % 2 == 0: num1.append(str(digit)) else: num2.append(str(digit)) # Convert the lists of digits back to integers num1 = int(\'\'.join(num1)) if num1 else 0 num2 = int(\'\'.join(num2)) if num2 else 0 return num1, num2"},{"question":"Number Puzzle Game You are designing a number puzzle game. In this game, the player is given an integer array and the objective is to make all elements of the array equal by performing a certain operation. The allowed operation is selecting a subarray and incrementing each element within this subarray by 1. You need to determine the minimum number of operations required to make all the elements of the array equal. The operation to increment subarray elements can be performed as many times as needed, but it must be optimized for the least number of operations. # Input Format The input consists of multiple test cases. * The first line contains an integer T, the number of test cases (1 ≤ T ≤ 50). * Each test case is represented by two lines: * The first line contains a single integer N, the size of the array (1 ≤ N ≤ 100,000). * The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1,000,000), representing the elements of the array. # Output Format For each test case, output a single integer, the minimum number of operations required to make all elements equal. # Examples Input ``` 2 3 1 2 3 4 2 2 3 3 ``` Output ``` 2 1 ``` Explanation **Example 1:** - Starting array: [1, 2, 3] - Step 1: Increment the subarray [2, 3] to get [1, 3, 4] - Step 2: Increment the subarray [1, 3, 4] to get [2, 4, 5] - Step 3: Increment the subarray [2, 4, 5] to get [3, 5, 6] - Assume the operation is optimized, it takes 2 operations to make all elements equal (selecting appropriate subarrays each time). **Example 2:** - Starting array: [2, 2, 3, 3] - Step 1: Increment the subarray [2, 2, 3, 3] to get [3, 3, 4, 4] - Step 2: It takes 1 operation to make all elements equal.","solution":"def min_operations_to_make_equal(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_value = max(arr) min_value = min(arr) results.append(max_value - min_value) return results # Example usage: # test_cases = [(3, [1, 2, 3]), (4, [2, 2, 3, 3])] # min_operations_to_make_equal(2, test_cases)"},{"question":"A group of adventurers is exploring a grid-based map. The map is a matrix of size n by m, where each cell can be either walkable (represented by \'.\') or blocked by an obstacle (represented by \'#\'). Each adventurer can move up, down, left, or right but cannot move into or through cells with obstacles. The adventurers start at given positions and they want to explore the entire map to collect treasures. A treasure can only be collected if an adventurer can reach it. The task is to determine whether each adventurer can reach a cell containing treasure or not. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 200) — the dimensions of the map. Each of the next n lines contains m characters, either \'.\' or \'#\' giving the map itself. The next line contains an integer t (1 ≤ t ≤ 50) — the number of treasures. Each of the next t lines contains two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) describing the coordinates of a cell containing treasure (xi is the row number and yi is the column number). The next line contains an integer a (1 ≤ a ≤ 50) — the number of adventurers. Each of the next a lines contains two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) describing the starting positions of the adventurers (xi is the row number and yi is the column number). Output For each adventurer, print \\"YES\\" if they can reach at least one treasure. Print \\"NO\\" if they cannot reach any treasures. Examples Input 5 5 ..... .#. .#... ..# #.... 2 2 3 4 5 3 2 1 3 3 4 2 Output YES YES NO Input 6 6 .#.. ....#. .# #....# .. .#.... 3 2 2 4 4 6 1 2 1 6 6 6 Output NO YES Note In the first example, the 5x5 grid has two treasures at (2, 3) and (4, 5). The adventurers start at (2, 1), (3, 3), and (4, 2). The first and second adventurers can reach treasures, but the third one can\'t reach any treasure because all paths are blocked. In the second example, the 6x6 grid has treasures at (2, 2), (4, 4), and (6, 1). The adventurers start at (1, 6) and (6, 6). The first adventurer can\'t reach any treasures because all paths are blocked by obstacles. The second adventurer can reach the treasure at (6, 1).","solution":"def explore_map(n, m, grid, treasures, adventurers): Determines if each adventurer can reach at least one treasure :param n: int, Number of rows in the grid :param m: int, Number of columns in the grid :param grid: list of strings, The map of the grid :param treasures: list of tuples, Coordinates of the treasures :param adventurers: list of tuples, Starting positions of the adventurers :return: list of strings, \\"YES\\" or \\"NO\\" for each adventurer from collections import deque def bfs(start, visited): queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) # Convert coordinates to 0-based for easier calculations in Python treasures = [(x-1, y-1) for x, y in treasures] adventurers = [(x-1, y-1) for x, y in adventurers] # Result list results = [] for ax, ay in adventurers: if grid[ax][ay] == \'#\': results.append(\\"NO\\") continue visited = [[False] * m for _ in range(n)] bfs((ax, ay), visited) if any(visited[tx][ty] for tx, ty in treasures): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Maria is an aspiring software engineer and is working on developing a relational database. She needs to design an efficient query to retrieve information from a set of records about different items in a store. Each record contains the item\'s name, category, price, and quantity in stock. Maria wants to find out the most expensive item in each category whose quantity in stock is greater than zero. If two items in the same category have the same price, Maria would like to retrieve the one that appears first in the list of records. Write a function `most_expensive_items` that takes a list of records, where each record is a tuple containing four elements: a string item name, a string category, a float price, and an integer quantity in stock. The function should return a dictionary where each key is a category and the corresponding value is a tuple with the name and price of the most expensive item in that category with a quantity greater than zero. # Input Format - A list of tuples, where each tuple contains: - `name` (string): The name of the item. - `category` (string): The category the item belongs to. - `price` (float): The price of the item. - `quantity` (int): The quantity of the item in stock. # Output Format - A dictionary where each key is a category (string) and the corresponding value is a tuple containing: - `name` (string): The name of the most expensive item in that category. - `price` (float): The price of the most expensive item in that category. # Constraints - The input list will contain at most 10^4 records. - The length of the item name and category strings will not exceed 100 characters. - Prices will be between 0 and 10^6, inclusive, and will be represented with at most 2 decimal places. - Quantities will be non-negative integers and will be at most 10^3. # Example Input ```python [ (\\"apple\\", \\"fruit\\", 1.00, 10), (\\"orange\\", \\"fruit\\", 1.50, 20), (\\"banana\\", \\"fruit\\", 1.20, 0), (\\"broccoli\\", \\"vegetable\\", 3.50, 5), (\\"carrot\\", \\"vegetable\\", 2.75, 0), (\\"beef\\", \\"meat\\", 10.00, 2), (\\"chicken\\", \\"meat\\", 7.75, 8) ] ``` Output ```python { \\"fruit\\": (\\"orange\\", 1.50), \\"vegetable\\": (\\"broccoli\\", 3.50), \\"meat\\": (\\"beef\\", 10.00) } ``` Note In the given example: - For the \\"fruit\\" category, even though \\"banana\\" has a price of 1.20, its quantity is 0. Hence, \\"orange\\" with a price of 1.50 is chosen. - For the \\"vegetable\\" category, \\"broccoli\\" with a price of 3.50 and in stock is chosen. - For the \\"meat\\" category, \\"beef\\" with a price of 10.00 is chosen over \\"chicken\\" with a price of 7.75.","solution":"def most_expensive_items(records): Returns a dictionary where each key is a category and the corresponding value is a tuple containing the name and price of the most expensive item in that category with quantity > 0. most_expensive = {} for name, category, price, quantity in records: if quantity > 0: if category not in most_expensive or price > most_expensive[category][1]: most_expensive[category] = (name, price) return most_expensive"},{"question":"Aman loves playing with numbers. His teacher gave him a task to determine whether a given number is a Harshad number or not. A Harshad number is an integer that is divisible by the sum of its digits. Input The first line inputs number of test cases \'T\'. Next T lines have T integers. Output Print \\"YES\\" if the number is a Harshad number and \\"NO\\" otherwise in different lines. Constraint T ≤ 15 Each number ≤ 10^6 SAMPLE INPUT 3 18 1729 23 SAMPLE OUTPUT YES YES NO","solution":"def is_harshad_number(n): Determines if the number n is a Harshad number. A Harshad number is an integer that is divisible by the sum of its digits. Parameters: n (int): The number to be checked. Returns: bool: True if n is a Harshad number, False otherwise. sum_of_digits = sum(int(digit) for digit in str(n)) return n % sum_of_digits == 0 def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): number = int(data[i]) if is_harshad_number(number): results.append(\'YES\') else: results.append(\'NO\') for result in results: print(result)"},{"question":"Alice is trying to convert a list of integers into a list of their binary string representations. However, the binary strings should always be 8 bits long, with leading zeros if necessary. Alice needs your help to write a program that performs this conversion. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. Then the test cases follow. - Each test case consists of a single line of input. The line will contain an integer N, which is the number of integers in the list, followed by N space-separated integers. ------ Output Format ------ For each test case, output a single line containing N space-separated 8-bit binary strings corresponding to the given integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ text{integer} < 256 ------ Sample Input 1 ------ 2 5 3 7 15 32 255 3 4 5 6 ------ Sample Output 1 ------ 00000011 00000111 00001111 00100000 11111111 00000100 00000101 00000110 ------ Explanation 1 ------ Test case 1: The integers 3, 7, 15, 32, and 255 are converted to their 8-bit binary representations: \\"00000011\\", \\"00000111\\", \\"00001111\\", \\"00100000\\", and \\"11111111\\" respectively. Test case 2: The integers 4, 5, and 6 are converted to their 8-bit binary representations: \\"00000100\\", \\"00000101\\", and \\"00000110\\" respectively.","solution":"def convert_to_8_bit_binary(T, test_cases): Converts a list of integers to their 8-bit binary string representations. :param T: Number of test cases :param test_cases: List of test cases, where each test case is a tuple (N, integers) :return: List of strings, where each string is the 8-bit binary representation of the integers in the test case results = [] for case in test_cases: N, integers = case binary_strings = [format(num, \'08b\') for num in integers] results.append(\\" \\".join(binary_strings)) return results # It\'s convenient to have a function to parse input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): data = list(map(int, lines[i].split())) N = data[0] integers = data[1:] test_cases.append((N, integers)) return T, test_cases"},{"question":"Emma loves programming contests. When she practices, she likes to simulate competitions by solving several problems in a row. She wants to track her performance by recording the time taken to solve each problem. After a session, she realizes that she wants a summary of her performance: the shortest time, the longest time, the average time, and the median time taken to solve a problem. Can you help Emma write a program that computes these metrics? -----Input----- The first line of input contains an integer n (1 le n le 100000), the number of problems Emma has solved. The next n lines each contain an integer t (0 le t le 10^6), the time in seconds it took Emma to solve each problem. -----Output----- Print four lines, each containing a single floating point number rounded to two decimal places: 1. The shortest time among the problems. 2. The longest time among the problems. 3. The average time of all the problems. 4. The median time of all the problems. -----Example----- Sample Input 1: 5 120 150 300 50 90 Sample Output 1: 50.00 300.00 142.00 120.00 Sample Input 2: 4 1000 2000 1500 3000 Sample Output 2: 1000.00 3000.00 1875.00 1750.00","solution":"def performance_metrics(times): This function takes a list of times taken to solve problems and returns a tuple containing: - the shortest time - the longest time - the average time - the median time n = len(times) if n == 0: return 0.00, 0.00, 0.00, 0.00 times.sort() shortest_time = times[0] longest_time = times[-1] average_time = sum(times) / n if n % 2 == 1: median_time = times[n // 2] else: median_time = (times[n // 2 - 1] + times[n // 2]) / 2 return round(shortest_time, 2), round(longest_time, 2), round(average_time, 2), round(median_time, 2) def metrics_from_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) times = [int(lines[i+1]) for i in range(n)] return performance_metrics(times)"},{"question":"*Design Your Own Number System* You are asked to design a new number system based on a specific set of rules. The challenge is to convert a given integer from this new number system back to the familiar decimal (base-10) number system. Below are the rules for your new number system: 1. The number system uses only the digits `0`, `1`, and `2`. 2. Each position represents powers of 3. For instance, the rightmost position represents 3^0, the next one to the left represents 3^1, and so on. Write a function `convert_to_decimal` that takes a string representation of a number in this new number system and returns its decimal equivalent. # Function Signature ```python def convert_to_decimal(number: str) -> int: pass ``` # Input - `number` (a string): A string representation of a number in the new number system, all characters being either `0`, `1`, or `2`. # Output - An integer: The decimal equivalent of the provided number. # Example ```python convert_to_decimal(\\"21\\") == 7 convert_to_decimal(\\"102\\") == 11 convert_to_decimal(\\"2002\\") == 56 ``` # Explanation - The number \\"21\\" in the new number system is calculated as (2 times 3^1 + 1 times 3^0 = 6 + 1 = 7). - The number \\"102\\" in the new number system is calculated as (1 times 3^2 + 0 times 3^1 + 2 times 3^0 = 9 + 0 + 2 = 11). - The number \\"2002\\" in the new number system is calculated as (2 times 3^3 + 0 times 3^2 + 0 times 3^1 + 2 times 3^0 = 54 + 0 + 0 + 2 = 56). Implement the function and test it thoroughly to check if it adheres to the requirements and properly converts the numbers based on the newly defined rules.","solution":"def convert_to_decimal(number: str) -> int: Converts a number from the new number system (base-3 with digits 0, 1, 2) to a decimal (base-10) number. Args: number (str): The string representation of the number in the new number system. Returns: int: The decimal (base-10) equivalent of the input number. decimal = 0 length = len(number) for i, digit in enumerate(number): decimal += int(digit) * (3 ** (length - i - 1)) return decimal"},{"question":"A country\'s government decides to issue a new type of ID card that consists of an alphanumeric string. A valid ID card must contain at least one uppercase letter, at least one lowercase letter, and at least one digit. Given a list of ID card strings, determine if each ID card in the list is valid or not. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each of the next T lines contains a string S, representing an ID card. ------ Output Format ------ For each test case, output on a new line VALID if the corresponding ID card is valid. Otherwise, print INVALID. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ length(S) ≤ 100 ----- Sample Input 1 ------ 3 Abc123 aBc 1aB ----- Sample Output 1 ------ VALID INVALID VALID ----- Explanation 1 ------ Test case 1: The string \\"Abc123\\" contains one uppercase letter \'A\', one lowercase letter \'b\', and one digit \'1\'. Thus, it is a valid ID card. Test case 2: The string \\"aBc\\" contains one uppercase letter \'B\' and one lowercase letter \'a\', but it does not contain any digit. Thus, it is not a valid ID card. Test case 3: The string \\"1aB\\" contains one uppercase letter \'B\', one lowercase letter \'a\', and one digit \'1\'. Thus, it is a valid ID card.","solution":"def is_valid_id(id_card): Returns \'VALID\' if the ID card contains at least one uppercase letter, one lowercase letter, and one digit. Otherwise, returns \'INVALID\'. has_upper = any(char.isupper() for char in id_card) has_lower = any(char.islower() for char in id_card) has_digit = any(char.isdigit() for char in id_card) if has_upper and has_lower and has_digit: return \'VALID\' else: return \'INVALID\' def validate_id_cards(id_cards): Given a list of ID card strings, return a list indicating if each ID card is valid or not. return [is_valid_id(id_card) for id_card in id_cards]"},{"question":"In a post-apocalyptic world, survival has become a game of numbers. A group of survivors find themselves with a collection of relics, each with a unique energy level. They need to redistribute these relics to ensure that each subgroup of survivors has a balanced energy distribution. To achieve this, you are tasked with finding the minimum energy relic in each and every contiguous sub-list of size K. Example 1: Input: N = 8, K = 3 arr[] = 7 3 9 5 6 12 4 8 Output: 3 3 5 5 4 4 Explanation: 1st contiguous subarray = {7 3 9}, Min = 3 2nd contiguous subarray = {3 9 5}, Min = 3 3rd contiguous subarray = {9 5 6}, Min = 5 4th contiguous subarray = {5 6 12}, Min = 5 5th contiguous subarray = {6 12 4}, Min = 4 6th contiguous subarray = {12 4 8}, Min = 4 Example 2: Input: N = 6, K = 2 arr[] = 4 6 1 7 5 2 Output: 4 1 1 5 2 Explanation: 1st contiguous subarray = {4 6}, Min = 4 2nd contiguous subarray = {6 1}, Min = 1 3rd contiguous subarray = {1 7}, Min = 1 4th contiguous subarray = {7 5}, Min = 5 5th contiguous subarray = {5 2}, Min = 2 Your Task: You don\'t need to read input or print anything. Complete the function min_of_subarrays() which takes the array, N, and K as input parameters and returns a list of integers denoting the minimum of every contiguous subarray of size K. Constraints: 1 ≤ N ≤ 10^{6} 1 ≤ K ≤ N 0 ≤ arr[i] ≤ 10^{6}","solution":"def min_of_subarrays(arr, N, K): Function to find the minimum in every contiguous subarray of size K. :param arr: list of integers :param N: integer, the length of the list :param K: integer, the size of the subarray :return: list of integers, each being the minimum of the corresponding subarray from collections import deque if K > N or K == 0: return [] min_values = [] dq = deque() for i in range(N): # Remove elements out of the window while dq and dq[0] <= i - K: dq.popleft() # Remove elements not useful from dq while dq and arr[dq[-1]] >= arr[i]: dq.pop() dq.append(i) if i >= K - 1: min_values.append(arr[dq[0]]) return min_values"},{"question":"In a prestigious software development company, there\'s a problem that needs to be solved regarding networks of employees. The company is structured in a way where each employee can supervise multiple other employees, forming a tree-like hierarchy. Your task is to find out the distance between the longest two nodes, also known as the diameter of this tree. The diameter of a tree is the longest path between any two nodes in the tree. For example, consider a tree with 6 nodes and the following structure: * 1 is connected to 2 * 1 is connected to 3 * 3 is connected to 4 * 4 is connected to 5 * 4 is connected to 6 The longest path in this tree goes from node 2 to node 5 or node 6, both with a length of 4. Therefore, the diameter of this tree is 4. # Input - The first line contains a single integer `n` (2 ≤ n ≤ 1000), the number of nodes in the tree. - The following `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that there is an undirected edge connecting nodes `u` and `v`. # Output - Output a single integer, the diameter of the tree. # Example Input ``` 6 1 2 1 3 3 4 4 5 4 6 ``` Output ``` 4 ``` # Constraints - 2 ≤ n ≤ 1000 - 1 ≤ u, v ≤ n # Notes To solve this problem, you can use depth-first search (DFS) or breadth-first search (BFS) to find the diameter. One common approach involves performing two BFS operations. Start from an arbitrary node to find the farthest node, and from this farthest node, perform another BFS to find the farthest distance, which will be your answer.","solution":"from collections import defaultdict, deque def find_tree_diameter(n, edges): def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 farthest_node, max_distance = start, 0 while queue: current, distance = queue.popleft() for neighbor in tree[current]: if visited[neighbor] == -1: visited[neighbor] = distance + 1 queue.append((neighbor, distance + 1)) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform the first BFS to find the farthest node from any starting node (say node 1) node_a, _ = bfs(1) # Perform the second BFS starting from the farthest node found in first BFS _, diameter = bfs(node_a) return diameter # Example Usage: # n = 6 # edges = [(1, 2), (1, 3), (3, 4), (4, 5), (4, 6)] # print(find_tree_diameter(n, edges)) # Output: 4"},{"question":"In a distant kingdom, there is a town called Gridville which is arranged in an N times M grid. Each cell in the grid either contains a house or is empty. The mayor of Gridville wants to build a library on an empty cell such that the maximum distance from any house to the library is minimized. The distance between two cells (i_1, j_1) and (i_2, j_2) is defined as |i_2 - i_1| + |j_2 - j_1|. You are tasked with finding the optimal cell to build the library to achieve the mayor\'s goal. -----Input----- - The first line contains two integers N and M ― the number of rows and columns in the grid. - The following N lines each contain M characters. A character can be either \'H\' representing a house or \'.\' representing an empty cell. -----Output----- Print two integers R and C ― the row and column indices (1-based) of the optimal cell to place the library. If there are multiple optimal cells, you can print any of them. -----Constraints----- - 1 le N, M le 1000 -----Example Input----- 3 3 H.H ... HHH -----Example Output----- 2 2 -----Explanation----- Example case 1: Placing the library at cell (2, 2) results in the smallest maximum distance for any house to the library. The house at (1, 1), (1, 3), (3, 1), (3, 2), and (3, 3) will all be at a distance of 2, which is the minimum possible across all empty cells.","solution":"from collections import deque def find_optimal_library_location(n, m, grid): houses = [] empty_cells = [] # Gather house locations and empty cell locations for i in range(n): for j in range(m): if grid[i][j] == \'H\': houses.append((i, j)) elif grid[i][j] == \'.\': empty_cells.append((i, j)) if not houses or not empty_cells: return -1, -1 # No valid solution def calculate_distance_from_house(house, empty_cells): distances = {} queue = deque([house]) visited = set([house]) distances[house] = 0 while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) distances[(nx, ny)] = distances[(x, y)] + 1 queue.append((nx, ny)) return {cell: distances[cell] for cell in empty_cells if cell in distances} # Initialize the result and find minimal max distance result_cell = None min_max_distance = float(\'inf\') for empty_cell in empty_cells: max_distance = 0 for house in houses: distance = abs(house[0] - empty_cell[0]) + abs(house[1] - empty_cell[1]) max_distance = max(max_distance, distance) if max_distance < min_max_distance: min_max_distance = max_distance result_cell = empty_cell return result_cell[0] + 1, result_cell[1] + 1 # Example usage: n, m = 3, 3 grid = [ \\"H.H\\", \\"...\\", \\"HHH\\" ] print(find_optimal_library_location(n, m, grid)) # Expected output: (2, 2)"},{"question":"Implement a function to determine if a given list of integers contains a sequence of consecutive numbers. The sequence of numbers can be either increasing or decreasing, and the length of the sequence should be at least 3. If such a sequence is found, return `true`; otherwise, return `false`. Return `\\"Invalid input\\"` if the input is not a list of integers. Examples ```python [1, 2, 3, 4, 5] => true [5, 4, 3, 2, 1] => true [1, 3, 2, 1, 5] => true [10, 11, 12, 14] => true [1, 3, 5, 7, 9] => false [1, 2] => false \\"12345\\" => \\"Invalid input\\" 12345 => \\"Invalid input\\" ```","solution":"def contains_consecutive_sequence(nums): Determines if the given list of integers contains a sequence of at least 3 consecutive numbers. The sequence can be increasing or decreasing. Args: nums (list): A list of integers Returns: bool: True if there is a sequence of consecutive numbers; False otherwise str: \\"Invalid input\\" if the input is not a list of integers if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): return \\"Invalid input\\" if len(nums) < 3: return False for i in range(len(nums) - 2): if (nums[i + 1] == nums[i] + 1 and nums[i + 2] == nums[i] + 2) or (nums[i + 1] == nums[i] - 1 and nums[i + 2] == nums[i] - 2): return True return False"},{"question":"Write a function that takes an integer n and returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: - The first two Fibonacci numbers are 0 and 1. - Each subsequent number is the sum of the previous two. Example: Input: 5 Output: 5 Explanation: The first few Fibonacci numbers are 0, 1, 1, 2, 3, 5. The 5th Fibonacci number is 5.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given two strings `s` and `t` which only consist of lowercase English letters. You can perform the following operation any number of times (including zero): choose a non-empty substring from `s` and replace it with any other non-empty string of the same length. Determine whether or not you can transform string `s` into string `t` using the operation described above. Input The first line contains the string `s` (1 ≤ |s| ≤ 1000), the original string. The second line contains the string `t` (1 ≤ |t| ≤ 1000), the target string. Output Print \\"YES\\" if you can transform `s` into `t` using the described operation. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). Examples Input abc def Output YES Input aaaa aaba Output NO Input xyz zxy Output YES Note In the first example, you can replace each character of `s` with the corresponding character from `t`. In the second example, you cannot transform `s` into `t` because the initial character `a` cannot be changed to `b`. In the third example, you can replace the substring \\"xyz\\" with \\"zxy\\".","solution":"def can_transform(s, t): Determines whether the string `s` can be transformed into the string `t` using the specified replacement operation. if len(s) != len(t): return \\"NO\\" # Any string `s` can be transformed to any string `t` of the same length return \\"YES\\""},{"question":"Two players, Alice and Bob, are playing a game on a long strip of n + 1 squares, numbered from 0 to n. They start with both standing on square 0. On each player\'s turn, they can move forward by a distance that is the vertext position of each square they are currently at plus 1 or by a distance that is equal to the position of the square they are currently at minus 1 (if the result is a valid square on the strip). The game ends when a player cannot make any valid move forward. The player who is able to make the last move wins the game. It is well-known that if both play optimally, Alice always makes the first move. Given the starting positions, determine who will win. Input The first line contains an integer k (1 ≤ k ≤ 1000) — the number of test cases. The i-th of the following k lines contains a single integer ni (1 ≤ ni ≤ 109) — the number of squares on the strip for each test case. Output For each test case, print the winner, either \\"Alice\\" or \\"Bob\\". Examples Input 4 1 2 3 4 Output Alice Bob Alice Bob","solution":"def determine_winner(test_cases): winners = [] for n in test_cases: if n % 2 == 1: winners.append(\\"Alice\\") else: winners.append(\\"Bob\\") return winners"},{"question":"Calvin works at a library and is responsible for managing the library\'s book database. Each book in the library is unique and has an ISBN (International Standard Book Number) associated with it. Calvin needs to group books into collections where each collection is defined by a specific attribute such as author, genre, or publication year. Two books are considered to be in the same collection if they share at least one common value for the given attribute. Calvin\'s task is to determine if all books can be grouped into a single collection based on the given attribute, or if there are disconnected collections of books. -----Input----- The input consists of: - One line with an integer b (2 leq b leq 2cdot 10^5), the number of books in the library. The books are numbered from 1 to b. - b lines, describing the books in the library. The ith such line consists of an integer a_i (1 leq a_i leq 2cdot 10^5), the number of attributes that describe book i. The remainder of the line has a_i distinct integers v_{i,1},ldots ,v_{i,a_i} (1 leq v_{i,j} leq 10^9 for each j), the set of attributes that describe book i. It is guaranteed that the sum over all a_i is at most 2cdot 10^5. -----Output----- Output \\"single collection\\" if it is possible to group all the books into one collection using the given attributes. Otherwise, output \\"multiple collections\\". -----Examples----- Sample Input 1: 5 3 101 202 303 2 404 505 3 101 606 707 1 808 2 707 909 Sample Output 1: multiple collections Sample Input 2: 4 2 15 25 3 25 35 45 2 15 35 1 45 Sample Output 2: single collection","solution":"def can_form_single_collection(b, books): from collections import defaultdict, deque attribute_to_books = defaultdict(list) # Build graph mapping attributes to books for i in range(b): for attr in books[i]: attribute_to_books[attr].append(i) visited_books = set() def bfs(start_book): queue = deque([start_book]) visited_books.add(start_book) while queue: book = queue.popleft() for attr in books[book]: for neighbor in attribute_to_books[attr]: if neighbor not in visited_books: visited_books.add(neighbor) queue.append(neighbor) bfs(0) return \\"single collection\\" if len(visited_books) == b else \\"multiple collections\\""},{"question":"Marina is fascinated by unique strings. She defines a unique string as one where no two adjacent characters are the same. Given a string S that Marina loves, she wants to convert it into a unique string. Marina can replace any character in S with any other character from the English alphabet. Your task is to compute the minimum number of characters that need to be replaced to make S a unique string. ------ Input ------ The input consists of a single line containing the string S. ------ Output ------ Output a single integer representing the minimum number of character replacements needed to make S a unique string. ------ Constraints ------ 1 ≤ text{len}(S) ≤ 10^5 S consists only of lowercase English letters. ------ Sample Input 1 ------ aab ------ Sample Output 1 ------ 1 ------ explanation 1 ------ Replace the second \'a\' with any character other than \'a\' and \'b\', for example, \'c\' to get \'acb\'. Thus, only one replacement is needed. ------ Sample Input 2 ------ aaaa ------ Sample Output 2 ------ 2 ------ explanation 2 ------ Replace the second and fourth characters with any characters different from their surrounding characters. For example, replace \'a\' with \'b\' to get \'abab\'. ------ Sample Input 3 ------ abcdef ------ Sample Output 3 ------ 0 ------ explanation 3 ------ The string is already unique. Thus, no replacements are needed.","solution":"def min_replacements_to_unique(S): Returns the minimum number of character replacements needed to make S a unique string. # Initialize the variables n = len(S) replacements = 0 alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') # Iterate and check for adjacent duplicate characters i = 0 while i < n - 1: if S[i] == S[i + 1]: replacements += 1 # Find a different character to replace S[i + 1] for replacement_char in alphabet: if ((i + 2 < n and replacement_char != S[i + 2]) or i + 2 >= n) and replacement_char != S[i]: i += 1 # Skip next character as it is replaced break i += 1 else: i += 1 return replacements"},{"question":"You are asked to organize books on a bookshelf. Each book is represented by a string indicating its color and size, formatted as \\"Color-Size\\" (e.g., \\"Red-Large\\", \\"Blue-Small\\"). The books should be sorted by color alphabetically and, within each color, by size in the order of \\"Small\\", \\"Medium\\", and \\"Large\\". Given a list of books represented by strings, write a function that returns the sorted list of books. Example: ```python books = [\\"Blue-Small\\", \\"Red-Large\\", \\"Red-Medium\\", \\"Blue-Medium\\", \\"Red-Small\\", \\"Blue-Large\\"] ``` Expected Output: ```python [\\"Blue-Small\\", \\"Blue-Medium\\", \\"Blue-Large\\", \\"Red-Small\\", \\"Red-Medium\\", \\"Red-Large\\"] ``` Function Signature: ```python def sort_books(books: List[str]) -> List[str]: # your code here ```","solution":"from typing import List def sort_books(books: List[str]) -> List[str]: size_order = {\\"Small\\": 0, \\"Medium\\": 1, \\"Large\\": 2} def sort_key(book): color, size = book.split(\'-\') return (color, size_order[size]) return sorted(books, key=sort_key)"},{"question":"Write a function that takes two arrays of integers and returns a new array containing the intersection of the two arrays. Each element in the result should appear as many times as it shows in both arrays. Examples: - For the arrays `[1, 2, 2, 1]` and `[2, 2]`, the result should be `[2, 2]`. - For the arrays `[4, 9, 5]` and `[9, 4, 9, 8, 4]`, the result should be `[4, 9]`.","solution":"def intersect(nums1, nums2): Returns the intersection of two arrays, including duplicates. Each element in the result should appear as many times as it shows in both arrays. from collections import Counter # Count the frequency of each element in both arrays counts1 = Counter(nums1) counts2 = Counter(nums2) intersection = [] # Find the intersection for num in counts1: if num in counts2: min_count = min(counts1[num], counts2[num]) intersection.extend([num] * min_count) return intersection"},{"question":"Telecom companies are interested in measuring the performance and usage of their network. They have a system log that records data about the number of active connections every minute. Given a log of active connections for N minutes, your task is to answer several queries. Each query asks for the maximum number of active connections and the minimum number of active connections in a specific time interval from minute L to minute R (inclusive). Input Format: - First line contains 2 space-separated integers - N and Q. - Second line contains N space-separated integers representing the number of active connections in each minute. - The following Q lines each contain two space-separated integers, L and R, representing the time interval for the query (1-indexed). Output Format: - For each query, output two space-separated integers - the maximum and minimum number of active connections in the specified time interval. Constraints: 1 ≤ N ≤ 10^6 1 ≤ L ≤ R ≤ 10^6 1 ≤ Q ≤ 10^5 -10^6 ≤ Number of active connections ≤ 10^6 SAMPLE INPUT 5 2 10 20 30 40 50 1 3 2 5 SAMPLE OUTPUT 30 10 50 20 Explanation: In the first query, the maximum number of active connections from minute 1 to minute 3 is 30, and the minimum is 10. In the second query, the maximum number of active connections from minute 2 to minute 5 is 50, and the minimum is 20.","solution":"def process_queries(n, q, connections, queries): results = [] for L, R in queries: interval = connections[L-1:R] # converting 1-indexed to 0-indexed max_connections = max(interval) min_connections = min(interval) results.append((max_connections, min_connections)) return results # Read input from standard input # Here\'s how you\'d typically read from input in a real-world scenario: # import sys # input = sys.stdin.read # data = input().split()"},{"question":"In a certain city, there are N houses arranged in a row, numbered from 1 to N, with each house having a certain value. A house value indicates the amount of money it holds. A thief is planning to pick houses to rob, but there\'s a twist—the thief can only rob houses such that no two consecutive houses are chosen. The thief wants to maximize the total money he can rob, but he is also looking to minimize his risk. Hence, he wants you to help determine the maximum amount of money he can rob on specific segments of the street, based on multiple queries. Each query will provide a range of house numbers [L, R] (inclusive), and for each range, you need to determine the maximum amount of money the thief can rob without robbing two consecutive houses. Input Format: The first line of the input contains two integers N and Q separated by a space: - N is the number of houses. - Q is the number of queries. The second line contains N integers, each representing the value of the house at that position. Each of the next Q lines contains two integers L and R, defining the range of houses [L, R]. Output Format: For each query, output the maximum amount of money the thief can rob from the houses in the range [L, R] on a new line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ value of each house ≤ 10^4 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 6 7 1 30 8 1 3 2 5 1 5 SAMPLE OUTPUT 7 38 37 Explanation: For the first query [1, 3]: - The optimal selection is house 2 (value 7), since picking house 1 (value 6) and house 3 (value 1) violate the condition. For the second query [2, 5]: - The optimal selection is house 2 and house 4, giving a total value of 7 + 30 = 37. For the third query [1, 5]: - The optimal selection is house 1 and house 4, giving a total value of 6 + 30 = 36, or house 2 and house 5, giving a total value of 7 + 8 = 15, or another strategy that picks non-consecutive houses with the highest combined value without selecting consecutive houses: houses 2 and 4, resulting in 7 + 30 = 37.","solution":"def max_robbery(values, queries): def max_robbery_internal(houses): n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] results = [] for L, R in queries: segment = values[L-1:R] results.append(max_robbery_internal(segment)) return results"},{"question":"A technology startup is working on a new text prediction system for their messaging app. In order to improve their text prediction algorithm, they need to analyze the frequency of particular words in different messages. Given a list of messages and a set of target words, your task is to determine how many times each target word appears in the list of messages. The messages are case-insensitive, and only whole words count towards the frequency (i.e., substrings do not count). -----Input----- The first line of input contains an integer N (1 le N le 1000) representing the number of messages. The next N lines each contain a single message. Each message will have a length of up to 100 characters and will only contain alphabetic characters and spaces. The line after that contains an integer M (1 le M le 100) representing the number of target words. The next M lines each contain a single target word. Each word will have a length of up to 20 characters and will only contain alphabetic characters. -----Output----- Output M lines. Each line should contain the frequency of the corresponding target word in the list of messages. -----Examples----- Sample Input 1: 3 Hello world The world is beautiful Around the world 2 world the Sample Output 1: 3 2 Sample Input 2: 4 Programming is fun I love programming Coding and programming are exciting Let\'s do some programming 1 programming Sample Output 2: 4","solution":"def word_frequencies(n, messages, m, target_words): Returns the frequency of each target word in the list of messages. Args: n (int): Number of messages. messages (list of str): List of messages. m (int): Number of target words. target_words (list of str): List of target words. Returns: list: List of frequencies of each target word. from collections import Counter # Normalize messages (case-insensitive) and split word_list = [] for message in messages: word_list.extend(message.lower().split()) # Count the number of times each word appears in the messages word_counter = Counter(word_list) # Find and collect the frequency of each target word result = [] for word in target_words: result.append(word_counter[word.lower()]) return result"},{"question":"Task: You need to write a function **fibonacci_triangle** which returns a string representation of a triangular pattern based on the Fibonacci sequence up to n rows, where n is a parameter. # Rules/Note: * If the argument \'n\' is less than or equal to 0, it should return an empty string. * Each line of the triangle should display the Fibonacci sequence values, with each number followed by a space. * The Fibonacci sequence starts as 0, 1, 1, 2, 3, 5, 8, 13, 21, ... * Range of n is [0, 30] Examples: fibonacci_triangle(5): 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 fibonacci_triangle(7): 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 fibonacci_triangle(3): 0 1 1 2 3 5","solution":"def fibonacci_triangle(n): if n <= 0: return \\"\\" # Generate Fibonacci sequence up to (n * (n + 1)) // 2 terms fib = [0, 1] while len(fib) < (n * (n + 1)) // 2: fib.append(fib[-1] + fib[-2]) output = [] index = 0 for i in range(1, n + 1): row = \' \'.join(str(fib[index + j]) for j in range(i)) output.append(row) index += i return \'n\'.join(output)"},{"question":"Given a string s, you need to decide which player will win a game. The game is played by two players, Alice and Bob. They take turns to perform the following operation: - The player can choose any substring of `s` that contains at least one character and remove it from the string. Alice always goes first, and they both play optimally. The player who cannot make a move loses. Your task is to write a function that takes the input string `s` and returns the winner of the game. -----Input----- The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100,000), which contains only lowercase English letters. -----Output----- Print a single line containing the name of the winner, either \\"Alice\\" or \\"Bob\\". -----Examples----- Input abc Output Alice Input aaaa Output Bob","solution":"def determine_winner(s): Determines the winner of the game based on the string length. :param s: The input string :return: A string \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins if len(s) % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In a faraway kingdom, there is a bustling town which is famous for its libraries. There is a central library that wants to hire a head librarian. The town council decided to assess the candidates based on their ability to efficiently manage multiple books. They are particularly interested in how well a candidate can organize books by genre without having duplicate genres within any given shelf. Given a list of books, each with a specified genre, determine the maximum number of bookshelves the library can have such that no shelf contains two books of the same genre. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases to solve. Each test case starts with an integer n (1 leq n leq 50) — the number of books. The next line contains n integers where each integer represents the genre of a book. Each genre is represented by a unique integer. -----Output----- For each test case, print a single integer — the maximum number of bookshelves the library can have under the given conditions. -----Example----- Input 3 5 1 2 3 2 1 4 2 2 2 2 6 3 1 4 1 2 3 Output 3 1 4 -----Note----- In the first test case of the example, the library can organize the books into three bookshelves: - Shelf 1: [1, 2] - Shelf 2: [3] - Shelf 3: [2, 1] In the second test case of the example, since all books are of the same genre, the library can only have one shelf with all books: - Shelf 1: [2, 2, 2, 2] In the third test case of the example, the library can organize the books into four bookshelves: - Shelf 1: [3, 1] - Shelf 2: [4, 1] - Shelf 3: [2] - Shelf 4: [3] These organizations fulfill the conditions that no shelf contains two books of the same genre.","solution":"def max_bookshelves(t, test_cases): Given test cases with books and their genres, determine the maximum number of bookshelves the library can have such that no shelf contains two books of the same genre. result = [] for i in range(t): n = test_cases[i][0] genres = test_cases[i][1] result.append(len(set(genres))) return result"},{"question":"Alice has a string `s` of length `n` consisting of lowercase English letters. She wants to compute the total number of distinct substrings of the string `s`. A substring is defined as any contiguous sequence of characters within the string. Write a program to assist Alice in determining this value. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the length of the string `s`. The second line contains the string `s` of length `n` which consists of lowercase English letters. Output Output a single integer, the total number of distinct substrings of the string `s`. Example Input 5 ababa Output 9 Explanation The 9 distinct substrings of the string `ababa` are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"ababa\\".","solution":"def count_distinct_substrings(s): Returns the count of distinct substrings of the string s. n = len(s) substrings_set = set() for i in range(n): for j in range(i + 1, n + 1): substrings_set.add(s[i:j]) return len(substrings_set)"},{"question":"You are given a landscape of hills represented by an array of integers where each integer specifies the height of a hill. There is a treasure hidden at the peak of one of these hills. You need to find out the peak where the treasure is hidden. A peak is an element that is greater than its neighbors. More formally, an element A[i] is a peak if A[i] >= A[i-1] and A[i] >= A[i+1]. For the edge elements, we need to treat the boundaries as having a value of negative infinity. Implement a function `findTreasurePeak` that takes an array of integers as input and returns the index of one of such peaks. If no peak exists, return -1. # Function Signature ```python def findTreasurePeak(hills: List[int]) -> int: ``` # Input - `hills` (a list of integers): Array representing the heights of consecutive hills. # Output - An integer: The index of the peak element where the treasure is hidden. If no peak exists, return -1. # Constraints - The length of the array will be between 1 and 10^4. - The height of the hills can be any integer between -10^9 and 10^9. - If the list has only one element, treat it as a peak. # Example ```python assert findTreasurePeak([1, 3, 20, 4, 1, 0]) == 2 assert findTreasurePeak([10, 20, 15, 2, 23, 90, 67]) == 1 or findTreasurePeak([10, 20, 15, 2, 23, 90, 67]) == 5 assert findTreasurePeak([10]) == 0 assert findTreasurePeak([10, 20, 15, 25, 23, 90, 67]) == 1 or findTreasurePeak([10, 20, 15, 25, 23, 90, 67]) == 3 or findTreasurePeak([10, 20, 15, 25, 23, 90, 67]) == 5 ```","solution":"def findTreasurePeak(hills): Returns the index of the peak element where the treasure is hidden. If no peak exists, returns -1. n = len(hills) if n == 1: return 0 for i in range(n): if (i == 0 or hills[i] >= hills[i-1]) and (i == n-1 or hills[i] >= hills[i+1]): return i return -1"},{"question":"Given an NxN matrix, rotate the matrix 90 degrees clockwise in-place. Example: Input: Matrix: 1 2 3 4 5 6 7 8 9 Output: Matrix after rotation: 7 4 1 8 5 2 9 6 3 Your Task: You only need to complete the function rotateMatrix() that takes a 2D list (matrix) as an argument and modifies it in-place to rotate it 90 degrees clockwise. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 100","solution":"def rotateMatrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in-place. Parameters: matrix (list of list of int): The NxN matrix to be rotated. Returns: None: The matrix is modified in place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"John is an enthusiastic computer gamer who loves both gaming and collecting rewards in games. Recently, he started playing a game where he collects gems on different levels. In each level, there are several gems, and he can collect them consecutively based on certain rules. Given an array of integers `gems`, where each integer represents the number of gems collected at that level, John wants to calculate the maximum number of gems he can collect in a single run. The rule is that he cannot collect gems from two consecutive levels; that is, if he collects gems from level `i`, he cannot collect gems from level `i+1` and level `i-1`. Help John maximize his collection. -----Input----- The input consists of: - A single line containing an integer n (1 le n leq 10^5) representing the number of levels. - A single line containing n space-separated integers representing the gems at each level a_i (1 le a_i le 10^4). -----Output----- Output the maximum number of gems John can collect. -----Examples----- Sample Input: 5 3 2 7 10 12 Sample Output: 25 ---Explanation of Sample--- John can collect gems from levels: 3 (index 0), 7 (index 2), and 12 (index 4) to get the maximum number of gems, which is `3 + 7 + 12 = 22`. In a single run, John cannot collect gems from two consecutive levels. Sample Input: 4 5 1 1 5 Sample Output: 10 ---Explanation of Sample--- John can collect gems from levels: 1 (index 1) and 5 (index 3) to get the maximum number of gems, which is `1 + 5 = 6`.","solution":"def max_gems(n, gems): Calculates the maximum number of gems John can collect without collecting from two consecutive levels. Args: n: int : number of levels gems: List[int] : list of integers representing the gems at each level Returns: int : maximum number of gems that can be collected if n == 0: return 0 elif n == 1: return gems[0] dp = [0] * n dp[0] = gems[0] dp[1] = max(gems[0], gems[1]) for i in range(2, n): dp[i] = max(gems[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"Write a function, `palindromeSubstrings` / `palindrome-substrings` / `palindrome_substrings` / `PalindromeSubstrings`, that takes a string as an argument and returns an array of all unique substrings that are palindromes. A palindrome is defined as a string that reads the same backward as forward. For example, if this string were passed as an argument: ```python \\"ababa\\" ``` Your function would return the following array (order of substrings does not matter): ```python [\\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\"] ``` The substrings in the returned array should be unique and listed only once. Note that single-character substrings are considered palindromes. Some of the palindromic substrings might overlap.","solution":"def palindrome_substrings(s): Returns a list of all unique substrings of s that are palindromes. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() for i in range(len(s)): for j in range(i, len(s)): substr = s[i:j+1] if is_palindrome(substr): palindromes.add(substr) return list(palindromes)"},{"question":"Write a program to simulate a simplified version of a warehouse inventory management system. The warehouse keeps track of the items in stock and can perform various operations on the inventory. The inventory system supports the following operations: - **add itemName amount** — Increase the stock of the `itemName` by `amount`. - **remove itemName amount** — Decrease the stock of the `itemName` by `amount`. If there is not enough stock for the item, remove all available stock and do not report an error. - **query itemName** — Report the current stock of `itemName`. If the item is not in the inventory, assume the stock is 0. Initially, the inventory is empty. Input: - The first line contains an integer `n` (1 ≤ n ≤ 105), the number of operations performed. - Each of the next `n` lines contains a single operation in the format described above. The `itemName` is a string containing only lowercase alphabetical characters and has a length of at most 20. The `amount` is an integer (1 ≤ amount ≤ 103). Output: - For each `query itemName` operation, output the current stock of the item on a new line. Example: Input: ``` 7 add apple 10 add banana 5 query apple remove apple 7 query apple remove banana 10 query banana ``` Output: ``` 10 3 0 ``` Explanation: 1. After adding 10 apples, querying the stock of apples returns 10. 2. After removing 7 apples, querying the stock of apples returns 3. 3. After trying to remove 10 bananas, all bananas are removed as only 5 were available, and querying the stock of bananas returns 0.","solution":"def warehouse_operations(n, operations): Function to simulate warehouse inventory management system. Arguments: n : int : number of operations to be performed operations : list : list of operations to be performed on inventory Returns: list : results of query operations from collections import defaultdict inventory = defaultdict(int) results = [] for operation in operations: parts = operation.split() command = parts[0] item = parts[1] if command == \\"add\\": amount = int(parts[2]) inventory[item] += amount elif command == \\"remove\\": amount = int(parts[2]) if inventory[item] <= amount: inventory[item] = 0 else: inventory[item] -= amount elif command == \\"query\\": results.append(inventory[item]) return results"},{"question":"You are a moderator in a fantasy battle arena game where players can battle each other in one-on-one duels. Each player has a strength level, and each duel results in the stronger player winning and the weaker player losing. In case of a tie in strength levels, the duel is considered a draw, and both players retain their positions. The game is organized such that each player only engages in a duel with each other player once. Given the list of players and their strength levels, your task is to determine the final ranking of the players based on the outcomes of their duels. A higher ranking implies a stronger player. Input - The first line contains an integer N (2 ≤ N ≤ 100), the number of players. - The next N lines each contain a string P representing the player\'s name (unique) and an integer S (1 ≤ S ≤ 1000) representing the player\'s strength level. Output - Print the ranking of the players in decreasing order of their strength levels. If two players have the same strength level, maintain their input order. Examples Input 4 Alice 900 Bob 1200 Charlie 900 Dave 1000 Output Bob Dave Alice Charlie Input 3 Zara 750 Yann 750 Xena 800 Output Xena Zara Yann Your task is to implement a program that reads the list of players and their strength levels, performs the ranking based on the outcomes of imagined duels, and outputs the final ranking.","solution":"def rank_players(n, players): Ranks players based on their strength levels in descending order. In case of a tie, maintain the input order. :param n: Number of players :param players: List of tuples where each tuple contains a player\'s name and their strength level. :return: List of player names sorted by their ranking. # Sort players based on strength first (descending) and then input order second. players_sorted = sorted(players, key=lambda x: (-x[1], players.index(x))) # Extract just the player names in the sorted order sorted_player_names = [player[0] for player in players_sorted] return sorted_player_names"},{"question":"You are given a string `s` consisting of uppercase and lowercase English letters. A \\"well-formed\\" string is a string in which every lowercase letter has a corresponding uppercase letter and vice versa. More specifically, a string is well-formed if for every letter of type `x` (either lowercase or uppercase) in the string, there exists the letter of type `X` (the other case of the same character) in the string. Write a function `longestWellFormedSubstring(s)` that returns the length of the longest well-formed substring of `s`. Example 1: Input: s = \\"aAAbBbBBaA\\" Output: 10 Explanation: The whole string is well-formed as it contains equal occurrences of \'a\' and \'A\', \'b\' and \'B\'. Example 2: Input: s = \\"aAbBcC\\" Output: 6 Explanation: The longest well-formed substring is \\"aAbBcC\\". Example 3: Input: s = \\"abAB\\" Output: 4 Explanation: The longest well-formed substring is \\"abAB\\". Example 4: Input: s = \\"AaBbCcDd\\" Output: 8 Explanation: The longest well-formed substring is \\"AaBbCcDd\\". Example 5: Input: s = \\"AbCdEfG\\" Output: 0 Explanation: There is no well-formed substring. Constraints: 1. 1 <= s.length <= 10^4 2. s consists of uppercase and lowercase English letters.","solution":"def longestWellFormedSubstring(s): def is_well_formed(sub): char_set = set(sub) for char in char_set: if char.islower() and char.upper() not in char_set: return False if char.isupper() and char.lower() not in char_set: return False return True n = len(s) max_length = 0 for i in range(n): for j in range(i + 1, n + 1): if (j - i) % 2 == 0 and is_well_formed(s[i:j]): max_length = max(max_length, j - i) return max_length"},{"question":"Regular Expressions in Python (Python only) In this training, we will dive into the topic of regular expressions in Python. Regular expressions (regex) are a powerful tool for matching patterns in strings. They are used for tasks such as validating string formats, searching for specific patterns, and manipulating strings. Let\'s first understand some basic syntax for regular expressions: 1. `.` - Matches any character except a newline. 2. `^` - Anchors the match at the start of the string. 3. `` - Anchors the match at the end of the string. 4. `*` - Matches 0 or more repetitions of the preceding character. 5. `+` - Matches 1 or more repetitions of the preceding character. 6. `?` - Matches 0 or 1 occurrence of the preceding character. 7. `[]` - Matches any one of the characters inside the brackets. 8. `|` - Acts as a logical OR. There are many more features and techniques in regular expressions that you can explore, but for now, let\'s focus on applying these basics. Task Create a function `extract_phone_number` that accepts a string and returns all phone numbers found in the string. A phone number is defined as a sequence of digits that follow the pattern `(XXX) XXX-XXXX` or `XXX-XXX-XXXX`. If no phone number is found, return an empty list. **Examples:** ```python extract_phone_number(\\"Call me at (123) 456-7890 or 987-654-3210\\") # should return [\\"(123) 456-7890\\", \\"987-654-3210\\"] extract_phone_number(\\"My phone number is 555-123-4567\\") # should return [\\"555-123-4567\\"] extract_phone_number(\\"No contact number available.\\") # should return [] ``` The function should be implemented using the `re` module in Python, which provides support for regular expressions. Definitions of different patterns should be used to match the phone numbers correctly. The result should be a list of matched phone numbers. Tips - Use `re.findall(pattern, string)` function to find all occurrences of a pattern in the given string. - Construct regex patterns to match phone numbers in the specified formats.","solution":"import re def extract_phone_number(text): Extracts phone numbers matching the pattern (XXX) XXX-XXXX or XXX-XXX-XXXX from the provided text. Args: text (str): The input string containing potential phone numbers. Returns: List[str]: A list of phone numbers found in the string. # Defining the regex pattern to match (XXX) XXX-XXXX or XXX-XXX-XXXX phone_pattern = r\'(d{3}) d{3}-d{4}|d{3}-d{3}-d{4}\' # Using re.findall() to find all matches of the pattern in the text phone_numbers = re.findall(phone_pattern, text) return phone_numbers"},{"question":"Given a string S of length 8 consisting of lowercase English letters, you need to determine if it can be classified as \\"pairwise-palindromic.\\" A string is pairwise-palindromic if and only if the following conditions are satisfied: - The 1st and 8th characters are the same. - The 2nd and 7th characters are the same. - The 3rd and 6th characters are the same. - The 4th and 5th characters are the same. -----Constraints----- - S is a string of length 8 consisting of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If S is pairwise-palindromic, print Yes; otherwise, print No. -----Sample Input----- abccbaab -----Sample Output----- No In abccbaab, the 1st and 8th characters are different, so it is not pairwise-palindromic.","solution":"def is_pairwise_palindromic(S): Determines if the string S is pairwise-palindromic. Parameters: S (str): A string of length 8 consisting of lowercase English letters. Returns: str: \'Yes\' if S is pairwise-palindromic, \'No\' otherwise. if len(S) != 8: return \'No\' if S[0] == S[7] and S[1] == S[6] and S[2] == S[5] and S[3] == S[4]: return \'Yes\' return \'No\'"},{"question":"Given a string s consisting of lowercase English letters, return the length of the shortest substring that contains all the unique characters of the original string. Example 1: Input: s = \\"aabcbcdbca\\" Output: 4 Explanation: The shortest substring that contains all the unique characters of the original string is \\"dbca\\". Example 2: Input: s = \\"aaab\\" Output: 2 Explanation: The shortest substring that contains all the unique characters of the original string is \\"ab\\". Example 3: Input: s = \\"abcdef\\" Output: 6 Explanation: The shortest substring that contains all the unique characters of the original string is the entire string \\"abcdef\\". Constraints: 1 <= s.length <= 1000","solution":"def shortest_substring_with_all_uniques(s): from collections import defaultdict unique_chars = set(s) num_unique = len(unique_chars) left = 0 right = 0 min_len = float(\'inf\') current_count = defaultdict(int) unique_in_window = 0 while right < len(s): if current_count[s[right]] == 0: unique_in_window += 1 current_count[s[right]] += 1 right += 1 while unique_in_window == num_unique: min_len = min(min_len, right - left) current_count[s[left]] -= 1 if current_count[s[left]] == 0: unique_in_window -= 1 left += 1 return min_len"},{"question":"You are given a list of integers representing the heights of different buildings in a city. A person standing on top of each building can see other buildings if and only if there are no taller buildings in between. Your task is to determine how many buildings each person can see to the left and to the right. ------ Input ------ - The first line contains a single integer T denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N (1 leq N leq 1000) — the number of buildings. - The second line contains N space-separated integers h_1, h_2, ..., h_N (1 leq h_i leq 10^5) denoting the heights of the buildings. ------ Output ------ - For each test case, output a single line with two integers separated by a space: - The first integer represents the maximum number of buildings a person can see to the left from any building. - The second integer represents the maximum number of buildings a person can see to the right from any building. ------ Example ------ Input: 2 4 3 1 4 2 5 1 2 3 4 5 Output: 1 1 0 4 ------ Explanation ------ Example case 1: - From building 1 (height 3), you can see none to the left (since there\'s no building before it) and the building with height 1 to the right. - From building 2 (height 1), you can see the building with height 3 to the left and the building with height 4 to the right. - From building 3 (height 4), you can see the building with height 1 to the left and the building with height 2 to the right. - From building 4 (height 2), you can see the building with height 4 to the left. So the maximum buildings seen to the left and right from any building are 1 and 1 respectively. Example case 2: - From building 1 (height 1), you can only see buildings to the right. - From building 2 (height 2), you can only see buildings to the right, and so on. Hence the maximum buildings seen to the left are 0, while to the right from building 1 you can see buildings 2, 3, 4, 5 (4 buildings in total).","solution":"def max_visible_buildings(N, heights): max_left = [0] * N max_right = [0] * N stack = [] # Calculate left visibility for i in range(N): while stack and heights[stack[-1]] <= heights[i]: stack.pop() max_left[i] = len(stack) stack.append(i) stack = [] # Calculate right visibility for i in range(N-1, -1, -1): while stack and heights[stack[-1]] <= heights[i]: stack.pop() max_right[i] = len(stack) stack.append(i) return max(max_left), max(max_right) def process_test_cases(test_cases): results = [] for N, heights in test_cases: results.append(max_visible_buildings(N, heights)) return results"},{"question":"You are given an array of integers. You need to answer several queries of the following types: 1. Find the sum of elements with indices in a given range. 2. Update the value of an array element at a given index. However, there is a constraint: each query should be processed in logarithmic time relative to the number of elements in the array. # Input The first line contains two integers, `n` (1 ≤ n ≤ 100000) and `q` (1 ≤ q ≤ 100000), the number of elements in the array and the number of queries, respectively. The second line contains `n` space-separated integers, the initial values of the array. The following `q` lines describe the queries. Each line contains three integers: - If the first integer is `1`, it represents an update query with the second integer as the index (0-based) to be updated, and the third integer as the new value. - If the first integer is `2`, it represents a query for the sum of elements in the range [l, r), where the second and third integers represent the left and right bounds (0-based) of the range, respectively. # Output For each sum query, output the result on a new line. # Example Input ``` 5 5 1 2 3 4 5 2 0 5 1 3 10 2 3 4 2 0 5 2 2 4 ``` Output ``` 15 10 21 13 ``` # Note For the given example: - The first query is to find the sum of the entire array (initially [1, 2, 3, 4, 5]), which results in 15. - The second query updates the value at index 3 from 4 to 10 (array becomes [1, 2, 3, 10, 5]). - The third query finds the sum of the single element at index 3, which is 10. - The fourth query finds the sum of the entire array after the update, which results in 21. - The fifth query finds the sum of elements in the range [2, 4), which results in 13. # Constraints To efficiently handle the queries within the given constraints, consider utilizing data structures like Segment Tree or Binary Indexed Tree (Fenwick Tree) which allow logarithmic time complexity for both update and sum operations.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def process_queries(n, q, elements, queries): fenwick_tree = FenwickTree(n) result = [] array = [0] * n for i in range(n): fenwick_tree.update(i + 1, elements[i]) array[i] = elements[i] for query in queries: if query[0] == 1: index, new_value = query[1], query[2] fenwick_tree.update(index + 1, new_value - array[index]) array[index] = new_value elif query[0] == 2: left, right = query[1], query[2] result.append(fenwick_tree.query(right) - fenwick_tree.query(left)) return result"},{"question":"Design a class named `Vehicle` that represents a generic vehicle. Each vehicle has a `make`, `model`, and `year`. Then design a subclass named `ElectricVehicle` that inherits from `Vehicle` and includes an additional attribute `battery_capacity` to represent the battery capacity in kWh. Your tasks are to: 1. Create the `Vehicle` class. 2. Create the `ElectricVehicle` subclass. 3. Implement a method in both classes that returns a string representation of the object. -----Constraints----- - The `make` and `model` are strings of up to 20 characters. - The `year` is an integer between 1886 and the current year. - The `battery_capacity` is a float that represents the battery capacity in kWh. -----Input----- There is no input; you need to define the classes with the specified attributes and methods. Example usage of the classes may look like this: ```python v = Vehicle(\\"Toyota\\", \\"Camry\\", 2020) print(v) # Output: \\"2020 Toyota Camry\\" ev = ElectricVehicle(\\"Tesla\\", \\"Model 3\\", 2021, 75.0) print(ev) # Output: \\"2021 Tesla Model 3 with a battery capacity of 75.0 kWh\\" ``` The output format should be exactly as demonstrated above.","solution":"class Vehicle: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def __str__(self): return f\\"{self.year} {self.make} {self.model}\\" class ElectricVehicle(Vehicle): def __init__(self, make, model, year, battery_capacity): super().__init__(make, model, year) self.battery_capacity = battery_capacity def __str__(self): return f\\"{self.year} {self.make} {self.model} with a battery capacity of {self.battery_capacity} kWh\\""},{"question":"Given a list of `n` unique words, create a function `construct_sentence(words, s)` that constructs a sentence `s` by concatenating words from the list with a single space between them. If there are multiple possible constructions, return any one of them. If it\'s not possible to construct the sentence, return an empty string. The words in `words` are guaranteed to be lowercase and the sentence `s` will only contain lowercase letters without spaces. **Example 1:** Input: ``` words = [\\"this\\", \\"is\\", \\"a\\", \\"test\\"] s = \\"thisisatest\\" ``` Output: ``` \\"this is a test\\" ``` **Example 2:** Input: ``` words = [\\"quick\\", \\"brown\\", \\"the\\", \\"fox\\"] s = \\"thequickbrownfox\\" ``` Output: ``` \\"the quick brown fox\\" ``` **Example 3:** Input: ``` words = [\\"apple\\", \\"pen\\", \\"applepen\\"] s = \\"applepenapple\\" ``` Output: ``` \\"apple pen apple\\" ``` **Example 4:** Input: ``` words = [\\"cat\\", \\"cats\\", \\"and\\", \\"dog\\"] s = \\"catsanddog\\" ``` Output: ``` \\"cats and dog\\" ``` **Example 5:** Input: ``` words = [\\"a\\", \\"b\\", \\"c\\"] s = \\"abcde\\" ``` Output: ``` \\"\\" ``` **Note:** - `1 <= words.length <= 100`. - `1 <= words[i].length <= 50`. - `1 <= s.length <= 1000`.","solution":"def construct_sentence(words, s): word_set = set(words) n = len(s) dp = [\\"\\" for _ in range(n+1)] dp[0] = \\"\\" for i in range(1, n+1): for j in range(i): if dp[j] != \\"\\" or j == 0: if s[j:i] in word_set: if dp[i] == \\"\\": dp[i] = dp[j] + (\\"\\" if dp[j] == \\"\\" else \\" \\") + s[j:i] else: dp[i] = dp[j] + \\" \\" + s[j:i] return dp[-1]"},{"question":"You are given two arrays of integers `arr1` and `arr2`, and a target integer `target`. Your task is to count the number of pairs `(i, j)` where `i` is an element from `arr1` and `j` is an element from `arr2` such that `i + j` is equal to the target. Write a function `count_pairs(arr1, arr2, target)` that returns the number of such pairs. # Example 1: ``` Input: arr1 = [1, 2, 3], arr2 = [0, 1, 2], target = 3 Output: 3 Explanation: The pairs that sum up to 3 are: (1, 2) (2, 1) (3, 0) ``` # Example 2: ``` Input: arr1 = [1, 1, 1], arr2 = [2, 2, 2], target = 3 Output: 9 Explanation: Each element of arr1 can form a pair with each element of arr2 to sum up to 3. ``` # Constraints: - Each array can have up to 1000 integers. - Each integer can range from -1000 to 1000. - The target can range from -2000 to 2000.","solution":"def count_pairs(arr1, arr2, target): Returns the number of pairs (i, j) where i is from arr1 and j is from arr2 such that i + j equals target. count = 0 for i in arr1: for j in arr2: if i + j == target: count += 1 return count"},{"question":"Given a string S of length n, the challenge is to compress the string such that identical consecutive characters are replaced by a single instance of the character followed by the count of its consecutive instances. If the count is 1, it should be omitted. For instance, the string \\"aaabbc\\" would be compressed to \\"a3b2c\\". You need to write a function that takes in the input string S and returns its compressed form. Input The input consists of a single string S, containing only lowercase English letters, with length 1 ≤ n ≤ 10^5. Output A single string representing the compressed form of the input string S. Example Input aaabbc Output a3b2c Input abcd Output abcd Input aaabbaa Output a3b2a2 Note In the first example, the string \\"aaabbc\\" is compressed such that \'a\' which appears 3 times consecutively is replaced by \\"a3\\", \'b\' which appears 2 times consecutively is replaced by \\"b2\\", and \'c\' appears once so it remains the same. In the second example, each character appears once, so the string remains as \\"abcd\\". In the third example, \\"aaabbaa\\" is compressed to \\"a3b2a2\\". Write a function `compress_string(S)` which takes the input string S and returns a compressed version of the string.","solution":"def compress_string(S): Compress the given string by replacing consecutive identical characters with the character followed by the count of its consecutive instances. If the count is 1, it is omitted. Parameters: S (str): The input string containing only lowercase English letters. Returns: str: The compressed form of the input string. if not S: return \\"\\" compressed = [] count = 1 length = len(S) for i in range(1, length): if S[i] == S[i - 1]: count += 1 else: compressed.append(S[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Don\'t forget to add the last group compressed.append(S[-1]) if count > 1: compressed.append(str(count)) return \\"\\".join(compressed)"},{"question":"A developer is creating a software that manages inventory for a warehouse. The inventory is represented by a list of tuples, where each tuple consists of an item name and its quantity (in stock). The software needs a function to handle restocking based on shipment arrivals and another function to handle fulfilling orders. Write two functions: 1. `restock_inventory(inventory, shipment)`: This function takes the current inventory, which is a list of tuples `(str, int)` representing item names and quantities, and a shipment list, which is a list of tuples `(str, int)` representing the items and their quantities to be added to the inventory. The function should update the inventory to reflect the added quantities from the shipment. 2. `fulfill_order(inventory, order)`: This function takes the current inventory and an order list, which is a list of tuples `(str, int)` representing the items and their quantities that are required to be fulfilled. The function should update the inventory by deducting the quantities from the order. If there is not enough stock to fulfill an item in the order, the function should raise an `InsufficientStock` exception with a message indicating the item that cannot be fulfilled. Here is the `InsufficientStock` exception class to be used: ```python class InsufficientStock(Exception): pass ``` # Specification: - Assume all item names in the inventory and shipment/order lists are unique. - The function should modify the inventory list in place and not return any value. - If an item in the shipment is not in the inventory, it should be added. # Example: ```python inventory = [(\'apple\', 50), (\'banana\', 30)] shipment = [(\'apple\', 20), (\'banana\', 10), (\'orange\', 5)] order = [(\'apple\', 70), (\'orange\', 2)] restock_inventory(inventory, shipment) # Inventory after restock: [(\'apple\', 70), (\'banana\', 40), (\'orange\', 5)] fulfill_order(inventory, order) # Inventory after fulfilling order: [(\'apple\', 0), (\'banana\', 40), (\'orange\', 3)] order = [(\'banana\', 50)] fulfill_order(inventory, order) # Raises InsufficientStock: \'banana\' ```","solution":"class InsufficientStock(Exception): pass def restock_inventory(inventory, shipment): Updates the inventory with the quantities from the shipment. Parameters: inventory (list of tuples): Current inventory with item names and quantities. shipment (list of tuples): Shipment containing item names and quantities to be added to inventory. The function modifies the inventory in place. inventory_dict = dict(inventory) for item, quantity in shipment: if item in inventory_dict: inventory_dict[item] += quantity else: inventory_dict[item] = quantity inventory[:] = list(inventory_dict.items()) def fulfill_order(inventory, order): Fulfill the order by updating the inventory. Parameters: inventory (list of tuples): Current inventory with item names and quantities. order (list of tuples): Order containing item names and quantities to be fulfilled. The function modifies the inventory in place. If there is not enough stock to fulfill an item, raises InsufficientStock exception with a message indicating the item that cannot be fulfilled. inventory_dict = dict(inventory) for item, quantity in order: if item not in inventory_dict or inventory_dict[item] < quantity: raise InsufficientStock(f\\"Insufficient stock for item: {item}\\") inventory_dict[item] -= quantity inventory[:] = list(inventory_dict.items())"},{"question":"# Description In this task, you will create a seating chart simulator for a small movie theater. The movie theater has a fixed number of rows and seats per row. People can reserve seats and the system should ensure that they do not double-book any seat. The system must allow for reservations and provide visual feedback on the seating layout. # Instructions You need to complete the `MovieTheater` class and the `reserve_seat` and `get_seating` methods: ```python class MovieTheater: def __init__(self, rows, seats_per_row): pass def reserve_seat(self, row, seat): pass def get_seating(self): pass ``` - The constructor `__init__` will take two parameters: the number of rows and the number of seats per row. - The `reserve_seat` method will take two parameters: the row and the seat to reserve. It should return `True` if the reservation is successful and `False` if the seat is already reserved or out of bounds. - The `get_seating` method will return a two-dimensional list representing the seating layout, where \'X\' indicates a reserved seat and \'O\' indicates an available seat. Example ```python theater = MovieTheater(5, 6) theater.reserve_seat(1, 1) # returns True theater.reserve_seat(1, 2) # returns True theater.reserve_seat(1, 1) # returns False (already reserved) theater.reserve_seat(6, 1) # returns False (out of bounds) print(theater.get_seating()) ``` The code above should print: ``` [[\'O\', \'O\', \'O\', \'O\', \'O\', \'O\'], [\'X\', \'X\', \'O\', \'O\', \'O\', \'O\'], [\'O\', \'O\', \'O\', \'O\', \'O\', \'O\'], [\'O\', \'O\', \'O\', \'O\', \'O\', \'O\'], [\'O\', \'O\', \'O\', \'O\', \'O\', \'O\']] ``` Clarifications 1. The rows and seats are zero-indexed. 2. The return values and output should be exactly as described. 3. Ensure the results are consistent with multiple reservations and boundary checks. Good luck and have fun! If you have any questions, feel free to ask.","solution":"class MovieTheater: def __init__(self, rows, seats_per_row): self.rows = rows self.seats_per_row = seats_per_row self.seating = [[\'O\' for _ in range(seats_per_row)] for _ in range(rows)] def reserve_seat(self, row, seat): if 0 <= row < self.rows and 0 <= seat < self.seats_per_row: if self.seating[row][seat] == \'O\': self.seating[row][seat] = \'X\' return True else: return False else: return False def get_seating(self): return self.seating"},{"question":"You are given an array of N integers. Your task is to find an index in the array such that removing the element at this index results in the maximum possible sum of the remaining elements. If there are multiple such indices, choose the smallest index. ------ Input Format ------ - The first line contains a single integer T denoting the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N denoting the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, print a single line containing the index (1-based) of the element that should be removed to achieve the maximum possible sum of the remaining elements. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} -10^{9} ≤ A_{i} ≤ 10^{9} - The sum of N over all test cases does not exceed 10^{5}. ----- Sample Input 1 ------ 2 5 3 1 -1 2 5 4 -1 -1 -1 -1 ----- Sample Output 1 ------ 3 1 ----- Explanation ------ - Test Case 1: Removing the element at index 3 (A[3] = -1) results in the array [3, 1, 2, 5] with a sum of 11, which is the maximum possible sum. - Test Case 2: Removing the element at index 1 (A[1] = -1) results in the array [-1, -1, -1] with a sum of -3. Any other index would also result in the same sum, but we choose the smallest index as required.","solution":"def find_index_to_remove(test_cases): results = [] for case in test_cases: N, array = case max_sum = -float(\'inf\') index_to_remove = -1 total_sum = sum(array) for i in range(N): current_sum = total_sum - array[i] if current_sum > max_sum: max_sum = current_sum index_to_remove = i elif current_sum == max_sum and i < index_to_remove: index_to_remove = i results.append(index_to_remove + 1) # converting to 1-based index return results # Reading input function def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) array = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, array)) index += N + 1 return test_cases # Main Function to process the input and produce output if __name__ == \\"__main__\\": test_cases = read_input() results = find_index_to_remove(test_cases) for res in results: print(res)"},{"question":"A library database system needs to track the number of books each user has checked out. Each user can check out multiple books, but no user can check out more than two books of the same title (`book_id`). Given records of all check-out attempts, determine the ultimate count of each book for each user. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then, the test cases follow. - The first line of each test case contains an integer N — the number of check-out attempts. - The following N lines each contain two space-separated integers `user_id` and `book_id` — indicating that the user with `user_id` attempts to check out a book with `book_id`. ------ Output Format ------ For each test case, output a line \\"Case #x:\\" followed by the user IDs and their final count of each book they possess, in the following format: `user_id: {book_id: count, ...}`, sorted by `user_id` and then by `book_id`. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{4} 1 ≤ user_id, book_id ≤ 10^5 ----- Sample Input 1 ------ 2 6 1 101 1 101 1 101 1 102 2 101 2 103 5 3 104 3 104 3 104 4 104 4 105 ----- Sample Output 1 ------ Case #1: 1: {101: 2, 102: 1} 2: {101: 1, 103: 1} Case #2: 3: {104: 2} 4: {104: 1, 105: 1} ----- Explanation 1 ------ Test case 1: - User 1 attempts to check out book 101 three times, which results in only two checks out due to the imposed limit. The user also checks out book 102 once. - User 2 checks out book 101 and book 103 once each. Test case 2: - User 3 attempts to check out book 104 three times but can only possess two copies. - User 4 successfully checks out one copy each of books 104 and 105.","solution":"def track_books(T, test_cases): results = [] for t in range(T): N, attempts = test_cases[t] user_books = {} for attempt in attempts: user_id, book_id = attempt if user_id not in user_books: user_books[user_id] = {} if book_id not in user_books[user_id]: user_books[user_id][book_id] = 0 if user_books[user_id][book_id] < 2: user_books[user_id][book_id] += 1 result = f\\"Case #{t+1}:\\" for user_id in sorted(user_books): books = \', \'.join(f\\"{book_id}: {count}\\" for book_id, count in sorted(user_books[user_id].items())) result += f\\"n{user_id}: {{{books}}}\\" results.append(result) return results # Example usage: T = 2 test_cases = [ (6, [(1, 101), (1, 101), (1, 101), (1, 102), (2, 101), (2, 103)]), (5, [(3, 104), (3, 104), (3, 104), (4, 104), (4, 105)]), ] print(\'n\'.join(track_books(T, test_cases)))"},{"question":"You are given a rectangular grid of size n x m filled with integers. You need to perform the following operations: find the maximum integer value in any sub-grid of size k x k. Input The first line contains three integers n, m, and k (1 ≤ k ≤ n, 1 ≤ k ≤ m ≤ 300). Each of the next n lines contains m integers — the grid itself. The integers in the grid are between 1 and 1000. Output Output the maximum integer value found in any k x k sub-grid. Example Input 4 5 3 1 3 4 5 6 7 8 9 10 1 2 3 4 1 6 9 3 4 7 2 Output 10","solution":"def maximum_in_subgrid(n, m, k, grid): max_value = -1 for i in range(n - k + 1): for j in range(m - k + 1): current_max = max(grid[x][y] for x in range(i, i + k) for y in range(j, j + k)) if current_max > max_value: max_value = current_max return max_value # Example grid from the problem statement n = 4 m = 5 k = 3 grid = [ [1, 3, 4, 5, 6], [7, 8, 9, 10, 1], [2, 3, 4, 1, 6], [9, 3, 4, 7, 2] ] print(maximum_in_subgrid(n, m, k, grid)) # Should output 10"},{"question":"**DESCRIPTION:** You are given a list of integers representing temperatures recorded over several days. Your task is to find the span of days (consecutive days) for which the temperature readings remain in a non-decreasing order. You have to return the length of the longest such span. A non-decreasing order means that each day\'s temperature is greater than or equal to the temperature of the previous day. **EXAMPLES:** ``` longest_non_decreasing_span([30, 31, 32, 33, 33, 34, 32, 30]) --> 6 longest_non_decreasing_span([30, 29, 28, 25, 26, 27, 28, 29]) --> 5 longest_non_decreasing_span([10, 20, 30, 40, 50, 60, 70]) --> 7 ``` **RETURN:** Return the length of the longest span of consecutive days where the temperatures are in a non-decreasing order. By the way, after finishing this kata, please try some of my other katas: [Here](https://www.codewars.com/collections/tonylicodings-authored-katas) NOTE: - The list will have at least one temperature recording. - Temperatures are in integer values and can be both positive and negative.","solution":"def longest_non_decreasing_span(temperatures): Returns the length of the longest span of consecutive days with non-decreasing temperatures. Args: temperatures: List[int] : list of temperatures over several days. Returns: int: length of the longest span with non-decreasing temperatures. if not temperatures: return 0 max_span = 1 current_span = 1 for i in range(1, len(temperatures)): if temperatures[i] >= temperatures[i - 1]: current_span += 1 else: max_span = max(max_span, current_span) current_span = 1 return max(max_span, current_span)"},{"question":"You are given an array of integers and a range [L, R]. Your task is to calculate the sum of the elements within this range (inclusive). The array elements and the range will be provided as inputs. Ensure that the function handles edge cases such as empty ranges or out-of-bounds indices. # Input - The first line contains an integer `n`, representing the size of the array. - The second line contains `n` space-separated integers, representing the elements of the array. - The third line contains two integers `L` and `R`, representing the range (inclusive). # Output - Print the sum of the elements within the specified range `[L, R]`. # Example Input ``` 5 3 8 1 6 4 1 3 ``` Output ``` 15 ``` Explanation: The elements in the array from index 1 to 3 (inclusive) are 8, 1, 6. Their sum is 15.","solution":"def sum_in_range(arr, L, R): Returns the sum of elements within the range [L, R] (inclusive). Parameters: arr: list of integers L: starting index (inclusive) R: ending index (inclusive) Returns: int: sum of the elements from index L to R if L < 0 or R >= len(arr) or L > R: return 0 return sum(arr[L:R+1])"},{"question":"You are working on a robotics project where a robot needs to navigate through a grid. The grid is represented by a matrix of integers, where each cell contains a positive integer representing the energy cost to move through that cell. The robot can move either right or down from any cell. Your task is to find the path with the minimum energy cost from the top-left corner to the bottom-right corner of the grid. Input The input consists of: - An integer n indicating the number of rows in the grid (1 ≤ n ≤ 100). - An integer m indicating the number of columns in the grid (1 ≤ m ≤ 100). - A matrix of n by m integers where each integer represents the energy cost of the corresponding cell in the grid. Output Output the minimum energy cost required for the robot to reach the bottom-right corner of the grid from the top-left corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Explanation In the first example, the robot can move as follows: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), for a total cost of 1+3+1+1+1 = 7. In the second example, the optimal path is: (0,0) -> (1,0) -> (1,1), with a total cost of 1+1+1 = 3.","solution":"def min_energy_cost(n, m, grid): Returns the minimum energy cost to navigate from the top-left to the bottom-right corner of the grid. # Create a DP table to store the minimum costs dp = [[0] * m for _ in range(n)] # Initiate the top-left corner with the grid\'s top-left value dp[0][0] = grid[0][0] # Populate the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Populate the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner of the dp table contains the minimum cost return dp[n-1][m-1]"},{"question":"You are organizing a music festival where multiple bands are performing on multiple stages. Each band has a set start and end time for their performance. You need to create a schedule that ensures no two bands overlap their performance on the same stage. Given the number of stages and the start and end times of each band\'s performance, determine if it is possible to create a valid schedule where no performances overlap on any stage. Input: - The first line contains two integers N and M, where N is the number of stages and M is the number of bands. - Each of the next M lines contains three integers si, ei, and di, where si represents the start time of the ith band\'s performance, ei represents the end time, and di represents the duration between the start and end times. Output: - Print \\"Yes\\" if it is possible to schedule all the bands without any overlap on the same stage, otherwise print \\"No\\". Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ si < ei ≤ 10^6 1 ≤ di ≤ 10^6 SAMPLE INPUT 3 5 1 5 4 6 10 4 2 8 6 7 12 5 10 15 5 SAMPLE OUTPUT Yes SAMPLE INPUT 2 4 1 5 4 2 6 4 5 10 5 3 8 5 SAMPLE OUTPUT No","solution":"def can_schedule(N, M, bands): Determines if it is possible to schedule all the bands without any overlap on the same stage. :param N: int: Number of stages :param M: int: Number of bands :param bands: List of tuples: Each tuple (si, ei, di) represents the start time, end time and duration of the band\'s performance. :return: str: \\"Yes\\" if it is possible to schedule all the bands without overlap, otherwise \\"No\\" bands.sort(key=lambda x: x[0]) # Sort bands based on start time def can_place_on_stage(stages, band): si, ei = band[0], band[1] for stage in stages: if not stage or stage[-1][1] <= si: stage.append((si, ei)) return True return False stages = [[] for _ in range(N)] for band in bands: if not can_place_on_stage(stages, band): return \\"No\\" return \\"Yes\\" # Example usage: N = 3 M = 5 bands = [(1, 5, 4), (6, 10, 4), (2, 8, 6), (7, 12, 5), (10, 15, 5)] print(can_schedule(N, M, bands)) # Output: Yes N = 2 M = 4 bands = [(1, 5, 4), (2, 6, 4), (5, 10, 5), (3, 8, 5)] print(can_schedule(N, M, bands)) # Output: No"},{"question":"Problem A city has an ancient drainage system that consists of a network of pipes and junctions. Each junction is connected to one or more pipes, and each pipe has a defined flow capacity. Recently, the city experienced heavy rainfall, and part of the drainage system became blocked. The city engineers need your help to determine the maximum flow that can travel from a specific junction to another. You are given a directed graph representing the drainage system. Each node in the graph represents a junction, and each directed edge represents a pipe with a specific flow capacity. You need to compute the maximum flow from the source junction to the destination junction, considering possible blockages. # Input The input format consists of multiple test cases. Each test case starts with two integers `N` and `M`, where `N` is the number of junctions (nodes) and `M` is the number of pipes (edges). Junctions are numbered from 1 to N. The next `M` lines describe the pipes in the format: `u v c`, where `u` is the starting junction of the pipe, `v` is the ending junction, and `c` is the flow capacity of the pipe. The last two lines contain the integer IDs of the source junction `S` and the destination junction `T`. An additional line containing two zeros `0 0` signifies the end of input. # Constraints - 2 ≤ N ≤ 100 - 1 ≤ M ≤ 500 - 1 ≤ u, v, S, T ≤ N - 1 ≤ c ≤ 1000 # Output For each test case, print the maximum flow from the source junction `S` to the destination junction `T`. # Example Input ``` 4 5 1 2 100 2 3 50 1 3 50 3 4 100 2 4 100 1 4 0 0 ``` Output ``` 150 ``` In the provided example, there are 4 junctions and 5 pipes. The maximum flow from junction 1 to junction 4 is 150.","solution":"from collections import deque, defaultdict def bfs(C, F, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in C[u]: if v not in visited and C[u][v] - F[u][v] > 0: # Residual capacity is positive visited.add(v) parent[v] = u queue.append(v) if v == sink: # Reached the sink return True return False def max_flow(graph, source, sink): C = defaultdict(lambda: defaultdict(int)) F = defaultdict(lambda: defaultdict(int)) for u in graph: for v, capacity in graph[u]: C[u][v] = capacity F[u][v] = 0 F[v][u] = 0 parent = {} max_flow_value = 0 while bfs(C, F, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, C[parent[s]][s] - F[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] F[u][v] += path_flow F[v][u] -= path_flow v = u max_flow_value += path_flow return max_flow_value def solve_flow_problem(graph_data, source, sink): graph = defaultdict(list) for u, v, c in graph_data: graph[u].append((v, c)) return max_flow(graph, source, sink) def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') idx = 0 while idx < len(data): N, M = map(int, data[idx].split()) if N == 0 and M == 0: break idx += 1 graph_data = [] for _ in range(M): u, v, c = map(int, data[idx].split()) graph_data.append((u, v, c)) idx += 1 source = int(data[idx]) idx += 1 sink = int(data[idx]) idx += 1 print(solve_flow_problem(graph_data, source, sink)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of integers a of length n. You can perform the following operation any number of times (possibly zero): select an index i (1 leq i leq n-1) and swap a_i and a_{i+1} if a_i > a_{i+1}. Let\'s define the \\"out-of-order\\" count of the sequence as the number of pairs (i, j) such that i < j and a_i > a_j. Your task is to minimize the \\"out-of-order\\" count of the sequence using the minimum number of operations. -----Input----- Each test case consists of several test cases. The first line contains a single integer t (1 leq t leq 40) — the number of test cases. The following is a description of the input data sets. The first line of each test case contains an integer n (1 leq n leq 100) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 100. -----Output----- For each test case, print the minimum \\"out-of-order\\" count after performing the minimum number of operations. -----Examples----- Input 3 3 3 1 2 5 3 1 4 5 2 4 4 3 2 1 Output 0 0 0 -----Note----- In the first test case, you can swap a_1 and a_2 to get the sequence [1, 3, 2], and then swap a_2 and a_3 to get the sequence [1, 2, 3]. The \\"out-of-order\\" count becomes 0 after 2 operations. All subsequent sequences in this and the other test cases can similarly be sorted into non-decreasing order, achieving an \\"out-of-order\\" count of 0.","solution":"def minimize_out_of_order_count(test_cases): results = [] for n, a in test_cases: # We will sort the list to make the out-of-order count zero a.sort() results.append(0) # After sorting, there will be 0 out-of-order pairs return results"},{"question":"You are tasked with creating a typeahead feature for a search engine. The feature should suggest relevant search terms as users type. The base data for this feature consists of previously popular search terms. Each time a user types a character, the system should suggest up to 5 search terms starting with the entered text, ordered by their popularity. Create a function that accepts a list of previous search terms and their respective frequencies, along with a partial search term entered by the user. The function should return a list of up to 5 suggestions. If there are multiple terms with the same frequency, they should be ordered lexicographically. Input - A dictionary where keys are the previous search terms and values are their frequencies. - A partial search term entered by the user. Output - A list of up to 5 suggestions based on the input. Example Input search_terms = { \\"apple\\": 100, \\"appstore\\": 50, \\"application\\": 75, \\"apricot\\": 60, \\"banana\\": 80, \\"berry\\": 30, \\"blueberry\\": 45, \\"blackberry\\": 25 } user_input = \\"ap\\" Output [\\"apple\\", \\"application\\", \\"apricot\\", \\"appstore\\"] Explanation - Based on the partial input \\"ap\\", the terms \\"apple\\", \\"application\\", \\"apricot\\", and \\"appstore\\" are suggested. - These terms are selected and ordered by their frequencies. Since the number of suggestions does not exceed 5, only 4 results are returned in this case.","solution":"def typeahead_suggestions(search_terms, user_input): Generate a list of up to 5 suggestions for the user based on previously popular search terms. Parameters: search_terms (dict): A dictionary where keys are the previous search terms and values are their frequencies. user_input (str): The partial search term entered by the user. Returns: list: A list of up to 5 suggestions. # Filter terms that start with user_input and create a list of (term, frequency) tuples filtered_terms = [(term, freq) for term, freq in search_terms.items() if term.startswith(user_input)] # Sort the terms by frequency in descending order. If frequencies are equal, sort lexicographically filtered_terms.sort(key=lambda x: (-x[1], x[0])) # Extract the sorted terms sorted_terms = [term for term, freq in filtered_terms] # Return up to 5 suggestions return sorted_terms[:5]"},{"question":"Given a string S consisting of only lowercase alphabets, you need to modify the string such that no adjacent characters are the same. You can do this by inserting any number of lowercase alphabets between the existing characters. Your task is to find and print the length of the shortest modified string where no two adjacent characters are the same. -----Constraints----- - 1 leq |S| leq 10^6 - S consists of only lowercase alphabets. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the shortest modified string where no two adjacent characters are the same. -----Sample Input----- abb -----Sample Output----- 4 The shortest modified string where no two adjacent characters are the same is \\"abxb\\" or \\"abab\\" etc., so the length is 4.","solution":"def shortest_modified_length(S): Returns the length of the shortest modified string where no two adjacent characters are the same by potentially inserting any number of lowercase alphabets between the existing characters. n = len(S) if n <= 1: return n modified_length = 1 # Start with the first character for i in range(1, n): if S[i] == S[i - 1]: modified_length += 2 # Insert one character between adjacent same characters else: modified_length += 1 # No need to insert, just move to next character return modified_length"},{"question":"You are given two strings, A and B, consisting of lower case letters. You need to determine the longest substring that is common to both A and B. ----- Constraints ----- - 1 leq |A|, |B| leq 2000 - Both strings A and B contain only lowercase English letters. ----- Input ----- Input is given from Standard Input in the following format: A B ----- Output ----- Print the length of the longest common substring of A and B. ----- Sample Input ----- abcdef zcdemf ----- Sample Output ----- 3 One of the longest common substrings is \\"cde\\" which has length 3.","solution":"def longest_common_substring(A, B): Returns the length of the longest common substring of A and B. n, m = len(A), len(B) # Create a (n+1)x(m+1) array to store lengths of longest common suffixes of substrings lcs = [[0] * (m + 1) for _ in range(n + 1)] longest = 0 # Store the length of the longest common substring for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: lcs[i][j] = lcs[i - 1][j - 1] + 1 longest = max(longest, lcs[i][j]) else: lcs[i][j] = 0 return longest"},{"question":"**Problem:** Given an array of integers, determine if there exists a subarray with a sum equal to a given number `k`. If such a subarray exists, print \\"Yes\\", otherwise print \\"No\\". The subarray should have at least one element. **Input:** The first line consists of two integers, `n` (the number of elements in the array) and `k`. The second line consists of `n` integers representing the elements of the array. **Output:** Print a single line consisting of \\"Yes\\" or \\"No\\". **Constraints:** 1 ≤ n ≤ 10^5 -10^9 ≤ k ≤ 10^9 -10^9 ≤ array elements ≤ 10^9 **Sample Input:** ``` 5 15 1 2 3 7 5 ``` **Sample Output:** ``` Yes ``` **Explanation:** The subarray [7, 5, 3] has a sum of 7 + 5 + 3 = 15, which equals `k`. Thus, the output is \\"Yes\\".","solution":"def subarray_sum_exists(arr, k): Determines if there exists a subarray with sum equal to k. :param arr: List of integers representing the array. :param k: Integer, the target sum. :return: \\"Yes\\" if such a subarray exists, otherwise \\"No\\". sum_set = set() current_sum = 0 for num in arr: current_sum += num if current_sum == k: return \\"Yes\\" if (current_sum - k) in sum_set: return \\"Yes\\" sum_set.add(current_sum) return \\"No\\""},{"question":"Jaya is a budding artist and an equally enthusiastic coder. She is participating in an art competition where she needs to create a unique pattern on a grid. She has decided to automate this task by writing a program. She wishes to fill an N x M grid with a specific pattern. Can you help her write a program to generate this grid? The grid should follow these rules: 1. Cells in the first row should be filled with ascending numbers starting from 1 up to M. 2. Each subsequent row should start with the last number of the previous row plus 1, and this sequence continues. Input The first line contains two unsigned integers N and M representing the number of rows and columns in the grid respectively. Output The output should be an N x M grid where each cell is filled according to the rules mentioned above. Constraints 1 <= N, M <= 1000 Example Input: 3 4 Output: 1 2 3 4 5 6 7 8 9 10 11 12 Input: 2 5 Output: 1 2 3 4 5 6 7 8 9 10","solution":"def generate_grid(N, M): Generates an N x M grid where the cells are filled with ascending numbers starting from 1. :param N: The number of rows in the grid. :param M: The number of columns in the grid. :return: A 2D list representing the grid. grid = [] current_number = 1 for i in range(N): row = [] for j in range(M): row.append(current_number) current_number += 1 grid.append(row) return grid"},{"question":"Write a program to simulate the process of infecting a network of computers. The network is represented as an undirected graph, where nodes represent computers and edges represent direct connections between computers. Initially, only one computer (the \\"patient zero\\") is infected. An infected computer will try to infect all its directly connected computers in a single step, and this infection process repeats until there are no new infections. You need to determine the number of steps required to either infect all computers in the network or determine that it\'s impossible to infect all computers. # Input - The first line contains an integer `t`, the number of test cases. - For each test case: - The first line contains two integers `n` and `m`, representing the number of computers (nodes) and the number of connections (edges) in the network, respectively. - The following `m` lines each contain two integers `u` and `v`, indicating that there is a direct connection between computer `u` and computer `v`. - The last line of a test case contains an integer `p`, indicating the initial infected computer (patient zero). # Output For each test case, output the number of steps required to infect all computers, or -1 if it\'s impossible to infect all computers. # Constraints - 1 <= t <= 100 - 1 <= n <= 1000 - 0 <= m <= 10000 - 1 <= u, v, p <= n # Example Input ``` 2 5 4 1 2 2 3 3 4 4 5 1 5 2 1 2 3 4 1 ``` Output ``` 4 -1 ``` # Explanation In the first test case, starting from computer 1, the infection spreads to 2 -> 3 -> 4 -> 5, taking 4 steps to infect all computers. In the second test case, starting from computer 1, it can only infect computer 2. Computers 3 and 4 cannot be reached, so it\'s impossible to infect all computers, thus the output is -1.","solution":"from collections import deque, defaultdict def infect_networks(t, test_cases): results = [] for i in range(t): n, m, edges, p = test_cases[i] graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Use BFS to determine the infection spread step by step visited = [False] * (n + 1) visited[p] = True queue = deque([p]) steps = 0 while queue: steps += 1 for _ in range(len(queue)): current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if all(visited[1:]): results.append(steps - 1) # subtract 1 because initial step is counted extra else: results.append(-1) return results"},{"question":"You are given a sequence of numbers and you need to find the longest contiguous subsequence such that the absolute difference between any two consecutive numbers in the subsequence is exactly one. Your task is to write a function that returns the length of the longest contiguous subsequence that satisfies this condition. Input The input consists of multiple datasets. Each dataset represents a sequence of integers in the following format: > n > x1 x2 x3 ... xn The first line of a dataset contains an integer n (1 ≤ n ≤ 1000) representing the number of integers in the sequence. The second line contains n integers separated by a single space. Each integer xi (0 ≤ xi ≤ 10^6). The end of the input is indicated by a line containing a zero. Output For each dataset, output a single line containing the length of the longest contiguous subsequence that has the property that the absolute difference between any two consecutive numbers is exactly one. No extra characters should appear in the output. Example Input ``` 6 1 2 3 2 1 2 5 5 4 3 2 1 10 10 11 12 11 10 9 8 7 6 5 4 1 3 5 7 0 ``` Output ``` 6 5 10 1 ``` Explanation of Sample Input and Output: 1. For the first dataset, the entire sequence [1, 2, 3, 2, 1, 2] satisfies the condition. Thus, the output is 6. 2. For the second dataset, the entire sequence [5, 4, 3, 2, 1] satisfies the condition. Thus, the output is 5. 3. For the third dataset, the entire sequence [10, 11, 12, 11, 10, 9, 8, 7, 6, 5] satisfies the condition. Thus, the output is 10. 4. For the fourth dataset, none of the subsequence satisfies the condition except individual elements. Thus, the output is 1.","solution":"def longest_contiguous_subsequence(n, sequence): Returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive numbers is exactly one. if n == 0: return 0 longest = 1 current_length = 1 for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) == 1: current_length += 1 else: current_length = 1 longest = max(longest, current_length) return longest def process_input(input_data): result = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break sequence = list(map(int, input_data[index + 1].split())) result.append(longest_contiguous_subsequence(n, sequence)) index += 2 return result"},{"question":"Given a string S representing an arithmetic expression containing only non-negative integers, the + operator, and the * operator, your task is to evaluate the expression and return the result. The expression is given in infix notation, and precedence of operators should be considered: - + has lower precedence than *. Example 1: Input: S = \\"2+3*4\\" Output: 14 Explanation: According to operator precedence, the expression should be evaluated as 2 + (3 * 4) = 2 + 12 = 14. Example 2: Input: S = \\"10*2+4\\" Output: 24 Explanation: According to operator precedence, the expression should be evaluated as (10 * 2) + 4 = 20 + 4 = 24. Your Task: You don\'t need to read input or print anything. Your task is to complete the function evaluateExpression() which takes a string S as input and returns the evaluated result as an integer. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 <= |S| <= 10^3 The input string S will always be a valid and well-formed arithmetic expression.","solution":"def evaluateExpression(S): Evaluates the arithmetic expression in the string S and returns the result. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def applyOp(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(applyOp(val1, val2, op)) return values[-1] return evaluate(S)"},{"question":"You are given a grid of size N * M representing a battle field where soldiers are stationed. Each cell in the grid can either contain a soldier represented by \'S\' or be empty represented by \'.\'. Your task is to determine the largest square formation of soldiers (all \'S\' within the square) possible in the battle field. The square formation can only be considered valid if it contains only \'S\' characters and must be contiguous. Example 1: Input: N = 5, M = 6 grid = [[\'S\', \'S\', \'.\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'.\', \'S\', \'S\', \'.\'], [\'.\', \'.\', \'S\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'S\', \'S\', \'.\', \'S\'], [\'S\', \'S\', \'S\', \'S\', \'S\', \'S\']] Output: 2 Explanation: The largest square sub-grid containing only \'S\' has a side length of 2. Example 2: Input: N = 3, M = 4 grid = [[\'S\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'.\', \'S\'], [\'S\', \'.\', \'S\', \'.\']] Output: 2 Example 3: Input: N = 4, M = 4 grid = [[\'S\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'S\', \'S\'], [\'S\', \'S\', \'S\', \'S\']] Output: 4 Your Task: Your task is to complete the function largest_square_formation() which takes a 2D list grid, an integer N and an integer M as the input parameters and returns an integer, denoting the side length of the largest square formation consisting only of \'S\'. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: - 1 <= N, M <= 1000 - grid[i][j] is \'S\' or \'.\'","solution":"def largest_square_formation(grid, N, M): if not grid or not grid[0]: return 0 # DP table to store the size of largest square sub-grid ending at (i, j) dp = [[0] * M for _ in range(N)] max_side = 0 # Iterate through the grid for i in range(N): for j in range(M): if grid[i][j] == \'S\': if i == 0 or j == 0: # If it\'s in the first row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_side: max_side = dp[i][j] return max_side"},{"question":"Write a function that determines if a given array of integers can be divided into pairs where the sum of each pair is an even number. For instance: ```python can_be_paired([1, 3, 2, 6, 4, 8]) = True, because the pairs (1, 3), (2, 6), and (4, 8) sum to even numbers. can_be_paired([1, 3, 5, 7]) = True, because all pairs (1, 3) and (5, 7) sum to even numbers. can_be_paired([1, 2, 3, 4, 5, 6]) = False, because it’s not possible to pair all elements to get even sums. can_be_paired([2, 4, 6, 8]) = True, as pairs (2, 4) and (6, 8) sum to even numbers. can_be_paired([1, 2, 3]) = False, as an odd number of elements can\'t form pairs. can_be_paired([]) = True, an empty array can be considered as trivially paired. ``` Good luck!","solution":"def can_be_paired(arr): Determines if the array can be divided into pairs where the sum of each pair is an even number. if len(arr) % 2 != 0: return False odd_count = sum(1 for x in arr if x % 2 != 0) even_count = len(arr) - odd_count return odd_count % 2 == 0 and even_count % 2 == 0"},{"question":"Given a string str with alphanumeric characters and spaces, write a function to reverse the order of words. A word is defined as a contiguous sequence of alphanumeric characters. The function should return the modified string with words in reverse order, while preserving the relative order of spaces. Example 1: Input: str = \\"hello world\\" Output: \\"world hello\\" Explanation: The string contains two words \\"hello\\" and \\"world\\". Reversing the order of words, the output becomes \\"world hello\\". Example 2: Input: str = \\" a good example \\" Output: \\" example good a \\" Explanation: The string contains the words \\"a\\", \\"good\\", and \\"example\\". Reversing the order of these words and preserving the relative order of spaces yields the output \\" example good a \\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function reverseWords() that takes a string (str) and returns the modified string after reversing the order of words. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ length of str ≤ 10^5","solution":"def reverseWords(s: str) -> str: Reverses the order of words in the given string while preserving the relative order of spaces. :param s: Input string with alphanumeric characters and spaces. :return: String with words in reversed order. words = s.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"Ishan is organizing a coding tournament where participants compete in pairs. Each participant has a skill level, represented by an integer. The skill level differences between paired participants should be minimized to promote fair contests. Given a list of `n` participant skill levels, design an algorithm to print the pairs such that the maximum skill level difference between paired participants is minimized. Each participant should be paired exactly once. If the number of participants is odd, one participant will remain unpaired. Write a function that takes an array of integers representing skill levels and returns a list of tuples, where each tuple consists of two integers representing the paired skill levels. If there\'s an odd number of participants, include the unpaired participant as a single integer in the output list. Example 1: Input skills = [1, 3, 4, 8, 9, 10] Output [(1, 3), (4, 8), (9, 10)] Example 2: Input skills = [5, 2, 3, 1] Output [(1, 2), (3, 5)] In case of an odd number of participants: Example 3: Input skills = [4, 2, 9, 3, 7] Output [(2, 3), (4, 7), 9] Your Task: You don\'t need to read input or print anything. Write a function `findPairs(skills: List[int]) -> List[Union[Tuple[int, int], int]]` that receives a list of integers and returns a list of tuples and/or integers. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 1 <= skills[i] <= 10^9","solution":"from typing import List, Union, Tuple def findPairs(skills: List[int]) -> List[Union[Tuple[int, int], int]]: # Sort the skill levels skills.sort() # Initialize the list to store pairs pairs = [] # Pair each skill with the next one for i in range(0, len(skills) - 1, 2): pairs.append((skills[i], skills[i + 1])) # If there\'s an odd number of skills, append the last element if len(skills) % 2 != 0: pairs.append(skills[-1]) return pairs"},{"question":"In a factory, there are a number of machines operating simultaneously to produce widgets. Each machine operates at a different speed, represented by the number of widgets it can produce per minute. The factory operates for a specific number of minutes, and we want to determine how many widgets can be created in a given time frame. Given an array of integers where each integer represents the speed of a machine, and an integer representing the total number of minutes the machines will operate, write a program to calculate the total number of widgets produced by the factory. # Input - An integer `n` (1 ≤ n ≤ 1000), the number of machines. - An array of `n` integers where the i-th integer represents the speed of the i-th machine (1 ≤ speed ≤ 100). - An integer `t` (1 ≤ t ≤ 10000), the total number of minutes the machines will operate. # Output - Print a single integer, the total number of widgets produced by the factory. # Examples Input ``` 3 4 2 3 10 ``` Output ``` 90 ``` Input ``` 5 1 2 3 4 5 6 ``` Output ``` 90 ``` Input ``` 2 5 10 7 ``` Output ``` 105 ``` # Note In the first example: - Machine 1 produces 4 widgets per minute. Over 10 minutes, it produces 4 * 10 = 40 widgets. - Machine 2 produces 2 widgets per minute. Over 10 minutes, it produces 2 * 10 = 20 widgets. - Machine 3 produces 3 widgets per minute. Over 10 minutes, it produces 3 * 10 = 30 widgets. - The total number of widgets produced is 40 + 20 + 30 = 90.","solution":"def total_widgets_produced(n, speeds, t): Calculate the total number of widgets produced by the factory. :param n: The number of machines. :param speeds: An array of integers representing the speed of each machine. :param t: The total number of minutes the machines will operate. :return: The total number of widgets produced. return sum(speed * t for speed in speeds)"},{"question":"Implement a function that checks if a given string is valid based on the following rules: 1. The string should only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. 2. The brackets must close in the correct order, i.e., every opening bracket must have a corresponding closing bracket of the same type and must be in the correct order. For example, given the string \\"()\\", return true; given the string \\"()[]{}\\", return true; given the string \\"(]\\", return false. Note: - An empty string is considered valid. - The input string will have a length of at most 1000. Write the function `isValid(s: str) -> bool`. **Example:** ``` isValid(\\"()\\") # returns True isValid(\\"()[]{}\\") # returns True isValid(\\"(]\\") # returns False ```","solution":"def isValid(s: str) -> bool: Checks if the input string s has valid brackets. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: # closing bracket top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: # opening bracket stack.append(char) return not stack"},{"question":"# Minesweeper Board Validation Minesweeper is a classic game where players uncover cells on a grid, with some cells containing hidden mines. The goal is to clear the board without detonating any mines, using numbers on uncovered cells to deduce the locations of the hidden mines. Each number indicates the count of mines in the eight surrounding cells. In this problem, you must validate a minesweeper game board. Write a function `validateMinesweeperBoard` that receives a 2D array representing a Minesweeper board and validates whether the numbers on the board match with the surrounding mines. The board cells can either be: - A number from 0 to 8, representing the count of mines in the adjacent cells. - A \'*\' indicating a hidden mine. The function should return `True` if the board is valid, and `False` otherwise. The board will be rectangular (not necessarily square) and can be of any size. # Examples ```python validateMinesweeperBoard([ [1, \'*\', 1, 0], [1, 1, 1, 0], [0, 0, 0, 0] ]) # => True ``` ```python validateMinesweeperBoard([ [1, \'*\', 1], [2, 2, 1], [1, \'*\', 1], [0, 1, 1], [\'*\', \'*\', 1] ]) # => False ``` # Constraints - The 2D array will only contain numbers from 0 to 8 and \'*\' characters. - The board dimensions will be at most 20x20. # Function Signature ```python def validateMinesweeperBoard(board: List[List[Union[int, str]]]) -> bool: pass ```","solution":"from typing import List, Union def validateMinesweeperBoard(board: List[List[Union[int, str]]]) -> bool: def countMines(x, y): count = 0 for dx in [-1, 0, 1]: for dy in [-1, 0, 1]: if dx == 0 and dy == 0: continue nx, ny = x + dx, y + dy if 0 <= nx < len(board) and 0 <= ny < len(board[0]) and board[nx][ny] == \'*\': count += 1 return count for i in range(len(board)): for j in range(len(board[0])): if isinstance(board[i][j], int): if board[i][j] != countMines(i, j): return False return True"},{"question":"An ancient temple is undergoing renovations, and you have been appointed to manage its colossal golden doors. Each golden door consists of n massive panels arranged in sequence. The panels are numbered from 1 to n from left to right. However, due to wear and tear over centuries, some panels have weakened and might bend, causing damage if not taken care of properly. Your task is to reinforce these panels with steel beams. Each steel beam can cover exactly k consecutive panels, adding support and preventing them from bending. You can use exactly m steel beams. The reinforcement should follow these rules: - Each beam used must cover exactly k consecutive panels. - The beams can overlap if necessary. - A panel is considered reinforced if at least one beam covers it. You are required to calculate the number of panels that will remain unreinforced after using all m beams optimally. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n, 1 ≤ k ≤ n) — the number of panels, the number of beams, and the length of each beam. Output Print a single integer — the number of unreinforced panels after optimal placement of the beams. Examples Input 10 2 3 Output 4 Input 15 3 4 Output 3 Input 12 1 5 Output 7 Note: In the first example, you can optimally place the beams like this: {1, 2, 3} and {8, 9, 10}. Panels {1, 2, 3, 8, 9, 10} will be reinforced, and the remaining panels {4, 5, 6, 7} will be unreinforced, hence the output is 4. In the second example, place the beams like this: {1, 2, 3, 4}, {5, 6, 7, 8}, and {9, 10, 11, 12}. Panels {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12} will be reinforced, leaving panels {13, 14, 15} unreinforced, hence the output is 3. In the third example, place the beam like this: {1, 2, 3, 4, 5}. Panels {1, 2, 3, 4, 5} will be reinforced, leaving panels {6, 7, 8, 9, 10, 11, 12} unreinforced, hence the output is 7.","solution":"def unreinforced_panels(n, m, k): # Calculating maximum number of panels that can be reinforced max_reinforced_panels = m * k # Remaining unreinforced panels will be the total panels minus the maximum reinforced panels unreinforced = n - max_reinforced_panels # If the result is negative, it means all panels can be reinforced return max(unreinforced, 0)"},{"question":"Given an array of integers and a target value, find the number of unique pairs of elements in the array that sum up to the target value. Each pair should be counted only once, regardless of the order of the elements. Input The first line contains an integer n — the number of elements in the array (1 ≤ n ≤ 100000). The second line contains n space-separated integers representing the elements of the array, where each integer is no greater than 109 by absolute value. The third line contains a single integer target, which represents the target sum value (By absolute value, no greater than 109). Output Print a single integer representing the number of unique pairs of elements that sum up to the target value. Examples Input 6 1 5 7 -1 5 3 6 Output 2 Input 5 2 3 4 3 1 7 Output 1 Input 4 1 1 1 1 2 Output 1","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs in the array that sum up to the target value. seen = {} pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen[num] = seen.get(num, 0) + 1 return len(pairs) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) target = int(data[n+1]) print(count_unique_pairs(arr, target)) if __name__ == \\"__main__\\": main()"},{"question":"Given an undirected graph with `n` nodes and `m` edges, find the minimum number of nodes that need to be removed so that the remaining graph is a tree. Recall that a tree is an acyclic connected graph with `n-1` edges. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of nodes and edges respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing an edge between nodes `u` and `v`. Output Print one integer — the minimum number of nodes that need to be removed. Examples Input 6 5 1 2 1 3 3 4 3 5 5 6 Output 1 Input 4 5 1 2 2 3 3 1 3 4 2 4 Output 1 Note In the first example, by removing node 3, the remaining graph becomes a tree with edges {(1,2), (3,4), (4,5)} and connected components. In the second example, by removing any node between the cycle formed by nodes 1, 2, 3, and 4, it results in a tree.","solution":"def find_minimum_removal(n, m, edges): import collections def find_cycle_dfs(node, parent): visited[node] = True stack.append(node) for neighbor in adj_list[node]: if not visited[neighbor]: if find_cycle_dfs(neighbor, node): return True elif neighbor != parent: cycle_nodes.update(stack[stack.index(neighbor):]) return True stack.pop() return False # Create adjacency list adj_list = collections.defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) stack = [] cycle_nodes = set() # Detect cycle in unvisited components for i in range(1, n + 1): if not visited[i]: if find_cycle_dfs(i, -1): break return 1 if cycle_nodes else 0"},{"question":"In a certain kingdom, there\'s a peculiar type of tree called a MaxiTree. The uniqueness of this tree lies in its nodes\' arrangement. You are given a binary tree, where each node has a value. Your task is to determine whether this binary tree is a MaxiTree. A tree is considered a MaxiTree if each node\'s value is the maximum value among all values in its subtree. A subtree of a node is the tree consisting of that node and its descendants. -----Input----- The first line of the input contains an integer N, the number of nodes in the binary tree. Each of the following N lines contains: an integer index, a value C representing the node’s value, and two integers L and R. L is the index of the left child node, and R is the index of the right child node. L and R are -1 if the node doesn\'t have that respective child. -----Output----- Output \\"Yes\\" (without quotes) if the given binary tree is a MaxiTree, otherwise output \\"No\\" (without quotes). -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ Ci ≤ 10000 - -1 ≤ L, R < N -----Example----- Input: 5 0 10 1 2 1 5 -1 -1 2 10 3 4 3 5 -1 -1 4 2 -1 -1 Output: Yes Explanation: The node 0 has value 10 and its subtree ({10, 5, 10, 5, 2}) is valid since 10 is max. Node 1 has value 5 and its subtree ({5}) is valid since 5 is max. Similarly, Node 2 has value 10 and its subtree ({10, 5, 2}) with 10 as max. Node 3 has value 5 and its subtree ({5}) with 5 as max. Lastly, Node 4 has value 2 and its subtree ({2}) with 2 as max. So the tree is a MaxiTree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes_info): nodes = {} for index, value, left, right in nodes_info: if index not in nodes: nodes[index] = TreeNode(value) else: nodes[index].value = value if left != -1: if left not in nodes: nodes[left] = TreeNode(0) # Placeholder value, will be set later nodes[index].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(0) # Placeholder value, will be set later nodes[index].right = nodes[right] return nodes[0] # Assuming the root is always at index 0 def is_maxitree(node): if not node: return float(\'-inf\'), True left_max, is_left_maxi = is_maxitree(node.left) right_max, is_right_maxi = is_maxitree(node.right) if is_left_maxi and is_right_maxi and node.value >= left_max and node.value >= right_max: return max(node.value, left_max, right_max), True else: return node.value, False def check_maxitree(n, nodes_info): if n == 0: return \\"No\\" root = build_tree(nodes_info) _, is_maxi = is_maxitree(root) return \\"Yes\\" if is_maxi else \\"No\\""},{"question":"You are given a list of integers. Your task is to determine if it is possible to rearrange the elements of the list such that no two adjacent elements have the same value. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines of input: - The first line contains a single integer n, the number of elements in the list. - The second line contains n integers representing the list. -----Output:----- For each testcase, output \\"YES\\" if it is possible to rearrange the elements of the list such that no two adjacent elements are the same. Otherwise, output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 10^5 - 1 leq a_i leq 10^5 (Where a_i is one of the integers in the list) -----Sample Input:----- 3 5 1 2 2 3 3 4 4 4 4 4 6 1 1 1 2 2 3 -----Sample Output:----- YES NO YES -----EXPLANATION:----- - In the first case, it is possible to rearrange the list into [1, 2, 3, 2, 3] or any other valid sequence where no two successive elements are the same. - In the second case, all elements are identical, so it\'s not possible to rearrange them to satisfy the condition. - In the third case, a possible arrangement could be [1, 2, 1, 2, 1, 3], ensuring no two adjacent elements are the same.","solution":"from collections import Counter def can_rearrange_no_adjacent(T, test_cases): results = [] for t in range(T): n = test_cases[t][0] arr = test_cases[t][1] if n == 1: results.append(\\"YES\\") continue count = Counter(arr) max_freq = max(count.values()) if max_freq <= (n + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A cycle in a graph is a sequence of nodes where you can start at a particular node and traverse along edges, eventually leading back to the starting node without repeating any edge more than once. A graph that contains no cycles is called acyclic. Trees are a special class of acyclic graphs that are connected and undirected. Your task is to write a program that can find a cycle in an undirected graph if there is any. If the graph contains a cycle, the program should output one such cycle. Otherwise, it should indicate that the graph is acyclic. -----Input----- The input specifies a single undirected graph. The first line of input contains two integers, n and m (1 leq n leq 1000, 0 leq m leq 2000), where n is the number of nodes and m is the number of edges. This is followed by m lines, each containing two integers, x and y (1 ≤ x, y ≤ n), indicating that there is an edge between node x and node y. -----Output----- If the graph contains a cycle, output the sequence of nodes forming a cycle in any order such that each subsequent node in the sequence is connected by an edge. If there are multiple cycles, output any one. If the graph is acyclic, output “ACYCLIC”. -----Examples----- Sample Input 1: 5 5 1 2 2 3 3 4 4 2 4 5 Sample Output 1: 2 3 4 2 Sample Input 2: 4 2 1 2 3 4 Sample Output 2: ACYCLIC","solution":"def find_cycle(n, m, edges): from collections import defaultdict, deque def dfs(v, parent): visited.add(v) stack.append(v) for neighbor in graph[v]: if neighbor == parent: continue if neighbor in visited: # Cycle found, reconstruct it cycle = deque() while stack and stack[-1] != neighbor: cycle.appendleft(stack.pop()) cycle.appendleft(neighbor) cycle.append(neighbor) return cycle, True else: result, found = dfs(neighbor, v) if found: return result, found stack.pop() return None, False graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) visited = set() stack = deque() for i in range(1, n + 1): if i not in visited: result, found = dfs(i, -1) if found: return list(result) return \\"ACYCLIC\\""},{"question":"In the futuristic city of Technovia, the residents have developed an advanced system to manage their energy consumption. The city grid is represented as a tree with `n` nodes, where each node represents a different district, and each edge represents an energy conduit between two districts. The grid\'s central hub is at node `1`. Recently, the city planners decided to optimize the energy distribution to ensure that the energy loss is minimized. They observed that the energy loss between two connected districts is directly proportional to the distance between them (number of edges). To achieve this optimization, they need to make sure that every district gets energy directly from the central hub with the least possible energy loss. However, during the optimization process, the city\'s mainframe computer crashed and failed to provide the necessary information. Your task is to help the city planners compute the minimum energy loss for each district when redirected to the hub. -----Input----- - The first line contains a single integer `n` (1 le n le 2000), the number of nodes (districts) in the tree. - The next `n-1` lines each contain two integers `u` and `v (1 le u, v le n), indicating that there is an edge between nodes `u` and `v. -----Output----- Print exactly `n` lines. The `i-th` line should contain the minimum energy loss required to supply energy from the hub to district `i`. -----Examples----- Sample Input: 5 1 2 1 3 2 4 2 5 Sample Output: 0 1 1 2 2","solution":"from collections import deque def min_energy_loss(n, edges): # Initialize the adjacency list adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Distance array to store distance from node 1 distance = [-1] * (n + 1) distance[1] = 0 # Perform BFS to compute the shortest distance from hub (node 1) queue = deque([1]) while queue: current = queue.popleft() for neighbor in adjacency_list[current]: if distance[neighbor] == -1: distance[neighbor] = distance[current] + 1 queue.append(neighbor) return distance[1:] # Exclude the 0-th index as nodes are 1-indexed # Function for testing purposes def energy_loss(n, edges): losses = min_energy_loss(n, edges) for loss in losses: print(loss)"},{"question":"Given an input array, modify the array such that all the even numbers appear before all the odd numbers while maintaining the relative order of even and odd numbers from the original array. You are required to create a function that performs this transformation in place, and you cannot use additional arrays or data structures. -----Input----- The first line of input contains a single number n (1 le n le 100) — the size of the array. The second line of input contains n space-separated integers a_i (1 le a_i le 1000) — the elements of the array. -----Output----- The function should modify the input array in place such that all even numbers appear before all odd numbers, maintaining their relative order from the original array. Output the modified array. -----Example----- Input 5 1 2 3 4 5 Output 2 4 1 3 5 Input 6 10 21 32 41 50 60 Output 10 32 50 60 21 41 -----Note----- In the first example, the even numbers 2 and 4 are moved to the front, and the odd numbers are pushed towards the end, keeping their original order. In the second example, the even numbers 10, 32, 50, and 60 are at the front while the odd numbers 21 and 41 are pushed towards the end, maintaining their relative positions.","solution":"def rearrange_even_odd(arr): Rearranges the array such that all even numbers appear before all odd numbers while maintaining their relative order from the original array. even_index = 0 total_elements = len(arr) for current in range(total_elements): if arr[current] % 2 == 0: # Move even number to the even_index position even_number = arr.pop(current) arr.insert(even_index, even_number) even_index += 1 return arr # Returning array for verification but it\'s modified in place"},{"question":"In a video game, players find themselves in a grid-based maze consisting of walls and empty spaces. The player can only move up, down, left, or right and aims to reach the exit located at the bottom-right corner of the grid starting from the top-left corner. However, the maze contains traps that result in an instantaneous game over if stepped upon. Additionally, some passages have doors that can only be opened one-way once by the player. Design a function to navigate through the maze and achieve the goal. Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers R and C, the number of rows and columns in the grid. - The next R lines each contain a string of length C representing the maze where: - \'.\' represents an empty space. - \'#\' represents a wall. - \'T\' represents a trap. - \'D\' represents a door that can only be opened one-way. Output For each test case, print \\"YES\\" if the player can reach the exit from the starting position without stepping on any traps or print \\"NO\\" otherwise. Constraints - 1 ≤ T ≤ 10 - 1 ≤ R, C ≤ 1000 Assume that there\'s always a starting point at the top-left corner (0, 0) and an exit at the bottom-right corner (R-1, C-1). Sample Input 2 3 3 ... .#. ..D 4 4 .D.T .T.. .... ...# Sample Output YES NO Explanation In the first test case, the player can move right, down, down to reach the exit without encountering any traps or doors that block the way. In the second test case, it\'s impossible to reach the exit without stepping on a trap or hitting a door that prohibit progress.","solution":"from collections import deque # Directions for movement: Up, Down, Left, Right DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid_move(r, c, R, C, maze, visited): return 0 <= r < R and 0 <= c < C and maze[r][c] != \'#\' and maze[r][c] != \'T\' and (r, c) not in visited def can_escape_maze(maze, R, C): start = (0, 0) end = (R-1, C-1) if maze[start[0]][start[1]] == \'T\' or maze[end[0]][end[1]] == \'T\': return False queue = deque([start]) visited = set() visited.add(start) while queue: r, c = queue.popleft() if (r, c) == end: return True for dr, dc in DIRECTIONS: nr, nc = r + dr, c + dc if is_valid_move(nr, nc, R, C, maze, visited): visited.add((nr, nc)) queue.append((nr, nc)) return False def solve_mazes(test_cases): results = [] for R, C, maze in test_cases: if can_escape_maze(maze, R, C): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of names and their respective scores in a competition. Your task is to identify and print the name(s) of the participant(s) who have the second lowest score. Input Format The first line contains an integer N, the number of participants. The next 2N lines contain the names and scores of the participants respectively. - The first line contains the name of the first participant. - The second line contains the score of the first participant. - The third line contains the name of the second participant. - The fourth line contains the score of the second participant, and so on. Constraints - 2 leq N leq 50 - The names are non-empty strings and contain no spaces. - The scores are either integers or floats, and they are valid numbers. Output Format Print the name(s) of the participant(s) who have the second lowest score. If there are multiple participants with the second lowest score, print their names on separate lines in alphabetical order. Sample Input 5 Harry 37.21 Berry 37.21 Tina 37.2 Akriti 41 Harsh 39 Sample Output Berry Harry Explanation The given participants and their scores are: Harry: 37.21 Berry: 37.21 Tina: 37.2 Akriti: 41 Harsh: 39 The lowest score is 37.2, and the second lowest score is 37.21. The participants with the second lowest score are Harry and Berry. Since the names need to be printed in alphabetical order, Berry is printed before Harry.","solution":"def find_second_lowest_scorers(participants): Find the names of participant(s) who have the second lowest score. :param participants: List of tuples, each containing a name and a score. :return: List of names with the second lowest score, sorted alphabetically. scores = sorted(set([score for name, score in participants])) if len(scores) < 2: return [] second_lowest_score = scores[1] second_lowest_scorers = sorted([name for name, score in participants if score == second_lowest_score]) return second_lowest_scorers"},{"question":"Design a function that takes a string of words separated by spaces and returns the length of the shortest word in the string. The input string will contain only letters and spaces. Ensure that there is no leading, trailing, or multiple consecutive spaces in the input string. For example: ```cs FindShortestWordLength(\\"The quick brown fox jumps over the lazy dog\\"); //3 FindShortestWordLength(\\"Some random words here\\"); //4 FindShortestWordLength(\\"Short and sweet\\"); //3 FindShortestWordLength(\\"Understanding the problem\\"); //3 ``` ```python find_shortest_word_length(\\"The quick brown fox jumps over the lazy dog\\") # 3 find_shortest_word_length(\\"Some random words here\\") # 4 find_shortest_word_length(\\"Short and sweet\\") # 3 find_shortest_word_length(\\"Understanding the problem\\") # 3 ``` Write robust code that handles the cases where the input string is empty by raising a ValueError. ```cs //Throw a ValueError if the input string is empty. ``` ```python #Raise a ValueError if the input string is empty. ``` You may assume that if the input string is not empty, it will always contain at least one word.","solution":"def find_shortest_word_length(s): Returns the length of the shortest word in the given string s. Raises a ValueError if the input string is empty. if not s: raise ValueError(\\"Input string is empty.\\") # Split the string into words and find the length of each word words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Create a function that takes two integer arrays of equal length and returns an array containing the products of the corresponding elements from the input arrays. Examples: productArrays([1, 2, 3], [4, 5, 6]) == [4, 10, 18] productArrays([7, 8], [9, 10]) == [63, 80]","solution":"def productArrays(arr1, arr2): Returns an array containing the products of the corresponding elements from the input arrays. return [a * b for a, b in zip(arr1, arr2)]"},{"question":"You are given a rectangular grid with dimensions `n` rows and `m` columns. Each cell in the grid contains an integer representing its height. The height of the cell at row `r` and column `c` is provided as `h[r][c]`. You are asked to compute the number of special cells in the grid. A cell is considered special if its height is greater than or equal to the heights of all its 8 neighboring cells (if they exist). Diagonal neighbors are considered in this problem. Write a function that takes in the grid dimensions and the height values, and returns the number of special cells. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers, where the `j`-th integer on the `i`-th line represents the height of the cell at row `i` and column `j` (0 ≤ heights[i][j] ≤ 1000). Output - Print one integer — the number of special cells in the grid. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 Explanation The only special cell in this example is the cell at (3, 3) with height 9, as it is higher than all of its neighbors. Input 2 2 1 2 3 4 Output 1 Explanation The only special cell is the cell at (2, 2) with height 4.","solution":"def count_special_cells(n, m, grid): Returns the number of special cells in the grid. def is_special_cell(r, c): # List of all 8 possible neighbor coordinates neighbors = [ (r-1, c), (r+1, c), (r, c-1), (r, c+1), (r-1, c-1), (r-1, c+1), (r+1, c-1), (r+1, c+1) ] for nr, nc in neighbors: if 0 <= nr < n and 0 <= nc < m: if grid[r][c] < grid[nr][nc]: return False return True special_count = 0 for r in range(n): for c in range(m): if is_special_cell(r, c): special_count += 1 return special_count"},{"question":"You are given data about various historical events and the years they occurred. Your task is to identify events that occurred in the same year across different sources. The data is given as a single file in the following format: year on a separate line, followed by a list of historical events that happened in that year, one event per line. Each entry of the list is formatted as an asterisk \\"*\\" followed by a single space and then by the event description. Entries are unique within each year. The first line of input will represent a year. The input will contain at least one event. Year is a non-empty sequence of four digits. The year will be separated in input with one or more spaces. Event description is a non-empty sequence of words, where each word consists of only English letters and digits. The words of the description of some event will be separated in input with one or more spaces. You can consider two descriptions equal if the corresponding sequences of words are equal. You shouldn\'t consider the case of the letters when you compare the words. Output the list of historical events that occurred in the greatest number of years. It\'s guaranteed that all years have distinct entries. Input The input contains between 2 and 50 lines. Every line of input will contain between 1 and 100 characters, inclusive. No line has leading or trailing spaces. Output Output the list of historical events which occurred in the greatest number of years in alphabetical order. Each event must be converted to lowercase (one event can be written with varying capitalization in different years). The alphabetical order of events means the lexicographical order of sequences of words (their descriptions). Examples Input 2000 * Y2K Bug * Sydney Olympics 2000 * US Presidential Election 2001 * 9/11 Attacks 2001 * US Presidential Election 2002 * Brazil Wins World Cup Output us presidential election Input 1999 * Y2K Bug * Euro Launched 1998 * Google Founded 1998 * FIFA World Cup 1999 * Pakistan Nuclear Tests 1998 * Y2K Bug Output y2k bug","solution":"def find_common_events(data): from collections import defaultdict event_years = defaultdict(set) current_year = None for line in data.splitlines(): line = line.strip() if line.isdigit(): current_year = int(line) elif len(line) > 2 and line[:2] == \\"* \\": event = line[2:].strip().lower() event_years[event].add(current_year) max_years = max(len(years) for years in event_years.values()) common_events = [ event for event, years in event_years.items() if len(years) == max_years ] return sorted(common_events)"},{"question":"Given an array of distinct integers and a target integer k, return the number of unique pairs of integers in the array that sum up to k. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 5 Output: 2 Explanation: The pairs are (1, 4) and (2, 3). Example 2: Input: nums = [1, 1, 2, 2, 3, 3], k = 4 Output: 2 Explanation: The pairs are (1, 3) and (2, 2). Note that while the values are present multiple times, each pair is counted only once. Example 3: Input: nums = [0, -1, 2, -3, 1], k = -2 Output: 1 Explanation: The pair is (-3, 1).","solution":"def count_pairs_with_sum(nums, k): Returns the number of unique pairs of integers in the array that sum up to k. unique_pairs = set() seen_numbers = set() for num in nums: complement = k - num if complement in seen_numbers: unique_pairs.add(tuple(sorted((num, complement)))) seen_numbers.add(num) return len(unique_pairs)"},{"question":"Task You are building a simple spell checker for a text editor. The spell checker will identify words that are not in a predefined dictionary of words. Given a dictionary of valid words and a text input, implement a function that returns a list of words from the text that are not present in the dictionary. Example For dictionary = [\\"hello\\", \\"world\\", \\"programming\\", \\"language\\"] and text = \\"hello world welcome to programming\\", the output should be [\\"welcome\\", \\"to\\"]. For dictionary = [\\"apple\\", \\"banana\\", \\"orange\\"] and text = \\"I have an apple and a banana\\", the output should be [\\"I\\", \\"have\\", \\"an\\", \\"and\\", \\"a\\"]. Input/Output - `[input]` array of strings `dictionary` - `[input]` string `text` - `[output]` an array of strings","solution":"def spell_checker(dictionary, text): Returns a list of words from the text that are not present in the dictionary. dictionary_set = set(dictionary) text_words = text.split() return [word for word in text_words if word not in dictionary_set]"},{"question":"You are given a grid of integers where each cell represents an elevation. Your task is to determine the number of distinct oceans that can be formed. An ocean is defined as a region of cells with the same elevation that is completely surrounded by cells with higher elevations. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of rows in the grid. The second line contains a single integer m (1 ≤ m ≤ 1000) — the number of columns in the grid. Each of the following n lines contains m integers a_{i}(1 ≤ a_{i} ≤ 10^4) — the elevation values of the cells in the grid. -----Output----- Print a single integer — the number of distinct oceans in the grid. -----Examples----- Input 3 3 1 2 3 2 3 4 3 4 5 Output 0 Input 5 4 5 5 5 5 5 2 2 5 5 2 2 5 5 2 2 5 5 5 5 5 Output 1","solution":"def count_oceans(grid): Given a grid of integers representing elevations, returns the number of distinct oceans. An ocean is defined as a region of cells with the same elevation that is surrounded by higher elevation cells. n = len(grid) m = len(grid[0]) def dfs(grid, visited, x, y, elevation): stack = [(x, y)] visited[x][y] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] enclosed_flag = True while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if nx < 0 or ny < 0 or nx >= n or ny >= m: enclosed_flag = False continue if not visited[nx][ny] and grid[nx][ny] == elevation: visited[nx][ny] = True stack.append((nx, ny)) elif grid[nx][ny] < elevation: enclosed_flag = False return enclosed_flag visited = [[False]*m for _ in range(n)] oceans = 0 for i in range(n): for j in range(m): if not visited[i][j]: if dfs(grid, visited, i, j, grid[i][j]): oceans += 1 return oceans # Example usage: def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] idx = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[idx])) idx += 1 grid.append(row) return grid # Uncomment below lines to run the function against standard input # if __name__ == \\"__main__\\": # grid = read_input() # print(count_oceans(grid))"},{"question":"You are given an array of integers. You can perform the following operation any number of times: choose any two elements in the array, remove them, and append their XOR value to the array. Your goal is to determine if it is possible to reduce the array to a single element that is equal to zero using the given operation. -----Constraints----- - 1 leq |A| leq 10^5 - 1 leq A[i] leq 10^9 -----Input----- Input is given from Standard Input in the following format: n A_1 A_2 ... A_n -----Output----- Output \\"YES\\" if it is possible to reduce the array to a single element that is zero, otherwise print \\"NO\\". -----Sample Input----- 3 1 2 3 -----Sample Output----- YES - One of the possible ways to reduce the array to a single zero element: - 1 XOR 2 = 3 - Array becomes: [3, 3] - 3 XOR 3 = 0 - Array becomes: [0]","solution":"def can_reduce_to_zero(arr): Determine if it is possible to reduce the array to a single element that is equal to zero using the given operation. # Calculate the XOR of all elements in the array xor_sum = 0 for num in arr: xor_sum ^= num # If the XOR of all elements is zero, output \\"YES\\" if xor_sum == 0: return \\"YES\\" else: return \\"NO\\" # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(can_reduce_to_zero(arr))"},{"question":"You are given a warehouse that stores a variety of products, each with a unique ID. The warehouse keeps an inventory record which lists the IDs of the products currently available. The management wants to track the product inventory accurately and be able to answer whether a specific product is in stock. To help the management, you need to write a program that will take multiple queries, each asking whether a particular product is in stock, and respond with a \\"Yes\\" or \\"No\\". -----Input----- The first line contains an integer n (1 le n le 1000), the number of products in the inventory. The second line contains n unique integers p_1, p_2, ..., p_n (1 le p_i le 10^6) representing the product IDs in the inventory. The third line contains an integer q (1 le q le 1000), the number of queries. The next q lines each contain a single integer x (1 le x le 10^6), representing the product ID the management is inquiring about. -----Output----- For each query, output \\"Yes\\" if the product is in stock and \\"No\\" otherwise. -----Examples----- Input 5 1001 9453 4738 5732 9421 3 4738 4200 1001 Output Yes No Yes -----Note----- In the first query, the product ID 4738 is available in the inventory, so the output is \\"Yes\\". In the second query, the product ID 4200 is not available in the inventory, so the output is \\"No\\". In the third query, the product ID 1001 is available in the inventory, so the output is \\"Yes\\".","solution":"def check_product_in_stock(inventory, queries): Checks if products are in stock based on inventory and queries. Parameters: - inventory: List of integers representing product IDs in inventory. - queries: List of integers representing product IDs to be checked. Returns: - List of strings \\"Yes\\" or \\"No\\" for each query. inventory_set = set(inventory) result = [] for query in queries: if query in inventory_set: result.append(\\"Yes\\") else: result.append(\\"No\\") return result # Example usage: # inventory = [1001, 9453, 4738, 5732, 9421] # queries = [4738, 4200, 1001] # print(check_product_in_stock(inventory, queries)) # Output: [\'Yes\', \'No\', \'Yes\']"},{"question":"Кate is organizing a charity event and needs to set up different activity stations. She needs to arrange n different stations linearly in such a way that certain pairs of stations must not be directly next to each other due to space constraints and safety guidelines. The pairs that must avoid adjacency are given as a list of tuples. Determine if it is possible to arrange all n stations satisfying these constraints. If it is possible, return one valid arrangement. If it is not possible, return \\"No arrangement possible\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 20), representing the number of stations. The second line contains an integer m (0 ≤ m ≤ 190), representing the number of pairs of stations that must not be adjacent. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ n, x ≠ y), a pair of station numbers that cannot be adjacent. -----Output----- If a valid arrangement is possible, print a single line containing the numbers 1 to n in a valid order. If no valid arrangement is possible, print \\"No arrangement possible\\". -----Examples----- Input 4 2 1 2 3 4 Output 1 3 2 4 Input 3 3 1 2 2 3 1 3 Output No arrangement possible -----Note----- In the first test case, there are multiple valid arrangements. For instance, 1-3-2-4 and 3-1-4-2 both satisfy all constraints since neither 1-2 nor 3-4 are adjacent in these orders. In the second test case, it is not possible to arrange stations 1, 2, and 3 so that none of the adjacent pairs listed are next to each other. Therefore, the output is \\"No arrangement possible\\".","solution":"import itertools def is_valid(arrangement, constraints): Check if a given arrangement satisfies all the adjacency constraints. for (x, y) in constraints: for a, b in zip(arrangement, arrangement[1:]): if (a == x and b == y) or (a == y and b == x): return False return True def arrange_stations(n, m, constraints): Determines if it is possible to arrange all n stations satisfying the given constraints. all_stations = list(range(1, n + 1)) for perm in itertools.permutations(all_stations): if is_valid(perm, constraints): return perm return \\"No arrangement possible\\""},{"question":"Alex loves solving puzzles and recently found an interesting challenge online. The challenge involves finding an integer matrix that has a special property. The matrix should have the same sum for every row, column, and both diagonals. Given an integer `n`, your task is to create an `n x n` matrix of integers that satisfies this property and has a sum equal to `S` (sum of each row, column, and diagonal is `S`). If such a matrix exists, display it. If it is not possible to construct such a matrix, output \\"Not Possible\\". -----Input----- The first line contains the single integer `n` (2 leq n leq 50) — the size of the matrix. The second line contains the integer `S` (1 leq S leq 1000) — the desired sum for each row, column, and diagonal. -----Output----- If such a matrix exists, print `n` lines, each containing `n` integers, which represent the matrix. If there are multiple valid answers, you can output any of them. If it is not possible to construct such a matrix, print \\"Not Possible\\". -----Examples----- Input 3 15 Output 8 1 6 3 5 7 4 9 2 Input 2 5 Output Not Possible -----Note----- In the first example, the matrix satisfies the conditions: the sum of each row, each column, and both diagonals is 15. In the second example, it is not possible to construct a valid 2x2 matrix that satisfies the conditions.","solution":"def create_magic_square(n, S): if n < 3: return \\"Not Possible\\" # Create an n x n matrix matrix = [[0] * n for _ in range(n)] # Fill the matrix using the method of forming a magic square of odd order. # Fill the cells following the specific rules. if n % 2 == 1: x, y = 0, n // 2 matrix[x][y] = 1 for num in range(2, n*n + 1): newX, newY = (x-1) % n, (y+1) % n if matrix[newX][newY]: x += 1 else: x, y = newX, newY matrix[x][y] = num elif n % 4 == 0: # Siamese method for doubly even order def is_change(i, j, n): if i % 4 == j % 4 or (i % 4 + j % 4) == 3: return True return False count = 1 for i in range(n): for j in range(n): if is_change(i, j, n): matrix[i][j] = n * n - count + 1 else: matrix[i][j] = count count += 1 else: # For singly even order, use Strachey\'s method. half_n = n // 2 sub_square_size = half_n * half_n # Create the 4 (n/2)x(n/2) magic squares: sub_square_A = create_magic_square(half_n, half_n * (half_n * half_n + 1) // 2) sub_square_B = create_magic_square(half_n, half_n * (half_n * half_n + 1) // 2 + sub_square_size) sub_square_C = create_magic_square(half_n, half_n * (half_n * half_n + 1) // 2 + 2 * sub_square_size) sub_square_D = create_magic_square(half_n, half_n * (half_n * half_n + 1) // 2 + 3 * sub_square_size) for i in range(half_n): for j in range(half_n): matrix[i][j] = sub_square_A[i][j] matrix[i + half_n][j] = sub_square_C[i][j] matrix[i][j + half_n] = sub_square_B[i][j] matrix[i + half_n][j + half_n] = sub_square_D[i][j] if False in (type(x) for x in sub_square_A for x in matrix): return \\"Not Possible\\" # Adjust values to meet sum S in all rows, columns, and diagonals by scaling magic_sum = (n * (n * n + 1)) // 2 factor = S / magic_sum if factor != int(factor): return \\"Not Possible\\" factor = int(factor) for i in range(n): for j in range(n): matrix[i][j] *= factor return matrix"},{"question":"You are given an undirected graph with `n` nodes labeled from `1` to `n`, and `m` edges. Each edge connects two nodes and has an associated cost. Your task is to ensure that every node is reachable from every other node by changing the edges in the minimum possible total cost. The change means replacing an existing edge with another edge with a different cost, or keeping the same edge with its original cost. You may change multiple edges or none at all. To achieve this, you can remove or add edges as needed, but you must ensure the final graph remains connected. Calculate the minimal total cost needed to transform the initial graph into a connected graph where every node is reachable from every other node. -----Input----- - The first line contains two integers `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 10000`), representing the number of nodes and the number of edges, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `0 ≤ w ≤ 10000`), where `u` and `v` are the nodes connected by the edge and `w` is the cost of that edge. -----Output----- Output a single integer, the minimal total cost needed to ensure that every node is reachable from every other node. -----Examples----- Sample Input 1: 4 4 1 2 3 2 3 2 3 4 4 4 1 1 Sample Output 1: 6 Sample Input 2: 6 3 1 2 1 2 3 2 4 5 3 Sample Output 2: 3","solution":"def find_min_cost_to_connect_graph(n, m, edges): Finds the minimum total cost needed to make an undirected graph fully connected. Args: - n: An integer representing the number of nodes. - m: An integer representing the number of edges. - edges: A list of tuples where each tuple contains three integers (u, v, w), representing an edge between nodes u and v with cost w. Returns: - Integer, the minimum total cost to make all nodes reachable from each other. # Using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) # First, sort all edges in non-decreasing order of the edge cost edges.sort(key=lambda x: x[2]) # Create a parent array for Union-Find parent = list(range(n + 1)) # Initializing nodes 1 to n # Helper function to find the subset of an element i def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # Helper function to do union of two subsets def union(parent, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: parent[rootY] = rootX # Kruskal\'s algorithm: construct the MST total_cost = 0 edges_in_mst = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, u, v) total_cost += w edges_in_mst += 1 # Check if we have exactly (n - 1) edges in the MST (i.e., the graph is connected) if edges_in_mst != n - 1: # If not, that means the initial graph wasn\'t connected, hence we cannot connect all nodes return -1 return total_cost"},{"question":"Background A large, well-organized warehouse stores item packages along linear shelves. The warehouse is so large that employees use automated systems to keep track of where packages are stored. Packages are identified by their unique IDs, which are positive integers. Problem An automated system continuously receives commands to place or remove packages on the shelves. Commands to place a package include the package ID and a position on the shelf, while commands to remove a package just specify the package ID. Multiple packages may be stacked at the same position, and when a package is removed, the most recently placed package with that ID is removed first. Figure 1 When displaying the status of the shelves, the system prints the list of current packages on each shelf position, starting from position 0 up to position N-1. Write a program to process the commands and then output the final status of the shelves. Constrains Input meets the following conditions: * 1 ≤ N ≤ 100 * 1 ≤ K ≤ 1000 * 1 ≤ ID ≤ 1000 * 0 ≤ pos < N Input The input is given in the following format. N K command1 command2 ... The first line contains two integers N and K, separated by a space, representing the number of shelf positions and the number of commands, respectively. The following K lines contain either a command to place or remove a package: * `PLACE ID pos`: Place package with unique ID at position pos. * `REMOVE ID`: Remove the package with the given ID. Output The output consists of N lines. Each line represents a shelf position from 0 to N-1 and lists the packages from top to bottom of the stack as space-separated integers. Examples Input 5 7 PLACE 101 0 PLACE 102 1 PLACE 103 2 REMOVE 101 PLACE 104 1 REMOVE 103 PLACE 105 0 Output 105 104 102 (empty) (empty) (empty) Input 3 6 PLACE 200 0 PLACE 201 0 PLACE 202 1 REMOVE 200 PLACE 203 2 REMOVE 202 Output 201 (empty) 203","solution":"def warehouse_shelves(N, K, commands): Processes commands to place or remove packages on the shelves and returns the final status of the shelves. Parameters: N (int): number of shelf positions. K (int): number of commands. commands (list of str): list of commands to process. Returns: list of list: containing the current packages on each shelf position. from collections import defaultdict, deque shelves = defaultdict(deque) id_positions = defaultdict(list) for command in commands: parts = command.split() action = parts[0] ID = int(parts[1]) if action == \'PLACE\': pos = int(parts[2]) shelves[pos].appendleft(ID) id_positions[ID].append(pos) elif action == \'REMOVE\': pos = id_positions[ID].pop() shelves[pos].remove(ID) if len(shelves[pos]) == 0: del shelves[pos] final_shelves = [] for i in range(N): if i in shelves and shelves[i]: final_shelves.append(list(shelves[i])) else: final_shelves.append([\'(empty)\']) return final_shelves"},{"question":"A renewable energy company is developing a software to monitor and control the power grid system. One key function is to identify if power consumption within a given period is balanced. Power consumption is considered balanced if, for every time unit in the given period, the power supplied and the power consumed are equal at the end of that period. Write a program that determines if the power consumption for a given period is balanced. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), representing the number of time units in the given period. The second line contains n integers p_1, p_2, ..., p_n (-1000 ≤ p_i ≤ 1000), where p_i represents the net power (supplied or consumed) during the i^{th} time unit. A positive value of p_i indicates net power supplied, and a negative value indicates net power consumed. -----Output----- A single line with the string “Balanced” if the net power consumption is balanced at the end of the period, or “Unbalanced” otherwise. -----Explanation of Sample 1----- In this example, the total net power consumption for the given period is 0 (10 - 10 = 0), hence it is balanced. -----Examples----- Sample Input: 2 10 -10 Sample Output: Balanced Sample Input: 3 5 -3 -2 Sample Output: Balanced Sample Input: 3 5 -3 -1 Sample Output: Unbalanced","solution":"def is_power_consumption_balanced(n, power_readings): Determines if the power consumption for a given period is balanced. Parameters: n (int): The number of time units in the given period. power_readings (list of int): The net power readings for each time unit. Returns: str: \\"Balanced\\" if the net power consumption is balanced, \\"Unbalanced\\" otherwise. # Calculate the total net power consumption total_net_power = sum(power_readings) # Check if the total net power consumption is zero if total_net_power == 0: return \\"Balanced\\" else: return \\"Unbalanced\\""},{"question":"Given a list of integers, create a function to find all unique subsets of the given list. The order of subsets or the order of elements within a subset does not matter. Sample code: ```python from itertools import combinations def find_subsets(nums): result = [] nums = sorted(nums) for i in range(len(nums)+1): for combo in combinations(nums, i): result.append(list(combo)) return result ``` Your task is to implement the function `find_subsets` without using itertools or any other libraries that directly solve this problem. Input Format: A single line containing integers separated by spaces. Output Format: All unique subsets, each on a new line. Subsets can be in any order. Constraints: - 0 <= number of integers in the list <= 10 - Integers can be both positive and negative. Sample Input: 1 2 2 Sample Output: [] [1] [2] [1, 2] [2, 2] [1, 2, 2]","solution":"def find_subsets(nums): Returns all unique subsets of the given list. def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): # Skip duplicates if i > start and nums[i] == nums[i-1]: continue path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() result = [] backtrack(0, []) return result"},{"question":"Write a program to find the longest common subsequence (LCS) between two sequences. The sequences are represented by strings which can include any printable characters. The function should be based on the following pseudocode: LCS(X, Y) 1 m = length(X) 2 n = length(Y) 3 create a table L[m+1][n+1] 4 for i = 0 to m: 5 L[i][0] = 0 6 for j = 0 to n: 7 L[0][j] = 0 8 for i = 1 to m: 9 for j = 1 to n: 10 if X[i-1] == Y[j-1]: 11 L[i][j] = L[i-1][j-1] + 1 12 else: 13 L[i][j] = max(L[i-1][j], L[i][j-1]) 14 return L[m][n] Your program should also print the LCS itself. Constraints 1 ≤ length(X), length(Y) ≤ 100 Input The first line of the input includes the first string X. The second line of the input includes the second string Y. Output The output consists of 2 lines. In the first line, please print the length of the longest common subsequence. In the second line, please print the longest common subsequence. Examples Input ACCGGTCGAGTGCGCGGAAGCCGGCCGAA GTCGTTCGGAATGCCGTTGCTCTGTAAA Output 20 GTCGTCGGAAGCCGGCCGAA Input ABCDGH AEDFHR Output 3 ADH","solution":"def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n+1) for _ in range(m+1)] # Building the L table for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) # length of LCS is L[m][n] lcs_length = L[m][n] # Trace back to find the LCS string index = lcs_length lcs = [\\"\\"] * (index) i = m j = n while i > 0 and j > 0: if X[i-1] == Y[j-1]: lcs[index-1] = X[i-1] i -= 1 j -= 1 index -= 1 elif L[i-1][j] > L[i][j-1]: i -= 1 else: j -= 1 # Convert list to string lcs_str = \'\'.join(lcs) return lcs_length, lcs_str"},{"question":"Given two strings s1 and s2, determine if s2 is a rotation of s1. ------ Input ------ The first line contains 1 ≤ t ≤ 10, the number of test cases. Then the test case definitions follow. Each test case is of the form: two strings, 1 ≤ |s1|, |s2| ≤ 100, consisting of lowercase English letters only. ------ Output ------ For each test case, output \\"YES\\" if s2 is a rotation of s1, otherwise output \\"NO\\". ----- Sample Input 1 ------ 3 abcd bcda hello ohell abc aaa ----- Sample Output 1 ------ YES YES NO","solution":"def is_rotation(s1, s2): Determines if s2 is a rotation of s1. if len(s1) != len(s2): return False return s2 in s1 + s1 def rotation_checker(t, test_cases): result = [] for s1, s2 in test_cases: if is_rotation(s1, s2): result.append(\\"YES\\") else: result.append(\\"NO\\") return \\"n\\".join(result) # Example usage if __name__ == \\"__main__\\": t = 3 test_cases = [(\\"abcd\\", \\"bcda\\"), (\\"hello\\", \\"ohell\\"), (\\"abc\\", \\"aaa\\")] print(rotation_checker(t, test_cases))"},{"question":"Filbert has founded a new city with a grid of houses arranged in an `n x m` matrix. Each cell in the grid has a certain number of apples. Filbert wants to host an event and collect apples from a rectangular sub-grid. Given the matrix and multiple queries where each query specifies the top-left and bottom-right corners of the sub-grid, determine the number of apples in each sub-grid. Input: First line contains two integers `n` and `m` - the dimensions of the matrix. Next `n` lines each contain `m` integers - the number of apples in each cell of the matrix. Next line contains a single integer `q` - the number of queries. Next `q` lines each contain four integers `r1`, `c1`, `r2`, `c2` - representing the coordinates of the top-left and bottom-right corners of the sub-grid (1-based indexing). Output: For each query, print the total number of apples in the specified sub-grid. Constraints: 1 ≤ n, m ≤ 1000 1 ≤ q ≤ 10^5 1 ≤ apples in each cell ≤ 1000 1 ≤ r1 ≤ r2 ≤ n 1 ≤ c1 ≤ c2 ≤ m SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 SAMPLE OUTPUT 12 28 Explanation For the first query, sub-grid from (1,1) to (2,2) includes cells: (1,1),(1,2),(2,1),(2,2) with apples summing to 1+2+4+5=12. For the second query, sub-grid from (2,2) to (3,3) includes cells: (2,2),(2,3),(3,2),(3,3) with apples summing to 5+6+8+9=28.","solution":"def preprocess_apples(matrix, n, m): Preprocess the matrix to create a prefix sum matrix. prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def total_apples_in_subgrid(prefix_sum, r1, c1, r2, c2): Calculate total apples in the subgrid using the prefix sum matrix. return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) def collect_apples_from_queries(matrix, queries): n = len(matrix) m = len(matrix[0]) prefix_sum = preprocess_apples(matrix, n, m) results = [] for r1, c1, r2, c2 in queries: results.append(total_apples_in_subgrid(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"In a distant galaxy, there exists an advanced civilization that has developed a sophisticated system for resource allocation on their planet. Each region of the planet is divided into a grid of equal-sized cells. Each cell either contains a certain amount of mineral resources or is barren (no resources). The goal of their resource management program is to identify contiguous regions of mineral deposits for efficient extraction. Each cell in a grid can be represented by either a non-negative integer (indicating the amount of resources) or a dot (.) representing a barren cell. Contiguous regions are defined as groups of cells that are horizontally or vertically adjacent (not diagonally) and contain non-zero resources. You are tasked with developing a program to analyze a given grid and identify the number of contiguous regions that contain mineral resources. Input The first line of input contains a single positive integer, representing the number of datasets. Each dataset is given in the following format: > H W > Grid row 1 > Grid row 2 > ... > Grid row H H is the number of rows and W is the number of columns in the grid (1 <= H, W <= 50). Each cell in the grid is either a dot (.) representing a barren cell, or a non-negative integer (1 <= resource amount <= 999) indicating the amount of resources in that cell. Output For each dataset, output the number of contiguous regions that contain mineral resources. Sample Input 3 3 3 1 . 3 4 5 . . 6 7 4 5 2 3 4 . . . . 5 7 8 9 . 1 . . . 2 2 1 . . 2 Sample Output 2 3 2 Explanation For the first dataset: 1 . 3 4 5 . . 6 7 There are two contiguous regions of mineral resources: {1, 4, 5} and {3, 6, 7}. For the second dataset: 2 3 4 . . . . 5 7 8 9 . 1 . . . There are three contiguous regions of mineral resources: {2, 3, 4}, {5}, and {7, 8, 9, 1}. For the third dataset: 1 . . 2 There are two contiguous regions of mineral resources: {1} and {2}.","solution":"def count_contiguous_regions(grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < H and 0 <= ny < W and grid[nx][ny] != \'.\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) H, W = len(grid), len(grid[0]) visited = [[False] * W for _ in range(H)] region_count = 0 for i in range(H): for j in range(W): if grid[i][j] != \'.\' and not visited[i][j]: visited[i][j] = True dfs(i, j) region_count += 1 return region_count def resource_management_program(num_datasets, datasets_details): results = [] index = 0 for _ in range(num_datasets): H, W = datasets_details[index] grid = datasets_details[index + 1: index + 1 + H] index += 1 + H results.append(count_contiguous_regions(grid)) return results"},{"question":"Suppose there are N piles of stones arranged in a row. Each pile contains a certain number of stones. You are allowed to make moves of the following type: choose any pile with at least one stone (except the first pile) and move one stone from it to the previous pile. We want to determine if it is possible to make all piles contain the same number of stones after several operations. Input The first line of input contains a positive integer N (2 ≤ N ≤ 10,000), which represents the number of piles. The second line contains N non-negative integers a_1, a_2, ..., a_N (0 ≤ a_i ≤ 10^9), where a_i denotes the number of stones in the i-th pile. Output Output \\"YES\\" if it is possible to equalize the number of stones in all piles, otherwise output \\"NO\\". SAMPLE INPUT 3 2 1 3 SAMPLE OUTPUT NO Explanation It is clear that [2, 1, 3] cannot be equalized through the defined moves because the stones in the first pile can never be increased directly. Consider another input for more clarification: 3 3 3 3 Output is YES because all piles already contain the same number of stones.","solution":"def can_equalize_stones(N, stones): total_stones = sum(stones) # If the total number of stones is not divisible by the number of piles, # it is impossible to make all piles have the same number of stones if total_stones % N != 0: return \\"NO\\" # Calculate the target number of stones each pile should have target = total_stones // N # To make all piles have the same number of stones # all piles from the second to the last pile should have at least one stone # more than the target value or we will not be able to move the stones to satisfy the requirement for i in range(1, N): if stones[i] < target: return \\"NO\\" return \\"YES\\""},{"question":"In a coding challenge platform, participants earn points based on their performance in each challenge. Points are accumulated and can be redeemed for prizes, but there are specific rules about how points are awarded and when they can be redeemed. Here are the rules: - \'Problem Solving\': 200 points for each problem solved. - \'First Solution\': 120 points for the first correct solution in a challenge. - \'Streak\': 50 bonus points for maintaining a streak of solving problems on consecutive days. A streak is counted if there are no gaps in days between problem-solving activities. - \'Challenge Hosting\': 100 points for hosting a challenge. Participants can redeem their points once a month. The minimum points required to redeem for a month are: - 500 points if the account type is \'PREMIUM\'. - 1000 points if the account type is \'STANDARD\'. Your task is to determine how many months each participant can redeem their points, given their history of activities. ---Input--- - The first line of input contains an integer Q, the number of participants. - For each participant: - The first line contains an integer N followed by a string denoting the number of activities and the account type respectively. The account type can be either \'PREMIUM\' or \'STANDARD\'. - Each of the next N lines contains an activity in one of the following formats: - \'PROBLEM_SOLVING\' - \'FIRST_SOLUTION\' - \'STREAK\' - \'CHALLENGE_HOSTING\' ---Output--- - For each participant, print the maximum number of months they can redeem their points. ---Constraints--- - 1 ≤ Q, N ≤ 100 - The streak can only be counted for consecutive days, and participation days are assumed to be continuous irrespective of the month or year boundaries. ---Example--- Input: 2 5 PREMIUM PROBLEM_SOLVING FIRST_SOLUTION STREAK CHALLENGE_HOSTING PROBLEM_SOLVING 4 STANDARD PROBLEM_SOLVING FIRST_SOLUTION STREAK PROBLEM_SOLVING Output: 1 1 ---Explanation--- In the first example: - \'Problem Solving\' twice: 200 * 2 = 400 points. - \'First Solution\' once: 120 points. - \'Streak\' once: 50 points. - \'Challenge Hosting\' once: 100 points. The total points are 400 + 120 + 50 + 100 = 670 points. Since the participant has a \'PREMIUM\' account, they need 500 points to redeem in a month, so they can only redeem for 1 month. In the second example: - \'Problem Solving\' twice: 200 * 2 = 400 points. - \'First Solution\' once: 120 points. - \'Streak\' once: 50 points. The total points are 400 + 120 + 50 = 570 points. Since the participant has a \'STANDARD\' account, they need 1000 points to redeem in a month, so they cannot redeem their points. Thus, the output is 1 and 0 months of redemption.","solution":"def calculate_redeemable_months(Q, participant_data): results = [] for i in range(Q): N, account_type = participant_data[i][0] activities = participant_data[i][1] points = 0 for activity in activities: if activity == \\"PROBLEM_SOLVING\\": points += 200 elif activity == \\"FIRST_SOLUTION\\": points += 120 elif activity == \\"STREAK\\": points += 50 elif activity == \\"CHALLENGE_HOSTING\\": points += 100 if account_type == \\"PREMIUM\\": points_needed = 500 else: points_needed = 1000 redeemable_months = points // points_needed results.append(redeemable_months) return results"},{"question":"Alice is organizing a garden party and wants everything to be perfect. She has a rectangular garden with a flowerbed that runs along its length and another flowerbed that runs along its width. Together, these flowerbeds form a \\"T\\" shape, blocking off some regions of the garden. Alice wants to know the total area of the unblocked region where guests can move freely. In other words, excluding the area covered by the flowerbeds, she wants to calculate the remaining area of the garden. The garden can be considered as a rectangle with dimensions W (width) and H (height). The width of the flowerbed that runs along the length is A, and the width of the flowerbed that runs along the width is B. Input The first line contains an integer T (1 ≤ T ≤ 10^3) – the number of test cases. Each of the next T lines contains four integers W, H, A, and B (1 ≤ W, H, A, B ≤ 10^4) describing the dimensions of the garden and the flowerbeds for that test case. Output For each test case, print a single line containing a single integer – the free area where guests can move, accurate to at least four decimal places. Example Input 3 10 8 2 3 7 5 1 2 10 10 5 3 Output 41 18 35 Explanation In the first test case, the total area of the garden is 10 * 8 = 80. The area covered by the flowerbed running along the length is 10 * 2 = 20, and the area covered by the flowerbed running along the width is 8 * 3 = 24. The overlapping area (intersection of both flowerbeds) is 2 * 3 = 6. Therefore, the free area is 80 - 20 - 24 + 6 = 42. In the second test case, the total area of the garden is 7 * 5 = 35. The area covered by the flowerbed running along the length is 7 * 1 = 7, and the area covered by the flowerbed running along the width is 5 * 2 = 10. The overlapping area (intersection of both flowerbeds) is 1 * 2 = 2. Therefore, the free area is 35 - 7 - 10 + 2 = 20. In the third test case, the total area of the garden is 10 * 10 = 100. The area covered by the flowerbed running along the length is 10 * 5 = 50, and the area covered by the flowerbed running along the width is 10 * 3 = 30. The overlapping area (intersection of both flowerbeds) is 5 * 3 = 15. Therefore, the free area is 100 - 50 - 30 + 15 = 35.","solution":"def calculate_free_area(W, H, A, B): Calculates the free area of the garden after excluding the area occupied by the flowerbeds. total_area = W * H length_bed_area = W * A width_bed_area = H * B overlap_area = A * B free_area = total_area - length_bed_area - width_bed_area + overlap_area return free_area def process_test_cases(test_cases): results = [] for case in test_cases: W, H, A, B = case result = calculate_free_area(W, H, A, B) results.append(result) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): W = int(data[index]) H = int(data[index+1]) A = int(data[index+2]) B = int(data[index+3]) test_cases.append((W, H, A, B)) index += 4 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You\'re given n pairs of integers where each pair represents a range [a, b]. Your task is to determine the smallest number of points needed to mark on the number line so that each given range contains at least one marked point. Input The first input line contains one number n — the number of ranges (1 ≤ n ≤ 10^5). Each of the following n lines contains two integers a and b (1 ≤ a ≤ b ≤ 10^9) — representing the range [a, b]. Output Output a single integer — the smallest number of points needed. Examples Input 3 5 7 1 3 2 6 Output 2 Input 4 2 3 2 4 2 5 6 7 Output 2","solution":"def smallest_number_of_points(n, ranges): Determines the smallest number of points needed to mark on the number line so that each given range contains at least one marked point. Parameters: n (int): The number of ranges. ranges (list of tuples): A list of tuples where each tuple represents a range [a, b]. Returns: int: The smallest number of points needed. ranges.sort(key=lambda x: x[1]) # Sort ranges by their ending point points = [] current_point = None for a, b in ranges: if current_point is None or current_point < a: current_point = b points.append(current_point) return len(points)"},{"question":"Given an array of integers, return indices of the two numbers such that they add up to a specific target. You can assume each input would have exactly one solution, and you may not use the same element twice. -----Input----- - The first line contains an integer T (number of test cases). - For each test case, the first line contains an integer N (number of elements in the array). - The next line contains N integers (elements of the array). - The last line contains an integer target (the specific target sum). -----Output----- For each test case, print the indices (1-based) of the two numbers that add up to the target, separated by a space. -----Constraints----- 1 <= T <= 10 2 <= N <= 10^4 -10^9 <= element value <= 10^9 -10^9 <= target <= 10^9 -----Example----- Input: 2 4 2 7 11 15 9 3 3 2 4 6 Output: Case : 1 1 2 Case : 2 2 3 -----Explanation----- Case : 1 The target sum is 9. The two numbers 2 and 7 add up to 9, their indices are 1 and 2 respectively in 1-based indexing. Case : 2 The target sum is 6. The two numbers 2 and 4 add up to 6, their indices are 2 and 3 respectively in 1-based indexing.","solution":"def two_sum_indices(nums, target): Given a list of integers nums and an integer target, return the indices of the two numbers such that they add up to target. The indices returned should be 1-based. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return num_to_index[complement] + 1, i + 1 num_to_index[num] = i return None def process_test_cases(test_cases): Processes the test cases and returns the result in the specified format. results = [] for idx, (n, nums, target) in enumerate(test_cases): result = two_sum_indices(nums, target) if result: results.append(f\\"Case : {idx + 1}n{result[0]} {result[1]}\\") return results"},{"question":"Given a string s and a character c, find the indices of all occurrences of character c in the string and return them as a list. The indices should be zero-based. Example 1: Input: s = \\"hello\\", c = \'l\' Output: [2, 3] Explanation: Character \'l\' appears at indices 2 and 3. Example 2: Input: s = \\"world\\", c = \'o\' Output: [1] Explanation: Character \'o\' appears at index 1. Example 3: Input: s = \\"foobar\\", c = \'z\' Output: [] Explanation: Character \'z\' does not appear in the string. Your Task: You don\'t need to read or print anything, Your task is to complete the function find_indices() which takes s and c as input parameters and returns a list of integers representing the indices of character c in string s. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(s) <= 10^{4} c is guaranteed to be an ASCII character.","solution":"def find_indices(s, c): Returns a list of zero-based indices of all occurrences of character c in string s. return [i for i, char in enumerate(s) if char == c]"},{"question":"Andrew is a fan of puzzles and has recently discovered a new challenge in the city of GridLand. GridLand is organized as an m x n grid. Andrew is standing at the top-left corner of the grid (0,0), and he wants to explore various paths to reach the bottom-right corner of the grid (m-1, n-1). At each step, Andrew can move either to the right or down the grid. However, there are some cells in the grid which are blocked with obstacles, and Andrew cannot pass through these cells. You are required to write a program to help Andrew find the number of unique paths from the top-left corner to the bottom-right corner of the grid, considering the obstacles. Input: - The first line contains two integers m and n, representing the number of rows and columns in the grid respectively. - The next m lines each contain n space-separated integers (either 0 or 1), where 0 represents an open cell and 1 represents a blocked cell. Output: - Print a single integer, the number of unique paths from the top-left to the bottom-right corner of the grid, considering the obstacles. Constraints: - 1 ≤ m, n ≤ 100 - The top-left corner (0,0) and bottom-right corner (m-1, n-1) will always be open cells (i.e., contain 0). SAMPLE INPUT: 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT: 2 Explanation: There are two unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) grid = [] index = 2 for _ in range(m): grid.append([int(data[index + i]) for i in range(n)]) index += n result = unique_paths_with_obstacles(m, n, grid) print(result)"},{"question":"For a given string ( s ), print all unique subsets of the string in lexicographic order. Each subset should appear on a new line. Subsets can be empty or contain all characters of the string in any order, but no subset should appear more than once. Constraints * ( 1 leq |s| leq 12 ) * ( s ) contains only lowercase alphabetic characters. Input A string ( s ) is given in a line. Output Print each unique subset in a line in lexicographic order. Subsets with the same characters in different arrangements should not be duplicated. Examples Input abc Output (empty line) a ab abc ac b bc c Input aab Output (empty line) a aa aab ab b","solution":"def generate_subsets(s): This function generates all unique subsets of the string `s` in lexicographic order. subsets = set() def backtrack(start, path): # Add current subset to the set subsets.add(\\"\\".join(path)) for i in range(start, len(s)): # Include the current character and move to the next path.append(s[i]) backtrack(i + 1, path) # Exclude the current character (backtrack) path.pop() # Start the backtracking algorithm backtrack(0, []) # Return subsets sorted in lexicographic order return sorted(subsets) # Sample main function to print subsets def print_subsets(s): subsets = generate_subsets(s) for subset in subsets: print(subset) # Sample usage # print_subsets(\\"abc\\") # print_subsets(\\"aab\\")"},{"question":"Given a list of numbers, you need to find the maximum difference between any two elements such that the larger element comes after the smaller one. If no such pair exists, return -1. Input - The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. - The second line contains n integers separated by spaces, representing the elements of the list. Output - Print a single integer — the maximum difference between any two elements such that the larger element comes after the smaller one. If no such pair exists, return -1. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 9 7 4 3 1 Output -1 Note In the first sample, the maximum difference is 6 - 1 = 5. In the second sample, there is no valid pair where the larger element comes after the smaller one, so we return -1.","solution":"def max_difference(n, nums): if n == 1: return -1 min_num = nums[0] max_diff = -1 for i in range(1, n): if nums[i] > min_num: max_diff = max(max_diff, nums[i] - min_num) else: min_num = min(min_num, nums[i]) return max_diff"},{"question":"You are tasked with helping Arya navigate the haunted forests of Weirwood. This forest is represented as a grid of N x M cells. Arya starts at the top-left corner of the grid and needs to reach the bottom-right corner. Each cell in the grid contains a number that represents the amount of energy required to pass through it. Arya can only move right or down from a cell. To help Arya, you must find out the minimum energy required for her to reach the bottom-right corner from the top-left corner. Input The first line contains T, the number of test cases. The first line of each test case contains two integers N and M, indicating the dimensions of the grid. The next N lines contain M space-separated integers indicating the energy required to pass through each cell in the grid. Output For each test case, print a single integer that represents the minimum energy required to reach the bottom-right corner from the top-left corner. Constraints 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 0 ≤ energy of each cell ≤ 100 SAMPLE INPUT 1 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 7 Explanation In the provided grid, the path with the minimum energy from the top-left corner to the bottom-right corner is: 1 -> 3 -> 1 -> 1 -> 1 The total energy required is 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_energy_to_reach_end(grid): Calculate the minimum energy required to reach the bottom-right corner of the grid from the top-left corner. N = len(grid) M = len(grid[0]) # Initialization of a dp array to store the minimum energy required to reach each cell dp = [[0]*M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row and first column with appropriate values for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1] def solve_arya_navigation(test_cases): results = [] for test_case in test_cases: N, M, grid = test_case results.append(min_energy_to_reach_end(grid)) return results def parse_input(input_string): input_list = input_string.strip().split() current_index = 0 T = int(input_list[current_index]) current_index += 1 test_cases = [] for _ in range(T): N = int(input_list[current_index]) M = int(input_list[current_index + 1]) current_index += 2 grid = [] for i in range(N): row = list(map(int, input_list[current_index:current_index + M])) grid.append(row) current_index += M test_cases.append((N, M, grid)) return test_cases"},{"question":"Three mages, each with a different elemental power (fire, water, and earth), have entered a magic tournament. Each mage has a specific skill value for each elemental power. The mages can team up in pairs to cast combined spells, but the strength of their spell is the product of their individual elemental powers for the same element. Your task is to find the pair of mages that can produce the strongest spell for each of the three elements. -----Input----- The input consists of: - Three lines, each containing three integers a_i, b_i, and c_i (1 ≤ a_i, b_i, c_i ≤ 100). - The integers on the first line represent the fire, water, and earth skill values of the first mage. - The second line represents the fire, water, and earth skill values of the second mage. - The third line represents the fire, water, and earth skill values of the third mage. -----Output----- Output three lines: - The first line should contain two integers, the 1-based indices of the mages that can produce the strongest fire spell. - The second line should contain two integers, the 1-based indices of the mages that can produce the strongest water spell. - The third line should contain two integers, the 1-based indices of the mages that can produce the strongest earth spell. If there are multiple pairs that can produce the same strength, you may output any of them. -----Example----- Input 3 7 2 5 2 9 6 8 4 Output 2 3 1 3 2 3","solution":"def find_strongest_spell_pairs(mages): best_fire_pair = best_water_pair = best_earth_pair = (0, 0) max_fire = max_water = max_earth = 0 # Compare every pair of mages to find the strongest spell for each element for i in range(3): for j in range(i + 1, 3): fire_spell = mages[i][0] * mages[j][0] water_spell = mages[i][1] * mages[j][1] earth_spell = mages[i][2] * mages[j][2] if fire_spell > max_fire: max_fire = fire_spell best_fire_pair = (i + 1, j + 1) if water_spell > max_water: max_water = water_spell best_water_pair = (i + 1, j + 1) if earth_spell > max_earth: max_earth = earth_spell best_earth_pair = (i + 1, j + 1) return best_fire_pair, best_water_pair, best_earth_pair # Example usage: # mages = [ # [3, 7, 2], # [5, 2, 9], # [6, 8, 4] # ] # print(find_strongest_spell_pairs(mages))"},{"question":"John is organizing a charity marathon and has already collected n individual donations. Each donation amount is represented as an integer. He wants to split the donations into two groups in such a way that the absolute difference in the total donations between the two groups is minimized. John is aware that calculating this difference manually can be quite tedious given that n could be a large number, so he has decided to seek help from you to devise an efficient algorithm. Write a program to help John split the donations as described. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of donations. The second line contains n integers d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 100) — the amounts of the donations. The numbers on the second line are separated by single spaces. -----Output----- Print a single integer — the minimum absolute difference between the total donations of the two groups. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 4 1 2 3 6 Output 0 -----Note----- In the first example, you can split the donations into the groups (1, 2, 3) and (4, 5) which yield totals of 6 and 9, with an absolute difference of 3. Alternatively, another split could be (1, 5) and (2, 3, 4), yielding totals of 6 and 9, with an absolute difference of 1. In the second example, you can split the donations into the groups (1, 2, 3) and (6) which yield totals of 6 and 6, with an absolute difference of 0.","solution":"def minimize_donation_difference(n, donations): Returns the minimum absolute difference between the total donations of two groups. :param n: The number of donations :param donations: List of donation amounts :return: Minimum absolute difference between the two groups total = sum(donations) target = total // 2 dp = [False] * (target + 1) dp[0] = True for donation in donations: for j in range(target, donation - 1, -1): dp[j] = dp[j] or dp[j - donation] for i in range(target, -1, -1): if dp[i]: return abs((total - i) - i) return total"},{"question":"John is learning about binary trees, but he still struggles with understanding the depth of nodes. To help him, you are given a binary tree, and you need to answer several queries about the depth of specific nodes. A binary tree is a tree in which each node has at most two children. The depth of a node is the number of edges from the node to the tree\'s root node. The binary tree is described using a list of edges. Each edge is given as a pair of integers (u, v), meaning that node u is the parent of node v. Help John by computing the depth of the queried nodes. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The next n - 1 lines contain two integers u and v (1 ≤ u, v ≤ n) — representing an edge between node u and node v. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain an integer x (1 ≤ x ≤ n) — representing a query for the depth of node x. -----Output----- For each query, output the depth of the queried node x. -----Examples----- Input 5 1 2 1 3 3 4 3 5 3 2 4 5 Output 1 2 2 Input 3 1 2 1 3 2 2 3 Output 1 1 -----Note----- In the first example, the binary tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` The depth of node 2 is 1, the depth of node 4 is 2, and the depth of node 5 is 2. In the second example, the binary tree structure is as follows: ``` 1 / 2 3 ``` The depth of both node 2 and node 3 is 1.","solution":"from collections import defaultdict, deque def compute_node_depths(n, edges, queries): # Construct the graph from the edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to compute depths from root node 1 depths = [-1] * (n + 1) queue = deque([1]) depths[1] = 0 while queue: node = queue.popleft() current_depth = depths[node] for neighbor in tree[node]: if depths[neighbor] == -1: depths[neighbor] = current_depth + 1 queue.append(neighbor) # Process queries results = [] for x in queries: results.append(depths[x]) return results"},{"question":"You need to design a data structure that efficiently performs the following operations: 1. Add a number to the data structure. 2. Remove a number from the data structure. 3. Find the median of all numbers currently in the data structure. Implement a class named `MedianFinder` with the following methods: - `void addNum(int num)` - Adds an integer number to the data structure. - `void removeNum(int num)` - Removes an integer number from the data structure. If the number is not present, do nothing. - `double findMedian()` - Returns the median of all elements currently in the data structure. If the number of elements is odd, return the middle element. If the number of elements is even, return the average of the two middle elements. Notes: - The findMedian() function should have a time complexity of O(1) on average. - The addNum() and removeNum() functions should have an average time complexity of O(log N), where N is the number of elements in the data structure. Input The input consists of a series of commands. Each command is described as follows: - `addNum x` where x is an integer. - `removeNum x` where x is an integer. - `findMedian` which should cause your implementation to return the current median. Output Output the result of each `findMedian` command on a new line. Constraints: - The number of elements in the data structure will be at most 10^5. - The values of the elements added to the data structure will be between -10^6 and 10^6. SAMPLE INPUT addNum 1 addNum 3 findMedian addNum 2 findMedian removeNum 3 findMedian SAMPLE OUTPUT 2.0 2.0 1.5","solution":"import heapq class MedianFinder: def __init__(self): Initialize the MedianFinder data structure. self.min_heap = [] # For the larger half self.max_heap = [] # For the smaller half def addNum(self, num): Adds a number into the data structure. if len(self.max_heap) == 0 or num <= -self.max_heap[0]: heapq.heappush(self.max_heap, -num) else: heapq.heappush(self.min_heap, num) # Balance the heaps if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def removeNum(self, num): Removes a number from the data structure. # Try to find the number in the appropriate heap if len(self.max_heap) > 0 and num <= -self.max_heap[0]: try: self.max_heap.remove(-num) heapq.heapify(self.max_heap) except ValueError: pass else: try: self.min_heap.remove(num) heapq.heapify(self.min_heap) except ValueError: pass # Balance the heaps if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self): Returns the median of all elements currently in the data structure. if len(self.max_heap) > len(self.min_heap): return float(-self.max_heap[0]) else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"A company manages several projects that involve teams of employees working on various tasks. Each project can have multiple tasks and each task requires different time to complete. You have been asked to write a program to help in managing these projects. The first input will provide the number of projects P. For each project, the input will have: - A single integer T, the number of tasks in the project. - T space-separated integers representing the time required to complete each task. After all the projects have been described, the input will contain a number of queries Q. Each query can be of the following two types: 1. \\"1 P_i T_j X\\" - Update the time required to complete task T_j in project P_i to X. 2. \\"2 P_i K\\" - Return the K-th smallest task time in project P_i. Output format: For each query of the second type, print the answer in a separate line. Constraints: 1 ≤ P, Q ≤ 10^5 1 ≤ T ≤ 100 1 ≤ time required to complete a task, X ≤ 10^6 1 ≤ K ≤ T Input format: - First line contains an integer P. - For each project, the first line contains an integer T (number of tasks). - Next line contains T space-separated integers indicating the time required to complete each task. - After all projects, the first line contains an integer Q. - Each of the next Q lines contains one query of form \\"1 P_i T_j X\\" or \\"2 P_i K\\". SAMPLE INPUT 2 3 4 2 6 2 5 1 3 4 1 1 2 10 2 1 2 2 2 1 SAMPLE OUTPUT 6 10 Explanation: The given input describes 2 projects. For the first project, there are 3 tasks with times [4, 2, 6]. For the second project, there are 2 tasks with times [5, 1]. There are 3 queries: Query #1: Update the time required to complete the 2nd task of the 1st project to 10. The task times for the first project are now [4, 10, 6]. Query #2: Return the 2nd smallest task time in the 1st project. The sorted task times are [4, 6, 10], so the 2nd smallest task time is 6. Query #3: Return the 1st smallest task time in the 2nd project. The sorted task times are [1, 5], so the 1st smallest task time is 1.","solution":"def manage_projects(projects_data, queries): Manages project tasks and handles the given queries. :param projects_data: List of tuples containing project tasks times. :param queries: List of queries to be processed. :return: List of results for the queries of type 2. results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: # Update query project_index = int(parts[1]) - 1 task_index = int(parts[2]) - 1 new_time = int(parts[3]) projects_data[project_index][task_index] = new_time elif query_type == 2: # Retrieve K-th smallest query project_index = int(parts[1]) - 1 k = int(parts[2]) sorted_tasks = sorted(projects_data[project_index]) results.append(sorted_tasks[k - 1]) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") p_index = 0 p = int(lines[p_index]) projects = [] p_index += 1 for _ in range(p): t = int(lines[p_index]) p_index += 1 task_times = list(map(int, lines[p_index].split())) projects.append(task_times) p_index += 1 q = int(lines[p_index]) p_index += 1 queries = lines[p_index:p_index + q] return projects, queries, q"},{"question":"You are given an array of n integers. Your task is to check if there are any duplicate elements in the array. If there are duplicates, remove all duplicates, including the original instances of the duplicates in the array. Finally, return the array sorted in non-decreasing order. If there are no duplicate elements, return the array sorted in non-decreasing order. Input The input is a single string containing space-separated integers representing the elements of the array (1 ≤ n ≤ 100, -100 ≤ array[i] ≤ 100). Output Output the resulting array after removing all instances of any duplicate elements, sorted in non-decreasing order. Examples Input 1 2 3 4 5 Output 1 2 3 4 5 Input 4 3 2 4 1 3 Output 1 2 Notes In the first sample, the array has no duplicates. Thus, the output is the sorted array itself. In the second sample, the numbers 4 and 3 appear more than once, so both instances of 4 and 3 are removed, leaving [1, 2] as the result.","solution":"def remove_duplicates_and_sort(arr): Takes a list of integers, removes all instances of any duplicate elements, and returns the array sorted in non-decreasing order. from collections import Counter # Count the frequency of each element frequency = Counter(arr) # Filter out elements that appear more than once unique_elements = [num for num in arr if frequency[num] == 1] # Sort and return the result return sorted(unique_elements) def process_input(input_str): Process the input string, apply remove_duplicates_and_sort function, and return the sorted array as a space-separated string. arr = list(map(int, input_str.split())) result = remove_duplicates_and_sort(arr) return \' \'.join(map(str, result))"},{"question":"Given a collection of distinct integers, find all possible permutations of the collection. The solution set must not contain duplicate permutations. Example: Input: [1, 2, 3] Output: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] Your Task: You don\'t need to read input or print anything. Complete the function permute() which takes a list of integers as input parameter and returns a list of lists, where each list is a possible permutation. Expected Time Complexity: O(n * n!) Expected Auxiliary Space: O(n!) Constraints: 1 ≤ len(nums) ≤ 6","solution":"from typing import List def permute(nums: List[int]) -> List[List[int]]: Returns all possible permutations of a given list of distinct integers. res = [] def backtrack(start): if start == len(nums): res.append(nums[:]) for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] backtrack(0) return res"},{"question":"You are given n people standing in a circle where counting starts from the person standing at position 1. Every second person is eliminated in a circular manner until only one person remains. Find the position of that last remaining person. Example 1: Input: n = 5 Output: 3 Explanation: The order of elimination is as follows: 1) The person at position 2 is eliminated. 2) The person at position 4 is eliminated. 3) The person at position 1 is eliminated. 4) The person at position 5 is eliminated. Hence, the last remaining person is at position 3. Example 2: Input: n = 7 Output: 7 Explanation: The order of elimination is as follows: 1) The person at position 2 is eliminated. 2) The person at position 4 is eliminated. 3) The person at position 6 is eliminated. 4) The person at position 1 is eliminated. 5) The person at position 5 is eliminated. 6) The person at position 3 is eliminated. Hence, the last remaining person is at position 7. Your Task: You do not need to read input or print anything. Your task is to complete the function findLastPerson() which takes an integer n as input and returns the position of the last remaining person. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^9","solution":"def findLastPerson(n): Returns the position of the last remaining person when counting out every second person from the circle. def josephus(n, k): if n == 1: return 1 else: return (josephus(n - 1, k) + k - 1) % n + 1 return josephus(n, 2)"},{"question":"Alice is organizing a coding workshop. Each participant registers for the workshop providing their desired start and end time. The times are given in 24-hour format. Alice wants to find the time slot that could accommodate a meeting for all participants, with a desired length of M minutes. Can you help Alice find the earliest starting time for such a meeting, or determine if it\'s impossible? Constraints: * 0 ≤ start_i, end_i ≤ 23 for all i (time is given in full hours). * Each start time is strictly less than the corresponding end time for all participants. * 1 ≤ N ≤ 100 (number of participants). * 1 ≤ M ≤ 1440 (length of the desired meeting in minutes). Input Input is given from Standard Input in the following format: N M start_1 end_1 start_2 end_2 … start_N end_N Output Print the earliest starting time of the desired meeting if possible, in the format of a 24-hour clock (HH:MM). If it is not possible to accommodate the meeting, print \\"Impossible\\". Examples Input 3 60 8 12 9 17 10 15 Output 10:00 Input 3 120 8 10 9 11 10 12 Output Impossible","solution":"def find_earliest_meeting_time(N, M, intervals): Returns the earliest starting time of the desired meeting if possible, in the format of a 24-hour clock (HH:MM). If it is not possible to accommodate the meeting, returns \\"Impossible\\". # Convert intervals to minutes minutes_intervals = [(start * 60, end * 60) for start, end in intervals] # Find the maximum of start times and minimum of end times max_start = max(start for start, end in minutes_intervals) min_end = min(end for start, end in minutes_intervals) # Check if there is enough room for the meeting if min_end - max_start >= M: hours = max_start // 60 minutes = max_start % 60 return f\\"{hours:02}:{minutes:02}\\" else: return \\"Impossible\\" # Example Usage: # N, M = 3, 60 # intervals = [(8, 12), (9, 17), (10, 15)] # print(find_earliest_meeting_time(N, M, intervals)) # Output: \\"10:00\\" # N, M = 3, 120 # intervals = [(8, 10), (9, 11), (10, 12)] # print(find_earliest_meeting_time(N, M, intervals)) # Output: \\"Impossible\\""},{"question":"In a faraway kingdom, there are N cities interconnected by M bidirectional roads. Each of these roads takes exactly one hour to traverse. The king wants to know the minimum number of hours required to travel from the capital city (city 1) to all other cities in the kingdom. If a city is unreachable from the capital, denote the time as -1 for that city. ------ Input Format ------ - The first line contains two space-separated integers N and M - the number of cities and the number of roads. - The next M lines each contain two space-separated integers u and v, indicating that there is a road between city u and city v. ------ Output Format ------ Output N-1 space-separated integers representing the minimum number of hours required to reach cities 2 through N from the capital city. If a city is unreachable, output -1 for that city. ------ Constraints ------ 2 ≤ N ≤ 10^{3} 1 ≤ M ≤ 10^{3} 1 ≤ u, v ≤ N Each road connects two different cities and no two roads connect the same pair of cities. ----- Sample Input 1 ------ 5 6 1 2 1 3 2 4 2 5 3 4 4 5 ----- Sample Output 1 ------ 1 1 2 2 ----- Explanation ------ - City 2 can be reached in 1 hour using the road between city 1 and city 2. - City 3 can be reached in 1 hour using the road between city 1 and city 3. - City 4 can be reached in 2 hours by either route (1 -> 2 -> 4) or (1 -> 3 -> 4). - City 5 can be reached in 2 hours by either route (1 -> 2 -> 5) or (1 -> 3 -> 4 -> 5). If a city cannot be reached from the capital city, the output for that city will be `-1`.","solution":"from collections import deque, defaultdict def min_travel_hours(N, M, roads): # Create the graph using a defaultdict of lists graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Initialize the distances list with -1, since initially, cities are assumed to be unreachable distances = [-1] * N distances[0] = 0 # Distance to the capital city itself is 0 # Use a queue for BFS queue = deque([1]) while queue: current_city = queue.popleft() current_distance = distances[current_city - 1] for neighbor in graph[current_city]: if distances[neighbor - 1] == -1: # not visited yet queue.append(neighbor) distances[neighbor - 1] = current_distance + 1 # Output distances for cities 2 to N return distances[1:]"},{"question":"In a programming contest, participants are asked to develop a software solution for a supply chain system. The system needs to track the delivery of items between different nodes and process various types of queries efficiently. The network consists of n nodes connected by bidirectional edges. You will perform q queries on this network. Each query is one of three types: 1. Register a delivery from node u to node v. 2. Cancel all deliveries involving node u either as a source or a destination. 3. Check if there is a delivery from node u to node v. Can you implement the system to handle these queries? Input The first line contains two integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of nodes and the number of queries. Each of the next q lines contains one of the following types of queries: - \\"1 u v\\" which registers a delivery from node u to node v (1 ≤ u, v ≤ n, u ≠ v). - \\"2 u\\" which cancels all deliveries involving node u. - \\"3 u v\\" which checks whether there is a delivery from node u to node v. Output For each query of type 3, print \\"yes\\" if there is a delivery from node u to node v; otherwise, print \\"no\\". Examples Input 5 7 1 1 2 1 2 3 3 1 3 2 2 3 1 3 1 4 5 3 4 5 Output yes no yes Input 4 5 1 1 2 1 2 3 3 4 2 3 1 2 2 3 Output no yes","solution":"class SupplyChainSystem: def __init__(self, n): self.deliveries = {i: set() for i in range(1, n+1)} def register_delivery(self, u, v): self.deliveries[u].add(v) self.deliveries[v].add(u) def cancel_deliveries(self, u): for v in self.deliveries[u]: self.deliveries[v].discard(u) self.deliveries[u].clear() def check_delivery(self, u, v): return v in self.deliveries[u]"},{"question":"An online store collects data about the items customers add to their cart. The store wants to know how many unique items each customer added to their cart. Write a function that counts the number of unique items in each customer’s cart during a single day. -----Constraints----- - The maximum number of unique items (N) in the cart does not exceed 1000. - The maximum number of customers (M) on the given day does not exceed 100. - Each item is represented by an integer ID. - Each customer can add the same item multiple times to their cart over the course of the day. -----Input----- Input is given via Standard Input in the following format: - The first line contains two integers M and N. - The next M lines each represent the items added to the cart by a customer, where each line contains a space-separated list of integers. -----Output----- Print M lines, each containing a single integer: the number of unique items in the cart for each customer. -----Sample Input----- 3 5 1 2 3 4 5 2 3 4 4 4 5 5 5 5 5 -----Sample Output----- 5 3 1 In this sample, the first customer added the items [1, 2, 3, 4, 5] to their cart, resulting in 5 unique items. The second customer added the items [2, 3, 4, 4, 4] to their cart, resulting in 3 unique items. The third customer added the item [5] to their cart multiple times, resulting in 1 unique item.","solution":"def count_unique_items_per_customer(M, N, customer_carts): Returns a list containing the number of unique items in each customer\'s cart. Parameters: M (int): The number of customers. N (int): The maximum number of unique items in the cart (not necessarily needed in the function). customer_carts (list of list of int): A list where each sublist represents items added to a customer\'s cart. Returns: list of int: A list where each element is the number of unique items in the corresponding customer\'s cart. unique_counts = [] for cart in customer_carts: unique_counts.append(len(set(cart))) return unique_counts # Example input M = 3 N = 5 customer_carts = [ [1, 2, 3, 4, 5], [2, 3, 4, 4, 4], [5, 5, 5, 5, 5] ] print(count_unique_items_per_customer(M, N, customer_carts))"},{"question":"Write a program to help a librarian categorize a collection of books. Each book has a unique identifier and belongs to one of several genre categories. The librarian needs to answer two types of queries: 1. `ADD id genre`: This query adds a book with the given `id` to the specified `genre`. 2. `COUNT genre`: This query returns the number of books in the specified `genre`. Assume the `id` of the book is unique and will only appear once in the input data. Also, assume that the `genre` names are case-sensitive. Input Format: - The first line of the input contains the number `N` representing the number of queries. - The next `N` lines contain one query per line in the format specified above. Output Format: - For each `COUNT` query, output a single integer representing the count of books in the specified genre. Constraints: 1. 1 ≤ N ≤ 10^5 2. 1 ≤ id ≤ 10^9 3. Length of `genre` name is at most 50 characters Sample Input: ``` 6 ADD 123 Fiction ADD 456 Mystery ADD 789 Fiction COUNT Fiction ADD 101 Science COUNT Mystery ``` Sample Output: ``` 2 1 ``` Explanation: - The first query adds a book with id 123 to the Fiction genre. - The second query adds a book with id 456 to the Mystery genre. - The third query adds a book with id 789 to the Fiction genre. - The fourth query counts the number of books in the Fiction genre, which is `2`. - The fifth query adds a book with id 101 to the Science genre. - The sixth query counts the number of books in the Mystery genre, which is `1`.","solution":"def categorize_books(queries): Processes a list of queries to add books to genres and count books in specified genres. Parameters: queries (list of str): A list of queries in the form \\"ADD id genre\\" or \\"COUNT genre\\". Returns: list of int: A list of results for each \\"COUNT genre\\" query. genre_count = {} results = [] for query in queries: parts = query.split() if parts[0] == \\"ADD\\": _, book_id, genre = parts if genre not in genre_count: genre_count[genre] = 0 genre_count[genre] += 1 elif parts[0] == \\"COUNT\\": _, genre = parts results.append(genre_count.get(genre, 0)) return results"},{"question":"Given an array of integers, your task is to complete the function `productExceptSelf` which takes an array as an input parameter and returns an array such that each element at index `i` of the output array is equal to the product of all the elements of the input array except for the element at index `i`. Example 1: Input: arr = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For i=0, Product is 2*3*4 = 24 For i=1, Product is 1*3*4 = 12 For i=2, Product is 1*2*4 = 8 For i=3, Product is 1*2*3 = 6 Example 2: Input: arr = [-1, 1, 0, -3, 3] Output: [0, 0, 9, 0, 0] Explanation: For i=0, Product is 1*0*(-3)*3 = 0 For i=1, Product is -1*0*(-3)*3 = 0 For i=2, Product is -1*1*(-3)*3 = 9 For i=3, Product is -1*1*0*3 = 0 For i=4, Product is -1*1*0*(-3) = 0 Your Task: Complete the function `productExceptSelf()` which takes an array `arr` as an input parameter and returns the resultant array of products. (You do not need to print anything, printing is done by the driver\'s code.) Expected Time Complexity: O(N), N = length of the array. Expected Auxiliary Space: O(1) (excluding the space for the output array which does not count as extra space for this problem). Constraints: 1 ≤ N ≤ 10^5 -30 ≤ arr[i] ≤ 30 The product of any subset of elements of the array will fit in a 32-bit integer.","solution":"def productExceptSelf(arr): n = len(arr) if n == 0: return [] # Initialize arrays to hold prefix and suffix products prefix = [1] * n suffix = [1] * n # Fill prefix array for i in range(1, n): prefix[i] = prefix[i-1] * arr[i-1] # Fill suffix array for i in range(n-2, -1, -1): suffix[i] = suffix[i+1] * arr[i+1] # Calculate the result by multiplying prefix and suffix result = [prefix[i] * suffix[i] for i in range(n)] return result"},{"question":"You are given an array of integers of length N. You need to create a new array where each element at index i is the product of all the elements in the original array except the one at i. You are not allowed to use the division operation. Your task is to write a function that takes an array of integers and returns the new array as described. -----Input----- The input consists of: - First line contains an integer T denoting the number of test cases. - For each test case: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers, the elements of the array. -----Output----- For each test case, output a single line that contains N space-separated integers denoting the new array, where each element at index i is the product of all elements of the input array except the one at i. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - -100 ≤ array[i] ≤ 100 -----Example----- Input 2 4 1 2 3 4 3 -1 1 0 Output 24 12 8 6 0 0 -1 -----Explanation----- Example 1: For the input array [1, 2, 3, 4], the new array should be: - new_array[0] = 2 * 3 * 4 = 24 - new_array[1] = 1 * 3 * 4 = 12 - new_array[2] = 1 * 2 * 4 = 8 - new_array[3] = 1 * 2 * 3 = 6 So the output is 24 12 8 6. Example 2: For the input array [-1, 1, 0], the new array should be: - new_array[0] = 1 * 0 = 0 - new_array[1] = -1 * 0 = 0 - new_array[2] = -1 * 1 = -1 So the output is 0 0 -1.","solution":"def product_except_self(nums): Takes a list of integers and returns a list where each element at index i is the product of all elements in the original list except the one at i. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [0] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output def process_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) result = [] current_line = 1 for _ in range(T): N = int(lines[current_line]) array = list(map(int, lines[current_line + 1].split())) processed = product_except_self(array) result.append(\\" \\".join(map(str, processed))) current_line += 2 return \\"n\\".join(result)"},{"question":"You are given an undirected graph with N nodes and M edges. The nodes are numbered from 1 to N. Your task is to perform the following operations efficiently: 1. \\"1 x y\\" - Add an edge between node x and node y. 2. \\"2 x\\" - Print whether node x is connected to any other node or not. 3. \\"3 a b\\" - Find and print the shortest path between nodes a and b. If no path exists, print -1. Input Format: The first line consists of two integers N and M, the number of nodes and the number of initial edges, respectively. Following M lines contain two integers each, which describe the initially present M edges of the graph. Next, you are given Q queries where each query is one of the three types mentioned above. Constraints: 1leq Nleq1000 0leq Mleq5000 1leq Qleq2000 Output Format: For each type 2 query, print \\"YES\\" or \\"NO\\" indicating whether node x is connected to any other node or not. For each type 3 query, print the length of the shortest path between the two nodes, or -1 if no path exists. Sample Input: 5 3 1 2 2 3 3 4 2 1 1 4 5 2 5 3 1 5 3 2 5 Sample Output: YES YES 5 3 Explanation: - Initially, nodes are connected as described in the input edges. Node 1 is connected to nodes 2 and indirectly to nodes 3 and 4. - Query \\"2 1\\" asks if node 1 is connected to any other node, which it is, so the answer is \\"YES\\". - Query \\"1 4 5\\" adds an edge between nodes 4 and 5, making node 5 connected. - Query \\"2 5\\" now confirms that node 5 is connected, so the answer is \\"YES\\". - Query \\"3 1 5\\" finds the shortest path from node 1 to node 5, which goes through nodes 2, 3, and 4, so the answer is 5. - Query \\"3 2 5\\" finds a shorter path from node 2 to node 5 through nodes 3 and 4, so the answer is 3.","solution":"from collections import deque, defaultdict class Graph: def __init__(self, N, M, edges): self.adj = defaultdict(list) self.N = N self.add_edges(edges) def add_edges(self, edges): for x, y in edges: self.adj[x].append(y) self.adj[y].append(x) def add_edge(self, x, y): self.adj[x].append(y) self.adj[y].append(x) def is_connected(self, x): return len(self.adj[x]) > 0 def shortest_path(self, a, b): if a == b: return 0 visited = set() queue = deque([(a, 0)]) while queue: node, depth = queue.popleft() if node == b: return depth visited.add(node) for neighbor in self.adj[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return -1 def process_graph(N, M, edges, queries): graph = Graph(N, M, edges) results = [] for query in queries: parts = query.split() cmd_type = parts[0] if cmd_type == \'1\': x, y = int(parts[1]), int(parts[2]) graph.add_edge(x, y) elif cmd_type == \'2\': x = int(parts[1]) results.append(\\"YES\\" if graph.is_connected(x) else \\"NO\\") elif cmd_type == \'3\': a, b = int(parts[1]), int(parts[2]) results.append(graph.shortest_path(a, b)) return results"},{"question":"Word Ladder Transformation Consider a dictionary of words containing only lowercase alphabetical letters. Given two words, `beginWord` and `endWord`, your task is to transform `beginWord` into `endWord` using the shortest sequence of transformations. Each transformation must change exactly one letter, and the result must be a word found in the given dictionary. Formally, you need to determine the length of the shortest transformation sequence from `beginWord` to `endWord`. If no such sequence exists, return 0. # Input - The first line contains the `beginWord`, a string of length 1 to 10. - The second line contains the `endWord`, a string of length 1 to 10. - The third line contains an integer `n`, the number of words in the dictionary. - The next `n` lines contain the words of the dictionary, each of length equal to `beginWord` and `endWord`. # Output - Print an integer which is the number of words in the shortest transformation sequence from `beginWord` to `endWord`, including both `beginWord` and `endWord`. - If no valid transformation sequence exists, print 0. # Constraints - All words in the input are of the same length. - All words consist only of lowercase English letters. - The dictionary contains no duplicates. # Sample Input ``` hit cog 5 hot dot dog lot log ``` # Sample Output ``` 5 ``` # Explanation One shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", and the length is 5. # Note The solution must use efficient algorithms to handle cases where `n` can be large (up to 5000 words). Consider using graph traversal methods like BFS (Breadth-First Search) to find the shortest path in terms of word transformations.","solution":"from collections import deque def word_ladder_length(beginWord, endWord, wordList): Returns the number of words in the shortest transformation sequence from beginWord to endWord, including both beginWord and endWord. If no such sequence exists, return 0. if endWord not in wordList: return 0 wordSet = set(wordList) queue = deque([(beginWord, 1)]) # (current_word, current_length) while queue: current_word, current_length = queue.popleft() if current_word == endWord: return current_length for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordSet: wordSet.remove(next_word) # mark as visited queue.append((next_word, current_length + 1)) return 0"},{"question":"In the Kingdom of Kremland, another fascinating challenge has arisen during the mathematics lesson. The topic covered in class was sequences and patterns. The teacher presented a problem to the students: given an integer N and an array A of size N, where A[i] is the score of the i-th student in the class. The task is to find the length of the longest subsequence that is both increasing and follows a \\"hill sequence\\" pattern. A \\"hill sequence\\" is defined as a sequence that initially increases and then decreases, but it does not have to strictly decrease after reaching the peak. It can have equal values on the way down. Can you help the students solve this challenge? -----Input----- The first line contains a single integer N (1 leq N leq 100) — the number of students. The second line contains N integers A[1], A[2], ..., A[N] (1 leq A[i] leq 1000) — the scores of the students. -----Output----- Output the length of the longest \\"hill sequence\\" subsequence from the array A. -----Examples----- Input 5 2 3 3 2 5 Output 4 Input 8 4 5 1 2 8 6 3 2 Output 6 Input 6 1 2 3 4 3 2 Output 6 -----Note----- In the first example, the longest \\"hill sequence\\" subsequence is [2, 3, 3, 2]. In the second example, the longest \\"hill sequence\\" subsequence is [1, 2, 8, 6, 3, 2]. In the third example, the entire array [1, 2, 3, 4, 3, 2] is already a \\"hill sequence\\".","solution":"def longest_hill_sequence(N, A): if N == 0: return 0 def find_lis(arr): Helper function to find the Longest Increasing Subsequence (LIS) length lis = [1] * len(arr) for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return lis def find_lds(arr): Helper function to find the Longest Decreasing Subsequence (LDS) length lds = [1] * len(arr) for i in range(len(arr)-2, -1, -1): for j in range(len(arr)-1, i, -1): if arr[i] >= arr[j] and lds[i] < lds[j] + 1: lds[i] = lds[j] + 1 return lds # Calculate LIS for every position lis = find_lis(A) # Calculate LDS for every position lds = find_lds(A) # Find the max length of hill sequence max_hill_len = 0 for i in range(N): if lis[i] > 1 and lds[i] > 1: # There must be an increasing and a decreasing part max_hill_len = max(max_hill_len, lis[i] + lds[i] - 1) return max_hill_len"},{"question":"Given a 2D grid map of \'1\'s (land) and \'0\'s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example 1: Input: 11110 11010 11000 00000 Output: 1 Example 2: Input: 11000 11000 00100 00011 Output: 3","solution":"def num_islands(grid): Given a 2D grid of \'1\'s (land) and \'0\'s (water), this function returns the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 def dfs(grid, r, c): nr = len(grid) nc = len(grid[0]) if r < 0 or c < 0 or r >= nr or c >= nc or grid[r][c] == \'0\': return grid[r][c] = \'0\' # mark the explored island part as \'0\' # explore all adjacent lands (up, down, left, right) dfs(grid, r - 1, c) dfs(grid, r + 1, c) dfs(grid, r, c - 1) dfs(grid, r, c + 1) nr = len(grid) nc = len(grid[0]) num_islands = 0 for r in range(nr): for c in range(nc): if grid[r][c] == \'1\': num_islands += 1 dfs(grid, r, c) return num_islands"},{"question":"Alice and Bob like playing games with arrays. One day, they encountered the following problem: Given an array of integers `a` with length `n` (1 ≤ n ≤ 10^5, -10^9 ≤ a[i] ≤ 10^9), you can perform the following operations any number of times (including zero): - Choose any two indices i and j (1 ≤ i, j ≤ n; i ≠ j) - Set a[i] = a[i] + a[j] - Set a[j] = a[j] - a[i] Alice wants to make the array consist of only one unique integer with the minimum number of operations possible. Determine the minimum number of operations required or if it\'s impossible to achieve such a state. Input: - The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - The first line of each test case contains a single integer n. - The second line of each test case contains n integers a_1, a_2, ..., a_n. Output: For each test case, print a single line containing the minimum number of operations required. If it\'s impossible to achieve such a state, print -1. Example: Input: 3 3 1 2 3 4 0 0 0 0 2 1000000000 -1000000000 Output: 2 0 1 Explanation: - In the first test case, you can achieve [1, 1, 1] in two operations: - Choose i=2, j=1 (2, 1): a[2]=2+1=3, a[1]=1-3=-2 → [-2, 3, 3] - Choose i=3, j=1 (3, 1): a[3]=3+(-2)=1, a[1]=-2-1=1 → [1, 1, 1] - In the second case, the array is already in a valid state. - In the third case, you can achieve [1000000000, 1000000000] in one operation: - Choose i=2, j=1 (2, 1): a[2]=-1000000000+1000000000=0, a[1]=1000000000-0=1000000000 → [1000000000, 1000000000]","solution":"def min_operations_to_unique_integer(arr): from collections import Counter # Count the frequency of each element in the array count = Counter(arr) # Find the element with the highest frequency max_frequency = max(count.values()) # To convert n elements to the most frequent element, we need (n - max_frequency) operations min_operations = len(arr) - max_frequency return min_operations def process_test_cases(test_cases): results = [] for n, arr in test_cases: if n == 1: results.append(0) else: results.append(min_operations_to_unique_integer(arr)) return results def main(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 results = process_test_cases(test_cases) return results"},{"question":"In a small town, there is only one street with `n` houses numbered from 1 to `n`. Every year, the local authority conducts a survey to find out the number of people living in each house. For this year\'s survey, the authority hired John to do the counting. John is a very skilled counter, but he always counts from the same house `k` times before moving to the next house to the right. For example, if there are 5 houses and John starts from the 1st house and counts twice, he will count the 1st house twice, the 2nd house twice, and so on until he reaches the 5th house. However, John\'s counting is not very accurate, so each time he counts a house, he may add or subtract 1 person randomly to the actual count. John repeats this entire survey process `t` times. You are required to determine the minimum possible total count (sum of all persons in all houses) after all surveys are completed. Input Each test contains multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 100). Description of the test cases follows. For each test case, the only line contains two integers `n` and `k` (1 ≤ k ≤ 10^5 and 1 ≤ n ≤ 10^5), which are the total number of houses and the number of times each house is counted during each survey, respectively. Output For each test case, print the minimum possible total count of people living in the street after all surveys are completed. Example Input 3 5 2 7 3 10 1 Output -10 -21 -10 Note Explanation of the first sample test case: Initially, there is an unknown number of people in each house. Since John counts each house `k=2` times and his count can be off by -1 each time, the possible deviation for each house is -2. For 5 houses, the total minimum possible count after one survey would be -10 (since each house would have a deviation of -2). Explanation of the second sample test case: Similarly, for `n=7` houses with `k=3`, each house can have a maximum negative deviation of -3. So, the total minimum possible count would be -21. Note that the process is repeated for `t` test cases provided in the input.","solution":"def min_possible_total_count(t, test_cases): Returns the minimum possible total count of people living in the street after all surveys are completed. Parameters: t (int): Number of test cases. test_cases (list) : A list of tuples. Each tuple contains two integers n (number of houses) and k (number of counts per house). Returns: list : A list containing the minimum possible total count for each test case. results = [] for n, k in test_cases: min_count = -n * k results.append(min_count) return results"},{"question":"Zenia has a collection of n unique books, and she wants to create a sequence of these books such that: 1. Each book appears exactly once in the sequence. 2. The absolute difference of the positions in the sequence of any two consecutive books in the collection is not less than d. Given n and d, you need to determine one such possible sequence of books or state that it is not possible to create such a sequence. -----Input----- The single line of input contains two integers n and d (2 ≤ n ≤ 100, 1 ≤ d ≤ 100). -----Output----- If it is possible to create such a sequence, print a sequence of integers from 1 to n (each integer representing a unique book) that satisfies the given condition. If it is not possible, print \\"Not possible\\". -----Examples----- Input 5 2 Output 1 3 5 2 4 Input 4 3 Output Not possible Input 10 1 Output 1 2 3 4 5 6 7 8 9 10 -----Note----- In the first example, one possible sequence is 1 3 5 2 4. The differences are 2, 2, 3, and 2, which are all at least 2. In the second example, it is impossible to create a sequence of 4 books where the absolute difference between the positions of consecutive books is at least 3. In the third example, any permutation of the books will satisfy the condition since the minimum required difference is 1.","solution":"def create_sequence(n, d): if d >= n: return \\"Not possible\\" sequence = [] for i in range(1, n+1, d): sequence.append(i) remaining = [x for x in range(1, n+1) if x not in sequence] while remaining: sequence.append(remaining.pop(0)) for i in range(1, len(sequence)): if abs(sequence[i] - sequence[i-1]) < d: return \\"Not possible\\" return sequence"},{"question":"Given an array of integers, find the length of the longest subsequence which is sorted in strictly increasing order but with the condition that any two consecutive elements in this subsequence have a difference of at most K. -----Constraints----- - 1 leq N leq 200 - 1 leq A_i leq 10^4 - 1 leq K leq 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N K A_1 ... A_N -----Output----- Print the length of the longest subsequence that satisfies the condition. -----Sample Input----- 7 2 10 12 14 16 13 15 11 -----Sample Output----- 4 Explanation: The longest subsequence that satisfies the condition is [10, 12, 13, 15] which has a length of 4.","solution":"def longest_increasing_subsequence(N, K, A): Returns the length of the longest subsequence which is sorted in strictly increasing order but with the condition that any two consecutive elements in this subsequence have a difference of at most K. # Initialize a list to keep track of the longest increasing subsequence at each index lis = [1] * N for i in range(1, N): for j in range(i): if A[i] > A[j] and A[i] - A[j] <= K: lis[i] = max(lis[i], lis[j] + 1) # Return the maximum value in the lis array return max(lis) # Function to read input and call the solution function def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) result = longest_increasing_subsequence(N, K, A) print(result)"},{"question":"Write a function that takes a string representing a mathematical expression containing only non-negative integers and the operators +, -, *, and /. The function should evaluate the expression and return the result as an integer. You can assume that the string is always a valid expression. The operators have the usual precedence: multiplication and division have higher precedence than addition and subtraction, and operators of equal precedence are evaluated from left to right. Do not use the `eval` function.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, *, and /. Returns the result as an integer. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # pop opening brace else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"Consider a list of integers. Write a function `find_non_adjacent_sum` which finds the maximum sum of elements that are not adjacent to each other. For example, given the input list `[3, 2, 5, 10, 7]`, the function should return `15`, as the sum of `3`, `10`, and `2` (choosing 10 skips both its neighbors `5` and `7`). The function should follow these steps: - Take a list of integers as input. - Return the maximum possible sum of non-adjacent elements in the list. Constraints: - The length of the input list will be between `1` and `1000`. - Each element in the list will be between `-1000` and `1000`. Examples: `find_non_adjacent_sum([3, 2, 5, 10, 7])` should return `15`. `find_non_adjacent_sum([-2, 1, 3, -4, 5])` should return `8`, as the sum of `1` and `5` (choosing `5` skips `-4`). `find_non_adjacent_sum([9, -1, -1, 9])` should return `18`, as the sum of two `9`s (choosing the first `9` skips `-1`). Function Signature: ```python def find_non_adjacent_sum(arr: List[int]) -> int: # Implementation here ```","solution":"from typing import List def find_non_adjacent_sum(arr: List[int]) -> int: Finds the maximum sum of elements in the list such that no two elements are adjacent. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) incl = max(0, arr[0]) excl = 0 for i in range(1, len(arr)): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"Given a binary tree, determine whether the tree satisfies the property of a \\"spiral order\\". A binary tree has a spiral order if the levels of the tree are traversed alternately from left to right and right to left, starting from the root level which is traversed from left to right. Input The first line contains an integer T, the number of test cases. The following T test cases follow: For each test case, the first line contains an integer N, the number of nodes in the tree. The next line contains N integers representing the node values in level order traversal. Null nodes are represented by -1. Output For each test case, print \\"YES\\" if the tree has a spiral order traversal, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^9 ≤ Node value ≤ 10^9 Only positive integers and -1 are given, where -1 represents a null node SAMPLE INPUT 2 7 1 2 3 7 6 5 4 7 1 2 3 -1 -1 5 4 SAMPLE OUTPUT YES NO Explanation: In the first test case, level order traversal is [1], [2, 3], [7, 6, 5, 4], which alternates from left to right and right to left, hence the output \\"YES\\". In the second test case, level order traversal is [1], [2, 3], [5, 4], which alternates correctly, but since the null nodes are not at the end and rule is violated, the output is \\"NO\\".","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): if not nodes: return None n = len(nodes) if n == 0 or nodes[0] == -1: return None root = TreeNode(nodes[0]) queue = [root] index = 1 while queue and index < n: node = queue.pop(0) if index < n and nodes[index] != -1: node.left = TreeNode(nodes[index]) queue.append(node.left) index += 1 if index < n and nodes[index] != -1: node.right = TreeNode(nodes[index]) queue.append(node.right) index += 1 return root def is_spiral_order(root): if not root: return True current_level = [root] left_to_right = True while current_level: next_level = [] for node in current_level: if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) if left_to_right: values = [node.val for node in current_level] else: values = [node.val for node in reversed(current_level)] left_to_right = not left_to_right current_level = next_level return True def check_spiral_order_trees(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] nodes = test_cases[i][1] root = build_tree(nodes) if N == 0 or not nodes or -1 in nodes and nodes.index(-1) != len(nodes) - 1: results.append(\\"NO\\") else: results.append(\\"YES\\" if is_spiral_order(root) else \\"NO\\") return results"},{"question":"# Is Tidy Number? A number is considered a **_Tidy Number_** if all its digits, when read from left to right, are in non-decreasing order (i.e., each digit is greater than or equal to the digit before it). **_Given_** a number *determine if it is a Tidy Number or not*. # Notes * **_The number_** passed will be **_positive_** (N > 0). * All **_single-digit numbers_** are considered as **_Tidy Numbers_**. # Input >> Output Examples ``` isTidyNumber(123) ==> return \\"Tidy!!\\" ``` Explanation: The digits 1, 2, and 3 are in non-decreasing order. ``` isTidyNumber(321) ==> return \\"NOT!!\\" ``` Explanation: The digits 3, 2, and 1 are not in non-decreasing order. ``` isTidyNumber(122333) ==> return \\"Tidy!!\\" ``` Explanation: Each preceding digit is less than or equal to the next digit. ``` isTidyNumber(4321) ==> return \\"NOT!!\\" ``` Explanation: The digits form a strictly decreasing order rather than a non-decreasing order. ``` isTidyNumber(556788) ==> return \\"Tidy!!\\" ``` Explanation: All the digits are in non-decreasing order from left to right. Enjoy Checking Numbers!","solution":"def isTidyNumber(number): Determines if a given number is a Tidy Number. A Tidy Number is a number whose digits are in non-decreasing order. Parameters: - number (int): The input number to check. Returns: - str: \\"Tidy!!\\" if the number is a Tidy Number, otherwise \\"NOT!!\\" num_str = str(number) return \\"Tidy!!\\" if all(num_str[i] <= num_str[i + 1] for i in range(len(num_str) - 1)) else \\"NOT!!\\""},{"question":"Problem Statement You are given a positive integer N and a list of N integers. Your task is to determine if there is a contiguous subarray whose sum is greater than a given integer K. * The subarray can be of any length including zero (in which case the sum is 0). * The sum of the subarray should be strictly greater than K. Input <pre> N K A[1] A[2] ... A[N] Constraints * 1 leq N leq 1000 * -1000 leq A[i] leq 1000 (for all i) * -1000000 leq K leq 1000000 * Inputs consist only of integers. Output Print \\"Yes\\" if there\'s a contiguous subarray with a sum greater than K, otherwise print \\"No\\". Example <pre> Input 5 7 1 2 3 4 -2 Output Yes Input 5 15 1 1 1 1 1 Output No Input 3 0 -1 -2 -3 Output No","solution":"def has_subarray_sum_greater_than_k(N, K, arr): Determine if there is a contiguous subarray whose sum is greater than K. Args: N (int): The number of integers in the list. K (int): The threshold value. arr (list of int): List of N integers. Returns: str: \\"Yes\\" if a contiguous subarray with sum greater than K exists, otherwise \\"No\\". current_sum = 0 max_sum_seen = -float(\'inf\') for num in arr: current_sum = max(num, current_sum + num) if current_sum > K: return \\"Yes\\" max_sum_seen = max(max_sum_seen, current_sum) return \\"No\\" if max_sum_seen <= K else \\"Yes\\""},{"question":"A researcher has discovered a new species of insects in a remote forest. To study their social behavior, they observe the distances between the insects. Each insect is represented as a point on a 2D plane, and the researcher needs to analyze the pairwise distances between them. The researcher is interested in pairs of insects that are at a specific range of distances from each other. Given the coordinates of the insects, calculate how many pairs of insects have a distance that lies between a given range [L, R] (both inclusive). The Euclidean distance between two points (x1, y1) and (x2, y2) is given by: [ sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Help the researcher by writing a program that solves this problem. Input: - First line contains an integer \\"t\\", denoting the number of test cases. - The first line of each test case contains an integer \\"N\\", the number of insects. - The following N lines contain two space-separated integers representing the coordinates of the insects. - The last line of each test case contains two integers \\"L\\" and \\"R\\", which define the range of distances. Output: Print the number of pairs of insects whose distance lies between L and R (inclusive) for each test case. Constraints: - 1 ≤ t ≤ 100 - 2 ≤ N ≤ 50 - -10^3 ≤ coordinates ≤ 10^3 - 0 ≤ L, R ≤ 10^6 - L ≤ R SAMPLE INPUT 2 3 0 0 1 0 0 1 1 2 3 1 1 2 2 3 3 1 3 SAMPLE OUTPUT 3 3 Explanation: For the first test case, the pairs of insects are: - (0,0) and (1,0) with a distance of 1 - (0,0) and (0,1) with a distance of 1 - (1,0) and (0,1) with a distance of √2 (approximately 1.41) All three distances lie between 1 and 2 inclusive, so the answer is 3. For the second test case, the pairs of insects are: - (1,1) and (2,2) with a distance of √2 (approximately 1.41) - (1,1) and (3,3) with a distance of √8 (approximately 2.83) - (2,2) and (3,3) with a distance of √2 (approximately 1.41) All three distances lie between 1 and 3 inclusive, so the answer is 3.","solution":"import math def count_pairs_within_distance(t, test_cases): results = [] for case in test_cases: N = case[\'N\'] coordinates = case[\'coordinates\'] L = case[\'L\'] R = case[\'R\'] count = 0 for i in range(N): for j in range(i + 1, N): x1, y1 = coordinates[i] x2, y2 = coordinates[j] distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) if L <= distance <= R: count += 1 results.append(count) return results"},{"question":"Given the lengths of three sides of a triangle, determine whether the triangle is an equilateral, isosceles, or scalene triangle. Example 1: Input: a = 5, b = 5, c = 5 Output: Equilateral Explanation: All sides are equal in length which makes it an Equilateral triangle. Example 2: Input: a = 4, b = 5, c = 6 Output: Scalene Explanation: All sides are of different lengths which makes it a Scalene triangle. Example 3: Input: a = 3, b = 3, c = 5 Output: Isosceles Explanation: Two sides are equal in length which makes it an Isosceles triangle. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkTriangleType() which takes three integers a, b, and c as input and returns the type of triangle as a string - \\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\". Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ a, b, c ≤ 10^4","solution":"def checkTriangleType(a, b, c): Given the lengths of the three sides of a triangle, this function determines whether the triangle is equilateral, isosceles, or scalene. Parameters: a (int): Length of the first side. b (int): Length of the second side. c (int): Length of the third side. Returns: str: Type of the triangle (\\"Equilateral\\", \\"Isosceles\\", or \\"Scalene\\"). if a == b and b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"Create a function that generates an ASCII representation of a diamond shape based on a given input dimension. The function should take a single integer input `n` representing the number of layers in the upper half of the diamond (including the middle layer). The lower half should be a mirror image of the upper half. Here are the rules to generate the diamond: 1. The diamond\'s width should not exceed `(2 * n - 1)` characters. 2. The middle layer should be the widest layer, having `(2 * n - 1)` stars (`*`). 3. Each successive outer layer should be narrowed symmetrically by 2 stars. Bonus: - If `n` is equal to or less than 0, return an empty string. - Ensure that each line ends with a newline character `n`. For example: - Input: `n = 3` - Output: ``` * *** ***** *** * ``` - Input: `n = 5` - Output: ``` * *** ***** ******* ********* ******* ***** *** * ```","solution":"def generate_diamond(n): Generates an ASCII representation of a diamond shape based on the given input dimension `n`. if n <= 0: return \\"\\" diamond = [] max_width = 2 * n - 1 # Upper part including the middle line for i in range(n): stars = 2 * i + 1 spaces = (max_width - stars) // 2 line = \' \' * spaces + \'*\' * stars + \' \' * spaces diamond.append(line) # Lower part excluding the middle line for i in range(n-2, -1, -1): stars = 2 * i + 1 spaces = (max_width - stars) // 2 line = \' \' * spaces + \'*\' * stars + \' \' * spaces diamond.append(line) return \'n\'.join(diamond) + \'n\'"},{"question":"Given an encoded string, your task is to decode it. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. The input string will always be valid; no extra white spaces, k will always be a positive integer and square brackets will always be well-formed. You are required to complete the function which decodes the given encoded string. Input: The first line of input contains an integer T denoting the number of test cases. Each test case contains a single encoded string s. Output: For each test case, output the decoded string in a new line. Constraints: 1 <= T <= 100 1 <= length of encoded string <= 200 Example: Input 2 3[a]2[bc] 2[abc]3[cd]ef Output aaabcbc abcabccdcdcdef Explanation: 1. In the first test case, the letter \'a\' is repeated 3 times and the sequence \'bc\' is repeated twice, resulting in \\"aaabcbc\\". 2. In the second test case, the sequence \\"abc\\" is repeated twice and \\"cd\\" is repeated thrice, followed by \\"ef\\", resulting in \\"abcabccdcdcdef\\". Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by the user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def decode_string(s): Decodes the given encoded string according to the rule k[encoded_string]. stack = [] current_string = \\"\\" current_num = 0 for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string = \\"\\" current_num = 0 elif char == \']\': last_string, last_num = stack.pop() current_string = last_string + last_num * current_string else: current_string += char return current_string def process_test_cases(num_cases, input_strings): Processes multiple test cases. results = [] for s in input_strings: results.append(decode_string(s)) return results"},{"question":"Implement a function to convert an integer to its Roman numeral representation. The function should take an integer as an input and return a string representing the equivalent Roman numeral. Roman numerals are represented by the following symbols: ``` Symbol Value I 1 IV 4 V 5 IX 9 X 10 XL 40 L 50 XC 90 C 100 CD 400 D 500 CM 900 M 1000 ``` For instance: - 3 should be represented as \\"III\\" - 9 should be represented as \\"IX\\" - 58 should be represented as \\"LVIII\\" - 1994 should be represented as \\"MCMXCIV\\" You can assume the input integer will be between 1 and 3999. Function signature: `def int_to_roman(num: int) -> str:` **Example:** ``` >>> int_to_roman(3) \'III\' >>> int_to_roman(9) \'IX\' >>> int_to_roman(58) \'LVIII\' >>> int_to_roman(1994) \'MCMXCIV\' ```","solution":"def int_to_roman(num: int) -> str: Convert an integer to a Roman numeral. Args: num (int): An integer to be converted to a Roman numeral. 1 <= num <= 3999 Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Alice and Bob are playing a game on a 2D grid with dimensions m times n. Initially, each cell of the grid contains a single piece. The players take turns and each turn consists of removing all pieces from a sub-grid defined by the rectangle with corners at (1,1) and (x,y) (both inclusive) where 1 leq x leq m and 1 leq y leq n. Thus, a player can choose any sub-grid that includes the top-left corner of the grid and remove all pieces in that sub-grid. A player loses if they cannot make a move (i.e., if the grid is empty). Alice always plays first. Determine the winner of the game if both players play optimally. Input Format The first line contains an integer boldsymbol{t}, the number of test cases. Each test case consists of two lines. The first line contains two integers m and n, the dimensions of the grid. Constraints 1 leq t leq 10 1 leq m, n leq 1000 Output Format For each test case, print \\"Alice\\" if Alice wins the game and \\"Bob\\" if Bob wins the game. Sample Input 0 3 2 2 3 2 4 3 Sample Output 0 Bob Alice Alice Explanation 0 For the first testcase: Alice will remove the entire grid in her first move, and hence will have no pieces to remove, making Bob the winner. For the second testcase: Alice can remove the sub-grid (1,1) to (1,1) making Bob remove any one sub-grid in his turn. Consequently, Alice can always force Bob to leave the last piece for Alice to remove. For the third testcase: Alice can remove the sub-grid (1,1) to (2, 1). Then, Bob will have no way to win if Alice plays optimally.","solution":"def determine_winner(m, n): Returns the winner of the game given the dimensions m (rows) and n (columns) # Alice wins if either m or n is odd, otherwise Bob wins if m % 2 == 1 or n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\" def solve_game(test_cases): results = [] for m, n in test_cases: results.append(determine_winner(m, n)) return results"},{"question":"A software company is developing a new application and needs to store data in a format suitable for subsequent retrieval and analysis. The engineer in charge has asked you to write a function to process transaction records, maintaining simplicity while ensuring efficient retrieval by the company\'s data analysts. ----Input:---- - The first line contains N, the number of transaction records. - Each of the next N lines contains a transaction record, with each record consisting of three space-separated values: - an integer id (a unique identifier for the transaction) - a string type (the type of transaction, either \'credit\' or \'debit\') - a float amount (the transaction amount) ----Output:---- - Output the total sum of transaction amounts for each type (\'credit\' and \'debit\') in a formatted message: - \\"Total Credit Amount: X.XX\\" - \\"Total Debit Amount: Y.YY\\" ----Constraints:---- - 1 leq N leq 100 - 1 leq id leq 1000 - The type will always be either \'credit\' or \'debit\' - 0 leq amount leq 10000 ----Sample Input:---- 4 1 credit 200.50 2 debit 150.75 3 credit 320.00 4 debit 80.25 ----Sample Output:---- Total Credit Amount: 520.50 Total Debit Amount: 231.00 ----Explanation:---- No further details needed; the information provided in the input and output specification is sufficient.","solution":"def process_transactions(records): Processes a list of transaction records and returns the total sum of transaction amounts for each type \'credit\' and \'debit\'. Args: records: list of strings, where each string is a transaction record containing an integer id, a string type, and a float amount. Returns: A tuple of two formatted strings: - \\"Total Credit Amount: X.XX\\" - \\"Total Debit Amount: Y.YY\\" total_credit = 0.0 total_debit = 0.0 for record in records: _, type, amount = record.split() amount = float(amount) if type == \\"credit\\": total_credit += amount elif type == \\"debit\\": total_debit += amount return (f\\"Total Credit Amount: {total_credit:.2f}\\", f\\"Total Debit Amount: {total_debit:.2f}\\")"},{"question":"You are given a sequence of `n` integers and an integer `q`. You need to process `q` queries on the sequence where each query can be one of the following types: 1. \\"1 i x\\" (without quotes): Update the `i-th` number to `x`. 2. \\"2 l r\\" (without quotes): Calculate and print the sum of the numbers from index `l` to `r` inclusive. Get ready to implement this efficiently, as the sequence might be large and the number of queries could be substantial. # Input The first line contains two space-separated integers `n` and `q` (1 ≤ n, q ≤ 100000). The second line contains `n` space-separated integers, representing the initial sequence of numbers. Each of the next `q` lines contains a query in one of the specified formats. # Output For each query of type \\"2 l r\\", print the sum of the elements from index `l` to `r` inclusive. # Example Input ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 5 ``` Output ``` 6 13 19 ``` # Note - After the first query \\"2 1 3\\", the sum of elements from index 1 to 3 (1, 2, 3) is 6. - After \\"1 3 10\\", the sequence becomes: 1 2 10 4 5. - Then, the second query \\"2 1 3\\" produces 13 as the sum of elements from index 1 to 3 (1, 2, 10). - Finally, the query \\"2 3 5\\" produces 19 as the sum of elements from index 3 to 5 (10, 4, 5). # Constraints - Ensure your solution is optimized both in terms of time and space to handle the maximum constraints.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Building the tree array for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Sum from index left to right (inclusive) left += self.n right += self.n + 1 result = 0 while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, initial_sequence, queries): segment_tree = SegmentTree(initial_sequence) results = [] for query in queries: if query[0] == 1: segment_tree.update(query[1] - 1, query[2]) elif query[0] == 2: results.append(segment_tree.query(query[1] - 1, query[2] - 1)) return results"},{"question":"Dana\'s garden is filled with different types of flowers, and she wants to arrange a beautiful bouquet for her friend\'s birthday. Each type of flower in her garden represents an integer, indicating the number of petals it has. Dana has learned that a bouquet looks most aesthetically pleasing if the total number of petals in the bouquet is either a multiple of 4 or a multiple of 5. Given the number of flowers in her garden and the number of petals each flower has, Dana wants to know if she can select at least one flower to form a bouquet that satisfies the condition. Help Dana determine if it is possible to create such a bouquet with the given flowers. -----Input----- The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains one integer n (1 ≤ n ≤ 100) — the number of flowers in the garden. The second line contains n integers p[1], p[2], ..., p[n] (1 ≤ p[i] ≤ 100) — the number of petals each flower has. -----Output----- For each test case, print YES if Dana can make a bouquet with a total petal count that is either a multiple of 4 or a multiple of 5. Otherwise, print NO. -----Example----- Input 2 3 2 3 5 4 1 2 3 6 Output YES NO -----Note----- In the first example, Dana can choose the flower with 5 petals which is a multiple of 5. In the second example, there is no combination of flowers that results in a total number of petals that is a multiple of 4 or 5.","solution":"def can_make_bouquet(t, test_cases): results = [] for i in range(t): n, petals = test_cases[i] if any(p % 4 == 0 or p % 5 == 0 for p in petals): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `interleave_strings` that takes two strings `s1` and `s2` as input and returns a new string created by interleaving the characters of `s1` and `s2`. If one string is longer than the other, append the remaining characters of the longer string to the new string. For example: - `interleave_strings(\'abc\', \'123\')` should return `\'a1b2c3\'` - `interleave_strings(\'abc\', \'12345\')` should return `\'a1b2c345\'` - `interleave_strings(\'abcd\', \'12\')` should return `\'a1b2cd\'` This exercise tests understanding of loops, string manipulation, and handling of varying input lengths.","solution":"def interleave_strings(s1, s2): Interleaves characters from two strings s1 and s2. If one string is longer, append the remaining characters to the result. result = [] length = max(len(s1), len(s2)) for i in range(length): if i < len(s1): result.append(s1[i]) if i < len(s2): result.append(s2[i]) return \'\'.join(result)"},{"question":"You are given an array A of size N. You can perform the following operation on the array: Type 1: Select any subarray of A and swap all the elements of this subarray. Your task is to determine the minimum number of operations required to make the array A a palindrome. If it is impossible to do so, output -1. For an array A having N elements: A subarray of the array A is any continuous portion of the array. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the size of array A. - The next line contains N space-separated integers, where the i^{th} integer denotes A_{i}. ------ Output Format ------ For each test case, print a single line containing one integer ― minimum operations required to make A a palindrome. Print -1 if it is impossible to make A a palindrome. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} -10^{9} ≤ A_{i} ≤ 10^{9} ----- Sample Input 1 ------ 3 5 1 2 3 2 1 4 1 3 4 1 3 1 2 3 ----- Sample Output 1 ------ 0 1 -1 ----- Explanation 1 ------ Test Case 1: Given A = [1, 2, 3, 2, 1]. The array is already a palindrome, so no operations are needed. Hence, the answer is 0. Test Case 2: Given A = [1, 3, 4, 1]. It can be transformed into a palindrome with one operation: - Operation: Perform a type 1 operation on the subarray [3, 4], swapping its elements to get the array [1, 4, 3, 1]. Test Case 3: Given A = [1, 2, 3]. It is impossible to transform this array into a palindrome, as there are no subarray swaps that will make the first and last elements equal in the minimum number of operations. Hence, the answer is -1.","solution":"def min_operations_to_palindrome(arr): N = len(arr) # Two pointers from both the ends left, right = 0, N - 1 operations = 0 while left < right: if arr[left] != arr[right]: return -1 # If the elements don\'t match, it\'s not possible to form a palindrome left += 1 right -= 1 return operations def solve(test_cases): results = [] for case in test_cases: N = case[0] arr = case[1] results.append(min_operations_to_palindrome(arr)) return results"},{"question":"Given a string s, return all the palindromic substrings contained within it. Note: The substrings must be palindromic and must not contain duplicates. Example: Input: s = \\"aab\\" Output: [ \\"a\\", \\"aa\\", \\"b\\" ]","solution":"def palindromic_substrings(s): Given a string s, return all unique palindromic substrings contained within it. def is_palindrome(sub): return sub == sub[::-1] result = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): sub = s[i:j] if is_palindrome(sub): result.add(sub) return list(result)"},{"question":"You are given a landscape represented as an array of heights where different heights indicate the altitude of different positions in a 2D field. Your task is to simulate water pouring into this landscape and determine how much water is retained in the valleys. Water can only flow left or right and will stop when it encounters a higher or equal height. Water retention in a valley is determined as the amount of water that the valley can hold before it starts spilling over. Write a function `water_retention` that takes an integer array `heights` as input and returns an integer representing the total amount of water retained across the landscape. Input - An integer array `heights` of length `n` where `0 ≤ heights[i] ≤ 10^4`. - The length of the `heights` array will be between `1` and `10^5`. Output - An integer representing the total water retained in the landscape. Example Input ``` heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Output ``` 6 ``` Explanation ``` Water is retained above the valleys at indices 2, 4, 5, and 8-10. Total retained water is 6 units. ```","solution":"def water_retention(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_retained = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_retained += min(left_max[i], right_max[i]) - heights[i] return water_retained"},{"question":"My friend Anita loves reading books and rearranging her bookshelf. One day she decided to organize her bookshelf in a very peculiar way. She wants to place books such that no two consecutive books have the same color. For simplicity, she assigned each book one of three colors: red, green, or blue. Your task is to help Anita count the number of ways she can arrange her books such that no two consecutive books share the same color. The total number of books will be provided. Input: The first line contains an integer n, the number of books. Output: One line containing the required number of ways to arrange the books. Constraint: 0 < n ≤ 30 SAMPLE INPUT 3 SAMPLE OUTPUT 12","solution":"def count_arrangements(n): if n == 1: return 3 dp = [[0] * 3 for _ in range(n)] # Base case when there\'s only 1 book dp[0][0] = 1 # Red dp[0][1] = 1 # Green dp[0][2] = 1 # Blue # Fill dp table for i in range(1, n): dp[i][0] = dp[i-1][1] + dp[i-1][2] # If i-th book is Red, (i-1)th book can be Green or Blue dp[i][1] = dp[i-1][0] + dp[i-1][2] # If i-th book is Green, (i-1)th book can be Red or Blue dp[i][2] = dp[i-1][0] + dp[i-1][1] # If i-th book is Blue, (i-1)th book can be Red or Green return dp[n-1][0] + dp[n-1][1] + dp[n-1][2]"},{"question":"You are given a 2D grid of size M x N filled with non-negative integers, representing heights. Suppose you are going on a hike, and you start at the top-left corner of the grid (1, 1), and move to the bottom-right corner (M, N). You can only move up, down, left, or right each step, and you want to minimize the maximum difference in height you have to go through during your way. Find the minimum possible value of the maximum difference in heights between two consecutive cells you encounter on your way from the top-left to the bottom-right corner. -----Constraints----- - 2 leq M, N leq 100 - 0 leq height_{i, j} leq 10^6 -----Input----- Input is given from Standard Input in the following format: M N height_{1,1} height_{1,2} ... height_{1,N} height_{2,1} height_{2,2} ... height_{2,N} . . height_{M,1} height_{M,2} ... height_{M,N} -----Output----- Print the minimum possible value of the maximum difference in heights between two consecutive cells on the path from the top-left to the bottom-right corner. -----Sample Input----- 3 3 1 2 2 3 8 2 5 3 5 -----Sample Output----- 2 Explanation: An optimal path that minimizes the maximum difference in heights is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) The heights encountered along this path are: 1, 2, 2, 2, 5 The maximum difference in heights between consecutive cells on this path is 3, 2, 0, 3, respectively. Thus, the answer is 2.","solution":"from collections import deque def is_path_possible(grid, M, N, max_diff): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * N for _ in range(M)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == M - 1 and y == N - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny]: if abs(grid[nx][ny] - grid[x][y]) <= max_diff: visited[nx][ny] = True queue.append((nx, ny)) return False def min_max_difference(grid): M, N = len(grid), len(grid[0]) left, right = 0, max(max(row) for row in grid) while left < right: mid = (left + right) // 2 if is_path_possible(grid, M, N, mid): right = mid else: left = mid + 1 return left def main(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) heights = [list(map(int, data[i * N + 2:(i + 1) * N + 2])) for i in range(M)] print(min_max_difference(heights)) if __name__ == \\"__main__\\": main()"},{"question":"You are tasked with organizing a secret meetup for a group of rebels. The meetup should be organized such that all members arrive at the rendezvous point at approximately the same time. The rebels are scattered across various points in a coordinate plane, and each of them travels at the same speed. The rendezvous point is chosen such that it minimizes the maximum distance any rebel has to travel. -----Input----- The first line contains the integer N (1 leq N leq 10), the number of rebels. Each of the next N lines contains two integers separated by a space, representing the coordinates (x, y) of each rebel on the coordinate plane. -----Output----- Output a pair of real numbers representing the coordinates of the optimal rendezvous point. Your answer will be considered correct if the distance from this point to furthest rebel is minimized and the values are within 10^{-6} of the correct answer. -----Examples----- Sample Input 1: 2 1 1 3 3 Sample Output 1: 2.0 2.0 Sample Input 2: 3 1 1 2 2 3 3 Sample Output 2: 2.0 2.0","solution":"def find_rendezvous_point(coordinates): Finds the coordinates of the optimal rendezvous point that minimizes the maximum distance any rebel has to travel. :param coordinates: List of tuples containing (x, y) coordinates of the rebels :return: Tuple containing the (x, y) coordinates of the optimal rendezvous point N = len(coordinates) if N == 1: return coordinates[0] x_sum = sum([coord[0] for coord in coordinates]) y_sum = sum([coord[1] for coord in coordinates]) return (x_sum / N, y_sum / N) # Example usage: # coordinates = [(1, 1), (3, 3)] # print(find_rendezvous_point(coordinates)) # Output: (2.0, 2.0)"},{"question":"Token Collection Game Alice and Bob are playing a token collection game on a grid. The grid consists of M rows and N columns. Each cell in the grid contains a certain number of tokens, represented by a non-negative integer. Alice and Bob take turns to collect tokens, with Alice starting first. They can only collect tokens from the top or the bottom row initially, and once a row is picked, they can move left or right within the same row. More precisely: 1. On her turn, Alice can pick a cell from either the top row (first row) or the bottom row (last row) and move horizontally within that row to collect tokens from a selected cell. 2. On his turn, Bob can also pick a cell from either the top row or the bottom row and move horizontally to collect tokens from a selected cell. 3. A player cannot pick tokens from a cell that has already been picked by the other player. Each player aims to maximize the number of tokens they collect, and Alice wants to collect more tokens than Bob by the end of the game. Task Given the number of rows M, the number of columns N, and the number of tokens in each cell of the grid, write a program to determine the maximum number of tokens Alice can ensure she collects, assuming both players play optimally. Input Read the following input from standard input: - The integer M which represents the number of rows. - The integer N which represents the number of columns. - A matrix of size MxN. Each of the next M lines contains N integers denoting the number of tokens in each cell. Output Output an integer representing the maximum number of tokens Alice can make sure she collects. Limits All input data satisfy the following conditions: - 2 ≤ M ≤ 200 - 2 ≤ N ≤ 200 - 0 ≤ number of tokens in each cell ≤ 1,000 Input/Output Examples Input example 1: 2 4 1 2 3 4 5 6 7 8 Output example 1: 18 Input example 2: 2 3 10 15 20 30 25 35 Output example 2: 70 Input example 3: 2 4 0 0 0 10 20 5 15 10 Output example 3: 25 Explanation: In the first example, - Alice should begin from the bottom row and move from left to right to collect all tokens: 5 + 6 + 7 + 8 => 26 In the second example, - Alice can start from the bottom row and collect all tokens in the row: 30 + 25 + 35 => 90 In the third example, - Alice should start from the bottom row and collect from the first cell in the bottom row: 20 - It will result in the Alice collecting more tokens than Bob.","solution":"def max_tokens_alice_collects(M, N, grid): # Sum the total tokens in the top row and bottom row top_row_sum = sum(grid[0]) bottom_row_sum = sum(grid[1]) # Alice should choose the row with the highest sum initially return max(top_row_sum, bottom_row_sum)"},{"question":"You are tasked with creating a seating arrangement for students in an examination hall. The examination hall has `n` rows and `m` columns, and is represented by a 2D array. Each cell in the array can either be empty (represented by 0) or occupied by a student (represented by 1). The students should not be seated in any pattern where they are directly next to each other horizontally, vertically, or diagonally. Write a function to determine the maximum number of students that can be seated in the examination hall following this rule. Input The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 10), the number of rows and the number of columns of the examination hall. Output Output a single integer, the maximum number of students that can be seated in the hall following the above rules. Example Input 2 3 Output 3 Input 4 4 Output 8","solution":"def max_students_in_exam_hall(n, m): Returns the maximum number of students that can be seated in the examination hall of dimensions n x m such that no two students are directly next to each other. max_seats = 0 for i in range(n): for j in range(m): if (i + j) % 2 == 0: max_seats += 1 return max_seats"},{"question":"You are given two lists of integers, `A` and `B`, each containing `n` integers. Your task is to determine whether `A` can be transformed into `B` by applying exactly one swap operation. A swap operation entails selecting any two distinct indices `i` and `j` in `A` and swapping the elements `A[i]` and `A[j]`. Input: The first line of input contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case consists of three lines: - The first line contains an integer `n` (2 ≤ n ≤ 1000), the number of elements in the lists. - The second line contains `n` integers, representing the list `A`. - The third line contains `n` integers, representing the list `B`. Output: For each test case, output \\"YES\\" if `A` can be transformed into `B` by exactly one swap operation, otherwise output \\"NO\\". Example: Input: 3 3 1 2 3 1 3 2 4 1 4 3 2 2 4 3 1 4 1 2 3 4 1 2 3 4 Output: YES YES NO","solution":"def can_transform(A, B): diff = [(a, b) for a, b in zip(A, B) if a != b] if len(diff) == 2 and diff[0] == diff[1][::-1]: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for t in test_cases: n, A, B = t[\'n\'], t[\'A\'], t[\'B\'] results.append(can_transform(A, B)) return results"},{"question":"You are given a list of integers. You need to determine if the list is a \\"mountain.\\" A list is considered a mountain if: 1. The list has at least 3 elements. 2. There exists some index `i` (0 < `i` < N-1) such that: - Array[0] < Array[1] < ... < Array[i-1] < Array[i] - Array[i] > Array[i+1] > ... > Array[N-1] Write a program to check if a list of integers is a mountain. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. ------ Output Format ------ For each test case, print \\"YES\\" if the list is a mountain; otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{3} 3 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{6} Note: The sum of N over all test cases will not exceed 10^{6}. ------ Sample Input 1 ------ 3 5 2 3 4 5 3 3 1 2 1 4 2 1 4 5 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: The list [2, 3, 4, 5, 3] first increases and then decreases. Hence, it is a mountain. Test case 2: The list [1, 2, 1] first increases and then decreases. Hence, it is a mountain. Test case 3: The list [2, 1, 4, 5] does not have a peak and hence is not a mountain.","solution":"def check_mountain(arr): n = len(arr) if n < 3: return \\"NO\\" # find the peak of the \\"mountain\\" i = 0 # walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # peak can\'t be the first or the last element if i == 0 or i == n - 1: return \\"NO\\" # walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"YES\\" if i == n - 1 else \\"NO\\" def is_mountain_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(check_mountain(arr)) return results"},{"question":"You are given two integer arrays `arr1` and `arr2`, both of size `n`. Your task is to merge these two arrays into a new sorted array `arr3` of size `2n` such that `arr3` contains all the elements from `arr1` and `arr2` in non-decreasing order. You must implement an efficient solution that merges these arrays in linear time, without using any built-in sort function. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5), indicating the size of the arrays `arr1` and `arr2`. The second line contains `n` integers, denoting the elements of `arr1` (1 ≤ arr1[i] ≤ 10^9). The third line contains `n` integers, denoting the elements of `arr2` (1 ≤ arr2[i] ≤ 10^9). It is guaranteed that both `arr1` and `arr2` are already sorted in non-decreasing order. -----Output----- Print a single line containing `2n` integers, representing the merged sorted array `arr3`. -----Examples----- Input 3 1 4 7 2 5 6 Output 1 2 4 5 6 7 Input 5 2 4 6 8 10 1 3 5 7 9 Output 1 2 3 4 5 6 7 8 9 10 -----Note----- In the first sample, the merged sorted array `arr3` is: [1, 2, 4, 5, 6, 7]. In the second sample, the merged sorted array `arr3` is: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays arr1 and arr2 into a single sorted array. Args: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A merged sorted array containing all elements from arr1 and arr2. n = len(arr1) # Both arrays are of the same size # Initialize pointers for both arrays and the merged array i = j = 0 arr3 = [] # Traverse both arrays and add smaller elements to arr3 while i < n and j < n: if arr1[i] < arr2[j]: arr3.append(arr1[i]) i += 1 else: arr3.append(arr2[j]) j += 1 # Capture any remaining elements in arr1 while i < n: arr3.append(arr1[i]) i += 1 # Capture any remaining elements in arr2 while j < n: arr3.append(arr2[j]) j += 1 return arr3"},{"question":"You are given a multiset of integers. Your task is to redistribute the integers into two subsets such that the absolute difference of the sums of the two subsets is minimized. Input The first line of input contains an integer n (1 ≤ n ≤ 20), the number of integers in the multiset. The second line of input contains n integers a1, a2, ..., an (-100 ≤ ai ≤ 100), the multiset. Output Output a single integer, the minimal absolute difference of the sums of the two subsets. Example Input 4 1 2 3 4 Output 0 Note In the first sample test, one possible way to split the multiset is {1, 4} and {2, 3}, where both subsets have a sum of 5. Thus, the absolute difference is 0. Input 3 -1 2 3 Output 0 Note In the second sample test, one possible way to split the multiset is {-1, 3} and {2}, where both subsets have a sum of 2. Thus, the absolute difference is 0.","solution":"def minimize_difference(n, arr): Function to minimize the absolute difference between the sums of two subsets. total_sum = sum(arr) closest_sum = float(\'inf\') def find_min_diff(index, current_sum): nonlocal closest_sum if index == n: other_sum = total_sum - current_sum closest_sum = min(closest_sum, abs(current_sum - other_sum)) return find_min_diff(index + 1, current_sum + arr[index]) find_min_diff(index + 1, current_sum) find_min_diff(0, 0) return closest_sum"},{"question":"You are given an array of N integers. You need to find the maximum length of a subarray with consecutive elements that have the same parity (either all odd or all even). Input: - The first line contains an integer N (1 ≤ N ≤ 5000) – the number of elements in the array. - The second line contains N space-separated integers – the elements of the array. Output: - A single integer – the maximum length of a subarray with elements having the same parity. SAMPLE INPUT 10 3 5 7 2 4 6 1 3 5 8 SAMPLE OUTPUT 3 Explanation: In the given input array, the subarray {2, 4, 6} has a maximum length of 3 with all even elements, which is longer than any subarray of odd elements.","solution":"def max_length_same_parity_subarray(n, arr): max_length = 1 current_length = 1 for i in range(1, n): if (arr[i] % 2) == (arr[i - 1] % 2): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Example Usage if __name__ == \'__main__\': n = 10 arr = [3, 5, 7, 2, 4, 6, 1, 3, 5, 8] print(max_length_same_parity_subarray(n, arr)) # Output should be 3"},{"question":"Given a grid with n rows and m columns, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'), your task is to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (n-1,m-1). You can move up, down, left, or right, but you cannot move through the cells with obstacles. Input An integer t, 1 ≤ t ≤ 10, denoting the number of test cases, followed by t sets of input data, each consisting of: - Two positive integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - n lines, each containing m characters (\'.\' or \'#\') representing the grid. Output For each set of input data, output the length of the shortest path from (0,0) to (n-1,m-1). If there is no such path, output -1. Example Sample input: 2 3 3 ... .#. ... 3 3 ..# .#. .#. Sample output: 4 -1","solution":"from collections import deque def shortest_path(grids): results = [] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for grid in grids: n, m, matrix = grid[\'n\'], grid[\'m\'], grid[\'matrix\'] if matrix[0][0] == \'#\' or matrix[n-1][m-1] == \'#\': results.append(-1) continue queue = deque([(0, 0)]) distances = [[-1] * m for _ in range(n)] distances[0][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] == \'.\' and distances[nx][ny] == -1: distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) results.append(distances[n-1][m-1]) return results def input_parser(raw_input): lines = raw_input.split(\'n\') t = int(lines[0]) grids = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) matrix = [list(lines[i]) for i in range(index + 1, index + 1 + n)] grids.append({\'n\': n, \'m\': m, \'matrix\': matrix}) index += n + 1 return grids def main(raw_input): grids = input_parser(raw_input) results = shortest_path(grids) return results"},{"question":"Consider an image represented as an n x m grid of pixels. Each pixel can be either `0` (white) or `1` (black). Suppose you want to find the largest rectangle (contiguous sub-grid) consisting entirely of black pixels. Write a function `largest_black_rectangle` that takes a binary matrix (a list of lists of integers where each integer is either `0` or `1`) as input and returns the area of the largest rectangle consisting entirely of `1`s. For example, given the following matrix: ``` [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` The largest rectangle of contiguous `1`s has an area of `6`. # Function Signature ```python def largest_black_rectangle(matrix: List[List[int]]) -> int: pass ``` # Constraints - The dimensions of the matrix will be between 1 and 200 (inclusive). - The matrix will contain only integers `0` or `1`. # Example Input: ```python [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` Output: ```python 6 ``` # Note Try to design an efficient algorithm that operates in linear or nearly linear time relative to the size of the matrix.","solution":"from typing import List def largest_black_rectangle(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 histogram = [0] * m for row in matrix: # Update the histogram for i in range(m): if row[i] == 0: histogram[i] = 0 else: histogram[i] += 1 # Calculate the maximum area in the updated histogram max_area = max(max_area, largest_rectangle_in_histogram(histogram)) return max_area def largest_rectangle_in_histogram(heights: List[int]) -> int: stack = [] max_area = 0 heights.append(0) # Sentinel to pop remaining elements in the stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the sentinel return max_area"},{"question":"You are working on maintaining a database for a library that stores records of books and their details. The library database contains the title of the book, the author\'s name, the genre of the book, and the year of publication. Your task is to write a program that processes a list of books and can perform the following operations: 1. **Add a Book**: Add a new book to the library database. 2. **Query Books by Author**: Retrieve the titles of all books written by a specific author. 3. **Query Books by Genre**: Retrieve the titles of all books belonging to a specific genre. 4. **Delete a Book**: Delete a book from the database by its title. ------ Input Format ------ - The first input line contains an integer N, denoting the number of operations. - The next N lines each describe an operation in one of the following formats: - Add a book: `ADD <title> <author> <genre> <year>` - Query by author: `QUERY_AUTHOR <author>` - Query by genre: `QUERY_GENRE <genre>` - Delete a book: `DELETE <title>` - `<title>`, `<author>`, and `<genre>` are strings without spaces, and `<year>` is an integer. ------ Output Format ------ For each `QUERY_AUTHOR` and `QUERY_GENRE` operation, return a list of book titles matching the query, sorted lexicographically. If no books match the query, return an empty list. For each `DELETE` operation, if the book exists and is successfully deleted, return \\"Book Deleted\\". If the book does not exist, return \\"Book Not Found\\". ------ Constraints ------ 1 ≤ N ≤ 10^4 The length of titles, authors, and genres will not exceed 100 characters. The year will be a positive integer between 1000 and 9999. ------ Sample Input ------ 10 ADD HarryPotter J.K.Rowling Fantasy 1997 ADD TheHobbit J.R.R.Tolkien Fantasy 1937 ADD TheCatchInTheRye J.D.Salinger Fiction 1951 QUERY_AUTHOR J.K.Rowling QUERY_GENRE Fiction DELETE TheCatchInTheRye QUERY_GENRE Fiction DELETE TheLordOfTheRings QUERY_AUTHOR J.R.R.Tolkien ------ Sample Output ------ HarryPotter TheCatchInTheRye Book Deleted [] Book Not Found TheHobbit","solution":"class LibraryDatabase: def __init__(self): self.books = [] def add_book(self, title, author, genre, year): self.books.append({ \\"title\\": title, \\"author\\": author, \\"genre\\": genre, \\"year\\": year }) def query_books_by_author(self, author): return sorted([book[\'title\'] for book in self.books if book[\'author\'] == author]) def query_books_by_genre(self, genre): return sorted([book[\'title\'] for book in self.books if book[\'genre\'] == genre]) def delete_book(self, title): for i, book in enumerate(self.books): if book[\'title\'] == title: self.books.pop(i) return \\"Book Deleted\\" return \\"Book Not Found\\""},{"question":"Arborists International has hired you to build a program that helps plan their seed planting operations. The organization plants trees in a region represented as a 2D grid of m rows and n columns. Each cell in the grid either contains a tree, represented by a **1**, or is empty, represented by a **0**. A tree can spread new seeds to any of its **4 adjacent cells (up, down, left, right)** unless blocked by the region boundary. Given a starting position (i, j) in the grid, your task is to calculate how many new cells will contain a tree if the tree at position (i, j) is allowed to spread seeds for exactly `k` iterations. Input: - The first line contains an integer **T**, the number of test cases. - For each test case, the first line contains three integers **m, n, k**, denoting the dimensions of the grid and the number of seed spreading iterations, respectively. - Each of the next m lines contains n space-separated integers (either **0** or **1**) representing the grid. - The next line contains two integers **i** and **j**, the starting position of the tree. Output: - For each test case, print a single line containing the number of new cells that contain a tree after **k** iterations. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ m, n ≤ 50 - 0 ≤ k ≤ 20 - 0 ≤ i < m - 0 ≤ j < n SAMPLE INPUT 2 3 3 1 0 0 1 0 1 0 1 0 0 0 2 3 3 2 0 0 1 0 1 0 1 0 0 0 2 SAMPLE OUTPUT 2 5 Explanation: In the first test case, the grid after 1 iteration will be: ``` 0 1 1 1 1 0 1 0 0 ``` The tree has spread to 2 new cells (marked as **1**). In the second test case, the grid after 2 iterations will be: ``` 1 1 1 1 1 1 1 1 0 ``` The tree has spread to 5 new cells (marked as **1**).","solution":"def count_new_trees_after_k_iterations(m, n, k, grid, start_i, start_j): if not grid[start_i][start_j]: return 0 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] queue = [(start_i, start_j)] visited = set(queue) for _ in range(k): new_seeds = [] for x, y in queue: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) new_seeds.append((nx, ny)) queue = new_seeds return len(visited) - 1 # subtract the original tree def process_test_cases(T, test_cases): results = [] for t in range(T): m, n, k, grid, start_i, start_j = test_cases[t] result = count_new_trees_after_k_iterations(m, n, k, grid, start_i, start_j) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): m = int(data[idx]) n = int(data[idx + 1]) k = int(data[idx + 2]) idx += 3 grid = [] for _ in range(m): grid.append(list(map(int, data[idx:idx + n]))) idx += n start_i = int(data[idx]) start_j = int(data[idx + 1]) idx += 2 test_cases.append((m, n, k, grid, start_i, start_j)) results = process_test_cases(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Mrs. Sharma is organizing a treasure hunt for her neighborhood kids. She has hidden clues in M different locations, and she provides a list of integers L of length M where each integer represents a clue ID found in that location. The kids need to find all unique pairs of clues (p, q) such that the absolute difference between the IDs of these clues is exactly D. A pair (p, q) is considered different from (q, p). Your task is to write a program to count the number of such unique pairs in the list. Input & Output: The first line of the input contains two integers M and D. The next M lines contain one integer each, representing the list L of clue IDs. You need to print one integer, the number of unique pairs that satisfy the condition mentioned in the problem statement. Constraints: 1 ≤ M ≤ 10^5 0 ≤ L[i] ≤ 10^9 for all index i in the list L. 1 ≤ D ≤ 10^9 Sample Input: 6 3 1 4 7 2 9 10 Sample Output: 4 Explanation: The pairs of clue IDs that satisfy the condition are: (1, 4) - absolute difference is 3 (4, 7) - absolute difference is 3 (7, 10) - absolute difference is 3 (1, 7) - absolute difference is 6 Only the pairs with exactly 3 have been counted: (1, 4), (4, 7), and (7, 10). Thus, there are 4 such pairs.","solution":"def count_unique_pairs(M, D, L): Returns the count of unique pairs (p, q) such that the absolute difference between p and q is exactly D. L_set = set(L) count = 0 for num in L: if (num + D) in L_set: count += 1 if (num - D) in L_set: count += 1 return count // 2 # To account for pairs counted twice"},{"question":"Problem D Theater Seat Allocation A local theater is planning a special event that requires efficient seating arrangements. The theater has r rows and c seats per row. Seats are numbered from 1 to r and from 1 to c. Given a list of attendees with their ticket numbers, you need to determine the seat number each attendee will occupy. Seat allocation should follow the ticket number order in row-major order, meaning that the first available seat in the first row is filled first, followed by the next seat in the same row, and so on until the end of the row, then continue with the next row. Your task is to write a program that takes the details of the theater layout and ticket numbers and outputs the seat position for each attendee. Input The input consists of a single test case in the following format: r c t_1 t_2 ... t_k r and c are integers representing the number of rows and the number of seats per row, respectively (1 leq r, c leq 10^9). For each i, the integer t_i is the ticket number of the i-th attendee (1 leq t_i leq r*c). Output Output k lines, each containing a pair of integers. The i-th line should contain the row number and the seat number of the seat which the attendee with ticket number t_i will occupy. Sample Input 1 3 4 5 12 7 Sample Output 1 2 1 3 4 2 3 Sample Input 2 2 5 3 1 10 4 Sample Output 2 1 3 1 1 2 5 1 4 Example Input 3 4 5 12 7 Output 2 1 3 4 2 3","solution":"def theater_seat_allocation(rows, cols, tickets): Determines the seat positions for a list of attendees. Parameters: rows (int): number of rows in the theater. cols (int): number of seats per row in the theater. tickets (list of int): ticket numbers of the attendees. Returns: list of tuple: Each tuple contains the row and seat number for a given ticket. result = [] for ticket in tickets: row = (ticket - 1) // cols + 1 seat = (ticket - 1) % cols + 1 result.append((row, seat)) return result"},{"question":"Given a string boldsymbol{str}, determine the minimum number of characters to be removed to make it a palindrome. A palindrome is a string that reads the same forward and backward. Example text{str} = text{\\"abca\\"} Removing either \'b\' or \'c\' will make the string a palindrome (\\"aca\\" or \\"aba\\"). Function Description Complete the `minRemovalsToPalindrome` function in the editor below. `minRemovalsToPalindrome` has the following parameter: - `string str`: a string consisting of lowercase and uppercase English letters Returns - `int`: the minimum number of characters to remove Input Format A single line contains the string boldsymbol{str}. Constraints 1 leq text{length of str} leq 1000 text{str} text{ contains only lowercase and uppercase English letters} Sample Input STDIN Function ----- -------- abca str = \\"abca\\" Sample Output 1 Explanation By removing \'b\' or \'c\', the string \\"abca\\" can be transformed into a palindrome: Removing \'b\': \\"aca\\" Removing \'c\': \\"aba\\"","solution":"def minRemovalsToPalindrome(s): def lcs(X, Y): m = len(X) n = len(Y) L = [[None] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) return len(s) - lcs_length"},{"question":"Paul loves arranging his collection of books on the bookshelf. He has a new sorting strategy where he wants to sort the books in alphabetical order. However, due to space constraints, he can place only one book at a time in its correct position on the shelf. Given the list of book titles, you need to determine the minimum number of moves required to sort the books alphabetically using his strategy. Each move consists of taking any book from its position and placing it back in the correct position, causing a shift in the arrangement and moving books to make space if necessary. The process continues until all books are sorted. Input Format The first line contains an integer T, which represents the number of test cases. Each of the following T lines contains a string of space-separated book titles representing the initial order of books on Paul\'s shelf. Output Format For each test case, print the minimum number of moves required to sort the books in alphabetical order. Constraints 1 ≤ T ≤ 1000 1 ≤ number of books ≤ 100 Each book title consists of only uppercase and lowercase English letters and has a length between 1 and 100 characters. SAMPLE INPUT 2 Algorithms DataStructures Databases Networks OperatingSystems Programming SAMPLE OUTPUT 2 2 Explanation Case 1: The list \\"Algorithms DataStructures Databases\\" can be sorted in alphabetical order with the following moves: - Move \\"Databases\\" to its correct position, resulting in \\"Algorithms Databases DataStructures\\". - The list is now sorted after 2 moves. Case 2: The list \\"Networks OperatingSystems Programming\\" can be sorted in alphabetical order with the following moves: - Move \\"OperatingSystems\\" to its correct position, resulting in \\"Networks Programming OperatingSystems\\". - Move \\"OperatingSystems\\" to its correct position, resulting in \\"Networks OperatingSystems Programming\\". - The list is sorted after 2 moves.","solution":"def min_moves_to_sort_books(test_cases): Returns a list containing the minimum number of moves required to sort the books for each test case. results = [] for books in test_cases: books_list = books.split() sorted_books = sorted(books_list) count = 0 for i in range(len(books_list)): if books_list[i] != sorted_books[count]: count += 1 results.append(count) return results"},{"question":"Write a function that takes a positive integer n and returns an n x n 2D array where each element is an empty string. For example: ``` generate_empty_grid(1) => [[\'\']] generate_empty_grid(2) => [[\'\', \'\'], [\'\', \'\']] generate_empty_grid(3) => [[\'\', \'\', \'\'], [\'\', \'\', \'\'], [\'\', \'\', \'\']] ``` **Note:** The result should be a 2D array (list of lists) matching the specified size, filled with empty string elements.","solution":"def generate_empty_grid(n): Returns an n x n 2D array where each element is an empty string. return [[\'\' for _ in range(n)] for _ in range(n)]"},{"question":"Mike is working on another problem related to resistor networks. This time, he needs to create a specific complex resistor network using the fewest possible identical resistors, each with a unit resistance value of 1 ohm. In this problem, Mike can use the following two types of connections to create new elements: 1. An element and a resistor connected in series, resulting in a new resistance R = Re + 1. 2. Two elements connected in parallel, resulting in a new resistance R = 1 / (1/Re1 + 1/Re2). Given a target resistance value expressed as a fraction a/b, help Mike determine the minimum number of unit resistors required to achieve this target resistance. -----Input----- The input consists of two space-separated integers a and b (1 ≤ a, b ≤ 10^9), representing the target resistance expressed as a simplified irreducible fraction a/b. -----Output----- Print a single integer representing the minimum number of unit resistors required to achieve the target resistance. -----Examples----- Input 1 1 Output 1 Input 5 3 Output 5 Input 7 12 Output 7 -----Note----- In the first example, one resistor with a unit resistance of 1 ohm is enough to achieve a resistance of 1 ohm. In the second example, using five resistors, you can form a series and parallel network to achieve a resistance of 5/3 ohms. In the third example, seven resistors can be arranged in a network to achieve the target resistance of 7/12 ohms.","solution":"def min_unit_resistors(a, b): Returns the minimum number of unit resistors (1 ohm each) required to achieve the target resistance a/b. return a + b - 1"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, remove k characters from the string so that the resultant string is lexicographically smallest. The task is to complete the function smallestString() which will return the smallest string possible after removing k characters. Example 1: Input: s = \\"abcde\\" k = 2 Output: \\"abc\\" Explanation: Remove the last two characters \'d\' and \'e\' to get the lexicographically smallest string \\"abc\\". Example 2: Input: s = \\"dbca\\" k = 1 Output: \\"bca\\" Explanation: Remove the first character \'d\' to get the lexicographically smallest string \\"bca\\". User task: Since this is a functional problem, you don\'t have to worry about the input. You just have to complete the function smallestString() which accepts the string s and integer k. Constraints: 1 <= |s| <= 100 0 <= k <= |s| s only contains lowercase alphabets.","solution":"def smallestString(s, k): Removes k characters from the string s to make the resultant string lexicographically smallest. stack = [] # We iterate through the string to form a lexicographically smallest string for char in s: while k > 0 and stack and stack[-1] > char: stack.pop() k -= 1 stack.append(char) # If there\'s still removals left, apply them at the end final_result = stack[:-k] if k else stack return \'\'.join(final_result)"},{"question":"You are tasked with managing a fleet of vehicles for a delivery service. Each vehicle has a certain capacity and each delivery package has a specific weight. Your goal is to maximize the number of packages delivered by distributing them across the available vehicles without exceeding any vehicle’s capacity. Write a program that determines the maximum number of packages that can be delivered given the capacities of the vehicles and the weights of the packages. Input The input consists of multiple lines of integers: The first line contains two positive integers V (V ≤ 100) and P (P ≤ 10,000) representing the number of vehicles and the number of packages, respectively. The second line contains V positive integers C1, C2, ..., CV (Ci ≤ 10,000) representing the capacities of the vehicles. The third line contains P positive integers W1, W2, ..., WP (Wi ≤ 100) representing the weights of the packages. Output Output a single integer, the maximum number of packages that can be delivered. Example Input 3 5 50 100 75 10 20 30 40 50 Output 5","solution":"def maximize_packages(V, P, capacities, weights): This function determines the maximum number of packages that can be delivered given the capacities of the vehicles and the weights of the packages. capacities.sort(reverse=True) weights.sort() delivered_packages = 0 for weight in weights: for i in range(V): if capacities[i] >= weight: capacities[i] -= weight delivered_packages += 1 break return delivered_packages"},{"question":"A farmer has been recording the weights of apples he picked from his orchard. He noticed that apples picked on a certain day are always heavier than the ones picked on the previous day. The farmer recorded the weights of the apples picked over `d` days. The weight of each apple is a positive integer. The farmer wants to create a list of apples such that, for each day, you keep the heaviest apple picked on that day. Then, he wants you to determine the number of days when the heaviest apple is strictly heavier than the heaviest apple of the previous day. Your task is to help the farmer by determining the number of days in which the heaviest apple is strictly heavier than the heaviest apple picked on the previous day. Input The first line of input contains a single integer `d` (1 ≤ d ≤ 100) — the number of days apples were picked. Each of the next `d` lines describes the weights of apples picked on that day. Each line contains a space-separated list of positive integers representing the weights of the apples. Output Print a single integer — the number of days in which the heaviest apple is strictly heavier than the heaviest apple picked on the previous day. Examples Input 4 1 2 3 2 4 6 5 3 9 8 1 1 Output 2 Input 3 3 3 3 4 4 4 4 4 4 Output 1 Note In the first sample, the heaviest apples for each day are 3, 6, 9, and 8. The heaviest apples increase from 3 to 6 and from 6 to 9, but not from 9 to 8. Hence, there are 2 days where the heaviest apple is strictly heavier than the previous day. In the second sample, the heaviest apples for each day are 3, 4, and 4. The heaviest apple increases from 3 to 4 once. Since there\'s only one day in which the heaviest apple is strictly heavier than the previous day, the output is 1.","solution":"def count_days_with_heavier_apples(d, weights_per_day): Counts the number of days in which the heaviest apple is strictly heavier than the heaviest apple picked on the previous day. :param d: Number of days apples were picked :param weights_per_day: List of list of integers representing the weights of the apples picked each day :return: The number of days where the heaviest apple is strictly heavier than the heaviest apple of the previous day heaviest_each_day = [max(day) for day in weights_per_day] count = 0 for i in range(1, d): if heaviest_each_day[i] > heaviest_each_day[i-1]: count += 1 return count"},{"question":"Create a function named \\"rotate_string\\" that takes two parameters. The first parameter is a string and the second parameter is an integer \\"n\\". The function should rotate the string to the right by \\"n\\" places. If \\"n\\" is negative, rotate the string to the left. For example: ```python rotate_string(\\"abcdef\\", 2) # returns \\"efabcd\\" rotate_string(\\"abcdef\\", -2) # returns \\"cdefab\\" rotate_string(\\"hello\\", 0) # returns \\"hello\\" ```","solution":"def rotate_string(s, n): Rotates the string s to the right by n places if n is positive. Rotates the string s to the left by n places if n is negative. if not s: # In case the input string is empty return s n = n % len(s) # Normalize n to be within the length of the string return s[-n:] + s[:-n]"},{"question":"The City Fashion Show organizers are interested in determining the variability of designs presented by different designers. Each designer presents a certain number of unique designs, and the organizers want to know the difference between the highest and lowest numbers of designs presented. Write a function `variability` that takes in a list of integers, where each integer represents the number of unique designs presented by a designer. The function should return the difference between the maximum and minimum values in the list. ------ Input Format ------ - A single line containing a space-separated list of integers. ------ Output Format ------ - A single integer representing the difference between the highest and lowest numbers of designs presented. ------ Constraints ------ - The list will contain at least 2 integers and at most 100 integers. - Each integer will be in the range [1, 1000]. ----- Sample Input 1 ------ 5 12 7 9 ----- Sample Output 1 ------ 7 ----- Explanation 1 ------ The maximum number of designs is 12, and the minimum is 5. The difference is 12 - 5 = 7. ----- Sample Input 2 ------ 15 20 17 25 30 ----- Sample Output 2 ------ 15 ----- Explanation 2 ------ The maximum number of designs is 30, and the minimum is 15. The difference is 30 - 15 = 15.","solution":"def variability(designs): Returns the difference between the maximum and minimum numbers of designs in the list. Args: designs (list of int): A list of integers representing the number of unique designs presented by each designer. Returns: int: The difference between the maximum and minimum values in the list. max_designs = max(designs) min_designs = min(designs) return max_designs - min_designs"},{"question":"Bob the builder has a set of wooden planks with different lengths. He wants to build the longest possible fence using exactly k planks from this set. However, there is a catch – he can only use planks that are consecutive in the original ordering, as moving the planks around is too heavy for him. Help Bob find out the maximum length of the fence he can build using exactly k consecutive planks. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of wooden planks in the set. The second line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 10^4) — the lengths of the wooden planks. The third line contains a single integer k (1 ≤ k ≤ n) — the number of planks to select. -----Output----- Print a single integer — the maximum length of the fence Bob can build using exactly k consecutive planks. -----Examples----- Input 5 1 2 3 4 5 2 Output 9 Input 5 5 1 1 1 5 3 Output 7 -----Further Explanation----- In the first example, the maximum length Bob can achieve with 2 consecutive planks is from taking the last two planks (4 and 5). Their sum is 9. In the second example, the maximum length Bob can achieve with 3 consecutive planks is from the last three planks (1, 1, and 5). Their sum is 7.","solution":"def max_fence_length(n, planks, k): Returns the maximum length of the fence that can be built using exactly k consecutive planks. # Compute the sum of the first k planks max_length = sum(planks[:k]) current_sum = max_length # Use the sliding window technique to find the maximum sum of k consecutive planks for i in range(1, n - k + 1): current_sum = current_sum - planks[i - 1] + planks[i + k - 1] if current_sum > max_length: max_length = current_sum return max_length"},{"question":"Given a list of `n` positive integers, you are required to find the maximum possible difference between any two elements in the list after a series of operations. You can perform the following operation any number of times: 1. Pick an element from the list and increment it by 1. Your task is to compute the maximum possible difference between any two elements of the list after performing the allowed operations optimally. Function Description Complete the function `maxDifferenceAfterOperations` in the editor below. It should return an integer that represents the maximum possible difference between any two elements after performing the given operations. `maxDifferenceAfterOperations` has the following parameter(s): - `arr`: an array of integers Input Format The first line contains an integer `n`, the number of elements in the list. The second line contains `n` space-separated integers representing the elements of the list. Constraints - 1 leq n leq 10^5 - 1 leq arr[i] leq 10^9 Output Format Print the maximum possible difference between any two elements after performing the allowed operations. Sample Input 5 1 3 5 7 9 Sample Output 8 Explanation If we increment the smallest element (1) by 8, it becomes 9. Thus, the difference between any two elements can be maximized to 8 (for example, between the elements 9 and 1 resulting in 9 - 1 = 8). Any other series of operations will lead to a smaller maximum difference.","solution":"def maxDifferenceAfterOperations(arr): Returns the maximum possible difference between any two elements of the list after performing the allowed operations. return max(arr) - min(arr) # Sample test print(maxDifferenceAfterOperations([1, 3, 5, 7, 9])) # Output: 8"},{"question":"You are given an undirected graph with N nodes and M edges. The goal is to determine whether it is possible to color the graph using two colors (let\'s say red and blue) such that no two adjacent nodes have the same color. Constraints * 1 leq N leq 1000 * 0 leq M leq 100000 * 1 leq u_i, v_i leq N Input The input is provided in the following format from Standard Input: N M u_1 v_1 u_2 v_2 : u_M v_M Each of the M subsequent lines contains two integers u_i and v_i indicating that there is an edge between nodes u_i and v_i. Output Print \\"YES\\" if it is possible to color the graph using two colors such that no two adjacent nodes have the same color. Otherwise, print \\"NO\\". Examples Input 3 3 1 2 2 3 3 1 Output NO Input 4 4 1 2 2 3 3 4 4 1 Output YES","solution":"def can_color_graph(N, M, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (N + 1) # 0-based indexing requires N+1 def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, N + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes an array of integers representing temperatures recorded over several days. The function should return an array of integers where each element represents the number of days you have to wait after the current day to get a warmer temperature. If there is no future day with a warmer temperature, put 0 in that position. For example: ```python temperatures = [73, 74, 75, 71, 69, 72, 76, 73] # should return: [1, 1, 4, 2, 1, 1, 0, 0] ```","solution":"def dailyTemperatures(temperatures): Given a list of temperatures, returns a list with the number of days until a warmer temperature. If no such day exists, use 0. :param temperatures: List[int] - List of daily temperatures :return: List[int] - List of days until a warmer temperature result = [0] * len(temperatures) stack = [] # This will store the temperatures as (temp, index) for i, current_temp in enumerate(temperatures): while stack and current_temp > stack[-1][0]: temp, index = stack.pop() result[index] = i - index stack.append((current_temp, i)) return result"},{"question":"Anant is working on a system where he needs to manage tasks with dependencies. Each task is represented with a unique identifier from 1 to N. Some tasks have dependencies, meaning that a task can only be started after specific tasks have been completed. The input consists of multiple lines; the first line contains a single integer N representing the number of tasks. Each of the next N lines contains a task followed by its dependencies, ending with a -1. Your goal is to determine a valid sequence to complete the tasks. If no valid sequence exists, output \\"Not Possible\\". Input Format The first line contains a single integer N. Each of the next N lines contains a task identifier followed by its dependencies, ending with a -1. For a task with no dependencies, just \\"-1\\" follows the task identifier. Output Format If a valid sequence exists, print the tasks in the order they should be completed, space-separated in a single line. If no such sequence exists, print \\"Not Possible\\". Constraints 1 ≤ N ≤ 1000 1 ≤ Task Identifier ≤ N SAMPLE INPUT 4 1 2 -1 2 3 -1 3 4 -1 4 -1 SAMPLE OUTPUT 4 3 2 1 SAMPLE INPUT 3 1 2 -1 2 3 -1 3 1 -1 SAMPLE OUTPUT Not Possible","solution":"from collections import defaultdict, deque def find_task_order(N, dependencies): # Create an adjacency list and compute in-degrees of each task adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, N+1)} for task, deps in dependencies.items(): for dep in deps: adj_list[dep].append(task) in_degree[task] += 1 # Queue for tasks with no incoming edges (in-degree == 0) zero_in_degree_queue = deque([task for task in in_degree if in_degree[task] == 0]) task_order = [] while zero_in_degree_queue: current_task = zero_in_degree_queue.popleft() task_order.append(current_task) for neighbor in adj_list[current_task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If we have ordered all the tasks successfully if len(task_order) == N: return task_order else: return \\"Not Possible\\" # Function to transform input into a suitable structure def parse_input(input_lines): N = int(input_lines[0]) dependencies = {} for i in range(1, N + 1): parts = list(map(int, input_lines[i].split())) task = parts[0] deps = parts[1:-1] if parts[1] != -1 else [] dependencies[task] = deps return N, dependencies def task_management(input_lines): N, dependencies = parse_input(input_lines) result = find_task_order(N, dependencies) if result == \\"Not Possible\\": return result else: return \' \'.join(map(str, result))"},{"question":"Alice is trying to regroup the books she has on her bookshelf. She has n books placed arbitrarily on the shelf, and each book has a distinct width. She wants to maximize the number of books in one of the contiguous subarrays (groups) such that the books in this group can be arranged in strictly increasing order of their widths from left to right. -----Input----- The input consists of two lines. The first line contains a single integer n (1 leq n leq 100000) denoting the number of books. The second line contains n distinct integers w_i (1 leq w_i leq 1000000), representing the widths of the books on the shelf from left to right. -----Output----- Your program should output exactly one integer - the maximum number of books that can be selected such that their widths are in strictly increasing order. -----Examples----- Sample Input: 6 5 1 3 4 2 6 Sample Output: 4 Explanation: One possible group of books with strictly increasing widths is [1, 3, 4, 6]. The length of this group is 4, which is the maximum possible.","solution":"def max_books_in_increasing_order(n, widths): This function finds the maximum number of books that can be selected from the list such that their widths are in strictly increasing order. if n == 0: return 0 # Initialize the length of longest increasing subsequence (LIS) for each book lis = [1] * n # Fill lis[] using DP for i in range(1, n): for j in range(0, i): if widths[i] > widths[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value from lis[] return max(lis)"},{"question":"Parking Spot Finder Alice works in a large office building situated in a busy urban area. The building has a private parking lot with multiple floors and numerous parking spots. Each floor has a different number of parking spots, and each spot on any floor can be either empty or occupied. Alice wants to find a parking spot as close as possible to the main entrance located on the ground floor. The office parking lot can be represented as a multi-floor grid with empty spaces and parked cars. Given the parking lot\'s layout as a matrix where each element represents a parking spot as either empty (0) or occupied (1), you need to write a program that finds the closest empty parking spot to the entrance. If multiple spots are equally close, choose the one with the lowest row and column number. Input The first input line contains two integers F and C (1 leq F, C leq 100) representing the number of floors and the number of parking spots on each floor, respectively. The following F lines each contain C integers – either 0 or 1. A 0 means the spot is empty, and a 1 means it is occupied. Output Output the location (floor and spot) of the closest empty parking spot. If multiple spots are equally close, choose the one with the lowest floor number, and if there is still a tie, choose the spot with the lowest column number. If there are no empty spots, output -1. Example Input ``` 3 4 0 1 1 0 1 0 0 1 1 1 0 0 ``` Example Output ``` 1 1 ``` Explanation The example parking lot is a 3-floor parking lot with 4 spots on each floor. The closest empty parking spot to the entrance (floor 0) is located on the first floor at the first spot.","solution":"def find_closest_parking_spot(parking_lot): Finds the closest empty parking spot in the parking lot. Parameters: parking_lot (list of list of ints): A matrix representing the parking lot where 0 indicates an empty spot and 1 indicates an occupied spot. Returns: Tuple (int, int): A tuple representing the floor number and spot number of the closest empty parking spot. If no empty spot is found, returns -1. for floor in range(len(parking_lot)): for spot in range(len(parking_lot[floor])): if parking_lot[floor][spot] == 0: return floor + 1, spot + 1 # Adding 1 to match 1-based index of output return -1"},{"question":"You are given a string S of length N consisting of characters \'a\' and \'b\' only. You can perform the following operation on it any number of times: - Pick any character and replace it with the other (\'a\' becomes \'b\' and \'b\' becomes \'a\'). Determine the minimum number of operations required to convert the string S into a string where no two consecutive characters are the same. -----Input----- First line contains a single integer N, the length of the string S. Second line contains the string S. -----Output----- Print a single integer, the minimum number of operations required. -----Constraints----- - 1 ≤ N ≤ 105 - S consists of only \'a\' and \'b\'. -----Example----- Input: 5 baaba Output: 1 -----Explanation----- One way to make the string such that no two consecutive characters are the same is to convert the first occurrence of consecutive \'a\' to \'b\', making the string \\"babba\\". Hence, only 1 operation is needed.","solution":"def min_operations_to_alternate(s): Returns the minimum number of operations required to ensure that no two consecutive characters are the same. ops = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: ops += 1 return ops"},{"question":"Given an undirected graph, determine the number of connected components, where each node represents a city and each edge represents a road between two cities. A connected component is a set of cities such that there is a path between any two cities of this set, and no city in the set connects to any city outside of it. - Input: - First line contains an integer T, the number of test cases. - For each test case: - First line contains two integers N and M, the number of cities and the number of roads respectively. - The next M lines each contain two integers u and v, indicating a road between cities u and v. - Output: - For each test case, output the number of connected components. - Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - 0 ≤ u, v < N - Sample Input: ``` 2 6 3 0 1 1 2 3 4 4 5 5 0 4 2 0 1 2 3 ``` - Sample Output: ``` 1 2 ```","solution":"def find_connected_components(T, test_cases): Determine the number of connected components in each graph given the test cases. Args: T (int): Number of test cases. test_cases (list): List of test cases where each test case is represented as a tuple. Each tuple contains number of cities (N), number of roads (M), and a list of roads. Returns: List[int]: Number of connected components for each test case. def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) result = [] for n, m, roads in test_cases: graph = {i: [] for i in range(n)} for u, v in roads: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for node in range(n): if node not in visited: dfs(node, visited, graph) components += 1 result.append(components) return result"},{"question":"Aradhana loves prime numbers, and she has challenged the boys in her class to a game. She will select a number `k`, and the nth boy who wants to impress her must find the `k`th prime number. Since some of the boys are not well-versed in programming, they have asked for your help to determine the `k`th prime number efficiently. Constraints: 1 ≤ T ≤ 50 1 ≤ k ≤ 500 Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single integer `k`. Output: For each test case, output a single line with an integer which is the `k`th prime number. SAMPLE INPUT: 3 1 5 10 SAMPLE OUTPUT: 2 11 29 Explanation: There are 3 test cases: - The 1st prime number is 2. - The 5th prime number is 11. - The 10th prime number is 29.","solution":"def sieve_of_eratosthenes(n): Generates all prime numbers up to n using the sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def kth_prime(k): Returns the k-th prime number. # Assuming 500th prime is less than 10,000 for safe bounds if k <= 0: raise ValueError(\\"k should be a positive integer\\") limit = 10000 # Assumed limit for finding primes to cover up to the 500th prime primes = sieve_of_eratosthenes(limit) return primes[k - 1] def process_primes(test_cases): Processes a list of test cases to find respective k-th prime numbers. results = [] for k in test_cases: results.append(kth_prime(k)) return results"},{"question":"David is an avid mountain climber and often goes on thrilling adventures to different ranges. On his latest expedition, he wants to find the ultimate climbing route that will give him the maximum elevation gain. To help him plan, he has gathered a detailed map indicating various peaks and the direct trails connecting them along with their elevations. Your task is to assist David by determining the maximum elevation gain he can achieve if he starts from a specific base camp and chooses an optimal climbing path. A climbing path is defined as a series of trails starting from the base camp and moving solely to higher elevations until there are no more higher adjacent peaks. ----- Input ----- The first line of input contains two integers ( n ) and ( m ) (( 2 leq n leq 1000 ), ( 1 leq m leq 5000 )), where ( n ) is the number of peaks and ( m ) is the number of trails between the peaks. The following line contains ( n ) integers ( e_1, e_2, ldots, e_n ) (( 0 leq e_i leq 10^6 )), where ( e_i ) represents the elevation of peak ( i ). Then follow ( m ) lines, each containing two integers ( u_i ) and ( v_i ) (( 1 leq u_i, v_i leq n ), ( u_i neq v_i )), indicating a bidirectional trail between the peaks ( u_i ) and ( v_i ). Then follows a line containing an integer ( b ) (( 1 leq b leq n )), the peak number where David\'s base camp is located. ----- Output ----- Output a single integer representing the maximum elevation gain that David can achieve from the base camp when he chooses an optimal climbing path. ----- Examples ----- Sample Input: 5 6 100 200 300 400 500 1 2 1 3 2 4 3 4 3 5 4 5 1 Sample Output: 400 Explanation: David starts at peak 1 with an elevation of 100. From peak 1, he can move to peak 2 or peak 3. The optimal path is from peak 1 to 3, and then to peak 5. The elevation gain is ( 500 - 100 = 400 ). Another Example: Sample Input: 3 2 150 300 450 1 2 2 3 1 Sample Output: 300 Explanation: David starts at peak 1 with an elevation of 150. He can either move to peak 2 first and then to peak 3. The elevation gain is ( 450 - 150 = 300 ).","solution":"def max_elevation_gain(n, m, elevations, trails, base_camp): from collections import defaultdict, deque # Convert 1-based to 0-based index for calculations base_camp -= 1 # Create adjacency list for the graph graph = defaultdict(list) for u, v in trails: graph[u-1].append(v-1) graph[v-1].append(u-1) # Initiate a list to store maximum gain from the base camp max_gain = [0] * n visited = [False] * n # Initialize a deque for BFS or DFS to keep track of the current path stack = deque([base_camp]) # DFS approach to explore all paths and calculate the gains while stack: peak = stack.pop() visited[peak] = True for neighbor in graph[peak]: if not visited[neighbor] and elevations[neighbor] > elevations[peak]: max_gain[neighbor] = max(max_gain[neighbor], max_gain[peak] + (elevations[neighbor] - elevations[peak])) stack.append(neighbor) # The maximum gain in the gain list is the result return max(max_gain) # Example usage: # n, m = 5, 6 # elevations = [100, 200, 300, 400, 500] # trails = [(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)] # base_camp = 1 # print(max_elevation_gain(n, m, elevations, trails, base_camp)) # Should output 400"},{"question":"TarZee the turtle has discovered a sequence of positive integers. He wants to know if the sequence is palindromic. A sequence is called palindromic if it reads the same forwards and backwards. -----Constraints----- - The length of the sequence does not exceed 10. - Each integer in the sequence is between 1 and 100, inclusive. -----Input----- Input is given from Standard Input in the following format: n a1 a2 ... an -----Output----- If the sequence is palindromic, print YES; otherwise, print NO. -----Sample Input----- 5 1 3 5 3 1 -----Sample Output----- YES","solution":"def is_palindromic_sequence(n, sequence): Returns \'YES\' if the sequence is palindromic, otherwise \'NO\'. Parameters: n (int): Length of the sequence. sequence (list of int): List of integers representing the sequence. Returns: str: \'YES\' if the sequence is palindromic, otherwise \'NO\'. if sequence == sequence[::-1]: return \'YES\' return \'NO\'"},{"question":"You are given a sequence of integers of length N. Your task is to divide the sequence into the minimum number of contiguous subarrays such that each subarray has a non-decreasing order. Given the sequence, determine the required number of such subarrays. Constraints * 1 leq N leq 2 times 10^5 * 1 leq A_i leq 10^9 Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of contiguous non-decreasing subarrays. Examples Input 5 2 1 4 6 3 Output 3 Input 4 1 2 3 4 Output 1 Input 6 5 1 2 5 4 3 Output 4 Input 7 3 4 2 1 6 7 8 Output 3","solution":"def min_non_decreasing_subarrays(N, sequence): Determine the minimum number of contiguous subarrays such that each subarray is non-decreasing. :param N: Length of the sequence :param sequence: List of integers representing the sequence :return: Integer representing the minimum number of non-decreasing subarrays if N == 1: return 1 subarray_count = 1 for i in range(1, N): if sequence[i] < sequence[i-1]: subarray_count += 1 return subarray_count"},{"question":"Given a string containing uppercase and lowercase alphabets, write a function to print the most frequently occurring character in the string. If there are multiple characters with the same maximum frequency, print the character that comes first alphabetically in the ASCII table. Example 1: Input: str = \\"apple\\" Output: \\"p\\" Explanation: \'p\' appears twice in the string which is more than any other characters. Example 2: Input: str = \\"teststring\\" Output: \\"t\\" Explanation: \'t\' and \'s\' both appear 3 times but \'t\' comes first alphabetically. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function mostFrequentChar() that takes a string (str) as an input and returns the most frequently occurring character. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(str) ≤ 10^6","solution":"def mostFrequentChar(s): from collections import Counter if not s: return \\"\\" # Using Counter to count frequencies. count = Counter(s) # Finding the character with the highest frequency. # In case of a tie, the min function with sorted keys in Counter ensures the lexicographical order. most_frequent_char = min(count, key=lambda k: (-count[k], k)) return most_frequent_char"},{"question":"You are given a string containing only characters \'a\' and \'b\'. We denote the count of character \'a\' by C_a and the count of character \'b\' by C_b. Your task is to return the length of the longest substring that contains an equal number of \'a\'s and \'b\'s. ----- Input ----- The first line contains an integer T - the number of test cases. Each of the next T lines contains a string S made up of characters \'a\' and \'b\'. ----- Output ----- For each test case, print a single integer, the length of the longest substring that contains an equal number of \'a\'s and \'b\'s. ----- Constraints ----- 1 le T le 10^{4} 1 le |S| le 10^{5} The sum of the lengths of strings over all test cases does not exceed 10^{6} ----- Example Input ----- 2 abba ababab ----- Example Output ----- 4 6","solution":"def longest_equal_ab_substring(T, cases): results = [] for S in cases: n = len(S) max_len = 0 count = {0: -1} curr_balance = 0 for i in range(n): if S[i] == \'a\': curr_balance += 1 else: curr_balance -= 1 if curr_balance in count: max_len = max(max_len, i - count[curr_balance]) else: count[curr_balance] = i results.append(max_len) return results"},{"question":"# Task Write a function that divides an array into multiple smaller arrays (or chunks) of a given size. The chunks should be formed sequentially starting from the beginning of the array. If the number of elements in the array is not a multiple of the chunk size, the last chunk may have fewer elements than the specified size. # Input/Output `[input]` array `arr` An array of integers. Note that the array can be empty. `[input]` integer `chunkSize` A positive integer representing the desired size of each chunk. It is guaranteed to be at least 1. `[output]` array An array of arrays, where each inner array represents a chunk of the original array. # Example For `arr = [1, 2, 3, 4, 5]` and `chunkSize = 2`, the output should be `[[1, 2], [3, 4], [5]]`. For `arr = [8, 9, 10]` and `chunkSize = 1`, the output should be `[[8], [9], [10]]`.","solution":"def chunk_array(arr, chunkSize): Divides an array into multiple smaller arrays (or chunks) of a given size. Parameters: arr (list): The input array of integers. chunkSize (int): The size of each chunk. Returns: list: A list of lists where each sublist represents a chunk of the original array. return [arr[i:i + chunkSize] for i in range(0, len(arr), chunkSize)]"},{"question":"Task: Your job here is to implement a function `word_frequency`, which takes a string `text`, and outputs a dictionary where the keys are the unique words in the text and the values are the frequency of each word. * Words are case-insensitive (e.g., \\"Hello\\" and \\"hello\\" should be considered the same word). * Non-alphabetic characters (such as punctuation) should be ignored. * The output dictionary should contain only lowercase words. What it looks like: ```python word_frequency(str) #=> { \\"word_1\\": frequency_1, \\"word_2\\": frequency_2, ... } ``` Some examples: ```python word_frequency(\\"Hello, hello! How are you?\\") # => {\\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 1} word_frequency(\\"This is a test. This test is only a test.\\") # => {\\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 3, \\"only\\": 1} word_frequency(\\"Coding is fun. Coding is challenging.\\") # => {\\"coding\\": 2, \\"is\\": 2, \\"fun\\": 1, \\"challenging\\": 1} ```","solution":"import re from collections import Counter def word_frequency(text): Takes a string `text` and returns a dictionary with the frequency of each unique word. Args: text (str): The input text string Returns: dict: A dictionary with words as keys and their frequency as values # Convert text to lowercase text = text.lower() # Use regex to replace non-alphabet characters with spaces text = re.sub(r\'[^a-zs]\', \' \', text) # Split text into words words = text.split() # Use Counter to count the frequency of each word frequency = Counter(words) return dict(frequency)"},{"question":"You are given a string s consisting of lowercase English letters and you need to find the minimum number of moves to make all the characters of the string the same. In one move, you can insert any character at any position in the string or delete any character from any position in the string. Input: - The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case, the first and only line contains the string s (1 ≤ |s| ≤ 100). Output: - For each test case, output the minimum number of moves required. Example: Input: 2 aabb abc Output: 2 2 Explanation: In the first case, with 2 moves, you can either insert \'a\' twice to get \\"aaaa\\" or delete \'b\' twice to get \\"aa\\". In the second case, with 2 moves, you can insert \'a\' twice to get \'aaa\' or \'b\' or \'c\' and then insert whatever character you have 0 of twice.","solution":"def min_moves(s): Returns the minimum number of moves required to make all characters of the string the same. from collections import Counter # Get the frequency of each character in the string freq = Counter(s) # Find the maximum frequency among the characters max_freq = max(freq.values()) # The minimum moves would be converting all other characters to the majority character min_moves = len(s) - max_freq return min_moves def process_test_cases(test_cases): Processes multiple test cases and returns the result for each. results = [] for s in test_cases: results.append(min_moves(s)) return results"},{"question":"There are N flowers, each with a specific beauty score. You want to pick exactly K flowers such that the sum of the beauty scores of the selected flowers is maximized. However, you can only pick adjacent flowers. -----Constraints----- - 1 ≦ N ≦ 100 - 1 ≦ K ≦ N - 1 ≦ beauty[i] ≦ 1000 -----Input----- The input is given from standard input in the following format: N K beauty[1] beauty[2] ... beauty[N] -----Output----- Output the maximum possible sum of beauty scores of the selected K adjacent flowers. -----Sample Input----- 5 2 3 1 2 5 6 -----Sample Output----- 11 By picking the last two flowers with beauty scores 5 and 6, the sum is 11, which is the maximum possible.","solution":"def max_beauty_score(N, K, beauty): Returns the maximum sum of beauty scores of K adjacent flowers. :param N: Number of flowers (1 ≤ N ≤ 100) :param K: Number of flowers to pick (1 ≤ K ≤ N) :param beauty: List of beauty scores (1 ≤ beauty[i] ≤ 1000) :return: Maximum possible sum of beauty scores of selected K adjacent flowers. max_sum = 0 current_sum = sum(beauty[:K]) max_sum = current_sum for i in range(1, N - K + 1): current_sum = current_sum - beauty[i - 1] + beauty[i + K - 1] max_sum = max(max_sum, current_sum) return max_sum # Function to parse input and call the solution function def main(): import sys input = sys.stdin.read data = input().split() N, K = int(data[0]), int(data[1]) beauty = list(map(int, data[2:])) print(max_beauty_score(N, K, beauty))"},{"question":"Chef\'s friend, Greg, has a peculiar way of filtering elements from a list of integers. Given an integer array `arr` of size `N`, Greg wants to filter the array such that every appearance of the lowest value in the list is removed. Your task is to help Greg achieve this. Write a function that removes all occurrences of the smallest number from the list and returns the modified list. If the list is empty after removals, return a list containing a single element, `-1`. ------ Input Format ------ - The first line of the input contains an integer `T`, the number of test cases. - Each test case consists of two lines: - The first line contains an integer `N`, the size of the array. - The second line contains `N` space-separated integers denoting the elements of the array. ------ Output Format ------ For each test case, output on a new line the modified list with all the smallest elements removed. If the list is empty, output `-1`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -10^3 ≤ arr[i] ≤ 10^3 ------ Sample Input 1 ------ 3 5 4 2 1 3 1 4 7 8 9 7 2 5 5 ------ Sample Output 1 ------ 4 2 3 8 9 -1 Explanation 1 Test case 1: The smallest number is 1. Removing all occurrences of 1, we get the modified list: [4, 2, 3]. Test case 2: The smallest number is 7. Removing all occurrences of 7, we get the modified list: [8, 9]. Test case 3: The smallest number is 5. Removing all occurrences of 5, the list becomes empty. Therefore, we return `-1`.","solution":"def filter_smallest(arr): Removes all occurrences of the smallest number from the input list. If the resulting list is empty, returns a list containing a single element, -1. if not arr: return [-1] min_value = min(arr) filtered_list = [x for x in arr if x != min_value] if not filtered_list: return [-1] return filtered_list def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. results = [] for i in range(T): N, arr = test_cases[i] result = filter_smallest(arr) results.append(result) return results"},{"question":"You are organizing a fleet of drones to monitor a series of events happening in a city. There are n monitoring stations positioned in different parts of the city, each managing certain sections of the area. Each monitoring station has a set radius within which it can effectively monitor events. You are given the coordinates of the n monitoring stations and their corresponding radii. An event is considered covered if it falls within the monitoring radius of at least one station. Your task is to determine the minimum number of monitoring stations required to cover all the given m events. If it is impossible to cover all the events, return -1. -----Input----- The first line contains two space-separated integers n and m (1 leq n, m leq 1000), the number of monitoring stations and the number of events. The next n lines each contain three space-separated integers x_ i, y_ i, and r_ i (1 leq x_ i, y_ i leq 1000, 1 leq r_ i leq 100), denoting the coordinates of each monitoring station and its radius. The following m lines each contain two space-separated integers x\'_ j and y\'_ j (1 leq x\'_ j, y\'_ j leq 1000), which represent the coordinates of each event. -----Output----- Print the minimum number of monitoring stations required to cover all the given events. If it is impossible to cover all events, print -1 instead. -----Examples----- Sample Input: 5 3 1 1 5 4 4 2 7 7 3 10 10 1 13 13 2 2 2 6 6 9 9 Sample Output: 2","solution":"import math from itertools import combinations def distance(x1, y1, x2, y2): Calculate the Euclidean distance between two points (x1, y1) and (x2, y2) return math.sqrt((x1 - x2)**2 + (y1 - y2)**2) def min_stations_to_cover_events(n, m, stations, events): def can_cover_all_events(selected_stations): for ex, ey in events: covered = False for sx, sy, sr in selected_stations: if distance(sx, sy, ex, ey) <= sr: covered = True break if not covered: return False return True # Generate all combinations of station indices for size in range(1, n + 1): # start checking from subset of size 1 for subset in combinations(stations, size): if can_cover_all_events(subset): return size return -1 # Example usage: n = 5 m = 3 stations = [(1, 1, 5), (4, 4, 2), (7, 7, 3), (10, 10, 1), (13, 13, 2)] events = [(2, 2), (6, 6), (9, 9)] print(min_stations_to_cover_events(n, m, stations, events)) # Output: 2"},{"question":"There are M intervals given on a number line. Each interval is represented by its starting point s_i and ending point e_i. We will repeat the following operation as long as possible: - Choose two intervals such that one of them is completely within the other, merge these two intervals into a single interval that spans from the smaller starting point to the larger ending point. We can prove that we can only do this operation a finite number of times. Find the maximum number of times we can do the operation. -----Constraints----- - 1 leq M leq 10^5 - 0 leq s_i < e_i leq 10^9 - All values in input are integers. - Intervals with the same start and end points are considered identical. -----Input----- Input is given from Standard Input in the following format: M s_1 e_1 : s_M e_M -----Output----- Print the maximum number of times we can do the operation. -----Sample Input----- 4 1 5 2 3 6 8 7 9 -----Sample Output----- 1 By choosing the intervals (1, 5) and (2, 3), we can merge these into (1, 5). The other intervals cannot be merged further, so the maximum number of operations is 1.","solution":"def max_merge_operations(M, intervals): Given the number of intervals and a list of intervals (each represented as a tuple (s_i, e_i)), returns the maximum number of merge operations where one interval can be completely within the other. intervals.sort(key=lambda x: (x[0], -x[1])) count = 0 merged_intervals = [] for interval in intervals: if not merged_intervals or interval[1] > merged_intervals[-1][1]: merged_intervals.append(interval) else: count += 1 return count"},{"question":"A warehouse has a grid layout of shelves with rows numbered from 1 to m and columns numbered from 1 to n. Each cell in the grid can either be empty or contain a box with certain dimensions. You need to implement a system to store the boxes in such a way that no box overlaps with any other, and each box fits within the dimensions of the grid. Each box is described by its top-left corner position (r, c) and its dimensions height (h) and width (w). You are given a list of boxes with their respective positions and dimensions. Write a function to determine if all boxes can be placed on the grid without overlapping. If it\'s possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains two integers, m and n (1 ≤ m, n ≤ 100) - the number of rows and columns in the grid. The second line contains a single integer, b (1 ≤ b ≤ 100) - the number of boxes. Each of the next b lines contains four integers describing a box: r, c, h, w (1 ≤ r, r+h−1 ≤ m, 1 ≤ c, c+w−1 ≤ n, 1 ≤ h, w ≤ min(m, n)) - the row and column of the top-left corner and the height and width of the box. -----Output----- Output a single line with the word \\"YES\\" if all boxes can be placed on the grid without any overlaps and within the grid boundaries, otherwise output \\"NO\\". -----Examples----- Input 5 5 3 1 1 2 2 3 3 1 1 4 4 2 2 Output YES Input 4 4 2 1 1 3 3 2 2 2 2 Output NO -----Note----- In the first example, all boxes can be placed within a 5x5 grid without overlapping with each other. In the second example, the two boxes overlap, so it is not possible to place all boxes without overlap.","solution":"def can_place_boxes(m, n, boxes): Returns \\"YES\\" if all boxes can be placed on the grid without overlapping and within grid boundaries, else \\"NO\\". Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. boxes (list of tuples): List of boxes where each box is described by tuple (r, c, h, w). Returns: str: \\"YES\\" or \\"NO\\" grid = [[0] * n for _ in range(m)] for r, c, h, w in boxes: for i in range(r - 1, r - 1 + h): for j in range(c - 1, c - 1 + w): if grid[i][j] == 1: return \\"NO\\" grid[i][j] = 1 return \\"YES\\" def solve(input_string): lines = input_string.strip().split(\'n\') m, n = map(int, lines[0].split()) b = int(lines[1]) boxes = [tuple(map(int, lines[i + 2].split())) for i in range(b)] return can_place_boxes(m, n, boxes)"},{"question":"In a fictional universe of Veritonia, messages are communicated only through sequences of unique identifiers that form a code. These codes consist of pairs of integers, where each integer is a unique identifier. The Veritonian security council has been dealing with an issue where information leaks could happen if any two codes share a pair of identifiers. Therefore, their communication protocol requires that no two codes should have any identifiers in common. Your task is to verify whether a given set of codes follows this protocol or not. Input The first line contains an integer T, which represents the number of test cases (1 ≤ T ≤ 100). Each test case starts with an integer n, the number of codes (2 ≤ n ≤ 100). The next n lines in each test case contain two integers each, representing the pairs of unique identifiers in the codes. It is guaranteed that the identifiers are positive integers and fit within a 32-bit signed integer. Output For each test case, output a single line with the word \'VALID\' if the codes follow the communication protocol, and \'INVALID\' otherwise. SAMPLE INPUT 3 3 1 2 3 4 5 6 3 1 2 2 3 4 5 4 1 7 2 8 3 9 7 10 SAMPLE OUTPUT VALID INVALID INVALID Explanation In the first test case, each pair of unique identifiers is distinct, hence the output is \'VALID\'. In the second test case, the pair (2,3) shares the identifier 2 with the pair (1,2), making the output \'INVALID\'. In the third test case, the pair (7,10) shares the identifier 7 with the pair (1,7), making the output \'INVALID\'.","solution":"def verify_codes(test_cases): results = [] for case in test_cases: identifiers = set() valid = True for pair in case: if pair[0] in identifiers or pair[1] in identifiers: valid = False break identifiers.add(pair[0]) identifiers.add(pair[1]) results.append(\\"VALID\\" if valid else \\"INVALID\\") return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(input_lines[index]) index += 1 case = [] for _ in range(n): pair = tuple(map(int, input_lines[index].split())) case.append(pair) index += 1 test_cases.append(case) return test_cases"},{"question":"Given an array of N positive integers, representing the amount of rainfall in a sequence of cities, determine the maximum difference in rainfall between any two consecutive cities in the array. Example 1: Input: N = 5 A = {10, 3, 15, 7, 9} Output: 12 Explanation: The maximum difference in rainfall between consecutive cities is 12 (between city 2 with 3 units and city 3 with 15 units). Example 2: Input: N = 4 A = {4, 12, 24, 16} Output: 12 Explanation: The maximum difference in rainfall between consecutive cities is 12 (between city 2 with 12 units and city 3 with 24 units). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxDifferenceInRainfall()` which takes an integer N and an array A[] and returns an integer denoting the maximum difference in rainfall. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6","solution":"def maxDifferenceInRainfall(N, A): Returns the maximum difference in rainfall between any two consecutive cities. Parameters: N (int): The number of cities. A (list of int): The list of rainfall amounts in each city. Returns: int: The maximum difference in rainfall between any two consecutive cities. if N < 2: return 0 max_diff = 0 for i in range(1, N): diff = abs(A[i] - A[i-1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"You are given an integer array `nums` and an integer value `k`. You need to perform `k` operations to make the `nums` array beautiful. In one operation, you can select any two adjacent elements of the array and swap them. An array is considered beautiful if the array is sorted in non-decreasing order. Write a program to determine the minimum number of operations required to make the array beautiful. If it is not possible to make the array beautiful in `k` or fewer operations, return `-1`. Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 200, 0 ≤ k ≤ 1000), where `n` is the number of elements in the array `nums`, and `k` is the number of operations allowed. - The second line contains `n` integers, representing the elements of the array `nums`. Output - Print one integer, the minimum number of operations required to make the array beautiful, or `-1` if it is not possible within `k` operations. Example Input: 5 5 3 1 2 5 4 Output: 3 Input: 4 1 1 2 3 4 Output: 0 Input: 3 2 3 2 1 Output: -1","solution":"def min_operations_to_beautiful(n, k, nums): Returns the minimum number of operations required to make the nums array sorted in non-decreasing order. If it is not possible within k operations, returns -1. # Auxiliary function to count the number of inversions in the array def count_inversions(arr): inv_count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inv_count += 1 return inv_count # Calculate the number of inversions in the given list inversions = count_inversions(nums) # If the number of inversions is less than or equal to k, return the number of inversions if inversions <= k: return inversions else: return -1"},{"question":"Write a function that accepts a list of integers, and returns a new list where each element is the product of every other integer in the original list except the integer at that position. Example: product_exclude_self([1, 2, 3, 4]) Output: [24, 12, 8, 6] Explanation: - Element at index 0 is the product of 2 * 3 * 4 = 24 - Element at index 1 is the product of 1 * 3 * 4 = 12 - Element at index 2 is the product of 1 * 2 * 4 = 8 - Element at index 3 is the product of 1 * 2 * 3 = 6 Note: Do not use division in your solution.","solution":"def product_exclude_self(lst): Returns a list where each element is the product of all other elements in the input list except for the element at the same index. n = len(lst) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left_products for i in range(1, n): left_products[i] = left_products[i - 1] * lst[i - 1] # Fill right_products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * lst[i + 1] # Fill result by multiplying left_products and right_products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A company is developing a new software application that will process a large stream of time-stamped events. Each event has a start time and an end time described in seconds. The application needs to determine the maximum number of overlapping events at any given time. Given a list of events, each with a start and end time, write a program to calculate the maximum number of overlapping events. ---- Input ---- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N indicating the number of events. Each of the next N lines contains two space-separated integers S and E representing the start and end time of an event. ---- Output ---- For each test case, print a single line containing one integer — the maximum number of overlapping events. ---- Constraints ---- 1 leq T leq 100 1 leq N leq 10^5 1 leq S < E leq 10^9 ---- Sample Input 1 ---- 1 5 1 5 2 6 4 7 5 8 3 4 ---- Sample Output 1 ---- 3 ---- Explanation 1 ---- Example case 1: The events are as follows: - (1, 5) - (2, 6) - (4, 7) - (5, 8) - (3, 4) Visualizing the events along a timeline: - At time 2, events (1, 5), (2, 6), and (3, 4) overlap, resulting in 3 overlapping events. - No other time has more than 3 overlapping events. Thus, the maximum number of overlapping events is 3.","solution":"def max_overlapping_events(test_cases): results = [] for events in test_cases: time_points = [] for start, end in events: time_points.append((start, \'start\')) time_points.append((end, \'end\')) time_points.sort() max_overlap = 0 current_overlap = 0 for time, event_type in time_points: if event_type == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 results.append(max_overlap) return results # Parse input and call the function def process_input_and_solve(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 events = [] for _ in range(N): S, E = map(int, lines[index].split()) index += 1 events.append((S, E)) test_cases.append(events) results = max_overlapping_events(test_cases) for result in results: print(result) # Sample input to test the function sample_input = \'\'\'1 5 1 5 2 6 4 7 5 8 3 4\'\'\' process_input_and_solve(sample_input)"},{"question":"Write a program to simulate the stock price changes of a company over a given period of time and calculate the maximum profit that can be made by buying and selling the stock once within that period. The program should take a series of daily stock prices and determine the maximum possible profit achievable by buying on one day and selling on a later day. If there is no profit to be made, the program should return 0. Input The input consists of multiple lines, each containing a list of integers representing the stock prices on consecutive days. The input terminates with EOF. Output For each line, print the maximum profit that can be made by buying and selling once. If no profit can be made, print 0. Examples Input 7 1 5 3 6 4 7 6 4 3 1 Output 5 0 Input 1 2 2 3 7 6 5 2 3 10 6 4 8 1 Output 6 8","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying on one day and selling on a later day. If no profit can be made, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_inputs(input_lines): results = [] for line in input_lines: prices = list(map(int, line.split())) results.append(max_profit(prices)) return results"},{"question":"You are preparing a campaign to advertise a new product and have a list of n social media influencers, each with their number of followers. You want to select exactly k influencers in such a way that the minimum number of followers among the selected influencers is as large as possible. Write a program that, given the list of influencers and their followers, determines the maximum possible minimum number of followers for the selected group of k influencers. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 le k le n le 2 cdot 10^5) — the number of influencers and the number of influencers to select. The second line contains n integers f_1, f_2, dots, f_n (1 le f_i le 10^9), where f_i is the number of followers of the i-th influencer. It\'s guaranteed that the total sum of n over test cases doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, print the maximum possible minimum number of followers among the selected group of k influencers. -----Example----- Input 2 5 3 3 1 4 1 5 4 2 9 2 7 4 Output 3 7","solution":"def max_min_followers(t, test_cases): results = [] for case in test_cases: n, k, followers = case followers.sort(reverse=True) results.append(followers[k-1]) return results"},{"question":"Given a string, s, composed of only lowercase English alphabets, you are required to determine whether you can rearrange the characters to form a palindrome. A palindrome is a string that reads the same forward and backward. Function Description Complete the function canFormPalindrome in the editor below. It should return a string, either \\"YES\\" if it\'s possible to rearrange the characters of s to form a palindrome, or \\"NO\\" otherwise. canFormPalindrome has the following parameter(s): s: a string of lowercase English characters Input Format A single line containing the string s. Constraints 1 ≤ |s| ≤ 10^5 Output Format Print \\"YES\\" if it\'s possible to rearrange the characters of s to form a palindrome, otherwise print \\"NO\\". Sample Input 0 aabb Sample Output 0 YES Explanation 0 The characters of the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\" or \\"baab\\". Sample Input 1 abc Sample Output 1 NO Explanation 1 The characters of the string \\"abc\\" cannot be rearranged to form a palindrome. Sample Input 2 civic Sample Output 2 YES Explanation 2 The string \\"civic\\" is already a palindrome. Hence, it is possible to rearrange \\"civic\\" such that it forms a palindrome.","solution":"def canFormPalindrome(s): Determines if the characters of string `s` can be rearranged to form a palindrome. Parameters: s (str): A string consisting of lowercase English characters Returns: str: \\"YES\\" if it\'s possible to rearrange the characters to form a palindrome, \\"NO\\" otherwise # Counter to keep track of character frequencies from collections import Counter char_count = Counter(s) # Count the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If the odd_count is greater than 1, we cannot form a palindrome return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Rina loves string manipulation problems, and she came up with a new challenge for her friends. She wants to determine whether a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Your task is to write a program that will check if it is possible to rearrange the characters of a given string to make it a palindrome. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 105). The string consists only of lowercase English letters. Output Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Examples Input aabb Output YES Input abc Output NO Note In the first example, the string \\"aabb\\" can be rearranged to form \\"abba\\" which is a palindrome. In the second example, there is no way to rearrange \\"abc\\" to form a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter count = Counter(s) odd_counts = sum(1 for k, v in count.items() if v % 2 != 0) return \\"YES\\" if odd_counts <= 1 else \\"NO\\""},{"question":"In a fantasy world, there is a unique language that uses a special type of dictionary order for its words. The words in this language are sorted by a custom alphabet that can differ from the usual \'a\' to \'z\'. Given a custom alphabet and a list of words, your task is to determine if the list of words is sorted according to the given custom alphabet. Here\'s how the custom order works: each letter in the custom alphabet has a unique position from 1 to 26. Words are compared letter-by-letter, with the first different letter determining the order. If the given list of words follows the custom alphabet order, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains a string of 26 lowercase letters representing the custom alphabet. The second line contains an integer n (1 ≤ n ≤ 10^5) — the number of words. The following n lines each contain a word. Each word consists of lowercase Latin letters and its length does not exceed 100 characters. Output Print \\"YES\\" if the words are sorted according to the custom alphabet. Otherwise, print \\"NO\\". Examples Input zyxwvutsrqponmlkjihgfedcba 3 cba bca abc Output YES Input abcdefghijklmnopqrstuvwxyz 4 apple banana cherry date Output YES Input hgfedcbaijklmnopqrstuvwxyz 3 hi ho ha Output NO Note In the first example, the custom alphabet is the reverse of the usual alphabet. The words \\"cba\\", \\"bca\\", and \\"abc\\" are given, and they are sorted according to the reverse alphabet order. In the second example, the custom alphabet is the same as the usual alphabet. The words are given in lexicographical order and therefore the answer is \\"YES\\". In the third example, the custom alphabet starts with \'h\', and then proceeds with the usual order. The word \\"hi\\" should come after \\"ho\\" if sorted in this custom alphabet, making the list unsorted, so the answer is \\"NO\\".","solution":"def is_sorted_custom_alphabet(custom_alphabet, words): Determines if the list of words is sorted according to the custom alphabet. Parameters: custom_alphabet (str): A string of 26 unique lowercase letters representing the custom alphabet order. words (list of str): A list of words to check for sorting. Returns: str: \\"YES\\" if the words are sorted according to the custom alphabet, otherwise \\"NO\\". # Map each letter to its custom order position order_map = {char: idx for idx, char in enumerate(custom_alphabet)} # Function to compare words according to custom alphabet order def compare_words(word1, word2): for c1, c2 in zip(word1, word2): if order_map[c1] < order_map[c2]: return -1 elif order_map[c1] > order_map[c2]: return 1 return len(word1) - len(word2) # Check if each word is less than or equal to the next word for i in range(len(words) - 1): if compare_words(words[i], words[i + 1]) > 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given an infinite binary tree where each node can have up to two children. The tree structure starts as follows: ``` 1 / 0 1 / / 0 1 0 1 /| | /| | 0 1 10 1 0 1 ``` The pattern continues infinitely, where each node has a left child with value `0` and a right child with value `1`. Your task is to write a function `find_value(n)` that determines the value of the `n-th` node when we traverse the tree in a level-order manner (breadth-first search). # Examples ``` find_value(1) -> returns 1 (the root node) find_value(2) -> returns 0 (left child of the root) find_value(3) -> returns 1 (right child of the root) find_value(4) -> returns 0 (left child of the node 0 at position 2) find_value(5) -> returns 1 (right child of the node 0 at position 2) ``` # Constraints * 1 ≤ n ≤ 10^18 Good luck!","solution":"def find_value(n): Given an infinite binary tree, this function determines the value of the nth node when traversed in level-order. Args: n: the position of the node in level-order traversal (1-based index) Returns: int: the value of the nth node (0 or 1) if n == 1: return 1 path = [] while n > 1: path.append(n) n //= 2 path.reverse() value = 1 for p in path: if p % 2 == 0: value = 0 else: value = 1 return value"},{"question":"You have been given a sequence of numbers, and you need to find the largest sum of a contiguous subarray that has at least `k` elements. The subarray has to contain consecutive elements from the original array. You are to write a function that takes in a list of integers and an integer `k`, and returns the largest sum of a contiguous subarray with at least `k` elements. -----Input----- - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100000), where `n` is the number of elements in the array, and `k` is the minimum length of the subarray. - The second line contains `n` integers `a_1, a_2, ..., a_n` (-10^5 ≤ a_i ≤ 10^5), which are the elements of the array. -----Output----- Return a single integer, the largest sum of a contiguous subarray with at least `k` elements. -----Examples----- Input 8 3 1 -2 3 4 -1 2 1 -5 Output 9 Explanation The subarray [3, 4, -1, 2, 1] has the largest sum of 9, and it contains 5 elements which is at least 3. Input 5 2 -3 1 -1 2 -1 Output 2 Explanation The subarray [1, -1, 2] or [2, -1] both give the largest sum of 2, and have at least 2 elements.","solution":"def max_sum_with_min_k_elements(n, k, arr): # Calculate the prefix sum array prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] max_sum = float(\'-inf\') # Iterate over each possible end of the subarray for end in range(k, n + 1): # Iterate over each possible start of the subarray that ends at \'end\' for start in range(end - k, -1, -1): # Calculate the sum of the subarray arr[start:end] current_sum = prefix_sum[end] - prefix_sum[start] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A non-profit organization is organizing a coding marathon to help students improve their programming skills. Each student is required to participate individually, and they must submit a certain number of coding challenges by the end of the marathon. The organization wants to ensure that every challenge gets fair attention, so no challenge should be submitted by more than a specified number of students. Your task is to help the organization determine the maximum number of unique coding challenges that can be accommodated if the given constraints are to be followed. If a challenge has already reached the maximum number of allowable submissions, no more students can submit that challenge. -----Input----- The first line consists of two integers 1 le S, C le 1000, the number of students and the number of coding challenges respectively. Then follow S lines, each starting with the name of the i:th student. Then follows an integer N_ i, the number of challenges that the i:th student has decided to submit. Then follow N_ i coding challenge titles on the same line. After the students\' information, there is one additional integer M on a new line, representing the maximum number of submissions each challenge can receive. The coding challenge titles and student names consist solely of alphanumeric characters, without spaces, and they both have between 1 and 30 characters. -----Output----- Output should be a single number U, representing the maximum number of unique coding challenges that can be accommodated. -----Examples----- Sample Input: 3 3 alice 2 challengeA challengeB bob 1 challengeA charlie 1 challengeC 2 Sample Output: 3","solution":"def max_unique_challenges(S, C, student_info, M): challenge_count = {} for info in student_info: student_data = info.split() challenges = student_data[2:] for challenge in challenges: if challenge not in challenge_count: challenge_count[challenge] = 0 if challenge_count[challenge] < M: challenge_count[challenge] += 1 unique_challenges = len(challenge_count) return unique_challenges"},{"question":"The World Land Survey Organization is planning a new project to map the land parcels in a city. Each parcel is represented as a grid cell in a 2D grid. The organization is particularly interested in the largest rectangular area of contiguous parcels that have the same soil type. You are given details of the soil type for each parcel in the grid. Your task is to determine the largest rectangular area (in terms of the number of cells) that can be formed by using only cells of the same soil type. ------ Input ------ The first line contains two integers R and C, the number of rows and columns in the grid. The next R lines each contain C space-separated integers representing the soil type of each cell in the grid. ------ Output ------ Print a single integer representing the largest rectangular area of contiguous parcels that have the same soil type. ------ Constraints ------ 1 ≤ R, C ≤ 200 0 ≤ text{soil type} ≤ 100 ----- Sample Input 1 ------ 4 5 1 2 2 3 1 1 2 2 3 1 1 2 2 3 1 1 1 1 1 1 ----- Sample Output 1 ------ 6","solution":"def largest_rectangle(grid): Determines the largest rectangular area (in terms of the number of cells) that can be formed by using only cells of the same soil type in a 2D grid. Args: grid (List[List[int]]): A 2D list representing the grid with soil types. Returns: int: The area of the largest rectangle. if not grid: return 0 R = len(grid) C = len(grid[0]) max_area = 0 def histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area for soil_type in range(101): heights = [0] * C for r in range(R): for c in range(C): if grid[r][c] == soil_type: heights[c] += 1 else: heights[c] = 0 max_area = max(max_area, histogram_area(heights)) return max_area # Sample Input R, C = 4, 5 grid = [ [1, 2, 2, 3, 1], [1, 2, 2, 3, 1], [1, 2, 2, 3, 1], [1, 1, 1, 1, 1] ] # Sample Output print(largest_rectangle(grid)) # Output: 6"},{"question":"Tommy the Turtle likes to play with binary trees. He has a tree with n nodes, where each node is labeled with a unique integer from 1 to n. Tommy wants to find out the number of nodes in the subtree of a specific node. Can you help Tommy? Given a binary tree with n nodes, you have to process m queries. Each query gives you a node and you must return the number of nodes in its subtree, including the node itself. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. The next line contains an integer m (1 ≤ m ≤ 10^5), the number of queries. Each of the next m lines contains an integer x (1 ≤ x ≤ n), the node for which you need to find the size of its subtree. Output Print m integers, each representing the number of nodes in the subtree of the respective node given in the queries. SAMPLE INPUT 5 1 2 1 3 3 4 3 5 3 1 3 4 SAMPLE OUTPUT 5 3 1","solution":"class TreeNode: def __init__(self, node_id): self.node_id = node_id self.children = [] def build_tree(n, edges): nodes = [TreeNode(i) for i in range(n + 1)] for u, v in edges: nodes[u].children.append(nodes[v]) nodes[v].children.append(nodes[u]) return nodes def calculate_subtree_sizes(node, parent): count = 1 for child in node.children: if child != parent: count += calculate_subtree_sizes(child, node) node.subtree_size = count return count def subtree_sizes(n, edges, m, queries): nodes = build_tree(n, edges) root = nodes[1] calculate_subtree_sizes(root, None) results = [nodes[query].subtree_size for query in queries] return results"},{"question":"In a distant kingdom, there is a unique financial transaction system. Any transfer amount can be represented as a combination of specific coin values. The royal treasury wants to ensure that every citizen understands how specific amount representations can be achieved using these coin values. Given a target amount `n` and a list of coin values, determine the minimum number of coins required to make the amount. If it is not possible to make the target amount with the given coin values, return -1. ---Input--- The first line contains an integer `n` (1 ≤ n ≤ 10^4) - the target amount. The second line contains a list of integers representing the coin values. Each integer `ci` (1 ≤ ci ≤ 10^4) in the list (1 ≤ |list| ≤ 1000) represents a coin denomination. ---Output--- Print a single integer - the minimum number of coins required to make the target amount. If it is not possible, print -1. ---Examples--- Input 11 [1, 5, 7] Output 3 Input 9 [3, 6, 9] Output 1 Input 4 [5] Output -1 ---Explanation--- In the first example, the minimum number of coins required to make 11 is 3 (7+1+1+1). In the second example, the minimum number of coins required to make 9 is 1 (9). In the third example, it is not possible to make 4 with a coin of 5, hence the output is -1.","solution":"def min_coins(n, coin_values): Finds the minimum number of coins required to make the amount n with the given coin values. If it is not possible to make the amount, returns -1. dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for coin in coin_values: for i in range(coin, n + 1): if dp[i - coin] + 1 < dp[i]: dp[i] = dp[i - coin] + 1 return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"In a bustling metropolis, the Mayor wants to optimize the city\'s traffic lights to reduce congestion. The city has multiple main roads, and each road has multiple intersections with traffic lights. A traffic light can be either red or green at any point in time. The mayor wants to synchronize these traffic lights such that no vehicle has to stop more than once on any main road as they travel from one end to the other. You are tasked with determining if it is possible to configure the traffic lights on each main road so that a vehicle can pass through without stopping more than once. The city\'s traffic department provides you with the number of main roads and the sequence of traffic lights for each road. Each traffic light is represented by a 0 or 1, where 0 means red and 1 means green. -----Input----- The first line of input contains a single integer M (1 leq M leq 1000), the number of main roads. The next M lines each contain a string of 0s and 1s representing the state of the traffic lights on one of the main roads. The length of each string is between 1 and 1000 (inclusive). -----Output----- Output \'YES\' if it is possible to configure the traffic lights on each main road such that vehicles can pass through without stopping more than once. Otherwise, output \'NO\'. -----Examples----- Sample Input 1: 2 101010 111 Sample Output 1: YES Sample Input 2: 3 110 001 101 Sample Output 2: NO","solution":"def can_synchronize_traffic_lights(road_signals): Determines if it is possible to synchronize traffic lights for each road so that vehicles can pass through without stopping more than once. Args: road_signals (List[str]): List of strings where each string contains \'0\'s and \'1\'s representing traffic lights on a main road. Returns: str: \'YES\' if synchronization is possible on all roads, else \'NO\'. for signals in road_signals: if \'00\' in signals: return \'NO\' return \'YES\'"},{"question":"You are given an array A of length N, which contains distinct integers. You need to find the length of the shortest subarray (continuous segment) of A such that the sum of the elements in the subarray is greater than or equal to a given integer S. Constraints * 1 leq N leq 10^5 * 1 leq A[i] leq 10^4 * 1 leq S leq 10^9 Input Input is given from Standard Input in the following format: N S A_1 A_2 A_3 ... A_N Output Print a single integer representing the length of the shortest subarray with sum (geq) S. If no such subarray exists, print -1. Examples Input 5 15 1 2 3 4 5 Output 5 Input 6 11 1 2 3 4 5 6 Output 2","solution":"def min_subarray_length(N, S, A): Returns the length of the shortest subarray with sum >= S. If no such subarray exists, returns -1. min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(N): current_sum += A[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= A[left] left += 1 return min_length if min_length != float(\'inf\') else -1 # Example usage: # N = 6 # S = 11 # A = [1, 2, 3, 4, 5, 6] # print(min_subarray_length(N, S, A)) # Output: 2"},{"question":"The City Library is planning an online book rental system. Each member is allowed to borrow books for a limited number of days. The registration system keeps a log of all borrowed books by the members. Each member can borrow multiple books, with different due dates. Given the logs for a member, compute the earliest date by which all books must be returned after borrowing. Each log entry consists of the current date, the number of days a book can be borrowed, and the total number of books borrowed by the member. Input Format: - The first line contains T, the number of test cases. - Each of the following T lines contains the three space-separated integers: current_date, borrow_days, and num_books respectively. Output Format: T lines indicating the latest return date for each member. Constraints: 1 ≤ T ≤ 100 1 ≤ current_date, borrow_days ≤ 105 1 ≤ num_books ≤ 103 SAMPLE INPUT 2 5 10 3 2 15 2 SAMPLE OUTPUT 15 17","solution":"def compute_latest_return_date(test_cases): Computes the latest return date for each member based on the borrow logs. :param test_cases: List of tuples where each tuple contains: (current_date, borrow_days, num_books) :return: List of the latest return dates for each member. results = [] for current_date, borrow_days, num_books in test_cases: latest_return_date = current_date + borrow_days results.append(latest_return_date) return results # Function to simplify the reading of the input format and to return results in the required format def process_input_output(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): current_date, borrow_days, num_books = map(int, lines[i].split()) test_cases.append((current_date, borrow_days, num_books)) result = compute_latest_return_date(test_cases) return \\"n\\".join(map(str, result))"},{"question":"Given an integer, say N, Chef has been challenged to determine the greatest integer x such that x^2 is less than or equal to N. -----Input:----- - The first line will contain the number of test cases, T. Then the test cases follow. - Each test case contains a single line of input, the integer N. -----Output:----- For each test case, output the greatest integer x such that x^2 is ≤ N. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^9 -----Sample Input:----- 3 10 25 26 -----Sample Output:----- 3 5 5 -----EXPLANATION:----- For 1) The greatest integer x such that x^2 is less than or equal to 10 is 3 (since 3^2 = 9 < 10 and 4^2 = 16 > 10). For 2) The greatest integer x such that x^2 is less than or equal to 25 is 5 (since 5^2 = 25 ≤ 25). For 3) The greatest integer x such that x^2 is less than or equal to 26 is 5 (since 5^2 = 25 < 26 and 6^2 = 36 > 26).","solution":"import math def largest_integer_x(T, test_cases): results = [] for N in test_cases: x = int(math.sqrt(N)) results.append(x) return results"},{"question":"You are given a string str. You need to find the longest substring without repeating characters. Example 1: Input: str = \\"abcabcbb\\" Output: \\"abc\\" Example 2: Input: str = \\"bbbbb\\" Output: \\"b\\" Your Task: You don\'t need to input anything. Complete the function longestUniqueSubstring() which takes a string str as input parameter and returns the longest substring with all distinct characters. Constraints: 1 <= |str| <= 1000","solution":"def longestUniqueSubstring(s): Returns the longest substring with all distinct characters. n = len(s) longest = \\"\\" char_index_map = {} start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end if end - start + 1 > len(longest): longest = s[start:end + 1] return longest"},{"question":"Given an integer array `nums` and an integer `k`, return true if there are two distinct indices `i` and `j` in the array such that `nums[i]` is equal to `nums[j]` and the difference between `i` and `j` is at most `k`. -----Constraints----- - 1 <= nums.length <= 10^5 - -10^9 <= nums[i] <= 10^9 - 0 <= k <= 10^5 -----Input----- The input will be provided from Standard Input in the following format: ``` n nums[0] nums[1] ... nums[n-1] k ``` Where `n` is the length of the array `nums`. -----Output----- Print `true` if the condition is satisfied, otherwise print `false`. -----Sample Input----- 6 1 2 3 1 2 3 2 -----Sample Output----- true Explanation: - There are two `1`s in the array with indices 0 and 3. The difference between the indices is 3, which is greater than 2. - There are two `2`s in the array with indices 1 and 4. The difference between the indices is 3, which is also greater than 2. - There are two `3`s in the array with indices 2 and 5. The difference between the indices is 3, which is still greater than 2. - Thus, the condition is satisfied.","solution":"def contains_nearby_duplicate(nums, k): Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] is equal to nums[j] and the difference between i and j is at most k. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) k = int(data[n+1]) print(\\"true\\" if contains_nearby_duplicate(nums, k) else \\"false\\")"},{"question":"You are given an array of integers that contains both positive and negative numbers. Your task is to determine whether there exists a subset of these elements that sums to zero. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the size of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output on a single line YES (without quotes) if there exists a subset that sums to zero, and NO otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings YeS, YEs, yes and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 -1000 ≤ A[i] ≤ 1000 ------ Sample Input 1 ------ 3 4 1 2 -3 4 5 5 6 7 8 9 3 1 -1 2 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ - Test case 1: The subset {1, 2, -3} sums to zero. - Test case 2: There is no subset that sums to zero. - Test case 3: The subset {1, -1} or {2, -1, -1} sums to zero.","solution":"def subset_sums_to_zero(arr): Determines if there exists a subset of array arr that sums to zero. def has_zero_sum_subset(nums): n = len(nums) sub_sum = set() sub_sum.add(0) for num in nums: new_sums = set() for s in sub_sum: new_sum = s + num if new_sum == 0: return True new_sums.add(new_sum) sub_sum = sub_sum.union(new_sums) return False return has_zero_sum_subset(arr) def process_test_cases(test_cases): results = [] for t in test_cases: N, arr = t if subset_sums_to_zero(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is organizing a special marathon event and she wants to create a unique experience for all participants. The event takes place along a straight road with several checkpoints. Each checkpoint has a fun activity that participants can engage in. The special aspect of Alice\'s marathon is that it adheres to a specific sequence of checkpoint distances designed to test the participants\' stamina evenly. The road is divided into n segments, each with a corresponding difficulty level di (1 ≤ i ≤ n) at checkpoint i. The marathon event is defined to be thrilling if the differential between the difficulty levels of consecutive checkpoints forms a thrilling sequence. Specifically, a thrilling sequence means that the absolute difference between the difficulty levels of consecutive checkpoints, considering their indices pairs (1,2), (2,3), ..., (n-1,n), is equal to a given threshold k (i.e., |di - di+1| = k). Given the current difficulty levels of checkpoints, determine how many checkpoints\' difficulty levels need to be modified to form a thrilling sequence as per the criteria mentioned above. You can change the difficulty level of any checkpoint to any positive integer. # Input Format - The first line contains two integers n (2 ≤ n ≤ 105) and k (1 ≤ k ≤ 105), the number of checkpoints and the threshold, respectively. - The second line contains n integers di (1 ≤ di ≤ 105), representing the difficulty levels of the checkpoints. # Output Format - Output a single integer which is the minimum number of changes needed to make the sequence thrilling. # Example Input ``` 5 2 3 5 1 7 9 ``` Output ``` 2 ``` Input ``` 4 3 1 4 7 10 ``` Output ``` 0 ``` # Explanation In the first example, the sequence `[3, 5, 1, 7, 9]` does not have a differential of exactly 2 between all consecutive checkpoints. To make the sequence thrilling, the minimum changes needed could be changing the sequence to `[3, 5, 7, 5, 3]`, resulting in 2 changes. Hence the output is `2`. In the second example, the sequence `[1, 4, 7, 10]` already meets the requirement, so no changes are needed, hence the output is `0`.","solution":"def min_changes_to_thrilling_sequence(n, k, d): This function returns the minimum number of changes needed to make the sequence a thrilling sequence where the absolute difference between consecutive elements is k. changes = 0 for i in range(n - 1): if abs(d[i] - d[i + 1]) != k: changes += 1 return changes"},{"question":"Write a function that takes an integer array as input and returns an array with all the prime numbers replaced by their squares. For example: Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [4, 9, 4, 25, 6, 49, 8, 9, 10] Note: The function should identify prime numbers and replace them with their squares only. Non-prime numbers should remain unchanged in the array.","solution":"import math def is_prime(n): Checks if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def replace_primes_with_squares(arr): Replaces all prime numbers in the array with their squares. return [x**2 if is_prime(x) else x for x in arr]"},{"question":"Write a function that takes a list of integers and returns a list of booleans indicating whether each integer is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: arr = [2, 3, 4, 5, 6] Output: [True, True, False, True, False] Explanation: 2 is a prime number. 3 is a prime number. 4 is not a prime number (it is divisible by 2). 5 is a prime number. 6 is not a prime number (it is divisible by 2 and 3). Example 2: Input: arr = [10, 13, 17, 19, 20] Output: [False, True, True, True, False] Explanation: 10 is not a prime number (it is divisible by 2 and 5). 13 is a prime number. 17 is a prime number. 19 is a prime number. 20 is not a prime number (it is divisible by 2, 4, 5, and 10). Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPrimeList() which takes the list arr[] as input and returns a list of booleans indicating whether each element is prime. Expected Time Complexity: O(N * sqrt(M)), where N is the number of elements in the array and M is the maximum value in the array. Expected Space Complexity: O(N) Constraints: 1 <= len(arr) <= 100 2 <= arr[i] <= 10^5","solution":"import math def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def isPrimeList(arr): Returns a list of booleans indicating whether each integer in the input list is a prime number. return [is_prime(num) for num in arr]"},{"question":"Write a function that parses a block of HTML and returns a list of all the HTML tag names, excluding those inside comments, or returns an empty list if no tags are found. Input: A string representing an HTML document. Output: A list of the tag names (as strings) found in the HTML document, excluding any that appear within HTML comments. Sample: ``` parse_html_tags(\'<html><body><!-- This is a comment --><p>Paragraph</p></body></html>\') ``` Output: ``` [\'html\', \'body\', \'p\'] ``` HTML tag: any tag enclosed in < > Sample: ``` <html> <body> <p>Text</p> </body> </html> ``` HTML comment: any text enclosed in <!-- --> Sample: ``` <!-- This is a comment --> ``` Note: 1. Handle self-closing tags. ``` <meta charset=\\"UTF-8\\" /> ``` 2. Tags with attributes should be processed by tag name only. ``` <a href=\\"https://example.com\\">Link</a> ``` 3. Nested comments and tags. ``` <div><!-- A comment <!-- Nested comment --> End of comment --><span>Text</span></div> ``` Output: ``` [\'div\', \'span\'] ```","solution":"import re def parse_html_tags(html): Parses a block of HTML and returns a list of all the HTML tag names, excluding those inside comments. # Remove HTML comments without_comments = re.sub(r\'<!--.*?-->\', \'\', html, flags=re.DOTALL) # Find all HTML tags tags = re.findall(r\'<s*(w+)\', without_comments) return tags"},{"question":"Given a string `s`, you need to find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. Input: The input consists of a single line containing a string `s`. Output: Output the length of the longest substring without repeating characters. Constraints: - 1 ≤ length of `s` ≤ 10^5 - `s` contains only English letters, digits, symbols, and spaces. Examples: Input: abcabcbb Output: 3 Explanation: The longest substring without repeating characters is \\"abc\\", which has a length of 3. Input: bbbbb Output: 1 Explanation: The longest substring without repeating characters is \\"b\\", with the length of 1. Input: pwwkew Output: 3 Explanation: The longest substring without repeating characters is \\"wke\\", which has a length of 3. Note that \\"pwke\\" is a subsequence, not a substring. Note: Ensure that the solution efficiently handles the constraints, hinting towards an O(n) solution with a sliding window approach.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} start = max_length = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of n integers. Your task is to rearrange the elements of the array such that the difference between any two consecutive elements is minimized. Specifically, you need to find the minimum possible value of the maximum difference between any two consecutive elements after rearranging the array. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (2 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, print one integer — the minimum possible value of the maximum difference between any two consecutive elements in the rearranged array. -----Examples----- Input 3 4 4 2 1 3 3 10 20 30 2 1 1000000000 Output 1 10 999999999 -----Note----- In the first test case, you can rearrange the array as [1, 2, 3, 4] or [2, 1, 3, 4], both achieving the same minimal maximum difference of 1. In the second test case, the array can be rearranged as [10, 20, 30] or [30, 20, 10], resulting in a minimal maximum difference of 10. In the third test case, there are only two elements, and the difference between them is 999999999.","solution":"def minimize_max_difference(test_cases): results = [] for test_case in test_cases: n, array = test_case array.sort() min_max_diff = float(\'inf\') for i in range(1, n): min_max_diff = min(min_max_diff, array[i] - array[i - 1]) results.append(min_max_diff) return results"},{"question":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. Input Format The first line of input contains an integer t, the number of test cases. Each of the next t lines contains an integer n followed by n space-separated integers, which are the elements of the array nums. Output Format For each test case, output each unique triplet in a new line. The triplets should be printed in ascending order of the first element; if the first elements are the same, then in ascending order of the second element, and so on. Constraints 1≤t≤10 3≤n≤3000 -10^5 ≤ nums[i] ≤ 10^5 SAMPLE INPUT 2 6 -1 0 1 2 -1 -4 5 0 1 1 2 3 SAMPLE OUTPUT -1 -1 2 -1 0 1 No triplets found Explanation Test case 1: The two triplets that sum up to 0 and satisfy the conditions are [-1, -1, 2] and [-1, 0, 1]. Test case 2: There are no triplets that satisfy the condition.","solution":"def three_sum(nums): Returns a list of all unique triplets that sum up to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result def process_test_cases(t, test_cases): results = [] for n, nums in test_cases: triplets = three_sum(nums) if not triplets: results.append(\\"No triplets found\\") else: for triplet in triplets: results.append(\\" \\".join(map(str, triplet))) return results"},{"question":"Given an integer array of size N, check if it forms a strictly increasing sequence by either increasing or decreasing exactly one element of the array. Implement a function: ```python def can_form_increasing_sequence(arr: List[int]) -> bool: # Your code here ``` **Input**: - An integer N (1 ≤ N ≤ 10^5) - An array arr of size N (1 ≤ arr[i] ≤ 10^9) **Output**: - Return `True` if it\'s possible to make the array strictly increasing by modifying just one element, otherwise return `False`. **Example**: ```python print(can_form_increasing_sequence([1, 2, 10, 5, 6])) # Output: True print(can_form_increasing_sequence([1, 2, 10, 10, 6])) # Output: False print(can_form_increasing_sequence([1, 5, 3])) # Output: True print(can_form_increasing_sequence([1, 2, 3, 4, 5])) # Output: True ```","solution":"from typing import List def can_form_increasing_sequence(arr: List[int]) -> bool: Returns True if the array can be made strictly increasing by modifying at most one element, otherwise False. count = 0 index = -1 for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: count += 1 index = i if count > 1: return False if count == 0: return True # Check if modifying the element at index or at index - 1 can solve the problem if index == 1 or index == len(arr) - 1: return True if arr[index - 1] < arr[index + 1] or arr[index - 2] < arr[index]: return True return False"},{"question":"In a distant city called Matrixville, there are N communities. Each community is represented by a node in a directed graph where the nodes are numbered from 1 to N. Each directed edge between two nodes represents a path from one community to another. The citizens of Matrixville need to organize a grand parade starting from any community such that every community is visited exactly once. Your task is to determine if it is possible to start from a specific node and visit all the communities exactly once, forming what is known as a Hamiltonian Path. INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two sections: - The first section starts with an integer N, the number of nodes, followed by an integer M, the number of directed edges. - The next M lines each contain two integers U and V indicating a directed edge from node U to node V. OUTPUT: For each test case, output \\"YES\\" if a Hamiltonian Path exists, otherwise output \\"NO\\". CONSTRAINTS: 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1) 1 ≤ U, V ≤ N SAMPLE INPUT: 2 4 6 1 2 1 3 1 4 2 3 3 4 2 4 3 3 1 2 2 3 3 1 SAMPLE OUTPUT: YES YES Explanation: For the first test case: Graph: 1 -> 2 1 -> 3 1 -> 4 2 -> 3 3 -> 4 2 -> 4 One possible Hamiltonian Path is 1 -> 2 -> 3 -> 4 For the second test case: Graph forms a cycle: 1 -> 2 2 -> 3 3 -> 1 One possible Hamiltonian Path is 1 -> 2 -> 3","solution":"def hamiltonian_path_exists(n, edges): from collections import defaultdict # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # To store the memoization of visited nodes def dfs(node, visited_count, visited): if visited_count == n: return True for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True if dfs(neighbor, visited_count + 1, visited): return True visited[neighbor] = False return False for start_node in range(1, n + 1): visited = [False] * (n + 1) visited[start_node] = True if dfs(start_node, 1, visited): return \\"YES\\" return \\"NO\\" def process_input(T, test_cases): results = [] for case in test_cases: n, m = case[0] edges = case[1] result = hamiltonian_path_exists(n, edges) results.append(result) return results"},{"question":"A robotics company is working on developing autonomous navigation software for their new line of robots. To help with the pathfinding component of the software, they decided to implement the Dijkstra algorithm to find the shortest path in a weighted graph. Given a weighted graph and two nodes, A and B, the software should determine the shortest path from node A to node B. Input The first line of input contains an integer N, the number of nodes in the graph. The second line of input contains an integer M, the number of edges in the graph. The following M lines each contain three integers, u, v, and w, representing an edge from node u to node v with weight w. The next line contains two integers, A and B, representing the starting and ending nodes, respectively. 0 < N ≤ 1000 0 < M ≤ 10000 1 ≤ w ≤ 1000 Output Output a single integer, the minimum distance from node A to node B. If there is no path from A to B, output -1. Example Input: 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 5 1 1 5 Output: 5","solution":"import heapq def dijkstra(n, edges, start, end): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) min_heap = [(0, start)] # (distance, node) distances = {i: float(\'infinity\') for i in range(1, n + 1)} distances[start] = 0 visited = set() while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 if distances[end] == float(\'infinity\') else distances[end]"},{"question":"A fashion designer wishes to launch a new clothing collection and needs to decide on the sizes to produce. Suppose you have a list of the sizes of customers who attended a recent fashion show. The designer wants to minimize the range of sizes to produce while ensuring that at least a certain percentage of customers can find their size within the range. Write a function that takes an array of integer sizes and an integer percentage (between 0 and 100), and returns the smallest possible size range `[min_size, max_size]` that includes at least the given percentage of sizes from the array. Input - The first line contains two integers n and p where n (1 ≤ n ≤ 1000) is the number of customers and p (1 ≤ p ≤ 100) is the percentage of customers that should be covered by the size range. - The second line contains n integers representing the sizes, each size is an integer between 1 and 1000. Output - Output two integers, `min_size` and `max_size` representing the smallest possible size range that includes at least the given percentage of sizes. SAMPLE INPUT 10 50 8 1 6 3 5 9 2 7 4 10 SAMPLE OUTPUT 1 5 Explanation Given the percentage `p` is 50, at least 50% of the 10 sizes (i.e., at least 5 sizes) need to be within the range. The smallest range covering at least 50% of the sizes is `[1, 5]` which contains the sizes `[1, 2, 3, 4, 5]`. Input Constraints are 1 ≤ n ≤ 1000 1 ≤ p ≤ 100 1 ≤ sizes[i] ≤ 1000","solution":"def smallest_size_range(sizes, percentage): This function finds the smallest possible range [min_size, max_size] that includes at least the given percentage of sizes from the array. Parameters: sizes (list): A list of integers representing the sizes of customers. percentage (int): The percentage of customers to be covered by the size range. Returns: tuple: A tuple containing two integers representing the smallest possible size range. # Number of customers to be covered sizes.sort() n = len(sizes) cover_count = (n * percentage + 99) // 100 # Using ceiling division to cover cases where percentage is not an integer min_range = float(\'inf\') min_size = max_size = -1 for i in range(n - cover_count + 1): current_range = sizes[i + cover_count - 1] - sizes[i] if current_range < min_range: min_range = current_range min_size, max_size = sizes[i], sizes[i + cover_count - 1] return min_size, max_size"},{"question":"You are given an array of integers. Your task is to find whether it is possible to partition this array into two non-empty parts such that the sum of elements in both parts is equal. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains an integer n (2 le n le 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. -----Output----- For each test case, print YES if it is possible to partition the array into two non-empty parts with equal sums, or NO otherwise. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as a positive answer). -----Examples----- Input 3 4 1 5 11 5 4 1 2 3 5 5 3 3 3 4 5 Output YES NO YES -----Note----- In the first test case, the array can be partitioned into [1, 5, 5] and [11]. In the second test case, it is not possible to partition the array into two parts with equal sums. In the third test case, the array can be partitioned into [3, 3, 4] and [3, 5].","solution":"def can_partition_equal_sum(arr): total_sum = sum(arr) # If the total sum is odd, it cannot be partitioned into equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] # Initialize for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): current = arr[i-1] for j in range(1, target + 1): if j < current: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-current] return \\"YES\\" if dp[n][target] else \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = can_partition_equal_sum(arr) results.append(result) return results"},{"question":"You are given a rectangular grid of size MxN initially filled with zeros. You need to perform a series of operations that will update parts of the grid. For each operation, you are given four integers `x1`, `y1`, `x2`, and `y2` which represents the coordinates of a sub-grid within the grid. The operation increments all the values in the sub-grid from `(x1, y1)` to `(x2, y2)` by 1. After performing all operations, you need to determine and print the final state of the grid. Input: The first line contains two integers M and N, the dimensions of the grid. The second line contains an integer K, the number of operations. Each of the next K lines contains four integers `x1`, `y1`, `x2`, and `y2` that describe a sub-grid to be incremented. Output: Output the final grid\'s state after all operations are applied, with each row on a new line and each value separated by a space. Constraints: 1 ≤ M, N ≤ 1000 0 ≤ x1 ≤ x2 < M 0 ≤ y1 ≤ y2 < N 1 ≤ K ≤ 10^5 Note: The given coordinates are zero-indexed. SAMPLE INPUT 3 3 2 0 0 1 1 1 1 2 2 SAMPLE OUTPUT 1 1 0 1 2 1 0 1 1 Explanation For the first operation, the sub-grid from `(0, 0)` to `(1, 1)` is incremented by 1: 1 1 0 1 1 0 0 0 0 For the second operation, the sub-grid from `(1, 1)` to `(2, 2)` is incremented by 1: 1 1 0 1 2 1 0 1 1","solution":"def update_grid(M, N, operations): Updates an MxN grid based on a series of increment operations. :param M: Number of rows in the grid. :param N: Number of columns in the grid. :param operations: A list of operations where each operation is a tuple (x1, y1, x2, y2). Each operation increments the values in the sub-grid from (x1, y1) to (x2, y2) by 1. :return: The updated grid. # Initialize the grid with zeroes grid = [[0] * N for _ in range(M)] # Perform the operations for x1, y1, x2, y2 in operations: for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): grid[i][j] += 1 return grid"},{"question":"Given a list of integers, your task is to sort this list using the bucket sort algorithm and print the sorted list. Bucket sort is mainly useful when the input is uniformly distributed over a range. The basic idea to perform the bucket sort is as follows: 1. Create n empty buckets (or lists). 2. Traverse the input list and put each element in the corresponding bucket. 3. Sort the individual buckets using any suitable sorting algorithm. 4. Concatenate all the sorted buckets to get the sorted list. Function Description Complete the `bucket_sort` function in the editor below. `bucket_sort` has the following parameter(s): - `list arr`: a list of integers Returns - `list`: a sorted list of integers Input Format A single line of input containing a space-separated list of integers. Constraints - 1 leq len(arr) leq 10^3 - 0 leq arr[i] leq 10^3 for each arr[i] Sample Input [42, 32, 33, 52, 37, 47, 51] Sample Output [32, 33, 37, 42, 47, 51, 52] Explanation: - The input list is `[42, 32, 33, 52, 37, 47, 51]`. - Create an appropriate number of buckets and distribute elements. - For example, for 7 elements with values ranging from 32 to 52, you might create 7 buckets. - Place each element in its appropriate bucket. - Sort the individual buckets. - Concatenate all the sorted buckets to get the sorted list: `[32, 33, 37, 42, 47, 51, 52]`.","solution":"def bucket_sort(arr): Sorts a list of integers using the bucket sort algorithm. if len(arr) == 0: return arr # Find maximum value to know the range of the input max_value = max(arr) # Initialize buckets num_buckets = len(arr) buckets = [[] for _ in range(num_buckets)] # Distribute input array values into buckets for num in arr: index = num * num_buckets // (max_value + 1) buckets[index].append(num) # Sort each bucket and concatenate the result sorted_array = [] for bucket in buckets: sorted_array.extend(sorted(bucket)) return sorted_array"},{"question":"In a game, players can place stones on a grid where certain cells have traps. The objective is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) while avoiding traps. The player can only move horizontally or vertically to adjacent cells. -----Input----- The first line contains two integers, N (1 le N le 100) and M (1 le M le 100), the dimensions of the grid. The next N lines each contain M characters: either ‘.’ representing an empty cell or ‘#’ representing a trap. -----Output----- A single line containing the length of the shortest path from (0, 0) to (N-1, M-1), or “IMPOSSIBLE” if no such path exists. -----Examples----- Sample Input: 5 5 ..... .#. ..#.. . ..... Sample Output: 8 Sample Input: 3 3 .#. # .#. Sample Output: IMPOSSIBLE","solution":"from collections import deque def shortest_path(N, M, grid): Finds the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) in a grid. Avoids cells marked as traps (\'#\'). Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. grid (List[List[str]]): 2D grid containing \'.\' for empty cells and \'#\' for traps. Returns: int or str: The length of the shortest path or \\"IMPOSSIBLE\\" if no such path exists. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"IMPOSSIBLE\\" directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == N-1 and col == M-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return \\"IMPOSSIBLE\\""},{"question":"Write a function to determine if a given string contains all the letters of the alphabet (case-insensitive). The output should be a boolean value: `True` if the string contains every letter of the alphabet at least once, and `False` otherwise. For example: - Input: \\"The quick brown fox jumps over a lazy dog\\" - Output: `True` - Input: \\"Hello world\\" - Output: `False` Note: The string may contain punctuation, spaces, and numbers, but only the letters are relevant for checking the condition.","solution":"def contains_all_alphabets(s): Returns True if the string \'s\' contains all the letters of the alphabet (case-insensitive), False otherwise. s = s.lower() alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') s_set = set(c for c in s if c.isalpha()) return alphabet_set.issubset(s_set)"},{"question":"\\"Tim, a treasure hunter, has found a map to a forgotten island where unimaginable wealth is said to be hidden. The island is represented as a grid of cells, each cell being either passable land or impassable water. Tim\'s goal is to determine the largest connected area of land on the island. If there are multiple areas of the same size, any one of them will suffice. The island map is provided as a binary matrix, where `1` represents a land cell and `0` represents a water cell. Two land cells are considered connected if they are adjacent horizontally or vertically. Note that cells connected diagonally are not considered connected. Tim needs your help to find the size of the largest connected area of land. An area’s size is determined by the number of land cells in that area. -----Input----- The input is given as follows: - The first line contains two space-separated integers R and C (1 leq R, C leq 100), representing the number of rows and columns in the island map. - The next R lines each contain C space-separated integers (either 0 or 1), representing the island map. -----Output----- Output a single integer representing the size of the largest connected area of land on the island. -----Examples----- Sample Input: 4 5 1 0 1 1 0 1 1 0 0 1 0 0 1 1 0 1 0 0 1 1 Sample Output: 4 Explanation: In the given example, the largest connected area of land is composed of 4 cells. One possible area consists of the cells in the pattern: 1 1 1 1 Another viable area is the cells: 1 1 0 1 Both of these have 4 land cells.","solution":"def largest_connected_area(grid): def dfs(x, y): if x < 0 or x >= R or y < 0 or y >= C or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size R = len(grid) C = len(grid[0]) if R > 0 else 0 max_area = 0 for i in range(R): for j in range(C): if grid[i][j] == 1: max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"You are managing traffic lights at an intersection with n vehicles approaching from different directions. Each vehicle has a unique direction it is coming from, which is represented as a string containing the directions \\"N\\", \\"S\\", \\"E\\", and \\"W\\". Each string represents a unique direction and the time the vehicle will take to cross the intersection in seconds. Your task is to coordinate the traffic lights such that the total time for all vehicles to cross the intersection is minimized, without causing any collision. Vehicles can only cross the intersection one at a time. Write a function that takes a list of tuples, where each tuple consists of a string direction and an integer time, and returns the minimum total time required for all vehicles to cross the intersection. -----Input----- The input is a list of tuples, each tuple contains a string direction (1 ≤ length of direction ≤ 4) and an integer time (1 ≤ time ≤ 1000). -----Output----- Output the minimum total time required for all vehicles to cross the intersection. -----Example----- Input [(\\"N\\", 3), (\\"S\\", 2), (\\"E\\", 4), (\\"W\\", 1)] Output 10 Explanation: 1. Let the vehicle from \\"N\\" pass (3 seconds) 2. Let the vehicle from \\"S\\" pass (2 seconds) 3. Let the vehicle from \\"E\\" pass (4 seconds) 4. Let the vehicle from \\"W\\" pass (1 second) Total time: 3 + 2 + 4 + 1 = 10 seconds","solution":"def minimum_total_time(vehicles): Calculate the minimum total time for all vehicles to cross the intersection. Args: vehicles (List[Tuple[str, int]]): List of tuples, each containing a direction and the time taken. Returns: int: The minimum total time required for all vehicles to cross the intersection. return sum(time for _, time in vehicles)"},{"question":"The city skyline is a beautiful sight that the city\'s residents admire every day. The skyline can be represented as an array of integers where each integer represents the height of a building. Some of the buildings are significantly taller than their neighbors, directly influencing the skyline\'s visual appeal. We define a \\"significant building\\" as one that is taller than all the buildings to its right. Your task is to count the number of significant buildings in the city\'s skyline. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n space-separated integers h₁, h₂, ..., hₙ (1 ≤ hᵢ ≤ 100), representing the height of each building from left to right. -----Output----- Print a single integer — the number of significant buildings in the skyline. -----Examples----- Input 7 3 7 8 3 6 1 3 Output 3 Input 5 1 2 3 4 5 Output 1 Input 6 6 5 4 3 2 1 Output 6 -----Note----- In the first sample, the significant buildings are the ones with heights 8, 6, and 3 (the last building), as each is taller than all the buildings to its right. In the second sample, only the last building is significant since it is taller than all buildings to its right (there are no buildings to its right). In the third sample, all buildings are significant since each building is taller than all the buildings to its right.","solution":"def count_significant_buildings(n, heights): Returns the count of significant buildings in the skyline. A significant building is taller than all the buildings to its right. if n == 0: return 0 max_height = -1 # Initialize maximum height found to the right significant_count = 0 # Traverse the buildings from right to left for i in range(n-1, -1, -1): if heights[i] > max_height: significant_count += 1 max_height = heights[i] return significant_count"},{"question":"You are given a string and a set of words. The goal is to determine if the string can be segmented into a space-separated sequence of one or more dictionary words from the given set. ------ Input ------ The first line contains an integer T, the number of test cases. The description of the test cases follows. The first line of each test case contains a string s, the string to be segmented. The second line of each test case contains an integer N, the number of words in the dictionary. The next N lines contain a single word each, representing the dictionary words. ------ Output ------ For each test case, on a new line, print \\"Yes\\" if the string can be segmented into a sequence of dictionary words. Otherwise, print \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ ∣s∣ ≤ 1000 1 ≤ N ≤ 1000 1 ≤ text{length of each word} ≤ 100 ------ Sample Input 1 ------ 2 leetcode 3 leet code lee applepenapple 2 apple pen ------ Sample Output 1 ------ Yes Yes","solution":"def can_segment_string(s, dictionary): Returns True if the string `s` can be segmented into a space-separated sequence of one or more dictionary words from the set `dictionary`. Otherwise, returns False. word_set = set(dictionary) dp = [False] * (len(s) + 1) dp[0] = True # Empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] def solve_word_break(test_cases): results = [] for case in test_cases: s, dictionary = case if can_segment_string(s, dictionary): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given an array of n integers. You can perform a sequence of operations to make all the elements of the array equal. In one operation, you choose any two elements a_i and a_j (i neq j) and decrease both of them by 1. You need to determine if it\'s possible to make all elements of the array equal using the given operation any number of times (including zero). -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (2 le n le 100) — the number of integers in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^3). -----Output----- For each test case, print \\"YES\\" if it is possible to make all elements of the array equal using the given operations, otherwise print \\"NO\\". -----Example----- Input 3 3 3 3 3 4 3 1 2 2 5 5 5 5 5 5 Output YES NO YES -----Explanation----- In the first test case, all elements are already equal, so the answer is \\"YES\\". In the second test case, there is no sequence of operations that can make all elements equal, so the answer is \\"NO\\". In the third test case, all elements are already equal, so the answer is \\"YES\\".","solution":"def can_make_elements_equal(n, array): # Calculate the total sum of the elements total_sum = sum(array) # Calculate the maximum element in the array max_element = max(array) # Check if the rest of the elements can sum to at least the maximum element if total_sum % n == 0 and total_sum // n >= max_element: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] result = can_make_elements_equal(n, array) results.append(result) return results"},{"question":"Your task is to implement a function to compress a string such that \'aaabbbccc\' becomes \'a3b3c3\'. Only compress the string if it saves space, so a string like \'abcd\' stays \'abcd\' since it doesn\'t shorten the string. Write a function ```python def compress_string(s): ``` It takes in: - \\"s\\" a non-empty string containing only lowercase letters. The function returns: - A compressed version of the string, or the original string if no compression is achieved. Here\'s an example: ``` compress_string(\\"aabcccccaaa\\") returns: \\"a2b1c5a3\\" ``` Another example: ``` compress_string(\\"abcd\\") returns: \\"abcd\\" ``` Ensure your solution is efficient and handles edge cases effectively, including when no compression is possible or when the input string is already shortest in its original form.","solution":"def compress_string(s): Compresses the string such that \'aaabbbccc\' becomes \'a3b3c3\'. Only compresses the string if it saves space. Parameters: s (str): A non-empty string containing only lowercase letters. Returns: str: Compressed version of the string or the original string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"We define a unique DNA sequence normalizer that works based on the following logic. For the sake of simplicity, we will use a string representation of a DNA sequence. A DNA sequence is composed of four types of nucleotides: Adenine (A), Cytosine (C), Guanine (G), and Thymine (T). Our normalizer function `normalize_dna_sequence(sequence)` follows these rules: 1. If the sequence contains three or more consecutive identical nucleotides, replace those with a single instance of that nucleotide. 2. Consecutive stretches of identical nucleotides that occur after the first sequence of three or more identical nucleotides should also be reduced to a single instance. 3. If the sequence is already normalized, the function will return the same sequence. For example: ```python normalize_dna_sequence(\\"AAAGGTCCCAAA\\") == \\"AGTCA\\" normalize_dna_sequence(\\"TTTCCGAAAAAT\\") == \\"TCGAT\\" normalize_dna_sequence(\\"AGCTTCCAAAGGTT\\") == \\"AGCTCAGT\\" normalize_dna_sequence(\\"ACGTACGT\\") == \\"ACGTACGT\\" ``` **Input Specifications:** * `sequence` is a non-empty string of nucleotides (A, C, G, T). The length of `sequence` will be between 1 and 1000. Considering the above rules and examples, implement the `normalize_dna_sequence(sequence)` function to achieve this normalization. *You may assume the input string is always valid (i.e., contains only A, C, G, T characters).*","solution":"def normalize_dna_sequence(sequence): Normalizes the given DNA sequence according to the specified rules. Parameters: sequence (str): A string representing the DNA sequence composed of A, C, G, T. Returns: str: The normalized DNA sequence. if not sequence: return sequence normalized_sequence = [] prev_char = \'\' count = 0 for char in sequence: if char == prev_char: count += 1 else: count = 1 prev_char = char if count == 1 or (count == 2 and len(normalized_sequence) > 0 and normalized_sequence[-1] != char): normalized_sequence.append(char) return \'\'.join(normalized_sequence)"},{"question":"A delivery company transports parcels using a fleet of drones. Each drone has a maximum weight capacity that it can carry in one trip. The company receives multiple delivery requests, each specifying a parcel\'s weight and the payment offered for the delivery. The parcel must be delivered in one trip by a single drone. The goal is to maximize the total payment the company receives based on the drone capacities available. Input The first line of input contains a single integer T denoting the number of test cases (1 ≤ T ≤ 50). Each test case starts with two integers n and k where 1 ≤ n ≤ 100 represents the number of delivery requests and 1 ≤ k ≤ 50 represents the number of drones available. The next line contains k integers w1, w2, ..., wk (1 ≤ wi ≤ 1000) representing the weight capacities of the k drones. Each of the following n lines contains two integers p and v where 1 ≤ p ≤ 1000 is the weight of the parcel and 1 ≤ v ≤ 10000 is the payment offered for delivering the parcel. Test cases are separated by a single blank line including a blank line preceding the first test case. Output For each test case, print a single integer representing the maximum total payment the company can receive by utilizing the drones available as efficiently as possible. SAMPLE INPUT 1 3 2 100 200 50 300 150 500 1000 6000 SAMPLE OUTPUT 800 Explanation In the given test case, there are 3 deliveries and 2 drones. The first drone has a capacity of 100 and the second drone has a capacity of 200. The three delivery requests offer payments of 300, 500, and 6000 for parcels weighing 50, 150, and 1000, respectively. The best strategy is to accept the first and the second delivery requests, as they can be handled by the drones available. The third delivery request cannot be fulfilled by any of the drones due to its weight. Therefore, the total payment received is 300 + 500 = 800.","solution":"def maximize_payment(T, test_cases): results = [] for t in range(T): n, k, weights, deliveries = test_cases[t] weights.sort(reverse=True) deliveries.sort(key=lambda x: x[1], reverse=True) total_payment = 0 used_drones = [False] * k for p, v in deliveries: for i in range(k): if not used_drones[i] and weights[i] >= p: total_payment += v used_drones[i] = True break results.append(total_payment) return results"},{"question":"Adam is an avid marathon runner and participates in various marathon events. Each marathon follows a specific route, represented by a sequence of waypoints. Each waypoint has a specific elevation (height above sea level). Adam wants to analyze his running routes to find the toughest segment of each course. The toughness of a segment is defined by the difference in elevation between the highest waypoint and the lowest waypoint in that segment. Given the elevations of waypoints in the marathon route for multiple test cases, help Adam find out the toughest segment for each test case. A segment is defined as a contiguous subarray of the route. ----Input---- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of waypoints in the marathon route. The second line of each test case contains N space-separated integers, where each integer corresponds to the elevation of a waypoint. ----Output---- For each test case, output a single integer denoting the toughest segment\'s toughness for that route. ----Constraints---- - 1 ≤ T ≤ 50 - 2 ≤ N ≤ 1000 - -1000 ≤ Elevation ≤ 1000 ----Example---- Input 3 5 1 2 3 4 5 4 4 1 -1 3 6 -3 0 2 4 3 -5 Output 4 5 9 ----Explanation---- Example case 1: The toughest segment is between the lowest point (1) and the highest point (5) which gives a toughness of 4. Example case 2: The toughest segment is between the lowest point (-1) and the highest point (4) which gives a toughness of 5. Example case 3: The toughest segment is between the lowest point (-5) and the highest point (4) which gives a toughness of 9.","solution":"def toughest_segment(elevations): Given a list of elevations, find the toughness of the toughest segment. The toughness of a segment is the difference between the highest and the lowest waypoint in that segment. max_elevation = max(elevations) min_elevation = min(elevations) return max_elevation - min_elevation def marathon_toughness(num_tests, test_cases): Given the number of test cases and the test cases themselves, return the toughness of the toughest segment for each test case. Args: num_tests (int): Number of test cases test_cases (list of tuples): Each tuple contains an integer followed by a list of integers (elevations) Returns: list of int: Toughest segment for each test case results = [] for test in test_cases: _, elevations = test results.append(toughest_segment(elevations)) return results"},{"question":"You are given an array of integers and you need to process multiple range sum queries. For each query, you are provided with two indices L and R. Your task is to determine the sum of elements from index L to index R (both inclusive). After processing all the queries, return an array containing the result for each query. -----Input:----- The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. The third line contains an integer Q, the number of queries. Each of the next Q lines contains two space-separated integers L and R representing the range for the query. -----Output:----- Output an array of integers where each integer is the answer to the corresponding query. -----Constraints:----- 1 leq N leq 10^5 1 leq A[i] leq 10^9 1 leq Q leq 10^5 1 leq L, R leq N L leq R -----Sample Input:----- 5 1 2 3 4 5 3 1 3 2 5 1 5 -----Sample Output:----- 6 14 15 -----Explanation:----- For the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. For the second query, the sum of elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14. For the third query, the sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def range_sum_queries(N, array, Q, queries): Given an array and multiple range queries, return the sum for each query. Parameters: N (int): Number of elements in the array. array (List[int]): The array of elements. Q (int): Number of queries. queries (List[Tuple[int, int]]): List of range queries represented as tuples (L, R). Returns: List[int]: List of sums for each query. # Create a prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] # Process each query result = [] for L, R in queries: sum_range = prefix_sum[R] - prefix_sum[L - 1] result.append(sum_range) return result # Example usage N = 5 array = [1, 2, 3, 4, 5] Q = 3 queries = [(1, 3), (2, 5), (1, 5)] print(range_sum_queries(N, array, Q, queries)) # Output: [6, 14, 15]"},{"question":"Write a program that takes a positive integer n and outputs an n times n matrix where each element (i, j) is the Euclidean distance between points (i, 0) and (j, 0) on a number line. The Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is calculated as: [ text{distance} = sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} ] In this case, since all points lie on the x-axis, the distance simplifies to: [ text{distance} = |x_2 - x_1| ] Constraints * 1 leq n leq 100 Input An integer n representing the number of points. Output Print the resultant n times n distance matrix. Each element in a row should be separated by a single space. Example Input 4 Output 0 1 2 3 1 0 1 2 2 1 0 1 3 2 1 0","solution":"def euclidean_distance_matrix(n): Creates an n x n matrix where each element (i, j) is the Euclidean distance between points (i, 0) and (j, 0) on a number line. matrix = [] for i in range(n): row = [] for j in range(n): distance = abs(j - i) row.append(distance) matrix.append(row) return matrix def print_matrix(matrix): Prints the matrix in the specified format. for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"Our friend is an avid collector of rare stones and he is preparing to organize a massive stone exhibition. He has a collection of stones, each with a certain weight. However, to create an aesthetically pleasing display, he wants to arrange these stones in such a way that the total weight is minimized while still using all the stones he has. The catch is, he can combine exactly two stones at a time to form a new stone with a weight equal to the sum of the two stones\' weights. This new stone can then be used in subsequent combinations. Each combination operation incurs a cost equivalent to the weight of the new stone formed. He aims to minimize the total cost incurred in creating one stone from all the stones. Given the weights of the stones, help him determine the minimum cost required to combine all the stones into one single stone. Input: The first line of input contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of stones. The second line contains N space-separated integers representing the weights of the stones. Output: For each test case, output one line containing the minimum cost required to combine the stones into one stone. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ weight of each stone ≤ 10^6 SAMPLE INPUT 2 4 4 3 2 6 3 1 2 3 SAMPLE OUTPUT 29 9","solution":"import heapq def min_cost_to_combine_stones(weights): Given a list of stone weights, returns the minimum cost required to combine all the stones into one. if len(weights) == 1: return 0 heapq.heapify(weights) total_cost = 0 while len(weights) > 1: # Extract the two smallest weights first = heapq.heappop(weights) second = heapq.heappop(weights) # The cost to combine these two stones cost = first + second total_cost += cost # Push the combined stone back into the heap heapq.heappush(weights, cost) return total_cost def process_test_cases(T, cases): results = [] for case in cases: N, weights = case results.append(min_cost_to_combine_stones(weights)) return results"},{"question":"Alex is keen on organizing his bookshelf full of books which contains many duplicate copies of the same book. All books have a unique identifier `id` which is an integer. Alex wants to perform a series of operations to remove duplicates such that only one copy of each book remains on the shelf. Your task is to help Alex achieve this by implementing a function that takes an unsorted list of integers (representing the `id` of each book on the shelf) and returns a new list with all duplicates removed, maintaining the relative order of first occurrences. -----Input----- - A single list `books` containing `n` integers, where `1 <= n <= 1000` and each integer `1 <= id <= 10^6` represents a book\'s `id`. -----Output----- - A list containing only the unique `id`s from the original list, preserving the relative order of their first occurrences. -----Examples----- Sample Input 1: [4, 2, 4, 3, 2, 1, 5, 1] Sample Output 1: [4, 2, 3, 1, 5] Sample Input 2: [7, 8, 7, 8, 9, 1] Sample Output 2: [7, 8, 9, 1] Sample Input 3: [1, 2, 3, 4, 5] Sample Output 3: [1, 2, 3, 4, 5] Function Signature ```python def remove_duplicates(books: List[int]) -> List[int]: pass ```","solution":"from typing import List def remove_duplicates(books: List[int]) -> List[int]: Removes duplicate book ids and returns a list with only the unique ids, maintaining the relative order of their first occurrence. :param books: List of integers representing books\' ids. :return: List of unique ids. seen = set() unique_books = [] for book_id in books: if book_id not in seen: seen.add(book_id) unique_books.append(book_id) return unique_books"},{"question":"You come across a special operation on a string called a \\"cyclic shift\\". A cyclic shift is defined as moving the characters of the string one position to the left and taking the first character and appending it to the end. For example, a cyclic shift on the string \\"ABCD\\" results in \\"BCDA\\". Given a string s of length n, determine if it is possible to transform this string into another string t of length n by performing any number of cyclic shifts (including zero shifts) on s. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Next t lines contain test cases — one per line. Each test case consists of two space-separated strings s and t, both of length n (1 le n le 2 cdot 10^5). -----Output----- For each test case, print \\"YES\\" if s can be transformed into t` using any number of cyclic shifts, otherwise print \\"NO\\". -----Example----- Input 3 ABCD BCDA ABCD ACBD A A Output YES NO YES -----Note----- In the first test case, performing one cyclic shift on \\"ABCD\\" results in \\"BCDA\\". In the second test case, it is not possible to transform \\"ABCD\\" into \\"ACBD\\" with cyclic shifts. In the third test case, the strings are already identical. ----- The solution involves checking if string t is a substring of s + s, which would indicate that t is a cyclic shift of s.","solution":"def can_transform_with_cyclic_shift(s, t): Check if string t can be obtained from string s using any number of cyclic shifts. Args: s (str): the original string. t (str): the target string to check against. Returns: str: \\"YES\\" if t can be obtained by cyclic shifts on s, otherwise \\"NO\\". if len(s) != len(t): return \\"NO\\" combined_s = s + s if t in combined_s: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases to determine if transformation is possible with cyclic shifts. Args: test_cases (list): list of tuples where each tuple contains strings s and t respectively. Returns: list: results for each test case. results = [] for s, t in test_cases: results.append(can_transform_with_cyclic_shift(s, t)) return results"},{"question":"You are given an array of integers of length N. You need to perform two types of operations multiple times: 1. Update a specific element in the array to a new value. 2. Determine the maximum product of two distinct elements in the current array. The operations are given in the format: - \\"1 X Y\\" meaning update the X-th element of the array to value Y. - \\"2\\" meaning output the maximum product of two distinct elements in the array. Write a program to process the given operations and provide the required outputs. ------ Input Format ------ - First line will contain two integers N and Q. - Second line will contain N space-separated integers representing the initial elements of the array. - The next Q lines will contain the operations as described above. ------ Output Format ------ - For each operation of type \\"2\\", print the result on a new line. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} 1 ≤ A, Y ≤ 10^{9} 1 ≤ X ≤ N ----- Sample Input 1 ------ 5 6 1 2 3 4 5 2 1 3 10 2 1 5 6 2 1 1 7 2 ----- Sample Output 1 ------ 20 30 35 42 ----- explanation 1 ------ Initial array: [1, 2, 3, 4, 5] - Operation \\"2\\": Maximum product is 4 * 5 = 20. - Operation \\"1 3 10\\": Update third element to 10, array becomes [1, 2, 10, 4, 5]. - Operation \\"2\\": Maximum product is 10 * 5 = 50. - Operation \\"1 5 6\\": Update fifth element to 6, array becomes [1, 2, 10, 4, 6]. - Operation \\"2\\": Maximum product is 10 * 6 = 60. - Operation \\"1 1 7\\": Update first element to 7, array becomes [7, 2, 10, 4, 6]. - Operation \\"2\\": Maximum product is 10 * 7 = 70.","solution":"import heapq def perform_operations(N, Q, array, operations): Perform the operations on the array and return the results for the \'2\' operations. :param N: Number of elements in the array :param Q: Number of operations to perform :param array: Initial array of N integers :param operations: List of operations to perform :return: List of results for the \'2\' operations results = [] # Using a max heap to keep track of the two largest elements at any point max_heap = [-num for num in array] heapq.heapify(max_heap) for operation in operations: op = list(map(int, operation.split())) if op[0] == 1: X, Y = op[1] - 1, op[2] array[X] = Y heapq.heappush(max_heap, -Y) elif op[0] == 2: # Extract the two largest elements first_max = -heapq.heappop(max_heap) second_max = -heapq.heappop(max_heap) results.append(first_max * second_max) # Push them back to maintain the max heap heapq.heappush(max_heap, -first_max) heapq.heappush(max_heap, -second_max) return results"},{"question":"You have been tasked with managing a secure server that logs incoming requests. Your job is to analyze these logs and determine the peak hour of activity. The logs consist of timestamps indicating the time each request was received. A timestamp is given in the format \\"HH:MM\\" where: - HH is an hour from 00 to 23. - MM is a minute from 00 to 59. Your task is to find the one-hour period (from HH:00 to HH:59) with the highest number of requests. If there are multiple one-hour periods with the same number of requests, return the earliest one. -----Input----- - The first line contains an integer n (1 le n le 10^4), the number of timestamps. - Each of the next n lines contains a timestamp in the format \\"HH:MM\\". -----Output----- - Output a single line in the format \\"HH:00-HH:59\\" representing the start and end of the one-hour period with the maximum number of requests. -----Examples----- Sample Input 1: 5 12:34 12:45 13:00 13:15 14:00 Sample Output 1: 12:00-12:59 Sample Input 2: 3 23:05 23:59 00:01 Sample Output 2: 23:00-23:59 Sample Input 3: 6 00:10 00:15 01:20 01:22 01:40 02:50 Sample Output 3: 01:00-01:59","solution":"def find_peak_hour(n, timestamps): Find the one-hour period with the highest number of requests. :param n: Integer, the number of timestamps :param timestamps: List of strings, each string is a timestamp in the format \\"HH:MM\\" :return: A string representing the one-hour period with the maximum number of requests, in the format \\"HH:00-HH:59\\" hour_counts = [0] * 24 for timestamp in timestamps: hour = int(timestamp[:2]) hour_counts[hour] += 1 peak_hour = 0 max_requests = hour_counts[0] for hour in range(1, 24): if hour_counts[hour] > max_requests: max_requests = hour_counts[hour] peak_hour = hour return f\\"{peak_hour:02d}:00-{peak_hour:02d}:59\\""},{"question":"You are working on a new feature for a popular e-commerce website that allows users to return products they have purchased within a specific period. A user can return multiple products from multiple orders, and a return request can only be processed if all products in the request were purchased within the allowed return period. Given a list of purchase dates for each product in a user\'s order history and the date of the return request, you need to determine if a return request including specific products can be processed. Write a function `can_process_return(purchase_dates: List[str], return_request_date: str, allowed_return_period: int, return_products: List[int]) -> bool` where: - `purchase_dates`: a list of strings representing the purchase dates of products in the format \\"YYYY-MM-DD\\". - `return_request_date`: a string representing the return request date in the format \\"YYYY-MM-DD\\". - `allowed_return_period`: an integer representing the number of days within which returns are allowed. - `return_products`: a list of integers representing the indices of the products for which the return is requested. Return `True` if the return request can be processed, otherwise return `False`. # Example Input: ```python purchase_dates = [\\"2023-01-01\\", \\"2023-01-15\\", \\"2023-02-20\\"] return_request_date = \\"2023-03-01\\" allowed_return_period = 45 return_products = [0, 2] ``` Output: ```python True ``` Input: ```python purchase_dates = [\\"2023-01-01\\", \\"2023-01-15\\", \\"2023-02-20\\"] return_request_date = \\"2023-03-01\\" allowed_return_period = 45 return_products = [0, 1] ``` Output: ```python False ``` # Explanation In the first example, the return request date is \\"2023-03-01\\" and the allowed return period is 45 days. The products with indices 0 and 2 were purchased on \\"2023-01-01\\" and \\"2023-02-20\\" respectively. The number of days between \\"2023-01-01\\" and \\"2023-03-01\\" is 59, which is more than 45 days, but the number of days between \\"2023-02-20\\" and \\"2023-03-01\\" is 9, which is within the allowed return period. Since at least one product in the request was purchased outside the allowed return period, the return request cannot be processed. In the second example, both products 0 and 1 were purchased within 45 days of the return request date, so the return request can be processed. # Constraints - The dates will be valid dates in the format \\"YYYY-MM-DD\\". - The list `purchase_dates` will contain at most 1000 dates. - The `return_products` list will contain at most 100 indices. - The allowed return period will be a positive integer.","solution":"from datetime import datetime, timedelta from typing import List def can_process_return(purchase_dates: List[str], return_request_date: str, allowed_return_period: int, return_products: List[int]) -> bool: return_request_date_obj = datetime.strptime(return_request_date, \\"%Y-%m-%d\\") for product_idx in return_products: purchase_date_obj = datetime.strptime(purchase_dates[product_idx], \\"%Y-%m-%d\\") if (return_request_date_obj - purchase_date_obj).days > allowed_return_period: return False return True"},{"question":"You are required to implement a function to solve the famous \\"Knight\'s Tour Problem\\" using Backtracking. The Knight\'s Tour Problem ----------------------------- A knight\'s tour is a sequence of moves of a knight on a chessboard such that the knight visits every square exactly once. The solution requires generating such a sequence of moves where the knight does not repeat any square. The Board ------------- The chessboard can be of any size N x N. Rules ------------ - The knight moves in an L-shape: two squares in a horizontal or vertical direction, and then one square in a perpendicular direction. - The knight must stay within the bounds of the board. - Each square on the board must be visited exactly once. The Task ------------ Write a function `knights_tour` that accepts an integer N, which is the size of the chessboard (N x N). ```python def knights_tour(N): # your code here pass ``` The function should return a list of tuples, each representing the knight\'s position as (row, column) in the order of the moves. Example ------------- ```python knights_tour(5) # Possible output: # [(0, 0), (2, 1), (4, 0), (3, 2), (4, 4), (2, 3), (0, 4), (1, 2), (0, 2), (1, 0), (3, 1), (4, 3), (2, 4), (0, 3), (1, 1), (3, 0), (2, 2), (4, 1), (3, 3), (4, 2), (2, 0), (1, 3), (0, 1), (1, 4), (3, 4)] ``` Note: - The coordinates should start from (0, 0), representing the top-left corner of the board. - If there is no solution, return an empty list.","solution":"def knights_tour(N): def is_valid_move(x, y, board): return 0 <= x < N and 0 <= y < N and board[x][y] == -1 def solve(x, y, movei, board, x_move, y_move): if movei == N * N: return True for k in range(8): next_x = x + x_move[k] next_y = y + y_move[k] if is_valid_move(next_x, next_y, board): board[next_x][next_y] = movei if solve(next_x, next_y, movei + 1, board, x_move, y_move): return True board[next_x][next_y] = -1 return False board = [[-1 for _ in range(N)] for _ in range(N)] x_move = [2, 1, -1, -2, -2, -1, 1, 2] y_move = [1, 2, 2, 1, -1, -2, -2, -1] board[0][0] = 0 if not solve(0, 0, 1, board, x_move, y_move): return [] return [(i, j) for i in range(N) for j in range(N) if board[i][j] != -1]"},{"question":"Задача следующая: Вы должны определить текущее время, поворачивая стрелки часов на 90 градусов против часовой стрелки. То есть вам дадут текущее время в формате HH:MM, и вам нужно вернуть новое время после поворота часов на 90 градусов против часовой стрелки. Например, если часы показывают 12:00 и их повернуть на 90 градусов против часовой стрелки, то получится 09:00. Аналогично, если часы показывают 03:15 и их повернуть на 90 градусов, то получится 00:45. -----Входные данные----- В первой строке входных данных содержится текущее время в формате HH:MM (0 ≤ HH ≤ 23 и 0 ≤ MM ≤ 59). -----Выходные данные----- Выведите новое время в формате HH:MM после поворота стрелок на 90 градусов против часовой стрелки. -----Пример----- Входные данные 03:15 Выходные данные 00:45","solution":"def rotate_time_90_ccw(time_str): Rotates the given time 90 degrees counter-clockwise. Parameters: time_str (str): The current time in HH:MM format Returns: str: The new time in HH:MM format after a 90 degree counter-clockwise rotation hh, mm = map(int, time_str.split(\':\')) # Calculate the new hours and minutes after a 90 degree rotation new_hh = (hh - 3) % 24 new_mm = (mm + 30) % 60 return f\\"{new_hh:02}:{new_mm:02}\\""},{"question":"Rachel loves to collect shells during her walks on the beach. Every day she tries to collect a certain number of shells. Rachel records these counts in a journal. She wants to know the maximum number of shells she has collected over any `k` consecutive days. ----Input:---- - The first line contains a single integer n, representing the total number of days Rachel has collected shells. - The second line contains n integers where the i-th integer represents the number of shells collected on the i-th day. - The third line contains a single integer k representing the number of consecutive days she wants to consider. ----Output:---- Print the maximum number of shells collected over any k consecutive days. ----Constraints:---- - 1 leq n leq 10^5 - 1 leq k leq n - 0 leq text{number of shells collected on any day} leq 10^9 ----Sample Input:---- 7 4 3 8 1 2 5 6 3 ----Sample Output:---- 15 ----EXPLANATION:---- In this case, the maximum number of shells collected over 3 consecutive days is from days 2 to 4 (3 + 8 + 5 = 15).","solution":"def max_shells_in_k_days(n, shells, k): Given the number of days `n`, a list `shells` representing the number of shells collected each day, and an integer `k`, returns the maximum number of shells collected over any `k` consecutive days. max_shells = 0 current_window_sum = sum(shells[:k]) max_shells = current_window_sum for i in range(k, n): current_window_sum += shells[i] - shells[i - k] if current_window_sum > max_shells: max_shells = current_window_sum return max_shells"},{"question":"Given an array of strings `words` and a string `pattern`, return a list of words from the array that match the given pattern. A word matches the pattern if there exists a bijection from the letters in the pattern to the letters in the word such that transforming all occurrences of the same letter in the pattern to the same letter in the word results in the pattern being identical to the word. In other words, for each letter in the pattern, there must be a unique corresponding letter in the word, and vice versa. Example 1: Input: words = [\\"abc\\", \\"deq\\", \\"mee\\", \\"aqq\\", \\"dkd\\", \\"ccc\\"], pattern = \\"abb\\" Output: [\\"mee\\",\\"aqq\\"] Explanation: \\"mee\\" and \\"aqq\\" match the pattern \\"abb\\". The unique mapping for \\"abb\\" to \\"mee\\" is \'a\' -> \'m\', \'b\' -> \'e\', \'b\' -> \'e\'. Similarly, for \\"aqq\\", \'a\' -> \'a\', \'b\' -> \'q\', \'b\' -> \'q\'. Example 2: Input: words = [\\"a\\", \\"b\\", \\"c\\"], pattern = \\"a\\" Output: [\\"a\\", \\"b\\", \\"c\\"] Explanation: All the strings match the pattern since they all contain only one unique letter. Constraints: * 1 <= words.length <= 50 * 1 <= words[i].length, pattern.length <= 20 * Each string and the pattern contains only lowercase English letters.","solution":"def match_pattern(word, pattern): if len(word) != len(pattern): return False map_word_to_pattern = {} map_pattern_to_word = {} for w, p in zip(word, pattern): if w not in map_word_to_pattern: map_word_to_pattern[w] = p if p not in map_pattern_to_word: map_pattern_to_word[p] = w if map_word_to_pattern[w] != p or map_pattern_to_word[p] != w: return False return True def find_and_replace_pattern(words, pattern): return [word for word in words if match_pattern(word, pattern)]"},{"question":"You are given a list of integers. Your task is to find and print the highest peak and lowest valley in the given list. A peak is defined as an element that is greater than or equal to its neighbors, and a valley is defined as an element that is less than or equal to its neighbors. Constraints * The length of the list is at least 3. * The list contains integers (positive, negative, or zero). Input Input is given from Standard Input in the following format: n a1 a2 a3 ... an Output Print two integers: the highest peak and the lowest valley. If there are multiple peaks or valleys with the same value, any one of them can be chosen. Examples Input 7 3 1 4 1 5 9 2 Output 9 1 Input 5 -1 -2 -1 -2 -1 Output -1 -2","solution":"def find_peak_and_valley(arr): Returns the highest peak and the lowest valley in the given list. A peak is an element which is greater than or equal to its neighbors. A valley is an element which is less than or equal to its neighbors. n = len(arr) peaks = [] valleys = [] for i in range(n): if (i == 0 and arr[i] >= arr[i + 1]) or (i == n - 1 and arr[i] >= arr[i - 1]) or (0 < i < n - 1 and arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]): peaks.append(arr[i]) if (i == 0 and arr[i] <= arr[i + 1]) or (i == n - 1 and arr[i] <= arr[i - 1]) or (0 < i < n - 1 and arr[i] <= arr[i - 1] and arr[i] <= arr[i + 1]): valleys.append(arr[i]) highest_peak = max(peaks) if peaks else None lowest_valley = min(valleys) if valleys else None return highest_peak, lowest_valley"},{"question":"Given an array of integers nums, perform the following operations: 1. Reverse the elements of the array. 2. Replace each element with its negative value. 3. Remove all duplicate elements, preserving the order of their first occurrence. Example 1: Input: nums = [1, -2, 3, -2, 4] Output: [-4, 2, -3, -1] Explanation: Array is reversed to [4, -2, 3, -2, 1]. Then each element is negated to [-4, 2, -3, 2, -1]. Finally, duplicate 2 is removed. Example 2: Input: nums = [0, 0, 0, 0, 0] Output: [0] Explanation: Array is reversed to [0, 0, 0, 0, 0]. Then each element is negated to [0, 0, 0, 0, 0]. No duplicates to remove. Your Task: You don\'t need to read input or print anything. Complete the function transform_array() which takes the array nums as an input parameter and returns the transformed array. The resulting array should not contain duplicates. Expected Time Complexity: O(N) where N is the length of nums. Expected Auxiliary Space: O(N) Constraints: 1 <= nums.length <= 10^4 -10^4 <= nums[i] <= 10^4","solution":"def transform_array(nums): Perform the following operations on the array nums: 1. Reverse the elements of the array. 2. Replace each element with its negative value. 3. Remove all duplicate elements, preserving the order of their first occurrence. nums = nums[::-1] # Step 1: Reverse the array nums = [-num for num in nums] # Step 2: Negate each element seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Given a sequence of integers, you are to find the minimum and maximum elements of every subarray of a specified length within the sequence. For instance, given an integer array and a length `k`, you need to compute the minimum and maximum values for each subarray of length `k` and return these in two separate arrays. For example: If the input array is `[3, 1, 5, 6, 2, 4]` and `k` is `3`, the subarrays of length `3` are `[3, 1, 5]`, `[1, 5, 6]`, `[5, 6, 2]`, and `[6, 2, 4]`. - For these subarrays, the minimum values are `[1, 1, 2, 2]`. - And the maximum values are `[5, 6, 6, 6]`. You need to write a function that performs this task for a sequence of integers and a specified subarray length. Function Signature: ```python def subarray_min_max(arr: List[int], k: int) -> Tuple[List[int], List[int]]: pass ``` ----- Input ----- - The first line of input contains an integer `n` (1 le n le 10^6) — the number of elements in the array. - The second line contains `n` integers representing the elements of the array. (1 le arr[i] le 10^9). - The third line contains an integer `k` (1 le k le n) — the length of the subarrays. ----- Output ----- - Two lines of output: - The first line contains the minimum values for each subarray of length `k`. - The second line contains the maximum values for each subarray of length `k`. ----- Example ----- Input: 6 3 1 5 6 2 4 3 Output: 1 1 2 2 5 6 6 6","solution":"from typing import List, Tuple from collections import deque def subarray_min_max(arr: List[int], k: int) -> Tuple[List[int], List[int]]: This function returns the minimum and maximum values for each subarray of length k. n = len(arr) min_vals = [] max_vals = [] min_deque = deque() # Stores indices of potential min values max_deque = deque() # Stores indices of potential max values for i in range(n): # Remove elements out of the current window from deques if min_deque and min_deque[0] <= i - k: min_deque.popleft() if max_deque and max_deque[0] <= i - k: max_deque.popleft() # Remove elements that are not useful from the deques while min_deque and arr[min_deque[-1]] >= arr[i]: min_deque.pop() while max_deque and arr[max_deque[-1]] <= arr[i]: max_deque.pop() # Add the current element index to the deques min_deque.append(i) max_deque.append(i) # If we have processed at least k elements, record the result for the current window if i >= k - 1: min_vals.append(arr[min_deque[0]]) max_vals.append(arr[max_deque[0]]) return min_vals, max_vals"},{"question":"Ramesh likes reading books during his free time. He has a collection of different books, each with a certain number of pages. Ramesh has decided to set a daily reading goal to finish a given book collection within a specific number of days. However, he must maintain a consistent reading habit, and he doesn\'t like reading more than his daily goal, and he doesn\'t want to read fewer pages than the day before. Help Ramesh determine if it\'s possible to finish his book collection by setting such a daily reading goal. -----Input----- The input contains multiple test cases. The first line contains an integer t (1 leq t leq 100), the number of test cases. For each test case, the first line contains two integers n (1 leq n leq 1000) and d (1 leq d leq 1000), the number of books and the number of days respectively. The second line contains n integers p_1, p_2, dots, p_n (1 leq p_i leq 1000), the number of pages in each book. -----Output----- For each test case, print \\"YES\\" if it\'s possible for Ramesh to complete his book collection within d days following his constraints, otherwise print \\"NO\\". -----Examples----- Input 3 3 3 100 200 300 4 4 100 200 300 400 5 2 500 600 700 800 900 Output YES YES NO -----Note----- For the first test case, Ramesh can read 100 pages on the first day, 200 pages on the second day, and 300 pages on the third day. For the second test case, Ramesh can read 100 pages on the first day, 200 pages on the second day, 300 pages on the third day, and 400 pages on the fourth day. For the third test case, it is impossible for Ramesh to read the books within two days as he would need to read 500+600+700+800+900 pages in two days, which would not maintain a consistent reading habit.","solution":"def can_finish_books(t, test_cases): results = [] for case in test_cases: n, d, pages = case if len(pages) > d: results.append(\\"NO\\") continue pages.sort() total_days_required = 0 possible = True for i in range(len(pages)): total_days_required += 1 if total_days_required > d: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are building a new feature on a language-learning app that allows users to practice spelling words in different languages. The app should provide a summary of the user\'s performance at the end of each practice session. # The Task - Design a way to store the list of words and their corresponding translations in different languages (e.g., as a dictionary). - Write a function `practice_session` that takes a list of word pairs, where each pair consists of a word in English and its translation in a target language. - Write a function `session_summary` that takes a list of results (each result being a tuple containing the English word, user input, and a boolean indicating if the translation was correct), and returns a summary of the user\'s performance. # The Word List ```python words = { \'apple\': {\'french\': \'pomme\', \'spanish\': \'manzana\', \'german\': \'apfel\'}, \'book\': {\'french\': \'livre\', \'spanish\': \'libro\', \'german\': \'buch\'}, \'car\': {\'french\': \'voiture\', \'spanish\': \'coche\', \'german\': \'auto\'}, \'dog\': {\'french\': \'chien\', \'spanish\': \'perro\', \'german\': \'hund\'}, \'house\': {\'french\': \'maison\', \'spanish\': \'casa\', \'german\': \'haus\'} } ``` # Function `practice_session` - Takes a list of word pairs (English, Target Language) and the target language. - Returns a result list containing tuples (English word, user input, correctness). # Function `session_summary` - Takes a result list. - Returns a summary dictionary with total words practiced, correct translations, and incorrect translations. # Example ```python def practice_session(words, target_language): results = [] for english_word in words: translation = input(f\\"Translate \'{english_word}\' to {target_language}: \\") correct_translation = words[english_word][target_language] is_correct = (translation.lower() == correct_translation) results.append((english_word, translation, is_correct)) return results def session_summary(results): total = len(results) correct = sum(1 for result in results if result[2]) incorrect = total - correct return { \'total_words\': total, \'correct_translations\': correct, \'incorrect_translations\': incorrect } # Usage word_list = [\'apple\', \'book\', \'car\', \'dog\', \'house\'] target_language = \'french\' results = practice_session(word_list, target_language) summary = session_summary(results) print(summary) ```","solution":"def practice_session(word_list, target_language, words): Simulates a practice session for translating words from English to the target language. Args: word_list (list): List of English words to practice. target_language (str): Target language to translate to. words (dict): Dictionary containing words and their translations. Returns: list: A list of tuples where each tuple contains the English word, user input, and a boolean indicating if the translation was correct. results = [] for english_word in word_list: translation = input(f\\"Translate \'{english_word}\' to {target_language}: \\") correct_translation = words[english_word][target_language] is_correct = (translation.lower() == correct_translation) results.append((english_word, translation, is_correct)) return results def session_summary(results): Provides a summary of the user\'s performance in the practice session. Args: results (list): List of tuples containing the English word, user input, and a boolean indicating if the translation was correct. Returns: dict: Summary of the session including total words practiced, correct translations, and incorrect translations. total = len(results) correct = sum(1 for result in results if result[2]) incorrect = total - correct return { \'total_words\': total, \'correct_translations\': correct, \'incorrect_translations\': incorrect }"},{"question":"Kate is organizing a marathon event and she wants to provide certificates to the top runners. She has a list of the start and end times of different runners\' runs. She wants to determine the top k runners for a special certificate. A runner is considered to have finished the race earlier if their end time is smaller, or if the end times are the same, the one with the smaller start time finishes earlier. Bob, a software developer, decides to write a program to help Kate find the top k runners based on these criteria. # Input The first line contains two integers n and k (1 ≤ n, k ≤ 10^5), the number of runners and the number of top runners required respectively. Each of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9), where s_i is the start time and e_i is the end time of the i-th runner. # Output Print the start and end times of the top k runners in the order they finished. # Example Input ``` 5 3 1 4 2 6 1 3 3 5 0 2 ``` Output ``` 0 2 1 3 1 4 ``` # Note In the provided example, the runners are considered to have finished in the following order based on their finish times and start times: 1. (0, 2) 2. (1, 3) 3. (1, 4) 4. (3, 5) 5. (2, 6) Hence, for k = 3, the top three runners are (0, 2), (1, 3), and (1, 4).","solution":"def find_top_k_runners(n, k, runners): Finds the top k runners based on finish and start time. Parameters: n (int): Number of runners. k (int): Number of top runners required. runners (list): List of tuples containing (start_time, end_time) for each runner. Returns: list: List of top k runners in the order they finish. # Sort runners first by end time, and then by start time if end times are the same sorted_runners = sorted(runners, key=lambda x: (x[1], x[0])) # Get the top k runners top_k_runners = sorted_runners[:k] return top_k_runners"},{"question":"A gardener is planting flowers along the edges of a rectangular garden with dimensions m x n. Instead of planting them randomly, the gardener wants each flower to be planted in such a way that the flower bed forms a continuous even zigzag pattern along the edges. The zigzag pattern starts from the bottom-left corner (1, 1) and proceeds as follows: - Move right along the bottom edge - Move up along the right edge - Move left along the top edge - Move down along the left edge - Repeat the process along the new boundaries until the entire perimeter is covered. The pattern continues until the planting reaches back at the starting point or cannot be extended further. Each flower is represented by a distinct number, starting from 1. Write a function to determine the positions of the flower beds in the zigzag pattern for a given m x n garden. -----Input----- The first line of input contains t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two integers m and n (1 ≤ m, n ≤ 10^9). -----Output----- For each test case, output the positions of the flower beds in their planting order as a space-separated string of pairs (x, y). -----Examples----- Input 3 3 3 4 2 2 2 Output (1, 1) (1, 2) (1, 3) (2, 3) (3, 3) (3, 2) (3, 1) (2, 1) (2, 2) (1, 1) (1, 2) (2, 2) (3, 2) (4, 2) (4, 1) (3, 1) (2, 1) (1, 1) (1, 2) (2, 2) (2, 1) ------Note------ In the first test case, the flower planting starts at (1, 1) on the bottom-left corner and continues zigzagging along the edges until all positions are covered. In the second test case, the gardener also starts at (1, 1) and follows the zigzag pattern to fill the grid. In the third case, since it\'s a 2x2 grid, the pattern fully covers all positions in one zigzag cycle.","solution":"def zigzag_pattern(t, dimensions): results = [] for case in range(t): m, n = dimensions[case] result = [] left, right, top, bottom = 1, n, 1, m flower_bed = 1 while left <= right and top <= bottom: # Bottom edge for i in range(left, right + 1): result.append((bottom, i)) flower_bed += 1 bottom -= 1 # Right edge for i in range(bottom, top - 1, -1): result.append((i, right)) flower_bed += 1 right -= 1 if left <= right: # Top edge for i in range(right, left - 1, -1): result.append((top, i)) flower_bed += 1 top += 1 if top <= bottom: # Left edge for i in range(top, bottom + 1): result.append((i, left)) flower_bed += 1 left += 1 results.append(\' \'.join(f\'({x}, {y})\' for x, y in result)) return results"},{"question":"Write a function to implement the Breadth-First Search (BFS) algorithm on a given graph represented as an adjacency list. The function should return the order of nodes visited in BFS traversal starting from a given source node. Function Signature ```python def bfs(graph: dict, start: int) -> list: pass ``` Input - `graph`: A dictionary representing an undirected graph where the keys are node identifiers and the values are lists of adjacent nodes. - `start`: An integer representing the starting node for BFS traversal. Output - Return a list of node identifiers in the order they are visited during BFS. Constraints - 1 ≤ number of nodes ≤ 1000 - Each node identifier is a unique integer within the range [0, 999]. Example Input: ```python graph = { 0: [1, 2], 1: [0, 3, 4], 2: [0, 5], 3: [1], 4: [1], 5: [2] } start = 0 ``` Output: ```python [0, 1, 2, 3, 4, 5] ``` Input: ```python graph = { 0: [1, 2], 1: [0, 2, 3], 2: [0, 1, 4], 3: [1, 4], 4: [2, 3] } start = 2 ``` Output: ```python [2, 0, 1, 4, 3] ```","solution":"from collections import deque def bfs(graph: dict, start: int) -> list: Perform BFS traversal on a graph and return the order of nodes visited. :param graph: Dict[int, List[int]], a dictionary representing the adjacency list of the graph :param start: int, the starting node for BFS traversal :return: List[int], the order of nodes visited in BFS traversal visited = set() # Set to keep track of visited nodes queue = deque([start]) # Queue for BFS order = [] # List to store the order of visited nodes while queue: node = queue.popleft() if node not in visited: visited.add(node) order.append(node) # Add neighbours to the queue for neighbour in graph[node]: if neighbour not in visited: queue.append(neighbour) return order"},{"question":"You are managing several bike rental stations along a long, straight bike path. Each station rents out bikes for rides along the path, and riders can rent bikes to travel from one station to any other station. The bike path has `n` stations, numbered from 1 to `n` from left to right. Each station `i` has an integer `bi` representing the number of bikes it initially has. Bikes are rented from `n` riders, each described by three integers `si`, `ei`, and `ti`, indicating that the `i`-th rider rents a bike from station `si` to station `ei` and the time `ti` that the rental begins. The riders complete their journey instantly, meaning bikes will be available for others after time `ti`. Your task is to determine if it\'s possible to fulfill all bike rental requests based on the initial capacity of the stations. If it\'s possible, output \\"YES\\"; otherwise, output \\"NO\\". Input: The first line of the input contains two integers `n` and `r` (`2 ≤ n ≤ 100, 1 ≤ r ≤ 10^4`). The second line contains `n` integers `b1, b2, ..., bn` (`0 ≤ bi ≤ 1000`), representing the initial number of bikes at each station. Each of the next `r` lines contains three integers `si`, `ei`, and `ti` (`1 ≤ si, ei ≤ n, si ≠ ei, 0 ≤ ti ≤ 10^9`), representing the start station, the end station, and the start time of a rental, respectively. Output: Output \\"YES\\" if it\'s possible to complete all bike rentals given the initial capacities, otherwise, output \\"NO\\". Example: Input: 5 3 3 2 1 4 5 1 3 2 2 5 3 1 2 1 Output: YES Input: 4 4 1 2 1 1 1 2 0 2 3 1 3 4 2 1 4 3 Output: NO","solution":"from collections import defaultdict def can_fulfill_bike_rentals(n, r, bikes, requests): Determines if all bike rental requests can be fulfilled. :param n: int, number of stations :param r: int, number of rental requests :param bikes: list, initial number of bikes at each station :param requests: list of tuples, each tuple contains (si, ei, ti) :return: str, \\"YES\\" if all requests can be fulfilled, otherwise \\"NO\\" # Each station should have enough bikes to fulfill requests events = defaultdict(list) for si, ei, ti in requests: events[ti].append((si, ei)) current_bikes = bikes[:] # Check if all requests can be fulfilled in chronological order sorted_times = sorted(events.keys()) for time in sorted_times: for si, ei in events[time]: if current_bikes[si - 1] > 0: current_bikes[si-1] -= 1 current_bikes[ei - 1] += 1 else: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, determine the total number of distinct pairs (i, j) such that i < j and the sum of A[i] and A[j] is even. Input: - The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list. - The second line contains n integers, A_1, A_2, ..., A_n (-10^9 ≤ A_i ≤ 10^9), the elements of the list. Output: - Print a single integer, the number of distinct pairs (i, j) such that i < j and the sum of A[i] and A[j] is even. Examples: Input: 5 1 2 3 4 5 Output: 4 Input: 4 2 4 6 8 Output: 6 Input: 3 1 3 5 Output: 3 Note: In the first example, the valid pairs are: - (1, 3) -> 1 + 3 = 4 (even) - (1, 5) -> 1 + 5 = 6 (even) - (2, 4) -> 2 + 4 = 6 (even) - (3, 5) -> 3 + 5 = 8 (even) In the second example, all elements are even, so any pair will have an even sum. In the third example, all elements are odd, so any pair will have an even sum.","solution":"def count_even_pairs(n, A): Returns the number of distinct pairs (i, j) in the list A such that i < j and A[i] + A[j] is even. even_count = 0 odd_count = 0 for num in A: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Calculate pairs even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"You have been given a list of N strings. Each string contains lowercase English letters. Your task is to determine if it is possible to rearrange the characters of each string such that all strings become anagrams of each other. -----Constraints----- - 1 leq N leq 10 - 1 leq |S_i| leq 100 - S_i consists of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: N S_1 S_2 : S_N -----Output----- If it is possible to rearrange the characters of each string to make all strings anagrams of each other, print YES; if it is not possible, print NO. -----Sample Input----- 3 abc bca cab -----Sample Output----- YES -----Sample Input----- 3 abc bca xyz -----Sample Output----- NO","solution":"def are_anagrams_possible(strings): Determine if all strings can be rearranged to be anagrams of each other. :param strings: List of strings :return: \\"YES\\" if possible to rearrange all strings to be anagrams, otherwise \\"NO\\" from collections import Counter if not strings: return \\"NO\\" # All strings must have the same length length = len(strings[0]) if any(len(s) != length for s in strings): return \\"NO\\" # Build a character frequency counter for the first string reference_counter = Counter(strings[0]) # Compare the counter with other strings for s in strings[1:]: if Counter(s) != reference_counter: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with managing a network of water filtration stations distributed across a river. Each filtration station has a certain capacity, and the river is divided into segments, each with a certain amount of incoming pollutants. Your goal is to route the river flow such that it minimizes the maximum pollution in any segment downstream, while ensuring the water flow is maintained. The river can be represented as a tree with stations as nodes and segments as edges. Each edge has an associated pollution level. -----Input----- The input consists of the following: - One line containing a single integer 0 leq N leq 10^5, the number of filtration stations (nodes) in the network. - N-1 lines, each containing three integers u, v, w (1 leq u, v leq N, 0 leq w leq 10^4), representing an edge between nodes u and v with a pollution level w. -----Output----- Output a single line containing the minimum possible maximum pollution level in any segment downstream, after routing the river flow through the stations. -----Examples----- Sample Input 1: 4 1 2 3 1 3 2 3 4 1 Sample Output 1: 3 Sample Input 2: 5 1 2 5 1 3 6 2 4 1 3 5 2 Sample Output 2: 6","solution":"import heapq def min_max_pollution(N, edges): if N == 0: return 0 # No pollution if there are no nodes adj_list = [[] for _ in range(N+1)] for u, v, w in edges: adj_list[u].append((w, v)) adj_list[v].append((w, u)) def dijkstra(source): max_pollution = [float(\'inf\')] * (N + 1) max_pollution[source] = 0 priority_queue = [(0, source)] while priority_queue: current_pollution, node = heapq.heappop(priority_queue) for pollution, neighbor in adj_list[node]: max_segment_pollution = max(current_pollution, pollution) if max_segment_pollution < max_pollution[neighbor]: max_pollution[neighbor] = max_segment_pollution heapq.heappush(priority_queue, (max_segment_pollution, neighbor)) return max_pollution[1:] max_pollutions = dijkstra(1) # We can start our traversal from any node, using 1 as the root node return max(max_pollutions) # Example Usage N = 4 edges = [(1, 2, 3), (1, 3, 2), (3, 4, 1)] print(min_max_pollution(N, edges)) # Output: 3 N = 5 edges = [(1, 2, 5), (1, 3, 6), (2, 4, 1), (3, 5, 2)] print(min_max_pollution(N, edges)) # Output: 6"},{"question":"# Introduction You\'re working on a system that processes bank transactions. Transactions can be deposits or withdrawals, and each is associated with a specific date. # Task Write a function `process_transactions(transactions)` that accepts a list of transactions and returns the balance for each day in a dictionary format. Each transaction is represented as a dictionary with keys `\'date\'`, `\'type\'`, and `\'amount\'`. The type can be `\'deposit\'` or `\'withdrawal\'`. At the start, the balance is 0. If there are multiple transactions on the same date, process them in the order they appear in the input list. # Example Example Input: ```python transactions = [ {\'date\': \'2023-08-01\', \'type\': \'deposit\', \'amount\': 100}, {\'date\': \'2023-08-01\', \'type\': \'withdrawal\', \'amount\': 50}, {\'date\': \'2023-08-02\', \'type\': \'deposit\', \'amount\': 200}, {\'date\': \'2023-08-03\', \'type\': \'withdrawal\', \'amount\': 100} ] ``` Example Output: ```python { \'2023-08-01\': 50, \'2023-08-02\': 250, \'2023-08-03\': 150 } ``` Ensure your function correctly processes transactions, building a dictionary of dates with their respective balances.","solution":"def process_transactions(transactions): Processes a list of transactions and returns the end-of-day balances for each date. Args: transactions (list): List of transactions, wherein each transactions is a dictionary with keys: \'date\', \'type\' and \'amount\'. Returns: dict: A dictionary where the keys are dates as strings and values are end-of-day balances. balance = 0 result = {} for transaction in transactions: date = transaction[\'date\'] if date not in result: result[date] = balance if transaction[\'type\'] == \'deposit\': balance += transaction[\'amount\'] elif transaction[\'type\'] == \'withdrawal\': balance -= transaction[\'amount\'] result[date] = balance return result"},{"question":"Dany has a collection of unique dragon eggs. Each egg has a distinct weight. She wants to arrange these eggs in a single row such that the difference between the weights of any two adjacent eggs is at least d. You are tasked with counting the number of valid arrangements of the eggs with this constraint. A valid arrangement is defined as a permutation of the eggs\' weights where the absolute difference between the weights of any two consecutive eggs is at least d. -----Input----- The first line of input contains two integers n and d (1 ≤ n ≤ 12, 1 ≤ d ≤ 10^3) — the number of dragon eggs and the minimum difference in weight between any two adjacent dragon eggs. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) which are the weights of the dragon eggs. All weights are distinct. -----Output----- Output a single integer — the number of valid arrangements of the dragon eggs. -----Examples----- Input 3 2 1 4 7 Output 6 Input 4 3 1 2 3 5 Output 0 -----Note----- In the first example, n = 3, d = 2 and weights are 1, 4, and 7. There are 6 valid arrangements: (1, 4, 7), (1, 7, 4), (4, 1, 7), (4, 7, 1), (7, 1, 4), and (7, 4, 1). In the second example, n = 4, d = 3 and weights are 1, 2, 3, and 5. No arrangement meets the constraint that the difference between adjacent weights must be at least 3.","solution":"from itertools import permutations def count_valid_arrangements(n, d, weights): Counts the number of valid arrangements of dragon eggs such that the difference between the weights of any two adjacent eggs is at least d. valid_count = 0 # Generate all permutations of the weights all_perms = permutations(weights) for perm in all_perms: is_valid = True for i in range(n - 1): if abs(perm[i] - perm[i + 1]) < d: is_valid = False break if is_valid: valid_count += 1 return valid_count"},{"question":"A company is transporting goods across several warehouses and needs to optimize the delivery route to minimize travel time. The company has a list of all the delivery points and the travel time between each pair of points. Given a starting warehouse, determine the minimum time required to visit all other warehouses (traveling back to the starting warehouse) exactly once, forming a complete round trip. This problem can be represented as a Traveling Salesman Problem (TSP). Write a function that computes the minimum travel time required to complete the round trip. Function Description Complete the travelingSalesman function below. travelingSalesman has the following parameters: - int n: the number of delivery points - int start: the starting warehouse (0-indexed) - int[][] travel_times: a 2D array where travel_times[i][j] represents the travel time between warehouse i and warehouse j Returns int: the minimum travel time to visit all warehouses and return to the start Input Format The first line contains an integer, n, representing the number of delivery points. The second line contains an integer, start, representing the starting warehouse index. The next n lines each contain n integers, where the j-th integer in the i-th line represents travel_times[i][j]. Constraints 2 ≤ n ≤ 20 0 ≤ start < n 0 ≤ travel_times[i][j] ≤ 1000 travel_times[i][i] = 0 for all i (self-loop has zero cost) Sample Input 0: 4 0 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 0: 80 Explanation 0: One possible round trip is 0 -> 1 -> 3 -> 2 -> 0 with a total travel time of 10 + 25 + 30 + 15 = 80. Sample Input 1: 3 1 0 29 20 29 0 15 20 15 0 Sample Output 1: 64 Explanation 1: One possible round trip is 1 -> 2 -> 0 -> 1 with a total travel time of 15 + 20 + 29 = 64.","solution":"def travelingSalesman(n, start, travel_times): # Function to implement Traveling Salesman Problem (TSP) solver using dynamic programming from functools import lru_cache @lru_cache(None) def visit(city, visited): if visited == (1 << n) - 1: return travel_times[city][start] min_cost = float(\'inf\') for next_city in range(n): if visited & (1 << next_city) == 0: min_cost = min(min_cost, travel_times[city][next_city] + visit(next_city, visited | (1 << next_city))) return min_cost return visit(start, 1 << start)"},{"question":"Given a string array words[] of size N, you need to find the word that occurs the maximum number of times in the array. If multiple words have the same maximum frequency, choose the word that comes first lexicographically (alphabetically). Example 1: Input: N = 5 words = {\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"} Output: \\"apple\\" Explanation: Both \\"apple\\" and \\"banana\\" have a frequency of 2, but \\"apple\\" comes first lexicographically. Example 2: Input: N = 4 words = {\\"dog\\", \\"cat\\", \\"dog\\", \\"cat\\"} Output: \\"cat\\" Explanation: Both \\"dog\\" and \\"cat\\" have frequency of 2, but \\"cat\\" comes first lexicographically. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mostFrequentWord() which takes the string array words[] and its size N as input parameters and returns the word that occurs most frequently following the given conditions. Expected Time Complexity: O(N * log(N)) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^6 1 ≤ length of each word ≤ 20","solution":"def mostFrequentWord(words): from collections import Counter frequency = Counter(words) max_freq = max(frequency.values()) most_frequent_words = [word for word, freq in frequency.items() if freq == max_freq] return min(most_frequent_words)"},{"question":"A group of friends plan to explore a city using a shared bike system. Each friend can start at any one of the bike stations, marked from 1 to N, and use the bikes to travel between stations. The bike system has a unique feature where you are only allowed to travel from any station i to station j if the number of bikes available at station i is greater than the number of bikes at station j. Given the number of bikes at each station, determine the maximum number of different stations each friend can visit, starting from each station. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of bike stations. - The next line contains N integers, where the i-th integer represents the number of bikes available at the i-th station. ------ Output ------ For each test case, output a list of N integers, where the i-th integer is the maximum number of different stations that can be visited when starting from station i. ------ Constraints ------ 1≤T≤10 1≤N≤1000 1≤number of bikes at each station ≤1000 ------ Sample Input 1 ------ 1 4 3 1 4 2 ------ Sample Output 1 ------ 2 1 3 2 ------ Explanation 1 ------ - Starting from station 1 with 3 bikes, we can go to stations 2 and 4. - Starting from station 2 with 1 bike, we cannot go to any other stations. - Starting from station 3 with 4 bikes, we can go to stations 1, 2, and 4. - Starting from station 4 with 2 bikes, we can go to station 2. ----- Sample Input 2 ------ 1 3 5 3 1 ----- Sample Output 2 ------ 2 1 0 ----- Explanation 2 ------ - Starting from station 1 with 5 bikes, we can go to stations 2 and 3. - Starting from station 2 with 3 bikes, we can go to station 3. - Starting from station 3 with 1 bike, we cannot go to any other stations.","solution":"def max_stations_to_visit(T, test_cases): results = [] for i in range(T): N, bikes = test_cases[i] result = [] for j in range(N): count = 0 for k in range(N): if bikes[j] > bikes[k]: count += 1 result.append(count) results.append(result) return results"},{"question":"You are given an array of integers nums and an integer x. Find out whether there is a continuous subarray of non-zero length such that the sum of the elements in the subarray equals x. If such a subarray exists, return the length of the shortest subarray. Otherwise, return -1. -----Input----- The first line contains two integers n and x (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9) — the number of integers in the array and the target sum x. The second line contains n integers, separated by spaces, describing the array nums (-10^9 ≤ nums[i] ≤ 10^9). -----Output----- Output a single integer — the length of the shortest subarray with the sum x, or -1 if no such subarray exists. -----Examples----- Input 5 7 1 2 3 4 5 Output 2 Input 4 15 1 2 7 10 Output -1 -----Note----- In the first example, the shortest subarray with sum 7 is [3, 4]. In the second example, there is no subarray with sum 15.","solution":"def shortest_subarray_with_sum(nums, x): Returns the length of the shortest subarray with sum equal to x, or -1 if no such subarray exists. n = len(nums) sum_map = {0: -1} # To handle the sum from start case current_sum = 0 min_length = float(\'inf\') for i in range(n): current_sum += nums[i] if (current_sum - x) in sum_map: min_length = min(min_length, i - sum_map[current_sum - x]) if current_sum not in sum_map: sum_map[current_sum] = i return min_length if min_length != float(\'inf\') else -1"},{"question":"Write a function that accepts an integer n representing the number of rows in Pascal\'s Triangle and returns a list of lists containing the values in Pascal\'s Triangle up to the nth row. Pascal\'s Triangle is a triangular array of numbers where the values on the edges of the triangle are 1, and each inner value is the sum of the two values directly above it. For example, for n = 5, the returned list of lists would be: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Function signature: `def generate_pascals_triangle(n: int) -> list:` To solve this problem, consider the following guidelines: 1. Initialization: Start by creating a list to hold the rows of the triangle. 2. Iterative construction: For each row, initialize the first and last elements to 1. Compute the inner elements as the sum of elements from the previous row. 3. Edge cases: Consider scenarios where n = 0 (no rows) or n = 1 (single row). Constraints: - The input n will be between 0 and 20 inclusive. Write clean and efficient code that adheres to the outlined guidelines.","solution":"def generate_pascals_triangle(n: int) -> list: Generates the first n rows of Pascal\'s Triangle. Parameters: n (int): The number of rows of Pascal\'s Triangle to generate. Returns: list: A list of lists representing the first n rows of Pascal\'s Triangle. if n == 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Marie is engaged in an interesting puzzle game that involves arranging tiles. Each tile is marked with a letter from \'A\' to \'Z\', and Marie must arrange these tiles in a specific order on a grid according to the game\'s rules. However, the number of tiles is large, and manually counting the frequency of each letter can be tedious. She needs a way to automatically determine the frequency of each letter. Given a string `S` consisting of uppercase letters, implement a function to return the frequency of each letter from \'A\' to \'Z\' in the string. If a letter does not appear in the string, its frequency should be zero. **Function Signature:** ```python def letter_frequency(S: str) -> Dict[str, int]: pass ``` **Input:** - A single string `S` with a length between 1 and 10^6, consisting only of uppercase English letters. **Output:** - A dictionary where the keys are letters from \'A\' to \'Z\', and the values are the corresponding frequencies in the string `S`. **Example:** **Input:** ```plaintext S = \\"ABBACCA\\" ``` **Output:** ```plaintext { \'A\': 3, \'B\': 2, \'C\': 2, \'D\': 0, \'E\': 0, \'F\': 0, \'G\': 0, \'H\': 0, \'I\': 0, \'J\': 0, \'K\': 0, \'L\': 0, \'M\': 0, \'N\': 0, \'O\': 0, \'P\': 0, \'Q\': 0, \'R\': 0, \'S\': 0, \'T\': 0, \'U\': 0, \'V\': 0, \'W\': 0, \'X\': 0, \'Y\': 0, \'Z\': 0 } ``` **Note:** - The output should contain entries for all letters from \'A\' to \'Z\', even if their frequencies are zero. - The order of the letters in the output dictionary is important and should follow the alphabetical order from \'A\' to \'Z\'.","solution":"from typing import Dict def letter_frequency(S: str) -> Dict[str, int]: Returns the frequency of each letter from \'A\' to \'Z\' in the string S. # Initialize the dictionary with all letters from \'A\' to \'Z\' with frequency 0 freq = {chr(i): 0 for i in range(ord(\'A\'), ord(\'Z\') + 1)} # Count the frequency of each letter in the string S for char in S: if char in freq: freq[char] += 1 return freq"},{"question":"Write a function that simulates a simple version of a banking system. Your task is to implement the following features: 1. Create a new bank account with a unique account number. 2. Deposit money into a bank account. 3. Withdraw money from a bank account. 4. Transfer money between two bank accounts. 5. Check the balance of a bank account. The system will manage multiple accounts, each with a unique account number and an initial balance of zero. All transactions should be printed to the console, showing the type of transaction, the account numbers involved, and the transaction amount. If an operation is invalid (e.g., insufficient funds, invalid account number), print an error message. Input - The first line contains an integer n, the number of operations. - The next n lines contain the operations as strings with the following format: - \\"create\\" to create a new account. - \\"deposit X Y\\" to deposit an amount X into account number Y. - \\"withdraw X Y\\" to withdraw an amount X from account number Y. - \\"transfer X Y Z\\" to transfer an amount X from account number Y to account number Z. - \\"balance Y\\" to check the balance of account number Y. Output For each operation, print the result of the transaction. Example Input 8 create create deposit 100 1 deposit 200 2 withdraw 50 1 transfer 100 1 2 balance 1 balance 2 Output Created account 1 Created account 2 Deposited 100 to account 1 Deposited 200 to account 2 Withdrew 50 from account 1 Transferred 100 from account 1 to account 2 Account 1 balance: 50 Account 2 balance: 300 Additional Notes: - Assume all operation amounts (X) are positive integers. - Account numbers (Y and Z) are positive integers and start from 1, incrementing by 1 with each new account creation. - Each account starts with a balance of 0 and accounts created are numbered sequentially starting from 1.","solution":"class BankSystem: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self): account_number = self.next_account_number self.accounts[account_number] = 0 self.next_account_number += 1 print(f\\"Created account {account_number}\\") return account_number def deposit(self, amount, account_number): if self.valid_account(account_number): self.accounts[account_number] += amount print(f\\"Deposited {amount} to account {account_number}\\") else: print(f\\"Error: Invalid account number {account_number}\\") def withdraw(self, amount, account_number): if self.valid_account(account_number): if self.accounts[account_number] >= amount: self.accounts[account_number] -= amount print(f\\"Withdrew {amount} from account {account_number}\\") else: print(f\\"Error: Insufficient funds in account {account_number}\\") else: print(f\\"Error: Invalid account number {account_number}\\") def transfer(self, amount, from_account, to_account): if self.valid_account(from_account) and self.valid_account(to_account): if self.accounts[from_account] >= amount: self.accounts[from_account] -= amount self.accounts[to_account] += amount print(f\\"Transferred {amount} from account {from_account} to account {to_account}\\") else: print(f\\"Error: Insufficient funds in account {from_account}\\") else: if not self.valid_account(from_account): print(f\\"Error: Invalid account number {from_account}\\") if not self.valid_account(to_account): print(f\\"Error: Invalid account number {to_account}\\") def balance(self, account_number): if self.valid_account(account_number): print(f\\"Account {account_number} balance: {self.accounts[account_number]}\\") else: print(f\\"Error: Invalid account number {account_number}\\") def valid_account(self, account_number): return account_number in self.accounts def process_operations(operations): bank = BankSystem() for operation in operations: parts = operation.split() command = parts[0] if command == \\"create\\": bank.create_account() elif command == \\"deposit\\": amount = int(parts[1]) account_number = int(parts[2]) bank.deposit(amount, account_number) elif command == \\"withdraw\\": amount = int(parts[1]) account_number = int(parts[2]) bank.withdraw(amount, account_number) elif command == \\"transfer\\": amount = int(parts[1]) from_account = int(parts[2]) to_account = int(parts[3]) bank.transfer(amount, from_account, to_account) elif command == \\"balance\\": account_number = int(parts[1]) bank.balance(account_number)"},{"question":"Given two strings str1 and str2, write a function to determine if str2 is a scrambled string of str1. A scrambled string is defined as a string that can be obtained by recursively dividing the string into two non-empty substrings and swapping them. Example 1: Input: str1 = \\"great\\" str2 = \\"rgeat\\" Output: true Explanation: \\"great\\" can be split into \\"gr\\" and \\"eat\\". \\"eat\\" can be further split into \\"e\\" and \\"at\\". Then by swapping \\"gr\\" and \\"eat\\", we get \\"rgeat\\". Example 2: Input: str1 = \\"abcde\\" str2 = \\"caebd\\" Output: false Explanation: \\"caebd\\" is not a scrambled string of \\"abcde\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function isScramble() which takes the strings str1 and str2 as inputs and returns a boolean indicating whether str2 is a scrambled string of str1. Expected Time Complexity: O(N^4) Expected Auxiliary Space: O(N^3) Constraints: 1 <= |str1|, |str2| <= 30 str1 and str2 consist of lowercase English letters.","solution":"def isScramble(s1, s2): Determines if s2 is a scrambled string of s1. if len(s1) != len(s2): return False if s1 == s2: return True if sorted(s1) != sorted(s2): return False n = len(s1) for i in range(1, n): if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or (isScramble(s1[:i], s2[-i:]) and isScramble(s1[i:], s2[:-i])): return True return False"},{"question":"Let\'s define a sequence of operations on strings consisting of lowercase English letters. Given a string, you can perform two types of operations: 1. Select any two characters `a` and `b` from the string and swap them. 2. Select any single character `c` and remove it from the string. You need to determine the minimum number of operations required to transform a given string into a palindrome. If it is possible to transform the string into a palindrome using these operations, output the minimum number of operations required. If it is not possible, output `-1`. -----Input----- The first line contains a single integer `t` (1 ≤ t ≤ 10^4), the number of test cases. The next `t` lines each contain a single string `s` (1 ≤ |s| ≤ 100), the string you need to transform into a palindrome. -----Output----- For each test case, print a single integer representing the minimum number of operations required to transform the string into a palindrome, or `-1` if it is not possible. -----Examples----- Input 3 aabb abc racecar Output 2 -1 0 -----Note----- A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In the first example, \\"aabb\\" can be transformed into \\"abba\\" using two swaps: swap the first `a` with the second `b`, then swap the first `b` with the second `a`. In the second example, \\"abc\\" cannot be transformed into a palindrome regardless of the number of swaps and removals. In the third example, \\"racecar\\" is already a palindrome, so no operations are needed.","solution":"def min_operations_to_make_palindrome(s): from collections import Counter cnt = Counter(s) odd_count = sum(1 for count in cnt.values() if count % 2 != 0) if odd_count > 1: return -1 # Cannot be transformed into a palindrome n = len(s) start, end = 0, n - 1 operations = 0 s = list(s) while start < end: if s[start] == s[end]: start += 1 end -= 1 else: left = start right = end while left < right and s[left] != s[right]: right -= 1 if left == right: s[left], s[left + 1] = s[left + 1], s[left] operations += 1 continue for i in range(right, end): s[i], s[i + 1] = s[i + 1], s[i] operations += 1 start += 1 end -= 1 return operations def minimum_operations(test_cases): results = [] for s in test_cases: results.append(min_operations_to_make_palindrome(s)) return results"},{"question":"# Task You are given two strings, `str1` and `str2`. Your task is to determine the minimum number of single-character edits (insertions, deletions or substitutions) required to transform `str1` into `str2`. Write a function called `edit_distance` which takes in two arguments: `str1` and `str2`. The function should return the minimum number of edits required. Examples - For `str1 = \\"kitten\\"` and `str2 = \\"sitting\\"`, the function should return `3`. - Replace \'k\' with \'s\', replace \'e\' with \'i\', and insert \'g\'. - For `str1 = \\"flaw\\"` and `str2 = \\"lawn\\"`, the function should return `2`. - Replace \'f\' with \'l\' and append \'n\'. # Constraints - The length of both strings will not exceed 1000 characters. - The input strings will only contain lowercase English letters. # Implementation Notes - You can solve this using dynamic programming to ensure efficiency. - Consider creating a matrix where the cell `(i, j)` represents the edit distance between the first `i` characters of `str1` and the first `j` characters of `str2`. ```python def edit_distance(str1, str2): # Your implementation goes here pass ``` Expected Output The function should return an integer which represents the minimum number of edits required to transform `str1` to `str2`. Example Test Cases ```python assert edit_distance(\\"kitten\\", \\"sitting\\") == 3 assert edit_distance(\\"flaw\\", \\"lawn\\") == 2 assert edit_distance(\\"intention\\", \\"execution\\") == 5 ```","solution":"def edit_distance(str1, str2): Returns the minimum number of single-character edits (insertions, deletions or substitutions) required to transform str1 into str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, remove all characters of str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If current characters match, no edit is needed else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"In a warehouse, there are N robots each located at specific coordinates on a 2D grid. Each of the robots has a distinct battery level which represents the number of cells it can move either horizontally or vertically. The objective is to find out which robot can cover the maximum number of distinct cells starting from its position on the grid, given that movements are restricted to cells within the grid\'s boundaries. -----Input----- - The first line of the input contains three integers R, C, and N representing the number of rows, number of columns of the grid, and the number of robots respectively. - The next N lines each contain four space-separated integers X_i, Y_i, B_i, and ID_i. The integers X_i and Y_i represent the coordinates of the i-th robot (1-based indexing) on the grid, B_i represents the battery level, and ID_i is the unique identifier of the robot. -----Output----- Print the unique identifier of the robot that can cover the maximum number of distinct cells. If multiple robots can cover the same maximum number of cells, print the smallest identifier among them. -----Constraints----- - 1 le R, C le 100 - 1 le N le 100 - 1 le X_i le R - 1 le Y_i le C - 0 le B_i le 100 - 1 le ID_i le 10,000 -----Example Input----- 5 5 3 1 1 2 1001 2 3 1 1002 4 4 3 1003 -----Example Output----- 1003 -----Explanation----- Example case 1: The first robot at (1, 1) with a battery level of 2 can cover cells {(1,1), (2,1), (1,2), (3,1), (2,2), (1,3)}. Total distinct cells = 6. The second robot at (2, 3) with a battery level of 1 can cover cells {(2,3), (1,3), (3,3), (2,2), (2,4)}. Total distinct cells = 5. The third robot at (4, 4) with a battery level of 3 can cover more cells than the other two. Total distinct cells = 12. Hence, robot with ID 1003 covers the maximum number of cells.","solution":"def get_max_covered_robot(R, C, N, robots): def calculate_coverage(X, Y, B, R, C): cells = set() for dx in range(-B, B + 1): for dy in range(-B, B + 1): if abs(dx) + abs(dy) <= B: new_x = X + dx new_y = Y + dy if 1 <= new_x <= R and 1 <= new_y <= C: cells.add((new_x, new_y)) return len(cells) max_coverage = 0 best_robot_id = float(\'inf\') for X, Y, B, ID in robots: coverage = calculate_coverage(X, Y, B, R, C) if coverage > max_coverage or (coverage == max_coverage and ID < best_robot_id): max_coverage = coverage best_robot_id = ID return best_robot_id # Example Usage R = 5 C = 5 N = 3 robots = [ (1, 1, 2, 1001), (2, 3, 1, 1002), (4, 4, 3, 1003) ] print(get_max_covered_robot(R, C, N, robots)) # prints 1003"},{"question":"Consider an array of integers. You need to answer multiple queries where each query asks for the maximum sum of a subarray of a specified length within given indices. -----Input----- The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers — the elements of the array. The third line contains one integer q (1 ≤ q ≤ 10^5) — the number of queries. Then q lines follow. Each line contains three integers l, r and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ r - l + 1) denoting the range [l, r] and the length of the subarray. -----Output----- Print q integers, where the i-th integer is the answer to the i-th query. -----Examples----- Input 8 1 2 3 4 5 6 7 8 3 1 4 2 2 6 3 1 8 4 Output 7 15 26 Input 5 -1 2 -3 4 5 2 1 5 2 2 5 3 Output 9 6","solution":"def max_sum_subarray(n, arr, q, queries): Given an array and multiple queries for maximum sum of subarray of a certain length within a given range. results = [] # Answer each query for query in queries: l, r, k = query l -= 1 # Convert to 0-based index r -= 1 # Convert to 0-based index # Calculate max sum of subarray of length k in range [l, r] max_sum = float(\'-inf\') for start in range(l, r - k + 2): current_sum = sum(arr[start:start+k]) if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"You are given a sequence of integers a1, a2, ..., an. The sequence is called a balanced sequence if the sum of every contiguous subarray is never negative. In other words, for any subarray s of the given sequence, the sum of elements in s should be greater than or equal to zero. In this problem, you are required to determine whether a given integer sequence is balanced. Input The first line of input contains an integer n (1 ≤ n ≤ 200,000), the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (-109 ≤ a_i ≤ 109). Output Print \\"YES\\" if the sequence is balanced. Otherwise, print \\"NO\\". Examples Input 5 1 -1 2 -2 3 Output YES Input 4 -1 -2 -3 4 Output NO Note In the first example, all subarrays have non-negative sums, so the sequence is balanced. In the second example, the subarray [-1, -2, -3] has a sum of -6, which is negative, so the sequence is not balanced.","solution":"def is_balanced_sequence(n, sequence): Determines whether a sequence is balanced. A sequence is balanced if the sum of every contiguous subarray is never negative. :param n: int, the length of the sequence :param sequence: list of int, the sequence of integers :return: str, \\"YES\\" if the sequence is balanced, otherwise \\"NO\\" current_sum = 0 for num in sequence: current_sum += num if current_sum < 0: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes an array of integers and returns a new array with each value doubled. # Example ``` doubles([1, 2, 3]) == [2, 4, 6] ```","solution":"def doubles(arr): Takes an array of integers and returns a new array with each value doubled. :param arr: List of integers :return: List of integers with each value doubled return [x * 2 for x in arr]"},{"question":"You are given an array a of n integers. You have to perform the following operation any number of times (possibly zero): Select two indices i and j (1 leq i < j leq n) such that the subarray a[i...j] has a positive product. In this operation, you swap the elements a[i] and a[j]. Your task is to determine the lexicographically smallest array that can be obtained after performing such operations. The lexicographical order is determined by considering the first position where two arrays differ. The array with the smaller element at that position is considered smaller. Consider the array a = [3, -1, 2, -4, 5] Performing the operations: 1. Swap a[1] and a[3] to get [2, -1, 3, -4, 5] 2. Swap a[2] and a[3] to get [2, 3, -1, -4, 5] 3. Swap a[3] and a[4] to get [2, 3, -4, -1, 5] 4. Swap a[1] and a[2] to get [2, -4, 3, -1, 5] 5. Swap a[1] and a[4] to get [-1, -4, 3, 2, 5] The lexicographically smallest array we can obtain is [-1, -4, 2, 3, 5]. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains an integer n (2 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case print a single line containing n space-separated integers — the lexicographically smallest array that can be obtained after performing the described operation any number of times (possibly zero). -----Examples----- Input 3 5 3 -1 2 -4 5 6 -3 6 -2 9 -4 7 4 4 -3 2 1 Output -4 -1 2 3 5 -4 -3 -2 6 7 9 -3 1 2 4 -----Note----- In the first test case, we can apply the following swaps: 1. Swap a[3] and a[4] to get [3, -1, -4, 2, 5] 2. Swap a[2] and a[3] to get [3, -4, -1, 2, 5] 3. Swap a[1] and a[4] to get [-1, -4, 3, 2, 5] 4. Swap a[1] and a[2] to get [-4, -1, 3, 2, 5] So the lexicographically smallest array is [-4, -1, 2, 3, 5]. In the second test case: 1. Swap a[1] and a[5] to get [-4, 6, -2, 9, -3, 7] 2. Swap a[1] and a[3] to get [-4, 6, -3, 9, -2, 7] 3. Swap a[1] and a[3] to get [-4, -3, 6, 9, -2, 7] 4. Swap a[2] and a[3] to get [-4, -3, -2, 6, 9, 7] 5. Swap a[4] and a[5] to get [-4, -3, -2, 6, 7, 9] So the lexicographically smallest array is [-4, -3, -2, 6, 7, 9]. In the third test case: 1. Swap a[2] and a[3] to get [-3, 2, 4, 1] 2. Swap a[3] and a[4] to get [-3, 2, 1, 4] 3. Swap a[2] and a[3] to get [-3, 1, 2, 4] So the lexicographically smallest array is [-3, 1, 2, 4].","solution":"def lexicographically_smallest_array(t, cases): results = [] for case in cases: n, a = case a.sort() results.append(a) return results # Parsing and running the solution for example input if __name__ == \\"__main__\\": t = 3 cases = [ (5, [3, -1, 2, -4, 5]), (6, [-3, 6, -2, 9, -4, 7]), (4, [4, -3, 2, 1]) ] results = lexicographically_smallest_array(t, cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Given an array of integers, write a function that finds all unique subsets of the given array. The subsets should be returned in a sorted order (elements within a subset and the subsets themselves in ascending order). Duplicate subsets should be avoided. Example 1: Input: nums = [1, 2, 2] Output: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]] Example 2: Input: nums = [4, 4, 4, 1, 4] Output: [[], [1], [1, 4], [1, 4, 4], [1, 4, 4, 4], [1, 4, 4, 4, 4], [4], [4, 4], [4, 4, 4], [4, 4, 4, 4]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSubsets() which takes the array nums as input parameters and returns a list of lists denoting all unique subsets in sorted order. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(2^n) CONSTRAINTS: 1 <= |nums| <= 10 -10 <= nums[i] <= 10","solution":"def findSubsets(nums): Returns all unique subsets of the given array nums in sorted order. nums.sort() result = [] def backtrack(start, path): result.append(path) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Problem description. You are given an array of integers. Your task is to find and print the sum of the integers that are strictly greater than all the integers that came before them in the array. If there are no such integers, print 0. Input The first line contains an integer t, denoting the number of test cases. The next t lines each contain an integer n followed by n integers. Output For each of the t test cases, print the required sum on a new line. Constraints 1 <= t <= 10^5 1 <= n <= 10^5 -10^9 <= array elements <= 10^9 Example Input: 2 5 1 2 3 2 5 4 -1 3 2 4 Output: 10 7","solution":"def sum_of_strictly_greater(numbers): if not numbers: return 0 current_max = numbers[0] result_sum = 0 for num in numbers[1:]: if num > current_max: result_sum += num current_max = num return result_sum def process_test_cases(test_cases): results = [] for case in test_cases: n = case[0] numbers = case[1:] result = sum_of_strictly_greater(numbers) results.append(result) return results"},{"question":"You are working on a file management system, which allows users to transfer files from one directory to another. To make the system secure, the files should only be transferred if they meet certain criteria concerning the user’s access permissions. Each user has a list of files they can access and a list of files they are not permitted to view or edit. A transfer request consists of a source directory and a destination directory. The file management system needs to verify if a user can access all files in the source directory and if they have permission to add files to the destination directory. Implement a function that determines if the file transfer should be allowed based on the user’s permissions. **Input** The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of files the user can access. The second line contains `n` space-separated strings, each representing the names of the accessible files. The third line contains an integer `m` (1 ≤ m ≤ 1000), the number of files the user cannot access. The fourth line contains `m` space-separated strings, each representing the names of the files that are not accessible. The fifth line contains an integer `q` (1 ≤ q ≤ 100), the number of transfer requests. The subsequent `q` lines each contain two space-separated strings representing the source and destination directories. Each directory name can be either \\"accessible\\" (referring to the list of accessible files) or \\"not_accessible\\" (referring to the list of non-accessible files). **Output** Output `YES` if the transfer request can be completed based on the user\'s access permissions, otherwise output `NO`. **Examples** Input 3 file1 file2 file3 2 file4 file5 3 accessible not_accessible not_accessible accessible accessible accessible Output NO NO YES Input 2 fileA fileB 2 fileC fileD 2 accessible accessible accessible not_accessible Output YES NO","solution":"def can_transfer(n, accessible_files, m, non_accessible_files, q, transfers): result = [] accessible_set = set(accessible_files) non_accessible_set = set(non_accessible_files) for transfer in transfers: src, dst = transfer if src == \\"accessible\\": if dst == \\"accessible\\": result.append(\\"YES\\") elif dst == \\"not_accessible\\": result.append(\\"NO\\") elif src == \\"not_accessible\\": if dst == \\"accessible\\": result.append(\\"NO\\") elif dst == \\"not_accessible\\": result.append(\\"NO\\") return result"},{"question":"A famous software company wants to organize coding contests. The chosen location for the contest venue is a large circular stadium. To avoid scheduling conflicts, they decided to allocate non-overlapping slots for all participant groups. The stadium has a total capacity of (C) seats and there are (n) groups of participants, each group (i) having (d_i) participants. However, they are facing scheduling issues due to some contests requiring certain groups to be scheduled before others. Each group (i) has a start time (s_i) and a duration (t_i). Additionally, some groups (i) must be scheduled after group (j) (called dependencies) due to logistical reasons. A schedule needs to be created to ensure every group starts exactly at its start time and each group is assigned a slot without exceeding the stadium\'s capacity. If it is not possible to create such a schedule, the function should return \\"IMPOSSIBLE\\". Write a function `schedule_contests(n, C, groups, dependencies)` to determine whether a valid schedule exists. # Input - An integer (n) (1 ≤ (n) ≤ 100), the number of groups. - An integer (C) (1 ≤ (C) ≤ 100), the total capacity of the stadium. - A list `groups` of tuples where each tuple contains three integers: (d_i) (1 ≤ (d_i) ≤ 100), (s_i) (0 ≤ (s_i)), (t_i) (1 ≤ (t_i) ≤ 100), denoting the number of participants, start time and duration of each group (i). - A list `dependencies` of tuples where each tuple contains two integers (i) and (j) (0 ≤ (i, j) < (n)), denoting that group (i) must be scheduled after group (j). # Output - Return \\"POSSIBLE\\" if it\'s possible to create a valid schedule satisfying all conditions, otherwise, return \\"IMPOSSIBLE\\". # Example ```python n = 3 C = 200 groups = [(100, 0, 5), (50, 5, 5), (70, 10, 5)] dependencies = [(1, 0), (2, 1)] print(schedule_contests(n, C, groups, dependencies)) # Output: POSSIBLE ``` ```python n = 2 C = 150 groups = [(100, 0, 10), (200, 5, 10)] dependencies = [(1, 0)] print(schedule_contests(n, C, groups, dependencies)) # Output: IMPOSSIBLE ```","solution":"def schedule_contests(n, C, groups, dependencies): Determine whether a valid schedule exists for the contests. :param n: Number of groups :param C: Total capacity of the stadium :param groups: List of tuples (d_i, s_i, t_i) for each group :param dependencies: List of tuples (i, j) implying group i must be after group j :return: \\"POSSIBLE\\" if schedule is feasible, otherwise \\"IMPOSSIBLE\\" # Construct the schedule slots timeline = [] for d, s, t in groups: timeline.append((s, s + t, d)) # Check dependencies constraints for after, before in dependencies: s_after = groups[after][1] end_before = groups[before][1] + groups[before][2] if s_after < end_before: return \\"IMPOSSIBLE\\" # Check capacity constraints max_time = max(t[1] for t in timeline) capacity_usage = [0] * (max_time + 1) for start, end, people in timeline: for i in range(start, end): capacity_usage[i] += people if capacity_usage[i] > C: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"Given an array of integers, rearrange the elements of the array into a zigzag sequence. A sequence of numbers is said to be in a zigzag sequence if and only if the differences between successive numbers strictly alternate between positive and negative. In other words, given three consecutive integers a, b, and c in the sequence (in that order), they should satisfy either a < b > c or a > b < c. Write a function to rearrange the array into a zigzag sequence in place and return the array. Input First line contains T (number of test cases). Next T lines contain an integer N (the size of the array) followed by an array of N integers. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 -10^9 ≤ array[i] ≤ 10^9 SAMPLE INPUT 2 3 4 3 7 4 1 4 3 2 SAMPLE OUTPUT 3 7 4 1 3 2 4","solution":"def zigzag(arr): Rearranges the elements of the array into a zigzag sequence in place and returns the array. n = len(arr) for i in range(n-1): if i % 2 == 0: # ascending if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] else: # descending if arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] return arr def process_test_cases(test_cases): results = [] for (n, arr) in test_cases: results.append(zigzag(arr)) return results"},{"question":"Implement a function to simulate a flight scheduler. The scheduler must support the following operations efficiently: 1. **Add Flight Route**: Add a flight route between two cities with a given duration. 2. **Remove Flight Route**: Remove an existing flight route. 3. **Query Travel Time**: Given two cities, determine the shortest travel time between them. To simplify the problem, assume the flight routes are bidirectional (i.e., if there is a route from city A to city B, then there is also a route from city B to city A with the same duration). # Function Signature ```python class FlightScheduler: def __init__(self, n: int): Initialize the scheduler with n cities. def add_route(self, city1: int, city2: int, duration: int): Add a flight route between city1 and city2 with given duration. def remove_route(self, city1: int, city2: int): Remove the flight route between city1 and city2. def query_travel_time(self, city1: int, city2: int) -> int: Return the shortest travel time between city1 and city2, or -1 if no such route exists. ``` # Input - `__init__(self, n: int)`: initializes the scheduler with `n` cities (1 ≤ n ≤ 10^5). The cities are represented as integers from 1 to n. - `add_route(self, city1: int, city2: int, duration: int)`: adds a flight route between `city1` and `city2` with a given `duration` (1 ≤ duration ≤ 10^6). - `remove_route(self, city1: int, city2: int)`: removes the flight route between `city1` and `city2` if it exists. - `query_travel_time(self, city1: int, city2: int) -> int`: returns the shortest travel time between `city1` and `city2`, or -1 if no such route exists. # Output - For each `query_travel_time`, return the shortest travel time between the two cities or -1 if there is no valid path. # Example ```python # Example Usage scheduler = FlightScheduler(5) scheduler.add_route(1, 2, 5) scheduler.add_route(2, 3, 10) scheduler.add_route(3, 4, 3) scheduler.add_route(4, 5, 1) print(scheduler.query_travel_time(1, 5)) # Output: 19 scheduler.remove_route(3, 4) print(scheduler.query_travel_time(1, 5)) # Output: -1 ``` # Notes - Focus on the efficiency of the operations, given the constraints. - You can use data structures such as adjacency lists to represent the graph and algorithms like Dijkstra\'s for shortest path calculations. Consider using appropriate data structures to handle dynamic edge removals effectively.","solution":"import heapq from collections import defaultdict, deque class FlightScheduler: def __init__(self, n: int): Initialize the scheduler with n cities. self.n = n self.graph = defaultdict(list) def add_route(self, city1: int, city2: int, duration: int): Add a flight route between city1 and city2 with given duration. self.graph[city1].append((city2, duration)) self.graph[city2].append((city1, duration)) def remove_route(self, city1: int, city2: int): Remove the flight route between city1 and city2. self.graph[city1] = [(c, d) for c, d in self.graph[city1] if c != city2] self.graph[city2] = [(c, d) for c, d in self.graph[city2] if c != city1] def query_travel_time(self, city1: int, city2: int) -> int: Return the shortest travel time between city1 and city2, or -1 if no such route exists. if city1 == city2: return 0 # Dijkstra\'s Algorithm for shortest path min_heap = [(0, city1)] distances = {i: float(\'inf\') for i in range(1, self.n + 1)} distances[city1] = 0 while min_heap: current_dist, current_city = heapq.heappop(min_heap) if current_city == city2: return current_dist for neighbor, weight in self.graph[current_city]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1"},{"question":"Nina loves solving puzzles, especially those that involve prime numbers. She recently stumbled upon an interesting puzzle and wants you to help her solve it. The puzzle works with a grid that contains various numbers. Nina\'s task is to find the largest prime number within the grid. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to write a program that, given a grid of numbers, determines the largest prime number in the grid. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the following m lines contains n integers. Each integer aij (0 ≤ aij ≤ 1000) represents the number in the cell at the i-th row and j-th column of the grid. Output Print the largest prime number found in the grid. If there are no prime numbers in the grid, print -1. Examples Input 3 3 8 23 15 29 13 7 6 18 25 Output 29 Input 2 2 4 8 6 10 Output -1 Note In the first example, the prime numbers in the grid are 23, 29, 13, and 7, with the largest being 29. In the second example, there are no prime numbers in the grid, so the output is -1.","solution":"def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def largest_prime_in_grid(grid): largest_prime = -1 for row in grid: for num in row: if is_prime(num): if num > largest_prime: largest_prime = num return largest_prime def solve(m, n, grid): return largest_prime_in_grid(grid)"},{"question":"A company is organizing a coding competition, and they want to create unique pairs of participants to form coding teams. Let\'s represent the participants by numbers from 1 to 2n. The company wants the difference between the participants\' numbers in each pair to be exactly k. Also, no participant should be part of more than one team. You have to determine if it\'s possible to form exactly n teams with these requirements, and if yes, output one possible way to pair them. Input - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of teams and the required difference between the participant numbers in each pair. Output - If it\'s not possible to form such teams, output \\"NO\\" (without quotes). - Otherwise, in the first line, output \\"YES\\" (without quotes). Then, output n lines, each containing two integers — the numbers of the participants that form each team. Each participant number should appear exactly once in the output. Examples Input 3 2 Output YES 1 3 2 4 5 7 Input 4 5 Output NO Note In the first test case, the differences between the participants in each pair are: 3-1=2, 4-2=2, and 7-5=2 which meets the requirement. In the second test case, it\'s impossible to form 4 teams such that the difference between the participants\' numbers in each pair is exactly 5.","solution":"def form_teams(n, k): Determines if it is possible to form exactly n teams with the required difference k, and if yes, outputs one possible way to pair them. :param n: Number of teams to form :param k: Required difference between participant numbers in each pair :return: A tuple with a string \\"YES\\" or \\"NO\\" and the pairing list if \\"YES\\" pairs = [] for i in range(1, n + 1): if i + k > 2 * n: return \\"NO\\" pairs.append((i, i + k)) return \\"YES\\", pairs"},{"question":"In a distant village, there is a unique marketplace where prices change in a particular pattern. Each day, the price of an item doubles if it isn\'t sold that day. A local shopkeeper can take advantage of this by deciding the best day to sell the item over a given period. You are given the number of days and the starting price of the item. Your task is to determine the maximum profit that can be obtained by selling the item on any one of the given days. -----Input----- The first line contains one integer t (1 le t le 100) – the number of test cases. The first line of each test case contains two integers d and p (1 le d le 10^5, 1 le p le 10^5) – the number of days and the starting price of the item respectively. -----Output----- For each test case, print one integer – the maximum profit that can be obtained by selling the item on any one of the given days. -----Example----- Input 3 3 2 4 1 1 100 Output 8 8 100 -----Note----- In the first test case, the prices for each day are [2, 4, 8]. The maximum profit is obtained by selling the item on the third day for a price of 8. In the second test case, the prices for each day are [1, 2, 4, 8]. The maximum profit is obtained by selling the item on the fourth day for a price of 8. In the third test case, there is only one day, so the item is sold at the starting price of 100.","solution":"def maximum_profit(t, test_cases): Computes the maximum profit for a given number of test cases. Args: t (int): Number of test cases. test_cases (list of tuple): Each tuple contains two integers d and p representing the number of days and the starting price of the item respectively. Returns: list of int: Maximum profit for each test case. results = [] for case in test_cases: d, p = case max_profit = p * (2 ** (d - 1)) results.append(max_profit) return results"},{"question":"You are tasked with developing a program to decode a secret message hidden within a block of text. The secret message is constructed by taking the first letter of each word in the text and concatenating them together. Your task is to write a function that takes a string of text and returns the decoded secret message. # Input - A single string `s` consisting of words separated by spaces. The string will contain only alphabetical characters and spaces. # Output - A single string which is the decoded secret message. # Example __Input:__ ``` \\"The quick brown fox jumps over the lazy dog\\" ``` __Output:__ ``` \\"Tqbfjotld\\" ``` # Constraints - The input string `s` will not be empty. - Words in the string will be separated by exactly one space. - There will be no leading or trailing spaces. # Function Signature ```python def decode_secret_message(s: str) -> str: pass ``` **Note**: Ensure the function handles edge cases efficiently and perform input validation as necessary to match the feel and consistency of the provided sample question.","solution":"def decode_secret_message(s: str) -> str: This function takes a string of text (with words separated by spaces) and concatenates the first letter of each word to decode the secret message. :param s: A string consisting of words separated by spaces. :return: A string that is the decoded secret message. # Split the string into words words = s.split() # Get the first letter of each word and concatenate them secret_message = \'\'.join(word[0] for word in words) return secret_message"},{"question":"Create a function that takes a single string and returns `true` if all characters in the string are unique and `false` otherwise. Assume the input string contains only lowercase alphabetical characters. ```JS Examples: 1) input = \\"abcdef\\" => true because all characters are unique 2) input = \\"hello\\" => false because \'l\' is repeated 3) input = \\"world\\" => true because all characters are unique 4) input = \\"apple\\" => false because \'p\' is repeated ```","solution":"def is_unique(string): Returns True if all characters in the string are unique, otherwise False. seen_characters = set() for char in string: if char in seen_characters: return False seen_characters.add(char) return True"},{"question":"You have been tasked to develop a simulation for a small train station. The station has a single track that trains use to arrive and depart. Each train has a unique identifier and schedule, consisting of an arrival and departure time. Your task is to write a program that helps determine if a given train can be scheduled without causing any conflicts. Each train\'s schedule is presented as a string in the format: `\\"aaaaa,hh:mm,hh:mm\\"` where `aaaaa` represents the train\'s unique ID (a string), `hh:mm` (24-hour time format) represents the arrival time, and `hh:mm` represents the departure time. For example, `\\"TR001,08:15,09:00\\"` denotes that train \\"TR001\\" arrives at 08:15 and departs at 09:00. The station can accommodate multiple trains as long as their schedules do not overlap; a train must leave the station before the next one arrives. You will be given a list of train schedules, and you need to determine if all the trains can be scheduled without conflicts. If so, return `\\"Schedule is feasible\\"`. If there is any conflict, return `\\"Conflict detected\\"`. For example: - Input: `[\\"TR001,08:15,09:00\\", \\"TR002,09:01,10:00\\", \\"TR003,10:05,11:00\\"]` - Output: `\\"Schedule is feasible\\"` - Input: `[\\"TR001,08:15,09:00\\", \\"TR002,08:50,10:00\\", \\"TR003,10:05,11:00\\"]` - Output: `\\"Conflict detected\\"` Function Signature: ```python def check_schedule(train_schedules: List[str]) -> str: pass ``` **Note**: Be sure to account for edge cases, such as an empty list of schedules, and handle time formatting and comparisons appropriately.","solution":"from typing import List def check_schedule(train_schedules: List[str]) -> str: Determines if all the provided train schedules can be accommodated without any conflicts. schedule_times = [] for schedule in train_schedules: _, arrival, departure = schedule.split(\',\') schedule_times.append((arrival, departure)) # Sort the schedules by arrival time schedule_times.sort() # Compare each train\'s departure time with the next train\'s arrival time for i in range(1, len(schedule_times)): if schedule_times[i-1][1] >= schedule_times[i][0]: return \\"Conflict detected\\" return \\"Schedule is feasible\\""},{"question":"Given a list of integers, your task is to find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given threshold. If no such subarray exists, return 0. Input: - The first line contains an integer n, the number of elements in the list. - The second line contains n space-separated integers, representing the elements of the list. - The third line contains an integer d, the threshold value. Output: - Print a single integer, the length of the longest contiguous subarray meeting the criteria. Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ array[i] ≤ 10^4 - 0 ≤ d ≤ 10^4 Example: Input: 7 1 3 2 6 8 4 7 3 Output: 3 Explanation: One of the longest contiguous subarray which satisfies the given condition is [1, 3, 2] with a length of 3. Another such subarray is [6, 8, 4].","solution":"def longest_contiguous_subarray(n, array, d): Finds the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to d. Parameters: n (int): Number of elements in the list array (list of int): List of integers d (int): Threshold value Returns: int: Length of the longest contiguous subarray if n == 0: return 0 max_length = 0 start = 0 for end in range(n): while max(array[start:end+1]) - min(array[start:end+1]) > d: start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a sequence of integers and a target sum. Your task is to determine if there is a subarray (continuous segment) of the given sequence that sums up to the target sum. The sequence can contain both positive and negative integers. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line of each test case contains two integers N and S, where N is the length of the sequence and S is the target sum. - The second line contains N space-separated integers, representing the sequence. ------ Output Format ------ For each test case, print \\"YES\\" if there exists a subarray that sums up to the target sum S. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} -10^{4} ≤ sequence_element ≤ 10^{4} -10^{9} ≤ S ≤ 10^{9} The total number of elements across all test cases will not exceed 10^{6}. ------ Sample Input 1 ------ 3 5 12 1 2 3 7 5 5 10 1 2 3 4 5 5 -1 1 -1 1 -1 1 ------ Sample Output 1 ------ YES YES YES ------ Explanation ------ Test Case 1: The subarray [2, 3, 7] sums up to 12, hence the output is \\"YES\\". Test Case 2: The subarray [1, 2, 3, 4] sums up to 10, hence the output is \\"YES\\". Test Case 3: The subarray [1, -1] sums up to 0, which is not -1, but the subarray [1, -1, 1, -1, 1] sums up to -1, hence the output is \\"YES\\".","solution":"def subarray_sum_exists(T, cases): results = [] for case in cases: N, S, sequence = case current_sum = 0 prefix_sums = {0} for number in sequence: current_sum += number if (current_sum - S) in prefix_sums: results.append(\\"YES\\") break prefix_sums.add(current_sum) else: results.append(\\"NO\\") return results # Example usage T = 3 cases = [ (5, 12, [1, 2, 3, 7, 5]), (5, 10, [1, 2, 3, 4, 5]), (5, -1, [1, -1, 1, -1, 1]) ] print(subarray_sum_exists(T, cases)) # Output: [\'YES\', \'YES\', \'YES\']"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],z={key:0},R={key:1};function P(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",z,"See more"))],8,j)):l("",!0)])}const M=d(A,[["render",P],["__scopeId","data-v-3effa934"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/9.md","filePath":"quotes/9.md"}'),L={name:"quotes/9.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
