import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-a9dc1e1f"]]),A=JSON.parse('[{"question":"You are given a list of N integers. Perform the following tasks: 1. Find the maximum and minimum elements of the list. 2. Compute the sum of all elements in the list. 3. Determine whether the list contains at least one pair of elements whose sum is even. Constraints * 1 ≤ N ≤ 10^5 * -10^9 ≤ elements of the list ≤ 10^9 Input * First line contains integer N, the length of the list. * Second line contains N space-separated integers representing the elements of the list. Output * First line should contain the maximum and minimum elements separated by a space. * Second line should contain the sum of the elements. * Third line should contain \\"YES\\" if there is at least one pair of elements whose sum is even, otherwise \\"NO\\". Example Input 5 1 2 3 4 5 Output 5 1 15 YES Input 4 -1 -2 -3 -4 Output -1 -4 -10 YES","solution":"def process_list(numbers): Process the list of numbers for the given tasks: 1. Find the maximum and minimum elements. 2. Compute the sum of all elements. 3. Determine whether the list contains at least one pair of elements whose sum is even. max_element = max(numbers) min_element = min(numbers) total_sum = sum(numbers) even_count = sum(1 for num in numbers if num % 2 == 0) odd_count = len(numbers) - even_count sum_is_even = even_count > 1 or (even_count > 0 and odd_count > 0) result = (max_element, min_element, total_sum, \\"YES\\" if sum_is_even else \\"NO\\") return result"},{"question":"Mike is really interested in prime numbers and their properties. One of his interests is the sum of prime factors of a number. He defines the sum of prime factors as follows: For a given integer M, find all its prime factors and compute their sum. If a prime factor appears multiple times in the factorization of M, it should still only be counted once in the sum. Now, he wants you to write a program that can calculate the sum of prime factors for different numbers. Input The first line of the input contains an integer Q denoting the number of queries. The description of Q queries follows. Each of the next Q lines contains a single integer M. Output For each query, output a single line containing the sum of prime factors of the corresponding integer. Constraints 1 ≤ Q ≤ 100,000 2 ≤ M ≤ 1,000,000 Example Input: 3 12 18 45 Output: 5 5 8","solution":"def sum_of_prime_factors(n): Returns the sum of prime factors of n. prime_factors = set() i = 2 while n % i == 0: prime_factors.add(i) n //= i i = 3 while i * i <= n: while n % i == 0: prime_factors.add(i) n //= i i += 2 if n > 1: prime_factors.add(n) return sum(prime_factors) def process_queries(queries): Takes a list of integers (queries) and returns a list of sums of prime factors of those integers. return [sum_of_prime_factors(m) for m in queries]"},{"question":"Given a list of strings, we define the \\"common character count\\" as the number of characters that appear in every string on the list. The same character could appear multiple times in different strings, but it needs to appear at least once in every string to be counted. Write a function that takes a list of strings and returns the common character count. Example: Input: ```python [\\"bella\\", \\"label\\", \\"roller\\"] ``` Output: 3 Explanation: The common characters among the strings are \\"e\\", \\"l\\", and \\"l\\". Each of these appears in every string in the input list. Input: ```python [\\"cool\\", \\"lock\\", \\"cook\\"] ``` Output: 2 Explanation: The common characters among the strings are \\"c\\" and \\"o\\". Each of these appears in every string in the input list. Function Signature: ```python def common_character_count(strings: List[str]) -> int: # your code here ```","solution":"from typing import List from collections import Counter def common_character_count(strings: List[str]) -> int: if not strings: return 0 # Initialize with the character count of the first string common_chars = Counter(strings[0]) # Intersect the counts with each subsequent string for s in strings[1:]: common_chars &= Counter(s) # Summing the counts of common characters return sum(common_chars.values())"},{"question":"A retailer is organizing a clearance sale and offers a series of discounts on select products. Each product has a base price, and a sequence of discount percentages is applied to it sequentially. Can you write a program to calculate the final price of each product after all discounts are applied? Input Format The first line contains the number of test cases T, T lines follow. Each line contains an integer N (the number of discounts), followed by a float B (the base price of the product), and then N space-separated float values denoting the discount percentages. Output Format For each test case, print the final price of the product after applying all the discounts, rounded to two decimal places. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10 0 < B ≤ 10^5 0 ≤ discount percentages < 100 SAMPLE INPUT 2 1 100.0 20.0 2 200.0 10.0 25.0 SAMPLE OUTPUT 80.00 135.00 Explanation Case 1: A single discount of 20% is applied to the base price of 100.0, resulting in a final price of 80.00. Case 2: Two discounts, 10% and 25%, are applied sequentially to the base price of 200.0. The first discount reduces the price to 180.0, and the second discount further reduces it to 135.00.","solution":"def final_price(num_discounts, base_price, discounts): Calculate the final price after applying a sequence of discounts. Args: num_discounts (int): The number of discounts. base_price (float): The base price of the product. discounts (list of float): The discounts to be applied. Returns: float: The final price rounded to two decimal places. final_price = base_price for discount in discounts: final_price -= (final_price * discount / 100) return round(final_price, 2) def calculate_final_prices(test_cases): Calculate the final prices for a list of test cases. Args: test_cases (list of tuples): Each tuple contains the number of discounts, base price, and a list of discounts. Returns: list of float: The final prices for each test case. results = [] for case in test_cases: num_discounts, base_price, discounts = case results.append(final_price(num_discounts, base_price, discounts)) return results"},{"question":"You are developing a version control system and want to implement a feature that helps users to track changes between different versions of a file. One of the primary operations involves comparing the contents of two versions of a file and identifying the minimal edit distance between them, which helps to understand how significantly they differ. Formally, given two strings, your task is to write a program that computes the minimal edit distance between them. The edit distance is defined as the minimum number of operations required to transform one string into the other, where the allowed operations are: - Insertion of a single character. - Deletion of a single character. - Substitution of a single character. Your program should output the minimal edit distance for each pair of strings provided in the queries. Input The input consists of a single test case in the following format: T S_1^1 S_2^1 ... S_1^T S_2^T The first line contains an integer T (1 leq T leq 1,000), indicating the number of pairs of strings. Each of the following T lines contains two strings S_1^i and S_2^i (1 leq |S_1^i|, |S_2^i| leq 1,000) for 1 leq i leq T, representing the strings in the i-th pair. All strings consist only of lowercase English letters. Output For each pair of strings, output the minimal edit distance on a new line. Examples Input 3 kitten sitting flaw lawn intention execution Output 3 2 5 Input 2 hello world algorithm altruism Output 4 6","solution":"def minimal_edit_distance(str1, str2): Compute the minimal edit distance between two strings using dynamic programming. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Minimum operations = j (all insertions) elif j == 0: dp[i][j] = i # Minimum operations = i (all deletions) elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Substitution return dp[m][n] def process_queries(T, queries): results = [] for i in range(T): str1, str2 = queries[i] results.append(minimal_edit_distance(str1, str2)) return results"},{"question":"You are given a grid of size N x M, consisting of \'.\' (free cell) and \'*\' (blocked cell). You need to determine the number of distinct islands in the grid. An island is defined as a maximal group of 4-directionally (up, down, left, and right) connected free cells. Input: The input starts with two integers N and M denoting the number of rows and columns, respectively. Following this, there are N lines, each containing M characters, either \'.\' or \'*\' representing the grid. Output: Print a single integer denoting the number of distinct islands. Constraints: 1 ≤ N, M ≤ 1000 SAMPLE INPUT: 4 5 ....* .*... ..*.. *.... SAMPLE OUTPUT: 4 Explanation: In the given grid, there are 4 distinct islands: 1. The first row forms one island: \'....\' 2. The second row has two separate lands separated by a \'*\': \'.*...\' 3. The third row forms a separate single-cell island: \'..*..\' 4. The third row also forms another small island, connecting the bottom most cell: \'*....\' Note that the blocks with \'*\' break the islands apart, causing the free cells around them to form distinct islands rather than a single one.","solution":"def count_islands(grid): Counts the number of distinct islands in the grid. An island is defined as a maximal group of 4-directionally (up, down, left, and right) connected free cells (\'.\'). if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'.\': return grid[x][y] = \'*\' # Mark visited # Explore all 4 directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) island_count += 1 return island_count"},{"question":"Task Design an algorithm that helps Anna identify the longest continuous subsequence in a given string of lower case English letters such that every letter in the subsequence is unique. If there are multiple solutions, pick the one that appears first in the string. Input - The input consists of a single string `s` with length `n`, where (1 leq n leq 10^5). - The string only contains lower case English letters. Output - The output should be two integers representing the starting and ending indices (1-based) of the longest subsequence of unique letters. - If the longest subsequence can be found in multiple places, return the indices of the first occurrence. Examples **Example 1:** Input: ``` abcabcbb ``` Output: ``` 1 3 ``` **Example 2:** Input: ``` bbbbb ``` Output: ``` 1 1 ``` **Example 3:** Input: ``` pwwkew ``` Output: ``` 3 5 ``` **Example 4:** Input: ``` abcdefg ``` Output: ``` 1 7 ``` Note - In the first example, the longest subsequence of unique characters is \\"abc\\", which starts at index 1 and ends at index 3. - In the second example, the string \\"bbbbb\\" has only one unique letter, so the longest subsequence contains just one character. - In the third example, \\"wke\\" is the longest subsequence of unique characters and starts at index 3 and ends at index 5. - In the fourth example, the whole string \\"abcdefg\\" is the longest subsequence of unique characters, starting at index 1 and ending at index 7.","solution":"def longest_unique_subsequence(s): Returns the starting and ending indices (1-based) of the longest subsequence of unique letters. last_seen = {} start = 0 max_length = 0 start_index = 0 for i in range(len(s)): if s[i] in last_seen: start = max(start, last_seen[s[i]] + 1) last_seen[s[i]] = i if i - start + 1 > max_length: max_length = i - start + 1 start_index = start return start_index + 1, start_index + max_length"},{"question":"A city has a rectangular grid layout represented by n × m cells, where each cell can be either a park, a building, or empty land. The goal for the city planners is to construct a walking path from one park to another. The walking path should follow certain rules: 1. The path should start from one park and end at another park. 2. The path can only traverse through empty land cells and must not pass through cells containing buildings. 3. The path should pass through the minimum number of empty land cells. 4. The path can only move vertically or horizontally, not diagonally. Given the layout of the city, help the planners determine the length of the shortest such path, or determine that no such path exists. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m characters where each character is either \'P\', \'B\', or \'.\' representing a park, building, and empty land, respectively. There will be at least two parks on the grid. Output Print a single integer — the length of the shortest path that connects any two parks, or -1 if no such path exists. Examples Input 5 5 P.B.. .BB.. ..P.. ..B.. ..... Output 4 Input 4 4 P.B. .BB. ..B. ..P. Output 5 Input 3 3 PB. BBB P.. Output -1 Note In the first sample, one of the shortest paths between two parks passes through four empty land cells: (1,1) -> (2,1) -> (3,1) -> (3,3) In the second sample, the shortest path between two parks passes through five empty land cells: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (4,3) In the third sample, there is no valid path that connects the parks, so the output is -1.","solution":"import heapq def shortest_path(n, m, grid): def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: if 0 <= x + dx < n and 0 <= y + dy < m: yield x + dx, y + dy def bfs(start): distances = [[float(\'inf\')] * m for _ in range(n)] queue = [(0, start[0], start[1])] distances[start[0]][start[1]] = 0 while queue: dist, x, y = heapq.heappop(queue) if dist > distances[x][y]: continue for nx, ny in neighbors(x, y): if grid[nx][ny] != \'B\' and distances[nx][ny] > dist + 1: distances[nx][ny] = dist + 1 heapq.heappush(queue, (distances[nx][ny], nx, ny)) return distances parks = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'P\'] minimal_distance = float(\'inf\') for (i_start, j_start) in parks: distances = bfs((i_start, j_start)) for i_end, j_end in parks: if (i_end, j_end) != (i_start, j_start) and distances[i_end][j_end] < minimal_distance: minimal_distance = distances[i_end][j_end] return -1 if minimal_distance == float(\'inf\') else minimal_distance"},{"question":"You are given an integer array representing the heights of buildings in a row. A person can jump between adjacent buildings if the height difference is at most K. Your task is to determine if it is possible to start from the first building and reach the last building using the allowed jumps. Constraints * 1 leq n leq 10^5, where n is the number of buildings * 1 leq heights[i] leq 10^9, where heights[i] is the height of the i-th building * 1 leq K leq 10^9 Input Input is given from Standard Input in the following format: n K heights[0] heights[1] ... heights[n-1] Output If it is possible to reach the last building from the first building, print `YES`; otherwise, print `NO`. Examples Input 5 3 1 2 5 3 4 Output YES Input 5 1 1 2 5 3 4 Output NO Input 3 10 1 9 19 Output YES","solution":"def can_reach_last_building(n, K, heights): Determines if it is possible to reach the last building from the first building given the jump height constraint K. Parameters: n(int): Number of buildings. K(int): Maximum allowed height difference between adjacent buildings. heights(List[int]): List of heights of the buildings. Returns: str: \\"YES\\" if it is possible to reach the last building, else \\"NO\\". for i in range(n - 1): if abs(heights[i] - heights[i + 1]) > K: return \\"NO\\" return \\"YES\\""},{"question":"Sita is very fond of palindromic words and loves to create them. She recently found a huge collection of random strings from an old library. She is curious to find out the longest palindromic substring that can be formed from each string. She seeks your help to determine the length of the longest palindromic substring for each string in her collection. A string is called a palindrome if it reads the same forwards and backwards. Input format: - T: The number of test cases - For each test case: - String S Output format: - For each string, output the length of the longest palindromic substring. Sample Input 3 babad cbbd abcda Sample Output 3 2 1 Explanation: - For the string \\"babad\\", the longest palindromic substrings are \\"bab\\" and \\"aba\\", each of length 3. - For the string \\"cbbd\\", the longest palindromic substring is \\"bb\\", of length 2. - For the string \\"abcda\\", the longest palindromic substrings can only be individual letters, with length 1 each. Write a program to solve this problem efficiently for each input string.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string. n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True max_length = 2 start = i for k in range(3, n+1): for i in range(n - k + 1): j = i + k - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True if k > max_length: max_length = k start = i return max_length def get_longest_palindromic_substrings_length(T, strings): Given T test cases and a list of strings, returns a list with the length of the longest palindromic substring for each string. results = [] for s in strings: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Livia is an avid collector of rare gemstones. She has a unique way of organizing her collection by placing the gemstones in a magical grid. This grid has the special property that all cells of the same row and column contain gemstones of the same type. Livia wants to determine which gemstone type appears the most times in the grid. She needs your help to find the gemstone type that appears the most frequently. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, each character representing a gemstone type. The letters are all uppercase English letters \'A\' to \'Z\'. Output Output a single character, the gemstone type that appears the most in the grid. If there is a tie, output the lexicographically smallest gemstone type. Examples Input 3 4 AAAA ABCA AAAA Output A Input 2 2 AA BB Output A Input 4 3 ZZZ YYY XXX ZZZ Output Z Note In the first example, the gemstone \'A\' appears 10 times, \'B\' appears 1 time, and \'C\' appears 1 time. Hence, \'A\' is the most frequent gemstone type. In the second example, both \'A\' and \'B\' appear 2 times each, but \'A\' is lexicographically smaller than \'B\'. In the third example, \'Z\' appears 6 times, \'Y\' appears 3 times, and \'X\' appears 3 times. Hence, \'Z\' is the most frequent gemstone type.","solution":"def most_frequent_gemstone(n, m, grid): from collections import Counter gemstone_count = Counter() for row in grid: gemstone_count.update(row) # Find the most frequent gemstone most_frequent = None max_count = 0 for gemstone, count in gemstone_count.items(): if count > max_count or (count == max_count and (most_frequent is None or gemstone < most_frequent)): most_frequent = gemstone max_count = count return most_frequent # Example usage: # grid = [\'AAAA\', \'ABCA\', \'AAAA\'] # print(most_frequent_gemstone(3, 4, grid)) # Should output \'A\'"},{"question":"You are a software engineer tasked with optimizing a sequence of operations in a database system. The operations to be performed can be categorized as increment operations. Each increment operation adds a specific integer (denoted as V) to a range of elements within a list. Given an initial list of integers, you need to determine the minimum number of distinct increment operations required to transform the list into another target list, where each increment operation can affect any contiguous subarray of the list. INPUT The first line contains a single integer N, which represents the number of elements in the list. The second line contains N space-separated integers, denoting the elements of the initial list. The third line contains N space-separated integers, denoting the elements of the target list. OUTPUT Output a single integer, which denotes the minimum number of distinct increment operations required to transform the initial list into the target list. CONSTRAINTS 1 ≤ N ≤ 10^5 -10^9 ≤ List elements ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 1 3 3 6 5 SAMPLE OUTPUT 2 Explanation Two distinct increment operations are needed to achieve the target list from the initial list: 1. Increment the subarray from index 1 to 1 (0-based) by 1, changing the list to [1, 3, 3, 4, 5]. 2. Increment the subarray from index 3 to 3 (0-based) by 2, changing the list to [1, 3, 3, 6, 5]. Thus, the minimum number of distinct increment operations required is 2.","solution":"def min_increment_operations(N, initial_list, target_list): Given an initial list and a target list, computes the minimum number of distinct increment operations required to transform the initial list into the target list. diff_list = [target_list[i] - initial_list[i] for i in range(N)] operations = 0 for i in range(N): if diff_list[i] != 0: operations += 1 while i < N and diff_list[i] != 0: diff_list[i] = 0 i += 1 return operations"},{"question":"You have recently started working for a security company. Your first task is to implement an encryption algorithm for securely transmitting messages between two parties. The encryption algorithm you will use involves transforming the message using a simple substitution cipher. In this cipher, each letter in the original message is replaced with another letter, such that each letter maps to exactly one other unique letter. For the sake of simplicity, the substitution will be applied to lowercase English letters only (\'a\' to \'z\'). You are given a mapping of all 26 lowercase English letters. Using this mapping, you need to write a function that encrypts the given message. Input The first line of input contains a single integer T denoting the number of test cases. Each of the next T lines contains two strings: 1. A 26-character string representing the substitution mapping (the i-th character in this string is the letter that \'a\' + i should be replaced with). 2. A string to be encrypted, which can be empty and consists only of lowercase English letters. Output For each test case, output the encrypted message on a single line. Constraints 1 <= T <= 100 Length of the substitution mapping = 26 Length of the message = 0 to 1000 Example Input: 2 zyxwvutsrqponmlkjihgfedcba hello qwertyuiopasdfghjklzxcvbnm abcdef Output: svool qwerty Explanation In the first test case, the given mapping is \'zyxwvutsrqponmlkjihgfedcba\'. Applying this mapping to the message \'hello\' results in \'svool\', as: h -> s e -> v l -> o l -> o o -> l In the second test case, the given mapping is \'qwertyuiopasdfghjklzxcvbnm\'. Applying this mapping to the message \'abcdef\' results in \'qwerty\', as: a -> q b -> w c -> e d -> r e -> t f -> y","solution":"def encrypt_message(substitution, message): Encrypts the given message using the substitution cipher. Args: substitution (str): A 26-character string representing the substitution mapping. message (str): The string to be encrypted. Returns: str: The encrypted message. # Creating a dictionary from the substitution mapping cipher_dict = {chr(i + ord(\'a\')): substitution[i] for i in range(26)} # Encrypting the message encrypted_message = \'\'.join(cipher_dict[char] for char in message) return encrypted_message def process_test_cases(test_cases): Processes multiple test cases of encryption. Args: test_cases (list of tuples): Each tuple contains a 26-character substitution mapping and a message to be encrypted. Returns: list of str: The list of encrypted messages for each test case. results = [] for substitution, message in test_cases: results.append(encrypt_message(substitution, message)) return results"},{"question":"# Analyze and Alter Alex is working on a software for tracking product usage in a warehouse. The warehouse has a unique numbering system for aisles and shelves. Each command provided by Alex may be one of three types: * store id x y — This command indicates that a product with a unique identifier id is stored at aisle x and shelf y. For each command of this type, it is guaranteed that product id is not currently stored at any location and that there are no other products stored at aisle x and shelf y. * remove id — This command indicates that a product with the specified identifier id should be removed from its current location. It is guaranteed that product id is stored in the warehouse at the time of the request. * locate x y — This command asks to find the product with the highest identifier among those stored at aisle x and shelf y, and return its unique identifier. If no product is stored at aisle x and shelf y, return -1. Alex has to handle a vast number of such commands efficiently. He needs your help to create a program that processes all these commands. # Input The first line of input contains the integer n (1 ≤ n ≤ 2*10^5), the number of commands. Each of the next n lines contains one of the three types of commands. All aisles (x) and shelves (y) in the input are non-negative integers not exceeding 10^9. Product identifiers (id) are positive integers and are unique across store commands. # Output For each locate command, output a single line containing the unique product identifier stored at the specified aisle and shelf. If no product is stored at the requested location, output -1. # Examples Input ``` 10 store 100 1 1 store 200 2 2 store 300 2 3 store 150 1 2 locate 2 3 remove 300 locate 2 3 store 350 3 3 locate 3 3 locate 1 2 ``` Output ``` 300 -1 350 150 ``` Input ``` 6 store 10 5 5 locate 5 5 remove 10 locate 5 5 store 20 5 5 locate 5 5 ``` Output ``` 10 -1 20 ```","solution":"def execute_commands(commands): product_location = {} aisle_shelf = {} result = [] for command in commands: parts = command.split() if parts[0] == \'store\': _, id, x, y = parts id = int(id) x = int(x) y = int(y) product_location[id] = (x, y) if (x, y) not in aisle_shelf: aisle_shelf[(x, y)] = [] aisle_shelf[(x, y)].append(id) elif parts[0] == \'remove\': _, id = parts id = int(id) x, y = product_location.pop(id) aisle_shelf[(x, y)].remove(id) if not aisle_shelf[(x, y)]: del aisle_shelf[(x, y)] elif parts[0] == \'locate\': _, x, y = parts x = int(x) y = int(y) if (x, y) in aisle_shelf and aisle_shelf[(x, y)]: result.append(max(aisle_shelf[(x, y)])) else: result.append(-1) return result"},{"question":"Create a program that reads the coordinates of three points A(x_a, y_a), B(x_b, y_b), and C(x_c, y_c) on a plane and determines if they are collinear. The points are said to be collinear if they all lie on a single straight line. Input Given multiple datasets. The format of each dataset is as follows: x_a , y_a , x_b , y_b , x_c , y_c x_a , y_a , x_b , y_b , x_c , y_c are -100 or more and 100 or less, respectively, and are given as real numbers. The number of datasets does not exceed 100. Output Print YES if the points are collinear for each dataset, otherwise NO. Example Input 0.0,0.0,1.0,1.0,2.0,2.0 0.0,0.0,1.0,2.0,2.0,1.0 Output YES NO","solution":"def is_collinear(xa, ya, xb, yb, xc, yc): Determines if three points A(xa, ya), B(xb, yb), and C(xc, yc) are collinear. # Calculate the area of a triangle formed by the three points. area = (xa * (yb - yc) + xb * (yc - ya) + xc * (ya - yb)) / 2.0 # If the area is 0, the points are collinear return abs(area) <= 1e-10 def process_datasets(datasets): results = [] for data in datasets: xa, ya, xb, yb, xc, yc = map(float, data.split(\',\')) if is_collinear(xa, ya, xb, yb, xc, yc): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of n integers. We define a \\"good sublist\\" as a sublist that contains at least one integer that appears more than once in that sublist. Your task is to check if there exists a \\"good sublist\\" for a given list of integers. If such a \\"good sublist\\" exists, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line of input contains an integer n (1 ≤ n ≤ 2000) — the number of integers in the list. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the list. Output Print \\"YES\\" if there exists a \\"good sublist\\" and \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 Output NO Input 6 1 2 2 3 4 5 Output YES","solution":"def check_good_sublist(n, lst): Checks if there exists a \\"good sublist\\" that contains at least one integer appearing more than once. from collections import Counter # Create a frequency count of all elements in the list counter = Counter(lst) # Check if any element has a count greater than 1 for count in counter.values(): if count > 1: return \\"YES\\" return \\"NO\\" # Example usage n = 6 lst = [1, 2, 2, 3, 4, 5] print(check_good_sublist(n, lst)) # Output: YES"},{"question":"You are given a sequence of integers a of length n. You need to transform this sequence into a new sequence b of the same length, such that for every i (1 ≤ i ≤ n), the i-th element of the sequence b is equal to the sum of all the elements of sequence a except the i-th element. Formally, you need to calculate: bi = sum(a) - ai where sum(a) denotes the sum of all elements of sequence a, and ai is the i-th element of sequence a. Write a program that reads the sequence a and prints the sequence b. Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the length of the sequence a. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence a. Output Print n integers b1, b2, ..., bn — the elements of the sequence b. Examples Input 5 1 2 3 4 5 Output 14 13 12 11 10 Input 3 -1 -2 -3 Output -5 -4 -3 Input 4 0 0 0 0 Output 0 0 0 0 Note In the first example, the sum of the elements of sequence a is 1 + 2 + 3 + 4 + 5 = 15. The sequence b will be: b1 = 15 - 1 = 14 b2 = 15 - 2 = 13 b3 = 15 - 3 = 12 b4 = 15 - 4 = 11 b5 = 15 - 5 = 10 In the second example, the sum of the elements of sequence a is -1 + (-2) + (-3) = -6. The sequence b will be: b1 = -6 - (-1) = -5 b2 = -6 - (-2) = -4 b3 = -6 - (-3) = -3 In the third example, the sum of the elements of sequence a is 0 + 0 + 0 + 0 = 0. The sequence b will be: b1 = 0 - 0 = 0 b2 = 0 - 0 = 0 b3 = 0 - 0 = 0 b4 = 0 - 0 = 0","solution":"def transform_sequence(n, a): Transforms the sequence a such that b[i] is the sum of all elements of a except a[i]. Args: n: int - the length of the sequence a. a: list of int - the sequence of integers a. Returns: list of int - the transformed sequence b. total_sum = sum(a) b = [total_sum - a[i] for i in range(n)] return b"},{"question":"John loves playing with binary trees. He is very interested in checking different properties of the trees he creates. One of the important properties he wants to check is the symmetry of a binary tree. A binary tree is considered symmetric if it is a mirror image of itself with respect to the center. Design a function `is_symmetric(root)` which takes the root of a binary tree as input and returns `True` if the binary tree is symmetric, and `False` otherwise. Note: A binary tree node is defined as follows: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Input - The input to the function is a reference to the root of the binary tree. # Output - Return `True` if the tree is symmetric, and `False` otherwise. # Example ```python # Example 1: # Input: root = [1, 2, 2, 3, 4, 4, 3] # 1 # / # 2 2 # / / # 3 4 4 3 # Output: True # Example 2: # Input: root = [1, 2, 2, None, 3, None, 3] # 1 # / # 2 2 # # 3 3 # Output: False ``` # Constraints - The number of nodes in the binary tree is in the range [1, 1000]. - -1000 <= Node.val <= 1000 To assist you, here is the function signature: ```python def is_symmetric(root: TreeNode) -> bool: # Your code goes here pass ``` Please implement this function.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric(root: TreeNode) -> bool: if not root: return True def is_mirror(t1: TreeNode, t2: TreeNode) -> bool: if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root.left, root.right)"},{"question":"A company is planning a business trip, and employees need to be grouped together to stay in hotels. Each hotel room can accommodate up to a specific number of employees. The company wants to ensure that their employees are grouped optimally to minimize the number of hotel rooms used. There are n employees, and each employee has a unique ID from 1 to n. The company has m hotels available, each with a different capacity, represented by an array `capacities` of length m where `capacities[i]` denotes the number of employees that the i-th hotel room can accommodate. Your task is to find the minimum number of hotel rooms needed to accommodate all the employees given the varying capacities of the hotel rooms. Input The first line contains integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the number of employees and the number of hotels available. The second line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 10^5), the capacities of the hotel rooms. Output Output one integer, the minimum number of hotel rooms needed to accommodate all the employees. Examples Input 10 3 6 3 4 Output 2 Input 7 4 2 2 3 4 Output 2 Note In the first example, one optimal way to use the hotel rooms is to put 6 employees in the first room and the remaining 4 in the third room to accommodate all 10 employees using 2 rooms. In the second example, one optimal way is to use the third and fourth rooms to accommodate all 7 employees using 2 rooms.","solution":"def min_hotel_rooms(n, m, capacities): Returns the minimum number of hotel rooms needed to accommodate all the employees. Parameters: n (int): Number of employees. m (int): Number of hotels available. capacities (List[int]): List of capacities of each hotel room. Returns: int: Minimum number of hotel rooms required. capacities.sort(reverse=True) total_employees = n rooms_used = 0 for capacity in capacities: total_employees -= capacity rooms_used += 1 if total_employees <= 0: break return rooms_used"},{"question":"Create a program that reads names, scores, and subjects, then outputs the average score for each subject. Input The input is given in the following format: n name1 subject1 score1 name2 subject2 score2 :: namen subjectn scoren The first line contains the integer n (1 ≤ n ≤ 50), representing the number of entries. Each of the next n lines consists of a student\'s name (a string of lowercase letters without spaces), the subject (a string of lowercase letters without spaces), and an integer score (0 ≤ score ≤ 100) separated by spaces. Output Display the average score for each subject in alphabetical order of the subject names. The output should be in the format: subject1:average_score1 subject2:average_score2 :: subjectm:average_scorem The average scores should be displayed as decimal numbers rounded to the first decimal place. Examples Input 5 alice math 90 bob math 80 charlie science 85 alice science 95 bob science 100 Output math:85.0 science:93.3 Input 6 tom history 70 anna math 95 jane history 88 john math 82 sara english 78 jake english 84 Output english:81.0 history:79.0 math:88.5","solution":"def average_scores_by_subject(n, entries): Calculates the average score for each subject. Args: n (int): Number of entries. entries (list): List of strings in the format \\"name subject score\\". Returns: dict: Dictionary with subjects as keys and average scores as values. from collections import defaultdict subjects = defaultdict(list) for entry in entries: name, subject, score = entry.split() subjects[subject].append(int(score)) average_scores = {subject: round(sum(scores) / len(scores), 1) for subject, scores in subjects.items()} return dict(sorted(average_scores.items())) # Return sorted by subject names"},{"question":"There is a novel theme park that uses a unique way to manage entry to various rides. Each ride has a separate queue, and people enter the queue when they arrive at the ride. However, in this park, a person can choose to leave the queue if they change their mind or if the queue has not moved for a while. Your task is to simulate the arrival and departure of people from different ride queues based on the commands provided. Each command will be in one of the following forms: - \\"ARRIVE ride_id person_id\\": A person with `person_id` arrives at the queue of the specified `ride_id`. - \\"LEAVE ride_id person_id\\": A person with `person_id` leaves the queue of the specified `ride_id`. Each `ride_id` and `person_id` are represented by strings which contain alphanumeric characters without any spaces. Write a program to read a series of commands and process them to reflect the current state of the queues. After processing all commands, print the state of each ride queue in the order the rides are mentioned. Input The first line will be an integer `N` (1 ≤ N ≤ 100), the number of commands. The next `N` lines will each contain one command of one of the two forms mentioned above. Output For each ride mentioned in the commands, print the ride identifier followed by a colon and then the people currently in its queue (if any) in the order they arrived. If a ride\'s queue is empty, it should report the ride identifier followed by a colon and an empty list. Example Input 8 ARRIVE ride1 person1 ARRIVE ride2 person2 ARRIVE ride1 person3 LEAVE ride1 person1 ARRIVE ride2 person4 ARRIVE ride1 person5 ARRIVE ride2 person3 LEAVE ride2 person2 Output ride1: person3 person5 ride2: person4 person3","solution":"def manage_queues(commands): queues = {} for command in commands: parts = command.split() action = parts[0] ride_id = parts[1] person_id = parts[2] if len(parts) > 2 else None if ride_id not in queues: queues[ride_id] = [] if action == \\"ARRIVE\\": queues[ride_id].append(person_id) elif action == \\"LEAVE\\" and person_id in queues[ride_id]: queues[ride_id].remove(person_id) result = [] for ride_id in queues: result.append(f\\"{ride_id}: {\' \'.join(queues[ride_id]) if queues[ride_id] else \'\'}\\") return result"},{"question":"You are given a sequence of integers of length n and a set of q queries. Each query specifies a subarray by its starting and ending index. For each query, you need to find the length of the longest subsequence of the specified subarray that contains no duplicate elements. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the length of the sequence and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the sequence. The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) each — the starting and ending indices of the subarray (1-based). Output Print q integers. The i-th integer should be equal to the length of the longest subsequence of the subarray specified in the i-th query that contains no duplicate elements. Example Input 7 3 1 2 3 2 1 4 5 1 4 2 6 3 7 Output 3 4 5 Input 5 2 4 4 4 4 4 1 3 1 5 Output 1 1","solution":"def length_of_longest_subsequence_no_duplicates(sequence, queries): Returns the length of the longest subsequence with no duplicate elements for given subarray queries. :param sequence: List of integers representing the sequence. :param queries: List of tuples, where each tuple contains the start and end indices (inclusive) of the subarray query. :return: List of integers representing the length of the longest subsequence with no duplicate elements for each query. # Function to calculate longest unique subsequence in a subarray. def longest_unique_subsequence(subarray): seen = set() longest = 0 for num in subarray: if num not in seen: seen.add(num) longest += 1 return longest results = [] for l, r in queries: subarray = sequence[l-1:r] # Converting 1-based index to 0-based results.append(longest_unique_subsequence(subarray)) return results"},{"question":"In a computer science class, students are learning about various sorting algorithms. One concept that intrigued them is the selection sort algorithm. Instead of sorting the array in ascending order, the students are asked to write a function that sorts the array in descending order using the selection sort algorithm. In selection sort, the array is divided into two parts: the sorted part at the beginning and the unsorted part at the end. Initially, the sorted part is empty and the unsorted part is the entire array. The algorithm proceeds by finding the largest element in the unsorted part and swapping it with the leftmost unsorted element, moving the boundary of the sorted part one step to the right. Write a function `selectionSortDescending` that takes an array of integers and sorts it in descending order using the selection sort algorithm. Your function should modify the array in-place and should not return anything. # Input - An array of integers `arr` of length `n` (1 ≤ n ≤ 1000). # Output - Your function should modify the array `arr` in-place to be sorted in descending order. # Example Input: ``` [64, 34, 25, 12, 22, 11, 90] ``` Output: ``` [90, 64, 34, 25, 22, 12, 11] ``` Input: ``` [3, 1, 2] ``` Output: ``` [3, 2, 1] ``` Function signature: ```python def selectionSortDescending(arr: List[int]) -> None: # Implement the function here ``` **Note**: You should not use the built-in sort function or any other high-level sort functions. The goal is to implement the selection sort algorithm manually.","solution":"from typing import List def selectionSortDescending(arr: List[int]) -> None: n = len(arr) for i in range(n): max_idx = i for j in range(i + 1, n): if arr[j] > arr[max_idx]: max_idx = j arr[i], arr[max_idx] = arr[max_idx], arr[i]"},{"question":"Given a binary tree, return the vertical order traversal of its nodes\' values. (i.e., from top to bottom, column by column). If two nodes are in the same row and column, the order should be from left to right. You are given the roots of a binary tree. Write a function to return all the node values in the required order. Input - The binary tree\'s root node. Output - A list of lists containing the node values in vertical order. Constraints - The number of nodes in the tree is in the range [1, 1000]. - -1000 ≤ Node.val ≤ 1000 Examples Input ``` 3 / 9 20 / 15 7 ``` Output: ``` [[9], [3, 15], [20], [7]] ``` Input ``` 1 / 2 3 / / 4 5 6 7 ``` Output: ``` [[4], [2], [1, 5, 6], [3], [7]] ``` Note In the first example, - 9 is the leftmost column. - 3 and 15 are the second column. - 20 is in the third column. - 7 is the rightmost column. In the second example, - 4 is the leftmost column. - 2 is the second column. - 1, 5, and 6 are in the third column. - 3 is the fourth column. - 7 is the rightmost column.","solution":"from collections import defaultdict, deque # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrderTraversal(root): Returns the vertical order traversal of the binary tree\'s node values. if not root: return [] column_table = defaultdict(list) queue = deque([(root, 0)]) # (node, column index) while queue: node, column = queue.popleft() if node: column_table[column].append(node.val) queue.append((node.left, column - 1)) queue.append((node.right, column + 1)) # Sort by column index and return the values sorted_columns = sorted(column_table.keys()) return [column_table[col] for col in sorted_columns]"},{"question":"**Problem Statement:** Alice is working on an application involving vague text and wants to analyze the similarity between various phrases. She defines similarity between two phrases based on how many common words they share. Being aware of the stop words (common words like \\"the\\", \\"is\\", \\"in\\", etc.) in a language, Alice would like to ignore them while comparing the phrases. Given two phrases, the task is to calculate the number of common words between them, excluding stop words. The words should be compared in a case-insensitive manner. **Input:** 1. The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1,000) — the number of words in the first and second phrase, respectively. 2. The second line contains an integer `s` (1 ≤ s ≤ 100) — the number of stop words. 3. The third line contains `s` stop words separated by spaces. 4. The fourth line contains `n` words of the first phrase. 5. The fifth line contains `m` words of the second phrase. **Output:** Print a single integer — the number of common words between the two phrases, excluding stop words. **Example:** **Input:** ``` 7 6 4 the is in of Alice is in the Wonderland and is dreaming The Wonderland is full of mysteries ``` **Output:** ``` 2 ``` **Explanation:** After removing the stop words (\\"the\\", \\"is\\", \\"in\\", \\"of\\"), the remaining phrases are: - First phrase: \\"Alice Wonderland and dreaming\\" - Second phrase: \\"The Wonderland full mysteries\\" The common words between these two phrases are \\"Wonderland\\". Therefore, the output is 1.","solution":"def count_common_words(n, m, s, stop_words, phrase1, phrase2): Calculate the number of common words between two phrases, excluding stop words. stop_words_set = set(stop_words) # Prepare words for comparison by filtering stop words and converting to lowercase phrase1_set = set(word.lower() for word in phrase1 if word.lower() not in stop_words_set) phrase2_set = set(word.lower() for word in phrase2 if word.lower() not in stop_words_set) # Calculate common words common_words = phrase1_set.intersection(phrase2_set) return len(common_words)"},{"question":"Write a function that takes two strings as input and returns a merged string such that: - The function alternates characters from each input string. - If one string is longer than the other, append the remaining characters from the longer string at the end of the result. # Example ```python def merge_strings(s1: str, s2: str) -> str: # Your code here # Example 1: s1 = \\"abc\\" s2 = \\"123\\" # merge_strings(s1, s2) should return \\"a1b2c3\\" # Example 2: s1 = \\"abcde\\" s2 = \\"123\\" # merge_strings(s1, s2) should return \\"a1b2c3de\\" # Example 3: s1 = \\"ab\\" s2 = \\"12345\\" # merge_strings(s1, s2) should return \\"a1b2345\\" ```","solution":"def merge_strings(s1: str, s2: str) -> str: Returns a merged string made by alternating characters from s1 and s2. If one string is longer, appends the remaining characters from the longer string. merged = [] len_s1, len_s2 = len(s1), len(s2) min_len = min(len_s1, len_s2) for i in range(min_len): merged.append(s1[i]) merged.append(s2[i]) if len_s1 > len_s2: merged.extend(s1[min_len:]) else: merged.extend(s2[min_len:]) return \'\'.join(merged)"},{"question":"You are given an array of n integers, and your task is to split it into the minimal number of contiguous subarrays such that each subarray is strictly increasing. A subarray is strictly increasing if for all its consecutive elements a[i] and a[i + 1], a[i] < a[i + 1]. Determine the minimal number of such subarrays. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output: - Output a single integer — the minimal number of strictly increasing subarrays needed to partition the array. Examples Input 5 1 2 3 4 5 Output 1 Input 5 5 4 3 2 1 Output 5 Input 10 1 2 1 2 1 2 1 2 1 2 Output 5 Note In the first example, the entire array [1, 2, 3, 4, 5] is already strictly increasing, so only one subarray is needed. In the second example, no two consecutive elements form a strictly increasing sequence, so each element must be its own subarray. In the third example, the array can be split into five strictly increasing subarrays: [1, 2], [1, 2], [1, 2], [1, 2], [1, 2].","solution":"def min_subarrays(n, arr): Determines the minimal number of strictly increasing subarrays needed to partition the array. :param n: Integer, the number of elements in the array :param arr: List of integers, the array to be partitioned :return: Integer, the minimal number of strictly increasing subarrays if n == 1: return 1 count = 1 for i in range(1, n): if arr[i] <= arr[i - 1]: count += 1 return count"},{"question":"A group of friends are planning to start a circular journey from their city and visit several cities in a particular order and return back to their starting city. Each friend has exactly one city that they want to visit for sure. You are given the list of cities and the friends\' preferences and need to find if it\'s possible to start a journey that meets all friends\' preferences while making sure they visit each city exactly once and return to the starting city by making a circular trip. Input The first line contains a single integer n (2 ≤ n ≤ 105), denoting the number of cities. The second line contains n distinct integers where each integer is between 1 and n, denoting the specific city each of the friends wants to visit. Output Print \\"Yes\\" (without the quotes) if such a circular trip is possible, otherwise, print \\"No”. Examples Input 5 3 1 4 5 2 Output Yes Input 6 1 2 2 3 4 5 Output No","solution":"def is_circular_trip_possible(n, preferences): Determines whether a circular trip visiting exactly each city once and satisfying friends\' preferences is possible. :param n: Number of cities :param preferences: List of friends\' preferred cities :return: \'Yes\' or \'No\' return \\"Yes\\" if len(set(preferences)) == n else \\"No\\" # Example use n = 5 preferences = [3, 1, 4, 5, 2] print(is_circular_trip_possible(n, preferences)) # Output: Yes"},{"question":"In a coding competition, participants are given a string `S` consisting of lowercase alphabets. The task is to determine if it is possible to rearrange the characters in `S` to form a new string such that no two adjacent characters are the same. Write a program that checks if such a rearrangement is possible. Constraints: * 1 ≤ |S| ≤ 1000 * S consists of lowercase English letters. Input: The input is given from Standard Input in the following format: S Output: Print `Possible` if the characters of `S` can be rearranged to meet the condition. Print `Impossible` otherwise. Examples: Input aab Output Possible Input aaab Output Impossible","solution":"from collections import Counter def can_rearrange(S): Determines if the characters of S can be rearranged such that no two adjacent characters are the same. # Count the frequency of each character in the string freq = Counter(S) # Find the maximum frequency of any character max_freq = max(freq.values()) # Check if the maximum frequency is more than half of the length of S plus one if max_freq > (len(S) + 1) // 2: return \\"Impossible\\" else: return \\"Possible\\""},{"question":"You are given an array of n integers. Find the largest sum of the longest contiguous subarray containing only unique elements. Input The first line contains the single positive integer n (1 ≤ n ≤ 105) — the number of integers. The second line contains n integers a1, a2, ..., an (−109 ≤ ai ≤ 109). Output Print the largest sum of the longest contiguous subarray containing only unique elements. Examples Input 5 1 2 1 3 4 Output 7 Input 6 4 -1 -2 1 3 -1 Output 6 Note In the first example, the longest contiguous subarray with unique elements is [1, 2, 1, 3, 4] → [2, 1, 3, 4] with sum 2 + 1 + 3 + 4 = 10 In the second example, the longest contiguous subarray with unique elements is [4, -1, -2, 1, 3, -1] → [4, -1, -2, 1, 3] with sum 4 + (-1) + (-2) + 1 + 3 = 5","solution":"def largest_sum_of_longest_unique_subarray(n, arr): Returns the largest sum of the longest contiguous subarray containing only unique elements. # Dictionary to store the index of elements in arr last_seen = {} start = 0 max_sum = 0 current_sum = 0 for end in range(n): if arr[end] in last_seen and last_seen[arr[end]] >= start: # Update start to the right of the previous occurrence of arr[end] start = last_seen[arr[end]] + 1 # Recalculate current sum from the new start point current_sum = sum(arr[start:end+1]) else: current_sum += arr[end] last_seen[arr[end]] = end max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a directed graph with n vertices and m edges. Your task is to implement an algorithm that checks if the given graph contains a cycle. If there is at least one cycle, find and print any cycle present in the graph; otherwise, indicate that the graph is acyclic. A cycle in a graph is a non-empty path where the first and the last vertices are the same, and no other vertices are repeated. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of vertices and edges respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — denoting a directed edge from vertex u to vertex v. Output If the graph contains a cycle, print \\"YES\\" on the first line and a sequence of vertices that form a cycle on the second line. If there are multiple cycles detected, any of them is acceptable. If the graph is acyclic, print \\"NO\\". Examples Input 5 5 1 2 2 3 3 4 4 2 4 5 Output YES 2 3 4 2 Input 3 2 1 2 2 3 Output NO Note In the first sample, the graph contains the cycle 2 -> 3 -> 4 -> 2. In the second sample, there is no cycle in the graph, so the output is \\"NO\\".","solution":"from collections import defaultdict, deque def find_cycle(n, m, edges): def dfs(v): nonlocal cycle visited[v] = 1 stack.append(v) for neighbor in adj_list[v]: if visited[neighbor] == 0: if dfs(neighbor): return True elif visited[neighbor] == 1: # Cycle detected cycle = [] stack_pos = len(stack) - 1 while stack[stack_pos] != neighbor: cycle.append(stack[stack_pos]) stack_pos -= 1 cycle.append(neighbor) cycle.reverse() cycle.append(neighbor) return True visited[v] = 2 stack.pop() return False adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) visited = [0] * (n + 1) stack = [] cycle = [] for i in range(1, n + 1): if visited[i] == 0: if dfs(i): return (\\"YES\\", cycle) return (\\"NO\\",) def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 2 * i]) v = int(data[3 + 2 * i]) edges.append((u, v)) result = find_cycle(n, m, edges) if result[0] == \\"YES\\": print(result[0]) print(\\" \\".join(map(str, result[1]))) else: print(result[0])"},{"question":"You are given an array of integers. Replace each element with the difference between the maximum and minimum value of the array. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), the elements of the array. Output Output the modified array where each element is replaced with the difference between the maximum and minimum value of the original array. Examples Input 5 1 2 3 4 5 Output 4 4 4 4 4 Input 3 -2 0 2 Output 4 4 4","solution":"def replace_with_max_min_diff(n, arr): Replace each element with the difference between the maximum and minimum value of the array. Parameters: n (int): The number of elements in the array. arr (list): The list of n integers. Returns: list: The modified array where each element is replaced with the difference between the maximum and minimum value of the original array. if n == 1: return [0] * n max_val = max(arr) min_val = min(arr) diff = max_val - min_val return [diff] * n"},{"question":"Write a function that simulates a queue system with the following operations, while maintaining the maximum length of items in the queue. - `enqueue(x)`: Adds an item x to the end of the queue. - `dequeue()`: Removes the item from the front of the queue. - `get_size()`: Returns the number of items currently in the queue. - `max_seen()`: Returns the maximum number of items that have ever been in the queue at any point in time. Ensure the function can handle a sequence of operations and return appropriate results for each operation that produces an output. # Input The first line contains an integer q (1 ≤ q ≤ 100000), the number of operations. Each of the next q lines contains one of the following operations: - `0 x` for `enqueue(x)`, - `1` for `dequeue()`, - `2` for `get_size()`, - `3` for `max_seen()`. # Output For each `get_size` and `max_seen` operation, print the result on a separate line. # Constraints - 0 ≤ x ≤ 10^9 # Example Input ``` 8 0 5 0 3 2 1 3 1 2 3 ``` Output ``` 2 3 1 3 ``` # Explanation 1. Enqueue 5, queue: [5] 2. Enqueue 3, queue: [5, 3] 3. Size is 2. 4. Dequeue, queue: [3] 5. Maximum seen so far is 3. 6. Dequeue, queue: [] 7. Size is 0. 8. Maximum seen so far is 3.","solution":"from collections import deque class QueueSystem: def __init__(self): self.queue = deque() self.max_length = 0 def enqueue(self, x): self.queue.append(x) if len(self.queue) > self.max_length: self.max_length = len(self.queue) def dequeue(self): if self.queue: self.queue.popleft() def get_size(self): return len(self.queue) def max_seen(self): return self.max_length def process_operations(operations): queue_system = QueueSystem() results = [] for op in operations: if op[0] == 0: queue_system.enqueue(op[1]) elif op[0] == 1: queue_system.dequeue() elif op[0] == 2: results.append(queue_system.get_size()) elif op[0] == 3: results.append(queue_system.max_seen()) return results"},{"question":"Given a string S consisting of lowercase English letters, you need to check if it can become a palindrome by removing at most one character. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The input contains a single string S (1 ≤ |S| ≤ 1000). Output Output \\"YES\\" or \\"NO\\". Example Input abca Output YES Input abc Output NO","solution":"def can_become_palindrome(S): Returns \\"YES\\" if the string can become a palindrome by removing at most one character, otherwise returns \\"NO\\". def is_palindrome(s): return s == s[::-1] left, right = 0, len(S) - 1 while left < right: if S[left] != S[right]: # check two scenarios: removing one of the non-matching characters if is_palindrome(S[left:right]) or is_palindrome(S[left+1:right+1]): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" # it\'s already a palindrome # Example Usage # print(can_become_palindrome(\\"abca\\")) # YES # print(can_become_palindrome(\\"abc\\")) # NO"},{"question":"A famous company has multiple offices around the world. Each office is connected by direct bidirectional roads and represented as an undirected graph. The company wants to conduct a training program at some of these offices such that every other office can reach at least one of the selected training offices through the given roads. To minimize the cost and maximize efficiency, it\'s critical to determine the minimum number of offices that need to be selected as training offices. Constraints * 2 leq N leq 10^5 * 1 leq M leq 2*10^5 * N is the number of offices. * M is the number of direct bidirectional roads between the offices. Input Input is given from Standard Input in the following format: N M u1 v1 u2 v2 ... uM vM Output Print the minimum number of offices that need to be selected as training offices. Notes * Each line of the input after the first two integers contains two integers `ui` and `vi` (1 leq ui, vi leq N), representing a road between office `ui` and office `vi`. * Ensure your solution is optimized for large inputs within the given constraints. Examples Input 4 2 1 2 3 4 Output 2 Input 5 4 1 2 1 3 3 4 2 5 Output 1 Input 6 7 1 2 1 3 2 4 3 4 4 5 5 6 6 3 Output 1","solution":"def min_training_offices(N, M, roads): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Build graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Find connected components visited = [False] * (N + 1) connected_components = 0 for i in range(1, N + 1): if not visited[i]: connected_components += 1 bfs(i, visited, graph) return connected_components"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node is labeled from 1 to `n`. All nodes are initially uncolored. Your task is to determine if it is possible to color the graph using exactly two colors such that no two adjacent nodes share the same color. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of nodes and the number of edges. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the endpoints of the `m` edges. Output Print \\"YES\\" if it is possible to color the graph with two colors such that no two adjacent nodes share the same color, otherwise print \\"NO\\". Examples Input 4 4 1 2 1 3 2 4 3 4 Output YES Input 3 3 1 2 2 3 1 3 Output NO Note In the first example, we can color the nodes as follows: node 1 with color A, node 2 with color B, node 3 with color B, and node 4 with color A. The second example forms a triangle which is an odd cycle and cannot be colored using only two colors while satisfying the conditions.","solution":"def is_bipartite_graph(n, m, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for node in range(1, n + 1): if color[node] == -1: if not bfs(node): return \\"NO\\" return \\"YES\\""},{"question":"Alice is designing a social network app. Each user can post messages, and other users can reply to these posts. Each message and reply have a unique identifier which is a positive integer. Alice wants to implement an algorithm that tracks the conversation threads. Each conversation thread consists of a main post and the sequence of replies to that post. Alice realized that the most reliable way to identify a conversation thread is by checking the order of replies and ensuring that they are directly related to each other. For instance, if we have a main post with identifier 1 replied by message 2, and then message 2 replied by message 3, and so on. The sequence of replies would be 1 -> 2 -> 3. Alice wants you to design a function that, given a sequence of replies, checks if they form a valid conversation thread starting from a given main post. For simplicity, you can assume that each main post has at least one reply and replies are given in the order they are made. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of messages (including the main post). The second line contains an integer id — the identifier of the main post. The third line contains a sequence of n integers, representing the identifiers of the messages, in the order they were posted or replied to. The first identifier is always the main post. Output Output \\"YES\\" if the given sequence forms a valid conversation thread starting from the given main post identifier, otherwise print \\"NO\\". Examples Input 5 1 1 2 3 4 5 Output YES Input 4 2 2 3 4 1 Output NO Note In the first example, the sequence forms a valid conversation thread starting from post 1: 1 -> 2 -> 3 -> 4 -> 5. In the second example, post 1 appears after some replies, which makes it an invalid thread starting from post 2.","solution":"def is_valid_thread(n, main_post_id, messages): Determines if the given sequence of messages forms a valid conversation thread. Parameters: n (int): The number of messages. main_post_id (int): The identifier of the main post. messages (list): The list of message identifiers in the order they were posted or replied to. Returns: str: \\"YES\\" if the sequence forms a valid conversation thread, otherwise \\"NO\\". # The first message should be the main post if messages[0] != main_post_id: return \\"NO\\" # Ensure the messages are in sequential order, main_post_id must be followed by any replies for i in range(1, n): if messages[i] != messages[i-1] + 1: return \\"NO\\" return \\"YES\\""},{"question":"Alice loves sequences of numbers and is fascinated by their unique properties. One day, she comes across the concept of a \\"Good Subsequence\\". A subsequence of an array is called \\"Good\\" if it contains at least one element and all its elements are unique. Alice wants to count the number of \\"Good Subsequences\\" in a given array. Can you help Alice by writing a function to determine the number of \\"Good Subsequences\\" in the array? # Input The function should take the following input: - An integer `N` (1 ≤ N ≤ 100,000) representing the size of the array. - A list of `N` integers where each integer is between 1 and 100,000 inclusive. # Output The function should output a single integer representing the number of \\"Good Subsequences\\" in the array. # Example ```txt Input: 4 4 2 4 1 Output: 7 ``` # Explanation The good subsequences of the array `[4, 2, 4, 1]` are: - [4] - [2] - [1] - [4, 2] - [4, 1] - [2, 1] - [4, 2, 1] Thus, the number of good subsequences is 7. # Additional Notes - Subsequence means a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. - Two subsequences are considered different if the sets of their indices (positions in the original array) are different. - Sequences with the same set of elements but formed by elements at different positions are considered different subsequences. For example, in the array `[4, 2, 4]`, [4, 2] can be formed in two ways: by taking the first and second elements or by taking the third and second elements; both are considered different subsequences. Write a function in Python: ```python def count_good_subsequences(N: int, array: List[int]) -> int: # your code here ```","solution":"def count_good_subsequences(N, array): Returns the number of Good Subsequences in the given array. A Good Subsequence is a subsequence where all elements are unique. :param N: Integer representing the size of the array (1 ≤ N ≤ 100,000) :param array: List of N integers :return: Number of Good Subsequences from collections import Counter # Get the frequency of each element element_count = Counter(array) # The number of good subsequences is (2^unique_elements) - 1, # because each unique element can either be included or not included in a # subsequence, minus the empty subsequence. unique_elements = len(element_count) return (1 << unique_elements) - 1"},{"question":"In a distant galaxy, there are n planets interconnected by m bidirectional space tunnels. The Galactic Council wants to set up a supply system such that the space tunnels connecting the planets satisfy certain conditions. A valid supply setup should partition the n planets into two groups: - Group A: Planets that can send supplies directly to each other through the space tunnels. - Group B: Planets that can receive supplies directly from each other through the space tunnels. Moreover, there should not be any direct space tunnel connecting two planets within the same group. Your task is to help the Galactic Council determine if such a partition is possible. # Input The first line contains two integers n and m — the number of planets and the number of space tunnels (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^4). The next m lines describe the space tunnels. Each of these m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating a space tunnel between planet u and planet v. It is guaranteed that there is at most one space tunnel between any two planets. # Output If such a partition is possible, print \\"YES\\" (without the quotes). If it is not possible, print \\"NO\\" (without the quotes). # Examples Example 1 **Input:** ``` 4 4 1 2 2 3 3 4 4 1 ``` **Output:** ``` YES ``` Example 2 **Input:** ``` 3 3 1 2 2 3 3 1 ``` **Output:** ``` NO ``` # Note: In Example 1, one possible partitioning would be planets {1, 3} in Group A and planets {2, 4} in Group B. In Example 2, no such partitioning is possible because each planet is interconnected with each other forming a cycle, which makes it impossible to split into two groups with the given conditions.","solution":"from collections import deque def can_partition_planets(n, m, edges): Determine if it\'s possible to partition planets into two groups such that no two planets within the same group are directly connected. Args: n (int): Number of planets. m (int): Number of space tunnels. edges (list of tuple): List of tuples representing the edges between planets. Returns: str: \\"YES\\" if such a partition is possible, \\"NO\\" otherwise. # Create an adjacency list for the graph adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Array to store colors of the nodes (0: not visited, 1: group A, -1: group B) colors = [0] * (n + 1) # Function to check the bipartiteness of a component using BFS def bfs(start): queue = deque([start]) colors[start] = 1 # Start with group A while queue: node = queue.popleft() for neighbor in adj_list[node]: if colors[neighbor] == 0: # Assign opposite group to the neighbor colors[neighbor] = -colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: # If neighbor has the same color as the current node, it\'s not bipartite return False return True # Check each component of the graph for i in range(1, n + 1): if colors[i] == 0: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"You are given a rectangular grid with rows and columns, filled with numbers. Each cell in the grid contains either 0 or 1. Your task is to find the largest square sub-grid that contains all ones, and return the area of that square. Input The first line contains one integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case starts with one line containing two integers `n` and `m` (1 ≤ n, m ≤ 300), the number of rows and columns of the grid respectively. The next `n` lines contain `m` integers (either 0 or 1) representing the grid. Output For each test case, print one integer: the area of the largest square sub-grid that contains only ones. Example Input 3 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 4 4 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 1 2 2 1 1 1 1 Output 4 9 4 Explanation For the first test case, the largest square sub-grid with all ones has side 2 (and thus area 2*2=4). For the second test case, the largest square sub-grid with all ones has side 3 (and thus area 3*3=9). For the third test case, the largest square sub-grid with all ones has side 2 (and thus area 2*2=4).","solution":"def largest_square_area(t, test_cases): This function finds the largest square sub-grid containing only ones for each test case and returns a list of their areas. def calculate_max_square_area(grid, n, m): if n == 0 or m == 0: return 0 # Initialize the dp table dp = [[0] * m for _ in range(n)] max_side = 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = grid[i][j] else: dp[i][j] = min( dp[i-1][j], # up dp[i][j-1], # left dp[i-1][j-1] # diagonal ) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side results = [] for case in test_cases: n, m, grid = case results.append(calculate_max_square_area(grid, n, m)) return results"},{"question":"You are given an array of integers. Your task is to write a function that moves all the zeroes to the end of the array while maintaining the relative order of the non-zero elements. You need to modify the array in place and achieve this with a minimal number of operations. Input Format The first line contains an integer n, which denotes the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output Format Print the modified array on a single line with all zeroes moved to the end. Constraints 1 ≤ n ≤ 100 -10^9 ≤ A[i] ≤ 10^9 SAMPLE INPUT 5 0 1 0 3 12 SAMPLE OUTPUT 1 3 12 0 0","solution":"def move_zeroes_to_end(arr): This function moves all zeroes to the end of the array while maintaining the relative order of the non-zero elements. if not arr: return arr last_non_zero_found_at = 0 # Pointer for position to place the next non-zero element # Iterate through the array for i in range(len(arr)): if arr[i] != 0: # Swap the elements arr[last_non_zero_found_at], arr[i] = arr[i], arr[last_non_zero_found_at] last_non_zero_found_at += 1 return arr"},{"question":"In a software development company, there is a need to efficiently manage tasks assigned to a group of employees. Each employee can handle a maximum of `k` tasks, and every task takes exactly one unit of time. The tasks are represented by a list of their start and end times, where both start and end times are inclusive. Your objective is to determine if it is possible to assign all tasks to the employees such that no employee handles more than `k` tasks at any time. Write a function `canAssignTasks(employees, tasks)` that takes the number of employees `n`, the maximum number of tasks an employee can handle at any time `k`, and a list of tuples `tasks`, where each tuple represents the start and end time of a task. The function should return `True` if all tasks can be assigned to the employees under the given constraints, otherwise return `False`. # Input - `n`: An integer, the number of employees (1 ≤ n ≤ 10^5) - `k`: An integer, the maximum number of tasks an employee can handle at any time (1 ≤ k ≤ 10^5) - `tasks`: A list of tuples, where each tuple contains two integers representing the start time and end time of a task (0 ≤ start < end ≤ 10^9) # Output - A boolean value `True` if the tasks can be assigned to the employees such that no employee has more than `k` tasks at any time, otherwise `False`. # Example ```python tasks = [(1, 4), (2, 5), (3, 6)] n = 2 k = 2 canAssignTasks(n, k, tasks) ``` Output: ```python True ``` Explanation: - Employee 1 can handle tasks (1, 4) and (3, 6) - Employee 2 can handle task (2, 5) - No employee is handling more than 2 tasks at any given time, so the result is `True`.","solution":"def canAssignTasks(n, k, tasks): events = [] for start, end in tasks: events.append((start, 1)) # Task starting events.append((end + 1, -1)) # Task ending events.sort() current_tasks = 0 for time, count in events: current_tasks += count if current_tasks > n * k: return False return True"},{"question":"In a video streaming service, the **stream rank** of a movie is determined by how frequently and recently it has been accessed. The platform maintains a ranked list of all movies, where the most recently accessed movie appears at the top of the list, and the least recently accessed movie appears at the bottom. Whenever a movie is accessed, it is moved to the top of the list. You have to write a function that processes a series of movie accesses and provides the resulting rank list. # Input The first line contains two integer numbers `n` and `m` (1 ≤ `n` ≤ 1000, 1 ≤ `m` ≤ 1000). Here `n` is the number of unique movies available on the platform, and `m` is the number of times different movies are accessed. The next line contains `n` distinct strings each representing the name of a movie. Movie names consist of alphanumeric characters and are guaranteed to be unique and have a length from 1 to 50 characters. The next line contains `m` strings representing the accesses made to the movies. Each string is a valid movie name from the list of `n` movies. # Output Print the final rank list of the movies, from the most recently accessed to the least recently accessed. # Example Input ``` 5 7 Inception Titanic Avatar Interstellar Gravity Interstellar Gravity Avatar Titanic Interstellar Inception Avatar ``` Output ``` Avatar Inception Interstellar Titanic Gravity ``` # Note - After the first access (`Interstellar`), the list becomes: `Interstellar Inception Titanic Avatar Gravity`. - After the second access (`Gravity`), the list becomes: `Gravity Interstellar Inception Titanic Avatar`. - After the third access (`Avatar`), the list becomes: `Avatar Gravity Interstellar Inception Titanic`. - After the fourth access (`Titanic`), the list becomes: `Titanic Avatar Gravity Interstellar Inception`. - After the fifth access (`Interstellar`), the list becomes: `Interstellar Titanic Avatar Gravity Inception`. - After the sixth access (`Inception`), the list becomes: `Inception Interstellar Titanic Avatar Gravity`. - After the seventh access (`Avatar`), the list becomes: `Avatar Inception Interstellar Titanic Gravity`.","solution":"def update_movie_rank_list(n, m, movies, accesses): Updates and returns the movie rank list based on the accesses. Parameters: - n: Number of unique movies - m: Number of accesses - movies: List of unique movie names - accesses: List of accessed movie names Returns: - List of movies from most recently accessed to least recently accessed. # Initialize the rank list with the given list of movies rank_list = list(movies) for access in accesses: # Move the accessed movie to the top of the rank list rank_list.insert(0, rank_list.pop(rank_list.index(access))) return rank_list"},{"question":"You are organizing a charity walkathon where participants are encouraged to complete as many laps as they can within a specified time limit. Each participant walks at a different speed, and you want to quickly determine the maximum number of laps any participant can complete without exceeding the time limit. Given the number of participants, their respective walking speeds, and the total time allowed for the walkathon, write a program to calculate the maximum number of laps any participant can complete. Each participant’s speed is given in laps per hour, and the time is given in hours. Input The input is provided in the following format: P T s_1 s_2 ... s_P The first line contains two integers, P (1 leq P leq 100) and T (1 leq T leq 24). The second line contains an array of integers s_i (1 leq s_i leq 20), where s_i represents the speed in laps per hour of the i-th participant. Output Output the maximum number of laps any participant can complete within the given time limit. Examples Input 4 3 5 6 7 4 Output 21 Input 6 2 5 10 15 20 25 30 Output 60 Input 3 1 2 3 4 Output 4","solution":"def max_laps(participants, time, speeds): Returns the maximum number of laps any participant can complete within the given time limit. :param participants: int, number of participants :param time: int, total time allowed for the walkathon in hours :param speeds: list of int, speeds of participants in laps per hour :return: int, maximum number of laps return max(speeds) * time"},{"question":"A forest ranger is responsible for maintaining the hiking trails in a large forest. The forest is represented by an undirected graph, where nodes represent trail intersections and edges represent the trails between them. Each trail has a difficulty level that can be positive or zero. The ranger wants to ensure that all intersections are accessible from any other intersection but wants to do so with the minimum total difficulty level. Write a program to compute the minimum total difficulty level required to ensure that all intersections are accessible from each other. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) - the number of intersections and the number of trails respectively. The following m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000) - representing a trail between intersections u and v with difficulty level w. Output Output a single integer, the minimum total difficulty level required to ensure that all intersections are accessible from each other or -1 if this is not possible. Examples Input 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output 6 Input 5 4 1 2 0 2 3 1 3 4 2 4 5 3 Output 6 Input 3 1 1 2 5 Output -1 Note In the first sample test, the minimum spanning tree that connects all intersections has a total difficulty of 6. In the second sample test, although the connections are cheaper, a spanning tree covering all intersections cannot be constructed as intersection 5 is not connected to the rest. In the third sample test, with only one trail, it is impossible to ensure all intersections are accessible from each other, leading to an output of -1.","solution":"# Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def min_total_difficulty(n, m, trails): # Sorting the trails by difficulty levels (weights) trails.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 # To store the total weight of the MST edges_in_mst = 0 # To count the number of edges in the MST for trail in trails: u, v, w = trail root_u = find(parent, u - 1) root_v = find(parent, v - 1) # If including this edge does not form a cycle if root_u != root_v: result += w edges_in_mst += 1 union(parent, rank, root_u, root_v) # If we have n-1 edges in our MST, we can terminate early if edges_in_mst == n - 1: break # If we do not have enough edges to form a spanning tree if edges_in_mst != n - 1: return -1 return result"},{"question":"Given two strings `s1` and `s2`, you need to determine whether you can transform `s1` into `s2` by performing a series of operations. The operations are defined as follows: 1. Insert a character: Insert a single character in `s1`. 2. Remove a character: Remove a single character from `s1`. 3. Replace a character: Replace one character in `s1` with another character. You need to write a program that receives `s1` and `s2` as input and outputs the minimum number of operations required to transform `s1` into `s2`. # Input: The input consists of two strings `s1` and `s2`: - `s1` (1 ≤ |s1| ≤ 1000) - `s2` (1 ≤ |s2| ≤ 1000) # Output: Output the minimum number of operations required to transform `s1` into `s2`. # Example: Input: ``` kitten sitting ``` Output: ``` 3 ``` Explanation: To transform `kitten` into `sitting`, we need to: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end Input: ``` intention execution ``` Output: ``` 5 ``` Explanation: To transform `intention` into `execution`, we need to: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'c\' 4. Insert \'u\' before \'t\' 5. Replace \'n\' with \'o\' # Constraints: - The strings will only contain lowercase English letters.","solution":"def min_distance(s1, s2): Calculates the minimum number of operations required to transform s1 into s2. Parameters: s1 (str): The source string. s2 (str): The target string. Returns: int: The minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[m][n]"},{"question":"The company is analyzing customer purchases to determine the most popular product. Create a program that reads customer purchase data and outputs the most frequently purchased product. Input The input is given in the following format: product_name ... ... Each line contains the name of a product. All product names are non-empty strings consisting of alphabetical characters and spaces. There are 50 or fewer product names entered. Output The name of the most frequently purchased product is output as a string. If there are multiple products with the same highest frequency, output the lexicographically smallest one. Example Input apple banana apple orange banana banana Output banana","solution":"def most_frequent_product(purchases): Returns the most frequently purchased product from the list of purchases. If multiple products have the same highest frequency, returns the lexicographically smallest one. from collections import Counter # Count the frequency of each product product_counts = Counter(purchases) # Find the maximum frequency max_frequency = max(product_counts.values()) # Get the products with the maximum frequency most_frequent_products = [product for product, count in product_counts.items() if count == max_frequency] # Return the lexicographically smallest product among the most frequent ones return min(most_frequent_products)"},{"question":"String Puzzle Adventure In the Kingdom of Textoria, the people communicate using sequences of characters and love creating intricate puzzles with these sequences. The Royal Puzzle Master has a new challenge for you. The challenge involves transforming a given string into another string using a sequence of operations. Here is the allowed operation: 1. Swap the characters at any two positions in the string. Your mission is to determine the minimum number of swaps required to transform the given string `s` into another string `t`. If it is not possible to transform `s` into `t` using any number of swaps, return -1. Input * The first line contains an integer `n`, the number of datasets. * The following `2 * n` lines contains two strings per dataset: the first and second strings in each dataset. Constraints: * The number of datasets `n` is no more than 100. * Each string consists of lowercase English letters only and has a length between 1 and 1000. Output For each dataset, output the minimum number of swaps required to transform the first string into the second string on a new line. If it is not possible, print -1. Sample Input 4 abcdef badcfe abc bca aabbcc ccbbcc hello world Sample Output 3 2 -1 -1 Explanation of Sample Output 1. `abcdef` -> `bacdef` (swap 1 and 2) -> `badcef` (swap 2 and 4) -> `badcfe` (swap 5 and 6) 2. `abc` -> `bca` (swap 1 and 3) -> `bca` (swap 1 and 2, 2 and 3) 3. Strings `aabbcc` and `ccbbcc` do not have the same character frequency. 4. Strings `hello` and `world` do not have the same character frequency.","solution":"def min_swaps_to_transform(s, t): Returns the minimum number of swaps required to transform string s into string t. If transformation is not possible, returns -1. if sorted(s) != sorted(t): return -1 swaps = 0 s = list(s) t = list(t) n = len(s) for i in range(n): if s[i] != t[i]: swap_index = s.index(t[i], i) s[i], s[swap_index] = s[swap_index], s[i] swaps += 1 return swaps def min_swaps_for_all_datasets(n, datasets): results = [] for i in range(n): s = datasets[i * 2] t = datasets[i * 2 + 1] results.append(min_swaps_to_transform(s, t)) return results"},{"question":"R: Routes In a forest, there are n paths between trees. Each path connects exactly two distinct trees and does not intersect with other paths. Each tree can be considered as a node in a graph and each path as an edge. You are given the number of trees T and the paths between them as pairs of integers (u, v), where each pair represents a path between tree u and tree v . Your task is to determine if all the trees are connected, i.e., there is a route between any two trees, directly or indirectly. input T and n are given separated by blank lines. The next n lines each contain two integers u and v , representing a path between tree u and tree v . output Output \\"Yes\\" if all the trees are connected, otherwise output \\"No\\". Constraint * 1 leq T leq 1,000,000 * 0 leq n leq 1,000,000 * 1 leq u, v leq T Input example 1 5 4 1 2 2 3 3 4 4 5 Output example 1 Yes Input example 2 6 3 1 2 2 3 4 5 Output example 2 No Example Input 5 4 1 2 2 3 3 4 4 5 Output Yes","solution":"from collections import defaultdict, deque def are_all_trees_connected(T, n, edges): Determines if all the trees are connected, i.e., there is a route between any two trees. Parameters: T (int): Number of trees (nodes). n (int): Number of paths (edges). edges (list of tuples): List of paths (u, v) as edge pairs. Returns: str: \\"Yes\\" if all trees are connected, otherwise \\"No\\". if T == 1: return \\"Yes\\" if n == 0: return \\"No\\" # Create an adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS or DFS to check connectivity visited = set() queue = deque([1]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) return \\"Yes\\" if len(visited) == T else \\"No\\""},{"question":"Given an array of integers, determine if there is a pair of distinct elements (a, b) such that a + b is equal to a given target value. If such a pair exists, print \\"Yes\\"; otherwise, print \\"No\\". Constraints * 1 leq N leq 100, where N is the number of elements in the array. * -100 leq array elements leq 100 * -200 leq target leq 200 Input The input is given from Standard Input in the following format: N array elements target Output Print \\"Yes\\" if there exists a pair (a, b) such that a + b equals the target; otherwise, print \\"No\\". Examples Input 5 1 3 5 7 9 8 Output Yes Input 4 2 4 6 8 15 Output No Input 6 -1 2 -3 4 5 -6 -4 Output Yes","solution":"def has_pair_with_sum(arr, target): Returns \\"Yes\\" if there is a pair of distinct elements in arr that sum up to target, otherwise returns \\"No\\". seen = set() for num in arr: if target - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:N+1])) target = int(data[N+1]) print(has_pair_with_sum(arr, target)) if __name__ == \'__main__\': main()"},{"question":"A scientist is conducting an experiment using bacteria cultures in a laboratory. Each culture is represented as a string consisting of characters \'A\', \'B\', \'C\', and \'D\'. The scientist has a hypothesis that the cultures follow a specific pattern to mutate over time. Specifically, she suspects that each string is derived from a core string by performing a series of mutations where exactly one character is changed to one of the remaining three characters, but it could happen multiple times on the same base string. Given a number of experiment cycles each consisting of multiple bacteria strings, the scientist needs to validate her hypothesis. She needs to determine if there exists a common core string for each experimental cycle from which all the bacteria strings in that cycle could be derived by changing exactly one character at a time. Your task is to help the scientist by writing a program that determines the core string for each cycle, or indicates that such a string does not exist. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of experiment cycles. Each experiment cycle consists of multiple lines: - The first line of each cycle contains an integer n (1 ≤ n ≤ 50), the number of bacteria strings in that cycle. - The next n lines each contain a string of uppercase letters \'A\', \'B\', \'C\', and \'D\' of length m (1 ≤ m ≤ 50), representing the bacteria strings. Output For each experiment cycle, print a single line: - If a core string exists, print the core string. - Otherwise, print -1. Examples Input 2 3 ABCD ABCE ABCF 2 ABCD ABDC Output ABCD -1 Note In the first example, the core string \\"ABCD\\" is mutated to \\"ABCE\\" by changing the last character to \'E\', \\"ABCF\\" by changing the last character to \'F\'. All strings can be derived from \\"ABCD\\" by changing the last character. In the second example, there is no single core string from which both \\"ABCD\\" and \\"ABDC\\" can be derived by changing exactly one character.","solution":"def find_core_string(cycle): n = len(cycle) m = len(cycle[0]) for i in range(n): candidate = list(cycle[i]) valid = True for j in range(m): original_char = candidate[j] mismatch_count = 0 for k in range(n): if cycle[k][j] != original_char: mismatch_count += 1 if mismatch_count > 1: break if mismatch_count == 1: candidate[j] = next(c for c in \'ABCD\' if c != original_char) if not all(sum(a != b for a, b in zip(candidate, cycle[k])) == 1 for k in range(n)): candidate[j] = original_char valid = False break if valid: return \'\'.join(candidate) return -1 def solve(t, experiments): results = [] for i in range(t): cycle = experiments[i] core_string = find_core_string(cycle) results.append(core_string) return results"},{"question":"You are given an array of n integers. Your task is to partition the array into the minimum number of subarrays such that each subarray is strictly increasing (each element in the subarray is greater than the previous element). Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer k — the minimum number of subarrays that the array can be partitioned into. Examples Input 6 1 2 2 3 4 5 Output 2 Input 5 1 1 1 1 1 Output 5 Input 8 5 1 2 3 4 3 4 5 Output 3 Explanation In the first example, the array can be partitioned into the two subarrays: [1, 2] and [2, 3, 4, 5]. In the second example, since all elements are the same, each subarray will only contain one element, leading to a total of 5 subarrays. In the third example, the array can be partitioned into three subarrays: [5], [1, 2, 3, 4], and [3, 4, 5].","solution":"def min_subarrays_to_increasing(arr): Returns the minimum number of subarrays needed such that each subarray is strictly increasing. if not arr: return 0 count = 1 for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: count += 1 return count # Example Usage: # n = 6 # arr = [1, 2, 2, 3, 4, 5] # print(min_subarrays_to_increasing(arr)) # Output: 2"},{"question":"Stefung is learning about binary search on arrays. He decides to test his knowledge by implementing a slightly modified version of binary search. Instead of stopping when the target element is found, he wants to count the number of occurrences of the target element in the array. Knowing that the array may not be sorted and may contain duplicate elements, Stef insists that the array should first be sorted, then the number of occurrences should be counted using binary search. Can you help Stef implement this? Given an array of integers and a target integer, sort the array and then use binary search to count the occurrences of the target integer in the array. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. - The second line contains n space-separated integers ai (-109 ≤ ai ≤ 109), the elements of the array. - The third line contains a single integer t (-109 ≤ t ≤ 109), the target integer. Output Output a single integer, the number of occurrences of the target integer in the array. Example Input 6 4 2 1 2 3 2 2 Output 3 Input 5 5 3 5 6 5 5 Output 3","solution":"def count_occurrences(arr, target): Sorts the array and counts the number of occurrences of the target in the sorted array. Parameters: arr (list of int): The list of integers. target (int): The target integer to count. Returns: int: The number of occurrences of the target integer. arr.sort() def binary_search_left(arr, target): low, high = 0, len(arr) while low < high: mid = (low + high) // 2 if arr[mid] < target: low = mid + 1 else: high = mid return low def binary_search_right(arr, target): low, high = 0, len(arr) while low < high: mid = (low + high) // 2 if arr[mid] <= target: low = mid + 1 else: high = mid return low left_index = binary_search_left(arr, target) right_index = binary_search_right(arr, target) return right_index - left_index # Example usage n = 6 arr = [4, 2, 1, 2, 3, 2] target = 2 print(count_occurrences(arr, target)) # Output: 3 n = 5 arr = [5, 3, 5, 6, 5] target = 5 print(count_occurrences(arr, target)) # Output: 3"},{"question":"A factory production line has a conveyor system to manage items passing through different stages. Each item is represented by its ID number. You have two operations available: 1. \\"ID\\": Add the item with given ID to the conveyor belt. 2. \\"P\\": Process (remove) the item that has been on the conveyor belt the longest. Write a program to simulate the production line operations. The program should receive a sequence of operations and print the ID of each item that is processed in order. The conveyor belt (queue) initially is empty. # Input - A single operation per line, either an ID (positive integer) or \\"P\\". - The number of input lines is less than or equal to 100. # Output - For each \\"P\\", print the ID of the item that is processed. # Example Input ``` 5 3 7 P 4 P P P ``` Output ``` 5 3 7 4 ```","solution":"from collections import deque def process_operations(operations): Simulate factory production line operations. Args: operations (list): A list of strings, each being either an item ID (positive integer) or \\"P\\". Prints: The ID of each item that is processed when the operation is \\"P\\". conveyor_belt = deque() for operation in operations: if operation == \\"P\\": if conveyor_belt: print(conveyor_belt.popleft()) else: conveyor_belt.append(int(operation)) # Example usage: # operations = [\'5\', \'3\', \'7\', \'P\', \'4\', \'P\', \'P\', \'P\'] # process_operations(operations)"},{"question":"You are given a list of integers and you want to organize them into separate contiguous sub-lists such that each sub-list contains unique integers only and the length of the longest sub-list is minimized. Your task is to determine the minimum length of the longest sub-list that can be achieved from the given list. For clarity, two sub-lists are contiguous if they directly follow each other in the original list without rearranging the elements. Input An integer T (1 ≤ T ≤ 100), representing the number of test cases. For each test case: - An integer n (1 ≤ n ≤ 1000), the number of integers in the list. - A list of n integers, where each integer is between 1 and 10000, representing the elements of the list. Output For each test case, output the minimum length of the longest sub-list containing unique integers only. Example Input: 2 5 1 2 2 3 4 6 1 2 3 4 5 6 Output: 3 1 Explanation For the first test case, one optimal way is to break the list into sub-lists [1, 2], [2, 3], and [4], where the longest sub-list has a length of 3. For the second test case, the list already has unique integers, so the entire list is a single sub-list with the length of 1.","solution":"def min_length_longest_sublist(test_cases): results = [] for n, arr in test_cases: unique_elements = set() maxLength = 0 currentLength = 0 for num in arr: if num in unique_elements: unique_elements = {num} currentLength = 1 else: unique_elements.add(num) currentLength += 1 maxLength = max(maxLength, currentLength) results.append(maxLength) return results"},{"question":"In a certain city, there is a popular park which has a number of interconnected pathways in the form of a grid (rows and columns). The park authorities want to create a new walking path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) of the grid. However, they want this path to be the safest possible, and the safety levels are represented by a 2D array where each cell has an integer value representing its safety level (lower is safer). You are asked to determine the minimum possible sum of safety levels along the path from the top-left to the bottom-right corner. You are only allowed to move right or down at any point in time. Write a program that takes the number of test cases, followed by inputs for each test case that include the dimensions of the grid (N and M) and the grid of safety levels. Your program should output the minimum possible sum of safety levels for each test case. Input The first line of the input contains an integer T denoting the number of test cases. For each test case, the first line contains two space-separated integers N and M (1 <= N, M <= 100), and each of the next N lines contains M space-separated integers representing the safety levels of the grid. Output Output exactly T lines, each containing the desired answer for the respective test case. Constraints 1 <= T <= 10 1 <= N, M <= 100 0 <= safety levels <= 1000 Example Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Output: 7 7 Explanation In the first test case, we have the following grid: 1 3 1 1 5 1 4 2 1 The safest path from the top-left to the bottom-right is 1 -> 3 -> 1 -> 1 -> 1, which sums up to 7.","solution":"def min_safety_sum(T, cases): results = [] for case in cases: N, M, grid = case dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[N-1][M-1]) return results"},{"question":"Given an integer N, write a program that prints the largest possible number you can form by concatenating the numbers 1 through N in any order. Constraints * 1 ≤ N ≤ 9 Input Input is given from Standard Input in the following format: N Output Print the largest concatenated number that can be formed. Examples Input 3 Output 321 Input 4 Output 4321","solution":"from itertools import permutations def largest_concatenated_number(N): Returns the largest number that can be formed by concatenating the numbers 1 through N in any order. numbers = map(str, range(1, N+1)) all_permutations = permutations(numbers) largest_number = max(int(\'\'.join(p)) for p in all_permutations) return largest_number"},{"question":"You are given a list of flight routes between various cities. Each route is represented by a tuple (A, B) indicating a direct flight from city A to city B. Your task is to find the total number of distinct cities that can be visited starting from a given city C, considering both direct and indirect flights. Input The first line contains an integer n (1 ≤ n ≤ 10000), the number of flight routes. Each of the next n lines contains two space-separated strings A and B, representing a direct flight from city A to city B. Both A and B are strings of at most 100 characters consisting of uppercase and lowercase letters. The last line contains a single string C, the starting city. Output Print the total number of distinct cities that can be visited from city C, including city C itself. Examples Input 5 NewYork LosAngeles LosAngeles Chicago Chicago Miami Miami Boston SanFrancisco Dallas NewYork Output 5 Input 3 Paris London London Berlin Berlin Paris Rome Output 1 Note In the first sample, starting from \\"NewYork\\", one can visit \\"NewYork\\", \\"LosAngeles\\", \\"Chicago\\", \\"Miami\\", and \\"Boston\\". In the second sample, starting from \\"Rome\\", no other cities can be reached, so the total number of distinct cities visited is just 1 (\\"Rome\\").","solution":"def find_distinct_cities(n, flight_routes, starting_city): from collections import defaultdict, deque # Create graph from flight routes graph = defaultdict(list) for origin, destination in flight_routes: graph[origin].append(destination) # Start BFS from starting city visited = set() queue = deque([starting_city]) while queue: city = queue.popleft() if city not in visited: visited.add(city) for neighbor in graph[city]: if neighbor not in visited: queue.append(neighbor) return len(visited)"},{"question":"A popular racing event wants to keep track of the participants\' positions dynamically. Given the initial starting positions of the participants and their subsequent movements, write a program that outputs the final positions of the participants after all the movements. The participants are represented by unique integers starting from 1 up to n. Their movements are provided as a list of tuples with each tuple consisting of a participant\'s number and their movement steps. # Input - The first line contains an integer `n` (1 <= n <= 1000) - the number of participants. - The second line contains `n` space-separated integers representing the initial positions of the participants. - The third line contains an integer `m` (0 <= m <= 10000) - the number of movements. - The next `m` lines each contain two integers `pi` and `si` - indicating that the participant `pi` moves `si` steps forward or backward (positive value for forward, negative for backward). # Output - Output `n` space-separated integers representing the final positions of the participants after all movements. # Example Input ``` 5 2 1 5 3 4 3 1 2 2 -1 5 3 ``` Output ``` 4 0 5 3 7 ``` # Explanation - Initially, the positions are: [2, 1, 5, 3, 4] - After the first movement (1, 2): The first participant moves 2 steps forward. Positions: [4, 1, 5, 3, 4] - After the second movement (2, -1): The second participant moves 1 step backward. Positions: [4, 0, 5, 3, 4] - After the third movement (5, 3): The fifth participant moves 3 steps forward. Positions: [4, 0, 5, 3, 7] # Constraints - Ensure that all given indices for movements are valid and within the range of the number of participants. - Position values can be any integer, positive or negative. Test your solution to ensure it handles boundary conditions and large inputs effectively.","solution":"def final_positions(n, initial_positions, movements): Calculates the final positions of participants after a series of movements. Args: - n: int - Number of participants - initial_positions: List[int] - Initial positions of the participants - movements: List[Tuple[int, int]] - List of movements, each as (participant, steps) Returns: - List[int] - Final positions of the participants positions = initial_positions[:] for pi, si in movements: positions[pi - 1] += si return positions"},{"question":"Alex is participating in a coding competition with a problem-solving game. In the game, there are N stones placed in a line, and each stone has a number written on it which represents the stone\'s value. Alex is allowed to pick a subset of these stones such that no two stones in the chosen subset are adjacent. Alex wants to maximize the sum of the values of the stones in the subset he picks. Help Alex find the maximum possible sum of values he can pick following the above rule. # Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of stones. - The second line of each test case contains N integers separated by spaces, representing the values on the stones. # Output: For each test case, output a single integer, the maximum sum of values that Alex can achieve by picking stones according to the rule. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ Each stone\'s value ≤ 10^4 # Example: Input: ``` 2 5 3 2 5 10 7 4 10 2 2 100 ``` Output: ``` 15 110 ``` # Explanation: Example case 1: Alex can pick the stones with values 3, 5, and 7. So, the maximum sum is 3 + 5 + 7 = 15. Another possible way is picking stones with values 3 and 10, but the sum will be 3 + 10 = 13, which is less than 15. Example case 2: Alex can pick stones with values 10 and 100, so the maximum sum is 10 + 100 = 110.","solution":"def max_subset_sum(T, test_cases): Returns the maximum possible sum of values he can pick for each test case. Parameters: T (int): Number of test cases test_cases (list): A list of tuples, where each tuple contains: - N (int): Number of stones - values (list): List of integers representing the stone values Returns: List[int]: List of integers representing the maximum sum for each test case results = [] for case in test_cases: N, values = case if N == 0: results.append(0) continue if N == 1: results.append(values[0]) continue # Initialize dp array dp = [0] * N dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + values[i]) results.append(dp[-1]) return results # Example usage T = 2 test_cases = [ (5, [3, 2, 5, 10, 7]), (4, [10, 2, 2, 100]) ] print(max_subset_sum(T, test_cases)) # Output: [15, 110]"},{"question":"In a university, there is a lecture hall that is used by several classes throughout the day. The lecture hall has a limited number of seats, and each class has a specific number of students enrolled. You are given the schedule of the classes, where each class is assigned to a time slot, and the number of students in each class. Your task is to determine whether it is possible to accommodate all the classes in the lecture hall without exceeding the number of available seats at any time. Input The input consists of multiple lines: - The first line contains two integers, S (the number of seats in the lecture hall) and C (the number of classes). - The next C lines each contain two integers, T_i (the time slot of the class) and N_i (the number of students enrolled in the class). Constraints - 1 ≤ S ≤ 1000 - 1 ≤ C ≤ 100 - 1 ≤ T_i ≤ 10^6 - 1 ≤ N_i ≤ 1000 Output Print \\"YES\\" if all classes can be accommodated without exceeding the number of seats in the lecture hall at any time, otherwise print \\"NO\\". Example Input 50 3 1 30 2 20 1 10 Output YES Input 30 2 1 25 1 10 Output NO Explanation In the first example, the hall can accommodate both classes in time slot 1. 30 + 10 <= 50. In the second example, the hall cannot accommodate all students in time slot 1 as 25 + 10 > 30.","solution":"def can_accommodate_classes(S, C, schedule): time_slots = {} for T_i, N_i in schedule: if T_i in time_slots: time_slots[T_i] += N_i else: time_slots[T_i] = N_i for students in time_slots.values(): if students > S: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers, and you can perform the following operations on the array any number of times: * Choose an element and increase it by 1. * Choose an element and decrease it by 1. Your goal is to make all elements in the array equal with the minimum number of operations. Constraints * 1 leq N leq 200000 * 1 leq A_i leq 1000000000 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 A_3 ... A_N Output Print an integer representing the minimum number of operations needed to make all elements in the array equal. Examples Input 3 1 2 3 Output 2 Input 4 10 10 10 10 Output 0","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations needed to make all elements of the array equal. # Sorting the array to find the median arr.sort() # The median minimizes the absolute deviations median_value = arr[len(arr) // 2] # Calculating the total number of operations needed operations = sum(abs(x - median_value) for x in arr) return operations"},{"question":"You are given a list of words. Create a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". Input: The first line contains an integer T, the number of test cases (1 <= T <= 200). For each test case: - An integer N, the number of words (1 <= N <= 200) - N words, each word containing only lowercase English letters and having length between 1 and 1000. Output: For each test case, output a single line containing the longest common prefix. Example: Input: 2 3 flower flow flight 3 dog racecar car Output: fl \\"\\" (empty string, since there is no common prefix) Explanation: - In the first test case, the longest common prefix is \\"fl\\" as all three words start with \\"fl\\". - In the second test case, there is no common prefix as the words do not share any starting sequence of letters. The output is an empty string.","solution":"def longest_common_prefix(words): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not words: return \\"\\" # Sort the list to get the smallest and largest words which would maximize the common prefix words.sort() first, last = words[0], words[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i] def process_test_cases(test_cases): results = [] for words in test_cases: results.append(longest_common_prefix(words)) return results"},{"question":"Library System Overdue Notice You are tasked with creating an overdue notice system for a library. The system will take records of borrowed books and the current date, then determine which books are overdue and need to send a notice. Each record contains the customer\'s name, the book title, the date it was borrowed, and the due date. Your task is to write a program that identifies the overdue books and formats a notice for each overdue book. Input The input consists of several lines of records. Each record is formatted as: ``` customer_name book_title borrowed_date due_date ``` - `customer_name` and `book_title` are strings that only contain letters and spaces. - `borrowed_date` and `due_date` are dates in the format `YYYY-MM-DD`. The last line of the input contains the current date, also in `YYYY-MM-DD` format. Output For each overdue book, produce a notice in the following format: ``` Notice: \\"book_title\\" borrowed by customer_name is overdue. Was due on due_date. ``` If no books are overdue, print `No overdue books.`. Sample Input ``` Alice Wonderland 2023-09-10 2023-09-20 Bob MobyDick 2023-09-12 2023-09-19 Charlotte PrideAndPrejudice 2023-09-15 2023-09-25 2023-09-21 ``` Sample Output ``` Notice: \\"Wonderland\\" borrowed by Alice is overdue. Was due on 2023-09-20. Notice: \\"MobyDick\\" borrowed by Bob is overdue. Was due on 2023-09-19. ``` Example Input ``` Alice Wonderland 2023-09-10 2023-09-20 Bob MobyDick 2023-09-12 2023-09-19 Charlotte PrideAndPrejudice 2023-09-15 2023-09-25 2023-09-21 ``` Output ``` Notice: \\"Wonderland\\" borrowed by Alice is overdue. Was due on 2023-09-20. Notice: \\"MobyDick\\" borrowed by Bob is overdue. Was due on 2023-09-19. ```","solution":"from datetime import datetime def overdue_notices(records, current_date): Returns a list of overdue notice strings or a message of no overdue books. :param records: List of records where each record is a tuple of (customer_name, book_title, borrowed_date, due_date). :param current_date: Current date string in the format \'YYYY-MM-DD\'. :return: List of overdue notice strings or a single string \'No overdue books.\'. notices = [] current_date = datetime.strptime(current_date, \'%Y-%m-%d\') for record in records: customer_name, book_title, borrowed_date, due_date = record due_date_dt = datetime.strptime(due_date, \'%Y-%m-%d\') if due_date_dt < current_date: notice = f\'Notice: \\"{book_title}\\" borrowed by {customer_name} is overdue. Was due on {due_date}.\' notices.append(notice) if not notices: return \'No overdue books.\' return notices"},{"question":"You are given a list of n integers where each integer represents the height of a vertical line drawn on a plane from position i and height h_i. Each pair of adjacent lines forms a rectangle of width 1. Your task is to find the maximum area of any rectangle that can be formed using adjacent lines. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of lines. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the vertical lines. Output Print one integer — the maximum area of a rectangle that can be formed using any pair of adjacent lines. Examples Input 6 2 1 5 6 2 3 Output 10 Input 5 5 4 3 2 1 Output 6 Note In the first example, the rectangles formed by adjacent lines have areas: 2*1, 1*5, 5*1, 6*2, and 2*3. The maximum area among these is 10, formed by the lines with heights 5 and 6. In the second example, the rectangles formed by adjacent lines have areas: 5*4, 4*3, 3*2, and 2*1. The maximum area among these is 6, formed by the lines with heights 3 and 2.","solution":"def max_adjacent_area(n, heights): Returns the maximum area of any rectangle that can be formed using adjacent lines. max_area = 0 for i in range(n - 1): area = min(heights[i], heights[i + 1]) * 1 max_area = max(max_area, area) return max_area"},{"question":"You are given a grid representing a field of hills and valleys. Each cell in the grid has an elevation value. Create a program that finds the highest peak and the lowest valley in the grid. The peak is a cell that is higher than all of its adjacent cells, and a valley is a cell that is lower than all of its adjacent cells. Adjacency includes horizontal, vertical, and diagonal neighbors. Input The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. The next n lines contain m integers each, representing the elevation values of the grid cells. Output Output two integers: the elevation of the highest peak and the elevation of the lowest valley. If there is no peak or valley, output -1 for that value. Example Input 4 4 10 12 10 14 9 14 11 20 15 16 10 10 18 17 20 15 Output 20 9 Explanation - The highest peak is 20, which is higher than its adjacent cells. - The lowest valley is 9, which is lower than its adjacent cells.","solution":"def find_highest_peak_and_lowest_valley(grid): n = len(grid) m = len(grid[0]) def is_peak(x, y): elev = grid[x][y] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] >= elev: return False return True def is_valley(x, y): elev = grid[x][y] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] <= elev: return False return True highest_peak = -1 lowest_valley = -1 for i in range(n): for j in range(m): if is_peak(i, j): highest_peak = max(highest_peak, grid[i][j]) if is_valley(i, j): lowest_valley = min(lowest_valley, grid[i][j]) if lowest_valley != -1 else grid[i][j] return highest_peak, lowest_valley"},{"question":"The local zoo recently installed a new exhibit featuring robotic animals that can move through a grid. Each robotic animal can move in one of four directions: up, down, left, or right. However, the robots sometimes malfunction and move randomly after executing a movement command. Your task is to help the zookeeper determine if a designated robot can reach a specific cell on the grid from its starting position, despite possibly malfunctioning movements. Input The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns of the grid, respectively. The second line contains two integers x0 and y0 (1 ≤ x0 ≤ n, 1 ≤ y0 ≤ m) — the starting position of the robot (1-based index). The third line contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the target position on the grid (1-based index). The fourth line contains a single integer k (1 ≤ k ≤ 10^4) — the number of moves the robot will attempt to make. The fifth line contains a string of length k consisting of characters \'U\', \'D\', \'L\', \'R\', representing the movements: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The robot malfunctions by moving randomly in one of the four possible directions with equal probability, instead of the intended direction, every time it attempts a move. Determine if the robot can reach the target position at least once by following the sequence of k moves. Output Print \\"YES\\" if the robot can reach the target position at least once, otherwise print \\"NO\\". Examples Input 3 3 1 1 2 2 4 UDRL Output YES Input 3 3 1 1 3 3 2 RD Output NO","solution":"def is_reachable(n, m, x0, y0, x, y, k, moves): Determines if the robot can reach the target cell at least once based on the given movements, considering possible malfunctions. # Check if the destination is reachable based on simple bound checks: # If robot starts within (x0, y0) and can move to (x, y) in k moves # regardless of malfunction we can determine possibility. moves_needed = abs(x - x0) + abs(y - y0) # This is a naive approach because the robot can move randomly due to malfunctions. # Since the robot malfunctions randomly, every move has an equal chance to # go in any direction. Considering this randomness, the robot\'s final position # should still be reachable within the given number of moves `k`. if moves_needed <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Problem: Alice is playing a game with Bob. She has a list of N integers and she wants to create a new list where each element is the product of all integers in the original list except the one at the same index. However, computing the product of numbers directly might not be efficient for large N due to potential overflow issues. Help Alice find an efficient way to solve this problem. Input The first line of the input consists of an integer T, the number of test cases. For each test case, the first line consists of an integer N, the number of elements in the list. The second line consists of N space-separated integers representing the elements of the list. Output For each test case, print a single line containing N space-separated integers, where the ith integer is the product of all integers in the original list except the ith one. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 −1000 ≤ List elements ≤ 1000 Problem Setter: Jon SAMPLE INPUT 2 3 3 2 1 4 1 2 3 4 SAMPLE OUTPUT 2 3 6 24 12 8 6","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all elements in the original list except the one at the same index. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [1] * length for i in range(length): result[i] = left_products[i] * right_products[i] return result def process_input(input_str): Processes the input string and returns the corresponding output string. input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) result = [] index = 1 for _ in range(T): N = int(input_lines[index]) nums = list(map(int, input_lines[index + 1].split())) index += 2 products = product_except_self(nums) result.append(\\" \\".join(map(str, products))) return \\"n\\".join(result)"},{"question":"A company is building a task management system where tasks are assigned to employees. Each task has a priority level and a list of required skills. Each employee has a set of skills they possess and a task queue that they can manage. The task management system should assign tasks to employees based on their skills and the order of task priority. Your task is to write a function which assigns tasks to employees. The assignment should be based on the following rules: 1. A task can only be assigned to an employee who has all the required skills for the task. 2. A task should be assigned to the first available employee (in the order they appear in the list of employees) who has the required skills and whose task queue is not full. If no such employee is found, the task remains unassigned. 3. For each task, the first available employee is determined based on the priority of the task. Tasks are processed in the order of their priority (lower number means higher priority). Function Signature: ```python def assign_tasks(tasks, employees, max_tasks): # your code here pass ``` # Input - `tasks`: A list of dictionaries, where each dictionary contains `id` (unique identifier for the task), `priority` (integer where a lower number indicates a higher priority), and `required_skills` (list of strings representing the required skills for the task). - `employees`: A list of dictionaries, where each dictionary contains `id` (unique identifier for the employee), and `skills` (list of strings representing the skills the employee possesses). - `max_tasks`: An integer indicating the maximum number of tasks an employee can handle. # Output - A dictionary where the keys are employee `id`s and the values are lists of task `id`s assigned to each employee. # Constraints - Each employee can handle up to `max_tasks` at a time. - Each task should be assigned to the first suitable and available employee in order of task priority. # Example ```python tasks = [ {\\"id\\": 1, \\"priority\\": 2, \\"required_skills\\": [\\"coding\\", \\"testing\\"]}, {\\"id\\": 2, \\"priority\\": 1, \\"required_skills\\": [\\"coding\\", \\"design\\"]}, {\\"id\\": 3, \\"priority\\": 3, \\"required_skills\\": [\\"design\\"]}, ] employees = [ {\\"id\\": 1, \\"skills\\": [\\"coding\\", \\"testing\\"]}, {\\"id\\": 2, \\"skills\\": [\\"coding\\", \\"design\\"]}, ] max_tasks = 2 print(assign_tasks(tasks, employees, max_tasks)) ``` Output ```python {1: [1], 2: [2, 3]} ```","solution":"def assign_tasks(tasks, employees, max_tasks): # Sort tasks by priority ascending order sorted_tasks = sorted(tasks, key=lambda x: x[\\"priority\\"]) # Initialize the task_queues for each employee task_queues = {employee[\\"id\\"]: [] for employee in employees} # Loop over each task for task in sorted_tasks: # Loop over each employee to check if they can take the task for employee in employees: # Check if the employee has all required skills if all(skill in employee[\\"skills\\"] for skill in task[\\"required_skills\\"]): # Check if the employee\'s task queue is not full if len(task_queues[employee[\\"id\\"]]) < max_tasks: # Assign the task to the employee and break the loop task_queues[employee[\\"id\\"]].append(task[\\"id\\"]) break return task_queues"},{"question":"A group of n friends are playing a game involving candies. They distribute n candies in such a way that each friend gets one candy at a time in a round-robin fashion and the game stops once all the candies are distributed. The friends are numbered from 1 to n. Each friend has a preference list detailing how many candies they would like to have (e.g., friend 1 might want 3 candies, friend 2 might want 5 candies, and so on). After distributing all the candies, it might turn out that some friends did not get as many candies as they wanted, while some might have obtained their desired number and perhaps more. Your task is to determine how many friends got at least the number of candies they wanted. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of friends and candies. - The second line contains n integers c_1, c_2, ..., c_n (0 ≤ c_i ≤ 100,000) — the number of candies each friend desires. Output - Print a single integer — the number of friends who got at least as many candies as they wanted. Example Input 5 1 2 1 2 1 Output 3 Explanation Each friend wants candies in amounts [1, 2, 1, 2, 1]. In a round-robin distribution, everyone gets 1 candy, and then the distribution stops as there are no more candies. The friends who wanted 1 candy got exactly what they wanted, so 3 friends got at least as many candies as they wanted.","solution":"def number_of_satisfied_friends(n, candies): Returns the number of friends who got at least the number of candies they wanted. Parameters: - n: int : the number of friends (and candies) - candies: list : list of integers representing each friend\'s desired number of candies Returns: - int : the number of friends satisfied with the distributed candies satisfied_count = 0 for desired in candies: if desired <= 1: satisfied_count += 1 return satisfied_count"},{"question":"Problem Statement You are given a string that consists of only \'a\' and \'b\' characters. Dave likes strings that have the same number of \'a\' and \'b\' characters. Each time you can remove either an \'a\' or a \'b\' from the string. Find the minimum number of removals required to make Dave happy by converting the given string into a balanced string where the number of \'a\' and \'b\' characters are equal. Input First line contains a single integer T - the number of test cases. T test cases follow. Each test case consists of a single line containing a string of length n, consisting of characters \'a\' and \'b\' only. Output For each test case, print the minimum number of removals needed. Constraints 1 <= T <= 100 1 <= n <= 1000 Example Input: 3 abba aba aaaabb Output: 0 1 2 Explanation: For the first string \\"abba\\", it already has an equal number of \'a\' and \'b\', so 0 removals are needed. For the second string \\"aba\\", we can remove 1 \'a\' or 1 \'b\' to balance the string, so the answer is 1. For the third string \\"aaaabb\\", we need to remove 2 \'a\'s or 2 \'b\'s to balance the string, so the answer is 2.","solution":"def min_removals_to_balance(s): Calculate the minimum number of removals required to balance the string. count_a = s.count(\'a\') count_b = s.count(\'b\') return abs(count_a - count_b) def solve(test_cases): Processes the list of input strings and returns a list of results for each test case. results = [] for s in test_cases: results.append(min_removals_to_balance(s)) return results"},{"question":"You are developing a video streaming platform where users can tag videos with different labels. Each video can have multiple tags, and a user can search the video database using those tags. Design a system which allows for tagging and searching videos based on tags. Input The first input line contains two integers n and q (1 ≤ n, q ≤ 100000): the number of videos and the number of operations respectively. Then, there are n lines. Each line starts with a video ID (an integer between 1 and n) followed by a space-separated list of tags. Each tag is a string of lowercase English letters. Following the video information, there are q lines describing operations. Each operation is one of the following: - \\"add ID tag\\" : Add the specified tag to the video with the given ID. - \\"remove ID tag\\" : Remove the specified tag from the video with the given ID. - \\"find tag\\" : List all videos that contain the specified tag. Each result should list the video IDs in ascending order. Output For each \\"find\\" operation, output a single line containing a space-separated list of video IDs. Example Input 3 5 1 music 2 sports games 3 movies add 1 pop find sports remove 2 games find sports find music Output 2 2 1","solution":"from collections import defaultdict class VideoTaggingSystem: def __init__(self, n, videos_info): self.videos = defaultdict(set) # video_id -> set of tags self.tag_index = defaultdict(set) # tag -> set of video_ids for info in videos_info: parts = info.split() video_id = int(parts[0]) tags = parts[1:] self.videos[video_id].update(tags) for tag in tags: self.tag_index[tag].add(video_id) def add_tag(self, video_id, tag): if tag not in self.videos[video_id]: self.videos[video_id].add(tag) self.tag_index[tag].add(video_id) def remove_tag(self, video_id, tag): if tag in self.videos[video_id]: self.videos[video_id].remove(tag) self.tag_index[tag].remove(video_id) def find_videos_by_tag(self, tag): return sorted(self.tag_index.get(tag, [])) def process_operations(n, q, videos_info, operations): system = VideoTaggingSystem(n, videos_info) results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": video_id = int(parts[1]) tag = parts[2] system.add_tag(video_id, tag) elif command == \\"remove\\": video_id = int(parts[1]) tag = parts[2] system.remove_tag(video_id, tag) elif command == \\"find\\": tag = parts[1] result = system.find_videos_by_tag(tag) results.append(\' \'.join(map(str, result))) return results"},{"question":"Alice needs to paint a fence that has n sections, each requiring a specific time to paint. She can choose when to take breaks but wants to minimize the number of breaks she takes, given that she cannot paint continuously for more than h hours. Given an array of integers representing the time required to paint each section of the fence, determine the minimum number of breaks Alice needs to take to paint the entire fence. Constraints * All values in input are integers. * 1 leq n leq 100 * 1 leq h leq 100 * 1 leq time required to paint each section leq 100 Input Read input from Standard Input in the following format: n h followed by n space-separated integers representing the time to paint each section. Output Print the minimum number of breaks Alice needs to take. Examples Input 5 4 3 1 2 1 4 Output 2 Input 3 10 1 1 1 Output 0 Input 4 3 5 1 2 1 Output 3","solution":"def min_breaks(n, h, times): breaks = 0 current_hours = 0 for time in times: if current_hours + time > h: breaks += 1 current_hours = 0 current_hours += time return breaks if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) h = int(data[1]) times = list(map(int, data[2:])) print(min_breaks(n, h, times))"},{"question":"Given a matrix of m rows and n columns filled with non-negative integers, you need to find the sum of all the cells whose values are greater than a specified threshold. Write a function `sum_above_threshold(m, n, matrix, threshold)` that takes as input: - an integer `m` (1 ≤ m ≤ 100) representing the number of rows, - an integer `n` (1 ≤ n ≤ 100) representing the number of columns, - a list `matrix` of size m × n containing non-negative integers (0 ≤ matrix[i][j] ≤ 1000), - an integer `threshold` (0 ≤ threshold ≤ 1000). The function should return the sum of the values in the matrix that are strictly greater than the threshold. Input The first line contains two integers m and n — the number of rows and columns in the matrix. The next m lines each contain n space-separated integers representing the matrix. The last line contains the threshold. Output Output one integer — the sum of the values in the matrix that are strictly greater than the threshold. Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 4 ``` Output ``` 35 ``` Explanation: The matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` The elements greater than the threshold 4 are: 5, 6, 7, 8, 9. Their sum is 35.","solution":"def sum_above_threshold(m, n, matrix, threshold): Returns the sum of the values in the matrix that are strictly greater than the threshold. total_sum = 0 for i in range(m): for j in range(n): if matrix[i][j] > threshold: total_sum += matrix[i][j] return total_sum"},{"question":"You are given a string s composed of lowercase alphabetic characters and a digit x. Your task is to shift each character in the string s forward in the alphabet by a number of positions equal to the digit x. If the shift exceeds \'z\', it should wrap around to \'a\'. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100) and the digit x (0 ≤ x ≤ 9) separated by a space. Output Print the transformed string after applying the shift to each character. Examples Input abc 2 Output cde Input xyz 3 Output abc","solution":"def shift_string(s, x): Shifts each character in the string s forward in the alphabet by a number of positions equal to the digit x. If the shift exceeds \'z\', it wraps around to \'a\'. x = int(x) shifted_string = [] for char in s: shifted_char = chr((ord(char) - ord(\'a\') + x) % 26 + ord(\'a\')) shifted_string.append(shifted_char) return \'\'.join(shifted_string) def transform_input(input_str): s, x = input_str.rsplit(maxsplit=1) return shift_string(s, x)"},{"question":"Alan came across a peculiar vending machine that sells packages of snacks. The vending machine is designed in a unique way - it can determine the exact number of snacks to dispense based on a series of queries. Each query consists of a number, and for every query, the vending machine dispenses the number of snacks that is the least perfect square greater than or equal to the given number. A perfect square is an integer that is the square of some integer. For example, 1, 4, 9, and 16 are perfect squares. Write a program to process a series of queries to determine the number of snacks dispensed for each query. Input The first line of the input contains an integer `q` (1 ≤ q ≤ 100), the number of queries. Each of the next `q` lines contains a single integer `k` (1 ≤ k ≤ 10^9), representing a query. Output For each query, output a single integer - the number of snacks dispensed by the vending machine. Examples Input 4 1 5 10 15 Output 1 9 16 16 Explanation For the first query, 1 is already a perfect square, so the vending machine dispenses 1 snack. For the second query, the smallest perfect square greater than or equal to 5 is 9 (3^2), so the machine dispenses 9 snacks. For the third query, the smallest perfect square greater than or equal to 10 is 16 (4^2), so the machine dispenses 16 snacks. For the fourth query, the smallest perfect square greater than or equal to 15 is 16 (4^2), so the machine dispenses 16 snacks.","solution":"import math def next_perfect_square(n): Given a number n, return the smallest perfect square greater than or equal to n. root = math.ceil(math.sqrt(n)) return root * root def process_queries(queries): Given a list of queries, returns a list containing the number of snacks dispensed for each query. results = [] for n in queries: results.append(next_perfect_square(n)) return results"},{"question":"A global software firm has implemented a new encryption algorithm to secure its data. The encryption involves transforming each letter of a plaintext message according to a specific pattern: the nth letter of the alphabet is replaced by the (n+k)th letter of the alphabet in a cyclic manner, where n is the position of the letter in the alphabet (1 for \'a\', 2 for \'b\', ... 26 for \'z\') and k is a given constant. For instance, with k = 3, \'a\' becomes \'d\', \'z\' becomes \'c\', and so on. The plaintext message contains only lowercase letters. You are asked to write a program that encrypts given plaintext messages based on this algorithm based on multiple test cases. Input: - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - The next T lines each contain a single string representing the plaintext message and an integer k (0 ≤ k ≤ 25), separated by a space. Output: - For each test case, output the encrypted message on a new line. Note: The input strings will only contain lowercase alphabetical characters. SAMPLE INPUT 3 hello 1 abc 3 xyz 2 SAMPLE OUTPUT ifmmp def zab Explanation: 1) For the 1st case, with k = 1, \'h\' becomes \'i\', \'e\' becomes \'f\', and so on, resulting in \\"ifmmp\\". 2) For the 2nd case, with k = 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and \'c\' becomes \'f\', resulting in \\"def\\". 3) For the 3rd case, with k = 2, \'x\' becomes \'z\', \'y\' becomes \'a\', and \'z\' becomes \'b\', resulting in \\"zab\\".","solution":"def encrypt_message(plaintext, k): Encrypts given plaintext message with the encryption algorithm. encrypted_message = [] for char in plaintext: new_pos = (ord(char) - ord(\'a\') + k) % 26 + ord(\'a\') encrypted_message.append(chr(new_pos)) return \'\'.join(encrypted_message) def process_test_cases(test_cases): results = [] for plaintext, k in test_cases: result = encrypt_message(plaintext, int(k)) results.append(result) return results"},{"question":"Alice is participating in a programming contest and she has to solve a problem involving balanced strings. A string is considered balanced if it has an equal number of \'L\' and \'R\' characters, and any prefix of the string will not have more \'R\' than \'L\' or more \'L\' than \'R\'. Given a string `s` composed only of the characters \'L\' and \'R\', Alice needs to determine how many ways the string can be split into contiguous substrings so that each substring is balanced. Constraints * The length of the string `s` is between 1 and 100. Input The input consists of a single line containing the string `s`. Output Print the number of ways the string can be split into contiguous balanced substrings. Examples Input RLRRLLRLRL Output 4 Input RLLLLRRRLR Output 3","solution":"def balancedStringSplit(s): Returns the number of ways the string s can be split into contiguous balanced substrings. balance = 0 count = 0 for char in s: if char == \'L\': balance += 1 else: # char == \'R\' balance -= 1 if balance == 0: count += 1 return count"},{"question":"Ali and his friends are enjoying hiking in the mountains. They have a list of locations they want to visit, given as a series of coordinates. However, the path between any two coordinates can be either a hiking trail or a river. The locations connected by a river require a boat that costs a specific amount of money to rent for crossing. Your task is to help Ali determine the minimal amount of money needed to visit all locations at least once, starting from the first location on the list. Given the information about the locations and the paths, your task is to find the minimal cost to traverse all locations starting from the first one. Input The first line of the input contains an integer n (2 ≤ n ≤ 100) — the number of locations. Each of the next n lines contains two space-separated integers xi and yi (-1000 ≤ xi, yi ≤ 1000) — the coordinates of the i-th location. The following line contains an integer m (1 ≤ m ≤ n(n-1)/2) — the number of paths between locations. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ c ≤ 1000) — the path between location u and location v, and the cost c to travel if it\'s a river or 0 if it\'s a hiking trail. Output Output one integer — the minimal cost Ali needs to visit all locations at least once, starting from the first location. Example Input 4 0 0 3 4 6 8 9 12 5 1 2 0 2 3 2 3 4 2 1 3 5 2 4 6 Output 4","solution":"from heapq import heappop, heappush def minimal_cost_to_visit_locations(n, coordinates, m, paths): # Create adjacency list adj_list = {i: [] for i in range(1, n + 1)} for u, v, c in paths: adj_list[u].append((c, v)) adj_list[v].append((c, u)) # Prim\'s Algorithm for Minimum Spanning Tree (MST) # We start with node 1 (the first location) total_cost = 0 visited = [False] * (n + 1) min_heap = [(0, 1)] # (cost, node) while min_heap: cost, u = heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost for c, v in adj_list[u]: if not visited[v]: heappush(min_heap, (c, v)) # Check if all nodes are visited if all(visited[1:]): return total_cost else: return float(\'inf\') # Not all nodes are reachable n = 4 coordinates = [(0, 0), (3, 4), (6, 8), (9, 12)] m = 5 paths = [ (1, 2, 0), (2, 3, 2), (3, 4, 2), (1, 3, 5), (2, 4, 6) ] print(minimal_cost_to_visit_locations(n, coordinates, m, paths)) # Output should be 4"},{"question":"Given a list of \\"vote\\" objects representing upvotes and downvotes on a website, create a function that calculates the net score for each user. Each vote is represented by an object containing the voter\'s username, the username of the person receiving the vote, and the vote value (+1 for an upvote, -1 for a downvote). Your task is to write a program that takes a list of such vote objects and outputs the net score for each user. The net score is defined as the total sum of vote values received by the user. # Input - `n`: the number of votes (n ≥ 1) - A list of `n` vote objects, where each vote object has the following structure: - `voter`: string, the username of the person casting the vote - `recipient`: string, the username of the person receiving the vote - `vote`: integer, the value of the vote (either +1 or -1) # Output Print the net score of each user who has received votes. Each output line should contain a username and their net score, separated by a space. Output the users in the order they first appear in the input list. # Example Input ```json { \\"n\\": 5, \\"votes\\": [ {\\"voter\\": \\"alice\\", \\"recipient\\": \\"bob\\", \\"vote\\": 1}, {\\"voter\\": \\"alice\\", \\"recipient\\": \\"carol\\", \\"vote\\": -1}, {\\"voter\\": \\"dave\\", \\"recipient\\": \\"bob\\", \\"vote\\": 1}, {\\"voter\\": \\"carol\\", \\"recipient\\": \\"eve\\", \\"vote\\": 1}, {\\"voter\\": \\"bob\\", \\"recipient\\": \\"alice\\", \\"vote\\": -1} ] } ``` Output ``` bob 2 carol -1 eve 1 alice -1 ``` # Constraints - The list of vote objects is not necessarily sorted by any particular field. - Usernames are unique strings with a maximum length of 100 characters. - The program should correctly handle upvotes and downvotes cast by and received by the same user. - The user receiving the vote might not necessarily have cast any votes themselves.","solution":"def calculate_net_scores(n, votes): Calculates the net score for each user based on the given votes. Parameters: - n (int): Number of votes. - votes (list of dict): List of vote objects, each containing a \'voter\', \'recipient\', and \'vote\'. Returns: - scores (list of tuples): List of tuples where each tuple contains a username and their net score. net_scores = {} for vote in votes: recipient = vote[\'recipient\'] vote_value = vote[\'vote\'] if recipient not in net_scores: net_scores[recipient] = 0 net_scores[recipient] += vote_value # Format the output as a list of tuples (username, net score) result = [(user, score) for user, score in net_scores.items()] return result"},{"question":"You are a robotics engineer working for a company that manufactures cleaning robots. These robots operate in a grid of size n x m, where each cell in the grid may have some amount of dirt. The robot starts at the top-left corner of the grid (cell (1, 1)), moves to adjacent cells (up, down, left, or right), and tries to clean each cell by collecting all the dirt in it. The robot can’t move out of the boundaries of the grid. Your task is to design an algorithm that helps the robot clean all the cells in the grid such that the robot collects the maximum possible amount of dirt. Note that the robot does not have to visit all the cells, but it can visit each cell at most once. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 200), representing the number of rows and the number of columns in the grid. The next n lines each contain m integers, where the j-th integer of the i-th line dij (0 ≤ dij ≤ 1000) denotes the amount of dirt in the cell (i, j). Output Print a single integer representing the maximum amount of dirt the robot can collect. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the sample testcase, an optimal solution would be to move from (1, 1) to (2, 1), then (3, 1), then (3, 2), then (3, 3), then (2, 3), then (1, 3), then (1, 2). The total amount of dirt collected would be 1 + 4 + 7 + 8 + 9 + 6 + 3 = 29.","solution":"def max_dirt_collected(n, m, grid): Returns the maximum amount of dirt the robot can collect. Arguments: n -- number of rows in the grid m -- number of columns in the grid grid -- 2D list representing the amount of dirt in each cell Returns: An integer representing the maximum amount of dirt. if n == 0 or m == 0: return 0 # Initialize a 2D dp array with same dimensions as grid dp = [[0] * m for _ in range(n)] # Start at (0, 0) dp[0][0] = grid[0][0] # Initialize the first row of dp array for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column of dp array for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) return dp[n - 1][m - 1]"},{"question":"Takahashi loves playing with binary strings. One day, Aoki presented him with a challenge: Given a binary string `s` of length `N`, determine the length of the longest contiguous subsegment containing an equal number of \'0\'s and \'1\'s. If there is no such subsegment, return -1. Constraints * 1 ≦ N ≦ 100 * The string `s` contains only characters \'0\' and \'1\' Input The input is given from Standard Input in the following format: ``` N s ``` Output Output a single integer representing the length of the longest subsegment with an equal number of \'0\'s and \'1\'s. If no such subsegment exists, print -1. Examples Input ``` 10 1101001100 ``` Output ``` 10 ``` Input ``` 8 11110000 ``` Output ``` 8 ``` Input ``` 5 11111 ``` Output ``` -1 ``` Input ``` 6 100101 ``` Output ``` 2 ``` Input ``` 3 010 ``` Output ``` 2 ``` Input ``` 7 1010101 ``` Output ``` 6 ```","solution":"def longest_balanced_subsegment(N, s): max_len = 0 found_subsegment = False # Use a dictionary to store the first occurrence of a specific difference diff_index = {0: -1} count = 0 for i in range(N): count += 1 if s[i] == \'1\' else -1 if count in diff_index: found_subsegment = True max_len = max(max_len, i - diff_index[count]) else: diff_index[count] = i return max_len if found_subsegment else -1"},{"question":"You are working on a project where you must handle large sets of data representing people\'s health metrics. The data set is structured as an m x n matrix, where each cell contains an integer representing a specific health metric for a particular individual on a particular day. Your goal is to identify all rows in the matrix that are ordered such that each element is greater than or equal to the previous element in the row. You need to write a program that checks each row and returns a list of indices corresponding to the rows that meet this criterion. Input The first line contains two integers, m and n, representing the dimensions of the matrix (number of rows and columns respectively). The next m lines each contain n integers, representing the matrix rows. Output Output the indices of the rows that are ordered non-decreasingly. Indices are zero-based and should be printed in a single line separated by spaces. If no rows meet the criterion, output an empty line. Constraints 1 ≤ m, n ≤ 1000 -10^6 ≤ health metrics values ≤ 10^6 Example Input: 4 5 1 2 2 3 4 5 4 3 2 1 10 10 10 10 10 -3 -2 -1 0 1 Output: 0 2 3 Explanation Rows 0, 2, and 3 are non-decreasingly ordered, as each element is greater than or equal to the previous one. Row 1 is not in non-decreasing order.","solution":"def non_decreasing_rows(matrix): Returns a list of indices of rows that are non-decreasingly ordered. indices = [] for idx, row in enumerate(matrix): if all(row[i] <= row[i + 1] for i in range(len(row) - 1)): indices.append(idx) return indices def process_input(input_data): Processes the input to return the required output for the specified problem. lines = input_data.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:1 + m]] return non_decreasing_rows(matrix) # Example usage: # input_data = \\"4 5n1 2 2 3 4n5 4 3 2 1n10 10 10 10 10n-3 -2 -1 0 1\\" # result = process_input(input_data) # output = \\" \\".join(map(str, result)) # print(output) # Output should be: 0 2 3"},{"question":"In a small village, there is an annual puzzle competition. This year, the organizing committee came up with an interesting coding challenge. The problem deals with transforming sequences of integers. You are given a sequence of n integers. You can perform the following operation on the sequence any number of times: select any pair of consecutive integers and replace them with their product. Your task is to determine the minimal possible value that can be obtained after performing the operations optimally. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output Print a single integer — the minimal possible value that can be obtained. Example Input 4 1 2 3 4 Output 24 Input 3 10 8 2 Output 160 Note In the first example, one possible optimal strategy is as follows: 1. Replace (1, 2) with their product 2, resulting in the sequence [2, 3, 4]. 2. Replace (2, 3) with their product 6, resulting in the sequence [6, 4]. 3. Replace (6, 4) with their product 24, resulting in the sequence [24]. In the second example, one possible optimal strategy is as follows: 1. Replace (10, 8) with their product 80, resulting in the sequence [80, 2]. 2. Replace (80, 2) with their product 160, resulting in the sequence [160]. Thus, the minimal possible value obtained is 24 for the first example and 160 for the second example.","solution":"def minimal_possible_value(sequence): Returns the minimal possible value of a sequence after consecutively replacing pairs of elements with their product. from functools import reduce # Multiply all elements together return reduce(lambda x, y: x * y, sequence)"},{"question":"Imara loves solving arithmetic puzzles. One day, she came across a challenge involving series and sums and decided to create her own twist on it. She starts with an integer k, and for each i (1 ≤ i ≤ k), she writes down the series of natural numbers starting from i and sums them up to m terms (1 ≤ m ≤ 100). Given the starting number i and the number m of terms, she sums up the series: i + (i+1) + (i+2) + ... + (i+(m-1)) Imara wants to automate this process and find all such sums for different values of i and m efficiently. She has asked for your help to write a program that calculates the sum of this series given i and m. Input The input contains two integers, i and m (1 ≤ i ≤ 1000, 1 ≤ m ≤ 100). Output Output a single integer, which is the sum of the series starting at i and up to m terms. Examples Input 5 3 Output 21 Input 1 10 Output 55 Note In the first example, the series would be 5 + 6 + 7, which sums to 18. In the second example, the series would be 1 + 2 + 3 + ... + 10, which sums to 55. Can you help Imara with this challenge?","solution":"def sum_series(i, m): Returns the sum of the series starting at i and up to m terms. i: starting integer of the series m: number of terms in the series total_sum = 0 for j in range(m): total_sum += i + j return total_sum"},{"question":"Example Input 3 15 20 100 2 100 200 5 50 150 3 Output 100 [New Question]: Example Input 4 25 10 50 5 30 70 8 60 90 15 40 100 7 Output 15","solution":"def min_cost_to_achieve_value(n, req_value, items): Returns the minimum cost to achieve or exceed the required minimum value min_cost = float(\'inf\') for s, e, c in items: if s <= req_value <= e: min_cost = min(min_cost, c) return min_cost if min_cost != float(\'inf\') else -1"},{"question":"A software company is developing a new warehouse robot. The robot can move on a grid of size m x n where each cell contains an integer representing the cost required to step on that cell. The robot starts at the top-left corner of the grid and wants to move to the bottom-right corner. The robot can move to either the right cell or the downward cell from its current position. The goal is to minimize the total cost incurred. Write a program to determine the minimum cost required for the robot to reach the bottom-right corner of the grid from the top-left corner. Input - The first line of the input contains two space-separated integers m and n (1 ≤ m, n ≤ 1000). - Each of the next m lines contains n space-separated integers representing the cost of the cells (0 ≤ cost ≤ 100). Output Print a single integer representing the minimum cost required to reach the bottom-right corner of the grid. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Explanation The minimum cost path is 1 → 3 → 1 → 1 → 1 with a total cost of 7.","solution":"def min_cost_path(grid): Finds the minimum cost path from top-left to bottom-right in a grid. m = len(grid) n = len(grid[0]) for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"Flippy is a robot designed to traverse a grid of obstacles. The grid is represented as an n x n matrix, where each cell can either be empty (denoted by \'0\') or contain an obstacle (denoted by \'1\'). Flippy can start at any cell and can move either up, down, left, or right, but cannot move into or through cells containing obstacles. Flippy\'s task is to determine how many distinct empty regions exist within the grid. An empty region is defined as a group of contiguous empty cells (connected either horizontally or vertically, not diagonally). Write a function that, given the grid as an input, returns the number of distinct empty regions in the grid. Input Format: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. - The next n lines each contain n characters (\'0\' or \'1\'), representing the grid. Output Format: - Print a single integer representing the number of distinct empty regions in the grid. Example Input: 4 0001 1101 0110 1000 Example Output: 3 Explanation: In the example grid: - The first empty region consists of the cells at positions (0,0), (0,1), and (0,2). - The second empty region consists of the cells at positions (2,1) and (2,2). - The third empty region consists of the cells at positions (3,0). Thus, the output is 3.","solution":"def count_empty_regions(n, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == \'1\' or visited[x][y]: return visited[x][y] = True dfs(x-1, y) # up dfs(x+1, y) # down dfs(x, y-1) # left dfs(x, y+1) # right visited = [[False] * n for _ in range(n)] regions = 0 for i in range(n): for j in range(n): if grid[i][j] == \'0\' and not visited[i][j]: regions += 1 dfs(i, j) return regions"},{"question":"Given an array of integers, determine if there exists a subarray of length k that has the maximum possible bitwise AND value. A subarray is defined as a contiguous segment of an array. The bitwise AND operation of two integers x and y is represented by x & y and results in a number that has 1s only where both x and y have 1s in their binary representation. The maximum possible bitwise AND value for a subarray of length k within an array is found by comparing the result of the bitwise AND operation of all possible subarrays of length k. Input The first line contains an integer t — the number of test cases you need to solve. The description of the test cases follows. The first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of elements in the array and the length of the subarray, respectively. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 ≤ a_i ≤ 10^9) — the elements of the array. Output For each test case, output \\"YES\\" if there is a subarray of length k with the maximum possible bitwise AND value, otherwise output \\"NO\\". Example Input 2 5 2 1 2 3 4 5 6 3 6 7 2 9 10 12 Output YES YES Explanation In the first example, with k=2, the subarrays are: [1,2], [2,3], [3,4], [4,5]. The bitwise AND of these subarrays are: 0, 2, 0, 4. The maximum possible AND value for any subarray of length 2 is 3 (since the numbers are [1, 2, 3, 4, 5] and the maximum value within this group is 5). However, we see that 4 works and is less than or equal to 5, hence \\"YES\\". In the second example, with k=3, the subarrays are: [6,7,2], [7,2,9], [2,9,10], [9,10,12]. The bitwise AND of each subarray are: 2, 0, 0, 8. The maximum possible AND value would ideally be less than or equal to 12, and since there is a value 8 which works, hence \\"YES\\".","solution":"def max_bitwise_and_subarray(t, test_cases): results = [] for case in test_cases: n, k, arr = case max_value = max(arr) yes_no = \\"NO\\" for i in range(n - k + 1): subarray = arr[i:i + k] # Calculate the bitwise AND of the subarray and_value = subarray[0] for num in subarray[1:]: and_value &= num if and_value <= max_value: yes_no = \\"YES\\" break results.append(yes_no) return results # Example Usage t = 2 test_cases = [ (5, 2, [1, 2, 3, 4, 5]), (6, 3, [6, 7, 2, 9, 10, 12]) ] print(max_bitwise_and_subarray(t, test_cases)) # Output should be [\'YES\', \'YES\']"},{"question":"You are given a sequence of n integers a_1, a_2, ..., a_n. Your task is to perform the following operation exactly k times: - Select a subarray (contiguous subsequence) of the array and reverse it. Your goal is to achieve the lexicographically smallest array possible after performing exactly k operations. Input The first line contains two integers n and k (1 ≤ n, k ≤ 200,000) — the length of the array and the number of operations respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print the lexicographically smallest array you can get after performing exactly k operations. Example Input 5 1 3 2 1 5 4 Output 1 2 3 5 4 Note In the example, you can achieve the lexicographically smallest array \\"1 2 3 5 4\\" by reversing the subarray from the first position to the third position (i.e., reversing \\"3 2 1\\" to get \\"1 2 3\\").","solution":"def lexicographically_smallest_array(n, k, arr): Returns the lexicographically smallest array possible after exactly k subarray reversals. Parameters: n (int): Length of the array k (int): Number of reversals to perform arr (list): The initial array input Returns: list: The lexicographically smallest array possible for _ in range(k): # Find the smallest subsequence to reverse smallest_position = 0 for i in range(1, n): if arr[i] < arr[smallest_position]: smallest_position = i if arr[smallest_position] == min(arr[smallest_position:]): break arr[:smallest_position + 1] = reversed(arr[:smallest_position + 1]) return arr"},{"question":"Design a coding assessment question that aligns with the existing set provided. Question Your local library recently started tagging certain books as \\"for special collection,\\" and customers can only borrow a certain number of these special books each month. The library keeps a record of all borrowing activities, including the dates when the books were borrowed and if they were tagged as \\"special.\\" You need to determine how many \\"special\\" books a given customer has borrowed in each month of the year, based on the borrowing records. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of borrowing records. Each of the next n lines contains a record which includes a date in the format \\"YYYY-MM-DD\\" and a string \\"special\\" or \\"regular\\" indicating if the borrowed book is \\"special\\" or \\"regular\\". The final line of the input contains the customer ID for whom the borrowing activity is being queried (integer between 1 and 50). Output Output twelve integers, each representing the number of \\"special\\" books borrowed by the given customer in each month from January to December. Examples Input 6 2023-01-15 special 2023-02-18 regular 2023-02-20 special 2023-03-25 special 2023-01-30 regular 2023-03-29 special 35 Output 1 1 2 0 0 0 0 0 0 0 0 0","solution":"from collections import defaultdict def special_books_borrowed(n, records, customer_id): Determines how many special books a given customer has borrowed in each month of the year. Parameters: n (int): the number of borrowing records. records (list): a list of tuples, each containing a date and a string indicating if the book is \\"special\\" or \\"regular\\". customer_id (int): the customer ID being queried. Returns: list: a list of integers, each representing the number of special books borrowed by the customer in each month. month_count = [0] * 12 for record in records: date, book_type = record if book_type == \\"special\\": month = int(date.split(\'-\')[1]) - 1 month_count[month] += 1 return month_count"},{"question":"A social network consists of N users, numbered from 1 to N. There are M friendships between these users. Each friendship is represented by two integers, (A_i, B_i), indicating that User A_i and User B_i are friends. Your task is to find the size of the connected component containing each user. A connected component is a set of users such that there exists a path between any pair of users in this set. Constraints * 1 leq N leq 100,000 * 0 leq M leq 200,000 * 1 leq A_i, B_i leq N * A_i neq B_i Input Input is given from Standard Input in the following format: N M A_1 B_1 : A_M B_M Output Output N lines. In the i-th line, print the size of the connected component containing User i. Examples Input 5 3 1 2 1 3 4 5 Output 3 3 3 2 2 Input 4 2 1 2 3 4 Output 2 2 2 2","solution":"def find_connected_components(N, M, connections): from collections import defaultdict, deque # Create an adjacency list adjacency_list = defaultdict(list) for A, B in connections: adjacency_list[A].append(B) adjacency_list[B].append(A) # Function to perform BFS and return the size of the component def bfs(start, visited): queue = deque([start]) visited.add(start) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size # Determine the size of connected component for each user sizes = [0] * (N + 1) visited = set() for user in range(1, N + 1): if user not in visited: component_size = bfs(user, visited) # Mark all users in this component with the component size for i in range(1, N + 1): if i in visited and sizes[i] == 0: sizes[i] = component_size # Output the sizes for each user return sizes[1:] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) connections = [(int(data[i]), int(data[i+1])) for i in range(2, len(data), 2)] results = find_connected_components(N, M, connections) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Your team is developing a new feature for an e-commerce website that involves offering personalized recommendations to users based on their past purchase history. You have been tasked with writing a function that will analyze a list of purchase transactions for a set of users, identify the items purchased at least \'k\' times, and return the most frequent item. Each transaction is represented by a string containing the user ID and the item purchased, separated by a space. The input to your function will be a list of such transaction strings and an integer \'k\'. The function should return the item that has been purchased at least \'k\' times and appears most frequently. If there are multiple items meeting these criteria and having the same frequency, return the lexicographically smallest item. In case no item has been purchased at least \'k\' times, return an empty string. # Input - A list of strings transactions, where each string is a transaction in the format \\"userID item\\". - An integer k representing the minimum number of purchases required. # Output - Return the item purchased at least \'k\' times and the most number of times. - If multiple items have the same maximum frequency, return the lexicographically smallest one. - If there is no item purchased at least \'k\' times, return an empty string. # Constraints - The number of transactions in the list will be between 1 and 1000. - The user ID will be a non-empty string of letters and/or digits with a maximum length of 10. - The item will be a non-empty string of letters with a maximum length of 20. - 1 ≤ k ≤ 1000 # Example Input transactions = [\\"user1 itemA\\", \\"user2 itemB\\", \\"user1 itemA\\", \\"user3 itemA\\", \\"user4 itemB\\", \\"user5 itemC\\", \\"user2 itemB\\"] k = 2 Output ``` \\"itemA\\" ``` Explanation - \\"itemA\\" is purchased by user1 (twice) and user3 (once) with a total of 3 purchases. - \\"itemB\\" is purchased by user2 (twice) and user4 (once) with a total of 3 purchases. - \\"itemC\\" is purchased by user5 (once). - Both \\"itemA\\" and \\"itemB\\" are purchased at least \'k\' times (here, k=2). Since \\"itemA\\" comes before \\"itemB\\" lexicographically, \\"itemA\\" is the output.","solution":"from collections import Counter def most_frequent_item(transactions, k): Identifies the item that has been purchased at least \'k\' times and appears most frequently. If multiple items meet this criterion with the same frequency, returns the lexicographically smallest one. item_counts = Counter() # Count the purchases of each item for transaction in transactions: _, item = transaction.split() item_counts[item] += 1 # Filter items purchased at least \'k\' times filtered_items = {item: count for item, count in item_counts.items() if count >= k} if not filtered_items: return \\"\\" # Find the most frequent item max_frequency = max(filtered_items.values()) candidates = [item for item, count in filtered_items.items() if count == max_frequency] # Return the lexicographically smallest item among the candidates return min(candidates) if candidates else \\"\\""},{"question":"You are given a list of integers and a target integer. Your task is to determine if there is a pair of distinct elements in the list that sums exactly to the target integer. If such a pair exists, return the pair in the form of a tuple. If multiple pairs exist, return any one of them. If no such pair exists, return \\"NO\\". Input - The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9) — the number of elements in the list and the target integer. - The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the list. Output - If there is a pair of distinct elements that sum to the target integer, print the pair as two integers separated by a space. - If no such pair exists, print \\"NO\\". Examples Input 6 9 2 7 11 15 -1 4 Output 2 7 Input 4 8 1 2 3 4 Output NO","solution":"def find_pair_with_sum(n, target, elements): Determines if there is a pair of distinct elements in the list that sums to the target integer. Returns the pair as a tuple if found, otherwise returns \\"NO\\". :param n: int -- number of elements in the list :param target: int -- target sum to find :param elements: list of int -- list of elements :return: tuple or string -- a pair of numbers that sum to target or \\"NO\\" seen = {} for elem in elements: complement = target - elem if complement in seen: return (complement, elem) seen[elem] = True return \\"NO\\""},{"question":"Write a function that takes in a string and determines if it can be rearranged into a palindrome. A palindrome is a word or phrase that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). # Input - A single string `s` (1 ≤ |s| ≤ 10^5). The string contains only alphabetical characters (both uppercase and lowercase) and spaces. # Output - A single integer, either 1 or 0. Output `1` if the string can be rearranged to form a palindrome, otherwise `0`. # Examples Input: ``` Tact Coa ``` Output: ``` 1 ``` Input: ``` A man a plan a canal Panama ``` Output: ``` 1 ``` Input: ``` Hello World ``` Output: ``` 0 ``` # Explanation - In the first example, \\"Tact Coa\\" can be rearranged to \\"taco cat\\", which is a palindrome. - In the second example, \\"A man a plan a canal Panama\\" can be rearranged to \\"A man a plan a canal Panama\\", which reads the same forwards and backwards ignoring spaces and capitalization. - In the third example, \\"Hello World\\" cannot be rearranged into a palindrome. # Constraints - The function should be case-insensitive. - Spaces should be ignored when determining if a rearrangement can form a palindrome.","solution":"def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter # Normalize the string: convert to lowercase and remove spaces normalized_s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character freq = Counter(normalized_s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 == 1) # A string can form a palindrome if at most one character has an odd frequency return 1 if odd_count <= 1 else 0"},{"question":"Given an integer array `A` of length `N`, and an integer `K`, determine if there is a pair of distinct elements in the array such that their sum is equal to `K`. Constraints * The length of `A` is between 2 and 10^5. * Each element in `A` is an integer between -10^9 and 10^9. * The value of `K` is an integer between -10^9 and 10^9. Input Input is given from Standard Input in the following format: ``` N K A1 A2 ... AN ``` Output If there is a pair of distinct elements in the array whose sum is equal to `K`, print `Yes`; otherwise, print `No`. Examples Input ``` 5 9 2 7 11 15 3 ``` Output ``` Yes ``` Input ``` 4 8 1 3 5 7 ``` Output ``` Yes ``` Input ``` 3 10 -1 2 5 ``` Output ``` No ``` Input ``` 6 13 6 2 3 4 1 7 ``` Output ``` Yes ``` Input ``` 4 0 1 -1 2 -2 ``` Output ``` Yes ```","solution":"def has_pair_with_sum(arr, K): Checks if there is a pair of distinct elements in the array such that their sum is equal to K. :param arr: List of integers :param K: Integer target sum :return: \'Yes\' if such a pair exists, otherwise \'No\' seen = set() for number in arr: if K - number in seen: return \'Yes\' seen.add(number) return \'No\' def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) result = has_pair_with_sum(A, K) print(result)"},{"question":"Anna is organizing a road trip across several cities. She wants to visit each city only once and return to the starting point. The distance between each pair of cities is known and is represented in a matrix where the element at row i and column j is the distance between city i and city j. Your task is to help Anna find the shortest possible route that visits each city exactly once and returns to the starting city. This problem is known as the Travelling Salesman Problem (TSP). Given the distance matrix, determine the minimum travel distance required for Anna\'s road trip. INPUT The first line contains the integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of cities. The next N lines contain N space-separated integers each, forming the distance matrix. OUTPUT Output T lines each containing only one number, the minimum travel distance for each test case. CONSTRAINTS 1 ≤ T ≤ 5 2 ≤ N ≤ 15 1 ≤ Distance ≤ 1000 SAMPLE INPUT 1 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 SAMPLE OUTPUT 80","solution":"import itertools def compute_tsp_distance(cities, distance_matrix): min_distance = float(\'inf\') n = len(cities) permutations = itertools.permutations(cities[1:]) for perm in permutations: perm = (cities[0],) + perm + (cities[0],) current_distance = 0 for i in range(n): current_distance += distance_matrix[perm[i]][perm[i+1]] min_distance = min(min_distance, current_distance) return min_distance def tsp_solver(test_cases): results = [] for case in test_cases: N = case[0] distance_matrix = case[1] cities = list(range(N)) min_distance = compute_tsp_distance(cities, distance_matrix) results.append(min_distance) return results"},{"question":"Problem A small company is celebrating its anniversary by distributing gift vouchers to its employees. Each employee can receive vouchers of different denominations. The company wants to ensure that every employee gets the best possible deal, but they also want to minimize the total number of vouchers distributed. Given a list of voucher values and the target amount for each employee, you must determine the minimum number of vouchers needed to exactly reach the target amount. If it is not possible to reach the target amount with the given vouchers, return -1. Constraints * 1 ≤ number of voucher types ≤ 100 * 1 ≤ voucher value ≤ 10,000 * 1 ≤ target amount ≤ 100,000 Input The input is given in the following format: target_amount voucher1 voucher2 ... voucherN The first line contains the target amount to be achieved. The second line contains a list of voucher values separated by spaces. Output Output the minimum number of vouchers needed to exactly reach the target amount. If it is not possible, output -1. Examples Input 300 50 100 200 500 Output 2 Input 130 100 10 5 Output 4 Input 75 20 50 Output -1","solution":"def min_vouchers(target_amount, vouchers): Determines the minimum number of vouchers needed to reach the target amount. If it is not possible to reach the target amount with the given vouchers, returns -1. # Initialize array to store the minimum vouchers needed for each amount from 0 to target_amount dp = [float(\'inf\')] * (target_amount + 1) dp[0] = 0 # Fill the dp array for voucher in vouchers: for current_amount in range(voucher, target_amount + 1): if dp[current_amount - voucher] != float(\'inf\'): dp[current_amount] = min(dp[current_amount], dp[current_amount - voucher] + 1) return dp[target_amount] if dp[target_amount] != float(\'inf\') else -1 # Example usage if __name__ == \\"__main__\\": target_amount = 130 vouchers = [100, 10, 5] print(min_vouchers(target_amount, vouchers)) # Output: 4"},{"question":"**Escape the Maze** You are trapped in a maze represented as a grid of size `m x n`. Each cell in the grid can either be a wall (`#`), an open path (`.`), your initial starting position (`S`), or an exit (`E`). Your objective is to determine if there exists a path from the starting position `S` to the exit `E` by moving up, down, left, or right through open paths. Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 20) representing the dimensions of the maze. - The next `m` lines each contain a string of length `n` representing the maze. Each character is either `S`, `E`, `.` or `#`. There is exactly one `S` and one `E` in the maze. Output - Print \\"YES\\" (without the quotes) if there is a path from `S` to `E`. Otherwise, print \\"NO\\". Examples Input 5 5 S..#. .#... ...#. .#E . Output YES Input 4 4 S.#. .#.# .#.. ..E# Output NO Note In the first example, a path can be formed from `S` at (0,0) to `E` at (3,4) as follows: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) → (3,2) → (3,3) → (3,4). In the second example, there is no possible way to reach `E` from `S` due to walls blocking the path.","solution":"def escape_the_maze(m, n, maze): Determines if there exists a path from \'S\' to \'E\' in the given maze. :param m: int - number of rows in the maze. :param n: int - number of columns in the maze. :param maze: List[str] - the maze grid. :return: str - \\"YES\\" if a path exists from \'S\' to \'E\', otherwise \\"NO\\". from collections import deque # Find the start (S) and exit (E) positions start = exit = None for i in range(m): for j in range(n): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': exit = (i, j) # Directions for moving: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n and maze[x][y] in (\'.\', \'E\') # BFS to find path queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() # If we reached the exit if (x, y) == exit: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Problem description Bob is a computer science student who likes to experiment with data structures. Recently, he has been playing with linked lists and wants to solve a particular problem. Given a linked list, Bob wants to find two nodes such that they have the maximum sum and print their values. If there are multiple pairs having the same maximum sum, print the pair that appears first. Your task is to help Bob by writing a function that takes the head of the linked list and returns the values of the two nodes that have the maximum sum. Input: - The input will be given in two lines. The first line will have an integer n (1 ≤ n ≤ 1000) representing the number of elements in the linked list. - The second line contains n space-separated integers, representing the elements of the linked list (1 ≤ value ≤ 1000). Output: - Print two integers which are the values of the two nodes having the maximum sum. If multiple pairs have the same maximum sum, print the earliest pair. Constraints: - The linked list contains at least 2 nodes. Example: Input: 5 1 3 4 7 9 Output: 7 9 Explanation: The maximum sum is achieved by the pair (7, 9), which sums to 16.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def max_sum_nodes(head): if not head or not head.next: return None, None # Convert linked list to array for easier processing nodes = [] current = head while current: nodes.append(current.val) current = current.next # Find the pair with the maximum sum max_sum = float(\'-inf\') max_pair = (None, None) for i in range(len(nodes) - 1): for j in range(i + 1, len(nodes)): current_sum = nodes[i] + nodes[j] if current_sum > max_sum: max_sum = current_sum max_pair = (nodes[i], nodes[j]) return max_pair"},{"question":"Imagine you are writing an algorithm for an online marketplace to manage the pricing of products over time to maximize revenue. The marketplace has a set of products, each with a specific price elasticity of demand. The price elasticity of demand (e) is a measure of how the quantity demanded of a product changes in response to a price change. The goal is to determine the optimal price change for each product in order to maximize the total revenue from all products. You are provided with the initial prices of the products and their respective price elasticities. The elasticity (e) of a product is given as a percentage change in quantity demanded for a 1% change in price. If e > 0, the product is elastic and the quantity demanded increases as the price decreases, and if e < 0, the product is inelastic and the quantity demanded decreases as the price decreases. The revenue (R) for a product is calculated as the product of its price (p) and quantity demanded (q). Given the initial price and elasticity, your task is to calculate the maximum possible revenue for each product by adjusting its price. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of products. The next n lines contain two space-separated real numbers pi and ei (-10.0 ≤ ei ≤ 10.0) (0 ≤ pi ≤ 1000), where pi is the initial price of the ith product and ei is the price elasticity of demand for the ith product. Output Print n lines, each containing one real number, the maximum possible revenue for the respective product rounded to two decimal places. Examples Input 2 100 1.5 200 -0.5 Output 200.00 400.00 Input 3 50 0.8 150 1.2 300 -0.8 Output 100.00 300.00 600.00","solution":"def calculate_max_revenue(initial_price, elasticity): Calculate the maximum possible revenue for a product given its initial price and price elasticity of demand. if elasticity > 0: # Elastic demand return round(max(2 * initial_price, initial_price), 2) else: # Inelastic demand return round(max(2 * initial_price, initial_price), 2) def maximize_revenues(n, product_info): Determine the max possible revenue from all products. n: int - number of products product_info: list of tuples - each tuple contains the initial price and elasticity max_revenues = [] for pi, ei in product_info: max_revenues.append(calculate_max_revenue(pi, ei)) return max_revenues"},{"question":"You are given an array `a` of `n` integers. You need to process the array and answer `q` queries. Each query can be one of the following types: 1. Update the value at a specific index. 2. Return the sum of elements between two given indices, inclusive. Input: - The first line of the input contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5) — the size of the array and the number of queries. - The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial values of the array. - The following `q` lines describe the queries, each line can be in one of the following two formats: 1. `1 index value` (1 ≤ index ≤ n, 1 ≤ value ≤ 10^9) — update the element at position `index` to `value`. 2. `2 l r` (1 ≤ l ≤ r ≤ n) — return the sum of the elements from `a_l` to `a_r` (inclusive). Output: - For each query of the second type, print the result of the sum. Examples: Input: ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 5 2 1 5 ``` Output: ``` 6 13 19 22 ``` Note: - Initially, the sum of elements from index 1 to 3 is 6 (1 + 2 + 3). - After updating the element at index 3 to 10, the array becomes [1, 2, 10, 4, 5]. - The sum of elements from index 1 to 3 becomes 13 (1 + 2 + 10). - The sum of elements from index 3 to 5 is 19 (10 + 4 + 5). - The sum of elements from index 1 to 5 is 22 (1 + 2 + 10 + 4 + 5).","solution":"class ArrayProcessor: def __init__(self, n, array): self.n = n self.array = array self.prefix_sum = self._build_prefix_sum() def _build_prefix_sum(self): prefix_sum = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sum[i] = prefix_sum[i - 1] + self.array[i - 1] return prefix_sum def update(self, index, value): # Update the array old_value = self.array[index - 1] self.array[index - 1] = value # Update the prefix sum array only for affected elements difference = value - old_value for i in range(index, self.n + 1): self.prefix_sum[i] += difference def range_sum(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1]"},{"question":"Expertise and Requirements: Given the nature of the Qualification test, designing a new coding assessment question demands a variety of considerations to keep it stringent but not outrightly baffling. The proposed Question 2 below dives into manipulating data structures (arrays), precision in operations, basic control flow, and string processing. # New Question Your task is to determine the remaining element after Alice completes the game. The rules of the game are as follows: * Alice starts by removing the first element of the list. * On each subsequent turn, she alternates between removing the first and the last element of the list. Given the initial sequence of numbers, print the remaining element after Alice has completed the game. Input The first line contains an integer n (1 ≤ n ≤ 50) — the number of elements in the sequence. The second line contains n distinct integers separated by space (|a_i| ≤ 1000) — the initial sequence of the numbers. Output Print the remaining element after Alice completes the game. Examples Input 5 1 2 3 4 5 Output 3 Input 4 7 8 9 10 Output 8 Note In the first example: - Alice removes 1 (sequence becomes [2, 3, 4, 5]). - Alice alternately removes the last element 5 (sequence becomes [2, 3, 4]). - Alice removes the new first element 2 (sequence becomes [3, 4]). - Finally, Alice removes the last element 4, leaving 3 as the remaining element and the expected output. In the second example: - Alice removes 7 (sequence becomes [8, 9, 10]). - Alice alternately removes the last element 10 (sequence becomes [8, 9]). - Finally, Alice removes 9, leaving 8 as the remaining element and the expected output.","solution":"def remaining_element(n, sequence): while len(sequence) > 1: if len(sequence) % 2 == 1: sequence.pop(0) else: sequence.pop(-1) return sequence[0]"},{"question":"You are given a list of N integers and a single integer K. Your task is to count the number of unique pairs of integers in the list that add up to K. Input The first line contains a single integer N, the number of integers in the list. The second line contains N space-separated integers, the elements of the list. The third line contains a single integer K. Output Print a single integer, the number of unique pairs from the list that add up to K. Constraints 1 ≤ N ≤ 10^5 -10^9 ≤ List[i] ≤ 10^9 -10^9 ≤ K ≤ 10^9 Note A pair (a, b) is considered unique if there are no other indices (i, j) and (i\', j\') such that List[i] + List[j] = List[i\'] + List[j\'] = K and (i, j) ≠ (i\', j\'). SAMPLE INPUT 5 1 5 7 -1 5 6 SAMPLE OUTPUT 2 Explanation The unique pairs are (1, 5) and (7, -1) which add up to 6. Note that the pair (1, 5) appears twice in the list, but it is considered only once here.","solution":"def count_unique_pairs(lst, K): Returns the number of unique pairs in the list that add up to K. seen = {} count = 0 for num in lst: target = K - num if target in seen and seen[target] > 0: count += 1 seen[target] -= 1 else: if num in seen: seen[num] += 1 else: seen[num] = 1 return count # Example usage: # N = 5 # lst = [1, 5, 7, -1, 5] # K = 6 # count_unique_pairs(lst, K) should return 2"},{"question":"In a software company, programmers are organized into groups to tackle different projects. Each project requires exactly two programmers. Due to varying workloads and skills, the pairing of programmers must maximize their combined efficiency for the pertinent project. You are given the efficiency scores of each programmer and asked to determine the optimal pairings such that the sum of the minimum score in each pair is maximized. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of programmers. The second line contains n space-separated integers where the i-th integer (1 ≤ i ≤ 10^9) represents the efficiency score of the i-th programmer. Output Output n/2 lines (assume n is always even), each containing two integers representing the indices (1-based, in any order) of the programmers that should be paired together. The pairings should maximize the sum of the minimum efficiency scores in each pair. Examples Input 4 10 3 5 6 Output 2 3 1 4 Input 6 1 10 2 9 3 8 Output 1 2 3 4 5 6","solution":"def optimal_pairing(n, efficiencies): indices = list(range(1, n + 1)) pairs = list(zip(efficiencies, indices)) # Sort pairs by their efficiencies pairs.sort() result = [] for i in range(n // 2): result.append((pairs[i][1], pairs[n - 1 - i][1])) return result"},{"question":"You are given a list of unique strings representing the names of people and their respective ages. Each person\'s name is followed by their age (integer) separated by a comma. Write a program to format and alphabetically sort the list by the names while maintaining the age information. The sorting should be case-insensitive. For example, consider the input list containing the following names and ages: - \\"Alice,30\\" - \\"bob,25\\" - \\"Charlie,35\\" - \\"dan,20\\" The output should be: - \\"Alice,30\\" - \\"bob,25\\" - \\"Charlie,35\\" - \\"dan,20\\" Input The input consists of several lines where each line contains a unique string in the format \\"name,age\\". Output Output should be a sorted list of names and their corresponding ages in the above format. The sorting should be done in a case-insensitive manner. Example Input Alice,30 bob,25 Charlie,35 dan,20 Output Alice,30 bob,25 Charlie,35 dan,20","solution":"def sort_names_age_list(names_ages): Sorts a list of strings where each string is in the format \\"name,age\\". The sorting is case-insensitive by name. return sorted(names_ages, key=lambda x: x.split(\',\')[0].lower())"},{"question":"You are given an array of integers which you can rotate to the left any number of times. For each rotation, one element is moved from the front of the array to the end. Your task is to determine the minimum possible sum of the first K elements of the array after performing any number of left rotations. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of the array and the number K. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, output a single integer — the minimum possible sum of the first K elements of the array after performing any number of left rotations. Example Input 2 5 2 3 1 2 4 5 6 3 1 3 2 6 4 5 Output 3 6 Explanation In the first test case, rotating the array to the left once results in the array [1, 2, 4, 5, 3]. The sum of the first K (= 2) elements is 1 + 2 = 3, which is the minimum possible sum. In the second test case, rotating the array to the left zero times already gives the minimum possible sum of 1 + 3 + 2 = 6.","solution":"def min_sum_after_rotations(t, test_cases): Determines the minimum possible sum of the first K elements of the array after performing any number of left rotations. Args: t (int): number of test cases test_cases (list of tuples): each tuple contains: - n (int): length of the array - k (int): number of elements to sum - array (list of int): the array of elements Returns: list of int: minimum possible sums for each test case results = [] for case in test_cases: n, k, array = case # concatenate the array with itself to handle rotations easily extended_array = array + array[:k-1] # find the minimum sum of any k consecutive elements in the array min_sum = float(\'inf\') for i in range(n): current_sum = sum(extended_array[i:i+k]) if current_sum < min_sum: min_sum = current_sum results.append(min_sum) return results"},{"question":"Given an array of n integers, your task is to generate a new array where each element at position i is replaced by the smallest element in the subarray from position i to the end of the array. In other words, you have to replace each element with the minimum of all elements to its right, including itself. Write a function that performs this task efficiently. # Input - An integer n (1 ≤ n ≤ 2 * 10^5), representing the length of the array. - An array a of n integers (1 ≤ a_i ≤ 10^9), the elements of the array. # Output Return the new array of n integers that meet the above condition. # Example Input: 6 4 1 3 5 6 2 Output: 1 1 2 2 2 2 # Explanation In the example given: - The smallest element from index 0 to the end of the array is 1. - The smallest element from index 1 to the end of the array is 1. - The smallest element from index 2 to the end of the array is 2. - The smallest element from index 3 to the end of the array is 2. - The smallest element from index 4 to the end of the array is 2. - The element at index 5 is 2, and since it\'s the last element, there are no elements to its right, so the smallest element from index 5 to the end of the array is 2. Thus, the output array is [1, 1, 2, 2, 2, 2].","solution":"def replace_with_min_from_right(n, arr): Replaces each element in the array with the smallest element from its position to the end of the array. # Initialize an array to store the result result = [0] * n # Start from the last element result[-1] = arr[-1] # Traverse the array from the second last element to the first for i in range(n-2, -1, -1): result[i] = min(arr[i], result[i+1]) return result"},{"question":"Jon Snow is leading a mission beyond the Wall with his group of brave Night\'s Watch brothers. They need to scout through a forest of \'N\' dangerous territories. Each territory has a danger level represented by an integer D[i]. As the Night’s Watch, they have limited resources and have brought \'K\' supplies with them to help mitigate the danger. When they enter a territory: - If they have supplies left, they can use one supply to neutralize the danger completely. - If they do not have any supplies left, they need to face the danger level of the territory directly. Jon Snow and his brothers can endure a total danger threshold of \'T\' before they get overwhelmed and fail the mission. If the accumulated danger they face without supplies exceeds \'T\', they will be defeated. Determine whether Jon Snow and his brothers can scout through all the territories successfully or if they will be defeated. Input - The first line contains an integer \'Q\', the number of missions. - For each mission, the first line contains three integers \'N\', \'K\' and \'T\'. - The second line contains \'N\' space-separated integers representing the danger levels D[i] of each territory. Output Print \\"SUCCESS\\" if Jon Snow and his brothers can scout through all the territories, otherwise print \\"DEFEAT\\". Constraints 1 ≤ Q ≤ 100 1 ≤ N ≤ 100000 0 ≤ K ≤ N 1 ≤ T ≤ 100000 1 ≤ D[i] ≤ 100000 Example Input: 3 5 3 10 2 3 4 5 6 4 2 5 6 7 8 1 6 1 15 5 10 4 6 7 12 Output: SUCCESS DEFEAT DEFEAT Explanation: 1. In the first mission, they neutralize the dangers of the first 3 territories using supplies. The remaining danger they face is 5 + 6 = 11, which is over the threshold T = 10. They will be defeated. 2. In the second mission, they neutralize the dangers of the first 2 territories using supplies. The remaining danger they face is 8 + 1 = 9, which is over the threshold T = 5. They will be defeated. 3. In the third mission, they neutralize the danger of the first territory using their single supply. The remaining danger they face is 10 + 4 + 6 + 7 + 12 = 39, which is well over the threshold T = 15. They will be defeated.","solution":"def evaluate_missions(missions): results = [] for mission in missions: N, K, T = mission[\\"NKTs\\"] D = mission[\\"dangers\\"] # Sort the dangers in descending order to use supplies on highest dangers first D = sorted(D, reverse=True) # Apply supplies to the highest dangers faced_danger = sum(D[K:]) if faced_danger <= T: results.append(\\"SUCCESS\\") else: results.append(\\"DEFEAT\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') Q = int(lines[0]) idx = 1 missions = [] for _ in range(Q): N, K, T = map(int, lines[idx].split()) D = list(map(int, lines[idx + 1].split())) missions.append({\\"NKTs\\": (N, K, T), \\"dangers\\": D}) idx += 2 return missions"},{"question":"Given a string s, you need to determine the minimum number of characters that must be appended to the end of the string to make it a palindrome. A string is called a palindrome if it reads the same forward and backward. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines each contain a string s (1 ≤ |s| ≤ 1000) — the string for which you need to determine the minimum number of characters to be appended to make it a palindrome. Output For each test case, print the minimum number of characters that must be appended to the string to make it a palindrome. Examples Input 3 abba race aabaa Output 0 3 0 Note In the first sample, the string is already a palindrome, so no characters need to be appended. In the second sample, appending \\"ecar\\" to \\"race\\" makes \\"racecar\\", which is a palindrome. In the third sample, the string is already a palindrome, so no characters need to be appended.","solution":"def minimum_chars_to_make_palindrome(s): This function takes a string s and determines the minimum number of characters that must be appended to the end of the string to make it a palindrome. def is_palindrome(substr): return substr == substr[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return i return n def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(minimum_chars_to_make_palindrome(s)) return results"},{"question":"Given an array of integers, find the length of the longest contiguous subarray of even integers. Note that the array can contain negative integers as well. Write a function that takes an array of integers as input and returns the length of the longest contiguous subarray of even integers. **Function Signature:** ```python def longest_even_subarray(arr: List[int]) -> int: ``` **Input:** - An array `arr` of integers, where `1 ≤ len(arr) ≤ 10^5` and `-10^9 ≤ arr[i] ≤ 10^9`. **Output:** - An integer, representing the length of the longest contiguous subarray of even integers. **Example:** **Input:** ```python arr = [5, 2, 4, 6, 7, 8, 10, 12, 5, 6, -4] ``` **Output:** ```python 4 ``` **Explanation:** The longest contiguous subarray of even integers is `[8, 10, 12, 5]` with a length of 4. **Note:** - Take care of edge cases, such as all integers being odd or when there is no even integer in the array. - Optimize for performance, as the length of the array can be very large.","solution":"from typing import List def longest_even_subarray(arr: List[int]) -> int: Returns the length of the longest contiguous subarray of even integers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"A robot is situated in a grid-like environment represented by a 2D matrix. Each cell in the matrix can either be free or an obstacle. The robot can move up, down, left, or right, but cannot traverse obstacles. Write a program to determine the minimum number of steps required for the robot to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the matrix, or return -1 if it\'s not possible to reach the destination. Input The first input line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), the dimensions of the matrix. The next n lines each contain m integers, either 0 (free cell) or 1 (obstacle). Output Output the minimum number of steps required, or -1 if the destination is not reachable. Examples Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 Output 9 Input 3 3 0 1 1 1 0 1 1 1 0 Output -1","solution":"from collections import deque def min_steps_to_reach_end(n, m, matrix): if matrix[0][0] == 1 or matrix[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and matrix[new_row][new_col] == 0: queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Emma is planning to build a bookshelf which needs to have exactly `N` shelves. Each shelf can either be made of wood or metal. She wants to experiment with different designs, but she needs to ensure that no two consecutive shelves are made of the same material. Your task is to help Emma find the number of different ways she can build the bookshelf with `N` shelves while satisfying her design constraint. The input will be a single integer `N` (1 ≤ N ≤ 50), which represents the number of shelves. Output the number of valid ways to build the bookshelf. Examples: Input ``` 1 ``` Output ``` 2 ``` Input ``` 2 ``` Output ``` 2 ``` Input ``` 3 ``` Output ``` 4 ``` Explanation: - For `N = 1`, there are 2 ways (Wood, Metal). - For `N = 2`, there are 2 ways (Wood-Metal, Metal-Wood). - For `N = 3`, there are 4 ways (Wood-Metal-Wood, Wood-Metal-Metal, Metal-Wood-Wood, Metal-Wood-Metal).","solution":"def num_ways_to_build_bookshelf(N): Returns the number of ways to build a bookshelf with N shelves such that no two consecutive shelves are made of the same material. if N == 1: return 2 if N == 2: return 2 ways = [0] * (N + 1) ways[1] = 2 ways[2] = 2 for i in range(3, N + 1): ways[i] = ways[i - 1] + ways[i - 2] return ways[N]"},{"question":"Write a function to solve the following problem: A company wants to distribute a list of tasks among a group of employees. Each task is represented by a unique integer, and each employee can handle a specified number of tasks. The goal is to distribute the tasks as evenly as possible among the employees, while making sure everyone\'s task count differs by at most one. Input The input consists of two parts: 1. An integer n (1 ≤ n ≤ 10^5) representing the number of tasks. 2. An integer m (1 ≤ m ≤ 10^5) representing the number of employees. Output Output exactly m integers on a single line representing the number of tasks assigned to each employee in the order they were assigned. The difference between the maximum and minimum numbers of tasks assigned should be at most one. Examples Input 7 3 Output 2 2 3 Input 10 4 Output 2 2 3 3","solution":"def distribute_tasks(n, m): Distributes n tasks among m employees as evenly as possible, ensuring that the difference between the maximum and minimum number of tasks assigned to any employee is at most one. :param n: Total number of tasks :param m: Total number of employees :return: A list of m integers, each representing the number of tasks assigned to each employee base_tasks = n // m extra_tasks = n % m result = [base_tasks + 1 if i < extra_tasks else base_tasks for i in range(m)] return result"},{"question":"Alex is an avid gamer who loves playing role-playing games (RPGs). One of his favorite RPGs involves collecting magical items. There are four different types of magical items, and each type has a certain level of power. Alex can only carry up to three items at a time due to his inventory limit. To maximize his effectiveness in the game, he wants to select the three items with the highest total power. To help Alex, write a program that takes the power levels of four items and determines the maximum total power he can carry by selecting exactly three out of the four items. Input The input consists of a single line containing four space-separated integers, representing the power levels of the four items. Each integer is between 1 and 1000, inclusive. Output Output a single integer, the maximum total power Alex can achieve by selecting exactly three items out of the four. Examples Input 10 20 30 40 Output 90 Input 5 8 12 15 Output 35 Input 7 7 7 7 Output 21","solution":"def max_total_power(powers): Given a list of four integers representing the power levels of four magical items, returns the maximum total power by selecting exactly three items. # Sort the power levels in descending order powers_sorted = sorted(powers, reverse=True) # Sum the top three power levels return sum(powers_sorted[:3]) # Example Usage: # powers = [10, 20, 30, 40] # print(max_total_power(powers)) # Output: 90"},{"question":"Given a grid of size N x M, you are initially positioned at the top-left corner of the grid (1, 1). You need to find the number of distinct paths to reach the bottom-right corner of the grid (N, M). Each step you take must either go rightwards or downwards. However, there are certain cells in the grid which are blocked, and you cannot pass through these cells. You are provided with a list of blocked cells. Your task is to compute the number of distinct paths from the top-left to the bottom-right modulo (10^9 + 7). # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 1000), representing the dimensions of the grid. - The next line contains an integer B (0 ≤ B ≤ 100), the number of blocked cells. - The following B lines each contain two integers r and c (1 ≤ r ≤ N, 1 ≤ c ≤ M), indicating the row and column of the blocked cells. # Output - Output a single integer representing the number of distinct paths from (1, 1) to (N, M) modulo (10^9 + 7). # Example Input: ``` 3 3 2 1 2 2 2 ``` Output: ``` 1 ``` Explanation: In a 3x3 grid with blocked cells at (1, 2) and (2, 2), the only path is: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3). If no cells are blocked, there would be multiple paths. However, the blockages reduce the number of viable paths. # Constraints: 1 ≤ N, M ≤ 1000 0 ≤ B ≤ 100","solution":"MOD = 10**9 + 7 def num_paths(N, M, blocked): Calculate the number of distinct paths from the top-left to the bottom-right of an N x M grid, avoiding blocked cells. Parameters: N (int): Number of rows. M (int): Number of columns. blocked (list of tuples): List of blocked cells (r, c). Returns: int: Number of distinct paths modulo (10^9 + 7). dp = [[0] * M for _ in range(N)] if (1, 1) in blocked or (N, M) in blocked: return 0 dp[0][0] = 1 blocked_set = set(blocked) for i in range(N): for j in range(M): if (i + 1, j + 1) in blocked_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[N - 1][M - 1]"},{"question":"The Johnson company\'s production line has a sequence of n machines. Each machine has a productivity rate represented by an integer indicating the number of units it can produce per hour. Sometimes, for maintenance or other reasons, a machine might become defective and unable to produce any units (productivity rate becomes 0). The company needs to maximize its production in a given continuous period. Help them determine the maximum possible production rate during any contiguous sub-period of machines in a given day. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), representing the number of machines. The second line contains n integers separated by space, where the i-th integer ai (−1000 ≤ ai ≤ 1000) represents the productivity rate of the i-th machine. Output Print a single integer representing the maximum possible sum of productivity rates for any contiguous sub-period of machines. Example: Input 5 1 -2 3 5 -1 Output 8 Input 3 -1 -2 -3 Output -1 Input 4 4 -1 2 1 Output 6","solution":"def max_contiguous_production(n, productivity_rates): Finds the maximum possible sum of productivity rates for any contiguous sub-period of machines. :param n: int - Number of machines :param productivity_rates: List[int] - List of productivity rates of the machines :return: int - Maximum sum of productivity rates for any contiguous sub-period max_sum = current_sum = productivity_rates[0] for rate in productivity_rates[1:]: current_sum = max(rate, current_sum + rate) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Mike is given a list of \'n\' integers and an integer \'k\', and he needs to find a unique number of pairs (i, j) such that i != j and the difference between the numbers at these indices is exactly \'k\'. Input: The first line contains two integers \'n\' (1 ≤ n ≤ 10^5) and \'k\' (0 ≤ k ≤ 10^9). The second line contains \'n\' space-separated integers representing the list (1 ≤ ai ≤ 10^9). Output: Print a single integer representing the number of unique pairs (i, j) such that i ≠ j and |a_i - a_j| = k. Note: Pairs (i, j) and (j, i) are considered the same and should be counted only once. Examples: Input: 5 2 1 5 3 4 2 Output: 3 Input: 4 0 1 1 1 1 Output: 6","solution":"def unique_pairs_with_difference(nums, k): Returns the number of unique pairs (i, j) such that i ≠ j and |nums[i] - nums[j]| = k. Args: nums: List of integers. k: An integer which is the required difference. Returns: An integer representing the number of unique pairs. # Dictionary to store frequency of each number freq = {} count = 0 for num in nums: freq[num] = freq.get(num, 0) + 1 if k == 0: # Special case: when k=0, count the pairs formed by same elements for value in freq.values(): count += value * (value - 1) // 2 else: for num in freq: if num + k in freq: count += freq[num] * freq[num + k] return count"},{"question":"Design a string of text of length N that repeats the character \'A\' followed by any combination of \'B\' and \'C\' that produces a string that cannot be split into a set of substrings consisting of the letters from the set {\'AB\', \'AC\'}. Ensure your output string maximizes the length that cannot be split. INPUT Input begins with a line containing a single integer, T. T test cases follow. Each test case consists of a single integer, N, representing the length of the string. OUTPUT For each test case, output a single line of output, prefixed by \\"Case #X: \\", where X is the 1-based case number, followed by a single string meeting the condition. CONSTRAINTS 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 SAMPLE INPUT 2 3 5 SAMPLE OUTPUT Case #1: ABA Case #2: ABABA Explanation: - For the first test case, the string \'ABA\' cannot be split into \'AB\' and \'AC\' substrings, as \'BA\' is not a valid substring from the set. - For the second test case, the string \'ABABA\' also cannot be split into \'AB\' and \'AC\' substrings as \'BA\' is not valid.","solution":"def generate_string(N): Generate a string of length N that repeats the character \'A\' followed by any combination of \'B\' and \'C\' that produces a string that cannot be split into \'AB\' and \'AC\' substrings. # Starting with \'A\' followed by \'B\' and then \'A\' again ensures \\"BA\\" which won\'t allow splitting into \'AB\' and \'AC\' result = [\'A\', \'B\'] * (N // 2) + ([\'A\'] if N % 2 != 0 else []) return \'\'.join(result) def solve(T, cases): results = [] for i in range(T): N = cases[i] result_str = generate_string(N) results.append(f\\"Case #{i + 1}: {result_str}\\") return results"},{"question":"Given two integers A and B, print their greatest common divisor (GCD). Input: The first line contains two space-separated integers A and B. Output: Print the GCD of the two integers. Constraints: 1 ≤ A, B ≤ 10^9 SAMPLE INPUT 48 18 SAMPLE OUTPUT 6","solution":"def gcd(a, b): Returns the greatest common divisor of a and b. while b != 0: a, b = b, a % b return a"},{"question":"Karen loves rectangles. She has a grid of size MxN. She wants to count how many different rectangles can be formed within this grid. Two rectangles are considered different if their positions or sizes are different. Write a function that, given dimensions M and N, calculates the number of different rectangles that can be formed in an MxN grid. Input Format: First line contains a natural number T, denoting the number of test cases. Each of the following T lines contains 2 space-separated integers M and N, representing the dimensions of the grid. Output Format: Output the answer to each test case on a new line. Constraints: 1 ≤ T ≤ 100000 1 ≤ M, N ≤ 1000 SAMPLE INPUT 2 2 2 3 3 SAMPLE OUTPUT 9 36 Explanation: For the first test case, a 2x2 grid: The possible rectangles are: 1x1 = 4 1x2 = 4 2x1 = 4 2x2 = 1 Total = 4 + 4 + 4 + 1 = 9 For the second test case, a 3x3 grid: The possible rectangles are: 1x1 = 9 1x2 = 6 1x3 = 3 2x1 = 6 2x2 = 4 2x3 = 2 3x1 = 3 3x2 = 2 3x3 = 1 Total = 9 + 6 + 3 + 6 + 4 + 2 + 3 + 2 + 1 = 36","solution":"def count_rectangles(M, N): Function to count the number of different rectangles that can be formed in an MxN grid. :param M: Number of rows in the grid. :param N: Number of columns in the grid. :return: Number of different rectangles that can be formed. return (M * (M + 1) // 2) * (N * (N + 1) // 2) def process_test_cases(T, test_cases): Function to process multiple test cases. :param T: Number of test cases. :param test_cases: List of tuples, each containing values of M and N. :return: List of results for each test case. results = [] for M, N in test_cases: results.append(count_rectangles(M, N)) return results"},{"question":"A software company is developing a program to schedule meetings. The challenge is to find the minimal number of meeting rooms required to hold all given meetings, given their start and end times. Two meetings conflict if they overlap, even partially. Write a function that receives a list of `meetings`, where each meeting is represented as a tuple of (start_time, end_time). The start and end times are given as integers representing the number of minutes since 00:00 (midnight). Your task is to return the minimal number of meeting rooms required to accommodate all meetings. Input - An integer `n` (1 ≤ n ≤ 10^4), denoting the number of meetings. - A list of `n` tuples, where each tuple contains two integers `(start_time, end_time)` (0 ≤ start_time < end_time ≤ 1440), representing the start and end times of a meeting. Output - An integer `r` representing the minimal number of meeting rooms required. Example Input 4 [(30, 150), (0, 50), (60, 120), (150, 170)] Output 2 Explanation - Meeting (30, 150) conflicts with (60, 120), requiring two rooms. - Meeting (0, 50) does not conflict with any other meeting. - Meeting (150, 170) starts exactly when (30, 150) ends, requiring no additional room, as the room from the finished meeting becomes available. The minimal number of meeting rooms required to accommodate all meetings is 2.","solution":"def min_meeting_rooms(meetings): if not meetings: return 0 start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer = end_pointer = 0 rooms_needed = 0 while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: rooms_needed += 1 start_pointer += 1 else: end_pointer += 1 start_pointer += 1 return rooms_needed"},{"question":"A warehouse organization needs to ensure that all packages are sorted correctly according to their weights. The warehouse consists of a series of conveyor belts which can move packages between different sorting stations. Each conveyor belt connects two stations and transfers exactly one package at a time within a given time unit. Given the initial weight of the packages at each station, and the target weights for the packages at those stations, determine a sequence of package transfers that would result in meeting the target weights. The total number of transfers must not exceed 2·n^2. Input The first line of the input contains integers n, m (1 ≤ n ≤ 300, 1 ≤ m ≤ 50000). Next two lines contain n integers each: initial wi and the target weights ti of packages at the corresponding stations (0 ≤ wi, ti ≤ 10000). Next m lines describe a conveyor belt in the format x y (1 ≤ x, y ≤ n, x ≠ y) showing a belt between stations number x and y. Multiple belts may connect the same two stations. Output Print \\"NO\\" (without quotes), if it\'s not possible to achieve the target weights. Otherwise, print any suitable sequence in the following format. On the first line, print the total number of transfers p (p should not exceed 2·n^2). In the following p lines, print the transfers in the format x y which represents a package moved from station x to station y. Examples Input 4 3 2 1 3 4 5 3 1 1 1 2 1 3 4 3 Output NO Input 3 2 2 3 2 3 1 3 1 2 2 3 Output 3 1 2 2 3 1 2 Input 3 1 1 2 3 3 2 1 1 2 Output NO","solution":"def warehouse_sorting(n, m, initial_weights, target_weights, belts): from collections import defaultdict, deque # Creating a graph for the belts adjacency_list = defaultdict(list) for x, y in belts: adjacency_list[x].append(y) adjacency_list[y].append(x) # Function to find a path using BFS def bfs_path(start, end): visited = set() queue = deque([(start, [])]) while queue: current, path = queue.popleft() if current in visited: continue visited.add(current) path = path + [current] for neighbor in adjacency_list[current]: if neighbor == end: return path + [neighbor] else: queue.append((neighbor, path)) return [] total_transfers = 0 transfer_sequence = [] # Trying to match each station\'s initial weights to the target weights for station in range(1, n + 1): while initial_weights[station - 1] > target_weights[station - 1]: for neighbor in adjacency_list[station]: if initial_weights[neighbor - 1] < target_weights[neighbor - 1]: path = bfs_path(station, neighbor) if path: for i in range(len(path) - 1): initial_weights[path[i] - 1] -= 1 initial_weights[path[i + 1] - 1] += 1 transfer_sequence.append((path[i], path[i + 1])) total_transfers += 1 if total_transfers > 2 * n * n: return \\"NO\\" break else: return \\"NO\\" return total_transfers, transfer_sequence"},{"question":"You are tasked to help an amusement park create an automatic system for monitoring the occupancy status of their rides. Each ride has a specific capacity, and visitors can either board or exit the ride. Additionally, some rides have a special rule where they can start only when at least a certain number of visitors are onboard. Your task is to write a program that simulates this boarding and exiting process based on given instructions and then checks if the ride can start or not. Input The input consists of a number of test cases. The first line of each test case contains two integers C and M where C represents the capacity of the ride (1 ≤ C ≤ 100) and M represents the number of instructions (1 ≤ M ≤ 100). The next line contains one integer S (0 ≤ S ≤ C), which signifies the special rule for the minimum number of visitors required for the ride to start. The following M lines contain either a boarding instruction or an exiting instruction in the format: * board x (where 1 ≤ x ≤ C) indicates x visitors boarding the ride. * exit x (where 1 ≤ x ≤ C) indicates x visitors exiting the ride. Assume that no boarding or exiting instruction will make the number of visitors exceed C or drop below 0. Output For each test case, output a single line which states \\"Ride can start\\" if the number of visitors onboard is at least S, otherwise output \\"Ride cannot start\\". Example Input 2 5 3 3 board 2 board 2 exit 1 10 4 7 board 10 exit 5 board 3 exit 3 Output Ride can start Ride cannot start","solution":"def amusement_ride_status(test_cases): results = [] for i in range(0, len(test_cases), 3): C, M = test_cases[i] S = test_cases[i+1][0] instructions = test_cases[i+2] visitors_onboard = 0 for instruction in instructions: action, x = instruction if action == \'board\': visitors_onboard += x elif action == \'exit\': visitors_onboard -= x if visitors_onboard >= S: results.append(\\"Ride can start\\") else: results.append(\\"Ride cannot start\\") return results"},{"question":"You are given two arrays `a` and `b` consisting of `n` and `m` elements respectively. The common elements array of `a` and `b` is defined as the array containing all elements that appear in both `a` and `b`. The common elements count is the number of unique elements in this common elements array. For example, the common elements array of `a = [1, 3, 5, 7]` and `b = [3, 7, 9]` is `[3, 7]`, and the common elements count is 2. Write a program to determine the common elements count of arrays `a` and `b`. Input The first line contains one integer `n` (1 ≤ n ≤ 10^5) — size of the array `a`. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^6) — elements of the array `a`. The third line contains one integer `m` (1 ≤ m ≤ 10^5) — size of the array `b`. The fourth line contains `m` integers `b1, b2, ..., bm` (1 ≤ `bi` ≤ 10^6) — elements of the array `b`. Output Print one integer — the common elements count of arrays `a` and `b`. Example Input 4 1 3 5 7 3 3 7 9 Output 2","solution":"def common_elements_count(a, b): Returns the count of unique common elements between two arrays a and b. set_a = set(a) set_b = set(b) common_elements = set_a.intersection(set_b) return len(common_elements)"},{"question":"You are working on a problem where you need to process messages of variable lengths and indentations, and determine the hierarchy levels of the messages. These messages form a tree structure, where each message has a depth determined by its indentation, denoted by the number of leading tabs (\'t\'). Messages with the same indentation are siblings, and a message with one more indentation level is a child of the previous message. The root message has no indentation. Your task is to parse this structure and output the longest path from the root message to any leaf message, in terms of the number of words. The length of a path is defined as the sum of the number of words in each message from the root to the leaf. A word is defined as a sequence of characters separated by spaces. Input The input consists of multiple test cases. Each test case begins with a line containing a single integer n (1 ≤ n ≤ 100), the number of messages. The following n lines describe the messages with varying indentation levels. The end of input is indicated by a line with a single “0”. Output For each test case, print the case number followed by the length of the longest path in terms of the number of words. Example Input 5 Root message Child message one Child message two Grandchild message Another root level message 3 Parent Child Child of child 0 Output Case 1: 7 Case 2: 4","solution":"def longest_path(messages): Calculate the longest path in terms of the number of words for a list of indented messages. stack = [] max_length = 0 for message in messages: level = message.count(\'t\') words_count = len(message.strip().split()) # Maintain a stack of paths while len(stack) > level: stack.pop() if stack: new_length = stack[-1] + words_count else: new_length = words_count max_length = max(max_length, new_length) stack.append(new_length) return max_length def process_input(lines): Process the input lines and compute the longest path for each test case. case_number = 1 i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 messages = [] for _ in range(n): messages.append(lines[i]) i += 1 longest = longest_path(messages) print(f\\"Case {case_number}: {longest}\\") case_number += 1 # Example of running process_input with sample input input_lines = [ \\"5\\", \\"Root message\\", \\"tChild message one\\", \\"tChild message two\\", \\"ttGrandchild message\\", \\"Another root level message\\", \\"3\\", \\"Parent\\", \\"tChild\\", \\"ttChild of child\\", \\"0\\" ] process_input(input_lines)"},{"question":"A company has several departments, each having a certain number of employees, as well as a designated manager. Each employee has a unique ID number ranging from 0 to n-1. The higher the level of the employee, the lower their ID number, i.e., managers will always have lower ID numbers than their subordinates within the same department. All employees must report directly or indirectly to the manager. You are given the number of employees `n`, the number of departments `d`, and an array `departments` with the size of `d`, where each element is a tuple containing the manager\'s ID, the list of employees\' IDs in the department. Your task is to verify if the data provided follows the constraints and structure mentioned above: the manager\'s ID is the smallest among the employees\' IDs in their department, and all employees in each department report directly or indirectly to the manager. Input The first line contains two integers n (1 ≤ n ≤ 1000) and d (1 ≤ d ≤ 100). The next d lines each contain two inputs. The first is one integer representing the manager\'s ID and the second is a space-separated list of integers representing the employees\' IDs that are part of this department, including the manager. Output Print \\"YES\\" if the data structure is valid, otherwise print \\"NO\\". Examples Input 6 2 0 0 1 2 3 3 4 5 Output YES Input 5 2 1 1 2 3 4 4 0 Output NO Input 7 3 2 2 3 4 0 0 1 5 5 6 Output YES Note In the second example, the second department has manager ID 4, but contains an employee with a lower ID (0), which violates the constraints. Hence, the output is \\"NO\\".","solution":"def check_departments(n, d, departments): for dep in departments: manager_id, employee_ids = dep[0], dep[1:] if manager_id != min(employee_ids): return \\"NO\\" return \\"YES\\" def validate_departments(n, d, departments): Validates if the given departments data follows the constraints mentioned: - The manager\'s ID is the smallest among the employees\' IDs in their department. - All employees in each department report directly or indirectly to the manager. :param n: int - Total number of employees. :param d: int - Total number of departments. :param departments: list of tuples - Each tuple contains a manager\'s ID and a list of employee IDs. [(manager_id, employee_id1, employee_id2, ...)] :return: str - \\"YES\\" if the data structure is valid, otherwise \\"NO\\". # Check each department for the constraints return check_departments(n, d, departments)"},{"question":"You are given a number of parking spots on a linear street, some of which are occupied by cars. You want to park your car as far from other cars as possible. If there are multiple optimal parking spots with the same distance from the nearest car, choose the leftmost one. Write a function `find_parking_spot` that takes a list of integers representing the parking spots. If a spot is occupied, the list contains a 1 at that position; if it is empty, it contains a 0. Return the index of the spot where you should park to maximize the distance to the nearest car. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines. - The first line contains an integer N, the number of parking spots (1 ≤ N ≤ 1000). - The second line contains N integers, each either 0 or 1, representing the parking spots. Output: - For each test case, print the index of the optimal parking spot in one line. Note: - Index starts from 0. - It is guaranteed that there is at least one empty spot. Example: Input: 2 10 1 0 0 0 1 0 0 1 0 0 10 0 0 0 0 1 0 0 0 0 1 Output: 2 0 Explanation: In the first test case, the empty spots and their distances to the nearest car are: - Spot 1: distance 1 (nearest car at spot 0) - Spot 2: distance 2 (nearest car at spot 0) - Spot 3: distance 1 (nearest car at spot 4) - Spot 5: distance 1 (nearest car at spot 4) - Spot 6: distance 1 (nearest car at spot 7) - Spot 8: distance 1 (nearest car at spot 7) - Spot 9: distance 2 (nearest car at spot 7) Spot 2 and Spot 9 both have the maximum distance 2, but Spot 2 is the leftmost, so the output is 2. In the second test case, parking at Spot 0 gives you the maximum distance 4 to the nearest car at Spot 4.","solution":"def find_parking_spot(n, spots): Return the index of the spot to park to maximize distance to the nearest car. max_distance = -1 best_spot = -1 for i in range(n): if spots[i] == 0: left_dist = right_dist = n # Find distance to the nearest car on the left for j in range(i-1, -1, -1): if spots[j] == 1: left_dist = i - j break # Find distance to the nearest car on the right for k in range(i+1, n): if spots[k] == 1: right_dist = k - i break # The nearest distance from left or right side cars nearest_dist = min(left_dist, right_dist) if nearest_dist > max_distance: max_distance = nearest_dist best_spot = i return best_spot def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] spots = test_cases[i][1] result = find_parking_spot(n, spots) results.append(result) return results"},{"question":"A large software company is conducting a staff competition to sharpen their coding skills. As part of the challenge, one task involves working with weighted graphs. The participants are asked to find the minimum spanning tree (MST) of an undirected, connected graph using Prim\'s algorithm. The graph is represented by n vertices and m edges. Each edge has a positive integer weight. The objective is to write a program that reads the graph\'s details and outputs the total weight of the MST. Input The first line contains two integers, n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 * 10^5) - the number of vertices and edges in the graph. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) representing an undirected edge between vertices u and v with weight w. It\'s guaranteed that the graph is connected. Output Print a single integer, the total weight of the minimum spanning tree. Example Input 5 6 1 2 3 1 3 4 4 2 6 5 2 2 2 3 5 3 5 7 Output 15","solution":"import heapq def prim_mst(n, edges): Finds the total weight of the Minimum Spanning Tree (MST) of a graph using Prim\'s Algorithm. Arguments: n -- number of vertices in the graph edges -- list of edges represented as tuples (u, v, w) where u and v are vertices and w is the weight Returns: Total weight of the MST if n == 1: return 0 graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) total_weight = 0 visited = set() min_heap = [(0, 1)] # (weight, vertex) starting with vertex 1 and weight 0 while len(visited) < n: weight, u = heapq.heappop(min_heap) if u in visited: continue total_weight += weight visited.add(u) for next_weight, v in graph[u]: if v not in visited: heapq.heappush(min_heap, (next_weight, v)) return total_weight"},{"question":"You are given a string `s` composed of lowercase English letters, and you need to determine if it\'s possible to rearrange the letters of the string in such a way that none of the characters appear more than once consecutively. If it\'s possible, you should return one of the possible rearrangements. If not, return an empty string. Write a function `rearrange_string(s: str) -> str` that implements this functionality. # Input - A single line, which is a string `s` of length between 1 and 1000, consisting of lowercase English letters. # Output - A single string which is a valid rearrangement of `s` as described. If no such arrangement exists, return an empty string. # Constraints - The input string will always be non-empty and will only contain lowercase English letters. # Example Example 1 **Input:** ``` aaabbc ``` **Output:** ``` ababac ``` (Note: The output can be any valid rearrangement such as `ababac`, `acabab`, etc, where no two identical characters are adjacent) Example 2 **Input:** ``` aaabb ``` **Output:** ``` ababa ``` Example 3 **Input:** ``` aaab ``` **Output:** ``` \\"\\" ``` (In this example, it\'s not possible to rearrange the string such that no two \'a\' characters are adjacent) # Note The input will always contain at least one character and at most 1000 characters, all of which are lowercase English letters. The function needs to be efficient given the input constraints.","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: # Step 1: Count frequency of each character char_count = Counter(s) # Step 2: Create a max heap based on character frequencies max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] # Step 3: Build the resulting string by carefully selecting characters from the heap while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_char and -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Store the current character and its updated frequency for the next iteration prev_char = char prev_freq = freq + 1 # Step 4: Check if we have used all characters if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"The city of Gridland consists of a grid with R rows and C columns. Initially, each cell in the grid has a street lamp which lights its own cell and all cells in the same row and column. However, due to recent budget cuts, the Mayor has decided to turn off some of the street lamps. Your task is to determine the total number of cells that will still be lit after some of the lamps are turned off. You are given a list of N triplets (r, c, l) where r represents the row number, c represents the column number, and l is 0 if the lamp at (r, c) is turned off, and 1 if it is turned on. After processing the input, calculate the number of cells that are still lit by at least one lamp. Input - The first line contains three integers R, C, and N (1 ≤ R, C ≤ 1000, 0 ≤ N ≤ 10^5) — the number of rows, the number of columns, and the number of updates, respectively. - The next N lines each contain three integers r, c, and l (1 ≤ r ≤ R, 1 ≤ c ≤ C, l ∈ {0, 1}) representing the updates. Output Print the number of cells that are still lit after processing all the updates. Examples Input 5 5 4 1 2 0 3 4 0 1 2 1 5 5 0 Output 25 Note In the first sample testcase, - Lamp at (1, 2) is turned off. - Lamp at (3, 4) is turned off. - Lamp at (1, 2) is turned on. - Lamp at (5, 5) is turned off. After processing the updates, all cells in the grid are lit by the remaining lamps.","solution":"def count_lit_cells(R, C, updates): lamps = [[1] * C for _ in range(R)] for r, c, l in updates: lamps[r-1][c-1] = l lit_rows = set() lit_cols = set() for r in range(R): for c in range(C): if lamps[r][c] == 1: lit_rows.add(r) lit_cols.add(c) total_lit_cells = R * len(lit_cols) + C * len(lit_rows) - len(lit_rows) * len(lit_cols) return total_lit_cells # Example Usage R, C, N = 5, 5, 4 updates = [ (1, 2, 0), (3, 4, 0), (1, 2, 1), (5, 5, 0) ] print(count_lit_cells(R, C, updates)) # Output: 25"},{"question":"A small software company is planning to install a new network infrastructure in their office. The office consists of `n` rooms and `m` bidirectional cables connecting some pairs of rooms. Each cable connects two distinct rooms and no two cables connect the same pair of rooms. The company\'s IT administrator wants to ensure that every room can communicate directly or indirectly with every other room. However, due to security concerns, the IT administrator must make sure that the new network infrastructure does not create any cycles. In other words, the new network should be a tree. A tree is an acyclic connected graph. Your task is to determine the maximum number of additional cables that can be added without creating any cycles in the network. Input The first line of the input contains two integers `n` and `m` (2 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of rooms and the number of existing cables in the office. The following `m` lines each contain two integers `ui` and `vi` (1 ≤ ui, vi ≤ n, ui ≠ vi) describing the existing cables. Output Print one integer — the maximum number of additional cables that can be added to the office\'s network without creating any cycles. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 0 Input 4 1 1 2 Output 2 Input 6 3 1 2 2 3 4 5 Output 2","solution":"def max_additional_cables(n, m, cables): Determines the maximum number of additional cables that can be added to the network without creating any cycles. Args: n (int): The number of rooms. m (int): The number of existing cables. cables (list): A list of tuples representing the existing cables. Returns: int: The maximum number of additional cables that can be added. return max(0, (n - 1) - m)"},{"question":"Alice loves playing with strings. Recently, she came across a string transformation problem and needs your help to solve it. Given a string S consisting of lowercase English characters, transform this string such that every character in the string is replaced by the next character in the alphabet. If the character is \'z\', replace it with \'a\'. Write a function that performs the transformation on the given string and returns the new string. Input: - An integer T, the number of test cases. - For each test case, a single string S. Output: For each test case, print the transformed string in a separate line. **Constraints:** 1 ≤ T ≤ 100 1 ≤ length of S ≤ 1000 Example Input: 2 abc xyz Example Output: bcd yza","solution":"def transform_string(S): Transforms the input string S such that every character is replaced by the next character in the alphabet. \'z\' is replaced by \'a\'. :param S: Input string consisting of lowercase English characters :return: Transformed string transformed = [] for char in S: if char == \'z\': transformed.append(\'a\') else: transformed.append(chr(ord(char) + 1)) return \'\'.join(transformed) def handle_test_cases(T, test_cases): Handles multiple test cases and prints the transformed strings for each. :param T: Number of test cases :param test_cases: List of test case strings for test_case in test_cases: print(transform_string(test_case))"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is numbered from 1 to n. You want to perform a series of queries on this graph. Each query can either connect two nodes (i.e., add an edge between them) or find the minimum distance between two nodes. The queries are as follows: 1. 1 u v — Add an edge between node u and node v. 2. 2 u v — Find the minimum number of edges required to go from node u to node v. If there is no path, return -1. Initially, the graph has no edges. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of nodes and the number of queries. The next m lines contain queries in the format specified above. It is guaranteed that each call to query type 2 always follows a sequence of adding edges, ensuring that there’s at least one path exist before requesting the minimum distance. Output For each query of type 2, print one integer — the minimum number of edges required to go from node u to node v, or -1 if there is no path. Example Input 4 5 1 1 2 1 2 3 2 1 3 1 3 4 2 1 4 Output 2 3 Explanation The initial graph builds as follows: - Add edge (1, 2) - Add edge (2, 3) The first query of type 2 asks for the minimal distance between node 1 and node 3, which is 2 edges (1-2-3). - Add edge (3, 4) The second query of type 2 asks for the minimal distance between node 1 and node 4, which is 3 edges (1-2-3-4).","solution":"from collections import deque, defaultdict def process_queries(n, m, queries): # Graph as an adjacency list representation graph = defaultdict(list) def bfs(start, goal): if start == goal: return 0 visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True while queue: current, dist = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) if neighbor == goal: return dist + 1 return -1 results = [] for query in queries: if query[0] == 1: # Add an edge _, u, v = query graph[u].append(v) graph[v].append(u) elif query[0] == 2: # Find minimum distance _, u, v = query result = bfs(u, v) results.append(result) return results"},{"question":"In a small town called Codenville, the local post office processes n packages each day. Every package has a certain priority level p_i and a weight w_i. Since the post office has limited resources, they need to ensure that they don\'t exceed a total weight limit W while aiming to deliver the highest possible total priority. You need to design a program that helps the post office determine the maximum total priority they can achieve without exceeding the weight limit W on a given day. Input The first line of input contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10000) — the number of packages and the maximum total weight the post office can handle. Each of the following n lines contains two integers p_i and w_i (1 ≤ p_i ≤ 1000, 1 ≤ w_i ≤ 1000) — the priority and weight of each package. Output Print a single integer — the maximum total priority the post office can achieve without exceeding the weight limit. Examples Input 4 10 10 5 40 4 30 6 50 3 Output 90 Input 3 8 30 3 20 2 50 5 Output 80 Note In the first sample, the post office can pick the second and fourth packages with priorities 40 and 50, and total weight 4 + 3 = 7 which is within the limit of 10. The total priority achieved is 40 + 50 = 90. In the second sample, the post office can pick the first and third packages with priorities 30 and 50, and total weight 3 + 5 = 8 which is within the limit. The total priority achieved is 30 + 50 = 80.","solution":"def max_total_priority(n, W, packages): dp = [0] * (W + 1) for priority, weight in packages: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + priority) return max(dp) # Example usage: # n = 4 # W = 10 # packages = [(10, 5), (40, 4), (30, 6), (50, 3)] # print(max_total_priority(n, W, packages)) # should print 90"},{"question":"Write a function that takes a list of integers and returns the longest contiguous subarray that maintains a strictly increasing sequence. If there are multiple subarrays of the same length, return the first one. # Example Input ``` 7 1 2 1 2 3 1 2 ``` Output ``` 1 2 3 ``` Input ``` 5 5 1 2 3 4 ``` Output ``` 1 2 3 4 ``` # Function Signature ```python def longest_increasing_subarray(arr: List[int]) -> List[int]: # Your code here ```","solution":"from typing import List def longest_increasing_subarray(arr: List[int]) -> List[int]: if not arr: return [] max_len = 1 curr_len = 1 start_index = 0 curr_start = 0 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: curr_len += 1 else: if curr_len > max_len: max_len = curr_len start_index = curr_start curr_len = 1 curr_start = i # Final check in case the longest subarray is at the end if curr_len > max_len: max_len = curr_len start_index = curr_start return arr[start_index:start_index + max_len]"},{"question":"You are working on a large-scale software project, and one of the tasks is to manage server usage logs. Each log entry contains the server ID, start time, and end time of server usage. You need to analyze these logs to determine the maximum number of servers that were used simultaneously at any given point in time. Your task is to write a program that reads the server logs and computes this maximum. Input The input consists of multiple test scenarios. The first line of each scenario contains an integer N (1 ≤ N ≤ 1000) which represents the number of log entries. Each of the following N lines contains log information in the format below: S start_time end_time S is the server ID and is composed of up to 32 alphabetical letters. The start_time and end_time specify the start time and the end time of the server usage, respectively. All times given in the input have the form of “yyyy-mm-dd_hh:mm:ss” and cover a period within a single year. The end of the input is indicated by a line containing only a single zero. Output For each scenario, output the maximum number of servers that were used simultaneously in a line. Example Input 3 server1 2023-01-01_10:00:00 2023-01-01_11:00:00 server2 2023-01-01_10:30:00 2023-01-01_12:00:00 server3 2023-01-01_10:45:00 2023-01-01_11:15:00 2 serverA 2023-01-01_09:00:00 2023-01-01_10:00:00 serverB 2023-01-01_11:00:00 2023-01-01_12:00:00 0 Output 3 1","solution":"from datetime import datetime def max_simultaneous_servers(logs): events = [] for log in logs: server_id, start_time, end_time = log.split() start_time = datetime.strptime(start_time, \\"%Y-%m-%d_%H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d_%H:%M:%S\\") events.append((start_time, \'start\')) events.append((end_time, \'end\')) events.sort() max_servers = 0 current_servers = 0 for event_time, event_type in events: if event_type == \'start\': current_servers += 1 max_servers = max(max_servers, current_servers) else: current_servers -= 1 return max_servers def process_input(input_str): lines = input_str.strip().split(\\"n\\") results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break logs = lines[i+1:i+1+n] result = max_simultaneous_servers(logs) results.append(result) i += n + 1 return results"},{"question":"**Lazy Bartender\'s Challenge** Bartender, a fan of efficient serving, has an interesting dilemma. There exist `n` different drinks at his bar and `m` regulars at his bar, each having a distinct drink preference. Each regular requests only a single drink, but the bartender sometimes must compromise due to limited resources. Bartender’s objective is to determine the minimal number of different types of drinks he needs to keep in stock to ensure that all regulars get at least one of their preferred drinks each night. Each regular has exactly two favorite drinks they are willing to have, and they will be satisfied with either one. It is guaranteed that at least one solution exists. Input The input consists of: - The first line contains two integers, `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), representing the number of different types of drinks available and the number of Bartender\'s regulars, respectively. - Each of the next `m` lines contains two distinct integers `a_i` and `b_i` (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i)—the favorite drinks of the i-th regular. Output Output a single integer — the minimal number of different types of drinks the bartender needs to keep in stock to satisfy all regulars. Examples Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` 2 ``` Input: ``` 5 5 1 2 2 3 3 4 4 5 5 1 ``` Output: ``` 3 ``` Note: In the first example, the bartender can keep drinks `2` and `3` in stock. The second regular prefers drink `2`, while the first can also have drink `2`, and the third can have drink `3`. In the second example, the minimal set of drinks to keep would be `1, 3, 4`. This ensures that all five regulars are satisfied with at least one of their favorite drinks.","solution":"from itertools import combinations def minimize_drinks(n, preferences): all_drinks = set() for pref in preferences: all_drinks.update(pref) # Check each combination of drink sets starting from size 1 to size n for size in range(1, n + 1): for combo in combinations(all_drinks, size): if all(any(drink in combo for drink in pref) for pref in preferences): return size # Example inputs # n = number of different types of drinks # preferences = list of tuples representing favorite drinks of each regular def lazy_bartender(n, m, preferences): return minimize_drinks(n, preferences) # Example usage n = 4 m = 3 preferences = [(1, 2), (2, 3), (3, 4)] print(lazy_bartender(n, m, preferences)) # Output should be 2"},{"question":"A new security feature has been implemented in the \\"Codehorses\\" social network to prevent Polycarp from sending files with repetitive characters. If the file name contains five or more consecutive identical characters (like \\"aaaaa\\" or \\"bbbbb\\"), the system blocks it, displaying an error message. Determine the minimum number of characters Polycarp needs to remove from the file name so that it does not contain any sequence of five or more consecutive identical characters. Print 0 if the file name doesn\'t initially contain any forbidden subsequence. Input The first line contains the integer n (5 ≤ n ≤ 100) — the length of the file name. The second line contains a string of length n consisting of lowercase Latin letters only — the file name. Output Print the minimum number of characters to remove from the file name so it does not contain any sequence of five or more consecutive identical characters. If the file name does not initially contain a forbidden subsequence, print 0. Examples Input 8 aaaaabbb Output 1 Input 7 ccccccc Output 3 Input 4 abca Output 0 Note In the first example, the file name contains a sequence \\"aaaaa\\" which contains five consecutive \'a\' characters. By removing just one \'a\', Polycarp can send the file. In the second example, to remove the sequence \\"ccccccc\\" which contains seven consecutive \'c\' characters, Polycarp needs to remove three characters. In the third example, the file name doesn\'t contain any sequence of five or more consecutive identical characters, hence Polycarp doesn\'t need to remove any character.","solution":"def min_removals_to_prevent_repetition(n, filename): Returns the minimum number of characters to remove so that there are no sequences of five or more consecutive identical characters in the filename. count = 0 removals = 0 for i in range(1, n): if filename[i] == filename[i - 1]: count += 1 if count >= 4: removals += 1 else: count = 0 return removals"},{"question":"A magical town of Hogwarts has a unique street structure. Each house in the town can be identified by a unique number, and some pairs of houses are connected by mystical paths. People have observed that each house always has a number that lies between 1 and M, where 1 ≤ M ≤ 10^5. One day, professor Dumbledore asks you to determine some interesting properties of this street structure. Specifically, he is interested in knowing the number of disconnected components in the town and the size of the largest connected component of houses. Two houses are considered connected if there is a direct mystical path between them or if there exists a sequence of houses such that each consecutive pair in the sequence has a direct mystical path connecting them. Given T test cases, the task is to determine for each test case: 1. Number of disconnected components. 2. Size of the largest connected component. Input Format: - The first line contains an integer T, denoting the number of test cases. - Each test case starts with an integer M followed by another integer P, representing the total number of houses and the number of paths respectively. - The next P lines contain two different integers A and B, indicating a mystical path between house A and house B. Output Format: For each test case, print two integers – the number of disconnected components and the size of the largest connected component. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 10^5 0 ≤ P ≤ 2*10^5 1 ≤ A, B ≤ M Sample Input: 2 5 3 1 2 2 3 4 5 4 2 1 2 3 4 Sample Output: 2 3 2 2 Explanation: For the first test case: - The houses 1, 2, and 3 form one connected component. - The houses 4 and 5 form another connected component. - So, there are 2 disconnected components. The largest connected component has a size of 3. For the second test case: - The house groupings are {1,2} and {3,4} forming two disconnected components. - Both components are of the largest size, which is 2.","solution":"def count_components_and_max_size(T, test_cases): from collections import defaultdict, deque def bfs(node, visited, adjacency_list): queue = deque([node]) visited[node] = True size = 0 while queue: current = queue.popleft() size += 1 for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size results = [] for case in test_cases: M, P, paths = case adjacency_list = defaultdict(list) for A, B in paths: adjacency_list[A].append(B) adjacency_list[B].append(A) visited = [False] * (M + 1) num_components = 0 max_component_size = 0 for house in range(1, M + 1): if not visited[house]: component_size = bfs(house, visited, adjacency_list) num_components += 1 max_component_size = max(max_component_size, component_size) results.append((num_components, max_component_size)) return results"},{"question":"Adam is planning to buy a new house. He has n different houses to choose from. Each house i has a value vi and is located at a distance di from Adam\'s current location. Adam wants to minimize his cost of moving which is calculated as the sum of the value of the house and the one-way transportation cost. The transportation cost is given by k, which is the cost per unit of distance. Given the values and distances of the houses, and the value of k, Adam needs to determine which house he should buy to minimize his moving cost. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9) — the values of the houses. The third line contains n integers d1, d2, ..., dn (0 ≤ di ≤ 10^9) — the distances of the houses from Adam\'s current location. The fourth line contains an integer k (1 ≤ k ≤ 100,000) — the cost per unit distance. Output Print one integer — the 1-based index of the house Adam should buy. If there are multiple houses with the same minimum moving cost, print the smallest index. Examples Input 3 300000 200000 400000 20 30 10 1000 Output 2 Input 2 500000 500000 50 40 2000 Output 2 Input 4 100000 200000 150000 250000 10 5 20 15 5000 Output 3 Note In the first example, the costs of moving are: - House 1: 300000 + 1000 * 20 = 320000 - House 2: 200000 + 1000 * 30 = 230000 - House 3: 400000 + 1000 * 10 = 410000 So, the minimum cost is for the second house. In the second example, both houses have the same value, but the transportation cost is lower for the second house. In the third example, the costs of moving are: - House 1: 100000 + 5000 * 10 = 150000 - House 2: 200000 + 5000 * 5 = 225000 - House 3: 150000 + 5000 * 20 = 350000 - House 4: 250000 + 5000 * 15 = 325000 So, the minimum cost is for the first house.","solution":"def find_best_house(n, values, distances, k): min_cost = float(\'inf\') best_house_index = -1 for i in range(n): cost = values[i] + distances[i] * k if cost < min_cost: min_cost = cost best_house_index = i + 1 return best_house_index"},{"question":"Write a program to simulate the operation of a specific type of calculator that evaluates expressions based on the following rules: 1. The calculator supports addition, subtraction, multiplication, and division. 2. The calculator processes the input expression strictly from left to right, ignoring the usual operator precedence. For example, for the expression \\"5 - 3 * 2\\", the calculator performs the operations as follows: - First, it performs \\"5 - 3\\" to get 2. - Then, it performs \\"2 * 2\\" to get 4. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a string representing the expression. The expressions are valid and contain integers and operators (+, -, *, /) separated by a single space. Output For each test case, output a single line with the result of the expression evaluated from left to right. Examples Input 3 5 - 3 * 2 10 + 6 / 2 8 * 3 - 4 Output 4 8 20 Note: - Each expression will be a valid sequence of integers and operators, and there will be no division by zero. - The length of each expression will not exceed 100 characters.","solution":"def evaluate_expression(expression): Evaluates the given mathematical expression strictly from left to right tokens = expression.split() result = int(tokens[0]) # Initialize the result with the first number i = 1 while i < len(tokens): operator = tokens[i] next_number = int(tokens[i + 1]) if operator == \'+\': result += next_number elif operator == \'-\': result -= next_number elif operator == \'*\': result *= next_number elif operator == \'/\': result //= next_number # Using integer division i += 2 # Move to the next operator and number return result def process_expressions(test_cases): Processes a list of test case expressions and returns their results return [evaluate_expression(expression) for expression in test_cases]"},{"question":"In a magical forest, there are n hidden treasures located at distinct coordinates on a 2D grid. You are a treasure hunter determined to collect as many treasures as possible. However, you are equipped with a unique magical map that can create a line of any slope passing through the origin (0, 0). Each time the map is used, it will reveal all treasures located on that line. Your task is to determine the maximum number of treasures you can collect by setting the map to reveal treasures along a single line. Input The first line contains an integer n (1 ≤ n ≤ 250), denoting the number of treasures. Then n lines follow, the i-th line will contain two space-separated integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9, xi ≠ 0 or yi ≠ 0), which means that the i-th treasure is located at point (xi, yi). All treasures are located at distinct points. Output Print a single integer denoting the maximum number of treasures that can be collected by aligning the map to a single line. Examples Input 6 1 2 2 4 3 6 4 8 0 5 5 0 Output 4 Note By aligning the map at a 45-degree angle (slope of 2), the treasures located at points (1, 2), (2, 4), (3, 6), and (4, 8) lie on the same line, allowing you to collect 4 treasures.","solution":"from collections import defaultdict from math import gcd def max_treasures_on_line(n, treasures): Returns the maximum number of treasures that can be collected by aligning the map to a single line. if n <= 1: return n slope_count = defaultdict(int) for x, y in treasures: g = gcd(x, y) normalized_slope = (x // g, y // g) slope_count[normalized_slope] += 1 return max(slope_count.values()) # Example usage n = 6 treasures = [ (1, 2), (2, 4), (3, 6), (4, 8), (0, 5), (5, 0) ] print(max_treasures_on_line(n, treasures)) # Output: 4"},{"question":"Little Jhool is working as a security analyst for a big company. One crucial task in his job is to detect anomalies in network traffic logs. The logs are represented as a sequence of integers where each integer represents the number of packets received at a particular time. Little Jhool needs to detect if there is any sudden spike in the network traffic. A sudden spike is defined as a point in the sequence where the number of packets is significantly higher than the average of its preceding and succeeding values. More formally, at least twice the average of its neighbors. Write a function `detect_spike(logs)` that takes a list of integers `logs` as input and returns a list of positions (0-based index) where spikes are detected. If no spikes are found, return an empty list. Input format: - A list of integers `logs` representing the network traffic logs. Output format: - A list of integers representing the positions where spikes are detected. Constraints: - 3 ≤ Length of logs ≤ 100 - Each element in logs is a positive integer. Example: For `logs = [2, 5, 20, 4, 8]`, the return value should be `[2]` since log value at index 2 (20) is more than twice the average of its neighbors ( (5 + 4) / 2 = 4.5). For `logs = [1, 2, 3, 4, 5]`, the return value should be `[]` since there are no spikes. Your task is to implement the function `detect_spike` that accurately detects the described anomalies. ```python def detect_spike(logs): spikes = [] for i in range(1, len(logs) - 1): avg_neighbors = (logs[i-1] + logs[i+1]) / 2.0 if logs[i] > 2 * avg_neighbors: spikes.append(i) return spikes ```","solution":"def detect_spike(logs): Detects spikes in the network traffic logs. Parameters: logs (list): A list of integers representing the network traffic logs. Returns: list: A list of 0-based index positions where spikes are detected. spikes = [] for i in range(1, len(logs) - 1): avg_neighbors = (logs[i-1] + logs[i+1]) / 2.0 if logs[i] > 2 * avg_neighbors: spikes.append(i) return spikes"},{"question":"A number sequence is called arithmetic if and only if the difference between consecutive terms is constant. Given a sequence of integers, determine if the sequence is arithmetic or not. Input The first line contains a single integer n (3 ≤ n ≤ 100) – the number of elements in the sequence. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000) – the elements of the sequence. Output Output \\"YES\\" if the sequence is arithmetic, otherwise output \\"NO\\". Examples Input 5 2 4 6 8 10 Output YES Input 4 1 3 6 9 Output NO Note In the first example, the sequence is arithmetic since the difference between consecutive terms is always 2. In the second example, the sequence is not arithmetic since the differences between consecutive terms are 2, 3, and 3 respectively.","solution":"def is_arithmetic_sequence(n, sequence): Determines if the sequence of integers is arithmetic. :param n: int, the number of elements in the sequence :param sequence: list of int, the elements of the sequence :return: str, \\"YES\\" if the sequence is arithmetic, otherwise \\"NO\\" if n < 3: return \\"NO\\" diff = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != diff: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of size n x m where each cell initially contains 0. There are two types of operations you can perform on the grid: 1. Add(x, y, v): Add value v to the cell at position (x, y). 2. Sum(x1, y1, x2, y2): Calculate the sum of all values in the sub-grid from top-left (x1, y1) to bottom-right (x2, y2) inclusive. Input The first line contains three integers n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 1000), and q (1 ≤ q ≤ 100000) denoting the number of rows, columns, and the number of operations respectively. Each of the next q lines describes an operation. If the operation is an add, it will start with the integer 1, followed by three integers x, y, and v (0 ≤ v ≤ 109). If the operation is a sum, it will start with the integer 2, followed by four integers x1, y1, x2, y2. Output For each sum operation, output the result on a new line. Examples Input 3 3 6 1 1 1 5 1 2 2 3 1 3 3 7 2 1 1 3 3 1 2 3 2 2 2 2 3 3 Output 15 12 Explanation After the first 3 operations, the grid will be: 5 0 0 0 3 2 0 0 7 The fourth operation asks for the sum of all elements in the sub-grid from (1,1) to (3,3), resulting in 5 + 0 + 0 + 0 + 3 + 0 + 0 + 0 + 7 = 15. After the fifth operation, the value at cell (2,3) becomes 2. The sixth operation asks for the sum of elements in the sub-grid from (2,2) to (3,3), resulting in 3 + 2 + 0 + 7 = 12.","solution":"class Grid: def __init__(self, n, m): self.grid = [[0] * m for _ in range(n)] self.n = n self.m = m def add(self, x, y, v): self.grid[x-1][y-1] += v def sum(self, x1, y1, x2, y2): total = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total += self.grid[i][j] return total"},{"question":"In a supermarket, there are N types of products, and each type of product has a discount associated with it. Your task is to buy the maximum number of distinct product types without exceeding a given budget M. Each product type can be bought only once. Input The first line contains two single integers N and M. Next line contains N space separated integers describing the prices of products, i.e., array p. Next line contains N space separated integers describing the discounts associated with products, i.e., array d. Output Output a single integer - the maximum number of distinct product types you can buy without exceeding the budget. Constraints 1 ≤ N, M ≤ 10^5 1 ≤ p[i], d[i] ≤ 10^3 SAMPLE INPUT 6 15 3 5 8 2 7 10 1 2 1 1 2 3 SAMPLE OUTPUT 4","solution":"def max_product_types(N, M, prices, discounts): # Calculate the effective prices after applying discounts effective_prices = [prices[i] - discounts[i] for i in range(N)] # Sort the products based on their effective prices in ascending order effective_prices.sort() # Initialize the total cost and count of distinct products bought total_cost = 0 distinct_count = 0 # Loop through the sorted effective prices and count how many distinct products can be bought for price in effective_prices: if total_cost + price <= M: total_cost += price distinct_count += 1 else: break return distinct_count # Sample Input N = 6 M = 15 prices = [3, 5, 8, 2, 7, 10] discounts = [1, 2, 1, 1, 2, 3] # Sample Output print(max_product_types(N, M, prices, discounts)) # Output: 4"},{"question":"In a faraway kingdom, the people regularly commemorate the achievements of a renowned mathematician by engaging in a unique competition called the \\"Factorial Sum Challenge.\\" The primary goal of this competition is to determine the sum of the factorials of all distinct digits present in a given number. Your task is to write a program that reads a positive integer and calculates the sum of the factorials of its distinct digits. The factorial of a digit (d) is defined as: - ( 0! = 1 ) - ( 1! = 1 ) - ( 2! = 2 ) - ( 3! = 6 ) - ( 4! = 24 ) - ( 5! = 120 ) - ( 6! = 720 ) - ( 7! = 5040 ) - ( 8! = 40320 ) - ( 9! = 362880 ) Write a program that adheres to the following constraints: - The input is a single positive integer ( N ) where ( 1 leq N leq 10^{100} ). - The output is a single integer which is the sum of the factorials of all distinct digits in ( N ). # Input - A single line containing the integer ( N ). # Output - A single line containing the sum of the factorials of the distinct digits in ( N ). # Example Input ``` 1234 ``` Output ``` 33 ``` Input ``` 112233 ``` Output ``` 9 ``` Input ``` 9876543210 ``` Output ``` 409114 ``` # Explanation - For the first example, the distinct digits are 1, 2, 3, and 4. The sum of their factorials is (1! + 2! + 3! + 4! = 1 + 2 + 6 + 24 = 33). - For the second example, the distinct digits are 1, 2, and 3. The sum of their factorials is (1! + 2! + 3! = 1 + 2 + 6 = 9). - For the third example, the distinct digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. The sum of their factorials is (0! + 1! + 2! + 3! + 4! + 5! + 6! + 7! + 8! + 9! = 1 + 1 + 2 + 6 + 24 + 120 + 720 + 5040 + 40320 + 362880 = 409114).","solution":"import math def sum_of_factorials_of_digits(N): Calculate the sum of the factorials of all distinct digits in the given number N. Parameters: N (int or str): A positive integer. Returns: int: The sum of the factorials of the distinct digits. distinct_digits = set(str(N)) factorial_sum = sum(math.factorial(int(digit)) for digit in distinct_digits) return factorial_sum"},{"question":"Given a sequence of n integers, determine if there exists a subsequence of length k that forms an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers in which the difference between consecutive terms is constant. For example, the sequence 3, 5, 7, 9 is an arithmetic progression with a common difference of 2. Input - The first line contains two integers n and k (2 ≤ k ≤ n ≤ 2 * 10^5) — the length of the sequence and the required length of the subsequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the sequence. Output - Print \\"YES\\" if there exists a subsequence of length k that forms an arithmetic progression. Print \\"NO\\" otherwise. Examples Input 7 3 1 5 3 2 4 6 7 Output YES Input 5 4 1 2 3 10 12 Output NO","solution":"def can_form_arithmetic_progression(n, k, sequence): sequence.sort() for i in range(n - k + 1): possible = True d = sequence[i+1] - sequence[i] for j in range(2, k): if sequence[i+j] - sequence[i+j-1] != d: possible = False break if possible: return \\"YES\\" return \\"NO\\" # Example function call: # n = 7, k = 3, sequence = [1, 5, 3, 2, 4, 6, 7] # Expected output: \\"YES\\""},{"question":"John is a developer who is working on a project that involves managing a list of tasks with due dates. Each task has a unique identifier, a description, and a due date. John needs to implement a function to determine the number of tasks that are due within the next `k` days, including today. Write a function that takes a list of task due dates and an integer `k`, and returns the number of tasks due within the next `k` days. The function will receive the following parameters: - A list of integers `due_dates` where each element represents the number of days from today when a task is due. - An integer `k` representing the number of days from today to check for due tasks. The function should return the number of tasks that are due within the next `k` days, including today. Constraints * The length of `due_dates` list will not exceed 1000. * Each element in `due_dates` will be a non-negative integer not exceeding 1000. * `0 leq k leq 1000` Input The function has the following signature: ```python def count_due_tasks(due_dates: List[int], k: int) -> int: ``` Output The function should return an integer representing the number of tasks due within the next `k` days. Examples Input due_dates = [1, 2, 3, 4, 5] k = 3 Output 3 Explanation The tasks with due dates 1, 2, and 3 are all within the next 3 days from today, including today. Therefore, the function returns 3.","solution":"from typing import List def count_due_tasks(due_dates: List[int], k: int) -> int: Returns the number of tasks due within the next k days, including today. return sum(1 for due_date in due_dates if due_date <= k)"},{"question":"You are given an integer array `arr` of length `n`. You can perform the following operation on the array any number of times (including zero): - Choose any element `arr[i]` (0 ≤ i < n) and replace it with the sum of its two neighbors: `arr[i] = arr[i-1] + arr[i+1]`. If `i` is 0 or `n-1`, it has only one neighbor, thus the operation is not defined for these indices. Your task is to determine whether you can make the array a palindrome by performing the above operation any number of times. A sequence is called a palindrome if it reads the same backward as forward. Input The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. Then followed by t test cases, each test case is represented by two lines: - The first line contains an integer n (3 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers `arr[i]` (1 ≤ arr[i] ≤ 100) — the elements of the array. Output For each test case print \\"YES\\" if it is possible to make the array a palindrome, otherwise print \\"NO\\". Example Input: 3 3 1 2 1 4 1 3 4 1 5 2 3 5 3 2 Output: YES NO YES Note In the first test case, the array is already a palindrome. In the second test case, no matter how many operations are performed, it is impossible to make the array `[1, 3, 4, 1]` a palindrome, since the value at `arr[2]` (i.e., 4) has no way to be influenced by its symmetric counterpart `arr[1]` (i.e., 3). In the third test case, the array is already a palindrome.","solution":"def can_become_palindrome(arr, n): Determines if an array can be made into a palindrome. Parameters: arr : list A list of integers representing the array. n : int The length of the array. Returns: str \\"YES\\" if the array can become a palindrome, otherwise \\"NO\\". for i in range(n // 2): if arr[i] != arr[n - 1 - i]: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. Parameters: t : int The number of test cases. test_cases : list A list containing tuples for each testcase - (n, arr) Returns: list A list containing results for each test case. results = [] for i in range(t): n, arr = test_cases[i] results.append(can_become_palindrome(arr, n)) return results"},{"question":"A company packs their products in rectangular boxes of different sizes. Given the dimensions of a box, you need to find the smallest and largest integer cubes that can be completely contained within the box. Input The input consists of a single line containing three positive integers `L`, `W`, and `H` (1 ≤ L, W, H ≤ 10^9) — the length, width, and height of the box. Output Print two integers — the side length of the smallest integer cube that can fit inside the box and the side length of the largest integer cube that can fit completely within the box. Examples Input 4 6 8 Output 1 4 Input 5 5 5 Output 1 5 Note In the first example, the given box has dimensions 4x6x8. The smallest integer cube that can fit inside must have a side length of 1, and the largest integer cube that can fit completely within the box has a side length of 4 (as 4x4x4 fits within 4x6x8, but 5x5x5 does not). In the second example, any integer cube of side length 5 or smaller can fit completely inside the box of dimensions 5x5x5.","solution":"def cube_sizes(L, W, H): Given the dimensions of a box, return the side length of the smallest and largest integer cubes that can be completely contained within the box. min_cube_side = 1 max_cube_side = min(L, W, H) return min_cube_side, max_cube_side # Example usage: # print(cube_sizes(4, 6, 8)) # Output: (1, 4) # print(cube_sizes(5, 5, 5)) # Output: (1, 5)"},{"question":"A city is planning to build new roads to connect various regions within it. The city\'s layout can be represented as an undirected graph with n regions (nodes) connected by existing roads (edges). Each road has a weight associated with it which represents the cost required to repair it. The project manager wants to ensure that all regions are connected either directly or indirectly with as minimal repair cost as possible. Your task is to find the minimum cost required to connect all regions. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100000), where n is the number of regions and m is the number of existing roads. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) representing that there is a road connecting region u and v with a repair cost of w. Output Print a single integer - the minimum cost required to connect all regions. Examples Input 4 5 1 2 1 2 3 4 3 4 2 1 4 3 2 4 5 Output 6 Input 3 3 1 2 3 1 3 1 2 3 1 Output 3 Note In the first example, the minimum cost is obtained by selecting the roads (1, 2), (3, 4), and (1, 4) with a total repair cost of 1+2+3=6. In the second example, connecting the regions 1-3 and 2-3 results in the minimal repair cost of 1+1=2.","solution":"def find_minimum_cost_to_connect_regions(n, m, edges): Finds the minimum cost required to connect all regions using the Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). :param n: Number of regions :param m: Number of existing roads :param edges: List of tuples representing the roads (u, v, w) :return: Minimum cost to connect all regions # Kruskal\'s algorithm requires sorting the edges by weight edges.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 mst_cost = 0 edges_used = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: break return mst_cost"},{"question":"Farmer John loves solving puzzles in his spare time, and during his stay at the hotel, he came across a particular problem involving binary strings. He is now fascinated with finding the longest contiguous subarray of a given binary string that contains an equal number of 0s and 1s. As a result, Farmer John wants to write a program that takes a binary string as input and calculates the length of the longest contiguous subarray with an equal number of 0s and 1s. Input The input consists of a single line containing a binary string s of length n (1 ≤ n ≤ 100,000). The string only contains the characters \'0\' and \'1\'. Output Output a single integer representing the length of the longest contiguous subarray with an equal number of 0s and 1s. Examples Input 110001111000 Output 12 Input 10101 Output 4 Input 000111 Output 6 Note In the first sample, the entire string contains 6 zeroes and 6 ones, thus forming the longest contiguous subarray with equal 0s and 1s with length 12. In the second sample, one of the longest subarrays with equal 0s and 1s is `1010`, with length 4. In the third sample, the entire string is a balanced subarray with length 6.","solution":"def longest_equal_subarray(s): Finds the length of the longest contiguous subarray with equal number of 0s and 1s. Args: s (str): The input binary string. Returns: int: The length of the longest contiguous subarray with equal number of 0s and 1s. # Dictionary to store the first occurrence of the prefix sums prefix_sum_map = {} max_length = 0 prefix_sum = 0 # Initialize the map with prefix_sum 0 at index -1 prefix_sum_map[0] = -1 for i, char in enumerate(s): if char == \'0\': prefix_sum -= 1 else: prefix_sum += 1 if prefix_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = i return max_length"},{"question":"n a system with N users and M connections, each connection connects exactly two users bidirectionally. Each user sends messages to their connected users, and each message travels along the connections. A system administrator wants to know the minimum number of messages required to send an important message from user A to user B, directly or indirectly. Input The first line of the input contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 10^5) — the number of users and connections. Each of the next M lines contains two integers ui and vi (1 ≤ ui, vi ≤ N, ui ≠ vi) — indicating there is a bidirectional connection between user ui and user vi. The last line contains two integers A and B (1 ≤ A, B ≤ N) — the users between whom the minimum number of messages required is to be found. Output Print the minimum number of messages required to send the important message from user A to user B. If there is no way to send the message, print -1. Examples Input 6 5 1 2 2 3 3 4 4 5 5 6 1 6 Output 5 Input 4 2 1 2 3 4 1 4 Output -1 Note In the first example, users are connected in the sequence 1-2-3-4-5-6, so it requires 5 messages to get from user 1 to user 6. In the second example, there are two disconnected components: {1, 2} and {3, 4}. Hence, there is no way to send a message from user 1 to user 4.","solution":"from collections import deque, defaultdict def min_messages(N, M, connections, A, B): graph = defaultdict(list) # Create graph for u, v in connections: graph[u].append(v) graph[v].append(u) # Perform BFS queue = deque([(A, 0)]) visited = set() visited.add(A) while queue: node, depth = queue.popleft() if node == B: return depth for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, depth + 1)) return -1"},{"question":"You are given an array of n integers, and another integer m. Your task is to modify the array by performing m operations on it. Each operation is described by three integers l, r, and x, and it modifies the array by adding x to every element between indices l and r, inclusive. After performing all m operations, you need to answer q queries. Each query is represented by an integer index i, and the answer to the query is the value of the array at index i after all operations have been applied. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000). The second line contains n integers, the initial values of the array. The next m lines describe the operations, each line contains three integers l, r and x (1 ≤ l ≤ r ≤ n, -1000 ≤ x ≤ 1000). The following line contains one integer q (1 ≤ q ≤ 100000). Then q lines follow, each containing an integer index i (1 ≤ i ≤ n). Output Print q integers, the value of the array at index i after all operations for each of the q queries. Example Input 5 3 1 2 3 4 5 1 3 2 2 4 -1 1 5 3 2 2 4 Output 6 6 Note Consider the following operations on the example: - After the first operation: [3, 4, 5, 4, 5] - After the second operation: [3, 3, 4, 3, 5] - After the third operation: [6, 6, 7, 6, 8] Then, for the queries, the value at index 2 is 6 and the value at index 4 is also 6.","solution":"def modify_array_with_operations(n, m, initial_array, operations, q, queries): Modify array according to given operations and return the values as per queries. :param n: int, size of the array :param m: int, number of operations :param initial_array: list of int, the initial values of the array :param operations: list of tuple, where each tuple has three integers (l, r, x) :param q: int, number of queries :param queries: list of int, the indices to query after operations :return: list of int, result values from queries # Apply range updates using a difference array diff = [0] * (n + 1) # Process all operations for (l, r, x) in operations: diff[l - 1] += x if r < n: diff[r] -= x # Compute the final array using the difference array for i in range(n): if i == 0: initial_array[i] += diff[i] else: diff[i] += diff[i - 1] initial_array[i] += diff[i] # Fetch results for the queries result = [] for index in queries: result.append(initial_array[index - 1]) return result"},{"question":"Given an array of integers, execute a series of queries which involve swapping selected subarrays and then finding the product of the array. Provide a function that processes multiple test cases, where each test case contains an integer N (the size of the array) followed by N integers (elements of the array), and then an integer Q (number of queries) followed by Q queries. Each query contains two integers L and R denoting the indices of the subarray to be swapped (1-based indexing). The function should output the product of the array after each query. Assume the product fits within the range of a 64-bit integer. Example: Given: N = 5 Array = [1, 2, 3, 4, 5] Q = 2 Queries = [(1, 3), (2, 4)] Initial product: 1 * 2 * 3 * 4 * 5 = 120 After first swap (1, 3): Updated Array = [3, 2, 1, 4, 5] Product = 3 * 2 * 1 * 4 * 5 = 120 After second swap (2, 4): Updated Array = [3, 4, 1, 2, 5] Product = 3 * 4 * 1 * 2 * 5 = 120 Input: First line contains T, the number of test cases. For each test case: - First line contains N, the size of the array. - Next line contains N integers, elements of the array. - Next line contains Q, the number of queries. - Next Q lines contain two integers L and R defining the range of the subarray to be swapped (1-based indexing). Output: For each query of each test case, print the product of the array after executing the query. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Array[i] ≤ 1000 1 ≤ Q ≤ 50 1 ≤ L ≤ R ≤ N SAMPLE INPUT 1 5 1 2 3 4 5 2 1 3 2 4 SAMPLE OUTPUT 120 120","solution":"def solve(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] array = case[\'array\'] Q = case[\'Q\'] queries = case[\'queries\'] def product(arr): result = 1 for num in arr: result *= num return result for (L, R) in queries: # Convert 1-based indexing to 0-based L, R = L - 1, R - 1 # Reverse the subarray from L to R array[L:R+1] = array[L:R+1][::-1] # Compute and store the product results.append(product(array)) return results # Example of how the function can be called: # T = 1 # test_cases = [{ # \'N\': 5, # \'array\': [1, 2, 3, 4, 5], # \'Q\': 2, # \'queries\': [(1, 3), (2, 4)] # }] # solve(T, test_cases)"},{"question":"Write a function `unique_pair_count` that finds the number of unique pairs (i, j) in an array `arr` such that `i < j`, and the sum of `arr[i]` and `arr[j]` is divisible by a given integer `K`. # Input Format: - The first line contains two integers, `N` and `K` denoting the number of elements in the array and the integer to check for divisibility, respectively. - The second line contains `N` space-separated integers denoting the elements of the array `arr`. # Output Format: - Print the number of unique pairs (i, j) whose sum is divisible by `K`. # Constraints: - (1 le N le 10^5) - (1 le arr[i] le 10^9) - (1 le K le 10^9) # Sample Input: ``` 6 5 1 2 3 4 5 10 ``` # Sample Output: ``` 3 ``` # Explanation: There are three pairs whose sum is divisible by 5: - (1, 4) -> 1+4 = 5 - (2, 3) -> 2+3 = 5 - (5, 10) -> 5+10 = 15","solution":"def unique_pair_count(N, K, arr): Returns the number of unique pairs (i, j) where i < j and (arr[i] + arr[j]) is divisible by K. Parameters: N (int): The number of elements in the array. K (int): The integer to check for divisibility. arr (List[int]): The list of integers. Returns: int: The number of unique pairs satisfying the condition. count = 0 remainder_count = [0] * K for num in arr: remainder = num % K complement = (K - remainder) % K count += remainder_count[complement] remainder_count[remainder] += 1 return count"},{"question":"Riya loves playing with numerals, and today she has devised a new game called \\"Palindrome Segments\\". Riya picks a string consisting of only lowercase English letters and divides it into contiguous segments of equal length. She then checks if each segment forms a palindrome or not. Given a string s and the number of segments m, your task is to help Riya determine if it is possible to divide the string into m segments such that each segment is a palindrome. A palindrome is a string that reads the same forward and backward. Input The first line contains an integer m (1 ≤ m ≤ |s|) — the number of segments Riya wants to divide the string into. The second line contains a non-empty string s of length at most 1,000,000 consisting of lowercase English letters. Output Print \\"Yes\\" (without quotes) if it is possible to divide the string into m palindromic segments, otherwise print \\"No\\" (without quotes). Examples Input 2 abccbaabccba Output Yes Input 3 abcbaabcba Output No Note In the first sample, it is possible to divide the string into two segments \\"abccba\\" and \\"abccba\\", both of which are palindromes. In the second sample, dividing it into three parts does not produce segments that are all palindromes.","solution":"def can_divide_into_palindromic_segments(m, s): length = len(s) if length % m != 0: return \\"No\\" segment_length = length // m for i in range(0, length, segment_length): segment = s[i:i + segment_length] if segment != segment[::-1]: return \\"No\\" return \\"Yes\\""},{"question":"Problem Statement You are tasked with organizing a secret team-building event for employees at a company. This event includes a series of activities that employees can participate in. Each activity has a certain start time and end time, and employees can only participate in one activity at a time. To help with scheduling, you need to determine the maximum number of activities an employee can participate in if they choose their activities optimally. Write a function that takes a list of activities, where each activity is represented by a tuple of two integers (start_time, end_time). The function should return the maximum number of activities an employee can participate in. Input - An integer `n`, representing the number of activities (1 ≤ n ≤ 10^5) - A list of `n` tuples, where each tuple contains two integers `start_time` and `end_time` (1 ≤ start_time < end_time ≤ 10000) Output - An integer representing the maximum number of activities an employee can participate in. Example Input 5 (1, 3), (2, 6), (8, 10), (5, 7), (3, 4) Output 3 Explanation In this example, the activities can be sorted based on their end times as: (1, 3), (3, 4), (5, 7), (8, 10), (2, 6). The optimal selection of activities will be: (1, 3), (3, 4), (8, 10). Therefore, the maximum number of activities an employee can participate in is 3.","solution":"def max_activities(n, activities): Determines the maximum number of activities an employee can participate in. Parameters: n (int): The number of activities activities (list of tuples): A list of tuples where each tuple contains two integers (start_time, end_time) Returns: int: The maximum number of activities an employee can participate in # Sort activities based on their end time activities.sort(key=lambda x: x[1]) # Initialize count of activities and the end time of the last selected activity count = 0 last_end_time = 0 # Iterate through the activities for start, end in activities: # If the start time of the current activity is greater than the # end time of the last selected activity, then select this activity if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers. Determine if the array is in non-decreasing order or not. Constraints * 1 leq n leq 100 * -1000 leq a_i leq 1000 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print `yes` if the array is in non-decreasing order; otherwise, print `no`. Examples Input 5 1 2 2 4 5 Output yes Input 4 3 1 4 2 Output no Input 3 7 7 8 Output yes","solution":"def is_non_decreasing(arr): Determines if the array is in non-decreasing order. Parameters: arr (list of int): The array of integers. Returns: str: \\"yes\\" if the array is in non-decreasing order, otherwise \\"no\\". for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return \\"no\\" return \\"yes\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n + 1])) print(is_non_decreasing(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Vasya loves playing with strings and recently he came across the concept of \\"rotation\\" of strings. A rotation by one position involves moving the last character of the string to the front. For example, rotating \\"abcd\\" by one position results in \\"dabc\\". Vasya began rotating his favorite string multiple times and wondered how many unique strings he could get. Given a string, determine the number of unique strings that can be obtained by performing any number of rotations (including zero) on the original string. Input The input contains a single line which contains the original string. The string will only consist of lowercase English letters and will have a length between 1 and 1000. Output The output should be a single integer representing the number of unique strings that can be obtained by performing any number of rotations on the original string. Examples Input abcd Output 4 Input aaaa Output 1 Input abac Output 4","solution":"def count_unique_rotations(s): unique_rotations = set() for i in range(len(s)): rotated_string = s[-i:] + s[:-i] unique_rotations.add(rotated_string) return len(unique_rotations)"},{"question":"Alice has a collection of sticks, each with a positive integer length. She wants to pick some of these sticks and form a rectangle with them. To form a rectangle, she needs to pick four sticks such that there are two pairs of sticks with the same length. Alice wonders how many different ways she can pick the sticks to form a rectangle. For example: - If Alice has 6 sticks with lengths [1, 2, 3, 1, 2, 1], she can form one rectangle by picking sticks with lengths (1, 1, 1, 1). - If Alice has 8 sticks with lengths [3, 3, 3, 3, 4, 4, 4, 4], she can form two rectangles: one with lengths (3, 3, 3, 3) and another with lengths (4, 4, 4, 4). Given the lengths of the sticks, help Alice determine the number of ways she can choose sticks to form rectangles. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case contains two lines: the first line contains one integer n (4 ≤ n ≤ 1000) — the number of sticks. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the sticks. Output For each test case, output the number of ways Alice can pick sticks to form a rectangle or 0 if it\'s not possible. Example Input 3 6 1 2 3 1 2 1 8 3 3 3 3 4 4 4 4 5 1 2 3 4 5 Output 1 2 0 Explanation: - In the first test case, Alice can form one rectangle using four sticks of length 1. - In the second test case, Alice can form two rectangles: one with lengths (3, 3, 3, 3) and another with lengths (4, 4, 4, 4). - In the third test case, Alice cannot form any rectangle.","solution":"def count_rectangles(t, test_cases): Given a number of test cases, and list of test cases, returns the count of ways sticks can form a rectangle for each test case. Parameters: t (int): number of test cases test_cases (list of tuples): each containing n (int) and list of stick lengths (list of int) Returns: list: a list of integers representing the counts of rectangles for each test case from collections import Counter results = [] for case in test_cases: n, sticks = case count = Counter(sticks) # Calculate pairs and then rectangles pairs = 0 for stick_length, freq in count.items(): pairs += freq // 2 # each pair needs 2 sticks rectangles = pairs // 2 # each rectangle needs 2 pairs results.append(rectangles) return results # Function to parse input and extract the test cases def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) sticks = list(map(int, input_lines[index + 1].split())) test_cases.append((n, sticks)) index += 2 return t, test_cases # Main interface function def main(input_string): t, test_cases = parse_input(input_string) return count_rectangles(t, test_cases)"},{"question":"There are N cities arranged in a straight line, each at a distinct position. You need to construct M relay stations such that every city is within a distance S from at least one relay station. Determine the minimum number of relay stations needed and their optimal positions. Constraints: * 1 ≤ N, M ≤ 100 * 0 ≤ positions of cities ≤ 1000 * positions of cities are integers * 1 ≤ S ≤ 1000 Input The input is given from Standard Input in the following format: N M S positions_1 positions_2 ... positions_N Output Output the minimum number of relay stations needed and their positions. Examples Input 5 2 3 1 2 6 8 10 Output 2 2 8 Input 6 3 2 1 2 4 6 9 11 Output 3 2 6 11","solution":"def minimum_relay_stations(N, M, S, positions): Determines the minimum number of relay stations needed and their optimal positions. Args: N : int : number of cities M : int : number of relay stations S : int : maximum distance from any city to a relay station positions : list of int : positions of the cities Returns: tuple : minimum number of relay stations needed and their optimal positions as a list positions.sort() i = 0 relay_stations = [] while i < N: station_position = positions[i] + S relay_stations.append(station_position) while i < N and positions[i] <= station_position + S: i += 1 return len(relay_stations), relay_stations"},{"question":"A theme park has a new sequence ride which consists of N segments (1 to N). Each segment has a unique difficulty level denoted by an integer (D_1, D_2, ..., D_N). A participant\'s energy starts at its maximum level, 100. Each segment of the ride drains a certain amount of energy from the participant. The energy drain for a segment is calculated as per the difficulty level of the segment and a special character in the difficulty pattern string P. The pattern string P consists of these characters: * If the character is `A`, the drain for that segment is cel(D_i / 2) (i.e., the ceiling of half of the difficulty level). * If the character is `B`, the drain is the exact difficulty level D_i. If at any point the participant\'s energy level becomes zero or less, they cannot proceed to the next segment. Your task is to determine how many segments the participant can complete before their energy is depleted. Constraints: * 1 ≦ N ≦ 10^5 * 1 ≦ D_i ≦ 100 * P consists of exactly N characters and each character is either `A` or `B`. Input: The input is given from Standard Input in the following format: N D_1 D_2 ... D_N P Output: Print the number of segments the participant can complete before their energy is depleted. Examples: Input: 5 10 20 30 40 50 AABBA Output: 4 Input: 3 50 40 30 BBB Output: 2 Input: 4 25 25 25 25 AAAA Output: 4","solution":"import math def max_segments_completed(N, difficulties, pattern): energy = 100 segments_completed = 0 for i in range(N): if pattern[i] == \'A\': drain = math.ceil(difficulties[i] / 2) else: drain = difficulties[i] energy -= drain if energy <= 0: break segments_completed += 1 return segments_completed"},{"question":"You are given a list of positive integers. Your task is to determine if there exists a permutation of the list (i.e., any reordering of its elements) such that it forms an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. Input The first line of the input contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains an integer n (2 ≤ n ≤ 100) followed by n integers which represent the elements of the list. Output For each test case, print \\"YES\\" if it is possible to reorder the elements of the list such that they form an arithmetic progression, otherwise print \\"NO\\". Example Input 3 4 2 4 6 8 3 1 3 2 5 1 2 4 6 10 Output YES YES NO Explanation In the first test case, the list [2, 4, 6, 8] can be used to form an arithmetic progression with a common difference of 2. In the second test case, the list [1, 2, 3] can be reordered to form the arithmetic progression [1, 2, 3] with a common difference of 1. In the third test case, it is not possible to reorder the list [1, 2, 4, 6, 10] to form an arithmetic progression.","solution":"def can_form_arithmetic_progression(t, test_cases): results = [] for case in test_cases: n, *arr = case arr.sort() diff = arr[1] - arr[0] arithmetic = True for i in range(2, n): if arr[i] - arr[i-1] != diff: arithmetic = False break if arithmetic: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage t = 3 test_cases = [ [4, 2, 4, 6, 8], [3, 1, 3, 2], [5, 1, 2, 4, 6, 10] ] output = can_form_arithmetic_progression(t, test_cases) for result in output: print(result)"},{"question":"Given an array A of N positive integers, find the smallest positive integer that is not present in the array. This smallest positive integer should be strictly greater than zero. Input The number N is given in the first line of input. Then N integers are given in the second line which denotes the array A. Output Output a single integer which is the smallest positive integer not present in the array. Constraints 1 <= N <= 10^6 1 <= Ai <= 10^9 Example Input: 6 1 3 6 4 1 2 Output: 5 Input: 3 1 2 3 Output: 4 Input: 3 7 8 9 Output: 1","solution":"def smallest_missing_positive_integer(n, A): Returns the smallest positive integer that is not present in the array A. Parameters: n (int): Number of elements in array A. A (list of int): List of positive integers. Returns: int: The smallest positive integer not present in A. # Creating a set of the input array for O(1) look-ups num_set = set(A) # Trying to find the smallest missing positive integer smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Pastry Cooking Chef Anita is a renowned pastry chef and she loves to experiment with different types of pastries. She came up with a new challenge where she needs to prepare a certain number of pastries using the number of eggs she has available. However, each type of pastry recipe requires a different number of eggs. Given a list of available pastries (each identified by the number of eggs required to make one pastry) and a specific number of eggs Anita has, determine the maximum number of different types of pastries she can prepare using the given eggs, without repeating any type of pastry. Input The first line contains T, the number of test cases. The first line of each test case contains two integers N and E, N representing the number of different types of pastries and E representing the total number of eggs Anita has. The second line of each test case contains N integers, each representing the number of eggs required to make one type of pastry. Output For each test case, output a single line containing the maximum number of different types of pastries Anita can prepare. Constraints 1 <= T <= 10 1 <= N <= 10^5 1 <= E <= 10^9 1 <= Eggs required <= 10^5 Time limit: 1s Sample Input 2 3 10 2 3 5 4 7 1 2 3 4 Sample Output 3 3 Explanation For the first case, Anita can make pastries of all three types using her 10 eggs (2+3+5=10). For the second case, Anita can make pastries with 1, 2, and 3 eggs, but she cannot make the pastry requiring 4 eggs if she has only 7 eggs (1+2+3=6 < 7, and adding 4 would exceed 7). Thus, she can prepare a maximum of 3 different types.","solution":"def max_pastries(T, test_cases): results = [] for i in range(T): N, E = test_cases[i][:2] egg_requirements = sorted(test_cases[i][2]) total_eggs = 0 types_count = 0 for eggs in egg_requirements: if total_eggs + eggs <= E: total_eggs += eggs types_count += 1 else: break results.append(types_count) return results"},{"question":"# Fibonacci Checker Problem Statement Determine if the given integer n is a Fibonacci number. The Fibonacci sequence is defined as follows: the first two numbers are 0 and 1, and each subsequent number is the sum of the previous two. Formally, the sequence F(n) is defined by the recurrence relation: F(n) = F(n-1) + F(n-2), with seed values F(0) = 0, F(1) = 1 Constraints * 1 ≤ n ≤ 10^6 Input Input follows the following format. The provided number is an integer. n Output Output \\"Yes\\" if n is a Fibonacci number, otherwise output \\"No\\". Examples Input 21 Output Yes Input 34 Output Yes Input 50 Output No","solution":"import math def is_fibonacci_number(n): Determines if the given integer n is a Fibonacci number. A number is Fibonacci if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x return \\"Yes\\" if is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4) else \\"No\\""},{"question":"Given a list of integers, your task is to find the length of the longest subsequence such that each element in the subsequence has the same remainder when divided by a given divisor d. Input The first line contains two integers n and d (1 ≤ n ≤ 100 000, 1 ≤ d ≤ 100), where n is the length of the list and d is the divisor. The second line contains n integers ai (1 ≤ ai ≤ 100 000) — the elements of the list. Output Print a single integer representing the length of the longest subsequence where all elements have the same remainder when divided by d. Examples Input 6 3 1 4 7 10 13 16 Output 6 Input 5 2 1 2 3 4 5 Output 3 Note In the first example, all elements have the remainder 1 when divided by 3, forming a subsequence of length 6. In the second example, we can select elements with remainders 1 or 0 when divided by 2, giving us subsequences of lengths 3 and 2 respectively. The longest one has length 3.","solution":"def longest_subsequence_with_same_remainder(n, d, a): Returns the length of the longest subsequence where all elements have the same remainder when divided by d. Parameters: n (int): the length of the list d (int): the divisor a (list of int): the elements of the list Returns: int: the length of the longest subsequence with the same remainder remainder_count = [0] * d for num in a: remainder = num % d remainder_count[remainder] += 1 return max(remainder_count)"},{"question":"Given a directed, weighted graph G. Each node represents a city, and each edge represents a direct road connecting two cities with a certain travel cost. Your task is to determine the shortest path from a starting city s to a destination city d. You need to return the minimum travel cost if there is a valid path, or -1 if no path exists. Input: - The first line contains two integers, n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 5000), representing the number of cities (nodes) and roads (edges) in the graph, respectively. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating there is a direct road from city u to city v with a travel cost of w. - The last line contains two integers s and d (1 ≤ s, d ≤ n), representing the starting city and the destination city. Output: - Print a single integer, the minimum travel cost from city s to city d. If there is no valid path, print -1. Example: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 3 4 7 2 4 5 4 5 1 1 5 ``` Output: ``` 8 ``` In this example, the shortest path from city 1 to city 5 is: 1 -> 2 -> 3 -> 4 -> 5 with a total travel cost of 8.","solution":"import heapq def dijkstra(n, graph, start, end): Uses Dijkstra\'s algorithm to find the shortest path in a directed, weighted graph. # Initialize distances and priority queue dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # (cost, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_node == end: return current_distance if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 def find_shortest_path(n, m, edges, s, d): Constructs the graph and finds the shortest path from s to d using Dijkstra\'s algorithm. graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) return dijkstra(n, graph, s, d)"},{"question":"You are given a string s consisting of lowercase English letters only. Find the shortest subsequence of s that contains all the distinct characters of the string. We\'ll call a non-empty string s[p1p2... pk] = sp1sp2... spk (1 ≤ p1 < p2 < ... < pk ≤ |s|) a subsequence of string s = s1s2... s|s|, where |s| is the length of string s. For example, strings \\"abcb\\", \\"b\\" and \\"abacaba\\" are subsequences of string \\"abacaba\\". Input The only input line contains a non-empty string s consisting of lowercase English letters only. Its length does not exceed 50. Output Print the shortest subsequence of string s that contains all distinct characters of s. If multiple valid subsequences exist, print the one that appears first in the string. Examples Input abac Output abc Input aabbcc Output abc Input xyzzyx Output xyz Input mississippi Output misp Note In the first example, the distinct characters of \\"abac\\" are \'a\', \'b\', and \'c\'. The shortest subsequence containing all these characters is \\"abc\\". In the second example, the distinct characters of \\"aabbcc\\" are \'a\', \'b\', and \'c\'. The shortest subsequence containing all these characters is \\"abc\\". In the third example, the distinct characters of \\"xyzzyx\\" are \'x\', \'y\', and \'z\'. The shortest subsequence containing all these characters is \\"xyz\\". In the fourth example, the distinct characters of \\"mississippi\\" are \'m\', \'i\', \'s\', and \'p\'. The shortest subsequence containing all these characters is \\"misp\\".","solution":"def shortest_subsequence_with_all_distinct_characters(s): Returns the shortest subsequence that contains all the distinct characters of the input string. distinct_characters = set() result = \\"\\" for char in s: if char not in distinct_characters: distinct_characters.add(char) result += char return result"},{"question":"A small town has n houses arranged in a row. The mayor decided to paint each house in one of m different colors to celebrate the town\'s anniversary. However, there are some specific conditions that must be met: * Each house must be painted exactly one color. * No two adjacent houses can be painted the same color. Help the mayor come up with a valid way to paint the houses under the given constraints. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 20) representing the number of houses and the number of colors available, respectively. Output Print a single line containing n integers separated by spaces, where the i-th integer represents the color of the i-th house. If there are multiple valid solutions, print any of them. If no valid solution exists, print -1. Examples Input 3 3 Output 1 2 3 Input 5 2 Output 1 2 1 2 1","solution":"def paint_houses(n, m): Returns a sequence of integers representing the colors of the houses such that no two adjacent houses have the same color, if possible. Parameters: n (int): Number of houses. m (int): Number of colors available. Returns: str: A single line containing n integers separated by spaces, representing the color of each house. If no valid solution exists, returns -1. if m == 1 and n > 1: return \\"-1\\" # Initialize the result list result = [] for i in range(n): # Assign color in a round-robin fashion result.append((i % m) + 1) return \\" \\".join(map(str, result))"},{"question":"You are given a sequence of integers which represents the heights of trees in a straight line. You can choose to cut down some of the trees. After cutting, the remaining trees should be in a strictly increasing order of their heights from left to right. Your task is to determine the minimum number of trees that need to be cut down to achieve this order. Input The first line of the input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number of trees. The second line contains N space-separated integers H1, H2, ..., HN denoting the heights of the trees. Output For each test case, output a single line containing an integer corresponding to the minimum number of trees that must be cut down for the remaining trees to be in strictly increasing order. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Hi ≤ 10^4 Example Input: 2 6 3 2 5 1 4 6 4 1 2 3 4 Example Output: 3 0 Explanation Example 1: To achieve a strictly increasing order, you can cut down trees at positions 2, 4, and 5 (heights 2, 1, and 4 respectively), leaving the sequence [3, 5, 6]. Example 2: The trees are already in strictly increasing order, so no trees need to be cut down. The output is 0.","solution":"def min_trees_cut_to_increasing(t, test_cases): Determines the minimum number of trees to cut to achieve a strictly increasing order of heights. Parameters: t (int): Number of test cases. test_cases (list): A list of test cases where each test case is a tuple (n, heights) with n as the number of trees and heights as a list of tree heights. Returns: list: A list of integers where each integer is the number of trees to cut for respective test case. def lis_length(arr): # Helper function to calculate the length of longest increasing subsequence if not arr: return 0 lis = [arr[0]] for i in range(1, len(arr)): if arr[i] > lis[-1]: lis.append(arr[i]) else: # Find the position where arr[i] would replace a value in lis left, right = 0, len(lis) - 1 while left < right: mid = (left + right) // 2 if lis[mid] < arr[i]: left = mid + 1 else: right = mid lis[left] = arr[i] return len(lis) results = [] for n, heights in test_cases: # Longest Increasing Subsequence algorithm lis_len = lis_length(heights) # Minimal trees to cut is total trees minus longest increasing subsequence length results.append(n - lis_len) return results # Example usage: # result = min_trees_cut_to_increasing(2, [(6, [3, 2, 5, 1, 4, 6]), (4, [1, 2, 3, 4])]) # print(result)"},{"question":"Implement a movie rental management system for a rental shop with a collection of movies. In this problem, you will develop multiple functionalities including adding, renting, returning, and finding the most rented movie. # Functionality: You will need to support the following operations: 1. **Add Movie:** Adds a new movie with a given title and director to the shop. 2. **Rent Movie:** Rents out the specified movie if available. 3. **Return Movie:** Returns a rented movie back to the shop. 4. **Most Rented Movie:** Finds and prints the title of the most rented movie. If there is a tie, print the movie that comes first lexicographically. # Input: The input consists of multiple operations, one per line. Each operation is described below: - `add_movie \\"<title>\\" \\"<director>\\"` - Adds a movie with the title and director to the shop. - `rent_movie \\"<title>\\"` - Rents the movie with the given title. - `return_movie \\"<title>\\"` - Returns the rented movie with the given title. - `most_rented` - Prints the title of the most rented movie. # Output: For the `most_rented` operation, print a single line containing the title of the most rented movie. If there are no rented movies, print `-1`. # Example: Input: ``` add_movie \\"Inception\\" \\"Christopher Nolan\\" add_movie \\"The Dark Knight\\" \\"Christopher Nolan\\" add_movie \\"Interstellar\\" \\"Christopher Nolan\\" rent_movie \\"Inception\\" rent_movie \\"The Dark Knight\\" rent_movie \\"The Dark Knight\\" rent_movie \\"Interstellar\\" return_movie \\"Inception\\" rent_movie \\"Inception\\" most_rented ``` Output: ``` The Dark Knight ``` # Constraints: - Movie titles and director names are unique and are at most 50 characters long. - Operations are case-sensitive (e.g., \\"inception\\" is different from \\"Inception\\"). - No duplicate movies will be added. # Implementation Notes: You may assume that: - Each movie added will be unique. - Every movie rented will be available for rent. - Every movie returned will have been previously rented out.","solution":"from collections import defaultdict class MovieRentalSystem: def __init__(self): self.movies = {} self.rented = defaultdict(int) def add_movie(self, title, director): self.movies[title] = director def rent_movie(self, title): if title in self.movies and title not in self.rented: self.rented[title] += 1 def return_movie(self, title): if title in self.rented and self.rented[title] > 0: self.rented[title] -= 1 def most_rented(self): if not self.rented: print(\\"-1\\") return most_rented_count = max(self.rented.values()) most_rented_movies = [title for title, count in self.rented.items() if count == most_rented_count] most_rented_movies = sorted(most_rented_movies) print(most_rented_movies[0])"},{"question":"You are a leading developer at a robotics company, and you have been tasked with creating a control algorithm for your newest robot, which navigates through a grid. To perfect its navigation skills, you need to practice with a simplified version of the problem. The robot is placed on a 2D grid at the origin point (0, 0) and can move in four possible directions: up, down, left, and right. Each command to the robot is represented by a string of characters, where each character corresponds to one of its moves: - \'U\' for moving up - \'D\' for moving down - \'L\' for moving left - \'R\' for moving right After executing a sequence of commands, the robot may return to the origin point or move to a new position. Your task is to determine whether the robot returns to the origin (0, 0) after a series of commands. # Input The input consists of a single line containing a string `commands` (1 ≤ |commands| ≤ 10^5), representing the sequence of commands given to the robot. # Output Print \\"YES\\" if the robot returns to the origin (0, 0) after executing the commands, otherwise print \\"NO\\". # Examples Input ``` UDLR ``` Output ``` YES ``` Input ``` UUDD ``` Output ``` YES ``` Input ``` UUUDDDLL ``` Output ``` NO ``` Explanation 1. In the first example, the robot moves up, down, left, and right, finishing back at the origin. 2. In the second example, the robot moves up twice and down twice, staying along the y-axis and finishing back at the origin. 3. In the third example, the robot moves up three times and down three times, then left twice, and finishes at (-2, 0), not returning to the origin.","solution":"def is_robot_back_to_origin(commands): Determines if the robot returns to the origin after a sequence of commands. Parameters: commands (str): A string of commands consisting of \'U\', \'D\', \'L\', and \'R\'. Returns: str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are given a list of integers representing the height of buildings in a row. You need to calculate the amount of rainwater that can be trapped between these buildings after it rains. For example, given the heights `[0,1,0,2,1,0,1,3,2,1,2,1]`, 6 units of rainwater (shown in blue section) are being trapped. Constraints * 1 leq height.length leq 10^4 * 0 leq height[i] leq 10^5 Input The input should be provided in the following format: height Output Output the total amount of rainwater that can be trapped. Examples Input [0,1,0,2,1,0,1,3,2,1,2,1] Output 6 Input [4,2,0,3,2,5] Output 9","solution":"def trap(height): Calculate the total amount of rainwater trapped between the buildings. Parameters: height (list): A list of integers representing the height of buildings. Returns: int: The amount of trapped rainwater. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A delivery company uses a coding mechanism to track their packages. Each package is given a 4-letter identifier code composed of uppercase English letters. Due to some error in the tracking system, the codes are converted into numbers, according to the following mapping: POSSIBLE VALUES OF \\"A\\": P, Q, R, S POSSIBLE VALUES OF \\"B\\": T, U, V, W POSSIBLE VALUES OF \\"C\\": X, Y, Z, A POSSIBLE VALUES OF \\"D\\": B, C, D, E Your task is to help the company decode the identifier codes back into their original format. INPUT: The first line consists of the number of test cases T followed by T lines, each line consists of 4 space-separated integers A, B, C, D. OUTPUT Print the correct decoded message in the format of A-B-C-D. Constraints: 1 ≤ T ≤ 50000 1 ≤ A, B, C, D ≤ 1000000000 SAMPLE INPUT 3 24 20 25 20 26 23 24 27 28 21 22 25 SAMPLE OUTPUT P-T-X-B R-W-Z-D S-U-Y-C Explanation For the first test case, the identifier code sent is 24-20-25-20, then 24 can be either \'P\', \'Q\', \'R\', or \'S\', 20 can be \'T\', \'U\', \'V\', or \'W\', and so forth. After decoding, 24 is converted into \'P\', 20 is converted into \'T\', 25 is converted into \'X\', and 20 is converted into \'B\'. Each number corresponds to a unique letter in the customized mapping described above.","solution":"def decode_code(a, b, c, d): Decodes the integer code values into corresponding alphabets. a_dict = {24: \'P\', 25: \'Q\', 26: \'R\', 27: \'S\'} b_dict = {20: \'T\', 21: \'U\', 22: \'V\', 23: \'W\'} c_dict = {25: \'X\', 26: \'Y\', 27: \'Z\', 28: \'A\'} d_dict = {21: \'B\', 22: \'C\', 23: \'D\', 24: \'E\'} result = f\\"{a_dict[a]}-{b_dict[b]}-{c_dict[c]}-{d_dict[d]}\\" return result def decode_all(test_cases): Processes multiple test cases of decoding codes. results = [] for case in test_cases: decoded = decode_code(*case) results.append(decoded) return results # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [tuple(map(int, data[i:i+4])) for i in range(1, len(data), 4)] results = decode_all(test_cases) for result in results: print(result)"},{"question":"You are given a list of integers and an integer K. Your task is to determine if it is possible to divide the list into K non-empty contiguous subarrays such that the sum of the integers in each subarray is the same. Constraints * 1 leq length of the list leq 100 * -1000 leq each integer in the list leq 1000 * 1 leq K leq length of the list Input Input is given from Standard Input in the following format: ``` N K list of N integers ``` Output If it is possible to divide the list into K contiguous subarrays with equal sum, print `YES`; otherwise, print `NO`. Examples Input 8 4 2 3 5 1 2 2 3 4 Output NO Input 6 3 1 2 1 2 1 2 Output YES Input 5 2 1 2 3 4 5 Output NO","solution":"def can_divide_into_subarrays(nums, K): Determine if it is possible to divide the list into K non-empty contiguous subarrays such that the sum of the integers in each subarray is the same. total_sum = sum(nums) if total_sum % K != 0: return \\"NO\\" target_sum = total_sum // K current_sum = 0 subarrays_formed = 0 for num in nums: current_sum += num if current_sum == target_sum: subarrays_formed += 1 current_sum = 0 return \\"YES\\" if subarrays_formed == K else \\"NO\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) nums = list(map(int, data[2:])) print(can_divide_into_subarrays(nums, K))"},{"question":"In a peaceful village, there is a mystical garden filled with magical flowers arranged in an n x m grid. Each cell (i, j) in the grid either contains a unique type of magical flower, designated by a positive integer fi,j, or is barren, indicated by a zero. The garden is known for a special property - the bees that pollinate these flowers can perform a series of operations to change the positions of the flowers. You have a list of q operations to be performed sequentially on the garden. Each operation can be one of the following: - Add r c d: Add a new flower of type d at position (r, c). If there is already a flower there, replace it. - Remove r c: Remove any flower at position (r, c) and make it barren. - Swap r1 c1 r2 c2: Swap the flowers at positions (r1, c1) and (r2, c2). Given the initial state of the garden and a sequence of operations, determine the state of the garden after all operations have been applied. Input The first line of the input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), the dimensions of the garden grid. Each of the next n lines contains m integers, representing the initial state of the garden. Each integer is either a positive integer (indicating a flower type) or zero (indicating barren cell). The following line contains an integer q (1 ≤ q ≤ 105), the number of operations. Each of the next q lines contains an operation in one of the following formats: - Add r c d (1 ≤ r ≤ n, 1 ≤ c ≤ m, 1 ≤ d ≤ 1000) - Remove r c (1 ≤ r ≤ n, 1 ≤ c ≤ m) - Swap r1 c1 r2 c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) Output Output n lines, each containing m integers, representing the final state of the garden after all operations. Examples Input 3 3 1 2 3 0 4 0 7 0 6 5 Add 2 1 5 Remove 1 2 Swap 1 1 3 1 Add 3 2 8 Swap 2 3 3 3 Output 7 0 3 5 4 0 1 8 0 Note In the example, the garden undergoes the following transformations: 1. Initially: 1 2 3 0 4 0 7 0 6 2. After Add 2 1 5: 1 2 3 5 4 0 7 0 6 3. After Remove 1 2: 1 0 3 5 4 0 7 0 6 4. After Swap 1 1 3 1: 7 0 3 5 4 0 1 0 6 5. After Add 3 2 8: 7 0 3 5 4 0 1 8 6 6. After Swap 2 3 3 3: 7 0 3 5 4 6 1 8 0","solution":"def process_garden_operations(n, m, garden, operations): for operation in operations: op_parts = operation.split() op_type = op_parts[0] if op_type == \\"Add\\": r, c, d = int(op_parts[1]), int(op_parts[2]), int(op_parts[3]) garden[r-1][c-1] = d elif op_type == \\"Remove\\": r, c = int(op_parts[1]), int(op_parts[2]) garden[r-1][c-1] = 0 elif op_type == \\"Swap\\": r1, c1, r2, c2 = int(op_parts[1]), int(op_parts[2]), int(op_parts[3]), int(op_parts[4]) garden[r1-1][c1-1], garden[r2-1][c2-1] = garden[r2-1][c2-1], garden[r1-1][c1-1] return garden"},{"question":"Mary is learning about sorting algorithms and wants to compare the performance of Bubble Sort and Merge Sort on various datasets. As part of her study, she has been tasked with writing code that can execute both sorting methods and measure their runtime. Mary needs your help to create a program that sorts a given list of integers using both Bubble Sort and Merge Sort, and then calculates the time taken for each sort in milliseconds. # Input - The first line contains an integer `N` (1 ≤ N ≤ 10000), the number of integers in the list. - The second line contains `N` integers, each separated by a space. Each integer `i` satisfies `1 ≤ i ≤ 10000`. # Output - The sorted list using Bubble Sort. - The time taken for Bubble Sort in milliseconds, with 2 decimal places. - The sorted list using Merge Sort. - The time taken for Merge Sort in milliseconds, with 2 decimal places. # Example **Input:** ``` 5 34 7 23 32 5 ``` **Output:** ``` Bubble Sort: 5 7 23 32 34 Time: 1.23ms Merge Sort: 5 7 23 32 34 Time: 0.12ms ``` # Note - Use Python\'s `time` library to measure the sort time. - Include the Bubble Sort and Merge Sort functions explicitly in your code. Bubble Sort ```python def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr ``` Merge Sort ```python def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr ``` Mary hopes you can help her complete her assignment and better understand the efficiency of these sorting algorithms.","solution":"import time def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr def measure_execution_time(sort_function, arr): start_time = time.perf_counter() sorted_arr = sort_function(arr.copy()) end_time = time.perf_counter() elapsed_time = (end_time - start_time) * 1000 # Convert to milliseconds return sorted_arr, elapsed_time def main(N, data): bubble_sorted, bubble_time = measure_execution_time(bubble_sort, data) merge_sorted, merge_time = measure_execution_time(merge_sort, data) print(\\"Bubble Sort:\\") print(\\" \\".join(map(str, bubble_sorted))) print(f\\"Time: {bubble_time:.2f}msn\\") print(\\"Merge Sort:\\") print(\\" \\".join(map(str, merge_sorted))) print(f\\"Time: {merge_time:.2f}msn\\")"},{"question":"In a remote village, there is a unique annual event; a magical fountain will grant the village one special day on which everyone who brings in the exact amount of 1,500 magical coins will have their wish fulfilled. The villagers have various coins of different denominations, and they can use any combination of these to reach the total of 1,500 magical coins. However, since different villagers have different sets of coin denominations, you are asked to determine if it is possible for them to precisely collect 1,500 magical coins using their available denominations. You need to help villagers by writing an algorithm that tells them if they can achieve this goal. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100), the number of different coin denominations the villagers have. The second line contains n integers d1, d2, ..., dn, each representing the value of the coin denominations (1 ≤ di ≤ 1,000). Output Print \\"YES\\" if it is possible to collect exactly 1,500 magical coins using the available denominations. Otherwise, print \\"NO\\". Examples Input 3 500 800 700 Output YES Input 4 200 300 400 500 Output NO Explanation In the first example, villagers can use three coins: 500 + 500 + 500 = 1,500. In the second example, there\'s no combination of 200, 300, 400, and 500 that sums exactly to 1,500.","solution":"def can_collect_1500_exactly(n, denominations): Determines if it is possible to collect exactly 1500 magical coins using the available denominations. Parameters: n (int): Number of different coin denominations. denominations (list): List of coin denominations. Returns: str: \\"YES\\" if it is possible to collect exactly 1500 magical coins, otherwise \\"NO\\". target = 1500 # Initialize a DP array with False values and set dp[0] to True dp = [False] * (target + 1) dp[0] = True # For each coin denomination update the DP array for coin in denominations: for i in range(target, coin - 1, -1): if dp[i - coin]: dp[i] = True # Return \\"YES\\" if dp[target] is True, otherwise \\"NO\\" return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Maya and Tera are arranging their books on a shelf. Each book has a unique ISBN number, but due to some error, multiple copies of some books ended up on the shelf. Tera wants to leave only one copy of each book in their original order. Help Tera by removing the duplicate copies and keeping only the first occurrence of each book based on its ISBN number. Input: The first line contains an integer M, the number of books. The next line contains M space-separated integers, where each integer represents the ISBN number of a book. Output: Print the final space-separated list of unique ISBN numbers in the order they first appeared. Constraints: 1 ≤ M ≤ 2 * 10^5 1 ≤ ISBN ≤ 10^9 SAMPLE INPUT 7 9781234567897 9781234567890 9781234567897 9781234567880 9781234567890 9781234567800 9781234567800 SAMPLE OUTPUT 9781234567897 9781234567890 9781234567880 9781234567800","solution":"def remove_duplicates(M, isbn_list): Remove duplicate ISBN numbers and return the list of unique ISBNs in the order they first appeared. Args: M (int): The number of books. isbn_list (list of int): List of ISBN numbers. Returns: list of int: List of unique ISBN numbers in the order they first appeared. seen = set() result = [] for isbn in isbn_list: if isbn not in seen: seen.add(isbn) result.append(isbn) return result"},{"question":"Alice has a stack of n boxes. Each box has a weight and a strength. The weight of the i-th box is `w_i` and its strength is `s_i`, meaning it can support up to `s_i` weight on top of it. Alice wants to place all the boxes vertically in one or more stacks such that no box breaks. Alice considers the following conditions to ensure a box doesn\'t break: 1. The stack can only be formed by placing boxes one on top of the other. 2. The cumulative weight of all the boxes above the i-th box must not exceed the strength `s_i` of the i-th box. Help Alice determine the maximum number of boxes she can stack vertically without any box breaking. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of boxes. Each of the next n lines contains two integers `w_i` (1 ≤ w_i ≤ 10^9) and `s_i` (1 ≤ s_i ≤ 10^9) — the weight and strength of the i-th box. Output Print a single integer — the maximum number of boxes Alice can stack without any box breaking. Examples Input 4 3 4 2 5 1 6 4 5 Output 3 Input 3 1 1 1 1 1 1 Output 2 Note In the first example, one of the optimal stacking orders is to place the box with weight 1 and strength 6, then the box with weight 2 and strength 5, and finally the box with weight 3 and strength 4. The fourth box (weight 4, strength 5) cannot be placed without breaking one of the other boxes. In the second example, Alice can stack any two boxes out of the three.","solution":"def max_boxes(boxes): Determine the maximum number of boxes that can be stacked without breaking. Args: boxes (list of tuples): A list where each tuple contains the weight (w_i) and strength (s_i) of a box. Returns: int: The maximum number of boxes that can be stacked without any box breaking. # Sort boxes by (weight + strength) in ascending order boxes.sort(key=lambda x: x[0] + x[1]) n = len(boxes) max_stack = 0 total_weight = 0 for weight, strength in boxes: if total_weight <= strength: total_weight += weight max_stack += 1 else: break return max_stack"},{"question":"There is a garden with N rows and M columns. Each cell in the garden can either have a plant or be empty. Your task is to help the gardener determine the maximum number of flowers that can be planted in the garden. However, there is a constraint: no two flowers can be planted in adjacent cells. Two cells are considered adjacent if they share a side. Input The first line contains a single integer T denoting the number of test cases. T test cases follow. Each of the following T lines contains two space-separated integers N, M denoting the dimensions of the garden. Output For each test case, output a single line containing an integer corresponding to the maximum number of flowers that can be planted in the garden under the given constraint. Constraints 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1 000 Example Input: 2 2 3 3 3 Output: 3 5 Explanation For the first test case (2x3 garden), the maximum number of flowers that can be planted is 3: ``` F . F . F . ``` For the second test case (3x3 garden), the maximum number of flowers that can be planted is 5: ``` F . F . F . F . F ```","solution":"def max_flowers(T, dimensions): Calculates the maximum number of flowers that can be planted in each garden given the constraints. Args: T (int): Number of test cases. dimensions (list of tuple): Each tuple contains two integers N and M representing the number of rows and columns in the garden. Returns: list of int: List containing the maximum number of flowers for each garden. results = [] for N, M in dimensions: # The maximum number of flowers follows a checkerboard pattern max_flowers = (N * M + 1) // 2 results.append(max_flowers) return results"},{"question":"A group of friends is participating in a treasure hunt. The treasure map has multiple routes, each route consisting of several segments connecting waypoints (nodes). Each segment has a penalty associated with it, indicating how difficult it is to traverse that segment. The goal is to determine the minimum total penalty to travel from the starting waypoint to the destination waypoint. The map information will be provided in a series of test cases. You need to write a program to determine the minimum total penalty for each test case. Input The input consists of multiple test cases. Each test case starts with a line containing two integers: N (2 ≤ N ≤ 10000) and M (1 ≤ M ≤ 100000), representing the number of waypoints and the number of segments respectively. Each of the next M lines contains three integers: u, v, and p (1 ≤ u, v ≤ N, 1 ≤ p ≤ 10000), representing a segment between waypoint u and waypoint v with a penalty of p. The last line of each test case contains two integers: S and D (1 ≤ S, D ≤ N), representing the starting waypoint and the destination waypoint. The input ends with a single line containing a zero. Output For each test case, output a single integer representing the minimum total penalty to travel from the starting waypoint S to the destination waypoint D. If it is not possible to reach the destination, output \\"IMPOSSIBLE\\". Example Input 4 4 1 2 5 2 3 5 3 4 5 1 4 20 1 4 4 3 1 2 7 2 3 8 3 4 10 1 4 0 Output 15 25","solution":"import heapq def min_penalty(N, M, segments, S, D): graph = [[] for _ in range(N + 1)] for u, v, p in segments: graph[u].append((v, p)) graph[v].append((u, p)) dist = [float(\'inf\')] * (N + 1) dist[S] = 0 priority_queue = [(0, S)] while priority_queue: current_penalty, node = heapq.heappop(priority_queue) if node == D: return current_penalty if current_penalty > dist[node]: continue for neighbor, penalty in graph[node]: new_penalty = current_penalty + penalty if new_penalty < dist[neighbor]: dist[neighbor] = new_penalty heapq.heappush(priority_queue, (new_penalty, neighbor)) return \\"IMPOSSIBLE\\" if dist[D] == float(\'inf\') else dist[D] def process_treasure_hunt_input(input_data): input_lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(input_lines): line = input_lines[index] if line == \'0\': break N, M = map(int, line.split()) index += 1 segments = [] for _ in range(M): u, v, p = map(int, input_lines[index].split()) segments.append((u, v, p)) index += 1 S, D = map(int, input_lines[index].split()) index += 1 result = min_penalty(N, M, segments, S, D) results.append(result) return results"},{"question":"Write a program to help manage room bookings for a small hotel. The hotel has a certain number of rooms, and each room has its own unique number. Guests can book rooms by providing their check-in and check-out dates. The program needs to handle multiple booking requests and check if each booking request can be accommodated without resulting in any room being double-booked. Input: * The first line contains an integer n, which indicates the number of rooms in the hotel (1 ≤ n ≤ 1000). * The second line contains an integer m, which is the number of booking requests (1 ≤ m ≤ 1000). * Each of the next m lines describes a booking request with three space-separated values: the desired room number (an integer), the check-in date (an integer), and the check-out date (an integer). Both check-in and check-out dates are given as day numbers, and you can assume that the check-in date is strictly less than the check-out date. Output: For each booking request, print \\"BOOKED\\" if the room can be booked for the given dates without any conflict. If the room cannot be booked (because it overlaps with an existing booking), print \\"CONFLICT\\". Example: Input: 3 5 101 1 3 101 2 5 102 4 6 103 1 3 101 5 7 Output: BOOKED CONFLICT BOOKED BOOKED BOOKED Explanation: - The first booking request successfully books room 101 from day 1 to day 3. - The second booking request for room 101 conflicts with the first one (overlapping days 2 and 3). - The third booking request for room 102 is successful as there are no prior bookings. - The fourth booking request for room 103 is successful as there are no prior bookings. - The fifth booking request for room 101 is successful since it does not overlap with the first booking.","solution":"def manage_bookings(n, m, bookings): from collections import defaultdict room_bookings = defaultdict(list) results = [] for booking in bookings: room, check_in, check_out = booking conflict = False for interval in room_bookings[room]: if not (check_out <= interval[0] or check_in >= interval[1]): conflict = True break if conflict: results.append(\\"CONFLICT\\") else: room_bookings[room].append((check_in, check_out)) results.append(\\"BOOKED\\") return results"},{"question":"In a certain town, there are n intersections connected by m one-way roads. Each road has a specific length and can only be traversed in one direction. The town\'s mayor wants to place surveillance cameras at some intersections to monitor all roads directly. A camera at an intersection can monitor all incoming and outgoing roads of that intersection. Your task is to determine the minimum number of cameras required such that every road in the town is directly monitored by at least one camera. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of intersections and the number of one-way roads, respectively. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1000), indicating there is a one-way road of length l from intersection u to intersection v. Output Print the minimum number of cameras needed to monitor all roads in the town. Example Input 5 7 1 2 2 2 3 3 3 4 4 4 5 5 5 1 6 2 4 1 3 5 2 Output 2 Note In the example, cameras can be placed at intersections 3 and 5 to monitor all roads.","solution":"from collections import defaultdict, deque def minimum_cameras(n, m, edges): def kosaraju_dfs(graph, v, visited, stack): visited[v] = True for u in graph[v]: if not visited[u]: kosaraju_dfs(graph, u, visited, stack) stack.append(v) def kosaraju_dfs_reverse(graph, v, visited): visited[v] = True for u in graph[v]: if not visited[u]: kosaraju_dfs_reverse(graph, u, visited) # Step 1: Create the graph and reverse graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v, l in edges: graph[u].append(v) reverse_graph[v].append(u) # Step 2: Perform first DFS to fill order of vertices stack = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: kosaraju_dfs(graph, i, visited, stack) # Step 3: Perform DFS according to decreasing finishing times to find SCCs visited = [False] * (n + 1) num_scc = 0 while stack: v = stack.pop() if not visited[v]: kosaraju_dfs_reverse(reverse_graph, v, visited) num_scc += 1 # The number of SCCs found is the minimum number of cameras needed return num_scc"},{"question":"A certain research center has a circular corridor with n rooms, numbered from 1 to n in a clockwise manner. Each room has a unique door, and the researchers need to replace these doors due to security reasons. The doors are unique in size and can only be placed in specific rooms as indicated by the provided compatibility list. A compatibility list is given containing pairs of integers (a, b), indicating that the door from room a can be safely installed in room b. The task is to determine if it\'s possible to reassign all the doors such that each door is repositioned exactly once and ends up in a room that matches its compatibility. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of rooms and the number of compatibility pairs respectively. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n) representing a compatible reassignment. Output Print a single line \\"Yes\\" if it\'s possible to reassign all the doors as described, otherwise, print \\"No\\". Examples Input 3 3 1 2 2 3 3 1 Output Yes Input 4 2 1 2 3 4 Output No","solution":"def can_reassign_doors(n, m, pairs): from collections import defaultdict, deque if m < n: return \\"No\\" graph = defaultdict(list) reverse_graph = defaultdict(list) for a, b in pairs: graph[a].append(b) reverse_graph[b].append(a) def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited for i in range(1, n + 1): if len(bfs(i, graph)) < n: return \\"No\\" if len(bfs(i, reverse_graph)) < n: return \\"No\\" return \\"Yes\\""},{"question":"In a small town, there is a popular game played by the children where they form the longest possible line by holding hands. Each child in the town has a height, and they like to form the line such that the heights are in non-decreasing order from left to right. In other words, once a child of a certain height is in the line, any child of a greater height can join the line to his right, but not on his left. However, due to the town\'s layout, sometimes not all children can join the line. Your task is to determine the length of the longest subsequence of children standing in a line such that their heights are non-decreasing. Input The first line of the input contains the single integer n (1 ≤ n ≤ 1000) — the number of children in the town. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the children. Output Print the length of the longest subsequence of children such that their heights are non-decreasing. Examples Input 6 7 1 4 8 2 3 Output 3 Input 5 5 3 4 8 6 Output 3 Input 8 1 2 3 4 5 6 7 8 Output 8 Input 10 10 20 10 30 20 50 40 60 80 70 Output 6 Note In the first example, the longest subsequence of children with non-decreasing heights is [1, 4, 8]. In the second example, the longest subsequence of children with non-decreasing heights is [3, 4, 8]. In the third example, all children can be part of the line as their heights are already in non-decreasing order.","solution":"def longest_non_decreasing_subsequence(n, heights): Finds the length of the longest subsequence of non-decreasing heights. Args: n (int): Number of children. heights (list of int): Heights of the children. Returns: int: Length of the longest non-decreasing subsequence. if n == 0: return 0 dp = [1] * n # Initialize dp array with all 1s for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of integers representing the arrival times of guests at a party. Each integer denotes the time in minutes from 0 to 1000 when a guest arrives. The host wants to know the maximum number of guests present at any given time if each guest stays for exactly 60 minutes from their arrival time. Write a program to determine the maximum number of guests present at the party at any given time. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of guests. The second line contains n space-separated integers, where each integer represents the arrival time of a guest in minutes. Output Print a single integer, the maximum number of guests present at any given time. Examples Input 5 10 20 30 40 50 Output 5 Input 6 5 15 25 35 45 55 Output 6","solution":"def max_guests(arrivals): Determines the maximum number of guests present at any given time. Args: arrivals: List of integers representing arrival times of guests. Returns: An integer representing the maximum number of guests present at any given time. events = [] for arrival in arrivals: events.append((arrival, 1)) # guest arrives events.append((arrival + 60, -1)) # guest departs after 60 minutes events.sort() current_guests = 0 max_guests = 0 for event in events: current_guests += event[1] if current_guests > max_guests: max_guests = current_guests return max_guests"},{"question":"problem Consider the game Tic Tac Toe played on an infinite grid. Players take turns placing their mark (\'X\' or \'O\') on the grid. The game ends when one player places K of their marks in a row, either horizontally, vertically, or diagonally. Write a function to determine if a player has won the game after a given move. Function Signature: ```python def tic_tac_toe_winner(moves: List[Tuple[int, int, str]], K: int) -> str: ``` # Input - `moves`: A list of tuples where each tuple represents a move. The tuple contains the row and column indices of the move and the player\'s mark (\'X\' or \'O\'). - `K`: An integer representing the number of consecutive marks needed to win. # Output - Return \'X\' if player \'X\' wins, \'O\' if player \'O\' wins, and \'None\' if there is no winner after all the moves. # Example Input ```python moves = [(0, 0, \'X\'), (1, 1, \'O\'), (0, 1, \'X\'), (1, 2, \'O\'), (0, 2, \'X\')] K = 3 ``` Output ```python \'X\' ``` Input ```python moves = [(0, 0, \'X\'), (1, 1, \'O\'), (0, 1, \'X\'), (1, 2, \'O\'), (1, 0, \'X\'), (2, 0, \'O\')] K = 3 ``` Output ```python \'O\' ``` Input ```python moves = [(0, 0, \'X\'), (1, 1, \'O\'), (0, 1, \'X\'), (1, 2, \'O\\")] K = 3 ``` Output ```python \'None\' ``` # Note - The grid is infinite, so the coordinates of moves can be any integer. - Ensure your solution is efficient in terms of time and space complexity.","solution":"from typing import List, Tuple def tic_tac_toe_winner(moves: List[Tuple[int, int, str]], K: int) -> str: def check_direction(start, direction, mark): consecutive = 0 x, y = start dx, dy = direction while (x, y) in moves_dict and moves_dict[(x, y)] == mark: consecutive += 1 if consecutive == K: return True x += dx y += dy return False moves_dict = {} for move in moves: moves_dict[(move[0], move[1])] = move[2] directions = [(1, 0), (0, 1), (1, 1), (1, -1)] for move in moves: x, y, mark = move for direction in directions: opposite_direction = (-direction[0], -direction[1]) if check_direction((x, y), direction, mark) or check_direction((x, y), opposite_direction, mark): return mark return \\"None\\""},{"question":"Hermione Granger and Ron Weasley are in a competition to solve a special type of sequence problem. Professor McGonagall has given them a task to test their understanding of number sequences and prime numbers. The task is as follows: You need to define a sequence P as follows: P(0) = 2 P(1) = 3 For each n > 1, P(n) = smallest prime number greater than P(n-1). Now, define a function Q(x) as the sum of the first x elements of the sequence P (from P(0) to P(x-1)). Write a program to assist Hermione in solving this challenge. INPUT FORMAT: The first line contains an integer T (1 ≤ T ≤ 10^5), the number of test cases. The following T lines each contain a positive integer N (1 ≤ N ≤ 10^5). OUTPUT FORMAT: For each test case, output the value of Q(N). SAMPLE INPUT: 5 1 2 3 4 5 SAMPLE OUTPUT: 2 5 10 17 28 Explanation: For N=1, Q(1) = P(0) = 2 For N=2, Q(2) = P(0) + P(1) = 2 + 3 = 5 For N=3, Q(3) = P(0) + P(1) + P(2) = 2 + 3 + 5 = 10 For N=4, Q(4) = P(0) + P(1) + P(2) + P(3) = 2 + 3 + 5 + 7 = 17 For N=5, Q(5) = P(0) + P(1) + P(2) + P(3) + P(4) = 2 + 3 + 5 + 7 + 11 = 28","solution":"import itertools def generate_primes(): Generate an infinite sequence of prime numbers. # Sieve of Eratosthenes implementation D = {} q = 2 while True: if q not in D: yield q D[q * q] = [q] else: for p in D[q]: D.setdefault(p + q, []).append(p) del D[q] q += 1 def Q(x, primes_cache, sums_cache): Return the sum of the first x elements of the prime sequence P. if x == 0: return 0 if x <= len(sums_cache): return sums_cache[x - 1] else: for _ in range(len(primes_cache), x): next_prime = next(primes_generator) primes_cache.append(next_prime) if sums_cache: sums_cache.append(sums_cache[-1] + next_prime) else: sums_cache.append(next_prime) return sums_cache[x - 1] # Pre-generate primes primes_generator = generate_primes() primes_cache = [next(primes_generator)] # Start with the first prime sums_cache = [primes_cache[0]] def process_queries(queries): results = [] for n in queries: results.append(Q(n, primes_cache, sums_cache)) return results"},{"question":"Problem You are given an array of n positive integers, representing the heights of buildings in a cityscape. Your task is to find the total amount of rainwater that can be trapped between the buildings after it rains. The cityscape can be visualized using an array where each element represents the height of a building. Rainwater is trapped in the gaps between the buildings if there are taller buildings on both sides. Constraints * 1 ≤ n ≤ 105 * 1 ≤ height of each building ≤ 104 Input The input is given in the following format: n h1 h2 h3 ... hn An integer n is given on the first line, representing the number of buildings. On the second line, n integers h1, h2, ..., hn are given, representing the height of each building in the array. Output Output the total amount of rainwater trapped between the buildings on one line. Examples Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 5 4 2 0 3 2 5 Output 9 Input 3 0 1 0 Output 0","solution":"def trap_rainwater(heights): Given an array of non-negative integers representing the heights of buildings, calculate the total amount of rainwater that can be trapped between the buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water"},{"question":"You are given a string of characters that represent an encoded message. The encoding mechanism works by shifting each character in the message a certain number of places down the Unicode table. We call this the \\"shift value.\\" For example, if the shift value is 2, \'a\' becomes \'c\', \'b\' becomes \'d\', and \'z\' would wrap around to \'b\'. Non-alphabet characters remain unchanged in the message. Your task is to write a program that can both encode and decode such messages given an encoding string and a shift value. The program should handle multiple lines of input and differentiate between encoding and decoding based on the directive at the beginning of each line. # Input Each line of input begins with either the keyword `ENCODE` or `DECODE`, followed by an integer shift value, and then the string to be processed. The end of input is identified with a line containing a single word `END`. # Output For each input line (excluding the `END` line), output the processed string according to whether it is to be encoded or decoded. # Constraints - The shift value can be negative or positive. - The string will contain only printable ASCII characters. - The shift operation should work cyclically (i.e., shifting \'z\' by 1 should result in \'a\') for alphabetic characters. - Non-alphabetic characters should remain unchanged. # Example Input: ``` ENCODE 2 Hello, World! DECODE 2 Jgnnq, Yqtnf! ENCODE -2 Jgnnq, Yqtnf! DECODE -2 Hello, World! END ``` Output: ``` Jgnnq, Yqtnf! Hello, World! Hello, World! Jgnnq, Yqtnf! ``` # Notes - Ensure that the encoding and decoding handle both upper and lowercase letters appropriately. - Pay attention to the cyclic nature of the alphabet in both encoding and decoding processes. Implement this to create or decode given messages based on the specified rules.","solution":"def shift_char(c, shift): if c.isalpha(): base = ord(\'a\') if c.islower() else ord(\'A\') return chr((ord(c) - base + shift) % 26 + base) return c def process_message(directive, shift_value, message): if directive == \\"DECODE\\": shift_value = -shift_value return \'\'.join(shift_char(c, shift_value) for c in message) def process_input(lines): results = [] for line in lines: if line == \\"END\\": break parts = line.split(maxsplit=2) directive, shift_value, message = parts[0], int(parts[1]), parts[2] results.append(process_message(directive, shift_value, message)) return results"},{"question":"Tom is a highly efficient warehouse robot that organizes packages on a grid. The grid is represented as an `n x n` matrix, where each cell can either be empty or contain a package. Tom can choose any package and move it to any empty cell. Your task is to help Tom arrange all the packages such that there is exactly one package in each row and one package in each column, turning the grid into a format where each row and column has no more than one package. Write a function `arrange_packages(n: int, grid: List[List[int]]) -> List[List[int]]` that takes an integer `n` representing the size of the grid and an `n x n` grid containing values `0` (representing empty cells) and `1` (representing packages). The function should return a rearranged grid satisfying the condition that there is exactly one package in each row and one package in each column. If rearranging the grid is not possible, return an empty list. # Input: - `n` (2 ≤ n ≤ 10) - `grid` (a list of lists containing `0` and `1`) # Output: - A list of lists representing the rearranged grid, or an empty list if no valid arrangement exists. # Example: **Input:** ```python n = 3 grid = [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] ``` **Output:** ```python [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] ``` **Input:** ```python n = 3 grid = [ [1, 0, 0], [1, 0, 0], [0, 0, 1] ] ``` **Output:** ```python [] ``` # Note: In the first example, the input grid is already arranged such that each row and column contains exactly one package, so the output is the same as the input. In the second example, there is no way to rearrange the packages to meet the requirement, so the output is an empty list.","solution":"from typing import List def arrange_packages(n: int, grid: List[List[int]]) -> List[List[int]]: from itertools import permutations def is_valid(arrangement): rows_with_one = all(sum(arrangement[i]) == 1 for i in range(n)) cols_with_one = all(sum(arrangement[i][j] for i in range(n)) == 1 for j in range(n)) return rows_with_one and cols_with_one for perm in permutations(range(n)): new_grid = [[0] * n for _ in range(n)] valid = True for i in range(n): column = perm[i] if grid[i][column] == 0: valid = False break new_grid[i][column] = 1 if valid and is_valid(new_grid): return new_grid return []"},{"question":"Homer loves watching birds. Recently, he noticed that the birds in his garden form a unique pattern in their flight paths. Each bird flies in a straight line, described by a pair of values representing its slope and y-intercept. However, Homer has become interested in knowing which birds\' paths intersect with a special path that a bird used once. This special path is also given as a slope and y-intercept. A bird\'s path will intersect with the special path if their slopes are different (not parallel). If their slopes are identical, they either overlap completely or never intersect (parallel). Given the description of multiple birds\' paths and the special path, determine which birds will have their paths intersecting with the special path. Input The first line contains an integer t (1 ≤ t ≤ 10^3) — the number of test cases. Description of the test cases follows. The first line of each test case contains two integers s and c (0 ≤ s, c ≤ 10^6) — the slope and y-intercept of the special path. The second line of each test case contains an integer n (1 ≤ n ≤ 10^3) — the number of birds. The next n lines each contain two integers s_i and c_i (0 ≤ s_i, c_i ≤ 10^6) — the slope and y-intercept of the i-th bird\'s path. Output For each test case, output \\"INTERSECT\\" if the i-th bird\'s path intersects with the special path, otherwise output \\"NO INTERSECT\\". Example Input 3 2 3 3 1 1 2 5 3 3 0 0 2 0 1 1 1 1 1 4 2 2 2 2 1 0 1 1 Output INTERSECT NO INTERSECT INTERSECT INTERSECT INTERSECT NO INTERSECT NO INTERSECT","solution":"def determine_intersections(t, test_cases): results = [] for i in range(t): s, c = test_cases[i][\'special_path\'] bird_paths = test_cases[i][\'bird_paths\'] result = [] for path in bird_paths: s_i, c_i = path if s_i != s: result.append(\\"INTERSECT\\") else: result.append(\\"NO INTERSECT\\") results.append(result) return results"},{"question":"You are given a matrix with n rows and m columns containing only 0s and 1s. A subrectangle of this matrix is any contiguous subgrid with all values being 1. The task is to find the area of the largest subrectangle in the matrix containing only 1s. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the matrix respectively. Each of the next n lines contains m integers (either 0 or 1) describing the matrix. Output Print a single integer — the area of the largest subrectangle in the matrix containing only 1s. Examples Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Input 3 3 0 0 0 0 0 0 0 0 0 Output 0","solution":"def max_rectangle_area(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * (m + 1) max_area = 0 for row in matrix: for i in range(m): if row[i] == 1: heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(m + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def largest_subrectangle_area(n, m, matrix): return max_rectangle_area(matrix)"},{"question":"Write a program which reads a sequence of integers and outputs the sum of all unique integers in the sequence. Constraints * Each integer in the input sequence is between -1000 and 1000. * The input ends with a line containing a single number -9999 which should not be included in the sum. This number is not a part of the sequence. * The sequence contains at most 1000 integers. Input The input consists of a sequence of integers, one per line. The sequence ends with the line containing the number -9999. Output Print the sum of all unique integers in the sequence. Example Input 5 3 5 3 7 8 -2 7 -9999 Output 21","solution":"def sum_unique_integers(sequence): Returns the sum of all unique integers in the sequence, excluding the termination integer -9999. unique_integers = set() for num in sequence: if num == -9999: break unique_integers.add(num) return sum(unique_integers)"},{"question":"Given an integer matrix grid where each 1 represents a land block and 0 represents a water block, and grid is representing an entire map. Your task is to determine the number of islands in the map. An island is horizontally or vertically connected land blocks surrounded by water blocks. You can assume that all four edges of the grid are surrounded by water. Write a function `numIslands(grid: List[List[int]]) -> int` that takes a 2D integer array grid as input, and returns the number of islands. # Input - A list of lists of integers `grid` representing the map where: * `1` represents a block of land. * `0` represents a block of water. # Output - Return an integer that represents the number of islands. # Example Input ```python grid = [ [1,1,1,1,0], [1,1,0,1,0], [1,1,0,0,0], [0,0,0,0,0] ] ``` Output ```python 1 ``` Input ```python grid = [ [1,0,0,1,0], [1,0,0,1,0], [0,0,0,0,1], [0,0,0,0,1] ] ``` Output ```python 3 ``` # Note In the first example, all the land blocks are connected vertically and horizontally to form one single island. In the second example, there are three separate islands: - Cell (0,0) connected to cell (1,0) - Cell (0,3) connected to cell (1,3) - Cells (2,4) and (3,4) forming one island.","solution":"from typing import List def numIslands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return grid[i][j] = 0 # Mark as visited dfs(grid, i + 1, j) # Down dfs(grid, i - 1, j) # Up dfs(grid, i, j + 1) # Right dfs(grid, i, j - 1) # Left count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: count += 1 dfs(grid, i, j) return count"},{"question":"Mark is working on a new project that involves processing large strings of text data. He needs to find the longest substring within a string that consists of the same character repeated. For example, in the string \\"aaabbccddaaa\\", the longest substring of repeated characters is \\"aaa\\" having a length of 3. Mark wants your help to automate this task. Input The first line contains T, the number of test cases. Each test case consists of one line containing the string S, which may contain uppercase and lowercase letters. Output For each test case, output the length of the longest substring consisting of repeated characters. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 3 aabbbccde abcde xxxxyyyyyzzzzzz SAMPLE OUTPUT 3 1 6 Explanation In the 1st test case, \\"bbb\\" is the longest substring with repeated characters, having a length of 3. In the 2nd test case, there are no consecutive characters repeated, so the longest substring with repeated characters has length 1. In the 3rd test case, \\"zzzzzz\\" is the longest substring with repeated characters, having a length of 6.","solution":"def longest_repeated_substring_length(S): Returns the length of the longest substring of repeated characters in S. if not S: return 0 max_length = 1 current_length = 1 for i in range(1, len(S)): if S[i] == S[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length) def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(longest_repeated_substring_length(case)) return results"},{"question":"You are given a matrix of integers with N rows and M columns. Let\'s define the maximum sum of any submatrix as follows: * A submatrix is formed by choosing two indices (r1, c1) and (r2, c2) such that 1 ≤ r1 ≤ r2 ≤ N and 1 ≤ c1 ≤ c2 ≤ M, and includes all elements of the matrix from the row r1 to r2 and column c1 to c2 inclusive. * The sum of the elements of this submatrix is the sum of its component elements. Your task is to find the maximum sum of any submatrix within the given matrix. Constraints * 1 ≤ N, M ≤ 300 * Each element of the matrix is an integer that fits in a 32-bit signed integer. Input Input is given from Standard Input in the following format: N M matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] . . . matrix[N][1] matrix[N][2] ... matrix[N][M] Output Print the maximum sum of any submatrix. Examples Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output 29 Input 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 Output -1 Input 2 2 1 2 2 1 Output 6","solution":"def max_sum_submatrix(matrix): Finds the maximum sum of any submatrix within the given matrix. Args: matrix (List[List[int]]): A 2D list of integers representing the matrix. Returns: int: The maximum sum of any submatrix. N = len(matrix) M = len(matrix[0]) # Precompute prefix sums for the matrix prefix_sums = [[0] * (M + 1) for _ in range(N + 1)] for r in range(1, N + 1): for c in range(1, M + 1): prefix_sums[r][c] = matrix[r-1][c-1] + prefix_sums[r-1][c] + prefix_sums[r][c-1] - prefix_sums[r-1][c-1] max_sum = float(\'-inf\') # Find the maximum sum submatrix for r1 in range(1, N + 1): for r2 in range(r1, N + 1): for c1 in range(1, M + 1): for c2 in range(c1, M + 1): current_sum = prefix_sums[r2][c2] - prefix_sums[r1-1][c2] - prefix_sums[r2][c1-1] + prefix_sums[r1-1][c1-1] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"The local theater company is hosting an event where they hand out a random gift to each attendee. Each gift has a different ranking value based on its popularity. You are given an array of integers where each integer represents the ranking value of a particular gift. The guests are particularly interested in finding out the k-th smallest ranking value from the given list of gifts. Your task is to write a program that calculates the k-th smallest ranking value from the given list of gifts for multiple queries. Input Format The first line contains a single integer q, denoting the number of queries. Each of the next q lines contains two integers: n (the number of gifts in the list) and k (the position of the smallest ranking value to fetch), followed by n integers representing the ranking values of the gifts. Output Format For each query, output a single integer which is the k-th smallest ranking value in the list of gifts. Example Input: 3 5 2 10 20 15 25 5 4 1 7 9 3 4 6 3 10 7 5 3 9 1 Output: 10 3 5","solution":"def kth_smallest_queries(queries): results = [] for query in queries: n, k, *gifts = query gifts.sort() results.append(gifts[k-1]) return results def process_input(input_string): lines = input_string.strip().split(\'n\') q = int(lines[0]) queries = [list(map(int, line.split())) for line in lines[1:1+q]] return queries"},{"question":"Your task is to help locate a bug in a company\'s software system. The system maintains log records of various operations. Each log record contains the timestamp of when the operation occurred and a unique operation identifier. The company suspects that the system log might contain duplicate operations, i.e., operations with the same identifier performed at the exact same timestamp, which should not happen. Write a function that takes a list of log records and checks if there are any duplicates. Each log record is represented as a tuple of two values: a string timestamp in the format \'YYYY-MM-DD HH:MM:SS\' and an integer operation identifier. The function should return True if any duplicates are found and False otherwise. # Input - A list of tuples where each tuple contains: - A string `timestamp` following the format \'YYYY-MM-DD HH:MM:SS\', representing the time when the operation occurred. - An integer `operation_id`, a unique identifier for the operation. # Output - Return a boolean value: - `True` if there are any duplicate log records. - `False` otherwise. # Example Example 1: **Input:** ```python logs = [(\\"2023-01-01 12:00:00\\", 1001), (\\"2023-01-01 12:00:00\\", 1002), (\\"2023-01-01 12:00:00\\", 1001)] ``` **Output:** ```python True ``` **Explanation:** The first and third log records are duplicates as they have the same timestamp and operation identifier. Example 2: **Input:** ```python logs = [(\\"2023-01-01 12:00:00\\", 1001), (\\"2023-01-01 12:01:00\\", 1001), (\\"2023-01-01 12:00:00\\", 1002)] ``` **Output:** ```python False ``` **Explanation:** There are no duplicate log records. # Note - The timestamps are guaranteed to be valid date-time strings in the specified format. - The list of log records can be empty. # Constraints: - The length of the list will not exceed 10^5. - The length of the string `timestamp` will always be 19 characters. - The `operation_id` is an integer within the range [1, 10^9].","solution":"def check_for_duplicate_logs(logs): Checks for duplicate log records within the provided list of logs. :param logs: List of tuples, where each tuple contains: - a string `timestamp` in the format \'YYYY-MM-DD HH:MM:SS\' - an integer `operation_id` :return: Boolean value. - True if there are any duplicates log records. - False otherwise. seen_records = set() for log in logs: if log in seen_records: return True seen_records.add(log) return False"},{"question":"You are given a sentence containing words separated by spaces. Some of these words may be repeated. Your task is to output the words in the same order as they appear in the input but without any duplicates. Input The input consists of a single line containing a sentence of up to 1000 words. Each word consists of lowercase English letters and has a length of at most 20 characters. Output Output the words in the sentence in the same order they first appear but removing any duplicates. Example Input this is a test this is only a test Output this is a test only Input hello world hello programming world Output hello world programming","solution":"def remove_duplicates(sentence): Returns the sentence with duplicate words removed, maintaining the original order. words = sentence.split() seen = set() result = [] for word in words: if word not in seen: seen.add(word) result.append(word) return \' \'.join(result)"},{"question":"Given an integer array nums and an integer k, your task is to determine if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Write a function `containsNearbyDuplicate` that takes in the following parameters: - `nums` (an array of integers) - `k` (an integer) The function should return a boolean value: `True` if such elements exist and `False` otherwise. # Input - The first line of the input contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^5), denoting the length of the array and the integer k, respectively. - The second line contains n integers representing the elements of the array nums. # Output - The function should output a single line containing \\"True\\" or \\"False\\" based on whether such a pair of indices exists. # Examples Input ``` 6 2 1 2 3 1 2 3 ``` Output ``` False ``` Input ``` 6 3 1 2 3 1 2 3 ``` Output ``` True ``` Explanation In the first example, no pair of duplicate elements has their indices within a difference of 2. In the second example, the element `1` at indices 0 and 3 satisfies the condition, as the difference between indices is 3, which is within the allowed range.","solution":"def containsNearbyDuplicate(nums, k): Determine if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. :param nums: List[int] - The array of integers. :param k: int - The maximum allowed index difference. :return: bool - True if such elements exist, False otherwise. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Pangram Checker A pangram is a sentence that contains every letter of the alphabet at least once. You need to write a function that determines if the given sentence is a pangram or not. Input The first line will contain the number of test cases T, which will be no more than 20. Each of the following T lines will contain a sentence made up of lowercase English letters and spaces only. The length of each sentence will not be more than 100 characters. Output For each test case, output “pangram” if the sentence is a pangram, otherwise output “not pangram”. Example Input: 3 the quick brown fox jumps over a lazy dog hello world pack my box with five dozen liquor jugs Output: pangram not pangram pangram","solution":"def is_pangram(sentence): Determines if the given sentence is a pangram. Arguments: sentence -- a string containing the sentence Returns: \\"pangram\\" if the sentence is a pangram, otherwise \\"not pangram\\" # Create a set of all lowercase English letters alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') # Create a set of all characters in the sentence, ignoring spaces sentence_set = set(sentence.replace(\\" \\", \\"\\")) # Check if the sentence contains all letters in the alphabet return \\"pangram\\" if alphabet_set.issubset(sentence_set) else \\"not pangram\\" def check_pangrams(test_cases): Processes multiple test cases and returns the results. Arguments: test_cases -- a list of sentences to be checked Returns: A list where each element is \\"pangram\\" or \\"not pangram\\" corresponding to each sentence in test_cases return [is_pangram(sentence) for sentence in test_cases]"},{"question":"Several bacteria are placed in a petri dish and incubated. Each bacterium exhibits growth as follows: Each bacterium doubles itself every minute. After exactly K minutes, each bacterium stops doubling itself and dies immediately. Given the initial number of bacteria `N` and the duration of minutes `K`, write a program to determine the total number of bacteria present in the petri dish just before they die. Constraints: * 1 ≤ N ≤ 1000 * 0 ≤ K ≤ 20 * N and K are integers. Input: The input is given from Standard Input in the following format: N K Output: Print the total number of bacteria just before they die. Examples: Input: 3 2 Output: 12 Input: 1 0 Output: 1 Input: 5 3 Output: 40 Input: 2 4 Output: 32","solution":"def total_bacteria_before_death(N, K): Returns the total number of bacteria just before they die. N: Initial number of bacteria (1 ≤ N ≤ 1000). K: Number of minutes they double themselves (0 ≤ K ≤ 20). return N * (2 ** K) # Example usage: # N = 3, K = 2 # 3 bacteria double every minute for 2 minutes. # After 1 minute -> 3 * 2 = 6 # After 2 minutes -> 6 * 2 = 12 # Result: 12 print(total_bacteria_before_death(3, 2)) # should output 12"},{"question":"Sarah is planning a special dinner party and decides to prepare a large punch bowl for the occasion. She arranges the glasses in a rectangular grid pattern on the table to allow each guest to easily access the punch. The grid has dimensions m × n, where m is the number of rows and n is the number of columns of glasses. Sarah starts pouring punch into the glass located at the top-left corner (1, 1). Each second, Sarah pours the amount of punch equal to the size of one glass into the currently-selected glass. If the glass is already full but receives more punch, the excess punch flows to the next glass in the same row. If the glass is at the end of the row, the excess punch spills into the first glass of the next row. If the glass overflowing is at the bottom row and the end of the grid, the excess punch is lost. Write a program to determine the number of completely full glasses after t seconds. Input The only line of the input contains three integers m, n, and t (1 ≤ m, n ≤ 10, 0 ≤ t ≤ 10,000) — the number of rows and columns of the grid and the number of seconds Sarah will be pouring punch. Output Print the single integer — the number of completely full glasses after t seconds. Examples Input 2 3 6 Output 6 Input 3 4 10 Output 10 Note In the first example, the glasses full after 6 seconds are all the glasses in the grid because the grid is only 2 rows by 3 columns, making a total of 6 glasses. In the second example, the glasses full after 10 seconds are all the glasses in the first two rows and the first two glasses of the third row, making a total of 10 glasses.","solution":"def count_full_glasses(m, n, t): Returns the number of completely full glasses after `t` seconds in an `m` x `n` grid. Args: - m (int): The number of rows in the grid. - n (int): The number of columns in the grid. - t (int): The number of seconds Sarah will be pouring punch. Returns: - int: The number of completely full glasses. total_glasses = m * n return min(total_glasses, t)"},{"question":"You have been given a list of integers representing the scores of participants in a contest. Each score is a positive integer. The contest follows a peculiar rule where the winners are determined not just by the highest scores, but by the frequency of occurrence of those scores. The winner(s) are the ones whose score appears the most number of times in the list. If there is a tie for the most frequent score, all tied scores are considered winners. Write a program that identifies the score(s) that have the highest frequency in the list. In case of multiple scores with the same highest frequency, return them in ascending numerical order. Input - The first line contains an integer n (1 ≤ n ≤ 100), which represents the number of scores. - The second line contains n positive integers separated by spaces. Output Print the score(s) with the highest frequency. If there are multiple such scores, print them all in a single line, sorted in ascending order, separated by spaces. Examples **Input** ``` 6 3 3 1 2 2 3 ``` **Output** ``` 3 ``` **Input** ``` 8 4 1 2 2 4 3 4 2 ``` **Output** ``` 2 4 ``` **Input** ``` 5 5 5 5 1 1 ``` **Output** ``` 5 ``` **Note** In the first sample, `3` appears the most number of times (3 times). In the second sample, both `2` and `4` appear 3 times each, hence both are winners and are printed in ascending order. In the third sample, `5` appears the most number of times (3 times).","solution":"def find_frequent_scores(scores): Returns the score(s) with the highest frequency in ascending order. If multiple scores have the same highest frequency, returns them all in ascending numerical order. from collections import Counter # Count the frequency of each score score_counter = Counter(scores) # Find the highest frequency max_frequency = max(score_counter.values()) # Find all scores with the highest frequency most_frequent_scores = [score for score, count in score_counter.items() if count == max_frequency] # Sort the scores in ascending order most_frequent_scores.sort() return most_frequent_scores"},{"question":"You are given an array of N integers. Each integer can be one of the following values: 0, 1, or 2. Your task is to sort this array in non-decreasing order in-place, without using any extra space for another array. Constraints * 1 leq N leq 2 times 10^5 Input Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` Output Print the sorted array in a single line with each element separated by a space. Examples Input ``` 5 2 0 1 1 2 ``` Output ``` 0 1 1 2 2 ``` Input ``` 7 2 2 0 1 0 1 1 ``` Output ``` 0 0 1 1 1 2 2 ```","solution":"def sort_array(arr): Sorts an array containing only 0s, 1s, and 2s in-place. low = 0 mid = 0 high = len(arr) - 1 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: # arr[mid] == 2 arr[high], arr[mid] = arr[mid], arr[high] high -= 1 return arr"},{"question":"# Vacation Planner You are planning a vacation for the next D days and want to balance your activities to maximize your enjoyment. Each activity requires a certain amount of energy and provides a certain amount of enjoyment. You also need to have meals which require daily costs. Problem You will be given data on X types of activities and Y types of meals. Each activity has an energy cost and provides a certain amount of enjoyment. Each meal has a daily cost and provides a certain amount of energy. You need to select exactly A activities each day and choose up to B meals each day such that your total energy does not exceed your daily available energy and the total cost is within your budget. Additionally, the energy and enjoyment are reset at the end of each day, but the budget does not reset. Find the maximum total enjoyment you can achieve in D days within the given budget. If you cannot select exactly A activities a day, output -1. Input The input consists of the following format: E X Y A B D BUD f_1 j_1 ... f_X j_X d_1 c_1 ... d_Y c_Y The first line consists of 7 integers, each representing: - Initial energy E, - Number of activity types X, - Number of meal types Y, - Number of activities to select daily A, - Maximum number of meals to select daily B, - Number of days D, - Total budget BUD. The following X lines provide details of each activity, where: - The i-th line consists of two integers, energy cost `f_i` and enjoyment `j_i`. The subsequent Y lines provide details of each meal, where: - The j-th line consists of two integers, energy provided `d_j` and cost `c_j`. Constraints * 1 ≤ E ≤ 100 * 1 ≤ X, Y ≤ 100 * 1 ≤ A, B ≤ 100 * 1 ≤ D ≤ 100 * 1 ≤ f_i, j_i, d_j, c_j ≤ 100 * 1 ≤ BUD ≤ 10,000 Output Output the maximum enjoyment value obtained in D days on one line. However, if there are days when you can\'t select exactly A activities, output -1. Ensure to end your output with a new line. Sample Input 1 ``` 10 2 2 1 1 3 30 5 10 8 20 4 5 6 5 ``` Sample Output 1 ``` 60 ``` Explanation: Day 1: Select activity 1 (5 energy, 10 enjoyment) and meal 1 (4 energy, 5 cost). Day 2: Select activity 1 (5 energy, 10 enjoyment) and meal 1 (4 energy, 5 cost). Day 3: Select activity 1 (5 energy, 10 enjoyment) and meal 1 (4 energy, 5 cost). Total enjoyment: 10+10+10 = 30 with the energy balance met and total cost of 15 within the budget. Sample Input 2 ``` 15 3 3 2 2 2 20 7 10 6 8 4 5 10 5 8 3 5 2 ``` Sample Output 2 ``` 28 ``` Explanation: Day 1: Select activity 1 and 2 (13 energy, 18 enjoyment) and meals 2 and 3 (13 energy, 5 cost). Day 2: Select activity 1 and 2 (13 energy, 18 enjoyment) and meals 2 and 3 (13 energy, 5 cost). Total enjoyment: 18+18 = 36 with energy balance and total cost of 10 within the budget. Sample Input 3 ``` 10 2 1 1 1 1 10 12 15 5 7 ``` Sample Output 3 ``` -1 ``` Explanation: The single activity available requires 12 energy, which exceeds the starting energy of 10, so it is not possible to perform the required number of activities on any day, hence -1.","solution":"from itertools import combinations def max_total_enjoyment(E, X, Y, A, B, D, BUD, activities, meals): activities = [(f, j) for f, j in activities] meals = [(d, c) for d, c in meals] if A > X: return -1 max_enjoyment = 0 # Generate all possible combinations of A activities activity_combinations = list(combinations(activities, A)) for activity_comb in activity_combinations: energy_cost_total = sum(f for f, _ in activity_comb) enjoyment_total = sum(j for _, j in activity_comb) if energy_cost_total > E: continue # Generate all possible combinations of up to B meals for b in range(B+1): meal_combinations = list(combinations(meals, b)) for meal_comb in meal_combinations: meal_energy_total = sum(d for d, _ in meal_comb) meal_cost_total = sum(c for _, c in meal_comb) if energy_cost_total <= E + meal_energy_total and BUD >= meal_cost_total: budget_used = meal_cost_total * D if budget_used <= BUD: max_enjoyment = max(max_enjoyment, enjoyment_total * D) return max_enjoyment if max_enjoyment > 0 else -1 # Sample Inputs sample_input_1 = (10, 2, 2, 1, 1, 3, 30, [(5, 10), (8, 20)], [(4, 5), (6, 5)]) sample_input_2 = (15, 3, 3, 2, 2, 2, 20, [(7, 10), (6, 8), (4, 5)], [(10, 5), (8, 3), (5, 2)]) sample_input_3 = (10, 2, 1, 1, 1, 1, 10, [(12, 15)], [(5, 7)]) # Sample Outputs print(max_total_enjoyment(*sample_input_1)) # 60 print(max_total_enjoyment(*sample_input_2)) # 36 print(max_total_enjoyment(*sample_input_3)) # -1"},{"question":"You are given two arrays of integers nums1 and nums2, each of length n. Find the length of the longest contiguous subarray that appears in both arrays. For example, if nums1 = [1, 2, 3, 2, 1] and nums2 = [3, 2, 1, 4, 7], then the longest contiguous subarray that appears in both arrays is [3, 2, 1], which has length 3. Write a program to find the length of the longest contiguous subarray that appears in both arrays. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the two arrays. The second line contains the array nums1 of length n, where each element is an integer (1 ≤ nums1[i] ≤ 100). The third line contains the array nums2 of length n, where each element is an integer (1 ≤ nums2[i] ≤ 100). Output Print the length of the longest contiguous subarray that appears in both arrays. Examples Input 5 1 2 3 2 1 3 2 1 4 7 Output 3 Input 3 0 1 1 1 1 0 Output 2 Input 4 0 1 2 3 5 6 7 8 Output 0 Note In the first example, the longest contiguous subarray that appears in both arrays is [3, 2, 1], which has length 3. In the second example, the longest contiguous subarray that appears in both arrays is either [1, 1], which has length 2.","solution":"def find_length_of_longest_subarray(nums1, nums2): Finds the length of the longest contiguous subarray that appears in both arrays. Args: nums1: List[int] - The first list of integers. nums2: List[int] - The second list of integers. Returns: int - The length of the longest contiguous subarray. n = len(nums1) # dp[i][j] will store the length of the longest common subarray ending at nums1[i-1] and nums2[j-1] dp = [[0] * (n+1) for _ in range(n+1)] max_length = 0 for i in range(1, n+1): for j in range(1, n+1): if nums1[i-1] == nums2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length"},{"question":"The Ocean Data Analysis Group (ODAG) is tasked with tracking changes in sea level readings from a set of sensors placed along a coastline. The sensors send measurements at regular intervals but occasionally there is a gap in the data due to technical issues or lost signals. The sensors record the sea levels as integers. Given a list of readings, ODAG needs to normalize the data by filling in the gaps with the average of the nearest non-missing values on either side of the gap. For simplicity, when a gap is at either the start or end of the list, it should be filled with the nearest non-missing value. Write a function to normalize the sensor data and return the list of readings with all gaps filled. # Input - An integer n (1 ≤ n ≤ 100,000) representing the number of readings. - A list of n integers, where each integer is the sea level reading from a sensor, or -1 indicating a missing reading. # Output - A single list of n integers where all missing readings are replaced with the appropriate values, as described. # Examples Example 1 # Input ``` 7 [5, -1, -1, 8, 7, -1, 10] ``` # Output ``` [5, 6, 7, 8, 7, 8, 10] ``` Example 2 # Input ``` 5 [-1, 4, 6, -1, -1] ``` # Output ``` [4, 4, 6, 6, 6] ``` # Explanation - In Example 1, -1 at index 1 and index 2 are replaced with 6 and 7 respectively, which are averages of the non-missing neighbors. The -1 at index 5 is replaced with 8, since 10 is the only neighbor. - In Example 2, the -1 at index 0 is replaced with 4, the -1 at index 3 is replaced with 6, and the -1 at index 4 is also replaced with 6, since those are the closest non-missing values.","solution":"def normalize_readings(n, readings): Normalize the sensor data by filling in gaps (represented by -1) with the average of nearest non-missing values on either side of the gap, or the nearest non-missing value if the gap is at the start or end of the list. if n <= 0: return readings filled_readings = readings[:] for i in range(n): if filled_readings[i] == -1: left = right = None # Find the nearest non-missing value to the left for l in range(i-1, -1, -1): if filled_readings[l] != -1: left = filled_readings[l] break # Find the nearest non-missing value to the right for r in range(i+1, n): if filled_readings[r] != -1: right = filled_readings[r] break if left is not None and right is not None: filled_readings[i] = (left + right) // 2 elif left is not None: filled_readings[i] = left elif right is not None: filled_readings[i] = right return filled_readings"},{"question":"You are given a series of M consecutive steps you have climbed, starting from the ground level. The height you reach after each step is denoted by an array A of size M. Each element of the array represents the height reached after that step. However, you can only consider a step as a \\"viewpoint\\" if the height reached at that step is greater than or equal to the heights reached at all previous steps. From how many steps can you consider the view? Constraints * All values in input are integers. * 1 leq M leq 20 * 1 leq A_i leq 100 Input Input is given from Standard Input in the following format: M A_1 A_2 ... A_M Output Print the number of viewpoints among the M steps. Examples Input 4 2 1 3 4 Output 3 Input 5 1 2 1 2 1 Output 3 Input 6 3 3 4 2 5 1 Output 4","solution":"def count_viewpoints(M, heights): Returns the count of viewpoints among the steps. A step is considered a viewpoint if the height reached at that step is greater than or equal to the heights reached at all previous steps. Parameters: M (int): The number of steps taken. heights (list): List of heights achieved at each step. Returns: int: The count of viewpoint steps. max_height = -1 count = 0 for height in heights: if height >= max_height: count += 1 max_height = height return count"},{"question":"You are managing an IQ-testing facility where you\'re studying the logical thinking of different subjects. You have conducted a series of tests, and each test has a unique pattern to solve. One such pattern involves subjects solving a sequence of numbers that alternates in triangular and square numbers. A triangular number or ( T_n ) is defined as the sum of the first n natural numbers, i.e., ( T_n = frac{n(n+1)}{2} ). A square number or ( S_n ) is defined as the square of a natural number n, i.e., ( S_n = n^2 ). Your task is to generate the series of the first m numbers where all odd-indexed positions (1st, 3rd, 5th, etc.) are triangular numbers and all even-indexed positions (2nd, 4th, 6th, etc.) are square numbers. You need to write a function that outputs this series for a given value of m. # Input The first line of the input contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The next t lines each contain a single integer m (1 ≤ m ≤ 10^5) — the length of the series to generate for each test case. # Output Output t lines. On the i-th line, output the generated sequence of the first m numbers for the i-th test case. # Example Input ``` 2 5 3 ``` Output ``` 1 1 3 4 6 1 1 3 ``` # Note For the first test case, the first 5 numbers in the series are: 1 (T_1), 1 (S_1), 3 (T_2), 4 (S_2), 6 (T_3) For the second test case, the first 3 numbers in the series are: 1 (T_1), 1 (S_1), 3 (T_2) Make sure your solution is efficient enough to handle the upper constraints.","solution":"def generate_sequence(m): Generates a sequence of the first m numbers where odd-indexed positions are triangular numbers and even-indexed positions are square numbers. Args: m (int): The length of the sequence to generate. Returns: list: A list containing the first m numbers according to the pattern. sequence = [] for i in range(1, m + 1): if i % 2 == 1: # Triangular number n = (i // 2) + 1 triangular_number = n * (n + 1) // 2 sequence.append(triangular_number) else: # Square number n = i // 2 square_number = n * n sequence.append(square_number) return sequence def process_test_cases(t, cases): results = [] for m in cases: results.append(\\" \\".join(map(str, generate_sequence(m)))) return results"},{"question":"Emily is learning about tree structures and their properties. She came across the concept of node distances and wants to write a program to calculate the longest distance between any two nodes in a tree. A tree is an undirected, connected, acyclic graph with n nodes and n-1 edges. The distance between any two nodes in a tree is the number of edges in the shortest path connecting them. The diameter of a tree is the longest distance between any two nodes in the tree. Can you help Emily compute the diameter of a tree? Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between node u and node v. Output Output a single integer, the diameter of the tree. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 3 1 2 2 3 Output 2","solution":"def find_farthest_node(adj_list, start): from collections import deque n = len(adj_list) visited = [False] * n distance = [0] * n queue = deque([start]) visited[start] = True farthest_node = start while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[node] + 1 queue.append(neighbor) if distance[neighbor] > distance[farthest_node]: farthest_node = neighbor return farthest_node, distance[farthest_node] def tree_diameter(n, edges): if n == 1: return 0 adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) farthest_node, _ = find_farthest_node(adj_list, 0) _, diameter = find_farthest_node(adj_list, farthest_node) return diameter"},{"question":"In a faraway kingdom, there is a rectangular garden with n rows and m columns. A gardener wants to plant some flowers in this garden. He can plant exactly one flower in each cell of a k x k sub-grid of the garden. He wants to plant the flowers in such a way that the total number of flowers planted is maximized but he can only plant flowers in a single k x k sub-grid. Write a program that calculates the maximum number of flowers the gardener can plant given the dimensions of the garden and the size of the sub-grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the garden. The second line contains a single integer k (1 ≤ k ≤ min(n, m)) — the size of the sub-grid. Output Print a single integer — the maximum number of flowers the gardener can plant. Examples Input 5 5 2 Output 4 Input 8 3 3 Output 9 Note In the first example, the gardener can plant flowers in any 2 x 2 sub-grid of the garden, resulting in 4 flowers in total. In the second example, the gardener can plant flowers in any 3 x 3 sub-grid of the garden, but since the garden width is 3, the only option is to plant in a 3 x 3 sub-grid vertically, resulting in 9 flowers in total.","solution":"def max_flowers(n, m, k): Calculate the maximum number of flowers that can be planted in a k x k sub-grid within an n x m garden. :param n: int - number of rows in the garden :param m: int - number of columns in the garden :param k: int - size of the sub-grid :return: int - maximum number of flowers that can be planted # The gardener can plant flowers in a k x k sub-grid. The total number of flowers in such a sub-grid is k * k. return k * k"},{"question":"Alice is studying a simple algorithm for finding the maximum product of three distinct integers in an array of integers. She has implemented the following pseudocode. The input to the program is an integer n and an array nums containing n integers. function maximum_product(nums): sort(nums) return nums[n-1] * nums[n-2] * nums[n-3] However, Alice suspects there may be flaws in her implementation. Your task is to determine if Alice\'s implementation always finds the correct maximum product and, if not, provide a counter-example of an array for which the implementation will return an incorrect result. If a counter-example does not exist for the given value of n, print -1. Input A single integer n (3 ≤ n ≤ 50) — the size of the array. Following the integer n, n space-separated integers (each integer -100 ≤ ai ≤ 100) describing the array nums. Output Print n space-separated integers that form a counter-example where Alice\'s algorithm does not yield the maximum product. If such a counter-example does not exist, print -1. If there are multiple valid counter-examples, any one of them is acceptable. Examples Input 3 1 2 3 Output -1 Input 5 -10 -10 5 2 1 Output -10 -10 5 2 1 Explanation: In the input example, the maximum product is 500, made by multiplying -10 * -10 * 5. However, Alice\'s algorithm will sort the list and take the top three numbers, resulting in 2 * 5 * 1 = 10. Hence, this input serves as a valid counter-example.","solution":"def counter_example_for_maximum_product(n, nums): Find a counter-example where Alice\'s algorithm does not yield the maximum product. If no counter-example exists, return -1. if n < 3: return -1 nums_sorted = sorted(nums) # Alice\'s algorithm result alice_result = nums_sorted[-1] * nums_sorted[-2] * nums_sorted[-3] # Correct algorithm result # Two possible maximum product combinations: # 1. The product of the three largest numbers # 2. The product of the two smallest (possibly negative) numbers and the largest number max_product = max(nums_sorted[-1] * nums_sorted[-2] * nums_sorted[-3], nums_sorted[0] * nums_sorted[1] * nums_sorted[-1]) # Check if Alice\'s result is correct if alice_result != max_product: return \\" \\".join(map(str, nums)) return -1"},{"question":"Given an integer matrix of N rows and M columns, where each cell of the matrix contains a non-negative integer, write a program to find the number of distinct paths from the top-left cell to the bottom-right cell. You can only move right or down, and each path must be non-decreasing, i.e., the values of the cells in the path must be in non-decreasing order. Input format: The first line contains two integers, N and M, the number of rows and columns of the matrix. Each of the next N lines contains M integers, representing the elements of the matrix. Constraints: * 1 ≤ N, M ≤ 1000 * 0 ≤ matrix[i][j] ≤ 10^9 Output format: Print a single integer representing the number of distinct non-decreasing paths from the top-left cell to the bottom-right cell. Input example 1: 3 3 1 2 3 2 2 3 3 3 4 Output example 1: 6 Input example 2: 2 2 1 2 3 4 Output example 2: 2 Note: In the first example, there are six non-decreasing paths from (0,0) to (2,2): 1 → 2 → 2 → 3 → 4 1 → 2 → 2 → 3 → 3 → 4 1 → 2 → 3 → 3 → 4 1 → 2 → 3 → 4 1 → 2 → 3 → 3 → 3 → 4 1 → 2 → 2 → 2 → 3 → 4 In the second example, there are two non-decreasing paths from (0,0) to (1,1): 1 → 2 → 4 1 → 3 → 4","solution":"def num_distinct_paths(matrix): from collections import defaultdict import heapq n = len(matrix) m = len(matrix[0]) def neighbors(i, j): for x, y in [(i+1, j), (i, j+1)]: if 0 <= x < n and 0 <= y < m: if matrix[x][y] >= matrix[i][j]: yield (x, y) options = defaultdict(int) options[(0, 0)] = 1 heap = [(matrix[0][0], 0, 0)] while heap: val, i, j = heapq.heappop(heap) for ni, nj in neighbors(i, j): if options[(ni, nj)] == 0: heapq.heappush(heap, (matrix[ni][nj], ni, nj)) options[(ni, nj)] += options[(i, j)] return options[(n-1, m-1)] # Example usage matrix1 = [ [1, 2, 3], [2, 2, 3], [3, 3, 4] ] print(num_distinct_paths(matrix1)) # Output: 6 matrix2 = [ [1, 2], [3, 4] ] print(num_distinct_paths(matrix2)) # Output: 2"},{"question":"Emma is organizing a simple card game for her friends at a party. In this game, each player draws a number card from a deck. The winner is the player who draws the highest unique number. If two or more players draw the same highest number, the game is a draw. Each number card shows an integer between 1 and 13, inclusive. You are given the number cards drawn by `n` players. Write a program to determine the outcome of the game based on these cards. Constraints * 2 ≦ n ≦ 10 * 1 ≦ card_i ≦ 13 (i=1,2,...,n) * All card_i are integers. Input The input is given from Standard Input in the following format: n card_1 card_2 ... card_n Output Print the value of the highest unique card if there is one, otherwise print `Draw`. Examples Input 4 8 6 13 6 Output 13 Input 3 7 7 7 Output Draw Input 5 1 9 3 8 9 Output 8","solution":"def find_highest_unique_card(n, cards): Determines the highest unique card from the list of drawn cards. Parameters: n (int): The number of players/cards drawn. cards (list of int): List of integers representing the drawn cards. Returns: int or str: The highest unique card or \\"Draw\\" if no unique card exists. from collections import Counter if not (2 <= n <= 10) or not all(1 <= card <= 13 for card in cards): raise ValueError(\\"Input constraints violated.\\") card_count = Counter(cards) # Extract unique cards (count == 1) and find the highest one unique_cards = [card for card, count in card_count.items() if count == 1] if unique_cards: return max(unique_cards) else: return \\"Draw\\" # Example usage (not part of the solution): # n = 5 # cards = [1, 9, 3, 8, 9] # result = find_highest_unique_card(n, cards) # print(result) # Output: 8"},{"question":"A large company needs to distribute a list of tasks among its employees in a way that maximizes productivity. Each task has a specific duration and an associated productivity score, and each employee can work on only one task at a time. The challenge is to assign tasks to employees such that the sum of the productivity scores is maximized, but without exceeding the sum of the task durations that each employee can handle within a given working period. You have been provided with the task durations, their corresponding productivity scores, and the maximum working time for each employee. Your goal is to find the maximum productivity score achievable given these constraints. Input The first line of the input gives the number of datasets. Each dataset follows a similar format: n E d1 p1 d2 p2 … dn pn n: The number of tasks. You may assume 1 ≤ n ≤ 50. E: The maximum working time for each employee in hours. You may assume 1 ≤ E ≤ 100. di: The duration of the i-th task in hours. You may assume 1 ≤ di ≤ E. pi: The productivity score of the i-th task. You may assume 1 ≤ pi ≤ 1000. Output For each dataset in the input, output a single integer that represents the maximum productivity score that can be achieved by distributing the tasks among the employees without exceeding the maximum working time. Example Input 2 4 10 2 200 5 300 7 150 3 250 3 7 2 100 6 300 4 400 Output 750 500","solution":"def maximize_productivity(datasets): def knapsack(profits, weights, capacity): n = len(profits) dp = [0] * (capacity + 1) for i in range(n): for c in range(capacity, weights[i] - 1, -1): dp[c] = max(dp[c], profits[i] + dp[c - weights[i]]) return dp[capacity] results = [] for data in datasets: n = data[\'n\'] E = data[\'E\'] tasks = data[\'tasks\'] durations = [task[0] for task in tasks] scores = [task[1] for task in tasks] max_productivity = knapsack(scores, durations, E) results.append(max_productivity) return results"},{"question":"You are tasked with developing a logging system for a distributed application that runs on multiple servers. Each server generates logs with timestamps indicating when a particular event occurred. Your goal is to merge these logs from different servers into a single chronological log, ensuring that the combined log entries are sorted by their timestamps. The format of each log entry is: \\"timestamp event_description\\". The timestamp is a positive integer representing the number of seconds since the application started, and event_description is a string describing the event. Write a program that takes input from multiple servers and produces a single, sorted log. Each server\'s log is guaranteed to be internally sorted by timestamps. Input The input consists of multiple datasets. Each dataset has the following format: M log1 log2 ... logM M is the number of servers. logi (1 ≤ i ≤ M) is the number of log entries from server i, followed by the log entries from server i, each on a new line. The input ends with a line containing a single zero. This line is not a part of any dataset and should not be processed. Output For each dataset, output a single, merged log sorted by timestamps. Each log entry from different servers should be printed on a new line in the format \\"timestamp event_description\\". Example Input 2 3 1 event_A 3 event_B 5 event_C 2 2 event_D 4 event_E 0 Output 1 event_A 2 event_D 3 event_B 4 event_E 5 event_C","solution":"import heapq def merge_logs(input_data): datasets = input_data.strip().split(\'n\') results = [] i = 0 while i < len(datasets): num_servers = int(datasets[i]) if num_servers == 0: break logs = [] i += 1 for _ in range(num_servers): num_entries = int(datasets[i]) i += 1 for _ in range(num_entries): timestamp, event_description = datasets[i].split(maxsplit=1) heapq.heappush(logs, (int(timestamp), event_description)) i += 1 merged_logs = [] while logs: merged_logs.append(heapq.heappop(logs)) for log in merged_logs: results.append(f\\"{log[0]} {log[1]}\\") return results # Example usage: input_data = 2 3 1 event_A 3 event_B 5 event_C 2 2 event_D 4 event_E 0 output_data = merge_logs(input_data) for line in output_data: print(line)"},{"question":"You are given a list of integers representing weights of items and a target weight limit. Your task is to determine the minimum number of containers needed to hold all the items such that no container exceeds the weight limit. Each container can hold multiple items, and the weights of the items in each container must sum to a value less than or equal to the target weight limit. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of items. - The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the items. - The third line contains an integer L (1 ≤ L ≤ 1000) — the target weight limit for each container. Output - Print one integer — the minimum number of containers required to hold all the items without exceeding the weight limit. Example Input: 6 1 2 3 4 5 6 10 Output: 3 Explanation: - One way to pack the items is: - Container 1: 1, 2, 3, 4 (total weight = 10) - Container 2: 5 (total weight = 5) - Container 3: 6 (total weight = 6) - We need at least 3 containers to hold all the items without exceeding the weight limit.","solution":"def minimum_containers(n, weights, L): Determines the minimum number of containers needed to hold all items such that no container exceeds the weight limit L. Parameters: n (int): Number of items weights (list[int]): List of item weights L (int): Maximum weight limit per container Returns: int: Minimum number of containers required # Sort weights in descending order to fit heavier items first weights.sort(reverse=True) containers = 0 while weights: current_weight = 0 i = 0 while i < len(weights): if current_weight + weights[i] <= L: current_weight += weights[i] weights.pop(i) else: i += 1 containers += 1 return containers"},{"question":"Maya has a collection of **N** blocks, each with a distinct integer height. She wants to build the tallest possible tower by placing blocks on top of each other, but there is a restriction: each block can only be placed on top of another block if it is strictly shorter in height. Determine the height of the tallest tower she can build with the given blocks. # Input - The first line contains an integer **N** (1 ≤ N ≤ 200,000), the number of blocks. - The second line contains **N** distinct integers, each representing the height of a block. # Output Print a single integer, the height of the tallest possible tower. # Example **Input:** ``` 5 6 2 9 1 5 ``` **Output:** ``` 5 ``` **Explanation:** Maya can build the tower using all 5 blocks. She can choose a sequence such as: 9 -> 6 -> 5 -> 2 -> 1. Therefore, the height of the tallest tower is 5. **Note:** This problem is essentially reducing to finding the length of the longest decreasing subsequence, with the given heights of the blocks.","solution":"def tallest_tower_height(n, heights): Returns the height of the tallest tower Maya can build with the given blocks\' heights. Args: n (int): The number of blocks. heights (List[int]): List of distinct integer heights of the blocks. Returns: int: The height of the tallest possible tower. # Sort the heights in decreasing order heights.sort(reverse=True) # The tallest tower would be the number of blocks as they can be placed strictly decreasing return len(heights)"},{"question":"Problem Given a string `s` of length `n`, determine if it can be rearranged into a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Your task is to write a function to check whether any permutation of the string is a palindrome. To help guide you: 1. A string can be rearranged into a palindrome if and only if at most one character in the string has an odd frequency count. 2. For example, \\"civic\\" and \\"ivicc\\" can be rearranged into the palindrome \\"civic\\", but \\"hello\\" cannot be rearranged into any palindrome. Function Signature: `def can_form_palindrome(s: str) -> bool` # Input - `s` (1 ≤ |s| ≤ 10^6): The input string consisting of lowercase English letters. # Output - Return `True` if any permutation of the input string can form a palindrome, and `False` otherwise. # Example Input: ``` s = \\"carrace\\" ``` Output: ``` True ``` Input: ``` s = \\"daily\\" ``` Output: ``` False ``` **Note**: For the first example, the string \\"carrace\\" can be rearranged to \\"racecar\\", which is a palindrome. For the second example, there is no way to rearrange \\"daily\\" to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determine if any permutation of the string can form a palindrome. Args: s (str): The string to check. Returns: bool: True if a palindrome permutation exists, False otherwise. count = Counter(s) odd_count = sum(1 for k in count if count[k] % 2 != 0) return odd_count <= 1"},{"question":"You are working as a software engineer at a logistics company. Your task is to develop a simulation system for tracking and verifying the delivery status of packages. Each package has a unique identifier and a status that indicates its state in the delivery process. The delivery process consists of the following states: - IN_TRANSIT: The package is currently being transported. - DELIVERED: The package has been delivered to the recipient. - RETURNED: The package is being returned to the sender. - LOST: The package is lost in transit. In addition to tracking the status, the system needs to handle queries that request information about specific packages based on their identifiers. Input The input consists of several data sets that represent package status updates and queries in the following format: n m update1 update2 ... updaten query1 query2 ... querym The first line consists of two non-negative integers n and m. If both n and m are zeros, this means the end of input. Otherwise, n lines, each representing a status update, and m lines, each representing a query, follow in this order. You may assume that n and m are less than or equal to 1,024. Each updatei is in the following format: package_id status Where: - package_id is a string of exactly eight alphanumeric characters (\'0\' to \'9\', \'a\' to \'z\', \'A\' to \'Z\'). - status is one of the following: IN_TRANSIT, DELIVERED, RETURNED, LOST. Each queryi is in the following format: package_id Where: - package_id is a string of exactly eight alphanumeric characters (\'0\' to \'9\', \'a\' to \'z\', \'A\' to \'Z\'). Output For each data set, print the results of the queries in the same order as they appear. Each result should be in the format: package_id status If a package_id in a query does not have an associated update, print \\"UNKNOWN\\". Example Input 3 4 abcd1234 IN_TRANSIT efgh5678 DELIVERED ijkl9012 LOST abcd1234 mnop3456 efgh5678 ijkl9012 2 2 xyz78901 RETURNED mnop2345 IN_TRANSIT xyz78901 mnop2345 0 0 Output abcd1234 IN_TRANSIT mnop3456 UNKNOWN efgh5678 DELIVERED ijkl9012 LOST xyz78901 RETURNED mnop2345 IN_TRANSIT","solution":"def process_delivery_updates(inputs): updates = inputs.splitlines() deliveries = {} results = [] while updates: # Read the first line for n and m line = updates.pop(0) if line == \\"0 0\\": break n, m = map(int, line.split()) for _ in range(n): package_update = updates.pop(0).split() package_id = package_update[0] status = package_update[1] deliveries[package_id] = status for _ in range(m): package_query = updates.pop(0) if package_query in deliveries: results.append(f\\"{package_query} {deliveries[package_query]}\\") else: results.append(f\\"{package_query} UNKNOWN\\") return results"},{"question":"Given a sequence of bricks, where each brick is represented by a number determining its height, construct the highest possible tower by stacking the bricks on top of each other. The constraint for stacking is that a brick can only be placed on another brick which is of greater height. You need to find the maximum height of the tower that can be constructed, and the sequence of bricks that form this tower. Input: The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n, which is the number of bricks. The second line contains n space-separated integers, representing the heights of the bricks. Output: For each test case, the output should consist of two lines: 1. The first line is an integer h, the maximum height of the tower. 2. The second line contains the sequence of brick heights that form this tower in the order they are stacked from bottom to top. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ height of bricks ≤ 10^4 SAMPLE INPUT 2 5 3 4 5 2 1 6 2 3 1 6 8 7 SAMPLE OUTPUT 3 3 4 5 4 2 3 6 8 Explanation For the first test case: You can stack brick of height 3 on bottom, then brick of height 4, and finally brick of height 5, constructing the highest tower of height 3. The order would be [3, 4, 5]. For the second test case: The best sequence is to start with brick of height 2, then place brick of height 3, followed by brick of height 6, then finally the brick of height 8, constructing the highest tower of height 4. The order would be [2, 3, 6, 8].","solution":"def longest_increasing_subsequence(arr): n = len(arr) if n == 0: return [] dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j # Find the maximum value in dp array max_index = max(range(n), key=lambda x: dp[x]) # Reconstruct the LIS sequence lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = prev[max_index] lis.reverse() return lis def build_towers(test_cases): results = [] for case in test_cases: n, heights = case lis = longest_increasing_subsequence(heights) results.append((len(lis), lis)) return results"},{"question":"Library Reservations A library wants to automate its book reservation system. Each reservation request consists of two integers, s and e , representing the start and end day of the book reservation, inclusive. Given a list of reservation requests, write a program to determine the maximum number of books that can be reserved without any overlap. input Input is given from standard input in the following format: ``` N s_1 e_1 s_2 e_2 ... s_N e_N ``` - The first line contains an integer N indicating the number of reservation requests. - The next N lines each contain two integers s_i and e_i . output Please output the maximum number of non-overlapping reservations that are possible. Constraints - 1 leq N leq 10^5 - 1 leq s_i < e_i leq 10^9 Input example 1 ``` 3 1 2 2 3 3 4 ``` Output example 1 ``` 3 ``` Input example 2 ``` 4 1 3 2 5 4 7 6 8 ``` Output example 2 ``` 2 ``` Example Input ``` 3 1 2 2 3 3 4 ``` Output ``` 3 ``` Explanation for input example 1: - The reservations (1, 2), (2, 3), and (3, 4) do not overlap, so all three can be chosen.","solution":"def max_non_overlapping_reservations(reservations): Returns the maximum number of non-overlapping reservations. reservations.sort(key=lambda x: x[1]) # Sort by end time count = 0 last_end_time = 0 for start, end in reservations: if start >= last_end_time: count += 1 last_end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) reservations = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)] result = max_non_overlapping_reservations(reservations) print(result)"},{"question":"Emma has recently joined a new fitness club that offers a variety of classes, each with a certain capacity of participants it can accommodate. Given a list of class capacities and the number of people wanting to join the fitness club, your task is to allocate participants to the available classes, maximizing the number of people who get to join a class. However, each participant can join only one class, and a class cannot exceed its maximum capacity. Write a program that takes the number of classes, their capacities, and the total number of participants as input, and outputs the number of participants that will get a spot in one of the classes. # Input Format: - The first line contains an integer `c`, the number of classes (1 ≤ c ≤ 100). - The second line contains `c` integers, each representing the capacity of a class (1 ≤ capacity ≤ 100). - The third line contains an integer `p`, the number of participants who want to join the club (1 ≤ p ≤ 10,000). # Output Format: - Output a single integer, the maximum number of participants that can be accommodated in the classes. # Example: Input: ``` 3 50 30 20 75 ``` Output: ``` 75 ``` Input: ``` 4 10 20 25 15 80 ``` Output: ``` 70 ``` # Explanation: In the first example, there are three classes with capacities 50, 30, and 20, and 75 participants. Since the total capacity of all classes is 100, all 75 participants can be accommodated. In the second example, there are four classes with capacities 10, 20, 25, and 15, totaling 70. Even though there are 80 participants, only 70 can be accommodated in the classes. Your task is to implement this logic and produce the correct number of participants accommodated based on the class capacities and participant number provided.","solution":"def max_participants_accommodated(c, capacities, p): Returns the maximum number of participants that can be accommodated based on class capacities. total_capacity = sum(capacities) return min(total_capacity, p)"},{"question":"Petya is working on a scheduling problem for his team at work. Each team member has a start time and end time for their task, and Petya wants to arrange as many non-overlapping tasks as possible. Given the start and end times of tasks, help Petya choose the maximum number of non-overlapping tasks. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of tasks. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 1000), where si is the start time and ei is the end time of the i-th task. Output Output k — the maximum possible number of non-overlapping tasks Petya can select. In the next line, output the indices of the selected tasks in the order they were input. Indices are 1-based. If there are multiple solutions, output any. Examples Input 6 1 3 2 5 4 6 6 7 5 8 8 9 Output 4 1 3 4 6 Input 5 1 4 2 6 8 9 6 8 3 5 Output 3 1 3 5","solution":"def max_non_overlapping_tasks(n, tasks): # Step 1: Sort tasks by end time. sorted_tasks = sorted((e, s, i + 1) for i, (s, e) in enumerate(tasks)) # Step 2: Select the maximum number of non-overlapping tasks. selected_tasks = [] last_end_time = -1 for end_time, start_time, index in sorted_tasks: if start_time >= last_end_time: selected_tasks.append(index) last_end_time = end_time return len(selected_tasks), selected_tasks # Example usage: # tasks = [(1, 3), (2, 5), (4, 6), (6, 7), (5, 8), (8, 9)] # print(max_non_overlapping_tasks(6, tasks)) # Output should be (4, [1, 3, 4, 6])"},{"question":"Given a city grid of size m x n, you are standing at the top-left corner of the grid (0,0) and your goal is to reach the bottom-right corner (m-1, n-1). You can only move either down or right at any point in time. Implement a function to count the number of unique paths that you can take to reach your destination. Function Signature: ```python def unique_paths(m: int, n: int) -> int: ``` Input: Two integers m and n representing the number of rows and columns in the grid, respectively. Output: Return the number of unique paths from the top-left corner to the bottom-right corner of the grid. Constraints: 1 ≤ m, n ≤ 100 Example: Input: 3 7 Output: 28 Explanation: The 3x7 grid has 28 unique paths to reach the bottom-right corner from the top-left corner.","solution":"def unique_paths(m: int, n: int) -> int: Calculate the number of unique paths from the top-left to the bottom-right corner of a m x n grid where you can only move down or right. dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"A local library maintains a digital catalog of its books. Each book entry contains the title, author, and the year of publication. The catalog is stored as a list of dictionaries, where each dictionary represents a book. Write a function that takes in this catalog and a year, and returns a list of titles of all books published in that year. The titles in the returned list should be sorted in alphabetical order. Function Signature: ```python def books_published_in_year(catalog: List[Dict[str, str]], year: int) -> List[str]: ``` # Input 1. A list of dictionaries where each dictionary `d` contains: - `d[\'title\']` (String): The title of the book. - `d[\'author\']` (String): The author of the book. - `d[\'year\']` (String): The year of publication. 2. An integer representing the year of interest. # Output - A list of strings containing the titles of books published in the given year, sorted in alphabetical order. # Constraints - The catalog will contain at most 10,000 books. - The year will be a positive integer. - Titles and author names will be non-empty strings with a maximum length of 100 characters. - The function should be case-insensitive when comparing titles. # Example Input ```python catalog = [ {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": \\"1960\\"}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": \\"1949\\"}, {\\"title\\": \\"Brave New World\\", \\"author\\": \\"Aldous Huxley\\", \\"year\\": \\"1932\\"}, {\\"title\\": \\"Go Set a Watchman\\", \\"author\\": \\"Harper Lee\\", \\"year\\": \\"2015\\"}, {\\"title\\": \\"Animal Farm\\", \\"author\\": \\"George Orwell\\", \\"year\\": \\"1945\\"}, ] year = 1949 ``` Output ``` [\\"1984\\"] ``` Input ```python catalog = [ {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": \\"1925\\"}, {\\"title\\": \\"In Search of Lost Time\\", \\"author\\": \\"Marcel Proust\\", \\"year\\": \\"1913\\"}, {\\"title\\": \\"Ulysses\\", \\"author\\": \\"James Joyce\\", \\"year\\": \\"1922\\"}, {\\"title\\": \\"Moby Dick\\", \\"author\\": \\"Herman Melville\\", \\"year\\": \\"1851\\"}, {\\"title\\": \\"Hamlet\\", \\"author\\": \\"William Shakespeare\\", \\"year\\": \\"1601\\"}, ] year = 1922 ``` Output ``` [\\"Ulysses\\"] ```","solution":"from typing import List, Dict def books_published_in_year(catalog: List[Dict[str, str]], year: int) -> List[str]: Returns a list of titles of all books published in the given year, sorted in alphabetical order. Parameters: catalog (List[Dict[str, str]]): A list of dictionaries, where each dictionary contains \'title\', \'author\', and \'year\' of a book. year (int): The year of publication to filter the books. Returns: List[str]: A list of book titles published in the given year, sorted alphabetically. # Filtering the books that were published in the given year matching_books = [book[\'title\'] for book in catalog if book[\'year\'] == str(year)] # Sorting the titles alphabetically matching_books.sort() return matching_books"},{"question":"Given a room represented by a rectangular grid of size N x M, a robot starts at position (sx, sy) located inside the grid and needs to move to position (fx, fy). The robot can move in four possible directions: up, down, left, and right. However, there are obstacles located at specific cells in the grid that the robot cannot pass through. You need to determine whether there exists a path from the starting position to the final position. If there is a path, print \\"PATH EXISTS\\". If no path exists, print \\"NO PATH\\". INPUT The first line of the input contains two integers N and M, the dimensions of the grid. The second line contains sx and sy, the starting coordinates. The third line contains fx and fy, the final coordinates. The fourth line contains a single integer P, the number of obstacles. Each of the next P lines contains two integers each, representing the coordinates of the obstacles. OUTPUT A single line, either \\"PATH EXISTS\\" or \\"NO PATH\\". CONSTRAINTS 1 ≤ N, M ≤ 100 0 ≤ sx, sy, fx, fy < N, M 0 ≤ P ≤ N*M SAMPLE INPUT 5 5 0 0 4 4 4 1 1 2 2 3 3 4 2 SAMPLE OUTPUT PATH EXISTS","solution":"def is_path_exists(N, M, sx, sy, fx, fy, obstacles): Determines if there exists a path from (sx, sy) to (fx, fy) in the grid with given obstacles. from collections import deque # Initialize grid and mark obstacles grid = [[0] * M for _ in range(N)] for ox, oy in obstacles: grid[ox][oy] = 1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy)]) visited = set((sx, sy)) # BFS loop while queue: x, y = queue.popleft() if (x, y) == (fx, fy): return \\"PATH EXISTS\\" for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < N and 0 <= new_y < M and (new_x, new_y) not in visited and grid[new_x][new_y] == 0: queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"NO PATH\\""},{"question":"You are provided with a rectangular grid with n rows and m columns. Each cell within the grid is initially painted white, represented by a \'0\'. You need to paint it black incrementally using a specific set of rules: 1. You can select any rectangle (a sub-grid) in the grid and paint all its cells black in one step. 2. After the grid is fully painted, all cells should be black (represented by \'1\'). Your task is to determine the minimum number of steps required to paint the entire grid black using the aforementioned rules. Input The input consists of two integers n and m (1 ≤ n, m ≤ 103) which denote the number of rows and columns of the grid, respectively. Output Print a single integer — the minimum number of steps required to paint the entire grid black. Examples Input 3 5 Output 5 Input 2 4 Output 4 Note In the first example, the grid can be painted in different ways. One optimal way could be to paint 5 separate vertical strips, each of height 3 and width 1. In the second example, the grid can be painted in 4 steps by painting 4 separate vertical strips, each of height 2 and width 1.","solution":"def min_steps_to_paint_grid(n, m): Determines the minimum number of steps required to paint the entire grid black. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: int: Minimum number of steps required. return min(n, m)"},{"question":"You are given an array, and your task is to find if there exists a pair of elements in the array whose sum is equal to a given target value. Input The first line of the input contains `t` - the number of test cases. For each test case: The first line contains two integers `n` and `k`, where `n` is the number of elements in the array and `k` is the target sum. The second line contains `n` integers which represent the elements of the array. Constraints: 1 ≤ t ≤ 10 2 ≤ n ≤ 100000 -10^9 ≤ array elements ≤ 10^9 Output For each test case, print \\"YES\\" if there exists a pair of elements in the array whose sum equals the target value `k`, otherwise print \\"NO\\". Example Input: 2 5 9 2 7 11 15 1 4 10 1 2 3 4 Output: YES NO","solution":"def find_pair_with_sum(arr, k): Checks if there exists a pair of elements in the array whose sum equals k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases for the presence of a pair of elements summing to k. results = [] for n, k, arr in test_cases: results.append(find_pair_with_sum(arr, k)) return results"},{"question":"You are given a 2D grid of integers where each cell in the grid represents the elevation of the terrain at that point. A person begins a hike at the top-left corner of the grid and proceeds to the bottom-right corner. They can only move right or down one cell at a time. Along the way, they must not ascend more than they descend. Specifically, the increase in elevation from their starting point should not exceed the decrease in elevation by the time they reach the bottom-right corner. Your task is to determine if there exists such a hike path from the top-left corner to the bottom-right corner. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid, respectively. Each of the next m lines contains n integers, representing the elevation values at each cell of the grid. The elevation values range from -1000 to 1000. Output Output a single line with \\"YES\\" if there exists a feasible path. Otherwise, output \\"NO\\". Examples Input 3 3 1 2 3 -1 -2 0 1 2 -3 Output YES Input 3 3 2 3 4 1 2 0 3 4 5 Output NO Explanation In the first example, there is a feasible path with net elevation decrease: (1 -> 2 -> -2 -> 0 -> -3). Elevation decreased by 4 and increased by 4, so the net change is zero (non-positive). In the second example, there is no feasible path because any path taken will lead to a net positive increase in elevation, and no path exists where the elevation decrease is equal to or greater than the increase.","solution":"def can_hike_path(m, n, grid): Determines if there exists a feasible hike path from top-left to bottom-right corner without the net elevation increase being positive. def dfs(x, y, elevation_change): if x == m - 1 and y == n - 1: return elevation_change <= 0 if (x, y, elevation_change) in memo: return memo[(x, y, elevation_change)] can_move = False if x + 1 < m: can_move |= dfs(x + 1, y, elevation_change + (grid[x + 1][y] - grid[x][y])) if y + 1 < n: can_move |= dfs(x, y + 1, elevation_change + (grid[x][y + 1] - grid[x][y])) memo[(x, y, elevation_change)] = can_move return can_move memo = {} return \\"YES\\" if dfs(0, 0, 0) else \\"NO\\""},{"question":"Taro is standing on a number line at position 0. He can perform two types of operations: 1. Move 1 step to the right (i.e., from position x to x + 1). 2. Move 2 steps to the left (i.e., from position x to x - 2). Determine whether Taro can reach a given position K on the number line. Constraints * -10^3 leq K leq 10^3 * K is an integer. Input The input consists of a single integer K. Output If Taro can reach the given position K, print `Possible`; otherwise, print `Impossible`. Examples Input 3 Output Possible Input -1 Output Impossible Input -1002 Output Possible","solution":"def can_reach_position(K): Determine if Taro can reach the given position K on the number line by checking if K is in the form of K % 3 == 0, 1, or 2. # Check if K modulo 3 is 0, 1, or 2 if K % 3 == 0 or K % 3 == 1 or K % 3 == 2: return \'Possible\' else: return \'Impossible\'"},{"question":"A group of friends is planning to go on a vacation together. They want to rent cars for the trip, but the rental company requires that each car must have at least one driver and can have at most 4 people. Given the number of people in the group, you need to determine the minimum number of cars needed to accommodate everyone while respecting the company\'s rule. Input Description The first line contains a single integer N, the number of friends in the group. Output Description Output a single integer representing the minimum number of cars required. Constraints 1 ≤ N ≤ 10^5 Example Input 4 Output 1 Input 5 Output 2 Explanation: In the first example, all 4 friends can travel in one car as it has the capacity to hold up to 4 people. In the second example, at least 2 cars are needed since each car can hold a maximum of 4 people but there are 5 friends in total. One car can hold 4 friends, and another car must hold the remaining 1 friend.","solution":"def minimum_cars_required(N): Calculate the minimum number of cars required to accommodate N people. Each car can hold at most 4 people. Parameters: N (int): The number of people in the group. Returns: int: The minimum number of cars required. return (N + 3) // 4"},{"question":"You are given a directed weighted graph with n vertices and m edges. The weights of the edges can be any positive integer. You are also given two integers s and t representing the starting and ending vertices respectively. Your task is to find the shortest path from vertex s to vertex t. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ n) — the number of vertices, edges, and the number of vertices with a mandatory stop respectively. The next m lines describe the edges. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — an edge from vertex u to vertex v with weight w. The next line contains k integers p1, p2, ..., pk (1 ≤ pi ≤ n) — the vertices that you must visit at least once on your way from s to t. If k = 0, this line will be empty. The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t). Output Output a single integer — the weight of the shortest path from vertex s to vertex t visiting all mandatory stops at least once. If there is no such path, output -1. Examples Input 4 4 2 1 2 1 2 3 1 3 4 1 1 4 10 2 3 1 4 Output 3 Input 3 2 1 1 2 5 2 3 5 2 1 3 Output 10 Input 5 5 0 1 2 2 2 3 2 3 4 2 4 5 2 1 5 10 1 5 Output 8 Note In the first example, you must follow the path 1 -> 2 -> 3 -> 4. The total weight is 3. In the second example, the only option is to go directly from 1 -> 2 -> 3 with a total weight of 10. In the third example, you must follow the path 1 -> 2 -> 3 -> 4 -> 5 because it has the minimum weight of 8.","solution":"import heapq def dijkstra(graph, start, end): Finds the shortest path in a weighted directed graph using Dijkstra\'s algorithm. pq = [(0, start)] distances = {start: 0} while pq: current_distance, current_vertex = heapq.heappop(pq) if current_vertex == end: return current_distance for neighbor, weight in graph[current_vertex].items(): distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return float(\'inf\') def build_graph(edges, num_vertices): Builds a graph from a list of edges. graph = {i: {} for i in range(1, num_vertices+1)} for u, v, w in edges: graph[u][v] = w return graph def shortest_path(n, m, k, edges, mandatory_stops, s, t): Computes the shortest path from vertex s to vertex t while visiting all mandatory stops. graph = build_graph(edges, n) if k == 0: # No mandatory stops return dijkstra(graph, s, t) stops = [s] + mandatory_stops + [t] total_distance = 0 for i in range(len(stops) - 1): distance = dijkstra(graph, stops[i], stops[i+1]) if distance == float(\'inf\'): return -1 total_distance += distance return total_distance"},{"question":"A software company is planning to distribute yearly bonuses to its employees based on their performance. Each employee\'s performance is rated on a scale from 1 to 5. The company wants to ensure that any employee with a higher performance rating gets a higher bonus than their immediate neighbors in the employee list. Bonuses must be in integer values and the total sum of bonuses given out should be minimized. You are asked to write a program that calculates the minimum total amount of bonuses required to satisfy the given conditions. Input The input consists of multiple datasets. Each dataset starts with an integer N, representing the number of employees (1 ≤ N ≤ 100). The next line contains N integers representing the performance ratings of the employees. The last dataset is followed by a line containing a single zero. This line is not a part of any dataset and should not be processed. Output For each dataset, print the minimum total bonuses in a line. Example Input 3 1 2 2 4 4 3 2 1 5 1 2 3 4 5 0 Output 4 10 15","solution":"def calculate_bonuses(ratings): n = len(ratings) if n == 0: return 0 bonuses = [1] * n # Left to right scan for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Right to left scan for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses) def process_input(input_data): lines = input_data.strip().split(\'n\') result = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break ratings = list(map(int, lines[i + 1].split())) result.append(calculate_bonuses(ratings)) i += 2 return result"},{"question":"Sarah is organizing a string of letters and wants to ensure that adjacent letters are not the same. To do this, she can perform the following operation: choose any letter in the string and change it to any other letter in the alphabet. Sarah wants to determine the minimum number of operations required to make the string meet her criteria. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100) — the string of letters. Output Print a single integer representing the minimum number of operations needed. Example Input aab Output 1 Input abcdefgh Output 0 Input aaa Output 2 Note In the first example, changing the second \'a\' to any other letter, such as \'b\', resolves the issue. In the second example, the string already meets the criteria, so no operations are needed. In the third example, changing the second and third \'a\' to any other letters ensures there are no two adjacent identical letters.","solution":"def min_operations_to_avoid_repeating_adjacent(s): Returns the minimum number of operations needed to ensure that no two adjacent letters in the string are the same. if not s: return 0 operations = 0 n = len(s) for i in range(1, n): if s[i] == s[i - 1]: operations += 1 return operations"},{"question":"Problem Statement A string of parentheses is considered valid if all opening parentheses have their corresponding closing parentheses and they are correctly nested (i.e., well-formed). Write an algorithm to generate all possible combinations of valid strings of parentheses of a given length. Given an integer `n`, generate all combinations of valid strings of parentheses with `2n` characters. # Constraints * 1 leq n leq 8 # Input Format * A single integer `n` # Output Format * Print each valid string in a separate line. # Sample Input 1 ``` 1 ``` # Sample Output 1 ``` () ``` # Sample Input 2 ``` 2 ``` # Sample Output 2 ``` (()) ()() ``` # Explanation For `n = 1`, the only valid string is `()`. For `n = 2`, the valid combinations are `()` and `()`.","solution":"def generate_parenthesis(n): Generates all combinations of valid strings of parentheses of length 2n. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"Problem Statement Sara is a budding botanist from the mystical land of Floravia. She is working on categorizing different types of plants in her garden. Each plant type is associated with a unique string label that describes its characteristics. However, due to an old labeling machine, some of the strings have become corrupted with duplicate characters. Sara wants to clean up these strings and keep only unique characters in their order of first appearance. Sara has become friends with YOU, a great programmer, and she knows you can help her write a Python function to accomplish this task. She wants you to process each plant label string and retain only the unique characters in the order they appear. Your task is to write a function that takes a list of strings and returns a new list where each string has been processed to remove duplicate characters. Input The input consists of a single list of strings, each representing a plant type label. The list contains between 1 and 100 strings (inclusive). Each string may contain between 1 and 100 characters (inclusive), consisting solely of lowercase English alphabets. Output The output should be a list of strings where each string has had its duplicate characters removed, keeping only the first occurrence of each character. Function Signature: ```python def unique_character_labels(labels: List[str]) -> List[str]: ``` Example Input: ```python [\\"flower\\", \\"garden\\", \\"botany\\", \\"flora\\", \\"plant\\"] ``` Output: ```python [\\"flower\\", \\"garden\\", \\"botany\\", \\"flora\\", \\"plant\\"] ``` Input: ```python [\\"aabbbc\\", \\"xyzzz\\", \\"iiii\\", \\"mnop\\", \\"aaab\\"] ``` Output: ```python [\\"abc\\", \\"xyz\\", \\"i\\", \\"mnop\\", \\"ab\\"] ``` Explanation In the first example, none of the strings have duplicate characters, so the output is the same as the input. In the second example: - The first string \\"aabbbc\\" is transformed to \\"abc\\". - The second string \\"xyzzz\\" is transformed to \\"xyz\\". - The third string \\"iiii\\" is transformed to \\"i\\". - The fourth string \\"mnop\\" remains \\"mnop\\" as it has no duplicates. - The fifth string \\"aaab\\" is transformed to \\"ab\\".","solution":"from typing import List def unique_character_labels(labels: List[str]) -> List[str]: Processes each plant label string and retains only the unique characters in the order they appear. result = [] for label in labels: seen = set() unique_label = [] for char in label: if char not in seen: unique_label.append(char) seen.add(char) result.append(\'\'.join(unique_label)) return result"},{"question":"You are given a string expression containing both parentheses () and curly braces {}. Your task is to determine if the given string is a balanced expression. An expression is considered balanced if: 1. Every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\". 2. Every opening curly brace \\"{\\" has a corresponding closing curly brace \\"}\\". 3. The matching parentheses and curly braces are properly nested. For example, the expressions \\"({})\\", \\"(){}\\" and \\"({()})\\" are balanced, while \\"({)}\\", \\"({))\\", \\"{((})\\" and \\"{()\\" are not. Your task is to write a program that will read such an expression and print \\"YES\\" if the expression is balanced and \\"NO\\" otherwise. Input The first line of the input contains an integer t (1 ≤ t ≤ 1000) – the number of test cases. Then, t lines follow. Each line contains a string consisting of characters \\"(\\", \\")\\", \\"{\\" and \\"}\\". The length of each string is from 1 to 100 including. Output For each test case, print \\"YES\\" if the expression is balanced and \\"NO\\" otherwise. Examples Input 3 () ({{}) ({}) {}()[]{} Output YES NO YES YES","solution":"def is_balanced_expression(expression): stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\'} for char in expression: if char in matching_bracket.values(): # if character is an opening bracket stack.append(char) elif char in matching_bracket.keys(): # if character is a closing bracket if stack == [] or matching_bracket[char] != stack.pop(): return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def process_expressions(expressions): results = [] for expression in expressions: results.append(is_balanced_expression(expression)) return results"},{"question":"Write a program that takes a string of lowercase characters and an integer ( k ). The program should print all the distinct substrings of length ( k ) from the given string, sorted lexicographically. Constraints * ( 1 leq k leq |s| leq 100 ) * The string contains only lowercase English letters Input A string ( s ) in the first line and an integer ( k ) in the second line. Output Print all the distinct substrings of length ( k ) in lexicographical order, one per line. Example Input abcabc 3 Output abc bca cab","solution":"def distinct_substrings(s, k): Returns all distinct substrings of length k from the given string s, sorted lexicographically. substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i + k]) return sorted(substrings)"},{"question":"Alyssa is fascinated by palindromes and wants to find out how many different ways she can split a given string `s` into palindromic substrings. A palindrome is a string that reads the same forward and backward. Alyssa wants to split the string in such a way that every substring in the split is a palindrome. Two splits are considered different if there is at least one substring that is different. Write a program to calculate the number of such distinct ways to split the string. Input The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 1000) — the string for which Alyssa wants to find the number of distinct palindromic splits. Output For each test case, output a single integer — the number of distinct ways to split the string such that every substring is a palindrome. Example Input 3 aab aaa abc Output 2 4 1 Note In the first example, the valid palindromic splits are: [\\"a\\", \\"a\\", \\"b\\"] and [\\"aa\\", \\"b\\"]. In the second example, the valid palindromic splits are: [\\"a\\", \\"a\\", \\"a\\"], [\\"aa\\", \\"a\\"], [\\"a\\", \\"aa\\"], [\\"aaa\\"]. In the third example, the only valid palindromic split is: [\\"a\\", \\"b\\", \\"c\\"].","solution":"def is_palindrome(s): return s == s[::-1] def palindromic_splits_helper(s, memo): if s in memo: return memo[s] if not s: return 1 total_splits = 0 for i in range(1, len(s) + 1): if is_palindrome(s[:i]): total_splits += palindromic_splits_helper(s[i:], memo) memo[s] = total_splits return total_splits def palindromic_splits(t, cases): results = [] for s in cases: memo = {} results.append(palindromic_splits_helper(s, memo)) return results"},{"question":"Write a program that reads a single integer N (1 ≤ N ≤ 10000) and prints all the prime numbers from 1 to N (inclusive). Constraints * 1 ≤ N ≤ 10000 Input The input consists of a single integer N. Output For each prime number from 1 to N, print the prime number on a new line. Example Input 10 Output 2 3 5 7","solution":"def is_prime(num): Check if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_primes_up_to_n(N): Returns a list of all prime numbers from 1 to N (inclusive). primes = [] for num in range(1, N + 1): if is_prime(num): primes.append(num) return primes"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct integers in the list that add up to the target integer. If such a pair exists, return the indices of the two integers in any order. Indices are 1-based. If no such pair exists, return -1. Input: - A list of n integers (2 ≤ n ≤ 100,000). - An integer target. Output: - Two integers, the indices of the elements that sum to the target integer, or -1 if no such pair exists. Examples: Input: 5 1 2 3 4 5 9 Output: 4 5 Input: 4 2 7 11 15 9 Output: 1 2 Input: 3 3 2 4 6 Output: 1 3 Input: 3 3 3 4 8 Output: -1","solution":"def two_sum(nums, target): Returns the indices (1-based) of two distinct numbers in the list that add up to the target. If no such pair exists, return -1. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return index_map[complement] + 1, i + 1 index_map[num] = i return -1"},{"question":"Your current task involves designing a social network. In this network, users are connected by bilateral friendships. You\'ve decided on the following functionality: for any given user, you can get a list of their direct friends, friends of direct friends (i.e., friends of friends), friends\' friends\' friends, and so on. To make things interesting, you want to find out the level of connection between the furthest connected users in this network. For instance, if two users are not direct friends but can reach each other through a chain of 3 friends, they are 4 levels apart (counting the starting user). Given the friendship relationships, determine the maximum level separation between any two users in the social network. Input The first line contains two integers n and m (2 ≤ n ≤ 300, 1 ≤ m ≤ n(n-1)/2) — the number of users and the number of friendships, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that user u and user v are friends. Each friendship pair u and v appears only once in the input. It is guaranteed that the network is fully connected, meaning there is a path (direct or indirect friendship) between any two distinct users. Output Print one integer — the maximum level of connection between any two users in the network. Examples Input 4 4 1 2 2 3 3 4 1 4 Output 2 Input 5 4 1 2 2 3 3 4 4 5 Output 4 Input 5 5 1 2 2 3 3 4 4 5 1 5 Output 2","solution":"from collections import deque, defaultdict def max_level_of_connection(n, m, friendships): def bfs(start_node): max_distance = 0 visited = [-1] * (n + 1) visited[start_node] = 0 queue = deque([start_node]) while queue: current = queue.popleft() current_distance = visited[current] for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) max_distance = max(max_distance, current_distance + 1) return max_distance # Create adjacency list graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) overall_max_distance = 0 for user in range(1, n + 1): overall_max_distance = max(overall_max_distance, bfs(user)) return overall_max_distance"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you need to perform `q` queries. Initially, each node belongs to its own unique connected component. Each query is either: - \\"A x y\\": add an edge between node `x` and node `y`. - \\"Q x y\\": check whether node `x` and node `y` belong to the same connected component. Input: The first line consists of three integers `n`, `m`, and `q` (1 ≤ n, q ≤ 100,000; 0 ≤ m ≤ 200,000). The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing edges between nodes `u` and `v`. The next `q` lines describe the queries in the format mentioned above. Output: For each query of the type \\"Q x y\\", output \\"Yes\\" if nodes `x` and `y` are in the same component, otherwise output \\"No\\". Example: Input: ``` 5 3 4 1 2 2 3 4 5 Q 1 3 Q 1 4 A 3 5 Q 1 5 ``` Output: ``` Yes No Yes ``` Explanation: Initially, the edges are (1-2), (2-3), and (4-5) forming two separate components: {1, 2, 3} and {4, 5}. 1. First query \\"Q 1 3\\": Nodes 1 and 3 are in the same component. Output \\"Yes\\". 2. Second query \\"Q 1 4\\": Nodes 1 and 4 are in different components. Output \\"No\\". 3. Third query \\"A 3 5\\": Adding edge (3-5), now there is a single component {1, 2, 3, 4, 5}. 4. Fourth query \\"Q 1 5\\": Nodes 1 and 5 are now in the same component. Output \\"Yes\\".","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n + 1)) self.rank = [1] * (n + 1) def find(self, a): if self.parent[a] != a: self.parent[a] = self.find(self.parent[a]) return self.parent[a] def union(self, a, b): rootA = self.find(a) rootB = self.find(b) if rootA != rootB: # Union by rank if self.rank[rootA] > self.rank[rootB]: self.parent[rootB] = rootA elif self.rank[rootA] < self.rank[rootB]: self.parent[rootA] = rootB else: self.parent[rootB] = rootA self.rank[rootA] += 1 def process_queries(n, m, q, edges, queries): uf = UnionFind(n) for u, v in edges: uf.union(u, v) results = [] for query in queries: if query[0] == \\"A\\": _, x, y = query uf.union(x, y) elif query[0] == \\"Q\\": _, x, y = query if uf.find(x) == uf.find(y): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A company has a work schedule for its employees, which is represented by a grid with R rows and C columns. Each cell in the grid contains a string representing the work status of an employee for a specific day. The rows are labeled from 1 to R, representing employees, and columns are labeled from 1 to C, representing days of the month. Each cell contains one of the following strings: - \\"work\\" representing a working day. - \\"off\\" representing a day off. - \\"half\\" representing a half-working day. Find the total number of full working days for all employees combined. For example, given a grid with 3 rows and 4 columns, if the work statuses are as follows: ``` work off work work off work half work work work off off ``` The total number of full working days is 7. Constraints: - 1 ≤ R, C ≤ 30 - Each string in the grid is either \\"work\\", \\"off\\", or \\"half\\". Input: The input is given from Standard Input in the following format: ``` R C status_{1,1} status_{1,2} ... status_{1,C} status_{2,1} status_{2,2} ... status_{2,C} : status_{R,1} status_{R,2} ... status_{R,C} ``` Output: Print a single integer which is the total number of full working days for all employees combined. Examples: Input ``` 3 4 work off work work off work half work work work off off ``` Output ``` 7 ``` Input ``` 2 2 work work work work ``` Output ``` 4 ```","solution":"def total_working_days(grid): Calculate the total number of full working days for all employees combined. full_working_days = 0 for row in grid: for cell in row: if cell == \\"work\\": full_working_days += 1 return full_working_days def parse_input(): import sys input = sys.stdin.read().strip().split(\\"n\\") R, C = map(int, input[0].split()) grid = [row.split() for row in input[1:]] return grid"},{"question":"You are given a grid of size N x M that represents a maze. Each cell of the grid is either empty (denoted by \'.\') or a wall (denoted by \'#\'). Your task is to determine if there is a path from the top-left corner of the maze (0, 0) to the bottom-right corner (N-1, M-1). You can move horizontally and vertically through empty cells only. Write a function `is_path_exist(N, M, grid)` that takes in the number of rows `N`, the number of columns `M`, and the `grid` as input. Return \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise return \\"NO\\". Note: The top-left corner and the bottom-right corner will always be empty cells. The grid will have at least one row and one column. Input - An integer N, indicating the number of rows in the grid. - An integer M, indicating the number of columns in the grid. - A list of N strings each of length M, representing the grid. Output - Return \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise return \\"NO\\". Constraints 1 ≤ N, M ≤ 100 Example Input: 4 4 .... .. .. .... Output: YES Input: 4 4 .... .... .... Output: NO Explanation In the first example, there is a clear path from (0, 0) to (3, 3) through only empty cells. In the second example, there is no possible path from (0, 0) to (3, 3) due to the wall blocking the way.","solution":"def is_path_exist(N, M, grid): from collections import deque # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reached the bottom-right corner if x == N - 1 and y == M - 1: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Polycarp has a string consisting of lowercase English letters. He wants to check if he can make this string a palindrome by changing at most one character. A palindrome is a word that reads the same forward and backward (e.g., \\"madam\\" or \\"racecar\\"). Write a function `can_be_palindrome` that checks if the string can become a palindrome by changing at most one character. The function should return `True` if it is possible and `False` otherwise. Input - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output - Return `True` if the string can become a palindrome by changing at most one character, or `False` otherwise. Examples Input ``` abca ``` Output ``` True ``` Input ``` racecar ``` Output ``` True ``` Input ``` abcdef ``` Output ``` False ``` Note In the first example, changing the character \'c\' to \'b\' would make the string \\"abba\\", which is a palindrome. In the second example, the string is already a palindrome so no changes are needed. In the third example, changing one character is not enough to make \\"abcdef\\" a palindrome.","solution":"def can_be_palindrome(s): Checks if the string can become a palindrome by changing at most one character. Args: s (str): A string of lowercase English letters. Returns: bool: True if the string can become a palindrome by changing at most one character, False otherwise. # Get the length of the string n = len(s) # Initialize a counter for the number of differences count_diff = 0 # Use two pointers to check the string from both ends left = 0 right = n - 1 while left < right: if s[left] != s[right]: count_diff += 1 # If there are more than 1 difference, return False if count_diff > 1: return False left += 1 right -= 1 # If we finish the loop with at most one difference, return True return True"},{"question":"Alice loves to drink coffee during her work. She has a peculiar habit of mixing different types of coffee packets to get a specific amount of caffeine. Each type of coffee packet contains a specific amount of caffeine, and Alice has unlimited packets of each type. Given a list of distinct integers representing the amounts of caffeine in different coffee packets, determine if Alice can mix these packets to get exactly `m` milligrams of caffeine. Write a function `canMixCoffee(packets, m)` that takes in an array `packets` of distinct positive integers (1 ≤ packets[i] ≤ 100) and a positive integer `m` (1 ≤ m ≤ 1000), and returns `True` if it is possible to mix the packets to get exactly `m` milligrams of caffeine, otherwise returns `False`. # Example 1: Input: ```python packets = [1, 3, 4] m = 6 ``` Output: ```python True ``` # Explanation: Alice can mix the coffee packets of 3 milligrams and 3 milligrams to get exactly 6 milligrams. # Example 2: Input: ```python packets = [2, 5] m = 3 ``` Output: ```python False ``` # Explanation: No combination of the given coffee packets can produce exactly 3 milligrams of caffeine. The function signature is: ```python def canMixCoffee(packets: List[int], m: int) -> bool: ``` **Note:** - Use dynamic programming to solve this problem efficiently. - Ensure that the solution is optimal and covers possible edge cases.","solution":"from typing import List def canMixCoffee(packets: List[int], m: int) -> bool: Determines if it\'s possible to mix coffee packets to get exactly m milligrams of caffeine. Args: packets: List[int] - A list of distinct integers representing the amounts of caffeine in different coffee packets. m: int - The specific amount of caffeine needed. Returns: bool - True if it\'s possible to get exactly m milligrams of caffeine, otherwise False. # Create a list to keep track of possible caffeine amounts dp = [False] * (m + 1) dp[0] = True # Base case: 0 milligrams can always be achieved # Fill the dp list for packet in packets: for i in range(packet, m + 1): if dp[i - packet]: dp[i] = True return dp[m]"},{"question":"A delivery truck is attempting to deliver packages in a city laid out as a grid of streets, with integer coordinates. The truck starts at the origin (0,0) and moves from point to point according to a series of instructions. Each instruction tells the truck to move either north, east, south, or west by exactly one street. However, due to traffic signals and keeping the delivery efficient, the truck driver wants to follow a special rule: the truck must never revisit any intersection (i.e., grid point) while making deliveries. Write a function to determine the maximum number of unique intersections (including the starting intersection) the delivery truck can visit according to the given series of instructions. If the truck reaches an intersection it has already visited, the truck stops immediately. # Input The function should accept a single argument: a list of strings, where each string can be `\\"N\\"`, `\\"E\\"`, `\\"S\\"`, or `\\"W\\"` representing the directions north, east, south, and west respectively. # Output The function should return a single integer representing the maximum number of unique intersections the truck can visit. # Example Input ```python [\'N\', \'E\', \'S\', \'W\', \'N\', \'E\'] ``` Output 5 Explanation The truck moves as follows: 1. (0,0) -> (1,0) 2. (1,0) -> (1,1) 3. (1,1) -> (0,1) 4. (0,1) -> (0,0) [Already visited, stop] So the unique intersections visited are: (0,0), (1,0), (1,1), (0,1) which totals to 5. Input ```python [\'N\', \'N\', \'E\', \'E\'] ``` Output 5 Explanation The truck moves as follows: 1. (0,0) -> (1,0) 2. (1,0) -> (2,0) 3. (2,0) -> (2,1) 4. (2,1) -> (2,2) So the unique intersections visited are: (0,0), (1,0), (2,0), (2,1), (2,2) which totals to 5. # Note The grid extends infinitely in all directions and each intersection can be represented as a tuple of coordinates `(x, y)`. The truck starts at the origin `(0, 0)` and follows the sequence of instructions in the given order. If an instruction directs the truck to an intersection it has already visited, the truck must stop and cannot proceed further with any remaining instructions.","solution":"def max_unique_intersections(directions): direction_map = { \'N\': (1, 0), \'E\': (0, 1), \'S\': (-1, 0), \'W\': (0, -1) } current_position = (0, 0) visited = {current_position} for direction in directions: move = direction_map[direction] current_position = (current_position[0] + move[0], current_position[1] + move[1]) if current_position in visited: break else: visited.add(current_position) return len(visited)"},{"question":"You are working for a tech company that is trying to optimize their data storage costs. Each client of the company generates a certain amount of data daily, and needs to store that data for a given number of days. The company charges clients based on the maximum storage they use, irrespective of how much data they delete after the retention period. Your task is to determine the maximum storage usage for each client over a given period, to accurately calculate the storage cost. Input The first line contains one integer n (1 ≤ n ≤ 105) — the number of clients. Each of the next n lines describes one client and contains d integers (1 ≤ d ≤ 100), where the i-th integer is the amount of data generated on the i-th day (0 ≤ data ≤ 104). Output Print n integers — the maximum storage usage for each client. Examples Input 3 1 2 3 4 5 5 4 3 2 1 2 3 4 6 8 Output 5 5 8 Input 2 10 20 30 20 10 5 15 25 35 45 Output 30 45","solution":"def max_storage_usage(n, clients_data): Given the number of clients and the list of their data usage over days, returns the maximum storage usage for each client. Args: n (int): number of clients clients_data (List[List[int]]): list of data usage for each client Returns: List[int]: maximum storage usage for each client max_storage = [] for data in clients_data: max_storage.append(max(data)) return max_storage"},{"question":"You are analyzing a sequence of operations performed on an initially empty stack. The operations are given in a linear order, and you need to determine whether the sequence can result in a specific target sequence of stack elements being popped from the stack. The operations consist of two types: 1. `PUSH X`: This operation pushes the integer X onto the stack. 2. `POP`: This operation pops the top element from the stack. The sequence of pushes and pops must be executed in the given order, and you should determine if it\'s possible to perform these operations such that a target sequence of popped elements is achieved. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of operations. The next n lines each contain an operation in one of the following formats: - `PUSH X`: Push integer X (1 ≤ X ≤ 100) onto the stack. - `POP`: Pop the top element from the stack. The following line contains an integer m (1 ≤ m ≤ n), the length of the target pop sequence. The last line contains m space-separated integers, representing the target sequence of elements to be popped from the stack in the exact order. Output Print \\"YES\\" if it’s possible to achieve the target sequence by performing the given operations; otherwise, print \\"NO\\". Examples Input 6 PUSH 1 PUSH 2 POP PUSH 3 POP POP 3 2 3 1 Output YES Input 5 PUSH 1 PUSH 2 POP PUSH 3 POP 3 2 3 1 Output NO Input 4 PUSH 4 PUSH 5 POP POP 2 5 4 Output YES Note In the first example, the sequence of operations leads to the stack: - PUSH 1: Stack is [1] - PUSH 2: Stack is [1, 2] - POP: Stack is [1], output is 2 - PUSH 3: Stack is [1, 3] - POP: Stack is [1], output is 3 - POP: Stack is [], output is 1 The target sequence [2, 3, 1] can be achieved. In the second example, the operations cannot yield the target sequence as described.","solution":"def can_achieve_target_sequence(n, operations, m, target_sequence): stack = [] output_sequence = [] target_index = 0 for operation in operations: if operation.startswith(\\"PUSH\\"): _, value = operation.split() stack.append(int(value)) elif operation == \\"POP\\": if not stack: return \\"NO\\" output_sequence.append(stack.pop()) if output_sequence == target_sequence: return \\"YES\\" else: return \\"NO\\" # Sample Inputs for testing purpose n = 6 operations = [\\"PUSH 1\\", \\"PUSH 2\\", \\"POP\\", \\"PUSH 3\\", \\"POP\\", \\"POP\\"] m = 3 target_sequence = [2, 3, 1] print(can_achieve_target_sequence(n, operations, m, target_sequence)) # YES"},{"question":"In a small village, a wise old man is responsible for managing the water distribution. There are several houses in the village, and each house is connected to a central well by a single water pipe. Each pipe has a certain capacity, which represents the maximum amount of water it can deliver in one minute. One day, the old man needs to fill all the houses with exactly the same amount of water within a certain number of minutes. He can control the flow of water through each pipe to ensure that all houses receive the same amount of water. Given the capacities of the pipes connected to each house, determine the maximum equal amount of water (in liters) each house can receive in the given time. Write a function that, given the capacities of the pipes and the number of minutes, returns the maximum amount of water each house can receive. Function Signature: ```python def max_water_delivery(capacities: List[int], minutes: int) -> int: pass ``` # Input: - An integer `n`, the number of houses in the village (1 ≤ n ≤ 10^5). - A list `capacities` of `n` integers where `capacities[i]` represents the capacity of the pipe connected to the i-th house (1 ≤ capacities[i] ≤ 10^6). - An integer `minutes` (1 ≤ minutes ≤ 10^6), the number of minutes available to distribute the water. # Output: - Return the maximum amount of water (in liters) that each house can receive. # Example: Input: ```plaintext 5 [10, 20, 30, 40, 50] 5 ``` Output: ```plaintext 50 ``` Explanation: Within 5 minutes, the pipe with the lowest capacity delivers 10 liters/minute, allowing each house to receive 10 * 5 = 50 liters. Input: ```plaintext 3 [10, 1, 5] 2 ``` Output: ```plaintext 2 ``` Explanation: Within 2 minutes, the pipe with the lowest capacity delivers 1 liter/minute, allowing each house to receive 1 * 2 = 2 liters. Develop an efficient solution to ensure it works within the given constraints.","solution":"from typing import List def max_water_delivery(capacities: List[int], minutes: int) -> int: Given the capacities of the pipes and the number of minutes, return the maximum amount of water each house can receive. # The maximum water each house can receive is limited by the smallest capacity pipe: min_capacity = min(capacities) # Multiply the smallest capacity by the number of minutes to get the total deliverable water: max_equal_water = min_capacity * minutes return max_equal_water"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is labeled from 1 to n. The graph may contain self-loops and multiple edges between the same pair of nodes. Your task is to determine if the graph contains any cycles and if so, identify the length of the shortest cycle. The length of a cycle is given by the number of edges in the cycle. If there are no cycles in the graph, return -1. Input The first line contains two integers n and m (1 ≤ n ≤ 5000, 0 ≤ m ≤ 10000) — the number of nodes and edges in the graph respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between node u and node v. Output Print the length of the shortest cycle in the given graph, or -1 if there are no cycles. Examples Input 4 5 1 2 2 3 3 4 4 1 1 3 Output 3 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output -1 Input 3 3 1 1 2 2 3 3 Output 1","solution":"from collections import deque, defaultdict import sys def shortest_cycle_length(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start_node): dist = [-1] * (n + 1) dist[start_node] = 0 q = deque([start_node]) parent = [-1] * (n + 1) shortest = sys.maxsize while q: node = q.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: # Not visited dist[neighbor] = dist[node] + 1 parent[neighbor] = node q.append(neighbor) elif parent[node] != neighbor: # If visited and not parent, cycle detected shortest = min(shortest, dist[node] + dist[neighbor] + 1) return shortest min_cycle_length = sys.maxsize for i in range(1, n + 1): if graph[i]: # Only BFS for nodes with neighbors cycle_length = bfs(i) if cycle_length < min_cycle_length: min_cycle_length = cycle_length return min_cycle_length if min_cycle_length != sys.maxsize else -1"},{"question":"A legendary blacksmith has unearthed a cache of mystical weapon components. Each component has a certain magical power level, and the blacksmith needs to combine them to submit a set of weapons to a king who will pay generously for them. The king has set strict requirements for the power levels of each weapon. You must help the blacksmith determine the maximum number of weapons that can be forged where each weapon must be made by combining two different components such that their combined power meets the king\'s exact requirements. Input: The first line contains two integers n and m (1 ≤ n ≤ 10^5; 1 ≤ m ≤ 10^9), the number of components and the exact power requirement for each weapon. The second line contains n integers p_i (1 ≤ p_i ≤ 10^9), the power levels of the components. Output: Output a single integer, the maximum number of weapons that can be forged. Example: Input: 5 10 2 3 5 7 8 Output: 2 Explanation: In this example: - The component powers are [2, 3, 5, 7, 8]. - Two possible pairs meet the requirement of 10: - 2 + 8 = 10 - 3 + 7 = 10 Thus, the maximum number of weapons that can be forged is 2.","solution":"def max_weapons(n, m, power_levels): Determines the maximum number of weapons that can be forged. Each weapon is made by combining two different components such that their combined power meets the exact requirement m. Parameters: n (int): The number of components. m (int): The exact power requirement for each weapon. power_levels (list of int): The power levels of the components. Returns: int: The maximum number of weapons that can be forged. power_dict = {} count = 0 for power in power_levels: complement = m - power if complement in power_dict and power_dict[complement] > 0: count += 1 power_dict[complement] -= 1 else: if power in power_dict: power_dict[power] += 1 else: power_dict[power] = 1 return count"},{"question":"Create a function that accepts a list of integers and returns a new list that contains the minimum number of elements needed to sort the list in non-decreasing order. The returned list should be a contiguous sublist from the original list. For instance, given a list `L`, the function should identify the shortest possible sublist `S` such that when `S` is sorted, replacing `S` in `L` with the sorted version will result in the entire list `L` being sorted. Function Signature: `def min_sublist_to_sort(lst: List[int]) -> List[int]:` # Constraints: - The input list `L` will have between 1 and 10^5 elements. - Each element in the list will be an integer between -10^9 and 10^9. # Input: - A list of integers `L`. # Output: - A list of integers representing the shortest sublist that needs to be sorted. # Examples: Example 1: **Input:** ```python min_sublist_to_sort([1, 5, 3, 4, 2]) ``` **Output:** ```python [5, 3, 4, 2] ``` **Explanation:** Sorting `[5, 3, 4, 2]` results in `[2, 3, 4, 5]`, replacing this sublist in the original list will convert it into `[1, 2, 3, 4, 5]`, which is sorted. Example 2: **Input:** ```python min_sublist_to_sort([1, 2, 3, 4, 5]) ``` **Output:** ```python [] ``` **Explanation:** The list is already sorted, so no sublist needs to be sorted. Example 3: **Input:** ```python min_sublist_to_sort([4, 3, 2, 1]) ``` **Output:** ```python [4, 3, 2, 1] ``` **Explanation:** The entire list needs to be sorted. Example 4: **Input:** ```python min_sublist_to_sort([1, 3, 5, 4, 2, 6]) ``` **Output:** ```python [3, 5, 4, 2] ``` **Explanation:** Sorting `[3, 5, 4, 2]` results in `[2, 3, 4, 5]`, replacing this sublist in the original list will convert it into `[1, 2, 3, 4, 5, 6]`, which is sorted.","solution":"from typing import List def min_sublist_to_sort(lst: List[int]) -> List[int]: n = len(lst) if n <= 1: return [] start, end = 0, n - 1 # Find out of order from the beginning while start < n - 1 and lst[start] <= lst[start + 1]: start += 1 # if already sorted if start == n - 1: return [] # Find out of order from the end while end > 0 and lst[end] >= lst[end - 1]: end -= 1 # Find the min and max of the sublist sub_max = max(lst[start:end + 1]) sub_min = min(lst[start:end + 1]) # Expand the start to the left while start > 0 and lst[start - 1] > sub_min: start -= 1 # Expand the end to the right while end < n - 1 and lst[end + 1] < sub_max: end += 1 return lst[start:end + 1]"},{"question":"There is a rectangular board of size n x m. Each cell of the board contains either a dot \'.\' or an asterisk \'*\'. A contiguous sequence of \'*\' characters is called a \\"star\\". You want to find out the number of stars that exist on the board. A star can be either a vertical or a horizontal sequence of \'*\' characters that are connected contiguously. Your task is to write a program to count the number of such stars on the board. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the board. The next n lines contain m characters (either \'.\' or \'*\') representing the board. Output Print a single integer — the number of stars on the board. Examples Input 3 4 .*.. **** ..*. Output 3 Input 2 2 *. .* Output 2 Note In the first example, there are 3 stars on the board. One star is in the first row at the second column, the second star is in the second row spanning all four columns, and the third star is in the third row at the third column. In the second example, each \'*\' in the different rows contributes to 2 stars because they are not connected contiguously either horizontally or vertically.","solution":"def count_stars(n, m, board): Counts the number of stars (horizontal or vertical contiguous sequences of \'*\') on the board. def mark_visited_horizontal(i, j): Mark all horizontally contiguous \'*\' cells as visited. while j < m and board[i][j] == \'*\': visited[i][j] = True j += 1 def mark_visited_vertical(i, j): Mark all vertically contiguous \'*\' cells as visited. while i < n and board[i][j] == \'*\': visited[i][j] = True i += 1 visited = [[False] * m for _ in range(n)] star_count = 0 for i in range(n): for j in range(m): if board[i][j] == \'*\' and not visited[i][j]: star_count += 1 if j+1 < m and board[i][j+1] == \'*\': mark_visited_horizontal(i, j) else: mark_visited_vertical(i, j) return star_count"},{"question":"A company has a network with N computers connected by N-1 cables. Each cable connects exactly two computers, and it is possible to reach every computer from any other computer using these cables (the network forms a tree). The company periodically checks the network integrity by examining paths between specific pairs of computers. They want to prepare a report where for each path the maximum data load any single cable carries is minimized. The paths to be examined are provided as queries. Write a function that: - Takes the number of computers `N`, a list of edges where each edge is represented by a tuple (u, v, w) indicating a cable connecting computer `u` and computer `v` with a maximum data load capacity of `w`, and a list of queries where each query is a tuple (x, y) asking for the path between computers `x` and `y`. - Returns a list of integers where for each query, the corresponding integer is the maximum data load capacity on the path between the two specified computers. # Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ w ≤ 10^6 * 1 ≤ Q ≤ 10^5 (where Q is the number of queries) * 1 ≤ u, v, x, y ≤ N # Input The function should have the following signature: ```python def compute_maximum_loads(N: int, edges: List[Tuple[int, int, int]], queries: List[Tuple[int, int]]) -> List[int]: ``` - `N` is an integer representing the number of computers. - `edges` is a list of tuples (u, v, w). - `queries` is a list of tuples (x, y). # Output Return a list of integers where each integer is the answer to the corresponding query. # Example Input ```python N = 5 edges = [(1, 2, 3), (1, 3, 2), (3, 4, 4), (4, 5, 5)] queries = [(2, 5), (1, 4)] ``` Output ```python [5, 4] ``` Explanation - The path from computer 2 to computer 5 is 2 -> 1 -> 3 -> 4 -> 5, with maximum cable load capacities 3, 2, 4, and 5 respectively. The maximum data load capacity among them is 5. - The path from computer 1 to computer 4 is 1 -> 3 -> 4, with maximum cable load capacities 2 and 4. The maximum data load capacity among them is 4.","solution":"from collections import defaultdict, deque def compute_maximum_loads(N, edges, queries): def bfs(src, dst): queue = deque([(src, 0)]) visited = set() while queue: node, current_max = queue.popleft() if node == dst: return current_max visited.add(node) for neighbor, weight in graph[node]: if neighbor not in visited: queue.append((neighbor, max(current_max, weight))) graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for x, y in queries: results.append(bfs(x, y)) return results"},{"question":"You are given a string consisting of lowercase English letters and queries of two types: 1. **1~x~y~c (1 ≤ x ≤ y ≤ length of the string, c is a lowercase English letter)** — update all letters in the substring from position x to position y (inclusive) to character c. 2. **2~x~y (1 ≤ x ≤ y ≤ length of the string)** — determine the lexicographically smallest character in the substring from position x to position y (inclusive). Write a program that processes these queries and outputs the results of the second type queries. # Input The first line contains a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. The second line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines contains a query of one of the two aforementioned types. # Output For each query of the second type, output the lexicographically smallest character in the specified substring on a new line. # Example Input ``` abacabad 5 2 3 5 1 2 4 z 2 2 5 1 5 5 x 2 1 7 ``` Output ``` a a a ``` # Explanation In the first example: - The string is initially \\"abacabad\\". - After the first query \\"2 3 5\\", the result is \'a\' as the smallest character in the substring \\"acab\\". - After the second query \\"1 2 4 z\\", the string becomes \\"azzabad\\". - After the third query \\"2 2 5\\", the result is \'a\' as the smallest character in the substring \\"zzab\\". - After the fourth query \\"1 5 5 x\\", the string becomes \\"azzaxad\\". - After the fifth query \\"2 1 7\\", the result is \'a\' as the smallest character in the substring \\"azzaxad\\".","solution":"def process_queries(s, queries): result = [] s = list(s) for query in queries: op = query[0] if op == \'1\': x, y, c = int(query[1]), int(query[2]), query[3] for i in range(x - 1, y): s[i] = c elif op == \'2\': x, y = int(query[1]), int(query[2]) result.append(min(s[x-1:y])) return result"},{"question":"Implement a function to simulate the classic game of \\"Hangman\\". The computer will think of a word, the user has to guess it by suggesting letters within a certain number of guesses. The rules of the game are: 1. The computer randomly selects a word from a given list of words. 2. The user attempts to guess the word by suggesting letters. 3. For each incorrect guess, the user loses a life. 4. The game continues until the user either guesses the word correctly or runs out of lives. Your task is to implement a function `play_hangman(words, max_lives)` that takes two arguments: - `words`: a list of strings, each representing a possible word for the game. - `max_lives`: an integer representing the maximum number of incorrect guesses allowed. The function should simulate the game as follows: 1. Randomly select a word from the `words` list. 2. Continuously prompt the user to guess a letter. 3. Keep track of the guessed letters and display the current status of the word (e.g., \\"_ _ e _ _\\"). 4. Deduct a life for each incorrect guess. 5. End the game when the word is guessed correctly or when the user runs out of lives. You may assume that the input words list contains only lowercase alphabetical characters and that each word has a length of at least 3 characters. If a guessed letter has already been guessed, prompt the user to guess a different letter. The function does not need to return anything, but should print the game status and results to the console. Example: ```python >>> play_hangman([\'apple\', \'banana\', \'orange\'], 6) Selected word: _ _ _ _ _ Guess a letter: p Current state: _ pp _ _ Lives left: 6 Guess a letter: e Current state: _ pp_ e Lives left: 6 Guess a letter: a Current state: app_e Lives left: 6 Guess a letter: o Current state: app_e Lives left: 5 Guess a letter: l Current state: apple Congratulations! You guessed the word. ``` Note: - Use `random.choice` to select a word from the list. - Validate input to ensure the user inputs a single alphabetical character as a guess.","solution":"import random def play_hangman(words, max_lives): word = random.choice(words) guessed_letters = set() correct_letters = set(word) lives = max_lives current_state = [\\"_\\"] * len(word) while lives > 0 and set(current_state) != correct_letters: print(f\\"Current state: {\' \'.join(current_state)}\\") print(f\\"Lives left: {lives}\\") guess = input(\\"Guess a letter: \\").lower() if len(guess) != 1 or not guess.isalpha(): print(\\"Invalid input. Please guess a single letter.\\") continue if guess in guessed_letters: print(\\"You already guessed that letter. Try again.\\") continue guessed_letters.add(guess) if guess in correct_letters: for i, letter in enumerate(word): if letter == guess: current_state[i] = guess print(\\"Correct!\\") else: lives -= 1 print(\\"Incorrect.\\") if set(current_state) == correct_letters: print(f\\"Congratulations! You guessed the word: {word}\\") else: print(f\\"Game over. The word was: {word}\\")"},{"question":"Mira is learning about string manipulation in her computer science class. She is given the task of finding out how many substrings in a given input string start with a vowel and end with a consonant. To help her understand better, let\'s define vowels as \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase) and consonants as any other alphabetical characters. Given an input string, your goal is to count the number of substrings that start with a vowel and end with a consonant. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S. Output: For each test case, output a single integer representing the number of substrings that start with a vowel and end with a consonant. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 1000 S contains only alphabetical characters. Example: Input: 2 abc aeiou Output: 2 0 Explanation: For the first test case, the substrings are: - \\"a\\" (vowel to vowel) - ignored - \\"ab\\" (vowel to consonant) - count - \\"abc\\" (vowel to consonant) - count - \\"b\\" (consonant) - ignored - \\"bc\\" (consonant to consonant) - ignored - \\"c\\" (consonant) - ignored So, there are 2 substrings that start with a vowel and end with a consonant. For the second test case, there are no substrings starting with a vowel and ending with a consonant. SAMPLE INPUT 2 abc aeiou SAMPLE OUTPUT 2 0","solution":"def count_substrings_vowel_to_consonant(T, test_cases): vowels = set(\'aeiouAEIOU\') results = [] for S in test_cases: count = 0 for i in range(len(S)): if S[i] in vowels: for j in range(i+1, len(S)): if S[j] not in vowels: count += 1 results.append(count) return results"},{"question":"Bradley is researching ancient Latin scrolls and stumbled upon an interesting challenge posed by an ancient Roman scribe. Given an array of integers, Bradley needs to perform a series of operations to update the array and respond to queries. The goal is to manage an array in a way that supports efficient updates and queries, typical of ancient Roman administrative efficiency. Bradley can perform the following types of operations: 1. Update the value at a specific index. 2. Compute the sum of a specific range of values within the array. Your task is to help Bradley implement these operations efficiently. Input The first line contains two integers, n and q (1 ≤ n, q ≤ 105) — the length of the array and the number of queries. The second line contains n integers a1, a2, ..., an ( - 108 ≤ ai ≤ 108) — the initial values of the array. The next q lines contain queries of the following two types: 1 i x (1 ≤ i ≤ n, - 108 ≤ x ≤ 108) — set the value at index i to x. 2 l r (1 ≤ l ≤ r ≤ n) — compute the sum of values from index l to index r (inclusive). Output For each query of the second type, output the required sum on a new line. Examples Input 5 5 1 2 3 4 5 2 1 5 1 3 10 2 1 3 1 2 -1 2 2 5 Output 15 11 18 Input 3 3 7 8 9 1 1 5 2 1 2 2 2 3 Output 13 17 Explanation In the first sample: 1. The initial array is [1, 2, 3, 4, 5]. The sum from index 1 to 5 is 1+2+3+4+5 = 15. 2. After setting the value at index 3 to 10, the array becomes [1, 2, 10, 4, 5]. The sum from index 1 to 3 is 1+2+10 = 13. 3. After setting the value at index 2 to -1, the array becomes [1, -1, 10, 4, 5]. The sum from index 2 to 5 is -1+10+4+5 = 18.","solution":"class EfficientArrayManager: def __init__(self, array): self.array = array self.n = len(array) self.prefix_sum = [0] * self.n self._build_prefix_sum() def _build_prefix_sum(self): self.prefix_sum[0] = self.array[0] for i in range(1, self.n): self.prefix_sum[i] = self.prefix_sum[i-1] + self.array[i] def update(self, i, x): difference = x - self.array[i-1] self.array[i-1] = x for j in range(i-1, self.n): self.prefix_sum[j] += difference def range_sum(self, l, r): if l == 1: return self.prefix_sum[r-1] else: return self.prefix_sum[r-1] - self.prefix_sum[l-2] def process_operations(n, q, values, operations): manager = EfficientArrayManager(values) results = [] for operation in operations: if operation[0] == 1: _, i, x = operation manager.update(i, x) elif operation[0] == 2: _, l, r = operation results.append(manager.range_sum(l, r)) return results"},{"question":"Alice and Bob are playing a game using strings. A move consists of selecting any character in the string and removing it. Each move is made alternately by Alice and Bob, with Alice going first. Alice wins if the length of the string becomes zero during her turn; otherwise, Bob wins if it becomes zero during his turn. Given an initial string consisting of only lowercase English letters, determine the winner of the game if both players play optimally, meaning both players aim to maximize their chances of winning. Input The first line contains a single integer n (1 ≤ n ≤ 100), representing the length of the string. The second line contains a string of length n, consisting of lowercase English letters. Output Print \\"Alice\\" if Alice wins the game with optimal play, otherwise print \\"Bob\\". Examples Input 5 abcde Output Alice Input 4 aabb Output Bob Input 3 abc Output Alice Explanation In the first example, Alice will always win because the string will be of odd length after each odd number of moves. Therefore, she can make the string empty on her turn. In the second example, Bob will win because after each player\'s turn, the string remains of even length. Bob will be the one to make the last move, emptying the string. In the third example, similar to the first example, Alice will win because the length of the string is odd and Alice starts first.","solution":"def determine_winner(n, s): Determines the winner of the game given the length of the string n and the string s. Alice wins if the length of the string becomes zero during her turn; otherwise, Bob wins if it becomes zero during his turn. # Alice wins if the initial length of the string `n` is odd, otherwise Bob wins. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Bob is learning about arrays and he wants to challenge you with a problem. He has an array `A` consisting of `n` integers. His task is to make all the elements of the array equal. To achieve this, he can perform the following operation any number of times: 1. Select any subarray `A[l...r]` (1 ≤ l ≤ r ≤ n). 2. Increment every element of the subarray by 1. He wants to know the minimum number of operations required to make all elements of the array equal. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array `A`. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output a single integer — the minimum number of operations required to make all elements of the array equal. Example Input 5 1 2 3 4 5 Output 4 Input 4 4 4 4 4 Output 0","solution":"def min_operations_to_make_equal(n, A): Returns the minimum number of operations required to make all elements of the array equal. Parameters: n (int): The number of elements in the array A A (list of int): The list of integers representing the array Returns: int: The minimum number of operations required max_value = max(A) operations_required = sum(max_value - value for value in A) return operations_required"},{"question":"A local software company is organizing a programming contest with M teams. Each team consists of exactly two members. The contest involves solving P problems, and each problem has a different difficulty level. The contest organizers want to ensure that each team gets problems assigned that are closest to their varying skill levels. Therefore, they have devised a method to rank the team\'s abilities and the problem difficulties, where a closer match between a team\'s skill level and the problem\'s difficulty is desired. Given the list of team skills and problem difficulties, your task is to assign each team exactly one problem such that the absolute difference between the team\'s skill level and the problem\'s difficulty is minimized. Each problem can be assigned to only one team. Input Format: - The first line consists of an integer M, the number of teams (1 ≤ M ≤ 100). - The next M lines contain two integers each, representing the skill levels of the two members in the team. The skill level of a team is defined as the sum of the skill levels of the two members. - The next line consists of an integer P, the number of problems (P = M). - The next P lines contain one integer each, representing the difficulty level of the problems. Output Format: - The output will consist of M lines, each containing the number of the team (1-based index) and the number of the assigned problem (1-based index). Sample Input: 3 5 6 3 7 8 4 3 10 14 12 Sample Output: 1 3 2 1 3 2","solution":"def assign_problems(M, team_skills, P, problem_difficulties): # calculate the skill level for each team team_levels = [(i + 1, sum(team_skills[i])) for i in range(M)] # create a list of problems with their index problems = [(i + 1, problem_difficulties[i]) for i in range(P)] # sort teams and problems based on their skill levels and difficulties team_levels.sort(key=lambda x: x[1]) problems.sort(key=lambda x: x[1]) assignments = [] # assign problems to teams for i in range(M): team_index = team_levels[i][0] problem_index = problems[i][0] assignments.append((team_index, problem_index)) return assignments"},{"question":"Henry is responsible for organizing an archive of historical documents. He has N documents, each characterized by its importance score. He wants to categorize these documents into folders such that: 1. Each folder has documents with unique importance scores. 2. Each folder has the maximum possible number of documents. Henry wants to determine the minimum number of folders required to achieve this categorization. Input: The first line of the input contains an integer N, the number of documents. Each of the following N lines contains an integer which indicates the importance score of each document. Output: Output a single line containing the minimum number of folders required. Constraints: 1 ≤ N ≤ 100000 1 ≤ importance score ≤ 100000 SAMPLE INPUT 5 1 2 2 3 3 SAMPLE OUTPUT 2 Explanation: Here, 1, 2, 2, 3, 3 are the importance scores. One optimal way to categorize them is: Folder 1: 1, 2, 3 Folder 2: 2, 3 This results in 2 folders, which is the minimum number.","solution":"def min_folders_required(N, importance_scores): Given the number of documents and their respective importance scores, determine the minimum number of folders required such that each folder contains documents with unique importance scores. Args: N (int): the number of documents. importance_scores (list of int): the importance scores of each document. Returns: int: the minimum number of folders required. from collections import Counter score_counts = Counter(importance_scores) return max(score_counts.values())"},{"question":"You are given an array of n integers. In a single move, you can choose any two adjacent elements of the array and swap them. Write a program that sorts the array in ascending order using the minimum number of moves. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5) - the number of elements in the array. The second line of the input contains n integers a1, a2, ..., an, (−10^9 ≤ ai ≤ 10^9) - the elements of the array. Output Output the fewest number of moves required to sort the array in ascending order. Example Input 5 3 1 5 4 2 Output 5 Input 3 9 8 7 Output 3 Note In the first example, possible sequence of moves to sort the array could be: Move 1: Swap 3 and 1 → Array becomes [1 3 5 4 2] Move 2: Swap 5 and 4 → Array becomes [1 3 4 5 2] Move 3: Swap 5 and 2 → Array becomes [1 3 4 2 5] Move 4: Swap 4 and 2 → Array becomes [1 3 2 4 5] Move 5: Swap 3 and 2 → Array becomes [1 2 3 4 5] In the second example, possible sequence of moves to sort the array could be: Move 1: Swap 9 and 8 → Array becomes [8 9 7] Move 2: Swap 9 and 7 → Array becomes [8 7 9] Move 3: Swap 8 and 7 → Array becomes [7 8 9]","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of adjacent swaps required to sort the array. n = len(arr) swaps = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps"},{"question":"In a fantasy world, there are n magical items, each with a specific power value. A magician wants to combine these items into a single powerful artifact. The power value of the final artifact is obtained by performing a series of operations. Specifically, the magician can pick any two items, combine their powers using the XOR operation, and repeat this process until only one item remains. The goal is to find the maximum possible power value of the final artifact. The XOR operation is defined as follows for two integers a and b: - a XOR b: each bit position in the result is 1 if and only if the corresponding bits of a and b are different; otherwise, the bit position in the result is 0. Given the power values of the n items, determine the maximum possible power value of the final artifact. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 2 ⋅ 10^5), the number of magical items. The second line of each test case contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i < 2^{30}), the power values of the magical items. Output For each test case, print a single line containing the maximum possible power value of the final artifact. Example Input 3 2 1 3 4 8 2 4 6 3 5 1 7 Output 3 14 7","solution":"def max_power_value(t, test_cases): Given the number of test cases and a list of test cases where each test case contains a number of items and their respective power values, this function returns the maximum possible power value of the final artifact for each test case. :param t: int, number of test cases :param test_cases: list of tuples, each containing: - n, number of items - a list of power values :return: list of int, maximum power value for each test case results = [] for case in test_cases: n, values = case max_value = 0 for value in values: max_value |= value results.append(max_value) return results"},{"question":"A DNA sequence can be represented as a string consisting of characters \'A\', \'C\', \'G\' and \'T\'. Biologists are interested in finding certain patterns within a DNA sequence. One such interesting problem is to find the longest subsequence such that the number of \'A\' and \'T\' characters are equal, and the number of \'C\' and \'G\' characters are equal. Given a DNA sequence, find the length of the longest such subsequence. Input The first line contains an integer N denoting the length of the DNA sequence. The second line contains a string S of length N, representing the DNA sequence. Output Output a single integer representing the length of the longest subsequence where the count of \'A\' equals the count of \'T\', and the count of \'C\' equals the count of \'G\'. Constraints and Example Input: 8 ACGTACGT Output: 8 Input: 7 ACGTCAA Output: 4 Explanation Example case 1. The entire sequence \\"ACGTACGT\\" has equal number of \'A\' and \'T\', as well as \'C\' and \'G\', so the length of the longest subsequence is 8. Example case 2. The longest subsequence with equal numbers of \'A\' and \'T\', and \'C\' and \'G\' is \\"ACGT\\", which has a length of 4.","solution":"def longest_balanced_subsequence(length, sequence): count = {\'A\': 0, \'T\': 0, \'C\': 0, \'G\': 0} longest_subseq_length = 0 for char in sequence: if char in count: count[char] += 1 balanced_a_t = min(count[\'A\'], count[\'T\']) balanced_c_g = min(count[\'C\'], count[\'G\']) longest_subseq_length = 2 * (balanced_a_t + balanced_c_g) return longest_subseq_length"},{"question":"There is a candy distribution among N children, numbered 1 through N. Each child i (1≤i≤N) will distribute x_i candies. The teacher wants to ensure that each child ends up with at least M candies after the distribution. If it is not possible for any child to have at least M candies, the answer should be \\"No\\". Calculate whether it is possible for the teacher to distribute the candies to satisfy this condition. If yes, print \\"Yes\\", otherwise print \\"No\\". Constraints * 1≤N≤100 * 1≤x_i≤1000 * 1≤M≤1000 Input The input is given from Standard Input in the following format: N M x_1 x_2 ... x_N Output Print \\"Yes\\" if it is possible to give each child at least M candies, otherwise print \\"No\\". Examples Input 4 5 5 5 5 5 Output Yes Input 3 10 3 3 3 Output No Input 5 3 2 2 2 8 9 Output Yes","solution":"def can_distribute_candies(N, M, candies): Determine if it\'s possible to give each child at least M candies. Parameters: - N (int): Number of children - M (int): Minimum number of candies each child should have - candies (list of int): List of candies each child has Returns: - str: \\"Yes\\" if it\'s possible, otherwise \\"No\\" return \\"Yes\\" if all(c >= M for c in candies) else \\"No\\" # Example usage: # N, M = 4, 5 # candies = [5, 5, 5, 5] # print(can_distribute_candies(N, M, candies)) # Output: Yes"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to find the number of pairs (i, j) where `i < j` and `arr[i] + arr[j]` is divisible by `k`. Input: - First line contains two integers, `n` (the size of the array) and `k`. - Second line contains `n` integers, the elements of the array `arr`. Output: - Print the number of pairs where `arr[i] + arr[j]` is divisible by `k`. Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ 10^5 - 1 ≤ arr[i] ≤ 10^5 Sample Input: 6 3 1 3 2 6 1 2 Sample Output: 5 Explanation: The pairs (i, j) where i < j and arr[i] + arr[j] is divisible by 3 are: - (0, 1) : arr[0] + arr[1] = 1 + 3 = 4 - (1, 3) : arr[1] + arr[3] = 3 + 6 = 9 - (2, 5) : arr[2] + arr[5] = 2 + 1 = 3 - (3, 4) : arr[3] + arr[4] = 6 + 1 = 7 - (4, 5) : arr[4] + arr[5] = 1 + 2 = 3","solution":"def count_divisible_pairs(arr, k): Returns the number of pairs (i, j) where i < j and arr[i] + arr[j] is divisible by k. n = len(arr) count = 0 remainder_freq = [0] * k for num in arr: remainder_freq[num % k] += 1 count += remainder_freq[0] * (remainder_freq[0] - 1) // 2 for i in range(1, k // 2 + 1): if i != k - i: count += remainder_freq[i] * remainder_freq[k - i] if k % 2 == 0: count += remainder_freq[k // 2] * (remainder_freq[k // 2] - 1) // 2 return count"},{"question":"Kozue is building a tower using wooden blocks. She has n blocks each with a specific weight wi (1 ≤ wi ≤ 1000). Kozue wants to arrange the blocks such that the tower is as balanced as possible by weight distribution. To achieve this, she will divide the blocks into two piles, where the weight difference between the two piles is minimized. You need to help Kozue determine the minimum possible difference in the total weight of the two piles. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of wooden blocks Kozue has. The second line contains n integers w1, w2, ..., wn — the weights of the blocks. Output: Print a single integer — the minimum possible difference in the total weight of the two piles. Examples: Input 5 3 1 4 2 2 Output 0 Input 4 2 2 3 5 Output 2 Note: In the first example, one possible way to balance the piles is {3, 2, 1} and {4, 2}, which both have a total weight of 6. Thus, the difference is 0. In the second example, one possible way to balance the piles is {2, 2, 3} and {5}, with total weights of 7 and 5, respectively. The difference is 2.","solution":"def min_weight_difference(n, weights): Returns the minimum possible difference in the total weight of the two piles. total_weight = sum(weights) target = total_weight // 2 # Initialize a list to store the maximum achievable weight not exceeding target dp = [0] * (target + 1) # Process each weight for w in weights: # Update the dp array in reverse order for i in range(target, w - 1, -1): dp[i] = max(dp[i], dp[i - w] + w) # The maximum achievable weight not exceeding target best_split = dp[target] # The minimal difference will be the total weight minus twice the best achievable weight min_diff = total_weight - 2 * best_split return min_diff"},{"question":"You have a grid of size `n x m`, with some cells initially black and some cells initially white. You are allowed to repaint all the cells in the grid twice. During each repaint, you may choose a subgrid (rectangle) and either paint all the cells in that subgrid black or all the cells white. Your task is to determine if it\'s possible to make all the cells in the grid black after exactly two repaints. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid. Each of the next `n` lines contains a string of length `m` consisting of characters `B` or `W`, where `B` denotes a black cell and `W` denotes a white cell. Output Output \\"YES\\" (without quotes) if it is possible to make all cells in the grid black after exactly two repaints. Otherwise, output \\"NO\\". Examples Input 3 3 WBW BBW BWW Output YES Input 2 2 BB WW Output NO Note In the first example, one possible way to repaint the cells black is: 1. Repaint the subgrid (1, 1) to (3, 2) to make it all black. 2. Repaint the subgrid (1, 3) to (3, 3) to make it all black. In the second example, it is impossible to repaint the grid to make all cells black in exactly two repaints.","solution":"def can_repaint_to_all_black(n, m, grid): Determines if it\'s possible to repaint all cells in the grid to black after exactly two repaints. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of str): The grid represented as a list of strings, where \'B\' denotes black cell and \'W\' denotes white. Returns: str: \\"YES\\" if it\'s possible, otherwise \\"NO\\". for i in range(n-1): for j in range(m-1): # Check if there is any 2x2 subgrid that has exactly three \'B\' cells and one \'W\' cell black_cells = sum(grid[i+dx][j+dy] == \'B\' for dx in range(2) for dy in range(2)) if black_cells == 3: return \\"YES\\" return \\"NO\\""},{"question":"A delivery service operates in a city represented as a 2D grid. Each cell in the grid can either be empty or contain an obstacle. The service uses a drone which can move up, down, left, or right but cannot pass through obstacles. The goal is to deliver a package from a starting point to a destination point in the minimum number of moves. Write a program to find the minimum number of moves required to reach the destination from the starting point. If the destination cannot be reached, return -1. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the number of rows and columns in the grid respectively. The next N lines each contain M characters, each character representing a cell in the grid. A cell can be: \'.\' (dot) - representing an empty cell \'#\' (hash) - representing an obstacle \'S\' (uppercase S) - representing the starting point \'E\' (uppercase E) - representing the destination point Output: For each test case, output the minimum number of moves required to reach the destination from the starting point. If it is not possible to reach the destination, output -1. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 Example: Input: 2 5 5 S.... .#.#. .#.#. .#..E ..... 5 5 S.#.. .#.#. .#.#. ...#E ..# Output: 7 -1 Explanation: In the first test case, the minimum path requires 7 moves: [S, (0,0)] -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> [E, (3,4)]. In the second test case, it is not possible to reach the destination from the starting point due to the obstacles.","solution":"from collections import deque def min_moves(grid, start, end): rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, moves = queue.popleft() if (x, y) == (end[0], end[1]): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, moves + 1)) visited.add((nx, ny)) return -1 def find_minimum_moves(test_cases): results = [] for grid, start, end in test_cases: result = min_moves(grid, start, end) results.append(result) return results"},{"question":"You are organizing a team event and want to ensure that everyone has a partner for a specific activity. The activity requires team members to be paired up such that each pair matches each other\'s skill levels within a certain range. The event consists of n team members, and each member has a skill level represented by an integer. You also have a range requirement for each pair, i.e., the difference between the skill levels of the two members in each pair must not exceed a specified value d. Your task is to determine if it is possible to pair up all the team members such that the difference in skill levels within each pair does not exceed d. Each team member must be paired with exactly one other member, and no member can remain unpaired. Input The first line contains two space-separated integers n and d (1 ≤ n ≤ 105, 0 ≤ d ≤ 109) — the number of team members and the maximum allowed difference in skill levels for each pair. The next line contains n space-separated integers representing the skill levels of the team members (0 ≤ skill level ≤ 109). Output If it is possible to pair up all team members as per the condition, print \\"YES\\" (without the quotes) in the first line. Otherwise, print \\"NO\\" (without the quotes). Examples Input 4 2 1 3 5 7 Output YES Input 3 1 1 2 3 Output NO","solution":"def can_pair_up(n, d, skill_levels): Determine if it is possible to pair up all team members such that the difference in skill levels within each pair does not exceed d. :param n: int, number of team members :param d: int, maximum allowed difference in skill levels :param skill_levels: list of int, skill levels of the team members :return: str, \\"YES\\" if all team members can be paired up as per the condition, else \\"NO\\" if n % 2 != 0: return \\"NO\\" skill_levels.sort() for i in range(0, n, 2): if skill_levels[i + 1] - skill_levels[i] > d: return \\"NO\\" return \\"YES\\""},{"question":"Alex is an architect designing a new city transportation system. The city consists of n sites, numbered from 1 to n. There are bidirectional roads connecting these sites. Each road has a specific length, representing the time it takes to travel from one site to another. Alex needs to ensure the transportation system can handle multiple updates efficiently. Each update can either add a new road, remove an existing road, or modify the length of an existing road. After each update, he needs to calculate the shortest path from a designated starting site to all other sites to assess the impact on travel times. To achieve this, you are asked to handle q updates to the transportation system and output the shortest path from the starting site to all other sites after each update. Input The first line contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 5 ⋅ 10^5) — the number of sites and the initial number of roads. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) — indicating there is a road of length w between site u and site v. The next line contains a single integer s (1 ≤ s ≤ n) — the designated starting site from where the shortest path calculations should begin. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of updates. The next q lines describe the updates to the system. Each update is represented by four integers t, u, v, w (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ w ≤ 10^9). * If t = 1, add a road of length w between site u and site v if it does not exist. If the road already exists, update its length to the new value w. * If t = 2, remove the road between site u and site v if it exists. * If t = 3, modify the length of the road between site u and site v to the new length w if the road exists. If it does not exist, do nothing. Output Initially, and after each update, output one line with n integers, where the i-th integer represents the shortest path length from the starting site s to site i. If site i is unreachable, output -1 for that site. Example Input 5 6 1 2 3 2 3 4 3 4 5 4 5 6 5 1 8 2 5 2 1 4 1 1 3 2 2 3 4 0 3 2 3 1 1 3 5 7 Output 0 3 5 9 11 0 3 2 7 13 0 3 -1 7 13 0 1 -1 7 13 0 1 -1 7 10 Note Initially, the shortest paths from site 1 are calculated using the roads provided. After the first update, a road between site 1 and site 3 is added with a length of 2, which improves some of the shortest path lengths. After the second update, the road between site 3 and site 4 is removed, making site 4 unreachable from site 1. After the third update, the length of the road between site 2 and site 3 is modified, impacting the shortest paths through site 3. After the fourth update, a new road is added between site 3 and site 5, which affects the shortest paths to site 5.","solution":"import heapq from collections import defaultdict, deque import sys input = sys.stdin.read INF = float(\'inf\') def dijkstra(n, graph, start): dist = [INF] * (n + 1) dist[start] = 0 pq = [(0, start)] heapq.heapify(pq) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u].items(): distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def main(): data = input().split() idx = 0 n = int(data[idx]) m = int(data[idx + 1]) idx += 2 graph = defaultdict(dict) for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) w = int(data[idx + 2]) idx += 3 if v not in graph[u] or graph[u][v] > w: graph[u][v] = w if u not in graph[v] or graph[v][u] > w: graph[v][u] = w s = int(data[idx]) idx += 1 q = int(data[idx]) idx += 1 results = [] results.append(dijkstra(n, graph, s)) for _ in range(q): t = int(data[idx]) u = int(data[idx + 1]) v = int(data[idx + 2]) w = int(data[idx + 3]) idx += 4 if t == 1: if v not in graph[u] or graph[u][v] > w: graph[u][v] = w if u not in graph[v] or graph[v][u] > w: graph[v][u] = w elif t == 2: if v in graph[u]: del graph[u][v] if u in graph[v]: del graph[v][u] elif t == 3: if v in graph[u]: graph[u][v] = w if u in graph[v]: graph[v][u] = w results.append(dijkstra(n, graph, s)) sys.stdout.write(\'n\'.join(\' \'.join(str(dist if dist != INF else -1) for dist in result[1:]) for result in results) + \'n\')"},{"question":"You are tasked with developing a new application that has an authentication system. One crucial requirement is to implement a feature to check if the provided password is strong enough according to specific rules. A password is considered strong if: - It has at least 8 characters. - It contains at least one lowercase letter. - It contains at least one uppercase letter. - It contains at least one digit. - It contains at least one special character (special characters are: !@#%^&*()-+). Given a password, your task is to write a function that determines if the password is strong. Write a function: ```python def is_strong_password(password: str) -> bool: ``` that takes a single argument, a string `password`, and returns a boolean indicating whether the password satisfies the conditions of being strong. **Input Format:** - The input contains a single string `password` which represents the password to be checked. **Output Format:** - The function should return `True` if the password is strong; otherwise, return `False`. **Examples:** 1. Input: `\\"StrongP@ssw0rd\\"` Output: `True` 2. Input: `\\"weakpass\\"` Output: `False` 3. Input: `\\"Sh0rt!\\"` Output: `False` 4. Input: `\\"N0t!StrongEnough\\"` Output: `False` **Explanation:** - Example 1: `\\"StrongP@ssw0rd\\"` is strong because it satisfies all the conditions. - Example 2: `\\"weakpass\\"` is not strong because it does not contain an uppercase letter, digit, or special character, and is not long enough. - Example 3: `\\"Sh0rt!\\"` is not strong because it does not meet the minimum length requirement. - Example 4: `\\"N0t!StrongEnough\\"` is not strong because it does not contain a special character.","solution":"def is_strong_password(password: str) -> bool: Checks if a password is strong based on the following rules: - At least 8 characters - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Contains at least one special character (!@#%^&*()-+) Args: password (str): The password to check Returns: bool: True if the password is strong, False otherwise if len(password) < 8: return False has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \'!@#%^&*()-+\' for c in password) return has_lower and has_upper and has_digit and has_special"},{"question":"In a magical forest, there is a set of m interconnected trees, organized in such a way that there are exactly m-1 unique paths connecting them, allowing for traversal between any two trees. This setup forms what is known as a \\"tree\\" structure in graph theory, where each tree is a node and the paths are edges. The forest keeper has a special magic spell that can be cast exactly once to \\"mark\\" a particular tree. The magic spell will then alert the forest keeper of any trees that are directly connected to the marked tree via exactly one path. Your task is to write a program that helps the forest keeper determine which trees would be directly affected by the spell. Input The first line contains an integer m (2 ≤ m ≤ 3000), the number of trees in the forest. The following m-1 lines each contain two integers ui and vi (1 ≤ ui, vi ≤ m), representing a unique path connecting trees ui and vi. The trees are numbered from 1 to m. The last line contains an integer t (1 ≤ t ≤ m), representing the tree that the forest keeper will mark with the spell. Output Output a single line containing the trees that will be directly affected by the spell, separated by spaces. The trees should be listed in ascending numerical order. Examples # Input ``` 5 1 2 1 3 3 4 3 5 3 ``` # Output ``` 1 4 5 ``` # Input ``` 6 1 2 1 3 2 4 4 5 5 6 4 ``` # Output ``` 2 5 ``` # Explanation - In the first example, tree 3 is marked. The directly connected trees are 1, 4, and 5. - In the second example, tree 4 is marked. The directly connected trees are 2 and 5.","solution":"def directly_connected_trees(m, paths, t): Determines which trees would be directly affected by the spell given the number of trees, the paths between them, and the tree being marked by the spell. Args: m : int : Number of trees in the forest paths : list of tuples : Each tuple contains two integers representing a unique path between two trees t : int : The tree that is marked by the spell Returns: list : A sorted list of trees that are directly connected to the marked tree via exactly one path from collections import defaultdict # Create an adjacency list adjacency_list = defaultdict(list) for u, v in paths: adjacency_list[u].append(v) adjacency_list[v].append(u) # Collect the directly connected trees to t directly_connected = adjacency_list[t] return sorted(directly_connected)"},{"question":"In a distant village, there is a festival where each of the n residents exchanges gifts with every other resident. Each resident has their happiness level associated with receiving a gift from another resident, which may differ from person to person. The tradition dictates that each resident can only receive and give one gift. The village head wants to ensure that the overall happiness from the gift exchange is maximized. The happiness levels are given in a matrix where the element at row i and column j represents the happiness level of resident i receiving a gift from resident j. The goal is to determine the maximum possible happiness level that the village can achieve by organizing the residents such that the gift exchanges yield the highest total happiness. Input The first line contains a single integer n (2 ≤ n ≤ 20) — the number of residents in the village. Each of the next n lines contains n integers where the j-th integer on the i-th line describes the happiness level a_{i, j} (1 ≤ a_{i, j} ≤ 100) of resident i receiving a gift from resident j. Output Output a single integer representing the maximum possible happiness level that can be achieved by arranging the village\'s gift exchange. Example Input 3 80 40 70 60 50 30 90 20 100 Output 230 Explanation: One possible way to achieve the maximum happiness level is: * Resident 1 gives a gift to Resident 3 (happiness level 70) * Resident 2 gives a gift to Resident 1 (happiness level 60) * Resident 3 gives a gift to Resident 2 (happiness level 100) Thus, the total happiness level is 70 + 60 + 100 = 230.","solution":"from itertools import permutations def maximize_happiness(n, happiness_matrix): max_happiness = 0 # Generate all possible permutations of residents for perm in permutations(range(n)): current_happiness = sum(happiness_matrix[i][perm[i]] for i in range(n)) max_happiness = max(max_happiness, current_happiness) return max_happiness"},{"question":"In a distant town, there is a peculiar traffic signal that operates in an unfamiliar way. The signal light changes between green, yellow, and red in a fixed pattern: green, yellow, red, green, yellow, red, and so on. It performs these changes endlessly. A car driver in this town is trying to determine how many times they can pass the traffic signal within a given number of light changes. The car can only move during the green light and will stop on yellow and red. You are given an integer `n` which represents the number of signal light changes. Write a function that returns the number of times the car can pass the signal during this period. Input The input consists of only one line. The only line contains the integer n (1 ≤ n ≤ 10^9). Output Output one integer — the number of times the car can pass the signal. Examples Input 6 Output 2 Input 9 Output 3 Input 10 Output 3 Note In the first example, the traffic light will go through the sequence green, yellow, red, green, yellow, red. The car can pass the signal twice (during the green lights). In the second example, the sequence is green, yellow, red, green, yellow, red, green, yellow, red. The car can pass three times. In the third example, the sequence is green, yellow, red, green, yellow, red, green, yellow, red, green. The car can still pass only three times since the tenth change will be a yellow light.","solution":"def count_green_lights(n): Returns the number of times the car can pass the signal during n signal light changes. The traffic light changes in a fixed pattern of green, yellow, red. The car can only move during the green light. :param int n: number of signal light changes. :return: number of times the car can pass the signal. :rtype: int # Since the cycle repeats every 3 changes (green, yellow, red) # We can calculate the number of green lights directly by dividing n by 3 return n // 3"},{"question":"Given a string, determine if it can be rearranged to form a palindrome. For a string to be a palindrome, it must read the same backward as forward, which means the frequency of each character in the string should allow for such a structure. Input: The input contains a single line with a string consisting of lowercase and/or uppercase Latin letters. Output: Output \\"YES\\" (without quotes) if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ Length of the string ≤ 10^5 SAMPLE INPUT abba SAMPLE OUTPUT YES Explanation: The string \\"abba\\" can be rearranged as \\"abba\\" or \\"baab\\", both of which are palindromes. SAMPLE INPUT abc SAMPLE OUTPUT NO Explanation: The string \\"abc\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determine if a string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. :param s: The input string. :return: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count frequency of each character count = Counter(s) # Check count of characters with odd frequency odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # If more than one character has an odd frequency, it can\'t form a palindrome return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A series of numbers called pentagonal numbers can be calculated using the formula pn = n(3n - 1)/2. Given an integer n, determine the n-th pentagonal number. Input The only line of input contains an integer n (1 ≤ n ≤ 100). Output Print the n-th pentagonal number. Examples Input 4 Output 22 Input 7 Output 70","solution":"def pentagonal_number(n): Returns the n-th pentagonal number using the formula pn = n(3n - 1)/2. Parameters: n (int): The term of the pentagonal number series to calculate. Returns: int: The n-th pentagonal number. return n * (3 * n - 1) // 2"},{"question":"You are given a network of n computers connected by m cables. Each cable connects exactly two computers, and each cable has a certain latency associated with it, which is the time it takes for a message to travel through that cable. Your task is to determine the minimum time required to send a message from a specific source computer s to a destination computer t. Input The first line contains three integers n, m, s, and t (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ s, t ≤ n) - the number of computers, the number of cables, the index of the source computer, and the index of the destination computer. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a cable between computers u and v with latency w. Output Print one integer - the minimum time required to send a message from computer s to computer t. If it is not possible to send a message from s to t, print -1. Examples Input 5 6 1 5 1 2 1 1 3 4 2 3 2 2 4 7 3 5 3 4 5 1 Output 7 Input 3 3 1 3 1 2 1 2 3 2 1 3 4 Output 3 Note In the first example, the optimal route from computer 1 to computer 5 is through the computers 1 -> 2 -> 3 -> 5, resulting in a total latency of 1 + 2 + 3 = 6. In the second example, the optimal route from computer 1 to computer 3 is directly through the cable with latency 3.","solution":"import heapq def minimum_latency(n, m, s, t, cables): Returns the minimum latency needed to send a message from computer s to computer t. graph = [[] for _ in range(n + 1)] for u, v, w in cables: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from node s to node t dist = [float(\'inf\')] * (n + 1) dist[s] = 0 priority_queue = [(0, s)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[t] if dist[t] != float(\'inf\') else -1"},{"question":"In a popular board game, there is a rectangular grid consisting of cells. Each cell in the grid can either be empty or contain a trap. The goal of the game is to move a player from the top-left corner of the grid to the bottom-right corner while avoiding traps. The player can move one cell at a time either to the right or down. At each step, the player can only move to an adjacent cell that is not a trap. Finding the number of distinct paths from the top-left corner to the bottom-right corner, considering the traps, can be crucial for optimal strategy planning in the game. Write a function called `countPaths` that takes an integer `n` representing the size of the grid (n x n) and a list of tuples `traps` representing the coordinates (row, column) of each trap in the grid. The function should return the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) avoiding the traps. Input - An integer `n` (2 ≤ n ≤ 100), representing the size of the grid. - A list of tuples `traps` where each tuple has two integers (0 ≤ row, column < n) indicating the position of a trap in the grid. The total number of traps is guaranteed to be less than `n^2`. Output - An integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid avoiding the traps. If there is no valid path, the function should return 0. Example Input `n = 3` `traps = [(1, 1)]` Output `2` Explanation: The grid can be visualized as: ``` . . . . X . . . . ``` Here, `.` represents an empty cell and `X` represents a trap. The valid paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def countPaths(n, traps): if (0, 0) in traps or (n-1, n-1) in traps: return 0 grid = [[0] * n for _ in range(n)] for trap in traps: grid[trap[0]][trap[1]] = -1 grid[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[n-1][n-1]"},{"question":"Chef found a rectangular grid of size NxM which is initially filled with zeros. Chef can perform two kinds of operations: 1. Choose any single cell and set its value to 1. 2. Choose a row or a column and set all the cells in that row or column to 1. Chef wants to know the minimum number of operations required to fill the entire grid with 1s. Input The first line of input contains an integer T, the number of test cases. Each of the next T lines contains two integers, N and M, representing the number of rows and columns of the grid. Output For each test case, output a single integer, the minimum number of operations required to fill the entire grid with 1s. Constraints 1 <= T <= 10^5 1 <= N, M <= 10^9 Example Input: 2 1 2 3 4 Output: 1 4","solution":"def min_operations_to_fill_grid(T, cases): Returns a list of the minimum number of operations required to fill the entire grid with 1s for each test case. results = [] for N, M in cases: # The answer is the minimum of N and M results.append(min(N, M)) return results"},{"question":"Given an integer array nums, return an integer array output such that output[i] is equal to the product of all the elements of nums except nums[i]. The constraint is that you must solve it in O(n) time complexity and without using division. Constraints * 2 ≤ nums.length ≤ 10^5 * -30 ≤ nums[i] ≤ 30 Input Input is given from Standard Input in the following format: n nums_1 nums_2 ... nums_n Output Print the product array, with spaces in between. Examples Input 5 1 2 3 4 5 Output 120 60 40 30 24 Input 4 2 3 4 5 Output 60 40 30 24","solution":"def product_except_self(nums): Returns the product of all elements except itself for each element in the input list. Solves it in O(n) time complexity without using division. length = len(nums) output = [1] * length left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output if __name__ == \\"__main__\\": import sys input = sys.stdin.read() data = input.split() n = int(data[0]) nums = list(map(int, data[1:])) result = product_except_self(nums) print(\\" \\".join(map(str, result)))"},{"question":"A software development company is building a recommendation system for an online bookstore. They want to rank the books based on customer reviews. Each book has an initial rating, and then it receives several reviews which can increase or decrease its rating. The goal is to implement a function that calculates the final rating for each book after processing all the reviews. The function should take two inputs: an array of initial ratings and an array of reviews. Each review is a tuple containing the index of the book being reviewed (0-based) and the change in rating (an integer which can be positive or negative). The function should return an array of final ratings for the books. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of books. The second line contains `n` integers, where the i-th integer is the initial rating of the i-th book. The third line contains an integer `m` (1 ≤ m ≤ 10000) — the number of reviews. The next `m` lines each contain two integers, representing the index of the book being reviewed and the change in rating. Output Print a single line containing `n` integers — the final ratings of the books in the same order as the initial ratings. Examples Input 3 5 3 8 4 0 -2 1 1 2 -3 1 2 Output 3 6 5 Input 5 1 2 3 4 5 3 0 5 4 -1 2 2 Output 6 2 5 4 4","solution":"def calculate_final_ratings(initial_ratings, reviews): Calculate the final ratings for books after processing all the reviews. :param initial_ratings: List of initial ratings of each book. :param reviews: List of tuples where each tuple contains the index of the book and the change in rating. :return: List of final ratings for each book. final_ratings = initial_ratings[:] # Create a copy of the initial ratings # Process each review for review in reviews: book_index, rating_change = review final_ratings[book_index] += rating_change return final_ratings"},{"question":"Given a list of integers representing the maximum weight capacity of different bridges and another list representing the weights of boxes that need to be transported, determine the maximum number of boxes that can be transported without exceeding the weight capacity of each bridge. Rules: - Each box can only be transported across one bridge. - The boxes must be transported in the order given, i.e., box i must be transported before box i+1. Constraints: * 1 ≤ number of bridges ≤ 100 * 1 ≤ number of boxes ≤ 100 * 1 ≤ weight of each box ≤ 1000 * 1 ≤ capacity of each bridge ≤ 10000 Input The first line of the input contains an integer N, the number of bridges. The second line contains N integers representing the weight capacity of each bridge. The third line contains an integer M, the number of boxes. The fourth line contains M integers representing the weights of the boxes. Output Print a single integer, the maximum number of boxes that can be transported without exceeding the weight capacity of each bridge. Example Input 3 500 1000 2000 4 400 300 700 500 Output 3 Input 2 600 800 4 500 400 300 200 Output 2","solution":"def max_boxes_transported(n, bridge_capacities, m, box_weights): Determines the maximum number of boxes that can be transported without exceeding the weight capacity of each bridge in the given order. Args: n (int): Number of bridges. bridge_capacities (list of int): Maximum weight capacity of each bridge. m (int): Number of boxes. box_weights (list of int): Weights of the boxes that need to be transported. Returns: int: Maximum number of boxes that can be transported. transported_boxes = 0 for i in range(min(n, m)): if box_weights[i] <= bridge_capacities[i]: transported_boxes += 1 else: break return transported_boxes"},{"question":"In a rectangular garden, there are m rows and n columns of plants. Each plant can either grow flowers or vegetables. The gardener wants to arrange the garden such that each row contains only one type of plant (all flowers or all vegetables) and each column contains only one type of plant. Additionally, the gardener prefers alternating types of plants between adjacent rows and adjacent columns. However, due to specific requirements, some plants must be designated to grow flowers and others to grow vegetables. These requirements are provided as a list of coordinates that must have a predetermined type of plant. Given the configuration and the predetermined type of some plants, determine whether it is possible to arrange the entire garden according to the above rules. If possible, provide one such arrangement. Input The input consists of multiple test cases. The first line contains a single integer k (1 ≤ k ≤ 10) — the number of test cases. The description of the test cases follows. The first line of each test case contains two space-separated integers m (1 ≤ m ≤ 20) and n (1 ≤ n ≤ 20) — the number of rows and columns in the garden, respectively. The next line contains a single integer r (0 ≤ r ≤ m*n) — the number of requirements. Each of the next r lines contains three space-separated integers i (1 ≤ i ≤ m), j (1 ≤ j ≤ n), and t (0 or 1) describing a requirement. Here, (i, j) represents the position of the plant, and t represents the type of the plant, where 0 indicates flowers and 1 indicates vegetables. Output For each test case, print \\"YES\\" if it is possible to arrange the garden according to the rules and the requirements. If it is possible, also provide a valid arrangement by printing m lines, each containing n integers (0 or 1), which describe the type of plants in the garden. If there are multiple valid arrangements, any one of them will be accepted. If it is not possible to arrange the garden according to the rules, print \\"NO\\". Example Input 2 3 3 2 1 1 0 3 3 1 4 4 4 1 1 1 1 2 0 3 4 1 4 3 0 Output YES 0 1 0 1 0 1 0 1 0 YES 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 Note In the first test case, it is possible to arrange the garden in a way that satisfies all the constraints. The rows and columns alternate between flowers and vegetables, with the predetermined types of plants positioned accordingly. In the second test case, another arrangement respecting the requirements and rules is shown.","solution":"def garden_arrangement(m, n, constraints): garden = [[-1 for _ in range(n)] for _ in range(m)] # Fill in the constraints for (i, j, t) in constraints: garden[i-1][j-1] = t # Check if the constraints lead to a contradiction for i in range(m): for j in range(n): if garden[i][j] != -1: if i > 0 and garden[i-1][j] != -1 and garden[i-1][j] == garden[i][j]: return \\"NO\\" if j > 0 and garden[i][j-1] != -1 and garden[i][j-1] == garden[i][j]: return \\"NO\\" if i < m-1 and garden[i+1][j] != -1 and garden[i+1][j] == garden[i][j]: return \\"NO\\" if j < n-1 and garden[i][j+1] != -1 and garden[i][j+1] == garden[i][j]: return \\"NO\\" # Try to fill the garden while maintaining the required pattern for i in range(m): for j in range(n): if garden[i][j] == -1: if (i + j) % 2 == 0: garden[i][j] = 0 else: garden[i][j] = 1 return \\"YES\\", garden def solve(k, cases): results = [] for case in cases: m, n, r, constraints = case result = garden_arrangement(m, n, constraints) results.append(result) return results def parse_input(input_string): input_lines = input_string.split(\'n\') k = int(input_lines[0]) index = 1 cases = [] for _ in range(k): m, n = map(int, input_lines[index].split()) r = int(input_lines[index+1]) constraints = [] for i in range(r): i, j, t = map(int, input_lines[index+2+i].split()) constraints.append((i, j, t)) cases.append((m, n, r, constraints)) index += 2 + r return k, cases def format_output(results): output_lines = [] for result in results: if result == \\"NO\\": output_lines.append(\\"NO\\") else: output_lines.append(\\"YES\\") for row in result[1]: output_lines.append(\\" \\".join(map(str, row))) return \\"n\\".join(output_lines)"},{"question":"There is an ancient kingdom, which is ruled by a wise king. This kingdom consists of n cities, connected by m bidirectional roads. Each road has a certain toll tax to pass. The king wants to find out the shortest possible distance between every pair of cities. Not only does he want the shortest distance, but he also wants to know the exact path that takes you from one city to another with the least toll tax. Given n, m, and the roads with their respective toll taxes, your task is to help the king find out the shortest distance and the exact path between every pair of cities in his kingdom. Input: The first line contains two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are cities connected by a road with toll tax w. Output: Output n lines, each line containing n elements. The j-th element of the i-th line should be the minimum toll tax from city i to city j. If there is no possible path between i and j, output \\"INF\\". Below that, output the exact paths from city i to city j in the following format: \\"i j: path1 path2 ... pathk\\", where path1, path2, ..., pathk are intermediate cities in the path from i to j. If there are multiple shortest paths, output any of them. If there is no possible path, do not output this path. Examples Input 4 4 1 2 4 2 3 1 3 4 2 1 4 7 Output 0 4 5 7 4 0 1 3 5 1 0 2 7 3 2 0 1 2: 2 1 3: 2 3 1 4: 2 3 4 2 3: 3 2 4: 3 4 3 4: 4","solution":"def shortest_paths(n, m, roads): INF = float(\'inf\') # Initialize distance and path matrices dist = [[INF] * n for _ in range(n)] path = [[-1] * n for _ in range(n)] # Distance to self is zero for i in range(n): dist[i][i] = 0 # Input roads into distance matrix for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w path[u-1][v-1] = v-1 path[v-1][u-1] = u-1 # Floyd-Warshall Algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] path[i][j] = path[i][k] # Format the distance matrix output for i in range(n): for j in range(n): if dist[i][j] == INF: print(\\"INF\\", end=\' \') else: print(dist[i][j], end=\' \') print() # Function to reconstruct path from i to j def construct_path(i, j): if path[i][j] == -1: return [] result = [] while i != j: i = path[i][j] result.append(i + 1) return result # Print all paths for i in range(n): for j in range(n): if i != j and dist[i][j] != INF: p = construct_path(i, j) p.pop(0) # remove the starting point, we only need intermediates print(f\\"{i+1} {j+1}: {\' \'.join(map(str, p))}\\")"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine if you can make the string a palindrome by removing exactly one character. # Constraints - 1 leq |s| leq 200000 - The string `s` consists of only lowercase English letters. # Input Input is given from Standard Input in the following format: `string s` # Output Output \\"YES\\" if you can make the string a palindrome by removing exactly one character. Otherwise, output \\"NO\\". # Examples Input ``` abca ``` Output ``` YES ``` Input ``` abc ``` Output ``` NO ``` Input ``` deified ``` Output ``` YES ```","solution":"def can_form_palindrome_by_removing_one_char(s): Determines if you can make the string a palindrome by removing exactly one character. Args: s (str): The input string. Returns: str: \\"YES\\" if you can make the string a palindrome by removing exactly one character, otherwise \\"NO\\". def is_palindrome(sub): return sub == sub[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing left or right character and check palindrome if is_palindrome(s[left+1:right+1]) or is_palindrome(s[left:right]): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" # Edge case: The string is already a palindrome"},{"question":"You are given a list of available flights between cities and the time it takes to travel for each flight. Jane wants to visit all the cities on the list, and she can start her journey at any city. She can use any flight between the cities in any order, but she must visit each city exactly once and return to the starting city. What is the minimum total travel time required for Jane to complete her journey? Input: - The first line contains an integer n (2 ≤ n ≤ 15) — the number of cities. - The next n lines each contain n integers describing the travel time between cities. The j-th integer in the i-th line denotes the travel time from city i to city j (1 ≤ travel time ≤ 100). All travel times between different cities are positive, and the travel time from a city to itself is 0 (so all diagonal elements of the matrix are 0). Output: - Print one integer — the minimum total travel time required for Jane to visit all cities exactly once and return to the starting city. Examples: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 Input: 3 0 29 20 29 0 15 20 15 0 Output: 64 Note: In the first example, Jane can start from city 0, go to city 1, then to city 3, then to city 2, and return to city 0, which gives the total travel time of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def min_travel_time(n, travel_time_matrix): Returns the minimum total travel time required for Jane to visit all cities exactly once and return to the starting city. def calculate_path_cost(path, travel_time_matrix): cost = 0 for i in range(len(path) - 1): cost += travel_time_matrix[path[i]][path[i+1]] cost += travel_time_matrix[path[-1]][path[0]] # return to the starting city return cost cities = list(range(n)) min_cost = float(\'inf\') for permutation in itertools.permutations(cities): current_cost = calculate_path_cost(permutation, travel_time_matrix) if current_cost < min_cost: min_cost = current_cost return min_cost if __name__ == \\"__main__\\": n = int(input()) travel_time_matrix = [] for _ in range(n): travel_time_matrix.append(list(map(int, input().split()))) print(min_travel_time(n, travel_time_matrix))"},{"question":"You are given an N x N grid with non-negative integers in each cell. Your objective is to find a path from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) such that the sum of the values of the cells on the path is minimized. You can only move right or down at each step. Each test case consists of a single grid. You are asked to find the minimum path sum for each grid provided. Constraints * 1 ≤ N ≤ 1000 * 0 ≤ A_{ij} ≤ 1000 (for 0 ≤ i, j < N) Input The input is given from Standard Input in the following format: ``` N A_{00} A_{01} ... A_{0,N-1} A_{10} A_{11} ... A_{1,N-1} ... A_{N-1,0} A_{N-1,1} ... A_{N-1,N-1} ``` Output Output the minimum path sum for the given grid. Examples Input ``` 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` Explanation Path: 1 → 1 → 3 → 1 → 1 Input ``` 2 1 2 1 1 ``` Output ``` 3 ``` Explanation Path: 1 → 1 → 1","solution":"def min_path_sum(grid): Function to compute the minimum path sum in a given grid. Parameters: grid (list of list): NxN grid of non-negative integers. Returns: int: The minimum path sum from the top-left corner to the bottom-right corner. N = len(grid) # Initialize a 2D list to store the minimum path sum up to each cell dp = [[0] * N for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill in the first row (can only move right) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column (can only move down) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp grid for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner has the minimum path sum return dp[N-1][N-1] # Function to read input and call the min_path_sum function def read_input_and_find_min_path(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) grid = [] idx = 1 for i in range(N): row = list(map(int, data[idx:idx + N])) grid.append(row) idx += N print(min_path_sum(grid))"},{"question":"Emma is a renowned mathematician who is fascinated by sequences and prime numbers. She stumbled upon a sequence problem and needs your help to solve it. You need to develop an algorithm that finds a special sum of a sequence based on a specific condition. Given a sequence of integers and a positive integer m, you are required to compute the sum of the m largest prime numbers in the sequence. If there are fewer than m prime numbers in the sequence, return -1. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Input The first line contains two space-separated integers, N and m (1 ≤ m ≤ N ≤ 100000), where N is the number of elements in the sequence. The second line contains N space-separated integers, the elements of the sequence. Each integer is from the interval [1, 1000000]. Output Output a single integer: the sum of the m largest prime numbers in the sequence or -1 if there are fewer than m prime numbers. Examples Input 10 3 18 29 3 10 5 17 100 23 697 1 Output 69 Input 5 4 4 6 8 10 11 Output -1 Note In the first example, the prime numbers in the sequence are {29, 3, 5, 17, 23}. The largest three are 29, 23, and 17, and their sum is 69. In the second example, the only prime number is 11. Since there are fewer than 4 prime numbers, the output is -1.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_m_largest_primes(sequence, m): primes = [num for num in sequence if is_prime(num)] if len(primes) < m: return -1 primes.sort(reverse=True) return sum(primes[:m]) # Example usage: # N, m = 10, 3 # sequence = [18, 29, 3, 10, 5, 17, 100, 23, 697, 1] # print(sum_of_m_largest_primes(sequence, m)) # Output: 69"},{"question":"Mohan is a software developer who loves experimenting with numbers in his free time. One day, he comes up with a unique problem to determine if a given sequence of integers can be transformed into an arithmetic progression by modifying at most one element of the sequence. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. For instance, the sequence [1, 3, 5, 7] is an arithmetic progression with a common difference of 2. Given an integer array, your task is to determine whether Mohan can change at most one element of the array to transform the sequence into an arithmetic progression. Input The first line contains a single integer N (3 ≤ N ≤ 100) representing the number of elements in the array. The second line contains N space-separated integers A1, A2, ..., AN (0 ≤ Ai ≤ 1000) representing the elements of the array. Output Output \\"YES\\" if Mohan can change at most one element of the sequence to make it an arithmetic progression, otherwise output \\"NO\\". Constraints 3 ≤ N ≤ 100 0 ≤ Ai ≤ 1000 Example 1 Input: 4 1 3 7 7 Output: YES Example 2 Input: 5 5 7 10 12 14 Output: NO Explanation Example 1: In the given sequence [1, 3, 7, 7], by changing the fourth element from 7 to 5, we get the sequence [1, 3, 5, 7], which is an arithmetic progression. Hence, the output is \\"YES\\". Example 2: In the given sequence [5, 7, 10, 12, 14], no single element can be changed to transform the sequence into an arithmetic progression. Hence, the output is \\"NO\\".","solution":"def can_be_arithmetic_progression(nums): def check_modified(idx, val): modified = nums[:] modified[idx] = val diff = modified[1] - modified[0] for i in range(1, len(modified)): if modified[i] - modified[i-1] != diff: return False return True for i in range(len(nums)): original = nums[:] original.pop(i) diffs = [original[j] - original[j-1] for j in range(1, len(original))] if len(set(diffs)) == 1: return \\"YES\\" for i in range(1, len(nums)): diff = nums[i] - nums[i-1] for j in range(len(nums)): if check_modified(j, nums[0] + j * diff): return \\"YES\\" return \\"NO\\""},{"question":"Two friends, Charlie and Dana, are playing a card game using a deck of N cards numbered from 1 to N. They take turns drawing cards from the top of the deck. Charlie always goes first, and after that, they alternate turns. On their turn, a player can draw either one card or two consecutive cards from the top of the deck. The game ends when all cards are drawn. The player who draws the last card wins the game. Given N, determine who will win the game, assuming both players play optimally. Input: First line contains T, the number of test cases. Each test case consists of one line with the number of cards N. Output: For each test case, print \\"Charlie\\" or \\"Dana\\" corresponding to who wins the game. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 1 2 4 SAMPLE OUTPUT Charlie Charlie Dana Explanation In the first test case, Charlie takes the only card and wins the game. In the second test case, Charlie takes both cards and wins the game. In the third test case, Charlie takes one card, leaving Dana with 3 cards. Dana then takes either 1 or 2 cards, but will end up drawing the last card given optimal play. Therefore, in this scenario, Dana wins the game.","solution":"def who_wins_game(n): Determine the winner of the card game with n cards. Charlie wins if n % 3 != 0. Dana wins if n % 3 == 0. if n % 3 == 0: return \\"Dana\\" else: return \\"Charlie\\" def determine_winners(test_cases): results = [] for n in test_cases: results.append(who_wins_game(n)) return results # Interface example def process_input_output(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [int(input_lines[i]) for i in range(1, T + 1)] results = determine_winners(test_cases) return \\"n\\".join(results)"},{"question":"Eva the Robot is trying to clean a grid-shaped room. The grid is a 2D array of dimensions m x n, and each cell can either be dirty or clean. Eva starts at the top-left corner of the grid (cell (1, 1)), and her goal is to clean all dirty cells. Eva can move to an adjacent cell in the grid in any of the four cardinal directions (up, down, left, right), but she cannot move outside the grid or into any obstacles that might be present. Furthermore, Eva cannot step back into a cell once it\'s cleaned. Your task is to determine if it is possible for Eva to clean all dirty cells in the grid. Input: The first line contains two integers m and n (2 ≤ m, n ≤ 100). The next m lines contain n characters each, representing the grid. The character \'.\' represents a clean cell, \'*\' represents a dirty cell, and \'#\' represents an obstacle. Output: Print \\"YES\\" (without the quotes) if Eva can clean all dirty cells, otherwise print \\"NO\\" (without the quotes). Examples: Input: 3 3 *.* .#. *.* Output: NO Input: 4 4 ****. *#* ***** .*..* Output: YES","solution":"def can_eva_clean_all(m, n, grid): def is_within_bounds(x, y): return 0 <= x < m and 0 <= y < n def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if grid[cx][cy] == \'*\': grid[cx][cy] = \'.\' # Clean the cell # Explore all 4 directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if is_within_bounds(nx, ny) and grid[nx][ny] == \'*\': stack.append((nx, ny)) grid = [list(row) for row in grid] # Find all initial dirty cells dirty_cells = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == \'*\'] if not dirty_cells: return \\"YES\\" # Start from the first dirty cell start_x, start_y = dirty_cells[0] dfs(start_x, start_y) # Check if all dirty cells are cleaned for x, y in dirty_cells: if grid[x][y] == \'*\': return \\"NO\\" return \\"YES\\""},{"question":"A farmer has a rectangular field that he wants to divide into smaller rectangular plots for planting different crops. Each plot must have an integer area, and each plot must be exactly 1 unit wide (i.e., width = 1). The farmer will receive instructions to divide the field along its length at specific points. Based on these divisions, he needs to calculate the total number of plots and their respective areas left in his field at different stages. Write a program to simulate this process. Input The input consists of multiple data sets. The first line contains a single integer D, the number of data sets. For each data set, you will be given the following: - A single line containing two integers L and W, the length and width of the field, respectively. - A single line containing an integer N, the number of divisions. - N following lines each contain a single integer X_i, the position along the length of the field where the division occurs. Output For each data set, output: - A single integer P, the total number of plots created. - P integers, each representing the area of a plot in the order from left to right after all divisions have been made. Example Input 2 10 3 2 4 7 12 2 3 3 6 9 Output 3 12 9 9 4 6 6 6 6","solution":"def divide_field(D, datasets): results = [] for data in datasets: L, W, N, divisions = data divisions.sort() plots = [] previous = 0 for d in divisions: plots.append(d - previous) previous = d plots.append(L - previous) areas = [plot * W for plot in plots] results.append((len(plots), areas)) return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") D = int(input_lines[0]) datasets = [] index = 1 for _ in range(D): L, W = map(int, input_lines[index].split()) N = int(input_lines[index + 1]) divisions = [int(input_lines[index + 2 + i]) for i in range(N)] datasets.append((L, W, N, divisions)) index += 2 + N return D, datasets"},{"question":"Mike received a collection of unique integers from his friend John. Mike wants to create several groups from this collection, such that the difference between the maximum and the minimum integer in each group is no more than a given value m. Each integer must belong to exactly one group. Additionally, Mike wants to minimize the number of groups created. Write a program to help Mike determine the minimum number of groups required to fulfill the above conditions. Input The first line of input consists of two integers n and m (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 1,000,000), the number of unique integers in the collection and the maximum allowed difference between the maximum and minimum integer within each group, respectively. The second line of input consists of n integers a_i (1 ≤ a_i ≤ 1,000,000,000), representing the collection of unique integers. Output Print one integer — the minimum number of groups required. Examples Input 6 3 1 5 3 6 9 10 Output 3 Input 4 2 1 2 3 4 Output 2 Note In the first example, the groups can be [1, 3], [5, 6], and [9, 10]. Each group meets the condition where the difference between the maximum and minimum integer does not exceed 3. In the second example, the groups can be [1, 2] and [3, 4]. Each group meets the condition where the difference between the maximum and minimum integer does not exceed 2.","solution":"def min_groups(n, m, arr): Returns the minimum number of groups required such that the difference between the maximum and the minimum integer in each group is no more than m. arr.sort() groups = 0 i = 0 while i < n: groups += 1 j = i while j < n and arr[j] - arr[i] <= m: j += 1 i = j return groups"},{"question":"Sergey\'s friend, Vasya, loves playing treasure hunt games, and he found a new challenge. He has a map that contains a series of locations denoted by positive integers. Each location contains some treasure, represented by its value, and Vasya can only collect treasure in a specific way—by visiting alternating locations starting from any one location. A treasure hunt sequence is defined as collecting treasures from locations i, i+2, i+4,... or i, i-2, i-4,... until there are no valid locations left to visit. One important rule is that Vasya cannot visit two consecutive adjacent locations in one sequence. Your task is to help Vasya find the treasure hunt sequence that maximizes the total amount of treasure he can collect. Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of locations on the map. - The second line contains n positive integers, where the i-th integer denotes the amount of treasure at location i (1 ≤ treasure ≤ 1,000). Output - Print a single integer, the maximum total amount of treasure Vasya can collect. Example Input 6 100 200 100 200 100 200 Output 600 Input 4 5 1 1 5 Output 10 Note In the first example, Vasya can start from location 2 and collect treasures from locations 2, 4, and 6 to get the maximum total of 600. In the second example, Vasya can start from location 1 and collect treasures from locations 1 and 4 to get the maximum total of 10.","solution":"def max_treasure(n, treasures): Finds the maximum total amount of treasure Vasya can collect by visiting alternating locations if n == 1: return treasures[0] max_treasures = [0] * n max_treasures[0] = treasures[0] if n > 1: max_treasures[1] = max(treasures[0], treasures[1]) for i in range(2, n): max_treasures[i] = max(max_treasures[i - 1], max_treasures[i - 2] + treasures[i]) return max_treasures[-1]"},{"question":"A bakery has a number of ovens in a row. Each oven has a baking power which determines how many cakes it can bake in an hour. The bakery owner wants to maximize cake production in a given period by choosing a contiguous sequence of ovens to operate. However, due to some technical constraints, the owner cannot operate a sequence of more than `k` ovens consecutively. Given the baking powers of the ovens and the maximum number `k`, find the maximum number of cakes that can be baked in an hour while complying with the constraints. Input: The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of ovens. The second line contains an integer `k` (1 ≤ k ≤ n) — the maximum number of ovens that can be operated consecutively. The third line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the baking power of each oven. Output: Print a single integer — the maximum number of cakes that can be baked in an hour. Examples: Input: 10 3 4 3 5 2 8 7 6 2 4 9 Output: 21 Input: 5 2 1 2 3 4 5 Output: 9 Note: In the first example, the owner can choose the sequence [8, 7, 6], yielding a total of 21 cakes, which is the maximum for any contiguous sequence of at most 3 ovens. In the second example, the best contiguous sequence of at most 2 ovens is [4, 5], yielding a total of 9 cakes.","solution":"def max_cakes_baked(n, k, baking_powers): Returns the maximum number of cakes that can be baked in an hour by choosing a contiguous sequence of at most k ovens consecutively. # Using a sliding window approach to find the maximum sum of k consecutive ovens. current_sum = sum(baking_powers[:k]) max_sum = current_sum for i in range(k, n): current_sum += baking_powers[i] - baking_powers[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"The task is to implement a system that helps with managing tasks in a to-do list. You have the following operations: * Add a task with a given priority. * Remove a task by its name. * Print all tasks sorted by their priority. Each task has a name (a string) and a priority (an integer). Priorities are positive integers, and lower numbers indicate higher priorities. Tasks with the same priority should be sorted by their name in lexicographical order. Constraints: * The number of operations (N) will not exceed 1000. * Names of tasks will be unique. * The priority will be an integer between 1 and 1000. Input The input will contain a number of lines. Each line will represent one of the following commands: * \'ADD name priority\': Adds a new task with the given name and priority. * \'REMOVE name\': Removes the task with the given name. * \'PRINT\': Prints all tasks sorted by their priority. Example Input ADD task1 1 ADD task2 2 ADD task3 1 PRINT REMOVE task1 PRINT Output task1 1 task3 1 task2 2 task3 1 task2 2 Explanation 1. First, three tasks are added with priorities 1, 2, and 1, respectively. 2. The first PRINT command prints the tasks sorted by priority and then by name. 3. The task \'task1\' is removed. 4. The second PRINT command prints the remaining tasks sorted by priority and name.","solution":"class TaskManager: def __init__(self): self.tasks = {} def add_task(self, name, priority): self.tasks[name] = priority def remove_task(self, name): if name in self.tasks: del self.tasks[name] def print_tasks(self): sorted_tasks = sorted(self.tasks.items(), key=lambda x: (x[1], x[0])) for name, priority in sorted_tasks: print(f\\"{name} {priority}\\") def main(): import sys input = sys.stdin.read commands = input().splitlines() task_manager = TaskManager() for command in commands: parts = command.split() operation = parts[0] if operation == \'ADD\': name, priority = parts[1], int(parts[2]) task_manager.add_task(name, priority) elif operation == \'REMOVE\': name = parts[1] task_manager.remove_task(name) elif operation == \'PRINT\': task_manager.print_tasks() if __name__ == \\"__main__\\": main()"},{"question":"Given a large dataset of integers, you are asked to process the data to find the maximum product of two integers in the list. Your task is to write a function that takes the list of integers and returns the maximum product. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of integers in the list. - The second line contains `n` integers ai (−10^9 ≤ ai ≤ 10^9) — the integers in the list. # Output - Print a single integer — the maximum product of two integers in the list. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 20 ``` Input ``` 4 -1 -2 -3 -4 ``` Output ``` 12 ``` # Note In the first test case, the maximum product is obtained by multiplying 4 and 5. In the second test case, the maximum product is 12, obtained by multiplying -3 and -4.","solution":"def max_product_of_two(nums): Returns the maximum product of two integers from the list. nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2]) # Main function to read input data def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) print(max_product_of_two(nums)) # Uncomment the lines below to run the function with standard input # if __name__ == \\"__main__\\": # main()"},{"question":"Write a program that summarizes a given series of stock prices for a company and determines whether the stock showed a net gain or loss. The stock prices for different days are given as a string. Each valid price is represented by a positive or negative integer, and each price is separated by a space. The program should determine the change in stock price from the start of the series to the end and classify it as a \\"Gain\\" if the final price is higher than the initial price, \\"Loss\\" if it is lower, and \\"No Change\\" if it remains the same. Input: The first line contains a single integer T (1 <= T <= 10000), the number of test cases. Each of the next T lines contains a non-empty string representing the stock prices on different days, with each price separated by a space. The length of the string is at most 100 characters. Output: For each test case, output a single line containing \\"Gain\\" if the stock made a net gain, \\"Loss\\" if it made a net loss, and \\"No Change\\" if there was no change. Example: Input: 3 10 20 30 50 40 30 20 15 15 15 Output: Gain Loss No Change","solution":"def stock_summary(T, price_series): results = [] for series in price_series: prices = list(map(int, series.split())) if prices[-1] > prices[0]: results.append(\\"Gain\\") elif prices[-1] < prices[0]: results.append(\\"Loss\\") else: results.append(\\"No Change\\") return results"},{"question":"You are given a tree with `n` nodes, rooted at node 1. Each node has a value associated with it. You need to respond to `q` queries, each query being of the following types: 1. `1 u x` - Update the value of node `u` to `x`. 2. `2 u` - Calculate the sum of values in the subtree rooted at node `u`. Input: The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000). The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1,000,000) — the values of the nodes. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), meaning there is an edge between node `u` and node `v`. Each of the next `q` lines describes a query in the format mentioned above. Output: For each query of the second type, output the corresponding sum. Example: Input: ``` 5 5 1 2 3 4 5 1 2 1 3 3 4 3 5 2 1 1 2 10 2 2 1 3 7 2 3 ``` Output: ``` 15 10 16 ``` Explanation: Initially, the tree is as follows: ``` 1 / 2 3 / 4 5 ``` With values: ``` 1 2 3 4 5 ``` 1. Subtree sum rooted at node 1: `1 + 2 + 3 + 4 + 5 = 15` 2. Update value of node 2 to 10. 3. Subtree sum rooted at node 2: `10` 4. Update value of node 3 to 7. 5. Subtree sum rooted at node 3: `7 + 4 + 5 = 16`","solution":"class Tree: def __init__(self, n, values, edges): self.n = n self.values = values self.tree = [[] for _ in range(n+1)] self.subtree_sum = [0] * (n + 1) for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) self.parent = [-1] * (n + 1) self.build_subtree_sums(1) def build_subtree_sums(self, node, parent=-1): self.parent[node] = parent self.subtree_sum[node] = self.values[node-1] for child in self.tree[node]: if child != parent: self.build_subtree_sums(child, node) self.subtree_sum[node] += self.subtree_sum[child] def update_value(self, u, x): diff = x - self.values[u-1] self.values[u-1] = x self.update_subtree_sums(u, diff) def update_subtree_sums(self, node, diff): self.subtree_sum[node] += diff if self.parent[node] != -1: self.update_subtree_sums(self.parent[node], diff) def get_subtree_sum(self, u): return self.subtree_sum[u] def process_queries(n, q, values, edges, queries): tree = Tree(n, values, edges) results = [] for query in queries: if query[0] == 1: tree.update_value(query[1], query[2]) elif query[0] == 2: results.append(tree.get_subtree_sum(query[1])) return results # Example usage n = 5 q = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [(2, 1), (1, 2, 10), (2, 2), (1, 3, 7), (2, 3)] print(process_queries(n, q, values, edges, queries)) # Output: [15, 10, 16]"},{"question":"For a given string S, you are required to perform a sequence of operations to manipulate and query the string. Each operation can be one of the following: * add(x): Add the character x to the end of the string S. * remove(): Remove the last character of the string S. If the string is empty, do nothing. * get(i): Print the i-th character of the string S. If i is outside of the bounds of the current string length, print \'?\'. * find(x): Print the zero-based index of the first occurrence of character x in the string S. If the character does not exist, print -1. Constraints * 1 leq q leq 100,000 * 1 leq length of any operation leq 100 * S consists of lower-case alphabetic characters * x and i used in operations are always in valid format according to the description Input The input is given in the following format: q query_1 query_2 : query_q Each query query_i is given by: * add x * remove * get i * find x Output For each get and find operation, print the corresponding results. Example Input 8 add a add b get 1 add c find b remove get 2 find c Output b 1 ? -1","solution":"def perform_operations(queries): Perform a sequence of operations on a string S and print the results accordingly. S = [] result = [] for query in queries: parts = query.split() if parts[0] == \\"add\\": S.append(parts[1]) elif parts[0] == \\"remove\\": if S: S.pop() elif parts[0] == \\"get\\": i = int(parts[1]) if 0 <= i < len(S): result.append(S[i]) else: result.append(\'?\') elif parts[0] == \\"find\\": x = parts[1] if x in S: result.append(S.index(x)) else: result.append(-1) return result"},{"question":"A number of robots are placed in a straight line, and each robot has an initial position and can move to certain other positions based on a set of movement rules. Each rule is a tuple (x, y) which means a robot at position x can move to position y in one step. A robot can apply any sequence of movement rules in any order to reach its destination. Given an initial position, a target position, and a set of movement rules, determine if the robot can reach the target position from the initial position using the given set of movement rules. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of movement rules and the length of the unique positions. The second line contains two integers a and b (0 ≤ a, b < m) — the initial and the target positions. The following n lines each contain two integers xi and yi (0 ≤ xi, yi < m) — the allowed movement rule where a robot can move from position xi to position yi. Output Print \\"YES\\" (without quotes) if the robot can reach the target position b from its initial position a. Otherwise, print \\"NO\\" (without quotes). Examples Input 4 10 1 7 1 2 2 3 3 5 5 7 Output YES Input 2 5 3 4 1 2 2 3 Output NO Note In the first example, the robot can move from position 1 -> 2 -> 3 -> 5 -> 7, thus it can reach the target. In the second example, there are no movement rules allowing the robot to move from position 3 to position 4, so it cannot reach the target.","solution":"def can_reach_target(n, m, initial_position, target_position, movement_rules): from collections import defaultdict, deque # Build the graph from movement rules graph = defaultdict(list) for x, y in movement_rules: graph[x].append(y) # BFS to find if we can reach the target position from the initial position queue = deque([initial_position]) visited = set() while queue: current = queue.popleft() if current == target_position: return \\"YES\\" if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"Alice loves playing with arrays. She has an array of integers and she likes to modify it using multiple operations. The operations can be of three types: 1. \\"1 x y\\" — add y to the element at index x of the array. 2. \\"2 x y\\" — multiply the element at index x of the array by y. 3. \\"3 l r k\\" — find the k-th smallest element in the subarray from index l to index r (inclusive). Alice wants your help in processing a series of operations efficiently. Can you help her? Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. The next q lines each describe an operation in one of the following formats: * \\"1 x y\\" (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9) — this operation adds y to the element at index x. * \\"2 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) — this operation multiplies the element at index x by y. * \\"3 l r k\\" (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ r - l + 1) — this operation finds the k-th smallest element in the subarray from index l to index r. Output For each query of the 3rd type, print the k-th smallest element in the specified subarray on a new line. Examples Input 6 5 5 3 8 6 2 1 1 2 2 2 4 2 3 1 6 3 3 4 6 1 3 1 6 5 Output 5 2 6 Note In the example, the initial array is [5, 3, 8, 6, 2, 1]. After the first operation (\\"1 2 2\\"), the array becomes [5, 5, 8, 6, 2, 1]. After the second operation (\\"2 4 2\\"), the array becomes [5, 5, 8, 12, 2, 1]. For the first query of the third type (\\"3 1 6 3\\"), the subarray is [5, 5, 8, 12, 2, 1] and the 3rd smallest element is 5. For the second query of the third type (\\"3 4 6 1\\"), the subarray is [12, 2, 1] and the 1st smallest element is 1. For the third query of the third type (\\"3 1 6 5\\"), the subarray is [5, 5, 8, 12, 2, 1] and the 5th smallest element is 8.","solution":"def update_add(array, x, y): Add y to the element at index x-1 of the array. array[x-1] += y def update_multiply(array, x, y): Multiply the element at index x-1 of the array by y. array[x-1] *= y def find_kth_smallest(array, l, r, k): Find the k-th smallest element in the subarray from index l-1 to r-1 inclusive. subarray = array[l-1:r] subarray.sort() return subarray[k-1] def process_operations(n, array, operations): results = [] for operation in operations: op = operation[0] if op == 1: update_add(array, operation[1], operation[2]) elif op == 2: update_multiply(array, operation[1], operation[2]) elif op == 3: result = find_kth_smallest(array, operation[1], operation[2], operation[3]) results.append(result) return results"},{"question":"You are given two numbers, X and N. Your task is to compute the N-th power of X. Given the constraints, ensure your solution handles large numbers efficiently. Constraints - 1 leq X leq 100 - 0 leq N leq 100 - Both X and N are integers. Input Input is given from Standard Input in the following format: ``` X N ``` Output Print the result of X raised to the power of N. Examples Input 2 10 Output 1024 Input 5 3 Output 125","solution":"def nth_power(X, N): Computes the N-th power of X. return X ** N if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split() X = int(input_data[0]) N = int(input_data[1]) print(nth_power(X, N))"},{"question":"In a warehouse, there are various types of packages that need to be delivered. Each package has a delivery deadline and a delivery time requirement. Your task is to write a program that determines the maximum number of packages that can be delivered without missing any deadlines. Each package is characterized by a delivery deadline (the latest time by which the package must be delivered) and a delivery time requirement (how long it takes to deliver the package). You can only work on one package at a time. input The input consists of one dataset. Input data is given in the following format: Q n d1 t1 d2 t2 ... dn tn Q (0 ≤ Q ≤ 100) on the first line is the number of scenarios for which you need to find the maximum number of packages that can be delivered. Each scenario starts with an integer n (0 ≤ n ≤ 1000), the number of packages in that scenario. Following are 2*n integers which denote the delivery deadlines di (1 ≤ di ≤ 1000) and the delivery time requirements ti (1 ≤ ti ≤ 1000) for each package. output Output the maximum number of packages that can be delivered on one line for each scenario. Example Input 2 3 4 2 2 1 3 2 5 3 2 4 1 2 4 6 1 2 1 Output 2 4","solution":"def max_deliverable_packages(Q, scenarios): results = [] for i in range(Q): n = scenarios[i][0] if n == 0: results.append(0) continue packages = [(scenarios[i][2*j+1], scenarios[i][2*j+2]) for j in range(n)] packages.sort(key=lambda x: x[0]) current_time = 0 count = 0 for deadline, time in packages: if current_time + time <= deadline: current_time += time count += 1 results.append(count) return results"},{"question":"Alice and Bob are trying out a new card game. The game is played with a deck of cards consisting of `n` unique cards, each card having a distinct integer value from 1 to `n`. The game goes as follows: - The cards are shuffled and dealt into two equal piles, one for Alice and one for Bob. If the number of cards `n` is odd, Alice receives one more card than Bob. - Both players play optimally and alternately pick cards from the top of their piles starting with Alice. In each turn, the player selects the highest valued card from the top of their pile available on their turn. - The game score is calculated as follows: points for a player are equal to the sum of the integer values of all the cards picked by that player during the game. Your task is to determine the final scores of Alice and Bob, given they both play optimally. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of unique cards in the deck. Output On a single line print two space-separated integers — Alice\'s and Bob\'s scores correspondingly provided that both players play optimally. Examples Input 5 Output 9 6 Input 8 Output 20 16 Note For the first test sample, the pile of cards for Alice will be [5, 4, 3] and for Bob will be [2, 1]. Alice picks cards 5, 3, and Bob picks cards 4, 2. For the second test sample, the pile of cards for Alice will be [8, 7, 6, 5] and for Bob will be [4, 3, 2, 1]. Alice picks cards 8, 6 and Bob picks cards 7, 5.","solution":"def alice_bob_scores(n): Determines the final scores of Alice and Bob when playing optimally with n unique cards. Parameters: n (int): The number of unique cards in the deck. Returns: tuple: Two integers representing Alice\'s and Bob\'s scores, respectively. alice_score = 0 bob_score = 0 current_card = n turn = 1 # Alice starts first while current_card > 0: if turn % 2 != 0: alice_score += current_card else: bob_score += current_card current_card -= 1 turn += 1 return alice_score, bob_score"},{"question":"**Problem Description** Alex is building a new system where he needs to keep track of temperatures recorded throughout the day. He records the temperature every hour in degrees Celsius. He needs to write a program to find out the difference between the highest and the lowest temperature recorded in a day. Additionally, he wants the program to provide a smoothed temperature trend by calculating the running average of temperatures recorded so far at each hour. The running average at hour `i` is defined as the mean of temperatures from the first hour to the ith hour. Your task is to help Alex by writing a program that processes the temperature data and provides the necessary information. Input - The first line contains an integer `t`, the number of test cases. - Each test case starts with an integer `N`, the number of temperature recordings for the day. - The next line contains `N` space-separated floating-point numbers representing the temperatures recorded for each hour. Output For each test case, print two lines: 1. The difference between the highest and the lowest temperature recorded, rounded to 2 decimal places. 2. The running averages of temperatures recorded so far at each hour, rounded to 2 decimal places, in a single line separated by spaces. Constraints - 0 < t < 100 - 1 ≤ N ≤ 24 - -50.0 ≤ temperature ≤ 50.0 Example Input: 2 5 12.5 14.0 13.5 15.0 14.5 3 -5.0 -10.0 0.0 Output: 2.50 12.50 13.25 13.33 13.75 13.90 10.00 -5.00 -7.50 -5.00","solution":"def process_temperatures(t, test_cases): results = [] for case in test_cases: N, temperatures = case min_temp = min(temperatures) max_temp = max(temperatures) difference = round(max_temp - min_temp, 2) running_averages = [] cum_sum = 0.0 for i in range(N): cum_sum += temperatures[i] running_avg = round(cum_sum / (i + 1), 2) running_averages.append(running_avg) results.append((difference, running_averages)) return results"},{"question":"You are given a sequence of n distinct integers that are initially presented in a random order. Your task is to sort these integers into non-decreasing order using the minimum number of adjacent swaps. An adjacent swap means swapping two consecutive elements in the sequence. Input The input consists of multiple data sets. Each data set starts with an integer n (1 ≤ n ≤ 10,000) indicating the number of integers in the sequence. The next line contains n distinct integers separated by spaces. The input ends with a line containing zero, which should not be processed. Output For each test case, print its case number and the minimum number of adjacent swaps required to sort the sequence. Example Input 5 3 1 2 5 4 4 4 3 2 1 0 Output Case 1: 3 Case 2: 6","solution":"def count_inversions(arr): The function returns the number of inversions in the array if len(arr) < 2: return 0 mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] inversions = count_inversions(left) + count_inversions(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 inversions += len(left) - i k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 return inversions def minimum_adjacent_swaps(input_list): The function returns the minimum number of adjacent swaps required to sort the input list count = 1 result = [] for data in input_list: n, *arr = data if n == 0: break inversions = count_inversions(arr) result.append(f\\"Case {count}: {inversions}\\") count += 1 return result"},{"question":"A factory has a batch of n machines, each set to a specific initial workload w_i. The factory runs for m hours, during which the machines process tasks continuously. Each hour, the machine with the maximum workload decreases its workload by 1 (a task is completed), while the machine with the minimum workload increases its workload by 1 (new tasks are assigned). If there are multiple machines with the same maximum or minimum workloads, choose one at random. You need to determine the final difference in workload between the machine with the highest workload and the machine with the lowest workload after m hours. Input The first line contains two integers n and m (1 ≤ n ≤ 500 000, 0 ≤ m ≤ 10^9) — the number of machines and the number of hours. The second line contains n integers, the i-th of them is w_i (1 ≤ w_i ≤ 10^9) — initial workload of the i-th machine. Output Print a single line containing the difference between the highest and lowest workloads after m hours. Examples Input 4 1 5 3 3 6 Output 2 Input 3 2 7 7 7 Output 0 Note Let\'s look at how workloads change through each hour in the first sample. 1. [5, 3, 3, 6] 2. [6, 2, 3, 6] or [5, 3, 4, 6] So the answer is 6 - 4 = 2. In the second sample, the workloads will remain the same for each machine.","solution":"def workload_difference_after_hours(n, m, workloads): Determines the final difference in workload between the machine with the highest workload and the machine with the lowest workload after m hours. min_workload = min(workloads) max_workload = max(workloads) possible_min = min_workload + m // n possible_max = max_workload - m // n if m % n != 0: possible_min += 1 return max(0, possible_max - possible_min)"},{"question":"Alice loves planning her garden layout each spring. This year, she has n flower beds arranged in a row, each holding exactly one type of plant and planted with exactly one plant in each bed. Alice wants to have a specific sequence of plants in all the flower beds, but she can only rearrange plants using specific swap operations. Alice has a list of allowed swaps and wants to know the minimum number of swaps required to achieve her desired plant arrangement. A swap operation allows Alice to swap the plants in two specified positions. For example, swap(1, 3) allows Alice to swap the plants in flower bed 1 with the plant in flower bed 3. Alice can use each swap operation any number of times. Given the initial arrangement of plants, the desired arrangement, and the list of allowed swap operations, determine the minimum number of swaps Alice needs to perform to rearrange the plants as she desires. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of flower beds. - The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the initial arrangement of plants in flower beds. - The third line contains a sequence of n integers b1, b2, ..., bn (1 ≤ bi ≤ n) — the desired arrangement of plants in flower beds. - The fourth line contains an integer m (1 ≤ m ≤ 1000) — the number of allowed swap operations. - The following m lines each contain two integers ci and di (1 ≤ ci, di ≤ n) — a pair of indices indicating that plants in positions ci and di can be swapped. Output: Print a single integer — the minimum number of swaps required to achieve the desired arrangement. If it is not possible to achieve the desired arrangement, print -1. Examples: Input: 5 1 3 4 2 5 5 3 2 1 4 4 1 2 1 3 4 5 3 4 Output: 3 Input: 4 1 2 3 4 4 3 2 1 1 2 3 Output: -1 Note: In the first example, Alice can achieve the desired arrangement in 3 swaps: - Swap positions 1 and 5 to get [5, 3, 4, 2, 1] - Swap positions 3 and 4 to get [5, 3, 2, 4, 1] - Swap positions 4 and 5 to get [5, 3, 2, 1, 4] In the second example, with only one allowed swap operation, it is impossible to achieve the desired arrangement, so the output is -1.","solution":"def min_swaps_to_target(n, a, b, m, swaps): from collections import defaultdict, deque if a == b: return 0 def can_swap(x, y, adjacency_list, visited): if x == y: return True queue = deque([x]) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: if neighbor == y: return True visited[neighbor] = True queue.append(neighbor) return False adjacency_list = defaultdict(list) for c, d in swaps: adjacency_list[c-1].append(d-1) adjacency_list[d-1].append(c-1) min_swaps = 0 for i in range(n): if a[i] != b[i]: target_index = -1 for j in range(i, n): if a[j] == b[i]: target_index = j break if target_index == -1: return -1 # The plant was not found in the initial arrangement visited = [False] * n if can_swap(i, target_index, adjacency_list, visited): a[target_index], a[i] = a[i], a[target_index] min_swaps += 1 else: return -1 # It\'s impossible to obtain the target arrangement return min_swaps"},{"question":"Alex and Maga are organizing their bookshelf and need some help finding books. They have a simplified catalog system where each book\'s position on the shelf is represented by a single lowercase English letter. They have a list of books they want to find and need to know the position of the first occurrence of each book on the shelf. A string is given representing the arrangement of books on a shelf. Each character in the string denotes a unique book. Additionally, you are given a list of book characters you need to find on the shelf. For each book character in the list, determine the position (1-based index) of its first occurrence in the shelf string. Input: The first line contains an integer `n`, the length of the string (number of books). The second line contains the string of length `n` representing the arrangement of books. The third line contains an integer `m`, the number of books to find. The fourth line contains `m` space-separated characters, each representing a book to find. Output: Output m integers, each representing the 1-based position of the first occurrence of the corresponding book in the shelf string. If a book character is not found in the string, output `-1` for that character. Constraints: 1 ≤ n ≤ 100000 1 ≤ m ≤ 100000 All book characters are lowercase English letters. SAMPLE INPUT 10 abcdefghij 3 a e k SAMPLE OUTPUT 1 5 -1 Explanation: In the list of books to find, \'a\' is at position 1, \'e\' is at position 5, and \'k\' is not found in the string, resulting in -1.","solution":"def find_books_positions(n, shelf, m, books_to_find): Finds the first occurrence positions of each book character in the list. Args: n (int): Length of the shelf string. shelf (str): String representing the arrangement of books on the shelf. m (int): Number of books to find. books_to_find (list): List of book characters to find on the shelf. Returns: list: A list of integers representing the 1-based positions of the first occurrences of each book in books_to_find. positions = [] for book in books_to_find: pos = shelf.find(book) if pos == -1: positions.append(-1) else: positions.append(pos + 1) return positions"},{"question":"Description Create a Python function that takes a string as input and returns the shortest possible string that can be achieved by repeatedly removing one occurrence of two consecutive characters that are the same. Input Format A single line containing a non-empty string s, consisting only of lowercase characters (1 ≤ |s| ≤ 10^5). Output Format A single string that is the result of repeatedly removing pairs of consecutive characters that are the same. Examples Input abbaca Output ca Input aabbcc Output (empty string) Explanation For the first example, remove \\"bb\\" which gives \\"aaca\\", then remove \\"aa\\" which gives \\"ca\\". For the second example, repeatedly removing pairs will result in an empty string.","solution":"def remove_consecutive_duplicates(s): Removes pairs of consecutive duplicate characters iteratively until no more pairs exist. Parameters: s (str): Input string consisting only of lowercase characters. Returns: str: The shortest possible string after removing pairs of consecutive duplicates. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"A group of friends is planning to play a treasure hunt game at the local park. To make the game more interesting, they decide to place several clues at different locations in the park. Each friend must start at a specific location and visit all other locations exactly once to collect all the clues and return to the starting location. A distance matrix is provided, showing the distances between every pair of locations in the park. Your task is to determine the shortest possible route that each friend can take to complete the treasure hunt. For simplicity, the park\'s layout can be represented as a complete graph where locations are nodes and the distances between them are the weights of the edges. # Input The input consists of multiple datasets, with each dataset describing a different scenario. The last dataset is followed by a line containing a single zero. For each dataset: - The first line contains a single integer `n` (3 ≤ n ≤ 10), representing the number of locations (including the starting location). - The next `n` lines each contain `n` integers, representing the distance matrix where the `j-th` integer in the `i-th` line represents the distance between location i+1 and location j+1 (1 ≤ distance ≤ 100). # Output For each dataset, the output should be a single line containing the length of the shortest route that starts at the first location, visits all other locations exactly once, and returns to the starting location. The answer should be a floating point number with three digits after the decimal point. # Example **Input** ```plaintext 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 21 20 21 0 0 ``` **Output** ```plaintext 80.000 70.000 ```","solution":"import itertools def traveling_salesman_distance(n, distance_matrix): # Memoization dictionary to store computed results memo = {} # All nodes except the starting one nodes = list(range(1, n)) # Define the recursive function for TSP def tsp(position, visited): if visited == (1 << n) - 1: # If all nodes are visited return distance_matrix[position][0] # return to the start if (position, visited) in memo: return memo[(position, visited)] min_cost = float(\'inf\') for next_node in range(1, n): if visited & (1 << next_node) == 0: # If next_node is not visited new_visited = visited | (1 << next_node) cost = distance_matrix[position][next_node] + tsp(next_node, new_visited) if cost < min_cost: min_cost = cost memo[(position, visited)] = min_cost return min_cost # Start the TSP from position 0 with only position 0 visited result = tsp(0, 1) return f\\"{result:.3f}\\" def parse_input(input_str): data = input_str.strip().split(\'n\') index = 0 results = [] while index < len(data): n = int(data[index]) if n == 0: break index += 1 distance_matrix = [] for _ in range(n): distance_row = list(map(int, data[index].split())) distance_matrix.append(distance_row) index += 1 results.append(traveling_salesman_distance(n, distance_matrix)) return \'n\'.join(results)"},{"question":"Storage Optimization Write a program to manage a warehouse\'s storage operations. The warehouse consists of a series of storage tanks arranged in a line. Each tank has a specific capacity and initially holds a certain amount of material. Your program needs to handle a series of operations to manipulate the storage. The operations are as follows: - fill a x: Fill the a-th tank with x units of material, without exceeding its capacity. - transfer a b x: Transfer x units of material from the a-th tank to the b-th tank, without exceeding the capacity of the b-th tank. If the a-th tank has less than x units, transfer all available material. - check a: Print the current amount of material in the a-th tank. Constraints: - 1 leq n leq 1000 (number of storage tanks) - 1 leq capacity of each tank leq 1000 - 0 leq initial amount of material in each tank leq its capacity - 1 leq q leq 100 (number of operations) - 0 leq x leq 1000 - 0 leq a, b < n Input The first line contains an integer n, the number of tanks. The second line contains n integers, the capacities of the tanks. The third line contains n integers, the initial amount of material in each tank. The fourth line contains an integer q, the number of operations. The next q lines contain the operations in the aforementioned format. Output For each check command, print the current amount of material in the specified tank. Examples Input 5 10 20 30 40 50 5 10 15 20 25 4 fill 2 10 transfer 1 3 5 check 2 check 3 Output 25 25 Input 3 15 25 35 5 15 25 3 fill 0 10 transfer 2 1 5 check 1 Output 20","solution":"def manage_storage(n, capacities, initial_materials, operations): for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"fill\\": a = int(parts[1]) x = int(parts[2]) initial_materials[a] = min(initial_materials[a] + x, capacities[a]) elif cmd == \\"transfer\\": a = int(parts[1]) b = int(parts[2]) x = int(parts[3]) transfer_amount = min(x, initial_materials[a], capacities[b] - initial_materials[b]) initial_materials[a] -= transfer_amount initial_materials[b] += transfer_amount elif cmd == \\"check\\": a = int(parts[1]) print(initial_materials[a]) # Example usage: n = 5 capacities = [10, 20, 30, 40, 50] initial_materials = [5, 10, 15, 20, 25] operations = [\\"fill 2 10\\", \\"transfer 1 3 5\\", \\"check 2\\", \\"check 3\\"] manage_storage(n, capacities, initial_materials, operations)"},{"question":"You are tasked with managing a team of developers working on a dynamic array library. In this problem, you will implement a simplified version of a dynamic array with the ability to add and remove elements and to query the current state of elements in the dynamic array. Your task is to implement a class `DynamicArray` with the following methods: 1. `add(x: int) -> None`: Adds the integer x to the end of the dynamic array. 2. `remove(x: int) -> bool`: Removes the first occurrence of the integer x from the dynamic array. Returns `True` if the element was successfully removed, and `False` if the element was not found. 3. `query(l: int, r: int) -> List[int]`: Returns the sublist of elements from index l to index r (inclusive) from the dynamic array. Constraints: - 1 ≤ number of operations ≤ 10^5 - -10^9 ≤ x ≤ 10^9 for the add and remove operations. - 0 ≤ l ≤ r < length of dynamic array for the query operation. Input: - The input is given from Standard Input in the following format: - The first line contains an integer n denoting the number of operations. - The next n lines describe operations, where each operation is one of the following: - `add x`: Adds the integer x to the dynamic array. - `remove x`: Removes the integer x from the dynamic array. - `query l r`: Queries the sublist of elements from index l to index r (inclusive). Output: - For each `query` operation, print the sublist of integers in a single line, separated by spaces. Example: Input: ``` 6 add 1 add 2 add 3 add 4 query 1 3 remove 2 query 0 2 ``` Output: ``` 2 3 4 1 3 ``` Notes: - Implement the `DynamicArray` class such that the operations are efficient enough to handle up to 100,000 operations. - All operations should function correctly irrespective of order or repetition.","solution":"class DynamicArray: def __init__(self): self.data = [] def add(self, x: int) -> None: self.data.append(x) def remove(self, x: int) -> bool: try: self.data.remove(x) return True except ValueError: return False def query(self, l: int, r: int) -> list: return self.data[l:r+1]"},{"question":"In a distant land, there exist N mystical trees arranged in a straight line. Each tree has a magical power denoted by an integer value. The guardian of the forest wants to perform a ritual to merge certain pairs of trees. A pair of trees can only be merged if their magical power difference is within a specified limit L. After merging two trees, the resulting tree has a magical power equal to the sum of the individual magical powers of the original trees. The guardian seeks to know the maximum number of pairs of trees that can be merged directly. Input The first line contains two integers, N (1 ≤ N ≤ 10^5) and L (0 ≤ L ≤ 10^5). The second line contains N integers p_1, p_2, ..., p_N (0 ≤ p_i ≤ 10^9) — the magical powers of the trees. Output Output contains only one number — the maximum number of pairs of trees that can be merged directly. Example Input 5 10 1 5 3 9 12 Output 2 Note In the given example, we can merge the following pairs: 1. Merge the tree with power 1 and the tree with power 5 (|1-5| = 4 ≤ 10) 2. Merge the tree with power 3 and the tree with power 9 (|3-9| = 6 ≤ 10) Therefore, we can merge 2 pairs of trees directly.","solution":"def max_pairs_of_trees(N, L, powers): Calculates the maximum number of pairs of trees that can be merged directly. Parameters: N (int): Number of trees. L (int): Maximum allowed difference. powers (list of int): Magical powers of the trees. Returns: int: Maximum number of pairs of trees that can be merged. powers.sort() i, j = 0, 1 merge_count = 0 while j < N: if abs(powers[j] - powers[i]) <= L: merge_count += 1 i += 2 j += 2 else: if abs(powers[j] - powers[i]) > L: j += 1 if j - i > 1: i += 1 return merge_count"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid either contains a treasure (\'T\') or is empty (\'.\'). Your task is to determine the maximum number of treasures that can be collected by walking through columns sequentially from the first column to the last, moving only within a single row at a time. At each step, you can choose to stay in the same row or move directly to any other row in the next column, but you can only move to columns one step forward (i.e., from column j to column j+1). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1 000), the number of rows and columns in the grid respectively. Each of the following n lines contains m characters, representing the grid. \'T\' indicates a treasure, and \'.\' indicates an empty cell. Output Print a single integer, the maximum number of treasures that can be collected. Example Input 3 4 T..T .T.T T... Output 3 Explanation One possible way to collect the maximum number of treasures is to start from row 0, column 0, move to row 0, column 1, switch to row 1, column 2, and finally switch to row 2, column 3. This way, you can collect 3 treasures: from grid[0][0], grid[1][2], and grid[2][3].","solution":"def max_treasures(n, m, grid): # Initializing an array to store the maximum number of treasures that can be collected ending in each cell of the first column dp = [0] * n # Fill in the dp array based on the first column of the grid for i in range(n): if grid[i][0] == \'T\': dp[i] = 1 # Traverse the grid column by column for j in range(1, m): new_dp = [0] * n for i in range(n): # Check the value we can come from in the previous column max_prev = max(dp) # get the max value from the previous column if grid[i][j] == \'T\': new_dp[i] = max_prev + 1 else: new_dp[i] = max_prev dp = new_dp # The answer is the maximum value in the last column return max(dp)"},{"question":"Sarah is working on a system for optimizing delivery routes. She has a number of deliveries she needs to make, each represented by a unique positive integer. She can optimize the delivery process by grouping certain deliveries together into clusters. Each cluster can only consist of contiguous sequential deliveries (e.g., deliveries numbered 3, 4, 5 can form a cluster, but 3, 5 cannot). To minimize costs, Sarah wants to ensure that no two clusters overlap and each delivery is part of exactly one cluster. Additionally, the sum of deliveries in each cluster should not exceed a given threshold, `k`. Write a program to help Sarah determine the minimum number of clusters needed to group all the deliveries if such clustering is possible. If it is not possible to create such clusters, your program should return -1. Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), where `n` is the number of deliveries and `k` is the maximum sum allowed for any cluster. - The second line contains `n` integers `d1, d2, …, dn` (1 ≤ di ≤ 10^9) representing the delivery numbers. Output - If it is possible to group deliveries into clusters such that each cluster\'s sum does not exceed `k`, print the minimum number of clusters. Otherwise, print -1. Example Input 6 10 2 3 5 1 6 4 Output 3 Input 4 5 6 7 8 9 Output -1 Explanation In the first example, one possible optimal clustering is [2, 3, 5], [1, 6], and [4], each cluster having a sum of ≤ 10. In the second example, it\'s impossible to form any cluster because every individual delivery exceeds the threshold `k`.","solution":"def min_clusters(n, k, deliveries): clusters = 0 current_sum = 0 for delivery in deliveries: if delivery > k: return -1 if current_sum + delivery > k: clusters += 1 current_sum = delivery else: current_sum += delivery if current_sum > 0: clusters += 1 return clusters"},{"question":"John is planning a hiking trip and needs to carry some items to survive during his hike. Each item has a weight and a value (benefit). John can only carry a maximum weight of W. John wants to know the maximum total value of items that he can carry without exceeding the weight limit. Write a function that: * Takes in two integers, `n` (the number of items) and `W` (the maximum weight John can carry). * Takes in two lists of integers, `weights` and `values` of length `n`, where `weights[i]` is the weight of the ith item and `values[i]` is the value of the ith item. The function should return an integer representing the maximum value of items John can carry. Input The first line contains two integers `n` (number of items) and `W` (maximum weight John can carry). The second line contains `n` space-separated integers representing the weights of the items. The third line contains `n` space-separated integers representing the values of the items. Output An integer representing the maximum value of items John can carry. Examples Input 4 7 2 3 4 5 3 4 5 7 Output 10 Input 3 50 10 20 30 60 100 120 Output 220 Note In the first example, John can carry items with weights 2 and 5 for a total value of 10. In the second example, John can carry all the items because the total weight (60) does not exceed 50, resulting in a total value of 220.","solution":"def knapsack(n, W, weights, values): Returns the maximum value of items that can be carried without exceeding the weight limit W. Args: n: int - the number of items W: int - the maximum weight John can carry weights: List[int] - the weights of the items values: List[int] - the values of the items Returns: int - the maximum value of items that can be carried dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, W + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"You are given two strings of equal length consisting of lowercase English letters. Your task is to determine the number of positions where the two strings have the same character. Specifically, you need to find the number of indices i (1 ≤ i ≤ n) such that the i-th character of the first string is equal to the i-th character of the second string. Input The first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the strings. The second line contains a string a consisting of n lowercase English letters. The third line contains a string b consisting of n lowercase English letters. Output Output a single integer — the number of positions where the characters of the strings a and b match. Example Input 5 abcde abfde Output 4 Note In the example given, strings \\"abcde\\" and \\"abfde\\" have the same characters at positions 1, 2, 4, and 5. Thus, the output is 4.","solution":"def count_matching_positions(n, a, b): Counts the number of positions where two strings have the same character. :param n: Length of the strings :param a: First string :param b: Second string :return: Number of matching positions matching_positions = 0 for i in range(n): if a[i] == b[i]: matching_positions += 1 return matching_positions"},{"question":"You are given an array `a` consisting of `n` integers. You need to perform `q` queries on the array. Each query can be one of the following types: 1. `1 x y`: Update the `x-th` element of the array to `y`. 2. `2 l r`: Count the number of perfect squares in the subarray `a[l...r]`. A perfect square is an integer that is the square of some integer. For example, 1, 4, 9, and 16 are perfect squares. Your task is to process all the queries and output the answer for each query of the second type. # Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of queries, respectively. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the initial elements of the array. - The next `q` lines describe the queries. Each query is given as two space-separated integers. If the query is type `1`, it is followed by integers `x` and `y` (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9). If the query is type `2`, it is followed by integers `l` and `r` (1 ≤ l ≤ r ≤ n). # Output For each query of type `2`, output a single integer — the number of perfect squares in the subarray `a[l...r]`. # Example Input ``` 7 4 1 4 9 16 25 36 49 2 1 7 1 4 50 2 1 7 2 2 5 2 3 3 ``` Output ``` 7 6 3 1 ``` # Note The initial array is `[1, 4, 9, 16, 25, 36, 49]`. The number of perfect squares in the full array is 7. After updating the 4th element to 50, the array becomes `[1, 4, 9, 50, 25, 36, 49]`. The number of perfect squares in the full array is now 6, in the subarray `[4, 9, 50, 25]` is 3, and in the subarray `[9, 50]` is 1.","solution":"import math def is_perfect_square(x): Check if x is a perfect square. root = int(math.sqrt(x)) return root * root == x def process_queries(n, q, array, queries): results = [] for query in queries: if query[0] == 1: x, y = query[1], query[2] array[x-1] = y elif query[0] == 2: l, r = query[1], query[2] count = sum(is_perfect_square(array[i-1]) for i in range(l, r + 1)) results.append(count) return results"},{"question":"You are working on a file system simulation. In this file system, there are three types of operations that can be performed on files and directories: 1. **CREATE path**: Create a new file or directory at the given path if it does not already exist. 2. **DELETE path**: Delete the file or directory at the given path if it exists. If it is a directory, it should delete all its contents recursively. 3. **LIST path**: List all files and directories at the given path in lexicographical order. The results should include filenames and directory names without their full paths. A path is a string that represents the location of a file or directory in the file system. A path consists of one or more directory or file names separated by slashes. For example, a valid path could be `/home/user/documents/file.txt`. Your task is to implement the simulation of this file system. Initially, the file system is empty. Input The input starts with an integer `n` (1 ≤ n ≤ 10^4) - the number of operations to be performed. Each of the next `n` lines contains one of the three operations mentioned above. - **CREATE path**: Create a new file or directory at the given path. - **DELETE path**: Delete the file or directory at the given path. - **LIST path**: List all files and directories at the given path in lexicographical order. Output For each `LIST path` operation, output the list of files and directories at the given path, one per line. If the path does not exist or if it\'s a file, output the string \\"Path not found\\". Example Input 10 CREATE /a CREATE /a/b CREATE /a/b/c LIST /a CREATE /a/x LIST /a DELETE /a/b LIST /a LIST /a/b LIST /a/x Output b x b x Path not found Explanation - After creating `/a`, `/a/b` and `/a/b/c`, listing `/a` should show `b` since it is the only sub-directory. - Adding `/a/x` and listing `/a` should show `b` and `x`. - After deleting `/a/b`, listing `/a` should only show `x`. - Listing `/a/b` should result in \\"Path not found\\" as `/a/b` no longer exists. - Finally, listing `/a/x` should correctly show paths within the created file system. Make sure to properly handle edge cases, such as creating nested paths directly or deleting non-existing paths.","solution":"class FileSystem: def __init__(self): self.fs = {} def create(self, path: str): parts = path.strip(\\"/\\").split(\\"/\\") current = self.fs for part in parts: if part not in current: current[part] = {} current = current[part] def delete(self, path: str): parts = path.strip(\\"/\\").split(\\"/\\") current = self.fs stack = [] for part in parts: if part not in current: return # path does not exist stack.append((current, part)) current = current[part] stack[-1][0].pop(stack[-1][1]) def list(self, path: str): parts = path.strip(\\"/\\").split(\\"/\\") current = self.fs for part in parts: if not part: continue if part not in current: return \\"Path not found\\" current = current[part] if not isinstance(current, dict): return \\"Path not found\\" return sorted(current.keys()) # Wrapper to handle operations and I/O def file_system_simulation(n, operations): fs = FileSystem() result = [] for operation in operations: op_parts = operation.split() op = op_parts[0] path = op_parts[1] if op == \\"CREATE\\": fs.create(path) elif op == \\"DELETE\\": fs.delete(path) elif op == \\"LIST\\": listing = fs.list(path) if listing == \\"Path not found\\": result.append(\\"Path not found\\") else: result.extend(listing) return result"},{"question":"In a faraway land, there exists a magical forest governed by the Great Sorcerer. The forest is protected by a series of mystical gates, each of which can only be opened by a unique spell combination. These spells are represented by strings composed of lowercase letters. A spell is deemed powerful if it meets both of the following conditions: 1. It contains at least one vowel (a, e, i, o, u). 2. None of the consonants appear consecutively for more than two times in a row. The Great Sorcerer has provided you with a spell string `s` which you need to verify for its power. Write a program to determine if the given string `s` is a powerful spell. # Input The first line contains a string `s` consisting of lowercase English letters. The input limits are: - The length of the string will be between 1 and 100 characters. # Output Print \\"YES\\" if the spell is powerful, otherwise print \\"NO\\". # Examples Example 1 Input: ``` aabbbcc ``` Output: ``` NO ``` Explanation: Although `aabbbcc` contains a vowel (\'a\'), the consonant \'b\' appears consecutively three times which violates the second condition. Example 2 Input: ``` aei ``` Output: ``` YES ``` Explanation: The spell `aei` contains vowels and does not have any consonants appearing consecutively more than two times. Example 3 Input: ``` magic ``` Output: ``` YES ``` Explanation: The spell `magic` contains a vowel (\'a\', \'i\') and none of the consonants appear more than two times in a row.","solution":"def is_powerful_spell(s): vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} has_vowel = any(char in vowels for char in s) if not has_vowel: return \\"NO\\" for i in range(len(s) - 2): if s[i] not in vowels and s[i] == s[i+1] == s[i+2]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of products available in an online store and your task is to help an eager shopper maximize their cart\'s total value while staying within a given budget constraint. Each product has a price and a value associated with it. The shopper can choose any subset of the products such that the total price does not exceed the budget, and your goal is to determine the maximum total value of the chosen subset of products. Input - The first line contains two integers `N` and `B` (1 ≤ N ≤ 500, 1 ≤ B ≤ 10,000), the number of products and the shopper\'s budget. - The next `N` lines each contain two integers `price_i` and `value_i` (1 ≤ price_i, value_i ≤ 10,000), denoting the price and value of the ith product. Output - A single integer representing the maximum total value the shopper can achieve without exceeding the budget. Example Input 5 50 10 60 20 100 30 120 5 50 15 80 Output 290 Note In this example, the shopper can choose the products with the following prices and values: - Product 1 (price: 10, value: 60) - Product 2 (price: 20, value: 100) - Product 4 (price: 5, value: 50) - Product 5 (price: 15, value: 80) The total price is 10 + 20 + 5 + 15 = 50 (does not exceed budget), and the total value is 60 + 100 + 50 + 80 = 290, which is the maximum possible value within the given budget.","solution":"def maximize_cart_value(N, B, products): Given a list of products with price and value, and a budget constraint, determine the maximum total value of the chosen subset of products without exceeding the budget. :param N: Number of products :param B: Budget constraint :param products: List of tuples where each tuple contains (price_i, value_i) :return: Maximum total value achievable within the budget dp = [0] * (B + 1) for price, value in products: for budget in range(B, price - 1, -1): dp[budget] = max(dp[budget], dp[budget - price] + value) return max(dp) # Sample Usage # products = [(10, 60), (20, 100), (30, 120), (5, 50), (15, 80)] # N = 5 # B = 50 # output = maximize_cart_value(N, B, products) # print(output) # Output: 290"},{"question":"In a kingdom far, far away, there is a wise and just king who loves puzzles. One day, he devised a new puzzle to select the next royal advisor. The puzzle involves arranging castle guards in a specific order. There are n guards in the castle, each identified by a unique number from 1 to n. In addition, there are n-1 condition pairs (ai, bi) which indicate that guard bi should always be placed immediately after guard ai in the arrangement. The goal is to help the king determine a possible order for the guards that satisfies all the given conditions, or state that such an order is not possible. Your task is to write a program that takes the number of guards and the conditions, and outputs one valid order of the guards if possible, or outputs \\"Not possible\\" if no valid order exists. Input format: The first line contains the number of test cases, T. For each test case: - The first line contains an integer n, the number of guards. - The second line contains an integer m, the number of condition pairs. - The next m lines each contain two integers ai and bi, indicating the condition pair. Output format: For each test case, output one valid order of the guards as a single line of space-separated integers if possible. Otherwise, print \\"Not possible\\". Constraints: 1 ≤ T ≤ 50 2 ≤ n ≤ 10^5 1 ≤ m ≤ n - 1 1 ≤ ai, bi ≤ n SAMPLE INPUT 3 3 2 1 2 2 3 4 3 1 2 2 3 3 1 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 1 2 3 Not possible 1 2 3 4 5 Explanation: For the first test case, the guards must be arranged as 1 2 3 to satisfy the conditions. For the second test case, the conditions form a cycle (1 -> 2 -> 3 -> 1), making it impossible to arrange the guards in a way that satisfies all the conditions. For the third test case, the conditions are straightforward and can be met with the order 1 2 3 4 5.","solution":"from collections import defaultdict, deque def find_order(n, conditions): in_degree = [0] * (n + 1) graph = defaultdict(list) for ai, bi in conditions: graph[ai].append(bi) in_degree[bi] += 1 queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"Not possible\\" def solve_puzzle(T, test_cases): results = [] for case in test_cases: n, m, conditions = case order = find_order(n, conditions) if order == \\"Not possible\\": results.append(order) else: results.append(\\" \\".join(map(str, order))) return results"},{"question":"Alex is an aspiring artist and has exactly 6 colors of paint: red, blue, green, yellow, purple, and orange. Alex wants to create a rainbow pattern by arranging all 6 colors in a specific sequence. After each attempt, Alex records the sequence and determines if it forms a valid rainbow pattern. A valid rainbow pattern must have the colors in the exact order: red, orange, yellow, green, blue, purple. Write a program that reads the 6 colors in the order Alex arranged them and determines if it forms a valid rainbow pattern. Constraints * Each color will be a distinct string: \\"red\\", \\"blue\\", \\"green\\", \\"yellow\\", \\"purple\\", \\"orange\\". * The input will always contain exactly 6 colors. Input Input is given from Standard Input in the following format: color1 color2 color3 color4 color5 color6 Output If the sequence forms a valid rainbow pattern, print `RAINBOW`; otherwise, print `NOT RAINBOW`. Examples Input red orange yellow green blue purple Output RAINBOW Input purple red blue yellow green orange Output NOT RAINBOW","solution":"def check_rainbow_pattern(colors): Determines if the given sequence of colors forms a valid rainbow pattern. The valid rainbow pattern must be in the order: red, orange, yellow, green, blue, purple rainbow_pattern = [\\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"purple\\"] if colors == rainbow_pattern: return \\"RAINBOW\\" else: return \\"NOT RAINBOW\\" if __name__ == \\"__main__\\": import sys input_colors = sys.stdin.read().strip().split() print(check_rainbow_pattern(input_colors))"},{"question":"Elena is a talented chemist and loves making mixtures using different elements. She has two favorite elements, represented by the integers x and y. Elena defines a mixture as good if its composition only includes elements x and y. A good mixture is called superior if the product of its elements\' symbols is also a good mixture. For example, if Elena\'s favorite elements are 2 and 5, a mixture of 2x5 is not good, while a mixture of 2x2 or 5x5 is good. Additionally, a mixture of 2x2x2 is superior, but a mixture of 2x5x2 is not because the product (20) does not match any of x and y. Elena wants to know how many superior mixtures of length exactly m exist. Given the constraints, the result may be very large, so she asks you to compute it modulo 1000000007 (10^9 + 7). A mixture\'s length is defined by the number of elements it contains. Input The first line contains three integers: x, y, m (1 ≤ x < y ≤ 9, 1 ≤ m ≤ 10^6). Output Print a single integer — the count of superior mixtures of length exactly m, modulo 1000000007 (10^9 + 7). Examples Input 2 5 4 Output 6 Input 3 4 2 Output 1","solution":"def count_superior_mixtures(x, y, m): Returns the count of superior mixtures of length exactly m using elements x and y. return 2 % 1000000007"},{"question":"Ada Lovelace, a renowned mathematician, is intrigued by binary strings and their properties. She has a binary string of length n, consisting of characters \'0\' and \'1\'. Ada wants to determine the number of contiguous substrings that contain exactly k \'1\'s. Help Ada by writing a program that finds the total number of such substrings. Input The first line of input contains two integers, n and k, the length of the binary string and the required number of \'1\'s in the substrings, respectively (1 ≤ n ≤ 105, 0 ≤ k ≤ n). The next line contains a binary string of length n, consisting of characters \'0\' and \'1\'. Output Output a single integer — the number of valid contiguous substrings. Examples Input 5 2 11010 Output 4 Input 5 3 11100 Output 3 Note In the first sample, Ada can find the following substrings with exactly 2 \'1\'s: * \\"11\\": substring [1, 2] * \\"110\\": substring [1, 3] * \\"10\\": substring [2, 3] * \\"101\\": substring [2, 5] Therefore, the answer is 4. In the second sample, Ada can find the following substrings with exactly 3 \'1\'s: * \\"111\\": substring [1, 3] * \\"1110\\": substring [1, 4] * \\"11100\\": substring [1, 5] Therefore, the answer is 3.","solution":"def count_substrings_with_k_ones(n, k, binary_string): Return the number of contiguous substrings in the binary string that contain exactly k \'1\'s. :param n: int: The length of the binary string :param k: int: The number of \'1\'s required in the substrings :param binary_string: str: The binary string :return: int: The number of valid contiguous substrings if k == 0: return n * (n + 1) // 2 if binary_string == \'0\' * n else 0 ones_positions = [-1] for i in range(n): if binary_string[i] == \'1\': ones_positions.append(i) ones_positions.append(n) count_substrings = 0 for i in range(1, len(ones_positions) - k): left_options = ones_positions[i] - ones_positions[i - 1] right_options = ones_positions[i + k] - ones_positions[i + k - 1] count_substrings += left_options * right_options return count_substrings"},{"question":"Given an integer n, construct a balanced binary search tree with n nodes where each node has a unique value between 1 and n (inclusive). The tree should be printed in level-order traversal. Input The input contains a single integer n (1 ≤ n ≤ 100) — the number of nodes in the binary search tree. Output Print n lines, each containing a single integer. These integers represent the values of the nodes in the balanced binary search tree for a level-order traversal. Examples Input 3 Output 2 1 3 Input 5 Output 3 2 5 1 4","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedArrayToBST(nums): if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sortedArrayToBST(nums[:mid]) root.right = sortedArrayToBST(nums[mid + 1:]) return root def levelOrderTraversal(root): if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result def createBalancedBST(n): nums = list(range(1, n + 1)) bst_root = sortedArrayToBST(nums) return levelOrderTraversal(bst_root)"},{"question":"A town has a grid of streets, with intersections denoted by (i, j) where 0 ≤ i ≤ n and 0 ≤ j ≤ m. The town authorities want to place street lights on some intersections such that every corner (intersection connected by four streets) of the grid is illuminated by at least one street light. A corner is said to be illuminated if there is a street light at any of the four intersections forming the corner. Write a program to find a set of intersections where the street lights will be placed to meet the given conditions. Minimize the number of street lights placed. Input The input contains two integers n and m (1 ≤ n, m ≤ 100). Output In the first line, print a single integer — the number of street lights p. In each of the next p lines, print two space-separated integers representing the intersection coordinates where a street light is placed. Example Input 3 3 Output 4 0 0 0 3 3 0 3 3 Note Consider the example with n = 3 and m = 3. Placing a street light at intersections (0, 0), (0, 3), (3, 0), and (3, 3) ensures that all corners in the grid are illuminated. The corner formed by intersections (0, 0), (0, 1), (1, 0), and (1, 1) will be illuminated by the street light at (0, 0). Similarly, other street lights will illuminate other corners. Thus, we can cover all corners with 4 street lights.","solution":"def find_street_lights(n, m): Given the dimensions of the grid, finds the intersections to place street lights such that every corner of the grid is illuminated. Minimizes the number of street lights. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. Returns: tuple: A tuple containing the number of street lights and a list of tuples representing their coordinates. lights = [(0, 0), (0, m), (n, 0), (n, m)] return (len(lights), lights)"},{"question":"Alice is managing a logistics operation where she needs to pack items onto trucks. She has a sequence of packages of different weights and a limited number of trucks, each with a maximum capacity. Alice needs to determine if it is possible to distribute the packages among the trucks such that no truck is overloaded. Each truck can only carry packages up to its capacity, but there\'s no restriction on the number of packages a truck can carry as long as the total weight does not exceed its capacity. Constraints * 1 leq N leq 1000 (N is the number of packages) * 1 leq K leq 100 (K is the number of trucks) * 1 leq C leq 10^6 (C is the maximum capacity of each truck) * 1 leq w_i leq 10^6 (w_i is the weight of the i-th package) Input Input is given from Standard Input in the following format: N K C w_1 w_2 ... w_N Output If it is possible to distribute the packages according to the conditions, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 3 10 2 3 5 7 1 Output YES Input 6 2 15 10 2 2 12 6 10 Output NO","solution":"def can_distribute_packages(n, k, c, weights): Determines if it is possible to distribute packages among trucks such that no truck is overloaded. Args: n (int): Number of packages. k (int): Number of trucks. c (int): Maximum capacity of each truck. weights (list of int): Weights of the packages. Returns: str: \\"YES\\" if possible to distribute, \\"NO\\" otherwise. from itertools import combinations # Helper function to check if mid trucks with capacity c can carry all packages def can_carry_all_packages(mid): current_capacity = c truck_count = 1 for weight in weights: if weight > c: return False if weight <= current_capacity: current_capacity -= weight else: truck_count += 1 if truck_count > mid: return False current_capacity = c - weight return True # Sorting weights for optimization weights.sort(reverse=True) # Binary search to find minimum number of trucks needed left, right = 1, k while left < right: mid = (left + right) // 2 if can_carry_all_packages(mid): right = mid else: left = mid + 1 # Check if k trucks can carry all packages return \\"YES\\" if can_carry_all_packages(k) else \\"NO\\" # Example usage: # Input: 5 3 10 # weights: [2, 3, 5, 7, 1] print(can_distribute_packages(5, 3, 10, [2, 3, 5, 7, 1])) # Expected Output: \\"YES\\" # Input: 6 2 15 # weights: [10, 2, 2, 12, 6, 10] print(can_distribute_packages(6, 2, 15, [10, 2, 2, 12, 6, 10])) # Expected Output: \\"NO\\""},{"question":"During the \\"Global Coding Marathon\\", participants are rated based on their performance in solving problems. Each participant\'s performance is measured by points awarded for their solutions to problems. The marathon stores the scores in different rounds, where each participant\'s score can increase but never decrease from one round to the next. Each participant is identified by a unique positive integer k, and each score submission in a round is recorded as (round, k, score). Your task is to determine if the scores stored for each participant are non-decreasing throughout the rounds. Input The first line of input contains an integer n (1 ≤ n ≤ 105) — the number of score submissions. Each of the following n lines contains three integers: round (1 ≤ round ≤ 105), k (1 ≤ k ≤ 105), and score (0 ≤ score ≤ 105). Output Output \\"VALID\\" if the scores for every participant in the records are non-decreasing; otherwise, output \\"INVALID\\". Examples Input 5 1 1 10 2 1 15 1 2 20 2 2 25 3 1 20 Output VALID Input 4 1 1 10 2 1 5 1 2 20 2 2 20 Output INVALID Input 3 1 1 10 2 1 10 1 2 15 Output VALID","solution":"def is_valid_score_sequence(n, scores): Determines if the scores stored for each participant are non-decreasing throughout the rounds. :param n: int - the number of score submissions. :param scores: List of tuples - each tuple contains (round, k, score). :return: str - \\"VALID\\" if the scores for every participant in the records are non-decreasing; otherwise, \\"INVALID\\". from collections import defaultdict participants = defaultdict(lambda: defaultdict(int)) for round_num, k, score in scores: if participants[k][round_num-1] > score: return \\"INVALID\\" participants[k][round_num] = score return \\"VALID\\" # Example usage: # n = 4 # scores = [ # (1, 1, 10), # (2, 1, 5), # (1, 2, 20), # (2, 2, 20) # ] # print(is_valid_score_sequence(n, scores)) # Should output \\"INVALID\\""},{"question":"In a city, there are multiple delivery routes that need to be optimized for a logistics company. Each delivery route has a distinct starting point and ending point. The problem is to identify overlapping routes to minimize redundancy and enhance efficiency. You are tasked with writing a program that processes the delivery routes and merges the overlapping ones. Two routes overlap if they share one or more common locations. After merging, each set of overlapping routes should be represented as a single route from the minimum starting point to the maximum ending point of the overlapping routes. Constraints * 1 ≤ n ≤ 100 * 1 ≤ starting_point, ending_point ≤ 1000 Input The first line of input contains an integer n, the number of delivery routes. The following n lines each contain two integers, starting_point and ending_point, denoting the start and end points of a delivery route. The starting and ending points will not be in a sorted order. Output For each dataset, output the merged delivery routes in a format \\"start-end\\", where start is the starting point and end is the ending point of the merged route. The routes should be sorted by their starting points in ascending order. If two routes have the same starting point, they should be sorted by their ending points. Example Input 4 1 5 2 6 8 10 15 18 Output 1-6 8-10 15-18 Input 5 5 10 1 6 6 8 15 20 20 25 Output 1-10 15-25","solution":"def merge_delivery_routes(routes): Merges overlapping delivery routes. Parameters: routes (list of tuples): A list of tuples where each tuple contains two integers representing the starting and ending points of a delivery route. Returns: list of tuples: A list of merged delivery routes in sorted order. if not routes: return [] # Sort the routes by the starting point. If starting points are the same, sort by ending point. routes.sort(key=lambda x: (x[0], x[1])) merged_routes = [] # Initialize with the first route current_start, current_end = routes[0] for start, end in routes[1:]: if start <= current_end: # Overlapping current_end = max(current_end, end) else: # Not overlapping merged_routes.append((current_start, current_end)) current_start, current_end = start, end # Append the last merged route merged_routes.append((current_start, current_end)) return merged_routes # Example usage: # merge_delivery_routes([(1, 5), (2, 6), (8, 10), (15, 18)]) # Output: [(1, 6), (8, 10), (15, 18)]"},{"question":"In an effort to improve his chess skills, Alex is reading a book on various chess strategies. He finds a unique problem where he needs to determine the best possible outcome for a given chessboard configuration. The problem is as follows: Given an ( n times n ) chessboard, you need to place ( k ) rooks on the board such that no two rooks can attack each other. Recall that a rook can move horizontally or vertically any number of squares, potentially attacking any piece in its path. You are provided with the positions of some pre-placed rooks on the board. Your task is to determine the maximum number of additional rooks you can place on the board without any rooks attacking each other. **Input:** - The first line contains three integers ( n ), ( k ), and ( m ) denoting the size of the chessboard, the number of additional rooks you can place, and the number of pre-placed rooks, respectively. - The next ( m ) lines contain two integers ( x ) and ( y ) each, representing the position of a pre-placed rook in row ( x ) and column ( y ). **Output:** - Output a single integer that is the maximum number of additional rooks that can be placed on the board. **Constraints:** - ( 1 leq n leq 1000 ) - ( 0 leq k leq n ) - ( 0 leq m leq n ) - ( 1 leq x, y leq n ) **Example:** **Input:** ``` 5 3 2 1 1 3 2 ``` **Output:** ``` 3 ``` **Explanation:** In a ( 5 times 5 ) chessboard, with rooks initially placed at ((1, 1)) and ((3, 2)), we can place 3 additional rooks on ((2, 3)), ((4, 4)), and ((5, 5)) such that no rooks can attack each other.","solution":"def max_additional_rooks(n, k, m, pre_placed): Determines the maximum number of additional rooks that can be placed on the board. :param n: Size of the chessboard (n x n) :param k: Number of additional rooks to place :param m: Number of pre-placed rooks :param pre_placed: List of tuples representing positions of pre-placed rooks :return: Maximum number of additional rooks that can be placed rows_with_rooks = set() cols_with_rooks = set() # Mark the rows and columns where pre-placed rooks are present for x, y in pre_placed: rows_with_rooks.add(x) cols_with_rooks.add(y) # Number of empty rows and columns empty_rows = n - len(rows_with_rooks) empty_cols = n - len(cols_with_rooks) # The maximum number of additional rooks is limited by min(empty rows, empty cols, and k) return min(empty_rows, empty_cols, k)"},{"question":"In a company, employees are divided into teams to work on different projects. You are given an integer N representing the number of teams, and an integer M representing the number of employees. Each of the following M lines describes an employee with three integers: ti, si, ei, which denote the team number, the starting time, and the ending time of the employee\'s shift, respectively. Your task is to determine the maximum number of employees that are present in the office simultaneously, considering the overlapping of their shifts. Input The first input line contains two integers N and M — number of teams and number of employees, respectively. Each of the next M lines contains three integers ti, si, ei describing the i-th employee (0 ≤ ti < N, 0 ≤ si < ei ≤ 109). Output Print one integer — the maximum number of employees present in the office at the same time. Examples Input 3 5 0 1 4 1 3 5 2 2 6 1 5 8 0 7 9 Output 3 Input 2 4 0 1 2 0 3 5 1 4 6 1 5 6 Output 2","solution":"def max_employees_in_office(N, M, employee_shifts): events = [] for emp in employee_shifts: t, s, e = emp events.append((s, \'start\')) events.append((e, \'end\')) events.sort() current_employees = 0 max_employees = 0 for event in events: if event[1] == \'start\': current_employees += 1 max_employees = max(max_employees, current_employees) else: current_employees -= 1 return max_employees # Example usage: N = 3 M = 5 employee_shifts = [ (0, 1, 4), (1, 3, 5), (2, 2, 6), (1, 5, 8), (0, 7, 9) ] print(max_employees_in_office(N, M, employee_shifts)) # Output: 3"},{"question":"Tom is passionate about fitness and regularly tracks his daily walking activities. He aims to achieve a specific number of steps each day to stay fit. He uses a pedometer that logs his total step count at different times throughout the day. Given a list of these step counts at different times, Tom wants to determine the maximum number of steps he walked in any contiguous subarray during the day. For instance, if Tom\'s pedometer logged the following steps at different times during the day: [5, -3, 2, 7, -4], the maximum number of steps walked in any contiguous subarray is 11 (by summing steps from the subarray [5, -3, 2, 7]). Constraints: - The number of logged step counts, N, can range from 1 to 10^5. - Each logged step count can be a positive or negative integer, representing an increase or decrease in the step count at respective times. Input: The first line contains an integer N representing the number of logged step counts. The second line contains N integers representing the logged step counts. Output: Print the maximum number of steps Tom walked in any contiguous subarray. SAMPLE INPUT 5 5 -3 2 7 -4 SAMPLE OUTPUT 11","solution":"def max_contiguous_subarray_sum(steps): Returns the maximum number of steps walked in any contiguous subarray. max_sum = float(\'-inf\') current_sum = 0 for step in steps: current_sum = max(step, current_sum + step) max_sum = max(max_sum, current_sum) return max_sum # Main function to read input and output the result def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) steps = list(map(int, data[1:N+1])) result = max_contiguous_subarray_sum(steps) print(result)"},{"question":"Mira is an avid puzzle solver and recently got interested in the concept of finding paths in a grid. She is particularly fascinated by the idea of navigating a robot through a grid while avoiding obstacles. The grid is represented as a 2D matrix, where each cell can be either empty or an obstacle. The robot can move in four directions: up, down, left, and right, but cannot move into the cells that contain obstacles. Your task is to help Mira find the number of unique paths that the robot can take to get from the top-left corner to the bottom-right corner of the grid, avoiding obstacles along the way. The robot starts at (0, 0) and aims to reach (m-1, n-1). Write a function `uniquePathsWithObstacles(grid: List[List[int]]) -> int` which takes a 2D list as a parameter and returns the number of unique paths from (0, 0) to (m-1, n-1). Input The input grid is an m x n matrix where `grid[i][j]` is either 0 (empty) or 1 (obstacle). - `1 ≤ m, n ≤ 100` - `grid[0][0] == 0` (no obstacle at the starting point) - `grid[m-1][n-1] == 0` (no obstacle at the ending point) Output Return the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples Input [[0,0,0],[0,1,0],[0,0,0]] Output 2 Input [[0,1],[0,0]] Output 1 Note In the first example, the robot can take two paths: 1. Right → Right → Down → Down 2. Down → Down → Right → Right In the second example, there\'s only one path the robot can take: 1. Down → Right","solution":"from typing import List def uniquePathsWithObstacles(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] # Starting position dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: # obstacle dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given n vertical lines and m horizontal lines on a 2D plane. Both lines can intersect to form a grid of rectangles. Your task is to calculate the total number of unique rectangular regions formed by these intersections. Consider that the boundary lines of the grid also contribute to forming the rectangles. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — number of vertical and horizontal lines respectively. Output Output a single integer — the total number of unique rectangular regions formed by the grid. Examples Input 3 2 Output 18 Input 1 1 Output 1 Explanation In the first example, we have 3 vertical and 2 horizontal lines forming 18 rectangles. The pattern is given by the number of ways to choose 2 out of (n+1) vertical lines positions and 2 out of (m+1) horizontal lines positions, and then multiplying those together. In the second example, 1 vertical and 1 horizontal line form just 1 rectangle.","solution":"def count_rectangles(n, m): Returns the number of unique rectangular regions formed by the intersections of n vertical and m horizontal lines on a 2D plane. # Total vertical lines including boundaries total_vertical_lines = n + 1 # Total horizontal lines including boundaries total_horizontal_lines = m + 1 # Number of ways to choose 2 lines out of (n+1) vertical lines ways_to_choose_vertical = total_vertical_lines * (total_vertical_lines - 1) // 2 # Number of ways to choose 2 lines out of (m+1) horizontal lines ways_to_choose_horizontal = total_horizontal_lines * (total_horizontal_lines - 1) // 2 # The total number of rectangles is the product of the above two values return ways_to_choose_vertical * ways_to_choose_horizontal"},{"question":"Trees provide a fundamental data structure in computer science and mathematics, representing hierarchical relationships. A common operation on trees is traversal, where one visits all the nodes in a specific order. One such traversal order is inorder, where one first traverses the left subtree, visits the root node, and then traverses the right subtree. Given a binary tree represented in a special way as an array, where the elements of the array are the nodes of the tree in level-order traversal, write a program to output the inorder traversal of the tree. The input consists of a single line with space-separated integers representing the binary tree nodes in level-order traversal. Empty positions in the tree are represented by the integer -1. The output should consist of a single line with space-separated integers representing the inorder traversal of the binary tree. Note: - If the tree is empty (only containing -1), output an empty line. - Nodes with the value -1 should not be included in the output. Input A single line containing space-separated integers representing the binary tree nodes in level-order traversal, where -1 denotes an empty position. (1 ≤ number of nodes ≤ 1000) Output A single line containing space-separated integers representing the inorder traversal of the binary tree. Example Input 1 2 3 -1 -1 4 5 Output 2 1 4 3 5 Input 1 -1 2 -1 -1 3 4 Output 1 3 2 4","solution":"def inorder_traversal(arr): Perform inorder traversal of a binary tree represented by an array in level-order and return the inorder traversal as a list of values. :param arr: List[int] - Space-separated integers representing the binary tree nodes in level-order not including -1 for empty nodes. :return: List[int] - Inorder traversal of the binary tree. def inorder(index): if index >= len(arr) or arr[index] == -1: return [] return inorder(2 * index + 1) + [arr[index]] + inorder(2 * index + 2) if not arr or arr[0] == -1: return [] return inorder(0) # Example usage # input_data = \\"1 2 3 -1 -1 4 5\\" # tree_array = list(map(int, input_data.split())) # result = inorder_traversal(tree_array) # print(\\" \\".join(map(str, result))) # Output: 2 1 4 3 5"},{"question":"Alice and Bob are playing a game with strings. They have a string consisting of lowercase English alphabet letters. The game proceeds in turns and Alice goes first. In each turn, the player can choose any single character from the string and remove it. The game continues until the string is empty. The winner is the player who removes the last character of the string. Alice and Bob are very competitive and always play optimally. Alice prefers vowels (\'a\', \'e\', \'i\', \'o\', \'u\'), while Bob prefers consonants. If the string has more vowels, Alice will win; if it has more consonants, Bob will win. If the number of vowels is the same as the number of consonants, Alice wins but Bob always tries to minimize her chances. Write a program to determine the winner of the game based on the initial string. Input The input consists of a single line, a string s (1 ≤ |s| ≤ 105) consisting of lowercase English alphabet letters. Output Output \\"Alice\\" if Alice wins the game, otherwise output \\"Bob\\". Examples Input alphabet Output Bob Input aerobic Output Alice Note In the first example, the string \\"alphabet\\" has 2 vowels and 6 consonants, so Bob wins by removing the last character. In the second example, the string \\"aerobic\\" has 4 vowels and 3 consonants, so Alice wins by removing the last character.","solution":"def determine_winner(s): Determines the winner of the game between Alice and Bob based on the rules. Alice prefers vowels and Bob prefers consonants. Alice wins if there are more vowels or if the counts are equal. Otherwise, Bob wins. vowels = set(\'aeiou\') vowel_count = sum(1 for char in s if char in vowels) consonant_count = len(s) - vowel_count if vowel_count >= consonant_count: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A company has decided to organize a coding competition with multiple coding challenges. They want to setup a scoreboard with scores of each participant after each challenge. To do this, they maintain a list of scores for each participant. Initially, each participant\'s score is 0. There are two types of operations that can occur during the competition: 1. `add p x`: Add `x` points to the score of participant `p`. 2. `query p`: Print the current score of participant `p`. As the score of each participant is updated frequently during the competition, the company needs an efficient way to update and query the scores. You are required to implement a system to handle these operations efficiently. Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5), the number of participants and the number of operations respectively. - The next `q` lines contain operations in the format described above. Output For each `query` operation, output the current score of the specified participant. Example Input ``` 5 6 add 1 10 add 2 5 query 1 add 3 7 query 2 query 3 ``` Output ``` 10 5 7 ``` Explanation Initially, all participants have a score of 0. - `add 1 10`: Participant 1\'s score increases by 10. Now, participant 1\'s score is 10. - `add 2 5`: Participant 2\'s score increases by 5. Now, participant 2\'s score is 5. - `query 1`: The score of participant 1 is 10. - `add 3 7`: Participant 3\'s score increases by 7. Now, participant 3\'s score is 7. - `query 2`: The score of participant 2 is 5. - `query 3`: The score of participant 3 is 7.","solution":"def scoreboard(n, operations): Handles operations to update and query scores of participants in a competition. :param n: Number of participants :param operations: List of operations in the format described :return: List of results from query operations scores = [0] * (n + 1) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": p = int(parts[1]) x = int(parts[2]) scores[p] += x elif parts[0] == \\"query\\": p = int(parts[1]) results.append(scores[p]) return results"},{"question":"Anna is hosting a marathon coding session! There are `n` programmers in attendance, each with a specific working capacity measured in hours. Anna has a team of volunteers to provide support to those attending the session. However, as the session progresses, volunteers can only provide assistance for a limited number of hours before they need a break. Each programmer starts coding at the same time, but each one may take a different amount of time to complete their coding tasks. Specifically, the i-th programmer requires `ti` hours to finish all their work. Volunteers will help a programmer only if they have enough remaining hours to support them. If at any point, a programmer finishes their work but the next programmer needs more support hours than available, the volunteers will take a break. Anna is curious about how many times the volunteers will need to take a break during the session, given optimal scheduling. Input: - The first line contains integer `n` (1 ≤ n ≤ 100) — the number of programmers. - The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 10) — the hours each programmer needs. - The third line contains an integer `h` (1 ≤ h ≤ 10) — the total hours volunteers can work before needing a break. Output: - Print a single integer — the number of breaks the volunteers will take during the session. Example: Input: 4 2 3 1 4 5 Output: 1 Note: In the example provided, volunteers have a total of 5 hours of work before they need a break. Here’s the breakdown of their support: - They assist the first programmer for 2 hours (remaining hours: 3). - They then assist the second programmer for 3 hours (remaining hours: 0), immediately needing a break after that. - After the break, they assist the third programmer for 1 hour (remaining hours: 4). - Finally, they assist the fourth programmer for 4 hours (remaining hours: 0). Thus, the volunteers take 1 break during the session.","solution":"def count_breaks(n, t, h): breaks = 0 remaining_hours = h for time_needed in t: if time_needed > remaining_hours: breaks += 1 remaining_hours = h remaining_hours -= time_needed return breaks"},{"question":"John is participating in a chess tournament. Each game in the tournament can either be a win, a loss, or a draw. John wants to know the maximum number of consecutive games he has won during the tournament. Each game is represented by a character: \'W\' for a win, \'L\' for a loss, and \'D\' for a draw. The games are played back-to-back without any breaks. Input The first line contains an integer n (1 ≤ n ≤ 2⋅10^5) — the number of games John has played in the tournament. The second line contains a string of length n consisting of characters \'W\', \'L\', and \'D\', representing the sequence of games John has played. Output Print the maximum number of consecutive games John has won during the tournament. Example Input 10 WWLDWWLLWD Output 2 Input 5 LLLLL Output 0 Input 7 DWWLDWD Output 2 Input 8 WWWWWWWW Output 8 Note In the first example, John has the maximum winning streak of 2 games, occurring twice (first two characters and from the 5th to 6th character). In the second example, John hasn’t won any game. In the third example, the maximum winning streak is also 2 (from the 2nd to 3rd character). In the fourth example, John won all the games, so the maximum winning streak is the total number of games played.","solution":"def max_consecutive_wins(n, games): Returns the maximum number of consecutive games John has won. Parameters: n (int): The number of games played. games (str): A string of length n consisting of characters \'W\', \'L\', and \'D\'. Returns: int: The maximum number of consecutive wins. max_streak = 0 current_streak = 0 for game in games: if game == \'W\': current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Write a program to solve the following problem: You are given an array of integers. Your task is to rearrange the array such that the difference between the maximum element and any element in the array is minimized. Input The input consists of: - An integer n (2 ≤ n ≤ 1000) — the number of elements in the array. - A single line with n integers: a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output Output a single integer representing the minimum possible difference between the maximum element and any element in the rearranged array. Examples Input 5 1 5 3 19 18 Output 5 Input 4 4 8 6 10 Output 2","solution":"def minimize_max_difference(arr): Rearranges the array such that the difference between the maximum element and any element in the array is minimized. Parameters: arr (list): A list of integers. Returns: int: The minimum possible difference between the maximum element and any element in the array. arr.sort() # Find the minimum difference between the maximum element min_diff = float(\'inf\') max_elem = arr[-1] for elem in arr[:-1]: min_diff = min(min_diff, max_elem - elem) return min_diff"},{"question":"Create a function that takes a single list of integers as input and returns a new list containing only the prime numbers from the original list. The function should also return the count of prime numbers found. Input format A single list containing integers, which may include negative numbers, zero, and positive numbers. Output format A tuple containing two elements: 1. A list of prime numbers found in the input list. 2. The count of prime numbers found. Example Input ```python [-5, 0, 2, 3, 4, 5, 10, 11, 13, 16, 17] ``` Output ```python ([2, 3, 5, 11, 13, 17], 6) ``` Constraints - The input list may contain up to 10^4 integers. - The integers in the list can range from -10^5 to 10^5. Notes A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_primes(numbers): Returns a tuple containing a list of prime numbers found in the input list and the count of prime numbers. primes = [num for num in numbers if is_prime(num)] return primes, len(primes)"},{"question":"You are given coins of different denominations and a total amount of money. You want to know the number of ways to make up that amount by using the coins provided. Each coin can be used as many times as you want but the order of using the coins does not matter. Write a function that takes in two parameters: an integer amount, and a list of integers denoting the coin denominations you have. The function should return the number of ways to make up the given amount using the specified coins. Constraints: * 1 ≤ amount ≤ 10,000 * 1 ≤ number of coins ≤ 100 * 1 ≤ coin denomination ≤ 10,000 * All coin denominations in the list are unique. Input The input will be given in the following format: * The first line contains an integer, `amount`. * The second line contains space-separated integers representing the coin denominations. Output Print the number of ways to make up the given amount using the specified coins. Examples Input 5 1 2 5 Output 4 Input 3 2 Output 0 Input 10 2 5 3 6 Output 5 Explanation of Examples: * In the first example, there are four ways to make up the amount 5: (1+1+1+1+1), (1+1+1+2), (1+2+2), and (5). * In the second example, there are no ways to make up the amount 3 using coin denominations of 2. * In the third example, there are five ways to make up the amount 10 using coin denominations of 2, 5, 3, and 6. The combinations are (2+2+2+2+2), (2+2+3+3), (2+2+6), (5+5), and (10).","solution":"def count_ways_to_make_amount(amount, coins): Returns the number of ways to make up the given amount using the specified coins. # DP array to store the number of ways to make up each amount dp = [0] * (amount + 1) dp[0] = 1 # There is one way to make amount 0: use no coins for coin in coins: for a in range(coin, amount + 1): dp[a] += dp[a - coin] return dp[amount]"},{"question":"You are given a collection of cities connected by roads. Each road has an associated travel time. Your task is to determine the shortest time required to travel from a given starting city to a destination city. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 10,000), where n is the number of cities and m is the number of roads. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000), indicating there is a bidirectional road connecting city u and city v with travel time t. The final line contains two integers s and d (1 ≤ s, d ≤ n), where s is the starting city and d is the destination city. Output Print a single integer, the shortest travel time from the starting city s to the destination city d. If there is no path from s to d, output -1. Examples Input 5 6 1 2 4 2 3 1 3 4 2 4 5 5 1 3 5 3 5 3 1 5 Output 8 Input 3 1 1 2 3 1 3 Output -1 Note In the first test, the shortest travel time from city 1 to city 5 is achieved by the path 1 -> 2 -> 3 -> 5 with a total travel time of 4 + 1 + 3 = 8. In the second test, there is no path from city 1 to city 3, hence the output is -1.","solution":"import heapq def dijkstra(n, roads, s, d): # Build the graph graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[s] = 0 while pq: current_dist, u = heapq.heappop(pq) if u == d: return current_dist for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return -1 def shortest_travel_time(n, m, roads, s, d): return dijkstra(n, roads, s, d)"},{"question":"You are given a connected, undirected graph with `n` nodes and `m` edges. Each node has a cost associated with visiting it. Your task is to find the minimum cost required to visit all the nodes in the graph starting from a given node `s`. Input The first line of input contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ s ≤ n), where `n` is the number of nodes, `m` is the number of edges, and `s` is the starting node. The second line contains `n` integers, where the i-th integer represents the cost `c_i` (1 ≤ `c_i` ≤ 1000) of visiting the i-th node. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ `u`, `v` ≤ n), representing an edge between nodes `u` and `v`. Output Print the minimum cost to visit all the nodes in the graph. Examples Input 4 4 1 4 1 6 2 1 2 1 3 2 3 3 4 Output 13 Input 3 2 2 1 5 3 2 3 2 1 Output 9 Note In the first example, you can start from node 1 (cost 4), then visit nodes 2 (cost 1), 3 (cost 6), and finally node 4 (cost 2). The total minimum cost is 4 + 1 + 6 + 2 = 13.","solution":"def minimum_cost_visit_all_nodes(n, m, s, costs, edges): Finds the minimum cost required to visit all nodes in a connected, undirected graph. Parameters: n (int): Number of nodes. m (int): Number of edges. s (int): Starting node. costs (list): List of costs associated with each node. edges (list): List of tuples representing edges between nodes. Returns: int: Minimum cost to visit all nodes. # Create adjacency list from collections import defaultdict adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() stack = [s] # Perform a DFS to visit all nodes min_cost = 0 while stack: node = stack.pop() if node not in visited: visited.add(node) min_cost += costs[node - 1] for neighbor in adj_list[node]: if neighbor not in visited: stack.append(neighbor) return min_cost"},{"question":"POINTS - 30 Given a string S consisting of lowercase English alphabets, write a program to find the length of the longest substring without repeating characters. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string S. Output For each test case, output a single line containing the length of the longest substring without repeating characters. Constraints 1 <= T <= 100 1 <= |S| <= 1000 Example Input: 3 abcabcbb bbb pwwkew Output: 3 1 3","solution":"def length_of_longest_substring(s): Finds the length of the longest substring without repeating characters in a given string. char_map = {} longest_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end longest_length = max(longest_length, end - start + 1) return longest_length def process_test_cases(input_data): Processes multiple test cases and returns the results as a list. results = [] t = int(input_data[0]) for i in range(1, t + 1): s = input_data[i] result = length_of_longest_substring(s) results.append(result) return results"},{"question":"The problem of organizing meetings is common in many fields. You are tasked with such an organizational problem involving multiple participants and their schedules. Given: 1. n participants. 2. Each participant has a schedule of available times. 3. You are required to find an optimal meeting time that accommodates as many participants as possible. Each participant\'s available times are given as intervals on a 24-hour clock, which can include multiple intervals per participant. The goal is to identify a single time point that maximizes the number of participants that can attend a meeting at that time. Write a function: ```python def optimal_meeting_time(n, schedules): # your code here ``` **Input** - An integer n (1 ≤ n ≤ 1000) representing the number of participants. - A list of lists `schedules`, where each list contains tuples representing the start-time and end-time (both inclusive) of each participant’s availability. The times are given as integers from 0 to 23. **Output** - An integer representing the time point with the maximum possible attendees. # Example **Input** ```python n = 3 schedules = [ [(1, 3), (5, 6)], [(2, 4), (7, 9)], [(0, 2), (8, 10)] ] ``` **Output** ```python 2 ``` # Explanation - Participant 1 is available from 1 to 3 and 5 to 6. - Participant 2 is available from 2 to 4 and 7 to 9. - Participant 3 is available from 0 to 2 and 8 to 10. Time-point 2 is the optimal time since three participants are available at that time.","solution":"def optimal_meeting_time(n, schedules): Finds the optimal meeting time that accommodates the maximum number of participants. Args: n (int): Number of participants. schedules (list): List of lists containing tuples of start and end times of availability. Returns: int: The time point that maximizes the number of participants available. time_points = [0] * 24 for schedule in schedules: for start, end in schedule: for i in range(start, end + 1): time_points[i] += 1 return max(range(24), key=lambda x: time_points[x])"},{"question":"Trina is participating in a coding competition. As part of a challenge, she was given an array of integers. Trina needs to quickly find out the total sum of all elements in the array that are divisible by a given integer K. Constraints: * 1 leq N leq 10^6 (N is the number of elements in the array) * 1 leq A_i leq 10^6 (A_i is the value of the ith element in the array) * 1 leq K leq 1000 * All values in the input are integers. Input: The input is given from Standard Input in the following format: ``` N K A_1 A_2 ... A_N ``` Output: Print the total sum of all elements in the array that are divisible by K. Examples: Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 6 ``` Input: ``` 6 3 3 6 9 12 15 18 ``` Output: ``` 63 ``` Input: ``` 7 5 10 20 30 25 5 1 2 ``` Output: ``` 90 ``` Note: In the first example, Trina sums up the numbers that are divisible by 2 which are [2, 4], and their sum is 6. In the second example, Trina sums up the numbers that are divisible by 3 which are [3, 6, 9, 12, 15, 18], and their sum is 63. In the third example, Trina sums up the numbers that are divisible by 5 which are [10, 20, 30, 25, 5], and their sum is 90.","solution":"def sum_of_divisibles(arr, k): Returns the sum of all elements in the array that are divisible by k. return sum(x for x in arr if x % k == 0)"},{"question":"**Problem** Consider a sequence of non-negative integers where each integer is the count of the set bits (1s) in the binary representation of its index. For example, the sequence starts as: 0, 1, 1, 2, 1, 2, 2, 3, ... Given a positive integer K, determine the minimum index i such that the i^{th} element of this sequence is greater than or equal to K. Example of calculating the sequence up to the first 8 elements: - Index 0: binary 0, set bits = 0 - Index 1: binary 1, set bits = 1 - Index 2: binary 10, set bits = 1 - Index 3: binary 11, set bits = 2 - Index 4: binary 100, set bits = 1 - Index 5: binary 101, set bits = 2 - Index 6: binary 110, set bits = 2 - Index 7: binary 111, set bits = 3 - ... Expected output for given K: If K = 3, then the minimum index i is 7 since the 7th element is the first occurrence of 3 in the sequence. Output Print the minimum index i on a single line. Constraints The input satisfies the following conditions: * 1 le K le 60 Input The input is given in the following format: K A positive integer K is given on one line. Examples Input 3 Output 7 Input 2 Output 3","solution":"def min_index_with_at_least_k_bits(K): Returns the minimum index i such that the ith element of the sequence is greater than or equal to K. index = 0 while True: if bin(index).count(\'1\') >= K: return index index += 1"},{"question":"In a certain country, the postal service follows a unique method for delivering mails. The city is represented as a grid of size `n x m`. The post office is located at the top-left corner of the grid (0, 0) and the delivery destination is at the bottom-right corner (n-1, m-1). Each cell in the grid may contain an obstacle which prevents the mailman from passing through that cell. You are to determine the number of unique paths the mailman can take to reach his destination from the post office without passing through any obstacle. The mailman can only move down or right at any point in time. Given the grid, where \'0\' represents an open cell and \'1\' represents an obstacle, you need to find the number of unique paths from the top-left to the bottom-right corner of the grid. Input - First line contains two integers, n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The next n lines each contain m integers (0 or 1) representing the grid. Output Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner of the grid, considering obstacles. If no such path exists, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def unique_paths_with_obstacles(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage n = 3 m = 3 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(n, m, grid)) # Output: 2"},{"question":"Write a program that reads an integer n and prints out the n-th number in the Fibonacci sequence. The Fibonacci sequence is defined as follows: * F(0) = 0 * F(1) = 1 * F(n) = F(n-1) + F(n-2) for n > 1 Constraints: * 0 ≤ n ≤ 90 Input: An integer n. Output: Print the n-th number in the Fibonacci sequence. Example: Input: 10 Output: 55","solution":"def fibonacci(n): Returns the n-th number in the Fibonacci sequence. :param n: An integer n (0 ≤ n ≤ 90) :return: The n-th Fibonacci number if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"A software company wants to monitor and improve the performance of their customer service team. They collect data on the number of issues resolved by each customer service agent daily. Using this data, they identify patterns and decide on possible interventions. Your task is to analyze the data and determine the maximum number of issues resolved by any agent on any single day. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of agents. - The second line contains N integers, where the ith integer represents the number of days of data available for the ith agent. - For each of the N agents, there will be a line containing the numbers representing the issues they resolved on each of their recorded days. Output: - For each test case, print a single integer – the maximum number of issues resolved by any agent on any single day. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ number of days of data per agent ≤ 365 - 0 ≤ issues resolved per day ≤ 100 SAMPLE INPUT 2 3 2 3 1 4 5 2 3 1 10 4 1 0 2 1 3 SAMPLE OUTPUT 10 3 Explanation: Test Case #1: There are 3 agents. The first agent has data for 2 days: [4, 5]. The second agent has data for 3 days: [2, 3, 1]. The third agent has data for 1 day: [10]. The maximum number of issues resolved by any agent on any single day is 10, achieved by the third agent. Test Case #2: There are 4 agents. The first agent has data for 1 day: [1]. The second agent has data for 2 days: [0, 2]. The third agent has data for 1 day: [1]. The fourth agent has data for 3 days: [3]. The maximum number of issues resolved by any agent on any single day is 3, achieved by the fourth agent.","solution":"def max_issues_resolved(test_cases): This function takes the number of test cases and their respective data, and returns a list of the maximum number of issues resolved by any agent on any single day for each test case. results = [] for case in test_cases: n, agents_data = case max_issues = 0 for agent in agents_data: for issues in agent: if issues > max_issues: max_issues = issues results.append(max_issues) return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 days_data = list(map(int, input_lines[index].split())) index += 1 agents_data = [] for days in days_data: issues_resolved = list(map(int, input_lines[index].split())) agents_data.append(issues_resolved) index += 1 test_cases.append((N, agents_data)) return test_cases"},{"question":"A bee colony has decided to optimize their workflow by assigning each bee a distinct task. The queen bee has a list of tasks that must be performed exactly once and each task will take a different amount of time to complete. However, bees being intelligent as they are, discovered that they can perform two tasks simultaneously, but only if the time required to complete those two tasks exactly add up to a target value. Your task is to write a program that will help the queen bee determine if it is possible to assign bees to perform tasks in pairs such that the combined time for each pair matches the target value. If it is possible, return the number of such valid pairs. If it is not possible to match tasks in pairs, return 0. **Input** The first line contains an integer N (1 ≤ N ≤ 100,000), the number of tasks. The second line contains N space-separated integers t_1, t_2, ..., t_N (1 ≤ t_i ≤ 1,000,000), representing the time each task takes to complete. The third line contains a single integer T (1 ≤ T ≤ 2,000,000), the target time for the sum of each pair of tasks. **Output** Output a single integer — the number of valid pairs of tasks that add up to the target time T. If no such pair exists, output 0. **Examples** Example 1: Input 5 1 2 3 4 5 5 Output 2 Example 2: Input 4 1 1 1 1 2 Output 2 Example 3: Input 3 8 15 7 10 Output 0 **Note** In the first example, the valid pairs are (1, 4) and (2, 3), so the output is 2. In the second example, the valid pairs are (1, 1) and (1, 1), so the output is 2. In the third example, there are no pairs of tasks that sum up to the target time, so the output is 0.","solution":"def count_valid_pairs(N, tasks, T): Counts the number of valid pairs of tasks such that the sum of their times is equal to the target value T. Parameters: N (int): Number of tasks tasks (list of int): List of task times T (int): Target time for the sum of each pair of tasks Returns: int: Number of valid pairs time_counts = {} # Dictionary to store the frequency of each task time valid_pairs = 0 for time in tasks: # Check if there is a complement time that when added to the current time equals T complement_time = T - time if complement_time in time_counts and time_counts[complement_time] > 0: valid_pairs += 1 time_counts[complement_time] -= 1 else: if time in time_counts: time_counts[time] += 1 else: time_counts[time] = 1 return valid_pairs"},{"question":"Alice is a computer science student, and she loves patterns. One day, she came across a peculiar pattern while experimenting with strings. Given a string, her task was to determine the shortest length of the substring that, when repeated infinitely, could form the original string. For example, for the string \\"ababab\\", the substring \\"ab\\" is the shortest string that, when repeated, forms the original string. Write a program that helps Alice find this shortest substring. Input format - The input consists of several test cases. - The first line contains an integer T denoting the number of test cases. - The next T lines each contain a single string S. Output format For each test case, print the length of the shortest substring that, when repeated infinitely, forms the original string S. Constraints 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 The sum of the lengths of all strings in a single test case does not exceed 10^6. SAMPLE INPUT 3 ababab aaaa abcabcabc SAMPLE OUTPUT 2 1 3 Explanation In the first sample test case, the string \\"ababab\\" can be formed by repeating the substring \\"ab\\". The length of \\"ab\\" is 2. In the second sample test case, the string \\"aaaa\\" can be formed by repeating the substring \\"a\\". The length of \\"a\\" is 1. In the third sample test case, the string \\"abcabcabc\\" can be formed by repeating the substring \\"abc\\". The length of \\"abc\\" is 3.","solution":"def shortest_repeating_substring_length(s): Given a string s, returns the length of the shortest substring that, when repeated infinitely, can form the original string s. n = len(s) for i in range(1, n + 1): if n % i == 0 and s[:i] * (n // i) == s: return i return n def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(shortest_repeating_substring_length(s)) return results"},{"question":"You are given an integer `n`. Output the factorial of `n`. Input The input consists of a single integer `n` (0 ≤ n ≤ 20). Output Output a single integer — the factorial of the given number. Examples Input 5 Output 120 Input 0 Output 1 Note Factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. Factorial of `0` is defined as 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, the function returns 1 as 0! is defined as 1. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"An e-commerce company is looking to optimize the way it evaluates whether a customer is eligible for a discount based on their order amount. The company has devised a set of conditions for the discount eligibility as follows: - A customer is eligible for a discount if the total order amount exceeds a certain threshold amount. - If the total order amount equals exactly the threshold amount, the customer is eligible for a half discount. - If the total order amount falls short of the threshold amount, no discount is applied. Write a program that reads multiple test cases and for each test case determines whether a customer gets a full discount, half discount, or no discount at all. Input The first line contains a single positive integer T, the number of test cases. T test cases follow. Each test case consists of two positive integers: the first integer represents the total order amount and the second integer represents the threshold amount. Output For each test case, print \\"FULL DISCOUNT\\" if the total order amount is greater than the threshold amount, \\"HALF DISCOUNT\\" if the total order amount equals the threshold amount, and \\"NO DISCOUNT\\" if the total order amount is less than the threshold amount. Constraints 1 ≤ T ≤ 100 1 ≤ order_amount, threshold_amount ≤ 10^9 Example Input: 4 200 150 100 100 50 100 300 250 Output: FULL DISCOUNT HALF DISCOUNT NO DISCOUNT FULL DISCOUNT","solution":"def evaluate_discount(T, test_cases): Determines discount eligibility for each test case. Parameters: - T (int): The number of test cases. - test_cases (list): A list of tuples where each tuple contains two integers: order_amount and threshold_amount. Returns: - results (list): A list of strings indicating discount eligibility for each test case. results = [] for order_amount, threshold_amount in test_cases: if order_amount > threshold_amount: results.append(\\"FULL DISCOUNT\\") elif order_amount == threshold_amount: results.append(\\"HALF DISCOUNT\\") else: results.append(\\"NO DISCOUNT\\") return results"},{"question":"Given a matrix of integers where every row and every column is sorted in ascending order, write a function to find the smallest element in the matrix that is greater than a given target integer. # Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers, m and n, representing the dimensions of the matrix. - The next m lines each contain n integers, representing the matrix. - The next line contains a single integer, the target. # Output - For each test case, print the smallest element in the matrix that is greater than the target. If no such element exists, output -1. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ m, n ≤ 500 - -10^9 ≤ matrix[i][j], target ≤ 10^9 # Example **Input:** ``` 2 3 3 1 3 5 2 4 6 3 5 7 4 2 2 1 2 3 4 5 ``` **Output:** ``` 5 -1 ``` # Explanation In the first test case, the target is 4. The smallest element greater than 4 in the given matrix is 5. In the second test case, the target is 5. There is no element greater than 5 in the given matrix, so the output is -1.","solution":"def smallest_greater_than_target(matrix, target): Finds the smallest element in a sorted matrix that is greater than the target. :param matrix: List of lists, represents the sorted matrix. :param target: Integer, the target value. :return: The smallest integer in the matrix greater than the target, or -1 if no such element exists. m = len(matrix) n = len(matrix[0]) candidates = [] for i in range(m): for j in range(n): if matrix[i][j] > target: candidates.append(matrix[i][j]) if candidates: return min(candidates) else: return -1 def process_test_cases(t, test_cases): results = [] for i in range(t): matrix = test_cases[i][\\"matrix\\"] target = test_cases[i][\\"target\\"] results.append(smallest_greater_than_target(matrix, target)) return results"},{"question":"You are tasked with developing a sequence of integer values based on an initial sequence and a set of transformation rules. The transformation rules are defined as a list of operations, with each operation indicating how to replace a specific integer with a new integer. For example, if input integer `a` is given and the transformation rule is `a -> b`, then every occurrence of `a` in the sequence should be replaced with `b`. Given an initial sequence of `N` integers and `M` transformation rules, your task is to apply the transformations exactly once in the order they are provided and return the resulting sequence. Constraints * 1 ≤ N ≤ 100 * 1 ≤ M ≤ 100 * 1 ≤ integers in sequence ≤ 1000 * The integer values for transformation are within the range [1, 1000]. Input The input is given from Standard Input in the following format: N M sequence a_1 b_1 a_2 b_2 : a_M b_M Where: - `N` is the number of integers in the initial sequence. - `M` is the number of transformation rules. - `sequence` is a space-separated list of `N` integers. - `a_i b_i` represents the transformation rule to replace integer `a_i` with integer `b_i`. Output Print the resulting sequence after applying all transformation rules. Examples Input 5 2 1 2 3 4 5 1 6 5 7 Output 6 2 3 4 7 Input 4 3 1 1 2 3 1 2 2 3 3 4 Output 2 2 3 4","solution":"def transform_sequence(N, M, sequence, rules): sequence_list = sequence.split() sequence_int_list = list(map(int, sequence_list)) rules_dict = {a: b for a, b in rules} result_sequence = [] for x in sequence_int_list: if x in rules_dict: result_sequence.append(rules_dict[x]) else: result_sequence.append(x) return \' \'.join(map(str, result_sequence)) # Example usage: # N, M = 5, 2 # sequence = \\"1 2 3 4 5\\" # rules = [(1, 6), (5, 7)] # print(transform_sequence(N, M, sequence, rules)) # Output: \\"6 2 3 4 7\\""},{"question":"A city has a number of car charging stations positioned along a straight road. Each charging station has a specific capacity representing the maximum number of cars it can charge simultaneously. There\'s also a sequence of car arrivals with each car specifying the station it prefers to charge at and the time it arrives. Your task is to determine if it is possible for all cars to be charged given the capacity constraints of the charging stations. Specifically, you need to check if there\'s any time during the day when the number of cars at any station exceeds its capacity. Input The first line contains two integers n and m (1 ≤ n ≤ 200 000, 1 ≤ m ≤ 200 000) — the number of charging stations and the number of cars arriving, respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109) — the capacities of the charging stations. The following m lines each contain two integers pi and ti (1 ≤ pi ≤ n, 1 ≤ ti ≤ 109) — the preferred station and the arrival time of the i-th car. Output Print \\"YES\\" if it is possible for all cars to be charged without exceeding the capacity of any station at any time. Otherwise, print \\"NO\\". Examples Input 3 5 2 3 1 1 2 2 4 1 1 3 2 2 3 Output YES Input 2 4 1 2 1 1 2 2 1 1 2 2 Output NO Note In the first example, the capacities of the stations are 2, 3, and 1 respectively. The car arrivals are spread in such a way that no station exceeds its capacity at any given time. In the second example, station 1 receives two cars arriving at the same time, which exceeds its capacity of 1, making it impossible to charge all cars simultaneously. Hence the answer is \\"NO\\".","solution":"def can_all_cars_be_charged(n, m, capacities, arrivals): station_load = [0] * n for station, time in arrivals: station_load[station - 1] += 1 if station_load[station - 1] > capacities[station - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Mike has a string s consisting of lowercase English letters, and he wants to create the longest possible palindrome by rearranging the characters of the string. A palindrome is a word that reads the same backward as forward. To achieve this, Mike is allowed to remove some characters from the string if necessary. Write a function that determines the length of the longest palindrome that can be made from the characters of the given string. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 1000). Output For each test case, print the length of the longest palindrome that can be made from the characters of the string s. Examples Input 2 abccccdd a Output 7 1 Explanation In the first example, one possible longest palindrome is \\"dccaccd\\", which has a length of 7. In the second example, the longest palindrome that can be formed from \'a\' is just \\"a\\" itself, which has a length of 1.","solution":"def longest_palindrome_length(strings): Given a list of strings, return a list of the lengths of the longest palindromes that can be formed from each string. def longest_palindrome_from_string(s): from collections import Counter count = Counter(s) length = 0 odd_found = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True if odd_found: length += 1 return length return [longest_palindrome_from_string(s) for s in strings] def process_input_output(test_cases): t = test_cases[0] strings = test_cases[1:] return longest_palindrome_length(strings)"},{"question":"Alexa has a collection of N gadgets where each gadget is represented by its price. She wants to purchase exactly X worth of gadgets. However, she has a constraint: she wants to buy gadgets from contiguous sections of the list. Your task is to help Alexa find the length of the shortest contiguous subarray such that the sum of its elements is exactly X. If multiple such subarrays exist, return the one that has the smallest starting index. If no subarray is found that sums to X, return -1. Input: The first line contains two space-separated integers N and X. The second line contains N integers, representing the prices of the gadgets. Output: Print the length of the shortest contiguous subarray whose sum equals X. If no such subarray exists, print -1. Constraints: 1 ≤ N ≤ 100000 1 ≤ X ≤ 10^9 1 ≤ Prices[i] ≤ 10^6 SAMPLE INPUT 6 9 1 2 3 4 5 6 SAMPLE OUTPUT 2 Explanation: The shortest contiguous subarray whose sum equals 9 is [4, 5]. This subarray\'s length is 2, which is the shortest possible length among all subarrays with the specified sum.","solution":"def shortest_subarray_with_sum(N, X, prices): Finds the length of the shortest contiguous subarray whose sum equals X. If there are multiple such subarrays, the one with the smallest starting index is chosen. If no such subarray is found, return -1. from collections import deque min_length = float(\'inf\') current_sum = 0 start = 0 subarray_indices = (-1, -1) for end in range(N): current_sum += prices[end] while current_sum >= X: if current_sum == X: if (end - start + 1) < min_length: min_length = end - start + 1 subarray_indices = (start, end) current_sum -= prices[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Problem description: Alex, a software developer, wants to implement a new feature in his project management application. He needs your help to validate the project milestones. Each milestone is described by an interval [start, end], which represents that the milestone begins at the time \'start\' and ends at the time \'end\'. Two milestones are considered to be in conflict if their intervals overlap. The intervals [a, b] and [c, d] overlap if and only if a <= d and c <= b. Given a list of milestones, your task is to determine the maximum number of non-conflicting milestones that can be completed. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of milestones. The next N lines each contain two integers, start and end, representing the interval of a milestone. Output: For each test case, output a single line containing the maximum number of non-conflicting milestones that can be completed. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ start < end ≤ 10^9 Example: Input: 2 3 1 3 2 5 4 7 4 1 2 2 3 3 4 4 5 Output: 2 3 Explanation: Example case 1: The non-conflicting milestones are [1, 3] and [4, 7] or [2, 5] and [4, 7]. So, the maximum number of non-conflicting milestones is 2. Example case 2: All milestones can be completed since none of them overlap. The maximum number of non-conflicting milestones is 3.","solution":"def max_non_conflicting_milestones(test_cases): results = [] for milestones in test_cases: milestones.sort(key=lambda x: x[1]) # Sort by end times count = 0 last_end_time = -1 for start, end in milestones: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) milestones = [] for j in range(index+1, index+1+N): start, end = map(int, lines[j].split()) milestones.append((start, end)) test_cases.append(milestones) index += 1 + N return test_cases def output_results(results): return \\"n\\".join(map(str, results))"},{"question":"Alex is a fan of number puzzles. Today, he created a game involving narrowing down candidate numbers to some desired properties. Alex has an array consisting of n integers, and two more integers k and d. He wants to calculate the maximum possible sum of a subsequence of length k from this array, such that the difference between the maximum and minimum elements in the subsequence is less than or equal to d. Write a function that determines this maximum possible sum. Input The first line contains one integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 1000), the elements of the array. The third line contains the integers k and d (1 ≤ k ≤ n, 0 ≤ d ≤ 2000). Output Print one integer, the maximum possible sum of a subsequence with the given constraints. If there is no solution, print -1. Example Input 6 1 2 3 4 5 6 3 2 Output 15 Explanation One possible solution is the subsequence [4, 5, 6] with a sum of 15. The maximum difference between elements is 6 - 4 = 2, which is less than or equal to 2.","solution":"def max_subsequence_sum(n, arr, k, d): from itertools import combinations max_sum = -1 for comb in combinations(arr, k): if max(comb) - min(comb) <= d: max_sum = max(max_sum, sum(comb)) return max_sum"},{"question":"In this task, you are required to find the shortest path in a grid with obstacles. You are given a grid of size `m x n`, where each cell is either empty (0) or an obstacle (1). You can move up, down, left, or right from an empty cell to another empty cell. Write a function `findShortestPath(grid)` that takes a 2D list `grid` as input and returns the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). If there is no such path, return -1. The function signature is: ```python def findShortestPath(grid: List[List[int]]) -> int: ``` # Constraints: - 2 <= m, n <= 100 - grid[i][j] is 0 or 1 - The starting point (0, 0) and the destination point (m-1, n-1) are always empty (i.e., grid[0][0] == 0 and grid[m-1][n-1] == 0). # Input: - A 2D list representing the grid. # Output: - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner or -1 if such a path does not exist. # Example: Input: ```python [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] ``` Output: ```python 4 ```","solution":"from typing import List, Tuple from collections import deque def findShortestPath(grid: List[List[int]]) -> int: # Define directions for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Get grid dimensions m, n = len(grid), len(grid[0]) # Edge case: if start or end is blocked if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 # Breadth-First Search (BFS) initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # Goal check if row == m - 1 and col == n - 1: return dist # Visit neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < m and 0 <= new_col < n and grid[new_row][new_col] == 0: if (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"A robot is situated in an infinite 2D grid at position (0, 0). The robot follows a sequence of commands consisting of \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). After executing a certain number of commands, the robot may return to the origin. Write a function that takes a string of commands and returns `true` if the robot returns to the origin after executing all the commands, or `false` otherwise. Input - A single string `commands` of length N (1 ≤ N ≤ 10^4), where each character is one of \'U\', \'D\', \'L\', or \'R\'. Output - A single boolean value `true` if the robot returns to the origin, `false` otherwise. Examples Input \\"UD\\" Output true Input \\"LL\\" Output false Input \\"UDLR\\" Output true Explanation In the first example, the robot moves up and then down, returning to the origin. In the second example, the robot moves left twice, so it does not return to the origin. In the third example, the robot moves up, down, left, and right, eventually returning to the origin.","solution":"def robot_return_to_origin(commands): Determines if the robot returns to the origin after executing all commands. :param commands: A string of commands (\'U\', \'D\', \'L\', \'R\') :return: True if the robot returns to the origin, otherwise False x, y = 0, 0 # Initialize starting point (origin) for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Given a list of integers representing stock prices in chronological order, determine the maximum possible profit that can be made by buying and selling one share of the stock within the given period. Note that you must buy before you can sell. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ price_i ≤ 10^4 * price_i is an integer. Input Input is given from Standard Input in the following format: N price_1 price_2 ... price_N Output Print the maximum possible profit. If no profit can be achieved, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 8 2 4 1 7 5 9 3 5 Output 8","solution":"def max_profit(prices): Returns the maximum possible profit from buying and selling one share of stock. :param prices: List[int], list of stock prices :return: int, maximum possible profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"You are given a long strip of paper with different colored sections. Each section is represented by an integer from 1 to C, where each integer represents a different color. Your task is to find the minimum length of a contiguous subarray of the strip that contains at least one section of each color from 1 to C. Input: The first line contains two integers N and C, where N is the number of sections in the strip and C is the number of different colors. The second line contains N space-separated integers, representing the color of each section from left to right. Output: Print a single integer, the length of the smallest contiguous subarray that contains at least one section of each color. Constraints: 1 ≤ N ≤ 100000 1 ≤ C ≤ 100 1 ≤ Color of each section ≤ C SAMPLE INPUT 7 3 1 2 2 3 1 2 1 SAMPLE OUTPUT 3 Explanation In this example, the smallest subarray that contains at least one section of each color {1, 2, 3} is [2, 3, 1], which has a length of 3.","solution":"def min_contiguous_subarray_length(N, C, colors): from collections import defaultdict # Dictionary to count the frequency of each color in the current window color_count = defaultdict(int) # To keep track of how many distinct colors we have in the current window distinct_colors = 0 min_length = float(\'inf\') left = 0 for right in range(N): if color_count[colors[right]] == 0: distinct_colors += 1 color_count[colors[right]] += 1 while distinct_colors == C: min_length = min(min_length, right - left + 1) color_count[colors[left]] -= 1 if color_count[colors[left]] == 0: distinct_colors -= 1 left += 1 return min_length"},{"question":"You are given an array of n integers and an integer k. Determine the minimum number of elements you need to remove from the array so that the remaining elements can be arranged in pairs, each summing to a multiple of k. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100). The second line contains n integers a_i (1 ≤ a_i ≤ 10^9). Output Print the minimum number of elements that need to be removed from the array. Examples Input 6 3 1 2 3 4 5 6 Output 0 Input 5 5 1 2 3 4 5 Output 1 Input 7 2 1 1 1 1 1 1 1 Output 1 Note In the first example, the array can be paired as (1, 2), (3, 6), and (4, 5), all pairs sum to multiples of 3. So no removals are needed. In the second example, by removing the element 3, the remaining array can be paired as (1, 4) and (2, 5), both sum to 5. Hence, only one removal is needed. In the third example, by removing a single 1, we can pair the remaining elements (1,1), (1,1), and (1,1), all sums being 2 which is a multiple of k=2. Hence, one removal is needed.","solution":"def min_removals_to_pair_with_sum_multiple_of_k(n, k, arr): from collections import defaultdict # Count the remainders remainder_count = defaultdict(int) for number in arr: remainder = number % k remainder_count[remainder] += 1 # Initialize the number of elements to be removed removals = 0 # Check pairs from 1 to (k // 2) for i in range(1, (k // 2) + 1): if i != k - i: num_pairs = min(remainder_count[i], remainder_count[k - i]) removals += remainder_count[i] + remainder_count[k - i] - 2 * num_pairs # Handling the case where the remainder is 0 removals += remainder_count[0] % 2 # Handling the case for even k where we need to handle k/2 point: if k % 2 == 0: removals += remainder_count[k // 2] % 2 return removals"},{"question":"A garden contains a number of flowerbeds arranged in a line. Each flowerbed can either contain a flower or be empty. A gardener has a certain number of flowers and he wants to plant them in the flowerbeds. However, a flower cannot be planted in a flowerbed if there is another flower in an adjacent flowerbed (either directly to the left or the right). Help the gardener determine if he can plant all the given flowers in the flowerbeds following the rule. Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the flowerbed array. The second line contains an array of n elements where each element is either 0 (empty flowerbed) or 1 (flowerbed with a flower). The third line contains an integer m (0 ≤ m ≤ n), the number of flowers the gardener wants to plant. Output Output \\"Yes\\" if it is possible to plant all m flowers in the flowerbeds without violating the rule, otherwise output \\"No\\". Examples Input 5 1 0 0 0 1 1 Output Yes Input 5 1 0 0 0 1 2 Output No Input 1 0 1 Output Yes Note In the first example, the gardener can plant one flower in the third flowerbed. In the second example, there is no way to plant two flowers without violating the rule. In the third example, there is only one flowerbed, and it is empty, so he can plant his one flower there.","solution":"def can_plant_flowers(n, flowerbeds, m): count = 0 i = 0 while i < n: if flowerbeds[i] == 0: if (i == 0 or flowerbeds[i-1] == 0) and (i == n-1 or flowerbeds[i+1] == 0): flowerbeds[i] = 1 count += 1 if count >= m: return \\"Yes\\" i += 1 return \\"No\\""},{"question":"Alice is a software engineer who loves puzzles and challenges. Recently, she discovered an interesting problem related to strings and binary operations. Being curious, she decided to solve it but now she needs your help to verify the solution efficiently. The problem is as follows: You are given a binary string `s` of length `n` which consists of characters \'0\' and \'1\'. Alice can perform the following operation as many times as she wants: - Select any two adjacent different characters and remove them from the string. The remaining parts are concatenated without changing their order. Alice wants to know the minimum possible length of the string after performing any number of such operations. Input The first line contains a single integer `n` (1 ≤ n ≤ 2*10^5) — the length of the binary string. The second line contains the binary string `s` of length `n`. Output Print the minimum possible length of the string after performing any number of operations. Example Input 5 01010 Output 1 Explanation By performing the operations, you can remove pairs of \'01\' or \'10\'. Removing all pairs step by step can lead to either \'0\' or \'1\' remaining in this example. Input 6 110110 Output 2 Explanation Adjacent pairs like `10` can be removed, leading to `1110` or similar, but it cannot be reduced further than two remaining characters.","solution":"def min_length_after_operations(n, s): Returns the minimum possible length of the string after performing any number of operations where adjacent different characters can be removed. stack = [] for char in s: if stack and stack[-1] != char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"In a faraway galaxy, there exists a planet with a grid-like structure known as the Flight Control System. The grid is of size n x m where each block can either be open (\\"O\\") or closed (\\"C\\"). A spaceship can traverse from one block to another only if both blocks are open and are adjacent either horizontally or vertically. Your task is to calculate the number of distinct paths the spaceship can take to move from the top-left corner of the grid (1,1) to the bottom-right corner of the grid (n,m). The spaceship can only move right or down at each step. Write a program to determine the number of distinct paths from the top-left to the bottom-right considering the blocks that are blocked. Note: - A path is valid if it does not pass through or end on a blocked block. - The spaceship cannot move out of the grid boundaries. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid. - The next n lines contain m characters each (\'O\' for open and \'C\' for closed), representing the grid. Output: - Print a single integer denoting the number of distinct valid paths from the top-left corner to the bottom-right corner. Example: Input: 3 3 OOO OCO OOO Output: 2 Explanation: The spaceship has two distinct paths from the top-left to bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def number_of_paths(n, m, grid): if grid[0][0] == \'C\' or grid[n-1][m-1] == \'C\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'C\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"**Problem** You are given an integer array `nums` sorted in non-decreasing order. Write a function that removes the duplicates in-place such that each element appears only once and returns the new length of the array. Do not allocate extra space for another array; you must modify the input array in-place with O(1) extra memory. The relative order of the elements should be kept the same. Furthermore, after removing the duplicates, the first part of the array should hold the final result up to the new length, and the rest of the array could have any values. Constraints The input satisfies the following conditions: * `1 ≤ nums.length ≤ 3 * 10^4` * `-10^4 ≤ nums[i] ≤ 10^4` Input The input is given in the following format: The first line is given the length `N`. In the second line, the elements of the array `nums` are given, separated by spaces. Output Return the new length of the array after removing duplicates. Your function should not return the original array to maintain O(1) extra memory usage. Examples Input 4 1 1 2 2 Output 2 Input 5 0 0 1 1 1 Output 2","solution":"def remove_duplicates(nums): Removes duplicates from the sorted array in-place and returns the new length. :param nums: List[int], the input sorted list of integers :return: int, the new length of the array after removing duplicates if not nums: return 0 # Initialize the index to keep track of the unique elements index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[index] = nums[i] index += 1 return index"},{"question":"In a faraway land called Matrixland, there are n towns interconnected by m bidirectional roads. Each road has a certain travel time associated with it. The towns are numbered from 1 to n. A traveling merchant in Matrixland wants to visit all the towns exactly once and return to his starting town. He can start his journey from any town, visit all other towns exactly once, and return to the starting town, ensuring that he takes the shortest route possible. The challenge for the traveling merchant is to determine this shortest possible route. You are to help the merchant by writing a program that calculates the minimum travel time to visit all the towns and return to the starting town. Input The first line of input contains two integers n and m (1 ≤ n ≤ 15, 0 ≤ m ≤ n(n-1)/2) — the number of towns and the number of roads respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) — representing a road between towns u and v with travel time w. Output Print a single integer — the minimum travel time required for the merchant to visit all towns exactly once and return to the starting town. If it\'s impossible to visit all towns, print -1. Examples Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Input 3 3 1 2 5 2 3 4 1 3 3 Output 12 Input 3 2 1 2 5 1 3 9 Output -1 Note In the first sample, the merchant can take the route 1 -> 2 -> 4 -> 3 -> 1 or any of its permutations which will give the minimum travel time of 80. In the second sample, the shortest possible route is 1 -> 2 -> 3 -> 1 with a travel time of 5 + 4 + 3 = 12. In the third sample, it is impossible to visit all towns since there is no road between town 2 and town 3. Thus, the output is -1.","solution":"import itertools def solve_tsp(n, m, roads): # Create an adjacency matrix to store travel times between towns inf = float(\'inf\') distance_matrix = [[inf] * n for _ in range(n)] for u, v, w in roads: distance_matrix[u-1][v-1] = w distance_matrix[v-1][u-1] = w # Implement the Held-Karp algorithm using bitmask DP to solve the TSP dp = [[inf] * n for _ in range(1 << n)] dp[1][0] = 0 # Starting from the 0-th town for mask in range(1 << n): for u in range(n): if not (mask & (1 << u)): continue for v in range(n): if mask & (1 << v): continue new_mask = mask | (1 << v) dp[new_mask][v] = min(dp[new_mask][v], dp[mask][u] + distance_matrix[u][v]) min_tour_cost = inf for u in range(1, n): min_tour_cost = min(min_tour_cost, dp[(1 << n) - 1][u] + distance_matrix[u][0]) return min_tour_cost if min_tour_cost != inf else -1"},{"question":"Anna is interested in palindrome numbers. A palindrome number is a number that reads the same backward as forward, like 121 or 1331. One day, she was given a task to check if a number is a palindrome and, if not, find the minimum number of digits she needs to add to the end of the number to make it a palindrome. Given an integer n, determine if n is a palindrome. If n is not a palindrome, find the minimum number of digits required to be added to the end of n to make it a palindrome. Input The input consists of a single line containing the integer n (1 ≤ n ≤ 10^6). Output Output a single line containing either \\"YES\\" if n is already a palindrome, or the smallest number of digits needed to add to the end of n to make it a palindrome if it is not. Examples Input 121 Output YES Input 123 Output 2 Note In the first example, the number 121 reads the same from left to right and right to left, so it is a palindrome. In the second example, by adding 2 more digits to the end of 123 (321), it becomes 123321, which is a palindrome. Therefore, the minimum number of digits to add is 2.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. return s == s[::-1] def min_digits_to_palindrome(n): Check if the number n is a palindrome. If not, find the minimum number of digits required to be added to the end of n to make it a palindrome. Returns \\"YES\\" if n is already a palindrome, or the smallest number of digits needed to add to the end of n to make it a palindrome if it is not. n_str = str(n) if is_palindrome(n_str): return \\"YES\\" for i in range(1, len(n_str) + 1): if is_palindrome(n_str + n_str[i-1::-1]): return i # Ensure the function signature from above is used for test purposes: # min_digits_to_palindrome(123) should return 2"},{"question":"You are given a sequence of N numbers. A special operation can be performed on these numbers: you can choose any subsequence and reverse it. The goal is to determine if it is possible to sort the sequence in non-decreasing order using this operation. Input The first line of input contains a single integer T, denoting the number of test cases. T test cases follow. Each test case starts with an integer N, the number of elements in the sequence. The second line contains N integers, representing the sequence of numbers. Output For each test case, output \\"YES\\" if it is possible to sort the sequence using the described operation; otherwise, output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^6 ≤ Sequence elements ≤ 10^6 Example Input: 3 3 3 1 2 4 4 3 2 1 5 1 2 3 4 5 Output: YES YES YES","solution":"def can_sort_with_reversal(N, sequence): Determines if it is possible to sort the sequence in non-decreasing order by reversing any subsequence. sorted_sequence = sorted(sequence) return \\"YES\\" if sequence == sorted_sequence else \\"YES\\" def process_test_cases(T, test_cases): results = [] for N, sequence in test_cases: result = can_sort_with_reversal(N, sequence) results.append(result) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) sequence = list(map(int, input_lines[index + 1].split())) test_cases.append((N, sequence)) index += 2 results = process_test_cases(T, test_cases) return \'n\'.join(results)"},{"question":"Given an undirected graph with N vertices and M edges, the vertices are numbered from 1 to N. Taro wants to check if the graph contains a cycle. More formally, determine if there is a way to start from any vertex v and move along the edges to eventually return to v without retracing any step. Constraints * All values in input are integers. * 1 leq N leq 10^5 * 1 leq M leq 10^5 * 1 leq u_i, v_i leq N Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Output Print \\"YES\\" if the graph contains a cycle, otherwise print \\"NO\\". Examples Input 5 5 1 2 2 3 3 4 4 5 5 1 Output YES Input 3 2 1 2 2 3 Output NO Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 2 5 Output YES Input 4 4 1 2 2 3 3 4 4 1 Output YES","solution":"def has_cycle(n, edges): from collections import defaultdict, deque def bfs(start): queue = deque([(start, -1)]) visited[start] = True while queue: node, parent = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, node)) elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if bfs(node): return \\"YES\\" return \\"NO\\" # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n, m = int(data[0]), int(data[1]) edges = [(int(data[i]), int(data[i + 1])) for i in range(2, len(data), 2)] print(has_cycle(n, edges))"},{"question":"# Problem Statement: You are working for a company that organizes various events. One of the challenging tasks is to manage the invitation list for these events. Each guest is identified uniquely by their full name, and some guests may attend multiple events. To make things easier, you need to generate a unique identifier for each guest. The unique identifier should meet the following criteria: - It should be the guest\'s first name combined with the first letter of their last name, both in lowercase. - If a generated identifier is already assigned to another guest, append a numeric suffix to it, starting from 1, and increment the suffix until a unique identifier is found. Write a program that reads a list of guest full names and generates a unique identifier for each guest based on their name. The program should output the list of unique identifiers in the same order as the input names. # Input: The first line contains an integer **n** (1 ≤ n ≤ 10^5), the number of guests. Each of the next **n** lines contains a guest\'s full name in the format \\"First Last\\", where: - First and Last are strings consisting only of lowercase English letters. - The lengths of First and Last are both between 1 and 100 inclusive. # Output: Print **n** lines, each containing the unique identifier for the corresponding guest. # Example: Input: ``` 5 john doe jane doe john smith john d jane smith ``` Output: ``` johnd1 janedoe johns johnd2 janes ``` Explanation: - \\"john doe\\" -> \\"johnd1\\" (as \\"johnd\\" is already used by \\"john d\\") - \\"jane doe\\" -> \\"janedoe\\" (unique identifier) - \\"john smith\\" -> \\"johns\\" (unique identifier) - \\"john d\\" -> \\"johnd2\\" (as \\"johnd\\" is used by \\"john doe\\" and \\"johnd1\\" is also taken) - \\"jane smith\\" -> \\"janes\\" (unique identifier)","solution":"def generate_unique_identifiers(guest_names): Generates unique identifiers for a list of guests. Args: guest_names (list of str): A list of guest full names. Returns: list of str: A list of unique identifiers. unique_identifiers = [] identifier_dict = {} for name in guest_names: first, last = name.split() base_identifier = first + last[0] if base_identifier not in identifier_dict: identifier_dict[base_identifier] = 0 unique_identifiers.append(base_identifier) else: identifier_dict[base_identifier] += 1 while f\\"{base_identifier}{identifier_dict[base_identifier]}\\" in identifier_dict: identifier_dict[base_identifier] += 1 new_identifier = f\\"{base_identifier}{identifier_dict[base_identifier]}\\" unique_identifiers.append(new_identifier) identifier_dict[new_identifier] = 0 return unique_identifiers # Reading the input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) guest_names = data[1:] unique_ids = generate_unique_identifiers(guest_names) for uid in unique_ids: print(uid)"},{"question":"A company is hosting a competitive coding event which features various coding problems. The event uses a scoreboard that tracks the scores of participants. Your task is to implement a scoring system that processes a series of score changes and outputs the current rank list. The event has N participants and M score changes. Each score change includes a participant ID and a score. A higher score should give the participant a higher rank. If two participants have the same score, then the participant with the lower ID gets the higher rank. The participants start with 0 points. Note the following details: - Each participant has a unique ID between 1 and N. - A score change modifies the current score of a participant by adding the given score to their existing score. **Input** The input consists of: - Two integers N and M. - M lines following, each containing two integers pi and si, where pi is the participant ID and si is the score change. **Output** Output the ranked list of participants based on their current scores after all M score changes. The list should be printed in ascending order of ranks, where each line contains the ID of a participant followed by their total score. **Constraints** - 1 ≤ N, M ≤ 10^5 - -1000 ≤ si ≤ 1000 - 1 ≤ pi ≤ N **Example** Input: ``` 4 5 1 10 2 5 3 10 1 -5 2 10 ``` Output: ``` 3 10 2 15 1 5 4 0 ``` Explanation: 1. After the first score change, participant 1 has 10 points. 2. After the second score change, participant 2 has 5 points. 3. After the third score change, participant 3 has 10 points. 4. After the fourth score change, participant 1\'s score changes to 5. 5. After the fifth score change, participant 2\'s score changes to 15. The final ranking is: 1. Participant 3 with 10 points. 2. Participant 2 with 15 points. 3. Participant 1 with 5 points. 4. Participant 4 with 0 points.","solution":"def process_scores(N, M, score_changes): # Initialize scores dictionary with participants starting at 0 scores = {i: 0 for i in range(1, N+1)} # Apply each score change for pi, si in score_changes: scores[pi] += si # Convert dictionary to list of tuples and sort sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0])) return sorted_scores"},{"question":"Ildar has a matrix of size n × m filled with lowercase English letters. He wants to find the largest square submatrix where all characters in the matrix are the same. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. Each of the next n lines contains a string of length m consisting of lowercase English letters. Output Output one integer — the side length of the largest square submatrix in which all characters are the same. Example Input 4 5 aabbc aabbb aabcd aadda Output 2 Note In the given sample, the largest square submatrix with all same characters is of size 2x2. It appears twice, one with \'a\' at the top left and another with \'b\' at the top right.","solution":"def largest_square_submatrix(n, m, matrix): # dp array to store the size of the largest square submatrix ending at (i, j) dp = [[0] * (m + 1) for _ in range(n + 1)] max_side_length = 0 # Iterate through the matrix for i in range(1, n + 1): for j in range(1, m + 1): if i == 1 or j == 1: dp[i][j] = 1 else: if matrix[i - 1][j - 1] == matrix[i - 2][j - 1] == matrix[i - 1][j - 2] == matrix[i - 2][j - 2]: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 else: dp[i][j] = 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Write a function to find the maximum subarray sum for a given array using the divide and conquer approach. The problem is to find the maximum sum of a contiguous subarray in an unbounded array (i.e., an array that can have both positive and negative integers). You need to implement the solution using the divide and conquer technique, leveraging the idea that the maximum subarray sum can either lie entirely in the left half, the right half, or cross the middle boundary of the array. Your function should be efficient with a time complexity of O(n log n). # Input - An integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - A list of n integers `arr[i]` (-10^4 ≤ arr[i] ≤ 10^4), the elements of the array. # Output - Print a single integer, the maximum sum of the contiguous subarray. # Example Input: ``` 8 -2 -3 4 -1 -2 1 5 -3 ``` Output: ``` 7 ``` # Explanation The maximum subarray sum is obtained by summing the subarray `[4, -1, -2, 1, 5]`, which has a sum of `7`. Note You must write the function using the divide and conquer approach, not using Kadane\'s algorithm or any other iterative method. Here is a brief outline of how you can achieve it: 1. Divide the array into two halves. 2. Recursively find the maximum subarray sum for the left and right halves. 3. Find the maximum subarray sum that crosses the midpoint. 4. Combine the results from steps 2 and 3 to get the overall maximum subarray sum. The maximum sum of the contiguous subarray is then determined by combining these","solution":"def max_crossing_sum(arr, low, mid, high): Find the maximum sum of the subarray that crosses the midpoint. left_sum = float(\'-inf\') total = 0 for i in range(mid, low-1, -1): total += arr[i] if total > left_sum: left_sum = total right_sum = float(\'-inf\') total = 0 for i in range(mid+1, high+1): total += arr[i] if total > right_sum: right_sum = total return left_sum + right_sum def max_subarray_sum(arr, low, high): Find the maximum sum of a contiguous subarray using divide and conquer. if low == high: return arr[low] mid = (low + high) // 2 left_max = max_subarray_sum(arr, low, mid) right_max = max_subarray_sum(arr, mid+1, high) crossing_max = max_crossing_sum(arr, low, mid, high) return max(left_max, right_max, crossing_max) def find_maximum_subarray_sum(arr): if not arr: return 0 return max_subarray_sum(arr, 0, len(arr)-1)"},{"question":"A string consisting of only the characters \'a\', \'b\', and \'c\' is given. We call a string diverse if no two adjacent characters are the same. For example, \\"abc\\", \\"acbac\\" and \\"bcbca\\" are all diverse strings, whereas \\"aa\\", \\"bb\\" and \\"cc\\" are not. Given a string s, you have to determine the minimum number of characters you need to change to make the string diverse. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines contain a string s (1 ≤ |s| ≤ 100) consisting of only \'a\', \'b\', and \'c\'. Output For each test case, print a single integer — the minimum number of characters you need to change to make the string diverse. Examples Input 3 aaab bacc bbcbb Output 2 1 2","solution":"def min_changes_to_diverse(s): changes = 0 for i in range(1, len(s)): if s[i] == s[i-1]: changes += 1 return changes def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_changes_to_diverse(s)) return results # Input reading def read_input(input_text): input_lines = input_text.strip().split(\'n\') t = int(input_lines[0]) test_cases = input_lines[1:t + 1] return test_cases # Output formatting def format_output(output_list): return \'n\'.join(map(str, output_list))"},{"question":"Problem Description. Emily and her friends are playing a game where they need to guess a secret word. The secret word is hidden inside a grid of random letters. They can find the word only if it is placed horizontally, either from left to right or from right to left. Help Emily and her friends by writing a program to check if the secret word exists in the grid. If the word is found, return \\"FOUND\\", otherwise return \\"NOT FOUND\\". Input: - The first line contains two integers, `r` (number of rows) and `c` (number of columns) of the grid. - The next `r` lines each contain a string of `c` characters, representing the grid. - The last line contains a string `word` which is the secret word to find. Output: - Print \\"FOUND\\" if the word is present in the grid horizontally; otherwise, print \\"NOT FOUND\\". Constraints: - 1 ≤ r, c ≤ 100 - The grid contains only uppercase English letters. - The length of the word is between 1 and `c` inclusive. Example: Input: 3 4 ABCD EFGH IJKL FEDC Output: FOUND","solution":"def find_word_in_grid(r, c, grid, word): This function checks if the secret word exists in the grid horizontally either left-to-right or right-to-left. Parameters: r (int): Number of rows in the grid c (int): Number of columns in the grid grid (list of str): The grid representation where each string is a row in the grid word (str): The secret word to find Returns: str: \\"FOUND\\" if the word is found in the grid, otherwise \\"NOT FOUND\\" reversed_word = word[::-1] for row in grid: if word in row or reversed_word in row: return \\"FOUND\\" return \\"NOT FOUND\\""},{"question":"A digital billboard displays a sequence of coloured lights to communicate a message in a compact form. Each message consists of three possible states for each light: \\"Red\\", \\"Green\\", and \\"Blue\\". The message is encoded using a string where \'R\' represents Red, \'G\' represents Green, and \'B\' represents Blue. You are tasked with decoding the sequence of lights and outputting the corresponding message. Each sequence is guaranteed to be non-empty and only contain the characters \'R\', \'G\', and \'B\'. Input The first line contains a string representing the light sequence. The string length is between 1 and 100 characters. Output Output the decoded light sequence message as a string of the same length. Examples Input RGBBRG Output RedGreenBlueBlueRedGreen Input RRRGGGBBB Output RedRedRedGreenGreenGreenBlueBlueBlue Input RGB Output RedGreenBlue","solution":"def decode_light_sequence(sequence): Decodes the light sequence and outputs the corresponding message. Args: sequence (str): A string containing \'R\', \'G\', \'B\' representing the light sequence. Returns: str: A string representing the decoded light sequence message. # Dictionary to map the characters to their corresponding colors color_map = {\'R\': \'Red\', \'G\': \'Green\', \'B\': \'Blue\'} # Using list comprehension to decode the sequence by mapping each character and joining them return \'\'.join(color_map[char] for char in sequence)"},{"question":"You are given a string consisting only of the following characters: \'a\', \'b\', and \'c\'. You need to transform the string into a \\"happy\\" string. A \\"happy\\" string is defined as a string in which no two consecutive characters are the same. You can perform the following operation any number of times (including zero): choose any character in the string and replace it with any other character (\'a\', \'b\', or \'c\'). Your task is to determine the minimum number of operations required to transform the given string into a \\"happy\\" string. Input A single line containing a string s (1 ≤ |s| ≤ 100). Output A single integer, the minimum number of replacement operations required to make the string \\"happy\\". Examples Input abc Output 0 Input aaab Output 2 Note In the first example, the string \\"abc\\" is already a \\"happy\\" string, so no replacements are needed, hence the output is 0. In the second example, changing the two \'a\' characters to \'b\' and \'c\' results in the string \\"abac\\" or another equivalent \\"happy\\" string, so the minimum number of replacements is 2.","solution":"def min_operations_to_happy_string(s): Function to determine the minimum number of replacement operations required to make the given string a \\"happy\\" string. operations = 0 n = len(s) for i in range(n - 1): if s[i] == s[i + 1]: operations += 1 return operations"},{"question":"The forest management of Arboria wants to build a new network of roads to connect their four important landmarks: the North Forest Camp located at (1,1), the South Forest Camp at (n,n), the West Lumberyard at (n,1), and the East Lumberyard at (1,n). The forest is a grid of n rows and n columns. A road connects directly adjacent cells — vertically or horizontally. The grid has some cells that contain obstacles where roads cannot be built. Each cell can either be empty (represented by \'.\') or contain obstacles (represented by \'#\'). Roads can be built on empty cells only. Your task is to determine if it\'s possible to build roads such that: 1. The North Forest Camp is connected to the South Forest Camp. 2. The West Lumberyard is connected to the East Lumberyard. Note that each camp and lumberyard can only be connected through roads built on empty cells. Input The first line of input contains an integer n (3 ≤ n ≤ 50), the size of the grid. The next n lines each contain a string of n characters representing the forest grid. Output Print \\"YES\\" if it\'s possible to build the roads according to the conditions, otherwise print \\"NO\\". Examples Input 5 ..... ..... ..... ..... ..... Output YES Input 4 #..# #..# Output NO","solution":"def is_path_possible(n, grid): from collections import deque # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start, end): visited = set() queue = deque([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False north_to_south = bfs((0, 0), (n-1, n-1)) west_to_east = bfs((n-1, 0), (0, n-1)) if north_to_south and west_to_east: return \\"YES\\" else: return \\"NO\\" # Example usage n = 5 grid = [ \\".....\\", \\".....\\", \\".....\\", \\".....\\", \\".....\\" ] print(is_path_possible(n, grid)) # Output: YES"},{"question":"Martha is a software developer working on data analysis. She deals with data entries that contain timestamps and associated values. She wants to extract the maximum value data point for specific time ranges to generate a summary for her report. Given a list of data entries with timestamps and values, help Martha determine the maximum value within the specified time ranges. Input The first line of input contains two space-separated integers N and M, where N is the number of data entries and M is the number of time range queries. Next N lines each contain a timestamp Ti (integer) and a value Vi (integer). The next M lines each contain two space-separated integers L and R, representing the start and end of the time range queries. Output Print the maximum value for each query in a separate line. If no data entry falls within the time range, print \\"No data\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ Ti ≤ 10^9 1 ≤ Vi ≤ 10^9 1 ≤ L < R ≤ 10^9 SAMPLE INPUT 6 3 1 5 3 10 5 7 6 9 8 12 10 6 2 5 1 7 4 9 SAMPLE OUTPUT 10 10 12 Explanation For the first query (2 to 5): Data entries within this range are (3, 10) and (5, 7). The maximum value is 10. For the second query (1 to 7): Data entries within this range are (1, 5), (3, 10), (5, 7), and (6, 9). The maximum value is 10. For the third query (4 to 9): Data entries within this range are (5, 7), (6, 9), and (8, 12). The maximum value is 12.","solution":"def find_max_values(data_entries, queries): Find the maximum value for each time range in queries from the list of data entries. :param data_entries: List of tuples [(Ti, Vi)] :param queries: List of tuples [(L, R)] :return: List of maximum values or \\"No data\\" for each query import bisect # Sort data entries by timestamp data_entries.sort() # Extract separated lists for timestamps and values timestamps = [entry[0] for entry in data_entries] values = [entry[1] for entry in data_entries] results = [] # For each query range (L, R) for L, R in queries: # Find the index range in the timestamps list using binary search left_index = bisect.bisect_left(timestamps, L) right_index = bisect.bisect_right(timestamps, R) if right_index > left_index: # Get the maximum value in the range max_value = max(values[left_index:right_index]) results.append(max_value) else: results.append(\\"No data\\") return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') N, M = map(int, input_lines[0].split()) data_entries = [tuple(map(int, line.split())) for line in input_lines[1:N+1]] queries = [tuple(map(int, line.split())) for line in input_lines[N+1:N+M+1]] return find_max_values(data_entries, queries)"},{"question":"You are given an array of integers representing the stock prices of a company in chronological order. Write a program to find the maximum profit you can achieve. You may complete at most two transactions. **Note:** - A transaction is defined as buying and then selling one share of the stock. - You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). **Constraints:** - `0 <= prices.length <= 2 * 10^4` - `0 <= prices[i] <= 10^5` **Input:** The input consists of a single line containing space-separated integers, representing the stock prices. **Output:** Print the maximum profit you can achieve with at most two transactions. **Examples:** Input: ``` 3 3 5 0 0 3 1 4 ``` Output: ``` 6 ``` Explanation: - Buy on day 2 (price = 3) and sell on day 3 (price = 5), profit = 5-3 = 2. - Then buy on day 6 (price = 1) and sell on day 7 (price = 4), profit = 4-1 = 3. Input: ``` 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: - Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. - No second transaction is needed.","solution":"def maxProfit(prices): if not prices: return 0 # Initialize dp arrays n = len(prices) max_profit_first_transaction = [0] * n max_profit_second_transaction = [0] * n # Forward pass - calculate maximum profit up to each day for the first transaction min_price_so_far = prices[0] for i in range(1, n): max_profit_first_transaction[i] = max(max_profit_first_transaction[i-1], prices[i] - min_price_so_far) min_price_so_far = min(min_price_so_far, prices[i]) # Backward pass - calculate maximum profit from each day to the end for the second transaction max_price_so_far = prices[-1] for i in range(n-2, -1, -1): max_profit_second_transaction[i] = max(max_profit_second_transaction[i+1], max_price_so_far - prices[i]) max_price_so_far = max(max_price_so_far, prices[i]) # Calculate the maximum combined profit of the two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, max_profit_first_transaction[i] + max_profit_second_transaction[i]) return max_profit"},{"question":"You are given an n x n grid, where each cell in the grid contains an initially uncolored cell. The grid supports two operations: 1. Color a sub-grid: You can color a rectangular sub-grid of the grid with a certain color. 2. Check uniformity of a sub-grid: Given a sub-grid, determine if all the cells in that sub-grid have the same color. Your task is to process these operations efficiently. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and q (1 ≤ q ≤ 2⋅10^5), the size of the grid and the number of operations, respectively. - Each of the next q lines describes an operation, either of the form: - \\"color x1 y1 x2 y2 c\\" (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n, 1 ≤ c ≤ 10^9), meaning you should color the sub-grid from (x1, y1) to (x2, y2) with color c. - \\"check x1 y1 x2 y2\\" (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n), meaning you should check if all the cells in the sub-grid from (x1, y1) to (x2, y2) have the same color. Output - For each \\"check\\" operation, output \\"YES\\" if all the cells in the specified sub-grid have the same color, otherwise output \\"NO\\". Example Input ``` 5 5 color 1 1 2 2 3 check 1 1 5 5 color 2 2 3 3 3 check 1 1 2 2 color 1 2 3 3 2 check 1 1 3 3 ``` Output ``` NO YES NO ``` Note: - After first operation, cells (1,1), (1,2), (2,1), and (2,2) are colored with color 3. - After second operation, the answer is \'NO\' because not all cells are colored. - After third operation, an additional color 3 is filled in cells (2,2), (2,3), (3,2), and (3,3). - After fourth operation, since sub-grid (1,1) to (2,2) has all cells colored with color 3, the answer is \'YES\'. - After fifth operation, (2,2) is recolored with color 2, and hence the final check returns \'NO\'.","solution":"class Grid: def __init__(self, n): Initialize the grid with uncolored cells. The color is represented by None. self.n = n self.grid = [[None] * n for _ in range(n)] def color(self, x1, y1, x2, y2, c): Colors the sub-grid from (x1, y1) to (x2, y2) with color c. for i in range(x1-1, x2): for j in range(y1-1, y2): self.grid[i][j] = c def check(self, x1, y1, x2, y2): Checks if all the cells in the sub-grid from (x1, y1) to (x2, y2) have the same color. initial_color = self.grid[x1-1][y1-1] for i in range(x1-1, x2): for j in range(y1-1, y2): if self.grid[i][j] != initial_color: return \\"NO\\" return \\"YES\\" def process_operations(n, operations): grid = Grid(n) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"color\\": grid.color(int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]), int(parts[5])) elif parts[0] == \\"check\\": result = grid.check(int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4])) results.append(result) return results"},{"question":"Sarah received a list of N non-negative integers and she needs to determine the minimum number of operations required to make all the numbers in the list equal. In one operation, she can increment or decrement any element by 1. If it\'s impossible to make all numbers equal, print -1. Input The first line of input contains an integer T, the number of test cases. The first line of each test case contains an integer N, which is the size of the list. The second line of each test case contains N non-negative integers A1, A2, ..., AN, which are the elements of the list. Output For each test case, output a single line containing either the minimum number of operations required to make all elements of the list equal, or -1 if it is not possible. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ Ai ≤ 10^4 Subtasks Example Input: 3 3 1 2 3 4 0 0 0 1 2 8 5 Output: 2 1 3 Explanation In Example 1, making all elements equal to 2 requires 1 operation to increase 1 to 2 and 1 operation to decrease 3 to 2. In Example 2, making all elements equal to 0 requires one operation to decrease 1 to 0. In Example 3, making both elements equal to 7 requires 3 operations to decrease 8 to 5.","solution":"def min_operations_to_equalize(nums): Given a list of non-negative integers, returns the minimum number of operations required to make all numbers in the list equal or -1 if it\'s not possible. if not nums: return -1 median = sorted(nums)[len(nums) // 2] return sum(abs(x - median) for x in nums) def process_test_cases(T, test_cases): Processes multiple test cases and returns the result for each case. results = [] for i in range(T): N, nums = test_cases[i] results.append(min_operations_to_equalize(nums)) return results"},{"question":"Input The input consists of a single string S (1 ≤ length(S) ≤ 1024), containing only lowercase alphabets. Output Output the string \\"YES\\" if the string S is a palindrome, and \\"NO\\" otherwise. Examples Input abba Output YES Input abcdef Output NO Input racecar Output YES Input level Output YES","solution":"def is_palindrome(S): Returns \\"YES\\" if the string S is a palindrome, \\"NO\\" otherwise. return \\"YES\\" if S == S[::-1] else \\"NO\\""},{"question":"A transportation company has n trucks, and the i-th truck has a maximum load capacity of wi kilograms. The company receives m shipments, where the j-th shipment has a weight of sj kilograms. Each shipment needs exactly one truck to transport it. A truck can carry only one shipment at a time, and the weight of the shipment must not exceed the truck\'s load capacity. Determine the maximum number of shipments that can be transported by the company\'s trucks. Input The first line contains a single positive integer n (1 ≤ n ≤ 105) — the number of trucks. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 106) — the maximum load capacity of each truck. The third line contains a single positive integer m (1 ≤ m ≤ 105) — the number of shipments. The fourth line contains m integers s1, s2, ..., sm (1 ≤ sj ≤ 106) — the weight of each shipment. Output Print the maximum number of shipments that can be transported. Examples Input 3 5 10 15 4 8 5 3 12 Output 3 Input 2 6 8 3 4 7 9 Output 2 Input 5 3 7 5 9 11 3 10 1 4 Output 3 Note In the first example, the company can transport 3 shipments. One possible way is to use the first truck for the second shipment (weight 5), the second truck for the fourth shipment (weight 12), and the third truck for the first shipment (weight 8). In the second example, the company can transport 2 shipments. One possible way is to use the first truck for the first shipment (weight 4), and the second truck for the second shipment (weight 7). The third shipment (weight 9) cannot be transported because no truck has enough capacity. In the third example, all shipments can be transported. One possible way is to use the fifth truck for the first shipment (weight 10), the second truck for the second shipment (weight 1), and the third truck for the third shipment (weight 4).","solution":"def max_shipments(n, truck_capacities, m, shipment_weights): # Sort truck capacities and shipment weights truck_capacities.sort() shipment_weights.sort() # Initialize pointers for trucks and shipments i = 0 j = 0 # Initialize the count of possible shipments count = 0 # Use two pointer technique to match shipments with trucks while i < n and j < m: if truck_capacities[i] >= shipment_weights[j]: # If the truck can carry the shipment, increment count and move both pointers count += 1 i += 1 j += 1 else: # If the truck cannot carry the shipment, move to the next truck i += 1 return count"},{"question":"Write a program to manage a collection of integers with the following operations: * sum(l, r): compute and return the sum of the subarray from index **l** to index **r** (inclusive). * modify(i, x): update the element at index **i** to **x**. Given this, initialize the array B = {b0, b1, ..., bn-1} with 0 at all positions initially. Constraints: * 1 ≤ n ≤ 100000 * 1 ≤ m ≤ 100000 * For sum queries, 0 ≤ l ≤ r < n * For modify queries, 0 ≤ i < n, -10^9 ≤ x ≤ 10^9 Input: n m query1 query2 ... querym Each query is either in the form: * \'sum l r\' * \'modify i x\' Output: For each \'sum\' query, print the computed subarray sum in separate lines. Example: Input: 5 6 modify 0 3 modify 1 2 modify 4 5 sum 0 4 modify 2 -1 sum 1 3 Output: 10 1","solution":"class IntegerCollection: def __init__(self, n): Initialize the integer collection with array of size n filled with zeros. self.array = [0] * n def modify(self, i, x): Update the element at index i to x. self.array[i] = x def sum(self, l, r): Compute and return the sum of the subarray from index l to index r (inclusive). return sum(self.array[l:r+1]) def process_queries(n, m, queries): Processes a list of queries on a collection of size n and returns the results of \'sum\' queries. :param n: Size of the collection :param m: Number of queries :param queries: List of query strings :return: List of results for \'sum\' queries collection = IntegerCollection(n) results = [] for query in queries: parts = query.split() if parts[0] == \'modify\': _, i, x = parts collection.modify(int(i), int(x)) elif parts[0] == \'sum\': _, l, r = parts results.append(collection.sum(int(l), int(r))) return results"},{"question":"A weather forecasting agency asks you to compute weather prediction statistics based on the data from multiple weather stations. The weather station data is recorded in a file and contains the daily temperature readings for a given month. You are required to design a program that performs the following tasks: 1. Read the temperature data from a file. 2. Compute the average temperature for the entire month. 3. Find the highest and lowest temperatures logged. 4. Determine the number of days with above-average temperatures. The input file format is as follows: - The first line contains an integer `n` (1 ≤ n ≤ 31) representing the number of days in the month. - The subsequent `n` lines each contain an integer temperature reading (in Celsius) for each day. Your program should read the file, perform the necessary calculations, and output the results in the following format: - The average temperature, rounded to two decimal places. - The highest temperature. - The lowest temperature. - The number of days with above-average temperatures. Input - A text file with the first line containing an integer `n` (1 ≤ n ≤ 31). - Followed by `n` lines, each line containing an integer representing the temperature for that day. Example Input (file content): ``` 5 8 10 15 12 20 ``` Output - The average temperature. - The highest temperature. - The lowest temperature. - The number of days with above-average temperatures. Example Output: ``` 13.00 20 8 2 ```","solution":"def analyze_weather_data(filename): with open(filename, \'r\') as file: lines = file.readlines() n = int(lines[0].strip()) temperatures = [int(lines[i].strip()) for i in range(1, n+1)] average_temp = round(sum(temperatures) / n, 2) highest_temp = max(temperatures) lowest_temp = min(temperatures) above_average_days = sum(1 for temp in temperatures if temp > average_temp) return average_temp, highest_temp, lowest_temp, above_average_days"},{"question":"In a country called Quadrilandia, there are several quadrilateral parks of different sizes. The government of Quadrilandia wants to build new highways that connect certain groups of parks. The highway system must satisfy the additional constraint that the total highway system must contain exactly four different routes that connect the parks. Each highway can be bidirectional, meaning that either endpoint of a highway can be used as a starting point, and each route is defined as a set of highways that allows moving from one park to another without retracing any highway. Given the number of parks and the description of proposed highways, your task is to determine if it\'s possible to form exactly four distinct routes using the proposed highways. If so, output \\"YES\\" and specify at least one valid configuration of four routes. Otherwise, output \\"NO\\". Input - The first line contains two integers n and m (1 ≤ n ≤ 200, 1 ≤ m ≤ 2000), the number of parks (nodes) and proposed highways (edges). - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a bidirectional highway connecting park u and park v. Output - Output \\"YES\\" if it is possible to form exactly four routes and then output four lines each containing a valid route. Each route should be represented as a sequence of parks starting and ending at designated endpoints connected by highways. If it\'s not possible, output \\"NO\\". Example Input 6 8 1 2 2 3 3 4 4 1 1 5 5 6 6 3 2 4 Output YES 1 2 3 3 4 1 1 5 6 3 2 4 - or - NO","solution":"def four_routes(n, m, highways): from collections import defaultdict, deque # Create a graph adjacency list graph = defaultdict(list) for u, v in highways: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [-1] * (n + 1) parent = [-1] * (n + 1) queue = deque([start]) visited[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 parent[neighbor] = node queue.append(neighbor) elif visited[neighbor] >= visited[node]: # Detect a cycle path = [] x, y = node, neighbor while x != -1: path.append(x) x = parent[x] path.reverse() common_ancestor = parent[neighbor] while neighbor != common_ancestor: path.append(neighbor) neighbor = parent[neighbor] return path return [] # Try to find 4 different routes route_count = 0 routes = [] for i in range(1, n + 1): if route_count >= 4: break cycle = bfs(i) if cycle: route_count += 1 routes.append(cycle) if route_count == 4: print(\\"YES\\") for route in routes: print(\\" \\".join(map(str, route))) else: print(\\"NO\\") # Parse input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) highways = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) highways.append((u, v)) index += 2 four_routes(n, m, highways) if __name__ == \\"__main__\\": main()"},{"question":"In a small town, there is a very old tree known as the \\"Tree of Harmony\\". It has n branches, each branch containing a unique non-negative noise value that represents how much noise that branch produces. There are various platforms on the tree, and platforms can only be placed on branches to reduce the noise if they meet certain conditions. You are given an integer k, which tells you how many branches can be chosen to place platforms on them. The platforms reduce the noise of the branch they are placed on to zero. Your task is to determine the maximum possible reduction in noise by strategically placing the platforms on the branches. Input The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100 000) — the number of branches and the number of platforms that can be placed, respectively. The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 109), which represent the noise values of the branches. Output Output a single integer: the maximum possible reduction in noise you can achieve by placing the platforms optimally. Examples Input 5 3 4 8 2 6 10 Output 24 Input 4 2 1 2 3 4 Output 7 Input 6 2 1 3 5 7 9 11 Output 20","solution":"def max_noise_reduction(n, k, noise_values): Returns the maximum possible reduction in noise by placing k platforms optimally. Parameters: n (int): The number of branches. k (int): The number of platforms. noise_values (list of int): The noise values of the branches. Returns: int: The maximum noise reduction. # Sort the noise values in descending order noise_values.sort(reverse=True) # Sum the largest k noise values return sum(noise_values[:k])"},{"question":"Samantha loves playing with numbers and sequences. One day, she came across an interesting sequence problem. The sequence is defined as follows: - a(1) = 1, a(2) = 1 - For n > 2, a(n) = a(n-1) + a(n-2) Samantha can perform two types of operations on this sequence: 1. Change the value at a specific position. 2. Query the value at a specific position. She needs to efficiently handle these operations. Input: First line contains two integers N and Q, the length of the initial sequence and the number of queries. Second line contains N space-separated integers representing the initial sequence. Next Q lines describe the operations. Each operation is either of the form: - 1 i v (change the value at index i to v) - 2 i (query the value at index i) Output: For each query operation, print the value at the specified index. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^6 1 ≤ i ≤ N 1 ≤ v ≤ 10^9 1 ≤ a(i) ≤ 10^9 SAMPLE INPUT 5 5 1 1 2 3 5 2 3 1 3 10 2 3 1 5 15 2 5 SAMPLE OUTPUT 2 10 15 Explanation - The initial sequence given is [1, 1, 2, 3, 5]. - Query the value at index 3, which is 2. - Change the value at index 3 to 10, so the sequence becomes [1, 1, 10, 3, 5]. - Query the value at index 3 again, which is now 10. - Change the value at index 5 to 15, so the sequence becomes [1, 1, 10, 3, 15]. - Query the value at index 5, which is now 15.","solution":"def process_sequence_operations(N, Q, initial_sequence, operations): sequence = initial_sequence[:] result = [] for operation in operations: if operation[0] == 1: i = operation[1] - 1 v = operation[2] sequence[i] = v elif operation[0] == 2: i = operation[1] - 1 result.append(sequence[i]) return result"},{"question":"Problem: You are given a list of integers. Your task is to rearrange the list such that their relative difference with adjacent elements is minimized. In other words, you need to sort the list and rearrange it so that the maximum difference between any two adjacent elements is minimized. Return the rearranged list. Input: The first line contains an integer `t`, the number of test cases. Each test case consists of two lines. The first line contains an integer `n`, the number of elements in the list. The second line contains `n` space-separated integers, representing the elements of the list. Output: For each test case, print the rearranged list on a new line such that the maximum difference between any two adjacent elements is minimized. The elements in the rearranged list should be separated by a space. Constraints: 1 <= t <= 1000 2 <= n <= 10000 -1000000 <= elements in the list <= 1000000 Sample Input: 2 5 4 1 8 5 9 6 3 7 2 8 1 5 Sample Output: 1 4 5 8 9 1 2 3 5 7 8 Explanation: For the first test case: The sorted list is [1, 4, 5, 8, 9]. This ensures that the maximum difference between adjacent elements is minimized. For the second test case: The sorted list is [1, 2, 3, 5, 7, 8]. This ensures that the maximum difference between adjacent elements is minimized.","solution":"def minimize_adjacent_difference(t, test_cases): results = [] for case in test_cases: n, elements = case elements.sort() results.append(\\" \\".join(map(str, elements))) return results"},{"question":"A group of friends are playing a board game that involves moving along a grid. The grid is sized m x n, and the friends can move either right or down from their current position. The top-left cell of the grid is (1,1) and the bottom-right cell is (m,n). They want to determine the number of unique paths they can take to get from the top-left cell to the bottom-right cell. Write a function to calculate the number of unique paths from cell (1,1) to cell (m,n) on a grid. Input The input is a single string containing two space-separated integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid. Output Output a single integer representing the number of unique paths from the top-left cell to the bottom-right cell. Examples Input 3 7 Output 28 Input 3 2 Output 3 Note In the first sample, there are 28 unique paths from cell (1,1) to cell (3,7). In the second sample, there are 3 unique paths from cell (1,1) to cell (3,2). The formula to determine the number of unique paths in an m x n grid is a classic combinatorial problem. The number of unique paths can be calculated using dynamic programming or combinations, considering the total number of moves to reach from (1,1) to (m,n) and distributing m-1 \\"down\\" moves and n-1 \\"right\\" moves.","solution":"import math def unique_paths(grid_size): Returns the number of unique paths from the top-left cell to the bottom-right cell in an m x n grid. Args: grid_size (str): A string containing two space-separated integers m and n. Returns: int: Number of unique paths. m, n = map(int, grid_size.split()) # Compute binomial coefficient (m+n-2) choose (m-1) return math.comb(m + n - 2, m - 1)"},{"question":"You are given an array of integers and an integer target. Your task is to count the number of unique pairs of elements in the array that sum up to the target value. Note that the pair (a, b) is considered the same as (b, a), and each element in the array can only be used once in a pair. **Input:** The input consists of a single test case formatted as follows: n a_1 a_2 a_n t The first line contains a single integer n (1 leq n leq 100,000) representing the number of elements in the array. Each of the next n lines contains a single integer a_i (-10^6 leq a_i leq 10^6) which is the i-th element of the array. The last line contains a single integer t (-2 times 10^6 leq t leq 2 times 10^6) which is the target sum. **Output:** Count the number of unique pairs of elements that sum up to the target value and print the count. **Examples:** **Input:** 6 1 2 3 4 3 1 5 **Output:** 2 **Input:** 5 -1 -2 -3 -4 -5 -8 **Output:** 1 **Input:** 4 0 1 2 3 6 **Output:** 0","solution":"def count_unique_pairs(arr, target): seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = [int(data[i]) for i in range(1, n + 1)] target = int(data[n + 1]) result = count_unique_pairs(arr, target) print(result)"},{"question":"For a given string s, determine if it is a palindrome, ignoring non-alphanumeric characters and case sensitivity. If the string is a palindrome, print \\"YES\\", otherwise print \\"NO\\". Constraints * 1 leq |s| leq 1000 Input A single string s is given in a line. Output Print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO","solution":"def is_palindrome(s): Determines if the given string s is a palindrome, ignoring non-alphanumeric characters and case sensitivity. :param s: Input string :return: \\"YES\\" if the input string is a palindrome, otherwise \\"NO\\" # Remove non-alphanumeric characters and convert to lowercase filtered_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is the same forwards and backwards if filtered_str == filtered_str[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function to check if a given number is a palindrome. A number is a palindrome if it reads the same backward as forward. **Function Signature:** ```python def is_palindrome(n: int) -> bool: ``` **Input:** - An integer `n` where -10^9 leq n leq 10^9. **Output:** - Return `True` if `n` is a palindrome, otherwise `False`. **Example:** ```python assert is_palindrome(121) == True assert is_palindrome(-121) == False assert is_palindrome(10) == False assert is_palindrome(-101) == False ``` **Explanation:** - `121` reads the same backward as forward so it\'s a palindrome. - `-121` does not read the same backward as forward due to the negative sign. - `10` reads as `01` backward, which is different from `10`. - `-101` does not read the same backward as forward due to the negative sign.","solution":"def is_palindrome(n: int) -> bool: Check if the given integer is a palindrome. s = str(n) return s == s[::-1]"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains an integer which represents the height of that cell. You need to find the number of unique paths from the top-left corner to the bottom-right corner, such that the height of the cells along the path is non-decreasing. You can only move right or down from a cell. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers h_{i,j} (1 ≤ h_{i,j} ≤ 10^5) — the height of each cell in the grid. Output Print one integer — the number of unique paths from the top-left corner to the bottom-right corner with non-decreasing heights. Examples Input 3 3 1 2 3 2 3 4 3 4 5 Output 6 Input 2 2 3 1 4 2 Output 0 Note In the first example, all possible paths have non-decreasing heights. In the second example, no path with non-decreasing heights exists from the top-left to the bottom-right as you cannot move from a height of 3 to a height of 1 or 4 to 2.","solution":"def count_unique_paths(grid): n = len(grid) m = len(grid[0]) # dp array to store number of ways to reach each cell with non-decreasing constraint dp = [[0]*m for _ in range(n)] dp[0][0] = 1 # There\'s one way to start at the top-left corner for i in range(n): for j in range(m): if i > 0 and grid[i][j] >= grid[i-1][j]: dp[i][j] += dp[i-1][j] if j > 0 and grid[i][j] >= grid[i][j-1]: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Example usage: grid1 = [ [1, 2, 3], [2, 3, 4], [3, 4, 5] ] grid2 = [ [3, 1], [4, 2] ] print(count_unique_paths(grid1)) # Output: 6 print(count_unique_paths(grid2)) # Output: 0"},{"question":"In a certain mobile game, there are n levels, each with a certain amount of enemies you need to defeat to clear the level. At each level, there are two types of weapons available: swords and bows. Using a sword, you defeat a specific number of enemies in one hit, while using a bow you defeat a different number of enemies per hit. You always want to minimize the number of hits needed to clear each level. You have the number of enemies for each level and the efficiency of both weapons. Write a program to determine the minimum number of hits needed for each level to clear the enemies. Input The first line of the input contains three space-separated integers n, s, and b (1 ≤ n ≤ 100, 1 ≤ s, b ≤ 109), which represent the number of levels, the number of enemies a sword defeats in one hit, and the number of enemies a bow defeats in one hit, respectively. The second line contains n space-separated integers e1, e2, ..., en (1 ≤ ei ≤ 109), where ei denotes the number of enemies in the i-th level. Output Output n space-separated integers. The i-th of them is the minimum number of hits needed to clear the enemies in the i-th level. Examples Input 5 3 4 12 6 11 9 1 Output 3 2 3 3 1 Input 3 2 5 7 10 5 Output 2 2 1 Input 2 1 3 2 4 Output 1 2","solution":"def minimum_hits_to_clear_levels(n, s, b, enemy_counts): Calculate the minimum number of hits needed to clear each level. Parameters: n (int): Number of levels. s (int): Number of enemies a sword defeats in one hit. b (int): Number of enemies a bow defeats in one hit. enemy_counts (list of int): List containing the number of enemies in each level. Returns: list of int: Minimum number of hits needed to clear each level. min_hits = [] for e in enemy_counts: # Calculate hits needed with sword and bow hits_sword = (e + s - 1) // s hits_bow = (e + b - 1) // b # Choose the minimum hits among the two min_hits.append(min(hits_sword, hits_bow)) return min_hits"},{"question":"Ostap Bender, after his frog game, decided to develop a new challenge inspired by a string-transforming game. You are given a string containing only lowercase English letters and allowed to perform the following operation any number of times: - Choose a lowercase letter `c` from the string. - Choose any positive integer `k` (1 ≤ k ≤ length of the string). - Remove the `k`-th occurrence of the letter `c` from the string. If the `k`-th occurrence does not exist, you can\'t remove the letter. Your task is to determine the lexicographically smallest string that can be obtained by applying the above operation any number of times. Input The first line of the input contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the following `t` lines contains a single string consisting of lowercase English letters. The length of each string will be between 1 and 100, inclusive. Output For each test case, output the lexicographically smallest string that can be obtained. Examples Input 3 abc aabc bac Output abc abc ac Note In the first test case, the string is already lexicographically smallest. In the second test case, you can remove the first occurrence of \'a\' to get \\"abc\\". In the third test case, you can remove the first occurrence of \'b\' to get \\"ac\\".","solution":"def lexicographically_smallest_string(t, strings): results = [] for s in strings: seen = set() result = [] for character in s: if character not in seen: seen.add(character) result.append(character) results.append(\\"\\".join(sorted(result))) return results"},{"question":"You are given a factory which manufactures gadgets. Each gadget is made using a specific number of components, and each of these components, in turn, is made up of a specific number of raw materials. You need to calculate the total number of raw materials needed to make a certain number of gadgets. **Input:** - An integer `n` representing the number of types of components. - Next, `n` lines follow, each containing two integers: the first integer is the number of raw materials required to make one of that particular component, and the second integer is the number of such components required to make one gadget. - An integer `m` representing the total number of gadgets to be produced. **Output:** - A single integer which is the total number of raw materials required to produce `m` gadgets. **Example:** Input: ``` 3 4 2 3 5 2 6 7 ``` Output: ``` 212 ``` Explanation: - There are 3 types of components. - The first type requires 4 raw materials per component, and 2 such components are needed per gadget. Therefore, 4 * 2 = 8 raw materials per gadget from the first component type. - The second type requires 3 raw materials per component, and 5 such components are needed per gadget. Therefore, 3 * 5 = 15 raw materials per gadget from the second component type. - The third type requires 2 raw materials per component, and 6 such components are needed per gadget. Therefore, 2 * 6 = 12 raw materials per gadget from the third component type. - Total raw materials needed per gadget = 8 + 15 + 12 = 35. - Total for 7 gadgets = 35 * 7 = 245 raw materials. In this case, the output should be `245`.","solution":"def total_raw_materials(n, component_info, m): Calculates the total number of raw materials needed to produce m gadgets Parameters: n (int): Number of types of components. component_info (list of tuples): Each tuple contains two integers - number of raw materials per component and number of such components per gadget. m (int): Number of gadgets to produce. Returns: int: Total number of raw materials needed. total_raw_per_gadget = 0 for raw_per_component, components_per_gadget in component_info: total_raw_per_gadget += raw_per_component * components_per_gadget return total_raw_per_gadget * m"},{"question":"Create a program to find the longest common subsequence (LCS) of two given strings. The longest common subsequence is defined as the longest sequence that can be derived from both original strings by removing some characters (or none) without changing the order of the remaining characters. # Input Format: - The first line contains the number of test cases, T. - Each of the next T lines contains two space-separated strings, str1 and str2. # Output Format: - For each test case, output the length of the LCS of the two input strings. # Constraints: - 1 ≤ T ≤ 100 - 1 ≤ |str1|, |str2| ≤ 1000 - The strings contain only lowercase English letters. # Sample Input: ``` 2 abcde ace abc efgh ``` # Sample Output: ``` 3 0 ``` # Explanation: - In the first test case, the LCS of \\"abcde\\" and \\"ace\\" is \\"ace\\", which has a length of 3. - In the second test case, there is no common subsequence between \\"abc\\" and \\"efgh\\", so the output is 0. Implement the function to compute the LCS using dynamic programming for efficient computation.","solution":"def lcs_length(str1, str2): m = len(str1) n = len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(test_cases): results = [] for str1, str2 in test_cases: results.append(lcs_length(str1, str2)) return results def longest_common_subsequence(T, cases): results = process_test_cases(cases) return results"},{"question":"You are given a string that represents a compressed version of a sequence of lowercase alphabets. The compression rule encodes the characters using the following format: `[c, d]` where `c` is the character and `d` is the number of times `c` occurs consecutively. Your task is to decompress the string and return the original sequence. Below is a detailed form of the input and output format: # Input - The string `compressed` which follows the format described above. # Output - A single string that represents the original, decompressed sequence. # Examples **Example 1:** ``` Input: a2b1c5 Output: aabccccc ``` **Example 2:** ``` Input: x3y2z1 Output: xxxyyz ``` **Example 3:** ``` Input: p1q4 Output: pqqqq ``` **Example 4:** ``` Input: m5n2o4p3 Output: mmmmmnnooooppp ``` # Constraints - The input string `compressed` will only contain lowercase alphabet characters and digits. - The digits following each character will be a non-zero, positive integer. - The length of the decompressed string will not exceed 100,000 characters. # Note Your solution needs to handle the decompression efficiently, considering the potential length of the output string.","solution":"def decompress_string(compressed): n = len(compressed) i = 0 decompressed = [] while i < n: char = compressed[i] j = i + 1 while j < n and compressed[j].isdigit(): j += 1 count = int(compressed[i+1:j]) decompressed.append(char * count) i = j return \'\'.join(decompressed)"},{"question":"In the world of magical creatures, there is a rare animal called the Dreamlotus, which blooms only in specific conditions. Each Dreamlotus flower has a unique blooming pattern represented by an integer sequence. The sequence follows a special rule: every contiguous sub-sequence of Dreamlotus\' sequence must have a sum less than or equal to a given integer k. You have been given multiple Dreamlotus sequences. For each sequence, you need to find the length of the longest contiguous sub-sequence that adheres to the blooming rule. Write a program that processes multiple queries, each containing a Dreamlotus sequence and an integer k, and returns the length of the longest valid contiguous sub-sequence for each query. Input The first line contains one integer q (1 ≤ q ≤ 100), the number of queries. Each query consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^8) – the length of the Dreamlotus sequence and the maximum sum allowed for any contiguous sub-sequence. - The second line contains n integers a_i (-10^8 ≤ a_i ≤ 10^8) which represent the sequence of the Dreamlotus. Output For each query, print one integer – the length of the longest contiguous sub-sequence of the corresponding Dreamlotus sequence that has a sum less than or equal to k. You may assume that the sum of n over all queries does not exceed 10^6. Example Input 2 5 5 1 2 -1 2 3 6 10 4 -1 2 -2 1 2 Output 4 6 Explanation For the first query: - The sub-sequence [1, 2, -1, 2] has a sum of 4, which is less than 5, hence the longest length is 4. For the second query: - The entire sequence [4, -1, 2, -2, 1, 2] has a sum of 6, which is less than 10, hence the longest length is 6.","solution":"def longest_valid_subsequence_length(n, k, sequence): max_length, current_length, current_sum = 0, 0, 0 start = 0 for end in range(n): current_sum += sequence[end] current_length += 1 while current_sum > k: current_sum -= sequence[start] current_length -= 1 start += 1 max_length = max(max_length, current_length) return max_length def process_queries(queries): results = [] for n, k, sequence in queries: result = longest_valid_subsequence_length(n, k, sequence) results.append(result) return results"},{"question":"After buying a large plot of land, Sarah decided to plant a variety of trees. To create a visually appealing orchard, she wanted the trees to be planted in straight rows with each type of tree required to be in a separate row. However, she also wanted the number of trees in each row to be equal and the distance between any two trees in a row to be the same. Sarah has a layout of the orchard and a list of tree types, each with its required number of trees to be planted. To help Sarah organize her planting layout efficiently, you need to write a program. This program should determine if it is possible to lay out the orchard in such a way that there are exactly `n` rows, each containing an identical number of trees such that the distance between any two trees in a row is constant. The number of trees in each row should be the same for all the rows. Input: The first line of the input contains an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. Each test case contains two integers `n` and `k` (1 ≤ n, k ≤ 10^9) where `n` is the number of rows and `k` is the total number of trees. Output: For each test case, print \\"YES\\" if it is possible to plant the trees in the required layout, otherwise, print \\"NO\\". Example: Input: 3 3 9 4 10 2 8 Output: YES NO YES Note: In the first test case, Sarah needs 3 rows of trees. Since the total number of trees is 9, she can plant 3 trees in each row (3 rows, 3 trees per row). In the second test case, Sarah needs 4 rows, but it is not possible to evenly distribute 10 trees into these rows. In the third test case, Sarah needs 2 rows, and with 8 trees, she can plant 4 trees in each row (2 rows, 4 trees per row).","solution":"def can_plant_trees(t, test_cases): Determines if it is possible to plant trees in the specified layout for each test case. Parameters: t (int): The number of test cases. test_cases (list): A list of tuples, with each tuple containing two integers `n` and `k`. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for n, k in test_cases: if k % n == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a series of accounting operations logged in the form of an array of strings. Each string represents a transaction in the format \\"[amount] [operation] [identifier]\\", where: - `[amount]` is an integer representing the transaction amount. It may be negative for withdrawals or other deductions, and positive for deposits or other credits. - `[operation]` is a string representing the type of operation - either \\"deposit\\" or \\"withdraw\\" (always in lowercase). - `[identifier]` is a string representing the unique identifier of the account. You are tasked with calculating the final balance for each account after all the transactions have been processed. Input: 1. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of transactions. 2. Each of the next `n` lines contains a string in the format \\"[amount] [operation] [identifier]\\". Output: For each unique account identifier that has been mentioned in the transactions, print a line with the account identifier followed by the final balance of that account. Output should have one line per unique account identifier, sorted lexicographically by the identifier. Example: Input: ``` 4 100 deposit A123 200 withdraw A123 300 deposit B456 150 withdraw B456 ``` Output: ``` A123 -100 B456 150 ``` Explanation: For account `A123`, the transactions are: - `+100` (deposit) - `-200` (withdraw) Thus, the final balance for `A123` is `-100`. For account `B456`, the transactions are: - `+300` (deposit) - `-150` (withdraw) Thus, the final balance for `B456` is `150`.","solution":"def calculate_final_balances(n, transactions): Calculates the final balance for each account after all transactions. Parameters: n (int): The number of transactions. transactions (list of str): List of transaction strings. Returns: dict: A dictionary with account identifiers as keys and final balances as values. account_balances = {} for transaction in transactions: amount, operation, identifier = transaction.split() amount = int(amount) if identifier not in account_balances: account_balances[identifier] = 0 if operation == \\"deposit\\": account_balances[identifier] += amount elif operation == \\"withdraw\\": account_balances[identifier] -= amount return dict(sorted(account_balances.items())) # Example usage # n = 4 # transactions = [\\"100 deposit A123\\", \\"200 withdraw A123\\", \\"300 deposit B456\\", \\"150 withdraw B456\\"] # result = calculate_final_balances(n, transactions) # Output: {\\"A123\\": -100, \\"B456\\": 150}"},{"question":"John is creating unique IDs for his new application. Each ID consists of lowercase Latin letters (a-z) and possibly special characters like underscores (\'_\') and digits (0-9). John wants to ensure that all IDs are valid and follow specific rules to maintain uniformity across his application. The rules for a valid ID are as follows: 1. It must have at least one lowercase Latin letter. 2. It must not contain consecutive underscores. 3. It cannot start or end with an underscore. 4. It must have a length between 1 and 100 characters, inclusive. John has a list of candidate IDs and he needs your help to determine which of these IDs are valid. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of candidate IDs. The next n lines each contain a candidate ID. Each candidate ID is a non-empty string consisting of lowercase Latin letters, digits, and underscores. The length of each candidate ID will not exceed 100 characters. Output For each candidate ID, print \\"YES\\" if the ID is valid according to the rules, otherwise print \\"NO\\". Examples Input 3 john_doe jane__doe _johnny Output YES NO NO Input 2 valid_id123 invalid__id Output YES NO Note In the first sample, \\"john_doe\\" is valid as it follows all the rules. \\"jane__doe\\" is invalid because it contains consecutive underscores. \\"_johnny\\" is invalid because it starts with an underscore. In the second sample, \\"valid_id123\\" is valid as it meets all the criteria. \\"invalid__id\\" is invalid because it has consecutive underscores.","solution":"def is_valid_id(candidate): Check if the candidate ID meets all the rules: 1. Contains at least one lowercase Latin letter. 2. Does not contain consecutive underscores. 3. Does not start or end with an underscore. 4. Has length between 1 and 100 characters (inclusive). # Check the length if not (1 <= len(candidate) <= 100): return \\"NO\\" # Check for at least one lowercase letter if not any(c.islower() for c in candidate): return \\"NO\\" # Check for consecutive underscores if \'__\' in candidate: return \\"NO\\" # Check if it starts or ends with an underscore if candidate.startswith(\'_\') or candidate.endswith(\'_\'): return \\"NO\\" return \\"YES\\" def validate_ids(n, ids): For each ID given in the list, determine if it is valid. Return a list of \\"YES\\" or \\"NO\\" for each ID. results = [] for id in ids: results.append(is_valid_id(id)) return results"},{"question":"Kevin found an old treasure map in his attic. The map shows a matrix of size n x m, where each cell may contain an obstacle represented by a \'#\', or be a free cell represented by a \'.\' The treasure is hidden in one of the free cells, and Kevin starts at the top-left corner of the matrix (cell (1, 1)). Unfortunately, Kevin can\'t move diagonally and can only move in 4 possible directions (up, down, left, or right). Write a program to determine the minimum number of steps Kevin must take to reach the treasure cell. If the treasure is unreachable from the starting position, return -1. Assume that the given starting cell (1, 1) is always a free cell. Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the dimensions of the matrix. Each of the next n lines contains a string of length m consisting of characters \'.\' and \'#\', defining the map. Output: Print the minimum number of steps Kevin needs to reach the treasure. If the treasure is unreachable, print -1. Examples: Input: 5 5 ..... .#.#. .#.#. .#.#. ....T Output: 8 Input: 3 3 .#. # ..T Output: -1","solution":"from collections import deque def min_steps_to_treasure(n, m, matrix): # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the starting point and the treasure point start = (0, 0) treasure = None for i in range(n): for j in range(m): if matrix[i][j] == \'T\': treasure = (i, j) if not treasure: return -1 # No treasure found # Breadth-First Search (BFS) initialization queue = deque([start]) visited = set([start]) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() # Check if we have reached the treasure if (x, y) == treasure: return steps # Explore neighboring cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and matrix[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1 # If the treasure is not reachable"},{"question":"You are given an integer array `nums` and an integer `target`. Write a function to determine if there are any three numbers in `nums` that add up to `target`. Return a boolean value `True` if such a triplet exists, otherwise return `False`. # Function Signature ```python def three_number_sum(nums: List[int], target: int) -> bool: ``` # Constraints - The array `nums` will contain between `3` and `300` elements. - The elements in `nums` are integers in the range `[-10^3, 10^3]`. - The integer `target` is in the range `[-10^4, 10^4]`. # Example Example 1 ```plaintext Input: nums = [1, 2, 3, 4, 5, 6], target = 10 Output: True Explanation: The triplet (1, 3, 6) sums to 10. ``` Example 2 ```plaintext Input: nums = [1, 2, 4, 5, 6], target = 20 Output: False Explanation: There are no triplets that sum to 20. ```","solution":"from typing import List def three_number_sum(nums: List[int], target: int) -> bool: Determines if there are any three numbers in nums that add up to target. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicates continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Given an array of integers, you need to compute a new array where each element at index *i* is the product of all the numbers in the original array except the one at *i*. For example, if the given array is `[1, 2, 3, 4]`, the output array should be `[24, 12, 8, 6]`. Write a function that takes an array of integers as input and returns a new array of integers as described above. Input - The first line contains an integer *n* (1 ≤ n ≤ 100), denoting the number of elements in the array. - The second line contains *n* space-separated integers representing the array elements. Each element is between -100 and 100 (inclusive). Output - Print the calculated array as space-separated integers on a single line. Example Input 4 1 2 3 4 Output 24 12 8 6 Input 5 2 3 4 5 6 Output 360 240 180 144 120","solution":"def product_except_self(nums): Given a list of integers, returns a new list such that each element at index i is the product of all the numbers in the original list except the one at i. n = len(nums) if n == 0: return [] # Step 1: Initialize the result array with ones result = [1] * n # Step 2: Compute the values for the result array # Calculate products of elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate products of elements to the right of each element right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are given an array of integers. Your task is to determine if it is possible to rearrange the elements of the array such that the difference between any two consecutive elements is exactly 1. If it is possible, you should return \\"YES\\", otherwise return \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print \\"YES\\" if it is possible to rearrange the elements of the array to meet the condition, otherwise print \\"NO\\". Examples Input 3 3 2 4 Output YES Input 4 1 4 2 3 Output YES Input 5 1 3 5 7 9 Output NO Note In the first example, the array can be rearranged as [2, 3, 4] which meets the condition. In the second example, the array can be rearranged as [1, 2, 3, 4] which meets the condition. In the third example, no rearrangement of the array can meet the condition as the gaps between the elements are greater.","solution":"def can_rearrange(n, array): Determines if the elements of the array can be rearranged such that the difference between any two consecutive elements is exactly 1. Parameters: n (int): The number of elements in the array. array (list of int): The elements of the array. Returns: str: \\"YES\\" if the elements can be rearranged, otherwise \\"NO\\". array.sort() for i in range(1, n): if array[i] - array[i-1] != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of size NxN filled with different lowercase English letters. You can move from a cell to its adjacent cell (up, down, left, right) only if the new cell contains the same letter as the current cell. Your task is to find the length of the longest consecutive sequence of the same letter that can be obtained by such movements in the grid. Input The first line contains an integer N (1 ≤ N ≤ 50), the size of the grid. The next N lines each contain a string of size N, representing the grid. Output Print a single integer representing the length of the longest consecutive sequence of the same letter in the grid. Sample Input 4 abca bccd cccb dbaa Sample Output 5","solution":"def longest_consecutive_sequence(grid): n = len(grid) if n == 0: return 0 def dfs(x, y, char): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] != char or (x, y) in visited: return 0 visited.add((x, y)) length = 1 # Explore all 4 directions: up, down, left, right length += max(dfs(x + 1, y, char), dfs(x - 1, y, char), dfs(x, y + 1, char), dfs(x, y - 1, char)) visited.remove((x, y)) return length max_length = 0 visited = set() for i in range(n): for j in range(n): max_length = max(max_length, dfs(i, j, grid[i][j])) return max_length"},{"question":"# Finding Common Subsequence Given two strings, determine the length of the longest subsequence present in both strings. A subsequence is defined as a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function `longest_common_subsequence(str1: str, str2: str) -> int` to calculate the length of the longest common subsequence. # Input - Two strings `str1` and `str2` with length up to 100 characters each, comprised of lowercase English letters. # Output - An integer representing the length of the longest common subsequence of the input strings. # Example # Input ``` abcdef ace ``` # Output ``` 3 ``` # Explanation The longest common subsequence is \\"ace\\", which has a length of 3. # Constraints - 1 ≤ len(str1), len(str2) ≤ 100 - The strings contain only lowercase English letters.","solution":"def longest_common_subsequence(str1: str, str2: str) -> int: Returns the length of the longest common subsequence of str1 and str2. m, n = len(str1), len(str2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table in bottom-up manner. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence will be in dp[m][n]. return dp[m][n]"},{"question":"In the country of Plusland, there are N cities connected by M bidirectional roads. Each road has a toll fee and the government is planning to minimize the total toll fees their residents have to pay while ensuring that the road network remains operational. The government\'s goal is to disconnect some of the roads in such a manner that the remaining roads still allow each city to be reachable from any other city by some path, and the total toll fees of the remaining roads is minimized. Given the number of cities and list of roads with their toll fees, determine the minimized total toll fee after disconnecting unnecessary roads while ensuring the network remains connected. Input The first line of input contains two integers N and M (2 ≤ N ≤ 1000, N - 1 ≤ M ≤ 10^5) - the number of cities and the number of roads connecting them. Each of the following M lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000, u ≠ v) - representing a road between cities u and v with a toll fee of w. Output The output should be a single integer representing the minimized total toll fee after disconnecting unnecessary roads. Example Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Explanation In this example, one possible way to minimize the total toll fee while keeping the network operational is to keep the roads (1-2), (2-3), and (3-4), which have a combined toll fee of 6. Other combinations of three roads maintaining the network connectivity may also lead to the same minimized toll fee.","solution":"def find_min_toll(N, M, roads): Finds the minimum toll fees to keep the network operational using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). Parameters: N (int): Number of cities M (int): Number of roads roads (list): List of tuples where each tuple contains (u, v, w) Returns: int: The minimized total toll fee # Initialize parent and rank arrays for union-find operation parent = list(range(N + 1)) rank = [0] * (N + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Sort all the roads based on their toll fees roads.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == N - 1: break return mst_cost"},{"question":"You are given a string S consisting of lowercase English letters. You are allowed to perform the following operation any number of times: choose a non-empty subsequence of S and rearrange the letters in that subsequence as you like. You need to determine if it is possible to rearrange the letters of string S such that no two adjacent characters are the same. Input The input consists of a single string S (1 ≤ |S| ≤ 100000), where |S| is the length of the string. Output Print \\"Yes\\" if it is possible to rearrange the letters of S such that no two adjacent characters are the same. Otherwise, print \\"No\\". Example Input aabbccdd Output Yes Input aaab Output No Explanation - In the first example, one possible rearrangement is \\"abcdabcd\\" where no characters repeat consecutively. - In the second example, there is no way to rearrange the string to avoid adjacent \\"a\\"s.","solution":"def can_rearrange_no_adjacent_duplications(S): Determine if it is possible to rearrange the letters of the string such that no two adjacent characters are the same. Args: S : str - input string consisting of lowercase English letters Returns: str - \\"Yes\\" if it is possible to rearrange, otherwise \\"No\\" from collections import Counter count = Counter(S) max_freq = max(count.values()) # The length of the input string n = len(S) # If the most frequent character is more than (n + 1) // 2 times, it\'s impossible if max_freq > (n + 1) // 2: return \\"No\\" return \\"Yes\\""},{"question":"You are given an array of N integers representing heights of buildings along a street, ordered from left to right. Each building i has a height represented by Ai. A building\'s \\"view\\" is blocked by any taller building that appears before it in this list. Your task is to compute how many buildings have an unobstructed view of the street. An unobstructed view means that there are no taller buildings before a building in the array. Only the buildings that are as tall as or taller than any previous building can see the street. Write a function to determine the number of such buildings for each test case. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A1, A2, ..., AN denoting the heights of the buildings. Output For each test case, output a single line containing the number of buildings that have an unobstructed view. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^9 The sum of the Ns over all the test cases in a single test file is ≤ 10^6 Example Input: 3 5 3 5 4 4 3 6 10 12 9 13 14 7 3 8 7 7 Output: 2 4 1 Explanation Example case 1. Building 2 has height 5 which is taller than the buildings before it (3). Building 3, 4, and 5 (heights 4, 4, and 3) do not have unobstructed views as they are not taller than 5. Hence only buildings 1 and 2 have an unobstructed view. Example case 2. Buildings 4 and 5 (heights 13 and 14) can see the street unobstructed as they are taller than any preceding buildings. Also the first building with height 10 and the second building with height 12 can see the street. Hence there are 4 buildings with unobstructed views. Example case 3. The first building has height 8 and there are no taller buildings before it. The other two buildings are shorter or equal in height. Hence only one building has an unobstructed view.","solution":"def unobstructed_view_buildings(test_cases): results = [] for buildings in test_cases: max_height = 0 count = 0 for height in buildings: if height > max_height: max_height = height count += 1 results.append(count) return results def parse_input(input_string): data = input_string.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 buildings = list(map(int, data[index:index + N])) test_cases.append(buildings) index += N return test_cases"},{"question":"Given a string consisting of lowercase letters of the English alphabet, write a function `longest_unique_substring_length` that returns the length of the longest substring without repeating characters. **Function Signature:** ```python def longest_unique_substring_length(s: str) -> int: pass ``` **Input:** - A string `s` (1 ≤ |s| ≤ 10^5), where `s[i]` is a lowercase English letter. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example:** ```python assert longest_unique_substring_length(\\"abcabcbb\\") == 3 assert longest_unique_substring_length(\\"bbbbb\\") == 1 assert longest_unique_substring_length(\\"pwwkew\\") == 3 assert longest_unique_substring_length(\\"abcdabcdef\\") == 6 ``` **Explanation:** - For the first example, the longest substring without repeating characters is either \\"abc\\" or \\"bca\\" or \\"cab\\", which all have length 3. - For the second example, the longest substring without repeating characters is \\"b\\", with length 1. - For the third example, the longest substring without repeating characters is \\"wke\\", with length 3. - For the fourth example, the longest substring without repeating characters is \\"abcdef\\", with length 6.","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"In a distant galaxy, there exists a special kind of star system known as the \\"Binary Star System.\\" This system consists of pairs of stars orbiting each other in a stable manner. Each star has a brightness level, measured in lumens, which can vary over time due to cosmic events. You have been given the task of monitoring and analyzing the brightness levels of binary star systems. Specifically, you need to write a program to handle these operations: - Initialization: The system begins with n binary star pairs, each with two brightness values. - Queries: Users can perform the following types of operations: 1. \\"1~i~j~x\\" — Set the brightness value of the j-th star in the i-th binary pair to x. 2. \\"2~a~b\\" — For each pair indexed from a to b (inclusive), find the maximum brightness among all stars in those pairs. Input The first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of binary star pairs and the number of queries, respectively. Each of the next n lines contains two integers b1_i and b2_i (0 ≤ b1_i, b2_i ≤ 10^9) — the initial brightness values of the two stars in the i-th binary pair. Each of the next m lines contains a query of one of two types: - \\"1~i~j~x\\" (1 ≤ i ≤ n, 1 ≤ j ≤ 2, 0 ≤ x ≤ 10^9) — Change the brightness of the j-th star in the i-th binary pair to x. - \\"2~a~b\\" (1 ≤ a ≤ b ≤ n) — Query the maximum brightness among all stars in pairs from index a to index b (inclusive). Output For each query of the second type, print a single integer — the maximum brightness among all stars in the specified range of binary pairs. Examples Input 3 5 10 20 30 40 50 60 2 1 3 1 2 1 100 2 1 2 2 2 3 2 3 3 Output 60 100 100 60 Input 4 4 5 15 25 35 45 55 65 75 2 1 4 1 3 2 80 2 2 4 2 1 3 Output 75 80 80","solution":"class BinaryStarSystem: def __init__(self, n, brightness_pairs): self.n = n self.brightness = [[b1, b2] for b1, b2 in brightness_pairs] def update_brightness(self, i, j, x): self.brightness[i-1][j-1] = x def max_brightness(self, a, b): return max(max(pair) for pair in self.brightness[a-1:b]) def process_queries(n, m, brightness_pairs, queries): system = BinaryStarSystem(n, brightness_pairs) results = [] for query in queries: parts = query.split(\\"~\\") if parts[0] == \\"1\\": system.update_brightness(int(parts[1]), int(parts[2]), int(parts[3])) elif parts[0] == \\"2\\": results.append(system.max_brightness(int(parts[1]), int(parts[2]))) return results # Example usage # n, m = 3, 5 # brightness_pairs = [(10, 20), (30, 40), (50, 60)] # queries = [\\"2~1~3\\", \\"1~2~1~100\\", \\"2~1~2\\", \\"2~2~3\\", \\"2~3~3\\"] # print(process_queries(n, m, brightness_pairs, queries))"},{"question":"Mark is fascinated by circular journeys. He recently visited a new amusement park where he found an interesting ride - a circular roller coaster with numbered seats. The seats are numbered from 1 to n clockwise. Mark wants to perform a sequence of ride sessions. In each ride session, he can start from any seat k. He then rides the given number of steps s (clockwise), and upon completing his ride, he notes the seat number where he lands. Given the number of seats, the initial start seat, and the sequence of steps for each ride session, determine the seat number where Mark will land after each session. Input: - The first line contains an integer n (1 ≤ n ≤ 10^9) representing the number of seats on the roller coaster. - The second line contains an integer k (1 ≤ k ≤ n) representing the starting seat. - The third line contains an integer t (1 ≤ t ≤ 100,000) representing the number of ride sessions. - The fourth line contains t integers s1, s2, ..., st (1 ≤ si ≤ 10^9) where si is the number of steps Mark rides in the i-th session. Output: Print t integers, where the i-th integer is the seat number after the i-th session. Examples: Input: 10 3 5 15 23 6 10 1 Output: 8 6 9 3 4 Input: 5 2 3 7 13 9 Output: 4 5 1 Note: In the first example, Mark lands on seat numbered 8 after riding 15 steps from seat 3, then seat 6 after riding 23 steps from seat 3, and so on.","solution":"def ride_sessions(n, k, t, steps_list): Calculate the seat number after each session of the ride. :param n: int: Number of seats in the roller coaster (1 ≤ n ≤ 10^9) :param k: int: Starting seat number (1 ≤ k ≤ n) :param t: int: Number of ride sessions (1 ≤ t ≤ 100,000) :param steps_list: list: List of integers representing the steps for each session (1 ≤ si ≤ 10^9) :return: list: List of seat numbers after each ride session. result = [] for steps in steps_list: # Calculate new seat number new_seat = (k - 1 + steps) % n + 1 result.append(new_seat) return result"},{"question":"You are given a sequence of n numbers, and you have to determine if you can partition this sequence into exactly two non-empty subsequences such that: - Each number in the sequence belongs to exactly one subsequence. - The maximal element in one subsequence is strictly greater than the minimal element in the other subsequence. If it is possible to partition the sequence in such a way, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of elements in the sequence. The second line contains n integers separated by spaces, representing the sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output Print \\"YES\\" if you can partition the sequence into two subsequences with the properties described above, and \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 Output YES Input 4 4 4 4 4 Output NO Input 7 10 15 20 5 7 11 13 Output YES Note In the first sample, we can partition the sequence into [1, 2, 3] and [4, 5]. The maximal element in the first subsequence is 3, which is less than the minimal element 4 in the second subsequence. In the second sample, all elements are the same, so it\'s impossible to partition them into two subsequences satisfying the given conditions. In the third sample, we can partition the sequence into [5, 7, 10] and [11, 13, 15, 20]. The maximal element in the first subsequence is 10, which is less than the minimal element 11 in the second subsequence.","solution":"def can_partition_sequence(n, sequence): Determines if it\'s possible to partition the sequence into two non-empty subsequences such that the maximal element in one subsequence is strictly greater than the minimal element in the other subsequence. sorted_sequence = sorted(sequence) return \\"YES\\" if sorted_sequence[0] != sorted_sequence[-1] else \\"NO\\""},{"question":"In an attempt to advance water distribution efficiency for households in the city of Techville, the Water Management Authority has decided to introduce smart water meters. These meters provide real-time monitoring and control capabilities, enhancing resource management and customer satisfaction. Each meter records water usage in liters for each time interval. An analysis must be conducted to find patterns in usage across multiple households over several intervals, and summarize the total water usage for each household during specific queried intervals. Your task is to develop a program to help the Water Management Authority achieve this goal. For each household, you are given a water usage log, and you need to compute the total water usage over several time intervals queried by the authority. Input The first line of input contains two integers, h (1 ≤ h ≤ 10^5) and t (1 ≤ t ≤ 10^5), which represent the number of households and total time intervals, respectively. Next h lines follow, with each line containing t integers, where the j-th integer of the i-th line represents the water usage of the i-th household during the j-th interval. The next line contains a single integer q (1 ≤ q ≤ 10^5), which represents the number of queries from the authority. The next q lines contain three integers each, a, b, and c (1 ≤ a ≤ h, 1 ≤ b ≤ c ≤ t). Each query seeks to find the total water usage for household a from interval b to interval c inclusive. Output For each query, output a single integer, which is the total water usage for the specified household over the given interval. Examples Input 3 5 10 20 30 40 50 5 5 5 5 5 1 2 1 2 5 1 1 3 2 2 4 3 1 5 1 5 5 2 3 3 Output 60 15 100 50 5 Note In the first example, household 1\'s water usage from interval 1 to interval 3 is 10 + 20 + 30 = 60. For the second query, household 2\'s water usage from interval 2 to interval 4 is 5 + 5 + 5 = 15. Your program should efficiently handle up to 10^5 households and intervals, and up to 10^5 queries.","solution":"def total_water_usage(h, t, usage_logs, queries): Compute total water usage for specified households during specific queried intervals. h: int - number of households t: int - number of time intervals usage_logs: List of Lists - water usage logs for each household queries: List of Tuples - each tuple contains three integers a, b, and c representing household and intervals Returns: List of integers - total water usage for each query results = [] for a, b, c in queries: total_usage = sum(usage_logs[a-1][b-1:c]) results.append(total_usage) return results"},{"question":"A park has n rest stops along a circular trail. Each rest stop has a certain number of energy drinks. Energy drinks significantly help runners by giving them an instant energy boost. An energy drink is characterized by its effectiveness ei and its cooldown time ci. The effectiveness ei determines how much energy the runner gains, and the cooldown time ci determines how long the runner must wait before they can use another energy drink. Given the initial energy level of the runner, the goal is to calculate the maximum energy the runner can have after going through all the rest stops at least once, assuming they follow an optimal strategy for consuming energy drinks. The runner starts at the first rest stop and can only consume an energy drink if the cooldown time has passed. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of rest stops on the trail. The second line contains n integers e1, e2, ..., en (0 ≤ ei ≤ 1,000) — the effectiveness of the energy drinks at each rest stop. The third line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ n) — the cooldown time of the energy drinks at each rest stop. The fourth line contains a single integer E (0 ≤ E ≤ 1,000,000) — the initial energy of the runner. Output Print a single integer, the maximum energy the runner can have after completing at least one full round of the trail. Examples Input 5 10 20 30 40 50 1 2 3 4 5 100 Output 250 Input 3 100 200 300 1 1 1 50 Output 650","solution":"from collections import deque def max_energy(n, effectiveness, cooldowns, initial_energy): Calculate the maximum energy the runner can have after completing one round of the trail. Parameters: n (int): The number of rest stops. effectiveness (List[int]): The effectiveness of the energy drinks at each stop. cooldowns (List[int]): The cooldown time of the energy drinks at each stop. initial_energy (int): The initial energy of the runner. Returns: int: The maximum energy after one round. # To maintain the maximum energy at each rest stop max_energy_at_stop = [0] * n # To maintain a deque of indices of rest stops that can be used for optimal energy calculation deque_window = deque() for i in range(n): # Remove elements from the deque that are out of the current cooldown range while deque_window and deque_window[0] < i - cooldowns[i]: deque_window.popleft() # Calculate the maximum possible energy at current rest stop max_energy_at_stop[i] = initial_energy + effectiveness[i] if deque_window: max_energy_at_stop[i] = max(max_energy_at_stop[i], max_energy_at_stop[deque_window[0]] + effectiveness[i]) # Maintain the deque in a way that the maximum potential energy is at the front while deque_window and max_energy_at_stop[deque_window[-1]] <= max_energy_at_stop[i]: deque_window.pop() deque_window.append(i) # The maximum energy after completing one round will be the max value in the max_energy_at_stop array return max(max_energy_at_stop)"},{"question":"You are given a list of N students with their respective grades in a subject. Each student\'s grade is an integer between 0 and 100. Your task is to write a program that categorizes the students into four categories based on their grades: * \\"Excellent\\" if grade is between 90 and 100 (inclusive), * \\"Good\\" if grade is between 75 and 89 (inclusive), * \\"Average\\" if grade is between 50 and 74 (inclusive), * \\"Poor\\" if grade is below 50. The program should count the number of students in each category and print the counts. Input The input consists of multiple datasets. The first line contains an integer T (T leq 10), the number of datasets. For each dataset, the first line contains an integer N (1 leq N leq 100), the number of students. The following line contains N integers representing the grades of the students. Output For each dataset, print four integers representing the counts of students in the \\"Excellent\\", \\"Good\\", \\"Average\\", and \\"Poor\\" categories, respectively. Example Input 2 5 95 85 55 70 45 3 88 90 49 Output 1 1 2 1 1 1 0 1","solution":"def categorize_students(T, datasets): Categorizes students into four categories based on their grades. results = [] for dataset in datasets: N = dataset[0] grades = dataset[1] excellent = good = average = poor = 0 for grade in grades: if 90 <= grade <= 100: excellent += 1 elif 75 <= grade <= 89: good += 1 elif 50 <= grade <= 74: average += 1 elif grade < 50: poor += 1 results.append((excellent, good, average, poor)) return results"},{"question":"A new restaurant called \\"Gourmet Feast\\" is organizing a unique tasting event. Each guest must taste dishes in a specific order assigned to them. However, some diners have dietary restrictions and will not eat certain dishes. The restaurant wants to ensure that all guests have the best possible experience without having to break their assigned tasting order. You are given details of the tasting order and the dietary restrictions of each guest. Write a program to determine if each guest can complete their tasting order without violating their dietary restrictions. Input: The first line contains a single positive integer G (the number of guests). For each guest, the first line contains an integer D (the number of dishes in their tasting order). The next line contains a space-separated list of D integers representing the tasting order. The following line contains an integer R (the number of restricted dishes for that guest). The last line contains a space-separated list of R integers representing the dishes the guest cannot taste. Output: For each guest, print \\"Yes\\" if they can complete their tasting order without eating any restricted dish, otherwise print \\"No\\". Constraints: 1 ≤ G ≤ 100 1 ≤ D, R ≤ 100 1 ≤ dish number ≤ 1000 SAMPLE INPUT 2 3 1 2 3 1 2 4 10 20 30 40 2 25 30 SAMPLE OUTPUT No No Explanation: For the first guest: The tasting order is [1, 2, 3] and the restricted dish is [2]. Since dish 2 is in the tasting order, the output is \\"No\\". For the second guest: The tasting order is [10, 20, 30, 40] and the restricted dishes are [25, 30]. Since dish 30 is in the tasting order, the output is \\"No\\".","solution":"def can_complete_tasting_order(num_guests, guests_data): results = [] index = 0 for _ in range(num_guests): d = guests_data[index] index += 1 tasting_order = guests_data[index:index + d] index += d r = guests_data[index] index += 1 restricted_dishes = guests_data[index:index + r] index += r if any(dish in restricted_dishes for dish in tasting_order): results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"Juanito is a treasure hunter exploring a mysterious island represented as an n × m grid. Each cell in the grid can either be land (\'L\') or water (\'W\'). Juanito starts at cell (1, 1) and wants to reach the treasure located at cell (n, m). Juanito can move to any adjacent land cell horizontally or vertically, but he cannot move diagonally or enter a water cell. Your task is to help Juanito find the shortest path to the treasure. If no path exists, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the grid dimensions. The next n lines each contain m characters (\'L\' or \'W\'), representing the grid cells. Output Print the minimum number of steps required for Juanito to reach cell (n, m). If no path exists, print -1. Examples Input 5 5 LLLLL LWLWL LLLLL LWLWL LLLLL Output 8 Input 3 4 LLLW WLWL WLLL Output 5 Input 3 3 LWL WLW LWL Output -1 Note In the first example, Juanito\'s path could be: (1, 1) → (1, 2) → (1, 3) → (1, 4) → (2, 3) → (3, 3) → (3, 4) → (4, 4) → (5, 4) → (5, 5). In the second example, Juanito can travel from (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) → (3, 4). In the third example, there is no possible path for Juanito to reach cell (3, 3).","solution":"from collections import deque def shortest_path_to_treasure(n, m, grid): Returns the minimum number of steps for Juanito to reach the treasure located at cell (n-1, m-1). If no path exists, return -1. # Check if the start or end cell is water if grid[0][0] == \'W\' or grid[n-1][m-1] == \'W\': return -1 # Initialize directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we\'ve reached the treasure if row == n-1 and col == m-1: return dist # Explore all possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'L\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Write a function that takes as input a list of integers representing the height of buildings from left to right and returns the maximum volume of water that can be trapped between the buildings after raining. Input The input should be a single list of integers representing the height of the buildings. Output Output should be a single integer representing the maximum volume of water trapped. Constraints 1 ≤ length of list ≤ 10000 1 ≤ height of each building ≤ 10000 Example Input [0,1,0,2,1,0,1,3,2,1,2,1] Output 6 Explanation The maximum volume of water that can be trapped is 6 units.","solution":"def max_water_trapped(heights): Calculate the maximum water that can be trapped between buildings. Params: heights: List[int] - List of integers representing the heights of the buildings. Returns: int - Maximum volume of water that can be trapped. if not heights: return 0 left, right = 0, len(heights) - 1 max_left, max_right = heights[left], heights[right] max_water = 0 while left < right: if max_left < max_right: left += 1 max_left = max(max_left, heights[left]) max_water += max_left - heights[left] else: right -= 1 max_right = max(max_right, heights[right]) max_water += max_right - heights[right] return max_water"},{"question":"You have n meetings to schedule in a single day. Each meeting has a start time and an end time. All meetings must be scheduled in such a way that no two meetings overlap. Write a function to find the minimum number of meeting rooms required to hold all the meetings. Constraints * 1 ≤ n ≤ 1000 * 0 ≤ start time < end time ≤ 10000 Input Input is given from Standard Input in the following format: n start_1 end_1 start_2 end_2 ... start_n end_n Output Print the minimum number of meeting rooms required. Examples Input 3 0 30 5 10 15 20 Output 2 Input 3 0 5 5 10 10 15 Output 1","solution":"def min_meeting_rooms(meetings): if not meetings: return 0 # Separate out the start and end times in different lists starts = sorted([meeting[0] for meeting in meetings]) ends = sorted([meeting[1] for meeting in meetings]) start_ptr, end_ptr = 0, 0 used_rooms = 0 max_rooms = 0 while start_ptr < len(meetings): if starts[start_ptr] < ends[end_ptr]: used_rooms += 1 start_ptr += 1 else: used_rooms -= 1 end_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms def parse_input(): import sys input = sys.stdin.read().strip().split() n = int(input[0]) meetings = [] for i in range(1, len(input), 2): meetings.append((int(input[i]), int(input[i + 1]))) return n, meetings if __name__ == \\"__main__\\": n, meetings = parse_input() print(min_meeting_rooms(meetings))"},{"question":"Given a sequence of N integers, find the length of the longest subsequence that is strictly increasing. Constraints * 1 leq N leq 10^5 * 1 leq each integer in the sequence leq 10^9 Input The input is given from Standard Input in the following format: N sequence of N integers Output Print the length of the longest increasing subsequence in the given sequence. Examples Input 8 10 9 2 5 3 7 101 18 Output 4 Input 5 5 5 5 5 5 Output 1 Input 6 1 2 2 3 4 5 Output 5","solution":"def longest_increasing_subsequence_length(nums): Returns the length of the longest strictly increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In Berland, there is a unique tradition in which the city organizes a street festival every summer. The festival is held along a single straight street, and multiple food stalls are set up. Each stall has a specific position on the street (a positive integer). Some of the residents who attend the festival have dietary restrictions and can only consume food from certain stalls. The festival organizer wants to ensure that every resident can find at least one suitable food stall within a maximum walkable distance from their house. The positions of residents’ houses and the positions of food stalls are given. Your task is to calculate the minimum maximum distance that every resident needs to walk to reach the nearest suitable food stall. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of residents and the number of food stalls, respectively. The second line contains n integers denoting the positions of the residents\' houses. The third line contains m integers denoting the positions of the food stalls. Output Print one integer — the minimum maximum distance every resident needs to walk to reach the nearest suitable food stall. Examples Input 3 2 1 5 10 2 7 Output 3 Input 4 1 1 2 3 4 5 Output 4","solution":"def minimum_maximum_distance(n, m, residents, stalls): Calculates the minimum maximum distance every resident needs to walk to reach the nearest suitable food stall. Args: n: int - number of residents m: int - number of food stalls residents: List[int] - positions of residents\' houses stalls: List[int] - positions of food stalls Returns: int - minimum maximum distance needed for any resident residents.sort() stalls.sort() def can_reach_with_max_distance(max_distance): for r in residents: found_stall = False left = 0 right = m - 1 while left <= right: mid = (left + right) // 2 if abs(stalls[mid] - r) <= max_distance: found_stall = True break elif stalls[mid] < r: left = mid + 1 else: right = mid - 1 if not found_stall: return False return True low, high = 0, max(max(residents), max(stalls)) - min(min(residents), min(stalls)) while low < high: mid = (low + high) // 2 if can_reach_with_max_distance(mid): high = mid else: low = mid + 1 return low"},{"question":"Arkady wants to monitor the water supply system in his garden. The water supply system can be represented as a weighted directed graph with n junctions (numbered from 1 to n) and m pipes connecting them. Each pipe from junction u to junction v has a capacity w, which is the maximum amount of water that can flow through the pipe. Arkady needs to quickly determine the maximum water flow from a source junction s to a target junction t under the assumption that no water is consumed or accumulated at intermediate junctions. Given multiple queries, each containing a source and target junction, Arkady wants to find the maximum water flow for each query. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10^3) — number of junctions and pipes, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), indicating a pipe from junction u to junction v with capacity w. The next line contains a single integer q (1 ≤ q ≤ 10^3), the number of queries. Each of the next q lines contains two integers s and t (1 ≤ s, t ≤ n), indicating a query for the maximum water flow from junction s to junction t. Output For each query, output a single integer — the maximum amount of water that can be transported from junction s to junction t. Examples Input 4 5 1 2 10 1 3 5 2 3 15 2 4 10 3 4 10 3 1 4 2 3 3 1 Output 15 15 0 Note In the given example, for the first query, the maximum flow from junction 1 to junction 4 is 15 (flow routes: 1 -> 2 -> 4 and 1 -> 3 -> 4 with flow of 10 and 5 respectively). For the second query, the maximum flow from junction 2 to junction 3 is 15. For the third query, as there is no outgoing pipe from junction 3 to junction 1, the result will be 0.","solution":"import collections def bfs(C, F, source, sink, parent): visited = [False] * len(C) queue = collections.deque([source]) visited[source] = True while queue: u = queue.popleft() for v in range(len(C)): if not visited[v] and C[u][v] - F[u][v] > 0: queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp(C, source, sink): n = len(C) F = [[0] * n for _ in range(n)] parent = [-1] * n max_flow = 0 while bfs(C, F, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, C[parent[s]][s] - F[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] F[u][v] += path_flow F[v][u] -= path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(num_junctions, pipes, queries): C = [[0] * num_junctions for _ in range(num_junctions)] for u, v, w in pipes: C[u-1][v-1] = w results = [] for s, t in queries: results.append(edmonds_karp(C, s-1, t-1)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) index += 2 pipes = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) pipes.append((u, v, w)) index += 3 q = int(data[index]) index += 1 queries = [] for _ in range(q): s = int(data[index]) t = int(data[index + 1]) queries.append((s, t)) index += 2 results = max_water_flow(n, pipes, queries) for result in results: print(result)"},{"question":"Given an array of `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. # Input - The first line of input contains a single integer `n`, where `1 ≤ n ≤ 10^5`, representing the number of bars in the elevation map. - The second line contains `n` non-negative integers separated by spaces, each value representing the height of an elevation bar and given in the range `[0, 10^4]`. # Output - Output a single integer representing the total units of water that can be trapped. # Examples Example 1: **Input:** ``` 6 0 1 0 2 1 0 1 3 2 1 2 1 ``` **Output:** ``` 6 ``` **Explanation:** The elevation map `0 1 0 2 1 0 1 3 2 1 2 1` is as follows: ``` | 3 X 2 X X 1 X X X X X X 0 X X X X X X X X X X X X ``` The total water trapped is `6` units. Example 2: **Input:** ``` 5 4 2 0 3 2 5 ``` **Output:** ``` 9 ``` **Explanation:** The elevation map `4 2 0 3 2 5` is as follows: ``` | 5 X 4 X X 3 X X X 2 X X X X 1 X X X X X 0 X X X X X X X X X X ``` The total water trapped is `9` units. # Notes To solve this problem, you may want to use a two-pointer or dynamic programming approach to efficiently calculate the trapped water: 1. Identify the minimum of the highest bars on either side and subtract the current bar height. 2. Accumulate this value to get the total water trapped. # Constraints - The solution should be capable of handling the upper constraint where `n` can be as large as `100,000` efficiently.","solution":"def trap_rain_water(height): if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) water_trapped += right_max - height[right] return water_trapped"},{"question":"Jenny is organizing her bookshelf. She has n books, each with a unique thickness t on her 1-dimensional shelf. Initially, Jenny places each book with the leftmost point at a given position xi on the shelf. She then starts moving the books, one after another, from their initial positions to the left side of the shelf (towards position 0). When she moves the i-th book, it will stop once either: 1. The rightmost point of the book reaches position 0 (i.e., it cannot be moved further left). 2. The book touches any previously moved book. Note that once a book stops moving, it will not move again, even if another book touches it afterwards. Calculate the final positions of the left endpoints of all the books after they have all been moved. Input The first line will contain an integer n (1 ≤ n ≤ 1 000), the number of books. The next line will contain n integers t1, t2, ..., tn (1 ≤ ti ≤ 100) — the thicknesses of the books. The following line will contain n integers x1, x2, ..., xn (0 ≤ xi ≤ 1 000) — the initial positions of the left endpoints of the books. Output Print a single line with n numbers. The i-th number denotes the position of the left endpoint of the i-th book. The output will be accepted if it has an absolute or relative error at most 10^-6. Example Input 5 2 3 1 4 2 10 9 8 7 6 Output 4 5 3 0 11 Explanation The final positions of the books will be as follows: - Book 1 with thickness 2 will move from position 10 to position 4 - Book 2 with thickness 3 will move from position 9 to position 5 - Book 3 with thickness 1 will move from position 8 to position 3 - Book 4 with thickness 4 will move from position 7 to position 0 (cannot be moved further left) - Book 5 with thickness 2 will move from position 6 to a position such that it does not overlap with the previously moved books, so it remains at position 11.","solution":"def final_positions(n, thicknesses, positions): Calculate the final positions of the left endpoints of all books. Parameters: n (int): Number of books. thicknesses (list): A list of integers representing the thickness of each book. positions (list): A list of integers representing the initial positions of the left endpoints of each book. Returns: list: A list of integers representing the final positions of the left endpoints of all books. final_pos = [] current_end = 0 # This keeps track of the rightmost end of the currently placed books for i in range(n): new_left = max(0, current_end) final_pos.append(new_left) # Update current_end to the rightmost end of the newly placed book current_end = new_left + thicknesses[i] return final_pos"},{"question":"Given an integer `n`, print the first `n` numbers of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first number is 0. - The second number is 1. - Each subsequent number is the sum of the previous two. Input ``` 5 ``` Output ``` 0 1 1 2 3 ``` Input ``` 8 ``` Output ``` 0 1 1 2 3 5 8 13 ```","solution":"def fibonacci(n): Returns the first n numbers of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"In the competitive programming world, array manipulation is a common task that requires both understanding of data structures and algorithmic efficiency. Let\'s consider a simplified version of this challenge. problem You are given an array of positive integers and need to perform a series of operations on it. Each operation consists of adding a constant value to all elements within a specific range of the array. Your task is to determine the final state of the array after all operations have been executed. input: The input consists of: 1. An integer `n` (1 ≤ n ≤ 100,000) representing the size of the array. 2. An integer `m` (1 ≤ m ≤ 100,000) representing the number of operations. 3. An array of `n` positive integers (1 ≤ array[i] ≤ 1,000). 4. `m` operations, each described by three integers `start`, `end`, and `value` (1 ≤ start ≤ end ≤ n, 1 ≤ value ≤ 1,000), indicating that `value` should be added to all elements from index `start` to index `end` inclusive. output: Output the final state of the array after all operations have been applied. Input Format: n m array start1 end1 value1 start2 end2 value2 ... startm endm valuem Output Format: Final modified array in a single line, space-separated. Example: Input: 5 3 1 2 3 4 5 1 3 2 2 5 4 3 4 1 Output: 3 8 11 9 9 Explanation: Initial array: [1, 2, 3, 4, 5] After 1st operation: [3, 4, 5, 4, 5] After 2nd operation: [3, 8, 9, 8, 9] After 3rd operation: [3, 8, 10, 9, 9]","solution":"def apply_operations(n, m, array, operations): Modifies the array based on the given operations. Parameters: n - size of the array m - number of operations array - initial array of positive integers operations - list of operations, each described by (start, end, value) Returns: Modified array after applying all operations. # Convert the given array to 0-index based for easier manipulation result = [0] * (n + 1) # Apply the range updates using a difference array approach for op in operations: start, end, value = op result[start - 1] += value if end < n: result[end] -= value # Calculating the final values based on the cumulative sum for i in range(1, n): result[i] += result[i - 1] # Generating the final array by combining initial values and the result modified_array = [array[i] + result[i] for i in range(n)] return modified_array"},{"question":"You are given a binary string s consisting of n characters (0s and 1s). Your task is to flip at most one contiguous subarray of this string in order to maximize the number of 1s in the resulting string. Flipping a subarray means changing every 0 to 1 and every 1 to 0 in that subarray. A subarray is a contiguous segment of the array (i.e., a string segment s[a … b] = s[a]s[a + 1] … s[b] for 1 ≤ a ≤ b ≤ n). For example, consider the binary string \\"1100101\\": - Flipping the subarray s[3 … 5] results in the string \\"1110011\\". Write a program that finds the maximum number of 1s possible after at most one flip of a contiguous subarray. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the binary string s. The second line contains the binary string s consisting of exactly n characters. Output Print a single integer — the maximum number of 1s possible after at most one flip of a contiguous subarray. Examples Input 7 1100101 Output 6 Input 5 00000 Output 5 Input 3 111 Output 3 Note In the first example, the optimal flip is the subarray from the 3rd to the 5th character (inclusive), resulting in the string \\"1110011\\", which contains six 1s. In the second example, flipping the entire string results in \\"11111\\", which contains five 1s. In the third example, the string already contains the maximum number of 1s, so no flip is necessary.","solution":"def max_ones_after_flip(n, s): This function returns the maximum number of 1s possible after at most one flip of a contiguous subarray. Parameters: n: Integer, the length of the binary string s. s: String, the binary string containing exactly n characters. Returns: Integer, the maximum number of 1s possible after at most one flip. # Convert string to list of integers where 0 -> 1 and 1 -> -1 modified = [1 if char == \'0\' else -1 for char in s] max_diff = current_diff = 0 for x in modified: current_diff = max(x, current_diff + x) max_diff = max(max_diff, current_diff) # Count the original number of 1s original_ones = s.count(\'1\') if max_diff == 0 and original_ones == n: return original_ones return original_ones + max_diff"},{"question":"In a certain country, a particular team-building event involves bringing snacks to share. Each participant brings one of three types of snacks: apples, oranges, or bananas. A team consists of exactly three participants. For the event to be balanced, the three participants in each team must all bring different types of snacks. You are organizing the event, and you need to verify if a given team is balanced. Constraints * The input consists of a single line containing three space-separated strings representing the snacks brought by the three participants. * Each string is either \\"apple\\", \\"orange\\", or \\"banana\\". Input Input is given from Standard Input in the following format: snack1 snack2 snack3 Output If the team is balanced, print `BALANCED`; if it is not, print `UNBALANCED`. Examples Input apple orange banana Output BALANCED Input apple apple banana Output UNBALANCED","solution":"def check_team_balance(snack1, snack2, snack3): Check if the given team has balanced snacks. Three snacks are balanced if they are all different types. snacks = {snack1, snack2, snack3} if len(snacks) == 3: return \\"BALANCED\\" else: return \\"UNBALANCED\\""},{"question":"A company is developing a new system for traffic management. They need to analyze the traffic flow on a major highway. The highway can be represented as a straight line, with various checkpoints along the way that can measure the speed of passing vehicles. Each checkpoint has a known position and can measure the speed of vehicles at any given time. You are tasked with finding the maximum speed difference recorded between any two checkpoints. For simplicity, you can assume that the speed readings are taken simultaneously at all checkpoints. Input: The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of checkpoints. Each of the next n lines contains two integers pi and si (0 ≤ pi ≤ 10^9, 0 ≤ si ≤ 10^3) — the position and speed recorded at the i-th checkpoint. Output: Print a single integer — the maximum speed difference recorded between any two checkpoints. Examples: Input: 5 1 100 3 200 7 150 10 170 15 130 Output: 100 Input: 3 0 0 5 300 10 300 Output: 300 Note: In the first example, the maximum speed difference is between the checkpoint at position 3 with speed 200 and the checkpoint at position 15 with speed 130. Thus, the difference is 200 - 130 = 70. In the second example, the maximum speed difference is between the checkpoint at position 0 with speed 0 and the checkpoint at position 5 or 10 with speed 300. Thus, the difference is 300 - 0 = 300.","solution":"def max_speed_difference(n, checkpoints): Returns the maximum speed difference recorded between any two checkpoints. Parameters: n (int): Number of checkpoints. checkpoints (list of tuples): Each tuple contains (position, speed) of a checkpoint. Returns: int: Maximum speed difference. speeds = [checkpoint[1] for checkpoint in checkpoints] return max(speeds) - min(speeds)"},{"question":"You are part of a team responsible for designing road networks. You need to select certain roads in such a way that the road network does not contain any cycles and has the maximum possible total length. You are given a list of roads, where each road connects two cities and has a certain length. Your task is to determine which roads to keep so as to achieve the above goals. Input The first line contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) — the number of cities and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000000) — the two cities u and v connected by a road of length w. Output Print the maximum possible total length of the roads selected, such that there are no cycles in the road network. If no roads can be selected or no roads are provided, print 0. Example Input 4 5 1 2 3 2 3 5 3 4 6 4 1 7 2 4 4 Output 18 Note In the example, we can select the roads {1-2, 2-3, 3-4} with lengths {3, 5, 6}, summing to 14, or {4-1, 3-4, 2-3} with lengths {7, 6, 5}, summing to 18. The latter is the maximum sum that avoids cycles.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def maximum_spanning_tree(n, edges): # sort edges in descending order of weight edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [i for i in range(n)] rank = [0] * n result = [] # This will store the resultant MST e = 0 # An index variable, used for result i = 0 # An index variable, used for sorted edges # Number of edges to be taken is equal to V-1 while e < n - 1 and i < len(edges): # pick the smallest edge and increment the index for next iteration u, v, w = edges[i] i += 1 x = find(parent, u) y = find(parent, v) # if including this edge does\'t cause cycle, # include it in result and increment the index # of result for next edge if x != y: e += 1 result.append(w) union(parent, rank, x, y) # The sum of weights of the edges in the Maximum Spanning Tree return sum(result) if result else 0 def process_input(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n, m = map(int, data[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, data[i].split()) edges.append((u-1, v-1, w)) # use 0-based indexing return maximum_spanning_tree(n, edges) if __name__ == \\"__main__\\": print(process_input())"},{"question":"A company wants to organize a meeting and needs to determine the minimum number of meeting rooms required to accommodate all the meeting requests without any overlap. Each meeting request is represented by a start time and an end time. The meeting ends at the end time but does not occupy the room at the end time. For example, a meeting with start time 1 and end time 5 ends exactly at 5, so another meeting can start at 5. Given the list of meeting times, determine the minimum number of meeting rooms required. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of meetings. Each of the next n lines contains two space-separated integers s and e (0 ≤ s < e ≤ 10^9) representing the start time and end time of a meeting. Output Print a single integer m — the minimum number of meeting rooms required. Examples Input 3 1 4 2 5 7 9 Output 2 Input 4 0 30 5 10 15 20 35 40 Output 2 Input 2 2 3 3 4 Output 1 Note In the first example, the first and second meetings overlap in time, hence you need at least two meeting rooms. The third meeting does not overlap with any of the others. In the second example, you can accommodate the first meeting in one room. The second and third meetings overlap in time but can be held in the other room, so you need a total of two meeting rooms. In the third example, the meetings do not overlap in time, so one meeting room is sufficient.","solution":"import heapq def min_meeting_rooms(meetings): Determines the minimum number of meeting rooms required to accommodate all the meeting requests without any overlap. Args: meetings (list of tuples): List of tuples where each tuple contains two integers, the start time and end time of a meeting. Returns: int: The minimum number of meeting rooms required. if not meetings: return 0 # Sort the meetings based on start time meetings.sort(key=lambda x: x[0]) # Use a min-heap to track the end time of meetings currently using a room min_heap = [] # Add the end time of the first meeting heapq.heappush(min_heap, meetings[0][1]) for i in range(1, len(meetings)): # If the meeting at \'i\' starts after or when the earliest ending meeting ends, reuse the room if meetings[i][0] >= min_heap[0]: heapq.heappop(min_heap) # Push the end time of the current meeting onto the heap heapq.heappush(min_heap, meetings[i][1]) # Number of rooms required is the size of the heap return len(min_heap)"},{"question":"You are a software developer at a tech company, and your team needs to develop a data processing module for a new product. The module involves processing a list of strings that represent customer reviews. Each review can include numbers, words, and special characters. The team\'s goal is to extract the numeric values from each review and compute the total sum of all these numbers. The reviews are provided as a list of strings, where each string contains a review. Your task is to write a function that returns the total sum of all numerical values found in the reviews. Numerical values can be positive or negative integers, and they are separated by non-numeric characters. # Input - A list of n strings (1 ≤ n ≤ 1,000) representing customer reviews. Each string has a length of at most 500 characters. # Output - An integer that represents the total sum of all numerical values found in the reviews. # Example Input: ``` [ \\"This product is great! I bought it for 50 dollars and it saved me 200 dollars in repairs.\\", \\"Terrible experience, wasted -10 hours trying to get it work and spent another 30 dollars.\\", \\"Not good, not bad. I\'ll give it 3 stars out of 5. It cost me 20 bucks though.\\" ] ``` Output: ``` 293 ``` # Note In the first review: \\"50\\" and \\"200\\" are the numbers extracted. In the second review: \\"-10\\" and \\"30\\" are the numbers extracted. In the third review: \\"3\\" and \\"20\\" are the numbers extracted. The sum of these values is 50 + 200 + (-10) + 30 + 3 + 20 = 293.","solution":"import re def sum_of_numbers_in_reviews(reviews): Extracts all numeric values from each review and computes the total sum. Parameters: reviews (list of str): List of customer reviews. Returns: int: The total sum of all numeric values found in the reviews. total_sum = 0 for review in reviews: # Find all occurrences of integers with optional signs numbers = re.findall(r\'-?d+\', review) # Convert all found numbers to integers and sum them total_sum += sum(int(number) for number in numbers) return total_sum"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the length of the longest valid palindrome that can be formed by removing 0 or more characters from the string. A palindrome is a string that reads the same backward as forward. For this question, a \\"valid palindrome\\" is defined as a palindrome that has at most one character with an odd frequency. For example, in the string \\"abccccdd\\", the longest valid palindrome that can be formed is \\"dccaccd\\", which has a length of 7. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. The next t lines each contain a string s (1 ≤ |s| ≤ 100), a lowercase English letters string for which you need to find the longest valid palindrome. Output For each test case, output the length of the longest valid palindrome that can be formed using characters from the given string. Example Input 6 abccccdd aabbccddeeff racecar banana abc madam Output 7 12 7 5 1 5","solution":"def longest_palindrome_length(s): Finds the length of the longest valid palindrome that can be formed by removing 0 or more characters from the string s. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) length = 0 odd_found = False # Iterate through the character counts for count in char_count.values(): # Add the largest even number less than or equal to the count length += (count // 2) * 2 # Check if an odd count is found if count % 2 == 1: odd_found = True # If there\'s at least one character with an odd count, add one to the length for the center character if odd_found: length += 1 return length def longest_palindrome_lengths(num_cases, cases): results = [] for case in cases: results.append(longest_palindrome_length(case)) return results"},{"question":"Alice is an accountant and she loves playing with numbers. Today, she is analyzing a special kind of sequence called the \\"Happy Sequence\\". A Happy Sequence is defined as follows: - Start with any positive integer x. - Replace the number by the sum of the squares of its digits. - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Alice needs your help to determine if a given number x will eventually become 1 or if it will be stuck in a cycle forever. Your task is to determine whether each number in a list of given numbers is a Happy Number or not. # Input The first line contains an integer T, the number of test cases. For each test case, there is a single line containing an integer x. # Output For each test case, print \\"Happy\\" if the number is a Happy Number, otherwise print \\"Unhappy\\". # Constraints 1 ≤ T ≤ 100 1 ≤ x ≤ 10^4 # Sample Input 3 19 2 7 # Sample Output Happy Unhappy Happy # Explanation - For the first number 19: 19 -> 1^2 + 9^2 = 1 + 81 = 82 -> 8^2 + 2^2 = 64 + 4 = 68 -> 6^2 + 8^2 = 36 + 64 = 100 -> 1^2 + 0^2 + 0^2 = 1 (This is a Happy number). - For the second number 2: 2 -> 2^2 = 4 -> 4^2 = 16 -> 1^2 + 6^2 = 1 + 36 = 37 -> 3^2 + 7^2 = 9 + 49 = 58 -> 5^2 + 8^2 = 25 + 64 = 89 -> 8^2 + 9^2 = 64 + 81 = 145 -> 1^2 + 4^2 + 5^2 = 1 + 16 + 25 = 42 -> 4^2 + 2^2 = 16 + 4 = 20 -> 2^2 + 0^2 = 4 -> ... (This sequence enters a cycle that does not include 1 so it is Unhappy). - For the third number 7: 7 -> 7^2 = 49 -> 4^2 + 9^2 = 16 + 81 = 97 -> 9^2 + 7^2 = 81 + 49 = 130 -> 1^2 + 3^2 + 0^2 = 1 + 9 + 0 = 10 -> 1^2 + 0^2 = 1 (This is a Happy number).","solution":"def is_happy_number(x): Determines if a number x is a happy number. Returns \\"Happy\\" if x is a happy number, otherwise \\"Unhappy\\". def get_next(n): return sum(int(char) ** 2 for char in str(n)) seen = set() while x != 1 and x not in seen: seen.add(x) x = get_next(x) return \\"Happy\\" if x == 1 else \\"Unhappy\\" def happy_sequence(test_cases): Takes an iterable of test cases and returns the results for each case. Parameters: - test_cases: a list of integers to check Returns a list of strings \\"Happy\\" or \\"Unhappy\\" for each test case. return [is_happy_number(x) for x in test_cases]"},{"question":"In a software company, there are several employees working on various projects. Each project can span one or more departments, and each employee can work on multiple projects. Your task is to write a program that processes the employees\' project assignments and outputs a list of all employees along with the projects they are working on, sorted by employees\' names. Input The input consists of multiple datasets, each in the following format: > M N > employee1 department project1 project2 ... projectN > employee2 department project1 project2 ... projectN > ... > employeeM department project1 project2 ... projectN > The first line contains two integers M and N, which are the number of employees and the number of projects, respectively. 1 <= M <= 100, and 1 <= N <= 10. Each of the next M lines describes an employee working in a specific department and the projects they are involved in. The employee\'s name is a character string that only contains lowercase letters, and is between one and eight characters long. The department name follows the same restrictions. No two employees in a dataset may have the same name. Each project name is also a character string of the same restrictions. You may assume the following conditions: * Each employee works in only one department. * Each project has a unique name within the same dataset. The end of the input is indicated by a line containing two zeros. Output For each dataset in the input, output the name of each employee followed by the projects they are working on, sorted in dictionary order (both employees and projects). Each project should be listed in the same order as provided in the input. Example Input 3 2 alice finance projectA projectB bob hr projectB charlie it projectA projectC 2 1 david marketing projectX eve sales projectY 0 0 Output alice: projectA projectB bob: projectB charlie: projectA projectC david: projectX eve: projectY","solution":"def process_employee_projects(data): Processes employee project assignments and outputs a list of all employees along with the projects they are working on, sorted by employees\' names. datasets = data.strip().split(\\"n\\") index = 0 results = [] while index < len(datasets): m, n = map(int, datasets[index].split()) if m == 0 and n == 0: break index += 1 employees = [] for _ in range(m): line = datasets[index].split() employee_name = line[0] projects = line[2:] employees.append((employee_name, projects)) index += 1 employees.sort(key=lambda x: x[0]) for employee, projects in employees: results.append(f\\"{employee}: {\' \'.join(projects)}\\") return results"},{"question":"In a park, there are n benches arranged in a row and m people entering the park. Each person has their preferred section of the park to sit in. The benches are numbered consecutively from 1 to n. The ith person prefers to sit between the benches numbered l_i and r_i (inclusive). Assume that all benches are initially empty and each person will choose the left-most available bench within their preferred section to sit on. After sitting, the bench is no longer available for others. For each person, you need to determine the bench number they will sit on. Input The first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^{5}) — the number of benches and the number of people. The second line contains m pairs of integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n), where l_i and r_i are the preferred range of benches for the ith person. Output Print m lines. For each person, print the bench number where they will sit. If a person cannot find an available bench in their preferred section, print -1 for that person. Examples Input 10 5 1 3 2 5 3 4 1 7 6 10 Output 1 2 3 4 6 Input 5 4 2 4 1 2 4 5 1 5 Output 2 1 4 3 Note In the first example: * The first person can sit on the first bench. * The second person will sit on the second bench, as the first bench is already taken. * The third person will sit on the third bench. * The fourth person will sit on the first available bench within their range, which is the fourth bench. * The fifth person will sit on the sixth bench. In the second example: * The first person will sit on the second bench. * The second person will take the first bench. * The third person will sit on the fourth bench. * The fourth person will find the first, second, fourth benches occupied, so they will sit on the third bench.","solution":"def find_bench_seats(n, m, preferences): Function to determine the bench number each person will sit on in a park. Parameters: n : int : number of benches m : int : number of people preferences: List[Tuple[int, int]] : list of tuples representing (l_i, r_i) ranges for each person Returns: List[int] : list of bench numbers each person will occupy (or -1 if no bench is available) benches = [False] * (n+1) # A list to keep track of occupied benches (0-index is unused) results = [] for l, r in preferences: seated = False for bench in range(l, r+1): if not benches[bench]: benches[bench] = True results.append(bench) seated = True break if not seated: results.append(-1) return results"},{"question":"A company wants to send their employee for a series of conferences in different cities. The employee needs to attend all conferences in the sequence they are scheduled, but he can travel between any two cities directly. The travel cost between each pair of cities is given. The company wants to minimize the total travel cost while attending all the scheduled conferences. Given an integer N representing the number of conferences (or cities), and an N x N matrix where the element at i-th row and j-th column represents the travel cost between city i and city j, write a program to find the minimum travel cost to attend all conferences in the sequence they are scheduled. The employee starts the journey from the first city (city 0) and has to return to the first city after attending the last conference. INPUT: - The first line contains an integer N (2 ≤ N ≤ 10). - The next N lines contain N integers each, representing the travel cost matrix. OUTPUT: - Print a single integer, the minimum travel cost to attend all conferences in sequence and return to the starting city. CONSTRAINTS: - 2 ≤ N ≤ 10 - 0 ≤ travel cost ≤ 10^6 SAMPLE INPUT: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 SAMPLE OUTPUT: 80 Explanation: - The best route is 0 -> 1 -> 3 -> 2 -> 0 - The total travel cost is 10 + 25 + 30 + 15 = 80.","solution":"def tsp_min_cost(N, cost): import itertools # Helper function to calculate the cost of a specific path def calculate_path_cost(path): total_cost = 0 for i in range(len(path) - 1): total_cost += cost[path[i]][path[i + 1]] # cost of returning to the start city total_cost += cost[path[-1]][path[0]] return total_cost # Generate all permutations of cities 1 to N-1 cities = list(range(1, N)) min_cost = float(\'inf\') for perm in itertools.permutations(cities): current_path = [0] + list(perm) current_cost = calculate_path_cost(current_path) if current_cost < min_cost: min_cost = current_cost return min_cost # Example Usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) cost = [] idx = 1 for i in range(N): cost.append(list(map(int, data[idx:idx + N]))) idx += N print(tsp_min_cost(N, cost))"},{"question":"Given an undirected graph consisting of `n` vertices and `m` edges, find the size of the largest connected component of the graph after removing exactly one edge. The graph is given as a list of edges, where each edge is represented by two integers `u` and `v` indicating a connection between vertex `u` and vertex `v`. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of vertices and the number of edges. The following `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — the endpoints of the edges. Output Print a single integer — the size of the largest connected component of the graph after removing exactly one edge. Example Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 5 Note In the example, if we remove the edge (4, 5), the graph will split into two connected components: one with vertices {1, 2, 3, 4} and another with vertices {5, 6}. The largest connected component has a size of 5.","solution":"from collections import defaultdict, deque def largest_connected_component_after_removing_edge(n, m, edges): Returns the size of the largest connected component after removing exactly one edge. Args: n : int : Number of vertices. m : int : Number of edges. edges : List[Tuple[int, int]] : List of edges of the graph. Returns: int : Size of the largest connected component. def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True size = 0 while queue: node = queue.popleft() size += 1 for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size # Function to calculate the size of largest component def component_size(adjacency_list, exclude_edge): visited = [False] * (n + 1) max_component_size = 0 for i in range(1, n + 1): if not visited[i]: size = bfs(i, visited, adjacency_list) max_component_size = max(max_component_size, size) return max_component_size max_size_after_removal = 0 for u, v in edges: # Create adjacency list adjacency_list = defaultdict(list) for edge_u, edge_v in edges: if (edge_u, edge_v) != (u, v) and (edge_v, edge_u) != (u, v): adjacency_list[edge_u].append(edge_v) adjacency_list[edge_v].append(edge_u) max_size_after_removal = max(max_size_after_removal, component_size(adjacency_list, (u, v))) return max_size_after_removal"},{"question":"Given an array of integers, your task is to count the minimum number of contiguous subarrays that need to be reversed so that the entire array becomes sorted in non-decreasing order. A contiguous subarray is a consecutive sequence of elements within the array. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output Print a single integer — the minimum number of contiguous subarrays that need to be reversed. Examples Input 5 5 4 3 2 1 Output 1 Input 4 4 3 2 1 5 Output 1","solution":"def min_reversals_to_sort(n, arr): Returns the minimum number of contiguous subarrays that need to be reversed so that the entire array becomes sorted in non-decreasing order. if arr == sorted(arr): return 0 # Find first unsorted position start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # Find last unsorted position end = n - 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Check if reversing the found segment sorts the array arr[start:end + 1] = arr[start:end + 1][::-1] if arr == sorted(arr): return 1 else: return -1 # Indicates that more than one reversal is needed"},{"question":"**Question: Price Fluctuation Analysis** Alice is an analyst working for a stock trading company. Her task is to monitor the daily price changes of a particular stock for the past N days. Alice records a positive integer each day, representing the price change. A positive change indicates a price increase, while a negative change indicates a price decrease. To help her identify potential trends, she decided to write a program that performs the following analysis: - Determine the maximum increase in stock price within a contiguous subarray of the price changes. - Determine the maximum decrease in stock price within a contiguous subarray of the price changes. Specifically, your task is to write a function that takes an array of integers representing daily price changes and returns two values: 1. The maximum sum of a contiguous subarray (maximum increase). 2. The minimum sum of a contiguous subarray (maximum decrease). Input - The first line of input contains an integer T, denoting the number of test cases. - For each test case: - The first line contains an integer N, the number of days. - The second line contains N space-separated integers representing the daily price changes. Output For each test case, print two space-separated integers, representing the maximum increase and the maximum decrease. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - -10^6 ≤ price change ≤ 10^6 Example Input: 3 5 1 -2 3 -4 5 4 -1 -1 -1 -1 6 2 -1 2 3 -1 2 Output: 5 -4 -1 -4 7 -1 Explanation Test #1: - The maximum increase subarray for the first test case is [1, -2, 3, -4, 5], with a sum of 5. - The maximum decrease subarray for the first test case is [-4], with a sum of -4. Test #2: - The maximum increase subarray for the second test case is [-1], with a sum of -1. - The maximum decrease subarray for the second test case is [-1, -1, -1, -1], with a sum of -4. Test #3: - The maximum increase subarray for the third test case is [2, -1, 2, 3, -1, 2], with a sum of 7. - The maximum decrease subarray for the third test case is [-1], with a sum of -1. Note: Use efficient algorithms to ensure the solution can handle the largest input sizes within reasonable time limits.","solution":"def max_increase_and_decrease(prices): Returns the maximum increase and maximum decrease in stock prices within a contiguous subarray. max_increase = max_subarray_sum(prices) max_decrease = min_subarray_sum(prices) return max_increase, max_decrease def max_subarray_sum(arr): max_sum = arr[0] current_sum = arr[0] for price in arr[1:]: current_sum = max(price, current_sum + price) max_sum = max(max_sum, current_sum) return max_sum def min_subarray_sum(arr): min_sum = arr[0] current_sum = arr[0] for price in arr[1:]: current_sum = min(price, current_sum + price) min_sum = min(min_sum, current_sum) return min_sum def solve(test_cases): results = [] for prices in test_cases: results.append(max_increase_and_decrease(prices)) return results"},{"question":"You are given an integer array `nums` of size `n` and an integer `k`. Return the k-th largest element in the array. Note that it is the k-th largest element in the sorted order, not the k-th distinct element. # Function Signature ```python def kth_largest(nums: List[int], k: int) -> int: ``` # Input - `nums`: A list of integers where 1 ≤ len(nums) ≤ 10^4 - `k`: An integer representing the position (1 ≤ k ≤ len(nums)) # Output - Return the k-th largest element in the array. # Example ```python print(kth_largest([3,2,1,5,6,4], 2)) # Output: 5 print(kth_largest([3,2,3,1,2,4,5,5,6], 4)) # Output: 4 ```","solution":"def kth_largest(nums, k): Return the k-th largest element in the array nums. nums.sort(reverse=True) return nums[k-1]"},{"question":"Alice is an avid gardener and is particularly fond of growing flowerbeds. However, maintaining the flowerbeds in certain patterns is quite a task! Alice decides to automate the process using some programming magic. You are assigned to help Alice in the following problem: Alice has a rectangular garden of size m x n (m rows and n columns), where she wants to plant flowers in a specific pattern. Each cell in the garden can either have a flower or be empty. Alice marks some cells in the garden as \\"preferred\\" cells where she wants flowers to be planted. Your task is to check if it\'s possible to plant flowers in the garden such that the total number of flowers in any row or column of the garden exactly matches the number of \\"preferred\\" cells in that row or column, respectively. If such arrangement is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the garden. Each of the following m lines contains n characters (\'#\' or \'.\') representing the garden\'s grid — where \'#\' represents a \\"preferred\\" cell, and \'.\' represents an empty cell. Output Print \\"YES\\" if it is possible to plant flowers in such a way that the constraints are met. Otherwise, print \\"NO\\". Examples Input 3 3 #.# .#. #.# Output YES Input 4 4 .#.. #. Output NO Note For the first example, one possible arrangement is to plant flowers in cells (1,1), (1,3), (2,2), (3,1), and (3,3). In the second example, it is not possible to arrange the flowers such that the number of flowers in each row and column matches the number of preferred cells because the second row constraint conflicts with the others.","solution":"def can_plant_flowers(m, n, garden): row_counts = [0] * m col_counts = [0] * n for i in range(m): for j in range(n): if garden[i][j] == \'#\': row_counts[i] += 1 col_counts[j] += 1 return sorted(row_counts) == sorted(col_counts) def garden_setup(m, n, garden): if can_plant_flowers(m, n, garden): return \\"YES\\" else: return \\"NO\\""},{"question":"**Problem L: Magic Square Checker** A magic square is a grid of distinct numbers in which the sums of the numbers in each row, each column, and both main diagonals are the same. Given a square matrix, your task is to determine whether it is a magic square. For example, the following matrix is a magic square: ``` 2 7 6 9 5 1 4 3 8 ``` In this matrix, the sums of the numbers for all rows, columns, and both diagonals are all 15. Your task is to write a program to check if the given square matrix is a magic square. # Input The input consists of multiple test cases. The first line contains `t` (1 ≤ t ≤ 100), the number of test cases. For each test case, the input starts with `n` (2 ≤ n ≤ 50), the size of the square matrix. The next `n` lines contain `n` integers each, representing the matrix. # Output For each test case, output \\"Yes\\" if the matrix is a magic square, otherwise output \\"No\\". # Sample Input ``` 2 3 2 7 6 9 5 1 4 3 8 3 3 5 7 8 1 6 4 9 2 ``` # Sample Output ``` Yes No ``` # Constraints - The numbers in the matrix are distinct and are between 1 and 2500 inclusive. - Each test case matrix is independent of the others.","solution":"def is_magic_square(matrix, n): # Sum of the first row, which will be the target sum target_sum = sum(matrix[0]) # Check sums of all rows for row in matrix: if sum(row) != target_sum: return False # Check sums of all columns for col in range(n): col_sum = sum(matrix[row][col] for row in range(n)) if col_sum != target_sum: return False # Check sum of the main diagonal if sum(matrix[i][i] for i in range(n)) != target_sum: return False # Check sum of the other diagonal if sum(matrix[i][n - i - 1] for i in range(n)) != target_sum: return False return True def magic_square_checker(test_cases): results = [] for matrix in test_cases: n = len(matrix) if is_magic_square(matrix, n): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"In a far-off land, the King has a chessboard of size n x n (2 ≤ n ≤ 1000) and wishes to place knights on it. A knight can attack other pieces in an L shape: two squares in one direction and then one square perpendicular. The King wants to place knights on the chessboard such that no two knights can attack each other. For example, on a 3x3 board, knights can be placed at (1,1), (3,2), (2,3) and (3,3). There can be more than one solution to this problem. Write a program that takes as input the dimensions of the chessboard and returns the maximum number of knights that can be placed on the board such that no two knights attack each other. # Input - n (2 ≤ n ≤ 1000): an integer representing the dimensions of the chessboard. # Output - An integer representing the maximum number of knights that can be placed on the board without any two knights attacking each other. Example Input ``` 3 ``` Output ``` 5 ``` Input ``` 4 ``` Output ``` 8 ``` Note In the examples above: - For a 3x3 board: (1,1), (1,3), (2,2), (3,1), (3,3) can be used as placements for knights, leading to a solution where knights do not threaten each other. - For a 4x4 board, placing a knight on alternating squares results in a maximum of 8 knights (on a 4x4 board).","solution":"def max_knights(n): Returns the maximum number of knights that can be placed on an n x n chessboard such that no two knights threaten each other. if n == 2: return 4 elif n % 2 == 0: return n * n // 2 else: return (n // 2) * n + (n // 2) + 1"},{"question":"A company has a unique way of organizing their documents in folders. Each document is assigned a unique integer ID, and each folder can contain documents and/or other sub-folders. The company requires a method to retrieve all document IDs from a top-level folder and its sub-folders, organized in both tree-like structure and flattened form. You are given a class `Folder` with the following specifications: - A private list `docs` that contains the document IDs directly in the folder. - A private list `subs` that contains the sub-folder objects directly in the folder. - A constructor `Folder(List<int> docs, List<Folder> subs)` to initialize the folder with documents and subfolders. - A method `List<int> getAllDocuments()` that returns a list of document IDs from the folder and all its subfolders in a flattened order. - A method `printAllDocuments()` that prints all document IDs in a tree-like structure. For each folder, each document ID should be printed on a new line prefixed with a number of dashes (\'-\') indicating its depth level. Top-level documents have no dashes, documents in subfolders have one dash, documents in sub-subfolders have two dashes, and so on. You need to implement the `Folder` class and both `getAllDocuments` and `printAllDocuments` methods. Input There are no specific input constraints as the class `Folder` will be used within the program. Output The `getAllDocuments` method should return a list of all document IDs in flat order. The `printAllDocuments` method should print document IDs in a tree-like structure as described. Example ```python root = Folder([1, 2], [ Folder([3], [ Folder([4, 5], []) ]), Folder([6, 7], []), ]) print(root.getAllDocuments()) # Output: [1, 2, 3, 4, 5, 6, 7] root.printAllDocuments() # Output: # 1 # 2 # -3 # --4 # --5 # -6 # -7 ``` Note: In the example above, `getAllDocuments()` returns a flattened list of all document IDs, whereas `printAllDocuments()` prints each document ID in a structure indicating the folder depth.","solution":"class Folder: def __init__(self, docs, subs): self._docs = docs self._subs = subs def getAllDocuments(self): result = [] self._collect_docs(self, result) return result def _collect_docs(self, folder, result): result.extend(folder._docs) for sub in folder._subs: self._collect_docs(sub, result) def printAllDocuments(self): self._print_docs(self, 0) def _print_docs(self, folder, depth): prefix = \'-\' * depth for doc in folder._docs: print(f\\"{prefix}{doc}\\") for sub in folder._subs: self._print_docs(sub, depth + 1)"},{"question":"Aisha is a big fan of perfect square numbers. She considers a perfect square any positive integer that can be expressed as the product of an integer with itself. For example, 1, 4, 9, 16 and so on are perfect squares. Aisha got an array of n numbers as a gift for her birthday. She wants to transform this array such that all non-square numbers are replaced with the closest smaller perfect square. For example, the number 10 should be replaced by 9, and the number 8 should be replaced by 4. Your task is to transform the array and print the resulting array. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n positive integers, not exceeding 109 — the array that needs to be transformed. Output Print the transformed array consisting of n numbers. Examples Input 3 10 25 7 Output 9 25 4 Input 5 26 3 20 15 50 Output 25 1 16 9 49 Input 4 1 4 9 16 Output 1 4 9 16","solution":"import math def transform_array(n, arr): Transforms the array such that all non-square numbers are replaced with the closest smaller perfect square. :param n: Number of elements in the array :param arr: List of positive integers :return: Transformed list of integers def closest_smaller_square(num): root = int(math.sqrt(num)) if root * root == num: return num return root * root return [closest_smaller_square(x) for x in arr] if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) result = transform_array(n, arr) print(\\" \\".join(map(str, result)))"},{"question":"A powerful sorcerer has cursed your village! The curse will only be lifted if you solve his puzzle. The puzzle consists of an array of integers representing magical crystals. Each crystal has a power value, either positive or negative, and you must rearrange the crystals in such a way that the total power of the crystals is maximized. The challenge is that you can only swap adjacent crystals. Given the array of crystals\' power values, your task is to determine the maximum possible sum of the array after an allowed number of swaps. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n×(n-1)/2) — the number of crystals and the maximum number of allowed swaps. The second line contains n integers representing the initial power values of the crystals. Output Print a single integer — the maximum possible sum of the array after performing at most k adjacent swaps. Examples Input 5 3 -1 3 -2 4 5 Output 14 Input 4 0 -1 -2 -3 -4 Output -10 Note In the first test case, you can perform the following swaps to maximize the sum: 1. Swap positions 1 and 2: [3, -1, -2, 4, 5] 2. Swap positions 2 and 3: [3, -1, 4, -2, 5] 3. Swap positions 3 and 4: [3, -1, 4, 5, -2] In the second test case, no swaps are allowed, so the sum remains -10.","solution":"def maximize_crystals_sum(n, k, crystals): Returns the maximum possible sum of the array after performing at most k adjacent swaps. crystals.sort(reverse=True) return sum(crystals)"},{"question":"You are given a sequence of balloons located at specific points along a horizontal line (X-axis). Every balloon has a unique integer position on this line. At each position, you can tie a ribbon of a certain length (L) that can burst any balloon within its range. Each balloon can be burst only once. You need to find the minimum number of ribbons required to burst all the balloons. Write a program burst_balloons to determine the minimum number of ribbons needed to burst all the balloons positioned on the X-axis. Input The first line contains an integer N (1 ≤ N ≤ 100000) — the number of balloons. The following N lines each contain an integer xi (1 ≤ xi ≤ 10^9) — the position of each balloon. The last line contains an integer L (1 ≤ L ≤ 10^9) — the length of each ribbon. Each ribbon can burst all balloons within the range [xi, xi+L], including both endpoints. Output Output a single integer — the minimum number of ribbons needed to burst all the balloons. Examples Input 5 1 3 6 9 12 4 Output 3 Input 4 2 3 7 10 3 Output 2","solution":"def burst_balloons(n, positions, l): This function returns the minimum number of ribbons needed to burst all the balloons. Parameters: n (int): The number of balloons. positions (list): The positions of the balloons. l (int): The length of each ribbon. Returns: int: The minimum number of ribbons required. # Sort the positions of the balloons positions.sort() ribbons = 0 i = 0 while i < n: # Place the ribbon at the position of the first unburst balloon ribbons += 1 # Range of current ribbon is from positions[i] to positions[i] + l range_end = positions[i] + l # Move to the first balloon outside the range of the current ribbon while i < n and positions[i] <= range_end: i += 1 return ribbons"},{"question":"* The following story and scenario are fictional and bear no relation to real entities or current events. You are part of a technology company that develops innovative transportation systems. One of the ongoing projects involves designing a new model of autonomous electric cars. These cars operate on a grid-based road system within a smart city. # Problem The goal is to design a system to minimize the energy consumption of these autonomous cars while navigating from a starting point to a destination on the grid. Each cell in the grid represents a road segment with a specified energy cost. The cars are programmed to move only vertically or horizontally to an adjacent cell. Given the grid of energy costs, determine the minimum energy cost required for a car to travel from the top-left corner to the bottom-right corner of the grid. # Input - The size of the grid ( R ) (number of rows) and ( C ) (number of columns). - The energy cost matrix, where ( E_{ij} ) represents the energy cost to traverse the cell at row ( i ) and column ( j ). # Output Output the minimum energy cost required for a car to travel from the top-left corner to the bottom-right corner of the grid. # Constraints * ( R ) and ( C ) are integers; ( 1 leq R, C leq 100 ). * ( E_{ij} ) is an integer; ( 1 leq E_{ij} leq 1000 ). # Example Input 1 ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output 1 ``` 7 ``` Input 2 ``` 2 2 1 2 3 4 ``` Output 2 ``` 7 ``` # Explanation For Input 1, the minimum energy path from the top-left to the bottom-right is `1 → 3 → 1 → 1 → 1` with a total energy cost of 7. For Input 2, the minimum energy path from the top-left to the bottom-right is `1 → 2 → 4` with a total energy cost of 7. Develop a function to solve this problem and minimize the energy consumption for the car\'s journey.","solution":"import heapq def min_energy_cost(grid): Returns the minimum energy cost required for a car to travel from the top-left corner to the bottom-right corner of the grid. rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1)] # Possible moves: down, right # Priority queue to process cells with minimum energy cost first pq = [(grid[0][0], 0, 0)] # (cost, row, column) min_cost = [[float(\'inf\')] * cols for _ in range(rows)] min_cost[0][0] = grid[0][0] while pq: cost, x, y = heapq.heappop(pq) if x == rows - 1 and y == cols - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: new_cost = cost + grid[nx][ny] if new_cost < min_cost[nx][ny]: min_cost[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return float(\'inf\')"},{"question":"Kevin, a computer science enthusiast, has recently learned about prime numbers. He is excited to apply his knowledge in real-world applications. To challenge himself, he decides to write a program to find the largest prime number less than or equal to a given number k. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Help Kevin by writing a function to find the largest prime number less than or equal to k. Input The input consists of a single integer k (2 ≤ k ≤ 10^6). Output Output a single integer - the largest prime number less than or equal to k. Example Input 10 Output 7 Input 29 Output 29 Input 100 Output 97","solution":"def largest_prime_less_than_or_equal_to_k(k): Returns the largest prime number less than or equal to k def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True for num in range(k, 1, -1): if is_prime(num): return num"},{"question":"You are given a list of stock prices for an n-day period. The stock prices are represented by an array of integers, where each element is the price of the stock on a given day. You are allowed to complete one transaction: buying one share of stock on one day and selling it on another day after the purchase. Your goal is to determine the maximum profit you can achieve from this transaction. If no profit can be made, return 0. Write a program that takes an array of integers representing the stock prices over several days and returns the maximum profit that can be achieved from one transaction. The function should compute this in O(n) time complexity. Input The input consists of an integer array `prices` where `prices[i]` is the stock price on the `i`th day. Output The output should be an integer representing the maximum profit achievable. If no profit can be achieved, return 0. Example Input [7, 1, 5, 3, 6, 4] Output 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example Input [7, 6, 4, 3, 1] Output 0 Explanation: In this case, no transactions are done and the max profit = 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from one transaction. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You have been provided with a list of integers representing the daily profits of a small business over a certain period. Create a program that calculates and outputs the maximum profit they could have made by buying and selling on different days. You can only buy and sell once. Input The input is given in the following format: n p1 p2 :: pn The first line gives the number of days n, and the following n lines give the integer pi representing the profit on the ith day. Output Please output the maximum profit they could have made. If no profit can be made, output 0. Example Input 7 7 1 5 3 6 4 2 Output 5","solution":"def max_profit(prices): Returns the maximum profit that could be made by buying and selling once. If no profit can be made, returns 0. :param prices: List[int] - A list of daily profits :return: int - The maximum profit if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # update the minimum price seen so far if price < min_price: min_price = price # calculate the profit with the current price and update max profit if profit is higher current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"You are given an integer array and a target value. Determine if there are any two distinct indices in the array whose values sum up to the target. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N representing the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. The third line contains an integer target denoting the value the sum should match. Output: For each test case, output \\"YES\\" if there exist two distinct indices in the array such that their corresponding values sum up to the target, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^6 ≤ array elements ≤ 10^6 -10^6 ≤ target ≤ 10^6 Example: Input: 2 5 1 2 3 4 5 6 4 0 -1 2 -3 -1 Output: YES YES Explanation: Example case 1: The sum of 2 (index 1) and 4 (index 3) is 6, which matches the target. Thus, the output is \\"YES\\". Example case 2: The sum of 0 (index 0) and -1 (index 1) is -1, and the sum of 2 (index 2) and -3 (index 3) is -1. Thus, the output is \\"YES\\".","solution":"def two_sum_exists(arr, target): Returns \\"YES\\" if there are two distinct indices in the array whose values sum up to the target, otherwise \\"NO\\". complements = {} for num in arr: if target - num in complements: return \\"YES\\" complements[num] = True return \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, arr, target = case result = two_sum_exists(arr, target) results.append(result) return results def parse_input(input_string): data = input_string.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1].split())) target = int(data[index + 2]) test_cases.append((N, arr, target)) index += 3 return test_cases"},{"question":"Problem Statement In a small village, there is a communal river that the villagers use for fishing. The river is divided into N sections, where each section has a certain amount of fishes. The villagers can start fishing from any section and end at any section, but they can only move downstream (i.e., they are not allowed to move back upstream). When a villager starts fishing from section `i` and ends at section `j` (where `i <= j`), they will collect all fishes from sections `i` to `j`. Your task is to determine the maximum number of fishes a villager can collect if they can choose any starting and ending sections, and the sections must be contiguous. Constraints * 1 <= N <= 100000 * 1 <= Fi <= 1000 (where Fi is the number of fishes in the ith section) Input Each data set is input in the following format. N F1 F2 F3 ... FN All inputs are integers. N is the number of sections in the river, and Fi is the number of fishes in the ith section. Output Output the maximum number of fishes that can be collected by choosing any starting and ending sections. Example Input 6 10 5 20 10 15 25 Output 85 Input 5 1 2 3 4 5 Output 15","solution":"def max_fishes(n, fishes): Returns the maximum number of fishes that can be collected by choosing any starting and ending sections. max_fishes = 0 current_fishes = 0 for fish in fishes: current_fishes = max(0, current_fishes + fish) max_fishes = max(max_fishes, current_fishes) return max_fishes # Example usage: # n = 6 # fishes = [10, 5, 20, 10, 15, 25] # print(max_fishes(n, fishes)) # Output: 85"},{"question":"A company is organizing a special event where they will distribute special prize packs to participants. Each prize pack includes a unique combination of items selected from a set of available items. Given the number of available items and the number of items to include in each prize pack, you need to calculate how many different unique prize packs can be created. Note that order does not matter in the prize packs. Input: The first line of input contains an integer T denoting the number of test cases. The next T lines contain two integers each, N (the total number of available items) and K (the number of items to be included in each prize pack). Output: Output the number of unique prize packs for each test case on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ K ≤ N Example Input: 3 5 2 6 3 4 4 Example Output: 10 20 1 Explanation: For the first test case, the number of combinations to choose 2 items from 5 is: 5! / (2! * (5-2)!) = 10 For the second test case, the number of combinations to choose 3 items from 6 is: 6! / (3! * (6-3)!) = 20 For the third test case, there is exactly one way to choose all 4 items from 4: 4! / (4! * (4-4)!) = 1","solution":"from math import comb def number_of_prize_packs(T, test_cases): results = [] for case in test_cases: N, K = case results.append(comb(N, K)) return results"},{"question":"You are given a tree with `n` nodes and `n-1` edges. Each node i in the tree is labeled with an integer value `a_i`. The value of a tree path is defined as the sum of values of all nodes in the path. Your task is to process multiple queries on these nodes. Each query is of the form: \\"What is the maximum value of any path from node u to node v in the current configuration of the tree?\\" Initially, all nodes are assigned the value 0. Additionally, there will be update operations, where the value of a specific node will be changed. After each update query, find the maximum path value for a given set of queries. Input: The first line of the input contains two integers `n` (1 ≤ n ≤ 100000) and `q` (1 ≤ q ≤ 100000) — representing the number of nodes in the tree and the number of queries respectively. The next `n-1` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between node `u` and node `v`. The following `q` lines may contain two types of queries: - `1 u v` - where `1` is the type of query, and `u` and `v` are the nodes between which you need to find the maximum path value. - `2 u x` - where `2` is the type of query, and means to update the value of node `u` to `x` (0 ≤ x ≤ 1000). Output: For each query of the first type, output one integer — representing the maximum value of any path from node `u` to node `v`. Example: Input 6 4 1 2 1 3 2 4 2 5 3 6 1 1 4 2 4 10 1 1 4 1 2 6 Output 0 10 10","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.children = [] class Tree: def __init__(self, n): self.nodes = [TreeNode() for _ in range(n + 1)] self.n = n def add_edge(self, u, v): self.nodes[u].children.append(v) self.nodes[v].children.append(u) def update_value(self, u, x): self.nodes[u].value = x def max_path_value(self, u, v): visited = [False] * (self.n + 1) return self.dfs(u, v, visited) def dfs(self, u, v, visited): if u == v: return self.nodes[u].value visited[u] = True max_value = float(\'-inf\') for child in self.nodes[u].children: if not visited[child]: max_value = max(max_value, self.dfs(child, v, visited)) return self.nodes[u].value + (max_value if max_value != float(\'-inf\') else 0) def tree_operations(n, edges, queries): tree = Tree(n) # Add edges for u, v in edges: tree.add_edge(u, v) results = [] for query in queries: if query[0] == 1: _, u, v = query results.append(tree.max_path_value(u, v)) elif query[0] == 2: _, u, x = query tree.update_value(u, x) return results"},{"question":"Takahashi loves creating strings from a given set of characters. He learned about \\"palindrome\\" strings and found them fascinating. As a challenge, he decided to create his own problem around this concept. * You have a given string S consisting of lowercase English letters. * Your task is to determine the minimum number of characters that need to be inserted into the string S to make it a palindrome. For example, consider the string `abca`. By inserting one character, you can make it a palindrome (`abcba`). # Constraints * The length of the given string S is 1 ≤ |S| ≤ 2000. * All characters in S are lowercase English letters. # Input The input consists of a single string S. # Output Output a single integer representing the minimum number of characters that need to be inserted to make the string S a palindrome. # Examples Example 1 Input: ``` aebcbda ``` Output: ``` 2 ``` Explanation: By inserting two characters, we can create the palindrome \\"aebcbbea\\" (insert \'b\' at index 2 and \'e\' at index 6). Example 2 Input: ``` geeks ``` Output: ``` 3 ``` Explanation: By inserting three characters, we can create the palindrome \\"geeksskeeg\\" or \\"gkeekeg\\". Example 3 Input: ``` abc ``` Output: ``` 2 ``` Explanation: By inserting two characters, we can create the palindrome \\"abcba\\". Your task is to implement a function that takes the given string S as input and returns the minimum number of insertions needed to make S a palindrome.","solution":"def min_insertions_to_make_palindrome(S): Returns the minimum number of characters that need to be inserted into the string S to make it a palindrome. n = len(S) # Create an empty 2D table for storing results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table. The outer loop considers substrings of different lengths for length in range(2, n + 1): for left in range(0, n - length + 1): right = left + length - 1 if S[left] == S[right]: dp[left][right] = dp[left + 1][right - 1] else: dp[left][right] = min(dp[left + 1][right], dp[left][right - 1]) + 1 # The result is the minimum number of insertions required to transform S into a palindrome return dp[0][n - 1]"},{"question":"You are given an integer array `a` of length `n`. You need to form a new array `b` of the same length such that every element of `b` is equal to the sum of all unique elements of `a` except the element at the same index in the original array. If there are multiple possible answers, you can output any of them. If it is not possible to form such an array `b`, print -1. Input The first line of input contains an integer `T`, denoting the number of test cases. Then `T` test cases follow. Each test case consists of two lines. The first line of each test case contains a single integer `n`, denoting the number of elements in the array `a`. The second line contains `n` integers, representing the elements of the array `a`. Output For each test case, print a single line containing the elements of array `b` or -1 if it is not possible to form such an array. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 1 ≤ a[i] ≤ 10^9 Example Input: 3 3 1 2 3 4 1 2 2 3 3 4 4 4 Output: 5 4 3 5 4 4 3 -1 Explanation Example case 1. For the first element of `b`, we sum 2 and 3 to get 5. For the second element, we sum 1 and 3 to get 4. For the third element, we sum 1 and 2 to get 3. Hence the output is [5, 4, 3]. Example case 2. For the first element of `b`, we sum 2 and 3 (unique values without the 1) to get 5. For the second element, we sum 1, 2, and 3 (unique values without the 2) to get 4. For the third element, we sum 1, 2, and 3. Hence possible output can be [5, 4, 4, 3]. Example case 3. All elements are the same, hence it is not possible to create sum of unique elements excluding the current element. Hence the output is -1.","solution":"def form_b_arrays(T, test_cases): results = [] for i in range(T): n, a = test_cases[i] unique_sum = sum(set(a)) b = [] for j in range(n): if unique_sum - a[j] == unique_sum: b.append(unique_sum - a[j]) else: b.append(unique_sum - a[j]) if all(x == b[0] for x in b): results.append([-1]) else: results.append(b) return results # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) a = list(map(int, data[index + 1: index + 1 + n])) test_cases.append((n, a)) index += (n + 1) return T, test_cases def main(): T, test_cases = read_input() results = form_b_arrays(T, test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Given a list of n integers, find the length of the longest subarray that does not contain any repeated number. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Output a single integer, the length of the longest subarray without repeated elements. Examples Input 5 1 2 1 3 4 Output 4 Input 6 1 2 3 4 5 6 Output 6 Note In the first example, the longest subarray without repeated elements is [2, 1, 3, 4], which has a length of 4. In the second example, the whole array itself has no repeated elements, hence the output is 6.","solution":"def longest_unique_subarray_length(n, arr): Given a list of n integers, find the length of the longest subarray that does not contain any repeated number. last_seen = {} max_length = 0 start = 0 for end in range(n): if arr[end] in last_seen and last_seen[arr[end]] >= start: start = last_seen[arr[end]] + 1 last_seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a forest there are n different types of trees, labeled from 1 to n. Each tree type has a fixed height, and exactly one tree of each type exists in the forest. You want to trim the forest such that only trees of certain heights remain in a contiguous segment from any given range [L, R] (1 ≤ L < R ≤ n). For a given query, you are asked to find the maximum height of trees within a given range [L, R]. You are allowed to preprocess the heights of trees such that multiple range queries can be answered efficiently. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of different types of trees in the forest. The second line contains n integers — the heights of the trees from 1 to n. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains two integers L and R (1 ≤ L ≤ R ≤ n) — the range for which you need to determine the maximum height. Output For each query, print a single integer — the maximum height of the trees in the range [L, R]. Example Input 5 2 8 3 7 4 3 1 3 2 4 1 5 Output 8 8 8 Explanation In the example, heights are [2, 8, 3, 7, 4]. For the first query, the range [1, 3] includes heights [2, 8, 3], and the maximum height is 8. For the second query, the range [2, 4] includes heights [8, 3, 7], and the maximum height is 8. For the third query, the range [1, 5] includes all heights [2, 8, 3, 7, 4], and the maximum height is again 8.","solution":"def preprocess_tree_heights(heights): Preprocess the tree heights to allow for efficient range maximum queries. n = len(heights) log_n = n.bit_length() dp = [[0] * log_n for _ in range(n)] for i in range(n): dp[i][0] = heights[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: dp[i][j] = max(dp[i][j-1], dp[i + (1 << (j-1))][j-1]) i += 1 j += 1 return dp def query_max_in_range(dp, L, R): Answer the range maximum query using the preprocessed data. L -= 1 R -= 1 j = (R - L + 1).bit_length() - 1 return max(dp[L][j], dp[R - (1 << j) + 1][j]) def solve(n, heights, queries): dp = preprocess_tree_heights(heights) results = [] for L, R in queries: results.append(query_max_in_range(dp, L, R)) return results"},{"question":"Create a function that takes a string as input and returns the string with its characters sorted in non-decreasing order. The function should be case-sensitive, meaning lowercase and uppercase letters will be treated as distinct characters with regards to ordering. Constraints * The input string will only contain upper and lowercase English letters (`A` - `Z`, `a` - `z`) and its length will be between 1 and 1000, inclusive. Input A single string `s` given as input in the following format: s Output The function should return the sorted string. Examples Input dcba Output abcd Input exAmple Output Aeelmpx","solution":"def sort_string(s): Returns a string with its characters sorted in non-decreasing order. The function is case-sensitive. return \'\'.join(sorted(s))"},{"question":"You are given a list of N integers. Your task is to transform this list in such a way that all negative numbers are moved to the beginning of the list and all non-negative numbers are moved to the end of the list, without changing the relative order of the negative numbers among themselves or the non-negative numbers among themselves. Input: - The first line contains an integer N, the number of integers. - The second line contains N space-separated integers. Output: - Output a single line containing the transformed list of N integers, with all negative numbers at the beginning followed by all non-negative numbers. Constraints: - 1 ≤ N ≤ 100000 - -100000 ≤ Each integer ≤ 100000 Sample Input: 7 -1 3 2 -7 9 -4 5 Sample Output: -1 -7 -4 3 2 9 5 Explanation: The negative numbers are -1, -7, -4 and they are moved to the beginning of the list in the order they appeared. The non-negative numbers are 3, 2, 9, 5 and they follow the negative numbers in the original order they appeared.","solution":"def transform_list(arr): Transforms the given list such that all negative numbers are moved to the beginning and all non-negative numbers are moved to the end, maintaining their relative order. negative = [x for x in arr if x < 0] non_negative = [x for x in arr if x >= 0] return negative + non_negative # Example usage: # arr = [-1, 3, 2, -7, 9, -4, 5] # print(transform_list(arr)) # Output: [-1, -7, -4, 3, 2, 9, 5]"},{"question":"Polycarp is organizing a programming contest. He has decided to distribute some problems among the contestants. Each problem has a difficulty level, and each contestant has a problem-solving capacity. Suppose there are `n` contestants and `m` problems. Each contestant `i` can solve problems with a total difficulty level of `c_i`, and each problem `j` has a difficulty level of `d_j`. Polycarp wants to distribute the problems such that each problem is solved by exactly one contestant, and the total difficulty level of the problems assigned to a contestant does not exceed their capacity. Determine if it is possible to distribute all problems among the contestants under these conditions. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of contestants and problems, respectively. The second line contains `n` integers `c_1, c_2, ..., c_n` (1 ≤ c_i ≤ 10^9) — the capacity of each contestant. The third line contains `m` integers `d_1, d_2, ..., d_m` (1 ≤ d_j ≤ 10^9) — the difficulty level of each problem. Output Print \\"YES\\" if it is possible to distribute the problems as described above, otherwise print \\"NO\\". Examples Input 3 3 6 8 10 4 5 7 Output YES Input 2 4 5 10 3 3 5 8 Output NO Note In the first example, we can distribute the problems as follows: - Assign problem with difficulty 4 to the contestant with capacity 6. - Assign problem with difficulty 5 to the contestant with capacity 8. - Assign problem with difficulty 7 to the contestant with capacity 10. In the second example, it is not possible to distribute all problems among the contestants as at least one of them will have their capacity exceeded.","solution":"def can_distribute_problems(n, m, capacities, difficulties): Determines if it\'s possible to distribute all problems among contestants. Args: n : int : Number of contestants m : int : Number of problems capacities : List[int] : Capacities of contestants difficulties : List[int] : Difficulty levels of problems Returns: str: \\"YES\\" if all problems can be distributed as per the conditions, otherwise \\"NO\\" if m > n: return \\"NO\\" capacities.sort() difficulties.sort() for i in range(m): if difficulties[i] > capacities[i]: return \\"NO\\" return \\"YES\\""},{"question":"In Landonia, a distant mythical place, people love constructing towers out of bricks. Each tower is made up of a stack of bricks, placed one on top of another. Every brick in a tower has a distinct weight, and a tower is considered stable if and only if every brick in the tower has a different weight from the brick directly below it and directly above it. When constructing a tower, the Landonians are restricted to using only a certain number of bricks from a given set of bricks, each with a specific weight. The challenge is to determine the maximum possible height of the stable tower that can be built using the given bricks. The height of a tower is defined as the number of bricks it contains. Write a program that calculates the maximum height of a stable tower that can be constructed with the bricks provided. Input The format of the input is as follows: > N > W0 > ... > WN-1 The first line contains an integer N (1 ≤ N ≤ 105), which is the number of bricks available. Each of the following N lines contains an integer Wi (1 ≤ Wi ≤ 109) describing the weight of the i-th brick. Output Output the maximum height of the stable tower that can be constructed. Examples Input 7 4 3 3 3 2 2 1 Output 4 Input 5 5 5 5 5 5 Output 1 Input 6 1 2 3 4 5 6 Output 6","solution":"def max_stable_tower_height(brick_weights): This function takes a list of brick weights and returns the maximum height of the stable tower. unique_weights = set(brick_weights) # Use a set to filter out duplicate weights return len(unique_weights)"},{"question":"You are given a string consisting of lowercase alphabets. Your task is to determine the minimum number of characters to delete from the string so that no two adjacent characters are the same. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains a string s of length n. Output Print a single integer — the minimum number of characters you need to delete from the string so that no two adjacent characters are the same. Example Input 7 aaabccddd Output 5","solution":"def min_deletions_to_alternate(s): Returns the minimum number of characters to delete from string \'s\' so that no two adjacent characters are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions def process_input(n, s): return min_deletions_to_alternate(s)"},{"question":"Problem Statement You are given a list of integers which represent a sequence of daily stock prices. A trader can make at most one transaction per day, where a transaction is defined as buying a stock on a given day and selling it on a future day. The goal is to maximize the profit that can be made by the trader over a series of days. Write a function that computes the maximum possible profit given the list of stock prices for consecutive days. Input - The first line contains an integer T denoting the number of test cases. - Each of the next T lines contains a sequence of integers separated by spaces, representing the daily stock prices. Output - For each test case, output a single integer which is the maximum profit that can be achieved. Constraints - 1 ≤ T ≤ 1000 - 1 ≤ length of each sequence ≤ 1000 - 0 ≤ stock price ≤ 10000 Example Input: 2 1 2 3 4 5 7 1 5 3 6 4 Output: 4 5 Explanation: In the first test case, the trader can buy on day 1 and sell on day 5 for a profit of 4 (5 - 1). In the second test case, the trader can buy on day 2 and sell on day 5 for a profit of 5 (6 - 1).","solution":"def max_profit(stock_prices): Calculates the maximum profit that can be made from a list of daily stock prices. Parameters: stock_prices (list of int): List of stock prices. Returns: int: The maximum profit that can be achieved. if not stock_prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(test_cases): Processes multiple test cases and computes the maximum profit for each. Parameters: test_cases (list of list of int): Each list within the list represents daily stock prices for a test case. Returns: list of int: List of maximum profits for each test case. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array that add up to the given target sum and, if so, return those elements. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contain: - The first integer n (2 ≤ n ≤ 10^5) — the size of the array. - The second integer k (1 ≤ k ≤ 10^9) — the target sum. - The following n integers represent the array elements (1 ≤ ai ≤ 10^9). Output For each test case, output two integers that represent the elements which add up to the target sum k, separated by a space. If there are multiple pairs, you can return any one of them. If no such pair exists, output -1. Example Input 3 5 9 2 7 11 15 3 4 10 1 2 3 7 6 13 1 2 3 4 5 6 Output 2 7 3 7 -1 Note In the first example, the elements 2 and 7 add up to 9. In the second example, the elements 3 and 7 add up to 10. In the third example, no two distinct elements add up to 13.","solution":"def find_pair_with_sum(arr, target): Function to find two distinct elements in the array that add up to the target sum. # Using a set to store the complements complements = set() for number in arr: if (target - number) in complements: return [target - number, number] complements.add(number) return -1 def solve(test_cases): Function to handle multiple test cases. results = [] for case in test_cases: n, k, array = case result = find_pair_with_sum(array, k) if result == -1: results.append(str(result)) else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"You are tasked with developing a conference scheduling system. There are multiple presentations scheduled for the conference. Each presentation has a start time and an end time. Your goal is to determine the maximum number of non-overlapping presentations that can be attended. Input The first line of input contains an integer, t, representing the number of test cases. Each test case begins with an integer n, the number of presentations. The next n lines contain two space-separated integers, start and end, representing the start time and end time of each presentation. Output For each test case, output a single integer, the maximum number of non-overlapping presentations that can be attended. Constraints 1 <= t <= 100 1 <= n <= 1000 0 <= start < end <= 10000 Example Input: 2 3 1 2 2 3 3 4 4 1 3 2 4 3 5 4 6 Output: 3 2","solution":"def max_non_overlapping_presentations(t, test_cases): results = [] for i in range(t): n, presentations = test_cases[i] presentations.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in presentations: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Given a rectangular grid of size m x n, create a program that fills the grid with non-decreasing integers starting from the top-left corner (1, 2, 3, ...) to the bottom-right corner in a zigzag manner. The zigzag pattern should alternately sweep from left to right and from right to left across each row as it progresses from top to bottom. For example, a 3x4 grid would be filled as follows: ``` 1 2 3 4 8 7 6 5 9 10 11 12 ``` # Input The input consists of one line with two integers m and n (1 ≤ m, n ≤ 100). # Output Output the m x n grid filled with integers in the described zigzag pattern. Each row of the grid should be printed on a new line with integers separated by a single space. # Example Input ``` 3 4 ``` Output ``` 1 2 3 4 8 7 6 5 9 10 11 12 ```","solution":"def fill_zigzag_grid(m, n): Generates a m x n grid filled with integers in a zigzag pattern. Parameters: m (int): Number of rows n (int): Number of columns Returns: List[List[int]]: Zigzag filled grid grid = [[0] * n for _ in range(m)] num = 1 for i in range(m): if i % 2 == 0: for j in range(n): grid[i][j] = num num += 1 else: for j in range(n - 1, -1, -1): grid[i][j] = num num += 1 return grid # Function to print the grid (used for displaying the solution) def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row)))"},{"question":"Subarray Sum Given an array of integers, determine the length of the smallest subarray whose sum is greater than or equal to a given value `S`. If no such subarray exists, return `0`. Input N S a_1 a_2 ... a_N Output Output the smallest length of such subarray, or `0` if no such subarray exists. Constraint * 1 leq N leq 10 ^ 5 * 1 leq a_i leq 10 ^ 9 * 1 leq S leq 10 ^ 9 Input example 8 15 1 2 3 4 5 6 7 8 Output example 2 Explanation: In the given array, the smallest subarray with a sum greater than or equal to 15 is [7, 8]. Example Input 8 15 1 2 3 4 5 6 7 8 Output 2","solution":"def smallest_subarray_length_with_sum_at_least_s(arr, S): Returns the length of the smallest subarray whose sum is greater than or equal to S. If no such subarray exists, return 0. import sys n = len(arr) min_length = sys.maxsize current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != sys.maxsize else 0"},{"question":"Your task is to manipulate a list based on specific operations. Write a program that reads a list of integers and a sequence of operations, and prints the modified list after applying all operations. Constraints: * 1 ≤ length of the list ≤ 100 * Each integer in the input list will be in the range -100 to 100 * The operations can be \'add x y\' meaning add y to the x-th (0-based index) element, \'multiply x y\' meaning multiply the x-th element by y, and \'set x y\' meaning set the x-th element to y. * The number of operations will be between 1 and 100. Input: The first line contains the list of integers separated by space. The second line contains the number of operations to be performed. The next lines contain the operations, one per line. Output: Print the modified list of integers, with a single space character separating adjacent elements. Example: Input: 3 5 -2 7 4 3 add 2 3 multiply 1 4 set 4 10 Output: 3 20 1 7 10","solution":"def manipulate_list(int_list, operations): Apply a sequence of operations to a list of integers. Parameters: - int_list: List[int], the list of integers. - operations: List[str], the list of operations in the format described. Returns: - List[int], the modified list of integers. for operation in operations: operation_split = operation.split() op, x, y = operation_split[0], int(operation_split[1]), int(operation_split[2]) if op == \'add\': int_list[x] += y elif op == \'multiply\': int_list[x] *= y elif op == \'set\': int_list[x] = y return int_list def process_input(input_string): Processes the input string and calls the manipulate_list function. Parameters: - input_string: str, multiline string with the input in the described format. Returns: - List[int], the manipulated list of integers. input_lines = input_string.strip().split(\'n\') int_list = list(map(int, input_lines[0].split())) num_operations = int(input_lines[1]) operations = input_lines[2:2 + num_operations] result = manipulate_list(int_list, operations) return result"},{"question":"Julia is a software engineer working on a database management system. She is optimizing data retrieval processes. The system contains `m` tables, and each table contains `k` rows of data indexed from 1 to `k`. Each row has a unique integer ID between 1 and `nk`. Julia discovered that certain queries can be accelerated by creating a new data structure that maps the ID to the corresponding table and row number. Implement a function that constructs this mapping. The data structure should have the following methods: - `construct_mapping(m, k)`: Constructs and returns a list of tuples where each tuple contains three elements: the table number (1-indexed), the row number (1-indexed), and the corresponding unique ID. - `find_id(table_number, row_number)`: Given a table number and a row number, returns the corresponding unique ID. Julia provided an example for clarification. If there are 3 tables and each table has 4 rows, the unique IDs should be assigned as follows: ``` Table 1: IDs 1-4 Table 2: IDs 5-8 Table 3: IDs 9-12 ``` # Input - The function `construct_mapping` takes two integers `m` (number of tables, 1 ≤ m ≤ 1000) and `k` (number of rows per table, 1 ≤ k ≤ 1000). - The function `find_id` takes two integers `table_number` (1 ≤ table_number ≤ m) and `row_number` (1 ≤ row_number ≤ k). # Output - The function `construct_mapping` returns a list of tuples. - The function `find_id` returns the unique ID for the specified table number and row number. # Examples Input ``` construct_mapping(2, 3) find_id(1, 1) find_id(2, 3) ``` Output ``` construct_mapping(2, 3) => [(1, 1, 1), (1, 2, 2), (1, 3, 3), (2, 1, 4), (2, 2, 5), (2, 3, 6)] find_id(1, 1) => 1 find_id(2, 3) => 6 ``` Note In the first example, the function `construct_mapping(2, 3)` returns a list of tuples that maps table 1 and table 2 rows to their respective IDs: [(1, 1, 1), (1, 2, 2), (1, 3, 3), (2, 1, 4), (2, 2, 5), (2, 3, 6)]. The function `find_id(1, 1)` returns the unique ID 1 for table 1, row 1. Similarly, `find_id(2, 3)` returns the unique ID 6 for table 2, row 3.","solution":"class DataRetrievalSystem: def __init__(self): self.mapping = [] def construct_mapping(self, m, k): Constructs and returns a list of tuples where each tuple contains three elements: the table number (1-indexed), the row number (1-indexed), and the corresponding unique ID. self.mapping = [] unique_id = 1 for table in range(1, m + 1): for row in range(1, k + 1): self.mapping.append((table, row, unique_id)) unique_id += 1 return self.mapping def find_id(self, table_number, row_number): Given a table number and a row number, returns the corresponding unique ID. m = self.mapping for table, row, unique_id in m: if table == table_number and row == row_number: return unique_id return None # Indicates that the table_number and row_number are invalid"},{"question":"You are given an nxn grid where some cells have rotting oranges. Each cell contains one of three possible integers: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Determine the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1. Write a function `orangesRotting` that accepts a 2D grid as input and returns an integer. Input - A list of lists where each list represents a row in the grid. Output - An integer indicating the minimum number of minutes until all fresh oranges are rotten, or -1 if impossible. Example Input [[2,1,1], [1,1,0], [0,1,1]] Output 4 Input [[2,1,1], [0,1,1], [1,0,1]] Output -1 Input [[0,2]] Output 0 Notes - All oranges adjacent to the grid boundary are assumed to be empty if they fall outside the grid. - The order in which rottenness spreads does not matter as long as all fresh oranges that can be rotten within the given rules are handled in the correct sequence. - The output -1 is valid if there are fresh oranges that cannot ever become rotten. Here is a function signature to help you get started: `def orangesRotting(grid: List[List[int]]) -> int:`","solution":"from collections import deque from typing import List def orangesRotting(grid: List[List[int]]) -> int: if not grid: return -1 rows, cols = len(grid), len(grid[0]) queue = deque() fresh_oranges = 0 # Initialization for r in range(rows): for c in range(cols): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: fresh_oranges += 1 if fresh_oranges == 0: return 0 # BFS minutes = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue and fresh_oranges > 0: minutes += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: grid[nx][ny] = 2 fresh_oranges -= 1 queue.append((nx, ny)) return minutes if fresh_oranges == 0 else -1"},{"question":"Given an n x n grid of cells, some cells are blocked, and others are free. You are initially positioned at the top-left corner of the grid and you want to reach the bottom-right corner. You can only move right or down at any point in time. Write a function to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the size of the grid. The next n lines contain n integers each (either 0 or 1), where 0 represents a free cell and 1 represents a blocked cell. Output Print the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no such path, print 0. Examples Input 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def unique_paths(n, grid): if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are helping a school to schedule their final exams. Each exam has a fixed duration, and any two exams cannot overlap. The school also has a limited number of classrooms available for conducting these exams. Given the start time and end time of each exam along with the number of available classrooms, determine if the exams can be scheduled without any overlaps using the available classrooms. Print `YES` if it is possible to schedule all exams without conflicts, and print `NO` otherwise. Constraints * 1 leq n leq 100 * 0 leq start_i < end_i leq 100000 (for all exams i) * 1 leq classrooms leq 50 Input Input is given from Standard Input in the following format: n classrooms start_1 end_1 start_2 end_2 ... start_n end_n Output Print `YES` if all exams can be scheduled without conflicts, and print `NO` otherwise. Examples Input 3 2 1 3 2 4 3 5 Output YES Input 3 1 1 3 2 4 3 5 Output NO","solution":"def can_schedule_exams(n, classrooms, exams): Determines if the exams can be scheduled without conflicts given the number of classrooms available. Args: n (int): Number of exams classrooms (int): Number of available classrooms exams (list of tuples): List containing start and end times of the exams Returns: str: \\"YES\\" if all exams can be scheduled without conflicts, otherwise \\"NO\\" events = [] for start, end in exams: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() # Sorting by time current_exams = 0 for event in events: if event[1] == \'start\': current_exams += 1 else: current_exams -= 1 if current_exams > classrooms: return \\"NO\\" return \\"YES\\" # You can use this function to read the input and print the output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) classrooms = int(data[1]) exams = [(int(data[i]), int(data[i + 1])) for i in range(2, 2 + 2 * n, 2)] result = can_schedule_exams(n, classrooms, exams) print(result)"},{"question":"POINTS - 30 Given two arrays of integers A and B, determine if they are permutations of each other. Two arrays are permutations of each other if one array\'s elements can be rearranged to match the other array\'s elements exactly. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line of each test case contains an integer n, the length of arrays A and B. - The second line contains n space-separated integers, the elements of array A. - The third line contains n space-separated integers, the elements of array B. Output For each test case, output \\"YES\\" if arrays A and B are permutations of each other, and \\"NO\\" otherwise. Constraints 1<=T<=50 1<=n<=1000 1<=A[i], B[i]<=10^6 Example Input: 3 5 1 2 3 4 5 3 4 5 1 2 4 1 1 2 2 2 2 1 1 3 1 2 3 1 2 2 Output: YES YES NO","solution":"def are_permutations(A, B): Returns whether two arrays A and B are permutations of each other. if sorted(A) == sorted(B): return \\"YES\\" else: return \\"NO\\" def handle_multiple_test_cases(test_cases): Takes multiple test cases as input and returns a list of results for each test case. results = [] for n, A, B in test_cases: results.append(are_permutations(A, B)) return results"},{"question":"Farmer John has a farm consisting of `n` fields connected by `n-1` bidirectional roads in such a way that there is exactly one path between any two fields. Each field is identified by a unique number from 1 to n. Each road has a certain length. Farmer John\'s task is to transport hay from a chosen source field to a chosen destination field. Transportation requires exactly one trip, during which hay can be dumped on the ground on any field to prevent spores from certain molds from spreading through the hay. Given the lengths of the roads, you need to calculate the maximum distance Farmer John can transport hay from one field to another. Input The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of fields. Each of the next `n-1` lines contains three integers `u`, `v`, and `length` (1 ≤ length ≤ 10^9), representing a road of the given length between fields `u` and `v`. Output Output a single integer — the maximum distance Farmer John can transport hay. Examples Input 5 1 2 5 2 3 4 3 4 3 3 5 2 Output 12 Input 3 1 2 7 2 3 4 Output 11 Note In the first example test case, the optimal path is from field 1 to field 5. The path and its lengths are as follows: * Field 1 to Field 2: 5 * Field 2 to Field 3: 4 * Field 3 to Field 5: 2 Thus, the total length is 5 + 4 + 2 = 11. In the second example test case, the optimal path is from field 1 to field 3. The path and its lengths are as follows: * Field 1 to Field 2: 7 * Field 2 to Field 3: 4 Thus, the total length is 7 + 4 = 11.","solution":"import sys from collections import defaultdict, deque def max_transport_distance(n, roads): if n == 2: return roads[0][2] graph = defaultdict(list) for u, v, length in roads: graph[u].append((v, length)) graph[v].append((u, length)) def bfs(start): visited = [-1] * (n + 1) q = deque([(start, 0)]) visited[start] = 0 furthest_node, max_dist = start, 0 while q: node, dist = q.popleft() if dist > max_dist: furthest_node, max_dist = node, dist for neighbor, length in graph[node]: if visited[neighbor] == -1: visited[neighbor] = dist + length q.append((neighbor, dist + length)) return furthest_node, max_dist first_node, _ = bfs(1) _, max_distance = bfs(first_node) return max_distance"},{"question":"In a faraway land, there is a kingdom that consists of several cities connected by roads. Each road has a toll fee for passing through it. The kingdom\'s queen needs to travel from one city to another and wants to know the minimum cost to do so. You are given the number of cities n and the number of roads m in the kingdom. Each road is described by three integers: u (the starting city), v (the ending city), and w (the toll fee). Assume that the cities are numbered from 1 to n. Write a program to determine the minimum cost for the queen to travel from city 1 to city n. Input The first line contains two integers n and m (2 ≤ n ≤ 10,000, 1 ≤ m ≤ 100,000) — the number of cities and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10,000) — describing a road that connects city u and city v with a toll fee w. Output Print a single integer — the minimum cost for the queen to travel from city 1 to city n. If there is no path from city 1 to city n, print -1. Examples Input 4 4 1 2 3 2 3 4 3 4 2 1 3 7 Output 9 Input 3 2 1 2 5 2 3 10 Output 15 Input 4 2 1 2 5 3 4 10 Output -1 Note In the first example, the queen can travel from city 1 to city 4 via the path 1 -> 2 -> 3 -> 4 with a total cost of 3 + 4 + 2 = 9. In the second example, the queen can travel from city 1 to city 3 via the path 1 -> 2 -> 3 with a total cost of 5 + 10 = 15. In the third example, there is no path from city 1 to city 4, so the output is -1.","solution":"import heapq def find_min_cost(n, m, roads): Determines the minimum cost for the queen to travel from city 1 to city n. :param n: Number of cities :param m: Number of roads :param roads: List of roads, where each road is described by three integers u, v, and w :return: Minimum cost to travel from city 1 to city n, or -1 if no such path exists # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path pq = [(0, 1)] # (cost, city) dist = [float(\'inf\')] * (n + 1) dist[1] = 0 while pq: curr_cost, u = heapq.heappop(pq) if u == n: return curr_cost for v, w in graph[u]: if curr_cost + w < dist[v]: dist[v] = curr_cost + w heapq.heappush(pq, (curr_cost + w, v)) return -1 if dist[n] == float(\'inf\') else dist[n]"},{"question":"In a given string `s` consisting of lowercase English letters, you are permitted to perform multiple operations. In each operation, you can remove a substring \\"abc\\" from the string. Your task is to determine if it\'s possible to transform the given string into an empty string by repeatedly performing the allowed operation. Input The first line contains a single integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. The subsequent lines describe the test cases. Each test case consists of a single line that contains a non-empty string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. The total length of all strings in all test cases does not exceed 10^6. Output For each test case, print \\"YES\\" if it is possible to transform the given string into an empty string by repeatedly removing the substring \\"abc\\"; otherwise, print \\"NO\\". Example Input: 3 aabcbc abcabc aabbcc Output: YES YES NO Note In the first test case, the string \\"aabcbc\\" can be transformed into an empty string as follows: - Remove the substring \\"abc\\" to get \\"aabc\\". - Remove the substring \\"abc\\" to get \\"a\\". - It\'s not possible to obtain an empty string in this case. In the second test case, the string \\"abcabc\\" can be transformed into an empty string by directly removing \\"abc\\" twice. In the third test case, the string \\"aabbcc\\" does not contain the substring \\"abc\\", so it\'s not possible to transform it into an empty string.","solution":"def can_transform_to_empty_str(t, test_cases): results = [] for s in test_cases: stack = [] for char in s: stack.append(char) if \'\'.join(stack[-3:]) == \\"abc\\": stack = stack[:-3] if not stack: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Berland\'s new transportation system is in development and city planners have identified the locations for bus stops. The planners need your help to compute the optimal number of bus stops needed to satisfy the commuting demands of the city\'s residents. Each resident specifies a range of locations they are willing to walk to reach a bus stop. You need to determine the minimum set of bus stops required so that each resident can reach at least one bus stop within their specified range. Input The first line contains an integer n (1 ≤ n ≤ 2000) — the number of residents. Each of the next n lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^6) — the range of acceptable bus stop locations for the i-th resident. Output Print a single integer — the minimum number of bus stops required to ensure each resident can reach at least one bus stop within their specified range. Examples Input 3 1 5 2 6 5 10 Output 1 Input 4 1 2 3 4 5 6 7 8 Output 4 Input 2 1 2 2 3 Output 1 Note In the first sample, one bus stop at location 5 would cover all the ranges [1, 5], [2, 6], and [5, 10]. In the second sample, placing bus stops at locations 1, 3, 5, and 7 will cover the ranges [1, 2], [3, 4], [5, 6], and [7, 8] respectively. In the third sample, one bus stop at location 2 would satisfy the ranges [1, 2] and [2, 3].","solution":"def min_bus_stops(n, ranges): Determines the minimum number of bus stops required to ensure each resident can reach at least one bus stop within their specified range. :param n: Number of residents :param ranges: List of tuples, where each tuple contains two integers (l_i, r_i) :return: Minimum number of bus stops required # Sort the ranges based on the right endpoint ranges.sort(key=lambda x: x[1]) # Counter for the minimal number of bus stops bus_stops = 0 # The position of the last bus stop placed last_stop = -1 for (l, r) in ranges: if last_stop < l: # If the last bus stop cannot cover this range bus_stops += 1 last_stop = r # Place a new bus stop at the farthest possible point in this range return bus_stops"},{"question":"# Problem Statement Given a sequence of integers, write a program to determine the length of the longest subsequence that forms a valid palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input: The first line of input contains an integer `t`, denoting the number of test cases. For each test case, the next line contains the sequence of integers separated by spaces. # Output: For each test case, output the length of the longest palindromic subsequence. # Constraints: - 1 ≤ t ≤ 100 - 1 ≤ Length of sequence ≤ 1000 - -10^5 ≤ Element of sequence ≤ 10^5 # Sample Input: ``` 2 1 2 3 4 3 2 1 5 1 2 3 4 5 4 3 2 1 ``` # Sample Output: ``` 7 9 ```","solution":"def longest_palindromic_subsequence(seq): Given a sequence of integers, this function returns the length of the longest palindromic subsequence. n = len(seq) dp = [[0] * n for _ in range(n)] # Base case: single letter palindromes for i in range(n): dp[i][i] = 1 # Build the table for cl in range(2, n + 1): # cl is the length of the substring for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: dp[i][j] = 2 elif seq[i] == seq[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def process_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) results = [] for i in range(1, t + 1): seq = list(map(int, lines[i].split())) result = longest_palindromic_subsequence(seq) results.append(result) return results"},{"question":"Petya has recently learned about the concept of prime numbers and their properties. He is fascinated with the idea of using prime numbers to generate unique sequences. He wants to create a sequence of length `n` where each element is a unique prime number and they are sorted in increasing order. Given the integer `n`, help Petya generate such a sequence. Input The first line contains a single integer n (1 ≤ n ≤ 105). Output Output `n` space-separated integers, the first `n` prime numbers in increasing order. Examples Input 1 Output 2 Input 5 Output 2 3 5 7 11 Input 10 Output 2 3 5 7 11 13 17 19 23 29 Note If n=1, the sequence would be {2}, which is the first prime number. For n=5, the sequence is {2, 3, 5, 7, 11}, which are the first five prime numbers. Your task is to generate and print the first `n` prime numbers for any given `n`.","solution":"def first_n_primes(n): Returns the first n prime numbers in increasing order. if n < 1: return [] primes = [] num = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > num: break if num % prime == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes"},{"question":"In a university admission process, students are required to go through multiple stages of assessments. After each stage, students either pass and move to the next stage or fail and are eliminated from the process. Each student has a unique student ID, and the stages must be completed in a specific order. Given the list of students with their results at each stage, create a function that simulates the admission process. Your task is to determine the remaining students who successfully pass all the stages. Input: - The first line contains an integer `N` denoting the number of students. - The second line contains an integer `M` denoting the number of stages. - The next `N` lines each consist of an integer (student ID) and a string of length `M` representing the result of the student at each stage (\'P\' for pass, \'F\' for fail). Output: - Print the list of student IDs who successfully passed all stages, in ascending order. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 10 - 1 ≤ student ID ≤ 1000 **SAMPLE INPUT** 5 3 101 PPF 102 PPP 103 PFP 104 FPP 105 PPP **SAMPLE OUTPUT** 102 105 **Explanation**: There are 5 students and 3 stages. Student with ID 101 fails in the 3rd stage, student 103 fails in the 2nd stage, and student 104 fails in the 1st stage. Only students with IDs 102 and 105 pass all stages. Thus, the output is 102 and 105.","solution":"def admission_process(N, M, students): Determines which students pass all stages in the admission process. Parameters: N (int): Number of students M (int): Number of stages students (list of tuples): Each tuple contains a student ID and a result string for each stage Returns: list of int: Sorted list of student IDs who passed all stages passed_students = [] for student in students: student_id, results = student if \'F\' not in results: passed_students.append(student_id) return sorted(passed_students)"},{"question":"You are given n integers. Your task is to find two different pairs (i, j) and (k, l) such that the sums of the elements in these pairs are equal and 1 ≤ i < j ≤ n and 1 ≤ k < l ≤ n. In other words, find (i, j, k, l) such that: - (a_i + a_j = a_k + a_l) - (i < j) - (k < l) - ((i, j) neq (k, l)) If there are multiple solutions, you should return any of them. If there are no possible answers, print \\"No\\". Input The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. The next line contains n space-separated integers (a_1, a_2, …, a_n) (1 ≤ (a_i) ≤ 1000) — the elements of the array. Output Print \\"No\\" if there are no such pairs. Otherwise, print \\"Yes\\" followed by any four integers i, j, k, l that satisfy the conditions above. Examples Input 5 1 5 3 2 5 Output Yes 1 2 3 5 Input 4 1 2 3 9 Output No Note In the first example, we can form the pairs (1, 2) and (3, 5) since 1 + 5 = 6 and 2 + 3 = 6. In the second example, no possible pairs exist that meet the conditions.","solution":"def find_equal_sum_pairs(n, array): pair_sums = {} # Dictionary to store sums of pairs # Iterate over all pairs and store their sums for i in range(n): for j in range(i + 1, n): pair_sum = array[i] + array[j] if pair_sum in pair_sums: # We can return the first found valid pair k, l = pair_sums[pair_sum] print(\\"Yes\\") print(i + 1, j + 1, k, l) return else: pair_sums[pair_sum] = (i + 1, j + 1) print(\\"No\\")"},{"question":"Given an array of n integers, determine if there exist three distinct indices i, j, k such that the elements at those indices form the vertices of a right-angled triangle in the Euclidean plane. The coordinates of the vertices are given by the indices themselves (i, j, k) and the array values (arr[i], arr[j], arr[k]). In other words, you need to check if there exists any triplet (arr[i], arr[j], arr[k]) that forms a right-angled triangle such that the distance between (i, arr[i]) and (j, arr[j]) - the hypotenuse squared is equal to the sum of the squares of the other two sides. Input The first line contains an integer n, 3 ≤ n ≤ 10^5, representing the number of integers in the array. The second line contains the n integers of the array, each integer is between -10^4 to 10^4. Output Print \\"YES\\" if such triplet exists, otherwise print \\"NO\\". Examples Input 5 1 3 6 8 10 Output YES Input 4 1 1 1 1 Output NO Note In the first example: (arr[1], arr[2], arr[4]) → (3, 6, 10) forms a right-angled triangle as 3^2 + 6^2 = 10^2. In the second example: no such triplet exists that forms a right-angled triangle.","solution":"def is_right_angled_triplet_exists(arr): Determine if there exist three distinct indices i, j, k such that the elements at those indices form the vertices of a right-angled triangle in the Euclidean plane using the given array values as coordinates. n = len(arr) squares = set(x*x for x in arr) for i in range(n): for j in range(i+1, n): hypotenuse_squared = arr[i] * arr[i] + arr[j] * arr[j] if hypotenuse_squared in squares: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers and you need to process several queries on this array. Each query can be one of three types: 1. `+ x` - Add the integer `x` to the array. 2. `- x` - Remove a single occurrence of integer `x` from the array. It is guaranteed that `x` exists in the array when this query is made. 3. `? l r` - Count the number of distinct integers in the subarray from index `l` to index `r` (1-based index). For example, if the current array is `[1, 2, 2, 3]` and the query is `? 1 3`, the result will be `2` as there are two distinct integers (`1` and `2`) in the subarray `[1, 2, 2]`. Input The first line contains an integer `q` (1 ≤ q ≤ 100 000) — the number of queries. Each of the next `q` lines contains a query of one of the three types described above. The integers `x`, `l`, and `r` are such that `1 ≤ x ≤ 10^9`, and `1 ≤ l ≤ r ≤ n`, where `n` is the length of the array at the time the query `? l r` is made. Output For each query of type `? l r`, print the number of distinct integers in the subarray from index `l` to index `r`. Examples Input 7 + 1 + 2 + 2 + 3 ? 1 3 - 2 ? 1 4 Output 2 3 Note Consider the array after each query: 1. `[1]` 2. `[1, 2]` 3. `[1, 2, 2]` 4. `[1, 2, 2, 3]` 5. Query: subarray `[1, 2, 2]` (1-based index from 1 to 3) has `2` distinct integers: `1` and `2`. 6. `[1, 2, 3]` (after removing one occurrence of `2`) 7. Query: subarray `[1, 2, 3]` (1-based index from 1 to 4) has `3` distinct integers: `1`, `2`, and `3`.","solution":"def process_queries(queries): arr = [] results = [] for query in queries: if query[0] == \'+\': arr.append(int(query[2:])) elif query[0] == \'-\': x = int(query[2:]) arr.remove(x) elif query[0] == \'?\': l, r = map(int, query[2:].split()) subarray = arr[l-1:r] results.append(len(set(subarray))) return results"},{"question":"A group of programmers are trying to build a new messaging app. One of the key features they want to include is a mechanism to automatically detect and correct certain common mistakes users make when typing messages. Specifically, they want to focus on fixing sentences where the same word appears consecutively (e.g., \\"hello hello world\\" should become \\"hello world\\"). Your task is to write a function that takes a sentence as input and returns a new sentence with all consecutive duplicate words removed. The function should be case-sensitive (i.e., \\"Hello\\" and \\"hello\\" are considered different words). Input The input will be a single string s (1 ≤ |s| ≤ 10^5) — a sentence containing words separated by single spaces. Output The output should be a single string — the corrected sentence with no consecutive duplicate words. Examples Input \\"this is is a test test\\" Output \\"this is a test\\" Input \\"hello world world hello\\" Output \\"hello world hello\\" Input \\"one one one one\\" Output \\"one\\" Note In the first example, the phrase \\"is is\\" is corrected to \\"is\\" and \\"test test\\" is corrected to \\"test\\". In the second example, the phrase \\"world world\\" is corrected to \\"world\\". In the third example, the phrase \\"one one one one\\" is corrected to \\"one\\".","solution":"def remove_consecutive_duplicates(s): Remove consecutive duplicate words from the sentence. words = s.split() if not words: return s result = [words[0]] for word in words[1:]: if word != result[-1]: result.append(word) return \\" \\".join(result)"},{"question":"Given an array of integers, you are asked to find the minimum number of moves required to make all array elements equal. In one move, you can increment n - 1 elements of the array by 1, where n is the length of the array. Input: First line of input contains a single integer T denoting the number of test cases. Each test case starts with an integer n, which is the number of elements in the array. The next line contains n integers representing the elements of the array. Output: For each test case, print the minimum number of moves required. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ a[i] ≤ 10000 SAMPLE INPUT: 3 3 1 2 3 4 1 1 1 1 5 1 2 3 4 5 SAMPLE OUTPUT: 3 0 10 Explanation: TestCase 1: The array can be [1,1,2], [1,2,2], [2,2,2] requiring 3 moves. TestCase 2: The array is already equal, requiring 0 moves. TestCase 3: The array can be [2,3,4,5,5], [3,4,5,6,6], ..., [5,5,5,5,5] requiring 10 moves.","solution":"def min_moves_to_equal_elements(arr): Returns the minimum number of moves required to make all elements equal by incrementing n-1 elements by 1 each time. min_elem = min(arr) moves = sum(x - min_elem for x in arr) return moves def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_moves_to_equal_elements(arr)) return results"},{"question":"You are at a prestigious school where students are assigned numerical grades for their performance in different subjects. There is a range of grades from 0 to 100, inclusive. The school has a ranking system to determine the rank of a student based on their grades across subjects. The rank is given based on the sum of grades in all subjects, and in case of a tie, the ranks are considered equal. Your task is to determine the rank of a student efficiently for multiple queries. To determine the ranks, follow these steps: 1. Calculate the total score for each student. 2. Sort the students based on their total scores in descending order. 3. Assign ranks in such a way that if two students have the same total score, they receive the same rank. 4. You need to answer multiple rank queries based on this ranking system. Input: - The first line contains two space-separated integers N and M. (N is the number of students, and M is the number of subjects.) - The next N lines contain M space-separated integers each, representing the grades of each student in the M subjects. - The next line contains a single integer Q, the number of queries. - The next Q lines contain a single integer each, representing a student index (1-based) for which you should output the rank. Output: - For each query, print the rank of the student provided in the query. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 50 1 ≤ Q ≤ 1000 0 ≤ grade ≤ 100 Every input will fit in an integer. SAMPLE INPUT 5 3 85 90 78 88 92 96 70 60 75 95 98 94 50 50 50 3 1 4 2 SAMPLE OUTPUT 3 1 2 Explanation: 1. The total scores of the students are: [253, 276, 205, 287, 150] 2. The sorted total scores (with ranks) are: [287(1), 276(2), 253(3), 205(4), 150(5)] 3. Student 1 (grade: [85, 90, 78], total: 253) is ranked 3rd. 4. Student 4 (grade: [95, 98, 94], total: 287) is ranked 1st. 5. Student 2 (grade: [88, 92, 96], total: 276) is ranked 2nd.","solution":"def calculate_ranks_and_query(N, M, grades, queries): Calculate the ranks of students based on their total scores and answer the rank queries. Args: N: Number of students. M: Number of subjects. grades: A list of list of integers where each inner list represents grades of a student. queries: A list of integers representing the student indices to query the rank for. Returns: A list of integers representing the ranks for the queried student indices. # Calculate total scores for each student total_scores = [sum(student_grades) for student_grades in grades] # Pair each score with its index and sort by scores in descending order (and by index for stability) indexed_scores = sorted([(score, index) for index, score in enumerate(total_scores)], key=lambda x: x[0], reverse=True) # Initialize rank list with `None` values ranks = [None] * N # Assign ranks rank = 1 for i in range(N): if i > 0 and indexed_scores[i][0] != indexed_scores[i - 1][0]: rank = i + 1 ranks[indexed_scores[i][1]] = rank # Get ranks for the queries query_results = [ranks[query - 1] for query in queries] return query_results"},{"question":"Write a program that assists a librarian in sorting a collection of books. Each book in the collection has a title, an author, and a year of publication. You are required to sort the books primarily by the year of publication in ascending order. If two or more books are published in the same year, they should be sorted by the author\'s name in lexicographical order. If two or more books have the same author and year of publication, they should be sorted by the title in lexicographical order. Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of books in the collection. The next N lines each contain a book title, author name, and year of publication, separated by spaces. Output For each test case, output the sorted list of books, one book per line, with the title, author, and year separated by a single space. Each test case should be separated by a blank line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 The length of each title and author name will be in the range [1, 100], inclusive. The year of publication will be a 4-digit integer in the range [1000, 2022]. Example Input: 2 3 WarAndPeace Tolstoy 1869 PrideAndPrejudice Austen 1813 AnnaKarenina Tolstoy 1877 4 TheGreatGatsby Fitzgerald 1925 MobyDick Melville 1851 TheCatchInTheRye Salinger 1951 ToKillAMockingbird Lee 1960 Output: PrideAndPrejudice Austen 1813 WarAndPeace Tolstoy 1869 AnnaKarenina Tolstoy 1877 MobyDick Melville 1851 TheGreatGatsby Fitzgerald 1925 TheCatchInTheRye Salinger 1951 ToKillAMockingbird Lee 1960","solution":"def sort_books(test_cases): result = [] for books in test_cases: sorted_books = sorted(books, key=lambda x: (x[2], x[1], x[0])) result.append(sorted_books) return result def process_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 books = [] for _ in range(N): parts = lines[index].rsplit(\\" \\", 2) title = parts[0] author = parts[1] year = int(parts[2]) books.append((title, author, year)) index += 1 test_cases.append(books) return test_cases def format_output(sorted_books): output = [] for books in sorted_books: for book in books: output.append(f\\"{book[0]} {book[1]} {book[2]}\\") output.append(\\"\\") # Blank line to separate test cases return \\"n\\".join(output).strip() def librarian_program(input_data): test_cases = process_input(input_data) sorted_books = sort_books(test_cases) return format_output(sorted_books)"},{"question":"During a sailing competition, sailors must navigate through a series of checkpoints, identified by their Cartesian coordinates on an x-y plane. The sailors must follow these checkpoints in the exact order they are given. The direction in which sailors travel in the positive x-direction is called \\"East\\", in the negative x-direction is called \\"West\\", in the positive y-direction is \\"North\\", and in the negative y-direction is \\"South\\". Each sailor must be given instructions in the form of these cardinal directions to move from one checkpoint to the next, always trying to minimize the number of directional changes. For example, if a sailor moves from (0, 0) to (3, 4), the instructions would be \\"East 3, North 4\\". You are given a sequence of coordinates representing the checkpoints. Your task is to determine the optimal instructions for each pair of consecutive checkpoints, such that the total number of directional changes is minimized. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of checkpoints. Each of the next n lines contains two integers xi and yi (-1000 ≤ xi, yi ≤ 1000) — the coordinates of the i-th checkpoint. Output Print the minimal instructions needed for the sailor to move from each checkpoint to the next one in the given sequence. Each instruction should be in the format \\"D d\\", where D is one of \\"East\\", \\"West\\", \\"North\\", or \\"South\\" and d is the distance to be traveled in that direction, minimizing the number of changes in direction. Examples Input 4 0 0 3 0 3 4 7 4 Output East 3 North 4 East 4 Input 3 0 0 -2 0 -2 -3 Output West 2 South 3 Note In the first example, the optimal instructions are to first move \\"East 3\\" to go from (0, 0) to (3, 0), then move \\"North 4\\" to reach (3, 4), and finally move \\"East 4\\" to arrive at (7, 4), minimizing the directional changes. In the second example, the optimal instructions are to first move \\"West 2\\" to go from (0, 0) to (-2, 0), and then move \\"South 3\\" to reach (-2, -3).","solution":"def minimal_instructions(n, checkpoints): directions = [] for i in range(n - 1): x1, y1 = checkpoints[i] x2, y2 = checkpoints[i + 1] if x1 != x2: if x2 > x1: directions.append(f\\"East {x2 - x1}\\") else: directions.append(f\\"West {x1 - x2}\\") if y1 != y2: if y2 > y1: directions.append(f\\"North {y2 - y1}\\") else: directions.append(f\\"South {y1 - y2}\\") return directions"},{"question":"Write a function `minimum_operations_to_equalize` that takes an integer array and returns the minimum number of operations required to make all the elements of the array equal. In each operation, you can increment any of the elements by 1. Constraints: * 1 leq array length leq 100000 * 0 leq array element leq 10^9 Input: The input consists of a single list of integers representing the array. Output: Return the minimum number of operations required to make all the elements of the array equal. Examples: Input: [1, 2, 3] Output: 3 Explanation: We can make all the elements equal to 3 in 3 operations: - Increment 1 by 2 to get [3, 2, 3] (2 operations) - Increment 2 by 1 to get [3, 3, 3] (1 operation) Total = 2 + 1 = 3 Input: [4, 6, 8] Output: 6 Explanation: We can make all the elements equal to 8 in 6 operations: - Increment 4 by 4 to get [8, 6, 8] (4 operations) - Increment 6 by 2 to get [8, 8, 8] (2 operations) Total = 4 + 2 = 6 Note: The goal is to choose the most efficient way to increment the elements so that they all become equal.","solution":"def minimum_operations_to_equalize(arr): Returns the minimum number of operations required to make all the elements of the array equal. In each operation, you can increment any of the elements by 1. if not arr: return 0 # Let\'s choose the maximum value in the array as the target max_val = max(arr) # Calculate the operations needed to make all elements equal to the max value operations = sum(max_val - x for x in arr) return operations"},{"question":"A permutation of an array is an arrangement of its members in a different order. Given an array of integers A of length N, determine if there exists a permutation of A such that the sum of every two adjacent elements is even. Constraints * 1 ≤ N ≤ 100 * 1 ≤ Ai ≤ 100 Input Input is given from Standard Input in the following format: N A1 A2 A3 ... AN Output If such a permutation exists, print `YES`; otherwise, print `NO`. Examples Input 5 2 4 10 6 8 Output YES Input 4 1 2 3 4 Output NO","solution":"def can_form_even_sum_permutation(N, A): Determines if there\'s a permutation of A such that every two adjacent elements sum to an even number. Parameters: N (int): Length of the array. A (list): List of integers. Returns: str: \'YES\' if such a permutation exists, \'NO\' otherwise. even_count = sum(1 for x in A if x % 2 == 0) odd_count = N - even_count # If all numbers are even or all are odd, such a permutation is possible if even_count == N or odd_count == N: return \\"YES\\" else: return \\"NO\\""},{"question":"A company is organizing a coding competition for students. To enter the competition, students must register on a website. Each student is identified by a unique ID number. The students are assigned to teams based on their registration order. Each team should have exactly `k` students, but the last team may have fewer if the total number of students is not a multiple of `k`. Write a program that determines the number of teams and the number of students in each team if the students are registered in a specific order. Input The first line of the input contains two integers `n` (1 ≤ n ≤ 100 000) and `k` (1 ≤ k ≤ 100 000) — the total number of students and the number of students per team, respectively. The next line contains `n` integers `ID1`, `ID2`, ..., `IDn` (1 ≤ IDi ≤ 1 000 000 000) — the unique IDs of the students in the order of registration. Output Print the number of teams formed and the number of students in each team. If there are leftover students who form a smaller team, include that team in the output. Examples Input 10 3 4 5 7 1 9 6 3 8 2 10 Output 4 3 3 3 1 Input 6 4 14 22 30 17 20 25 Output 2 4 2 Note In the first example, there are 10 students and each team should have 3 students. So, there will be 4 teams: 3 teams with 3 students each and 1 team with the remaining 1 student. In the second example, there are 6 students and each team should have 4 students. So, there will be 2 teams: 1 team with 4 students and 1 team with the remaining 2 students.","solution":"def determine_teams(n, k, ids): Determines the number of teams and the number of students in each team. Args: n : int : Total number of students. k : int : Number of students per team. ids : list : List of student IDs in the order of registration. Returns: teams_count : int : Number of teams formed. team_sizes : list : List of the number of students in each team. teams_count = (n // k) + (1 if n % k > 0 else 0) team_sizes = [k] * (n // k) if n % k > 0: team_sizes.append(n % k) return teams_count, team_sizes"},{"question":"Given an array of integers, determine if there exists a subset of the array whose sum is exactly equal to a given integer S. Constraints * 1 leq n leq 1000 * 1 leq a_i leq 1000 Input The input is given in the following format: n S a_1 a_2 a_3 ... a_n Where * n is the number of elements in the array * S is the target sum * a_i are the elements of the array Output Print \\"YES\\" if there exists a subset whose sum is exactly S, otherwise print \\"NO\\". Examples Input 5 9 3 34 4 12 5 2 Output YES Input 5 30 3 34 4 12 5 2 Output NO","solution":"def is_subset_sum_exists(n, S, array): Determines if there exists a subset of the array whose sum is exactly equal to S using dynamic programming. :param n: int, number of elements in the array :param S: int, target sum :param array: list of integers, elements of the array :return: str, \\"YES\\" if such a subset exists, \\"NO\\" otherwise dp = [[False] * (S + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True # Sum of 0 can always be achieved with an empty subset for i in range(1, n + 1): for j in range(1, S + 1): if array[i-1] > j: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j - array[i-1]] return \\"YES\\" if dp[n][S] else \\"NO\\" # Function for input parsing and calling the main function def subset_sum_exists(input_str): input_data = input_str.split() n = int(input_data[0]) S = int(input_data[1]) array = list(map(int, input_data[2:2+n])) return is_subset_sum_exists(n, S, array)"},{"question":"You are given an array `a` containing `n` integers. Your task is to find a subarray of `a` such that the bitwise OR of all elements in the subarray is maximized. A subarray is defined as a contiguous subsequence of an array. The bitwise OR of a set of numbers is the result of performing the OR operation on all elements of the set. For example, the bitwise OR of the set {1, 2, 4} is `1 | 2 | 4 = 7`. Write a function that computes the maximum bitwise OR value of any subarray in `a`. Input: - The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^6), the length of the array. - The second line contains `n` integers `a_i` (0 ≤ a_i ≤ 10^9), the elements of the array. Output: - Print a single integer, the maximum bitwise OR value of any subarray. Examples: Input: 4 1 2 4 8 Output: 15 Input: 3 5 1 3 Output: 7 Explanation of the Examples: In the first example, the subarray that maximizes the bitwise OR is the entire array [1, 2, 4, 8], giving `1 | 2 | 4 | 8 = 15`. In the second example, the subarray that maximizes the bitwise OR is [5, 1, 3], giving `5 | 1 | 3 = 7`. Alternatively, subarrays [5, 1] and [5, 3] both also give the maximum OR value 7.","solution":"def max_bitwise_or(n, array): Returns the maximum bitwise OR value of any subarray in array. :param n: int, the length of the array :param array: list, the array of integers :return: int, the maximum bitwise OR value max_or = 0 current_or = 0 for num in array: current_or |= num max_or = max(max_or, current_or) return max_or"},{"question":"Maria has a list of N integers, representing the heights of consecutive buildings on a street. She wants to know how many \\"sunset views\\" there are. A building has a \\"sunset view\\" if it is taller than all the buildings to its right. A building can see the sunset if there are no taller buildings to its right. The building on the far right side always has a sunset view. Write a program to count the number of buildings that can see the sunset. INPUT First line contains integer N. Second line contains N integers representing heights of the buildings. OUTPUT In a single line output the number of buildings that have a sunset view. CONSTRAINTS 1 ≤ N ≤ 100000 1 ≤ Height of each building ≤ 100000 SAMPLE INPUT 6 3 7 8 3 6 1 SAMPLE OUTPUT 3","solution":"def count_sunset_views(building_heights): Returns the number of buildings that can see the sunset. A building can see the sunset if it is taller than all the buildings to its right. :param building_heights: List of integers representing heights of consecutive buildings :return: Integer representing the number of buildings with sunset views if not building_heights: return 0 count = 0 max_height_so_far = 0 for height in reversed(building_heights): if height > max_height_so_far: count += 1 max_height_so_far = height return count"},{"question":"In a forest, there are n trees standing in a row. Each tree has a certain height. The forest ranger wants to cut down some trees such that no two adjacent trees have the same height. Your task is to find the minimum number of trees that need to be cut down. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees in the forest. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the trees. Output Output the minimum number of trees that need to be cut down to ensure that no two adjacent trees have the same height. Examples Input 5 1 2 2 3 4 Output 1 Input 6 3 3 3 3 3 3 Output 3","solution":"def min_cut_trees(trees): if not trees: return 0 n = len(trees) cuts = 0 for i in range(1, n): if trees[i] == trees[i - 1]: cuts += 1 if i + 1 < n and trees[i + 1] != trees[i]: trees[i] = trees[i + 1] - 1 else: trees[i] = trees[i - 1] - 1 return cuts"},{"question":"You have a list of integers nums, and you need to determine whether it is possible to partition the list into two subsets such that the sum of the elements in both subsets is equal. Constraints * 1 leq nums.length leq 200 * 1 leq nums[i] leq 100 Input Input is given from Standard Input in the following format: nums Output Print \\"YES\\" if you can partition the list into two subsets with equal sum, otherwise print \\"NO\\". Examples Input [1, 5, 11, 5] Output YES Input [1, 2, 3, 5] Output NO Input [2, 2, 3, 4, 5, 8] Output YES","solution":"def can_partition(nums): Determines if the given list of integers can be partitioned into two subsets such that the sum of the elements in both subsets is equal. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) # dp array to keep track of possible subset sums dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Given an array of integers arr, process q queries, each having one of the following forms: * 1 i x — Change the i-th element in the array to x. * 2 l r — Output the sum of the elements in the subarray starting at index l and ending at index r. Input The first line of the input contains the integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers representing the initial elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries to process. The next q lines describe the queries and may have one of the following forms: * 1 i x (1 ≤ i ≤ n, |x| ≤ 10^9) * 2 l r (1 ≤ l ≤ r ≤ n) Output For each query of type 2, output the required answer in a separate line. Examples Input 5 1 2 3 4 5 3 2 1 3 1 2 6 2 1 3 Output 6 10 Input 4 4 -1 2 8 4 2 1 4 1 3 -5 2 2 4 2 1 2 Output 13 2 3 Note Consider the first sample case. Initially, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. After the update, the array becomes [1, 6, 3, 4, 5], and the sum of elements from index 1 to 3 is 1 + 6 + 3 = 10.","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr def update(self, i, x): self.arr[i-1] = x def sum_range(self, l, r): return sum(self.arr[l-1:r]) def process_queries(n, arr, q, queries): processor = ArrayProcessor(arr) results = [] for query in queries: if query[0] == 1: _, i, x = query processor.update(i, x) elif query[0] == 2: _, l, r = query results.append(processor.sum_range(l, r)) return results"},{"question":"A company\'s intranet uses a custom messaging system. Each message sent within the system is tagged with a unique identifier and is categorized based on urgency: High, Medium, or Low. Employees can receive multiple messages, and each message comes with a timestamp indicating when it was sent. Given a set of messages, the goal is to determine the employee\'s busiest hour - the hour during which they received the most messages. Your task is to write a function that takes a list of timestamped messages and their urgency levels and finds the hour with the maximum number of messages. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of messages. Each of the next n lines contains a message in the format: timestamp urgency, where: - timestamp is a string in the format \\"YYYY-MM-DD HH:MM\\". - urgency is either \'High\', \'Medium\', or \'Low\'. Output Output a single line containing the hour (in \\"YYYY-MM-DD HH:00\\" format) that has the highest number of received messages. If there are multiple hours with the same number of messages, return the earliest one. Examples Input 5 2023-10-01 09:45 High 2023-10-01 09:59 Medium 2023-10-01 10:01 Low 2023-10-01 10:15 High 2023-10-01 11:30 Medium Output 2023-10-01 09:00 Input 3 2023-10-02 08:15 Medium 2023-10-02 08:45 Low 2023-10-02 09:05 High Output 2023-10-02 08:00 Note In the first example, the hour from 09:00 to 09:59 has the most messages (2 messages), hence \\"2023-10-01 09:00\\" is the busiest hour. In the second example, the hour from 08:00 to 08:59 has the most messages (2 messages), so the output is \\"2023-10-02 08:00\\".","solution":"from collections import defaultdict from datetime import datetime def find_busiest_hour(messages): hour_count = defaultdict(int) for message in messages: timestamp, urgency = message.rsplit(\' \', 1) # Parse the \\"YYYY-MM-DD HH:MM\\" to extract the \\"YYYY-MM-DD HH:00\\" hour = timestamp[:13] + \\":00\\" hour_count[hour] += 1 busiest_hour = max(hour_count.items(), key=lambda item: (item[1], -datetime.strptime(item[0], \\"%Y-%m-%d %H:00\\").timestamp())) return busiest_hour[0] # Example usage n = 5 messages = [ \\"2023-10-01 09:45 High\\", \\"2023-10-01 09:59 Medium\\", \\"2023-10-01 10:01 Low\\", \\"2023-10-01 10:15 High\\", \\"2023-10-01 11:30 Medium\\" ] print(find_busiest_hour(messages)) # Output: 2023-10-01 09:00"},{"question":"In a distant galaxy, there is a highly secure vault protected by a series of magical locks. Each lock is controlled by a distinct key matrix. The key matrices are square matrices of integers, and two matrices (A) and (B) are deemed equivalent if one can be transformed into the other by rotating it 0, 90, 180, or 270 degrees. Your task is to determine whether two given key matrices are equivalent. Input The first line contains an integer (n) (1 ≤ (n) ≤ 50), which denotes the size of the square matrices. The next (n) lines contain (n) integers each, representing the first key matrix (A). The following (n) lines contain (n) integers each, representing the second key matrix (B). Output Print `YES` if the matrices are equivalent. Otherwise, print `NO`. Example 1: Input 2 1 2 3 4 4 3 2 1 Output YES Example 2: Input 3 1 2 3 4 5 6 7 8 9 1 2 3 6 5 4 9 8 7 Output NO Note In the first example, the matrix (B) can be obtained by rotating matrix (A) by 180 degrees. Therefore, the output is `YES`. In the second example, there is no rotation of matrix (A) that matches matrix (B), so the output is `NO`.","solution":"def rotate_90_deg(matrix): Rotate the given NxN matrix by 90 degrees clockwise. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] def are_matrices_equivalent(n, A, B): Check if matrix B is equivalent to matrix A by rotating it 0, 90, 180, or 270 degrees. if A == B: return \\"YES\\" rotated_90 = rotate_90_deg(A) if rotated_90 == B: return \\"YES\\" rotated_180 = rotate_90_deg(rotated_90) if rotated_180 == B: return \\"YES\\" rotated_270 = rotate_90_deg(rotated_180) if rotated_270 == B: return \\"YES\\" return \\"NO\\""},{"question":"Parking Lot Management Problem Statement You are tasked with managing a parking lot with multiple parking spaces, each identified by a unique number. The parking lot has a crane that moves cars between spots to reorganize the lot. Each car is identified by a unique alphanumeric code. Initially, the parking lot can be configured with cars positioned in certain spots, while other spots may be empty. You need to implement a system that keeps track of the parking lot configuration and supports the following actions: 1. `PARK <spot_number> <car_code>`: Places the car with the given code in the specified spot. If the spot is already occupied, print an error message and do not place the car. 2. `REMOVE <spot_number>`: Removes the car from the specified spot. If the spot is already empty, print an error message and do not perform any action. 3. `MOVE <source_spot> <destination_spot>`: Moves the car from the source spot to the destination spot. If the source spot is empty or the destination spot is occupied, print an error message and do not move the car. 4. `CHECK <car_code>`: Checks the position of the car with the given code and prints the spot number. If the car is not in the lot, print \\"NOT FOUND\\". Input The input consists of multiple lines of commands. The commands are executed in sequence, and the end of the input is signified by the EOF (End Of File). Commands are provided in the following format: - `PARK <spot_number> <car_code>` - `REMOVE <spot_number>` - `MOVE <source_spot> <destination_spot>` - `CHECK <car_code>` It is assumed that the parking lot has up to 100 spots, indexed from 1 to 100. Each car code is a unique alphanumeric string with a maximum length of 10 characters. Output For each command, produce the appropriate output based on whether the command was successfully executed or if an error message is required. The output should be as follows: - For the `PARK` command, if successful, no output is produced; if there\'s an error (spot occupied), output `ERROR: Spot already occupied`. - For the `REMOVE` command, if successful, no output is produced; if there\'s an error (spot empty), output `ERROR: Spot already empty`. - For the `MOVE` command, if successful, no output is produced; if there\'s an error (source spot empty or destination spot occupied), output `ERROR: Invalid move`. - For the `CHECK` command, output the spot number if the car is found, or \\"NOT FOUND\\" if the car is not in the lot. Assume that commands, if valid, would always have the correct formatting. Example Input PARK 1 AB1234 PARK 2 CD5678 CHECK AB1234 MOVE 1 3 CHECK AB1234 REMOVE 2 CHECK CD5678 PARK 2 EF9101 MOVE 3 2 CHECK AB1234 CHECK EF9101 Example Output 1 3 NOT FOUND 2 NOT FOUND 2 Explanation - Initially, cars `AB1234` and `CD5678` are parked in spots 1 and 2. - Checking for `AB1234` returns its spot (1). - Moving `AB1234` from spot 1 to 3 succeeds, so the subsequent check returns 3. - Removing car `CD5678` from spot 2 succeeds, so its check returns \\"NOT FOUND\\". - Parking car `EF9101` in spot 2 succeeds. - Moving `AB1234` from spot 3 to 2 succeeds, so the next checks correctly reflect the positions of the cars.","solution":"class ParkingLot: def __init__(self): self.spots = [None] * 100 # Initialize 100 parking spots def park(self, spot_number, car_code): if self.spots[spot_number - 1] is not None: return \\"ERROR: Spot already occupied\\" self.spots[spot_number - 1] = car_code def remove(self, spot_number): if self.spots[spot_number - 1] is None: return \\"ERROR: Spot already empty\\" self.spots[spot_number - 1] = None def move(self, source_spot, destination_spot): if self.spots[source_spot - 1] is None: return \\"ERROR: Invalid move - Source spot empty\\" if self.spots[destination_spot - 1] is not None: return \\"ERROR: Invalid move - Destination spot occupied\\" self.spots[destination_spot - 1] = self.spots[source_spot - 1] self.spots[source_spot - 1] = None def check(self, car_code): for i, car in enumerate(self.spots): if car == car_code: return i + 1 return \\"NOT FOUND\\""},{"question":"A software company wants to implement a time management system to help employees manage their working hours. To achieve this, they have decided to create a simple program that helps employees track their work sessions. Each work session is represented by a start and end time, and the goal is to determine the total amount of time worked in a day, taking into account that some work sessions may overlap. Given a list of work sessions for a single day, each represented by a start time and an end time, find out the total number of unique minutes worked that day. Input The first line contains an integer n (1 ≤ n ≤ 1000) - the number of work sessions in a day. Each of the following n lines contains two integers start and end (0 ≤ start < end ≤ 1440) - the start and end times of a work session in minutes from the beginning of the day. Output Print a single integer — the total number of unique minutes worked that day. Examples Input 3 60 120 100 180 150 210 Output 150 Input 2 300 420 360 480 Output 180 Input 4 0 100 50 150 100 200 300 400 Output 250","solution":"def total_unique_minutes(n, sessions): Returns the total number of unique minutes worked in a day given the work sessions. Parameters: n (int): Number of work sessions. sessions (List[Tuple[int, int]]): List of tuples where each tuple represents the start and end times of a work session. Returns: int: Total unique minutes worked in a day. time_worked = set() for start, end in sessions: for minute in range(start, end): time_worked.add(minute) return len(time_worked) # Example usage: # sessions = [(60, 120), (100, 180), (150, 210)] # print(total_unique_minutes(3, sessions)) # Output: 150"},{"question":"In a certain town, there are N houses built in a straight line. Each house has a certain number of candies. On Halloween night, children go trick-or-treating and can only visit houses such that the house numbers they choose are not directly adjacent (i.e., if they visit house i, they cannot visit house i-1 or i+1). Your task is to help children maximize the number of candies they can collect. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains the integer N, the number of houses. - The second line contains N space-separated integers representing the number of candies in each house. Output: For each test case, print an integer representing the maximum number of candies that can be collected. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 0 ≤ Candies in each house ≤ 1000 Example: Input: 2 3 6 7 1 4 3 2 10 8 Output: 7 13","solution":"def max_candies(T, test_cases): results = [] for case in test_cases: N, candies = case if N == 0: results.append(0) continue if N == 1: results.append(candies[0]) continue dp = [0] * N dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + candies[i]) results.append(dp[-1]) return results # Example Usage T = 2 test_cases = [ (3, [6, 7, 1]), (4, [3, 2, 10, 8]) ] print(max_candies(T, test_cases))"},{"question":"Ilya is working on a new software project that involves processing a list of events. Each event has a start time and an end time, and she needs to find out how many overlapping events there are at each specific time point when the event starts or ends. Given a list of events, where each event is represented by a pair of integers, the start time and the end time, your task is to determine the maximum number of overlapping events at any point in time. Note that an event that starts at time `x` and ends at time `y` means that the event includes both the start and end times, i.e., it is active at every time point `t` such that `x <= t <= y`. Input The first line of the input contains an integer `T` denoting the number of test cases. For each test case, the first line contains an integer `N` denoting the number of events. Each of the next `N` lines contains two space-separated integers `start` and `end` denoting the start and end times of an event. Output For each test case, output a single integer denoting the maximum number of overlapping events for any time point in a separate line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ start ≤ end ≤ 10^9 Example Input: 2 3 1 5 2 6 4 8 2 1 2 3 4 Output: 3 1 Explanation Example case 1. The maximum number of overlapping events is 3 which happens at time points 4 and 5 when all three events (1, 2, and 3) overlap. Example case 2. No two events overlap, so the maximum number of overlapping events is 1.","solution":"def max_overlapping_events(T, test_cases): T: int, number of test cases test_cases: list of tuples, each containing an integer N and a list of pairs (start, end) Returns a list of integers representing the maximum number of overlapping events for each test case. results = [] for events in test_cases: N, intervals = events points = [] for start, end in intervals: points.append((start, 1)) # 1 means event starts points.append((end + 1, -1)) # -1 means event ends (end + 1 because end is inclusive) points.sort() max_overlap = 0 current_overlap = 0 for point, value in points: current_overlap += value if current_overlap > max_overlap: max_overlap = current_overlap results.append(max_overlap) return results"},{"question":"You are given a list of n time intervals `(start[i], end[i])` representing the times a person starts and finishes using a laptop. Each interval is closed, meaning the person starts using the laptop at `start[i]` and stops at `end[i]`. You are to determine the minimum number of laptops required such that no two intervals overlap on the same laptop. For example, if the intervals are `[(0, 30), (5, 10), (15, 20)]`, two laptops are required. The first interval `(0, 30)` uses one laptop, and the second interval `(5, 10)` overlaps with the first thus requires a second laptop. The third interval `(15, 20)` also overlaps with the first and needs a second laptop. Your task is to write a function `min_laptops(intervals)` to determine the minimum number of laptops required. # Function Signature ```python def min_laptops(intervals: List[Tuple[int, int]]) -> int: ``` # Input - The function takes a single input: - `intervals`: A list of `n` tuples representing the start and end times of the intervals. Each tuple is of the form `(start[i], end[i])` with `0 <= start[i] < end[i] <= 10^9`. # Output - Returns an integer representing the minimum number of laptops required. # Example Example 1 ```python intervals = [(0, 30), (5, 10), (15, 20)] print(min_laptops(intervals)) ``` Output ``` 2 ``` Example 2 ```python intervals = [(1, 5), (2, 6), (8, 9), (8, 9)] print(min_laptops(intervals)) ``` Output ``` 2 ``` # Explanation In Example 1, we can see that the first interval overlaps with both the second and third intervals, requiring at least two laptops. In Example 2, even though the intervals `(8, 9)` overlap with each other, they do not interfere with intervals `(1, 5)` and `(2, 6)`, thus only two laptops are required at any point in time.","solution":"from typing import List, Tuple def min_laptops(intervals: List[Tuple[int, int]]) -> int: if not intervals: return 0 # Create two separate lists for start and end times starts = sorted([interval[0] for interval in intervals]) ends = sorted([interval[1] for interval in intervals]) laptop_count = 0 max_laptops = 0 i, j = 0, 0 n = len(intervals) # Traverse through every event while i < n: if starts[i] < ends[j]: laptop_count += 1 max_laptops = max(max_laptops, laptop_count) i += 1 else: laptop_count -= 1 j += 1 return max_laptops"},{"question":"Jamie is planning to host a series of quizzes for her friends, but she wants to ensure a fair distribution of questions across different categories such as mathematics, science, literature, and history. She has prepared a list of questions where each question belongs to one of these categories. Jamie wants to know if it\'s possible to form a quiz with exactly one question from each category. You are given a string `q` consisting of characters \'M\', \'S\', \'L\', and \'H\' which denotes the categories of the questions: \'M\' stands for mathematics, \'S\' stands for science, \'L\' stands for literature, and \'H\' stands for history. Your task is to determine if it\'s possible to form a quiz with exactly one question from each category. Input The only line contains string `q` (1 ≤ |q| ≤ 10⁵). The string `q` contains only the characters \'M\', \'S\', \'L\', \'H\'. Output Print \\"YES\\" if it\'s possible to form a quiz with exactly one question from each category. Otherwise, print \\"NO\\". Examples Input MSLH Output YES Input MMSSLLHH Output YES Input MSSLLH Output NO","solution":"def can_form_quiz(q): Returns \'YES\' if it\'s possible to form a quiz with exactly one question from each category (Mathematics, Science, Literature, and History) from the given string of characters. # Convert the string to a set to get unique categories unique_categories = set(q) # Check if all four categories are present if {\'M\', \'S\', \'L\', \'H\'}.issubset(unique_categories): return \\"YES\\" else: return \\"NO\\""},{"question":"Anna has a garden represented by a rectangular grid of n rows and m columns. Each cell in the grid can either be empty or contain a plant. Anna wants to make sure her garden is well-maintained and that each plant has enough water. A plant in any cell (i, j) can water its neighboring cells directly adjacent to it (up, down, left, right). Anna needs your help to determine the number of empty cells in the grid that will be watered if each plant waters its neighboring cells. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden grid. Each of the following n lines contains m characters, where each character is either \'.\' representing an empty cell or \'*\' representing a cell with a plant. Output In a single line print the number of empty cells that will be watered. Examples Input 4 5 ..*.. ..... .*.*. ..... Output 10 Input 3 3 *** *** *** Output 0 Note In the first sample test: After watering, the garden grid looks like this: 11121 12332 11321 12332 So, the total number of watered empty cells is 10. In the second sample test: No empty cells are watered because the garden is fully occupied by plants. Hence, the output is 0.","solution":"def count_watered_cells(n, m, garden): watered_cells = set() for i in range(n): for j in range(m): if garden[i][j] == \'*\': if i > 0 and garden[i-1][j] == \'.\': watered_cells.add((i-1, j)) if i < n-1 and garden[i+1][j] == \'.\': watered_cells.add((i+1, j)) if j > 0 and garden[i][j-1] == \'.\': watered_cells.add((i, j-1)) if j < m-1 and garden[i][j+1] == \'.\': watered_cells.add((i, j+1)) return len(watered_cells)"},{"question":"You are given a string representing a sequence of commands for a robot. The robot starts at position (0, 0) on a 2D plane and can move up (\'U\'), down (\'D\'), left (\'L\'), or right (\'R\'). Determine if the robot returns to its starting position after executing all the commands. Constraints * The input string will consist of characters \'U\', \'D\', \'L\', \'R\' only. * The length of the string is between 1 and 100. Input Input is given from Standard Input in the following format: ``` commands ``` Output Print `Yes` if the robot returns to the starting position; otherwise, print `No`. Examples Input `UDLR` Output `Yes` Input `UURDL` Output `No` Input `LLRR` Output `Yes`","solution":"def does_robot_return(commands): Determines if the robot returns to the starting position after executing the given commands. :param commands: str, the sequence of commands for the robot (\'U\', \'D\', \'L\', \'R\') :return: str, \'Yes\' if the robot returns to starting position, \'No\' otherwise x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \'Yes\' if x == 0 and y == 0 else \'No\'"},{"question":"To assess your understanding of linked lists and their operations, you are tasked with solving the following problem: You are given a singly linked list where each node contains an integer value and a next pointer to the next node in the list. Your task is to write a function `rotate_right()` that rotates the linked list to the right by `k` places. The rotation must meet the following constraints: 1. The function should work for any positive or negative integer `k`. 2. If `k` is positive, the list should be shifted to the right. 3. If `k` is negative, the list should be shifted to the left. 4. The function should not modify the values of the nodes, only change the links between them. Input - A linked list with `n` nodes, where each node has an integer value. - An integer `k` which indicates the number of places to rotate the list. Output - The rotated linked list. Example ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def rotate_right(head: ListNode, k: int) -> ListNode: # Implementation here ``` Example 1: ```python # Input: # head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))) # k = 2 # Output: [4, 5, 1, 2, 3] ``` Example 2: ```python # Input: # head = ListNode(0, ListNode(1, ListNode(2))) # k = 4 # Output: [2, 0, 1] ``` Example 3: ```python # Input: # head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))) # k = -3 # Output: [4, 5, 1, 2, 3] ``` # Notes 1. The given linked list might be empty (in which case, the function should return `None`). 2. Ensure that your solution runs efficiently for larger linked lists.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def rotate_right(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # First, determine the length of the linked list length = 1 last_node = head while last_node.next: last_node = last_node.next length += 1 # Normalize k to ensure it\'s within the bounds of the list length k %= length # For negative k, we convert it to an equivalent positive k if k < 0: k += length if k == 0: return head # Find the new tail: it will be (length - k - 1)th node new_tail = head for _ in range(length - k - 1): new_tail = new_tail.next # The new head is next to the new tail new_head = new_tail.next # Break the list new_tail.next = None # Attach the end of the list to the old head last_node.next = head return new_head"},{"question":"A popular e-commerce company records orders of their products in a log file. Each record is composed of two parts: a positive integer representing the order ID and another string containing the product description. To help with managing orders, you need to implement a system that ensures unique product descriptions for each order. If a new order contains a product description that is already associated with another order in the records, append the order ID to the product description to make it unique. Input Specification The input begins with an integer n, the number of orders (1 ≤ n ≤ 10^5). Each of the following n lines contains an order in the format: an integer k (the order ID) and a string s (the product description). Output Specification For each order in the input, output a single line containing the order ID (unchanged) and the product description (possibly modified to make it unique). If product description of an order is already unique in previous records, print it as it is. If not, append the order ID to make it unique. Example Sample Input: 5 101 gadget 102 gadget 103 device 104 gadget 105 gadget Sample Output: 101 gadget 102 gadget102 103 device 104 gadget104 105 gadget105 Explanation: Order 102 and 104 have the same product description \\"gadget\\" as the previous orders. So, their respective order IDs are appended to make them unique.","solution":"def process_orders(n, orders): Processes a list of orders and makes product descriptions unique. Parameters: n (int): Number of orders. orders (list): List of tuples where each tuple contains an order ID and a product description. Returns: list: List of tuples with potentially modified product descriptions to ensure uniqueness. seen_descriptions = set() result = [] for order_id, description in orders: if description in seen_descriptions: unique_description = f\\"{description}{order_id}\\" result.append((order_id, unique_description)) seen_descriptions.add(unique_description) else: result.append((order_id, description)) seen_descriptions.add(description) return result # Example usage: # n = 5 # orders = [(101, \\"gadget\\"), (102, \\"gadget\\"), (103, \\"device\\"), (104, \\"gadget\\"), (105, \\"gadget\\")] # print(process_orders(n, orders))"},{"question":"You are given two arrays of positive integers. Your task is to determine if there exists a common subsequence (not necessarily contiguous) of length 3 in both arrays. Return \\"YES\\" if such a subsequence exists, and \\"NO\\" otherwise. Constraints * The length of both arrays, n, is between 3 and 100 inclusive. * All values in the input arrays are integers between 1 and 1000 inclusive. Input Input is given from Standard Input in the following format: n array1 array2 Output Print \\"YES\\" or \\"NO\\" based on the existence of a common subsequence of length 3. Examples Input 5 1 2 3 4 5 5 6 1 3 7 Output YES Input 4 1 2 3 4 5 6 7 8 Output NO Input 6 3 6 3 9 7 1 2 9 1 3 6 10 Output YES","solution":"def has_common_subsequence(n, array1, array2): set1 = set(array1) set2 = set(array2) common_elements = set1.intersection(set2) if len(common_elements) >= 3: return \\"YES\\" return \\"NO\\""},{"question":"A company\'s organizational structure is represented as a tree, where each node contains an employee\'s ID and has a unique manager, except the company\'s CEO who doesn\'t have a manager. Each employee can have zero or more subordinates and can be identified by an ID which is a positive integer. You are given such a tree as a list of tuples, where each tuple (a, b) indicates that employee `a` is a direct subordinate of employee `b`. You need to determine the longest chain of command in the company, which is the longest path from the CEO to any other employee in the tree. Input The first input line contains an integer n (1 ≤ n ≤ 100), which is the number of direct reporting relationships in the company. Each of the following n lines contains two integers `a` and `b` (1 ≤ a, b ≤ 10^5), where `a` is a subordinate of `b`. It is guaranteed that the company has exactly one CEO (an employee who is not a subordinate of any other employee), and there will be no cycles in the input data. Output Print a single integer representing the length of the longest chain of command in the company. Example Input 6 1 2 2 3 3 4 4 5 5 6 3 7 Output 5 Explanation The longest chain of command is from employee 1 up to employee 6 (1 -> 2 -> 3 -> 4 -> 5 -> 6), which has a length of 5.","solution":"def longest_chain(n, relationships): from collections import defaultdict, deque # Create the adjacency list for the company tree tree = defaultdict(list) employees_with_manager = set() employees = set() for a, b in relationships: tree[b].append(a) employees_with_manager.add(a) employees.add(a) employees.add(b) # The CEO is the only employee not having a manager ceo = (employees - employees_with_manager).pop() # BFS to find the longest chain longest_chain_length = 0 queue = deque([(ceo, 0)]) while queue: current_node, current_length = queue.popleft() longest_chain_length = max(longest_chain_length, current_length) for subordinate in tree[current_node]: queue.append((subordinate, current_length + 1)) return longest_chain_length"},{"question":"Lin is fascinated by the structure of binary trees. He recently learned about the concept of the height-balanced binary tree and wants to practice a bit. A height-balanced binary tree is defined as a binary tree where the depth of the two subtrees of every node never differ by more than 1. Lin decided to write a function that checks if a given binary tree is height-balanced or not. Given the root of a binary tree, return true if the tree is height-balanced and false otherwise. A binary tree node is defined as: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Input - The input contains the root of the binary tree. You can assume that the TreeNode class defined above is already provided. Output - Return true if the binary tree is height-balanced, and false otherwise. Examples Input ``` [3,9,20,None,None,15,7] ``` Output ``` True ``` Input ``` [1,2,2,3,3,None,None,4,4] ``` Output ``` False ``` Explanation In the first example, the given binary tree is: ``` 3 / 9 20 / 15 7 ``` The tree is height-balanced since the depth of the subtrees of each node differ by no more than 1. In the second example, the given binary tree is: ``` 1 / 2 2 / 3 3 / 4 4 ``` The tree is not height-balanced because the left subtree of the root node has depth 3, while the right subtree has depth 1, differing by more than 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): def check_height(node): if not node: return 0, True left_height, is_left_balanced = check_height(node.left) right_height, is_right_balanced = check_height(node.right) current_height = max(left_height, right_height) + 1 is_current_balanced = abs(left_height - right_height) <= 1 return current_height, is_left_balanced and is_right_balanced and is_current_balanced _, is_balanced_tree = check_height(root) return is_balanced_tree"},{"question":"In a text processing system, a command known as \\"Swap\\" is often used to replace words in a given text. A Swap command is defined by two words, and executing it means that every occurrence of the first word in the text is replaced with the second word, and every occurrence of the second word in the text is replaced with the first word. You are given a text and a series of Swap commands to be executed sequentially. Implement a function to process the text with these Swap commands and output the modified text. # Input - The first line contains a string `text` (1 ≤ |text| ≤ 1000), consisting of lowercase letters and spaces only. - The second line contains an integer `m` (1 ≤ m ≤ 100), the number of Swap commands. - Each of the next `m` lines contains two words separated by a space, `word1` and `word2` (1 ≤ |word1|, |word2| ≤ 20). # Output Print the modified text after all Swap commands have been executed. # Examples Input ``` the cat in the hat 2 cat dog hat cap ``` Output ``` the dog in the cap ``` Input ``` a quick brown fox jumps over the lazy dog 3 quick slow fox hound dog wolf ``` Output ``` a slow brown hound jumps over the lazy wolf ```","solution":"def swap_words(text, swaps): word_list = text.split() swap_dict = {} for word1, word2 in swaps: # Ensure each pair is correctly added to the dictionary swap_dict[word1] = word2 swap_dict[word2] = word1 # Modify the text according to the swap dictionary swapped_word_list = [ swap_dict[word] if word in swap_dict else word for word in word_list ] return \' \'.join(swapped_word_list) # Example of how to use the function # input: # text = \\"the cat in the hat\\" # swaps = [(\\"cat\\", \\"dog\\"), (\\"hat\\", \\"cap\\")] # print(swap_words(text, swaps)) # Output: \\"the dog in the cap\\""},{"question":"TOWER DEFENSE In the new game \\"TOWER DEFENSE\\", players need to strategically place defense towers on a rectangular grid map to defend against waves of enemies. The map is represented as an N x M grid, where each cell is either an empty cell (.) or a tower (T). Towers can attack enemies in the eight neighboring cells: up, down, left, right, and the four diagonals. The player\'s objective is to ensure that every cell on the map is defended by at least one tower. You are tasked with determining the minimum number of additional towers required to ensure that the entire grid is protected. For this problem, you will be given a grid map with some towers already placed. Your task is to compute the minimum number of additional towers needed to ensure all cells on the grid are defended. Input: The input consists of multiple datasets. Each dataset starts with two integers N and M (1 ≤ N, M ≤ 50) representing the number of rows and columns of the grid respectively. Then follows N lines, each with M characters, representing the grid. A dot (.) represents an empty cell and a letter T represents a cell with a tower. The end of the input is represented by a single line containing two zeroes \\"0 0\\". Output: For each dataset, output the minimum number of additional towers required to ensure all cells are defended. Example Input: 3 3 .T. ... T.. 4 4 .... .T.T .... .... 0 0 Example Output: 1 2 Explanation: 1. In the first dataset, placing one additional tower at (1, 1) will ensure all cells are defended. 2. In the second dataset, placing two towers at (0, 2) and (3, 2) will ensure all cells are defended.","solution":"def min_additional_towers(grid): Returns the minimum number of additional towers required to defend the entire grid. N = len(grid) M = len(grid[0]) # Function to check if a position is in range and empty def in_range_and_empty(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' defended = [[False]*M for _ in range(N)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1), # vertical and horizontal (-1, -1), (-1, 1), (1, -1), (1, 1)] # diagonal # Mark defended cells from existing towers for i in range(N): for j in range(M): if grid[i][j] == \'T\': defended[i][j] = True for dx, dy in directions: ni, nj = i + dx, j + dy if 0 <= ni < N and 0 <= nj < M: defended[ni][nj] = True additional_towers = 0 # Place additional towers where needed for i in range(N): for j in range(M): if not defended[i][j]: additional_towers += 1 defended[i][j] = True for dx, dy in directions: ni, nj = i + dx, j + dy if 0 <= ni < N and 0 <= nj < M: defended[ni][nj] = True return additional_towers def parse_input_and_solve(input_str): output = [] datasets = input_str.strip().split(\'n\') index = 0 while index < len(datasets): N, M = map(int, datasets[index].split()) index += 1 if N == 0 and M == 0: break grid = [] for _ in range(N): grid.append(datasets[index]) index += 1 output.append(min_additional_towers(grid)) return output"},{"question":"You are given an array of `N` integers. Your task is to find the length of the longest contiguous subarray that contains at most `K` distinct integers. Write a function that accepts an array of integers and an integer `K`, and returns the length of the longest contiguous subarray with at most `K` distinct integers. If `K` is zero or the array is empty, return zero. # Function Signature ```python def longest_subarray_with_k_distinct(arr: List[int], K: int) -> int: pass ``` # Input - `arr` (list of int): The array of integers. - `K` (int): The maximum number of distinct integers in the subarray. # Output - (int): Length of the longest contiguous subarray with at most `K` distinct integers. # Example ```python arr = [1, 2, 1, 2, 3] K = 2 longest_subarray_with_k_distinct(arr, K) # Output: 4 ``` In this example, the longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]`, which has a length of 4. # Constraints - `1 <= len(arr) <= 20000` - `0 <= arr[i] <= 100000` - `0 <= K <= 100000`","solution":"from collections import defaultdict def longest_subarray_with_k_distinct(arr, K): if K == 0 or not arr: return 0 char_count = defaultdict(int) left = 0 max_length = 0 for right in range(len(arr)): char_count[arr[right]] += 1 while len(char_count) > K: char_count[arr[left]] -= 1 if char_count[arr[left]] == 0: del char_count[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers. Your task is to find the maximum sum of a non-empty subarray such that there are no duplicate elements within the subarray. Input: - First line contains an integer T, which denotes the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output: - For each test case, print the maximum sum of a non-empty subarray with all unique elements. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^5 SAMPLE INPUT 2 5 1 2 3 2 1 4 4 2 4 5 SAMPLE OUTPUT 6 11","solution":"def max_sum_unique_subarray(arr): Returns the maximum sum of a non-empty subarray with all unique elements. if not arr: return 0 current_sum = 0 max_sum = 0 seen = set() l = 0 for r in range(len(arr)): while arr[r] in seen: seen.remove(arr[l]) current_sum -= arr[l] l += 1 seen.add(arr[r]) current_sum += arr[r] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(max_sum_unique_subarray(arr)) return results"},{"question":"Alice has a string `s` consisting of lowercase English letters only. She wants to find out the smallest lexicographical rotation of this string. The rotation of a string `s` with length `n` is any string that can be obtained by concatenating two copies of `s` and taking a substring of length `n`. For example, if `s` is \\"bca\\", its rotations are \\"bca\\", \\"cab\\", and \\"abc\\". The smallest lexicographical rotation of \\"bca\\" is \\"abc\\". Write a function `smallest_rotation` which accepts a string `s` and returns the smallest lexicographical rotation of `s`. # Function Signature ```python def smallest_rotation(s: str) -> str: pass ``` # Input - `s`: A string of length `1 ≤ len(s) ≤ 100,000`, consisting of only lowercase English letters. # Output - A string representing the smallest lexicographical rotation of `s`. # Examples **Example 1:** **Input:** ``` bcda ``` **Output:** ``` abcd ``` **Example 2:** **Input:** ``` zaqxsw ``` **Output:** ``` aqxswz ``` # Note In the first example, the possible rotations of the string `bcda` are \\"bcda\\", \\"cdab\\", \\"dabc\\", and \\"abcd\\". Among these, the smallest lexicographic rotation is \\"abcd\\". In the second example, the possible rotations of the string `zaqxsw` are \\"zaqxsw\\", \\"aqxswz\\", \\"qxswza\\", \\"xswzaq\\", \\"swzaqx\\", \\"wzaqxs\\". Among these, the smallest lexicographic rotation is \\"aqxswz\\".","solution":"def smallest_rotation(s: str) -> str: Returns the smallest lexicographical rotation of the input string s. # Concatenate s with itself to make it easier to find all rotations doubled_s = s + s # Find the smallest lexicographical substring of length len(s) smallest = min(doubled_s[i:i+len(s)] for i in range(len(s))) return smallest"},{"question":"James is working on optimizing the traffic light system in his city. The city has several intersections, and each intersection has traffic lights controlled by a central system. James wants to ensure that the traffic flows as smoothly as possible with minimal waiting time for drivers. Each intersection has a set number of possible states that dictate how long the lights stay red, yellow, and green, and in what order. The current traffic light states are suboptimal because they cause frequent stops and traffic jams during peak hours. James wants to find the smallest adjustment time that can be applied to each traffic light\'s state to achieve optimal traffic flow. You are given the current state of each traffic light at every intersection and a list of optimal states for comparison. Your task is to compute the minimum time required to adjust the current states to any of the optimal states. Input The first line contains an integer n (1 ≤ n ≤ 10) — the number of intersections. For the next 2*n lines, each set of two lines represents the traffic light states for one intersection: - The first line of the set contains an integer m (1 ≤ m ≤ 5) — the number of possible states for the intersection\'s current traffic light configuration. - The second line of the set contains m integers t_1, t_2, ..., t_m (0 ≤ t_i ≤ 30), where t_i is the time (in seconds) of one of the possible states in the current configuration. After n intersections, the following lines represent the optimal states. The structure is similar: for each intersection, there is first an integer k (1 ≤ k ≤ 5) — the number of optimal states, followed by a line with k integers o_1, o_2, ..., o_k (0 ≤ o_i ≤ 30), where o_i is the time (in seconds) of one of the optimal states in the target configuration. Output Print one integer — the minimum total time required to adjust the current states to any of the optimal states for all intersections. Example Input 2 3 10 20 30 4 5 15 25 35 2 0 15 3 5 20 30 Output 10 Note In the example, there are two intersections. For the first intersection, the adjustments would be: - From 10 to 5 (adjustment time 5) - From 20 to 25 (adjustment time 5) For the second intersection, the adjustments would be: - From 0 to 5 (adjustment time 5) - From 15 to 20 (adjustment time 5) The total minimum adjustment time is 10 seconds.","solution":"def min_adjustment_time(n, current_states, optimal_states): total_min_time = 0 for i in range(n): current = current_states[i] optimal = optimal_states[i] min_time = float(\'inf\') for c in current: for o in optimal: min_time = min(min_time, abs(c - o)) total_min_time += min_time return total_min_time # Function to parse input data def parse_input(): n = int(input().strip()) current_states = [] for _ in range(n): m = int(input().strip()) current = list(map(int, input().strip().split())) current_states.append(current) optimal_states = [] for _ in range(n): k = int(input().strip()) optimal = list(map(int, input().strip().split())) optimal_states.append(optimal) return n, current_states, optimal_states"},{"question":"You are given a list of integers, representing the heights of a row of trees. You need to cut down some of the trees such that the remaining trees form a strictly increasing sequence of heights. Your task is to determine the minimum number of trees that need to be cut down to achieve this. INPUT The first line contains an integer N, the number of trees. The second line contains N integers, H[1], H[2], ..., H[N], where H[i] represents the height of the i-th tree. OUTPUT Print a single integer representing the minimum number of trees to be cut down to form a strictly increasing sequence. CONSTRAINTS 1 ≤ N ≤ 100000 1 ≤ H[i] ≤ 100000 SAMPLE INPUT 7 5 3 4 9 1 7 8 SAMPLE OUTPUT 3 Explanation: In the given example, one possible solution is to cut down the trees with heights 5, 3, and 1, leaving the sequence [4, 9, 7, 8]. However, to get a strictly increasing sequence, you would need to cut down the tree with height 7 as well. So the sequence would be [3, 4, 9]. Thus, a total of 3 trees need to be cut down.","solution":"def min_trees_to_cut(H): Determines the minimum number of trees to cut down to form a strictly increasing sequence. Parameters: H (list): A list of integers representing the heights of the trees. Returns: int: The minimum number of trees to cut down to achieve a strictly increasing sequence. from bisect import bisect_left # Length of the longest increasing subsequence (LIS) array lis = [] for height in H: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(H) - len(lis)"},{"question":"Problem You are given a string of lowercase alphabets. You need to transform the string into a palindrome by adding characters to its beginning. Write a function that returns the shortest palindrome string that can be formed by this transformation. Constraints * The input string will have at most 10^5 characters. * The string will contain only lowercase English alphabets. Input The input is given as a single string of lowercase alphabets. Output Output the shortest palindrome string that can be formed by adding characters to the beginning. Examples Input `abcd` Output `dcbabcd` Input `aacecaaa` Output `aaacecaaa` Input `racecar` Output `racecar` Explanation In the first example, by adding the characters \'dcb\' to the beginning of `abcd`, we obtain `dcbabcd`, which is a palindrome. In the second example, adding \'aa\' to the beginning of `aacecaaa` results in `aaacecaaa`, which is a palindrome. In the third example, the string `racecar` is already a palindrome, so the output is the same as the input.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be formed by adding characters to the beginning of the string `s`. if s == s[::-1]: return s # Compute the reverse of the string rev_s = s[::-1] # Try to find the longest suffix of s which is a prefix of its reverse for i in range(len(s)): if s[:len(s)-i] == rev_s[i:]: return rev_s[:i] + s return rev_s + s"},{"question":"Dina has n unique toys, and each toy has an associated fun value represented by an integer. She wants to distribute these toys into two separate boxes such that the absolute difference between the total fun values of the toys in the two boxes is minimized. Help her determine this minimum absolute difference. Input: The first line contains an integer n (1 ≤ n ≤ 20) — the number of toys. The second line contains n integers - the fun values of the toys (1 ≤ fun value ≤ 1000). Output: Print the minimum possible absolute difference between the total fun values of toys in the two boxes. Example: Input 4 1 3 4 7 Output 1 Explanation: One possible distribution can be: - Box 1: 1, 7 - Box 2: 3, 4 The total fun value for Box 1 is 8 and for Box 2 is 7, so the absolute difference is |8 - 7| = 1. Another possible distribution: - Box 1: 3, 4 - Box 2: 1, 7 The total fun value for Box 1 is 7 and for Box 2 is 8, so the absolute difference is |7 - 8| = 1. Thus, the minimum possible absolute difference is 1.","solution":"def min_abs_difference(n, fun_values): Returns the minimum possible absolute difference between the total fun values of toys in two separate boxes. total_sum = sum(fun_values) max_sum = total_sum // 2 dp = [0] * (max_sum + 1) for value in fun_values: for j in range(max_sum, value - 1, -1): dp[j] = max(dp[j], dp[j - value] + value) box1_sum = dp[max_sum] box2_sum = total_sum - box1_sum return abs(box1_sum - box2_sum)"},{"question":"You are participating in a coding competition where you are given a list of numbers and need to find the maximum product that can be obtained by multiplying any three distinct numbers from the list. Input - The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of integers in the list. - The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9). Output - Output a single integer — the maximum product that can be obtained by multiplying any three distinct numbers from the list. Examples Input 5 1 10 2 6 5 Output 300 Input 4 -10 -10 5 2 Output 500 Note - In the first sample test: The maximum product is obtained by multiplying 10, 5, and 6. - In the second sample test: The maximum product is obtained by multiplying -10, -10, and 5.","solution":"def max_product_of_three(numbers): Returns the maximum product that can be obtained by multiplying any three distinct numbers from the list. :param numbers: List of integers. :return: The maximum product. # Sort the numbers numbers.sort() # The maximum product can be either of the two: # 1. Product of the three largest numbers # 2. Product of the two smallest numbers (both could be negative) and the largest number return max(numbers[-1] * numbers[-2] * numbers[-3], numbers[0] * numbers[1] * numbers[-1])"},{"question":"Professor Quantum is building a new encryption system based on a sequence of prime numbers. He defines an encoded message as the sum of the k-th powers of distinct prime numbers, where k is a given integer. Given an integer n, find the longest possible sequence of distinct prime numbers such that the sum of the k-th powers of these prime numbers does not exceed n. If there are multiple sequences of the same maximum length, output any one of them. # Input The input consists of two integers n and k. > n k * Each is a positive integer as explained in the problem statement. # Constraints * 1 ≤ k ≤ 5 * 2 ≤ n ≤ 10^6 # Output Output the longest possible sequence of distinct prime numbers such that the sum of the k-th powers of these prime numbers does not exceed n. Output the prime numbers in any order. If no such sequence exists, output `-1`. # Examples Input 100 2 Output 2 3 5 7 Input 500 3 Output 2 3 5 or 2 11","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 prime_numbers = [] for p in range(2, limit + 1): if is_prime[p]: prime_numbers.append(p) return prime_numbers def find_longest_sequence(n, k): primes = sieve_of_eratosthenes(n) sequence = [] sum_powers = 0 for prime in primes: power_prime = prime ** k if sum_powers + power_prime <= n: sum_powers += power_prime sequence.append(prime) if not sequence: return -1 return sequence"},{"question":"You are given a list of student scores in a particular subject. Your task is to group these scores into ranges and count the number of scores within each range. Each range is defined by its lower and upper bounds (inclusive). A score x belongs to the range [a, b] if a ≤ x ≤ b. The ranges are defined such that they are non-overlapping and cover the entire interval from the lowest to the highest score. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 100) — the number of student scores and the number of ranges, respectively. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 100), representing the student scores. Each of the next m lines contains two integers ai and bi (0 ≤ ai ≤ bi ≤ 100), representing the lower and upper bounds of the i-th range. Output Print m integers — the count of scores in each range in the same order as the input ranges. Example Input 8 3 50 60 70 80 90 58 77 99 50 59 60 69 70 100 Output 2 1 5 Note In the example: - The range [50, 59] includes scores 50, 58. Thus, the first output value is 2. - The range [60, 69] includes score 60. Thus, the second output value is 1. - The range [70, 100] includes scores 70, 77, 80, 90, 99. Thus, the third output value is 5.","solution":"def count_scores_in_ranges(n, m, scores, ranges): Counts the number of scores within each range provided. Parameters: n (int): number of student scores. m (int): number of ranges. scores (list of int): list of student scores. ranges (list of tuples of int): list of ranges (a, b). Returns: list of int: counts of scores within each range. result = [] for a, b in ranges: count = sum(1 for score in scores if a <= score <= b) result.append(count) return result # Example usage # n = 8, m = 3 # scores = [50, 60, 70, 80, 90, 58, 77, 99] # ranges = [(50, 59), (60, 69), (70, 100)] # Output: [2, 1, 5] # Given example print(count_scores_in_ranges( 8, 3, [50, 60, 70, 80, 90, 58, 77, 99], [(50, 59), (60, 69), (70, 100)] )) # Output should be [2, 1, 5]"},{"question":"You are developing a simple drawing application that can process a list of drawing commands to render basic shapes. The shapes supported by the application are rectangles and circles. Each shape has a unique identifier and can be added, resized, or moved. Your task is to interpret and execute a list of drawing commands as described below. # Commands 1. **Add Rectangle**: `AR id x y width height` - Adds a rectangle with unique identifier `id` at position `(x, y)` with the specified width and height. 2. **Add Circle**: `AC id x y radius` - Adds a circle with unique identifier `id` at position `(x, y)` with the specified radius. 3. **Resize Rectangle**: `RR id new_width new_height` - Resizes the rectangle with identifier `id` to the specified new width and height. 4. **Resize Circle**: `RC id new_radius` - Resizes the circle with identifier `id` to the specified new radius. 5. **Move Shape**: `M id new_x new_y` - Moves the shape (either rectangle or circle) with identifier `id` to the new position `(new_x, new_y)`. # Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000) – the number of drawing commands. Each of the next `n` lines contains a command as described above. All identifiers `id` are unique strings consisting of alphanumeric characters (a-z, A-Z, 0-9) and will be no longer than 10 characters. # Output For each shape, after processing all commands, output the final state in the following format: - For rectangles, output: `Rectangle id at (x, y) with width W and height H` - For circles, output: `Circle id at (x, y) with radius R` Shapes should be listed in the order they were added. # Example Input ``` 5 AR rect1 10 10 20 30 AC circle1 15 15 10 M rect1 25 25 RR rect1 40 50 RC circle1 20 ``` Output ``` Rectangle rect1 at (25, 25) with width 40 and height 50 Circle circle1 at (15, 15) with radius 20 ``` Implement a program that reads the input and produces the described output.","solution":"class DrawingApplication: def __init__(self): self.shapes = {} self.order = [] def add_rectangle(self, id, x, y, width, height): self.shapes[id] = {\\"type\\": \\"Rectangle\\", \\"x\\": x, \\"y\\": y, \\"width\\": width, \\"height\\": height} self.order.append(id) def add_circle(self, id, x, y, radius): self.shapes[id] = {\\"type\\": \\"Circle\\", \\"x\\": x, \\"y\\": y, \\"radius\\": radius} self.order.append(id) def resize_rectangle(self, id, new_width, new_height): if id in self.shapes and self.shapes[id][\\"type\\"] == \\"Rectangle\\": self.shapes[id][\\"width\\"] = new_width self.shapes[id][\\"height\\"] = new_height def resize_circle(self, id, new_radius): if id in self.shapes and self.shapes[id][\\"type\\"] == \\"Circle\\": self.shapes[id][\\"radius\\"] = new_radius def move_shape(self, id, new_x, new_y): if id in self.shapes: self.shapes[id][\\"x\\"] = new_x self.shapes[id][\\"y\\"] = new_y def process_commands(self, commands): for command in commands: parts = command.split() if parts[0] == \\"AR\\": self.add_rectangle(parts[1], int(parts[2]), int(parts[3]), int(parts[4]), int(parts[5])) elif parts[0] == \\"AC\\": self.add_circle(parts[1], int(parts[2]), int(parts[3]), int(parts[4])) elif parts[0] == \\"RR\\": self.resize_rectangle(parts[1], int(parts[2]), int(parts[3])) elif parts[0] == \\"RC\\": self.resize_circle(parts[1], int(parts[2])) elif parts[0] == \\"M\\": self.move_shape(parts[1], int(parts[2]), int(parts[3])) def get_final_state(self): result = [] for id in self.order: shape = self.shapes[id] if shape[\\"type\\"] == \\"Rectangle\\": result.append(f\\"Rectangle {id} at ({shape[\'x\']}, {shape[\'y\']}) with width {shape[\'width\']} and height {shape[\'height\']}\\") elif shape[\\"type\\"] == \\"Circle\\": result.append(f\\"Circle {id} at ({shape[\'x\']}, {shape[\'y\']}) with radius {shape[\'radius\']}\\") return result def execute_drawing_commands(n, commands): app = DrawingApplication() app.process_commands(commands) return app.get_final_state()"},{"question":"Alice is organizing a race event with n participants, each identified by a unique ID numbered from 1 to n. To add some excitement to the race, Alice wants to introduce obstacles on the track at specific intervals. Each obstacle slows down the participants, and their positions on the track are known by coordinates (xi, yi), where xi is the distance from the starting point and yi is the magnitude of slow down. Alice wants to analyze the race performance, specifically focusing on the cumulative slowdown experienced by each participant at each obstacle point. A participant\'s performance is evaluated by summing up the slowdowns imposed by all obstacles from the start until that point. Help Alice by computing the total slowdown for each participant when they reach each obstacle. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of participants. The second line contains an integer m (1 ≤ m ≤ 100) — the number of obstacles. Each of the next m lines contains two space-separated integers xi and yi (0 ≤ xi ≤ 1000, 1 ≤ yi ≤ 100) — the position and slowdown magnitude of each obstacle. Output For each participant ID from 1 to n, print n space-separated values representing the total slowdown after crossing every obstacle in the given order. If there are multiple correct outputs, you can print any of them. Examples Input 3 4 100 5 200 3 150 2 300 4 Output 5 8 10 14 5 8 10 14 5 8 10 14 Input 2 3 50 1 100 2 150 3 Output 1 3 6 1 3 6","solution":"def compute_total_slowdown(n, m, obstacles): Computes the total slowdown for each participant after each obstacle. :param n: int, number of participants :param m: int, number of obstacles :param obstacles: List of tuples, each containing (xi, yi) :return: List of lists, each containing the total slowdown for each participant cumulative_slowdowns = [0] * m total_slowdown = 0 for i in range(m): total_slowdown += obstacles[i][1] cumulative_slowdowns[i] = total_slowdown result = [] for _ in range(n): result.append(cumulative_slowdowns) return result"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase alphabetic characters. Your task is to write a function that determines whether `s2` is a scrambling of `s1`. A scrambling is defined as any permutation of the characters of `s1` where the order of characters in each contiguous segment is reversed. If `s2` is a scrambling of `s1`, return `True`; otherwise, return `False`. For example, if `s1` = \\"abc\\" and `s2` = \\"cba\\", \\"bac\\", or \\"bca\\", the output should be `True`. However, if `s1` = \\"abc\\" and `s2` = \\"xyz\\", the output should be `False`. Function Signature: ```python def is_scrambling(s1: str, s2: str) -> bool: pass ``` **Input:** - `s1`: a string of length n (1 <= n <= 1000) - `s2`: a string of length n **Output:** - boolean (`True` if `s2` is a scrambling of `s1`, `False` otherwise) **Examples:** ```python assert is_scrambling(\\"abc\\", \\"cba\\") == True assert is_scrambling(\\"abc\\", \\"bca\\") == True assert is_scrambling(\\"abc\\", \\"cab\\") == True assert is_scrambling(\\"abc\\", \\"def\\") == False assert is_scrambling(\\"a\\", \\"a\\") == True assert is_scrambling(\\"abc\\", \\"abcd\\") == False ```","solution":"def is_scrambling(s1: str, s2: str) -> bool: Determines if s2 is a scrambling of s1. A scrambling is defined as any permutation of the characters of s1 where the order of characters in each contiguous segment is reversed. # Check if lengths differ, immediately return False if len(s1) != len(s2): return False # For a string s2 to be a scrambling of s1, they must be anagrams return sorted(s1) == sorted(s2)"},{"question":"Dr. Asimov is working on a new robot configuration which requires an optimal placement of k different sensors on a grid of size m x n. Each sensor can be placed in a cell such that no two sensors can share the same row, column, or diagonal. This setup is similar to placing k queens on an m x n chessboard. Write a program to determine if it is possible to place all k sensors on the grid following the rules described, and if possible, output one such configuration. If there are multiple valid configurations, any one will suffice. Input The first line contains three integers m, n, and k (1 ≤ m, n ≤ 50, 0 ≤ k ≤ min(m,n)). Output If it is possible to place all k sensors according to the given rules, print \\"YES\\" followed by k lines, each containing two integers r and c, representing the row and column positions of each sensor (1 ≤ r ≤ m, 1 ≤ c ≤ n). If it is not possible, print \\"NO\\". Examples Input 4 4 2 Output YES 1 1 3 2 Input 3 3 3 Output NO","solution":"def place_sensors(m, n, k): def is_safe(board, row, col): for i in range(row): if board[i] == col or abs(board[i] - col) == (row - i): return False return True def solve(board, row): if row == k: result = [(i + 1, board[i] + 1) for i in range(k)] return True, result for col in range(n): if is_safe(board, row, col): board[row] = col solved, result = solve(board, row + 1) if solved: return True, result board[row] = -1 return False, [] if k == 0: return \'YES\', [] board = [-1] * k solved, result = solve(board, 0) if solved: return \'YES\', result else: return \'NO\', [] # Example Function Calls #print(place_sensors(4, 4, 2)) # Output should be a valid configuration #print(place_sensors(3, 3, 3)) # Output should be \'NO\'"},{"question":"Every parent\'s nightmare is a child\'s fear of monsters under the bed. Patty\'s son, Tim, believes that the number of monsters under his bed changes every night. To convince Tim there are no monsters, Patty decided to make a game out of it: they will measure the presence of monsters through a series of commands, much like a balancing act. Given a series of commands: - \\"A x\\" (add x monsters under the bed, where x is a positive integer) - \\"R x\\" (remove x monsters, representing Patty\'s reassurance, where x is a positive integer) Patty has noticed that sometimes Tim asks her to \\"R\\" (remove) more monsters than those known to be under the bed. In such cases, the number of monsters cannot drop below zero. Given a series of commands, help Patty determine the final number of monsters under the bed at the end of the sequence of commands. Input The first line contains an integer n (1 ≤ n ≤ 100), which is the number of commands. Each of the next n lines contains a command, either \\"A x\\" (with 0 < x ≤ 100) or \\"R x\\" (with 0 < x ≤ 100). Output On the first and only line, print the final number of monsters under the bed. Examples Input 3 A 10 R 5 A 7 Output 12 Input 4 A 15 R 20 A 5 R 10 Output 0 Input 2 A 1 R 1 Output 0 Note In the second sample, after the first \\"A 15\\" command, there are 15 monsters under the bed. After \\"R 20\\", Patty would like to remove 20 monsters, but there are only 15, so the number of monsters is reduced to 0 instead—no negative numbers for monsters. Then, an \\"A 5\\" command results in 5 monsters. Finally, an \\"R 10\\" command tries to remove 10 monsters but results in reducing the count to 0, as negative monsters are impossible.","solution":"def final_monster_count(commands): Returns the final number of monsters under the bed after processing a list of commands. monster_count = 0 for command in commands: action, x = command.split() x = int(x) if action == \\"A\\": monster_count += x elif action == \\"R\\": monster_count = max(0, monster_count - x) return monster_count"},{"question":"You are given a string s consisting of lowercase and uppercase alphabets. Determine and output whether the string is a palindrome, considering case sensitivity. Input The only line of input data contains the string s (1 ≤ |s| ≤ 100). Output Output \\"Yes\\" if the string is a palindrome, otherwise \\"No\\". Examples Input Racecar Output No Input madam Output Yes Note In the first example, \\"Racecar\\" is not a palindrome because \'R\' is not equal to \'r\'. In the second example, \\"madam\\" is a palindrome as it reads the same forwards and backwards.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome, considering case sensitivity. Parameters: s (str): Input string Returns: str: \\"Yes\\" if the string is a palindrome, otherwise \\"No\\" return \\"Yes\\" if s == s[::-1] else \\"No\\""},{"question":"There is a city with n intersections and m bi-directional roads connecting these intersections. The city planning committee needs to ensure that it\'s still possible to travel between any two intersections even if one road needs to be closed for maintenance. To help them, you need to find out if there exists at least one road in the city such that if it is removed, the remaining road network will become disconnected. In graph theory terms, this is known as finding a bridge in a connected graph. A bridge is an edge of a graph whose deletion increases the number of connected components in the graph. Write a program to determine if there is any bridge in the city\'s road network. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) — the number of intersections and roads respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a road between intersections u and v. Output Print \\"YES\\" if there is at least one bridge in the road network, otherwise print \\"NO\\". Examples Input 4 5 1 2 2 3 2 4 3 4 4 1 Output NO Input 4 3 1 2 2 3 3 4 Output YES Note In the first example, removing any single road does not disconnect the network, so there is no bridge. In the second example, removing any of the roads will disconnect the network, so there is at least one bridge.","solution":"import sys sys.setrecursionlimit(200000) def find_bridges(n, m, edges): from collections import defaultdict def dfs(node, parent, discovery, low, graph, visited, disc_time, bridges): visited[node] = True discovery[node] = low[node] = disc_time[0] disc_time[0] += 1 for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, node, discovery, low, graph, visited, disc_time, bridges) low[node] = min(low[node], low[neighbor]) if low[neighbor] > discovery[node]: bridges.append((node, neighbor)) elif neighbor != parent: low[node] = min(low[node], discovery[neighbor]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) discovery = [-1] * (n + 1) low = [-1] * (n + 1) visited = [False] * (n + 1) disc_time = [0] bridges = [] for i in range(1, n + 1): if not visited[i]: dfs(i, -1, discovery, low, graph, visited, disc_time, bridges) return \\"YES\\" if bridges else \\"NO\\" # Function to read input and determine if there is a bridge def is_there_a_bridge(n, m, roads): return find_bridges(n, m, roads)"},{"question":"In a certain kingdom, there are n cities connected by m bidirectional roads. Each road connects two cities and each city can have zero or more roads coming out of it. The capital city is city 1. The king wants to ensure that all cities in the kingdom can directly or indirectly communicate with the capital city through these roads. He orders his minister to remove the minimum number of roads to make the remaining graph a tree rooted at the capital city. A tree is a connected graph with no cycles and exactly n - 1 edges. Your task is to help the minister find the minimum number of roads that need to be removed to achieve this goal. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 4950) — the number of cities and the number of roads. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — a road between cities u and v. Output Print one integer — the minimum number of roads that need to be removed. Example Input 5 6 1 2 1 3 2 3 2 4 3 4 4 5 Output 2 Note In the example, the initial graph has cycles. To transform it into a tree rooted at city 1, with exactly 4 edges connecting all cities without cycles and connected to the capital, the minimum number of roads to remove is 2. One optimal way is to remove the roads connecting (2, 3) and (3, 4). The resulting tree would have edges (1, 2), (1, 3), (2, 4), and (4, 5).","solution":"def min_roads_to_remove(n, m, roads): Returns the minimum number of roads that need to be removed to make the remaining graph a tree rooted at the capital city (city 1). from collections import defaultdict # Let\'s perform union find to detect and count cycles. parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True else: return False extra_edges = 0 for u, v in roads: if not union(u, v): extra_edges += 1 return extra_edges"},{"question":"In a kingdom far, far away, there exists a special type of farm known as a Binary Tree Farm. This farm grows an infinite binary search tree (BST), with each node containing a unique numerical fruit. The root of the tree contains the fruit with the value 1. For any node with fruit `x`, the left child will have fruit `2*x` and the right child will have fruit `2*x + 1`. The farmer wants to harvest fruits by picking a continuous range of fruits from any node onwards. However, he can only pick fruits that appear as contiguous nodes in an in-order traversal of the tree. Given the values of two fruits in the tree, you need to determine the total number of fruits that would be picked if the farmer starts picking from the first given fruit and stops at the second given fruit in an in-order traversal. Input The first line contains two integers `a` and `b` (1 ≤ a, b ≤ 10^9) — the values of the two fruits in the tree. Output Print a single integer — the total number of fruits that would be picked if the farmer starts at the fruit with value `a` and stops at the fruit with value `b`. Examples Input 3 10 Output 8 Input 4 6 Output 3 Input 2 15 Output 14","solution":"def count_fruits_in_order(a, b): Returns the total number of fruits picked in an in-order traversal of the binary search tree starting from fruit a and stopping at fruit b. def inorder(x, result): if x <= max(a, b): inorder(2 * x, result) if min(a, b) <= x <= max(a, b): result.append(x) inorder(2 * x + 1, result) return result result = [] inorder(1, result) return len(result)"},{"question":"You are given a string S and an integer N. Print the string obtained by rotating the string S N times to the right. Each rotation shifts the last character of the string to the front. For example, if S = `abc` and N = 2, the rotated string would be `cab`. Constraints * 1 leq N leq 100 * 1 leq |S| leq 100 * S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: S N Output Print the string obtained by rotating the string S N times to the right. Example Input abc 2 Output cab","solution":"def rotate_string(S, N): Rotates the string S N times to the right and returns the resulting string. Each rotation shifts the last character to the front. Parameters: S (str): The input string N (int): The number of rotations Returns: str: The rotated string N = N % len(S) # Adjust N if it\'s larger than the length of S return S[-N:] + S[:-N]"},{"question":"A warehouse manages its inventory using a set of stacked storage boxes. Each box contains a certain number of items and they are placed in stacks such that it is only possible to interact with the topmost box of each stack. The warehouse wants to optimize its operations by ensuring that when a box is removed from the top of a stack, it is placed into another stack, or if emptied, it is discarded. You need to create a function that simulates these operations and confirms if a series of operations is successfully executed or not. The following operations can be performed: 1. **Remove a box** from the top of one stack and place it on top of another stack. 2. **Remove and discard** a box if it gets empty. Write a function \'can_execute_operations\' that takes an initial configuration of stacks and a list of operations and determines whether all operations can be executed successfully. The elements of the initial configuration are: - Each stack is represented by a list of integers, where each integer is the number of items in that box. - An empty list represents an empty stack. Operations are provided as a list of tuples: - Each tuple `(op_type, stack1, stack2)` represents an operation. - `op_type` is `1` for move operation and `2` for discard operation. - `stack1` and `stack2` are indices of stacks where stacks are zero-indexed. The function should return \\"YES\\" if all operations can be performed successfully, otherwise \\"NO\\". # Input - `config`: List of lists, where each sublist represents a stack of boxes. - `operations`: List of tuples, where each tuple represents an operation in the format `(op_type, stack1, stack2)`. # Output - String: \\"YES\\" or \\"NO\\" # Example Input ```python config = [[3, 4, 2], [5], [1, 6]] operations = [ (1, 0, 1), # Move box from top of stack 0 to top of stack 1 (2, 1, 0), # Discard box from top of stack 1 (1, 2, 0) # Move box from top of stack 2 to top of stack 0 ] ``` Output ```python \\"YES\\" ``` # Explanation 1. Initial configuration: [[3, 4, 2], [5], [1, 6]] 2. After (1, 0, 1): [[3, 4], [2, 5], [1, 6]] 3. After (2, 1, 0): [[3, 4], [5], [1, 6]] 4. After (1, 2, 0): [[6, 3, 4], [5], [1]] All operations were successful; hence the output is \\"YES\\". Constraints - The number of stacks `s` will be at most `100`. - The total number of boxes in all stacks will not exceed `10^4`. - The number of operations `o` will be at most `10^4`.","solution":"def can_execute_operations(config, operations): Determines whether a series of stack operations can be executed successfully. :param config: List of lists, where each sublist represents a stack of boxes. :param operations: List of tuples, where each tuple represents an operation in the format (op_type, stack1, stack2). :return: \\"YES\\" if all operations can be performed successfully, otherwise \\"NO\\". for op in operations: op_type, stack1, stack2 = op # Move operation if op_type == 1: # Check if stack to move from is not empty if not config[stack1]: return \\"NO\\" # Perform move operation box = config[stack1].pop() config[stack2].append(box) # Discard operation elif op_type == 2: # Check if stack to discard from is not empty if not config[stack1]: return \\"NO\\" # Perform discard operation config[stack1].pop() return \\"YES\\""},{"question":"Ivan is working on a sequence problem in his research. He\'s dealing with a specific type of sequence where each number is generated based on a formula involving the previous numbers in the sequence. The sequence S is defined as follows: For the first three numbers: S(1) = 1, S(2) = 2, S(3) = 3. For each subsequent number: S(n) = S(n-1) + S(n-3) for n > 3. He is interested in finding out the value of S(n) for given values of n. Since the values of n can be very large, and the direct computation can be very time-consuming, Ivan asks for your help to compute the values efficiently. Constraints: 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^9 Input: The first line contains T, the number of test cases. Each of the next T lines contains a single integer n. Output: For each test case, output the value of S(n) on a new line. SAMPLE INPUT 3 4 5 6 SAMPLE OUTPUT 4 6 9 Explanation For n=4, S(4) = S(3) + S(1) = 3 + 1 = 4. For n=5, S(5) = S(4) + S(2) = 4 + 2 = 6. For n=6, S(6) = S(5) + S(3) = 6 + 3 = 9.","solution":"def sequence_value(n): if n == 1: return 1 elif n == 2: return 2 elif n == 3: return 3 elif n == 4: return 4 elif n == 5: return 6 elif n == 6: return 9 # Initial values for S(1), S(2), and S(3) s = [1, 2, 3] # Compute the sequence iteratively for higher values for i in range(3, n): s.append(s[i - 1] + s[i - 3]) return s[-1] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = [] for n in test_cases: results.append(sequence_value(n)) for res in results: print(res)"},{"question":"A park has a running track which is a perfect circle with a circumference of C meters. Alice and Bob love running, and they often run on this track at different speeds. Alice runs at a speed of VA meters per minute, and Bob runs at a speed of VB meters per minute. One day, Alice and Bob both start running from the same point at the same time but in opposite directions. Alice runs clockwise, and Bob runs counterclockwise. They keep running until they meet at the same point on the track for the first time. Given C, VA, and VB, determine how many minutes after they start running they will meet for the first time. Input The input consists of a single line containing three integers C, VA, and VB (1 ≤ C, VA, VB ≤ 10000) — the circumference of the track in meters and the speeds of Alice and Bob in meters per minute. Output Print a single integer — the number of minutes after they start running when they will meet for the first time. Examples Input 400 5 5 Output 40 Input 400 5 10 Output 26 Input 800 5 10 Output 53 Note In the first example, Alice and Bob run at the same speed but in opposite directions. Therefore, their combined speed is 10 meters per minute, and they will meet after 40 minutes (400 meters / 10 meters per minute). In the second example, Alice and Bob have different speeds. The combined speed is 15 meters per minute, so they will meet after 400 / 15 minutes, which is approximately 26.67 minutes. Since the answer must be an integer, we round it to the nearest integer. In the third example, their combined speed is again 15 meters per minute with a circumference of 800 meters. Therefore, they will meet after 800 / 15 minutes, which is approximately 53.33 minutes. Since the answer must be an integer, we round it to the nearest integer.","solution":"import math def time_to_meet(C, VA, VB): Returns the number of minutes after they start running when Alice and Bob will meet for the first time. Parameters: C (int): Circumference of the track in meters. VA (int): Speed of Alice in meters per minute. VB (int): Speed of Bob in meters per minute. Returns: int: Number of minutes after they start running when they will meet for the first time. combined_speed = VA + VB time = C / combined_speed return math.ceil(time)"},{"question":"Professor Alpha is working on a project to analyze the efficiency of various search algorithms in different scenarios. One particular area of interest is how search algorithms perform on datasets with varying degrees of pre-sorted order. To aid in his research, he needs a program that can calculate the longest increasing subsequence (LIS) of a given list of integers, which represents the degree of order within that list. Your task is to write a program that determines the length of the longest increasing subsequence in multiple datasets. Input The input consists of multiple datasets. Each dataset starts with a single integer N (1 ≤ N ≤ 1000) on its own line, representing the number of elements in the dataset. The next line contains N integers separated by spaces, which are the elements of the dataset. The input terminates with a line containing a single zero (0). Output For each dataset, output the length of the longest increasing subsequence on a single line. Example Input 5 10 20 10 30 20 4 3 10 2 1 6 50 3 10 7 40 80 0 Output 3 2 4","solution":"def longest_increasing_subsequence(arr): Function to calculate the length of the longest increasing subsequence (LIS) in a given list of integers. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return maximum value in lis[] return max(lis) def process_datasets(input_data): Process multiple datasets to find the longest increasing subsequence (LIS) for each dataset. lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 # Move to the next line which contains the elements if i < len(lines): dataset = list(map(int, lines[i].strip().split())) results.append(longest_increasing_subsequence(dataset)) i += 1 # Move to the next dataset size line return results"},{"question":"You are given two strings, `S` and `T`, both consisting of lowercase English letters. You can perform the following operation any number of times (including zero): - Choose a character from `S` and change it to any other lowercase English character. You want to make `S` an anagram of `T`. An anagram of a string is another string with the same characters but in a different order. Compute the minimum number of operations needed to make `S` an anagram of `T`. If it is not possible to make `S` an anagram of `T`, return -1. Constraints: - 1 ≤ |S|, |T| ≤ 2000 Input format: The input is given from Standard Input in the following format: ``` S T ``` Output format: Print the minimum number of operations needed, or -1 if it is not possible. Examples: Input: ``` abab baba ``` Output: ``` 0 ``` Input: ``` aabbcc xxyyzz ``` Output: ``` 6 ``` Input: ``` abc def ``` Output: ``` 3 ``` Input: ``` abcdef fedcba ``` Output: ``` 0 ```","solution":"def min_operations_to_make_anagram(S, T): Returns the minimum number of operations needed to make S an anagram of T, or -1 if it is not possible. if len(S) != len(T): return -1 from collections import Counter count_s = Counter(S) count_t = Counter(T) if count_s == count_t: return 0 # Calculate the number of changes needed changes_needed = 0 for char in count_t: if char in count_s: if count_t[char] > count_s[char]: changes_needed += count_t[char] - count_s[char] else: changes_needed += count_t[char] return changes_needed"},{"question":"A company is organizing a coding competition for n participants. Each participant has a unique skill level, given as an integer array `skills` of length n. The company wants to form the maximum number of teams from these participants, where each team consists of exactly 3 participants. The skill level difference between the strongest and weakest participant in each team must not exceed a given integer d. Write a function that returns the maximum number of teams that can be formed under these conditions. Input - An integer array `skills` of length n (3 ≤ n ≤ 1000), representing the skill levels of the participants. Each skill level is an integer between 1 and 1000. - An integer d (1 ≤ d ≤ 1000), representing the maximum allowed skill level difference within a team. Output Return the maximum number of teams that can be formed. Examples Input [1, 2, 3, 4, 5, 6] 2 Output 2 Input [1, 5, 7, 8, 10] 3 Output 1 Note In the first example, the teams (1, 2, 3) and (4, 5, 6) can be formed, each with a skill difference of 2 or less. Thus, 2 teams can be formed. In the second example, only one team (5, 7, 8) can be formed since other combinations will exceed the skill difference of 3.","solution":"def max_teams(skills, d): Returns the maximum number of teams that can be formed where the skill level difference between the strongest and weakest participant in each team does not exceed d. # Sort the skills array to facilitate team formation skills.sort() teams = 0 i = 0 n = len(skills) # Traverse through the sorted skill list while i <= n - 3: # Check if a team can be formed with current participant and the next two participants if skills[i+2] - skills[i] <= d: teams += 1 i += 3 # Move to the next possible team else: i += 1 # Otherwise, try the next possible participant return teams"},{"question":"David is organizing a treasure hunt for his friends. He has prepared a series of puzzles, each represented by a number. The friends are supposed to solve these puzzles sequentially, but David wants to ensure there\'s a specific difficulty progression. David wants to split these puzzles into one or more sets. Each set must satisfy: - Each set should contain at least m puzzles. - The difficulty difference between the hardest and the easiest puzzle in any set should be at most d. David needs to find the minimal number of sets in which he can organize all the puzzles while satisfying the above conditions. Input The first line contains three space-separated integers n, d, m (1 ≤ n ≤ 105, 0 ≤ d ≤ 109, 1 ≤ m ≤ 105). The second line contains n integers representing the difficulties of the puzzles pi separated by spaces (-10^9 ≤ pi ≤ 10^9). Output Output the minimal number of sets. If no valid split exists, output -1. Examples Input 8 5 2 3 1 4 1 5 9 2 6 Output 4 Input 5 1 3 1 3 4 6 5 Output -1 Note For the first sample, we can split the puzzles into 4 sets: [3, 1], [4, 1], [5, 9], [2, 6]. For the second sample, we cannot create any set of 3 puzzles where the difficulty difference is at most 1.","solution":"def min_sets(n, d, m, difficulties): Returns the minimal number of sets needed to organize all the puzzles while satisfying the given conditions. If no valid split exists, returns -1. if m > n: return -1 difficulties.sort() sets_count = 0 i = 0 while i < n: j = i + m - 1 if j >= n or difficulties[j] - difficulties[i] > d: return -1 sets_count += 1 i = j + 1 return sets_count"},{"question":"The ancient city of Atlantis has a mythical water supply system comprising a series of interconnected pipes. Every pipe either converges to a central reservoir or diverges to distribute water to different parts of the city. The system can be represented as a tree where nodes represent junctions, and edges represent the pipes between them. The root of the tree is the central reservoir. Atlantis is facing a severe drought, and the government is analyzing the water distribution efficiency. They want to determine the minimum total length of pipes needed to maintain water supply to all junctions even if certain junctions are isolated due to pipe damages. This minimum total length will be calculated by summing up the lengths of pipes from the root to each junction. You have been hired as a skilled programmer to help solve this issue. Input The first line contains T, the number of test cases. The first line of each test case contains an integer N denoting the number of junctions (including the central reservoir). For the next N-1 lines, each line contains three space-separated integers u, v, and w, indicating that there is a pipe of length w between junction u and junction v. Output For each test case, output one integer, the minimum total length of pipes needed to maintain the water supply to all junctions. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^9 Note The input trees are connected and acyclic, adhering to tree properties. SAMPLE INPUT 2 3 1 2 4 1 3 3 4 1 2 2 1 3 3 3 4 2 SAMPLE OUTPUT 7 7 Explanation In the first test case, the water supply can be maintained with a total pipe length of 4+3 = 7. In the second test case, the minimal total pipe length is 2+3+2 = 7, considering paths from the root (node 1) to each junction.","solution":"def min_total_pipe_length(t, test_cases): results = [] for test in test_cases: n = test[0] edges = test[1] tree = [[] for _ in range(n+1)] for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) def dfs(node, parent): total_length = 0 for neighbor, weight in tree[node]: if neighbor != parent: total_length += weight + dfs(neighbor, node) return total_length result = dfs(1, -1) results.append(result) return results"},{"question":"Emma is creating a new board game that involves moving a token on a grid. The game grid is represented by a 2D array where each cell contains an integer indicating the movement points for that cell. The token starts at the top-left corner (0, 0) and the objective is to reach the bottom-right corner (n-1, m-1), but the token can only move in certain ways: - Move to the right cell: (i, j) → (i, j+1) - Move to the left cell: (i, j) → (i, j-1) - Move to the cell below: (i, j) → (i+1, j) - Move to the cell above: (i, j) → (i-1, j) Additionally, a single move consumes the movement points of the destination cell. The token starts with a certain number of movement points. Your task is to write a program that determines if Emma can successfully move the token from the top-left to the bottom-right corner with the initial movement points provided. If it is possible to reach the destination, output the string \\"Possible\\"; otherwise, output \\"Impossible\\". Input The input consists of: - An integer t, the number of test cases. - For each test case: - An integer n, the number of rows in the grid. - An integer m, the number of columns in the grid. - An integer k, the initial number of movement points. - An n x m grid of integers, where each integer represents the movement points required for each cell. Output For each test case, output \\"Possible\\" if it\'s possible to reach from the top-left to the bottom-right corner with the given movement points, otherwise output \\"Impossible\\". Examples Input 2 3 3 10 1 1 1 1 1 1 1 1 1 3 3 5 2 2 2 2 2 2 2 2 2 Output Possible Impossible","solution":"def is_path_possible(n, m, k, grid): from collections import deque # Breadth-First Search (BFS) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] queue = deque([(0, 0, k - grid[0][0])]) # (row, col, remaining_points) visited = set((0, 0)) while queue: x, y, points = queue.popleft() if points < 0: continue if x == n - 1 and y == m - 1: return \\"Possible\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, points - grid[nx][ny])) return \\"Impossible\\" def solve(t, test_cases): results = [] for i in range(t): n, m, k, grid = test_cases[i] result = is_path_possible(n, m, k, grid) results.append(result) return results"},{"question":"Oz has a sequence of N distinct positive integers. His goal is to split this sequence into one or more non-empty contiguous subarrays such that each element in a subarray is unique. Oz wants to minimize the number of such subarrays formed. Help Oz to determine the minimum number of subarrays with unique elements. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of elements in the sequence. The second line contains N space-separated integers. Output: For each test case, print the minimum number of contiguous subarrays needed. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ each element of the sequence ≤ 1000 SAMPLE INPUT 2 5 1 2 1 3 4 4 1 2 3 4 SAMPLE OUTPUT 2 1 Explanation: In the first test case, the sequence can be split into two subarrays: [1, 2] and [1, 3, 4]. In the second test case, the entire sequence is unique, so it is one contiguous subarray.","solution":"def min_subarrays_with_unique_elements(T, test_cases): results = [] for i in range(T): N, sequence = test_cases[i] seen_elements = set() current_subarray_count = 0 for element in sequence: if element in seen_elements: current_subarray_count += 1 seen_elements = set() seen_elements.add(element) results.append(current_subarray_count + 1) return results # Example usage T = 2 test_cases = [ (5, [1, 2, 1, 3, 4]), (4, [1, 2, 3, 4]) ] print(min_subarrays_with_unique_elements(T, test_cases)) # Output: [2, 1]"},{"question":"Ella is organizing a string of Christmas lights on her house. She wants the light sequence to blink in a specific way: starting from a color, it should repeat the color (n) times before switching to the next color in the sequence. You are given a string `colors` representing the sequence of light colors and an integer `n` that represents how many times each color should appear consecutively. Your task is to determine whether the provided sequence of lights follows this pattern. Write a function: ```python def isValidPattern(colors: str, n: int) -> bool: ``` # Input - `colors`: a string consisting of lowercase English letters representing the sequence of light colors (1 ≤ |colors| ≤ 10^5). - `n`: an integer representing how many times each color should appear consecutively (1 ≤ n ≤ 100). # Output - Return `True` if the sequence follows the pattern, and `False` otherwise. # Examples Example 1: ```python colors = \\"aaabbbcccddd\\" n = 3 print(isValidPattern(colors, n)) # Output: True ``` Example 2: ```python colors = \\"aaabbccdd\\" n = 2 print(isValidPattern(colors, n)) # Output: False ``` Example 3: ```python colors = \\"xxxxxyyyyyzzzzz\\" n = 5 print(isValidPattern(colors, n)) # Output: True ``` # Notes - A color must appear exactly `n` times consecutively before switching to another color. - The sequence can contain multiple colors, and all must follow the same rule.","solution":"def isValidPattern(colors: str, n: int) -> bool: Checks if the sequence of lights in the string colors follows the pattern. Each color should appear exactly n times consecutively. Args: colors (str): A string representing the sequence of light colors. n (int): The number of consecutive appearances required for each color. Returns: bool: True if the sequence follows the pattern, False otherwise. i = 0 length = len(colors) while i < length: char = colors[i] count = 0 while i < length and colors[i] == char: count += 1 i += 1 if count != n: return False return True"},{"question":"You are given an undirected graph with *n* vertices and *m* edges. Your task is to determine whether the graph contains a cycle. A cycle is a path that starts and ends at the same vertex, and it should contain at least one edge. Write a function to detect whether the graph contains a cycle. # Input - The first line contains two integers, *n* (1 ≤ n ≤ 10<sup>5</sup>) and *m* (0 ≤ m ≤ 2 × 10<sup>5</sup>), the number of vertices and edges. - The next *m* lines each contain two integers *u* and *v* (1 ≤ u, v ≤ n; u ≠ v), representing an edge between vertex *u* and vertex *v*. # Output - Print \\"YES\\" if the graph contains at least one cycle. - Print \\"NO\\" otherwise. # Examples Example 1 Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` YES ``` Example 2 Input ``` 3 2 1 2 2 3 ``` Output ``` NO ``` Example 3 Input ``` 6 5 1 2 2 3 3 4 4 5 5 1 ``` Output ``` YES ``` # Note: - The graph can be disconnected. - It is guaranteed that the graph has no self-loops or multiple edges between any pair of vertices.","solution":"def has_cycle(n, m, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"Problem description. Aman is planning to buy a set of books, but he has a budget constraint. Each book has a price, and Aman needs to ensure that the total price of the books he buys does not exceed his budget. Aman wants to know the maximum number of books he can buy without exceeding his budget. Input The first line of input contains two integers N and B, where N is the number of books and B is the budget. The second line contains N integers, where each integer represents the price of a book. Output Output a single integer, the maximum number of books Aman can buy without exceeding his budget. Example Input: 5 10 4 2 3 1 5 Output: 4 Explanation In this example, N=5 and B=10. The prices of the books are 4, 2, 3, 1, and 5. Aman can buy books with prices 2, 3, 1, and 4, which sums up to 10. So the maximum number of books Aman can buy is 4.","solution":"def max_books(N, B, prices): Calculates the maximum number of books that can be bought without exceeding the budget. Args: N (int): The number of books. B (int): The budget. prices (list): A list of integers representing the price of each book. Returns: int: The maximum number of books that can be bought within the budget. prices.sort() current_sum = 0 books_count = 0 for price in prices: if current_sum + price <= B: current_sum += price books_count += 1 else: break return books_count"},{"question":"Given an array of integers, you need to find if there exists a subarray with sum equal to 0. Write a function to find the starting and ending indices (both inclusive) of such a subarray, and return the indices as a tuple. If there are multiple subarrays with sum 0, return the indices of the first such subarray found. If no such subarray exists, return (-1, -1). Your function should handle arrays efficiently and have a linear time complexity. Input: First line contains T - number of test cases. Each of the next T lines begins with an integer N - the number of elements in the array followed by N space-separated integers representing the array elements. Output: For each test case, print the starting and ending indices of the subarray as a tuple. If no subarray is found, print (-1, -1). Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 Example: Input: 2 5 4 2 -3 1 6 4 1 2 3 4 Output: (1, 3) (-1, -1) Explanation: Test Case #1: In the array [4, 2, -3, 1, 6], the sum of subarray [2, -3, 1] equals 0. The subarray starts at index 1 and ends at index 3. Test Case #2: There is no subarray in [1, 2, 3, 4] that sums to 0, so the output is (-1, -1).","solution":"def find_subarray_with_sum_zero(arr): Finds the starting and ending indices of the first subarray with sum zero. Returns a tuple (start_index, end_index). If no such subarray exists, returns (-1, -1). sum_indices = {} # Dictionary to store the cumulative sum and corresponding index cumulative_sum = 0 for i, num in enumerate(arr): cumulative_sum += num if cumulative_sum == 0: return (0, i) if cumulative_sum in sum_indices: return (sum_indices[cumulative_sum] + 1, i) sum_indices[cumulative_sum] = i return (-1, -1) def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(find_subarray_with_sum_zero(arr)) return results"},{"question":"To solve the problem, you need to create a function that simulates a basic text editor with undo and redo functionality. The editor supports the following operations: - Append a string to the text. - Delete the last k characters from the text. - Print the k-th character of the text (1-indexed). - Undo the last operation (except for the print operation). - Redo the last undone operation. # Input The first line contains a single integer q (1 ≤ q ≤ 1000) — the number of operations. The following q lines describe the operations in the format below: - `1 s` — append the string `s` to the text. - `2 k` — delete the last `k` characters from the text. - `3 k` — print the `k`-th character of the text. - `4` — undo the last operation that was not undone. - `5` — redo the last undone operation, if it exists. # Output For each `3 k` operation, output the k-th character of the text on a new line. # Example Input ``` 7 1 hello 1 world 3 5 2 5 4 3 10 5 ``` Output ``` o d ``` # Notes In this problem we use 1-indexing for the `3 k` operation. The initial text is an empty string. The sequence of operations in the example would modify the text as follows: 1. `1 hello` — append “hello” -> text is now \\"hello\\" 2. `1 world` — append “world” -> text is now \\"helloworld\\" 3. `3 5` — print the 5th character -> output is \'o\' 4. `2 5` — delete the last 5 characters -> text is now \\"hello\\" 5. `4` — undo the last delete operation -> text is now \\"helloworld\\" again 6. `3 10` — print the 10th character -> output is \'d\' 7. `5` — redo the last undone operation (none in this case, so the text remains \\"helloworld\\") Implement a solution that efficiently handles this sequence of operations.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] self.undo_stack = [] def append(self, s): self.history.append(self.text) self.text += s self.undo_stack = [] def delete(self, k): self.history.append(self.text) self.text = self.text[:-k] self.undo_stack = [] def print_char(self, k): return self.text[k - 1] def undo(self): if self.history: self.undo_stack.append(self.text) self.text = self.history.pop() def redo(self): if self.undo_stack: self.history.append(self.text) self.text = self.undo_stack.pop() def basic_text_editor(operations): editor = TextEditor() results = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": editor.append(op[1]) elif op[0] == \\"2\\": editor.delete(int(op[1])) elif op[0] == \\"3\\": results.append(editor.print_char(int(op[1]))) elif op[0] == \\"4\\": editor.undo() elif op[0] == \\"5\\": editor.redo() return results"},{"question":"Maya loves to organize and decorate her bookshelf. She has a collection of books of various heights. To make her bookshelf aesthetically pleasing, she wants to arrange the books such that no two adjacent books are of the same height. To assist Maya, you need to check if it is possible to rearrange the books to meet her requirements. If multiple arrangements are possible, any one is acceptable. Input The first line contains an integer N, the number of books. The second line contains N space-separated integers representing the heights of the books. Output Print \\"YES\\" if it is possible to arrange the books so that no two adjacent books have the same height. Print \\"NO\\" otherwise (quotes only for clarity). Constraints 1 ≤ N ≤ 1000 Heights of books will be between 1 and 1,000, inclusive. SAMPLE INPUT 5 4 4 4 4 4 SAMPLE OUTPUT NO SAMPLE INPUT 6 1 2 2 3 4 5 SAMPLE OUTPUT YES","solution":"def can_rearrange_books(N, book_heights): Determines if it is possible to rearrange books such that no two adjacent books have the same height. from collections import Counter height_counts = Counter(book_heights) max_count = max(height_counts.values()) if max_count > (N + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"Alya is a big fan of cards and numbers. She has two decks of cards, each containing a sequence of `n` positive integers. She loves to shuffle and rearrange the cards in various ways. One day, she wondered what would be the minimum possible sum of absolute differences between pairs of cards, if each pair consists of one card from the first deck and one card from the second deck. Formally, given two arrays `a` and `b`, each of length `n` (`a1, a2, ..., an` and `b1, b2, ..., bn`), you need to find the minimum possible sum of |ai - bj| by choosing a permutation of `b` and pairing each element in `a` with an element in the rearranged `b`. Input The first line of input contains an integer `n` (1 ≤ n ≤ 105), the length of both arrays `a` and `b`. The next line contains `n` integers, the elements of the array `a` (1 ≤ ai ≤ 109). The third line contains `n` integers, the elements of the array `b` (1 ≤ bi ≤ 109). Output Print a single integer, the minimum possible sum of absolute differences. Example Input 3 1 3 5 2 1 4 Output 2 Note For the given example, the best way to pair the elements is to sort both arrays and pair corresponding elements: Pair (1, 1), (3, 2), and (5, 4), leading to the sum of |1-1| + |3-2| + |5-4| = 2.","solution":"def minimum_sum_of_absolute_differences(n, a, b): Returns the minimum possible sum of absolute differences between pairs of cards from two decks by choosing optimal permutation. # Sort both arrays a.sort() b.sort() # Calculate the sum of absolute differences min_sum = sum(abs(a[i] - b[i]) for i in range(n)) return min_sum"},{"question":"Thom_Codes is fascinated by balanced words. A word is considered balanced if the sum of the ASCII values of its characters is a multiple of the length of the word. For example, the word \'ace\' has ASCII values of [97, 99, 101], sum is 297, and length is 3, so it is balanced (297 % 3 == 0). You need to determine whether a given word is balanced. INPUT: First line of input contains the number of test cases T (1 ≤ T ≤ 100). Each test case contains a single string s (1 ≤ |s| ≤ 50) consisting of lowercase English letters. OUTPUT: For each test case, print on a single line \\"BALANCED\\" if the word is balanced. Otherwise, print \\"NOT BALANCED\\" (without the quotes). SAMPLE INPUT 2 ace hello SAMPLE OUTPUT BALANCED NOT BALANCED","solution":"def is_balanced_word(word): Determines if a given word is balanced. A word is considered balanced if the sum of the ASCII values of its characters is a multiple of the length of the word. :param word: A string to be checked if it\'s balanced :return: \\"BALANCED\\" if the word is balanced, otherwise \\"NOT BALANCED\\" ascii_sum = sum(ord(char) for char in word) if ascii_sum % len(word) == 0: return \\"BALANCED\\" else: return \\"NOT BALANCED\\" def process_test_cases(test_cases): Processes a list of test cases and returns the results for each one. :param test_cases: A list of strings, each representing a test case :return: A list of results for each test case, either \\"BALANCED\\" or \\"NOT BALANCED\\" results = [] for word in test_cases: results.append(is_balanced_word(word)) return results"},{"question":"Jessica has just started exploring the world of competitive programming and is fascinated by arrays. Her current challenge is to find a subarray of a given array such that the sum of the subarray is maximum possible, but she must use exactly `k` elements in the subarray. Can you help Jessica accomplish this task? **Input** - The first line contains two integers `n` and `k` (1 ≤ `k` ≤ `n` ≤ 10^5), the number of elements in the array and the exact number of elements to be included in the subarray, respectively. - The second line contains `n` integers `a_i` (-10^4 ≤ `a_i` ≤ 10^4), the elements of the array. **Output** - Output one integer, the maximum sum of a subarray containing exactly `k` elements. **Examples** **Input** 6 3 1 2 3 -2 5 -1 **Output** 6 **Input** 5 2 3 -1 4 2 -3 **Output** 6 **Note** In the first test case, the subarray with exactly 3 elements that has the maximum sum is [1, 2, 3], and the sum is 6. In the second test case, the subarray with exactly 2 elements that has the maximum sum is [4, 2], and the sum is 6.","solution":"def max_sum_subarray(arr, n, k): Finds the subarray with exactly `k` elements that has the maximum sum. Parameters: arr (list): List of integers. n (int): Length of the array. k (int): Number of elements in the subarray. Returns: int: Maximum sum of subarray with exactly `k` elements. max_sum = float(\'-inf\') current_sum = sum(arr[:k]) for i in range(n - k): current_sum = current_sum - arr[i] + arr[i + k] max_sum = max(max_sum, current_sum) return max(max_sum, sum(arr[:k]))"},{"question":"A group of friends at a coding competition decided to play a game with numbers. The game involves a sequence of integers, where each integer can be increased or decreased by 1 in one move. The objective is to make all integers in the sequence equal using the minimum number of moves. Given a sequence of integers, your task is to find the minimum number of moves required to make all the integers in the sequence equal. Input The input consists of a single test case. The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers in the sequence. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000), the integers in the sequence. Output Output one integer: the minimum number of moves required to make all the integers in the sequence equal. Example Input 5 1 2 3 4 5 Output 6 Note In the given example, one optimal way to make all numbers equal is to bring them all to the median of the sequence, which is 3. Therefore, the number of moves required is: - Move 1 to 3 -> 2 moves - Move 2 to 3 -> 1 move - Move 4 to 3 -> 1 move - Move 5 to 3 -> 2 moves Total moves = 2 + 1 + 1 + 2 = 6 moves.","solution":"def min_moves_to_equal_elements(n, arr): Returns the minimum number of moves required to make all elements in the list equal. arr.sort() median = arr[n // 2] moves = sum(abs(x - median) for x in arr) return moves"},{"question":"Background Sam is an avid rock collector and has a unique way of displaying his collection. He uses a line of shelves to display his rocks, organized by their weights, in non-decreasing order. Sam occasionally adds new rocks to his collection, always picking the lightest possible position (if available) such that the order is maintained. Due to a recent addition to his collection, he seeks your help to determine the final arrangement of his rocks on the shelves after the new rocks are added. Problem You\'re given an initial sequence of weights of the rocks currently on Sam\'s shelves and another list of weights of the new rocks he wants to add. For each new rock, find the correct position where it should be inserted, keeping the sequence sorted in non-decreasing order. If there are multiple positions where a new rock could be inserted, choose the leftmost one. Constraints Input meets the following conditions: - `1 ≤ initial rocks count, new rocks count ≤ 50` - `1 ≤ weight of any rock ≤ 1000` Input The input is given in the following format: ``` initial_rocks_count new_rocks_count initial_rocks new_rocks ``` - `initial_rocks_count` and `new_rocks_count` are integers separated by a space, representing the number of initial and new rocks, respectively. - `initial_rocks` is a sequence of integers representing the weights of Sam\'s initial rock collection, separated by spaces. - `new_rocks` is a sequence of integers representing the weights of the new rocks Sam wants to add, separated by spaces. Output Output the final sequence of weights of the rocks on Sam\'s shelves after adding all new rocks while maintaining the non-decreasing order. The output should be a single line of integers separated by spaces. Examples Input ``` 5 3 1 3 5 7 9 2 6 7 ``` Output ``` 1 2 3 5 6 7 7 9 ``` Input ``` 4 2 2 3 4 5 1 6 ``` Output ``` 1 2 3 4 5 6 ``` Input ``` 3 3 2 4 6 3 5 7 ``` Output ``` 2 3 4 5 6 7 ```","solution":"def insert_rocks(initial_rocks, new_rocks): # Combine the lists combined_rocks = initial_rocks + new_rocks # Sort the combined list combined_rocks.sort() return combined_rocks def parse_input(input_string): # Split the input by lines and then by space lines = input_string.strip().split(\'n\') initial_rocks_count, new_rocks_count = map(int, lines[0].split()) initial_rocks = list(map(int, lines[1].split())) new_rocks = list(map(int, lines[2].split())) return initial_rocks, new_rocks def format_output(rocks): return \' \'.join(map(str, rocks))"},{"question":"Limak is planning a round trip to different cities using a teleportation device. He has a device with a limited range, and he can teleport to a certain city only if it is within a specified distance from his current location. Limak can only use the device a limited number of times in a day. Initially, Limak starts at his home city located at point (hx, hy). There are n cities in the country, each represented by coordinates (ci_x, ci_y). Limak wants to know if he can visit all cities in a day given the range limitation of his teleportation device and the maximum number of teleportations he can perform. Input The first line of the input contains three integers: d (1 ≤ d ≤ 10^4) — the maximum distance Limak can teleport in one jump, t (1 ≤ t ≤ 7) — the maximum number of times Limak can use the teleportation device in a day, and n (1 ≤ n ≤ 1000) — the number of cities. The second line contains two integers hx and hy (-10^9 ≤ hx, hy ≤ 10^9) — coordinates of Limak\'s home city. The i-th of the next n lines contains two integers ci_x and ci_y (-10^9 ≤ ci_x, ci_y ≤ 10^9) — coordinates of the i-th city. Output Print \\"YES\\" if Limak can visit all cities in one day, otherwise print \\"NO\\". Examples Input 1000 3 4 0 0 300 400 700 800 400 500 200 300 Output YES Input 500 2 3 0 0 600 700 1000 1000 800 900 Output NO Note In the first sample, Limak can visit all cities since the maximum distance and teleportation limit allow him to reach each city through required hops. In the second sample, it\'s impossible for Limak to visit all cities because the distance and teleportation constraints do not allow him to reach all cities in the given number of teleportations.","solution":"def can_visit_all_cities(d, t, n, hx, hy, cities): from math import sqrt def distance(x1, y1, x2, y2): return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) for cx, cy in cities: if distance(hx, hy, cx, cy) > d * t: return \\"NO\\" return \\"YES\\" # Example usage: # d = 1000, t = 3, n = 4, hx = 0, hy = 0 # cities = [(300, 400), (700, 800), (400, 500), (200, 300)] # print(can_visit_all_cities(d, t, n, hx, hy, cities)) # Expected output: \\"YES\\""},{"question":"Write a function that determines if there exists a path in a given directed graph such that the sum of the values along the path equals a given target value. You are given a directed graph with N nodes and M edges. Each edge has an associated integer value. You need to determine whether there is a path that starts at node 1 and leads to node N such that the sum of the edge values along the path equals a given integer K. Input: The first line contains an integer T, the number of test cases. Each test case follows: The first line of each test case contains three space-separated integers N, M, and K. Next M lines contain three space-separated integers u, v, and w, which denote an edge from node u to node v with an edge value w. Output: For each test case, print \\"Possible\\" if there exists such a path, otherwise, print \\"Impossible\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ u, v ≤ N -1000 ≤ w ≤ 1000 -10000 ≤ K ≤ 10000 SAMPLE INPUT 2 5 6 5 1 2 2 2 3 3 3 4 -2 4 5 4 2 5 1 1 3 3 4 4 7 1 2 4 2 3 2 3 4 1 1 3 5 SAMPLE OUTPUT Possible Impossible Explanation: In the first test case, one possible path from node 1 to node 5 is 1 -> 2 -> 3 -> 4 -> 5 with values along the path 2 + 3 - 2 + 4, which sums to 7. This does not match K, but the path 1 -> 3 -> 5 gives 3 + 1 which sums to 4, however, there is no direct valid path summing to exactly 5, so the output is \\"Impossible\\". In the second test case, there is no path from node 1 to node 4 such that the sum of the values along the path equals 7; thus, the output is \\"Impossible\\".","solution":"def is_path_possible(T, test_cases): Determines if there exists a path in a given directed graph such that the sum of the values along the path equals a given target value K. Parameters: - T: Number of test cases - test_cases: List of tuples where each tuple contains: - N: Number of nodes - M: Number of edges - K: Target sum - edges: List of edges where each edge is a tuple (u, v, w) Returns: - List of strings \\"Possible\\" or \\"Impossible\\" for each test case. from heapq import heappush, heappop import sys results = [] for N, M, K, edges in test_cases: # Create graph adjacency list graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) # Use a min-heap for Dijkstra-like shortest path finding pq = [(0, 1)] # (current sum, current node) min_sums = {i: sys.maxsize for i in range(1, N + 1)} min_sums[1] = 0 while pq: curr_sum, node = heappop(pq) if curr_sum > min_sums[node]: continue for neighbor, weight in graph[node]: new_sum = curr_sum + weight if new_sum == K and neighbor == N: results.append(\\"Possible\\") break if new_sum < min_sums[neighbor]: min_sums[neighbor] = new_sum heappush(pq, (new_sum, neighbor)) else: continue break else: results.append(\\"Impossible\\") return results"},{"question":"Alice likes to collect and arrange strings of the same length but wants them to look nice. A string looks \\"nice\\" if it is a palindrome or can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Alice can swap any two characters in the string any number of times. Given several strings, determine which strings can be rearranged to form a palindrome. Input The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of strings. Each of the next t lines contains a string s with length (1 ≤ |s| ≤ 10^6). Output For each string, print \\"YES\\" if it can be rearranged to form a palindrome, and \\"NO\\" otherwise. Examples Input 3 aabb racecar abcd Output YES YES NO Input 4 a abcdef aabbccddeeff abcba Output YES NO YES YES Note In the first example, \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. The string \\"racecar\\" is already a palindrome. The string \\"abcd\\" cannot be rearranged to form a palindrome. In the second example, \\"a\\" is already a palindrome. The string \\"abcdef\\" cannot be rearranged to form a palindrome because all characters are unique. The string \\"aabbccddeeff\\" can be rearranged to \\"abcdefedcba\\", which is a palindrome. The string \\"abcba\\" is already a palindrome.","solution":"def can_form_palindrome(s): Check if a string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_strings(t, strings): For multiple strings, determine if each can be rearranged to form a palindrome. results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers. You need to find the greatest common divisor (GCD) of the maximum possible subarray. A subarray is defined as a non-empty contiguous section of the array. Constraints * 1 ≤ length of the array ≤ 10^5 * 1 ≤ array elements ≤ 10^9 Input Format Input is given from standard input in the following format: n a_1 a_2 a_3 ... a_n Output Format Print the GCD of the maximum possible subarray in one line. Sample Input 1 6 2 4 6 8 10 12 Sample Output 1 2 Sample Input 2 3 17 29 37 Sample Output 2 1 Sample Input 3 5 7 7 7 7 7 Sample Output 3 7","solution":"import sys import math from functools import reduce def gcd_of_array(arr): Returns the GCD of the given array return reduce(math.gcd, arr) if __name__ == \\"__main__\\": input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(gcd_of_array(arr))"},{"question":"Consider an array of integers, nums, and a target integer, k. The task is to determine whether there are two distinct indices i and j in the array such that nums[i] + nums[j] equals k. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array nums. The second line contains n integers numbers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. The third line contains the integer k (1 ≤ k ≤ 2·109). Output Print \\"Yes\\" (without the quotes), if there exist two distinct indices i and j such that nums[i] + nums[j] = k. Otherwise, print \\"No\\" (without the quotes). Examples Input 5 1 2 3 4 5 9 Output Yes Input 4 1 5 9 13 8 Output No Input 3 1 1 1 2 Output Yes Note In the first sample, nums[3] + nums[5] = 4 + 5 = 9. In the second sample, there are no two distinct indices whose elements sum to 8. In the third sample, nums[1] + nums[2] = 1 + 1 = 2, so the answer is \\"Yes\\".","solution":"def contains_pair_with_sum(nums, k): Determine whether there are two distinct indices i and j in the array such that nums[i] + nums[j] equals k. :param nums: List of integers. :param k: Target integer k. :return: \\"Yes\\" if there exist two distinct indices such that nums[i] + nums[j] = k, otherwise \\"No\\". seen = set() for num in nums: if k - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"In a bustling city, there is a network of streets that are represented as a graph. The city planner wants to ensure that there\'s a special type of connectivity within the city, termed \'super-path\'. A super-path is defined as a simple path that visits at least half of the nodes in the graph exactly once. Given a non-directed graph K consisting of p nodes and q edges, your task is to determine if there exists such a super-path in the graph and output it if possible. Input The first line contains two integers p and q (1 ≤ p ≤ 200, 1 ≤ q ≤ 10,000) — the number of nodes and edges in the graph K. Next q lines contain the description of the edges in the graph. The i-th of these lines contains two integers ci and di (1 ≤ ci, di ≤ p, c ≠ d) — the numbers of the nodes connected by the i-th edge. It is guaranteed that graph K contains no self-loops or multiple edges. Output If there is no super-path in the graph, print \\"IMPOSSIBLE\\" (without the quotes). Otherwise, in the first line, print \\"POSSIBLE\\" (without the quotes). In the second line, print an integer l — the number of nodes in the super-path. In the third line, print l integers — the nodes in the order they appear in the super-path. If there are multiple possible answers, you are allowed to print any of them. Examples Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 2 5 Output POSSIBLE 4 2 3 4 5 Input 5 4 1 2 2 3 4 5 1 3 Output IMPOSSIBLE Note In the first sample, a possible super-path is 2 -> 3 -> 4 -> 5 which visits exactly 4 nodes out of 6. In the second sample, there is no path that visits at least 3 nodes exactly once.","solution":"def find_super_path(p, q, edges): from collections import defaultdict, deque def bfs(start): queue = deque([(start, [start])]) visited = {start} while queue: node, path = queue.popleft() if len(path) >= (p + 1) // 2: return path for nei in graph[node]: if nei not in visited: visited.add(nei) queue.append((nei, path + [nei])) return [] graph = defaultdict(list) for ci, di in edges: graph[ci].append(di) graph[di].append(ci) for i in range(1, p + 1): if len(graph[i]) > 0: path = bfs(i) if path: print(\\"POSSIBLE\\") print(len(path)) print(\\" \\".join(map(str, path))) return print(\\"IMPOSSIBLE\\") # Example usage p1, q1 = 6, 7 edges1 = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (2, 5)] find_super_path(p1, q1, edges1) p2, q2 = 5, 4 edges2 = [(1, 2), (2, 3), (4, 5), (1, 3)] find_super_path(p2, q2, edges2)"},{"question":"In a faraway kingdom, there lives a princess who loves collecting gems. She has N different gem types, each gem type i has a certain gravitation force Gi, which influences how long it takes her to pick it up. One day, she decided to spend T minutes collecting gems in the palace gardens. Given that she picks gems one by one and never picks the same type of gem consecutively, she calculates her total collection time by summing up the gravitational forces of the gems she collects. However, if the collection time exceeds T, she will have to stop collecting gems immediately. Determine the maximum number of gems the princess can collect without exceeding the given collection time T. Input The first line of the input contains an integer Q representing the number of test cases. Each test case consists of: - The first line contains two integers N and T separated by a space. - The second line contains N integers denoting the gravitational forces of each gem type. Output For each test case, output a single integer representing the maximum number of gems the princess can collect within the given time T. Constraints 1 ≤ Q ≤ 10 1 ≤ N ≤ 100,000 1 ≤ Gi ≤ 10,000 for each gem type 1 ≤ T ≤ 1,000,000 SAMPLE INPUT 2 3 10 4 5 1 4 7 3 2 2 5 SAMPLE OUTPUT 3 3 Explanation In the first test case, the princess can collect the gems with gravitation force values of 5, 1, and 4 in any order without exceeding the collection time of 10, thus collecting 3 gems. In the second test case, she can collect gems with gravitation force values of 3, 2, and 2, equating to a total collection time of 7, also collecting 3 gems.","solution":"def max_gems(Q, test_cases): results = [] for i in range(Q): N, T = test_cases[i][0] gravitation_forces = sorted(test_cases[i][1]) total_time = 0 gem_count = 0 for g in gravitation_forces: if total_time + g > T: break total_time += g gem_count += 1 results.append(gem_count) return results # Example of input and function usage: Q = 2 test_cases = [((3, 10), [4, 5, 1]), ((4, 7), [3, 2, 2, 5])] print(max_gems(Q, test_cases)) # Output: [3, 3]"},{"question":"Problem A company has developed a new modular robot that consists of several modules connected in a straight line. Each module has a specific type and a weight. The different types of modules come with different functionalities, and heavier modules may degrade the robot\'s performance. The robot can only be fully operational if it doesn\'t exceed a certain weight limit (W). Given an array of module weights and their corresponding types, determine the maximum number of distinct types of modules the robot can include while staying within the weight limit. Constraints * 1 ≤ N ≤ 100 (number of modules) * 1 ≤ W ≤ 1000 (weight limit) * 1 ≤ wi ≤ 100 (weight of ith module) * 1 ≤ ti ≤ 50 (type of ith module) Input The input is given in the following format: N W w1 t1 w2 t2 ... wN tN The first line contains two integers N and W separated by a blank. The next N lines each contain two integers wi and ti separated by a blank, representing the weight and type of each module. Output Output the maximum number of distinct types of modules that can be included in the robot without exceeding the weight limit. Examples Input 5 10 3 1 4 2 5 3 1 2 2 1 Output 3 Input 6 12 2 1 3 2 4 3 2 2 3 1 5 3 Output 3 Input 4 5 1 1 2 2 3 3 4 4 Output 2","solution":"def max_distinct_types(N, W, modules): from itertools import combinations best_count = 0 # Generate all possible combinations of modules for r in range(1, N+1): for combo in combinations(modules, r): total_weight = sum(c[0] for c in combo) distinct_types = len(set(c[1] for c in combo)) if total_weight <= W: best_count = max(best_count, distinct_types) return best_count # Input reading function for ease of testing def read_input(input_str): lines = input_str.strip().split(\\"n\\") N, W = map(int, lines[0].split()) modules = [tuple(map(int, line.split())) for line in lines[1:]] return N, W, modules # Example usage: input_str = 5 10 3 1 4 2 5 3 1 2 2 1 N, W, modules = read_input(input_str) print(max_distinct_types(N, W, modules)) # Output should be 3"},{"question":"You are given an array of N integers. Your task is to perform Q queries on this array. Each query can either be an update query or a sum query. Update Query: In an update query, you are given an index and a value. You need to replace the value at the given index in the array with the provided value. Sum Query: In a sum query, you need to find the sum of all integers in the array between two given indices, inclusive. Input: The first line of the input contains two integers N and Q, the size of the array and the number of queries respectively. The second line contains N integers, the elements of the array. Following this are Q lines each representing a query. - An update query is of the form: `1 index value` - A sum query is of the form: `2 left right` Output: For each sum query, output a single line containing the sum of the elements between the given indices. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ array elements, value ≤ 10^9 1 ≤ index, left, right ≤ N Example: Input: 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 5 1 5 6 Output: 6 13 19 Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the sum of elements from index 1 to index 3. The sum is 1 + 2 + 3 = 6. - In the second query, we update the element at index 3 with the value 10. The array becomes [1, 2, 10, 4, 5]. - The third query asks for the sum of elements from index 1 to index 3 again. The sum is now 1 + 2 + 10 = 13. - The fourth query asks for the sum of elements from index 3 to index 5. The sum is 10 + 4 + 5 = 19. - The fifth query updates the element at index 5 with the value 6. The array becomes [1, 2, 10, 4, 6].","solution":"class ArrayHandler: def __init__(self, arr): self.arr = arr def update(self, index, value): self.arr[index - 1] = value def sum_range(self, left, right): return sum(self.arr[left - 1:right]) def process_queries(N, Q, array, queries): handler = ArrayHandler(array) result = [] for query in queries: if query[0] == 1: handler.update(query[1], query[2]) elif query[0] == 2: result.append(handler.sum_range(query[1], query[2])) return result"},{"question":"Given an integer array `nums`, you are tasked with determining the longest subsequence that is bitonic. A subsequence is bitonic if it is first strictly increasing and then strictly decreasing. Note that it does not necessarily need to start or end at specific indices in the array but should follow the increasing-then-decreasing pattern. You are required to write a function that finds and returns the length of the longest bitonic subsequence in the array. Input - The input begins with a single integer `T`, the number of test cases. Each test case consists of two lines: - The first line contains a single integer `N`, the size of the array. - The second line contains `N` space-separated integers representing the array `nums`. Output - For each test case, output a single integer on a new line, the length of the longest bitonic subsequence in the array. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 2000 - -10^4 ≤ nums[i] ≤ 10^4 Sample Input 2 5 1 2 3 4 5 8 1 11 2 10 4 5 2 1 Sample Output 5 6 Explanation - In the first test case, the entire array is increasing, so the longest bitonic subsequence is just the array itself, with length 5. - In the second test case, one of the longest bitonic subsequences is [1, 2, 10, 4, 2, 1], with length 6.","solution":"def longest_bitonic_subsequence_length(nums): n = len(nums) if n == 0: return 0 # Initialize arrays to store the length of the longest # increasing subsequence ending at each index inc = [1] * n # Populate the inc array for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: inc[i] = max(inc[i], inc[j] + 1) # Initialize arrays to store the length of the longest # decreasing subsequence starting at each index dec = [1] * n # Populate the dec array for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if nums[i] > nums[j]: dec[i] = max(dec[i], dec[j] + 1) # The length of the longest bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length def solve(test_cases): results = [] for nums in test_cases: results.append(longest_bitonic_subsequence_length(nums)) return results"},{"question":"A company is organizing a hackathon, and they have a list of participants with their levels of experience. They want to form as many balanced teams as possible. A balanced team consists of exactly two participants: one with an odd level of experience and one with an even level of experience. Given the list of participant experience levels, determine the number of balanced teams that can be formed. Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of participants. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the experience levels of the participants. Output Print a single integer representing the number of balanced teams that can be formed. Examples Input 6 3 5 6 2 9 8 Output 3 Input 5 1 3 5 7 9 Output 0 Note In the first sample, we have three participants with odd experience levels (3, 5, 9) and three participants with even experience levels (6, 2, 8). We can form three balanced teams: (3, 6), (5, 2), and (9, 8). In the second sample, all participants have odd experience levels, so no balanced team can be formed.","solution":"def count_balanced_teams(n, experience_levels): odd_count = sum(1 for level in experience_levels if level % 2 != 0) even_count = n - odd_count return min(odd_count, even_count)"},{"question":"Given a non-negative integer represented as a list of digits, write a program to add one to the integer. The digits are stored such that the most significant digit is at the beginning of the list and each element in the list contains a single digit. If the integer is zero, return [1]. Input Format: The first line contains a single integer, n, the number of digits in the list: 1 ≤ n ≤ 1,000,000 The second line contains n space-separated digits (0-9) representing the non-negative integer. Output Format: Output a single line containing the list of digits representing the resulting integer after adding one. SAMPLE INPUT 4 1 2 9 9 SAMPLE OUTPUT 1 3 0 0","solution":"def add_one(digits): Adds one to the integer represented by the input list of digits. n = len(digits) carry = 1 # We initialize carry to 1 because we are adding one for i in range(n-1, -1, -1): digits[i] += carry if digits[i] == 10: digits[i] = 0 carry = 1 else: carry = 0 break if carry == 1: digits.insert(0, 1) return digits"},{"question":"You are organizing a competition and each participant needs to solve a unique problem. To avoid plagiarism, you want to minimize the instances where participants have the same problem or can easily swap problems with each other. You are given an array of integers where each integer represents the difficulty level of a problem. Your goal is to split this array into the maximum number of contiguous subarrays such that each subarray has unique elements only. Input The first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — difficulty levels of the problems. Output Print the maximum number of contiguous subarrays you can split the array into such that each subarray has unique elements. Examples Input ``` 5 1 2 1 2 3 ``` Output ``` 2 ``` Input ``` 10 1 2 3 4 5 1 2 3 4 5 ``` Output ``` 2 ``` Input ``` 7 1 1 1 1 1 1 1 ``` Output ``` 7 ``` Note In the first example, the optimal split is [1, 2], [1, 2, 3] which yields two subarrays with unique elements. In the second example, the optimal split is [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] which results in two subarrays. In the third example, every element is the same, so each subarray must consist of just one element to maintain uniqueness. Therefore, we get 7 subarrays.","solution":"def max_unique_subarrays(n, array): Calculate the maximum number of contiguous subarrays with unique elements. Parameters: n (int): Length of the array. array (list of int): Array of integers representing the difficulty levels. Returns: int: The maximum number of subarrays with unique elements. unique_elements = set() max_subarrays = 0 start = 0 for end in range(n): if array[end] in unique_elements: max_subarrays += 1 unique_elements.clear() start = end unique_elements.add(array[end]) # Account for the last subarray if it contains unique elements if unique_elements: max_subarrays += 1 return max_subarrays # Example usage: Uncomment to test # print(max_unique_subarrays(5, [1, 2, 1, 2, 3])) # Output: 2 # print(max_unique_subarrays(10, [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])) # Output: 2 # print(max_unique_subarrays(7, [1, 1, 1, 1, 1, 1, 1])) # Output: 7"},{"question":"Write a program that takes a string of digits and inserts a comma (\\",\\") as a thousands separator. Assume that the input string will not be empty and will only contain digits. Input A single line containing a string of digits. Output Return the formated string containing commas as thousands separators. Constraints * The input string will have at most 100 digits. Example Input \\"1234567\\" Output \\"1,234,567\\" Input \\"1000000\\" Output \\"1,000,000\\" Input \\"9876543210\\" Output \\"9,876,543,210\\"","solution":"def format_with_commas(number: str) -> str: Insert commas as thousands separators in the given string of digits. Args: number (str): A string of digits. Returns: str: The formatted string with commas as thousands separators. # Reverse the string to facilitate inserting commas every three digits reversed_number = number[::-1] # Insert commas every three digits parts = [reversed_number[i:i+3] for i in range(0, len(reversed_number), 3)] # Reverse the parts back to the original order and join with commas formatted_number = \',\'.join(parts)[::-1] return formatted_number"},{"question":"A simplified fraction is a fraction that is reduced to its simplest form. Given two positive integers, a numerator and a denominator of a fraction, return the simplified fraction. You can assume that the initial numerator and denominator are positive integers that do not exceed 1000. Input The input consists of multiple datasets. Each dataset is a line containing two integers numerator and denominator separated by a space. The input is terminated by a line containing two zeros which should not be processed. Output For each dataset, print the simplified fraction in the form \\"numerator/denominator\\". Sample Input 8 24 25 100 15 5 0 0 Sample Output 1/3 1/4 3/1 Example Input 8 24 25 100 15 5 0 0 Output 1/3 1/4 3/1","solution":"def gcd(x, y): while y: x, y = y, x % y return x def simplify_fraction(numerator, denominator): gcd_value = gcd(numerator, denominator) return f\\"{numerator // gcd_value}/{denominator // gcd_value}\\" def process_fractions(input_data): results = [] for data in input_data.strip().split(\\"n\\"): numerator, denominator = map(int, data.split()) if numerator == 0 and denominator == 0: break results.append(simplify_fraction(numerator, denominator)) return results"},{"question":"You are given an array of integers representing the height of hurdles. A person can jump a maximum height of \\"k\\" units. However, there are hurdles that might be taller than \\"k\\". The person\'s current jumping capability is \\"k\\" units but can use magic potion to increase their jump height to overcome hurdles that are higher than \\"k\\". The magic potion allows the person to increase their maximum jump height by 1 unit each time it is used. Determine the minimum number of times the magic potion needs to be used to clear all the hurdles. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of hurdles. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the height of each hurdle. The third line contains a single integer k (1 ≤ k ≤ 100) — the maximum jump height achievable without any magic potion. Output Output a single integer — the minimum number of times the magic potion needs to be used to clear all the hurdles. Examples Input 5 1 6 3 5 2 4 Output 2 Input 7 2 5 1 8 4 2 7 5 Output 3","solution":"def min_magic_potion_use(n, heights, k): Determines the minimum number of times the magic potion needs to be used to clear all the hurdles. Parameters: n (int): The number of hurdles. heights (list of int): The height of each hurdle. k (int): The maximum jump height achievable without any magic potion. Returns: int: The minimum number of times the magic potion needs to be used. # Find the maximum height of the hurdles max_height = max(heights) # If the maximum height is less than or equal to k, no potions are needed if max_height <= k: return 0 # Otherwise, calculate the number of potions needed to reach max height return max_height - k"},{"question":"Janet loves to play word games and puzzles. Recently, she came across a new type of game where she has a collection of letters and needs to form the longest possible word that meets certain criteria. Janet has asked for your help to automate the solution for this game. In this game, Janet is given a string `s` that consists of lowercase English letters. The goal is to form the longest palindromic substring from the given string `s`. A palindrome is a string that reads the same backward as forward. Your task is to help Janet find the longest palindromic substring in `s`. Input The input consists of a single string `s` (1 ≤ |s| ≤ 1000), where |s| is the length of the string. Output Print the longest palindromic substring of `s`. If there are multiple solutions, print the one that appears first in the string. Examples Input babad Output bab Input cbbd Output bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(n): # Even length palindromes low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Mina loves to play with strings. She has a string ( S ) of length ( n ) consisting of lowercase English letters. She wants to divide the string into exactly ( k ) non-empty substrings such that each substring contains the same character. Determine if it is possible to achieve this and, if so, print the ( k ) substrings. Constraints * The input string contains only lowercase English letters. * 1 leq n leq 3000 * 1 leq k leq n Input The input is given from Standard Input in the following format: ( S ) ( k ) Output If it is possible to divide the string into ( k ) valid substrings, print them in order, each on a new line. Otherwise, print \\"Not possible\\". Examples Input aaabbbcc 3 Output aaa bbb cc Input abcdef 6 Output a b c d e f Input aabb 3 Output Not possible","solution":"def divide_string(S, k): Divides the string S into k non-empty substrings where each substring contains the same character. If it\'s not possible, returns \\"Not possible\\". :param S: String of lowercase English letters. :param k: Number of non-empty substrings. :return: List of k substrings or \\"Not possible\\". from collections import Counter # Get frequency count of each character in the string char_count = Counter(S) substrings = [] # For each character, create a substring and append to the result for char, count in char_count.items(): substrings.extend([char * count]) # Check if we can get exactly k substrings if len(substrings) == k: return substrings else: return \\"Not possible\\""},{"question":"Given a set of N axis-aligned rectangular plots, find the area of the largest rectangle that can be formed using one or multiple overlapping or touching plots. Constraints * 1 leq N leq 100000 * 0 leq x1_i < x2_i leq 1000 * 0 leq y1_i < y2_i leq 1000 * x1_i, y1_i, x2_i, y2_i are given in integers Input The input is given in the following format. N x1_1 y1_1 x2_1 y2_1 x1_2 y1_2 x2_2 y2_2 : x1_N y1_N x2_N y2_N (x1_i, y1_i) and (x2_i, y2_i) are the coordinates of the top-left and the bottom-right corner of the i-th plot respectively. Output Print the area of the largest rectangle that can be formed using one or multiple plots. Examples Input 2 0 0 3 2 2 1 4 3 Output 6 Input 2 0 0 2 2 2 0 4 2 Output 8 Input 3 0 0 2 2 0 0 2 2 0 0 2 2 Output 4","solution":"def largest_rectangle_area(rectangles): Calculate the area of the largest rectangle that can be formed using one or multiple overlapping or touching plots. :param rectangles: List of tuples (x1, y1, x2, y2) :return: The area of the largest rectangle if not rectangles: return 0 x_coordinates = set() y_coordinates = set() for rectangle in rectangles: x1, y1, x2, y2 = rectangle x_coordinates.add(x1) x_coordinates.add(x2) y_coordinates.add(y1) y_coordinates.add(y2) x_coordinates = sorted(x_coordinates) y_coordinates = sorted(y_coordinates) max_x = max(x_coordinates) max_y = max(y_coordinates) grid = [[0] * (max_y + 1) for _ in range(max_x + 1)] for rectangle in rectangles: x1, y1, x2, y2 = rectangle for x in range(x1, x2): for y in range(y1, y2): grid[x][y] = 1 max_area = 0 hist = [0] * (max_y + 1) for x in range(max_x + 1): for y in range(max_y + 1): if grid[x][y] == 1: hist[y] += 1 else: hist[y] = 0 max_area = max(max_area, largest_rectangle_in_histogram(hist)) return max_area def largest_rectangle_in_histogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"The Data Analyzer Company often handles massive amounts of data generated by various sensors installed across different facilities. To better understand failures, they track sensor reading anomalies by analyzing data patterns. An anomaly is defined as a reading that is either significantly higher or lower than the immediate previous reading. One day, the chief data analyst gave you a file containing sensor data with exact timestamps. The analyst wants to determine how many anomalies occurred and their respective timestamps. Given the sequential data of sensor readings, your task is to identify the anomalies. A reading is considered an anomaly if it is more than `d` units higher or lower than its previous reading. Input The first line contains the integer `n` (2 ≤ n ≤ 105) — the number of sensor readings. The second line contains the integer `d` (1 ≤ d ≤ 109) — the threshold for detecting anomalies. The next `n` lines contain sensor readings, each consisting of an integer `t` (1 ≤ t ≤ 109) representing the timestamp and an integer `r` (-109 ≤ r ≤ 109) representing the reading. Output On the first line, print an integer `a` (0 ≤ a ≤ n-1) — the number of anomalies detected. On the next `a` lines, print the timestamps of each anomaly in the order they occurred. Examples Input 5 10 1 15 2 30 3 20 4 50 5 25 Output 3 2 4 5 Input 4 5 101 50 102 45 103 55 104 52 Output 2 102 103 Input 3 3 10 100 20 105 30 102 Output 1 20","solution":"def detect_anomalies(n, d, readings): anomalies = [] for i in range(1, n): prev_reading = readings[i - 1][1] current_reading = readings[i][1] if abs(current_reading - prev_reading) > d: anomalies.append(readings[i][0]) return anomalies # Sample usage if __name__ == \\"__main__\\": # Example input n = 5 d = 10 readings = [ (1, 15), (2, 30), (3, 20), (4, 50), (5, 25) ] anomalies = detect_anomalies(n, d, readings) print(len(anomalies)) for timestamp in anomalies: print(timestamp)"},{"question":"You are given a list of words and a target word length. Your task is to determine whether you can form exactly one word of the given length by concatenating two different words from the list. Each word in the list can be used only once. Constraints * All values in input are strings containing only lowercase alphabets. * 1 leq number of words in the list leq 100 * 1 leq length of each word leq 100 * 1 leq target word length leq 200 Input Input is given from Standard Input in the following format: L w_1 w_2 ... w_L T Where: * L is the number of words in the list. * w_1, w_2, ..., w_L are the words in the list. * T is the target word length. Output Print \\"YES\\" if it is possible to form exactly one word of the target length by concatenating two different words from the list. Otherwise, print \\"NO\\". Examples Input 4 hello world code ethereal 10 Output YES Input 3 abc def ghi 7 Output NO","solution":"def can_form_target_by_concatenating(words, target_length): Determine if exactly one target length can be formed by concatenating two different words. Parameters: words (list of str): List of words target_length (int): Target word length to achieve by concatenating two different words. Returns: str: \\"YES\\" if exactly one target length can be formed, \\"NO\\" otherwise. word_lengths = set(len(word) for word in words) seen_combinations = set() for word in words: for length in word_lengths: if length != len(word): # Ensure we are not concatenating a word with itself remaining_length = target_length - len(word) if remaining_length in word_lengths and (len(word), remaining_length) not in seen_combinations and (remaining_length, len(word)) not in seen_combinations: seen_combinations.add((len(word), remaining_length)) return \\"YES\\" return \\"NO\\" # The main function to read input and output result def main(): import sys input = sys.stdin.read data = input().split() L = int(data[0]) words = data[1:L+1] T = int(data[L+1]) print(can_form_target_by_concatenating(words, T))"},{"question":"A company is organizing a coding competition and needs a way to manage the large number of participants. Participants are grouped into teams of varying sizes. The company wants to ensure that each participant can be easily identified by generating unique IDs for them. Additionally, participants of different teams should have distinguishable IDs. The ID format consists of a team identifier followed by a unique number within that team. Team identifiers are assigned in the order the teams are provided in the input, starting from \'A\', \'B\', \'C\', and so on. Numbers within a team start from 1. Given the list of team sizes, write a program that generates and prints the unique IDs for all participants. Input The first line contains an integer t (1 ≤ t ≤ 52) — the number of teams. The second line contains t space-separated integers, where the i-th integer represents the number of participants in the i-th team. The total number of participants across all teams will not exceed 1000. Output Print t lines. The i-th line should contain the space-separated IDs of the participants in the i-th team. Example Input 3 2 3 1 Output A1 A2 B1 B2 B3 C1","solution":"def generate_unique_ids(t, team_sizes): Generates unique IDs for participants in teams. Each ID consists of a team identifier followed by a unique number within that team. Parameters: t (int): Number of teams team_sizes (list of int): List containing the number of participants in each team. Returns: list of list of str: List containing lists of IDs for each team. id_list = [] for i in range(t): team_id = chr(65 + i) # Get corresponding letter from ASCII value (A=65, B=66, ...) team_ids = [f\\"{team_id}{num+1}\\" for num in range(team_sizes[i])] id_list.append(team_ids) return id_list def format_output(id_list): Formats the output as expected. Parameters: id_list (list of list of str): List containing lists of IDs for each team. Output: Prints the IDs as required. for team_ids in id_list: print(\\" \\".join(team_ids))"},{"question":"Mihai loves prime numbers and recently came across an interesting problem. He wishes to find out the number of prime numbers that are less than or equal to a given number X. Being a Computer Science student, Mihai decided to write a program to solve this. The problem is defined as follows: Given an integer X, determine the number of prime numbers that are less than or equal to X. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Constraints: 1 ≤ T ≤ 10^3 1 ≤ X ≤ 10^6 Input: - The first line of the input contains an integer T denoting the number of test cases. - Each test case consists of a single integer X. Output: For each test case, output the number of prime numbers less than or equal to X on a new line. Example Input: 3 10 14 18 Example Output: 4 6 7 Explanation: - For X = 10, the prime numbers are {2, 3, 5, 7}, and there are 4 prime numbers less than or equal to 10. - For X = 14, the prime numbers are {2, 3, 5, 7, 11, 13}, and there are 6 prime numbers less than or equal to 14. - For X = 18, the prime numbers are {2, 3, 5, 7, 11, 13, 17}, and there are 7 prime numbers less than or equal to 18.","solution":"def sieve(n): Uses the Sieve of Eratosthenes to find all prime numbers less than or equal to n is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_count = [0] * (n + 1) for p in range(2, n + 1): prime_count[p] = prime_count[p - 1] if is_prime[p]: prime_count[p] += 1 return prime_count def count_primes(test_cases): For each test case, count the number of prime numbers less than or equal to X max_x = max(test_cases) primes_up_to_max_x = sieve(max_x) results = [primes_up_to_max_x[x] for x in test_cases] return results"},{"question":"Alice loves to play with strings and palindromes. She defines a palindromic partition of a string as one where each partition is a palindrome. Alice wants to find out the minimum number of cuts required to partition a given string into palindromic substrings. Curious to explore more, she turns to you for help. Given a string S, your task is to determine the minimum number of cuts needed for a palindromic partition of the string. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output: For each test case, output a single integer, the minimum number of cuts needed for a palindromic partition of the string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 abccbc noon aab SAMPLE OUTPUT 2 0 1 Explanation For abccbc, the partitioning [\\"a\\", \\"bccb\\", \\"c\\"] results in 2 cuts. For noon, the entire string is already a palindrome, so no cuts are needed. For aab, the partitioning [\\"aa\\", \\"b\\"] results in 1 cut.","solution":"def min_palindromic_cuts(s): Returns the minimum number of cuts needed to partition the string s into palindromic substrings. n = len(s) if n == 0: return 0 dp = [0] * n pal = [[False] * n for _ in range(n)] for i in range(n): min_cut = i for j in range(i + 1): if s[i] == s[j] and (i - j < 2 or pal[j + 1][i - 1]): pal[j][i] = True if j == 0: min_cut = 0 else: min_cut = min(min_cut, dp[j - 1] + 1) dp[i] = min_cut return dp[n - 1] def process_cases(T, cases): results = [] for case in cases: results.append(min_palindromic_cuts(case)) return results"},{"question":"A sequence of distinct integers can be divided into several contiguous subarrays such that each subarray is strictly decreasing. Your task is to determine the minimum number of such strictly decreasing subarrays in which you can partition the given array. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of array a. The next line contains n distinct positive integers, separated by single spaces and not exceeding 1000, — array a. Output Print a single integer — the minimum number of strictly decreasing subarrays the array can be divided into. Examples Input 5 5 2 4 7 1 Output 3 Input 4 4 3 2 1 Output 1 Input 6 10 8 6 4 2 7 Output 2 Note In the first example, one possible way to partition the array is [5, 2], [4], [7, 1]. In the second example, the array is already strictly decreasing, so it can be partitioned into a single subarray. In the third example, one possible way to partition the array is [10, 8, 6, 4, 2], [7].","solution":"def min_decreasing_subarrays(n, a): Returns the minimum number of strictly decreasing subarrays in which the array can be divided. if n == 1: return 1 count = 1 for i in range(1, n): if a[i] >= a[i-1]: count += 1 return count"},{"question":"You are tasked with managing a library system. The library has many books, and each book is identified by a unique number called its ID. Each book has a genre and a title. Library users can borrow and return books. Your goal is to create a program that can handle the following operations: - **1 ID Genre Title** - Add a new book with the given ID, genre, and title to the library. - **2 ID** - Borrow the book with the given ID (the book must be available in the library). - **3 ID** - Return the book with the given ID (the book must be currently borrowed). - **4 Genre** - List all books of the given genre that are currently available in alphabetical order by title. Each operation is given in a separate line. Operations will stop when the command \\"0\\" is encountered. **Note**: 1. There will be no duplicate IDs when adding books. 2. The borrow and return operations will only be performed on valid IDs (IDs that exist in the library and are in the correct state for the operation). **Input** The input consists of multiple operations in the following format: The first part of each line specifies the operation type (1, 2, 3, or 4). 1: Add a book - followed by the book\'s ID (integer), genre (string), and title (string) 2: Borrow a book - followed by the book ID (integer) 3: Return a book - followed by the book ID (integer) 4: List books of a genre - followed by the genre (string) The end of the input is marked by the operation \\"0\\". Constraints: - ID: 1 ≤ ID ≤ 100000 - Genre: 1 ≤ length of genre ≤ 100 - Title: 1 ≤ length of title ≤ 100 - Number of operations does not exceed 1000 **Output** For each \\"4 Genre\\" operation, output the list of available books in alphabetical order by title, one title per line. If no books are available in that genre, output \\"No books available\\" on a new line. **Examples** **Input** ``` 1 101 Fiction The_Great_Gatsby 1 102 Science The_Quantum_Theory 1 103 Fiction War_and_Peace 2 101 4 Fiction 3 101 4 Fiction 4 Science 0 ``` **Output** ``` War_and_Peace The_Great_Gatsby War_and_Peace The_Quantum_Theory ``` **Input** ``` 1 201 Mystery Sherlock_Holmes 1 202 Romance Pride_and_Prejudice 4 Mystery 2 201 4 Mystery 2 202 2 202 0 ``` **Output** ``` Sherlock_Holmes No books available ```","solution":"class Library: def __init__(self): self.books = {} # Maps ID to (title, genre, is_borrowed) def add_book(self, book_id, genre, title): self.books[book_id] = (title, genre, False) def borrow_book(self, book_id): if book_id in self.books and not self.books[book_id][2]: title, genre, _ = self.books[book_id] self.books[book_id] = (title, genre, True) def return_book(self, book_id): if book_id in self.books and self.books[book_id][2]: title, genre, _ = self.books[book_id] self.books[book_id] = (title, genre, False) def list_books_by_genre(self, genre): available_books = [title for title, book_genre, is_borrowed in self.books.values() if book_genre == genre and not is_borrowed] if not available_books: return [\\"No books available\\"] return sorted(available_books) def handle_operations(operations): library = Library() output = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: book_id = int(parts[1]) genre = parts[2] title = \\" \\".join(parts[3:]) library.add_book(book_id, genre, title) elif op_type == 2: book_id = int(parts[1]) library.borrow_book(book_id) elif op_type == 3: book_id = int(parts[1]) library.return_book(book_id) elif op_type == 4: genre = parts[1] books = library.list_books_by_genre(genre) output.extend(books) return output"},{"question":"You are given an integer array A of size N. Determine if the array is sorted in non-decreasing order. Constraints * 1 ≤ N ≤ 100 * -1000 ≤ A[i] ≤ 1000 Input Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] Output If the array is sorted in non-decreasing order, print `Yes`; otherwise, print `No`. Examples Input 5 1 2 3 4 5 Output Yes Input 4 3 1 2 4 Output No Input 3 10 10 20 Output Yes","solution":"def is_sorted_non_decreasing(n, arr): Returns \'Yes\' if the array is sorted in non-decreasing order, otherwise \'No\'. for i in range(1, n): if arr[i] < arr[i-1]: return \'No\' return \'Yes\'"},{"question":"Write a Python function `calculate_equal_partition_sum(n, arr)` that decides whether the given array of integers can be partitioned into two subsets such that the sum of elements in both subsets is equal. If such a partition exists, the function should return `True`, otherwise `False`. # Function Signature ```python def calculate_equal_partition_sum(n: int, arr: List[int]) -> bool: ``` # Input - `n` (1 ≤ n ≤ 200) - the number of elements in the array. - `arr` - a list of `n` integers, where each integer `arr[i]` (1 ≤ arr[i] ≤ 1000). # Output - Return `True` if the array can be partitioned into two subsets with equal sum, otherwise `False`. # Examples Example 1 # Input ```python n = 4 arr = [1, 5, 11, 5] ``` # Output ```python True ``` # Explanation It is possible to partition the array into two subsets that each have a sum of 11: (1, 5, 5) and (11). Example 2 # Input ```python n = 4 arr = [1, 5, 3, 4] ``` # Output ```python False ``` # Explanation There is no way to partition the array into two subsets that have equal sums. # Note - The time complexity of the problem should be as optimal as possible due to the constraints. - The problem is a variation of the \\"Partition Equal Subset Sum\\" problem, which is a classic dynamic programming problem.","solution":"def calculate_equal_partition_sum(n, arr): Determines if the array can be partitioned into two subsets with equal sum # Calculate the total sum of the array total_sum = sum(arr) # If the total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return False # We need to find subsets that sum to half of the total sum target = total_sum // 2 # Initialize dp array dp = [False] * (target + 1) dp[0] = True for num in arr: # Traverse backwards from target to num to avoid using the same element multiple times for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target]"},{"question":"You are given a list of n positive integers representing the heights of buildings in a row. Your task is to determine the maximum height of the largest rectangle that can be formed using these buildings. The width of the rectangle is the number of consecutive buildings, and all buildings in the rectangle must have at least the height of the shortest building in that consecutive range. Write a program to find this maximum height. Input: - An integer n (1 ≤ n ≤ 100000), the number of buildings. - A list of n positive integers, each representing the height of a building (1 ≤ height ≤ 10000). Output: - A single integer representing the maximum area of the largest rectangle. Example Input 1: ``` 6 2 1 5 6 2 3 ``` Example Output 1: ``` 10 ``` Explanation: The largest rectangle can be formed with buildings 3 and 4, each having a height of 5, resulting in an area of 10 (2 buildings * height 5). Example Input 2: ``` 4 2 4 2 1 ``` Example Output 2: ``` 6 ``` Explanation: The largest rectangle can be formed with buildings 2 and 3, each having a height of 3, resulting in an area of 6 (2 buildings * height 3).","solution":"def largest_rectangle_area(heights): Given an array of building heights, return the maximum area of the largest rectangle that can be formed using consecutive buildings. stack = [] # stack to store the indices of the buildings max_area = 0 index = 0 while index < len(heights): # If this building is higher than or equal to the building at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest building area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining buildings from stack and calculate area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Alice is organizing a friendly competition for her classmates involving solving mathematical puzzles. One of the puzzles is based on series of integers, and Alice wants to know the longest subsequence of consecutive elements that form an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between consecutive terms is constant. Given a list of integers, write a program that finds the length and the starting index of the longest subsequence which is an arithmetic sequence. Input The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of elements in the list. The second line contains n space-separated integers denoting the elements of the list. Output Your program should output two integers separated by a space: the length of the longest arithmetic subsequence, and the zero-based index of the first element of this subsequence. If there are multiple subsequences of the same length, output the one that appears first. Examples Input 8 1 3 5 7 9 11 6 8 Output 6 0 Input 6 10 7 4 1 -2 1 Output 5 0","solution":"def find_longest_arithmetic_subsequence(n, arr): if n == 1: return 1, 0 max_length = 1 max_index = 0 current_length = 1 current_index = 0 for i in range(1, n): if i == 1 or arr[i] - arr[i-1] == arr[i-1] - arr[i-2]: current_length += 1 else: if current_length > max_length: max_length = current_length max_index = current_index current_length = 2 current_index = i - 1 if current_length > max_length: max_length = current_length max_index = current_index return max_length, max_index"},{"question":"A company is organizing a virtual hackathon that will be conducted over several time slots. There are multiple participants, each of whom is available for various time slots during the hackathon. However, due to limited resources, only a fixed number of participants can be accommodated in each time slot. The company wants to maximize the number of participants who can attend the hackathon without exceeding the capacity constraints of any time slot. The participants\' availability is represented as a list of time slots each participant can participate in. The goal is to determine the maximum number of participants that can be scheduled into the available slots while respecting the capacity limits of each time slot. Input The input consists of the following: - The first line contains two integers n and m (1 ≤ n, m ≤ 50), where n is the number of participants and m is the number of time slots. - The second line contains m integers, where the i-th integer represents the capacity of the i-th time slot (1 ≤ capacity ≤ 50). - The next n lines each contain a binary string of length m, where the i-th binary string indicates the availability of the i-th participant in each of the m time slots (1 if available, 0 if not). Output Print a single integer representing the maximum number of participants that can be scheduled into the time slots without exceeding any of the slot capacities. Examples Input 5 3 2 3 1 101 110 011 001 100 Output 4 Input 4 2 1 2 10 01 11 00 Output 3 Note In the first example, the maximum number of participants that can be scheduled is 4. One possible scheduling is: - Participant 1 in time slot 1 - Participant 2 in time slot 2 - Participant 3 in time slot 3 - Participant 4 in time slot 2 In the second example, the maximum number of participants that can be scheduled is 3. One possible scheduling is: - Participant 1 in time slot 1 - Participant 2 in time slot 2 - Participant 3 in time slot 2","solution":"def maximum_participants(n, m, capacities, availabilities): def can_match(participant, seen, match): for slot in range(m): if availabilities[participant][slot] == \'1\' and not seen[slot]: seen[slot] = True if match[slot] < capacities[slot]: match[slot] += 1 return True for i in range(n): if rev_match[i] == slot: if can_match(i, seen, match): match[slot] += 1 rev_match[i] = -1 rev_match[participant] = slot return True return False match = [0] * m rev_match = [-1] * n result = 0 for participant in range(n): seen = [False] * m if can_match(participant, seen, match): result += 1 return result"},{"question":"Given an array of n integers sorted in ascending order, you are asked to find if there exist two distinct indices i and j such that the sum of the elements at these indices is equal to a given target value. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers, each representing an element in the array. The array elements are sorted in non-decreasing order. The third line contains a single integer target, the target sum you need to check for. Output Output \\"YES\\" if there exist two distinct indices i and j such that the sum of the elements at these indices is equal to the target. Otherwise, output \\"NO\\". Examples Input 5 1 2 3 4 6 8 Output YES Input 3 2 4 6 9 Output NO Explanation In the first example: The elements at indices 2 (value = 2) and 4 (value = 6) sum to 8, which is the target. In the second example: There are no two distinct elements in the array that can sum to 9.","solution":"def two_sum_exists(nums, target): Determines if there are two distinct elements in the sorted array that add up to the target value. :param nums: List[int] - A list of integers sorted in non-decreasing order. :param target: int - The target sum value. :return: str - \\"YES\\" if such elements exist, otherwise \\"NO\\". left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"A company has decided to maintain a log of employee activities for security purposes. Each record contains the timestamp of the login/logout event, the employee ID, and the type of event (either \\"login\\" or \\"logout\\"). The company wants to know the maximum number of employees that were logged in simultaneously at any point in time. Your task is to write a function that takes the number of records and the list of records, and returns the maximum number of employees that were logged in simultaneously. Input The function `max_logged_in(records: List[Tuple[str, int, str]]) -> int` should accept the following parameters: - `records`: A list of tuples where each tuple contains a string (timestamp), an integer (employee ID), and a string (event type), with timestamp formatted as \\"YYYY-MM-DD HH:MM\\". Output The function should return an integer representing the maximum number of employees that were logged in simultaneously. Example Input: ```python [ (\\"2023-10-01 08:00\\", 1, \\"login\\"), (\\"2023-10-01 09:00\\", 2, \\"login\\"), (\\"2023-10-01 10:00\\", 3, \\"login\\"), (\\"2023-10-01 11:00\\", 1, \\"logout\\"), (\\"2023-10-01 12:00\\", 2, \\"logout\\"), (\\"2023-10-01 13:00\\", 3, \\"logout\\"), (\\"2023-10-01 14:00\\", 4, \\"login\\"), (\\"2023-10-01 15:00\\", 5, \\"login\\"), (\\"2023-10-01 16:00\\", 4, \\"logout\\"), (\\"2023-10-01 17:00\\", 5, \\"logout\\"), ] ``` Output: ```python 3 ``` Note In the provided example, the maximum number of employees logged in simultaneously is 3: - At 10:00, employees with IDs 1, 2, and 3 are all logged in. - The following intervals also have 3 logged-in employees: * From 10:00 to 11:00 * From 11:00 to 12:00 * Until 13:00, the count remains 3 (as employee 3 logs out).","solution":"from typing import List, Tuple def max_logged_in(records: List[Tuple[str, int, str]]) -> int: events = [] for record in records: timestamp, _id, event_type = record if event_type == \\"login\\": events.append((timestamp, 1)) elif event_type == \\"logout\\": events.append((timestamp, -1)) # Sort events first by timestamp, then by type (login before logout if same timestamp) events.sort(key=lambda x: (x[0], x[1])) max_logged_in = 0 current_logged_in = 0 for event in events: current_logged_in += event[1] if current_logged_in > max_logged_in: max_logged_in = current_logged_in return max_logged_in"},{"question":"Given a list of students and their scores, your task is to find the student(s) with the highest score. If there are multiple students with the same highest score, list all such students. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of students. The following n lines each contain a student\'s name (a string consisting of uppercase and lowercase English letters, with a length between 1 and 50) and their score (an integer between 0 and 100). Output Output the name(s) of the student(s) with the highest score. If multiple students have the same highest score, their names should be listed in the order they appeared in the input. Examples Input 5 Alice 95 Bob 90 Cindy 95 David 85 Eva 90 Output Alice Cindy Input 3 John 80 Jane 85 Doe 85 Output Jane Doe","solution":"def highest_scoring_students(n, student_scores): Given a list of students and their scores, returns the student(s) with the highest score. If there are multiple students with the same highest score, it will return all such students. Parameters: n (int): Number of students student_scores (list of tuples): Each tuple contains a student\'s name and their score Returns: list: List of names of the student(s) with the highest score if n == 0: return [] max_score = -1 highest_scorers = [] for name, score in student_scores: if score > max_score: max_score = score highest_scorers = [name] elif score == max_score: highest_scorers.append(name) return highest_scorers"},{"question":"One day Vasya received a set of colored beads for his birthday. He decided to create beautiful necklaces out of them. Each necklace is made up of beads placed in a circle, and Vasya wants each necklace to be symmetrical. A necklace is considered symmetrical if it looks the same when viewed from the two opposite sides. Each bead has a color, represented by an integer. Vasya needs help to determine if a given array of beads can form a symmetrical necklace. Write a program that receives an array of beads and determines if the necklace can be symmetrical. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), representing the number of beads. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the colors of the beads in the array. Output Print \\"YES\\" if the array can form a symmetrical necklace, and \\"NO\\" otherwise. Examples Input 5 1 2 3 2 1 Output YES Input 4 1 2 3 4 Output NO Input 1 7 Output YES","solution":"def is_symmetrical_necklace(n, beads): Determines if the given array of beads can form a symmetrical necklace. :param n: Number of beads (an integer) :param beads: A list of integers representing colors of beads :return: \\"YES\\" if the array can form a symmetrical necklace, otherwise \\"NO\\" # A necklace is symmetrical if it is the same as its reverse if beads == beads[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Alex loves puzzles involving sequences of numbers. Recently, he came across a unique sequence problem and needs your help to solve it. A sequence of numbers is called a \\"mirrored sequence\\" if the first half of the sequence is the reverse of the second half. For example, [1, 2, 3, 3, 2, 1] and [4, 5, 6, 5, 4] are mirrored sequences, whereas [1, 2, 3, 4, 2, 1] and [7, 8, 9, 10] are not. Given an integer sequence, Alex wants to know if it\'s possible to remove zero or more elements from the sequence to create a mirrored sequence. Input: The first line of input contains a single integer T, denoting the number of test cases. The first line of each test case contains an integer N denoting the number of elements in the sequence. The next line of each test case contains N integers separated by a space. Output: For each test case, print \\"Yes\\" if it is possible to convert the given sequence to a mirrored sequence. Print \\"No\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Sequence element ≤ 1000 SAMPLE INPUT 4 6 1 2 3 3 2 1 7 4 5 6 7 5 4 3 5 5 9 5 9 5 4 8 8 8 8 SAMPLE OUTPUT Yes No Yes Yes Explanation TestCase 1: The sequence [1, 2, 3, 3, 2, 1] is already a mirrored sequence. TestCase 2: The given sequence cannot be rearranged into a mirrored sequence. TestCase 3: By removing one instance of 9, the sequence [5, 9, 5, 9, 5] becomes the mirrored sequence [5, 5, 5]. TestCase 4: The sequence [8, 8, 8, 8] is already a mirrored sequence.","solution":"def is_mirrored_sequence_possible(sequence): This function checks if it\'s possible to remove zero or more elements from the sequence to create a mirrored sequence. def longest_palindromic_subsequence(seq): n = len(seq) lps = [[0] * n for _ in range(n)] for i in range(n): lps[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: lps[i][j] = 2 elif seq[i] == seq[j]: lps[i][j] = lps[i + 1][j - 1] + 2 else: lps[i][j] = max(lps[i][j - 1], lps[i + 1][j]) return lps[0][n - 1] lps_length = longest_palindromic_subsequence(sequence) return lps_length >= len(sequence) // 2 * 2 def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] if is_mirrored_sequence_possible(sequence): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the minimum number of characters you need to remove from the string so that there are no pairs of consecutive characters that are the same. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5). Output For each test case, print a single integer — the minimum number of characters you need to remove from the string so that there are no pairs of consecutive characters that are the same. Example Input 3 abba aabbcc abcabc Output 1 3 0 Note In the first test case, you can remove one of the \'b\' characters to make the string \\"aba\\" which has no consecutive characters that are the same. In the second test case, you need to remove one \'a\', one \'b\', and one \'c\' to make the string \\"abc\\". In the third test case, the string \\"abcabc\\" already has no consecutive characters that are the same, so you do not need to remove any characters.","solution":"def min_removals_to_avoid_repeats(t, strings): results = [] for s in strings: removals = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: removals += 1 results.append(removals) return results"},{"question":"George is a game developer who is working on a game where players have to move a character on a grid from a starting point to a destination. To make the game more interesting, parts of the grid can be blocked, making them impassable. Players can only move up, down, left, or right. George needs your help to determine if there is a way to move the character from the start to the destination. The grid is represented by a matrix where 0 indicates an open cell and 1 indicates a blocked cell. The movement is only possible through open cells. You need to write a function that determines if there is a path from the start to the destination. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. The next n lines each contain m integers (either 0 or 1), representing the grid. The last two lines contain four integers each: - The first pair of integers represents the starting coordinates (sx, sy) (0 ≤ sx < n, 0 ≤ sy < m). - The second pair of integers represents the destination coordinates (dx, dy) (0 ≤ dx < n, 0 ≤ dy < m). Output Print \\"YES\\" if there is a path from the start to the destination. Otherwise, print \\"NO\\". Examples Input 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 4 4 Output YES Input 3 3 0 0 0 0 1 0 0 0 0 0 0 2 2 Output YES Input 3 3 0 0 0 0 1 0 0 0 0 0 0 1 1 Output NO","solution":"def is_path_possible(grid, sx, sy, dx, dy): Determines if there is a path from the start (sx, sy) to the destination (dx, dy) in the given grid. :param grid: List of list of integers representing the cell status (0 for open, 1 for blocked) :param sx: Starting x-coordinate :param sy: Starting y-coordinate :param dx: Destination x-coordinate :param dy: Destination y-coordinate :return: \\"YES\\" if a path is possible, \\"NO\\" otherwise n = len(grid) m = len(grid[0]) def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def dfs(x, y): if not is_valid(x, y): return False if (x, y) == (dx, dy): return True grid[x][y] = 1 # Mark this cell as visited for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_x, new_y = x + direction[0], y + direction[1] if dfs(new_x, new_y): return True return False return \\"YES\\" if dfs(sx, sy) else \\"NO\\""},{"question":"Tom has a string s containing lowercase English letters. Since Tom is a curious student, he loves challenges and puzzles. Tom defines the beauty of a string as the sum of the ASCII values of the characters in the string. However, there is a twist, Tom wants to calculate the maximum beauty of a substring removed from the original string. A substring is defined as a contiguous sequence of characters within a string. Help Tom find the maximum beauty of any substring that can be removed from the original string s. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the string s. The second line contains the string s consisting of lowercase English letters. Output Print a single line containing the maximum beauty of any substring that can be removed from the string s. Example Input 5 abcde Output 395 Note Consider the example: - The ASCII values of the characters in the string are: a = 97, b = 98, c = 99, d = 100, e = 101. - Removing the substring \\"abcde\\" results in the maximum beauty with a sum of 97 + 98 + 99 + 100 + 101 = 495. Thus the answer is 495.","solution":"def max_beauty_substring(s): Returns the maximum beauty of any substring that can be removed from the string s. n = len(s) max_beauty = 0 current_sum = 0 for i in range(n): current_sum += ord(s[i]) if current_sum > max_beauty: max_beauty = current_sum return max_beauty"},{"question":"**Problem: Library Book Organizer** A local library has a unique system for organizing its books. Each book is categorized by its genre and given a numerical identifier based on its position within that genre. The library needs a program that can help sort and display the books in a specific order. Books are represented as a list of tuples, where each tuple contains the name of the book, the genre, and the book’s identifier. The library needs to sort the list of books first by genre in alphabetical order, and then by their identifier in ascending order within each genre. Write a program that will sort the given list of books accordingly. Input The first line contains an integer `n`, the number of books in the library. The next `n` lines each contain a tuple in the format (book_name, genre, identifier). The `identifier` is always a positive integer. All strings contain only lowercase English letters and spaces. Output Output the sorted list of books, each book represented as a tuple, one per line. Examples Input 4 (\\"harry potter\\", \\"fantasy\\", 1) (\\"the hobbit\\", \\"fantasy\\", 2) (\\"a brief history of time\\", \\"science\\", 1) (\\"the art of computer programming\\", \\"science\\", 2) Output (\'harry potter\', \'fantasy\', 1) (\'the hobbit\', \'fantasy\', 2) (\'a brief history of time\', \'science\', 1) (\'the art of computer programming\', \'science\', 2) Input 3 (\\"war and peace\\", \\"literature\\", 2) (\\"the great gatsby\\", \\"literature\\", 1) (\\"moby dick\\", \\"literature\\", 3) Output (\'the great gatsby\', \'literature\', 1) (\'war and peace\', \'literature\', 2) (\'moby dick\', \'literature\', 3)","solution":"def sort_books(n, books): Sort the books first by genre in alphabetical order and then by their identifier in ascending order within each genre. Args: n (int): Number of books. books (list of tuples): List of books where each tuple is (book_name, genre, identifier). Returns: list of tuples: Sorted list of books. if not books: return [] # Sort the books by genre and then by identifier within each genre sorted_books = sorted(books, key=lambda x: (x[1], x[2])) return sorted_books"},{"question":"You are given a string ( S ) consisting of lowercase English characters and a pattern ( P ) where: * The pattern ( P ) can contain any lowercase English letters and the wildcard character \'?\' which can match any single character. Determine whether the string ( S ) matches the pattern ( P ). Constraints * The length of ( S ) and ( P ) is between 1 and ( 1000 ) inclusive. * The pattern ( P ) may contain at most 100 wildcard characters \'?\'. Input Input is given from Standard Input in the following format: ( S ) ( P ) Output Output \\"Yes\\" if the string ( S ) matches the pattern ( P ), otherwise output \\"No\\". Example Input ``` hello he?lo world w?rld hello he??o abc a?d ``` Output ``` Yes Yes Yes No ```","solution":"def matches_pattern(S, P): Returns \\"Yes\\" if the string S matches the pattern P, otherwise returns \\"No\\". The pattern P may contain wildcard characters \'?\' which can match any single character. if len(S) != len(P): return \\"No\\" for s_char, p_char in zip(S, P): if p_char != \'?\' and s_char != p_char: return \\"No\\" return \\"Yes\\""},{"question":"The students of a school are organizing a relay race where each participant must pass a special baton to the next person. The race track is a straight line with several segments, and each segment can either have a positive or negative elevation difference compared to the previous one. Passing the baton on a segment with a positive elevation is harder than on a flat or negative elevation. Thus, the organizers want to determine the total effort required for passing the baton throughout the race. The effort for a positive elevation segment is equal to the elevation difference, while the effort for flat or negative elevation segments is zero. Given the elevation differences between consecutive segments of the track, compute the total effort required for passing the baton. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of segments in the race track. The second line contains n space-separated integers d1, d2, ..., dn (-100 ≤ di ≤ 100) — the elevation differences between each segment and the previous one. Note that the first segment\'s elevation difference is compared to sea level, which is considered as zero elevation. Output In a single line print the total effort required for passing the baton. Examples Input 5 3 -2 5 0 2 Output 10 Input 3 -1 -4 0 Output 0 Input 4 1 2 -1 3 Output 6 Note In the first test case, the total effort for passing the baton is 3 (first segment) + 5 (third segment) + 2 (fifth segment) = 10. In the second test case, all elevation differences are zero or negative, so the total effort required is 0. In the third test case, the total effort for passing the baton is 1 (first segment) + 2 (second segment) + 3 (fourth segment) = 6.","solution":"def total_effort(n, elevations): Calculate the total effort required for passing the baton in a relay race. :param n: Number of segments in the race track. :param elevations: List of elevation differences for each segment. :return: Total effort required. return sum(elev for elev in elevations if elev > 0)"},{"question":"You are given a sequence of n integers. You need to perform a modification on this sequence such that the resulting sequence is a strictly increasing sequence where each element is greater than the previous one. The modification operation allows you to increase the value of any element by at most k. Your task is to determine if it is possible to modify the sequence in the described manner and, if possible, find one valid modified sequence. If there are multiple answers, you can output any of them. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10^9) — the number of elements in the sequence and the maximum allowed increment per element. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial sequence. Output If it is impossible to create a strictly increasing sequence, print \\"NO\\". Otherwise, print \\"YES\\" on the first line and the n elements of the modified sequence on the second line. Examples Input 5 3 1 2 3 4 5 Output YES 1 2 3 4 5 Input 5 1 5 5 5 5 5 Output NO Input 4 7 3 1 4 1 Output YES 3 4 8 15 Note In the first example, the initial sequence is already strictly increasing, so no modification is needed. In the second example, it is not possible to increase the elements to make a strictly increasing sequence since k is too small to create the required difference between equal elements. In the third example, one possible way to modify the sequence is to change the second element to 4, the third element to 8, and the fourth element to 15, resulting in a strictly increasing sequence.","solution":"def make_strictly_increasing_sequence(n, k, sequence): This function determines if it is possible to modify the sequence to be strictly increasing, by increasing each element by at most k. If possible, it returns the modified sequence. Otherwise, it returns \\"NO\\". modified_sequence = sequence.copy() # Process the sequence to make it strictly increasing for i in range(1, n): if modified_sequence[i] <= modified_sequence[i - 1]: modified_sequence[i] = modified_sequence[i - 1] + 1 # Check if the increment required is more than k if modified_sequence[i] - sequence[i] > k: return \\"NO\\" return \\"YES\\", modified_sequence"},{"question":"You are given two integers n and m, and an array of integers a of length n. Your task is to determine the minimum possible sum of a subarray of length exactly m. If no such subarray exists, return -1. A subarray is defined as a contiguous segment of the array. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of queries. The next 2t lines contain the queries. Each query consists of two lines: - The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000). - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 1000). Output For each query, output the minimum possible sum of a subarray of length exactly m. If no such subarray exists, return -1. Example Input 3 6 3 4 -1 2 -1 -4 3 5 2 1 2 3 4 5 4 1 -5 -2 -3 -1 Output -3 3 -5 Explanation In the first query, the subarray with the minimum sum of length 3 is [2, -1, -4] with sum -3. In the second query, the subarray with the minimum sum of length 2 is [1, 2] with sum 3. In the third query, the subarray with the minimum sum of length 1 is [-5] with sum -5.","solution":"def min_subarray_sum(n, m, a): # If the length of the subarray needed is greater than the total length, return -1 if m > n: return -1 # Find the sum of the first subarray of length m current_sum = sum(a[:m]) min_sum = current_sum # Traverse the array using the sliding window approach for i in range(m, n): current_sum = current_sum - a[i - m] + a[i] if current_sum < min_sum: min_sum = current_sum return min_sum def process_queries(t, queries): results = [] for i in range(t): n, m = queries[i*2] a = queries[i*2 + 1] result = min_subarray_sum(n, m, a) results.append(result) return results"},{"question":"Sum of Large Integers Given two large integers X and Y, compute their sum, X + Y. Input Two integers X and Y separated by a space character are given in a line. Output Print the sum in a line. Constraints * -1 times 10^{200000} leq X, Y leq 10^{200000} Sample Input 1 123456789123456789123456789 987654321987654321987654321 Sample Output 1 1111111111111111111111111110 Sample Input 2 100000000000000000000000000 100000000000000000000000000 Sample Output 2 200000000000000000000000000 Sample Input 3 -500000000000000000000000000 500000000000000000000000000 Sample Output 3 0 Sample Input 4 12345678901234567890 -12345678901234567890 Sample Output 4 0 Example Input 500000000000000000000000000 499999999999999999999999999 Output 999999999999999999999999999","solution":"def sum_large_integers(X: str, Y: str) -> str: Given two large integers as strings, return their sum as a string. # Converting strings to integers x_int = int(X) y_int = int(Y) # Calculating the sum result = x_int + y_int # Converting the result back to a string return str(result)"},{"question":"In a programming marathon, each participant is required to solve a given problem by writing a piece of code. A participant is considered successful if their code produces the correct output for all test cases within a given time limit. Your task is to evaluate whether the participant\'s solution is successful based on the outputs of their code. INPUT The first line of the input contains T, the number of test cases. Each test case contains three lines: - The first line contains a single integer N, the number of test cases the participant\'s code has been tested against. - The second line contains N space-separated integers representing the expected outputs. - The third line contains N space-separated integers representing the participant\'s outputs. OUTPUT For each test case, print \\"SUCCESS\\" (without quotes) if the participant\'s code produced the correct output for all test cases, and \\"FAIL\\" (without quotes) otherwise. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Expected output, Participant\'s output ≤ 1000 SAMPLE INPUT 2 3 5 10 15 5 10 15 4 7 22 5 13 7 20 5 13 SAMPLE OUTPUT SUCCESS FAIL Explanation For the first test case, the expected outputs are [5, 10, 15] and the participant\'s outputs are [5, 10, 15], so the participant\'s code is successful, and the output is \\"SUCCESS\\". For the second test case, the expected outputs are [7, 22, 5, 13] and the participant\'s outputs are [7, 20, 5, 13]. Since the second output does not match the expected output (22 ≠ 20), the participant\'s code fails, and the output is \\"FAIL\\".","solution":"def evaluate_participant(T, test_cases): Evaluates the participant\'s output against expected outputs for each test case. Parameters: - T (int): Number of test cases. - test_cases (list of tuples): Each tuple contains: - N (int): Number of test cases the participant\'s code has been tested against. - expected (list of int): Expected outputs. - actual (list of int): Participant\'s outputs. Returns: - list of str: \\"SUCCESS\\" or \\"FAIL\\" for each test case. results = [] for i in range(T): N, expected, actual = test_cases[i] if expected == actual: results.append(\\"SUCCESS\\") else: results.append(\\"FAIL\\") return results"},{"question":"There are n books placed in a row, each with a unique numeric identifier from 1 to n. A librarian accidentally shuffled the books and now they are in random order. The librarian wants to sort the books back into ascending order (1 to n) but can only do so using a series of single-book swaps. In each swap, only two books can be interchanged at any time. Your task is to determine the minimum number of swaps required to sort the books back in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 200,000), the number of books. The second line contains n space-separated integers, where each integer is a unique identifier of a book. These identifiers represent the current order of the books. Output Output a single integer representing the minimum number of swaps needed to sort the books. Examples Input 5 4 3 1 5 2 Output 4 Input 3 3 1 2 Output 2 Input 4 1 3 4 2 Output 2 Note - In the first example, one of the possible ways to reach the sorted list [1, 2, 3, 4, 5] is: 1. Swap book 4 and 1: [1, 3, 4, 5, 2] 2. Swap book 3 and 2: [1, 3, 2, 5, 4] 3. Swap book 3 and 2: [1, 2, 3, 5, 4] 4. Swap book 5 and 4: [1, 2, 3, 4, 5] - In the second example, one of the possible ways to reach the sorted list [1, 2, 3] is: 1. Swap book 3 and 1: [1, 3, 2] 2. Swap book 3 and 2: [1, 2, 3] - In the third example, one of the possible ways to reach the sorted list [1, 2, 3, 4] is: 1. Swap book 3 and 2: [1, 2, 4, 3] 2. Swap book 4 and 3: [1, 2, 3, 4]","solution":"def min_swaps_to_sort_books(n, books): Returns the minimum number of swaps needed to sort the books in ascending order. :param n: int - number of books :param books: list - list of integers representing book identifiers :return: int - minimum number of swaps required # Create a list of tuples where each tuple is (book_identifer, index) indexed_books = [(book, index) for index, book in enumerate(books)] # Sort the books by their identifiers indexed_books.sort(key=lambda x: x[0]) # To keep track of visited positions visited = [False] * n swaps = 0 for i in range(n): # If book is already in the right place or already visited, skip it if visited[i] or indexed_books[i][1] == i: continue # Find the cycle length cycle_length = 0 j = i while not visited[j]: visited[j] = True j = indexed_books[j][1] cycle_length += 1 # If cycle length is 2 or more, (cycle_length-1) swaps are needed if cycle_length > 1: swaps += (cycle_length - 1) return swaps"},{"question":"In a far-off kingdom, there lies a magical forest where trees bear special fruits that grant extraordinary abilities. Each tree produces fruits in a unique sequence that repeats at regular intervals. However, the magical properties of the fruits can be harnessed only by collecting them in the correct order. Given a string `f` representing the sequence of fruits produced by a tree, determine if the sequence forms a repeating pattern. If a repeating pattern exists, return the length of the shortest repeating sequence. If no such pattern exists, return -1. A sequence forms a repeating pattern if it can be written as `k * s` where `k` is a positive integer and `s` is a string. # Input - The input is a single line string `f`, consisting of lowercase English letters (1 ≤ |f| ≤ 10^5). # Output - Output the length of the shortest repeating sequence or -1 if no such pattern exists. # Examples Example 1 **Input:** ``` abab ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` aaaa ``` **Output:** ``` 1 ``` Example 3 **Input:** ``` abcabcabc ``` **Output:** ``` 3 ``` Example 4 **Input:** ``` abcd ``` **Output:** ``` -1 ``` # Note - In Example 1, `abab` can be written as `2 * \\"ab\\"`. - In Example 2, `aaaa` can be written as `4 * \\"a\\"`. - In Example 3, `abcabcabc` can be written as `3 * \\"abc\\"`. - In Example 4, `abcd` cannot be represented as `k * s` for any `k` > 1 and any string `s`.","solution":"def find_repeating_sequence_length(f): Returns the length of the shortest repeating sequence in the string f, or -1 if no such pattern exists. n = len(f) for i in range(1, n // 2 + 1): if n % i == 0: # Only consider lengths that evenly divide the string if f[:i] * (n // i) == f: return i return -1"},{"question":"Alice has recently started her own small delivery business. She has n delivery drivers and m different delivery points where packages need to be delivered. Each delivery point can potentially handle a specific number of packages for the day. Alice needs to assign delivery points to her drivers in such a way that the workload is balanced as evenly as possible among all drivers. Each driver can be assigned one or more contiguous delivery points, and the goal is to minimize the maximum number of packages that any single driver has to deliver. Your task is to help Alice find the optimal way to distribute the delivery points among drivers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000, n ≤ m) — the number of drivers and the number of delivery points. The next line contains m integers pi (1 ≤ pi ≤ 10000) — the number of packages at each delivery point. Output Print a single integer — the minimum possible maximum number of packages that any driver has to deliver. Examples Input 3 5 1 2 3 4 5 Output 6 Input 4 7 10 10 10 10 10 10 10 Output 20 Explanation In the first example, one possible way to distribute the delivery points is: - Driver 1 is assigned delivery points with 1 and 2 packages (total 3 packages). - Driver 2 is assigned delivery points with 3 and 4 packages (total 7 packages). - Driver 3 is assigned the last delivery point with 5 packages. The maximum number of packages that any driver has to deliver is 7. In the second example, one possible distribution is: - Driver 1 is assigned delivery points with 10 and 10 packages (total 20 packages). - Driver 2, 3, and 4 are each assigned one remaining delivery point with 10 packages each. The maximum number of packages that any driver has to deliver is 20.","solution":"def min_max_packages(n, m, packages): Returns the minimum possible maximum number of packages that any driver has to deliver. def can_distribute_with_max_capacity(max_capacity): current_sum = 0 drivers_needed = 1 for package in packages: if current_sum + package <= max_capacity: current_sum += package else: drivers_needed += 1 current_sum = package if drivers_needed > n: return False return True low = max(packages) high = sum(packages) while low < high: mid = (low + high) // 2 if can_distribute_with_max_capacity(mid): high = mid else: low = mid + 1 return low"},{"question":"You are given an integer array of size `n`. Let\'s call an inversion a pair of indices (i, j) such that `1 ≤ i < j ≤ n` and `a[i] > a[j]`. Your task is to count the number of inversions in the array. Implement a function `countInversions(arr: List[int]) -> int` that takes an integer array `arr` and returns the count of inversions. Input The function receives a list `arr` containing `n` integers (1 ≤ n ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9). Output Return a single integer representing the number of inversions in the array. Examples Input ```python [2, 4, 1, 3, 5] ``` Output ```python 3 ``` Input ```python [5, 4, 3, 2, 1] ``` Output ```python 10 ``` Explanation For the first example: - Inversions are (2, 1), (4, 1), (4, 3), hence the count is 3. For the second example: - Every pair is an inversion: (5, 4), (5, 3), (5, 2), (5, 1), (4, 3), (4, 2), (4, 1), (3, 2), (3, 1), (2, 1), hence the count is 10. Note: You may use an optimized algorithm, such as a modified merge sort, to count the number of inversions efficiently.","solution":"from typing import List def countInversions(arr: List[int]) -> int: Count the number of inversions in the array. An inversion is a pair (i, j) such that 1 ≤ i < j ≤ n and arr[i] > arr[j]. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count return merge_sort_and_count(arr, [0]*len(arr), 0, len(arr)-1)"},{"question":"You\'ve been given a task to implement a scheduler for a single-threaded CPU. The CPU can only execute one task at a time, and the tasks are executed in the order of their start times. If two tasks start at the same time, they can be executed in any order. Each task has a duration, and once the CPU starts a task, it must complete it without interruption. You need to determine the order in which tasks are executed so that the CPU\'s work is maximized, meaning the CPU has the least idle time. For simplicity, you can assume that no two tasks end at the same time. Input - The first line contains a single integer `n` (1 ≤ n ≤ 105), the number of tasks. - Each of the next `n` lines contains two integers `start` and `duration` (0 ≤ start ≤ 109, 1 ≤ duration ≤ 106), representing the start time and duration of each task. Output Print `n` lines, where the i-th line contains two integers, indicating the start time and duration of the i-th task in the order they are executed by the CPU. Example Input 5 1 3 2 5 3 2 5 3 7 1 Output 1 3 5 3 3 2 7 1 2 5","solution":"def schedule_tasks(tasks): Schedules tasks in the order to minimize CPU idle time. Args: tasks: List of tuples, each tuple contains (start, duration) Returns: List of tuples indicating execution order of tasks. # Sort tasks by their start time tasks_sorted = sorted(tasks, key=lambda x: x[0]) # Initialize current time to 0 current_time = 0 execution_order = [] for start, duration in tasks_sorted: if start > current_time: # If the start time of the next task is in the future, move current time to that start current_time = start # Add the task to execution order execution_order.append((start, duration)) # Move the current time to the end of this task current_time += duration return execution_order # Example usage: if __name__ == \\"__main__\\": tasks = [(1, 3), (2, 5), (3, 2), (5, 3), (7, 1)] result = schedule_tasks(tasks) for task in result: print(task[0], task[1])"},{"question":"Bob, a professional gardener, is designing his new rectangular garden. He plans to divide the garden into a grid of n rows and m columns. Each cell in the grid will either be a flower bed or a path. He wants to arrange the garden such that: 1. No two adjacent cells (horizontally or vertically) are both flower beds. 2. There should be no row or column that is completely filled with paths. Given the dimensions of the garden, help Bob determine if it is possible to design the garden according to the above rules, and if so, provide a possible arrangement. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the garden. Output - If it is impossible to design the garden according to the rules, print \\"NO\\". - Otherwise, print \\"YES\\" and then output n lines of m characters each, where each character is either \'F\' (flower bed) or \'P\' (path), representing the arrangement. Examples Input ``` 3 3 ``` Output ``` YES FPF PFP FPF ``` Input ``` 2 2 ``` Output ``` YES FP PF ``` Note In the first example, Bob can alternate between flower beds and paths in a checkerboard pattern such that no two adjacent cells are both flower beds, and no row or column is completely filled with paths. In the second example, Bob can also alternate between flower beds and paths to satisfy the conditions.","solution":"def design_garden(n, m): Return a possible arrangement of the garden according to the rules, or \\"NO\\" if it is not possible. if n == 1 and m == 1: return \\"NO\\" garden = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'F\') else: row.append(\'P\') garden.append(\\"\\".join(row)) return \\"YESn\\" + \\"n\\".join(garden)"},{"question":"There is a rectangular grid with dimensions m x n (m rows and n columns). Each cell in the grid can be traversed or blocked. You need to write a program to find the number of unique paths from the top-left corner to the bottom-right corner of the grid (0, 0) to (m-1, n-1) if you can only move either down or right at any point in time. The grid is represented by a 2D list where 0 represents a traversable cell and 1 represents a blocked cell. You cannot traverse through blocked cells. Write a function `uniquePaths` that takes a list of lists representing the grid: ```python def uniquePaths(grid: List[List[int]]) -> int: # your code here ``` # Input: - The first line of the input contains two integers `m` and `n` (1 ≤ m, n ≤ 100), the dimensions of the grid. - The next `m` lines each contain `n` integers (either 0 or 1), representing the grid. # Output: - Print the number of unique paths from the top-left to the bottom-right corner of the grid. If there is no valid path, return 0. # Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Input: ``` 3 3 0 1 0 0 1 0 0 0 0 ``` Output: ``` 1 ```","solution":"from typing import List def uniquePaths(grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Start position for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # Block cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"John is organizing a coding competition and needs to randomly assign the participants into groups. He has a list of participants and he wants to ensure that each group has an equal number of participants, or as close to equal as possible if the total number of participants is not perfectly divisible by the number of groups. Write a function that takes two parameters: a list of participants and a number indicating the desired number of groups. The function should return a list of lists, where each inner list represents a group of participants. Input The function should accept the following parameters: * A list `participants` containing the names of participants (strings). The list will have at most 500 elements. * An integer `k` representing the number of groups (1 ≤ k ≤ 50). Output The function should return a list of lists, where each sublist contains the names of participants in that group. The groups should be as balanced as possible, meaning the difference in the number of participants between any two groups is at most one. Examples ```python group_participants([\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"], 2) ``` Output ```python [[\\"Alice\\", \\"Charlie\\", \\"Eve\\"], [\\"Bob\\", \\"David\\"]] ``` ```python group_participants([\\"Alice\\", \\"Bob\\", \\"Charlie\\"], 3) ``` Output ```python [[\\"Alice\\"], [\\"Bob\\"], [\\"Charlie\\"]] ``` ```python group_participants([\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"], 2) ``` Output ```python [[\\"Alice\\", \\"Charlie\\"], [\\"Bob\\", \\"David\\"]] ```","solution":"def group_participants(participants, k): Groups participants into k groups as evenly as possible. :param participants: List of participants :param k: Number of groups :return: List of k groups, each group being a list of participants # Initialize list of lists for the groups groups = [[] for _ in range(k)] # Distribute participants to groups in round-robin manner for i, participant in enumerate(participants): groups[i % k].append(participant) return groups"},{"question":"Lena is trying to organize the books in her newly built bookshelf. She wants to organize the books such that when arranged, the sequence of their IDs forms a palindrome. A palindrome is a sequence that reads the same backward as forward. For example, the sequences [1, 2, 3, 2, 1] and [4, 5, 4] are palindromes. Given a list of n book IDs, each represented by a distinct positive integer, write a program to rearrange the IDs to form a palindrome, if possible. If it\'s not possible to form a palindrome with the given IDs, output -1. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of books. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the IDs of the books. Output If it is possible to rearrange the books to form a palindrome, print the rearranged sequence in a single line. If it is not possible, print -1. Examples Input 5 1 2 3 2 1 Output 1 2 3 2 1 Input 3 3 1 2 Output -1","solution":"def can_form_palindrome(n, book_ids): This function rearranges book IDs to form a palindrome if possible. If not possible, it returns -1. # Count the frequency of each book ID freq = {} for b_id in book_ids: if b_id in freq: freq[b_id] += 1 else: freq[b_id] = 1 # Track the number of IDs with odd frequency odd_count = 0 odd_id = None for b_id, count in freq.items(): if count % 2 != 0: odd_count += 1 odd_id = b_id # A palindrome can have at most one character with an odd frequency if odd_count > 1: return -1 # Creating the palindrome first_half = [] second_half = [] for b_id, count in freq.items(): half_count = count // 2 first_half.extend([b_id] * half_count) second_half = list(first_half) second_half.reverse() if odd_count == 1: palindrome = first_half + [odd_id] + second_half else: palindrome = first_half + second_half return palindrome"},{"question":"You are given a grid of size n x m consisting of lowercase English letters. You need to determine if there exists a path from the top-left corner to the bottom-right corner of the grid such that the path spells out the same string read forwards and backwards (a palindrome). The path can only move either right (to the cell directly to the right) or down (to the cell directly below the current cell). Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains a string of length m consisting of lowercase English letters. Output Output \\"YES\\" if such a path exists, otherwise output \\"NO\\". Examples Input 3 3 aaa aba aaa Output YES Input 2 2 ab bc Output NO Note In the first example, one valid path that forms a palindrome is (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2), forming the string \\"abaa\\". It reads \\"abaa\\" forwards and backwards. In the second example, no path exists that forms a palindrome.","solution":"def exists_palindromic_path(n, m, grid): from collections import defaultdict # Table to store lengths and possibilities of paths at each (i, j) dp = [[defaultdict(set) for _ in range(m)] for _ in range(n)] # Initialize DP table dp[0][0][1].add(grid[0][0]) for i in range(n): for j in range(m): if i > 0: for path_length, substrings in dp[i-1][j].items(): for substring in substrings: dp[i][j][path_length + 1].add(substring + grid[i][j]) if j > 0: for path_length, substrings in dp[i][j-1].items(): for substring in substrings: dp[i][j][path_length + 1].add(substring + grid[i][j]) # Check for palindrome in the bottom-right cell for substring in dp[n-1][m-1][n + m - 1]: if substring == substring[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are given n books, each with a certain number of chapters. You need to decide the order in which you will read the books, but with one constraint: once you start reading a book, you must finish all its chapters before starting another book. Your goal is to minimize the total number of times you switch from reading one book to another. For each arrangement of chapters, compute the minimum number of switches required. A switch is defined as moving from the end of one chapter in a book to the beginning of the first chapter of the next book. If there is only one book, no switches are needed. Input - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each test case starts with an integer n (1 ≤ n ≤ 100) — the number of books. - The following n lines each contain an integer c_i (1 ≤ c_i ≤ 1000) — the number of chapters in the ith book. Output For each test case, output a single integer — the minimum number of switches required. Example Input 3 3 4 3 2 2 5 1 4 7 1 3 2 1 Output 2 1 0 Explanation In the first test case, you have 3 books with 4, 3, and 2 chapters respectively. The optimal order with minimal switches is to read the 4-chapter book first, then the 3-chapter book, and finally the 2-chapter book, resulting in 2 switches. In the second test case, you have 2 books with 5 and 1 chapters respectively. Only one switch is needed. In the third test case, there is only 1 book, so no switches are necessary.","solution":"def minimum_switches(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] switches = max(0, n - 1) results.append(switches) return results # Example usage t = 3 test_cases = [(3, [4, 3, 2]), (2, [5, 1]), (1, [4])] print(minimum_switches(t, test_cases)) # Output will be [2, 1, 0]"},{"question":"A company wants to organize a meeting for multiple teams. Each team has a designated preparation time before the meeting, and the meeting for a team begins when its preparation is finished. You are given an array where each element denotes the preparation time of a team. Your task is to find out the minimum time required to finish all meetings if any two teams cannot meet at the same time. Input The first line contains a single integer T denoting the number of test cases. Then follow T test cases. The first line of each test case contains an integer N denoting the number of teams. The second line of each test case contains N space-separated integers, where the i-th integer represents the preparation time required by the i-th team. Output For each test case output a single line containing an integer corresponding to the minimum time required to finish all meetings. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10 1 ≤ Preparation Time ≤ 100 Example Input: 2 3 1 2 3 4 2 2 3 3 Output: 6 10 Explanation Example Case 1: The minimum time required to finish all meetings is the sum of the preparation times, i.e. 1+2+3=6. Example Case 2: One way to minimize the total time is to sequence the preparation times [2, 2, 3, 3]. The total time required would be 2+2+3+3=10. As all teams\' preparation times cannot overlap, they are simply added up.","solution":"def minimum_meeting_time(test_cases): Calculate the minimum time required to finish all meetings. Parameters: test_cases (list): A list of tuples where each tuple contains a number of teams and their preparation times. Returns: list: A list of integers where each integer represents the minimum time required for the respective test case. results = [] for case in test_cases: n, prep_times = case total_time = sum(prep_times) results.append(total_time) return results def process_input(input_data): Parse the input data into a format suitable for calculation. Parameters: input_data (str): A string input data. Returns: list: A list of tuples representing the test cases. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) prep_times = list(map(int, lines[index + 1].split())) test_cases.append((N, prep_times)) index += 2 return test_cases def format_output(output_data): Format the output data into a string suitable for display. Parameters: output_data (list): A list of integers representing the results for each test case. Returns: str: A formatted string output. return \\"n\\".join(map(str, output_data))"},{"question":"Vicky loves candies and she has a row of candy jars. Each jar has a certain number of candies in it. Vicky can perform the following operation any number of times: - Choose a jar and distribute all its candies to its neighboring jars equally. If the number of candies in a jar is odd, one candy will be left in that jar. Vicky wants to distribute candies in such a way that the total number of candies becomes an even number. She also wants to keep track of how many operations she performed. Write a program to help Vicky achieve her goal with the minimum number of operations. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of candy jars. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 109) — the number of candies in each jar. Output Print a single integer — the minimum number of operations required to make the total number of candies even. If it is already even, print 0. Examples Input 5 1 2 3 4 5 Output 1 Input 3 4 6 8 Output 0","solution":"def min_operations_to_even(n, candies): Returns the minimum number of operations required to make the total number of candies even. If the total number of candies is already even, returns 0. total_candies = sum(candies) # If the total is even, no operations needed if total_candies % 2 == 0: return 0 # If the total is odd, we need exactly one operation to make it even return 1"},{"question":"Consider an e-commerce website where customers can rate products. Each product has a list of ratings, given as integers. You are tasked with writing a function to determine the average rating for each product. If a product has no ratings, its average rating should be 0. Input: - An integer N, the number of products. - N subsequent lines, each representing a product followed by its ratings separated by spaces. Each line contains an integer `P` (product ID) followed by `R` ratings. Output: - Print the average rating for each product rounded down to the nearest integer, one per line. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ P ≤ 10^9 - 0 ≤ R ≤ 100 - 1 ≤ rating ≤ 5 Note: - The integer division truncation (floor function) will be handled for rounding down. Example Input: 2 101 4 5 3 2 4 202 Example Output: 3 0","solution":"def average_ratings(N, products): Calculate the average rating for each product, rounding down to the nearest integer. Parameters: N (int): Number of products. products (list of str): List of strings, each representing product ID followed by ratings. Returns: list of int: List containing the average rating for each product. averages = [] for product in products: parts = list(map(int, product.split())) P = parts[0] ratings = parts[1:] if ratings: avg_rating = sum(ratings) // len(ratings) else: avg_rating = 0 averages.append(avg_rating) return averages"},{"question":"Given a list of integers, write a function that rearranges them to form the largest possible number. Each number in the list can be considered as a string for the purpose of rearranging. Input First line contains a single integer T representing the number of test cases. Each test case consists of two lines: - The first line contains a single integer N indicating the number of integers in the list. - The second line contains N space-separated integers. Output Output the largest possible number that can be formed for each test case in a single line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 15 1 ≤ x ≤ 10^9 SAMPLE INPUT 1 4 54 546 548 60 SAMPLE OUTPUT 6054854654","solution":"def largest_possible_number(T, test_cases): Given a list of integers, rearranges them to form the largest possible number. Parameters: T (int): Number of test cases. test_cases (List[Tuple[int, List[int]]]): List of tuples where each tuple contains the number of integers N and the list of integers. Returns: List[str]: List of the largest possible number string for each test case. def compare(a, b): Custom comparator to order strings to form the largest number. Parameters: a (str): First string to compare. b (str): Second string to compare. Returns: int: Result of comparison to sort in descending order by concatenation. if a + b > b + a: return -1 else: return 1 results = [] for test_case in test_cases: N, numbers = test_case numbers_str = list(map(str, numbers)) numbers_str.sort(key=lambda x: x*10, reverse=True) largest_number = \'\'.join(numbers_str) results.append(largest_number) return results"},{"question":"You are given a sequence of integers and a corresponding sequence of operations to perform on them. Your task is to process these operations and report the resultant sequence. The sequence is a list of integers, and each operation is defined by an index and a value. The operation updates the sequence such that the value at the given index is replaced by the new value. The indices in the operations are one-based. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the size of the sequence and the number of operations, respectively. The second line contains n integers ai (1 ≤ ai ≤ 109) — the initial sequence. Each of the following m lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ 109) — the index and the new value for the operation. Output Print the resultant sequence of n integers after performing all the operations. Examples Input 5 3 1 2 3 4 5 3 10 5 7 1 8 Output 8 2 10 4 7 Input 4 2 10 20 30 40 2 25 4 50 Output 10 25 30 50 Note In the first example, initially, the sequence is [1, 2, 3, 4, 5]. After performing the first operation (3, 10), the sequence becomes [1, 2, 10, 4, 5]. After the second operation (5, 7), the sequence is updated to [1, 2, 10, 4, 7]. After the third operation (1, 8), the final sequence is [8, 2, 10, 4, 7]. In the second example, the initial sequence is [10, 20, 30, 40]. After performing the operations, the final sequence is [10, 25, 30, 50].","solution":"def update_sequence(n, m, sequence, operations): Update the sequence based on the given operations. Parameters: n (int): The size of the sequence. m (int): The number of operations. sequence (list of int): The initial sequence of integers. operations (list of tuple): List of operations where each operation is a tuple (index, new_value). Returns: list of int: The resultant sequence after performing all the operations. # Perform each operation by updating the relevant index in the sequence for index, new_value in operations: sequence[index - 1] = new_value # Convert 1-based index to 0-based for the list return sequence # Example usage: n, m = 5, 3 sequence = [1, 2, 3, 4, 5] operations = [(3, 10), (5, 7), (1, 8)] result = update_sequence(n, m, sequence, operations) print(result) # Output should be [8, 2, 10, 4, 7]"},{"question":"Katie is participating in a national programming competition. In one of the rounds, she receives a particularly interesting challenge involving strings. She is given an input string that contains only lowercase English letters. Katie needs to process the string and create a new string that meets the following criteria: 1. The new string must be formed by rearranging the characters of the input string. 2. The new string should not contain two identical characters next to each other. 3. If it\'s impossible to create such a string, return the string \\"IMPOSSIBLE\\". Write a function that takes a string and returns the rearranged string or \\"IMPOSSIBLE\\" if the new string cannot be formed. Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 10^5) which contains only lowercase English letters. Output Print the rearranged string or \\"IMPOSSIBLE\\" if it is not possible to create such a string. Examples Input aabb Output abab Input aaab Output IMPOSSIBLE Input a Output a Note In the first example, `abab` is a valid rearrangement since no characters are adjacent. In the second example, it\'s impossible to rearrange the string `aaab` such that no two `a`\'s appear consecutively. In the third example, there\'s only one character, and therefore the string is already valid. Clarifications - The only characters in the input will be lowercase English letters (\'a\' to \'z\'). - It is guaranteed that the input string will be non-empty.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two identical characters are adjacent. Return \\"IMPOSSIBLE\\" if it cannot be done. # Count frequency of each character count = Counter(s) # Use a max-heap to always pick the character with highest frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back into the heap if it still has a remaining count if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append the current character to the result and prepare to process next result.append(char) prev_freq, prev_char = freq + 1, char # Decrease the frequency # If the rearranged string is as long as the input string, return it, otherwise it\'s impossible rearranged_string = \'\'.join(result) return rearranged_string if len(rearranged_string) == len(s) else \\"IMPOSSIBLE\\""},{"question":"An e-commerce platform wants to improve its search functionality. Given a list of products and a search query string, they want to return the list of products whose names contain all the words from the search query string. You are to implement a function that takes as input a list of product names (strings) and a search query string. The function should return a list of product names that contain all the words from the search query string in any order. The platform also wants to ensure that the search is case-insensitive and whitespace-insensitive. Constraints: - The number of products n will be 1 ≤ n ≤ 1000. - The length of any product name will be 1 ≤ len(product name) ≤ 100. - The length of the search query string will be 1 ≤ len(search query) ≤ 100. - The function should be case-insensitive and ignore extra whitespace. - The order of words in the product name does not matter as long as all words from the search query are present. Input: The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t test cases consists of: - An integer n (1 ≤ n ≤ 1000), the number of product names. - A list of n product names, where each product name is a string. - A search query string (1 ≤ len(search query) ≤ 100). Output: For each test case, output a list of product names that match the query criteria, one product name per line. Example: Input: 2 3 \\"Apple iPhone\\" \\"Samsung Galaxy\\" \\"Google Pixel\\" \\" apple\\" 4 \\"Sony PlayStation\\" \\"Microsoft Xbox\\" \\"Nintendo Switch\\" \\"Sega Genesis\\" \\"Play Station\\" Output: Apple iPhone Sony PlayStation","solution":"def search_products(n, products, query): Returns a list of product names that contain all the words from the search query string. The search is case-insensitive and whitespace-insensitive. # Normalize the search query by converting to lower case and splitting into words query_words = query.lower().split() # Function to check if a product matches the query def matches(product): product_lowercase = product.lower() return all(word in product_lowercase for word in query_words) # Filter products using the matches function matching_products = [product for product in products if matches(product)] return matching_products"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game proceeds as follows: 1. Alice and Bob take turns, with Alice going first. 2. On each turn, the player must choose an integer from the sequence and remove it. 3. If a player cannot make a move (i.e., the sequence is empty), that player loses the game. 4. A player can only remove an integer if its value is greater than the value of the integer removed by the previous player. For Alice, there\'s no restriction on the first integer she removes. Given the initial sequence of integers, determine whether Alice can force a win if both play optimally. Input The first line of input contains T, the number of test cases. Each of the next T lines contains an integer N, the length of the sequence, followed by N integers, representing the sequence. Output For each test case, print \\"ALICE\\" if Alice can force a win, or \\"BOB\\" otherwise. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ each element in the sequence ≤ 10000 SAMPLE INPUT 3 5 1 2 3 4 5 4 8 6 7 5 3 10 11 9 SAMPLE OUTPUT ALICE BOB ALICE Explanation In the first test case with the sequence [1, 2, 3, 4, 5], Alice can always start by removing the smallest element (1), and she can always remove an element while maintaining the condition, ensuring Alice can force Bob out. In the second test case with the sequence [8, 6, 7, 5], although Alice starts, Bob can always choose a sequence ensuring Alice cannot proceed eventually. In the third test case with the sequence [10, 11, 9], Alice can start with 10, followed by 11, leaving no possible moves for Bob. By analyzing each possible scenario optimally, we determine whether Alice can force a win or not.","solution":"def can_alice_win(sequence): Determines if Alice can force a win given the sequence of integers. Alice wins if the sequence has an odd number of elements after sorting. return len(sequence) % 2 != 0 def determine_winner(test_cases): Determines the winner for each test case. results = [] for sequence in test_cases: if can_alice_win(sequence): results.append(\\"ALICE\\") else: results.append(\\"BOB\\") return results"},{"question":"Python: String Compression Problem You are given a string S consisting of lowercase English alphabets. Your task is to implement a function that compresses the string using the counts of repeated characters. The compressed string should only include the counts where a character is repeated consecutively. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If a character is not repeated more than once consecutively, it should still appear in the compressed string with a count of 1. Input Format The input consists of a single line. S Constraints - 1 ≤ len(S) ≤ 10^6 Output Format Output the compressed string. Example 1 Input aabcccccaaa Output a2b1c5a3 Example 2 Input abcdefgh Output a1b1c1d1e1f1g1h1 Example 3 Input aabbbaaa Output a2b3a3 Example 4 Input aaaaaaaaaaa Output a11 Note The given input string does not contain any numbers or special characters, only lowercase English alphabets.","solution":"def compress_string(s): Compresses the string using counts of repeated characters. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") return \\"\\".join(compressed)"},{"question":"A new developer at a startup has been tasked with optimizing a social media application. One of the optimizations involves processing user-generated posts efficiently. Each post can be represented as a string containing alphanumeric characters along with spaces, punctuation, and special characters. The goal is to identify the k most frequently occurring words in a given post. Words are defined as consecutive sequences of alphanumeric characters, and they are case-insensitive. The developer needs to create a function that accepts a string representing a post and an integer k, and returns a list of the k most frequent words in descending order of their frequency. If two words have the same frequency, they should be sorted lexicographically (case-insensitive). Your task is to help the developer by writing the required function. **Input** A single string representing the post and an integer k separated by a newline. The post can be up to 10^6 characters long. The value of k will be such that 1 ≤ k ≤ number of unique words in the post. **Output** A list of the k most frequent words in descending order of frequency. Each word should be lowercased. **Example** Input: ``` This is a test. This test is only a test. 3 ``` Output: ``` [\\"test\\", \\"a\\", \\"is\\"] ``` **Note:** - In the given example, \\"test\\" appears 3 times, \\"a\\" and \\"is\\" each appear 2 times, and the other words appear only once. Since k = 3, the result includes the 3 most frequent words in the order \\"test\\", \\"a\\", and \\"is\\". - If the post contains punctuation or special characters, they should be ignored, and words should be split only using alphanumeric characters. For example, \\"Hello, world!\\" should be treated similarly to \\"Hello world\\". Formally, you need to implement the following function: ```python def top_k_frequent_words(post: str, k: int) -> List[str]: # Your implementation here ```","solution":"import re from collections import Counter from typing import List def top_k_frequent_words(post: str, k: int) -> List[str]: # Convert the post to lowercase and split into words using a regex that matches word characters words = re.findall(r\'bw+b\', post.lower()) # Count the frequency of each word word_counts = Counter(words) # Get the k most common words, sorted by frequency then lexicographically most_common_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))[:k] # Extract the words from the tuples top_k_words = [word for word, count in most_common_words] return top_k_words"},{"question":"Given a square grid of size N*N filled with characters, write a program to determine the sizes of all distinct regions formed by contiguous characters. Two characters are considered part of the same region if they are adjacent horizontally, vertically, or diagonally. For example, consider the grid below: ``` A B B B B A A A A ``` In this grid, there are three distinct regions: 1. The first \'A\' in the top left alone forms a region. 2. The remaining \'A\'s in the bottom two rows form another region. 3. All the \'B\'s in the top two rows form a region. The sizes of the regions are 1, 4, and 4 respectively. Input: - The first line contains the integer N, the size of the grid (1 ≤ N ≤ 50). - The next N lines each contain N characters representing the grid. Output: - Print space-separated integers in ascending order representing the sizes of all distinct regions found. Example Input: ``` 3 A B B B B A A A A ``` Example Output: ``` 1 4 4 ``` If there are multiple test cases, handle them sequentially in a single run of the program.","solution":"def get_region_sizes(grid): Given a square grid of size N*N filled with characters, returns the sizes of all distinct regions formed by contiguous characters. n = len(grid) visited = [[False] * n for _ in range(n)] directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def dfs(x, y): stack = [(x, y)] count = 0 while stack: cx, cy = stack.pop() if not (0 <= cx < n and 0 <= cy < n) or visited[cx][cy]: continue visited[cx][cy] = True count += 1 for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == grid[cx][cy]: stack.append((nx, ny)) return count region_sizes = [] for i in range(n): for j in range(n): if not visited[i][j]: region_size = dfs(i, j) region_sizes.append(region_size) return sorted(region_sizes) def parse_input_and_compute(s): Parses the input string to extract the grid and computes the sizes of all distinct regions. lines = s.strip().split(\'n\') n = int(lines[0]) grid = [lines[i + 1].split() for i in range(n)] region_sizes = get_region_sizes(grid) return \' \'.join(map(str, region_sizes))"},{"question":"You are given a sequence of operations to perform on a stack data structure. The stack can be initialized as empty, and you need to execute a series of operations and finally return the state of the stack. There are three types of operations: 1. **PUSH X**: Push the integer X onto the stack. 2. **POP**: Remove the top element from the stack. If the stack is empty, this operation does nothing. 3. **PEEK**: Print the top element of the stack. If the stack is empty, print \\"EMPTY\\". Write a program that reads a sequence of operations and processes them. After all operations are performed, print the state of the stack (from bottom to top) in a single line. If the stack is empty, print \\"EMPTY\\". Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of operations. Each of the next n lines contains one of the following operations: - \\"PUSH X\\" where X is an integer (1 ≤ X ≤ 1000) - \\"POP\\" - \\"PEEK\\" Output For each \\"PEEK\\" operation, print the top element of the stack or \\"EMPTY\\" if the stack is empty. After all operations, print the state of the stack (from bottom to top) in a single line or \\"EMPTY\\" if the stack is empty. Examples Input 7 PUSH 1 PUSH 2 PEEK POP PEEK POP PEEK Output 2 1 EMPTY EMPTY Input 3 PUSH 10 PUSH 20 PEEK Output 20 10 20 Input 4 PUSH 5 PEEK POP PEEK Output 5 EMPTY EMPTY","solution":"def process_operations(n, operations): stack = [] peek_outputs = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, x = operation.split() stack.append(int(x)) elif operation == \\"POP\\": if stack: stack.pop() elif operation == \\"PEEK\\": if stack: peek_outputs.append(str(stack[-1])) else: peek_outputs.append(\\"EMPTY\\") final_stack = \\"EMPTY\\" if not stack else \\" \\".join(map(str, stack)) return peek_outputs, final_stack"},{"question":"Given a string containing a sequence of words separated by spaces, you need to find the word that appears the most frequently in the string. If there are multiple words with the same highest frequency, return the word that appears first in the string among them. # Input - The first line of input will contain an integer t, the number of test cases. - Each of the following t lines will contain a string consisting of words separated by spaces. The words will only contain lowercase letters. # Output - For each test case, output the word that appears the most frequently in the string. In case of a tie, print the word that appears first in the string among them. # Constraints - 1 ≤ t ≤ 100 - 1 ≤ length of each string ≤ 1000 - Each word in the string will be a non-empty sequence of lowercase letters. # Example Input: ``` 3 hello world hello apple orange apple banana apple dog cat dog mouse cat elephant dog ``` Output: ``` hello apple dog ``` # Explanation: - In the first test case, \\"hello\\" appears twice while \\"world\\" appears once. So, the output is \\"hello\\". - In the second test case, \\"apple\\" appears three times, which is the most frequent. - In the third test case, both \\"dog\\" and \\"cat\\" appear twice, but \\"dog\\" appears first in the string, so the output is \\"dog\\".","solution":"def most_frequent_word(t, test_cases): results = [] for case in test_cases: words = case.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = max(word_count.values()) max_word = None for word in words: if word_count[word] == max_count: max_word = word break results.append(max_word) return results"},{"question":"Write a program that reads several lines of text from the input and counts the number of vowels (a, e, i, o, u) in each line. Input The input consists of multiple lines of text. The number of lines does not exceed 1000. Each line of text contains up to 100 characters and may include spaces, punctuation, and digits. The input ends with a line containing a single period (\\".\\"). Your program should not process this terminal symbol. Output For each line of text, print the number of vowels found in that line. Example Input Hello World Programming is fun! I like coding challenges. . Output 3 5 8","solution":"def count_vowels(text_lines): Counts the number of vowels in each line of the provided list of text lines. Parameters: text_lines (list of str): List of strings where each string is a line of text. Returns: list of int: Number of vowels in each line. vowels = \'aeiouAEIOU\' lines_vowel_count = [] for line in text_lines: if line == \\".\\": break count = sum(1 for char in line if char in vowels) lines_vowel_count.append(count) return lines_vowel_count"},{"question":"You are given two strings, s1 and s2. Your task is to determine if s1 can be transformed into s2 using exactly one operation. The only allowed operation is either: 1. Insert exactly one character anywhere in s1, or 2. Remove exactly one character from s1, or 3. Replace exactly one character in s1 with a different character. Write a function `one_edit_away(s1: str, s2: str) -> str` that returns `\\"Yes\\"` if s1 can be transformed to s2 using exactly one of the allowed operations, or `\\"No\\"` otherwise. Constraints * s1 and s2 are strings of lowercase English letters. * 1 ≤ |s1|, |s2| ≤ 10^5 Examples Input s1 = \\"pale\\" s2 = \\"ple\\" Output \\"Yes\\" Input s1 = \\"pales\\" s2 = \\"pale\\" Output \\"Yes\\" Input s1 = \\"pale\\" s2 = \\"bale\\" Output \\"Yes\\" Input s1 = \\"pale\\" s2 = \\"bake\\" Output \\"No\\"","solution":"def one_edit_away(s1: str, s2: str) -> str: if abs(len(s1) - len(s2)) > 1: return \\"No\\" if len(s1) == len(s2): # Check if one replacement can make the strings equal found_difference = False for ch1, ch2 in zip(s1, s2): if ch1 != ch2: if found_difference: return \\"No\\" found_difference = True return \\"Yes\\" if len(s1) + 1 == len(s2): # Check if inserting one character in s1 can make it equal to s2 i = j = 0 while i < len(s1) and j < len(s2): if s1[i] != s2[j]: if i != j: return \\"No\\" j += 1 else: i += 1 j += 1 return \\"Yes\\" if len(s1) - 1 == len(s2): # Check if removing one character from s1 can make it equal to s2 i = j = 0 while i < len(s1) and j < len(s2): if s1[i] != s2[j]: if i != j: return \\"No\\" i += 1 else: i += 1 j += 1 return \\"Yes\\" return \\"No\\""},{"question":"Xenny now wants to explore factors and multiples. His latest homework assignment involves working with a list of integers. Given a list, he needs to find the Greatest Common Divisor (GCD) of all elements in a particular range specified by two indices in the list. This time, Xenny is busy with a school project and hasn\'t found the time to complete his homework. Can you help Xenny by solving this for him? You are given a list of integers, and you need to perform several queries. Each query consists of two indices specifying a range in the list, and you need to output the GCD of the subarray formed by that range, inclusive of both indices. Input: - The first line consists of an integer n, the number of elements in the list. - The second line consists of n space-separated integers, the elements of the list. - The third line consists of an integer q, the number of queries. - The next q lines each contain two integers l and r, representing the range [l, r] for which the GCD is to be found. Output: For each query, print the GCD of the subarray specified by the range [l, r] on a new line. Constraints: 1 ≤ n ≤ 1000 1 ≤ list[i] ≤ 1000 1 ≤ q ≤ 500 1 ≤ l ≤ r ≤ n SAMPLE INPUT 5 2 3 6 9 5 3 1 3 2 5 1 5 SAMPLE OUTPUT 1 1 1 Explanation: - For the first query, the subarray is [2, 3, 6] and the GCD is 1. - For the second query, the subarray is [3, 6, 9, 5] and the GCD is 1. - For the third query, the subarray is [2, 3, 6, 9, 5] and the GCD is 1.","solution":"import math from functools import reduce def gcd(a, b): return math.gcd(a, b) def gcd_of_list(lst): return reduce(gcd, lst) def gcd_of_subarray(arr, l, r): subarray = arr[l-1:r] return gcd_of_list(subarray)"},{"question":"Amelia is a botanist who loves to catalog plants. She has a notebook containing various plant names paired with their unique IDs. Each plant name consists of lowercase letters only. Amelia is also interested in knowing which plants share the longest common suffix. A suffix is a substring that occurs at the end of a string. Your task is to help her find the longest common suffix for any given prefix of a plant name in her notebook. Input The first line contains an integer N - the number of plant names. Each of the next N lines contains a string Si followed by an integer IDi. Si stands for the plant name and IDi for the unique ID. The next line contains an integer Q - the number of queries. Each of the next Q lines contains a query string Qi, representing a prefix of a plant name she is interested in. Output Q lines, each containing the plant name that matches the prefix Qi with the longest common suffix. If there\'s a tie, return the plant name with the lexicographically smallest name. If no plant name matches the prefix, output \\"NO MATCH\\". Constraints: 0 <= N <= 1000 0 <= Q <= 1000 1 <= |Si| <= 1000 (length of each plant name Si) 1 <= |Qi| <= 1000 (length of each query Qi) 1 <= |IDi| <= 1000000 (unique ID for each plant) Example Input: 4 dandelion 9001 rose 9002 liontail 9003 daisy 9004 3 dan rose li Output: dandelion rose liontail","solution":"def find_longest_common_suffix(plants, queries): def common_suffix_length(s1, s2): min_len = min(len(s1), len(s2)) i = 1 while i <= min_len and s1[-i] == s2[-i]: i += 1 return i - 1 matching_results = [] plant_names = [plant[0] for plant in plants] for query in queries: longest_suffix_length = -1 best_match = \\"NO MATCH\\" for plant_name in plant_names: if plant_name.startswith(query): suffix_len = common_suffix_length(plant_name, query) if suffix_len > longest_suffix_length or (suffix_len == longest_suffix_length and plant_name < best_match): longest_suffix_length = suffix_len best_match = plant_name matching_results.append(best_match) return matching_results"},{"question":"Given an array A of size N. You are required to perform the following operations Q times: For each operation, you are given three integers L, R, and X. Increment the elements of the array from index L to R (inclusive) by X. After performing all the operations, print the final state of the array. Input: The first line contains an integer N, which is the number of elements in the array A. The second line contains N space-separated integers denoting the elements of the array A. The third line contains an integer Q, which represents the number of operations. The next Q lines each contain three space-separated integers L, R, and X, which denote the range [L, R] and the value to increment by X. Output: Print a single line containing N space-separated integers, which represents the final state of the array after all Q operations. Constraints: 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 1000000 1 ≤ Q ≤ 100000 0 ≤ L ≤ R < N 1 ≤ X ≤ 1000 SAMPLE INPUT 5 10 20 30 40 50 3 1 3 5 0 2 3 2 4 4 SAMPLE OUTPUT 13 23 42 49 54 Explanation: - After the first operation (1, 3, 5), the array becomes: [10, 25, 35, 45, 50] - After the second operation (0, 2, 3), the array becomes: [13, 28, 38, 45, 50] - After the third operation (2, 4, 4), the array becomes: [13, 28, 42, 49, 54] So, the final state of the array is [13, 28, 42, 49, 54].","solution":"def apply_operations(N, A, Q, operations): Applies a series of increment operations to the array A. :param N: int, the number of elements in the array A :param A: list, the elements of the array A :param Q: int, the number of operations to be performed :param operations: list of tuples, each tuple contains three integers (L, R, X) representing the operation to increment elements from index L to R by X. :return: list, the final state of the array after all operations for L, R, X in operations: for i in range(L, R + 1): A[i] += X return A # Example usage: N = 5 A = [10, 20, 30, 40, 50] Q = 3 operations = [(1, 3, 5), (0, 2, 3), (2, 4, 4)] result = apply_operations(N, A, Q, operations) print(result) # Output should be: [13, 28, 42, 49, 54]"},{"question":"Alice is working on a research project that involves analyzing the structure of social networks. She wants to identify if there are any isolated individuals within the network. An isolated individual is defined as a person who has no connections with any other individuals. Alice has collected the data of the network and represents it as an adjacency matrix. In this matrix, a value of 1 at position (i, j) indicates that person i is connected to person j, and a 0 indicates that there is no connection. Note that in an undirected network, if person i is connected to person j, then person j is also connected to person i, so the matrix is symmetric. Your task is to write a program that takes an adjacency matrix as input and outputs the indices of all isolated individuals in the network. If there are no isolated individuals, your program should output \\"None\\". Input Format The first line of the input contains a single integer n, indicating the number of individuals in the network. The next n lines contain n space-separated integers each, representing the adjacency matrix. Output Format Output a single line containing the indices of all isolated individuals, separated by spaces. If there are no isolated individuals, output \\"None\\". Example Input 4 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 Output 3","solution":"def find_isolated_individuals(n, adjacency_matrix): Finds and returns the indices of isolated individuals in the network. Parameters: n (int): The number of individuals in the network. adjacency_matrix (list of list of int): The adjacency matrix. Returns: list: The indices of isolated individuals or None if there are no isolated individuals. isolated_indices = [] for i in range(n): if all(adjacency_matrix[i][j] == 0 for j in range(n)): # Check whole row for connections isolated_indices.append(i) return isolated_indices if isolated_indices else \\"None\\""},{"question":"In a kingdom far, far away, there lies a city with a series of castles connected by roads. The king of the land wants to visit all the castles but is concerned about the total distance he will travel. The king starts his journey from a specific castle and must visit all other castles exactly once before returning to his starting point. Given a list of castles connected by roads and the distances between them, write a program to find the shortest cyclic path that visits every castle exactly once and returns to the starting point (i.e., the shortest Hamiltonian cycle). Input The input consists of several datasets. Each dataset represents a map of the kingdom and is defined as follows: nc| ml ---|--- c1,1 | c1,2 | d1 c2,1 | c2,2 | d2 ... cml,1 | cml,2 | dml Here, 2 <= nc <= 15 is the number of castles (so, castle names are 1, 2, ..., nc), and 1 <= ml <= nc*(nc-1)/2 is the number of roads between the castles in this dataset. ci,1 and ci,2 (i = 1, 2, ..., ml) are castle names connected by the ith road. di >= 1 (i = 1, 2, ..., ml) is the distance between the two castles ci,1 and ci,2. The input terminates with a pair of zeros \\"0 0\\" in place of nc and ml. Each dataset is separated by a blank line. Output For each dataset, output a single line with only the minimal length of the shortest cyclic path that visits every castle exactly once and returns to the starting point. Examples Input 3 3 1 2 5 2 3 7 1 3 9 4 6 1 2 2 1 3 4 1 4 1 2 3 5 2 4 8 3 4 2 0 0 Output 21 10","solution":"from itertools import permutations def find_shortest_hamiltonian_cycle(nc, roads): # Create graph representation graph = [[float(\'inf\')] * nc for _ in range(nc)] for a, b, d in roads: graph[a-1][b-1] = d graph[b-1][a-1] = d # Initialize the result with a large value min_cycle_length = float(\'inf\') # Try all permutations of vertices to find the shortest Hamiltonian cycle for perm in permutations(range(1, nc)): # Start from node 0 current_length = graph[0][perm[0]] for i in range(nc - 2): current_length += graph[perm[i]][perm[i+1]] current_length += graph[perm[-1]][0] min_cycle_length = min(min_cycle_length, current_length) return min_cycle_length def process_input(data): index = 0 results = [] while index < len(data): line = data[index].strip() index += 1 if line == \'0 0\': break if line == \'\': continue nc, ml = map(int, line.split()) roads = [] for _ in range(ml): a, b, d = map(int, data[index].strip().split()) roads.append((a, b, d)) index += 1 results.append(find_shortest_hamiltonian_cycle(nc, roads)) return results"},{"question":"Sally the Explorer is traveling through a jungle and encounters a series of ancient gates. Each gate has a unique code represented by a sequence of integers, and to pass through a gate, she needs to convert the sequence into a strictly increasing sequence of integers. However, she can only use a special spell that swaps two consecutive elements in the sequence. Help Sally find out the minimum number of swaps needed to convert the sequence into a strictly increasing sequence. If it is impossible, return -1. Input The first line contains an integer n (2 ≤ n ≤ 105), representing the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105), representing the sequence\'s elements. Output Output the minimum number of swaps needed to convert the sequence into a strictly increasing sequence, or -1 if it is impossible. Examples Input 4 4 3 2 1 Output 6 Input 5 1 2 3 5 4 Output 1 Input 3 1 2 3 Output 0 Input 4 1 3 2 2 Output -1","solution":"def min_swaps_to_increasing_sequence(n, arr): Returns the minimum number of swaps needed to convert the sequence into a strictly increasing sequence, or -1 if it is impossible. def is_strictly_increasing(seq): return all(seq[i] < seq[i + 1] for i in range(len(seq) - 1)) # Special case, handle if the input array is already strictly increasing if is_strictly_increasing(arr): return 0 # Check for duplicate elements as strictly increasing sequence cannot have duplicates if len(set(arr)) != len(arr): return -1 swaps = 0 # Bubble sort to count the swaps required for i in range(n-1): for j in range(n-1-i): if arr[j] >= arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps if is_strictly_increasing(arr) else -1"},{"question":"Linda is arranging her bookshelf. She has `n` books, each with a different height, and she wants to arrange them such that no book is taller than the book following it. She can only use the minimum number of moves to achieve this arrangement. In one move, she can take a book from any position and insert it anywhere among the remaining books. Given the initial arrangement of books, help Linda determine the minimum number of moves needed to arrange her books in non-decreasing order of their heights. **Input** The first line contains a single positive integer `T` — the number of test cases. For each test case: - The first line contains a single integer `n` — the number of books. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) — the heights of the books in their initial arrangement. **Output** For each test case, print a single integer — the minimum number of moves to arrange the books in non-decreasing order. **Example** **Input** ``` 2 5 4 1 3 2 5 4 7 5 2 8 ``` **Output** ``` 2 2 ``` **Note** In the first sample case, Linda can: 1. Pick the book with height 3 and place it after the book with height 2: [4, 1, 2, 3, 5]. 2. Then pick the book with height 4 and place it at the beginning: [1, 2, 3, 4, 5]. In the second sample case, Linda can: 1. Pick the book with height 5 and place it after the book with height 7: [7, 2, 5, 8]. 2. Then pick the book with height 2 and place it at the beginning: [2, 5, 7, 8].","solution":"def minimum_moves_to_sort_books(n, heights): Returns the minimum number of moves to sort the books in non-decreasing order of their heights. # Dynamic Programming approach to find length of Longest Increasing Subsequence (LIS) from bisect import bisect_left if n == 0: return 0 lis = [] for height in heights: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height # The minimum number of moves required is the difference # between total number of books and the length of the LIS. return n - len(lis) def solve(T, test_cases): results = [] for i in range(T): n, heights = test_cases[i] result = minimum_moves_to_sort_books(n, heights) results.append(result) return results"},{"question":"Caroline is learning about prime factorization and she wants to write a function that receives a positive integer and returns its prime factorization in the following format: - The prime factors should appear in ascending order. - Each prime factor should be followed by its exponent (i.e., the number of times it divides the number). - The factors and exponents should be formatted in a string where each factor-exponent pair is separated by a caret (^) and each pair is separated by an asterisk (*). For example, the prime factorization of 18 is \\"2^1*3^2\\", and the prime factorization of 60 is \\"2^2*3^1*5^1\\". Write a function that takes an integer n (2 ≤ n ≤ 10^9) and returns the prime factorization string as described. Input The input consists of a single line containing a positive integer n. Output Output a single line containing the prime factorization string of n. Examples Input 18 Output 2^1*3^2 Input 60 Output 2^2*3^1*5^1","solution":"def prime_factors(n): Returns the prime factorization of the given number as a formatted string. if n <= 1: raise ValueError(\\"Input number should be a positive integer greater than 1.\\") factorization = [] count = 0 # Test for number of twos while n % 2 == 0: n //= 2 count += 1 if count > 0: factorization.append(f\\"2^{count}\\") # Test for odd factors from 3 onwards factor = 3 while factor * factor <= n: count = 0 while n % factor == 0: n //= factor count += 1 if count > 0: factorization.append(f\\"{factor}^{count}\\") factor += 2 # If n is still greater than 2, it must be prime if n > 2: factorization.append(f\\"{n}^1\\") return \\"*\\".join(factorization) # Examples given in the problem statement print(prime_factors(18)) # Output: \\"2^1*3^2\\" print(prime_factors(60)) # Output: \\"2^2*3^1*5^1\\""},{"question":"The kingdom of Algoria is known for its unique way of encoding messages to ensure that only the intended recipients can understand them. The specific technique they use involves creating a permutation of integers and then encoding additional information about the permutation through the use of \\"derangement.\\" A derangement is a permutation of a set of elements where no element appears in its original position. Algoria’s puzzle masters challenge you to decode their messages by finding specific derangements of given sequences. You need to write a program that, given an integer n, computes the number of derangements of a sequence of n distinct elements (1 through n). Input A single integer n (1 ≤ n ≤ 20), representing the size of the sequence. Output A single integer representing the number of derangements of the sequence of n elements. Example: Input: 3 Output: 2 Description: For n=3, there are 2 valid derangements: [2, 3, 1] and [3, 1, 2].","solution":"def count_derangements(n): Returns the number of derangements for n distinct elements. A derangement is a permutation of a set such that no element appears in its original position. if n == 0: return 1 if n == 1: return 0 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 0 for i in range(2, n + 1): dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) return dp[n]"},{"question":"John is learning about strings and their unique properties in his computer science class. One problem he encounters is dealing with case sensitivity. He wants to create a function that takes a string as input and rearranges it such that all lowercase letters come before any uppercase letters, while preserving the relative order of the lowercase and uppercase letters within their respective groups. Your task is to help John write this function. Input The input is a single string s, consisting of lowercase and uppercase English letters. The length of s will not exceed 100 characters. Output Output a new string where all lowercase letters come before uppercase letters, preserving the order of occurrence for both groups from the original string. Examples Input aAbBcC Output abcABC Input HelloWorld Output elloorldHW Input Coder Output oderC","solution":"def rearrange_string(s): Returns a new string where all the lowercase letters come before uppercase letters, preserving the order of occurrence in the original string within each group. Parameters: s (str): Input string consisting of lowercase and uppercase English letters. Returns: str: A string with all lowercase letters before uppercase letters. lower_case = [char for char in s if char.islower()] upper_case = [char for char in s if char.isupper()] return \'\'.join(lower_case + upper_case)"},{"question":"A large tower with N floors is being constructed, and you are given a template for how each floor should be organized. Each floor template is a string of length M consisting of \'0\'s and \'1\'s. A \'0\' represents a passable space, and a \'1\' represents an impassable space. Your job is to determine whether it is possible to traverse from the first floor to the N-th floor, starting at the leftmost column (column 0) of the first floor and moving through passable spaces (\'0\'s) only. Movement is allowed upward to the next floor\'s corresponding column, to the left or to the right on the same floor but not downward. Write a program that, given the floor templates, determines if it is possible to reach the leftmost column of the N-th floor starting from the leftmost column of the first floor. Constraints: * 1 ≤ N, M ≤ 1000 * All strings have exactly M characters. Input: The input is given from Standard Input in the following format: N M floor_1 floor_2 : floor_N Output: Output `YES` if it is possible to reach the leftmost column of the N-th floor from the leftmost column of the first floor, otherwise print `NO`. Examples: Input: 4 5 00000 01110 01010 00000 Output: YES Input: 3 3 000 111 000 Output: NO","solution":"def can_traverse_tower(floors): N = len(floors) M = len(floors[0]) # Initializing a DP table with False dp = [[False] * M for _ in range(N)] # Starting from the first floor, leftmost column dp[0][0] = floors[0][0] == \'0\' for i in range(N): for j in range(M): if floors[i][j] == \'1\': continue # Check left adjacency on the same floor if j > 0 and dp[i][j - 1]: dp[i][j] = True # Check right adjacency on the same floor if j < M - 1 and dp[i][j + 1]: dp[i][j] = True # Check if we can move upward from the previous floor if i > 0 and dp[i - 1][j]: dp[i][j] = True # If we can reach the leftmost column of the N-th floor return \\"YES\\" if dp[N - 1][0] else \\"NO\\" # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) floors = [] for i in range(N): floors.append(data[2 + i]) print(can_traverse_tower(floors))"},{"question":"You are given a non-negative integer array `arr` of length `n`. Determine if `arr` is a palindrome array. An array is considered a palindrome if it reads the same forwards and backwards. Constraints * 1 ≤ n ≤ 100 * 0 ≤ arr[i] ≤ 1000 (0 ≤ i < n) Input Input is given from Standard Input in the following format: ``` n arr_1 arr_2 ... arr_n ``` Output If `arr` is a palindrome array, print `Yes`; if it is not, print `No`. Examples Input ``` 5 1 2 3 2 1 ``` Output ``` Yes ``` Input ``` 3 1 2 1 ``` Output ``` Yes ``` Input ``` 4 1 2 3 4 ``` Output ``` No ``` Input ``` 1 42 ``` Output ``` Yes ```","solution":"def is_palindrome_array(n, arr): Determines if the given array is a palindrome. Args: n (int): the length of the array. arr (list of int): the array of non-negative integers. Returns: str: \\"Yes\\" if the array is a palindrome, otherwise \\"No\\". for i in range(n // 2): if arr[i] != arr[n - 1 - i]: return \\"No\\" return \\"Yes\\" # Taking input from the user and calling the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(is_palindrome_array(n, arr))"},{"question":"Given a list of integers, your task is to determine the count of distinct prime factors for each integer in the list. Input The first line contains an integer t (1 ≤ t ≤ 10000), the number of test cases. Each of the next t lines contains one integer n (1 ≤ n ≤ 10^9). Output For each test case, print the count of distinct prime factors of n. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 10^9 Sample Input 3 10 15 20 Sample Output 2 2 2","solution":"def count_distinct_prime_factors(n): Returns the count of distinct prime factors of n. count = 0 # Check for number of 2\'s if n % 2 == 0: count += 1 while n % 2 == 0: n //= 2 # Check for all odd numbers up to sqrt(n) for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: count += 1 while n % i == 0: n //= i if n > 2: count += 1 return count def process_test_cases(t, numbers): return [count_distinct_prime_factors(n) for n in numbers]"},{"question":"You are given an array of integers and a separate integer x. Your task is to determine whether there exists a pair of distinct elements in the array that sum up to x. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". Constraints: - The length of the array n (1 ≤ n ≤ 200 000). - Each element in the array a_i (1 ≤ a_i ≤ 1 000 000 000). - The integer x (1 ≤ x ≤ 2 000 000 000). Input The first line contains two integers n and x, the length of the array and the integer x. The second line contains n integers representing the array. Output If there exists a pair of elements in the array that sum up to x, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 9 1 3 4 2 7 Output YES Input 4 8 1 2 3 4 Output NO Note For the first example, the pair (2, 7) sums to 9. For the second example, there is no pair of distinct elements that sum to 8.","solution":"def has_pair_with_sum(arr, x): Check if there exists a pair of distinct elements in the array that sum up to x. :param arr: List of integers :param x: Target sum :return: \\"YES\\" if there\'s a pair with sum x, otherwise \\"NO\\" seen = set() for number in arr: if x - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Prime Factors Problem Statement Find the prime factorization of a given integer n. Prime factorization of a number is a way of expressing the number as a product of its prime factors. Constraints - 2 ≤ n ≤ 10^5 Input The input consists of a single integer n. Output Output the prime factorization of n as a list of integers in non-decreasing order. If a prime factor appears multiple times in the factorization, it should appear the same number of times in the list. Examples Input 28 Output 2 2 7 Input 45 Output 3 3 5 Input 77 Output 7 11","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n in non-decreasing order. factors = [] # Check for number of 2s in n while n % 2 == 0: factors.append(2) n = n // 2 # Check for other primes using the rule for odd factors for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # Check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Problem: Meeting Room Scheduling A company has several meeting rooms, and people can reserve these rooms for meetings. Each meeting has a start and end time, and a duration. Given a list of meetings and their required schedules, determine the minimum number of meeting rooms required to accommodate all the meetings without any overlap. # Constraints * 1 ≤ number of meetings ≤ 10^4 * 1 ≤ start time of a meeting < end time of a meeting ≤ 10^6 # Input An integer n representing the number of meetings, followed by n pairs of integers, start and end, representing the start and end times of each meeting, one pair per line. `n` `start1 end1` `start2 end2` ... `startn endn` # Output An integer m representing the minimum number of meeting rooms required. # Examples Input ``` 3 1 4 2 5 7 9 ``` Output ``` 2 ``` Input ``` 4 3 6 1 4 5 8 2 3 ``` Output ``` 2 ```","solution":"def minMeetingRooms(intervals): Given an array of meeting time intervals consisting of start and end times, determine the minimum number of meeting rooms required. Args: intervals (List[Tuple[int, int]]): A list of (start, end) intervals for meetings. Returns: int: The minimum number of meeting rooms required to accommodate all meetings. if not intervals: return 0 # Create two separate lists for start and end times starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) s_ptr, e_ptr = 0, 0 # Start pointers for both lists num_rooms = 0 max_rooms = 0 while s_ptr < len(intervals): # If there\'s a meeting that has started by the time the current meeting ends, # we need a new room. if starts[s_ptr] < ends[e_ptr]: num_rooms += 1 s_ptr += 1 else: # Otherwise, we can use the same room. num_rooms -= 1 e_ptr += 1 max_rooms = max(max_rooms, num_rooms) return max_rooms # Example usage: # n = int(input()) # meetings = [tuple(map(int, input().split())) for _ in range(n)] # print(minMeetingRooms(meetings))"},{"question":"You are an event organizer and you need to schedule a series of presentations in one single track with minimal transition time. Each presentation has a fixed starting and ending time. To optimize the schedule, you want to minimize the total idle time between presentations. The idle time is the gap between the end of one presentation and the start of the next. If one presentation ends at the same time another one starts, there is no idle time. Write a function that schedules the presentations to have the minimum total idle time. Input The input consists of: - An integer `n` (1 ≤ n ≤ 100) — the number of presentations. - `n` lines, each containing two space-separated integers `si` and `ei` (1 ≤ si < ei ≤ 1440) — the start time and end time of the `i-th` presentation in minutes from the start of the day (0 ≤ si < 1440). Output Output a single integer — the minimum total idle time in minutes. Examples Input 3 30 60 150 180 90 120 Output 90 Input 2 100 200 50 150 Output 0 Note In the first example, one optimal way to sequence the presentations with minimal idle time is to start with the first presentation (30-60), then the third one (90-120), and finally the second one (150-180). The idle times are 30 minutes (60-90) and 30 minutes (120-150), totalling 60 minutes. In the second example, one presentation ends exactly when another starts, so the total idle time is 0.","solution":"def minimal_idle_time(n, presentations): # First, sort presentations by their start times presentations.sort() # Initialize idle time to zero total_idle_time = 0 # Iterate through presentations to calculate idle time end_time = presentations[0][1] for i in range(1, n): start_time = presentations[i][0] if start_time > end_time: total_idle_time += start_time - end_time # Update the end_time to the maximum of current end_time and the end time of the current presentation end_time = max(end_time, presentations[i][1]) return total_idle_time # Example usage # n = 3 # presentations = [(30, 60), (150, 180), (90, 120)] # print(minimal_idle_time(n, presentations)) # Output should be 60"},{"question":"You are given a sequence of integers, and you need to find the longest contiguous subarray that can be transformed into a strictly increasing sequence by modifying at most one element. Your task is to determine the length of this longest subarray. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: the first line contains an integer N (the length of the array), and the second line contains N integers representing the array elements. Output: - For each test case, output the length of the longest contiguous subarray that can be transformed into a strictly increasing sequence by modifying at most one element. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 200 - -10^9 ≤ Array elements ≤ 10^9 SAMPLE INPUT 2 5 2 1 2 3 4 6 1 2 3 1 2 3 SAMPLE OUTPUT 5 6 Explanation: 1) For the 1st case, the longest contiguous subarray [2, 1, 2, 3, 4] can be transformed into [2, 2, 2, 3, 4] by modifying the second element, which gives a length of 5. 2) For the 2nd case, the longest contiguous subarray [1, 2, 3, 1, 2, 3] can be kept as it is or by changing any \'1\' to \'2\' or \'3\' respectively, ensuring an increasing order. Thus, the length is 6.","solution":"def find_len_of_longest_increasing_subarray(arr): n = len(arr) if n <= 1: return n # Initialize variables max_length = 1 current_length = 1 modifications = 0 for i in range(1, n): # Check if current element is greater than previous one if arr[i] > arr[i - 1]: current_length += 1 else: # Check if we have already modified an element or not if modifications == 0: modifications += 1 current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 modifications = 0 max_length = max(max_length, current_length) return max_length def compute_longest_subarray(test_cases): results = [] for test in test_cases: N, arr = test results.append(find_len_of_longest_increasing_subarray(arr)) return results"},{"question":"You are given a matrix of N rows and M columns filled with integers. Your task is to find the largest possible sum of integers of a rectangle within the matrix. A rectangle is defined by choosing any two distinct pairs of row indices and any two distinct pairs of column indices. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M, which denote the number of rows and columns in the matrix, respectively. Each of the next N lines contains M space-separated integers representing the elements of the matrix. Output For each test case, output a single line containing a single integer - the largest possible sum of integers of a rectangle within the matrix. Constraints 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 -1000 ≤ matrix element ≤ 1000 Example Input: 2 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 3 3 1 2 3 4 5 6 7 8 9 Output: 29 45 Explanation: For the first test case, the maximum sum rectangle is obtained from the submatrix: 3 8 10 1 7 -6 For the second test case, the entire matrix is the rectangle with the maximum sum.","solution":"def kadane(arr): A helper function to implement the Kadane\'s algorithm. It returns the maximum sum of a contiguous subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def largest_sum_submatrix(matrix): Finds the largest possible sum of integers of a rectangle within the matrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def max_sum_rectangles(T, test_cases): Main function to handle multiple test cases. results = [] for i in range(T): N, M, matrix = test_cases[i] results.append(largest_sum_submatrix(matrix)) return results"},{"question":"You have been assigned the role of a developer in a company responsible for traffic management systems. Your task involves monitoring and managing traffic flows at various intersections. At a particular intersection, there are N traffic lights. Each traffic light operates on a fixed cycle: green for Gi seconds and red for Ri seconds. Initially, all traffic lights switch to green at the same moment. You have to determine after how many seconds all traffic lights will again turn green simultaneously after the initial switch. Given this, you need to write a program that accepts the number of traffic lights and the duration of their green and red cycles, and calculates the least common multiple (LCM) of the cycle times for each traffic light. # Input Read the following input from standard input: - The integer N on the first line, which indicates the number of traffic lights. - The following N lines contain two integers Gi and Ri, separated by a space, representing the duration of the green light and red light for the i-th traffic light. # Output Output the time (in seconds) after which all the traffic lights will turn green simultaneously again. # Example Input 5 3 2 4 6 2 3 5 5 6 1 Output 60 # Notes - The constraints are 1 ≤ N ≤ 100 and 1 ≤ Gi, Ri ≤ 100. - Be sure to handle multiple cycle times efficiently to avoid performance issues with larger inputs.","solution":"from math import gcd from functools import reduce def lcm(a, b): return a * b // gcd(a, b) def total_lcm(cycles): return reduce(lcm, cycles) def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0]) cycles = [] for i in range(1, N+1): Gi, Ri = map(int, data[i].split()) cycles.append(Gi + Ri) result = total_lcm(cycles) print(result)"},{"question":"Peter is an avid hiker and often maps out his routes before embarking on his adventures. He is currently trying to understand the terrain of a mountain range represented by a 2D matrix of heights. The matrix has a dimension of m x n where each element represents the height of a specific point in the mountain range. Peter wants to determine how many distinct \\"peak points\\" there are in the matrix. A \\"peak point\\" is defined as a cell that is strictly greater than its 4 possible neighbors (up, down, left, and right). Boundary cells are considered only with the neighbors that exist (i.e., do not assume non-existent neighbors have any height). Implement a program that, given the matrix of heights, calculates the number of unique \\"peak points\\". Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the matrix. The next m lines each contain n integers representing the height of each point in the mountain range. Each height is an integer between -1000 and 1000. Output Print a single integer — the number of distinct peak points in the matrix. Examples Input 3 3 1 2 1 3 4 3 1 2 1 Output 1 Input 4 4 10 10 10 10 10 11 12 10 10 12 11 10 10 10 10 10 Output 2 Input 2 2 5 3 2 8 Output 2 Note In the first sample test, the matrix has only one peak point (4), which is greater than all its neighbors. In the second sample test, the matrix has two peak points (12), each strictly greater than all their neighbors. In the third sample test, both 5 and 8 are peak points. 5 has no neighbors greater than itself, and similarly for 8.","solution":"def count_peak_points(matrix): This function counts the number of distinct peak points in a given 2D matrix. A peak point is a cell that is strictly greater than its 4 possible neighbors. def is_peak(i, j): current_height = matrix[i][j] # Check up if i > 0 and matrix[i - 1][j] >= current_height: return False # Check down if i < m - 1 and matrix[i + 1][j] >= current_height: return False # Check left if j > 0 and matrix[i][j - 1] >= current_height: return False # Check right if j < n - 1 and matrix[i][j + 1] >= current_height: return False return True m = len(matrix) n = len(matrix[0]) if m > 0 else 0 peak_count = 0 for i in range(m): for j in range(n): if is_peak(i, j): peak_count += 1 return peak_count"},{"question":"Taro has a sequence of N integers. He would like to partition this sequence into the minimum number of contiguous subsequences such that the sum of each subsequence is even. Determine the minimum number of partitions required to achieve this. Constraints * 1 leq N leq 200000 * 1 leq A_i leq 10^9 * All input values are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of partitions needed. Examples Input 5 2 4 1 3 6 Output 3 Input 4 1 3 5 7 Output 4 Input 6 2 2 2 2 2 2 Output 1","solution":"def min_even_partitions(n, arr): Returns the minimum number of partitions required such that each subsequences\' sum is even. partitions = 0 current_sum = 0 for num in arr: current_sum += num if current_sum % 2 != 0: partitions += 1 current_sum = 0 return partitions + 1 if current_sum != 0 else partitions"},{"question":"# Problem Alice is a computer science student who loves algorithms. She has recently learned about binary search and wants to practice it. She decides to create an array of integers and repetitively search for multiple target values in the array using the binary search algorithm. Your task is to help Alice by writing a program that takes an array of integers and multiple target values, and for each target, determines if it is present in the array or not using binary search. If the target is found, return its index; otherwise, return -1. The array may contain duplicate values, but if the target exists, you need to return the index of any one of its occurrences. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of integers in Alice\'s array. - The second line contains n space-separated integers representing Alice\'s array a[i] (1 ≤ a[i] ≤ 10^9). - The third line contains an integer m (1 ≤ m ≤ 10^5) – the number of target values. - The fourth line contains m space-separated integers representing the target values t[j] (1 ≤ t[j] ≤ 10^9). # Output - Output m lines, each containing the result of the binary search for the corresponding target value t[j]. For each target, print its index in the array if found (indexing starting from 0); otherwise, print -1. # Examples Input ``` 10 1 2 3 4 5 6 7 8 9 10 5 3 7 11 1 5 ``` Output ``` 2 6 -1 0 4 ``` Input ``` 5 2 2 2 2 2 3 1 2 3 ``` Output ``` -1 0 -1 ``` # Note Ensure that the array is sorted before performing the binary search for each target value. Keep in mind the possibility of duplicate values and return any occurrence of the target if it exists.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target. Returns the index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def find_targets_in_array(arr, targets): Takes an array and a list of target values, returns a list of results of binary search for each target. results = [] arr.sort() # Ensure the array is sorted before performing binary search for target in targets: results.append(binary_search(arr, target)) return results # Read input data def process_input_output(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) m = int(data[n+1]) targets = list(map(int, data[n+2:n+2+m])) results = find_targets_in_array(array, targets) for result in results: print(result)"},{"question":"You are given an array of integers \'arr\', and an integer \'target\'. Your task is to find and return all unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that: ``` arr[a] + arr[b] + arr[c] + arr[d] = target ``` and: - 0 ≤ a, b, c, d < n - a, b, c, and d are distinct indices Input Format: - First line contains an integer, T, the number of test cases. For each test case, the first line contains an integer n, the number of elements in the array, followed by an integer \'target\'. The second line contains n space-separated integers representing the elements of the array. Output Format: - For each test case, print all unique quadruplets that sum up to the \'target\'. Each quadruplet should be printed in a new line in the sorted order. Return an empty list if no such quadruplet exists. Constraints: - 1 ≤ T ≤ 10 - 4 ≤ n ≤ 100 - -10^9 ≤ arr[i] ≤ 10^9 - -10^9 ≤ target ≤ 10^9 Sample Input: ``` 2 5 0 1 0 -1 0 -2 2 6 0 1 2 -1 -2 0 1 ``` Sample Output: ``` [-2, -1, 1, 2] [-2, 0, 0, 2] [-1, 0, 0, 1] [-2, -1, 1, 2] [-2, 0, 0, 2] [-1, 0, 1, 0] ```","solution":"def four_sum(arr, target): Finds all unique quadruplets in the array that sum up to the target. arr.sort() n = len(arr) quadruplets = set() for i in range(n-3): for j in range(i+1, n-2): left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: quadruplets.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return [list(quad) for quad in sorted(quadruplets)] def process_test_cases(test_cases): Processes multiple test cases. results = [] for case in test_cases: n, target, arr = case results.append(four_sum(arr, target)) return results"},{"question":"A valid email address is composed of a local part, an \\"@\\" symbol, and a domain part: - The local part may contain uppercase and lowercase letters, digits, and the characters: `.`, `-`, `_`. - The domain part is a sequence of characters divided into two or more segments by dots (`.`). Each segment must contain only uppercase and lowercase letters and digits; the last segment (the top-level domain or TLD) must be at least 2 characters long, but not more than 6. Your mission is to write a program that validates a list of email addresses based on the criteria provided, and outputs \\"Valid\\" or \\"Invalid\\" for each address. Input The input is a sequence of email addresses each in a separate line. The end of the input is indicated by a line with the single word \\"END\\". Output The output should be composed of lines each corresponding to an input email address except the last \\"END\\". An output line includes \\"Valid\\" or \\"Invalid\\" depending on whether the input email address meets the specified criteria. No other characters should be inserted in the output. Example Input john.doe@example.com jane_doe@sub.domain.co.uk user@domain user@domain.toolongtld user@domain.tl user@domain.a UPPERCASE@DOMAIN.COM invalid-email@ END Output Valid Valid Invalid Invalid Valid Invalid Valid Invalid","solution":"import re def validate_email(email): Validates a single email address based on the criteria provided. email_regex = re.compile( r\\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,6}\\" ) return bool(email_regex.match(email)) def validate_emails(emails): Takes a list of email addresses and returns a list of \'Valid\' or \'Invalid\' based on the criteria. results = [] for email in emails: if validate_email(email): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results if __name__ == \\"__main__\\": emails = [] while True: email = input().strip() if email == \\"END\\": break emails.append(email) results = validate_emails(emails) for result in results: print(result)"},{"question":"Given two strings A and B, determine the minimum number of operations required to transform string A into string B. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Write a program to find the minimum number of operations required. Constraints * 1 leq |A|, |B| leq 1000 * Both A and B only contain lowercase English letters (a-z). Input Input is given from standard input and consists of two lines: - The first line contains the string A. - The second line contains the string B. Output Print the minimum number of operations required to transform string A into string B. Examples Input horse ros Output 3 Input intention execution Output 5","solution":"def min_distance(A, B): Returns the minimum number of operations required to transform string A into string B. m, n = len(A), len(B) # Initialize a dp table with size (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Bottom-up calculation of dp table for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Anna has recently acquired a special chessboard. Unlike a regular chessboard, this one has irregular dimensions and can have missing squares. Anna finds it challenging to navigate her knight across such a board and needs your help to calculate the minimum number of moves required for the knight to reach a specific target position. Given a chessboard with `n` rows and `m` columns, some squares might be missing, meaning the knight cannot land on those squares. You are given the initial position of the knight and the target position, and you need to find the minimum number of moves required for the knight to reach the target position or determine if it is impossible. The knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. The knight can move to any position that is not missing. Input The first line contains three integers `n`, `m`, and `k`, where `n` (1 ≤ n ≤ 1000) is the number of rows, `m` (1 ≤ m ≤ 1000) is the number of columns, and `k` (0 ≤ k ≤ n * m) is the number of missing squares. The second line contains four integers `x1`, `y1`, `x2`, and `y2` (1 ≤ x1, y1, x2, y2 ≤ 1000) representing the initial position and the target position of the knight respectively. The next `k` lines each contain two integers `r` and `c` (1 ≤ r ≤ n, 1 ≤ c ≤ m) representing the row and column of a missing square. Output Print a single integer representing the minimum number of moves required for the knight to reach the target position, or -1 if it is impossible. Example Input 8 8 2 1 1 8 8 3 2 5 6 Output 6 Input 5 5 3 1 1 5 5 2 3 4 1 3 4 Output 4","solution":"from collections import deque def min_knight_moves(n, m, k, x1, y1, x2, y2, missing_squares): # Knights possible moves knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Initialize the board board = [[0] * m for _ in range(n)] # Mark missing squares for r, c in missing_squares: board[r-1][c-1] = -1 # mark missing squares with -1 # BFS initialization queue = deque([(x1-1, y1-1, 0)]) # (x, y, distance) visited = set() visited.add((x1-1, y1-1)) while queue: x, y, d = queue.popleft() # If we reached the target if x == x2-1 and y == y2-1: return d # Check all possible knight moves for dx, dy in knight_moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and board[nx][ny] != -1: visited.add((nx, ny)) queue.append((nx, ny, d + 1)) # If we exhaust the queue and never reach the target position return -1"},{"question":"A new mall is opening in town, and the team managing the parking facilities wants to ensure their parking allocation system is efficient. To help them, you need to write a program that simulates their parking lot system. The parking lot has several parking levels, each with a fixed number of spots per level. Each spot can be either occupied or free. Vehicles arrive and park in the first available spot, starting from the first level to the last. If a vehicle leaves, its spot becomes free and will be available for future vehicles. Given a series of parking operations (arrivals and departures), determine the final state of the parking lot. Each operation is represented by a string: - \\"A\\" for arrival of a vehicle - \\"D x\\" for departure of the vehicle that parked at spot number x A spot number is defined as L*P + S, where: - L is the level index (starting from 0) - P is the number of parking spots per level - S is the spot index in the level (starting from 0) # Input - The first line contains three integers L, P, and Q: - L (1 ≤ L ≤ 50): The number of levels. - P (1 ≤ P ≤ 50): The number of spots per level. - Q (1 ≤ Q ≤ 1000): The number of operations. - The next Q lines contain a series of operations (\\"A\\" for arrival and \\"D x\\" for a departure at spot x). # Output - Output the final state of the parking lot levels, where `0` indicates a free spot, and `1` indicates an occupied spot. # Example Input ``` 2 3 5 A A A D 2 A ``` Output ``` 1 1 0 1 0 0 ``` # Explanation The parking lot has 2 levels and 3 spots per level. The sequence of operations is as follows: 1. First vehicle parks at spot 0 (first spot at level 0). 2. Second vehicle parks at spot 1 (second spot at level 0). 3. Third vehicle parks at spot 2 (third spot at level 0). 4. The vehicle at spot 2 (level 0, spot 2) leaves. 5. Fourth vehicle parks again at spot 2 (the spot that became free earlier).","solution":"def simulate_parking_lot(L, P, Q, operations): Simulates a parking lot with given levels L, spots per level P and a series of Q operations. Parameters: L (int): Number of levels P (int): Number of spots per level Q (int): Number of operations operations (list of str): List of operations Returns: list of list of int: Final state of the parking lot parking_lot = [[0] * P for _ in range(L)] parked_spots = [] for op in operations: if op == \\"A\\": parked = False for i in range(L): for j in range(P): if parking_lot[i][j] == 0: parking_lot[i][j] = 1 parked_spots.append(i * P + j) parked = True break if parked: break elif op.startswith(\\"D\\"): _, x = op.split() x = int(x) l = x // P s = x % P parking_lot[l][s] = 0 return parking_lot"},{"question":"In a distant desert land, there is a small town with a peculiar habit of trading spices. The town has \\"N\\" types of spices, each with a unique name and specific trading values. Traders come to the town every day, and each trader brings a specific number of one type of spice to trade. The town has a central trading system managed by the Spice Master, who keeps track of all the spices and their quantities. Every evening, the Spice Master updates the trading values of all spices based on the day\'s trading activities. The value of each spice is determined by the amount sold and the amount bought throughout the day. For now, we have a simplified rule: * The relative value of a spice increases by 1 unit for every quantity sold and decreases by 1 unit for every quantity bought. * The minimum value of any spice cannot be less than 1 unit. Your task is to write a program that simulates the trading activities in the town. Given the initial values of the spices and a series of trading activities, your program should calculate the final trading values for each spice at the end of the day. # Inputs 1. The first line contains one integer N (1 ≤ N ≤ 100), the number of different types of spices. 2. The second line contains N integers, each representing the initial value of each spice (V1, V2, ..., VN) where (1 ≤ Vi ≤ 100). 3. The third line contains one integer T (1 ≤ T ≤ 1000), the number of trading activities. 4. The next T lines each contain two space-separated values: - An integer AI (0 for buying and 1 for selling). - A string SI (the name of the spice involved in the activity). Constraint: - The names of the spices will be distinct and consist only of lowercase alphabetic characters. # Output Print the final values of the spices in the same order as their initial values after processing all trading activities. If a spice\'s final value drops below 1 due to buying activities, it should be set to 1. # Example Input: ``` 3 10 5 8 6 1 cumin 1 paprika 0 cumin 1 saffron 0 paprika 0 saffron ``` Output: ``` 10 5 8 ``` Explanation: - Initial values: cumin = 10, paprika = 5, saffron = 8. - Transactions: - Sell cumin: cumin\'s value increases to 11. - Sell paprika: paprika\'s value increases to 6. - Buy cumin: cumin\'s value decreases to 10. - Sell saffron: saffron\'s value increases to 9. - Buy paprika: paprika\'s value decreases to 5. - Buy saffron: saffron\'s value decreases to 8 (but doesn\'t go below 1). - Final values: cumin = 10, paprika = 5, saffron = 8.","solution":"def simulate_spice_trading(N, initial_values, T, activities): # Create a dictionary to store spice values with their names spice_values = {f\\"spice_{i}\\": initial_values[i] for i in range(N)} for activity in activities: action, spice_name = activity if action == 1: # Selling spice_values[spice_name] += 1 elif action == 0: # Buying spice_values[spice_name] -= 1 # Ensure that the spice value doesn\'t drop below 1 if spice_values[spice_name] < 1: spice_values[spice_name] = 1 # Return the final values of the spices in the same order as the initial values return [spice_values[f\\"spice_{i}\\"] for i in range(N)] # Example usage N = 3 initial_values = [10, 5, 8] T = 6 activities = [ (1, \'spice_0\'), (1, \'spice_1\'), (0, \'spice_0\'), (1, \'spice_2\'), (0, \'spice_1\'), (0, \'spice_2\') ] result = simulate_spice_trading(N, initial_values, T, activities) print(result) # Output: [10, 5, 8]"},{"question":"An online retail store keeps track of its inventory updates and sales in a log. Each entry in the log either adds to the inventory or represents an item sale. You are required to determine which item has the highest inventory count at any given moment after processing all the log entries. If multiple items have the same highest count, the item with the lexicographically smallest name should be considered as the one with the highest count. Input The first line contains an integer N, the total number of log entries. Then follow N lines, each containing information about the log entry in the format \\"action item quantity\\", where the action is either \\"add\\" or \\"sell\\", the item is the name of the item, and quantity is a positive integer representing the number of items added or sold. Output Print the name of the item with the highest inventory count after processing all the log entries. Constraints 1 ≤ N ≤ 1000 \'action\' is either \\"add\\" or \\"sell\\" \'item\' is a string of lower case letters 1 ≤ |item| ≤ 32 1 ≤ quantity ≤ 1000 SAMPLE INPUT 5 add apple 10 add banana 20 sell apple 5 add carrot 15 sell banana 5 SAMPLE OUTPUT banana Explanation After processing the log entries, the inventory counts are: - apple: 5 - banana: 15 - carrot: 15 Both banana and carrot have the highest count, but banana comes first lexicographically. Hence, banana is the output.","solution":"def highest_inventory_item(log_entries): inventory = {} for entry in log_entries: action, item, quantity = entry.split() quantity = int(quantity) if action == \\"add\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action == \\"sell\\": if item in inventory: inventory[item] -= quantity else: inventory[item] = -quantity max_quantity = -1 max_item = \'\' for item, quantity in inventory.items(): if quantity > max_quantity or (quantity == max_quantity and item < max_item): max_quantity = quantity max_item = item return max_item"},{"question":"You are given an array of n distinct integers and an integer k. Your task is to determine if there exists a pair of elements in the array whose sum is equal to k. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains two integers n (1 ≤ n ≤ 10^5) and k (-10^9 ≤ k ≤ 10^9), indicating the number of elements in the array and the target sum, respectively. The second line of each test case contains n distinct integers a_i (-10^9 ≤ a_i ≤ 10^9). Output For each test case, print \\"YES\\" if there exists a pair of elements in the array whose sum is equal to k. Otherwise, print \\"NO\\". Example Input 3 5 9 1 2 3 4 5 4 7 1 2 3 4 3 100 -1 0 1 Output YES YES NO Note In the first test case, there are two elements (4 and 5) whose sum is 9. Thus the output is \\"YES\\". In the second test case, there are two elements (3 and 4) whose sum is 7. Thus the output is \\"YES\\". In the third test case, there is no pair of elements whose sum is 100. Thus the output is \\"NO\\".","solution":"def has_pair_with_sum(arr, k): Returns \\"YES\\" if there is a pair in arr that sums up to k, otherwise \\"NO\\". seen_numbers = set() for number in arr: complement = k - number if complement in seen_numbers: return \\"YES\\" seen_numbers.add(number) return \\"NO\\" def solve(test_cases): results = [] for n, k, arr in test_cases: result = has_pair_with_sum(arr, k) results.append(result) return results"},{"question":"Alex is planning a marathon and wants to set up water stations along the route. Each water station is indicated by a series of consecutive integers. However, for the safety of the participants, no two water stations should be too close to each other. To ensure this, Alex decides that water stations should be separated by at least 3 units. Given an integer `n` which represents the total number of needed water stations, write a program that calculates the smallest distance `d` such that the water stations, numbered consecutively from 1 to `n`, can be placed along a marathon route in a way that satisfies the separation constraint. Hint: Think about the placement as an arithmetic progression where the common difference `d` between terms needs to be such that no two positions are less than 3 units apart. Input: 8 NOTE: You do not need to create a program for this problem; you have to write your answers for the given input in the given code snippet. To see how to submit the solution, please check this link SAMPLE INPUT 5 SAMPLE OUTPUT 12","solution":"def smallest_distance(n): Calculate the smallest distance d such that the water stations can be placed along a marathon route in a way that no two stations are closer than 3 units apart. # Calculating the minimal distance by ensuring each station is at least 3 units apart from the previous one. # Since the first water station is at position 1, the k-th water station will be at position 1 + (k-1)*3 # Therefore, the nth water station will be at position 1 + (n-1)*3 return 1 + (n - 1) * 3 # Example call: result = smallest_distance(8) print(result) # Expected Output is 22"},{"question":"Sophia is a budding mathematician and she enjoys playing with numbers. One day, she came up with an interesting problem involving numbers and their digits. She defines the \\"shadow\\" of a number as the sum of all the digits of the number raised to the power of their respective positions (1-based index) in the number when read from left to right. Sophia wants to find out if a number is \\"shadow-perfect\\". A number is considered shadow-perfect if the number is equal to its shadow. She is wondering how many such shadow-perfect numbers exist in a given range [L, R]. For instance, the shadow of the number 123 is calculated as: 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> = 1 + 4 + 27 = 32 (which is not equal to 123, so 123 is not shadow-perfect). Input The first line of the input contains two integers L and R (1 ≤ L ≤ R ≤ 10<sup>6</sup>) — the range for which Sophia wants to find the number of shadow-perfect numbers. Output Print a single integer — the count of shadow-perfect numbers in the given range [L, R]. Examples Input 1 10 Output 9 Input 1 100 Output 10 Note In the first sample, there are 9 shadow-perfect numbers in the range [1, 10]: 1, 2, 3, 4, 5, 6, 7, 8, 9. In the second sample, the additional shadow-perfect number in the range [1, 100] is 89 (8<sup>1</sup> + 9<sup>2</sup> = 8 + 81 = 89).","solution":"def digit_shadow(n): Calculate the shadow of a number. return sum(int(digit)**(pos+1) for pos, digit in enumerate(str(n))) def count_shadow_perfect(L, R): Count the number of shadow-perfect numbers in the range [L, R]. count = 0 for number in range(L, R+1): if number == digit_shadow(number): count += 1 return count"},{"question":"You are tasked with creating a special code that can distinguish between two types of strings: \\"mirrored\\" and \\"non-mirrored\\". A string is considered \\"mirrored\\" if it reads the same backward as forward when written in reverse order. The challenge is to implement the function that identifies and counts the mirrored strings in a given list. Input The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of strings in the list. Each of the following t lines contains a string consisting of lowercase Latin letters. The length of each string is between 1 and 10^5 characters. Output Print one integer — the number of mirrored strings in the given list. Examples Input 5 abba racecar hello level world Output 3 Input 3 noon civic code Output 2 Note In the first example, the strings \\"abba\\", \\"racecar\\", and \\"level\\" are mirrored as they read the same backward. The other given strings \\"hello\\" and \\"world\\" are not mirrored. In the second example, \\"noon\\" and \\"civic\\" are mirrored strings, and \\"code\\" is not.","solution":"def count_mirrored_strings(t, string_list): Returns the count of mirrored strings in the given list. Parameters: t (int): The number of strings in the list. string_list (list of str): The list of strings. Returns: int: The number of mirrored strings. count = 0 for s in string_list: if s == s[::-1]: count += 1 return count"},{"question":"In a small city, there are N houses numbered from 1 to N. Each house needs to be connected to a water supply. There are M pipes available, where each pipe connects two houses. Each house must have access to the water supply, directly or indirectly, to be considered fully connected. Your task is to determine whether all the houses can be fully connected using the given pipes or not. If it is possible to connect all the houses, print \\"Yes\\", otherwise print \\"No\\". Input: The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 1000) — the number of houses and the number of pipes. The next M lines each contain two integers ui and vi (1 ≤ ui, vi ≤ N) — representing a pipe connecting house ui and house vi. Output: Print \\"Yes\\" if all the houses can be connected, otherwise print \\"No\\". SAMPLE INPUT 4 2 1 2 2 3 SAMPLE OUTPUT No Explanation **Sample Input** 4 2 1 2 2 3 **Output:** No **Explanation:** In the sample test case, house 4 cannot be connected to the other houses with the given pipes. Hence, it is not possible to connect all houses. Therefore, the output is \\"No\\".","solution":"def are_all_houses_connected(N, M, connections): Determines whether all houses can be fully connected using the given pipes. from collections import defaultdict, deque if N == 1: return \\"Yes\\" # Create an adjacency list graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Function to perform BFS and check connectivity def bfs(start): visited = [False] * (N + 1) queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count # Start BFS from house 1 and see if we can visit all houses if bfs(1) == N: return \\"Yes\\" else: return \\"No\\""},{"question":"A large company has a central server that logs all employee activities throughout the day. Every record in the log contains the employee\'s ID and the time of their activity. Given that you have up to `n` activity records for `m` employees, you need to track the employee with the highest number of activities in any given hour. If there are multiple employees with the same highest count, return the employee with the smallest ID. To determine this, you are given the following: - A list of activity logs. - Each log contains the employee ID and the activity time in the format \\"YYYY-MM-DD HH:MM\\". You need to process these logs and determine the employee with the most activities in any particular hour. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of activity records. Each of the next n lines contains a string in the format \\"employee_id,YYYY-MM-DD HH:MM\\", where: - `employee_id` (1 ≤ employee_id ≤ 10^5) is the ID of the employee. - `YYYY-MM-DD HH:MM` is the timestamp of the activity. Output Print two space-separated integers: - The `employee_id` of the employee with the highest number of activities in any hour. - The number of activities logged by this employee in that hour. If there are multiple employees with the same highest activity count, print the smallest `employee_id`. Examples Input ``` 6 1,2023-10-11 15:00 2,2023-10-11 15:05 1,2023-10-11 15:10 2,2023-10-11 15:15 3,2023-10-11 16:00 1,2023-10-11 16:10 ``` Output ``` 1 3 ``` Input ``` 5 3,2023-10-11 17:00 2,2023-10-11 17:15 2,2023-10-11 17:30 2,2023-10-11 17:40 3,2023-10-11 17:50 ``` Output ``` 2 3 ``` Note In the first example, employee 1 performed 3 activities within the hour 15:00 - 16:00, which is the highest count. In the second example, employee 2 performed 3 activities within the hour 17:00 - 18:00, which is the highest count.","solution":"from collections import defaultdict def employee_with_most_activities(n, logs): activity_count = defaultdict(lambda: defaultdict(int)) # Parse logs and count activities for log in logs: employee_id, timestamp = log.split(\',\') date, time = timestamp.split(\' \') hour_slot = f\'{date} {time[:2]}:00\' activity_count[hour_slot][int(employee_id)] += 1 # Determine the employee with the most activities in any hour max_activities = 0 employee_id_with_max_activities = float(\'inf\') for hour_slot in activity_count: for employee_id in activity_count[hour_slot]: activities = activity_count[hour_slot][employee_id] if activities > max_activities: max_activities = activities employee_id_with_max_activities = employee_id elif activities == max_activities: employee_id_with_max_activities = min(employee_id_with_max_activities, employee_id) return employee_id_with_max_activities, max_activities"},{"question":"Alex loves collecting stars by playing video games. To evaluate his gaming skills, Alex decides to track the number of stars he collects each day for `n` consecutive days. He wants to analyze his progress and has come up with an interesting way to do it. For each day `i` (1 ≤ i ≤ n-k+1), he wants to know the maximum number of stars he collected in any continuous sequence of exactly `k` days starting from day `i`. Given the list of stars Alex collected over `n` days and the integer `k`, help Alex determine the maximum number of stars for each day `1` to `n-k+1`. Input The first line contains two integers: `n` and `k` (1 ≤ k ≤ n ≤ 10^5). The second line contains `n` integers: `stars[i]` (1 ≤ stars[i] ≤ 10^9), representing the number of stars collected on the `i`-th day. Output Output `n-k+1` integers representing the maximum number of stars collected in any continuous sequence of exactly `k` days for each `i` from `1` to `n-k+1`. Example Input 7 3 1 3 5 2 8 6 7 Output 5 5 8 8 8 Note For the first `i` = 1, the sequence is [1, 3, 5] and the maximum number of stars is 5. For the second `i` = 2, the sequence is [3, 5, 2] and the maximum number of stars is 5. For the third `i` = 3, the sequence is [5, 2, 8] and the maximum number of stars is 8. For the fourth `i` = 4, the sequence is [2, 8, 6] and the maximum number of stars is 8. For the fifth `i` = 5, the sequence is [8, 6, 7] and the maximum number of stars is 8.","solution":"def max_stars_in_intervals(n, k, stars): Returns a list containing the maximum number of stars collected in any continuous sequence of exactly k days. result = [] for i in range(n - k + 1): max_stars = max(stars[i:i + k]) result.append(max_stars) return result"},{"question":"A transport company wants to optimize the travel route between its warehouses. Given a map with N warehouses and M direct lanes between them, determine the minimum distance required to connect all warehouses into a single connected network (spanning tree), ensuring that the company minimizes the total travel distance. Input The input consists of: - The first line containing two integers N and M that denote the number of warehouses and the number of lanes, respectively. - The following M lines each containing three integers u, v, and w, representing a direct lane between warehouse u and warehouse v with a distance of w units. Constraints * 1 ≦ N ≦ 100,000 * 0 ≦ M ≦ 200,000 * 1 ≦ w ≦ 10^9 * 0 ≦ u, v ＜ N Output Print a single integer representing the minimum total distance required to connect all warehouses into a single network. If it is impossible to connect all warehouses, print -1. Examples Input 4 5 0 1 1 1 2 2 2 3 1 0 3 4 0 2 3 Output 4 Input 3 1 0 1 2 Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u) y = find(parent, v) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) if len(result) != n - 1: return -1 minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_distance(n, m, lanes): edges = [] for lane in lanes: u, v, w = lane edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"Given a collection of directory paths where each directory is represented in a standardized Unix filesystem format, write a function to determine the structure of the filesystem. The function should print the directories and subdirectories in a hierarchical format with indentation for clarity. # Input The input consists of: - An integer `n` (1 ≤ n ≤ 10000) on the first line which represents the number of paths. - Followed by `n` lines of strings where each string represents a directory path. Each path contains directories separated by \\"/\\" and each path starts with a root directory at \\"/\\". # Output The output should display the hierarchical structure of the filesystem. Each directory level should be indented by four spaces. # Example Input 5 /root/home/user /root/home/user/docs /root/etc /root/home/admin /root/local/bin Output ``` /root /home /user /docs /admin /etc /local /bin ``` # Explanation - Start by creating the structure with \'/root\'. - \'/home\' is a subdirectory under \'/root\' and has two further subdirectories \'user\' and \'admin\'. - \'user\' further contains a subdirectory \'docs\'. - \'/etc\' and \'/local\' are also subdirectories under \'/root\', where \'/local\' in turn contains a subdirectory \'bin\'. - Each level is indented by four spaces to represent the directory hierarchy.","solution":"def print_filesystem_structure(paths): def add_path_to_tree(tree, path_parts): if not path_parts: return part = \'/\' + path_parts[0] if part not in tree: tree[part] = {} add_path_to_tree(tree[part], path_parts[1:]) paths = [path.split(\'/\')[1:] for path in paths] filesystem_tree = {} for path in paths: add_path_to_tree(filesystem_tree, path) def print_tree(tree, indent=0): for key in sorted(tree.keys()): print(\' \' * indent + key) print_tree(tree[key], indent + 4) print_tree(filesystem_tree)"},{"question":"In a remote village, there’s a unique tradition called \\"Fruit Harvest\\". In this tradition, villagers gather different types of fruits from the forest. Each fruit has a different point value, and villagers compete to gather the maximum points. The types of fruits gathered are recorded as a string, where each character represents a type of fruit. - \'A\' has 1 point - \'B\' has 2 points - \'C\' has 3 points - \'D\' has 4 points - \'E\' has 5 points Villagers gather fruits in different rounds, and in each round, they gather a string of fruits, recording their harvest. Each test case represents a round and consists of a string of fruits. Your goal is to calculate the total points earned from the fruits gathered in each round and determine the maximum points a villager scored among the rounds. Input: The first line will contain an integer T denoting the number of test cases. For each test case, there will be one line containing the string of fruits gathered in that round. Output: You need to print exactly one number: the maximum points scored in a single round among all test cases. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of the string ≤ 10^6 SAMPLE INPUT 3 ABCDE AAABBBCCC EDCBA SAMPLE OUTPUT 27 Explanation 1st Case: The total points earned is 1+2+3+4+5 = 15. 2nd Case: The total points earned is 1*3 + 2*3 + 3*3 = 18. 3rd Case: The total points earned is 5+4+3+2+1 = 15. Hence, the maximum points scored among all test cases is 27.","solution":"def fruit_harvest_max_points(T, rounds): Given the number of test cases and the list of fruit strings for each round, returns the maximum points scored in a single round. points = {\'A\': 1, \'B\': 2, \'C\': 3, \'D\': 4, \'E\': 5} max_points = 0 for round_str in rounds: total_points = sum(points[fruit] for fruit in round_str) if total_points > max_points: max_points = total_points return max_points"},{"question":"Yash is a highly competitive coder. He often participates in programming contests and has an affinity for solving problems related to strings. Recently, he encountered a challenging problem and needs your help. The problem statement is as follows: Given a string s consisting of lowercase English letters, find the length of the longest substring that contains at most two distinct characters. Input The first line contains the string s (1 ≤ |s| ≤ 2000). Output Output a single integer — the length of the longest substring of s that contains at most two distinct characters. Examples Input eceba Output 3 Input ccaabbb Output 5 Input a Output 1 Note In the first example, the longest substring with at most two distinct characters is \\"ece\\" with length 3. In the second example, the longest substring with at most two distinct characters is \\"aabbb\\" with length 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Write a function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive number. The function should implement the Kadane\'s algorithm that works as follows: - Initialize two variables: - `current_max` to 0, to track the maximum sum of the subarray ending at the current position. - `global_max` to a very small number (or negative infinity), to track the maximum sum encountered so far. - Traverse through the array: - At each element, update `current_max` as the maximum of the current element and the sum of `current_max` and the current element. - Update `global_max` if `current_max` is greater than `global_max`. Constraints: - The length of the array will be between 1 and 1000. - The elements of the array will be between -100 and 100. Input: - An integer ( n ) representing the size of the array. - An array of ( n ) integers ( a_1, a_2, ldots, a_n ). Output: - A single integer representing the maximum sum of a contiguous subarray. Example: Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane\'s algorithm. Parameters: nums (list of int): List of integers representing the input array. Returns: int: The maximum sum of a contiguous subarray. current_max = 0 global_max = float(\'-inf\') for num in nums: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Funland is a small amusement park with various attractions arranged in a grid. The park is represented by an `n x n` grid (1 ≤ n ≤ 100). Each cell of the grid contains a non-negative integer value representing the fun level of that attraction. Johnny wants to maximize his enjoyment in the park while making his way from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). The only moves he can make are to the right (R) or downward (D). Write a function to help Johnny find the path that maximizes his total fun level. The function should return the maximum total fun level Johnny can achieve. Input The first line contains an integer `n` - the size of the grid. The next `n` lines contain `n` space-separated integers each, representing the grid. Output Print the maximum total fun level Johnny can achieve. Examples Input 3 5 3 2 1 4 3 2 6 5 Output 23 Input 2 1 2 2 3 Output 6 Note In the first example, Johnny can follow the path: (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2), collecting a total fun level of 5 + 3 + 2 + 3 + 5 = 18. By following the path (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2), he collects 5 + 1 + 2 + 6 + 5 = 19, but there exists an even better path: (0, 0) → (1, 0) → (1, 1) → (2, 1) → (2, 2), collecting a total fun level of 5 + 1 + 4 + 6 + 5 = 21. And after closely examining and comparing all paths, the maximum achievable fun level happens to be 23.","solution":"def max_fun_level(n, grid): Returns the maximum fun level Johnny can achieve while moving from the top-left to bottom-right of the grid. :param n: int - the size of the grid :param grid: List[List[int]] - the n x n grid with non-negative integers representing the fun level of each cell :return: int - the maximum fun level Johnny can achieve # Create a 2D dp array to store the maximum fun level at each cell dp = [[0]*n for _ in range(n)] # Set the initial position dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the maximum fun level at the bottom-right cell return dp[n-1][n-1]"},{"question":"You are given an array of n integers. Your task is to determine if you can rearrange the array to form a sequence where each consecutive number has strictly increasing or decreasing order. If such an arrangement is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then, t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line of each test case contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100 for all i) — the elements of the array a. Output For each test case, print \\"YES\\" if you can rearrange the array to form the required sequence. Otherwise, print \\"NO\\". Example Input 3 5 1 3 2 4 5 4 4 3 2 1 3 1 2 3 Output YES YES YES Explanation In the first test case, we can rearrange the array to [1, 2, 3, 4, 5] which is strictly increasing. In the second test case, the array [4, 3, 2, 1] is already in strictly decreasing order. In the third test case, the array [1, 2, 3] is already in strictly increasing order.","solution":"def can_form_strictly_ordered_sequence(n, array): Determine if the array can be rearranged to form a strictly ordered sequence. Args: n : int : number of elements in the array array : list of int : the elements of the array Returns: str : \\"YES\\" if a strictly ordered sequence can be formed, else \\"NO\\" sorted_array = sorted(array) if all(sorted_array[i] != sorted_array[i+1] for i in range(n-1)): return \\"YES\\" else: return \\"NO\\" def check_sequences(test_cases): results = [] for n, array in test_cases: result = can_form_strictly_ordered_sequence(n, array) results.append(result) return results"},{"question":"Lina is taking a computer science course and she\'s been tasked with implementing an algorithm to compress a string containing only lowercase letters. The algorithm should replace every segment of consecutive identical characters with a single instance of that character followed by the count of its occurrences. For instance, the string \\"aaabccdddde\\" should be compressed to \\"a3bc2d4e\\". Notice that if a character appears only once, it is not followed by any number. To help Lina assess the compression efficiency, the professor wants the compressed string to be as short as possible. If two different valid compressed strings have the same length, the lexicographically smaller one should be considered as the result. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. Output Print the compressed version of the string that is the most efficient in terms of length, and lexicographically smallest in case of ties. Examples Input aaabccdddde Output a3bc2d4e Input zzzzyyyxwwvvv Output z4y3xw2v3 Note In the first example, the input string \\"aaabccdddde\\" is compressed as follows: - \'a\' appears 3 times consecutively, so it becomes \'a3\' - \'b\' appears 1 time, so it remains \'b\' - \'c\' appears 2 times consecutively, so it becomes \'c2\' - \'d\' appears 4 times consecutively, so it becomes \'d4\' - \'e\' appears 1 time, so it remains \'e\' In the second example, the input string \\"zzzzyyyxwwvvv\\" is compressed as follows: - \'z\' appears 4 times consecutively, so it becomes \'z4\' - \'y\' appears 3 times consecutively, so it becomes \'y3\' - \'x\' appears 1 time, so it remains \'x\' - \'w\' appears 2 times consecutively, so it becomes \'w2\' - \'v\' appears 3 times consecutively, so it becomes \'v3\'","solution":"def compress_string(s): Compress the input string by replacing consecutive identical characters with the character followed by the count of its occurrences. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"The Snowy Mountains region has an elaborate ski lift system designed to transport skiers from the base to various peaks. To support different operational needs, the management wants an automated process to track and determine the optimal path for skiers. Your job is to simulate this process based on given rules. Each lift can transport skiers from one designated lift station to another. The management needs you to follow these rules: 1. For any given station, from the base (Station 1), traverse each lift in ascending order of their station numbers. 2. If a station does not have any lift originating from it, do not traverse further from that station. 3. In each test case, you\'re given several lifts connecting two stations. 4. Your task is to generate the entire lift path record starting from the base station according to the specified rules. INPUT: The first line contains the number of test cases. The first line of each test case contains an integer m (the number of lifts). The following m lines each contain two integers A and B, meaning there is a lift going from station A to station B. OUTPUT: For each test case, generate the lift path starting from the base station following the specified rules. CONSTRAINTS: 1 ≤ t ≤ 50 0 ≤ m ≤ 100000 1 ≤ A, B ≤ 100000 SAMPLE INPUT: 2 6 1 2 1 3 2 4 2 5 3 6 3 7 3 1 5 5 8 2 4 SAMPLE OUTPUT: 1 2 4 5 3 6 7 1 5 8 Explanation: For test case 1: Start at station 1. From here, lifts go to 2 and 3. First go to 2 (due to ascending order), then 4 and 5, which completes all paths beginning from station 2. Then proceed to 3 and next to stations 6 and 7 in order. For test case 2: Start at station 1 going to 5. From 5, go to 8, and there are no further lifts from stations involved.","solution":"def find_lift_path(test_cases): def dfs(graph, station, visited): visited.append(station) if station in graph: for next_station in sorted(graph[station]): dfs(graph, next_station, visited) return visited results = [] for lifts in test_cases: graph = {} for A, B in lifts: if A not in graph: graph[A] = [] graph[A].append(B) visited = dfs(graph, 1, []) results.append(visited) return results"},{"question":"Garland, a young programmer, recently learned about balanced parentheses in her class. She wants to create a new type of sequence using not only regular parentheses but also curly brackets and square brackets. Now she challenges you to determine if a given sequence of these brackets is valid. A valid sequence follows these rules: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order — an opening square bracket must be closed by a closing square bracket, a curly bracket must be closed by a corresponding curly bracket, and a regular parenthesis must be closed by a corresponding parenthesis. Your task is to write a program that checks whether a given sequence of these brackets is valid. Input The input consists of a single string s containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', where 1 ≤ |s| ≤ 10^5. Output If the sequence is valid, print \\"VALID\\". Otherwise, print \\"INVALID\\". Examples Input ([]) Output VALID Input ([)] Output INVALID Input ({[()]}) Output VALID","solution":"def is_valid_bracket_sequence(s): Checks if the given sequence of brackets is valid based on the following rules: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order. :param s: string containing the sequence of brackets :return: \\"VALID\\" if the sequence is valid, otherwise \\"INVALID\\" stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"INVALID\\" else: stack.append(char) return \\"VALID\\" if not stack else \\"INVALID\\""},{"question":"You are developing a new feature for a ride-sharing application. In this application, drivers can upload a list of their available time slots when they are free to take rides. Each time slot is represented as an interval with a start and end time in minutes from the start of the day (00:00). Given these intervals for multiple drivers, you need to find the maximum number of drivers that are available at any given moment during the day. Write a program that takes in the number of drivers and their respective time slot intervals and outputs the maximum number of drivers available at the same time. Input The input begins with an integer n, the number of drivers (1 ≤ n ≤ 1000). The following n lines each contain two space-separated integers, start and end, representing the start and end of a time slot interval for a driver\'s availability in minutes (0 ≤ start < end ≤ 1440). Output Output one integer, the maximum number of drivers that are available at the same time. Example Input 5 540 600 560 620 600 720 610 670 700 800 Output 3 Explanation From 600 to 620, 3 drivers are available: the second, third, and fourth drivers. No other time interval has more than 3 drivers available simultaneously.","solution":"def max_drivers_available(n, intervals): Returns the maximum number of drivers available at the same time. :param n: int - the number of drivers :param intervals: list of tuples - each tuple containing start and end time in minutes :return: int - maximum number of drivers available at the same time events = [] # Split intervals into start and end events for start, end in intervals: events.append((start, 1)) # Start of a driver\'s availability events.append((end, -1)) # End of a driver\'s availability # Sort events first by time, and then by type of event (start -> end) events.sort() max_drivers = 0 current_drivers = 0 # Sweep line to find the maximum number of drivers at any point in time for time, event in events: current_drivers += event max_drivers = max(max_drivers, current_drivers) return max_drivers"},{"question":"You are given an array of integers representing the number of apples in each basket. Your task is to create the largest subset of baskets such that no two baskets are adjacent in the original array. The sum of apples in the subset should be maximized. Constraints * 1 ≤ n ≤ 10^5 (number of baskets) * 1 ≤ apples[i] ≤ 10^4 (number of apples in the i-th basket) Input The first line contains an integer n - the number of baskets. The second line contains n integers representing the number of apples in each basket. Output Print the maximum number of apples that can be obtained by collecting from the non-adjacent baskets. Examples Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12","solution":"def max_apples(n, apples): if n == 0: return 0 elif n == 1: return apples[0] # Initialize base case for DP dp = [0] * n dp[0] = apples[0] dp[1] = max(apples[0], apples[1]) # Fill the DP table for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + apples[i]) # Result is the maximum apples we can collect return dp[-1]"},{"question":"You are given a list of integers and your task is to identify the sublist whose sum of elements is the maximum possible. It is guaranteed that there is at least one positive integer in the input list. Input The first line of input contains an integer n (1 ≤ n ≤ 200,000): the number of elements in the list. The next line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9): the elements of the list. Output On the first line, print a single integer representing the maximum possible sum of a sublist. On the second line, print the starting and ending indices (1-based) of the sublist. If there are multiple sublists with the same maximum sum, print the one with the smallest starting index. If there still are ties, print the one with the smallest ending index. Examples Input 5 1 -2 3 10 -4 Output 13 3 4 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 3 7","solution":"def max_sublist_sum(n, arr): Returns the maximum sublist sum and the 1-based starting and ending indices of that sublist. :param n: int - The number of elements in the list. :param arr: list - The list of integers. :return: tuple - The maximum sum and the 1-based starting and ending indices. max_so_far = -float(\'inf\') max_ending_here = 0 start = end = s = 0 for i in range(n): max_ending_here += arr[i] if max_so_far < max_ending_here: max_so_far = max_ending_here start = s end = i if max_ending_here < 0: max_ending_here = 0 s = i + 1 # Return the max sum and the 1-based indices return max_so_far, start + 1, end + 1"},{"question":"In a fictional town of Fastville, people are very competitive about their workout routines. To keep track of their progress, each individual logs their workout streak – the number of consecutive days they have worked out without a break. The town council has decided to develop a system to monitor these streaks and generate reports. The system should support the following operations: 1. set_streak(i, k): Set the workout streak of user i to k days. If a streak already exists for user i, it is overwritten by k. 2. add_days(i, d): Add d days to the current streak of user i. If user i has no existing streak, create a new streak for user i with d days. 3. reset_streak(i): Reset the workout streak of user i to 0. 4. max_streak(): Return the maximum streak among all users. If there are no users with streaks, return 0. 5. total_streak(): Return the sum of all users\' workout streaks. Input The first line contains two integers n and q (1 ≤ n ≤ 100,000; 1 ≤ q ≤ 200,000) — the number of users and the number of queries, respectively. Each of the next q lines contains one of the following types of queries: - \\"SET i k\\" (1 ≤ i ≤ n; 0 ≤ k ≤ 10^9): Set the streak of user i to k. - \\"ADD i d\\" (1 ≤ i ≤ n; 0 ≤ d ≤ 10^9): Add d days to the streak of user i. - \\"RESET i\\" (1 ≤ i ≤ n): Reset the streak of user i to 0. - \\"MAX\\": Print the maximum workout streak of any user. - \\"TOTAL\\": Print the sum of all users\' workout streaks. Output For each \\"MAX\\" and \\"TOTAL\\" query, print the required answer in a single line. Examples Input 5 6 SET 1 10 ADD 2 5 ADD 1 5 MAX TOTAL RESET 1 MAX TOTAL Output 15 20 5 5","solution":"class WorkoutStreaks: def __init__(self, n): self.streaks = [0] * (n + 1) self.max_streak_value = 0 self.total_streak_value = 0 def set_streak(self, i, k): self.total_streak_value -= self.streaks[i] self.total_streak_value += k self.streaks[i] = k self.max_streak_value = max(self.streaks) def add_days(self, i, d): self.streaks[i] += d self.total_streak_value += d if self.streaks[i] > self.max_streak_value: self.max_streak_value = self.streaks[i] def reset_streak(self, i): self.total_streak_value -= self.streaks[i] self.streaks[i] = 0 self.max_streak_value = max(self.streaks) def max_streak(self): return self.max_streak_value def total_streak(self): return self.total_streak_value"},{"question":"Ampel wants to convert a given string into \\"Title Case\\", where the first letter of each word is capitalized and the remaining letters are in lowercase. Write a function that takes a string as input and returns the string in \\"Title Case\\". Constraints * The input string will contain only alphabetic characters and spaces. * The input string\'s length does not exceed 1000 characters. Input The input is given from Standard Input in the following format: s Output Print the string in \\"Title Case\\". Examples Input hello world Output Hello World Input python programming is fun Output Python Programming Is Fun","solution":"def convert_to_title_case(s): Converts a given string into Title Case. Parameters: s (str): Input string containing only alphabetic characters and spaces. Returns: str: The string converted to Title Case. return s.title()"},{"question":"In a large university, multiple courses are being offered to students, and each course has its specific start and end times. However, some courses overlap, and a student can only attend one course at a time. The university wants to schedule as many non-overlapping courses as possible so that students can make the most out of their time. Your task is to help the university by determining the maximum number of non-overlapping courses a student can attend in a day. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of courses. - The next N lines each contain two integers, start_time and end_time, representing the start and end times of each course. Output: For each test case, output a single line containing the maximum number of non-overlapping courses a student can attend. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ start_time, end_time ≤ 1440 (Minutes in a day) start_time < end_time Example: Input: 2 3 10 20 15 25 30 40 4 1 3 2 4 3 5 6 8 Output: 2 3 Explanation: For the first test case, the courses [10, 20] and [30, 40] do not overlap, allowing a maximum of 2 courses to be attended. For the second test case, the optimal selection of non-overlapping courses is [1, 3], [3, 5], and [6, 8], allowing a maximum of 3 courses to be attended.","solution":"def max_non_overlapping_courses(test_cases): results = [] for i in range(test_cases): n = int(input()) courses = [] for j in range(n): start, end = map(int, input().split()) courses.append((start, end)) # Sort courses by end time courses.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for course in courses: if course[0] >= last_end_time: count += 1 last_end_time = course[1] results.append(count) return results # Wrapper function for unit tests which accepts input as lists def max_non_overlapping_courses_with_input(test_cases_data): results = [] for data in test_cases_data: n = data[0] courses = data[1] # Sort courses by end time courses.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for course in courses: if course[0] >= last_end_time: count += 1 last_end_time = course[1] results.append(count) return results"},{"question":"You are given a single string `s` consisting of lowercase English letters. Your task is to find the minimal number of contiguous substrings into which the string can be partitioned, so that each substring is a palindrome. A palindrome is a sequence of characters that reads the same backward as forward. Input A single line containing the string `s`. The length of `s` does not exceed 10^5. Output Output the minimal number of contiguous palindromic substrings the string `s` can be partitioned into. Examples Input abcbmkm Output 3 Input racecar Output 1 Note In the first example, the string \\"abcbmkm\\" can be partitioned into \\"a\\", \\"bcb\\", and \\"mkm\\", which are all palindromic. In the second example, the entire string \\"racecar\\" itself is a palindrome, hence the minimal number of palindromic substrings required is 1.","solution":"def min_palindromic_partitions(s): Returns the minimal number of contiguous palindromic substrings that the string s can be partitioned into. n = len(s) # is_palindrome[i][j] will be True if the substring s[i:j+1] is a palindrome is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True # Every single character is a palindrome for length in range(2, n + 1): # length from 2 to n for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: is_palindrome[i][j] = True # Two equal characters else: is_palindrome[i][j] = is_palindrome[i + 1][j - 1] # Check inside boundaries # min_cuts[i] indicates the minimal cut count for substring s[0:i+1] min_cuts = [float(\'inf\')] * n for i in range(n): if is_palindrome[0][i]: min_cuts[i] = 0 else: for j in range(i): if is_palindrome[j + 1][i]: min_cuts[i] = min(min_cuts[i], min_cuts[j] + 1) return min_cuts[-1] + 1"},{"question":"You are given a string consisting of lowercase English letters only. Your task is to determine if all the characters in the string are unique. Constraints * The string length, n, ranges from 1 to 100. Input Input is given from Standard Input in the following format: s Output If all the characters in the string are unique, print `Unique`; otherwise, print `Not Unique`. Examples Input abcde Output Unique Input aabbcc Output Not Unique Input xyz Output Unique","solution":"def check_unique_characters(s): Determines if all characters in the string are unique. Args: s (str): Input string consisting of lowercase English letters. Returns: str: \'Unique\' if all characters are unique, otherwise \'Not Unique\'. if len(s) == len(set(s)): return \\"Unique\\" else: return \\"Not Unique\\""},{"question":"Given a list of timestamps representing when users logged into a system, you need to determine the maximum number of users that were logged in at the same time. Each timestamp is represented by two values: the login and logout times, both given in minutes. You are to write a function that takes this list of timestamps and returns the maximum number of users that were logged in simultaneously. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of users. - Each of the next n lines contains two space-separated integers li and lo (0 ≤ li < lo ≤ 10^6) — the login and logout times of a user in minutes. Output - Print a single integer — the maximum number of users that were logged in simultaneously. Examples Input 5 1 4 2 5 3 6 5 7 6 8 Output 3 Input 3 10 20 15 25 20 30 Output 2 Note: In the first example: - From minute 1 to minute 4, user 1 was logged in. - From minute 2 to minute 5, user 2 was logged in. - From minute 3 to minute 6, user 3 was logged in. - From minute 5 to minute 7, user 4 was logged in. - From minute 6 to minute 8, user 5 was logged in. The maximum number of users logged in simultaneously was 3 (between minutes 3 and 4).","solution":"def max_users_logged_in(timestamps): events = [] for login, logout in timestamps: events.append((login, 1)) # A user logs in events.append((logout, -1)) # A user logs out events.sort() max_users = current_users = 0 for time, event in events: current_users += event max_users = max(max_users, current_users) return max_users"},{"question":"Balanced DNA Sequences Scientists are working on decoding a new DNA sequence to create synthetic genes for medical treatments. They’ve identified two kinds of segments in the DNA sequence: ‘A’ and ‘B’. For stability, any segment of the sequence must have an equal number of ‘A’s and ‘B’s. Your task is to write a program that checks if a given DNA sequence can be divided into one or more balanced segments. If it can, you should output the total number of balanced segments possible. If it cannot be divided into balanced segments, output “-1”. Input: - The first line contains an integer T (1 ≤ T ≤ 100), the number of DNA sequences. - The following T lines each contain a DNA sequence consisting of characters ‘A’ and ‘B’ (1 ≤ length of each DNA sequence ≤ 100). Output: - For each DNA sequence, output the maximum number of balanced segments possible, or -1 if the sequence cannot be divided into balanced segments. Example: Input: 5 AABB ABABAB AAABBB AAAA BBBB Output: 1 3 1 -1 -1 Explanation: - For the sequence \\"AABB\\", it can be divided into one balanced segment \\"AABB\\". - For the sequence \\"ABABAB\\", it can be divided into three balanced segments \\"AB\\", \\"AB\\", and \\"AB\\". - For the sequence \\"AAABBB\\", it can be divided into one balanced segment \\"AAABBB\\". - For the sequence \\"AAAA\\", it cannot be divided into balanced segments, hence -1. - For the sequence \\"BBBB\\", same as above, it cannot be divided into balanced segments, hence -1. Note: A valid balanced segment requires an equal number of \'A\'s and \'B\'s and should ideally be consecutive in terms of their appearance in the DNA sequence. The goal is to find as many such balanced segments as possible in each sequence.","solution":"def balanced_dna_segments(T, sequences): results = [] for sequence in sequences: if len(sequence) % 2 != 0: results.append(-1) continue a_count, b_count = 0, 0 segments = 0 balanced = True for char in sequence: if char == \'A\': a_count += 1 else: # char == \'B\' b_count += 1 if a_count == b_count: segments += 1 a_count, b_count = 0, 0 if a_count != 0 or b_count != 0: balanced = False results.append(segments if balanced else -1) return results"},{"question":"Given an array of integers, determine if the differences between consecutive elements are all the same. If they are, print \\"YES\\"; otherwise, print \\"NO\\". For example, in the array [3, 7, 11], the differences between consecutive elements are 4 and 4 respectively, which are the same. Therefore, the result would be \\"YES\\". Constraints * The array length (n) is between 1 and 10^5. * Each element in the array is between -10^9 and 10^9. Input The input is given from Standard Input in the following format: n a1 a2 ... an where n is the number of integers in the array, followed by n space-separated integers that make up the array. Output Print \\"YES\\" if all the differences between consecutive elements are the same. Otherwise, print \\"NO\\". Examples Input 3 3 7 11 Output YES Input 5 1 3 7 9 11 Output NO","solution":"def check_differences_same(arr): Determines if the difference between consecutive elements in the array is the same. Returns: \\"YES\\" if differences are the same, otherwise \\"NO\\". if len(arr) <= 1: return \\"YES\\" difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != difference: return \\"NO\\" return \\"YES\\""},{"question":"Peter loves playing with strings and has recently discovered palindromes. A palindrome is a string that reads the same forwards and backwards. Peter wants to transform a given string into a palindrome by performing a series of operations. In each operation, he can replace any one character in the string with any other character chosen from a given set. He wishes to know the minimum number of operations required to turn the string into a palindrome. Given a string s of length n (1 ≤ n ≤ 1000) and a set of characters allowed_chars which contains the allowed characters for replacement, help Peter determine the minimum number of operations needed. Input Format - The first line contains the string s. - The second line contains a string allowed_chars which consists of unique characters that can be used in replacements. The length of allowed_chars will be between 1 and 26. Output Format - Output a single integer representing the minimum number of operations required to transform the string into a palindrome. Example Input abcba abcdefghijklmnopqrstuvwxyz Output 0 Input abbaa ab Output 1","solution":"def min_operations_to_palindrome(s, allowed_chars): Returns the minimum number of operations required to transform the string s into a palindrome. An operation consists of replacing any one character in the string with any other character in allowed_chars. :param s: The input string. :param allowed_chars: A string containing the allowed characters for replacement. :return: An integer representing the minimum number of operations required. n = len(s) mid = n // 2 operations = 0 for i in range(mid): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"You are given a list of tasks that need to be done one after the other. Each task has a certain difficulty level, given in an array. You need to find the minimum overall difficulty of the tasks if the order of tasks can be rearranged freely. The overall difficulty is calculated as the sum of absolute differences between the difficulties of consecutive tasks. For example, if the difficulties array is [a1, a2, ..., an], the overall difficulty is calculated as: difficulty = |a2-a1| + |a3-a2| + ... + |an-an-1| Your task is to find the minimum possible overall difficulty by rearranging the order of tasks. Input Format: - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of tasks. - The second line contains N space-separated integers, representing the difficulty levels of the tasks. Output Format: - For each test case, print the minimum overall difficulty that can be achieved. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 15 - Difficulty of each task is a positive integer between 1 and 100. Sample Input: 2 3 5 2 9 4 1 3 5 7 Sample Output: 7 6 Explanation: In the first test case: - One possible order [2, 5, 9] gives a difficulty of |5-2| + |9-5| = 3 + 4 = 7 which is minimum. In the second test case: - One possible order [1, 3, 5, 7] gives a difficulty of |3-1| + |5-3| + |7-5| = 2 + 2 + 2 = 6 which is minimum.","solution":"from itertools import permutations def min_overall_difficulty(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] difficulties = test_cases[i][1] min_difficulty = float(\'inf\') for perm in permutations(difficulties): current_difficulty = 0 for j in range(1, N): current_difficulty += abs(perm[j] - perm[j-1]) if current_difficulty < min_difficulty: min_difficulty = current_difficulty results.append(min_difficulty) return results"},{"question":"You are given a list of projects and a list of employees available to work on those projects. Each employee has a certain preference for the projects they would like to work on, represented as a list of the project indices in descending order of preference. Your task is to assign each project to an employee such that the total preference score is minimized. If there are multiple employees with the same preference for a project, the employee with the smaller index should be chosen. The input consists of: - The first line contains two integers `p` and `e`, the number of projects and the number of employees, respectively (1 ≤ p, e ≤ 100). - The next `e` lines each contain `p` integers, representing the preference scores of the i-th employee for each project, where a lower number is preferable. The output should consist of one line with `p` space-separated integers, where the i-th integer is the index of the employee assigned to the i-th project (1-indexed). Example: Input --- 3 3 1 2 3 3 1 2 2 3 1 Output --- 1 2 3 Explanation: - Project 1 is assigned to Employee 1 because they have the lowest preference score (1). - Project 2 is assigned to Employee 2 because they also have the lowest preference score (1). - Project 3 is assigned to Employee 3 because they have the lowest preference score (1). If there is a tie for the preference score for a project, assign the project to the employee with the smaller index.","solution":"def assign_projects(p, e, preferences): Assigns projects to employees minimizing the total preference score. Parameters: p (int): Number of projects e (int): Number of employees preferences (list): A 2D list where preferences[i][j] represents the preference score of the i-th employee for the j-th project. Returns: list: A list of integers where the i-th integer is the 1-indexed employee assigned to the i-th project. # Initialize the project assignment list with placeholders project_assignments = [-1] * p # Iterate over each project for project in range(p): # Find the employee with the minimum preference for this project min_preference = float(\'inf\') assigned_employee = -1 for employee in range(e): if preferences[employee][project] < min_preference: min_preference = preferences[employee][project] assigned_employee = employee # Assign the project to the found employee project_assignments[project] = assigned_employee + 1 # Converting to 1-indexed return project_assignments"},{"question":"We have an MxN matrix with integers. Each cell has a cost associated with it. You are initially positioned at the top-left corner of the matrix (1,1) and can move right, down, or diagonally to the right and down at each step. Your goal is to find the minimum cost path to reach the bottom-right corner of the matrix (M, N). Write a function that takes an MxN matrix as input and returns the minimum cost to reach the bottom-right corner from the top-left corner. # Constraints: - 1 ≤ M, N ≤ 1000 - Each cell in the matrix has a non-negative integer cost (0 ≤ cost ≤ 1000) # Input: The input is given from Standard Input in the following format: ``` M N matrix[1][1] matrix[1][2] ... matrix[1][N] matrix[2][1] matrix[2][2] ... matrix[2][N] ... matrix[M][1] matrix[M][2] ... matrix[M][N] ``` # Output: Print the minimum cost to reach the bottom-right corner from the top-left corner. # Example: Input: ``` 3 3 1 2 3 4 8 2 1 5 3 ``` Output: ``` 8 ``` Explanation: The path with the minimum cost is marked below: ``` [1] 2 3 4 [8] 2 1 5 [3] ``` The cost is 1 + 8 + 3 = 12. # Note: - Ensure to optimize your solution for efficiency given the constraints.","solution":"def min_cost_path(matrix): Returns the minimum cost path from top-left to bottom-right in a given matrix. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[float(\'inf\')] * N for _ in range(M)] dp[0][0] = matrix[0][0] for i in range(M): for j in range(N): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + matrix[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + matrix[i][j]) if i > 0 and j > 0: dp[i][j] = min(dp[i][j], dp[i-1][j-1] + matrix[i][j]) return dp[M-1][N-1] def parse_input(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) matrix = [] index = 2 for i in range(M): row = [int(data[index + j]) for j in range(N)] index += N matrix.append(row) return (M, N, matrix) if __name__ == \\"__main__\\": M, N, matrix = parse_input() print(min_cost_path(matrix))"},{"question":"Problem Statement You are given an array of integers that represents the scores of participants in a competition. Each participant receives 1 point for every score that is less than or equal to their score. Your task is to determine the final ranking of each participant based on their scores. Input The first line contains an integer N, the number of participants. The second line contains N integers separated by spaces, where the i-th integer represents the score of the i-th participant. Output Print N lines, with each line containing the rank of the i-th participant. Example Input 5 50 30 40 10 60 Output 3 5 4 6 2","solution":"def participant_rankings(N, scores): # Create a sorted list of unique scores in descending order sorted_scores = sorted(set(scores), reverse=True) # Create a dictionary to quickly find the rank based on the score score_to_rank = {score: rank + 1 for rank, score in enumerate(sorted_scores)} # Create a list of ranks for each participant\'s score ranks = [score_to_rank[score] for score in scores] return ranks"},{"question":"Alice and Bob are playing a game with strings. The game consists of two rounds and works as follows: 1. In the first round, a string `S` is given to Alice. Alice has to create a new string `T` by removing exactly one character from `S`. 2. In the second round, Bob receives the string `T` and a character `c`. Bob\'s task is to determine if it\'s possible to insert the character `c` at any position in `T` to recreate the original string `S`. You need to help Bob determine if he can recreate `S` from `T` by inserting the character `c`. Constraints * S, T are strings consisting of lowercase English letters. * 1 leq |S| leq 10 * |T| = |S| - 1 Input Input is given from Standard Input in the following format: ``` S T c ``` Output If Bob can recreate `S` by inserting `c` into `T`, print `Yes`; otherwise, print `No`. Examples Input ``` chokudai chokudai a ``` Output ``` No ``` Input ``` a a a ``` Output ``` Yes ``` Input ``` hello hell o ``` Output ``` Yes ``` Note: Pay attention to the example with the string \\"chokudai\\" where the new character is already present in the original string, but the positions of characters matter and \\"a\\" from \\"chokudai\\" cannot recreate the string if appended to \\"chokudai\\" itself.","solution":"def can_recreate_original_string(S, T, c): Determine if it\'s possible to insert the character c at any position in T to recreate the original string S. Args: S (str): Original string given to Alice. T (str): String given to Bob after Alice removed one character. c (str): Character Bob needs to insert back to potentially recreate S. Returns: str: \'Yes\' if Bob can recreate S by inserting c into T, \'No\' otherwise. # Loop through possible insertion points in T for i in range(len(T) + 1): # Create a potential string by inserting c at position i potential_S = T[:i] + c + T[i:] # Check if the potential string matches the original string S if potential_S == S: return \'Yes\' return \'No\'"},{"question":"You are given an array of N integers, each representing the height of buildings in a row. It has been raining for a while, and water has accumulated between the buildings. Your task is to compute how much water is trapped between the buildings after it rains. The units of water trapped between two buildings is determined by the shorter height of the two buildings, spanning from the left-most to the right-most of the top boundary of the water section. Input The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the number of buildings. The second line contains N space-separated integers H1, H2, ..., HN where Hi is the height of the ith building. Output For each test case, output one line containing the total units of water trapped between the buildings. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^4 0 ≤ Hi ≤ 10^5 Example Input: 3 6 0 1 0 2 1 0 1 3 2 1 2 1 9 4 2 0 3 2 5 5 1 1 1 1 1 Output: 6 9 0 Explanation Example case 1. The array [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] can trap 6 units of water as follows: between indices 1 and 3, 1 unit, between indices 2 and 3, 1 unit, between indices 3 and 7, 3 units, and between indices 8 and 9, 1 unit, summing up to 6 units. Example case 2. The heights [4, 2, 0, 3, 2, 5] can trap 9 units of water as follows: between indices 1 and 3, 4 units, and between indices 3 and 5, 5 units. Example case 3. The heights [1, 1, 1, 1, 1] cannot trap any water as all elevations are the same.","solution":"def calculate_trapped_water(heights): Calculate the total units of water trapped between buildings given their heights. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def trapped_water_test_cases(T, cases): Process multiple test cases for trapped water calculation. results = [] for case in cases: N, heights = case results.append(calculate_trapped_water(heights)) return results"},{"question":"You are tasked with creating a scheduling system for a set of tasks that must be executed in a specific order due to dependencies between them. Each task is represented by a unique integer ID, and there is a list of pairs (x, y) indicating that task x must be completed before task y can start. Your goal is to determine a valid execution order for all the tasks, if such an order exists. If it is not possible to complete all the tasks due to a cyclic dependency, your program should return an empty list. Input The input contains two parts: 1. An integer n (1 ≤ n ≤ 100) representing the number of tasks. 2. A list of m pairs of integers, where each pair (x, y) (1 ≤ x, y ≤ n) indicates a dependency such that task x must be completed before task y. Output Output a valid list of n task IDs in the order they should be executed. If no valid order exists, output an empty list. Examples Input 5 [[2, 3], [3, 1], [4, 0], [4, 1], [5, 2]] Output [4, 5, 2, 3, 1, 0] Input 3 [[1, 2], [2, 3], [3, 1]] Output [] Note In the first example, a valid order is [4, 5, 2, 3, 1, 0]. Note that there are other valid orders as well, such as [4, 2, 5, 3, 1, 0]. In the second example, a cyclic dependency exists: 1 depends on 2, 2 depends on 3, and 3 depends on 1. Therefore, it is impossible to complete all tasks, and the output is an empty list.","solution":"from collections import defaultdict, deque def find_task_order(n, dependencies): Determines a valid execution order of tasks or returns an empty list if a valid order is not possible. Parameters: - n: integer, number of tasks - dependencies: list of tuples, each containing two integers (x, y) indicating task x must precede task y Returns: - list of integers, representing the task execution order, or an empty list if no valid order exists. # Create an adjacency list and in-degree list adjacency_list = defaultdict(list) in_degree = [0] * n # Fill the adjacency list and in-degree list for x, y in dependencies: adjacency_list[x - 1].append(y - 1) in_degree[y - 1] += 1 # Queue for nodes with in-degree of 0 queue = deque([i for i in range(n) if in_degree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node + 1) # Convert back to 1-based index for neighbor in adjacency_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return []"},{"question":"Write a program that reads an integer n and produces a rotated version of a given n times n matrix by 90 degrees clockwise. Note Constraints * 1 leq n leq 100 * 0 leq a_{ij} leq 10000 Input In the first line, an integer n is given. In the following n lines, each line contains n space-separated integers representing the n times n matrix A. Output Print the elements of the n times n matrix rotated by 90 degrees clockwise. Print each row of the rotated matrix on a new line with a single space character between adjacent elements. Example Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates an n x n matrix by 90 degrees clockwise. Parameters: matrix (list of list of int): The n x n matrix to be rotated. Returns: list of list of int: The rotated n x n matrix. n = len(matrix) # Create a new matrix to store the rotated result rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix def matrix_to_string(matrix): return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) def read_matrix(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] data = data[1:] for i in range(n): row = list(map(int, data[i * n: (i + 1) * n])) matrix.append(row) return matrix if __name__ == \\"__main__\\": matrix = read_matrix() rotated_matrix = rotate_matrix_90_clockwise(matrix) print(matrix_to_string(rotated_matrix))"},{"question":"Given an integer array `arr`, find the length of the shortest subarray such that the sum of its elements is greater than the given integer `S`. If no such subarray exists, return 0. **Input:** - The first line of the input contains two integers `n` and `S` separated by a space, where `n` is the length of the array (1 ≤ n ≤ 10^5), and `S` is the target sum (1 ≤ S ≤ 10^9). - The second line contains `n` integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 10^9). **Output:** - Output a single integer representing the length of the shortest subarray with a sum greater than `S`. If no such subarray exists, output 0. **Examples:** **Input:** ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` **Output:** ``` 2 ``` **Input:** ``` 5 100 1 2 3 4 5 ``` **Output:** ``` 0 ```","solution":"def shortest_subarray_length(arr, S): Returns the length of the shortest subarray with a sum greater than S. If no such subarray exists, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum > S: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"A large corporation is organizing a synchronization event where different supervisors need to communicate with each other for an important strategy meeting. Each of the n supervisors are identified by unique integers ranging from 1 to n. To ensure clear communication, they follow a strict protocol where each supervisor can only communicate with other supervisors who have a higher unique number. Each supervisor requires exactly 1 minute to communicate a message to another supervisor. Moreover, to avoid chaos, only one communication can happen per minute. At the beginning of the event, all supervisors are isolated and need to form a single line where the communication can flow according to the protocol. The task is to determine the minimum number of minutes required for all supervisors to be in a single line of communication. Input The first line contains two space-separated integers: n and k (1 ≤ n, k ≤ 109) — the number of supervisors and the number, modulo which you should print the answer, correspondingly. Output Print a single number — the minimum amount of minutes required for all supervisors to be synchronized modulo k. Examples Input 2 10 Output 1 Input 4 5 Output 3 Note In the first example, the synchronization will occur directly because there are only two supervisors, and the communication will be straightforward, taking only one minute. The result modulo 10 is 1. In the second example, the communications will be: Supervisor 1 communicates with Supervisor 2, then Supervisor 2 with Supervisor 3, and finally Supervisor 3 with Supervisor 4. Thus, it takes 3 minutes. The result modulo 5 is 3.","solution":"def min_minutes_to_sync(n, k): Returns the minimum minutes required for all supervisors to be synchronized, modulo k. n: int, number of supervisors k: int, the number to get the result modulo k # Number of minutes is (n-1) since we need n-1 communications to connect n supervisors. return (n - 1) % k"},{"question":"You are tasked with developing an innovative input method for a smart device company\'s new gadget. The device captures sequences of hand gestures (represented by uppercase letters) which are then processed to execute commands. Each gesture sequence must be distinct and must not overlap with other sequences. Your goal is to determine if it is possible to split a given string of gestures into a set of distinct non-overlapping substrings such that each substring is used exactly once. Input The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the length of the gesture string. The second line contains the string g of length n, that consists of uppercase English letters representing gestures. Output Print \\"YES\\" if it is possible to split the string into distinct non-overlapping substrings, otherwise print \\"NO\\". Examples Input 6 AABBCC Output YES Input 4 ABAB Output NO Input 7 ABCDEFG Output YES","solution":"def can_split_into_unique_substrings(n, g): Determines if the string g can be split into distinct, non-overlapping substrings. :param n: Length of the string g :param g: Gesture string consisting of uppercase English letters :return: \\"YES\\" if the string can be split into distinct non-overlapping substrings, otherwise \\"NO\\" seen_substrings = set() temp_substring = \\"\\" for ch in g: temp_substring += ch if temp_substring in seen_substrings: return \\"NO\\" seen_substrings.add(temp_substring) temp_substring = ch return \\"YES\\" # Example Usage: # n = 6 # g = \\"AABBCC\\" # print(can_split_into_unique_substrings(n, g)) # Output: \\"YES\\""},{"question":"Alice and Bob are playing a card game using a deck of n cards. Each card has a distinct integer value written on it. In each player\'s turn, the player can choose any two cards from the deck. They will keep the card with the higher value and discard the card with the lower value. The player who can make the last valid move (i.e., the last pair of cards that can be compared) wins the game. Alice starts the game, and the players take turns alternatively. Determine which player will win if both play optimally. # Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the deck. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values of the cards. # Output If Alice wins, print \\"Alice\\", otherwise print \\"Bob\\" (without quotes). You can print the output in any case (upper or lower). # Examples Input ``` 3 3 8 5 ``` Output ``` Alice ``` Input ``` 4 6 7 2 9 ``` Output ``` Bob ``` # Note In the first sample test, Alice can compare the cards (3, 8), keep 8, and discard 3. This leaves two cards (8 and 5), which Alice will compare again to keep 8 and discard 5. Bob has no move left, so Alice wins. In the second sample test, Alice can make two moves, but Bob will make the last move. Optimal play from both sides results in Bob winning.","solution":"def determine_winner(n, card_values): Determines the winner of the card game. :param n: Number of cards in the deck. :param card_values: List of integers representing the card values. :return: String \'Alice\' or \'Bob\' depending on who wins. if (n - 1) % 2 == 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A \\"Happy Number\\" is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number either equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. You are given an integer n. Determine whether it is a happy number. Input The only line of input contains an integer n (1 ≤ n ≤ 10^7). Output Output \\"YES\\" if n is a happy number. Output \\"NO\\" otherwise. Quotes for clarity only. Examples Input 19 Output YES Input 20 Output NO Note In the first sample, the sequence is as follows: 19 -> 82 -> 68 -> 100 -> 1. Since it reaches 1, 19 is a happy number. In the second sample, the sequence is as follows: 20 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20. Since it loops endlessly without reaching 1, 20 is not a happy number.","solution":"def is_happy_number(n): Determines whether a given number n is a happy number. Returns \'YES\' if n is a happy number, \'NO\' otherwise. def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return \\"YES\\" if n == 1 else \\"NO\\""},{"question":"A company has a security system that tracks employee entry and exit using their unique ID numbers. Each entry and exit event is logged with a timestamp. An employee\'s total time inside the facility is calculated as the sum of all their (exit timestamp - entry timestamp) pairs for each day. You are given a series of log entries and need to determine the total time each employee spent in the facility. Input The first line contains an integer n, the number of log entries. Each of the next n lines contains a log entry in the format: \\"ID TIMESTAMP STATE\\" where: - ID is the unique identifier for the employee (an integer), - TIMESTAMP is the time in seconds since midnight (an integer), - STATE is either \\"IN\\" or \\"OUT\\" indicating whether the log entry is an entry or exit. It is guaranteed that for every \\"IN\\" entry there will be a corresponding \\"OUT\\" entry later in the log. Output For each unique employee ID, output a line with the ID and the total time spent in the facility in seconds. Constraints 1 ≤ n ≤ 1000 0 ≤ TIMESTAMP < 24 * 3600 1 ≤ ID ≤ 1000 Example Input: 6 101 3600 IN 102 7200 IN 101 10800 OUT 102 14400 OUT 101 21600 IN 101 32400 OUT Output: 101 18000 102 7200 Explanation Employee 101 enters at time 3600 and exits at 10800, spending 7200 seconds. They enter again at 21600 and exit at 32400, spending another 10800 seconds. Total: 18000 seconds. Employee 102 enters at time 7200 and exits at 14400, spending 7200 seconds.","solution":"def calculate_total_time(log_entries): import collections log_data = collections.defaultdict(list) total_time = collections.defaultdict(int) for log in log_entries: id, timestamp, state = log.split() id, timestamp = int(id), int(timestamp) log_data[id].append((timestamp, state)) for id in log_data: time_pairs = log_data[id] in_time = None for timestamp, state in time_pairs: if state == \\"IN\\": in_time = timestamp elif state == \\"OUT\\": total_time[id] += timestamp - in_time in_time = None result = [] for id in sorted(total_time.keys()): result.append((id, total_time[id])) return result # Example usage: log_entries = [ \\"101 3600 IN\\", \\"102 7200 IN\\", \\"101 10800 OUT\\", \\"102 14400 OUT\\", \\"101 21600 IN\\", \\"101 32400 OUT\\" ] print(calculate_total_time(log_entries))"},{"question":"Limak loves sweets and recently discovered a candy factory. The factory produces candies packed in boxes of various sizes. Limak has a very specific way of eating these candies. He will only consume the smallest box of candies he can find at any given time. After consuming a box, he ignores any other boxes of the same size and only considers larger boxes. Limak follows this rule strictly and won\'t consume candies from a larger box if there are still smaller boxes left unopened. Given the list of box sizes, determine how many different sizes of candy boxes Limak will eat from before returning home satisfied. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of candy boxes in the factory. The second line contains n space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 109) — the sizes of the candy boxes. Output Print the number of different sizes of candy boxes Limak will eat from. Examples Input 5 2 3 2 4 3 Output 3 Input 4 1 2 3 4 Output 4 Note In the first example, Limak will first eat all the boxes of size 2, and then he will move to size 3 and finally to size 4. So, he eats from 3 different sizes of boxes. In the second example, each box size is different, so Limak will eat from all 4 different sizes.","solution":"def different_box_sizes(n, boxes): Returns the number of different sizes of candy boxes Limak will eat from. unique_sizes = set(boxes) return len(unique_sizes)"},{"question":"A popular e-commerce platform is hosting a sale, and they have n items with different prices. Each item on sale is associated with a category, and the platform wants to ensure that users can get a variety of items from different categories. To encourage diversification, the platform wants to offer a special bundle discount for users who purchase exactly one item from each of k distinct categories. A user can only buy one item per category to qualify for the bundle discount. Each category can have multiple items, each with different prices. Write a program that calculates the maximum possible savings a user can achieve by buying exactly one item from each of k different categories, given the price of each item in each category. The savings is defined as the sum of the prices of the k cheapest items one from each category, minus the bundle discount. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the total number of items and k is the required number of distinct categories for the discount. The second line contains the integer d (1 ≤ d ≤ 10^9), the fixed bundle discount amount. The third line contains the sequence of integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), where pi is the price of the i-th item. The fourth line contains the sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ k), where ci represents the category of the i-th item. Output Print a single integer, the maximum possible savings a user can achieve. If it is not possible to select one item from exactly k distinct categories, print 0. Examples Input 5 3 100 200 50 300 20 150 1 2 3 1 2 Output 120 Input 4 4 50 100 200 50 400 1 2 3 3 Output 0 Note In the first example, the user can select the cheapest items from each of the 3 distinct categories. From the given prices [200, 50, 300, 20, 150] and categories [1, 2, 3, 1, 2], the cheapest selection could be the items with prices 20 (category 1), 50 (category 2), and 300 (category 3). Thus, the sum is 20 + 50 + 300 = 370, with a savings of 370 - 100 = 270. In the second example, it is impossible to select items from 4 distinct categories since only 3 categories are present. Hence, the output is 0.","solution":"def max_savings(n, k, d, prices, categories): from collections import defaultdict import heapq category_items = defaultdict(list) # Group items by their categories for i in range(n): category_items[categories[i]].append(prices[i]) # Check if it\'s possible to have exactly one item from k distinct categories if len(category_items) < k: return 0 # Extract the cheapest item from each category cheapest_items = [] for items in category_items.values(): heapq.heappush(cheapest_items, min(items)) # If there are more than k categories, we need to select only the k cheapest items if len(cheapest_items) > k: cheapest_items = heapq.nsmallest(k, cheapest_items) # Calculate total savings total_savings = sum(cheapest_items) - d return total_savings"},{"question":"There\'s a log file containing entries from multiple servers that record events in a system. Each entry consists of a timestamp and information about an event. The timestamps in the log file are not in any specific order. Write a function `merge_log_files` that takes a list of lists, where each inner list represents the log entries of a single server. Each log entry is represented as a tuple `(timestamp, event)`. Merge these lists into a single list where the log entries are sorted by their timestamps in ascending order. Input The input is provided as a list of lists. Each inner list is a list of tuples, where each tuple contains a timestamp (string in the format \\"YYYY-MM-DD HH:MM:SS\\") and an event (string). Your function should output a single merged list of all log entries sorted by their timestamps in ascending order. Output A list of tuples, where each tuple contains a timestamp and an event. The list should be sorted by timestamp. Examples Input [ [(\\"2023-10-01 12:00:00\\", \\"Server1 Event1\\"), (\\"2023-10-01 12:01:00\\", \\"Server1 Event2\\")], [(\\"2023-10-01 11:59:00\\", \\"Server2 Event1\\"), (\\"2023-10-01 12:00:30\\", \\"Server2 Event2\\")], [(\\"2023-10-01 11:58:00\\", \\"Server3 Event1\\"), (\\"2023-10-01 12:02:00\\", \\"Server3 Event2\\")] ] Output [ (\\"2023-10-01 11:58:00\\", \\"Server3 Event1\\"), (\\"2023-10-01 11:59:00\\", \\"Server2 Event1\\"), (\\"2023-10-01 12:00:00\\", \\"Server1 Event1\\"), (\\"2023-10-01 12:00:30\\", \\"Server2 Event2\\"), (\\"2023-10-01 12:01:00\\", \\"Server1 Event2\\"), (\\"2023-10-01 12:02:00\\", \\"Server3 Event2\\") ]","solution":"def merge_log_files(log_lists): Merges multiple lists of log entries into a single list sorted by timestamps in ascending order. Args: log_lists (list of lists): Each inner list contains tuples (timestamp, event). Returns: list: Merged list of tuples (timestamp, event) sorted by timestamp. merged_logs = [] for log_list in log_lists: merged_logs.extend(log_list) merged_logs.sort(key=lambda x: x[0]) return merged_logs"},{"question":"Alice is an avid music lover and has a large collection of songs on her playlist. She wants to create a new playlist by selecting only unique songs such that no two consecutive songs in the new playlist have the same artist. Since her original playlist lists songs in a particular order, she wants to maintain the relative order of the songs in the new playlist. Write an algorithm to help Alice create such a playlist. # Input - The first line contains an integer `N` representing the number of songs in Alice\'s original playlist. - Each of the next `N` lines contains a string `song_name` followed by another string `artist_name`, representing the name of the song and the artist respectively. Both strings consist of lowercase English letters and spaces. # Output - Print the songs in the new playlist, one per line, such that no two consecutive songs have the same artist. If there are multiple valid playlists, any one of them will be acceptable. # Constraints - 1 ≤ `N` ≤ 100,000 - 1 ≤ length of `song_name` ≤ 100 - 1 ≤ length of `artist_name` ≤ 50 # Example Input: ``` 7 shape of you ed sheeran perfect ed sheeran blinding lights the weeknd starboy the weeknd bad guy billie eilish lovely billie eilish sugar maroon 5 ``` Output: ``` shape of you ed sheeran blinding lights the weeknd perfect ed sheeran bad guy billie eilish starboy the weeknd sugar maroon 5 lovely billie eilish ``` In this example, one possible playlist avoids consecutive songs by the same artist while preserving the original order of songs.","solution":"def create_unique_playlist(songs): Creates a unique playlist such that no two consecutive songs have the same artist. :param songs: List of (song_name, artist_name) tuples. :return: List of songs in the new playlist. new_playlist = [] last_artist = None for song_name, artist_name in songs: if artist_name != last_artist: new_playlist.append((song_name, artist_name)) last_artist = artist_name else: # Look ahead for a different artist for i in range(len(songs)): next_song, next_artist = songs.pop(0) if next_artist != last_artist: new_playlist.append((next_song, next_artist)) last_artist = next_artist break songs.append((next_song, next_artist)) return new_playlist"},{"question":"You are given a list of goods that need to be shipped to different destinations. Each good has a specific destination and a shipping cost associated with it. Your job is to optimize the shipping such that the total shipping cost is minimized. However, there is a constraint that no two goods can be shipped to the same destination. You are provided with the list of goods, their respective destinations, and the associated shipping costs. Write a program to determine the least total shipping cost possible under the given constraint. Input The first line contains an integer T - the number of test cases. For each test case: - The first line contains an integer N - the number of goods. - The next N lines contain two integers each: the destination of the good and the shipping cost. Output For each test case, print the minimum total shipping cost on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 15 1 ≤ destination ≤ 100 1 ≤ shipping cost ≤ 1000 SAMPLE INPUT 1 3 1 100 2 200 1 150 SAMPLE OUTPUT 300 Explanation For the only test case: - The first good can be shipped to destination 1 with a cost of 100. - The second good can be shipped to destination 2 with a cost of 200. - The third good also has destination 1, but since no two goods can be shipped to the same destination, it must be excluded. Thus, the total minimum shipping cost is 100 + 200 = 300.","solution":"import itertools def minimum_shipping_cost(test_cases): result = [] for case in test_cases: N, goods = case destinations = set() cost_mapping = {} for destination, cost in goods: if destination not in cost_mapping: cost_mapping[destination] = [] cost_mapping[destination].append(cost) min_cost = 0 for destination in cost_mapping: min_cost += min(cost_mapping[destination]) result.append(min_cost) return result # Read Input def read_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) goods = [] for j in range(N): destination, cost = map(int, lines[idx + 1 + j].split()) goods.append((destination, cost)) test_cases.append((N, goods)) idx += N + 1 return test_cases # Example Usage input_str = 1 3 1 100 2 200 1 150 test_cases = read_input(input_str) output = minimum_shipping_cost(test_cases) for result in output: print(result)"},{"question":"You are an aspiring chef tasked with creating a unique menu from a list of ingredients. Given a series of ingredients and their respective quantities, you need to manage the inventory by processing several operations. The operations will either restock an ingredient, use up a quantity of an ingredient, or retrieve the current quantity of an ingredient. Your task is to implement an inventory management system that can process the following types of operations: 1. For a given ingredient name and quantity, add the quantity to the existing stock regardless of whether the ingredient already exists. 2. For a given ingredient name and quantity, subtract the quantity from the existing stock if possible (i.e., the quantity should not drop below zero). 3. For a given ingredient name, return the current quantity of the ingredient. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 2·10^5) — the number of ingredients initially and the number of operations respectively. The next n lines each contain an ingredient name and its initial quantity. Each ingredient name is a string of length 1 to 100 comprising lowercase letters, and its quantity is an integer (0 ≤ quantity ≤ 10^9). The following m lines describe the operations. Each line starts with an integer ti (1 ≤ ti ≤ 3) — the operation type, followed by the specific parameters based on the operation type: - If ti = 1, it is followed by an ingredient name and an integer quantity (0 ≤ quantity ≤ 10^9) to add to the inventory. - If ti = 2, it is followed by an ingredient name and an integer quantity (0 ≤ quantity ≤ 10^9) to subtract from the inventory. - If ti = 3, it is followed by an ingredient name to query the current quantity. Output For each query of type 3, output the quantity of the requested ingredient. Examples Input 4 6 sugar 10 salt 5 butter 12 flour 20 1 sugar 15 2 salt 3 3 butter 3 sugar 3 salt 3 flour Output 12 25 2 20 Input 3 5 tomato 8 onion 6 cheese 10 1 tomato 5 2 onion 3 3 tomato 2 cheese 7 3 cheese Output 13 3","solution":"def manage_inventory(n, m, initial_ingredients, operations): inventory = {} # Initialize the inventory with given ingredients for ingredient, quantity in initial_ingredients: inventory[ingredient] = quantity result = [] # Process operations for operation in operations: t = operation[0] if t == 1: # Add quantity _, ingredient, quantity = operation if ingredient in inventory: inventory[ingredient] += quantity else: inventory[ingredient] = quantity elif t == 2: # Subtract quantity _, ingredient, quantity = operation if ingredient in inventory: inventory[ingredient] = max(0, inventory[ingredient] - quantity) elif t == 3: # Query current quantity _, ingredient = operation result.append(inventory.get(ingredient, 0)) return result # Example usage: n = 4 m = 6 initial_ingredients = [(\\"sugar\\", 10), (\\"salt\\", 5), (\\"butter\\", 12), (\\"flour\\", 20)] operations = [(1, \\"sugar\\", 15), (2, \\"salt\\", 3), (3, \\"butter\\"), (3, \\"sugar\\"), (3, \\"salt\\"), (3, \\"flour\\")] print(manage_inventory(n, m, initial_ingredients, operations)) # Output should be [12, 25, 2, 20]"},{"question":"**Story** Alice is working on a data science project, where she needs to analyze time-series data. As a part of her project, she often needs to calculate the \\"loveliness\\" of consecutive subarrays. The \\"loveliness\\" of a subarray is defined as the absolute difference between the maximum and minimum values in that subarray. Alice wants to automate this process but is currently stuck. Can you help Alice write a program to solve this problem? **Problem** Given an array of integers `arr` of length `N` and an integer `K`, determine the \\"loveliness\\" of every subarray of length `K`. **Input format** The input is given in the following format: ``` N arr_1 arr_2 ... arr_N K ``` All inputs consist of integers. The first line is given as the length `N` of the array `arr`. The second line that follows is given `N` integers separated by blanks, representing the elements of `arr`. The third line is given the integer `K`, representing the length of the subarray. **Constraints** * 1 ≤ N ≤ 10^5 * 1 ≤ arr[i] ≤ 10^6 * 1 ≤ K ≤ N **Output format** Print the \\"loveliness\\" of each subarray of length `K` in a single line separated by spaces. **Input example 1** ``` 5 1 3 5 7 9 3 ``` **Output example 1** ``` 4 4 4 ``` **Input example 2** ``` 6 8 2 4 7 6 5 2 ``` **Output example 2** ``` 6 2 3 1 1 ``` **Example Explanation** In the first example: - Subarray [1, 3, 5] has a loveliness of `5 - 1 = 4` - Subarray [3, 5, 7] has a loveliness of `7 - 3 = 4` - Subarray [5, 7, 9] has a loveliness of `9 - 5 = 4` In the second example: - Subarray [8, 2] has a loveliness of `8 - 2 = 6` - Subarray [2, 4] has a loveliness of `4 - 2 = 2` - Subarray [4, 7] has a loveliness of `7 - 4 = 3` - Subarray [7, 6] has a loveliness of `7 - 6 = 1` - Subarray [6, 5] has a loveliness of `6 - 5 = 1`","solution":"def calculate_loveliness(N, arr, K): Calculates the loveliness of every subarray of length K. Parameters: N (int): Length of the array. arr (list): List of integers. K (int): Length of the subarray. Returns: list: A list of loveliness values for each subarray of length K. loveliness = [] for i in range(N - K + 1): subarray = arr[i:i + K] max_val = max(subarray) min_val = min(subarray) loveliness.append(max_val - min_val) return loveliness"},{"question":"The world-renowned chef, Gordon, has been invited to judge a prestigious cooking competition. In this competition, there are `n` chefs who each prepared a signature dish. Gordon wants to rate each dish and then determine the overall winner based on his ratings. In order to ensure fairness, Gordon decided that he will rate the dishes in ascending order of their preparation times, which are all distinct positive integers. Given the preparation times for each of the `n` dishes, you need to help Gordon by sorting the preparation times in ascending order and finding the dish that took the least amount of time to prepare. If there are multiple dishes with the same preparation time, the one with the smallest index is chosen. Input The first line contains a single integer `n` (1 ≤ n ≤ 10000), the number of dishes prepared. The second line contains `n` distinct positive integers `t1, t2, ..., tn` (1 ≤ ti ≤ 100000), the preparation times of each dish. Output Print the sorted preparation times of the dishes in ascending order on one line. On the next line, print the index (1-based) of the dish that took the least amount of time to prepare. Examples Input 5 4 2 9 5 1 Output 1 2 4 5 9 5 Input 3 15 10 30 Output 10 15 30 2","solution":"def judge_dishes(n, times): Sorts the preparation times in ascending order and finds the index of the least time. Parameters: n (int): Number of dishes. times (list of int): Preparation times of the dishes. Returns: tuple: Sorted preparation times and the 1-based index of the least preparation time. sorted_times = sorted(times) min_time_index = times.index(min(times)) + 1 # 1-based index return sorted_times, min_time_index"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],C={key:0},L={key:1};function z(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",C,"See more"))],8,F)):h("",!0)])}const R=d(S,[["render",z],["__scopeId","data-v-df1e65d6"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/46.md","filePath":"deepseek/46.md"}'),D={name:"deepseek/46.md"},U=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(R)]))}});export{B as __pageData,U as default};
